                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_disable
                                     29 	.globl _UART_init
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _FL
                                     37 	.globl _P
                                     38 	.globl _TF2
                                     39 	.globl _EXF2
                                     40 	.globl _RCLK
                                     41 	.globl _TCLK
                                     42 	.globl _EXEN2
                                     43 	.globl _TR2
                                     44 	.globl _C_T2
                                     45 	.globl _CP_RL2
                                     46 	.globl _T2CON_7
                                     47 	.globl _T2CON_6
                                     48 	.globl _T2CON_5
                                     49 	.globl _T2CON_4
                                     50 	.globl _T2CON_3
                                     51 	.globl _T2CON_2
                                     52 	.globl _T2CON_1
                                     53 	.globl _T2CON_0
                                     54 	.globl _PT2
                                     55 	.globl _PS
                                     56 	.globl _PT1
                                     57 	.globl _PX1
                                     58 	.globl _PT0
                                     59 	.globl _PX0
                                     60 	.globl _RD
                                     61 	.globl _WR
                                     62 	.globl _T1
                                     63 	.globl _T0
                                     64 	.globl _INT1
                                     65 	.globl _INT0
                                     66 	.globl _TXD
                                     67 	.globl _RXD
                                     68 	.globl _P3_7
                                     69 	.globl _P3_6
                                     70 	.globl _P3_5
                                     71 	.globl _P3_4
                                     72 	.globl _P3_3
                                     73 	.globl _P3_2
                                     74 	.globl _P3_1
                                     75 	.globl _P3_0
                                     76 	.globl _EA
                                     77 	.globl _ET2
                                     78 	.globl _ES
                                     79 	.globl _ET1
                                     80 	.globl _EX1
                                     81 	.globl _ET0
                                     82 	.globl _EX0
                                     83 	.globl _P2_7
                                     84 	.globl _P2_6
                                     85 	.globl _P2_5
                                     86 	.globl _P2_4
                                     87 	.globl _P2_3
                                     88 	.globl _P2_2
                                     89 	.globl _P2_1
                                     90 	.globl _P2_0
                                     91 	.globl _SM0
                                     92 	.globl _SM1
                                     93 	.globl _SM2
                                     94 	.globl _REN
                                     95 	.globl _TB8
                                     96 	.globl _RB8
                                     97 	.globl _TI
                                     98 	.globl _RI
                                     99 	.globl _T2EX
                                    100 	.globl _T2
                                    101 	.globl _P1_7
                                    102 	.globl _P1_6
                                    103 	.globl _P1_5
                                    104 	.globl _P1_4
                                    105 	.globl _P1_3
                                    106 	.globl _P1_2
                                    107 	.globl _P1_1
                                    108 	.globl _P1_0
                                    109 	.globl _TF1
                                    110 	.globl _TR1
                                    111 	.globl _TF0
                                    112 	.globl _TR0
                                    113 	.globl _IE1
                                    114 	.globl _IT1
                                    115 	.globl _IE0
                                    116 	.globl _IT0
                                    117 	.globl _P0_7
                                    118 	.globl _P0_6
                                    119 	.globl _P0_5
                                    120 	.globl _P0_4
                                    121 	.globl _P0_3
                                    122 	.globl _P0_2
                                    123 	.globl _P0_1
                                    124 	.globl _P0_0
                                    125 	.globl _B
                                    126 	.globl _A
                                    127 	.globl _ACC
                                    128 	.globl _PSW
                                    129 	.globl _TH2
                                    130 	.globl _TL2
                                    131 	.globl _RCAP2H
                                    132 	.globl _RCAP2L
                                    133 	.globl _T2MOD
                                    134 	.globl _T2CON
                                    135 	.globl _IP
                                    136 	.globl _P3
                                    137 	.globl _IE
                                    138 	.globl _P2
                                    139 	.globl _SBUF
                                    140 	.globl _SCON
                                    141 	.globl _P1
                                    142 	.globl _TH1
                                    143 	.globl _TH0
                                    144 	.globl _TL1
                                    145 	.globl _TL0
                                    146 	.globl _TMOD
                                    147 	.globl _TCON
                                    148 	.globl _PCON
                                    149 	.globl _DPH
                                    150 	.globl _DPL
                                    151 	.globl _SP
                                    152 	.globl _P0
                                    153 	.globl _frame_NEP
                                    154 	.globl _tempFrame
                                    155 	.globl __8b
                                    156 	.globl _pType
                                    157 	.globl _baudType
                                    158 	.globl _parityBit
                                    159 	.globl _parityEven
                                    160 	.globl _paritySet
                                    161 	.globl _bitSet
                                    162 	.globl _baudSet
                                    163 	.globl _UART_en
                                    164 	.globl _selection
                                    165 	.globl _drawChar_PARM_6
                                    166 	.globl _drawChar_PARM_5
                                    167 	.globl _drawChar_PARM_4
                                    168 	.globl _drawChar_PARM_3
                                    169 	.globl _drawChar_PARM_2
                                    170 	.globl _fillRect_PARM_5
                                    171 	.globl _fillRect_PARM_4
                                    172 	.globl _fillRect_PARM_3
                                    173 	.globl _fillRect_PARM_2
                                    174 	.globl _testCircles_PARM_2
                                    175 	.globl _drawCircle_PARM_4
                                    176 	.globl _drawCircle_PARM_3
                                    177 	.globl _drawCircle_PARM_2
                                    178 	.globl _drawPixel_PARM_3
                                    179 	.globl _drawPixel_PARM_2
                                    180 	.globl _rtcWrite_PARM_2
                                    181 	.globl __height
                                    182 	.globl __width
                                    183 	.globl _textbgcolor
                                    184 	.globl _textcolor
                                    185 	.globl _rotation
                                    186 	.globl _textsize
                                    187 	.globl _cursor_y
                                    188 	.globl _cursor_x
                                    189 	.globl _received_flag
                                    190 	.globl _received_byte
                                    191 	.globl _seg7_address
                                    192 	.globl _lcd_address
                                    193 	.globl _rowloc
                                    194 	.globl _colloc
                                    195 	.globl _iowrite8
                                    196 	.globl _ioread8
                                    197 	.globl _ramWrite8
                                    198 	.globl _ramRead8
                                    199 	.globl _writeAllRAM
                                    200 	.globl _checkAllRAM
                                    201 	.globl _delay
                                    202 	.globl _writeRegister8
                                    203 	.globl _writeRegister16
                                    204 	.globl _seg7Test
                                    205 	.globl _rtcInit
                                    206 	.globl _rtcBusy
                                    207 	.globl _rtcCmd
                                    208 	.globl _rtcWrite
                                    209 	.globl _rtcRead
                                    210 	.globl _rtcPrint
                                    211 	.globl _setCursor
                                    212 	.globl _setTextColor
                                    213 	.globl _setTextSize
                                    214 	.globl _setAddress
                                    215 	.globl _TFT_LCD_INIT
                                    216 	.globl _drawPixel
                                    217 	.globl _drawCircle
                                    218 	.globl _testCircles
                                    219 	.globl _fillRect
                                    220 	.globl _fillTop
                                    221 	.globl _fillScreen
                                    222 	.globl _clearLCD
                                    223 	.globl _LCD_string_write
                                    224 	.globl _writeNewLine
                                    225 	.globl _freeType
                                    226 	.globl _keyDetect
                                    227 	.globl _reverse
                                    228 	.globl _reverse16
                                    229 	.globl _hexToASCII
                                    230 	.globl _ASCIItoHex
                                    231 	.globl _asciiToDec
                                    232 	.globl _asciiToHex
                                    233 	.globl _print4Hex
                                    234 	.globl _print8Hex
                                    235 	.globl _print16Hex
                                    236 	.globl _print16Dec
                                    237 	.globl _print8ASCII
                                    238 	.globl _print16ASCII
                                    239 	.globl _setColorDefault
                                    240 	.globl _setColorSelect
                                    241 	.globl _setColorHighlight1
                                    242 	.globl _setColorHighlight2
                                    243 	.globl _setColorGray
                                    244 	.globl _setColorMenu
                                    245 	.globl _setColorRed
                                    246 	.globl _setColorWhite
                                    247 	.globl _setColorGreen
                                    248 	.globl _setColorYellow
                                    249 	.globl _inputAddress
                                    250 	.globl _inputBlockType
                                    251 	.globl _inputBlockSize
                                    252 	.globl _printMenu
                                    253 	.globl _dump
                                    254 	.globl _move
                                    255 	.globl _edit
                                    256 	.globl _find
                                    257 	.globl _count
                                    258 	.globl _check
                                    259 	.globl _uart
                                    260 	.globl _main
                                    261 ;--------------------------------------------------------
                                    262 ; special function registers
                                    263 ;--------------------------------------------------------
                                    264 	.area RSEG    (ABS,DATA)
      000000                        265 	.org 0x0000
                           000080   266 _P0	=	0x0080
                           000081   267 _SP	=	0x0081
                           000082   268 _DPL	=	0x0082
                           000083   269 _DPH	=	0x0083
                           000087   270 _PCON	=	0x0087
                           000088   271 _TCON	=	0x0088
                           000089   272 _TMOD	=	0x0089
                           00008A   273 _TL0	=	0x008a
                           00008B   274 _TL1	=	0x008b
                           00008C   275 _TH0	=	0x008c
                           00008D   276 _TH1	=	0x008d
                           000090   277 _P1	=	0x0090
                           000098   278 _SCON	=	0x0098
                           000099   279 _SBUF	=	0x0099
                           0000A0   280 _P2	=	0x00a0
                           0000A8   281 _IE	=	0x00a8
                           0000B0   282 _P3	=	0x00b0
                           0000B8   283 _IP	=	0x00b8
                           0000C8   284 _T2CON	=	0x00c8
                           0000C9   285 _T2MOD	=	0x00c9
                           0000CA   286 _RCAP2L	=	0x00ca
                           0000CB   287 _RCAP2H	=	0x00cb
                           0000CC   288 _TL2	=	0x00cc
                           0000CD   289 _TH2	=	0x00cd
                           0000D0   290 _PSW	=	0x00d0
                           0000E0   291 _ACC	=	0x00e0
                           0000E0   292 _A	=	0x00e0
                           0000F0   293 _B	=	0x00f0
                                    294 ;--------------------------------------------------------
                                    295 ; special function bits
                                    296 ;--------------------------------------------------------
                                    297 	.area RSEG    (ABS,DATA)
      000000                        298 	.org 0x0000
                           000080   299 _P0_0	=	0x0080
                           000081   300 _P0_1	=	0x0081
                           000082   301 _P0_2	=	0x0082
                           000083   302 _P0_3	=	0x0083
                           000084   303 _P0_4	=	0x0084
                           000085   304 _P0_5	=	0x0085
                           000086   305 _P0_6	=	0x0086
                           000087   306 _P0_7	=	0x0087
                           000088   307 _IT0	=	0x0088
                           000089   308 _IE0	=	0x0089
                           00008A   309 _IT1	=	0x008a
                           00008B   310 _IE1	=	0x008b
                           00008C   311 _TR0	=	0x008c
                           00008D   312 _TF0	=	0x008d
                           00008E   313 _TR1	=	0x008e
                           00008F   314 _TF1	=	0x008f
                           000090   315 _P1_0	=	0x0090
                           000091   316 _P1_1	=	0x0091
                           000092   317 _P1_2	=	0x0092
                           000093   318 _P1_3	=	0x0093
                           000094   319 _P1_4	=	0x0094
                           000095   320 _P1_5	=	0x0095
                           000096   321 _P1_6	=	0x0096
                           000097   322 _P1_7	=	0x0097
                           000090   323 _T2	=	0x0090
                           000091   324 _T2EX	=	0x0091
                           000098   325 _RI	=	0x0098
                           000099   326 _TI	=	0x0099
                           00009A   327 _RB8	=	0x009a
                           00009B   328 _TB8	=	0x009b
                           00009C   329 _REN	=	0x009c
                           00009D   330 _SM2	=	0x009d
                           00009E   331 _SM1	=	0x009e
                           00009F   332 _SM0	=	0x009f
                           0000A0   333 _P2_0	=	0x00a0
                           0000A1   334 _P2_1	=	0x00a1
                           0000A2   335 _P2_2	=	0x00a2
                           0000A3   336 _P2_3	=	0x00a3
                           0000A4   337 _P2_4	=	0x00a4
                           0000A5   338 _P2_5	=	0x00a5
                           0000A6   339 _P2_6	=	0x00a6
                           0000A7   340 _P2_7	=	0x00a7
                           0000A8   341 _EX0	=	0x00a8
                           0000A9   342 _ET0	=	0x00a9
                           0000AA   343 _EX1	=	0x00aa
                           0000AB   344 _ET1	=	0x00ab
                           0000AC   345 _ES	=	0x00ac
                           0000AD   346 _ET2	=	0x00ad
                           0000AF   347 _EA	=	0x00af
                           0000B0   348 _P3_0	=	0x00b0
                           0000B1   349 _P3_1	=	0x00b1
                           0000B2   350 _P3_2	=	0x00b2
                           0000B3   351 _P3_3	=	0x00b3
                           0000B4   352 _P3_4	=	0x00b4
                           0000B5   353 _P3_5	=	0x00b5
                           0000B6   354 _P3_6	=	0x00b6
                           0000B7   355 _P3_7	=	0x00b7
                           0000B0   356 _RXD	=	0x00b0
                           0000B1   357 _TXD	=	0x00b1
                           0000B2   358 _INT0	=	0x00b2
                           0000B3   359 _INT1	=	0x00b3
                           0000B4   360 _T0	=	0x00b4
                           0000B5   361 _T1	=	0x00b5
                           0000B6   362 _WR	=	0x00b6
                           0000B7   363 _RD	=	0x00b7
                           0000B8   364 _PX0	=	0x00b8
                           0000B9   365 _PT0	=	0x00b9
                           0000BA   366 _PX1	=	0x00ba
                           0000BB   367 _PT1	=	0x00bb
                           0000BC   368 _PS	=	0x00bc
                           0000BD   369 _PT2	=	0x00bd
                           0000C8   370 _T2CON_0	=	0x00c8
                           0000C9   371 _T2CON_1	=	0x00c9
                           0000CA   372 _T2CON_2	=	0x00ca
                           0000CB   373 _T2CON_3	=	0x00cb
                           0000CC   374 _T2CON_4	=	0x00cc
                           0000CD   375 _T2CON_5	=	0x00cd
                           0000CE   376 _T2CON_6	=	0x00ce
                           0000CF   377 _T2CON_7	=	0x00cf
                           0000C8   378 _CP_RL2	=	0x00c8
                           0000C9   379 _C_T2	=	0x00c9
                           0000CA   380 _TR2	=	0x00ca
                           0000CB   381 _EXEN2	=	0x00cb
                           0000CC   382 _TCLK	=	0x00cc
                           0000CD   383 _RCLK	=	0x00cd
                           0000CE   384 _EXF2	=	0x00ce
                           0000CF   385 _TF2	=	0x00cf
                           0000D0   386 _P	=	0x00d0
                           0000D1   387 _FL	=	0x00d1
                           0000D2   388 _OV	=	0x00d2
                           0000D3   389 _RS0	=	0x00d3
                           0000D4   390 _RS1	=	0x00d4
                           0000D5   391 _F0	=	0x00d5
                           0000D6   392 _AC	=	0x00d6
                           0000D7   393 _CY	=	0x00d7
                                    394 ;--------------------------------------------------------
                                    395 ; overlayable register banks
                                    396 ;--------------------------------------------------------
                                    397 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        398 	.ds 8
                                    399 ;--------------------------------------------------------
                                    400 ; internal ram data
                                    401 ;--------------------------------------------------------
                                    402 	.area DSEG    (DATA)
      000000                        403 _colloc::
      000000                        404 	.ds 1
      000001                        405 _rowloc::
      000001                        406 	.ds 1
      000002                        407 _lcd_address::
      000002                        408 	.ds 2
      000004                        409 _seg7_address::
      000004                        410 	.ds 2
      000006                        411 _received_byte::
      000006                        412 	.ds 1
      000007                        413 _received_flag::
      000007                        414 	.ds 1
      000008                        415 _cursor_x::
      000008                        416 	.ds 2
      00000A                        417 _cursor_y::
      00000A                        418 	.ds 2
      00000C                        419 _textsize::
      00000C                        420 	.ds 1
      00000D                        421 _rotation::
      00000D                        422 	.ds 1
      00000E                        423 _textcolor::
      00000E                        424 	.ds 2
      000010                        425 _textbgcolor::
      000010                        426 	.ds 2
      000012                        427 __width::
      000012                        428 	.ds 2
      000014                        429 __height::
      000014                        430 	.ds 2
      000016                        431 _rtcWrite_PARM_2:
      000016                        432 	.ds 1
      000017                        433 _rtcPrint_printval_65536_226:
      000017                        434 	.ds 9
      000020                        435 _drawPixel_PARM_2:
      000020                        436 	.ds 2
      000022                        437 _drawPixel_PARM_3:
      000022                        438 	.ds 2
      000024                        439 _drawCircle_PARM_2:
      000024                        440 	.ds 2
      000026                        441 _drawCircle_PARM_3:
      000026                        442 	.ds 2
      000028                        443 _drawCircle_PARM_4:
      000028                        444 	.ds 2
      00002A                        445 _drawCircle_x0_65536_393:
      00002A                        446 	.ds 2
      00002C                        447 _drawCircle_f_65536_394:
      00002C                        448 	.ds 2
      00002E                        449 _drawCircle_ddF_x_65536_394:
      00002E                        450 	.ds 2
      000030                        451 _drawCircle_x_65536_394:
      000030                        452 	.ds 2
      000032                        453 _testCircles_PARM_2:
      000032                        454 	.ds 2
      000034                        455 _testCircles_w_65536_398:
      000034                        456 	.ds 2
      000036                        457 _testCircles_h_65536_398:
      000036                        458 	.ds 2
      000038                        459 _fillRect_PARM_2:
      000038                        460 	.ds 2
      00003A                        461 _fillRect_PARM_3:
      00003A                        462 	.ds 2
      00003C                        463 _fillRect_PARM_4:
      00003C                        464 	.ds 2
      00003E                        465 _fillRect_PARM_5:
      00003E                        466 	.ds 2
      000040                        467 _drawChar_PARM_2:
      000040                        468 	.ds 2
      000042                        469 _drawChar_PARM_3:
      000042                        470 	.ds 1
      000043                        471 _drawChar_PARM_4:
      000043                        472 	.ds 2
      000045                        473 _drawChar_PARM_5:
      000045                        474 	.ds 2
      000047                        475 _drawChar_PARM_6:
      000047                        476 	.ds 1
      000048                        477 _drawChar_x_65536_458:
      000048                        478 	.ds 2
      00004A                        479 _drawChar_i_131072_461:
      00004A                        480 	.ds 1
      00004B                        481 _drawChar_line_196608_462:
      00004B                        482 	.ds 1
      00004C                        483 _drawChar_sloc0_1_0:
      00004C                        484 	.ds 2
      00004E                        485 _asciiToHex_store_65536_519:
      00004E                        486 	.ds 2
      000050                        487 _dump_d_65536_553:
      000050                        488 	.ds 2
      000052                        489 _dump_sloc0_1_0:
      000052                        490 	.ds 1
      000053                        491 _move_d_65536_609:
      000053                        492 	.ds 2
      000055                        493 _move_i_131072_618:
      000055                        494 	.ds 2
      000057                        495 _edit_d_65536_628:
      000057                        496 	.ds 2
      000059                        497 _find_i_262144_665:
      000059                        498 	.ds 2
      00005B                        499 _find_sloc0_1_0:
      00005B                        500 	.ds 1
      00005C                        501 _find_sloc1_1_0:
      00005C                        502 	.ds 2
      00005E                        503 _count_i_262144_721:
      00005E                        504 	.ds 2
      000060                        505 _count_sloc0_1_0:
      000060                        506 	.ds 1
      000061                        507 _count_sloc1_1_0:
      000061                        508 	.ds 2
                                    509 ;--------------------------------------------------------
                                    510 ; overlayable items in internal ram 
                                    511 ;--------------------------------------------------------
                                    512 	.area	OSEG    (OVR,DATA)
      000000                        513 _iowrite8_PARM_2:
      000000                        514 	.ds 1
                                    515 	.area	OSEG    (OVR,DATA)
                                    516 	.area	OSEG    (OVR,DATA)
      000000                        517 _ramWrite8_PARM_2:
      000000                        518 	.ds 1
                                    519 	.area	OSEG    (OVR,DATA)
                                    520 	.area	OSEG    (OVR,DATA)
                                    521 	.area	OSEG    (OVR,DATA)
                                    522 	.area	OSEG    (OVR,DATA)
                                    523 	.area	OSEG    (OVR,DATA)
      000000                        524 _writeRegister8_PARM_2:
      000000                        525 	.ds 1
                                    526 	.area	OSEG    (OVR,DATA)
      000000                        527 _writeRegister16_PARM_2:
      000000                        528 	.ds 2
                                    529 	.area	OSEG    (OVR,DATA)
                                    530 	.area	OSEG    (OVR,DATA)
      000000                        531 _rtcCmd_PARM_2:
      000000                        532 	.ds 1
                                    533 	.area	OSEG    (OVR,DATA)
      000000                        534 _setCursor_PARM_2:
      000000                        535 	.ds 2
                                    536 	.area	OSEG    (OVR,DATA)
      000000                        537 _setTextColor_PARM_2:
      000000                        538 	.ds 2
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
      000000                        541 _setAddress_PARM_2:
      000000                        542 	.ds 2
      000002                        543 _setAddress_PARM_3:
      000002                        544 	.ds 2
      000004                        545 _setAddress_PARM_4:
      000004                        546 	.ds 2
                                    547 	.area	OSEG    (OVR,DATA)
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 ;--------------------------------------------------------
                                    550 ; Stack segment in internal ram 
                                    551 ;--------------------------------------------------------
                                    552 	.area	SSEG
      000000                        553 __start__stack:
      000000                        554 	.ds	1
                                    555 
                                    556 ;--------------------------------------------------------
                                    557 ; indirectly addressable internal ram data
                                    558 ;--------------------------------------------------------
                                    559 	.area ISEG    (DATA)
      000000                        560 _selection::
      000000                        561 	.ds 1
      000001                        562 _UART_en::
      000001                        563 	.ds 1
      000002                        564 _baudSet::
      000002                        565 	.ds 1
      000003                        566 _bitSet::
      000003                        567 	.ds 1
      000004                        568 _paritySet::
      000004                        569 	.ds 1
      000005                        570 _parityEven::
      000005                        571 	.ds 1
      000006                        572 _parityBit::
      000006                        573 	.ds 1
      000007                        574 _baudType::
      000007                        575 	.ds 1
      000008                        576 _pType::
      000008                        577 	.ds 1
      000009                        578 __8b::
      000009                        579 	.ds 1
      00000A                        580 _tempFrame::
      00000A                        581 	.ds 2
      00000C                        582 _frame_NEP::
      00000C                        583 	.ds 2
      00000E                        584 _dump_address_65536_553:
      00000E                        585 	.ds 2
      000010                        586 _dump_exit_65536_553:
      000010                        587 	.ds 1
      000011                        588 _move_sourceAddress_65536_609:
      000011                        589 	.ds 2
      000013                        590 _move_invalidSize_65536_609:
      000013                        591 	.ds 1
      000014                        592 _edit_exit_65536_628:
      000014                        593 	.ds 1
      000015                        594 _edit_invalid_65536_628:
      000015                        595 	.ds 1
      000016                        596 _find_address_65536_652:
      000016                        597 	.ds 2
      000018                        598 _find_blockSize_65536_652:
      000018                        599 	.ds 1
      000019                        600 _find_value_65536_652:
      000019                        601 	.ds 1
      00001A                        602 _find_scan_65536_652:
      00001A                        603 	.ds 1
      00001B                        604 _find_noneFound_65536_652:
      00001B                        605 	.ds 1
      00001C                        606 _find_exit_65536_652:
      00001C                        607 	.ds 1
      00001D                        608 _count_address_65536_708:
      00001D                        609 	.ds 2
      00001F                        610 _count_blockSize_65536_708:
      00001F                        611 	.ds 1
      000020                        612 _count_value_65536_708:
      000020                        613 	.ds 1
      000021                        614 _count_scan_65536_708:
      000021                        615 	.ds 1
      000022                        616 _count_noneFound_65536_708:
      000022                        617 	.ds 1
      000023                        618 _count_exit_65536_708:
      000023                        619 	.ds 1
                                    620 ;--------------------------------------------------------
                                    621 ; absolute internal ram data
                                    622 ;--------------------------------------------------------
                                    623 	.area IABS    (ABS,DATA)
                                    624 	.area IABS    (ABS,DATA)
                                    625 ;--------------------------------------------------------
                                    626 ; bit data
                                    627 ;--------------------------------------------------------
                                    628 	.area BSEG    (BIT)
                                    629 ;--------------------------------------------------------
                                    630 ; paged external ram data
                                    631 ;--------------------------------------------------------
                                    632 	.area PSEG    (PAG,XDATA)
                                    633 ;--------------------------------------------------------
                                    634 ; external ram data
                                    635 ;--------------------------------------------------------
                                    636 	.area XSEG    (XDATA)
                                    637 ;--------------------------------------------------------
                                    638 ; absolute external ram data
                                    639 ;--------------------------------------------------------
                                    640 	.area XABS    (ABS,XDATA)
                                    641 ;--------------------------------------------------------
                                    642 ; external initialized ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area XISEG   (XDATA)
                                    645 	.area HOME    (CODE)
                                    646 	.area GSINIT0 (CODE)
                                    647 	.area GSINIT1 (CODE)
                                    648 	.area GSINIT2 (CODE)
                                    649 	.area GSINIT3 (CODE)
                                    650 	.area GSINIT4 (CODE)
                                    651 	.area GSINIT5 (CODE)
                                    652 	.area GSINIT  (CODE)
                                    653 	.area GSFINAL (CODE)
                                    654 	.area CSEG    (CODE)
                                    655 ;--------------------------------------------------------
                                    656 ; interrupt vector 
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
      000000                        659 __interrupt_vect:
      000000 02r00r00         [24]  660 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  661 	reti
      000004                        662 	.ds	7
      00000B 32               [24]  663 	reti
      00000C                        664 	.ds	7
      000013 32               [24]  665 	reti
      000014                        666 	.ds	7
      00001B 32               [24]  667 	reti
      00001C                        668 	.ds	7
      000023 02r01r69         [24]  669 	ljmp	_ISR_receive
                                    670 ;--------------------------------------------------------
                                    671 ; global & static initialisations
                                    672 ;--------------------------------------------------------
                                    673 	.area HOME    (CODE)
                                    674 	.area GSINIT  (CODE)
                                    675 	.area GSFINAL (CODE)
                                    676 	.area GSINIT  (CODE)
                                    677 	.globl __sdcc_gsinit_startup
                                    678 	.globl __sdcc_program_startup
                                    679 	.globl __start__stack
                                    680 	.globl __mcs51_genXINIT
                                    681 	.globl __mcs51_genXRAMCLEAR
                                    682 	.globl __mcs51_genRAMCLEAR
                                    683 ;	.\ecen4350_lcd_v4.c:42: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000000 75*02 00         [24]  684 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  685 	mov	(_lcd_address + 1),#0x40
                                    686 ;	.\ecen4350_lcd_v4.c:43: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000006 75*04 00         [24]  687 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  688 	mov	(_seg7_address + 1),#0x80
                                    689 ;	.\ecen4350_lcd_v4.c:45: volatile unsigned char received_byte = 0;
      00000C 75*06 00         [24]  690 	mov	_received_byte,#0x00
                                    691 ;	.\ecen4350_lcd_v4.c:46: volatile unsigned char received_flag = 0;
      00000F 75*07 00         [24]  692 	mov	_received_flag,#0x00
                                    693 ;	.\ecen4350_lcd_v4.c:49: __idata unsigned char UART_en = 0;
      000012 78r01            [12]  694 	mov	r0,#_UART_en
      000014 76 00            [12]  695 	mov	@r0,#0x00
                                    696 ;	.\ecen4350_lcd_v4.c:50: __idata unsigned char baudSet = 0;
      000016 78r02            [12]  697 	mov	r0,#_baudSet
      000018 76 00            [12]  698 	mov	@r0,#0x00
                                    699 ;	.\ecen4350_lcd_v4.c:51: __idata unsigned char bitSet = 0;
      00001A 78r03            [12]  700 	mov	r0,#_bitSet
      00001C 76 00            [12]  701 	mov	@r0,#0x00
                                    702 ;	.\ecen4350_lcd_v4.c:52: __idata unsigned char paritySet = 0;
      00001E 78r04            [12]  703 	mov	r0,#_paritySet
      000020 76 00            [12]  704 	mov	@r0,#0x00
                                    705 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char parityEven = 'null';
      000022 78r05            [12]  706 	mov	r0,#_parityEven
      000024 76 6E            [12]  707 	mov	@r0,#0x6e
                                    708 ;	.\ecen4350_lcd_v4.c:54: __idata unsigned char parityBit = 'null';
      000026 78r06            [12]  709 	mov	r0,#_parityBit
      000028 76 6E            [12]  710 	mov	@r0,#0x6e
                                    711 ;	.\ecen4350_lcd_v4.c:55: __idata unsigned char baudType = 'null';
      00002A 78r07            [12]  712 	mov	r0,#_baudType
      00002C 76 6E            [12]  713 	mov	@r0,#0x6e
                                    714 ;	.\ecen4350_lcd_v4.c:56: __idata unsigned char pType = 'null';
      00002E 78r08            [12]  715 	mov	r0,#_pType
      000030 76 6E            [12]  716 	mov	@r0,#0x6e
                                    717 ;	.\ecen4350_lcd_v4.c:57: __idata unsigned char _8b = 'null';
      000032 78r09            [12]  718 	mov	r0,#__8b
      000034 76 6E            [12]  719 	mov	@r0,#0x6e
                                    720 ;	.\ecen4350_lcd_v4.c:58: __idata unsigned int tempFrame = 'null';
      000036 78r0A            [12]  721 	mov	r0,#_tempFrame
      000038 76 6E            [12]  722 	mov	@r0,#0x6e
      00003A 08               [12]  723 	inc	r0
      00003B 76 00            [12]  724 	mov	@r0,#0x00
                                    725 ;	.\ecen4350_lcd_v4.c:59: __idata unsigned int frame_NEP = 'null';	//	bitMode | Even/odd | Set/not
      00003D 78r0C            [12]  726 	mov	r0,#_frame_NEP
      00003F 76 6E            [12]  727 	mov	@r0,#0x6e
      000041 08               [12]  728 	inc	r0
      000042 76 00            [12]  729 	mov	@r0,#0x00
                                    730 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  731 	ljmp	__sdcc_program_startup
                                    732 ;--------------------------------------------------------
                                    733 ; Home
                                    734 ;--------------------------------------------------------
                                    735 	.area HOME    (CODE)
                                    736 	.area HOME    (CODE)
      000026                        737 __sdcc_program_startup:
      000026 02r52rED         [24]  738 	ljmp	_main
                                    739 ;	return from main will return to caller
                                    740 ;--------------------------------------------------------
                                    741 ; code
                                    742 ;--------------------------------------------------------
                                    743 	.area CSEG    (CODE)
                                    744 ;------------------------------------------------------------
                                    745 ;Allocation info for local variables in function 'iowrite8'
                                    746 ;------------------------------------------------------------
                                    747 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    748 ;map_address               Allocated to registers 
                                    749 ;------------------------------------------------------------
                                    750 ;	.\ecen4350_lcd_v4.c:104: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    751 ;	-----------------------------------------
                                    752 ;	 function iowrite8
                                    753 ;	-----------------------------------------
      000000                        754 _iowrite8:
                           000007   755 	ar7 = 0x07
                           000006   756 	ar6 = 0x06
                           000005   757 	ar5 = 0x05
                           000004   758 	ar4 = 0x04
                           000003   759 	ar3 = 0x03
                           000002   760 	ar2 = 0x02
                           000001   761 	ar1 = 0x01
                           000000   762 	ar0 = 0x00
                                    763 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    764 ;	assignBit
      000000 D2 B5            [12]  765 	setb	_P3_5
                                    766 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000002 E5*00            [12]  767 	mov	a,_iowrite8_PARM_2
      000004 F0               [24]  768 	movx	@dptr,a
                                    769 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    770 ;	assignBit
      000005 C2 B5            [12]  771 	clr	_P3_5
                                    772 ;	.\ecen4350_lcd_v4.c:108: }
      000007 22               [24]  773 	ret
                                    774 ;------------------------------------------------------------
                                    775 ;Allocation info for local variables in function 'ioread8'
                                    776 ;------------------------------------------------------------
                                    777 ;map_address               Allocated to registers 
                                    778 ;d                         Allocated to registers r7 
                                    779 ;------------------------------------------------------------
                                    780 ;	.\ecen4350_lcd_v4.c:110: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    781 ;	-----------------------------------------
                                    782 ;	 function ioread8
                                    783 ;	-----------------------------------------
      000008                        784 _ioread8:
                                    785 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                    786 ;	assignBit
      000008 D2 B5            [12]  787 	setb	_P3_5
                                    788 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      00000A E0               [24]  789 	movx	a,@dptr
      00000B FF               [12]  790 	mov	r7,a
                                    791 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                    792 ;	assignBit
      00000C C2 B5            [12]  793 	clr	_P3_5
                                    794 ;	.\ecen4350_lcd_v4.c:116: return d;
      00000E 8F 82            [24]  795 	mov	dpl,r7
                                    796 ;	.\ecen4350_lcd_v4.c:117: }
      000010 22               [24]  797 	ret
                                    798 ;------------------------------------------------------------
                                    799 ;Allocation info for local variables in function 'ramWrite8'
                                    800 ;------------------------------------------------------------
                                    801 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    802 ;map_address               Allocated to registers 
                                    803 ;------------------------------------------------------------
                                    804 ;	.\ecen4350_lcd_v4.c:119: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    805 ;	-----------------------------------------
                                    806 ;	 function ramWrite8
                                    807 ;	-----------------------------------------
      000011                        808 _ramWrite8:
                                    809 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                    810 ;	assignBit
      000011 C2 B5            [12]  811 	clr	_P3_5
                                    812 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      000013 E5*00            [12]  813 	mov	a,_ramWrite8_PARM_2
      000015 F0               [24]  814 	movx	@dptr,a
                                    815 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                    816 ;	assignBit
      000016 D2 B5            [12]  817 	setb	_P3_5
                                    818 ;	.\ecen4350_lcd_v4.c:124: }
      000018 22               [24]  819 	ret
                                    820 ;------------------------------------------------------------
                                    821 ;Allocation info for local variables in function 'ramRead8'
                                    822 ;------------------------------------------------------------
                                    823 ;map_address               Allocated to registers 
                                    824 ;d                         Allocated to registers r7 
                                    825 ;------------------------------------------------------------
                                    826 ;	.\ecen4350_lcd_v4.c:126: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    827 ;	-----------------------------------------
                                    828 ;	 function ramRead8
                                    829 ;	-----------------------------------------
      000019                        830 _ramRead8:
                                    831 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                    832 ;	assignBit
      000019 C2 B5            [12]  833 	clr	_P3_5
                                    834 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      00001B E0               [24]  835 	movx	a,@dptr
      00001C FF               [12]  836 	mov	r7,a
                                    837 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                    838 ;	assignBit
      00001D D2 B5            [12]  839 	setb	_P3_5
                                    840 ;	.\ecen4350_lcd_v4.c:132: return d;
      00001F 8F 82            [24]  841 	mov	dpl,r7
                                    842 ;	.\ecen4350_lcd_v4.c:133: }
      000021 22               [24]  843 	ret
                                    844 ;------------------------------------------------------------
                                    845 ;Allocation info for local variables in function 'writeAllRAM'
                                    846 ;------------------------------------------------------------
                                    847 ;d                         Allocated to registers r7 
                                    848 ;i                         Allocated to registers r3 r4 r5 r6 
                                    849 ;ram_address               Allocated to registers 
                                    850 ;------------------------------------------------------------
                                    851 ;	.\ecen4350_lcd_v4.c:135: void writeAllRAM(unsigned char d)
                                    852 ;	-----------------------------------------
                                    853 ;	 function writeAllRAM
                                    854 ;	-----------------------------------------
      000022                        855 _writeAllRAM:
      000022 AF 82            [24]  856 	mov	r7,dpl
                                    857 ;	.\ecen4350_lcd_v4.c:140: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000024 7B 00            [12]  858 	mov	r3,#0x00
      000026 7C 00            [12]  859 	mov	r4,#0x00
      000028 7D 00            [12]  860 	mov	r5,#0x00
      00002A 7E 00            [12]  861 	mov	r6,#0x00
      00002C                        862 00102$:
                                    863 ;	.\ecen4350_lcd_v4.c:142: IOM = 0;
                                    864 ;	assignBit
      00002C C2 B5            [12]  865 	clr	_P3_5
                                    866 ;	.\ecen4350_lcd_v4.c:143: ram_address = (unsigned char __xdata *)(i);
      00002E 8B 82            [24]  867 	mov	dpl,r3
      000030 8C 83            [24]  868 	mov	dph,r4
                                    869 ;	.\ecen4350_lcd_v4.c:144: *ram_address = d;
      000032 EF               [12]  870 	mov	a,r7
      000033 F0               [24]  871 	movx	@dptr,a
                                    872 ;	.\ecen4350_lcd_v4.c:145: IOM = 1;
                                    873 ;	assignBit
      000034 D2 B5            [12]  874 	setb	_P3_5
                                    875 ;	.\ecen4350_lcd_v4.c:140: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000036 0B               [12]  876 	inc	r3
      000037 BB 00 09         [24]  877 	cjne	r3,#0x00,00111$
      00003A 0C               [12]  878 	inc	r4
      00003B BC 00 05         [24]  879 	cjne	r4,#0x00,00111$
      00003E 0D               [12]  880 	inc	r5
      00003F BD 00 01         [24]  881 	cjne	r5,#0x00,00111$
      000042 0E               [12]  882 	inc	r6
      000043                        883 00111$:
      000043 C3               [12]  884 	clr	c
      000044 74 FF            [12]  885 	mov	a,#0xff
      000046 9B               [12]  886 	subb	a,r3
      000047 74 FF            [12]  887 	mov	a,#0xff
      000049 9C               [12]  888 	subb	a,r4
      00004A E4               [12]  889 	clr	a
      00004B 9D               [12]  890 	subb	a,r5
      00004C E4               [12]  891 	clr	a
      00004D 9E               [12]  892 	subb	a,r6
      00004E 50 DC            [24]  893 	jnc	00102$
                                    894 ;	.\ecen4350_lcd_v4.c:147: }
      000050 22               [24]  895 	ret
                                    896 ;------------------------------------------------------------
                                    897 ;Allocation info for local variables in function 'checkAllRAM'
                                    898 ;------------------------------------------------------------
                                    899 ;d                         Allocated to registers r7 
                                    900 ;ram_address               Allocated to registers 
                                    901 ;i                         Allocated to registers r3 r4 r5 r6 
                                    902 ;__3276800001              Allocated to registers 
                                    903 ;__3276800002              Allocated to registers 
                                    904 ;map_address               Allocated to registers 
                                    905 ;d                         Allocated to registers 
                                    906 ;__2621440004              Allocated to registers 
                                    907 ;__2621440005              Allocated to registers 
                                    908 ;map_address               Allocated to registers 
                                    909 ;d                         Allocated to registers 
                                    910 ;------------------------------------------------------------
                                    911 ;	.\ecen4350_lcd_v4.c:149: void checkAllRAM(unsigned char d)
                                    912 ;	-----------------------------------------
                                    913 ;	 function checkAllRAM
                                    914 ;	-----------------------------------------
      000051                        915 _checkAllRAM:
      000051 AF 82            [24]  916 	mov	r7,dpl
                                    917 ;	.\ecen4350_lcd_v4.c:152: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000053 7B 00            [12]  918 	mov	r3,#0x00
      000055 7C 00            [12]  919 	mov	r4,#0x00
      000057 7D 00            [12]  920 	mov	r5,#0x00
      000059 7E 00            [12]  921 	mov	r6,#0x00
      00005B                        922 00107$:
      00005B C3               [12]  923 	clr	c
      00005C 74 FF            [12]  924 	mov	a,#0xff
      00005E 9B               [12]  925 	subb	a,r3
      00005F 74 FF            [12]  926 	mov	a,#0xff
      000061 9C               [12]  927 	subb	a,r4
      000062 E4               [12]  928 	clr	a
      000063 9D               [12]  929 	subb	a,r5
      000064 E4               [12]  930 	clr	a
      000065 9E               [12]  931 	subb	a,r6
      000066 50 01            [24]  932 	jnc	00124$
      000068 22               [24]  933 	ret
      000069                        934 00124$:
                                    935 ;	.\ecen4350_lcd_v4.c:153: IOM = 0;
                                    936 ;	assignBit
      000069 C2 B5            [12]  937 	clr	_P3_5
                                    938 ;	.\ecen4350_lcd_v4.c:154: ram_address = (unsigned char __xdata *)(i);
      00006B 8B 82            [24]  939 	mov	dpl,r3
      00006D 8C 83            [24]  940 	mov	dph,r4
                                    941 ;	.\ecen4350_lcd_v4.c:156: if(d != *ram_address) {
      00006F E0               [24]  942 	movx	a,@dptr
      000070 FA               [12]  943 	mov	r2,a
      000071 EF               [12]  944 	mov	a,r7
      000072 B5 02 02         [24]  945 	cjne	a,ar2,00125$
      000075 80 4A            [24]  946 	sjmp	00102$
      000077                        947 00125$:
                                    948 ;	.\ecen4350_lcd_v4.c:157: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      000077 85*04 82         [24]  949 	mov	dpl,_seg7_address
      00007A 85*05 83         [24]  950 	mov	dph,(_seg7_address + 1)
                                    951 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    952 ;	assignBit
      00007D D2 B5            [12]  953 	setb	_P3_5
                                    954 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00007F 74 8E            [12]  955 	mov	a,#0x8e
      000081 F0               [24]  956 	movx	@dptr,a
                                    957 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    958 ;	assignBit
      000082 C2 B5            [12]  959 	clr	_P3_5
                                    960 ;	.\ecen4350_lcd_v4.c:158: setCursor(0,0);
      000084 E4               [12]  961 	clr	a
      000085 F5*00            [12]  962 	mov	_setCursor_PARM_2,a
      000087 F5*01            [12]  963 	mov	(_setCursor_PARM_2 + 1),a
      000089 90 00 00         [24]  964 	mov	dptr,#0x0000
      00008C C0 07            [24]  965 	push	ar7
      00008E C0 06            [24]  966 	push	ar6
      000090 C0 05            [24]  967 	push	ar5
      000092 C0 04            [24]  968 	push	ar4
      000094 C0 03            [24]  969 	push	ar3
      000096 12r04rF6         [24]  970 	lcall	_setCursor
                                    971 ;	.\ecen4350_lcd_v4.c:159: LCD_string_write("ERROR FOUND At: ");
      000099 90r05r0B         [24]  972 	mov	dptr,#___str_0
      00009C 75 F0 80         [24]  973 	mov	b,#0x80
      00009F 12r10r10         [24]  974 	lcall	_LCD_string_write
      0000A2 D0 03            [24]  975 	pop	ar3
      0000A4 D0 04            [24]  976 	pop	ar4
                                    977 ;	.\ecen4350_lcd_v4.c:160: print16Hex(i);
      0000A6 8B 82            [24]  978 	mov	dpl,r3
      0000A8 8C 83            [24]  979 	mov	dph,r4
      0000AA C0 04            [24]  980 	push	ar4
      0000AC C0 03            [24]  981 	push	ar3
      0000AE 12r14rF8         [24]  982 	lcall	_print16Hex
                                    983 ;	.\ecen4350_lcd_v4.c:161: delay(40);
      0000B1 90 00 28         [24]  984 	mov	dptr,#0x0028
      0000B4 12r00rE0         [24]  985 	lcall	_delay
      0000B7 D0 03            [24]  986 	pop	ar3
      0000B9 D0 04            [24]  987 	pop	ar4
      0000BB D0 05            [24]  988 	pop	ar5
      0000BD D0 06            [24]  989 	pop	ar6
      0000BF D0 07            [24]  990 	pop	ar7
      0000C1                        991 00102$:
                                    992 ;	.\ecen4350_lcd_v4.c:163: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      0000C1 85*04 82         [24]  993 	mov	dpl,_seg7_address
      0000C4 85*05 83         [24]  994 	mov	dph,(_seg7_address + 1)
                                    995 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    996 ;	assignBit
      0000C7 D2 B5            [12]  997 	setb	_P3_5
                                    998 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0000C9 74 8C            [12]  999 	mov	a,#0x8c
      0000CB F0               [24] 1000 	movx	@dptr,a
                                   1001 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1002 ;	assignBit
      0000CC C2 B5            [12] 1003 	clr	_P3_5
                                   1004 ;	.\ecen4350_lcd_v4.c:164: IOM = 1;
                                   1005 ;	assignBit
      0000CE D2 B5            [12] 1006 	setb	_P3_5
                                   1007 ;	.\ecen4350_lcd_v4.c:152: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      0000D0 0B               [12] 1008 	inc	r3
      0000D1 BB 00 09         [24] 1009 	cjne	r3,#0x00,00126$
      0000D4 0C               [12] 1010 	inc	r4
      0000D5 BC 00 05         [24] 1011 	cjne	r4,#0x00,00126$
      0000D8 0D               [12] 1012 	inc	r5
      0000D9 BD 00 01         [24] 1013 	cjne	r5,#0x00,00126$
      0000DC 0E               [12] 1014 	inc	r6
      0000DD                       1015 00126$:
                                   1016 ;	.\ecen4350_lcd_v4.c:166: }
      0000DD 02r00r5B         [24] 1017 	ljmp	00107$
                                   1018 ;------------------------------------------------------------
                                   1019 ;Allocation info for local variables in function 'delay'
                                   1020 ;------------------------------------------------------------
                                   1021 ;d                         Allocated to registers r6 r7 
                                   1022 ;i                         Allocated to registers r4 r5 
                                   1023 ;j                         Allocated to registers r2 r3 
                                   1024 ;------------------------------------------------------------
                                   1025 ;	.\ecen4350_lcd_v4.c:168: void delay(int d) /// x 1ms
                                   1026 ;	-----------------------------------------
                                   1027 ;	 function delay
                                   1028 ;	-----------------------------------------
      0000E0                       1029 _delay:
      0000E0 AE 82            [24] 1030 	mov	r6,dpl
      0000E2 AF 83            [24] 1031 	mov	r7,dph
                                   1032 ;	.\ecen4350_lcd_v4.c:171: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0000E4 7C 00            [12] 1033 	mov	r4,#0x00
      0000E6 7D 00            [12] 1034 	mov	r5,#0x00
      0000E8                       1035 00107$:
      0000E8 C3               [12] 1036 	clr	c
      0000E9 EC               [12] 1037 	mov	a,r4
      0000EA 9E               [12] 1038 	subb	a,r6
      0000EB ED               [12] 1039 	mov	a,r5
      0000EC 64 80            [12] 1040 	xrl	a,#0x80
      0000EE 8F F0            [24] 1041 	mov	b,r7
      0000F0 63 F0 80         [24] 1042 	xrl	b,#0x80
      0000F3 95 F0            [12] 1043 	subb	a,b
      0000F5 50 1B            [24] 1044 	jnc	00109$
                                   1045 ;	.\ecen4350_lcd_v4.c:173: for (j = 0; j < 1000; j++);
      0000F7 7A E8            [12] 1046 	mov	r2,#0xe8
      0000F9 7B 03            [12] 1047 	mov	r3,#0x03
      0000FB                       1048 00105$:
      0000FB EA               [12] 1049 	mov	a,r2
      0000FC 24 FF            [12] 1050 	add	a,#0xff
      0000FE F8               [12] 1051 	mov	r0,a
      0000FF EB               [12] 1052 	mov	a,r3
      000100 34 FF            [12] 1053 	addc	a,#0xff
      000102 F9               [12] 1054 	mov	r1,a
      000103 88 02            [24] 1055 	mov	ar2,r0
      000105 89 03            [24] 1056 	mov	ar3,r1
      000107 E8               [12] 1057 	mov	a,r0
      000108 49               [12] 1058 	orl	a,r1
      000109 70 F0            [24] 1059 	jnz	00105$
                                   1060 ;	.\ecen4350_lcd_v4.c:171: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      00010B 0C               [12] 1061 	inc	r4
      00010C BC 00 D9         [24] 1062 	cjne	r4,#0x00,00107$
      00010F 0D               [12] 1063 	inc	r5
      000110 80 D6            [24] 1064 	sjmp	00107$
      000112                       1065 00109$:
                                   1066 ;	.\ecen4350_lcd_v4.c:175: }
      000112 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'UART_init'
                                   1070 ;------------------------------------------------------------
                                   1071 ;	.\ecen4350_lcd_v4.c:178: void UART_init(){
                                   1072 ;	-----------------------------------------
                                   1073 ;	 function UART_init
                                   1074 ;	-----------------------------------------
      000113                       1075 _UART_init:
                                   1076 ;	.\ecen4350_lcd_v4.c:179: TR1 = 1;      	// Turn ON the timer for Baud rate generation
                                   1077 ;	assignBit
      000113 D2 8E            [12] 1078 	setb	_TR1
                                   1079 ;	.\ecen4350_lcd_v4.c:180: ES  = 1;		// Enable serial interrupt
                                   1080 ;	assignBit
      000115 D2 AC            [12] 1081 	setb	_ES
                                   1082 ;	.\ecen4350_lcd_v4.c:181: EA  = 1;		// Enable global interrupts
                                   1083 ;	assignBit
      000117 D2 AF            [12] 1084 	setb	_EA
                                   1085 ;	.\ecen4350_lcd_v4.c:182: UART_en = 1;
      000119 78r01            [12] 1086 	mov	r0,#_UART_en
      00011B 76 01            [12] 1087 	mov	@r0,#0x01
                                   1088 ;	.\ecen4350_lcd_v4.c:183: }
      00011D 22               [24] 1089 	ret
                                   1090 ;------------------------------------------------------------
                                   1091 ;Allocation info for local variables in function 'UART_disable'
                                   1092 ;------------------------------------------------------------
                                   1093 ;	.\ecen4350_lcd_v4.c:185: void UART_disable(){
                                   1094 ;	-----------------------------------------
                                   1095 ;	 function UART_disable
                                   1096 ;	-----------------------------------------
      00011E                       1097 _UART_disable:
                                   1098 ;	.\ecen4350_lcd_v4.c:186: TR1 = 0;
                                   1099 ;	assignBit
      00011E C2 8E            [12] 1100 	clr	_TR1
                                   1101 ;	.\ecen4350_lcd_v4.c:187: ES = 0;
                                   1102 ;	assignBit
      000120 C2 AC            [12] 1103 	clr	_ES
                                   1104 ;	.\ecen4350_lcd_v4.c:188: EA = 0;
                                   1105 ;	assignBit
      000122 C2 AF            [12] 1106 	clr	_EA
                                   1107 ;	.\ecen4350_lcd_v4.c:189: TH1 = 0;
      000124 75 8D 00         [24] 1108 	mov	_TH1,#0x00
                                   1109 ;	.\ecen4350_lcd_v4.c:190: SCON = 0;
      000127 75 98 00         [24] 1110 	mov	_SCON,#0x00
                                   1111 ;	.\ecen4350_lcd_v4.c:191: PCON = 0;
      00012A 75 87 00         [24] 1112 	mov	_PCON,#0x00
                                   1113 ;	.\ecen4350_lcd_v4.c:192: UART_en = 0;
      00012D 78r01            [12] 1114 	mov	r0,#_UART_en
      00012F 76 00            [12] 1115 	mov	@r0,#0x00
                                   1116 ;	.\ecen4350_lcd_v4.c:193: baudSet = 0;
      000131 78r02            [12] 1117 	mov	r0,#_baudSet
      000133 76 00            [12] 1118 	mov	@r0,#0x00
                                   1119 ;	.\ecen4350_lcd_v4.c:194: bitSet = 0;
      000135 78r03            [12] 1120 	mov	r0,#_bitSet
      000137 76 00            [12] 1121 	mov	@r0,#0x00
                                   1122 ;	.\ecen4350_lcd_v4.c:195: paritySet = 0;
      000139 78r04            [12] 1123 	mov	r0,#_paritySet
      00013B 76 00            [12] 1124 	mov	@r0,#0x00
                                   1125 ;	.\ecen4350_lcd_v4.c:196: parityEven = 'null';
      00013D 78r05            [12] 1126 	mov	r0,#_parityEven
      00013F 76 6E            [12] 1127 	mov	@r0,#0x6e
                                   1128 ;	.\ecen4350_lcd_v4.c:197: parityBit = 'null';
      000141 78r06            [12] 1129 	mov	r0,#_parityBit
      000143 76 6E            [12] 1130 	mov	@r0,#0x6e
                                   1131 ;	.\ecen4350_lcd_v4.c:198: baudType = 'null';
      000145 78r07            [12] 1132 	mov	r0,#_baudType
      000147 76 6E            [12] 1133 	mov	@r0,#0x6e
                                   1134 ;	.\ecen4350_lcd_v4.c:199: pType = 'null';
      000149 78r08            [12] 1135 	mov	r0,#_pType
      00014B 76 6E            [12] 1136 	mov	@r0,#0x6e
                                   1137 ;	.\ecen4350_lcd_v4.c:200: _8b = 'null';
      00014D 78r09            [12] 1138 	mov	r0,#__8b
      00014F 76 6E            [12] 1139 	mov	@r0,#0x6e
                                   1140 ;	.\ecen4350_lcd_v4.c:201: tempFrame = 'null';
      000151 78r0A            [12] 1141 	mov	r0,#_tempFrame
      000153 76 6E            [12] 1142 	mov	@r0,#0x6e
      000155 08               [12] 1143 	inc	r0
      000156 76 00            [12] 1144 	mov	@r0,#0x00
                                   1145 ;	.\ecen4350_lcd_v4.c:202: frame_NEP = 'null';
      000158 78r0C            [12] 1146 	mov	r0,#_frame_NEP
      00015A 76 6E            [12] 1147 	mov	@r0,#0x6e
      00015C 08               [12] 1148 	inc	r0
      00015D 76 00            [12] 1149 	mov	@r0,#0x00
                                   1150 ;	.\ecen4350_lcd_v4.c:203: }
      00015F 22               [24] 1151 	ret
                                   1152 ;------------------------------------------------------------
                                   1153 ;Allocation info for local variables in function 'UART_transmit'
                                   1154 ;------------------------------------------------------------
                                   1155 ;byte                      Allocated to registers 
                                   1156 ;------------------------------------------------------------
                                   1157 ;	.\ecen4350_lcd_v4.c:206: void UART_transmit(unsigned char byte){
                                   1158 ;	-----------------------------------------
                                   1159 ;	 function UART_transmit
                                   1160 ;	-----------------------------------------
      000160                       1161 _UART_transmit:
      000160 85 82 99         [24] 1162 	mov	_SBUF,dpl
                                   1163 ;	.\ecen4350_lcd_v4.c:208: while(TI == 1);
      000163                       1164 00101$:
      000163 20 99 FD         [24] 1165 	jb	_TI,00101$
                                   1166 ;	.\ecen4350_lcd_v4.c:209: TI = 0;
                                   1167 ;	assignBit
      000166 C2 99            [12] 1168 	clr	_TI
                                   1169 ;	.\ecen4350_lcd_v4.c:210: }
      000168 22               [24] 1170 	ret
                                   1171 ;------------------------------------------------------------
                                   1172 ;Allocation info for local variables in function 'ISR_receive'
                                   1173 ;------------------------------------------------------------
                                   1174 ;	.\ecen4350_lcd_v4.c:212: void ISR_receive() __interrupt (4) {
                                   1175 ;	-----------------------------------------
                                   1176 ;	 function ISR_receive
                                   1177 ;	-----------------------------------------
      000169                       1178 _ISR_receive:
                                   1179 ;	.\ecen4350_lcd_v4.c:213: if (RI == 1){
      000169 30 98 08         [24] 1180 	jnb	_RI,00103$
                                   1181 ;	.\ecen4350_lcd_v4.c:214: received_byte = SBUF;
      00016C 85 99*06         [24] 1182 	mov	_received_byte,_SBUF
                                   1183 ;	.\ecen4350_lcd_v4.c:215: RI = 0;
                                   1184 ;	assignBit
      00016F C2 98            [12] 1185 	clr	_RI
                                   1186 ;	.\ecen4350_lcd_v4.c:216: received_flag= 1;
      000171 75*07 01         [24] 1187 	mov	_received_flag,#0x01
      000174                       1188 00103$:
                                   1189 ;	.\ecen4350_lcd_v4.c:218: }
      000174 32               [24] 1190 	reti
                                   1191 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1192 ;	eliminated unneeded push/pop psw
                                   1193 ;	eliminated unneeded push/pop dpl
                                   1194 ;	eliminated unneeded push/pop dph
                                   1195 ;	eliminated unneeded push/pop b
                                   1196 ;	eliminated unneeded push/pop acc
                                   1197 ;------------------------------------------------------------
                                   1198 ;Allocation info for local variables in function 'writeRegister8'
                                   1199 ;------------------------------------------------------------
                                   1200 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1201 ;address                   Allocated to registers r7 
                                   1202 ;------------------------------------------------------------
                                   1203 ;	.\ecen4350_lcd_v4.c:220: void writeRegister8(u8 address, u8 d)
                                   1204 ;	-----------------------------------------
                                   1205 ;	 function writeRegister8
                                   1206 ;	-----------------------------------------
      000175                       1207 _writeRegister8:
      000175 AF 82            [24] 1208 	mov	r7,dpl
                                   1209 ;	.\ecen4350_lcd_v4.c:223: CD = __CMD__;
                                   1210 ;	assignBit
      000177 C2 B4            [12] 1211 	clr	_P3_4
                                   1212 ;	.\ecen4350_lcd_v4.c:224: write8(address);
                                   1213 ;	assignBit
      000179 D2 B5            [12] 1214 	setb	_P3_5
      00017B 85*02 82         [24] 1215 	mov	dpl,_lcd_address
      00017E 85*03 83         [24] 1216 	mov	dph,(_lcd_address + 1)
      000181 EF               [12] 1217 	mov	a,r7
      000182 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	assignBit
      000183 C2 B5            [12] 1220 	clr	_P3_5
                                   1221 ;	.\ecen4350_lcd_v4.c:225: CD = __DATA__;
                                   1222 ;	assignBit
      000185 D2 B4            [12] 1223 	setb	_P3_4
                                   1224 ;	.\ecen4350_lcd_v4.c:226: write8(d);
                                   1225 ;	assignBit
      000187 D2 B5            [12] 1226 	setb	_P3_5
      000189 85*02 82         [24] 1227 	mov	dpl,_lcd_address
      00018C 85*03 83         [24] 1228 	mov	dph,(_lcd_address + 1)
      00018F E5*00            [12] 1229 	mov	a,_writeRegister8_PARM_2
      000191 F0               [24] 1230 	movx	@dptr,a
                                   1231 ;	assignBit
      000192 C2 B5            [12] 1232 	clr	_P3_5
                                   1233 ;	.\ecen4350_lcd_v4.c:228: }
      000194 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'writeRegister16'
                                   1237 ;------------------------------------------------------------
                                   1238 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1239 ;address                   Allocated to registers r6 r7 
                                   1240 ;hi                        Allocated to registers r6 r7 
                                   1241 ;lo                        Allocated to registers r4 r5 
                                   1242 ;------------------------------------------------------------
                                   1243 ;	.\ecen4350_lcd_v4.c:230: void writeRegister16(u16 address, u16 d)
                                   1244 ;	-----------------------------------------
                                   1245 ;	 function writeRegister16
                                   1246 ;	-----------------------------------------
      000195                       1247 _writeRegister16:
      000195 AE 82            [24] 1248 	mov	r6,dpl
      000197 AF 83            [24] 1249 	mov	r7,dph
                                   1250 ;	.\ecen4350_lcd_v4.c:233: hi = (address) >> 8;
      000199 8F 04            [24] 1251 	mov	ar4,r7
                                   1252 ;	.\ecen4350_lcd_v4.c:234: lo = (address);
                                   1253 ;	.\ecen4350_lcd_v4.c:237: write8Reg(hi);
                                   1254 ;	assignBit
      00019B C2 B4            [12] 1255 	clr	_P3_4
                                   1256 ;	assignBit
      00019D D2 B5            [12] 1257 	setb	_P3_5
      00019F 85*02 82         [24] 1258 	mov	dpl,_lcd_address
      0001A2 85*03 83         [24] 1259 	mov	dph,(_lcd_address + 1)
      0001A5 EC               [12] 1260 	mov	a,r4
      0001A6 F0               [24] 1261 	movx	@dptr,a
                                   1262 ;	assignBit
      0001A7 C2 B5            [12] 1263 	clr	_P3_5
                                   1264 ;	.\ecen4350_lcd_v4.c:238: write8Reg(lo);
                                   1265 ;	assignBit
      0001A9 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	assignBit
      0001AB D2 B5            [12] 1268 	setb	_P3_5
      0001AD 85*02 82         [24] 1269 	mov	dpl,_lcd_address
      0001B0 85*03 83         [24] 1270 	mov	dph,(_lcd_address + 1)
      0001B3 EE               [12] 1271 	mov	a,r6
      0001B4 F0               [24] 1272 	movx	@dptr,a
                                   1273 ;	assignBit
      0001B5 C2 B5            [12] 1274 	clr	_P3_5
                                   1275 ;	.\ecen4350_lcd_v4.c:239: hi = (d) >> 8;
      0001B7 AE*01            [24] 1276 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1277 ;	.\ecen4350_lcd_v4.c:240: lo = (d);
      0001B9 AC*00            [24] 1278 	mov	r4,_writeRegister16_PARM_2
                                   1279 ;	.\ecen4350_lcd_v4.c:241: CD = 1;
                                   1280 ;	assignBit
      0001BB D2 B4            [12] 1281 	setb	_P3_4
                                   1282 ;	.\ecen4350_lcd_v4.c:242: write8Data(hi);
                                   1283 ;	assignBit
      0001BD D2 B4            [12] 1284 	setb	_P3_4
                                   1285 ;	assignBit
      0001BF D2 B5            [12] 1286 	setb	_P3_5
      0001C1 85*02 82         [24] 1287 	mov	dpl,_lcd_address
      0001C4 85*03 83         [24] 1288 	mov	dph,(_lcd_address + 1)
      0001C7 EE               [12] 1289 	mov	a,r6
      0001C8 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	assignBit
      0001C9 C2 B5            [12] 1292 	clr	_P3_5
                                   1293 ;	.\ecen4350_lcd_v4.c:243: write8Data(lo);
                                   1294 ;	assignBit
      0001CB D2 B4            [12] 1295 	setb	_P3_4
                                   1296 ;	assignBit
      0001CD D2 B5            [12] 1297 	setb	_P3_5
      0001CF 85*02 82         [24] 1298 	mov	dpl,_lcd_address
      0001D2 85*03 83         [24] 1299 	mov	dph,(_lcd_address + 1)
      0001D5 EC               [12] 1300 	mov	a,r4
      0001D6 F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	assignBit
      0001D7 C2 B5            [12] 1303 	clr	_P3_5
                                   1304 ;	.\ecen4350_lcd_v4.c:245: }
      0001D9 22               [24] 1305 	ret
                                   1306 ;------------------------------------------------------------
                                   1307 ;Allocation info for local variables in function 'seg7Test'
                                   1308 ;------------------------------------------------------------
                                   1309 ;__1310720007              Allocated to registers 
                                   1310 ;__1310720008              Allocated to registers 
                                   1311 ;map_address               Allocated to registers 
                                   1312 ;d                         Allocated to registers 
                                   1313 ;__1310720010              Allocated to registers 
                                   1314 ;__1310720011              Allocated to registers 
                                   1315 ;map_address               Allocated to registers 
                                   1316 ;d                         Allocated to registers 
                                   1317 ;__1310720013              Allocated to registers 
                                   1318 ;__1310720014              Allocated to registers 
                                   1319 ;map_address               Allocated to registers 
                                   1320 ;d                         Allocated to registers 
                                   1321 ;__1310720016              Allocated to registers 
                                   1322 ;__1310720017              Allocated to registers 
                                   1323 ;map_address               Allocated to registers 
                                   1324 ;d                         Allocated to registers 
                                   1325 ;__1310720019              Allocated to registers 
                                   1326 ;__1310720020              Allocated to registers 
                                   1327 ;map_address               Allocated to registers 
                                   1328 ;d                         Allocated to registers 
                                   1329 ;__1310720022              Allocated to registers 
                                   1330 ;__1310720023              Allocated to registers 
                                   1331 ;map_address               Allocated to registers 
                                   1332 ;d                         Allocated to registers 
                                   1333 ;__1310720025              Allocated to registers 
                                   1334 ;__1310720026              Allocated to registers 
                                   1335 ;map_address               Allocated to registers 
                                   1336 ;d                         Allocated to registers 
                                   1337 ;__1310720028              Allocated to registers 
                                   1338 ;__1310720029              Allocated to registers 
                                   1339 ;map_address               Allocated to registers 
                                   1340 ;d                         Allocated to registers 
                                   1341 ;__1310720031              Allocated to registers 
                                   1342 ;__1310720032              Allocated to registers 
                                   1343 ;map_address               Allocated to registers 
                                   1344 ;d                         Allocated to registers 
                                   1345 ;__1310720034              Allocated to registers 
                                   1346 ;__1310720035              Allocated to registers 
                                   1347 ;map_address               Allocated to registers 
                                   1348 ;d                         Allocated to registers 
                                   1349 ;__1310720037              Allocated to registers 
                                   1350 ;__1310720038              Allocated to registers 
                                   1351 ;map_address               Allocated to registers 
                                   1352 ;d                         Allocated to registers 
                                   1353 ;__1310720040              Allocated to registers 
                                   1354 ;__1310720041              Allocated to registers 
                                   1355 ;map_address               Allocated to registers 
                                   1356 ;d                         Allocated to registers 
                                   1357 ;__1310720043              Allocated to registers 
                                   1358 ;__1310720044              Allocated to registers 
                                   1359 ;map_address               Allocated to registers 
                                   1360 ;d                         Allocated to registers 
                                   1361 ;__1310720046              Allocated to registers 
                                   1362 ;__1310720047              Allocated to registers 
                                   1363 ;map_address               Allocated to registers 
                                   1364 ;d                         Allocated to registers 
                                   1365 ;__1310720049              Allocated to registers 
                                   1366 ;__1310720050              Allocated to registers 
                                   1367 ;map_address               Allocated to registers 
                                   1368 ;d                         Allocated to registers 
                                   1369 ;__1310720052              Allocated to registers 
                                   1370 ;__1310720053              Allocated to registers 
                                   1371 ;map_address               Allocated to registers 
                                   1372 ;d                         Allocated to registers 
                                   1373 ;__1310720055              Allocated to registers 
                                   1374 ;__1310720056              Allocated to registers 
                                   1375 ;map_address               Allocated to registers 
                                   1376 ;d                         Allocated to registers 
                                   1377 ;__1310720058              Allocated to registers 
                                   1378 ;__1310720059              Allocated to registers 
                                   1379 ;map_address               Allocated to registers 
                                   1380 ;d                         Allocated to registers 
                                   1381 ;------------------------------------------------------------
                                   1382 ;	.\ecen4350_lcd_v4.c:247: void seg7Test(void)
                                   1383 ;	-----------------------------------------
                                   1384 ;	 function seg7Test
                                   1385 ;	-----------------------------------------
      0001DA                       1386 _seg7Test:
                                   1387 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      0001DA 90 00 04         [24] 1388 	mov	dptr,#0x0004
      0001DD 12r00rE0         [24] 1389 	lcall	_delay
                                   1390 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, ON);
      0001E0 85*04 82         [24] 1391 	mov	dpl,_seg7_address
      0001E3 85*05 83         [24] 1392 	mov	dph,(_seg7_address + 1)
                                   1393 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1394 ;	assignBit
      0001E6 D2 B5            [12] 1395 	setb	_P3_5
                                   1396 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0001E8 E4               [12] 1397 	clr	a
      0001E9 F0               [24] 1398 	movx	@dptr,a
                                   1399 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1400 ;	assignBit
      0001EA C2 B5            [12] 1401 	clr	_P3_5
                                   1402 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      0001EC 90 00 04         [24] 1403 	mov	dptr,#0x0004
      0001EF 12r00rE0         [24] 1404 	lcall	_delay
                                   1405 ;	.\ecen4350_lcd_v4.c:252: iowrite8(seg7_address, ZERO);
      0001F2 85*04 82         [24] 1406 	mov	dpl,_seg7_address
      0001F5 85*05 83         [24] 1407 	mov	dph,(_seg7_address + 1)
                                   1408 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1409 ;	assignBit
      0001F8 D2 B5            [12] 1410 	setb	_P3_5
                                   1411 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0001FA 74 C0            [12] 1412 	mov	a,#0xc0
      0001FC F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1415 ;	assignBit
      0001FD C2 B5            [12] 1416 	clr	_P3_5
                                   1417 ;	.\ecen4350_lcd_v4.c:253: delay(4);
      0001FF 90 00 04         [24] 1418 	mov	dptr,#0x0004
      000202 12r00rE0         [24] 1419 	lcall	_delay
                                   1420 ;	.\ecen4350_lcd_v4.c:254: iowrite8(seg7_address, ONE);
      000205 85*04 82         [24] 1421 	mov	dpl,_seg7_address
      000208 85*05 83         [24] 1422 	mov	dph,(_seg7_address + 1)
                                   1423 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1424 ;	assignBit
      00020B D2 B5            [12] 1425 	setb	_P3_5
                                   1426 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00020D 74 F9            [12] 1427 	mov	a,#0xf9
      00020F F0               [24] 1428 	movx	@dptr,a
                                   1429 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1430 ;	assignBit
      000210 C2 B5            [12] 1431 	clr	_P3_5
                                   1432 ;	.\ecen4350_lcd_v4.c:255: delay(4);
      000212 90 00 04         [24] 1433 	mov	dptr,#0x0004
      000215 12r00rE0         [24] 1434 	lcall	_delay
                                   1435 ;	.\ecen4350_lcd_v4.c:256: iowrite8(seg7_address, TWO);
      000218 85*04 82         [24] 1436 	mov	dpl,_seg7_address
      00021B 85*05 83         [24] 1437 	mov	dph,(_seg7_address + 1)
                                   1438 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1439 ;	assignBit
      00021E D2 B5            [12] 1440 	setb	_P3_5
                                   1441 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000220 74 A4            [12] 1442 	mov	a,#0xa4
      000222 F0               [24] 1443 	movx	@dptr,a
                                   1444 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1445 ;	assignBit
      000223 C2 B5            [12] 1446 	clr	_P3_5
                                   1447 ;	.\ecen4350_lcd_v4.c:257: delay(4);
      000225 90 00 04         [24] 1448 	mov	dptr,#0x0004
      000228 12r00rE0         [24] 1449 	lcall	_delay
                                   1450 ;	.\ecen4350_lcd_v4.c:258: iowrite8(seg7_address, THREE);
      00022B 85*04 82         [24] 1451 	mov	dpl,_seg7_address
      00022E 85*05 83         [24] 1452 	mov	dph,(_seg7_address + 1)
                                   1453 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1454 ;	assignBit
      000231 D2 B5            [12] 1455 	setb	_P3_5
                                   1456 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000233 74 B0            [12] 1457 	mov	a,#0xb0
      000235 F0               [24] 1458 	movx	@dptr,a
                                   1459 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1460 ;	assignBit
      000236 C2 B5            [12] 1461 	clr	_P3_5
                                   1462 ;	.\ecen4350_lcd_v4.c:259: delay(4);
      000238 90 00 04         [24] 1463 	mov	dptr,#0x0004
      00023B 12r00rE0         [24] 1464 	lcall	_delay
                                   1465 ;	.\ecen4350_lcd_v4.c:260: iowrite8(seg7_address, FOUR);
      00023E 85*04 82         [24] 1466 	mov	dpl,_seg7_address
      000241 85*05 83         [24] 1467 	mov	dph,(_seg7_address + 1)
                                   1468 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1469 ;	assignBit
      000244 D2 B5            [12] 1470 	setb	_P3_5
                                   1471 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000246 74 99            [12] 1472 	mov	a,#0x99
      000248 F0               [24] 1473 	movx	@dptr,a
                                   1474 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1475 ;	assignBit
      000249 C2 B5            [12] 1476 	clr	_P3_5
                                   1477 ;	.\ecen4350_lcd_v4.c:261: delay(4);
      00024B 90 00 04         [24] 1478 	mov	dptr,#0x0004
      00024E 12r00rE0         [24] 1479 	lcall	_delay
                                   1480 ;	.\ecen4350_lcd_v4.c:262: iowrite8(seg7_address, FIVE);
      000251 85*04 82         [24] 1481 	mov	dpl,_seg7_address
      000254 85*05 83         [24] 1482 	mov	dph,(_seg7_address + 1)
                                   1483 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1484 ;	assignBit
      000257 D2 B5            [12] 1485 	setb	_P3_5
                                   1486 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000259 74 92            [12] 1487 	mov	a,#0x92
      00025B F0               [24] 1488 	movx	@dptr,a
                                   1489 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1490 ;	assignBit
      00025C C2 B5            [12] 1491 	clr	_P3_5
                                   1492 ;	.\ecen4350_lcd_v4.c:263: delay(4);
      00025E 90 00 04         [24] 1493 	mov	dptr,#0x0004
      000261 12r00rE0         [24] 1494 	lcall	_delay
                                   1495 ;	.\ecen4350_lcd_v4.c:264: iowrite8(seg7_address, SIX);
      000264 85*04 82         [24] 1496 	mov	dpl,_seg7_address
      000267 85*05 83         [24] 1497 	mov	dph,(_seg7_address + 1)
                                   1498 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1499 ;	assignBit
      00026A D2 B5            [12] 1500 	setb	_P3_5
                                   1501 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00026C 74 82            [12] 1502 	mov	a,#0x82
      00026E F0               [24] 1503 	movx	@dptr,a
                                   1504 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1505 ;	assignBit
      00026F C2 B5            [12] 1506 	clr	_P3_5
                                   1507 ;	.\ecen4350_lcd_v4.c:265: delay(4);
      000271 90 00 04         [24] 1508 	mov	dptr,#0x0004
      000274 12r00rE0         [24] 1509 	lcall	_delay
                                   1510 ;	.\ecen4350_lcd_v4.c:266: iowrite8(seg7_address, SEVEN);
      000277 85*04 82         [24] 1511 	mov	dpl,_seg7_address
      00027A 85*05 83         [24] 1512 	mov	dph,(_seg7_address + 1)
                                   1513 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1514 ;	assignBit
      00027D D2 B5            [12] 1515 	setb	_P3_5
                                   1516 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00027F 74 F8            [12] 1517 	mov	a,#0xf8
      000281 F0               [24] 1518 	movx	@dptr,a
                                   1519 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1520 ;	assignBit
      000282 C2 B5            [12] 1521 	clr	_P3_5
                                   1522 ;	.\ecen4350_lcd_v4.c:267: delay(4);
      000284 90 00 04         [24] 1523 	mov	dptr,#0x0004
      000287 12r00rE0         [24] 1524 	lcall	_delay
                                   1525 ;	.\ecen4350_lcd_v4.c:268: iowrite8(seg7_address, EIGHT);
      00028A 85*04 82         [24] 1526 	mov	dpl,_seg7_address
      00028D 85*05 83         [24] 1527 	mov	dph,(_seg7_address + 1)
                                   1528 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1529 ;	assignBit
      000290 D2 B5            [12] 1530 	setb	_P3_5
                                   1531 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000292 74 80            [12] 1532 	mov	a,#0x80
      000294 F0               [24] 1533 	movx	@dptr,a
                                   1534 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1535 ;	assignBit
      000295 C2 B5            [12] 1536 	clr	_P3_5
                                   1537 ;	.\ecen4350_lcd_v4.c:269: delay(4);
      000297 90 00 04         [24] 1538 	mov	dptr,#0x0004
      00029A 12r00rE0         [24] 1539 	lcall	_delay
                                   1540 ;	.\ecen4350_lcd_v4.c:270: iowrite8(seg7_address, NINE);
      00029D 85*04 82         [24] 1541 	mov	dpl,_seg7_address
      0002A0 85*05 83         [24] 1542 	mov	dph,(_seg7_address + 1)
                                   1543 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1544 ;	assignBit
      0002A3 D2 B5            [12] 1545 	setb	_P3_5
                                   1546 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002A5 74 98            [12] 1547 	mov	a,#0x98
      0002A7 F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1550 ;	assignBit
      0002A8 C2 B5            [12] 1551 	clr	_P3_5
                                   1552 ;	.\ecen4350_lcd_v4.c:271: delay(4);
      0002AA 90 00 04         [24] 1553 	mov	dptr,#0x0004
      0002AD 12r00rE0         [24] 1554 	lcall	_delay
                                   1555 ;	.\ecen4350_lcd_v4.c:272: iowrite8(seg7_address, SEG_A);
      0002B0 85*04 82         [24] 1556 	mov	dpl,_seg7_address
      0002B3 85*05 83         [24] 1557 	mov	dph,(_seg7_address + 1)
                                   1558 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1559 ;	assignBit
      0002B6 D2 B5            [12] 1560 	setb	_P3_5
                                   1561 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002B8 74 88            [12] 1562 	mov	a,#0x88
      0002BA F0               [24] 1563 	movx	@dptr,a
                                   1564 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1565 ;	assignBit
      0002BB C2 B5            [12] 1566 	clr	_P3_5
                                   1567 ;	.\ecen4350_lcd_v4.c:273: delay(4);
      0002BD 90 00 04         [24] 1568 	mov	dptr,#0x0004
      0002C0 12r00rE0         [24] 1569 	lcall	_delay
                                   1570 ;	.\ecen4350_lcd_v4.c:274: iowrite8(seg7_address, SEG_B);
      0002C3 85*04 82         [24] 1571 	mov	dpl,_seg7_address
      0002C6 85*05 83         [24] 1572 	mov	dph,(_seg7_address + 1)
                                   1573 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1574 ;	assignBit
      0002C9 D2 B5            [12] 1575 	setb	_P3_5
                                   1576 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002CB 74 83            [12] 1577 	mov	a,#0x83
      0002CD F0               [24] 1578 	movx	@dptr,a
                                   1579 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1580 ;	assignBit
      0002CE C2 B5            [12] 1581 	clr	_P3_5
                                   1582 ;	.\ecen4350_lcd_v4.c:275: delay(4);
      0002D0 90 00 04         [24] 1583 	mov	dptr,#0x0004
      0002D3 12r00rE0         [24] 1584 	lcall	_delay
                                   1585 ;	.\ecen4350_lcd_v4.c:276: iowrite8(seg7_address, SEG_C);
      0002D6 85*04 82         [24] 1586 	mov	dpl,_seg7_address
      0002D9 85*05 83         [24] 1587 	mov	dph,(_seg7_address + 1)
                                   1588 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1589 ;	assignBit
      0002DC D2 B5            [12] 1590 	setb	_P3_5
                                   1591 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002DE 74 C6            [12] 1592 	mov	a,#0xc6
      0002E0 F0               [24] 1593 	movx	@dptr,a
                                   1594 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1595 ;	assignBit
      0002E1 C2 B5            [12] 1596 	clr	_P3_5
                                   1597 ;	.\ecen4350_lcd_v4.c:277: delay(4);
      0002E3 90 00 04         [24] 1598 	mov	dptr,#0x0004
      0002E6 12r00rE0         [24] 1599 	lcall	_delay
                                   1600 ;	.\ecen4350_lcd_v4.c:278: iowrite8(seg7_address, SEG_D);
      0002E9 85*04 82         [24] 1601 	mov	dpl,_seg7_address
      0002EC 85*05 83         [24] 1602 	mov	dph,(_seg7_address + 1)
                                   1603 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1604 ;	assignBit
      0002EF D2 B5            [12] 1605 	setb	_P3_5
                                   1606 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002F1 74 A1            [12] 1607 	mov	a,#0xa1
      0002F3 F0               [24] 1608 	movx	@dptr,a
                                   1609 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1610 ;	assignBit
      0002F4 C2 B5            [12] 1611 	clr	_P3_5
                                   1612 ;	.\ecen4350_lcd_v4.c:279: delay(4);
      0002F6 90 00 04         [24] 1613 	mov	dptr,#0x0004
      0002F9 12r00rE0         [24] 1614 	lcall	_delay
                                   1615 ;	.\ecen4350_lcd_v4.c:280: iowrite8(seg7_address, SEG_E);
      0002FC 85*04 82         [24] 1616 	mov	dpl,_seg7_address
      0002FF 85*05 83         [24] 1617 	mov	dph,(_seg7_address + 1)
                                   1618 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1619 ;	assignBit
      000302 D2 B5            [12] 1620 	setb	_P3_5
                                   1621 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000304 74 86            [12] 1622 	mov	a,#0x86
      000306 F0               [24] 1623 	movx	@dptr,a
                                   1624 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1625 ;	assignBit
      000307 C2 B5            [12] 1626 	clr	_P3_5
                                   1627 ;	.\ecen4350_lcd_v4.c:281: delay(4);
      000309 90 00 04         [24] 1628 	mov	dptr,#0x0004
      00030C 12r00rE0         [24] 1629 	lcall	_delay
                                   1630 ;	.\ecen4350_lcd_v4.c:282: iowrite8(seg7_address, SEG_F);
      00030F 85*04 82         [24] 1631 	mov	dpl,_seg7_address
      000312 85*05 83         [24] 1632 	mov	dph,(_seg7_address + 1)
                                   1633 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1634 ;	assignBit
      000315 D2 B5            [12] 1635 	setb	_P3_5
                                   1636 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000317 74 8E            [12] 1637 	mov	a,#0x8e
      000319 F0               [24] 1638 	movx	@dptr,a
                                   1639 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1640 ;	assignBit
      00031A C2 B5            [12] 1641 	clr	_P3_5
                                   1642 ;	.\ecen4350_lcd_v4.c:283: delay(4);
      00031C 90 00 04         [24] 1643 	mov	dptr,#0x0004
      00031F 12r00rE0         [24] 1644 	lcall	_delay
                                   1645 ;	.\ecen4350_lcd_v4.c:284: iowrite8(seg7_address, OFF);
      000322 85*04 82         [24] 1646 	mov	dpl,_seg7_address
      000325 85*05 83         [24] 1647 	mov	dph,(_seg7_address + 1)
                                   1648 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1649 ;	assignBit
      000328 D2 B5            [12] 1650 	setb	_P3_5
                                   1651 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00032A 74 FF            [12] 1652 	mov	a,#0xff
      00032C F0               [24] 1653 	movx	@dptr,a
                                   1654 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1655 ;	assignBit
      00032D C2 B5            [12] 1656 	clr	_P3_5
                                   1657 ;	.\ecen4350_lcd_v4.c:285: delay(4);
      00032F 90 00 04         [24] 1658 	mov	dptr,#0x0004
                                   1659 ;	.\ecen4350_lcd_v4.c:286: }
      000332 02r00rE0         [24] 1660 	ljmp	_delay
                                   1661 ;------------------------------------------------------------
                                   1662 ;Allocation info for local variables in function 'rtcInit'
                                   1663 ;------------------------------------------------------------
                                   1664 ;i                         Allocated to registers r6 r7 
                                   1665 ;------------------------------------------------------------
                                   1666 ;	.\ecen4350_lcd_v4.c:289: void rtcInit(void)
                                   1667 ;	-----------------------------------------
                                   1668 ;	 function rtcInit
                                   1669 ;	-----------------------------------------
      000335                       1670 _rtcInit:
                                   1671 ;	.\ecen4350_lcd_v4.c:293: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      000335 75*00 07         [24] 1672 	mov	_rtcCmd_PARM_2,#0x07
      000338 90 00 0F         [24] 1673 	mov	dptr,#0x000f
      00033B 12r03r79         [24] 1674 	lcall	_rtcCmd
                                   1675 ;	.\ecen4350_lcd_v4.c:296: for (i = __S1_REG__; i < __REG_D__; i++)
      00033E 7E 00            [12] 1676 	mov	r6,#0x00
      000340 7F 00            [12] 1677 	mov	r7,#0x00
      000342                       1678 00102$:
                                   1679 ;	.\ecen4350_lcd_v4.c:298: rtcWrite(i, 0x00);
      000342 75*16 00         [24] 1680 	mov	_rtcWrite_PARM_2,#0x00
      000345 8E 82            [24] 1681 	mov	dpl,r6
      000347 8F 83            [24] 1682 	mov	dph,r7
      000349 C0 07            [24] 1683 	push	ar7
      00034B C0 06            [24] 1684 	push	ar6
      00034D 12r03r82         [24] 1685 	lcall	_rtcWrite
      000350 D0 06            [24] 1686 	pop	ar6
      000352 D0 07            [24] 1687 	pop	ar7
                                   1688 ;	.\ecen4350_lcd_v4.c:296: for (i = __S1_REG__; i < __REG_D__; i++)
      000354 0E               [12] 1689 	inc	r6
      000355 BE 00 01         [24] 1690 	cjne	r6,#0x00,00115$
      000358 0F               [12] 1691 	inc	r7
      000359                       1692 00115$:
      000359 C3               [12] 1693 	clr	c
      00035A EE               [12] 1694 	mov	a,r6
      00035B 94 0D            [12] 1695 	subb	a,#0x0d
      00035D EF               [12] 1696 	mov	a,r7
      00035E 94 00            [12] 1697 	subb	a,#0x00
      000360 40 E0            [24] 1698 	jc	00102$
                                   1699 ;	.\ecen4350_lcd_v4.c:301: rtcCmd(__REG_F__, __HR_24__);
      000362 75*00 04         [24] 1700 	mov	_rtcCmd_PARM_2,#0x04
      000365 90 00 0F         [24] 1701 	mov	dptr,#0x000f
                                   1702 ;	.\ecen4350_lcd_v4.c:302: }
      000368 02r03r79         [24] 1703 	ljmp	_rtcCmd
                                   1704 ;------------------------------------------------------------
                                   1705 ;Allocation info for local variables in function 'rtcBusy'
                                   1706 ;------------------------------------------------------------
                                   1707 ;__1310720061              Allocated to registers 
                                   1708 ;map_address               Allocated to registers 
                                   1709 ;__1310720062              Allocated to registers 
                                   1710 ;map_address               Allocated to registers 
                                   1711 ;d                         Allocated to registers r7 
                                   1712 ;------------------------------------------------------------
                                   1713 ;	.\ecen4350_lcd_v4.c:304: void rtcBusy(void)
                                   1714 ;	-----------------------------------------
                                   1715 ;	 function rtcBusy
                                   1716 ;	-----------------------------------------
      00036B                       1717 _rtcBusy:
                                   1718 ;	.\ecen4350_lcd_v4.c:307: while ((ioread8(map_address) & 0x02))		;
      00036B                       1719 00101$:
                                   1720 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   1721 ;	assignBit
      00036B D2 B5            [12] 1722 	setb	_P3_5
                                   1723 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      00036D 90 00 0D         [24] 1724 	mov	dptr,#0x000d
      000370 E0               [24] 1725 	movx	a,@dptr
      000371 FF               [12] 1726 	mov	r7,a
                                   1727 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   1728 ;	assignBit
      000372 C2 B5            [12] 1729 	clr	_P3_5
                                   1730 ;	.\ecen4350_lcd_v4.c:307: while ((ioread8(map_address) & 0x02))		;
      000374 EF               [12] 1731 	mov	a,r7
      000375 20 E1 F3         [24] 1732 	jb	acc.1,00101$
                                   1733 ;	.\ecen4350_lcd_v4.c:308: }
      000378 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'rtcCmd'
                                   1737 ;------------------------------------------------------------
                                   1738 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1739 ;addr                      Allocated to registers r6 r7 
                                   1740 ;map_address               Allocated to registers 
                                   1741 ;__1310720064              Allocated to registers 
                                   1742 ;__1310720065              Allocated to registers r7 
                                   1743 ;map_address               Allocated to registers 
                                   1744 ;d                         Allocated to registers 
                                   1745 ;------------------------------------------------------------
                                   1746 ;	.\ecen4350_lcd_v4.c:310: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1747 ;	-----------------------------------------
                                   1748 ;	 function rtcCmd
                                   1749 ;	-----------------------------------------
      000379                       1750 _rtcCmd:
                                   1751 ;	.\ecen4350_lcd_v4.c:312: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1752 ;	.\ecen4350_lcd_v4.c:313: iowrite8(map_address, d);
      000379 AF*00            [24] 1753 	mov	r7,_rtcCmd_PARM_2
                                   1754 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1755 ;	assignBit
      00037B D2 B5            [12] 1756 	setb	_P3_5
                                   1757 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00037D EF               [12] 1758 	mov	a,r7
      00037E F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1761 ;	assignBit
      00037F C2 B5            [12] 1762 	clr	_P3_5
                                   1763 ;	.\ecen4350_lcd_v4.c:313: iowrite8(map_address, d);
                                   1764 ;	.\ecen4350_lcd_v4.c:314: }
      000381 22               [24] 1765 	ret
                                   1766 ;------------------------------------------------------------
                                   1767 ;Allocation info for local variables in function 'rtcWrite'
                                   1768 ;------------------------------------------------------------
                                   1769 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1770 ;addr                      Allocated to registers r6 r7 
                                   1771 ;map_address               Allocated to registers r6 r7 
                                   1772 ;__1310720067              Allocated to registers 
                                   1773 ;__1310720068              Allocated to registers 
                                   1774 ;addr                      Allocated to registers 
                                   1775 ;d                         Allocated to registers 
                                   1776 ;map_address               Allocated to registers 
                                   1777 ;__1310720064              Allocated to registers 
                                   1778 ;__1310720065              Allocated to registers 
                                   1779 ;map_address               Allocated to registers 
                                   1780 ;d                         Allocated to registers 
                                   1781 ;__1310720070              Allocated to registers 
                                   1782 ;__1310720071              Allocated to registers 
                                   1783 ;map_address               Allocated to registers 
                                   1784 ;d                         Allocated to registers 
                                   1785 ;__1310720073              Allocated to registers 
                                   1786 ;__1310720074              Allocated to registers r7 
                                   1787 ;addr                      Allocated to registers 
                                   1788 ;d                         Allocated to registers 
                                   1789 ;map_address               Allocated to registers 
                                   1790 ;__1310720064              Allocated to registers 
                                   1791 ;__1310720065              Allocated to registers 
                                   1792 ;map_address               Allocated to registers 
                                   1793 ;d                         Allocated to registers 
                                   1794 ;------------------------------------------------------------
                                   1795 ;	.\ecen4350_lcd_v4.c:316: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1796 ;	-----------------------------------------
                                   1797 ;	 function rtcWrite
                                   1798 ;	-----------------------------------------
      000382                       1799 _rtcWrite:
      000382 AE 82            [24] 1800 	mov	r6,dpl
      000384 AF 83            [24] 1801 	mov	r7,dph
                                   1802 ;	.\ecen4350_lcd_v4.c:318: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1803 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1804 ;	assignBit
      000386 D2 B5            [12] 1805 	setb	_P3_5
                                   1806 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000388 90 00 0D         [24] 1807 	mov	dptr,#0x000d
      00038B 74 01            [12] 1808 	mov	a,#0x01
      00038D F0               [24] 1809 	movx	@dptr,a
                                   1810 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1811 ;	assignBit
      00038E C2 B5            [12] 1812 	clr	_P3_5
                                   1813 ;	.\ecen4350_lcd_v4.c:320: rtcBusy();
      000390 C0 07            [24] 1814 	push	ar7
      000392 C0 06            [24] 1815 	push	ar6
      000394 12r03r6B         [24] 1816 	lcall	_rtcBusy
      000397 D0 06            [24] 1817 	pop	ar6
      000399 D0 07            [24] 1818 	pop	ar7
                                   1819 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1820 ;	assignBit
      00039B D2 B5            [12] 1821 	setb	_P3_5
                                   1822 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00039D 8E 82            [24] 1823 	mov	dpl,r6
      00039F 8F 83            [24] 1824 	mov	dph,r7
      0003A1 E4               [12] 1825 	clr	a
      0003A2 F0               [24] 1826 	movx	@dptr,a
                                   1827 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1828 ;	assignBit
      0003A3 C2 B5            [12] 1829 	clr	_P3_5
                                   1830 ;	.\ecen4350_lcd_v4.c:322: rtcCmd(__REG_D__, d);
      0003A5 AF*16            [24] 1831 	mov	r7,_rtcWrite_PARM_2
                                   1832 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1833 ;	assignBit
      0003A7 D2 B5            [12] 1834 	setb	_P3_5
                                   1835 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003A9 90 00 0D         [24] 1836 	mov	dptr,#0x000d
      0003AC EF               [12] 1837 	mov	a,r7
      0003AD F0               [24] 1838 	movx	@dptr,a
                                   1839 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1840 ;	assignBit
      0003AE C2 B5            [12] 1841 	clr	_P3_5
                                   1842 ;	.\ecen4350_lcd_v4.c:322: rtcCmd(__REG_D__, d);
                                   1843 ;	.\ecen4350_lcd_v4.c:323: }
      0003B0 22               [24] 1844 	ret
                                   1845 ;------------------------------------------------------------
                                   1846 ;Allocation info for local variables in function 'rtcRead'
                                   1847 ;------------------------------------------------------------
                                   1848 ;addr                      Allocated to registers r6 r7 
                                   1849 ;__1310720079              Allocated to registers 
                                   1850 ;d                         Allocated to registers r7 
                                   1851 ;map_address               Allocated to registers r6 r7 
                                   1852 ;__1310720076              Allocated to registers 
                                   1853 ;__1310720077              Allocated to registers 
                                   1854 ;addr                      Allocated to registers 
                                   1855 ;d                         Allocated to registers 
                                   1856 ;map_address               Allocated to registers 
                                   1857 ;__1310720064              Allocated to registers 
                                   1858 ;__1310720065              Allocated to registers 
                                   1859 ;map_address               Allocated to registers 
                                   1860 ;d                         Allocated to registers 
                                   1861 ;__1310720080              Allocated to registers 
                                   1862 ;map_address               Allocated to registers 
                                   1863 ;d                         Allocated to registers r6 
                                   1864 ;__1310720082              Allocated to registers 
                                   1865 ;__1310720083              Allocated to registers 
                                   1866 ;addr                      Allocated to registers 
                                   1867 ;d                         Allocated to registers 
                                   1868 ;map_address               Allocated to registers 
                                   1869 ;__1310720064              Allocated to registers 
                                   1870 ;__1310720065              Allocated to registers 
                                   1871 ;map_address               Allocated to registers 
                                   1872 ;d                         Allocated to registers 
                                   1873 ;------------------------------------------------------------
                                   1874 ;	.\ecen4350_lcd_v4.c:325: inline unsigned char rtcRead(unsigned int addr)
                                   1875 ;	-----------------------------------------
                                   1876 ;	 function rtcRead
                                   1877 ;	-----------------------------------------
      0003B1                       1878 _rtcRead:
      0003B1 AE 82            [24] 1879 	mov	r6,dpl
      0003B3 AF 83            [24] 1880 	mov	r7,dph
                                   1881 ;	.\ecen4350_lcd_v4.c:328: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1882 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1883 ;	assignBit
      0003B5 D2 B5            [12] 1884 	setb	_P3_5
                                   1885 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003B7 90 00 0D         [24] 1886 	mov	dptr,#0x000d
      0003BA 74 01            [12] 1887 	mov	a,#0x01
      0003BC F0               [24] 1888 	movx	@dptr,a
                                   1889 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1890 ;	assignBit
      0003BD C2 B5            [12] 1891 	clr	_P3_5
                                   1892 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      0003BF C0 07            [24] 1893 	push	ar7
      0003C1 C0 06            [24] 1894 	push	ar6
      0003C3 12r03r6B         [24] 1895 	lcall	_rtcBusy
      0003C6 D0 06            [24] 1896 	pop	ar6
      0003C8 D0 07            [24] 1897 	pop	ar7
                                   1898 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   1899 ;	assignBit
      0003CA D2 B5            [12] 1900 	setb	_P3_5
                                   1901 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0003CC 8E 82            [24] 1902 	mov	dpl,r6
      0003CE 8F 83            [24] 1903 	mov	dph,r7
      0003D0 E0               [24] 1904 	movx	a,@dptr
      0003D1 FE               [12] 1905 	mov	r6,a
                                   1906 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   1907 ;	assignBit
      0003D2 C2 B5            [12] 1908 	clr	_P3_5
                                   1909 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0003D4 74 0F            [12] 1910 	mov	a,#0x0f
      0003D6 5E               [12] 1911 	anl	a,r6
      0003D7 44 30            [12] 1912 	orl	a,#0x30
      0003D9 FF               [12] 1913 	mov	r7,a
                                   1914 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1915 ;	assignBit
      0003DA D2 B5            [12] 1916 	setb	_P3_5
                                   1917 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003DC 90 00 0D         [24] 1918 	mov	dptr,#0x000d
      0003DF E4               [12] 1919 	clr	a
      0003E0 F0               [24] 1920 	movx	@dptr,a
                                   1921 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1922 ;	assignBit
      0003E1 C2 B5            [12] 1923 	clr	_P3_5
                                   1924 ;	.\ecen4350_lcd_v4.c:335: return d;
      0003E3 8F 82            [24] 1925 	mov	dpl,r7
                                   1926 ;	.\ecen4350_lcd_v4.c:336: }
      0003E5 22               [24] 1927 	ret
                                   1928 ;------------------------------------------------------------
                                   1929 ;Allocation info for local variables in function 'rtcPrint'
                                   1930 ;------------------------------------------------------------
                                   1931 ;__1310720100              Allocated to registers 
                                   1932 ;__1310720097              Allocated to registers 
                                   1933 ;__1310720094              Allocated to registers 
                                   1934 ;__1310720091              Allocated to registers 
                                   1935 ;__1310720088              Allocated to registers 
                                   1936 ;__1310720085              Allocated to registers 
                                   1937 ;mi1                       Allocated to registers 
                                   1938 ;mi10                      Allocated to registers 
                                   1939 ;s1                        Allocated to registers 
                                   1940 ;s10                       Allocated to registers 
                                   1941 ;h1                        Allocated to registers 
                                   1942 ;h10                       Allocated to registers 
                                   1943 ;printval                  Allocated with name '_rtcPrint_printval_65536_226'
                                   1944 ;__1310720086              Allocated to registers 
                                   1945 ;addr                      Allocated to registers 
                                   1946 ;__1310720079              Allocated to registers 
                                   1947 ;d                         Allocated to registers r7 
                                   1948 ;map_address               Allocated to registers 
                                   1949 ;__1310720076              Allocated to registers 
                                   1950 ;__1310720077              Allocated to registers 
                                   1951 ;addr                      Allocated to registers 
                                   1952 ;d                         Allocated to registers 
                                   1953 ;map_address               Allocated to registers 
                                   1954 ;__1310720064              Allocated to registers 
                                   1955 ;__1310720065              Allocated to registers 
                                   1956 ;map_address               Allocated to registers 
                                   1957 ;d                         Allocated to registers 
                                   1958 ;__1310720080              Allocated to registers 
                                   1959 ;map_address               Allocated to registers 
                                   1960 ;d                         Allocated to registers r7 
                                   1961 ;__1310720082              Allocated to registers 
                                   1962 ;__1310720083              Allocated to registers 
                                   1963 ;addr                      Allocated to registers 
                                   1964 ;d                         Allocated to registers 
                                   1965 ;map_address               Allocated to registers 
                                   1966 ;__1310720064              Allocated to registers 
                                   1967 ;__1310720065              Allocated to registers 
                                   1968 ;map_address               Allocated to registers 
                                   1969 ;d                         Allocated to registers 
                                   1970 ;__1310720089              Allocated to registers 
                                   1971 ;addr                      Allocated to registers 
                                   1972 ;__1310720079              Allocated to registers 
                                   1973 ;d                         Allocated to registers r6 
                                   1974 ;map_address               Allocated to registers 
                                   1975 ;__1310720076              Allocated to registers 
                                   1976 ;__1310720077              Allocated to registers 
                                   1977 ;addr                      Allocated to registers 
                                   1978 ;d                         Allocated to registers 
                                   1979 ;map_address               Allocated to registers 
                                   1980 ;__1310720064              Allocated to registers 
                                   1981 ;__1310720065              Allocated to registers 
                                   1982 ;map_address               Allocated to registers 
                                   1983 ;d                         Allocated to registers 
                                   1984 ;__1310720080              Allocated to registers 
                                   1985 ;map_address               Allocated to registers 
                                   1986 ;d                         Allocated to registers r6 
                                   1987 ;__1310720082              Allocated to registers 
                                   1988 ;__1310720083              Allocated to registers 
                                   1989 ;addr                      Allocated to registers 
                                   1990 ;d                         Allocated to registers 
                                   1991 ;map_address               Allocated to registers 
                                   1992 ;__1310720064              Allocated to registers 
                                   1993 ;__1310720065              Allocated to registers 
                                   1994 ;map_address               Allocated to registers 
                                   1995 ;d                         Allocated to registers 
                                   1996 ;__1310720092              Allocated to registers 
                                   1997 ;addr                      Allocated to registers 
                                   1998 ;__1310720079              Allocated to registers 
                                   1999 ;d                         Allocated to registers r5 
                                   2000 ;map_address               Allocated to registers 
                                   2001 ;__1310720076              Allocated to registers 
                                   2002 ;__1310720077              Allocated to registers 
                                   2003 ;addr                      Allocated to registers 
                                   2004 ;d                         Allocated to registers 
                                   2005 ;map_address               Allocated to registers 
                                   2006 ;__1310720064              Allocated to registers 
                                   2007 ;__1310720065              Allocated to registers 
                                   2008 ;map_address               Allocated to registers 
                                   2009 ;d                         Allocated to registers 
                                   2010 ;__1310720080              Allocated to registers 
                                   2011 ;map_address               Allocated to registers 
                                   2012 ;d                         Allocated to registers r5 
                                   2013 ;__1310720082              Allocated to registers 
                                   2014 ;__1310720083              Allocated to registers 
                                   2015 ;addr                      Allocated to registers 
                                   2016 ;d                         Allocated to registers 
                                   2017 ;map_address               Allocated to registers 
                                   2018 ;__1310720064              Allocated to registers 
                                   2019 ;__1310720065              Allocated to registers 
                                   2020 ;map_address               Allocated to registers 
                                   2021 ;d                         Allocated to registers 
                                   2022 ;__1310720095              Allocated to registers 
                                   2023 ;addr                      Allocated to registers 
                                   2024 ;__1310720079              Allocated to registers 
                                   2025 ;d                         Allocated to registers r4 
                                   2026 ;map_address               Allocated to registers 
                                   2027 ;__1310720076              Allocated to registers 
                                   2028 ;__1310720077              Allocated to registers 
                                   2029 ;addr                      Allocated to registers 
                                   2030 ;d                         Allocated to registers 
                                   2031 ;map_address               Allocated to registers 
                                   2032 ;__1310720064              Allocated to registers 
                                   2033 ;__1310720065              Allocated to registers 
                                   2034 ;map_address               Allocated to registers 
                                   2035 ;d                         Allocated to registers 
                                   2036 ;__1310720080              Allocated to registers 
                                   2037 ;map_address               Allocated to registers 
                                   2038 ;d                         Allocated to registers r4 
                                   2039 ;__1310720082              Allocated to registers 
                                   2040 ;__1310720083              Allocated to registers 
                                   2041 ;addr                      Allocated to registers 
                                   2042 ;d                         Allocated to registers 
                                   2043 ;map_address               Allocated to registers 
                                   2044 ;__1310720064              Allocated to registers 
                                   2045 ;__1310720065              Allocated to registers 
                                   2046 ;map_address               Allocated to registers 
                                   2047 ;d                         Allocated to registers 
                                   2048 ;__1310720098              Allocated to registers 
                                   2049 ;addr                      Allocated to registers 
                                   2050 ;__1310720079              Allocated to registers 
                                   2051 ;d                         Allocated to registers r3 
                                   2052 ;map_address               Allocated to registers 
                                   2053 ;__1310720076              Allocated to registers 
                                   2054 ;__1310720077              Allocated to registers 
                                   2055 ;addr                      Allocated to registers 
                                   2056 ;d                         Allocated to registers 
                                   2057 ;map_address               Allocated to registers 
                                   2058 ;__1310720064              Allocated to registers 
                                   2059 ;__1310720065              Allocated to registers 
                                   2060 ;map_address               Allocated to registers 
                                   2061 ;d                         Allocated to registers 
                                   2062 ;__1310720080              Allocated to registers 
                                   2063 ;map_address               Allocated to registers 
                                   2064 ;d                         Allocated to registers r3 
                                   2065 ;__1310720082              Allocated to registers 
                                   2066 ;__1310720083              Allocated to registers 
                                   2067 ;addr                      Allocated to registers 
                                   2068 ;d                         Allocated to registers 
                                   2069 ;map_address               Allocated to registers 
                                   2070 ;__1310720064              Allocated to registers 
                                   2071 ;__1310720065              Allocated to registers 
                                   2072 ;map_address               Allocated to registers 
                                   2073 ;d                         Allocated to registers 
                                   2074 ;__1310720101              Allocated to registers 
                                   2075 ;addr                      Allocated to registers 
                                   2076 ;__1310720079              Allocated to registers 
                                   2077 ;d                         Allocated to registers r2 
                                   2078 ;map_address               Allocated to registers 
                                   2079 ;__1310720076              Allocated to registers 
                                   2080 ;__1310720077              Allocated to registers 
                                   2081 ;addr                      Allocated to registers 
                                   2082 ;d                         Allocated to registers 
                                   2083 ;map_address               Allocated to registers 
                                   2084 ;__1310720064              Allocated to registers 
                                   2085 ;__1310720065              Allocated to registers 
                                   2086 ;map_address               Allocated to registers 
                                   2087 ;d                         Allocated to registers 
                                   2088 ;__1310720080              Allocated to registers 
                                   2089 ;map_address               Allocated to registers 
                                   2090 ;d                         Allocated to registers r2 
                                   2091 ;__1310720082              Allocated to registers 
                                   2092 ;__1310720083              Allocated to registers 
                                   2093 ;addr                      Allocated to registers 
                                   2094 ;d                         Allocated to registers 
                                   2095 ;map_address               Allocated to registers 
                                   2096 ;__1310720064              Allocated to registers 
                                   2097 ;__1310720065              Allocated to registers 
                                   2098 ;map_address               Allocated to registers 
                                   2099 ;d                         Allocated to registers 
                                   2100 ;------------------------------------------------------------
                                   2101 ;	.\ecen4350_lcd_v4.c:338: void rtcPrint(void)
                                   2102 ;	-----------------------------------------
                                   2103 ;	 function rtcPrint
                                   2104 ;	-----------------------------------------
      0003E6                       2105 _rtcPrint:
                                   2106 ;	.\ecen4350_lcd_v4.c:342: printval[8] = '\0'; // end with address null character for string
      0003E6 75*1F 00         [24] 2107 	mov	(_rtcPrint_printval_65536_226 + 0x0008),#0x00
                                   2108 ;	.\ecen4350_lcd_v4.c:343: printval[2] = ':';
      0003E9 75*19 3A         [24] 2109 	mov	(_rtcPrint_printval_65536_226 + 0x0002),#0x3a
                                   2110 ;	.\ecen4350_lcd_v4.c:344: printval[5] = ':';
      0003EC 75*1C 3A         [24] 2111 	mov	(_rtcPrint_printval_65536_226 + 0x0005),#0x3a
                                   2112 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2113 ;	assignBit
      0003EF D2 B5            [12] 2114 	setb	_P3_5
                                   2115 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003F1 90 00 0D         [24] 2116 	mov	dptr,#0x000d
      0003F4 74 01            [12] 2117 	mov	a,#0x01
      0003F6 F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2120 ;	assignBit
      0003F7 C2 B5            [12] 2121 	clr	_P3_5
                                   2122 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      0003F9 12r03r6B         [24] 2123 	lcall	_rtcBusy
                                   2124 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2125 ;	assignBit
      0003FC D2 B5            [12] 2126 	setb	_P3_5
                                   2127 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0003FE 90 00 02         [24] 2128 	mov	dptr,#0x0002
      000401 E0               [24] 2129 	movx	a,@dptr
      000402 FF               [12] 2130 	mov	r7,a
                                   2131 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2132 ;	assignBit
      000403 C2 B5            [12] 2133 	clr	_P3_5
                                   2134 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000405 74 0F            [12] 2135 	mov	a,#0x0f
      000407 5F               [12] 2136 	anl	a,r7
      000408 44 30            [12] 2137 	orl	a,#0x30
      00040A FF               [12] 2138 	mov	r7,a
                                   2139 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2140 ;	assignBit
      00040B D2 B5            [12] 2141 	setb	_P3_5
                                   2142 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00040D 90 00 0D         [24] 2143 	mov	dptr,#0x000d
      000410 E4               [12] 2144 	clr	a
      000411 F0               [24] 2145 	movx	@dptr,a
                                   2146 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2147 ;	assignBit
      000412 C2 B5            [12] 2148 	clr	_P3_5
                                   2149 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2150 ;	assignBit
      000414 D2 B5            [12] 2151 	setb	_P3_5
                                   2152 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000416 90 00 0D         [24] 2153 	mov	dptr,#0x000d
      000419 74 01            [12] 2154 	mov	a,#0x01
      00041B F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2157 ;	assignBit
      00041C C2 B5            [12] 2158 	clr	_P3_5
                                   2159 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      00041E C0 07            [24] 2160 	push	ar7
      000420 12r03r6B         [24] 2161 	lcall	_rtcBusy
                                   2162 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2163 ;	assignBit
      000423 D2 B5            [12] 2164 	setb	_P3_5
                                   2165 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000425 90 00 03         [24] 2166 	mov	dptr,#0x0003
      000428 E0               [24] 2167 	movx	a,@dptr
      000429 FE               [12] 2168 	mov	r6,a
                                   2169 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2170 ;	assignBit
      00042A C2 B5            [12] 2171 	clr	_P3_5
                                   2172 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00042C 74 0F            [12] 2173 	mov	a,#0x0f
      00042E 5E               [12] 2174 	anl	a,r6
      00042F 44 30            [12] 2175 	orl	a,#0x30
      000431 FE               [12] 2176 	mov	r6,a
                                   2177 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2178 ;	assignBit
      000432 D2 B5            [12] 2179 	setb	_P3_5
                                   2180 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000434 90 00 0D         [24] 2181 	mov	dptr,#0x000d
      000437 E4               [12] 2182 	clr	a
      000438 F0               [24] 2183 	movx	@dptr,a
                                   2184 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2185 ;	assignBit
      000439 C2 B5            [12] 2186 	clr	_P3_5
                                   2187 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2188 ;	assignBit
      00043B D2 B5            [12] 2189 	setb	_P3_5
                                   2190 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00043D 90 00 0D         [24] 2191 	mov	dptr,#0x000d
      000440 74 01            [12] 2192 	mov	a,#0x01
      000442 F0               [24] 2193 	movx	@dptr,a
                                   2194 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2195 ;	assignBit
      000443 C2 B5            [12] 2196 	clr	_P3_5
                                   2197 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      000445 C0 06            [24] 2198 	push	ar6
      000447 12r03r6B         [24] 2199 	lcall	_rtcBusy
                                   2200 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2201 ;	assignBit
      00044A D2 B5            [12] 2202 	setb	_P3_5
                                   2203 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      00044C 90 00 04         [24] 2204 	mov	dptr,#0x0004
      00044F E0               [24] 2205 	movx	a,@dptr
      000450 FD               [12] 2206 	mov	r5,a
                                   2207 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2208 ;	assignBit
      000451 C2 B5            [12] 2209 	clr	_P3_5
                                   2210 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000453 74 0F            [12] 2211 	mov	a,#0x0f
      000455 5D               [12] 2212 	anl	a,r5
      000456 44 30            [12] 2213 	orl	a,#0x30
      000458 FD               [12] 2214 	mov	r5,a
                                   2215 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2216 ;	assignBit
      000459 D2 B5            [12] 2217 	setb	_P3_5
                                   2218 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00045B 90 00 0D         [24] 2219 	mov	dptr,#0x000d
      00045E E4               [12] 2220 	clr	a
      00045F F0               [24] 2221 	movx	@dptr,a
                                   2222 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2223 ;	assignBit
      000460 C2 B5            [12] 2224 	clr	_P3_5
                                   2225 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2226 ;	assignBit
      000462 D2 B5            [12] 2227 	setb	_P3_5
                                   2228 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000464 90 00 0D         [24] 2229 	mov	dptr,#0x000d
      000467 74 01            [12] 2230 	mov	a,#0x01
      000469 F0               [24] 2231 	movx	@dptr,a
                                   2232 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2233 ;	assignBit
      00046A C2 B5            [12] 2234 	clr	_P3_5
                                   2235 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      00046C C0 05            [24] 2236 	push	ar5
      00046E 12r03r6B         [24] 2237 	lcall	_rtcBusy
                                   2238 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2239 ;	assignBit
      000471 D2 B5            [12] 2240 	setb	_P3_5
                                   2241 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000473 90 00 05         [24] 2242 	mov	dptr,#0x0005
      000476 E0               [24] 2243 	movx	a,@dptr
      000477 FC               [12] 2244 	mov	r4,a
                                   2245 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2246 ;	assignBit
      000478 C2 B5            [12] 2247 	clr	_P3_5
                                   2248 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00047A 74 0F            [12] 2249 	mov	a,#0x0f
      00047C 5C               [12] 2250 	anl	a,r4
      00047D 44 30            [12] 2251 	orl	a,#0x30
      00047F FC               [12] 2252 	mov	r4,a
                                   2253 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2254 ;	assignBit
      000480 D2 B5            [12] 2255 	setb	_P3_5
                                   2256 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000482 90 00 0D         [24] 2257 	mov	dptr,#0x000d
      000485 E4               [12] 2258 	clr	a
      000486 F0               [24] 2259 	movx	@dptr,a
                                   2260 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2261 ;	assignBit
      000487 C2 B5            [12] 2262 	clr	_P3_5
                                   2263 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2264 ;	assignBit
      000489 D2 B5            [12] 2265 	setb	_P3_5
                                   2266 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00048B 90 00 0D         [24] 2267 	mov	dptr,#0x000d
      00048E 74 01            [12] 2268 	mov	a,#0x01
      000490 F0               [24] 2269 	movx	@dptr,a
                                   2270 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2271 ;	assignBit
      000491 C2 B5            [12] 2272 	clr	_P3_5
                                   2273 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      000493 C0 04            [24] 2274 	push	ar4
      000495 12r03r6B         [24] 2275 	lcall	_rtcBusy
                                   2276 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2277 ;	assignBit
      000498 D2 B5            [12] 2278 	setb	_P3_5
                                   2279 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      00049A 90 00 00         [24] 2280 	mov	dptr,#0x0000
      00049D E0               [24] 2281 	movx	a,@dptr
      00049E FB               [12] 2282 	mov	r3,a
                                   2283 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2284 ;	assignBit
      00049F C2 B5            [12] 2285 	clr	_P3_5
                                   2286 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004A1 74 0F            [12] 2287 	mov	a,#0x0f
      0004A3 5B               [12] 2288 	anl	a,r3
      0004A4 44 30            [12] 2289 	orl	a,#0x30
      0004A6 FB               [12] 2290 	mov	r3,a
                                   2291 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2292 ;	assignBit
      0004A7 D2 B5            [12] 2293 	setb	_P3_5
                                   2294 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004A9 90 00 0D         [24] 2295 	mov	dptr,#0x000d
      0004AC E4               [12] 2296 	clr	a
      0004AD F0               [24] 2297 	movx	@dptr,a
                                   2298 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2299 ;	assignBit
      0004AE C2 B5            [12] 2300 	clr	_P3_5
                                   2301 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2302 ;	assignBit
      0004B0 D2 B5            [12] 2303 	setb	_P3_5
                                   2304 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004B2 90 00 0D         [24] 2305 	mov	dptr,#0x000d
      0004B5 74 01            [12] 2306 	mov	a,#0x01
      0004B7 F0               [24] 2307 	movx	@dptr,a
                                   2308 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2309 ;	assignBit
      0004B8 C2 B5            [12] 2310 	clr	_P3_5
                                   2311 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      0004BA C0 03            [24] 2312 	push	ar3
      0004BC 12r03r6B         [24] 2313 	lcall	_rtcBusy
      0004BF D0 03            [24] 2314 	pop	ar3
      0004C1 D0 04            [24] 2315 	pop	ar4
      0004C3 D0 05            [24] 2316 	pop	ar5
      0004C5 D0 06            [24] 2317 	pop	ar6
      0004C7 D0 07            [24] 2318 	pop	ar7
                                   2319 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2320 ;	assignBit
      0004C9 D2 B5            [12] 2321 	setb	_P3_5
                                   2322 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0004CB 90 00 01         [24] 2323 	mov	dptr,#0x0001
      0004CE E0               [24] 2324 	movx	a,@dptr
      0004CF FA               [12] 2325 	mov	r2,a
                                   2326 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2327 ;	assignBit
      0004D0 C2 B5            [12] 2328 	clr	_P3_5
                                   2329 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004D2 74 0F            [12] 2330 	mov	a,#0x0f
      0004D4 5A               [12] 2331 	anl	a,r2
      0004D5 44 30            [12] 2332 	orl	a,#0x30
      0004D7 FA               [12] 2333 	mov	r2,a
                                   2334 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2335 ;	assignBit
      0004D8 D2 B5            [12] 2336 	setb	_P3_5
                                   2337 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004DA 90 00 0D         [24] 2338 	mov	dptr,#0x000d
      0004DD E4               [12] 2339 	clr	a
      0004DE F0               [24] 2340 	movx	@dptr,a
                                   2341 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2342 ;	assignBit
      0004DF C2 B5            [12] 2343 	clr	_P3_5
                                   2344 ;	.\ecen4350_lcd_v4.c:358: printval[0] = h10;
      0004E1 8C*17            [24] 2345 	mov	_rtcPrint_printval_65536_226,r4
                                   2346 ;	.\ecen4350_lcd_v4.c:359: printval[1] = h1;
      0004E3 8D*18            [24] 2347 	mov	(_rtcPrint_printval_65536_226 + 0x0001),r5
                                   2348 ;	.\ecen4350_lcd_v4.c:360: printval[3] = mi10;
      0004E5 8E*1A            [24] 2349 	mov	(_rtcPrint_printval_65536_226 + 0x0003),r6
                                   2350 ;	.\ecen4350_lcd_v4.c:361: printval[4] = mi1;
      0004E7 8F*1B            [24] 2351 	mov	(_rtcPrint_printval_65536_226 + 0x0004),r7
                                   2352 ;	.\ecen4350_lcd_v4.c:362: printval[6] = s10;
      0004E9 8A*1D            [24] 2353 	mov	(_rtcPrint_printval_65536_226 + 0x0006),r2
                                   2354 ;	.\ecen4350_lcd_v4.c:363: printval[7] = s1;
      0004EB 8B*1E            [24] 2355 	mov	(_rtcPrint_printval_65536_226 + 0x0007),r3
                                   2356 ;	.\ecen4350_lcd_v4.c:364: LCD_string_write(printval);
      0004ED 90r00r17         [24] 2357 	mov	dptr,#_rtcPrint_printval_65536_226
      0004F0 75 F0 40         [24] 2358 	mov	b,#0x40
                                   2359 ;	.\ecen4350_lcd_v4.c:365: }
      0004F3 02r10r10         [24] 2360 	ljmp	_LCD_string_write
                                   2361 ;------------------------------------------------------------
                                   2362 ;Allocation info for local variables in function 'setCursor'
                                   2363 ;------------------------------------------------------------
                                   2364 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2365 ;x                         Allocated to registers 
                                   2366 ;------------------------------------------------------------
                                   2367 ;	.\ecen4350_lcd_v4.c:367: void setCursor(u16 x, u16 y)
                                   2368 ;	-----------------------------------------
                                   2369 ;	 function setCursor
                                   2370 ;	-----------------------------------------
      0004F6                       2371 _setCursor:
      0004F6 85 82*08         [24] 2372 	mov	_cursor_x,dpl
      0004F9 85 83*09         [24] 2373 	mov	(_cursor_x + 1),dph
                                   2374 ;	.\ecen4350_lcd_v4.c:370: cursor_y = y;
      0004FC 85*00*0A         [24] 2375 	mov	_cursor_y,_setCursor_PARM_2
      0004FF 85*01*0B         [24] 2376 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2377 ;	.\ecen4350_lcd_v4.c:371: }
      000502 22               [24] 2378 	ret
                                   2379 ;------------------------------------------------------------
                                   2380 ;Allocation info for local variables in function 'setTextColor'
                                   2381 ;------------------------------------------------------------
                                   2382 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2383 ;x                         Allocated to registers 
                                   2384 ;------------------------------------------------------------
                                   2385 ;	.\ecen4350_lcd_v4.c:373: void setTextColor(u16 x, u16 y)
                                   2386 ;	-----------------------------------------
                                   2387 ;	 function setTextColor
                                   2388 ;	-----------------------------------------
      000503                       2389 _setTextColor:
      000503 85 82*0E         [24] 2390 	mov	_textcolor,dpl
      000506 85 83*0F         [24] 2391 	mov	(_textcolor + 1),dph
                                   2392 ;	.\ecen4350_lcd_v4.c:376: textbgcolor = y;
      000509 85*00*10         [24] 2393 	mov	_textbgcolor,_setTextColor_PARM_2
      00050C 85*01*11         [24] 2394 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2395 ;	.\ecen4350_lcd_v4.c:377: }
      00050F 22               [24] 2396 	ret
                                   2397 ;------------------------------------------------------------
                                   2398 ;Allocation info for local variables in function 'setTextSize'
                                   2399 ;------------------------------------------------------------
                                   2400 ;s                         Allocated to registers r7 
                                   2401 ;------------------------------------------------------------
                                   2402 ;	.\ecen4350_lcd_v4.c:380: void setTextSize(u8 s)
                                   2403 ;	-----------------------------------------
                                   2404 ;	 function setTextSize
                                   2405 ;	-----------------------------------------
      000510                       2406 _setTextSize:
                                   2407 ;	.\ecen4350_lcd_v4.c:382: if (s > 8)
      000510 E5 82            [12] 2408 	mov	a,dpl
      000512 FF               [12] 2409 	mov	r7,a
      000513 24 F7            [12] 2410 	add	a,#0xff - 0x08
      000515 50 01            [24] 2411 	jnc	00102$
                                   2412 ;	.\ecen4350_lcd_v4.c:383: return;
      000517 22               [24] 2413 	ret
      000518                       2414 00102$:
                                   2415 ;	.\ecen4350_lcd_v4.c:384: textsize = (s > 0) ? s : 1;
      000518 EF               [12] 2416 	mov	a,r7
      000519 60 06            [24] 2417 	jz	00105$
      00051B 8F 06            [24] 2418 	mov	ar6,r7
      00051D 7F 00            [12] 2419 	mov	r7,#0x00
      00051F 80 04            [24] 2420 	sjmp	00106$
      000521                       2421 00105$:
      000521 7E 01            [12] 2422 	mov	r6,#0x01
      000523 7F 00            [12] 2423 	mov	r7,#0x00
      000525                       2424 00106$:
      000525 8E*0C            [24] 2425 	mov	_textsize,r6
                                   2426 ;	.\ecen4350_lcd_v4.c:385: }
      000527 22               [24] 2427 	ret
                                   2428 ;------------------------------------------------------------
                                   2429 ;Allocation info for local variables in function 'setRotation'
                                   2430 ;------------------------------------------------------------
                                   2431 ;flag                      Allocated to registers r7 
                                   2432 ;------------------------------------------------------------
                                   2433 ;	.\ecen4350_lcd_v4.c:387: void setRotation(u8 flag)
                                   2434 ;	-----------------------------------------
                                   2435 ;	 function setRotation
                                   2436 ;	-----------------------------------------
      000528                       2437 _setRotation:
                                   2438 ;	.\ecen4350_lcd_v4.c:389: switch (flag)
      000528 E5 82            [12] 2439 	mov	a,dpl
      00052A FF               [12] 2440 	mov	r7,a
      00052B 24 FC            [12] 2441 	add	a,#0xff - 0x03
      00052D 40 4E            [24] 2442 	jc	00105$
      00052F EF               [12] 2443 	mov	a,r7
      000530 2F               [12] 2444 	add	a,r7
                                   2445 ;	.\ecen4350_lcd_v4.c:391: case 0:
      000531 90r05r35         [24] 2446 	mov	dptr,#00115$
      000534 73               [24] 2447 	jmp	@a+dptr
      000535                       2448 00115$:
      000535 80 06            [24] 2449 	sjmp	00101$
      000537 80 14            [24] 2450 	sjmp	00102$
      000539 80 22            [24] 2451 	sjmp	00103$
      00053B 80 30            [24] 2452 	sjmp	00104$
      00053D                       2453 00101$:
                                   2454 ;	.\ecen4350_lcd_v4.c:392: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00053D 7F 48            [12] 2455 	mov	r7,#0x48
                                   2456 ;	.\ecen4350_lcd_v4.c:393: _width = TFTWIDTH;
      00053F 75*12 F0         [24] 2457 	mov	__width,#0xf0
      000542 75*13 00         [24] 2458 	mov	(__width + 1),#0x00
                                   2459 ;	.\ecen4350_lcd_v4.c:394: _height = TFTHEIGHT;
      000545 75*14 40         [24] 2460 	mov	__height,#0x40
      000548 75*15 01         [24] 2461 	mov	(__height + 1),#0x01
                                   2462 ;	.\ecen4350_lcd_v4.c:395: break;
                                   2463 ;	.\ecen4350_lcd_v4.c:396: case 1:
      00054B 80 3E            [24] 2464 	sjmp	00106$
      00054D                       2465 00102$:
                                   2466 ;	.\ecen4350_lcd_v4.c:397: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00054D 7F 28            [12] 2467 	mov	r7,#0x28
                                   2468 ;	.\ecen4350_lcd_v4.c:398: _width = TFTHEIGHT;
      00054F 75*12 40         [24] 2469 	mov	__width,#0x40
      000552 75*13 01         [24] 2470 	mov	(__width + 1),#0x01
                                   2471 ;	.\ecen4350_lcd_v4.c:399: _height = TFTWIDTH;
      000555 75*14 F0         [24] 2472 	mov	__height,#0xf0
      000558 75*15 00         [24] 2473 	mov	(__height + 1),#0x00
                                   2474 ;	.\ecen4350_lcd_v4.c:400: break;
                                   2475 ;	.\ecen4350_lcd_v4.c:401: case 2:
      00055B 80 2E            [24] 2476 	sjmp	00106$
      00055D                       2477 00103$:
                                   2478 ;	.\ecen4350_lcd_v4.c:402: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00055D 7F 88            [12] 2479 	mov	r7,#0x88
                                   2480 ;	.\ecen4350_lcd_v4.c:403: _width = TFTWIDTH;
      00055F 75*12 F0         [24] 2481 	mov	__width,#0xf0
      000562 75*13 00         [24] 2482 	mov	(__width + 1),#0x00
                                   2483 ;	.\ecen4350_lcd_v4.c:404: _height = TFTHEIGHT;
      000565 75*14 40         [24] 2484 	mov	__height,#0x40
      000568 75*15 01         [24] 2485 	mov	(__height + 1),#0x01
                                   2486 ;	.\ecen4350_lcd_v4.c:405: break;
                                   2487 ;	.\ecen4350_lcd_v4.c:406: case 3:
      00056B 80 1E            [24] 2488 	sjmp	00106$
      00056D                       2489 00104$:
                                   2490 ;	.\ecen4350_lcd_v4.c:407: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00056D 7F E8            [12] 2491 	mov	r7,#0xe8
                                   2492 ;	.\ecen4350_lcd_v4.c:408: _width = TFTHEIGHT;
      00056F 75*12 40         [24] 2493 	mov	__width,#0x40
      000572 75*13 01         [24] 2494 	mov	(__width + 1),#0x01
                                   2495 ;	.\ecen4350_lcd_v4.c:409: _height = TFTWIDTH;
      000575 75*14 F0         [24] 2496 	mov	__height,#0xf0
      000578 75*15 00         [24] 2497 	mov	(__height + 1),#0x00
                                   2498 ;	.\ecen4350_lcd_v4.c:410: break;
                                   2499 ;	.\ecen4350_lcd_v4.c:411: default:
      00057B 80 0E            [24] 2500 	sjmp	00106$
      00057D                       2501 00105$:
                                   2502 ;	.\ecen4350_lcd_v4.c:412: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00057D 7F 48            [12] 2503 	mov	r7,#0x48
                                   2504 ;	.\ecen4350_lcd_v4.c:413: _width = TFTWIDTH;
      00057F 75*12 F0         [24] 2505 	mov	__width,#0xf0
      000582 75*13 00         [24] 2506 	mov	(__width + 1),#0x00
                                   2507 ;	.\ecen4350_lcd_v4.c:414: _height = TFTHEIGHT;
      000585 75*14 40         [24] 2508 	mov	__height,#0x40
      000588 75*15 01         [24] 2509 	mov	(__height + 1),#0x01
                                   2510 ;	.\ecen4350_lcd_v4.c:416: }
      00058B                       2511 00106$:
                                   2512 ;	.\ecen4350_lcd_v4.c:417: writeRegister8(ILI9341_MEMCONTROL, flag);
      00058B 8F*00            [24] 2513 	mov	_writeRegister8_PARM_2,r7
      00058D 75 82 36         [24] 2514 	mov	dpl,#0x36
                                   2515 ;	.\ecen4350_lcd_v4.c:418: }
      000590 02r01r75         [24] 2516 	ljmp	_writeRegister8
                                   2517 ;------------------------------------------------------------
                                   2518 ;Allocation info for local variables in function 'setAddress'
                                   2519 ;------------------------------------------------------------
                                   2520 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2521 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2522 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2523 ;x1                        Allocated to registers r6 r7 
                                   2524 ;------------------------------------------------------------
                                   2525 ;	.\ecen4350_lcd_v4.c:421: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2526 ;	-----------------------------------------
                                   2527 ;	 function setAddress
                                   2528 ;	-----------------------------------------
      000593                       2529 _setAddress:
      000593 AE 82            [24] 2530 	mov	r6,dpl
      000595 AF 83            [24] 2531 	mov	r7,dph
                                   2532 ;	.\ecen4350_lcd_v4.c:424: write8Reg(0x2A);
                                   2533 ;	assignBit
      000597 C2 B4            [12] 2534 	clr	_P3_4
                                   2535 ;	assignBit
      000599 D2 B5            [12] 2536 	setb	_P3_5
      00059B 85*02 82         [24] 2537 	mov	dpl,_lcd_address
      00059E 85*03 83         [24] 2538 	mov	dph,(_lcd_address + 1)
      0005A1 74 2A            [12] 2539 	mov	a,#0x2a
      0005A3 F0               [24] 2540 	movx	@dptr,a
                                   2541 ;	assignBit
      0005A4 C2 B5            [12] 2542 	clr	_P3_5
                                   2543 ;	.\ecen4350_lcd_v4.c:425: write8Data(x1 >> 8);
                                   2544 ;	assignBit
      0005A6 D2 B4            [12] 2545 	setb	_P3_4
                                   2546 ;	assignBit
      0005A8 D2 B5            [12] 2547 	setb	_P3_5
      0005AA 85*02 82         [24] 2548 	mov	dpl,_lcd_address
      0005AD 85*03 83         [24] 2549 	mov	dph,(_lcd_address + 1)
      0005B0 8F 05            [24] 2550 	mov	ar5,r7
      0005B2 ED               [12] 2551 	mov	a,r5
      0005B3 F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	assignBit
      0005B4 C2 B5            [12] 2554 	clr	_P3_5
                                   2555 ;	.\ecen4350_lcd_v4.c:426: write8Data(x1);
                                   2556 ;	assignBit
      0005B6 D2 B4            [12] 2557 	setb	_P3_4
                                   2558 ;	assignBit
      0005B8 D2 B5            [12] 2559 	setb	_P3_5
      0005BA 85*02 82         [24] 2560 	mov	dpl,_lcd_address
      0005BD 85*03 83         [24] 2561 	mov	dph,(_lcd_address + 1)
      0005C0 EE               [12] 2562 	mov	a,r6
      0005C1 F0               [24] 2563 	movx	@dptr,a
                                   2564 ;	assignBit
      0005C2 C2 B5            [12] 2565 	clr	_P3_5
                                   2566 ;	.\ecen4350_lcd_v4.c:427: write8Data(x2 >> 8);
                                   2567 ;	assignBit
      0005C4 D2 B4            [12] 2568 	setb	_P3_4
                                   2569 ;	assignBit
      0005C6 D2 B5            [12] 2570 	setb	_P3_5
      0005C8 85*02 82         [24] 2571 	mov	dpl,_lcd_address
      0005CB 85*03 83         [24] 2572 	mov	dph,(_lcd_address + 1)
      0005CE E5*03            [12] 2573 	mov	a,(_setAddress_PARM_3 + 1)
      0005D0 F0               [24] 2574 	movx	@dptr,a
                                   2575 ;	assignBit
      0005D1 C2 B5            [12] 2576 	clr	_P3_5
                                   2577 ;	.\ecen4350_lcd_v4.c:428: write8Data(x2);
                                   2578 ;	assignBit
      0005D3 D2 B4            [12] 2579 	setb	_P3_4
                                   2580 ;	assignBit
      0005D5 D2 B5            [12] 2581 	setb	_P3_5
      0005D7 85*02 82         [24] 2582 	mov	dpl,_lcd_address
      0005DA 85*03 83         [24] 2583 	mov	dph,(_lcd_address + 1)
      0005DD E5*02            [12] 2584 	mov	a,_setAddress_PARM_3
      0005DF F0               [24] 2585 	movx	@dptr,a
                                   2586 ;	assignBit
      0005E0 C2 B5            [12] 2587 	clr	_P3_5
                                   2588 ;	.\ecen4350_lcd_v4.c:430: write8Reg(0x2B);
                                   2589 ;	assignBit
      0005E2 C2 B4            [12] 2590 	clr	_P3_4
                                   2591 ;	assignBit
      0005E4 D2 B5            [12] 2592 	setb	_P3_5
      0005E6 85*02 82         [24] 2593 	mov	dpl,_lcd_address
      0005E9 85*03 83         [24] 2594 	mov	dph,(_lcd_address + 1)
      0005EC 74 2B            [12] 2595 	mov	a,#0x2b
      0005EE F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	assignBit
      0005EF C2 B5            [12] 2598 	clr	_P3_5
                                   2599 ;	.\ecen4350_lcd_v4.c:431: write8Data(y1 >> 8);
                                   2600 ;	assignBit
      0005F1 D2 B4            [12] 2601 	setb	_P3_4
                                   2602 ;	assignBit
      0005F3 D2 B5            [12] 2603 	setb	_P3_5
      0005F5 85*02 82         [24] 2604 	mov	dpl,_lcd_address
      0005F8 85*03 83         [24] 2605 	mov	dph,(_lcd_address + 1)
      0005FB E5*01            [12] 2606 	mov	a,(_setAddress_PARM_2 + 1)
      0005FD F0               [24] 2607 	movx	@dptr,a
                                   2608 ;	assignBit
      0005FE C2 B5            [12] 2609 	clr	_P3_5
                                   2610 ;	.\ecen4350_lcd_v4.c:432: write8Data(y1);
                                   2611 ;	assignBit
      000600 D2 B4            [12] 2612 	setb	_P3_4
                                   2613 ;	assignBit
      000602 D2 B5            [12] 2614 	setb	_P3_5
      000604 85*02 82         [24] 2615 	mov	dpl,_lcd_address
      000607 85*03 83         [24] 2616 	mov	dph,(_lcd_address + 1)
      00060A E5*00            [12] 2617 	mov	a,_setAddress_PARM_2
      00060C F0               [24] 2618 	movx	@dptr,a
                                   2619 ;	assignBit
      00060D C2 B5            [12] 2620 	clr	_P3_5
                                   2621 ;	.\ecen4350_lcd_v4.c:433: write8Data(y2 >> 8);
                                   2622 ;	assignBit
      00060F D2 B4            [12] 2623 	setb	_P3_4
                                   2624 ;	assignBit
      000611 D2 B5            [12] 2625 	setb	_P3_5
      000613 85*02 82         [24] 2626 	mov	dpl,_lcd_address
      000616 85*03 83         [24] 2627 	mov	dph,(_lcd_address + 1)
      000619 E5*05            [12] 2628 	mov	a,(_setAddress_PARM_4 + 1)
      00061B F0               [24] 2629 	movx	@dptr,a
                                   2630 ;	assignBit
      00061C C2 B5            [12] 2631 	clr	_P3_5
                                   2632 ;	.\ecen4350_lcd_v4.c:434: write8Data(y2);
                                   2633 ;	assignBit
      00061E D2 B4            [12] 2634 	setb	_P3_4
                                   2635 ;	assignBit
      000620 D2 B5            [12] 2636 	setb	_P3_5
      000622 85*02 82         [24] 2637 	mov	dpl,_lcd_address
      000625 85*03 83         [24] 2638 	mov	dph,(_lcd_address + 1)
      000628 E5*04            [12] 2639 	mov	a,_setAddress_PARM_4
      00062A F0               [24] 2640 	movx	@dptr,a
                                   2641 ;	assignBit
      00062B C2 B5            [12] 2642 	clr	_P3_5
                                   2643 ;	.\ecen4350_lcd_v4.c:437: }
      00062D 22               [24] 2644 	ret
                                   2645 ;------------------------------------------------------------
                                   2646 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2647 ;------------------------------------------------------------
                                   2648 ;	.\ecen4350_lcd_v4.c:439: void TFT_LCD_INIT(void)
                                   2649 ;	-----------------------------------------
                                   2650 ;	 function TFT_LCD_INIT
                                   2651 ;	-----------------------------------------
      00062E                       2652 _TFT_LCD_INIT:
                                   2653 ;	.\ecen4350_lcd_v4.c:443: _width = TFTWIDTH;
      00062E 75*12 F0         [24] 2654 	mov	__width,#0xf0
      000631 75*13 00         [24] 2655 	mov	(__width + 1),#0x00
                                   2656 ;	.\ecen4350_lcd_v4.c:444: _height = TFTHEIGHT;
      000634 75*14 40         [24] 2657 	mov	__height,#0x40
      000637 75*15 01         [24] 2658 	mov	(__height + 1),#0x01
                                   2659 ;	.\ecen4350_lcd_v4.c:447: IOM = 0;
                                   2660 ;	assignBit
      00063A C2 B5            [12] 2661 	clr	_P3_5
                                   2662 ;	.\ecen4350_lcd_v4.c:449: CD = 1;
                                   2663 ;	assignBit
      00063C D2 B4            [12] 2664 	setb	_P3_4
                                   2665 ;	.\ecen4350_lcd_v4.c:451: write8Reg(0x00);
                                   2666 ;	assignBit
      00063E C2 B4            [12] 2667 	clr	_P3_4
                                   2668 ;	assignBit
      000640 D2 B5            [12] 2669 	setb	_P3_5
      000642 85*02 82         [24] 2670 	mov	dpl,_lcd_address
      000645 85*03 83         [24] 2671 	mov	dph,(_lcd_address + 1)
      000648 E4               [12] 2672 	clr	a
      000649 F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	assignBit
      00064A C2 B5            [12] 2675 	clr	_P3_5
                                   2676 ;	.\ecen4350_lcd_v4.c:452: write8Data(0x00);
                                   2677 ;	assignBit
      00064C D2 B4            [12] 2678 	setb	_P3_4
                                   2679 ;	assignBit
      00064E D2 B5            [12] 2680 	setb	_P3_5
      000650 85*02 82         [24] 2681 	mov	dpl,_lcd_address
      000653 85*03 83         [24] 2682 	mov	dph,(_lcd_address + 1)
      000656 E4               [12] 2683 	clr	a
      000657 F0               [24] 2684 	movx	@dptr,a
                                   2685 ;	assignBit
      000658 C2 B5            [12] 2686 	clr	_P3_5
                                   2687 ;	.\ecen4350_lcd_v4.c:453: write8Data(0x00);
                                   2688 ;	assignBit
      00065A D2 B4            [12] 2689 	setb	_P3_4
                                   2690 ;	assignBit
      00065C D2 B5            [12] 2691 	setb	_P3_5
      00065E 85*02 82         [24] 2692 	mov	dpl,_lcd_address
      000661 85*03 83         [24] 2693 	mov	dph,(_lcd_address + 1)
      000664 E4               [12] 2694 	clr	a
      000665 F0               [24] 2695 	movx	@dptr,a
                                   2696 ;	assignBit
      000666 C2 B5            [12] 2697 	clr	_P3_5
                                   2698 ;	.\ecen4350_lcd_v4.c:454: write8Data(0x00);
                                   2699 ;	assignBit
      000668 D2 B4            [12] 2700 	setb	_P3_4
                                   2701 ;	assignBit
      00066A D2 B5            [12] 2702 	setb	_P3_5
      00066C 85*02 82         [24] 2703 	mov	dpl,_lcd_address
      00066F 85*03 83         [24] 2704 	mov	dph,(_lcd_address + 1)
      000672 E4               [12] 2705 	clr	a
      000673 F0               [24] 2706 	movx	@dptr,a
                                   2707 ;	assignBit
      000674 C2 B5            [12] 2708 	clr	_P3_5
                                   2709 ;	.\ecen4350_lcd_v4.c:456: delay(100);						// changed from 200 to 100
      000676 90 00 64         [24] 2710 	mov	dptr,#0x0064
      000679 12r00rE0         [24] 2711 	lcall	_delay
                                   2712 ;	.\ecen4350_lcd_v4.c:460: writeRegister8(ILI9341_SOFTRESET, 0);
      00067C 75*00 00         [24] 2713 	mov	_writeRegister8_PARM_2,#0x00
      00067F 75 82 01         [24] 2714 	mov	dpl,#0x01
      000682 12r01r75         [24] 2715 	lcall	_writeRegister8
                                   2716 ;	.\ecen4350_lcd_v4.c:461: delay(50);
      000685 90 00 32         [24] 2717 	mov	dptr,#0x0032
      000688 12r00rE0         [24] 2718 	lcall	_delay
                                   2719 ;	.\ecen4350_lcd_v4.c:462: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00068B 75*00 00         [24] 2720 	mov	_writeRegister8_PARM_2,#0x00
      00068E 75 82 28         [24] 2721 	mov	dpl,#0x28
      000691 12r01r75         [24] 2722 	lcall	_writeRegister8
                                   2723 ;	.\ecen4350_lcd_v4.c:463: delay(10);
      000694 90 00 0A         [24] 2724 	mov	dptr,#0x000a
      000697 12r00rE0         [24] 2725 	lcall	_delay
                                   2726 ;	.\ecen4350_lcd_v4.c:465: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      00069A 75*00 23         [24] 2727 	mov	_writeRegister8_PARM_2,#0x23
      00069D 75 82 C0         [24] 2728 	mov	dpl,#0xc0
      0006A0 12r01r75         [24] 2729 	lcall	_writeRegister8
                                   2730 ;	.\ecen4350_lcd_v4.c:466: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      0006A3 75*00 11         [24] 2731 	mov	_writeRegister8_PARM_2,#0x11
      0006A6 75 82 C1         [24] 2732 	mov	dpl,#0xc1
      0006A9 12r01r75         [24] 2733 	lcall	_writeRegister8
                                   2734 ;	.\ecen4350_lcd_v4.c:467: write8Reg(ILI9341_VCOMCONTROL1);
                                   2735 ;	assignBit
      0006AC C2 B4            [12] 2736 	clr	_P3_4
                                   2737 ;	assignBit
      0006AE D2 B5            [12] 2738 	setb	_P3_5
      0006B0 85*02 82         [24] 2739 	mov	dpl,_lcd_address
      0006B3 85*03 83         [24] 2740 	mov	dph,(_lcd_address + 1)
      0006B6 74 C5            [12] 2741 	mov	a,#0xc5
      0006B8 F0               [24] 2742 	movx	@dptr,a
                                   2743 ;	assignBit
      0006B9 C2 B5            [12] 2744 	clr	_P3_5
                                   2745 ;	.\ecen4350_lcd_v4.c:468: write8Data(0x3d);
                                   2746 ;	assignBit
      0006BB D2 B4            [12] 2747 	setb	_P3_4
                                   2748 ;	assignBit
      0006BD D2 B5            [12] 2749 	setb	_P3_5
      0006BF 85*02 82         [24] 2750 	mov	dpl,_lcd_address
      0006C2 85*03 83         [24] 2751 	mov	dph,(_lcd_address + 1)
      0006C5 74 3D            [12] 2752 	mov	a,#0x3d
      0006C7 F0               [24] 2753 	movx	@dptr,a
                                   2754 ;	assignBit
      0006C8 C2 B5            [12] 2755 	clr	_P3_5
                                   2756 ;	.\ecen4350_lcd_v4.c:469: write8Data(0x30);
                                   2757 ;	assignBit
      0006CA D2 B4            [12] 2758 	setb	_P3_4
                                   2759 ;	assignBit
      0006CC D2 B5            [12] 2760 	setb	_P3_5
      0006CE 85*02 82         [24] 2761 	mov	dpl,_lcd_address
      0006D1 85*03 83         [24] 2762 	mov	dph,(_lcd_address + 1)
      0006D4 74 30            [12] 2763 	mov	a,#0x30
      0006D6 F0               [24] 2764 	movx	@dptr,a
                                   2765 ;	assignBit
      0006D7 C2 B5            [12] 2766 	clr	_P3_5
                                   2767 ;	.\ecen4350_lcd_v4.c:470: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0006D9 75*00 AA         [24] 2768 	mov	_writeRegister8_PARM_2,#0xaa
      0006DC 75 82 C7         [24] 2769 	mov	dpl,#0xc7
      0006DF 12r01r75         [24] 2770 	lcall	_writeRegister8
                                   2771 ;	.\ecen4350_lcd_v4.c:471: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0006E2 75*00 88         [24] 2772 	mov	_writeRegister8_PARM_2,#0x88
      0006E5 75 82 36         [24] 2773 	mov	dpl,#0x36
      0006E8 12r01r75         [24] 2774 	lcall	_writeRegister8
                                   2775 ;	.\ecen4350_lcd_v4.c:472: write8Reg(ILI9341_PIXELFORMAT);
                                   2776 ;	assignBit
      0006EB C2 B4            [12] 2777 	clr	_P3_4
                                   2778 ;	assignBit
      0006ED D2 B5            [12] 2779 	setb	_P3_5
      0006EF 85*02 82         [24] 2780 	mov	dpl,_lcd_address
      0006F2 85*03 83         [24] 2781 	mov	dph,(_lcd_address + 1)
      0006F5 74 3A            [12] 2782 	mov	a,#0x3a
      0006F7 F0               [24] 2783 	movx	@dptr,a
                                   2784 ;	assignBit
      0006F8 C2 B5            [12] 2785 	clr	_P3_5
                                   2786 ;	.\ecen4350_lcd_v4.c:473: write8Data(0x55);
                                   2787 ;	assignBit
      0006FA D2 B4            [12] 2788 	setb	_P3_4
                                   2789 ;	assignBit
      0006FC D2 B5            [12] 2790 	setb	_P3_5
      0006FE 85*02 82         [24] 2791 	mov	dpl,_lcd_address
      000701 85*03 83         [24] 2792 	mov	dph,(_lcd_address + 1)
      000704 74 55            [12] 2793 	mov	a,#0x55
      000706 F0               [24] 2794 	movx	@dptr,a
                                   2795 ;	assignBit
      000707 C2 B5            [12] 2796 	clr	_P3_5
                                   2797 ;	.\ecen4350_lcd_v4.c:474: write8Data(0x00);
                                   2798 ;	assignBit
      000709 D2 B4            [12] 2799 	setb	_P3_4
                                   2800 ;	assignBit
      00070B D2 B5            [12] 2801 	setb	_P3_5
      00070D 85*02 82         [24] 2802 	mov	dpl,_lcd_address
      000710 85*03 83         [24] 2803 	mov	dph,(_lcd_address + 1)
      000713 E4               [12] 2804 	clr	a
      000714 F0               [24] 2805 	movx	@dptr,a
                                   2806 ;	assignBit
      000715 C2 B5            [12] 2807 	clr	_P3_5
                                   2808 ;	.\ecen4350_lcd_v4.c:475: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000717 75*00 1B         [24] 2809 	mov	_writeRegister16_PARM_2,#0x1b
      00071A 75*01 00         [24] 2810 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      00071D 90 00 B1         [24] 2811 	mov	dptr,#0x00b1
      000720 12r01r95         [24] 2812 	lcall	_writeRegister16
                                   2813 ;	.\ecen4350_lcd_v4.c:477: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      000723 75*00 07         [24] 2814 	mov	_writeRegister8_PARM_2,#0x07
      000726 75 82 B7         [24] 2815 	mov	dpl,#0xb7
      000729 12r01r75         [24] 2816 	lcall	_writeRegister8
                                   2817 ;	.\ecen4350_lcd_v4.c:480: writeRegister8(ILI9341_SLEEPOUT, 0);
      00072C 75*00 00         [24] 2818 	mov	_writeRegister8_PARM_2,#0x00
      00072F 75 82 11         [24] 2819 	mov	dpl,#0x11
      000732 12r01r75         [24] 2820 	lcall	_writeRegister8
                                   2821 ;	.\ecen4350_lcd_v4.c:481: delay(100);								// changed from 150 to 100
      000735 90 00 64         [24] 2822 	mov	dptr,#0x0064
      000738 12r00rE0         [24] 2823 	lcall	_delay
                                   2824 ;	.\ecen4350_lcd_v4.c:482: writeRegister8(ILI9341_DISPLAYON, 0);
      00073B 75*00 00         [24] 2825 	mov	_writeRegister8_PARM_2,#0x00
      00073E 75 82 29         [24] 2826 	mov	dpl,#0x29
      000741 12r01r75         [24] 2827 	lcall	_writeRegister8
                                   2828 ;	.\ecen4350_lcd_v4.c:483: delay(150);								// changed from 200 to 150
      000744 90 00 96         [24] 2829 	mov	dptr,#0x0096
      000747 12r00rE0         [24] 2830 	lcall	_delay
                                   2831 ;	.\ecen4350_lcd_v4.c:484: setAddress(0, 0, _width - 1, _height - 1);
      00074A E5*12            [12] 2832 	mov	a,__width
      00074C 24 FF            [12] 2833 	add	a,#0xff
      00074E F5*02            [12] 2834 	mov	_setAddress_PARM_3,a
      000750 E5*13            [12] 2835 	mov	a,(__width + 1)
      000752 34 FF            [12] 2836 	addc	a,#0xff
      000754 F5*03            [12] 2837 	mov	(_setAddress_PARM_3 + 1),a
      000756 E5*14            [12] 2838 	mov	a,__height
      000758 24 FF            [12] 2839 	add	a,#0xff
      00075A F5*04            [12] 2840 	mov	_setAddress_PARM_4,a
      00075C E5*15            [12] 2841 	mov	a,(__height + 1)
      00075E 34 FF            [12] 2842 	addc	a,#0xff
      000760 F5*05            [12] 2843 	mov	(_setAddress_PARM_4 + 1),a
      000762 E4               [12] 2844 	clr	a
      000763 F5*00            [12] 2845 	mov	_setAddress_PARM_2,a
      000765 F5*01            [12] 2846 	mov	(_setAddress_PARM_2 + 1),a
      000767 90 00 00         [24] 2847 	mov	dptr,#0x0000
                                   2848 ;	.\ecen4350_lcd_v4.c:488: }
      00076A 02r05r93         [24] 2849 	ljmp	_setAddress
                                   2850 ;------------------------------------------------------------
                                   2851 ;Allocation info for local variables in function 'drawPixel'
                                   2852 ;------------------------------------------------------------
                                   2853 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2854 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2855 ;x3                        Allocated to registers r6 r7 
                                   2856 ;------------------------------------------------------------
                                   2857 ;	.\ecen4350_lcd_v4.c:489: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2858 ;	-----------------------------------------
                                   2859 ;	 function drawPixel
                                   2860 ;	-----------------------------------------
      00076D                       2861 _drawPixel:
      00076D AE 82            [24] 2862 	mov	r6,dpl
      00076F AF 83            [24] 2863 	mov	r7,dph
                                   2864 ;	.\ecen4350_lcd_v4.c:497: setAddress(x3, y3, x3 + 1, y3 + 1);
      000771 74 01            [12] 2865 	mov	a,#0x01
      000773 2E               [12] 2866 	add	a,r6
      000774 F5*02            [12] 2867 	mov	_setAddress_PARM_3,a
      000776 E4               [12] 2868 	clr	a
      000777 3F               [12] 2869 	addc	a,r7
      000778 F5*03            [12] 2870 	mov	(_setAddress_PARM_3 + 1),a
      00077A 74 01            [12] 2871 	mov	a,#0x01
      00077C 25*20            [12] 2872 	add	a,_drawPixel_PARM_2
      00077E F5*04            [12] 2873 	mov	_setAddress_PARM_4,a
      000780 E4               [12] 2874 	clr	a
      000781 35*21            [12] 2875 	addc	a,(_drawPixel_PARM_2 + 1)
      000783 F5*05            [12] 2876 	mov	(_setAddress_PARM_4 + 1),a
      000785 85*20*00         [24] 2877 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000788 85*21*01         [24] 2878 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      00078B 8E 82            [24] 2879 	mov	dpl,r6
      00078D 8F 83            [24] 2880 	mov	dph,r7
      00078F 12r05r93         [24] 2881 	lcall	_setAddress
                                   2882 ;	.\ecen4350_lcd_v4.c:501: CD = 0;
                                   2883 ;	assignBit
      000792 C2 B4            [12] 2884 	clr	_P3_4
                                   2885 ;	.\ecen4350_lcd_v4.c:502: write8(0x2C);
                                   2886 ;	assignBit
      000794 D2 B5            [12] 2887 	setb	_P3_5
      000796 85*02 82         [24] 2888 	mov	dpl,_lcd_address
      000799 85*03 83         [24] 2889 	mov	dph,(_lcd_address + 1)
      00079C 74 2C            [12] 2890 	mov	a,#0x2c
      00079E F0               [24] 2891 	movx	@dptr,a
                                   2892 ;	assignBit
      00079F C2 B5            [12] 2893 	clr	_P3_5
                                   2894 ;	.\ecen4350_lcd_v4.c:504: CD = 1;
                                   2895 ;	assignBit
      0007A1 D2 B4            [12] 2896 	setb	_P3_4
                                   2897 ;	.\ecen4350_lcd_v4.c:505: write8(color1 >> 8);
                                   2898 ;	assignBit
      0007A3 D2 B5            [12] 2899 	setb	_P3_5
      0007A5 85*02 82         [24] 2900 	mov	dpl,_lcd_address
      0007A8 85*03 83         [24] 2901 	mov	dph,(_lcd_address + 1)
      0007AB E5*23            [12] 2902 	mov	a,(_drawPixel_PARM_3 + 1)
      0007AD F0               [24] 2903 	movx	@dptr,a
                                   2904 ;	assignBit
      0007AE C2 B5            [12] 2905 	clr	_P3_5
                                   2906 ;	.\ecen4350_lcd_v4.c:506: write8(color1);
                                   2907 ;	assignBit
      0007B0 D2 B5            [12] 2908 	setb	_P3_5
      0007B2 85*02 82         [24] 2909 	mov	dpl,_lcd_address
      0007B5 85*03 83         [24] 2910 	mov	dph,(_lcd_address + 1)
      0007B8 E5*22            [12] 2911 	mov	a,_drawPixel_PARM_3
      0007BA F0               [24] 2912 	movx	@dptr,a
                                   2913 ;	assignBit
      0007BB C2 B5            [12] 2914 	clr	_P3_5
                                   2915 ;	.\ecen4350_lcd_v4.c:508: }
      0007BD 22               [24] 2916 	ret
                                   2917 ;------------------------------------------------------------
                                   2918 ;Allocation info for local variables in function 'drawCircle'
                                   2919 ;------------------------------------------------------------
                                   2920 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2921 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2922 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2923 ;x0                        Allocated with name '_drawCircle_x0_65536_393'
                                   2924 ;f                         Allocated with name '_drawCircle_f_65536_394'
                                   2925 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_394'
                                   2926 ;ddF_y                     Allocated to registers r2 r3 
                                   2927 ;x                         Allocated with name '_drawCircle_x_65536_394'
                                   2928 ;y                         Allocated to registers r0 r1 
                                   2929 ;------------------------------------------------------------
                                   2930 ;	.\ecen4350_lcd_v4.c:512: void drawCircle(int x0, int y0, int r, u16 color)
                                   2931 ;	-----------------------------------------
                                   2932 ;	 function drawCircle
                                   2933 ;	-----------------------------------------
      0007BE                       2934 _drawCircle:
      0007BE 85 82*2A         [24] 2935 	mov	_drawCircle_x0_65536_393,dpl
      0007C1 85 83*2B         [24] 2936 	mov	(_drawCircle_x0_65536_393 + 1),dph
                                   2937 ;	.\ecen4350_lcd_v4.c:514: int f = 1 - r;
      0007C4 74 01            [12] 2938 	mov	a,#0x01
      0007C6 C3               [12] 2939 	clr	c
      0007C7 95*26            [12] 2940 	subb	a,_drawCircle_PARM_3
      0007C9 F5*2C            [12] 2941 	mov	_drawCircle_f_65536_394,a
      0007CB E4               [12] 2942 	clr	a
      0007CC 95*27            [12] 2943 	subb	a,(_drawCircle_PARM_3 + 1)
      0007CE F5*2D            [12] 2944 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2945 ;	.\ecen4350_lcd_v4.c:516: int ddF_y = -2 * r;
      0007D0 85*26*00         [24] 2946 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0007D3 85*27*01         [24] 2947 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0007D6 90 FF FE         [24] 2948 	mov	dptr,#0xfffe
      0007D9 12r00r00         [24] 2949 	lcall	__mulint
      0007DC AA 82            [24] 2950 	mov	r2,dpl
      0007DE AB 83            [24] 2951 	mov	r3,dph
                                   2952 ;	.\ecen4350_lcd_v4.c:518: int y = r;
      0007E0 A8*26            [24] 2953 	mov	r0,_drawCircle_PARM_3
      0007E2 A9*27            [24] 2954 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2955 ;	.\ecen4350_lcd_v4.c:520: drawPixel(x0, y0 + r, color);
      0007E4 E8               [12] 2956 	mov	a,r0
      0007E5 25*24            [12] 2957 	add	a,_drawCircle_PARM_2
      0007E7 F5*20            [12] 2958 	mov	_drawPixel_PARM_2,a
      0007E9 E9               [12] 2959 	mov	a,r1
      0007EA 35*25            [12] 2960 	addc	a,(_drawCircle_PARM_2 + 1)
      0007EC F5*21            [12] 2961 	mov	(_drawPixel_PARM_2 + 1),a
      0007EE 85*28*22         [24] 2962 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007F1 85*29*23         [24] 2963 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007F4 85*2A 82         [24] 2964 	mov	dpl,_drawCircle_x0_65536_393
      0007F7 85*2B 83         [24] 2965 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      0007FA C0 03            [24] 2966 	push	ar3
      0007FC C0 02            [24] 2967 	push	ar2
      0007FE C0 01            [24] 2968 	push	ar1
      000800 C0 00            [24] 2969 	push	ar0
      000802 12r07r6D         [24] 2970 	lcall	_drawPixel
      000805 D0 00            [24] 2971 	pop	ar0
      000807 D0 01            [24] 2972 	pop	ar1
                                   2973 ;	.\ecen4350_lcd_v4.c:521: drawPixel(x0, y0 - r, color);
      000809 E5*24            [12] 2974 	mov	a,_drawCircle_PARM_2
      00080B C3               [12] 2975 	clr	c
      00080C 98               [12] 2976 	subb	a,r0
      00080D F5*20            [12] 2977 	mov	_drawPixel_PARM_2,a
      00080F E5*25            [12] 2978 	mov	a,(_drawCircle_PARM_2 + 1)
      000811 99               [12] 2979 	subb	a,r1
      000812 F5*21            [12] 2980 	mov	(_drawPixel_PARM_2 + 1),a
      000814 85*28*22         [24] 2981 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000817 85*29*23         [24] 2982 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00081A 85*2A 82         [24] 2983 	mov	dpl,_drawCircle_x0_65536_393
      00081D 85*2B 83         [24] 2984 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      000820 C0 01            [24] 2985 	push	ar1
      000822 C0 00            [24] 2986 	push	ar0
      000824 12r07r6D         [24] 2987 	lcall	_drawPixel
      000827 D0 00            [24] 2988 	pop	ar0
      000829 D0 01            [24] 2989 	pop	ar1
                                   2990 ;	.\ecen4350_lcd_v4.c:522: drawPixel(x0 + r, y0, color);
      00082B E8               [12] 2991 	mov	a,r0
      00082C 25*2A            [12] 2992 	add	a,_drawCircle_x0_65536_393
      00082E F5 82            [12] 2993 	mov	dpl,a
      000830 E9               [12] 2994 	mov	a,r1
      000831 35*2B            [12] 2995 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000833 F5 83            [12] 2996 	mov	dph,a
      000835 85*24*20         [24] 2997 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000838 85*25*21         [24] 2998 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00083B 85*28*22         [24] 2999 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00083E 85*29*23         [24] 3000 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000841 C0 01            [24] 3001 	push	ar1
      000843 C0 00            [24] 3002 	push	ar0
      000845 12r07r6D         [24] 3003 	lcall	_drawPixel
      000848 D0 00            [24] 3004 	pop	ar0
      00084A D0 01            [24] 3005 	pop	ar1
                                   3006 ;	.\ecen4350_lcd_v4.c:523: drawPixel(x0 - r, y0, color);
      00084C E5*2A            [12] 3007 	mov	a,_drawCircle_x0_65536_393
      00084E C3               [12] 3008 	clr	c
      00084F 98               [12] 3009 	subb	a,r0
      000850 F5 82            [12] 3010 	mov	dpl,a
      000852 E5*2B            [12] 3011 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000854 99               [12] 3012 	subb	a,r1
      000855 F5 83            [12] 3013 	mov	dph,a
      000857 85*24*20         [24] 3014 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00085A 85*25*21         [24] 3015 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00085D 85*28*22         [24] 3016 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000860 85*29*23         [24] 3017 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000863 C0 01            [24] 3018 	push	ar1
      000865 C0 00            [24] 3019 	push	ar0
      000867 12r07r6D         [24] 3020 	lcall	_drawPixel
      00086A D0 00            [24] 3021 	pop	ar0
      00086C D0 01            [24] 3022 	pop	ar1
      00086E D0 02            [24] 3023 	pop	ar2
      000870 D0 03            [24] 3024 	pop	ar3
                                   3025 ;	.\ecen4350_lcd_v4.c:525: while (x < y)
      000872 E4               [12] 3026 	clr	a
      000873 F5*30            [12] 3027 	mov	_drawCircle_x_65536_394,a
      000875 F5*31            [12] 3028 	mov	(_drawCircle_x_65536_394 + 1),a
      000877 75*2E 01         [24] 3029 	mov	_drawCircle_ddF_x_65536_394,#0x01
                                   3030 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_394 + 1),#0x00
      00087A F5*2F            [12] 3031 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
      00087C                       3032 00103$:
      00087C C3               [12] 3033 	clr	c
      00087D E5*30            [12] 3034 	mov	a,_drawCircle_x_65536_394
      00087F 98               [12] 3035 	subb	a,r0
      000880 E5*31            [12] 3036 	mov	a,(_drawCircle_x_65536_394 + 1)
      000882 64 80            [12] 3037 	xrl	a,#0x80
      000884 89 F0            [24] 3038 	mov	b,r1
      000886 63 F0 80         [24] 3039 	xrl	b,#0x80
      000889 95 F0            [12] 3040 	subb	a,b
      00088B 40 01            [24] 3041 	jc	00121$
      00088D 22               [24] 3042 	ret
      00088E                       3043 00121$:
                                   3044 ;	.\ecen4350_lcd_v4.c:527: if (f >= 0)
      00088E E5*2D            [12] 3045 	mov	a,(_drawCircle_f_65536_394 + 1)
      000890 20 E7 16         [24] 3046 	jb	acc.7,00102$
                                   3047 ;	.\ecen4350_lcd_v4.c:529: y--;
      000893 18               [12] 3048 	dec	r0
      000894 B8 FF 01         [24] 3049 	cjne	r0,#0xff,00123$
      000897 19               [12] 3050 	dec	r1
      000898                       3051 00123$:
                                   3052 ;	.\ecen4350_lcd_v4.c:530: ddF_y += 2;
      000898 74 02            [12] 3053 	mov	a,#0x02
      00089A 2A               [12] 3054 	add	a,r2
      00089B FA               [12] 3055 	mov	r2,a
      00089C E4               [12] 3056 	clr	a
      00089D 3B               [12] 3057 	addc	a,r3
      00089E FB               [12] 3058 	mov	r3,a
                                   3059 ;	.\ecen4350_lcd_v4.c:531: f += ddF_y;
      00089F EA               [12] 3060 	mov	a,r2
      0008A0 25*2C            [12] 3061 	add	a,_drawCircle_f_65536_394
      0008A2 F5*2C            [12] 3062 	mov	_drawCircle_f_65536_394,a
      0008A4 EB               [12] 3063 	mov	a,r3
      0008A5 35*2D            [12] 3064 	addc	a,(_drawCircle_f_65536_394 + 1)
      0008A7 F5*2D            [12] 3065 	mov	(_drawCircle_f_65536_394 + 1),a
      0008A9                       3066 00102$:
                                   3067 ;	.\ecen4350_lcd_v4.c:533: x++;
      0008A9 C0 02            [24] 3068 	push	ar2
      0008AB C0 03            [24] 3069 	push	ar3
      0008AD 05*30            [12] 3070 	inc	_drawCircle_x_65536_394
      0008AF E4               [12] 3071 	clr	a
      0008B0 B5*30 02         [24] 3072 	cjne	a,_drawCircle_x_65536_394,00124$
      0008B3 05*31            [12] 3073 	inc	(_drawCircle_x_65536_394 + 1)
      0008B5                       3074 00124$:
                                   3075 ;	.\ecen4350_lcd_v4.c:534: ddF_x += 2;
      0008B5 74 02            [12] 3076 	mov	a,#0x02
      0008B7 25*2E            [12] 3077 	add	a,_drawCircle_ddF_x_65536_394
      0008B9 F5*2E            [12] 3078 	mov	_drawCircle_ddF_x_65536_394,a
      0008BB E4               [12] 3079 	clr	a
      0008BC 35*2F            [12] 3080 	addc	a,(_drawCircle_ddF_x_65536_394 + 1)
      0008BE F5*2F            [12] 3081 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
                                   3082 ;	.\ecen4350_lcd_v4.c:535: f += ddF_x;
      0008C0 E5*2E            [12] 3083 	mov	a,_drawCircle_ddF_x_65536_394
      0008C2 25*2C            [12] 3084 	add	a,_drawCircle_f_65536_394
      0008C4 F5*2C            [12] 3085 	mov	_drawCircle_f_65536_394,a
      0008C6 E5*2F            [12] 3086 	mov	a,(_drawCircle_ddF_x_65536_394 + 1)
      0008C8 35*2D            [12] 3087 	addc	a,(_drawCircle_f_65536_394 + 1)
      0008CA F5*2D            [12] 3088 	mov	(_drawCircle_f_65536_394 + 1),a
                                   3089 ;	.\ecen4350_lcd_v4.c:537: drawPixel(x0 + x, y0 + y, color);
      0008CC E5*30            [12] 3090 	mov	a,_drawCircle_x_65536_394
      0008CE 25*2A            [12] 3091 	add	a,_drawCircle_x0_65536_393
      0008D0 FE               [12] 3092 	mov	r6,a
      0008D1 E5*31            [12] 3093 	mov	a,(_drawCircle_x_65536_394 + 1)
      0008D3 35*2B            [12] 3094 	addc	a,(_drawCircle_x0_65536_393 + 1)
      0008D5 FF               [12] 3095 	mov	r7,a
      0008D6 E8               [12] 3096 	mov	a,r0
      0008D7 25*24            [12] 3097 	add	a,_drawCircle_PARM_2
      0008D9 FC               [12] 3098 	mov	r4,a
      0008DA E9               [12] 3099 	mov	a,r1
      0008DB 35*25            [12] 3100 	addc	a,(_drawCircle_PARM_2 + 1)
      0008DD FD               [12] 3101 	mov	r5,a
      0008DE 8C*20            [24] 3102 	mov	_drawPixel_PARM_2,r4
      0008E0 8D*21            [24] 3103 	mov	(_drawPixel_PARM_2 + 1),r5
      0008E2 85*28*22         [24] 3104 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008E5 85*29*23         [24] 3105 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008E8 8E 82            [24] 3106 	mov	dpl,r6
      0008EA 8F 83            [24] 3107 	mov	dph,r7
      0008EC C0 07            [24] 3108 	push	ar7
      0008EE C0 06            [24] 3109 	push	ar6
      0008F0 C0 05            [24] 3110 	push	ar5
      0008F2 C0 04            [24] 3111 	push	ar4
      0008F4 C0 03            [24] 3112 	push	ar3
      0008F6 C0 02            [24] 3113 	push	ar2
      0008F8 C0 01            [24] 3114 	push	ar1
      0008FA C0 00            [24] 3115 	push	ar0
      0008FC 12r07r6D         [24] 3116 	lcall	_drawPixel
      0008FF D0 00            [24] 3117 	pop	ar0
      000901 D0 01            [24] 3118 	pop	ar1
      000903 D0 02            [24] 3119 	pop	ar2
      000905 D0 03            [24] 3120 	pop	ar3
      000907 D0 04            [24] 3121 	pop	ar4
      000909 D0 05            [24] 3122 	pop	ar5
                                   3123 ;	.\ecen4350_lcd_v4.c:538: drawPixel(x0 - x, y0 + y, color);
      00090B E5*2A            [12] 3124 	mov	a,_drawCircle_x0_65536_393
      00090D C3               [12] 3125 	clr	c
      00090E 95*30            [12] 3126 	subb	a,_drawCircle_x_65536_394
      000910 FA               [12] 3127 	mov	r2,a
      000911 E5*2B            [12] 3128 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000913 95*31            [12] 3129 	subb	a,(_drawCircle_x_65536_394 + 1)
      000915 FB               [12] 3130 	mov	r3,a
      000916 8C*20            [24] 3131 	mov	_drawPixel_PARM_2,r4
      000918 8D*21            [24] 3132 	mov	(_drawPixel_PARM_2 + 1),r5
      00091A 85*28*22         [24] 3133 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00091D 85*29*23         [24] 3134 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000920 8A 82            [24] 3135 	mov	dpl,r2
      000922 8B 83            [24] 3136 	mov	dph,r3
      000924 C0 03            [24] 3137 	push	ar3
      000926 C0 02            [24] 3138 	push	ar2
      000928 C0 01            [24] 3139 	push	ar1
      00092A C0 00            [24] 3140 	push	ar0
      00092C 12r07r6D         [24] 3141 	lcall	_drawPixel
      00092F D0 00            [24] 3142 	pop	ar0
      000931 D0 01            [24] 3143 	pop	ar1
      000933 D0 02            [24] 3144 	pop	ar2
      000935 D0 03            [24] 3145 	pop	ar3
      000937 D0 06            [24] 3146 	pop	ar6
      000939 D0 07            [24] 3147 	pop	ar7
                                   3148 ;	.\ecen4350_lcd_v4.c:539: drawPixel(x0 + x, y0 - y, color);
      00093B E5*24            [12] 3149 	mov	a,_drawCircle_PARM_2
      00093D C3               [12] 3150 	clr	c
      00093E 98               [12] 3151 	subb	a,r0
      00093F FC               [12] 3152 	mov	r4,a
      000940 E5*25            [12] 3153 	mov	a,(_drawCircle_PARM_2 + 1)
      000942 99               [12] 3154 	subb	a,r1
      000943 FD               [12] 3155 	mov	r5,a
      000944 8C*20            [24] 3156 	mov	_drawPixel_PARM_2,r4
      000946 8D*21            [24] 3157 	mov	(_drawPixel_PARM_2 + 1),r5
      000948 85*28*22         [24] 3158 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00094B 85*29*23         [24] 3159 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00094E 8E 82            [24] 3160 	mov	dpl,r6
      000950 8F 83            [24] 3161 	mov	dph,r7
      000952 C0 05            [24] 3162 	push	ar5
      000954 C0 04            [24] 3163 	push	ar4
      000956 C0 03            [24] 3164 	push	ar3
      000958 C0 02            [24] 3165 	push	ar2
      00095A C0 01            [24] 3166 	push	ar1
      00095C C0 00            [24] 3167 	push	ar0
      00095E 12r07r6D         [24] 3168 	lcall	_drawPixel
      000961 D0 00            [24] 3169 	pop	ar0
      000963 D0 01            [24] 3170 	pop	ar1
      000965 D0 02            [24] 3171 	pop	ar2
      000967 D0 03            [24] 3172 	pop	ar3
      000969 D0 04            [24] 3173 	pop	ar4
      00096B D0 05            [24] 3174 	pop	ar5
                                   3175 ;	.\ecen4350_lcd_v4.c:540: drawPixel(x0 - x, y0 - y, color);
      00096D 8C*20            [24] 3176 	mov	_drawPixel_PARM_2,r4
      00096F 8D*21            [24] 3177 	mov	(_drawPixel_PARM_2 + 1),r5
      000971 85*28*22         [24] 3178 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000974 85*29*23         [24] 3179 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000977 8A 82            [24] 3180 	mov	dpl,r2
      000979 8B 83            [24] 3181 	mov	dph,r3
      00097B C0 03            [24] 3182 	push	ar3
      00097D C0 02            [24] 3183 	push	ar2
      00097F C0 01            [24] 3184 	push	ar1
      000981 C0 00            [24] 3185 	push	ar0
      000983 12r07r6D         [24] 3186 	lcall	_drawPixel
      000986 D0 00            [24] 3187 	pop	ar0
      000988 D0 01            [24] 3188 	pop	ar1
      00098A D0 02            [24] 3189 	pop	ar2
      00098C D0 03            [24] 3190 	pop	ar3
                                   3191 ;	.\ecen4350_lcd_v4.c:541: drawPixel(x0 + y, y0 + x, color);
      00098E E8               [12] 3192 	mov	a,r0
      00098F 25*2A            [12] 3193 	add	a,_drawCircle_x0_65536_393
      000991 FE               [12] 3194 	mov	r6,a
      000992 E9               [12] 3195 	mov	a,r1
      000993 35*2B            [12] 3196 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000995 FF               [12] 3197 	mov	r7,a
      000996 E5*30            [12] 3198 	mov	a,_drawCircle_x_65536_394
      000998 25*24            [12] 3199 	add	a,_drawCircle_PARM_2
      00099A FC               [12] 3200 	mov	r4,a
      00099B E5*31            [12] 3201 	mov	a,(_drawCircle_x_65536_394 + 1)
      00099D 35*25            [12] 3202 	addc	a,(_drawCircle_PARM_2 + 1)
      00099F FD               [12] 3203 	mov	r5,a
      0009A0 8C*20            [24] 3204 	mov	_drawPixel_PARM_2,r4
      0009A2 8D*21            [24] 3205 	mov	(_drawPixel_PARM_2 + 1),r5
      0009A4 85*28*22         [24] 3206 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009A7 85*29*23         [24] 3207 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009AA 8E 82            [24] 3208 	mov	dpl,r6
      0009AC 8F 83            [24] 3209 	mov	dph,r7
      0009AE C0 07            [24] 3210 	push	ar7
      0009B0 C0 06            [24] 3211 	push	ar6
      0009B2 C0 05            [24] 3212 	push	ar5
      0009B4 C0 04            [24] 3213 	push	ar4
      0009B6 C0 03            [24] 3214 	push	ar3
      0009B8 C0 02            [24] 3215 	push	ar2
      0009BA C0 01            [24] 3216 	push	ar1
      0009BC C0 00            [24] 3217 	push	ar0
      0009BE 12r07r6D         [24] 3218 	lcall	_drawPixel
      0009C1 D0 00            [24] 3219 	pop	ar0
      0009C3 D0 01            [24] 3220 	pop	ar1
      0009C5 D0 02            [24] 3221 	pop	ar2
      0009C7 D0 03            [24] 3222 	pop	ar3
      0009C9 D0 04            [24] 3223 	pop	ar4
      0009CB D0 05            [24] 3224 	pop	ar5
                                   3225 ;	.\ecen4350_lcd_v4.c:542: drawPixel(x0 - y, y0 + x, color);
      0009CD E5*2A            [12] 3226 	mov	a,_drawCircle_x0_65536_393
      0009CF C3               [12] 3227 	clr	c
      0009D0 98               [12] 3228 	subb	a,r0
      0009D1 FA               [12] 3229 	mov	r2,a
      0009D2 E5*2B            [12] 3230 	mov	a,(_drawCircle_x0_65536_393 + 1)
      0009D4 99               [12] 3231 	subb	a,r1
      0009D5 FB               [12] 3232 	mov	r3,a
      0009D6 8C*20            [24] 3233 	mov	_drawPixel_PARM_2,r4
      0009D8 8D*21            [24] 3234 	mov	(_drawPixel_PARM_2 + 1),r5
      0009DA 85*28*22         [24] 3235 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009DD 85*29*23         [24] 3236 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009E0 8A 82            [24] 3237 	mov	dpl,r2
      0009E2 8B 83            [24] 3238 	mov	dph,r3
      0009E4 C0 03            [24] 3239 	push	ar3
      0009E6 C0 02            [24] 3240 	push	ar2
      0009E8 C0 01            [24] 3241 	push	ar1
      0009EA C0 00            [24] 3242 	push	ar0
      0009EC 12r07r6D         [24] 3243 	lcall	_drawPixel
      0009EF D0 00            [24] 3244 	pop	ar0
      0009F1 D0 01            [24] 3245 	pop	ar1
      0009F3 D0 02            [24] 3246 	pop	ar2
      0009F5 D0 03            [24] 3247 	pop	ar3
      0009F7 D0 06            [24] 3248 	pop	ar6
      0009F9 D0 07            [24] 3249 	pop	ar7
                                   3250 ;	.\ecen4350_lcd_v4.c:543: drawPixel(x0 + y, y0 - x, color);
      0009FB E5*24            [12] 3251 	mov	a,_drawCircle_PARM_2
      0009FD C3               [12] 3252 	clr	c
      0009FE 95*30            [12] 3253 	subb	a,_drawCircle_x_65536_394
      000A00 FC               [12] 3254 	mov	r4,a
      000A01 E5*25            [12] 3255 	mov	a,(_drawCircle_PARM_2 + 1)
      000A03 95*31            [12] 3256 	subb	a,(_drawCircle_x_65536_394 + 1)
      000A05 FD               [12] 3257 	mov	r5,a
      000A06 8C*20            [24] 3258 	mov	_drawPixel_PARM_2,r4
      000A08 8D*21            [24] 3259 	mov	(_drawPixel_PARM_2 + 1),r5
      000A0A 85*28*22         [24] 3260 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A0D 85*29*23         [24] 3261 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A10 8E 82            [24] 3262 	mov	dpl,r6
      000A12 8F 83            [24] 3263 	mov	dph,r7
      000A14 C0 05            [24] 3264 	push	ar5
      000A16 C0 04            [24] 3265 	push	ar4
      000A18 C0 03            [24] 3266 	push	ar3
      000A1A C0 02            [24] 3267 	push	ar2
      000A1C C0 01            [24] 3268 	push	ar1
      000A1E C0 00            [24] 3269 	push	ar0
      000A20 12r07r6D         [24] 3270 	lcall	_drawPixel
      000A23 D0 00            [24] 3271 	pop	ar0
      000A25 D0 01            [24] 3272 	pop	ar1
      000A27 D0 02            [24] 3273 	pop	ar2
      000A29 D0 03            [24] 3274 	pop	ar3
      000A2B D0 04            [24] 3275 	pop	ar4
      000A2D D0 05            [24] 3276 	pop	ar5
                                   3277 ;	.\ecen4350_lcd_v4.c:544: drawPixel(x0 - y, y0 - x, color);
      000A2F 8C*20            [24] 3278 	mov	_drawPixel_PARM_2,r4
      000A31 8D*21            [24] 3279 	mov	(_drawPixel_PARM_2 + 1),r5
      000A33 85*28*22         [24] 3280 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A36 85*29*23         [24] 3281 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A39 8A 82            [24] 3282 	mov	dpl,r2
      000A3B 8B 83            [24] 3283 	mov	dph,r3
      000A3D C0 03            [24] 3284 	push	ar3
      000A3F C0 02            [24] 3285 	push	ar2
      000A41 C0 01            [24] 3286 	push	ar1
      000A43 C0 00            [24] 3287 	push	ar0
      000A45 12r07r6D         [24] 3288 	lcall	_drawPixel
      000A48 D0 00            [24] 3289 	pop	ar0
      000A4A D0 01            [24] 3290 	pop	ar1
      000A4C D0 02            [24] 3291 	pop	ar2
      000A4E D0 03            [24] 3292 	pop	ar3
      000A50 D0 03            [24] 3293 	pop	ar3
      000A52 D0 02            [24] 3294 	pop	ar2
                                   3295 ;	.\ecen4350_lcd_v4.c:546: }
      000A54 02r08r7C         [24] 3296 	ljmp	00103$
                                   3297 ;------------------------------------------------------------
                                   3298 ;Allocation info for local variables in function 'testCircles'
                                   3299 ;------------------------------------------------------------
                                   3300 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3301 ;radius                    Allocated to registers r7 
                                   3302 ;x                         Allocated to registers r0 r1 
                                   3303 ;y                         Allocated to registers r2 r3 
                                   3304 ;r2                        Allocated to registers r4 r5 
                                   3305 ;w                         Allocated with name '_testCircles_w_65536_398'
                                   3306 ;h                         Allocated with name '_testCircles_h_65536_398'
                                   3307 ;------------------------------------------------------------
                                   3308 ;	.\ecen4350_lcd_v4.c:548: void testCircles(u8 radius, u16 color)
                                   3309 ;	-----------------------------------------
                                   3310 ;	 function testCircles
                                   3311 ;	-----------------------------------------
      000A57                       3312 _testCircles:
                                   3313 ;	.\ecen4350_lcd_v4.c:551: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000A57 AE 82            [24] 3314 	mov	r6,dpl
      000A59 7F 00            [12] 3315 	mov	r7,#0x00
      000A5B EE               [12] 3316 	mov	a,r6
      000A5C 2E               [12] 3317 	add	a,r6
      000A5D FC               [12] 3318 	mov	r4,a
      000A5E EF               [12] 3319 	mov	a,r7
      000A5F 33               [12] 3320 	rlc	a
      000A60 FD               [12] 3321 	mov	r5,a
      000A61 8E 02            [24] 3322 	mov	ar2,r6
      000A63 8F 03            [24] 3323 	mov	ar3,r7
      000A65 EA               [12] 3324 	mov	a,r2
      000A66 25*12            [12] 3325 	add	a,__width
      000A68 F5*34            [12] 3326 	mov	_testCircles_w_65536_398,a
      000A6A EB               [12] 3327 	mov	a,r3
      000A6B 35*13            [12] 3328 	addc	a,(__width + 1)
      000A6D F5*35            [12] 3329 	mov	(_testCircles_w_65536_398 + 1),a
      000A6F EA               [12] 3330 	mov	a,r2
      000A70 25*14            [12] 3331 	add	a,__height
      000A72 F5*36            [12] 3332 	mov	_testCircles_h_65536_398,a
      000A74 EB               [12] 3333 	mov	a,r3
      000A75 35*15            [12] 3334 	addc	a,(__height + 1)
      000A77 F5*37            [12] 3335 	mov	(_testCircles_h_65536_398 + 1),a
                                   3336 ;	.\ecen4350_lcd_v4.c:553: for (x = 0; x < w; x += r2)
      000A79 78 00            [12] 3337 	mov	r0,#0x00
      000A7B 79 00            [12] 3338 	mov	r1,#0x00
      000A7D                       3339 00107$:
      000A7D C3               [12] 3340 	clr	c
      000A7E E8               [12] 3341 	mov	a,r0
      000A7F 95*34            [12] 3342 	subb	a,_testCircles_w_65536_398
      000A81 E9               [12] 3343 	mov	a,r1
      000A82 64 80            [12] 3344 	xrl	a,#0x80
      000A84 85*35 F0         [24] 3345 	mov	b,(_testCircles_w_65536_398 + 1)
      000A87 63 F0 80         [24] 3346 	xrl	b,#0x80
      000A8A 95 F0            [12] 3347 	subb	a,b
      000A8C 50 5A            [24] 3348 	jnc	00109$
                                   3349 ;	.\ecen4350_lcd_v4.c:555: for (y = 0; y < h; y += r2)
      000A8E 7A 00            [12] 3350 	mov	r2,#0x00
      000A90 7B 00            [12] 3351 	mov	r3,#0x00
      000A92                       3352 00104$:
      000A92 C3               [12] 3353 	clr	c
      000A93 EA               [12] 3354 	mov	a,r2
      000A94 95*36            [12] 3355 	subb	a,_testCircles_h_65536_398
      000A96 EB               [12] 3356 	mov	a,r3
      000A97 64 80            [12] 3357 	xrl	a,#0x80
      000A99 85*37 F0         [24] 3358 	mov	b,(_testCircles_h_65536_398 + 1)
      000A9C 63 F0 80         [24] 3359 	xrl	b,#0x80
      000A9F 95 F0            [12] 3360 	subb	a,b
      000AA1 50 3D            [24] 3361 	jnc	00108$
                                   3362 ;	.\ecen4350_lcd_v4.c:557: drawCircle(x, y, radius, color);
      000AA3 8A*24            [24] 3363 	mov	_drawCircle_PARM_2,r2
      000AA5 8B*25            [24] 3364 	mov	(_drawCircle_PARM_2 + 1),r3
      000AA7 8E*26            [24] 3365 	mov	_drawCircle_PARM_3,r6
      000AA9 8F*27            [24] 3366 	mov	(_drawCircle_PARM_3 + 1),r7
      000AAB 85*32*28         [24] 3367 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000AAE 85*33*29         [24] 3368 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000AB1 88 82            [24] 3369 	mov	dpl,r0
      000AB3 89 83            [24] 3370 	mov	dph,r1
      000AB5 C0 07            [24] 3371 	push	ar7
      000AB7 C0 06            [24] 3372 	push	ar6
      000AB9 C0 05            [24] 3373 	push	ar5
      000ABB C0 04            [24] 3374 	push	ar4
      000ABD C0 03            [24] 3375 	push	ar3
      000ABF C0 02            [24] 3376 	push	ar2
      000AC1 C0 01            [24] 3377 	push	ar1
      000AC3 C0 00            [24] 3378 	push	ar0
      000AC5 12r07rBE         [24] 3379 	lcall	_drawCircle
      000AC8 D0 00            [24] 3380 	pop	ar0
      000ACA D0 01            [24] 3381 	pop	ar1
      000ACC D0 02            [24] 3382 	pop	ar2
      000ACE D0 03            [24] 3383 	pop	ar3
      000AD0 D0 04            [24] 3384 	pop	ar4
      000AD2 D0 05            [24] 3385 	pop	ar5
      000AD4 D0 06            [24] 3386 	pop	ar6
      000AD6 D0 07            [24] 3387 	pop	ar7
                                   3388 ;	.\ecen4350_lcd_v4.c:555: for (y = 0; y < h; y += r2)
      000AD8 EC               [12] 3389 	mov	a,r4
      000AD9 2A               [12] 3390 	add	a,r2
      000ADA FA               [12] 3391 	mov	r2,a
      000ADB ED               [12] 3392 	mov	a,r5
      000ADC 3B               [12] 3393 	addc	a,r3
      000ADD FB               [12] 3394 	mov	r3,a
      000ADE 80 B2            [24] 3395 	sjmp	00104$
      000AE0                       3396 00108$:
                                   3397 ;	.\ecen4350_lcd_v4.c:553: for (x = 0; x < w; x += r2)
      000AE0 EC               [12] 3398 	mov	a,r4
      000AE1 28               [12] 3399 	add	a,r0
      000AE2 F8               [12] 3400 	mov	r0,a
      000AE3 ED               [12] 3401 	mov	a,r5
      000AE4 39               [12] 3402 	addc	a,r1
      000AE5 F9               [12] 3403 	mov	r1,a
      000AE6 80 95            [24] 3404 	sjmp	00107$
      000AE8                       3405 00109$:
                                   3406 ;	.\ecen4350_lcd_v4.c:560: }
      000AE8 22               [24] 3407 	ret
                                   3408 ;------------------------------------------------------------
                                   3409 ;Allocation info for local variables in function 'fillRect'
                                   3410 ;------------------------------------------------------------
                                   3411 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3412 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3413 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3414 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3415 ;x                         Allocated to registers 
                                   3416 ;------------------------------------------------------------
                                   3417 ;	.\ecen4350_lcd_v4.c:561: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3418 ;	-----------------------------------------
                                   3419 ;	 function fillRect
                                   3420 ;	-----------------------------------------
      000AE9                       3421 _fillRect:
      000AE9 AE 82            [24] 3422 	mov	r6,dpl
      000AEB AF 83            [24] 3423 	mov	r7,dph
                                   3424 ;	.\ecen4350_lcd_v4.c:563: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000AED C3               [12] 3425 	clr	c
      000AEE EE               [12] 3426 	mov	a,r6
      000AEF 94 F0            [12] 3427 	subb	a,#0xf0
      000AF1 EF               [12] 3428 	mov	a,r7
      000AF2 94 00            [12] 3429 	subb	a,#0x00
      000AF4 50 0B            [24] 3430 	jnc	00101$
      000AF6 C3               [12] 3431 	clr	c
      000AF7 E5*38            [12] 3432 	mov	a,_fillRect_PARM_2
      000AF9 94 40            [12] 3433 	subb	a,#0x40
      000AFB E5*39            [12] 3434 	mov	a,(_fillRect_PARM_2 + 1)
      000AFD 94 01            [12] 3435 	subb	a,#0x01
      000AFF 40 01            [24] 3436 	jc	00102$
      000B01                       3437 00101$:
                                   3438 ;	.\ecen4350_lcd_v4.c:565: return;
      000B01 22               [24] 3439 	ret
      000B02                       3440 00102$:
                                   3441 ;	.\ecen4350_lcd_v4.c:568: if ((x + w - 1) >= TFTWIDTH)
      000B02 E5*3A            [12] 3442 	mov	a,_fillRect_PARM_3
      000B04 2E               [12] 3443 	add	a,r6
      000B05 FC               [12] 3444 	mov	r4,a
      000B06 E5*3B            [12] 3445 	mov	a,(_fillRect_PARM_3 + 1)
      000B08 3F               [12] 3446 	addc	a,r7
      000B09 FD               [12] 3447 	mov	r5,a
      000B0A 1C               [12] 3448 	dec	r4
      000B0B BC FF 01         [24] 3449 	cjne	r4,#0xff,00161$
      000B0E 1D               [12] 3450 	dec	r5
      000B0F                       3451 00161$:
      000B0F C3               [12] 3452 	clr	c
      000B10 EC               [12] 3453 	mov	a,r4
      000B11 94 F0            [12] 3454 	subb	a,#0xf0
      000B13 ED               [12] 3455 	mov	a,r5
      000B14 94 00            [12] 3456 	subb	a,#0x00
      000B16 40 0A            [24] 3457 	jc	00105$
                                   3458 ;	.\ecen4350_lcd_v4.c:570: w = TFTWIDTH - x;
      000B18 74 F0            [12] 3459 	mov	a,#0xf0
      000B1A C3               [12] 3460 	clr	c
      000B1B 9E               [12] 3461 	subb	a,r6
      000B1C F5*3A            [12] 3462 	mov	_fillRect_PARM_3,a
      000B1E E4               [12] 3463 	clr	a
      000B1F 9F               [12] 3464 	subb	a,r7
      000B20 F5*3B            [12] 3465 	mov	(_fillRect_PARM_3 + 1),a
      000B22                       3466 00105$:
                                   3467 ;	.\ecen4350_lcd_v4.c:573: if ((y + h - 1) >= TFTHEIGHT)
      000B22 E5*3C            [12] 3468 	mov	a,_fillRect_PARM_4
      000B24 25*38            [12] 3469 	add	a,_fillRect_PARM_2
      000B26 FC               [12] 3470 	mov	r4,a
      000B27 E5*3D            [12] 3471 	mov	a,(_fillRect_PARM_4 + 1)
      000B29 35*39            [12] 3472 	addc	a,(_fillRect_PARM_2 + 1)
      000B2B FD               [12] 3473 	mov	r5,a
      000B2C 1C               [12] 3474 	dec	r4
      000B2D BC FF 01         [24] 3475 	cjne	r4,#0xff,00163$
      000B30 1D               [12] 3476 	dec	r5
      000B31                       3477 00163$:
      000B31 C3               [12] 3478 	clr	c
      000B32 EC               [12] 3479 	mov	a,r4
      000B33 94 40            [12] 3480 	subb	a,#0x40
      000B35 ED               [12] 3481 	mov	a,r5
      000B36 94 01            [12] 3482 	subb	a,#0x01
      000B38 40 0D            [24] 3483 	jc	00107$
                                   3484 ;	.\ecen4350_lcd_v4.c:575: h = TFTHEIGHT - y;
      000B3A 74 40            [12] 3485 	mov	a,#0x40
      000B3C C3               [12] 3486 	clr	c
      000B3D 95*38            [12] 3487 	subb	a,_fillRect_PARM_2
      000B3F F5*3C            [12] 3488 	mov	_fillRect_PARM_4,a
      000B41 74 01            [12] 3489 	mov	a,#0x01
      000B43 95*39            [12] 3490 	subb	a,(_fillRect_PARM_2 + 1)
      000B45 F5*3D            [12] 3491 	mov	(_fillRect_PARM_4 + 1),a
      000B47                       3492 00107$:
                                   3493 ;	.\ecen4350_lcd_v4.c:578: setAddress(x, y, x + w - 1, y + h - 1);
      000B47 E5*3A            [12] 3494 	mov	a,_fillRect_PARM_3
      000B49 2E               [12] 3495 	add	a,r6
      000B4A FC               [12] 3496 	mov	r4,a
      000B4B E5*3B            [12] 3497 	mov	a,(_fillRect_PARM_3 + 1)
      000B4D 3F               [12] 3498 	addc	a,r7
      000B4E FD               [12] 3499 	mov	r5,a
      000B4F EC               [12] 3500 	mov	a,r4
      000B50 24 FF            [12] 3501 	add	a,#0xff
      000B52 F5*02            [12] 3502 	mov	_setAddress_PARM_3,a
      000B54 ED               [12] 3503 	mov	a,r5
      000B55 34 FF            [12] 3504 	addc	a,#0xff
      000B57 F5*03            [12] 3505 	mov	(_setAddress_PARM_3 + 1),a
      000B59 E5*3C            [12] 3506 	mov	a,_fillRect_PARM_4
      000B5B 25*38            [12] 3507 	add	a,_fillRect_PARM_2
      000B5D FC               [12] 3508 	mov	r4,a
      000B5E E5*3D            [12] 3509 	mov	a,(_fillRect_PARM_4 + 1)
      000B60 35*39            [12] 3510 	addc	a,(_fillRect_PARM_2 + 1)
      000B62 FD               [12] 3511 	mov	r5,a
      000B63 EC               [12] 3512 	mov	a,r4
      000B64 24 FF            [12] 3513 	add	a,#0xff
      000B66 F5*04            [12] 3514 	mov	_setAddress_PARM_4,a
      000B68 ED               [12] 3515 	mov	a,r5
      000B69 34 FF            [12] 3516 	addc	a,#0xff
      000B6B F5*05            [12] 3517 	mov	(_setAddress_PARM_4 + 1),a
      000B6D 85*38*00         [24] 3518 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000B70 85*39*01         [24] 3519 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000B73 8E 82            [24] 3520 	mov	dpl,r6
      000B75 8F 83            [24] 3521 	mov	dph,r7
      000B77 12r05r93         [24] 3522 	lcall	_setAddress
                                   3523 ;	.\ecen4350_lcd_v4.c:581: write8Reg(0x2C);
                                   3524 ;	assignBit
      000B7A C2 B4            [12] 3525 	clr	_P3_4
                                   3526 ;	assignBit
      000B7C D2 B5            [12] 3527 	setb	_P3_5
      000B7E 85*02 82         [24] 3528 	mov	dpl,_lcd_address
      000B81 85*03 83         [24] 3529 	mov	dph,(_lcd_address + 1)
      000B84 74 2C            [12] 3530 	mov	a,#0x2c
      000B86 F0               [24] 3531 	movx	@dptr,a
                                   3532 ;	assignBit
      000B87 C2 B5            [12] 3533 	clr	_P3_5
                                   3534 ;	.\ecen4350_lcd_v4.c:583: CD = 1;
                                   3535 ;	assignBit
      000B89 D2 B4            [12] 3536 	setb	_P3_4
                                   3537 ;	.\ecen4350_lcd_v4.c:584: for (y = h; y > 0; y--)
      000B8B AF*3F            [24] 3538 	mov	r7,(_fillRect_PARM_5 + 1)
      000B8D AD*3C            [24] 3539 	mov	r5,_fillRect_PARM_4
      000B8F AE*3D            [24] 3540 	mov	r6,(_fillRect_PARM_4 + 1)
      000B91                       3541 00114$:
      000B91 ED               [12] 3542 	mov	a,r5
      000B92 4E               [12] 3543 	orl	a,r6
      000B93 60 30            [24] 3544 	jz	00116$
                                   3545 ;	.\ecen4350_lcd_v4.c:586: for (x = w; x > 0; x--)
      000B95 AB*3A            [24] 3546 	mov	r3,_fillRect_PARM_3
      000B97 AC*3B            [24] 3547 	mov	r4,(_fillRect_PARM_3 + 1)
      000B99                       3548 00111$:
      000B99 EB               [12] 3549 	mov	a,r3
      000B9A 4C               [12] 3550 	orl	a,r4
      000B9B 60 21            [24] 3551 	jz	00115$
                                   3552 ;	.\ecen4350_lcd_v4.c:589: write8(color >> 8);
                                   3553 ;	assignBit
      000B9D D2 B5            [12] 3554 	setb	_P3_5
      000B9F 85*02 82         [24] 3555 	mov	dpl,_lcd_address
      000BA2 85*03 83         [24] 3556 	mov	dph,(_lcd_address + 1)
      000BA5 EF               [12] 3557 	mov	a,r7
      000BA6 F0               [24] 3558 	movx	@dptr,a
                                   3559 ;	assignBit
      000BA7 C2 B5            [12] 3560 	clr	_P3_5
                                   3561 ;	.\ecen4350_lcd_v4.c:590: write8(color);
                                   3562 ;	assignBit
      000BA9 D2 B5            [12] 3563 	setb	_P3_5
      000BAB 85*02 82         [24] 3564 	mov	dpl,_lcd_address
      000BAE 85*03 83         [24] 3565 	mov	dph,(_lcd_address + 1)
      000BB1 E5*3E            [12] 3566 	mov	a,_fillRect_PARM_5
      000BB3 FA               [12] 3567 	mov	r2,a
      000BB4 F0               [24] 3568 	movx	@dptr,a
                                   3569 ;	assignBit
      000BB5 C2 B5            [12] 3570 	clr	_P3_5
                                   3571 ;	.\ecen4350_lcd_v4.c:586: for (x = w; x > 0; x--)
      000BB7 1B               [12] 3572 	dec	r3
      000BB8 BB FF 01         [24] 3573 	cjne	r3,#0xff,00167$
      000BBB 1C               [12] 3574 	dec	r4
      000BBC                       3575 00167$:
      000BBC 80 DB            [24] 3576 	sjmp	00111$
      000BBE                       3577 00115$:
                                   3578 ;	.\ecen4350_lcd_v4.c:584: for (y = h; y > 0; y--)
      000BBE 1D               [12] 3579 	dec	r5
      000BBF BD FF 01         [24] 3580 	cjne	r5,#0xff,00168$
      000BC2 1E               [12] 3581 	dec	r6
      000BC3                       3582 00168$:
      000BC3 80 CC            [24] 3583 	sjmp	00114$
      000BC5                       3584 00116$:
                                   3585 ;	.\ecen4350_lcd_v4.c:594: }
      000BC5 22               [24] 3586 	ret
                                   3587 ;------------------------------------------------------------
                                   3588 ;Allocation info for local variables in function 'fillTop'
                                   3589 ;------------------------------------------------------------
                                   3590 ;Color                     Allocated to registers r6 r7 
                                   3591 ;len                       Allocated to registers 
                                   3592 ;blocks                    Allocated to registers r4 r7 
                                   3593 ;i                         Allocated to registers r3 
                                   3594 ;hi                        Allocated to registers r5 
                                   3595 ;lo                        Allocated to registers r6 
                                   3596 ;------------------------------------------------------------
                                   3597 ;	.\ecen4350_lcd_v4.c:596: void fillTop(unsigned int Color) {
                                   3598 ;	-----------------------------------------
                                   3599 ;	 function fillTop
                                   3600 ;	-----------------------------------------
      000BC6                       3601 _fillTop:
      000BC6 AE 82            [24] 3602 	mov	r6,dpl
      000BC8 AF 83            [24] 3603 	mov	r7,dph
                                   3604 ;	.\ecen4350_lcd_v4.c:600: unsigned char i, hi = Color >> 8, 
      000BCA 8F 05            [24] 3605 	mov	ar5,r7
                                   3606 ;	.\ecen4350_lcd_v4.c:601: lo = Color;
                                   3607 ;	.\ecen4350_lcd_v4.c:604: setAddress(0, 0, TFTWIDTH - 1, 39);
      000BCC E4               [12] 3608 	clr	a
      000BCD F5*00            [12] 3609 	mov	_setAddress_PARM_2,a
      000BCF F5*01            [12] 3610 	mov	(_setAddress_PARM_2 + 1),a
      000BD1 75*02 EF         [24] 3611 	mov	_setAddress_PARM_3,#0xef
                                   3612 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000BD4 F5*03            [12] 3613 	mov	(_setAddress_PARM_3 + 1),a
      000BD6 75*04 27         [24] 3614 	mov	_setAddress_PARM_4,#0x27
                                   3615 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000BD9 F5*05            [12] 3616 	mov	(_setAddress_PARM_4 + 1),a
      000BDB 90 00 00         [24] 3617 	mov	dptr,#0x0000
      000BDE C0 06            [24] 3618 	push	ar6
      000BE0 C0 05            [24] 3619 	push	ar5
      000BE2 12r05r93         [24] 3620 	lcall	_setAddress
      000BE5 D0 05            [24] 3621 	pop	ar5
      000BE7 D0 06            [24] 3622 	pop	ar6
                                   3623 ;	.\ecen4350_lcd_v4.c:606: write8Reg(0x2C);
                                   3624 ;	assignBit
      000BE9 C2 B4            [12] 3625 	clr	_P3_4
                                   3626 ;	assignBit
      000BEB D2 B5            [12] 3627 	setb	_P3_5
      000BED 85*02 82         [24] 3628 	mov	dpl,_lcd_address
      000BF0 85*03 83         [24] 3629 	mov	dph,(_lcd_address + 1)
      000BF3 74 2C            [12] 3630 	mov	a,#0x2c
      000BF5 F0               [24] 3631 	movx	@dptr,a
                                   3632 ;	assignBit
      000BF6 C2 B5            [12] 3633 	clr	_P3_5
                                   3634 ;	.\ecen4350_lcd_v4.c:608: CD = 1;
                                   3635 ;	assignBit
      000BF8 D2 B4            [12] 3636 	setb	_P3_4
                                   3637 ;	.\ecen4350_lcd_v4.c:609: write8(hi);
                                   3638 ;	assignBit
      000BFA D2 B5            [12] 3639 	setb	_P3_5
      000BFC 85*02 82         [24] 3640 	mov	dpl,_lcd_address
      000BFF 85*03 83         [24] 3641 	mov	dph,(_lcd_address + 1)
      000C02 ED               [12] 3642 	mov	a,r5
      000C03 F0               [24] 3643 	movx	@dptr,a
                                   3644 ;	assignBit
      000C04 C2 B5            [12] 3645 	clr	_P3_5
                                   3646 ;	.\ecen4350_lcd_v4.c:610: write8(lo);
                                   3647 ;	assignBit
      000C06 D2 B5            [12] 3648 	setb	_P3_5
      000C08 85*02 82         [24] 3649 	mov	dpl,_lcd_address
      000C0B 85*03 83         [24] 3650 	mov	dph,(_lcd_address + 1)
      000C0E EE               [12] 3651 	mov	a,r6
      000C0F F0               [24] 3652 	movx	@dptr,a
                                   3653 ;	assignBit
      000C10 C2 B5            [12] 3654 	clr	_P3_5
                                   3655 ;	.\ecen4350_lcd_v4.c:613: while (blocks--)
      000C12 7C 96            [12] 3656 	mov	r4,#0x96
      000C14 7F 00            [12] 3657 	mov	r7,#0x00
      000C16                       3658 00104$:
      000C16 8C 02            [24] 3659 	mov	ar2,r4
      000C18 8F 03            [24] 3660 	mov	ar3,r7
      000C1A 1C               [12] 3661 	dec	r4
      000C1B BC FF 01         [24] 3662 	cjne	r4,#0xff,00140$
      000C1E 1F               [12] 3663 	dec	r7
      000C1F                       3664 00140$:
      000C1F EA               [12] 3665 	mov	a,r2
      000C20 4B               [12] 3666 	orl	a,r3
      000C21 60 66            [24] 3667 	jz	00106$
                                   3668 ;	.\ecen4350_lcd_v4.c:616: do
      000C23 7B 10            [12] 3669 	mov	r3,#0x10
      000C25                       3670 00101$:
                                   3671 ;	.\ecen4350_lcd_v4.c:619: write8(hi);
                                   3672 ;	assignBit
      000C25 D2 B5            [12] 3673 	setb	_P3_5
      000C27 85*02 82         [24] 3674 	mov	dpl,_lcd_address
      000C2A 85*03 83         [24] 3675 	mov	dph,(_lcd_address + 1)
      000C2D ED               [12] 3676 	mov	a,r5
      000C2E F0               [24] 3677 	movx	@dptr,a
                                   3678 ;	assignBit
      000C2F C2 B5            [12] 3679 	clr	_P3_5
                                   3680 ;	.\ecen4350_lcd_v4.c:620: write8(lo);
                                   3681 ;	assignBit
      000C31 D2 B5            [12] 3682 	setb	_P3_5
      000C33 85*02 82         [24] 3683 	mov	dpl,_lcd_address
      000C36 85*03 83         [24] 3684 	mov	dph,(_lcd_address + 1)
      000C39 EE               [12] 3685 	mov	a,r6
      000C3A F0               [24] 3686 	movx	@dptr,a
                                   3687 ;	assignBit
      000C3B C2 B5            [12] 3688 	clr	_P3_5
                                   3689 ;	.\ecen4350_lcd_v4.c:621: write8(hi);
                                   3690 ;	assignBit
      000C3D D2 B5            [12] 3691 	setb	_P3_5
      000C3F 85*02 82         [24] 3692 	mov	dpl,_lcd_address
      000C42 85*03 83         [24] 3693 	mov	dph,(_lcd_address + 1)
      000C45 ED               [12] 3694 	mov	a,r5
      000C46 F0               [24] 3695 	movx	@dptr,a
                                   3696 ;	assignBit
      000C47 C2 B5            [12] 3697 	clr	_P3_5
                                   3698 ;	.\ecen4350_lcd_v4.c:622: write8(lo);
                                   3699 ;	assignBit
      000C49 D2 B5            [12] 3700 	setb	_P3_5
      000C4B 85*02 82         [24] 3701 	mov	dpl,_lcd_address
      000C4E 85*03 83         [24] 3702 	mov	dph,(_lcd_address + 1)
      000C51 EE               [12] 3703 	mov	a,r6
      000C52 F0               [24] 3704 	movx	@dptr,a
                                   3705 ;	assignBit
      000C53 C2 B5            [12] 3706 	clr	_P3_5
                                   3707 ;	.\ecen4350_lcd_v4.c:623: write8(hi);
                                   3708 ;	assignBit
      000C55 D2 B5            [12] 3709 	setb	_P3_5
      000C57 85*02 82         [24] 3710 	mov	dpl,_lcd_address
      000C5A 85*03 83         [24] 3711 	mov	dph,(_lcd_address + 1)
      000C5D ED               [12] 3712 	mov	a,r5
      000C5E F0               [24] 3713 	movx	@dptr,a
                                   3714 ;	assignBit
      000C5F C2 B5            [12] 3715 	clr	_P3_5
                                   3716 ;	.\ecen4350_lcd_v4.c:624: write8(lo);
                                   3717 ;	assignBit
      000C61 D2 B5            [12] 3718 	setb	_P3_5
      000C63 85*02 82         [24] 3719 	mov	dpl,_lcd_address
      000C66 85*03 83         [24] 3720 	mov	dph,(_lcd_address + 1)
      000C69 EE               [12] 3721 	mov	a,r6
      000C6A F0               [24] 3722 	movx	@dptr,a
                                   3723 ;	assignBit
      000C6B C2 B5            [12] 3724 	clr	_P3_5
                                   3725 ;	.\ecen4350_lcd_v4.c:625: write8(hi);
                                   3726 ;	assignBit
      000C6D D2 B5            [12] 3727 	setb	_P3_5
      000C6F 85*02 82         [24] 3728 	mov	dpl,_lcd_address
      000C72 85*03 83         [24] 3729 	mov	dph,(_lcd_address + 1)
      000C75 ED               [12] 3730 	mov	a,r5
      000C76 F0               [24] 3731 	movx	@dptr,a
                                   3732 ;	assignBit
      000C77 C2 B5            [12] 3733 	clr	_P3_5
                                   3734 ;	.\ecen4350_lcd_v4.c:626: write8(lo);
                                   3735 ;	assignBit
      000C79 D2 B5            [12] 3736 	setb	_P3_5
      000C7B 85*02 82         [24] 3737 	mov	dpl,_lcd_address
      000C7E 85*03 83         [24] 3738 	mov	dph,(_lcd_address + 1)
      000C81 EE               [12] 3739 	mov	a,r6
      000C82 F0               [24] 3740 	movx	@dptr,a
                                   3741 ;	assignBit
      000C83 C2 B5            [12] 3742 	clr	_P3_5
                                   3743 ;	.\ecen4350_lcd_v4.c:627: } while (--i);
      000C85 DB 9E            [24] 3744 	djnz	r3,00101$
      000C87 80 8D            [24] 3745 	sjmp	00104$
      000C89                       3746 00106$:
                                   3747 ;	.\ecen4350_lcd_v4.c:629: for (i = (char)len & 63; i--;)
      000C89 7F 3F            [12] 3748 	mov	r7,#0x3f
      000C8B                       3749 00109$:
      000C8B 8F 04            [24] 3750 	mov	ar4,r7
      000C8D 1F               [12] 3751 	dec	r7
      000C8E EC               [12] 3752 	mov	a,r4
      000C8F 60 1A            [24] 3753 	jz	00111$
                                   3754 ;	.\ecen4350_lcd_v4.c:632: write8(hi);
                                   3755 ;	assignBit
      000C91 D2 B5            [12] 3756 	setb	_P3_5
      000C93 85*02 82         [24] 3757 	mov	dpl,_lcd_address
      000C96 85*03 83         [24] 3758 	mov	dph,(_lcd_address + 1)
      000C99 ED               [12] 3759 	mov	a,r5
      000C9A F0               [24] 3760 	movx	@dptr,a
                                   3761 ;	assignBit
      000C9B C2 B5            [12] 3762 	clr	_P3_5
                                   3763 ;	.\ecen4350_lcd_v4.c:633: write8(lo);
                                   3764 ;	assignBit
      000C9D D2 B5            [12] 3765 	setb	_P3_5
      000C9F 85*02 82         [24] 3766 	mov	dpl,_lcd_address
      000CA2 85*03 83         [24] 3767 	mov	dph,(_lcd_address + 1)
      000CA5 EE               [12] 3768 	mov	a,r6
      000CA6 F0               [24] 3769 	movx	@dptr,a
                                   3770 ;	assignBit
      000CA7 C2 B5            [12] 3771 	clr	_P3_5
      000CA9 80 E0            [24] 3772 	sjmp	00109$
      000CAB                       3773 00111$:
                                   3774 ;	.\ecen4350_lcd_v4.c:637: }
      000CAB 22               [24] 3775 	ret
                                   3776 ;------------------------------------------------------------
                                   3777 ;Allocation info for local variables in function 'fillScreen'
                                   3778 ;------------------------------------------------------------
                                   3779 ;Color                     Allocated to registers r6 r7 
                                   3780 ;len                       Allocated to registers 
                                   3781 ;blocks                    Allocated to registers r4 r7 
                                   3782 ;i                         Allocated to registers r3 
                                   3783 ;hi                        Allocated to registers r5 
                                   3784 ;lo                        Allocated to registers r6 
                                   3785 ;------------------------------------------------------------
                                   3786 ;	.\ecen4350_lcd_v4.c:639: void fillScreen(unsigned int Color)
                                   3787 ;	-----------------------------------------
                                   3788 ;	 function fillScreen
                                   3789 ;	-----------------------------------------
      000CAC                       3790 _fillScreen:
      000CAC AE 82            [24] 3791 	mov	r6,dpl
      000CAE AF 83            [24] 3792 	mov	r7,dph
                                   3793 ;	.\ecen4350_lcd_v4.c:646: unsigned char i, hi = Color >> 8,
      000CB0 8F 05            [24] 3794 	mov	ar5,r7
                                   3795 ;	.\ecen4350_lcd_v4.c:647: lo = Color;
                                   3796 ;	.\ecen4350_lcd_v4.c:650: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000CB2 E4               [12] 3797 	clr	a
      000CB3 F5*00            [12] 3798 	mov	_setAddress_PARM_2,a
      000CB5 F5*01            [12] 3799 	mov	(_setAddress_PARM_2 + 1),a
      000CB7 75*02 EF         [24] 3800 	mov	_setAddress_PARM_3,#0xef
                                   3801 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000CBA F5*03            [12] 3802 	mov	(_setAddress_PARM_3 + 1),a
      000CBC 75*04 3F         [24] 3803 	mov	_setAddress_PARM_4,#0x3f
      000CBF 75*05 01         [24] 3804 	mov	(_setAddress_PARM_4 + 1),#0x01
      000CC2 90 00 00         [24] 3805 	mov	dptr,#0x0000
      000CC5 C0 06            [24] 3806 	push	ar6
      000CC7 C0 05            [24] 3807 	push	ar5
      000CC9 12r05r93         [24] 3808 	lcall	_setAddress
      000CCC D0 05            [24] 3809 	pop	ar5
      000CCE D0 06            [24] 3810 	pop	ar6
                                   3811 ;	.\ecen4350_lcd_v4.c:654: write8Reg(0x2C);
                                   3812 ;	assignBit
      000CD0 C2 B4            [12] 3813 	clr	_P3_4
                                   3814 ;	assignBit
      000CD2 D2 B5            [12] 3815 	setb	_P3_5
      000CD4 85*02 82         [24] 3816 	mov	dpl,_lcd_address
      000CD7 85*03 83         [24] 3817 	mov	dph,(_lcd_address + 1)
      000CDA 74 2C            [12] 3818 	mov	a,#0x2c
      000CDC F0               [24] 3819 	movx	@dptr,a
                                   3820 ;	assignBit
      000CDD C2 B5            [12] 3821 	clr	_P3_5
                                   3822 ;	.\ecen4350_lcd_v4.c:656: CD = 1;
                                   3823 ;	assignBit
      000CDF D2 B4            [12] 3824 	setb	_P3_4
                                   3825 ;	.\ecen4350_lcd_v4.c:657: write8(hi);
                                   3826 ;	assignBit
      000CE1 D2 B5            [12] 3827 	setb	_P3_5
      000CE3 85*02 82         [24] 3828 	mov	dpl,_lcd_address
      000CE6 85*03 83         [24] 3829 	mov	dph,(_lcd_address + 1)
      000CE9 ED               [12] 3830 	mov	a,r5
      000CEA F0               [24] 3831 	movx	@dptr,a
                                   3832 ;	assignBit
      000CEB C2 B5            [12] 3833 	clr	_P3_5
                                   3834 ;	.\ecen4350_lcd_v4.c:658: write8(lo);
                                   3835 ;	assignBit
      000CED D2 B5            [12] 3836 	setb	_P3_5
      000CEF 85*02 82         [24] 3837 	mov	dpl,_lcd_address
      000CF2 85*03 83         [24] 3838 	mov	dph,(_lcd_address + 1)
      000CF5 EE               [12] 3839 	mov	a,r6
      000CF6 F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	assignBit
      000CF7 C2 B5            [12] 3842 	clr	_P3_5
                                   3843 ;	.\ecen4350_lcd_v4.c:661: while (blocks--)
      000CF9 7C B0            [12] 3844 	mov	r4,#0xb0
      000CFB 7F 04            [12] 3845 	mov	r7,#0x04
      000CFD                       3846 00104$:
      000CFD 8C 02            [24] 3847 	mov	ar2,r4
      000CFF 8F 03            [24] 3848 	mov	ar3,r7
      000D01 1C               [12] 3849 	dec	r4
      000D02 BC FF 01         [24] 3850 	cjne	r4,#0xff,00140$
      000D05 1F               [12] 3851 	dec	r7
      000D06                       3852 00140$:
      000D06 EA               [12] 3853 	mov	a,r2
      000D07 4B               [12] 3854 	orl	a,r3
      000D08 60 66            [24] 3855 	jz	00106$
                                   3856 ;	.\ecen4350_lcd_v4.c:664: do
      000D0A 7B 10            [12] 3857 	mov	r3,#0x10
      000D0C                       3858 00101$:
                                   3859 ;	.\ecen4350_lcd_v4.c:667: write8(hi);
                                   3860 ;	assignBit
      000D0C D2 B5            [12] 3861 	setb	_P3_5
      000D0E 85*02 82         [24] 3862 	mov	dpl,_lcd_address
      000D11 85*03 83         [24] 3863 	mov	dph,(_lcd_address + 1)
      000D14 ED               [12] 3864 	mov	a,r5
      000D15 F0               [24] 3865 	movx	@dptr,a
                                   3866 ;	assignBit
      000D16 C2 B5            [12] 3867 	clr	_P3_5
                                   3868 ;	.\ecen4350_lcd_v4.c:668: write8(lo);
                                   3869 ;	assignBit
      000D18 D2 B5            [12] 3870 	setb	_P3_5
      000D1A 85*02 82         [24] 3871 	mov	dpl,_lcd_address
      000D1D 85*03 83         [24] 3872 	mov	dph,(_lcd_address + 1)
      000D20 EE               [12] 3873 	mov	a,r6
      000D21 F0               [24] 3874 	movx	@dptr,a
                                   3875 ;	assignBit
      000D22 C2 B5            [12] 3876 	clr	_P3_5
                                   3877 ;	.\ecen4350_lcd_v4.c:669: write8(hi);
                                   3878 ;	assignBit
      000D24 D2 B5            [12] 3879 	setb	_P3_5
      000D26 85*02 82         [24] 3880 	mov	dpl,_lcd_address
      000D29 85*03 83         [24] 3881 	mov	dph,(_lcd_address + 1)
      000D2C ED               [12] 3882 	mov	a,r5
      000D2D F0               [24] 3883 	movx	@dptr,a
                                   3884 ;	assignBit
      000D2E C2 B5            [12] 3885 	clr	_P3_5
                                   3886 ;	.\ecen4350_lcd_v4.c:670: write8(lo);
                                   3887 ;	assignBit
      000D30 D2 B5            [12] 3888 	setb	_P3_5
      000D32 85*02 82         [24] 3889 	mov	dpl,_lcd_address
      000D35 85*03 83         [24] 3890 	mov	dph,(_lcd_address + 1)
      000D38 EE               [12] 3891 	mov	a,r6
      000D39 F0               [24] 3892 	movx	@dptr,a
                                   3893 ;	assignBit
      000D3A C2 B5            [12] 3894 	clr	_P3_5
                                   3895 ;	.\ecen4350_lcd_v4.c:671: write8(hi);
                                   3896 ;	assignBit
      000D3C D2 B5            [12] 3897 	setb	_P3_5
      000D3E 85*02 82         [24] 3898 	mov	dpl,_lcd_address
      000D41 85*03 83         [24] 3899 	mov	dph,(_lcd_address + 1)
      000D44 ED               [12] 3900 	mov	a,r5
      000D45 F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	assignBit
      000D46 C2 B5            [12] 3903 	clr	_P3_5
                                   3904 ;	.\ecen4350_lcd_v4.c:672: write8(lo);
                                   3905 ;	assignBit
      000D48 D2 B5            [12] 3906 	setb	_P3_5
      000D4A 85*02 82         [24] 3907 	mov	dpl,_lcd_address
      000D4D 85*03 83         [24] 3908 	mov	dph,(_lcd_address + 1)
      000D50 EE               [12] 3909 	mov	a,r6
      000D51 F0               [24] 3910 	movx	@dptr,a
                                   3911 ;	assignBit
      000D52 C2 B5            [12] 3912 	clr	_P3_5
                                   3913 ;	.\ecen4350_lcd_v4.c:673: write8(hi);
                                   3914 ;	assignBit
      000D54 D2 B5            [12] 3915 	setb	_P3_5
      000D56 85*02 82         [24] 3916 	mov	dpl,_lcd_address
      000D59 85*03 83         [24] 3917 	mov	dph,(_lcd_address + 1)
      000D5C ED               [12] 3918 	mov	a,r5
      000D5D F0               [24] 3919 	movx	@dptr,a
                                   3920 ;	assignBit
      000D5E C2 B5            [12] 3921 	clr	_P3_5
                                   3922 ;	.\ecen4350_lcd_v4.c:674: write8(lo);
                                   3923 ;	assignBit
      000D60 D2 B5            [12] 3924 	setb	_P3_5
      000D62 85*02 82         [24] 3925 	mov	dpl,_lcd_address
      000D65 85*03 83         [24] 3926 	mov	dph,(_lcd_address + 1)
      000D68 EE               [12] 3927 	mov	a,r6
      000D69 F0               [24] 3928 	movx	@dptr,a
                                   3929 ;	assignBit
      000D6A C2 B5            [12] 3930 	clr	_P3_5
                                   3931 ;	.\ecen4350_lcd_v4.c:675: } while (--i);
      000D6C DB 9E            [24] 3932 	djnz	r3,00101$
      000D6E 80 8D            [24] 3933 	sjmp	00104$
      000D70                       3934 00106$:
                                   3935 ;	.\ecen4350_lcd_v4.c:677: for (i = (char)len & 63; i--;)
      000D70 7F 3F            [12] 3936 	mov	r7,#0x3f
      000D72                       3937 00109$:
      000D72 8F 04            [24] 3938 	mov	ar4,r7
      000D74 1F               [12] 3939 	dec	r7
      000D75 EC               [12] 3940 	mov	a,r4
      000D76 60 1A            [24] 3941 	jz	00111$
                                   3942 ;	.\ecen4350_lcd_v4.c:680: write8(hi);
                                   3943 ;	assignBit
      000D78 D2 B5            [12] 3944 	setb	_P3_5
      000D7A 85*02 82         [24] 3945 	mov	dpl,_lcd_address
      000D7D 85*03 83         [24] 3946 	mov	dph,(_lcd_address + 1)
      000D80 ED               [12] 3947 	mov	a,r5
      000D81 F0               [24] 3948 	movx	@dptr,a
                                   3949 ;	assignBit
      000D82 C2 B5            [12] 3950 	clr	_P3_5
                                   3951 ;	.\ecen4350_lcd_v4.c:681: write8(lo);
                                   3952 ;	assignBit
      000D84 D2 B5            [12] 3953 	setb	_P3_5
      000D86 85*02 82         [24] 3954 	mov	dpl,_lcd_address
      000D89 85*03 83         [24] 3955 	mov	dph,(_lcd_address + 1)
      000D8C EE               [12] 3956 	mov	a,r6
      000D8D F0               [24] 3957 	movx	@dptr,a
                                   3958 ;	assignBit
      000D8E C2 B5            [12] 3959 	clr	_P3_5
      000D90 80 E0            [24] 3960 	sjmp	00109$
      000D92                       3961 00111$:
                                   3962 ;	.\ecen4350_lcd_v4.c:685: }
      000D92 22               [24] 3963 	ret
                                   3964 ;------------------------------------------------------------
                                   3965 ;Allocation info for local variables in function 'clearLCD'
                                   3966 ;------------------------------------------------------------
                                   3967 ;	.\ecen4350_lcd_v4.c:687: void clearLCD (void)
                                   3968 ;	-----------------------------------------
                                   3969 ;	 function clearLCD
                                   3970 ;	-----------------------------------------
      000D93                       3971 _clearLCD:
                                   3972 ;	.\ecen4350_lcd_v4.c:689: fillScreen(colorBackground);
      000D93 90 00 00         [24] 3973 	mov	dptr,#0x0000
                                   3974 ;	.\ecen4350_lcd_v4.c:690: }
      000D96 02r0CrAC         [24] 3975 	ljmp	_fillScreen
                                   3976 ;------------------------------------------------------------
                                   3977 ;Allocation info for local variables in function 'drawChar'
                                   3978 ;------------------------------------------------------------
                                   3979 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3980 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3981 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3982 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3983 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3984 ;x                         Allocated with name '_drawChar_x_65536_458'
                                   3985 ;i                         Allocated with name '_drawChar_i_131072_461'
                                   3986 ;line                      Allocated with name '_drawChar_line_196608_462'
                                   3987 ;j                         Allocated to registers r0 
                                   3988 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3989 ;------------------------------------------------------------
                                   3990 ;	.\ecen4350_lcd_v4.c:691: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3991 ;	-----------------------------------------
                                   3992 ;	 function drawChar
                                   3993 ;	-----------------------------------------
      000D99                       3994 _drawChar:
      000D99 85 82*48         [24] 3995 	mov	_drawChar_x_65536_458,dpl
      000D9C 85 83*49         [24] 3996 	mov	(_drawChar_x_65536_458 + 1),dph
                                   3997 ;	.\ecen4350_lcd_v4.c:693: if ((x >= TFTWIDTH) ||			// Clip right
      000D9F C3               [12] 3998 	clr	c
      000DA0 E5*48            [12] 3999 	mov	a,_drawChar_x_65536_458
      000DA2 94 F0            [12] 4000 	subb	a,#0xf0
      000DA4 E5*49            [12] 4001 	mov	a,(_drawChar_x_65536_458 + 1)
      000DA6 64 80            [12] 4002 	xrl	a,#0x80
      000DA8 94 80            [12] 4003 	subb	a,#0x80
      000DAA 50 59            [24] 4004 	jnc	00101$
                                   4005 ;	.\ecen4350_lcd_v4.c:694: (y >= TFTHEIGHT) ||			// Clip bottom
      000DAC C3               [12] 4006 	clr	c
      000DAD E5*40            [12] 4007 	mov	a,_drawChar_PARM_2
      000DAF 94 40            [12] 4008 	subb	a,#0x40
      000DB1 E5*41            [12] 4009 	mov	a,(_drawChar_PARM_2 + 1)
      000DB3 64 80            [12] 4010 	xrl	a,#0x80
      000DB5 94 81            [12] 4011 	subb	a,#0x81
      000DB7 50 4C            [24] 4012 	jnc	00101$
                                   4013 ;	.\ecen4350_lcd_v4.c:695: ((x + 6 * size - 1) < 0) || // Clip left
      000DB9 AC*47            [24] 4014 	mov	r4,_drawChar_PARM_6
      000DBB 7D 00            [12] 4015 	mov	r5,#0x00
      000DBD 8C*00            [24] 4016 	mov	__mulint_PARM_2,r4
      000DBF 8D*01            [24] 4017 	mov	(__mulint_PARM_2 + 1),r5
      000DC1 90 00 06         [24] 4018 	mov	dptr,#0x0006
      000DC4 C0 05            [24] 4019 	push	ar5
      000DC6 C0 04            [24] 4020 	push	ar4
      000DC8 12r00r00         [24] 4021 	lcall	__mulint
      000DCB AA 82            [24] 4022 	mov	r2,dpl
      000DCD AB 83            [24] 4023 	mov	r3,dph
      000DCF D0 04            [24] 4024 	pop	ar4
      000DD1 D0 05            [24] 4025 	pop	ar5
      000DD3 EA               [12] 4026 	mov	a,r2
      000DD4 25*48            [12] 4027 	add	a,_drawChar_x_65536_458
      000DD6 FA               [12] 4028 	mov	r2,a
      000DD7 EB               [12] 4029 	mov	a,r3
      000DD8 35*49            [12] 4030 	addc	a,(_drawChar_x_65536_458 + 1)
      000DDA FB               [12] 4031 	mov	r3,a
      000DDB 1A               [12] 4032 	dec	r2
      000DDC BA FF 01         [24] 4033 	cjne	r2,#0xff,00182$
      000DDF 1B               [12] 4034 	dec	r3
      000DE0                       4035 00182$:
      000DE0 EB               [12] 4036 	mov	a,r3
      000DE1 20 E7 21         [24] 4037 	jb	acc.7,00101$
                                   4038 ;	.\ecen4350_lcd_v4.c:696: ((y + 8 * size - 1) < 0))	// Clip top
      000DE4 ED               [12] 4039 	mov	a,r5
      000DE5 C4               [12] 4040 	swap	a
      000DE6 03               [12] 4041 	rr	a
      000DE7 54 F8            [12] 4042 	anl	a,#0xf8
      000DE9 CC               [12] 4043 	xch	a,r4
      000DEA C4               [12] 4044 	swap	a
      000DEB 03               [12] 4045 	rr	a
      000DEC CC               [12] 4046 	xch	a,r4
      000DED 6C               [12] 4047 	xrl	a,r4
      000DEE CC               [12] 4048 	xch	a,r4
      000DEF 54 F8            [12] 4049 	anl	a,#0xf8
      000DF1 CC               [12] 4050 	xch	a,r4
      000DF2 6C               [12] 4051 	xrl	a,r4
      000DF3 FD               [12] 4052 	mov	r5,a
      000DF4 EC               [12] 4053 	mov	a,r4
      000DF5 25*40            [12] 4054 	add	a,_drawChar_PARM_2
      000DF7 FC               [12] 4055 	mov	r4,a
      000DF8 ED               [12] 4056 	mov	a,r5
      000DF9 35*41            [12] 4057 	addc	a,(_drawChar_PARM_2 + 1)
      000DFB FD               [12] 4058 	mov	r5,a
      000DFC 1C               [12] 4059 	dec	r4
      000DFD BC FF 01         [24] 4060 	cjne	r4,#0xff,00184$
      000E00 1D               [12] 4061 	dec	r5
      000E01                       4062 00184$:
      000E01 ED               [12] 4063 	mov	a,r5
      000E02 30 E7 01         [24] 4064 	jnb	acc.7,00141$
      000E05                       4065 00101$:
                                   4066 ;	.\ecen4350_lcd_v4.c:698: return;
      000E05 22               [24] 4067 	ret
                                   4068 ;	.\ecen4350_lcd_v4.c:701: for (char i = 0; i < 6; i++)
      000E06                       4069 00141$:
      000E06 74 01            [12] 4070 	mov	a,#0x01
      000E08 B5*47 04         [24] 4071 	cjne	a,_drawChar_PARM_6,00186$
      000E0B 74 01            [12] 4072 	mov	a,#0x01
      000E0D 80 01            [24] 4073 	sjmp	00187$
      000E0F                       4074 00186$:
      000E0F E4               [12] 4075 	clr	a
      000E10                       4076 00187$:
      000E10 FD               [12] 4077 	mov	r5,a
      000E11 FC               [12] 4078 	mov	r4,a
      000E12 E5*43            [12] 4079 	mov	a,_drawChar_PARM_4
      000E14 B5*45 09         [24] 4080 	cjne	a,_drawChar_PARM_5,00188$
      000E17 E5*44            [12] 4081 	mov	a,(_drawChar_PARM_4 + 1)
      000E19 B5*46 04         [24] 4082 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000E1C 74 01            [12] 4083 	mov	a,#0x01
      000E1E 80 01            [24] 4084 	sjmp	00189$
      000E20                       4085 00188$:
      000E20 E4               [12] 4086 	clr	a
      000E21                       4087 00189$:
      000E21 FB               [12] 4088 	mov	r3,a
      000E22 75*4A 00         [24] 4089 	mov	_drawChar_i_131072_461,#0x00
      000E25                       4090 00126$:
      000E25 74 FA            [12] 4091 	mov	a,#0x100 - 0x06
      000E27 25*4A            [12] 4092 	add	a,_drawChar_i_131072_461
      000E29 50 01            [24] 4093 	jnc	00190$
      000E2B 22               [24] 4094 	ret
      000E2C                       4095 00190$:
                                   4096 ;	.\ecen4350_lcd_v4.c:705: if (i == 5)
      000E2C 74 05            [12] 4097 	mov	a,#0x05
      000E2E B5*4A 05         [24] 4098 	cjne	a,_drawChar_i_131072_461,00107$
                                   4099 ;	.\ecen4350_lcd_v4.c:707: line = 0x0;
      000E31 75*4B 00         [24] 4100 	mov	_drawChar_line_196608_462,#0x00
      000E34 80 31            [24] 4101 	sjmp	00140$
      000E36                       4102 00107$:
                                   4103 ;	.\ecen4350_lcd_v4.c:711: line = pgm_read_byte(font + (c * 5) + i);
      000E36 85*42*00         [24] 4104 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000E39 75*01 00         [24] 4105 	mov	(__mulint_PARM_2 + 1),#0x00
      000E3C 90 00 05         [24] 4106 	mov	dptr,#0x0005
      000E3F C0 05            [24] 4107 	push	ar5
      000E41 C0 04            [24] 4108 	push	ar4
      000E43 C0 03            [24] 4109 	push	ar3
      000E45 12r00r00         [24] 4110 	lcall	__mulint
      000E48 A8 82            [24] 4111 	mov	r0,dpl
      000E4A AF 83            [24] 4112 	mov	r7,dph
      000E4C D0 03            [24] 4113 	pop	ar3
      000E4E D0 04            [24] 4114 	pop	ar4
      000E50 D0 05            [24] 4115 	pop	ar5
      000E52 E8               [12] 4116 	mov	a,r0
      000E53 24r00            [12] 4117 	add	a,#_font
      000E55 F8               [12] 4118 	mov	r0,a
      000E56 EF               [12] 4119 	mov	a,r7
      000E57 34s00            [12] 4120 	addc	a,#(_font >> 8)
      000E59 FF               [12] 4121 	mov	r7,a
      000E5A E5*4A            [12] 4122 	mov	a,_drawChar_i_131072_461
      000E5C 28               [12] 4123 	add	a,r0
      000E5D F5 82            [12] 4124 	mov	dpl,a
      000E5F E4               [12] 4125 	clr	a
      000E60 3F               [12] 4126 	addc	a,r7
      000E61 F5 83            [12] 4127 	mov	dph,a
      000E63 E4               [12] 4128 	clr	a
      000E64 93               [24] 4129 	movc	a,@a+dptr
      000E65 F5*4B            [12] 4130 	mov	_drawChar_line_196608_462,a
                                   4131 ;	.\ecen4350_lcd_v4.c:714: for (char j = 0; j < 8; j++)
      000E67                       4132 00140$:
      000E67 85*4A F0         [24] 4133 	mov	b,_drawChar_i_131072_461
      000E6A E5*47            [12] 4134 	mov	a,_drawChar_PARM_6
      000E6C A4               [48] 4135 	mul	ab
      000E6D 25*48            [12] 4136 	add	a,_drawChar_x_65536_458
      000E6F FE               [12] 4137 	mov	r6,a
      000E70 E5*49            [12] 4138 	mov	a,(_drawChar_x_65536_458 + 1)
      000E72 35 F0            [12] 4139 	addc	a,b
      000E74 FF               [12] 4140 	mov	r7,a
      000E75 8E*4C            [24] 4141 	mov	_drawChar_sloc0_1_0,r6
      000E77 8F*4D            [24] 4142 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000E79 78 00            [12] 4143 	mov	r0,#0x00
      000E7B                       4144 00123$:
      000E7B B8 08 00         [24] 4145 	cjne	r0,#0x08,00193$
      000E7E                       4146 00193$:
      000E7E 40 03            [24] 4147 	jc	00194$
      000E80 02r0FrA5         [24] 4148 	ljmp	00127$
      000E83                       4149 00194$:
                                   4150 ;	.\ecen4350_lcd_v4.c:716: if (line & 0x1)
      000E83 E5*4B            [12] 4151 	mov	a,_drawChar_line_196608_462
      000E85 20 E0 03         [24] 4152 	jb	acc.0,00195$
      000E88 02r0Fr13         [24] 4153 	ljmp	00118$
      000E8B                       4154 00195$:
                                   4155 ;	.\ecen4350_lcd_v4.c:718: if (size == 1) // default size
      000E8B ED               [12] 4156 	mov	a,r5
      000E8C 60 40            [24] 4157 	jz	00110$
                                   4158 ;	.\ecen4350_lcd_v4.c:720: drawPixel(x + i, y + j, color);
      000E8E A9*4A            [24] 4159 	mov	r1,_drawChar_i_131072_461
      000E90 7A 00            [12] 4160 	mov	r2,#0x00
      000E92 E9               [12] 4161 	mov	a,r1
      000E93 25*48            [12] 4162 	add	a,_drawChar_x_65536_458
      000E95 F5 82            [12] 4163 	mov	dpl,a
      000E97 EA               [12] 4164 	mov	a,r2
      000E98 35*49            [12] 4165 	addc	a,(_drawChar_x_65536_458 + 1)
      000E9A F5 83            [12] 4166 	mov	dph,a
      000E9C 88 01            [24] 4167 	mov	ar1,r0
      000E9E 7A 00            [12] 4168 	mov	r2,#0x00
      000EA0 E9               [12] 4169 	mov	a,r1
      000EA1 25*40            [12] 4170 	add	a,_drawChar_PARM_2
      000EA3 F5*20            [12] 4171 	mov	_drawPixel_PARM_2,a
      000EA5 EA               [12] 4172 	mov	a,r2
      000EA6 35*41            [12] 4173 	addc	a,(_drawChar_PARM_2 + 1)
      000EA8 F5*21            [12] 4174 	mov	(_drawPixel_PARM_2 + 1),a
      000EAA 85*43*22         [24] 4175 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000EAD 85*44*23         [24] 4176 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000EB0 C0 07            [24] 4177 	push	ar7
      000EB2 C0 06            [24] 4178 	push	ar6
      000EB4 C0 05            [24] 4179 	push	ar5
      000EB6 C0 04            [24] 4180 	push	ar4
      000EB8 C0 03            [24] 4181 	push	ar3
      000EBA C0 00            [24] 4182 	push	ar0
      000EBC 12r07r6D         [24] 4183 	lcall	_drawPixel
      000EBF D0 00            [24] 4184 	pop	ar0
      000EC1 D0 03            [24] 4185 	pop	ar3
      000EC3 D0 04            [24] 4186 	pop	ar4
      000EC5 D0 05            [24] 4187 	pop	ar5
      000EC7 D0 06            [24] 4188 	pop	ar6
      000EC9 D0 07            [24] 4189 	pop	ar7
      000ECB 02r0Fr9B         [24] 4190 	ljmp	00119$
      000ECE                       4191 00110$:
                                   4192 ;	.\ecen4350_lcd_v4.c:724: fillRect(x + (i * size), y + (j * size), size, size, color);
      000ECE 88 F0            [24] 4193 	mov	b,r0
      000ED0 E5*47            [12] 4194 	mov	a,_drawChar_PARM_6
      000ED2 A4               [48] 4195 	mul	ab
      000ED3 25*40            [12] 4196 	add	a,_drawChar_PARM_2
      000ED5 F5*38            [12] 4197 	mov	_fillRect_PARM_2,a
      000ED7 E5*41            [12] 4198 	mov	a,(_drawChar_PARM_2 + 1)
      000ED9 35 F0            [12] 4199 	addc	a,b
      000EDB F5*39            [12] 4200 	mov	(_fillRect_PARM_2 + 1),a
      000EDD A9*47            [24] 4201 	mov	r1,_drawChar_PARM_6
      000EDF 7A 00            [12] 4202 	mov	r2,#0x00
      000EE1 89*3A            [24] 4203 	mov	_fillRect_PARM_3,r1
      000EE3 8A*3B            [24] 4204 	mov	(_fillRect_PARM_3 + 1),r2
      000EE5 89*3C            [24] 4205 	mov	_fillRect_PARM_4,r1
      000EE7 8A*3D            [24] 4206 	mov	(_fillRect_PARM_4 + 1),r2
      000EE9 85*43*3E         [24] 4207 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000EEC 85*44*3F         [24] 4208 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000EEF 85*4C 82         [24] 4209 	mov	dpl,_drawChar_sloc0_1_0
      000EF2 85*4D 83         [24] 4210 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000EF5 C0 07            [24] 4211 	push	ar7
      000EF7 C0 06            [24] 4212 	push	ar6
      000EF9 C0 05            [24] 4213 	push	ar5
      000EFB C0 04            [24] 4214 	push	ar4
      000EFD C0 03            [24] 4215 	push	ar3
      000EFF C0 00            [24] 4216 	push	ar0
      000F01 12r0ArE9         [24] 4217 	lcall	_fillRect
      000F04 D0 00            [24] 4218 	pop	ar0
      000F06 D0 03            [24] 4219 	pop	ar3
      000F08 D0 04            [24] 4220 	pop	ar4
      000F0A D0 05            [24] 4221 	pop	ar5
      000F0C D0 06            [24] 4222 	pop	ar6
      000F0E D0 07            [24] 4223 	pop	ar7
      000F10 02r0Fr9B         [24] 4224 	ljmp	00119$
      000F13                       4225 00118$:
                                   4226 ;	.\ecen4350_lcd_v4.c:727: else if (bg != color)
      000F13 EB               [12] 4227 	mov	a,r3
      000F14 60 03            [24] 4228 	jz	00197$
      000F16 02r0Fr9B         [24] 4229 	ljmp	00119$
      000F19                       4230 00197$:
                                   4231 ;	.\ecen4350_lcd_v4.c:729: if (size == 1) // default size
      000F19 EC               [12] 4232 	mov	a,r4
      000F1A 60 3F            [24] 4233 	jz	00113$
                                   4234 ;	.\ecen4350_lcd_v4.c:731: drawPixel(x + i, y + j, bg);
      000F1C A9*4A            [24] 4235 	mov	r1,_drawChar_i_131072_461
      000F1E 7A 00            [12] 4236 	mov	r2,#0x00
      000F20 E9               [12] 4237 	mov	a,r1
      000F21 25*48            [12] 4238 	add	a,_drawChar_x_65536_458
      000F23 F5 82            [12] 4239 	mov	dpl,a
      000F25 EA               [12] 4240 	mov	a,r2
      000F26 35*49            [12] 4241 	addc	a,(_drawChar_x_65536_458 + 1)
      000F28 F5 83            [12] 4242 	mov	dph,a
      000F2A 88 01            [24] 4243 	mov	ar1,r0
      000F2C 7A 00            [12] 4244 	mov	r2,#0x00
      000F2E E9               [12] 4245 	mov	a,r1
      000F2F 25*40            [12] 4246 	add	a,_drawChar_PARM_2
      000F31 F5*20            [12] 4247 	mov	_drawPixel_PARM_2,a
      000F33 EA               [12] 4248 	mov	a,r2
      000F34 35*41            [12] 4249 	addc	a,(_drawChar_PARM_2 + 1)
      000F36 F5*21            [12] 4250 	mov	(_drawPixel_PARM_2 + 1),a
      000F38 85*45*22         [24] 4251 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000F3B 85*46*23         [24] 4252 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000F3E C0 07            [24] 4253 	push	ar7
      000F40 C0 06            [24] 4254 	push	ar6
      000F42 C0 05            [24] 4255 	push	ar5
      000F44 C0 04            [24] 4256 	push	ar4
      000F46 C0 03            [24] 4257 	push	ar3
      000F48 C0 00            [24] 4258 	push	ar0
      000F4A 12r07r6D         [24] 4259 	lcall	_drawPixel
      000F4D D0 00            [24] 4260 	pop	ar0
      000F4F D0 03            [24] 4261 	pop	ar3
      000F51 D0 04            [24] 4262 	pop	ar4
      000F53 D0 05            [24] 4263 	pop	ar5
      000F55 D0 06            [24] 4264 	pop	ar6
      000F57 D0 07            [24] 4265 	pop	ar7
      000F59 80 40            [24] 4266 	sjmp	00119$
      000F5B                       4267 00113$:
                                   4268 ;	.\ecen4350_lcd_v4.c:735: fillRect(x + i * size, y + j * size, size, size, bg);
      000F5B 88 F0            [24] 4269 	mov	b,r0
      000F5D E5*47            [12] 4270 	mov	a,_drawChar_PARM_6
      000F5F A4               [48] 4271 	mul	ab
      000F60 25*40            [12] 4272 	add	a,_drawChar_PARM_2
      000F62 F5*38            [12] 4273 	mov	_fillRect_PARM_2,a
      000F64 E5*41            [12] 4274 	mov	a,(_drawChar_PARM_2 + 1)
      000F66 35 F0            [12] 4275 	addc	a,b
      000F68 F5*39            [12] 4276 	mov	(_fillRect_PARM_2 + 1),a
      000F6A A9*47            [24] 4277 	mov	r1,_drawChar_PARM_6
      000F6C 7A 00            [12] 4278 	mov	r2,#0x00
      000F6E 89*3A            [24] 4279 	mov	_fillRect_PARM_3,r1
      000F70 8A*3B            [24] 4280 	mov	(_fillRect_PARM_3 + 1),r2
      000F72 89*3C            [24] 4281 	mov	_fillRect_PARM_4,r1
      000F74 8A*3D            [24] 4282 	mov	(_fillRect_PARM_4 + 1),r2
      000F76 85*45*3E         [24] 4283 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000F79 85*46*3F         [24] 4284 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000F7C 8E 82            [24] 4285 	mov	dpl,r6
      000F7E 8F 83            [24] 4286 	mov	dph,r7
      000F80 C0 07            [24] 4287 	push	ar7
      000F82 C0 06            [24] 4288 	push	ar6
      000F84 C0 05            [24] 4289 	push	ar5
      000F86 C0 04            [24] 4290 	push	ar4
      000F88 C0 03            [24] 4291 	push	ar3
      000F8A C0 00            [24] 4292 	push	ar0
      000F8C 12r0ArE9         [24] 4293 	lcall	_fillRect
      000F8F D0 00            [24] 4294 	pop	ar0
      000F91 D0 03            [24] 4295 	pop	ar3
      000F93 D0 04            [24] 4296 	pop	ar4
      000F95 D0 05            [24] 4297 	pop	ar5
      000F97 D0 06            [24] 4298 	pop	ar6
      000F99 D0 07            [24] 4299 	pop	ar7
      000F9B                       4300 00119$:
                                   4301 ;	.\ecen4350_lcd_v4.c:739: line >>= 1;
      000F9B E5*4B            [12] 4302 	mov	a,_drawChar_line_196608_462
      000F9D C3               [12] 4303 	clr	c
      000F9E 13               [12] 4304 	rrc	a
      000F9F F5*4B            [12] 4305 	mov	_drawChar_line_196608_462,a
                                   4306 ;	.\ecen4350_lcd_v4.c:714: for (char j = 0; j < 8; j++)
      000FA1 08               [12] 4307 	inc	r0
      000FA2 02r0Er7B         [24] 4308 	ljmp	00123$
      000FA5                       4309 00127$:
                                   4310 ;	.\ecen4350_lcd_v4.c:701: for (char i = 0; i < 6; i++)
      000FA5 05*4A            [12] 4311 	inc	_drawChar_i_131072_461
                                   4312 ;	.\ecen4350_lcd_v4.c:742: }
      000FA7 02r0Er25         [24] 4313 	ljmp	00126$
                                   4314 ;------------------------------------------------------------
                                   4315 ;Allocation info for local variables in function 'write'
                                   4316 ;------------------------------------------------------------
                                   4317 ;c                         Allocated to registers r7 
                                   4318 ;------------------------------------------------------------
                                   4319 ;	.\ecen4350_lcd_v4.c:744: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4320 ;	-----------------------------------------
                                   4321 ;	 function write
                                   4322 ;	-----------------------------------------
      000FAA                       4323 _write:
      000FAA AF 82            [24] 4324 	mov	r7,dpl
                                   4325 ;	.\ecen4350_lcd_v4.c:746: if (c == '\n')
      000FAC BF 0A 22         [24] 4326 	cjne	r7,#0x0a,00105$
                                   4327 ;	.\ecen4350_lcd_v4.c:748: cursor_y += textsize * 8;
      000FAF AD*0C            [24] 4328 	mov	r5,_textsize
      000FB1 E4               [12] 4329 	clr	a
      000FB2 C4               [12] 4330 	swap	a
      000FB3 03               [12] 4331 	rr	a
      000FB4 54 F8            [12] 4332 	anl	a,#0xf8
      000FB6 CD               [12] 4333 	xch	a,r5
      000FB7 C4               [12] 4334 	swap	a
      000FB8 03               [12] 4335 	rr	a
      000FB9 CD               [12] 4336 	xch	a,r5
      000FBA 6D               [12] 4337 	xrl	a,r5
      000FBB CD               [12] 4338 	xch	a,r5
      000FBC 54 F8            [12] 4339 	anl	a,#0xf8
      000FBE CD               [12] 4340 	xch	a,r5
      000FBF 6D               [12] 4341 	xrl	a,r5
      000FC0 FE               [12] 4342 	mov	r6,a
      000FC1 ED               [12] 4343 	mov	a,r5
      000FC2 25*0A            [12] 4344 	add	a,_cursor_y
      000FC4 F5*0A            [12] 4345 	mov	_cursor_y,a
      000FC6 EE               [12] 4346 	mov	a,r6
      000FC7 35*0B            [12] 4347 	addc	a,(_cursor_y + 1)
      000FC9 F5*0B            [12] 4348 	mov	(_cursor_y + 1),a
                                   4349 ;	.\ecen4350_lcd_v4.c:749: cursor_x = 0;
      000FCB E4               [12] 4350 	clr	a
      000FCC F5*08            [12] 4351 	mov	_cursor_x,a
      000FCE F5*09            [12] 4352 	mov	(_cursor_x + 1),a
      000FD0 22               [24] 4353 	ret
      000FD1                       4354 00105$:
                                   4355 ;	.\ecen4350_lcd_v4.c:751: else if (c == '\r')
      000FD1 BF 0D 01         [24] 4356 	cjne	r7,#0x0d,00119$
      000FD4 22               [24] 4357 	ret
      000FD5                       4358 00119$:
                                   4359 ;	.\ecen4350_lcd_v4.c:757: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000FD5 85*0A*40         [24] 4360 	mov	_drawChar_PARM_2,_cursor_y
      000FD8 85*0B*41         [24] 4361 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000FDB 8F*42            [24] 4362 	mov	_drawChar_PARM_3,r7
      000FDD 85*0E*43         [24] 4363 	mov	_drawChar_PARM_4,_textcolor
      000FE0 85*0F*44         [24] 4364 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000FE3 85*10*45         [24] 4365 	mov	_drawChar_PARM_5,_textbgcolor
      000FE6 85*11*46         [24] 4366 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000FE9 85*0C*47         [24] 4367 	mov	_drawChar_PARM_6,_textsize
      000FEC 85*08 82         [24] 4368 	mov	dpl,_cursor_x
      000FEF 85*09 83         [24] 4369 	mov	dph,(_cursor_x + 1)
      000FF2 12r0Dr99         [24] 4370 	lcall	_drawChar
                                   4371 ;	.\ecen4350_lcd_v4.c:758: cursor_x += textsize * 6;
      000FF5 85*0C*00         [24] 4372 	mov	__mulint_PARM_2,_textsize
      000FF8 75*01 00         [24] 4373 	mov	(__mulint_PARM_2 + 1),#0x00
      000FFB 90 00 06         [24] 4374 	mov	dptr,#0x0006
      000FFE 12r00r00         [24] 4375 	lcall	__mulint
      001001 AE 82            [24] 4376 	mov	r6,dpl
      001003 AF 83            [24] 4377 	mov	r7,dph
      001005 EE               [12] 4378 	mov	a,r6
      001006 25*08            [12] 4379 	add	a,_cursor_x
      001008 F5*08            [12] 4380 	mov	_cursor_x,a
      00100A EF               [12] 4381 	mov	a,r7
      00100B 35*09            [12] 4382 	addc	a,(_cursor_x + 1)
      00100D F5*09            [12] 4383 	mov	(_cursor_x + 1),a
                                   4384 ;	.\ecen4350_lcd_v4.c:760: }
      00100F 22               [24] 4385 	ret
                                   4386 ;------------------------------------------------------------
                                   4387 ;Allocation info for local variables in function 'LCD_string_write'
                                   4388 ;------------------------------------------------------------
                                   4389 ;str                       Allocated to registers r5 r6 r7 
                                   4390 ;i                         Allocated to registers r3 r4 
                                   4391 ;------------------------------------------------------------
                                   4392 ;	.\ecen4350_lcd_v4.c:761: void LCD_string_write(char *str)
                                   4393 ;	-----------------------------------------
                                   4394 ;	 function LCD_string_write
                                   4395 ;	-----------------------------------------
      001010                       4396 _LCD_string_write:
      001010 AD 82            [24] 4397 	mov	r5,dpl
      001012 AE 83            [24] 4398 	mov	r6,dph
      001014 AF F0            [24] 4399 	mov	r7,b
                                   4400 ;	.\ecen4350_lcd_v4.c:764: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      001016 7B 00            [12] 4401 	mov	r3,#0x00
      001018 7C 00            [12] 4402 	mov	r4,#0x00
      00101A                       4403 00103$:
      00101A EB               [12] 4404 	mov	a,r3
      00101B 2D               [12] 4405 	add	a,r5
      00101C F8               [12] 4406 	mov	r0,a
      00101D EC               [12] 4407 	mov	a,r4
      00101E 3E               [12] 4408 	addc	a,r6
      00101F F9               [12] 4409 	mov	r1,a
      001020 8F 02            [24] 4410 	mov	ar2,r7
      001022 88 82            [24] 4411 	mov	dpl,r0
      001024 89 83            [24] 4412 	mov	dph,r1
      001026 8A F0            [24] 4413 	mov	b,r2
      001028 12r00r00         [24] 4414 	lcall	__gptrget
      00102B FA               [12] 4415 	mov	r2,a
      00102C 60 20            [24] 4416 	jz	00105$
                                   4417 ;	.\ecen4350_lcd_v4.c:766: write(str[i]); /* Call transmit data function */
      00102E 8A 82            [24] 4418 	mov	dpl,r2
      001030 C0 07            [24] 4419 	push	ar7
      001032 C0 06            [24] 4420 	push	ar6
      001034 C0 05            [24] 4421 	push	ar5
      001036 C0 04            [24] 4422 	push	ar4
      001038 C0 03            [24] 4423 	push	ar3
      00103A 12r0FrAA         [24] 4424 	lcall	_write
      00103D D0 03            [24] 4425 	pop	ar3
      00103F D0 04            [24] 4426 	pop	ar4
      001041 D0 05            [24] 4427 	pop	ar5
      001043 D0 06            [24] 4428 	pop	ar6
      001045 D0 07            [24] 4429 	pop	ar7
                                   4430 ;	.\ecen4350_lcd_v4.c:764: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      001047 0B               [12] 4431 	inc	r3
      001048 BB 00 CF         [24] 4432 	cjne	r3,#0x00,00103$
      00104B 0C               [12] 4433 	inc	r4
      00104C 80 CC            [24] 4434 	sjmp	00103$
      00104E                       4435 00105$:
                                   4436 ;	.\ecen4350_lcd_v4.c:768: }
      00104E 22               [24] 4437 	ret
                                   4438 ;------------------------------------------------------------
                                   4439 ;Allocation info for local variables in function 'writeNewLine'
                                   4440 ;------------------------------------------------------------
                                   4441 ;	.\ecen4350_lcd_v4.c:770: void writeNewLine(void)
                                   4442 ;	-----------------------------------------
                                   4443 ;	 function writeNewLine
                                   4444 ;	-----------------------------------------
      00104F                       4445 _writeNewLine:
                                   4446 ;	.\ecen4350_lcd_v4.c:772: write('\n');
      00104F 75 82 0A         [24] 4447 	mov	dpl,#0x0a
                                   4448 ;	.\ecen4350_lcd_v4.c:773: }
      001052 02r0FrAA         [24] 4449 	ljmp	_write
                                   4450 ;------------------------------------------------------------
                                   4451 ;Allocation info for local variables in function 'freeType'
                                   4452 ;------------------------------------------------------------
                                   4453 ;count                     Allocated to registers r7 
                                   4454 ;d                         Allocated to registers 
                                   4455 ;row                       Allocated to registers r6 
                                   4456 ;------------------------------------------------------------
                                   4457 ;	.\ecen4350_lcd_v4.c:775: void freeType()
                                   4458 ;	-----------------------------------------
                                   4459 ;	 function freeType
                                   4460 ;	-----------------------------------------
      001055                       4461 _freeType:
                                   4462 ;	.\ecen4350_lcd_v4.c:777: unsigned char count = 0;
      001055 7F 00            [12] 4463 	mov	r7,#0x00
                                   4464 ;	.\ecen4350_lcd_v4.c:779: u8 row = 1;
      001057 7E 01            [12] 4465 	mov	r6,#0x01
                                   4466 ;	.\ecen4350_lcd_v4.c:781: clearLCD();
      001059 C0 07            [24] 4467 	push	ar7
      00105B C0 06            [24] 4468 	push	ar6
      00105D 12r0Dr93         [24] 4469 	lcall	_clearLCD
                                   4470 ;	.\ecen4350_lcd_v4.c:782: setCursor(0,0);
      001060 E4               [12] 4471 	clr	a
      001061 F5*00            [12] 4472 	mov	_setCursor_PARM_2,a
      001063 F5*01            [12] 4473 	mov	(_setCursor_PARM_2 + 1),a
      001065 90 00 00         [24] 4474 	mov	dptr,#0x0000
      001068 12r04rF6         [24] 4475 	lcall	_setCursor
                                   4476 ;	.\ecen4350_lcd_v4.c:783: setTextColor(colorSelect, colorBackground);
      00106B E4               [12] 4477 	clr	a
      00106C F5*00            [12] 4478 	mov	_setTextColor_PARM_2,a
      00106E F5*01            [12] 4479 	mov	(_setTextColor_PARM_2 + 1),a
      001070 90 F8 1F         [24] 4480 	mov	dptr,#0xf81f
      001073 12r05r03         [24] 4481 	lcall	_setTextColor
                                   4482 ;	.\ecen4350_lcd_v4.c:784: LCD_string_write("Free Type: \n");
      001076 90r05r1C         [24] 4483 	mov	dptr,#___str_1
      001079 75 F0 80         [24] 4484 	mov	b,#0x80
      00107C 12r10r10         [24] 4485 	lcall	_LCD_string_write
                                   4486 ;	.\ecen4350_lcd_v4.c:785: setTextColor(colorText, colorBackground);
      00107F E4               [12] 4487 	clr	a
      001080 F5*00            [12] 4488 	mov	_setTextColor_PARM_2,a
      001082 F5*01            [12] 4489 	mov	(_setTextColor_PARM_2 + 1),a
      001084 90 07 FF         [24] 4490 	mov	dptr,#0x07ff
      001087 12r05r03         [24] 4491 	lcall	_setTextColor
                                   4492 ;	.\ecen4350_lcd_v4.c:786: LCD_string_write("0x");
      00108A 90r05r29         [24] 4493 	mov	dptr,#___str_2
      00108D 75 F0 80         [24] 4494 	mov	b,#0x80
      001090 12r10r10         [24] 4495 	lcall	_LCD_string_write
      001093 D0 06            [24] 4496 	pop	ar6
      001095 D0 07            [24] 4497 	pop	ar7
                                   4498 ;	.\ecen4350_lcd_v4.c:787: while (1)
      001097                       4499 00108$:
                                   4500 ;	.\ecen4350_lcd_v4.c:790: if (count == 8)
      001097 BF 08 02         [24] 4501 	cjne	r7,#0x08,00124$
      00109A 80 03            [24] 4502 	sjmp	00125$
      00109C                       4503 00124$:
      00109C 02r11r1C         [24] 4504 	ljmp	00105$
      00109F                       4505 00125$:
                                   4506 ;	.\ecen4350_lcd_v4.c:793: count = 0;
      00109F 7F 00            [12] 4507 	mov	r7,#0x00
                                   4508 ;	.\ecen4350_lcd_v4.c:794: write(d);
      0010A1 75 82 0A         [24] 4509 	mov	dpl,#0x0a
      0010A4 C0 07            [24] 4510 	push	ar7
      0010A6 C0 06            [24] 4511 	push	ar6
      0010A8 12r0FrAA         [24] 4512 	lcall	_write
      0010AB D0 06            [24] 4513 	pop	ar6
      0010AD D0 07            [24] 4514 	pop	ar7
                                   4515 ;	.\ecen4350_lcd_v4.c:795: if (row == 4)
      0010AF BE 04 55         [24] 4516 	cjne	r6,#0x04,00102$
                                   4517 ;	.\ecen4350_lcd_v4.c:797: delay(5);
      0010B2 90 00 05         [24] 4518 	mov	dptr,#0x0005
      0010B5 C0 07            [24] 4519 	push	ar7
      0010B7 12r00rE0         [24] 4520 	lcall	_delay
                                   4521 ;	.\ecen4350_lcd_v4.c:798: clearLCD();
      0010BA 12r0Dr93         [24] 4522 	lcall	_clearLCD
                                   4523 ;	.\ecen4350_lcd_v4.c:799: setTextColor(colorSelect, colorBackground);
      0010BD E4               [12] 4524 	clr	a
      0010BE F5*00            [12] 4525 	mov	_setTextColor_PARM_2,a
      0010C0 F5*01            [12] 4526 	mov	(_setTextColor_PARM_2 + 1),a
      0010C2 90 F8 1F         [24] 4527 	mov	dptr,#0xf81f
      0010C5 12r05r03         [24] 4528 	lcall	_setTextColor
                                   4529 ;	.\ecen4350_lcd_v4.c:800: rtcPrint();
      0010C8 12r03rE6         [24] 4530 	lcall	_rtcPrint
                                   4531 ;	.\ecen4350_lcd_v4.c:801: clearLCD();
      0010CB 12r0Dr93         [24] 4532 	lcall	_clearLCD
                                   4533 ;	.\ecen4350_lcd_v4.c:802: setCursor(0,0);
      0010CE E4               [12] 4534 	clr	a
      0010CF F5*00            [12] 4535 	mov	_setCursor_PARM_2,a
      0010D1 F5*01            [12] 4536 	mov	(_setCursor_PARM_2 + 1),a
      0010D3 90 00 00         [24] 4537 	mov	dptr,#0x0000
      0010D6 12r04rF6         [24] 4538 	lcall	_setCursor
                                   4539 ;	.\ecen4350_lcd_v4.c:803: setTextColor(colorSelect, colorBackground);
      0010D9 E4               [12] 4540 	clr	a
      0010DA F5*00            [12] 4541 	mov	_setTextColor_PARM_2,a
      0010DC F5*01            [12] 4542 	mov	(_setTextColor_PARM_2 + 1),a
      0010DE 90 F8 1F         [24] 4543 	mov	dptr,#0xf81f
      0010E1 12r05r03         [24] 4544 	lcall	_setTextColor
                                   4545 ;	.\ecen4350_lcd_v4.c:804: LCD_string_write("Free Type: \n");
      0010E4 90r05r1C         [24] 4546 	mov	dptr,#___str_1
      0010E7 75 F0 80         [24] 4547 	mov	b,#0x80
      0010EA 12r10r10         [24] 4548 	lcall	_LCD_string_write
                                   4549 ;	.\ecen4350_lcd_v4.c:805: setTextColor(colorText, colorBackground);
      0010ED E4               [12] 4550 	clr	a
      0010EE F5*00            [12] 4551 	mov	_setTextColor_PARM_2,a
      0010F0 F5*01            [12] 4552 	mov	(_setTextColor_PARM_2 + 1),a
      0010F2 90 07 FF         [24] 4553 	mov	dptr,#0x07ff
      0010F5 12r05r03         [24] 4554 	lcall	_setTextColor
                                   4555 ;	.\ecen4350_lcd_v4.c:806: LCD_string_write("0x");
      0010F8 90r05r29         [24] 4556 	mov	dptr,#___str_2
      0010FB 75 F0 80         [24] 4557 	mov	b,#0x80
      0010FE 12r10r10         [24] 4558 	lcall	_LCD_string_write
      001101 D0 07            [24] 4559 	pop	ar7
                                   4560 ;	.\ecen4350_lcd_v4.c:808: row = 1;
      001103 7E 01            [12] 4561 	mov	r6,#0x01
      001105 80 90            [24] 4562 	sjmp	00108$
      001107                       4563 00102$:
                                   4564 ;	.\ecen4350_lcd_v4.c:811: LCD_string_write("0x");
      001107 90r05r29         [24] 4565 	mov	dptr,#___str_2
      00110A 75 F0 80         [24] 4566 	mov	b,#0x80
      00110D C0 07            [24] 4567 	push	ar7
      00110F C0 06            [24] 4568 	push	ar6
      001111 12r10r10         [24] 4569 	lcall	_LCD_string_write
      001114 D0 06            [24] 4570 	pop	ar6
      001116 D0 07            [24] 4571 	pop	ar7
                                   4572 ;	.\ecen4350_lcd_v4.c:812: row++;
      001118 0E               [12] 4573 	inc	r6
      001119 02r10r97         [24] 4574 	ljmp	00108$
      00111C                       4575 00105$:
                                   4576 ;	.\ecen4350_lcd_v4.c:817: d = keyDetect();
      00111C C0 07            [24] 4577 	push	ar7
      00111E C0 06            [24] 4578 	push	ar6
      001120 12r11r2E         [24] 4579 	lcall	_keyDetect
                                   4580 ;	.\ecen4350_lcd_v4.c:818: write(d);
      001123 12r0FrAA         [24] 4581 	lcall	_write
      001126 D0 06            [24] 4582 	pop	ar6
      001128 D0 07            [24] 4583 	pop	ar7
                                   4584 ;	.\ecen4350_lcd_v4.c:819: count++;
      00112A 0F               [12] 4585 	inc	r7
                                   4586 ;	.\ecen4350_lcd_v4.c:824: }
      00112B 02r10r97         [24] 4587 	ljmp	00108$
                                   4588 ;------------------------------------------------------------
                                   4589 ;Allocation info for local variables in function 'keyDetect'
                                   4590 ;------------------------------------------------------------
                                   4591 ;portdata                  Allocated to registers r7 
                                   4592 ;------------------------------------------------------------
                                   4593 ;	.\ecen4350_lcd_v4.c:827: unsigned char keyDetect()
                                   4594 ;	-----------------------------------------
                                   4595 ;	 function keyDetect
                                   4596 ;	-----------------------------------------
      00112E                       4597 _keyDetect:
                                   4598 ;	.\ecen4350_lcd_v4.c:830: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      00112E 75 90 F0         [24] 4599 	mov	_P1,#0xf0
                                   4600 ;	.\ecen4350_lcd_v4.c:831: do 
      001131                       4601 00101$:
                                   4602 ;	.\ecen4350_lcd_v4.c:833: portdata = (__KEYPAD_PORT__ & 0xF0);
      001131 E5 90            [12] 4603 	mov	a,_P1
      001133 54 F0            [12] 4604 	anl	a,#0xf0
      001135 FF               [12] 4605 	mov	r7,a
                                   4606 ;	.\ecen4350_lcd_v4.c:834: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      001136 BF F0 F8         [24] 4607 	cjne	r7,#0xf0,00101$
                                   4608 ;	.\ecen4350_lcd_v4.c:838: do
      001139                       4609 00105$:
                                   4610 ;	.\ecen4350_lcd_v4.c:841: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      001139 85 90*00         [24] 4611 	mov	_colloc,_P1
                                   4612 ;	.\ecen4350_lcd_v4.c:842: colloc &= 0xF0;		  									/* mask port for column read only */
      00113C 53*00 F0         [24] 4613 	anl	_colloc,#0xf0
                                   4614 ;	.\ecen4350_lcd_v4.c:843: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      00113F 74 F0            [12] 4615 	mov	a,#0xf0
      001141 B5*00 04         [24] 4616 	cjne	a,_colloc,00107$
      001144 E5*07            [12] 4617 	mov	a,_received_flag
      001146 60 F1            [24] 4618 	jz	00105$
      001148                       4619 00107$:
                                   4620 ;	.\ecen4350_lcd_v4.c:844: delay(10);													/* 15ms key debounce time */
      001148 90 00 0A         [24] 4621 	mov	dptr,#0x000a
      00114B 12r00rE0         [24] 4622 	lcall	_delay
                                   4623 ;	.\ecen4350_lcd_v4.c:845: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      00114E E5 90            [12] 4624 	mov	a,_P1
      001150 54 F0            [12] 4625 	anl	a,#0xf0
                                   4626 ;	.\ecen4350_lcd_v4.c:846: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      001152 FF               [12] 4627 	mov	r7,a
      001153 B5*00 02         [24] 4628 	cjne	a,_colloc,00214$
      001156 80 04            [24] 4629 	sjmp	00123$
      001158                       4630 00214$:
      001158 E5*07            [12] 4631 	mov	a,_received_flag
      00115A 60 DD            [24] 4632 	jz	00105$
                                   4633 ;	.\ecen4350_lcd_v4.c:848: while (1)
      00115C                       4634 00123$:
                                   4635 ;	.\ecen4350_lcd_v4.c:850: if (received_flag == 1)											/* check for key input via serial interrupt */
      00115C 74 01            [12] 4636 	mov	a,#0x01
      00115E B5*07 09         [24] 4637 	cjne	a,_received_flag,00113$
                                   4638 ;	.\ecen4350_lcd_v4.c:852: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      001161 E5*06            [12] 4639 	mov	a,_received_byte
      001163 FF               [12] 4640 	mov	r7,a
      001164 24 C0            [12] 4641 	add	a,#0xc0
      001166 F5*06            [12] 4642 	mov	_received_byte,a
                                   4643 ;	.\ecen4350_lcd_v4.c:853: break;														/* break outside while() */
      001168 80 52            [24] 4644 	sjmp	00124$
      00116A                       4645 00113$:
                                   4646 ;	.\ecen4350_lcd_v4.c:856: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      00116A 75 90 FE         [24] 4647 	mov	_P1,#0xfe
                                   4648 ;	.\ecen4350_lcd_v4.c:857: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      00116D E5 90            [12] 4649 	mov	a,_P1
      00116F 54 F0            [12] 4650 	anl	a,#0xf0
      001171 F5*00            [12] 4651 	mov	_colloc,a
                                   4652 ;	.\ecen4350_lcd_v4.c:858: if (colloc != 0xF0)
      001173 74 F0            [12] 4653 	mov	a,#0xf0
      001175 B5*00 02         [24] 4654 	cjne	a,_colloc,00218$
      001178 80 05            [24] 4655 	sjmp	00115$
      00117A                       4656 00218$:
                                   4657 ;	.\ecen4350_lcd_v4.c:860: rowloc = 0;
      00117A 75*01 00         [24] 4658 	mov	_rowloc,#0x00
                                   4659 ;	.\ecen4350_lcd_v4.c:861: break;
      00117D 80 3D            [24] 4660 	sjmp	00124$
      00117F                       4661 00115$:
                                   4662 ;	.\ecen4350_lcd_v4.c:864: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      00117F 75 90 FD         [24] 4663 	mov	_P1,#0xfd
                                   4664 ;	.\ecen4350_lcd_v4.c:865: colloc = (__KEYPAD_PORT__ & 0xF0);
      001182 E5 90            [12] 4665 	mov	a,_P1
      001184 54 F0            [12] 4666 	anl	a,#0xf0
      001186 F5*00            [12] 4667 	mov	_colloc,a
                                   4668 ;	.\ecen4350_lcd_v4.c:866: if (colloc != 0xF0)
      001188 74 F0            [12] 4669 	mov	a,#0xf0
      00118A B5*00 02         [24] 4670 	cjne	a,_colloc,00219$
      00118D 80 05            [24] 4671 	sjmp	00117$
      00118F                       4672 00219$:
                                   4673 ;	.\ecen4350_lcd_v4.c:868: rowloc = 1;
      00118F 75*01 01         [24] 4674 	mov	_rowloc,#0x01
                                   4675 ;	.\ecen4350_lcd_v4.c:869: break;
      001192 80 28            [24] 4676 	sjmp	00124$
      001194                       4677 00117$:
                                   4678 ;	.\ecen4350_lcd_v4.c:872: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      001194 75 90 FB         [24] 4679 	mov	_P1,#0xfb
                                   4680 ;	.\ecen4350_lcd_v4.c:873: colloc = (__KEYPAD_PORT__ & 0xF0);
      001197 E5 90            [12] 4681 	mov	a,_P1
      001199 54 F0            [12] 4682 	anl	a,#0xf0
      00119B F5*00            [12] 4683 	mov	_colloc,a
                                   4684 ;	.\ecen4350_lcd_v4.c:874: if (colloc != 0xF0)
      00119D 74 F0            [12] 4685 	mov	a,#0xf0
      00119F B5*00 02         [24] 4686 	cjne	a,_colloc,00220$
      0011A2 80 05            [24] 4687 	sjmp	00119$
      0011A4                       4688 00220$:
                                   4689 ;	.\ecen4350_lcd_v4.c:876: rowloc = 2;
      0011A4 75*01 02         [24] 4690 	mov	_rowloc,#0x02
                                   4691 ;	.\ecen4350_lcd_v4.c:877: break;
      0011A7 80 13            [24] 4692 	sjmp	00124$
      0011A9                       4693 00119$:
                                   4694 ;	.\ecen4350_lcd_v4.c:880: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      0011A9 75 90 F7         [24] 4695 	mov	_P1,#0xf7
                                   4696 ;	.\ecen4350_lcd_v4.c:881: colloc = (__KEYPAD_PORT__ & 0xF0);
      0011AC E5 90            [12] 4697 	mov	a,_P1
      0011AE 54 F0            [12] 4698 	anl	a,#0xf0
      0011B0 F5*00            [12] 4699 	mov	_colloc,a
                                   4700 ;	.\ecen4350_lcd_v4.c:882: if (colloc != 0xF0)
      0011B2 74 F0            [12] 4701 	mov	a,#0xf0
      0011B4 B5*00 02         [24] 4702 	cjne	a,_colloc,00221$
      0011B7 80 A3            [24] 4703 	sjmp	00123$
      0011B9                       4704 00221$:
                                   4705 ;	.\ecen4350_lcd_v4.c:884: rowloc = 3;
      0011B9 75*01 03         [24] 4706 	mov	_rowloc,#0x03
                                   4707 ;	.\ecen4350_lcd_v4.c:885: break;
      0011BC                       4708 00124$:
                                   4709 ;	.\ecen4350_lcd_v4.c:889: if (received_flag == 1)
      0011BC 74 01            [12] 4710 	mov	a,#0x01
      0011BE B5*07 07         [24] 4711 	cjne	a,_received_flag,00135$
                                   4712 ;	.\ecen4350_lcd_v4.c:891: received_flag = 0;
      0011C1 75*07 00         [24] 4713 	mov	_received_flag,#0x00
                                   4714 ;	.\ecen4350_lcd_v4.c:892: return received_byte;
      0011C4 85*06 82         [24] 4715 	mov	dpl,_received_byte
      0011C7 22               [24] 4716 	ret
      0011C8                       4717 00135$:
                                   4718 ;	.\ecen4350_lcd_v4.c:894: else if (colloc == 0xE0)
      0011C8 74 E0            [12] 4719 	mov	a,#0xe0
      0011CA B5*00 15         [24] 4720 	cjne	a,_colloc,00132$
                                   4721 ;	.\ecen4350_lcd_v4.c:896: return (keypad[rowloc][0]);
      0011CD E5*01            [12] 4722 	mov	a,_rowloc
      0011CF 75 F0 04         [24] 4723 	mov	b,#0x04
      0011D2 A4               [48] 4724 	mul	ab
      0011D3 24rFB            [12] 4725 	add	a,#_keypad
      0011D5 F5 82            [12] 4726 	mov	dpl,a
      0011D7 74s04            [12] 4727 	mov	a,#(_keypad >> 8)
      0011D9 35 F0            [12] 4728 	addc	a,b
      0011DB F5 83            [12] 4729 	mov	dph,a
      0011DD E4               [12] 4730 	clr	a
      0011DE 93               [24] 4731 	movc	a,@a+dptr
      0011DF F5 82            [12] 4732 	mov	dpl,a
      0011E1 22               [24] 4733 	ret
      0011E2                       4734 00132$:
                                   4735 ;	.\ecen4350_lcd_v4.c:898: else if (colloc == 0xD0)
      0011E2 74 D0            [12] 4736 	mov	a,#0xd0
      0011E4 B5*00 18         [24] 4737 	cjne	a,_colloc,00129$
                                   4738 ;	.\ecen4350_lcd_v4.c:900: return (keypad[rowloc][1]);
      0011E7 E5*01            [12] 4739 	mov	a,_rowloc
      0011E9 75 F0 04         [24] 4740 	mov	b,#0x04
      0011EC A4               [48] 4741 	mul	ab
      0011ED 24rFB            [12] 4742 	add	a,#_keypad
      0011EF FE               [12] 4743 	mov	r6,a
      0011F0 74s04            [12] 4744 	mov	a,#(_keypad >> 8)
      0011F2 35 F0            [12] 4745 	addc	a,b
      0011F4 FF               [12] 4746 	mov	r7,a
      0011F5 8E 82            [24] 4747 	mov	dpl,r6
      0011F7 8F 83            [24] 4748 	mov	dph,r7
      0011F9 A3               [24] 4749 	inc	dptr
      0011FA E4               [12] 4750 	clr	a
      0011FB 93               [24] 4751 	movc	a,@a+dptr
      0011FC F5 82            [12] 4752 	mov	dpl,a
      0011FE 22               [24] 4753 	ret
      0011FF                       4754 00129$:
                                   4755 ;	.\ecen4350_lcd_v4.c:902: else if (colloc == 0xB0)
      0011FF 74 B0            [12] 4756 	mov	a,#0xb0
      001201 B5*00 19         [24] 4757 	cjne	a,_colloc,00126$
                                   4758 ;	.\ecen4350_lcd_v4.c:904: return (keypad[rowloc][2]);
      001204 E5*01            [12] 4759 	mov	a,_rowloc
      001206 75 F0 04         [24] 4760 	mov	b,#0x04
      001209 A4               [48] 4761 	mul	ab
      00120A 24rFB            [12] 4762 	add	a,#_keypad
      00120C FE               [12] 4763 	mov	r6,a
      00120D 74s04            [12] 4764 	mov	a,#(_keypad >> 8)
      00120F 35 F0            [12] 4765 	addc	a,b
      001211 FF               [12] 4766 	mov	r7,a
      001212 8E 82            [24] 4767 	mov	dpl,r6
      001214 8F 83            [24] 4768 	mov	dph,r7
      001216 A3               [24] 4769 	inc	dptr
      001217 A3               [24] 4770 	inc	dptr
      001218 E4               [12] 4771 	clr	a
      001219 93               [24] 4772 	movc	a,@a+dptr
      00121A F5 82            [12] 4773 	mov	dpl,a
      00121C 22               [24] 4774 	ret
      00121D                       4775 00126$:
                                   4776 ;	.\ecen4350_lcd_v4.c:908: return (keypad[rowloc][3]);
      00121D E5*01            [12] 4777 	mov	a,_rowloc
      00121F 75 F0 04         [24] 4778 	mov	b,#0x04
      001222 A4               [48] 4779 	mul	ab
      001223 24rFB            [12] 4780 	add	a,#_keypad
      001225 FE               [12] 4781 	mov	r6,a
      001226 74s04            [12] 4782 	mov	a,#(_keypad >> 8)
      001228 35 F0            [12] 4783 	addc	a,b
      00122A FF               [12] 4784 	mov	r7,a
      00122B 8E 82            [24] 4785 	mov	dpl,r6
      00122D 8F 83            [24] 4786 	mov	dph,r7
      00122F A3               [24] 4787 	inc	dptr
      001230 A3               [24] 4788 	inc	dptr
      001231 A3               [24] 4789 	inc	dptr
      001232 E4               [12] 4790 	clr	a
      001233 93               [24] 4791 	movc	a,@a+dptr
                                   4792 ;	.\ecen4350_lcd_v4.c:910: }
      001234 F5 82            [12] 4793 	mov	dpl,a
      001236 22               [24] 4794 	ret
                                   4795 ;------------------------------------------------------------
                                   4796 ;Allocation info for local variables in function 'reverse'
                                   4797 ;------------------------------------------------------------
                                   4798 ;d                         Allocated to registers r7 
                                   4799 ;rev                       Allocated to registers r5 r6 
                                   4800 ;val                       Allocated to registers r1 r2 
                                   4801 ;------------------------------------------------------------
                                   4802 ;	.\ecen4350_lcd_v4.c:912: unsigned int reverse(unsigned char d)
                                   4803 ;	-----------------------------------------
                                   4804 ;	 function reverse
                                   4805 ;	-----------------------------------------
      001237                       4806 _reverse:
      001237 AF 82            [24] 4807 	mov	r7,dpl
                                   4808 ;	.\ecen4350_lcd_v4.c:914: unsigned int rev = 0;
      001239 7D 00            [12] 4809 	mov	r5,#0x00
      00123B 7E 00            [12] 4810 	mov	r6,#0x00
                                   4811 ;	.\ecen4350_lcd_v4.c:916: while (d >= 1)
      00123D                       4812 00101$:
      00123D BF 01 00         [24] 4813 	cjne	r7,#0x01,00114$
      001240                       4814 00114$:
      001240 40 60            [24] 4815 	jc	00103$
                                   4816 ;	.\ecen4350_lcd_v4.c:919: val = d % 10;
      001242 8F 03            [24] 4817 	mov	ar3,r7
      001244 7C 00            [12] 4818 	mov	r4,#0x00
      001246 75*00 0A         [24] 4819 	mov	__modsint_PARM_2,#0x0a
                                   4820 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001249 8C*01            [24] 4821 	mov	(__modsint_PARM_2 + 1),r4
      00124B 8B 82            [24] 4822 	mov	dpl,r3
      00124D 8C 83            [24] 4823 	mov	dph,r4
      00124F C0 06            [24] 4824 	push	ar6
      001251 C0 05            [24] 4825 	push	ar5
      001253 C0 04            [24] 4826 	push	ar4
      001255 C0 03            [24] 4827 	push	ar3
      001257 12r00r00         [24] 4828 	lcall	__modsint
      00125A A9 82            [24] 4829 	mov	r1,dpl
      00125C AA 83            [24] 4830 	mov	r2,dph
      00125E D0 03            [24] 4831 	pop	ar3
      001260 D0 04            [24] 4832 	pop	ar4
                                   4833 ;	.\ecen4350_lcd_v4.c:920: d = d / 10;
      001262 75*00 0A         [24] 4834 	mov	__divsint_PARM_2,#0x0a
      001265 75*01 00         [24] 4835 	mov	(__divsint_PARM_2 + 1),#0x00
      001268 8B 82            [24] 4836 	mov	dpl,r3
      00126A 8C 83            [24] 4837 	mov	dph,r4
      00126C C0 02            [24] 4838 	push	ar2
      00126E C0 01            [24] 4839 	push	ar1
      001270 12r00r00         [24] 4840 	lcall	__divsint
      001273 AB 82            [24] 4841 	mov	r3,dpl
      001275 D0 01            [24] 4842 	pop	ar1
      001277 D0 02            [24] 4843 	pop	ar2
      001279 D0 05            [24] 4844 	pop	ar5
      00127B D0 06            [24] 4845 	pop	ar6
      00127D 8B 07            [24] 4846 	mov	ar7,r3
                                   4847 ;	.\ecen4350_lcd_v4.c:921: rev = rev * 10 + val;
      00127F 8D*00            [24] 4848 	mov	__mulint_PARM_2,r5
      001281 8E*01            [24] 4849 	mov	(__mulint_PARM_2 + 1),r6
      001283 90 00 0A         [24] 4850 	mov	dptr,#0x000a
      001286 C0 07            [24] 4851 	push	ar7
      001288 C0 02            [24] 4852 	push	ar2
      00128A C0 01            [24] 4853 	push	ar1
      00128C 12r00r00         [24] 4854 	lcall	__mulint
      00128F E5 82            [12] 4855 	mov	a,dpl
      001291 85 83 F0         [24] 4856 	mov	b,dph
      001294 D0 01            [24] 4857 	pop	ar1
      001296 D0 02            [24] 4858 	pop	ar2
      001298 D0 07            [24] 4859 	pop	ar7
      00129A 29               [12] 4860 	add	a,r1
      00129B FD               [12] 4861 	mov	r5,a
      00129C EA               [12] 4862 	mov	a,r2
      00129D 35 F0            [12] 4863 	addc	a,b
      00129F FE               [12] 4864 	mov	r6,a
      0012A0 80 9B            [24] 4865 	sjmp	00101$
      0012A2                       4866 00103$:
                                   4867 ;	.\ecen4350_lcd_v4.c:923: return rev;
      0012A2 8D 82            [24] 4868 	mov	dpl,r5
      0012A4 8E 83            [24] 4869 	mov	dph,r6
                                   4870 ;	.\ecen4350_lcd_v4.c:924: }
      0012A6 22               [24] 4871 	ret
                                   4872 ;------------------------------------------------------------
                                   4873 ;Allocation info for local variables in function 'reverse16'
                                   4874 ;------------------------------------------------------------
                                   4875 ;d                         Allocated to registers r6 r7 
                                   4876 ;rev                       Allocated to registers r4 r5 
                                   4877 ;val                       Allocated to registers r2 r3 
                                   4878 ;------------------------------------------------------------
                                   4879 ;	.\ecen4350_lcd_v4.c:926: unsigned int reverse16(unsigned int d)
                                   4880 ;	-----------------------------------------
                                   4881 ;	 function reverse16
                                   4882 ;	-----------------------------------------
      0012A7                       4883 _reverse16:
      0012A7 AE 82            [24] 4884 	mov	r6,dpl
      0012A9 AF 83            [24] 4885 	mov	r7,dph
                                   4886 ;	.\ecen4350_lcd_v4.c:928: unsigned int rev = 0;
      0012AB 7C 00            [12] 4887 	mov	r4,#0x00
      0012AD 7D 00            [12] 4888 	mov	r5,#0x00
                                   4889 ;	.\ecen4350_lcd_v4.c:930: while (d >= 1)
      0012AF                       4890 00101$:
      0012AF C3               [12] 4891 	clr	c
      0012B0 EE               [12] 4892 	mov	a,r6
      0012B1 94 01            [12] 4893 	subb	a,#0x01
      0012B3 EF               [12] 4894 	mov	a,r7
      0012B4 94 00            [12] 4895 	subb	a,#0x00
      0012B6 40 69            [24] 4896 	jc	00103$
                                   4897 ;	.\ecen4350_lcd_v4.c:933: val = d % 10;
      0012B8 75*00 0A         [24] 4898 	mov	__moduint_PARM_2,#0x0a
      0012BB 75*01 00         [24] 4899 	mov	(__moduint_PARM_2 + 1),#0x00
      0012BE 8E 82            [24] 4900 	mov	dpl,r6
      0012C0 8F 83            [24] 4901 	mov	dph,r7
      0012C2 C0 07            [24] 4902 	push	ar7
      0012C4 C0 06            [24] 4903 	push	ar6
      0012C6 C0 05            [24] 4904 	push	ar5
      0012C8 C0 04            [24] 4905 	push	ar4
      0012CA 12r00r00         [24] 4906 	lcall	__moduint
      0012CD AA 82            [24] 4907 	mov	r2,dpl
      0012CF AB 83            [24] 4908 	mov	r3,dph
      0012D1 D0 04            [24] 4909 	pop	ar4
      0012D3 D0 05            [24] 4910 	pop	ar5
      0012D5 D0 06            [24] 4911 	pop	ar6
      0012D7 D0 07            [24] 4912 	pop	ar7
                                   4913 ;	.\ecen4350_lcd_v4.c:934: d = d / 10;
      0012D9 75*00 0A         [24] 4914 	mov	__divuint_PARM_2,#0x0a
      0012DC 75*01 00         [24] 4915 	mov	(__divuint_PARM_2 + 1),#0x00
      0012DF 8E 82            [24] 4916 	mov	dpl,r6
      0012E1 8F 83            [24] 4917 	mov	dph,r7
      0012E3 C0 05            [24] 4918 	push	ar5
      0012E5 C0 04            [24] 4919 	push	ar4
      0012E7 C0 03            [24] 4920 	push	ar3
      0012E9 C0 02            [24] 4921 	push	ar2
      0012EB 12r00r00         [24] 4922 	lcall	__divuint
      0012EE AE 82            [24] 4923 	mov	r6,dpl
      0012F0 AF 83            [24] 4924 	mov	r7,dph
      0012F2 D0 02            [24] 4925 	pop	ar2
      0012F4 D0 03            [24] 4926 	pop	ar3
      0012F6 D0 04            [24] 4927 	pop	ar4
      0012F8 D0 05            [24] 4928 	pop	ar5
                                   4929 ;	.\ecen4350_lcd_v4.c:935: rev = rev * 10 + val;
      0012FA 8C*00            [24] 4930 	mov	__mulint_PARM_2,r4
      0012FC 8D*01            [24] 4931 	mov	(__mulint_PARM_2 + 1),r5
      0012FE 90 00 0A         [24] 4932 	mov	dptr,#0x000a
      001301 C0 07            [24] 4933 	push	ar7
      001303 C0 06            [24] 4934 	push	ar6
      001305 C0 03            [24] 4935 	push	ar3
      001307 C0 02            [24] 4936 	push	ar2
      001309 12r00r00         [24] 4937 	lcall	__mulint
      00130C E5 82            [12] 4938 	mov	a,dpl
      00130E 85 83 F0         [24] 4939 	mov	b,dph
      001311 D0 02            [24] 4940 	pop	ar2
      001313 D0 03            [24] 4941 	pop	ar3
      001315 D0 06            [24] 4942 	pop	ar6
      001317 D0 07            [24] 4943 	pop	ar7
      001319 2A               [12] 4944 	add	a,r2
      00131A FC               [12] 4945 	mov	r4,a
      00131B EB               [12] 4946 	mov	a,r3
      00131C 35 F0            [12] 4947 	addc	a,b
      00131E FD               [12] 4948 	mov	r5,a
      00131F 80 8E            [24] 4949 	sjmp	00101$
      001321                       4950 00103$:
                                   4951 ;	.\ecen4350_lcd_v4.c:937: return rev;
      001321 8C 82            [24] 4952 	mov	dpl,r4
      001323 8D 83            [24] 4953 	mov	dph,r5
                                   4954 ;	.\ecen4350_lcd_v4.c:938: }
      001325 22               [24] 4955 	ret
                                   4956 ;------------------------------------------------------------
                                   4957 ;Allocation info for local variables in function 'hexToASCII'
                                   4958 ;------------------------------------------------------------
                                   4959 ;key                       Allocated to registers r7 
                                   4960 ;------------------------------------------------------------
                                   4961 ;	.\ecen4350_lcd_v4.c:940: unsigned char hexToASCII(unsigned char key) {
                                   4962 ;	-----------------------------------------
                                   4963 ;	 function hexToASCII
                                   4964 ;	-----------------------------------------
      001326                       4965 _hexToASCII:
                                   4966 ;	.\ecen4350_lcd_v4.c:941: if(key == 0x0) return '0';
      001326 E5 82            [12] 4967 	mov	a,dpl
      001328 FF               [12] 4968 	mov	r7,a
      001329 70 04            [24] 4969 	jnz	00102$
      00132B 75 82 30         [24] 4970 	mov	dpl,#0x30
      00132E 22               [24] 4971 	ret
      00132F                       4972 00102$:
                                   4973 ;	.\ecen4350_lcd_v4.c:942: if(key == 0x1) return '1';
      00132F BF 01 04         [24] 4974 	cjne	r7,#0x01,00104$
      001332 75 82 31         [24] 4975 	mov	dpl,#0x31
      001335 22               [24] 4976 	ret
      001336                       4977 00104$:
                                   4978 ;	.\ecen4350_lcd_v4.c:943: if(key == 0x2) return '2';
      001336 BF 02 04         [24] 4979 	cjne	r7,#0x02,00106$
      001339 75 82 32         [24] 4980 	mov	dpl,#0x32
      00133C 22               [24] 4981 	ret
      00133D                       4982 00106$:
                                   4983 ;	.\ecen4350_lcd_v4.c:944: if(key == 0x3) return '3';
      00133D BF 03 04         [24] 4984 	cjne	r7,#0x03,00108$
      001340 75 82 33         [24] 4985 	mov	dpl,#0x33
      001343 22               [24] 4986 	ret
      001344                       4987 00108$:
                                   4988 ;	.\ecen4350_lcd_v4.c:945: if(key == 0x4) return '4';
      001344 BF 04 04         [24] 4989 	cjne	r7,#0x04,00110$
      001347 75 82 34         [24] 4990 	mov	dpl,#0x34
      00134A 22               [24] 4991 	ret
      00134B                       4992 00110$:
                                   4993 ;	.\ecen4350_lcd_v4.c:946: if(key == 0x5) return '5';
      00134B BF 05 04         [24] 4994 	cjne	r7,#0x05,00112$
      00134E 75 82 35         [24] 4995 	mov	dpl,#0x35
      001351 22               [24] 4996 	ret
      001352                       4997 00112$:
                                   4998 ;	.\ecen4350_lcd_v4.c:947: if(key == 0x6) return '6';
      001352 BF 06 04         [24] 4999 	cjne	r7,#0x06,00114$
      001355 75 82 36         [24] 5000 	mov	dpl,#0x36
      001358 22               [24] 5001 	ret
      001359                       5002 00114$:
                                   5003 ;	.\ecen4350_lcd_v4.c:948: if(key == 0x7) return '7';
      001359 BF 07 04         [24] 5004 	cjne	r7,#0x07,00116$
      00135C 75 82 37         [24] 5005 	mov	dpl,#0x37
      00135F 22               [24] 5006 	ret
      001360                       5007 00116$:
                                   5008 ;	.\ecen4350_lcd_v4.c:949: if(key == 0x8) return '8';
      001360 BF 08 04         [24] 5009 	cjne	r7,#0x08,00118$
      001363 75 82 38         [24] 5010 	mov	dpl,#0x38
      001366 22               [24] 5011 	ret
      001367                       5012 00118$:
                                   5013 ;	.\ecen4350_lcd_v4.c:950: if(key == 0x9) return '9';
      001367 BF 09 04         [24] 5014 	cjne	r7,#0x09,00120$
      00136A 75 82 39         [24] 5015 	mov	dpl,#0x39
      00136D 22               [24] 5016 	ret
      00136E                       5017 00120$:
                                   5018 ;	.\ecen4350_lcd_v4.c:951: if(key == 0xA) return 'A';
      00136E BF 0A 04         [24] 5019 	cjne	r7,#0x0a,00122$
      001371 75 82 41         [24] 5020 	mov	dpl,#0x41
      001374 22               [24] 5021 	ret
      001375                       5022 00122$:
                                   5023 ;	.\ecen4350_lcd_v4.c:952: if(key == 0xB) return 'B';
      001375 BF 0B 04         [24] 5024 	cjne	r7,#0x0b,00124$
      001378 75 82 42         [24] 5025 	mov	dpl,#0x42
      00137B 22               [24] 5026 	ret
      00137C                       5027 00124$:
                                   5028 ;	.\ecen4350_lcd_v4.c:953: if(key == 0xC) return 'C';
      00137C BF 0C 04         [24] 5029 	cjne	r7,#0x0c,00126$
      00137F 75 82 43         [24] 5030 	mov	dpl,#0x43
      001382 22               [24] 5031 	ret
      001383                       5032 00126$:
                                   5033 ;	.\ecen4350_lcd_v4.c:954: if(key == 0xD) return 'D';
      001383 BF 0D 04         [24] 5034 	cjne	r7,#0x0d,00128$
      001386 75 82 44         [24] 5035 	mov	dpl,#0x44
      001389 22               [24] 5036 	ret
      00138A                       5037 00128$:
                                   5038 ;	.\ecen4350_lcd_v4.c:955: if(key == 0xE) return 'E';
      00138A BF 0E 04         [24] 5039 	cjne	r7,#0x0e,00130$
      00138D 75 82 45         [24] 5040 	mov	dpl,#0x45
      001390 22               [24] 5041 	ret
      001391                       5042 00130$:
                                   5043 ;	.\ecen4350_lcd_v4.c:956: if(key == 0xF) return 'F';
      001391 BF 0F 04         [24] 5044 	cjne	r7,#0x0f,00132$
      001394 75 82 46         [24] 5045 	mov	dpl,#0x46
      001397 22               [24] 5046 	ret
      001398                       5047 00132$:
                                   5048 ;	.\ecen4350_lcd_v4.c:958: return 0xff;
      001398 75 82 FF         [24] 5049 	mov	dpl,#0xff
                                   5050 ;	.\ecen4350_lcd_v4.c:959: }
      00139B 22               [24] 5051 	ret
                                   5052 ;------------------------------------------------------------
                                   5053 ;Allocation info for local variables in function 'ASCIItoHex'
                                   5054 ;------------------------------------------------------------
                                   5055 ;key                       Allocated to registers r7 
                                   5056 ;------------------------------------------------------------
                                   5057 ;	.\ecen4350_lcd_v4.c:961: unsigned char ASCIItoHex(unsigned char key) {
                                   5058 ;	-----------------------------------------
                                   5059 ;	 function ASCIItoHex
                                   5060 ;	-----------------------------------------
      00139C                       5061 _ASCIItoHex:
      00139C AF 82            [24] 5062 	mov	r7,dpl
                                   5063 ;	.\ecen4350_lcd_v4.c:962: if(key == '0') return 0x0;
      00139E BF 30 04         [24] 5064 	cjne	r7,#0x30,00102$
      0013A1 75 82 00         [24] 5065 	mov	dpl,#0x00
      0013A4 22               [24] 5066 	ret
      0013A5                       5067 00102$:
                                   5068 ;	.\ecen4350_lcd_v4.c:963: if(key == '1') return 0x1;
      0013A5 BF 31 04         [24] 5069 	cjne	r7,#0x31,00104$
      0013A8 75 82 01         [24] 5070 	mov	dpl,#0x01
      0013AB 22               [24] 5071 	ret
      0013AC                       5072 00104$:
                                   5073 ;	.\ecen4350_lcd_v4.c:964: if(key == '2') return 0x2;
      0013AC BF 32 04         [24] 5074 	cjne	r7,#0x32,00106$
      0013AF 75 82 02         [24] 5075 	mov	dpl,#0x02
      0013B2 22               [24] 5076 	ret
      0013B3                       5077 00106$:
                                   5078 ;	.\ecen4350_lcd_v4.c:965: if(key == '3') return 0x3;
      0013B3 BF 33 04         [24] 5079 	cjne	r7,#0x33,00108$
      0013B6 75 82 03         [24] 5080 	mov	dpl,#0x03
      0013B9 22               [24] 5081 	ret
      0013BA                       5082 00108$:
                                   5083 ;	.\ecen4350_lcd_v4.c:966: if(key == '4') return 0x4;
      0013BA BF 34 04         [24] 5084 	cjne	r7,#0x34,00110$
      0013BD 75 82 04         [24] 5085 	mov	dpl,#0x04
      0013C0 22               [24] 5086 	ret
      0013C1                       5087 00110$:
                                   5088 ;	.\ecen4350_lcd_v4.c:967: if(key == '5') return 0x5;
      0013C1 BF 35 04         [24] 5089 	cjne	r7,#0x35,00112$
      0013C4 75 82 05         [24] 5090 	mov	dpl,#0x05
      0013C7 22               [24] 5091 	ret
      0013C8                       5092 00112$:
                                   5093 ;	.\ecen4350_lcd_v4.c:968: if(key == '6') return 0x6;
      0013C8 BF 36 04         [24] 5094 	cjne	r7,#0x36,00114$
      0013CB 75 82 06         [24] 5095 	mov	dpl,#0x06
      0013CE 22               [24] 5096 	ret
      0013CF                       5097 00114$:
                                   5098 ;	.\ecen4350_lcd_v4.c:969: if(key == '7') return 0x7;
      0013CF BF 37 04         [24] 5099 	cjne	r7,#0x37,00116$
      0013D2 75 82 07         [24] 5100 	mov	dpl,#0x07
      0013D5 22               [24] 5101 	ret
      0013D6                       5102 00116$:
                                   5103 ;	.\ecen4350_lcd_v4.c:970: if(key == '8') return 0x8;
      0013D6 BF 38 04         [24] 5104 	cjne	r7,#0x38,00118$
      0013D9 75 82 08         [24] 5105 	mov	dpl,#0x08
      0013DC 22               [24] 5106 	ret
      0013DD                       5107 00118$:
                                   5108 ;	.\ecen4350_lcd_v4.c:971: if(key == '9') return 0x9;
      0013DD BF 39 04         [24] 5109 	cjne	r7,#0x39,00120$
      0013E0 75 82 09         [24] 5110 	mov	dpl,#0x09
      0013E3 22               [24] 5111 	ret
      0013E4                       5112 00120$:
                                   5113 ;	.\ecen4350_lcd_v4.c:972: if(key == 'A') return 0xA;
      0013E4 BF 41 04         [24] 5114 	cjne	r7,#0x41,00122$
      0013E7 75 82 0A         [24] 5115 	mov	dpl,#0x0a
      0013EA 22               [24] 5116 	ret
      0013EB                       5117 00122$:
                                   5118 ;	.\ecen4350_lcd_v4.c:973: if(key == 'B') return 0xB;
      0013EB BF 42 04         [24] 5119 	cjne	r7,#0x42,00124$
      0013EE 75 82 0B         [24] 5120 	mov	dpl,#0x0b
      0013F1 22               [24] 5121 	ret
      0013F2                       5122 00124$:
                                   5123 ;	.\ecen4350_lcd_v4.c:974: if(key == 'C') return 0xC;
      0013F2 BF 43 04         [24] 5124 	cjne	r7,#0x43,00126$
      0013F5 75 82 0C         [24] 5125 	mov	dpl,#0x0c
      0013F8 22               [24] 5126 	ret
      0013F9                       5127 00126$:
                                   5128 ;	.\ecen4350_lcd_v4.c:975: if(key == 'D') return 0xD;
      0013F9 BF 44 04         [24] 5129 	cjne	r7,#0x44,00128$
      0013FC 75 82 0D         [24] 5130 	mov	dpl,#0x0d
      0013FF 22               [24] 5131 	ret
      001400                       5132 00128$:
                                   5133 ;	.\ecen4350_lcd_v4.c:976: if(key == 'E') return 0xE;
      001400 BF 45 04         [24] 5134 	cjne	r7,#0x45,00130$
      001403 75 82 0E         [24] 5135 	mov	dpl,#0x0e
      001406 22               [24] 5136 	ret
      001407                       5137 00130$:
                                   5138 ;	.\ecen4350_lcd_v4.c:977: if(key == 'F') return 0xF;
      001407 BF 46 04         [24] 5139 	cjne	r7,#0x46,00132$
      00140A 75 82 0F         [24] 5140 	mov	dpl,#0x0f
      00140D 22               [24] 5141 	ret
      00140E                       5142 00132$:
                                   5143 ;	.\ecen4350_lcd_v4.c:979: return 0xff;
      00140E 75 82 FF         [24] 5144 	mov	dpl,#0xff
                                   5145 ;	.\ecen4350_lcd_v4.c:980: }
      001411 22               [24] 5146 	ret
                                   5147 ;------------------------------------------------------------
                                   5148 ;Allocation info for local variables in function 'asciiToDec'
                                   5149 ;------------------------------------------------------------
                                   5150 ;d                         Allocated to registers 
                                   5151 ;val                       Allocated to registers r4 
                                   5152 ;id                        Allocated to registers r6 r7 
                                   5153 ;------------------------------------------------------------
                                   5154 ;	.\ecen4350_lcd_v4.c:982: void asciiToDec(unsigned char d)
                                   5155 ;	-----------------------------------------
                                   5156 ;	 function asciiToDec
                                   5157 ;	-----------------------------------------
      001412                       5158 _asciiToDec:
                                   5159 ;	.\ecen4350_lcd_v4.c:986: id = reverse(d);
      001412 12r12r37         [24] 5160 	lcall	_reverse
      001415 AE 82            [24] 5161 	mov	r6,dpl
      001417 AF 83            [24] 5162 	mov	r7,dph
                                   5163 ;	.\ecen4350_lcd_v4.c:987: while (id >= 1)
      001419                       5164 00101$:
      001419 C3               [12] 5165 	clr	c
      00141A EE               [12] 5166 	mov	a,r6
      00141B 94 01            [12] 5167 	subb	a,#0x01
      00141D EF               [12] 5168 	mov	a,r7
      00141E 94 00            [12] 5169 	subb	a,#0x00
      001420 40 3E            [24] 5170 	jc	00103$
                                   5171 ;	.\ecen4350_lcd_v4.c:990: val = id % 10;
      001422 75*00 0A         [24] 5172 	mov	__moduint_PARM_2,#0x0a
      001425 75*01 00         [24] 5173 	mov	(__moduint_PARM_2 + 1),#0x00
      001428 8E 82            [24] 5174 	mov	dpl,r6
      00142A 8F 83            [24] 5175 	mov	dph,r7
      00142C C0 07            [24] 5176 	push	ar7
      00142E C0 06            [24] 5177 	push	ar6
      001430 12r00r00         [24] 5178 	lcall	__moduint
      001433 AC 82            [24] 5179 	mov	r4,dpl
      001435 D0 06            [24] 5180 	pop	ar6
      001437 D0 07            [24] 5181 	pop	ar7
                                   5182 ;	.\ecen4350_lcd_v4.c:991: id = id / 10;
      001439 75*00 0A         [24] 5183 	mov	__divuint_PARM_2,#0x0a
      00143C 75*01 00         [24] 5184 	mov	(__divuint_PARM_2 + 1),#0x00
      00143F 8E 82            [24] 5185 	mov	dpl,r6
      001441 8F 83            [24] 5186 	mov	dph,r7
      001443 C0 04            [24] 5187 	push	ar4
      001445 12r00r00         [24] 5188 	lcall	__divuint
      001448 AE 82            [24] 5189 	mov	r6,dpl
      00144A AF 83            [24] 5190 	mov	r7,dph
      00144C D0 04            [24] 5191 	pop	ar4
                                   5192 ;	.\ecen4350_lcd_v4.c:992: write(val + '0');
      00144E 74 30            [12] 5193 	mov	a,#0x30
      001450 2C               [12] 5194 	add	a,r4
      001451 F5 82            [12] 5195 	mov	dpl,a
      001453 C0 07            [24] 5196 	push	ar7
      001455 C0 06            [24] 5197 	push	ar6
      001457 12r0FrAA         [24] 5198 	lcall	_write
      00145A D0 06            [24] 5199 	pop	ar6
      00145C D0 07            [24] 5200 	pop	ar7
      00145E 80 B9            [24] 5201 	sjmp	00101$
      001460                       5202 00103$:
                                   5203 ;	.\ecen4350_lcd_v4.c:994: write('\n');
      001460 75 82 0A         [24] 5204 	mov	dpl,#0x0a
                                   5205 ;	.\ecen4350_lcd_v4.c:995: }
      001463 02r0FrAA         [24] 5206 	ljmp	_write
                                   5207 ;------------------------------------------------------------
                                   5208 ;Allocation info for local variables in function 'asciiToHex'
                                   5209 ;------------------------------------------------------------
                                   5210 ;d                         Allocated to registers r7 
                                   5211 ;val                       Allocated to registers r2 
                                   5212 ;store                     Allocated with name '_asciiToHex_store_65536_519'
                                   5213 ;i                         Allocated to registers r6 
                                   5214 ;------------------------------------------------------------
                                   5215 ;	.\ecen4350_lcd_v4.c:997: void asciiToHex(unsigned char d)
                                   5216 ;	-----------------------------------------
                                   5217 ;	 function asciiToHex
                                   5218 ;	-----------------------------------------
      001466                       5219 _asciiToHex:
      001466 AF 82            [24] 5220 	mov	r7,dpl
                                   5221 ;	.\ecen4350_lcd_v4.c:1002: store[0] = 0;
      001468 75*4E 00         [24] 5222 	mov	_asciiToHex_store_65536_519,#0x00
                                   5223 ;	.\ecen4350_lcd_v4.c:1003: store[1] = 0;
      00146B 75*4F 00         [24] 5224 	mov	(_asciiToHex_store_65536_519 + 0x0001),#0x00
                                   5225 ;	.\ecen4350_lcd_v4.c:1004: while (d >= 1)
      00146E 7E 00            [12] 5226 	mov	r6,#0x00
      001470                       5227 00104$:
      001470 BF 01 00         [24] 5228 	cjne	r7,#0x01,00122$
      001473                       5229 00122$:
      001473 40 5A            [24] 5230 	jc	00106$
                                   5231 ;	.\ecen4350_lcd_v4.c:1007: val = d % 16;
      001475 8F 04            [24] 5232 	mov	ar4,r7
      001477 7D 00            [12] 5233 	mov	r5,#0x00
      001479 74 0F            [12] 5234 	mov	a,#0x0f
      00147B 5C               [12] 5235 	anl	a,r4
      00147C FA               [12] 5236 	mov	r2,a
                                   5237 ;	.\ecen4350_lcd_v4.c:1008: d = d / 16;
      00147D 75*00 10         [24] 5238 	mov	__divsint_PARM_2,#0x10
                                   5239 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001480 8D*01            [24] 5240 	mov	(__divsint_PARM_2 + 1),r5
      001482 8C 82            [24] 5241 	mov	dpl,r4
      001484 8D 83            [24] 5242 	mov	dph,r5
      001486 C0 06            [24] 5243 	push	ar6
      001488 C0 02            [24] 5244 	push	ar2
      00148A 12r00r00         [24] 5245 	lcall	__divsint
      00148D AC 82            [24] 5246 	mov	r4,dpl
      00148F D0 02            [24] 5247 	pop	ar2
      001491 D0 06            [24] 5248 	pop	ar6
      001493 8C 07            [24] 5249 	mov	ar7,r4
                                   5250 ;	.\ecen4350_lcd_v4.c:1009: if (val <= 9)
      001495 EA               [12] 5251 	mov	a,r2
      001496 24 F6            [12] 5252 	add	a,#0xff - 0x09
      001498 40 0C            [24] 5253 	jc	00102$
                                   5254 ;	.\ecen4350_lcd_v4.c:1012: store[i] = val + '0';
      00149A EE               [12] 5255 	mov	a,r6
      00149B 24r4E            [12] 5256 	add	a,#_asciiToHex_store_65536_519
      00149D F9               [12] 5257 	mov	r1,a
      00149E 8A 05            [24] 5258 	mov	ar5,r2
      0014A0 74 30            [12] 5259 	mov	a,#0x30
      0014A2 2D               [12] 5260 	add	a,r5
      0014A3 F7               [12] 5261 	mov	@r1,a
      0014A4 80 26            [24] 5262 	sjmp	00103$
      0014A6                       5263 00102$:
                                   5264 ;	.\ecen4350_lcd_v4.c:1016: store[i] = (val % 10) + 'A';
      0014A6 EE               [12] 5265 	mov	a,r6
      0014A7 24r4E            [12] 5266 	add	a,#_asciiToHex_store_65536_519
      0014A9 F9               [12] 5267 	mov	r1,a
      0014AA 7D 00            [12] 5268 	mov	r5,#0x00
      0014AC 75*00 0A         [24] 5269 	mov	__modsint_PARM_2,#0x0a
                                   5270 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0014AF 8D*01            [24] 5271 	mov	(__modsint_PARM_2 + 1),r5
      0014B1 8A 82            [24] 5272 	mov	dpl,r2
      0014B3 8D 83            [24] 5273 	mov	dph,r5
      0014B5 C0 07            [24] 5274 	push	ar7
      0014B7 C0 06            [24] 5275 	push	ar6
      0014B9 C0 01            [24] 5276 	push	ar1
      0014BB 12r00r00         [24] 5277 	lcall	__modsint
      0014BE AC 82            [24] 5278 	mov	r4,dpl
      0014C0 AD 83            [24] 5279 	mov	r5,dph
      0014C2 D0 01            [24] 5280 	pop	ar1
      0014C4 D0 06            [24] 5281 	pop	ar6
      0014C6 D0 07            [24] 5282 	pop	ar7
      0014C8 74 41            [12] 5283 	mov	a,#0x41
      0014CA 2C               [12] 5284 	add	a,r4
      0014CB F7               [12] 5285 	mov	@r1,a
      0014CC                       5286 00103$:
                                   5287 ;	.\ecen4350_lcd_v4.c:1018: i++;
      0014CC 0E               [12] 5288 	inc	r6
      0014CD 80 A1            [24] 5289 	sjmp	00104$
      0014CF                       5290 00106$:
                                   5291 ;	.\ecen4350_lcd_v4.c:1020: write(store[1]);
      0014CF 85*4F 82         [24] 5292 	mov	dpl,(_asciiToHex_store_65536_519 + 0x0001)
      0014D2 12r0FrAA         [24] 5293 	lcall	_write
                                   5294 ;	.\ecen4350_lcd_v4.c:1021: write(store[0]);
      0014D5 85*4E 82         [24] 5295 	mov	dpl,_asciiToHex_store_65536_519
                                   5296 ;	.\ecen4350_lcd_v4.c:1023: }
      0014D8 02r0FrAA         [24] 5297 	ljmp	_write
                                   5298 ;------------------------------------------------------------
                                   5299 ;Allocation info for local variables in function 'print4Hex'
                                   5300 ;------------------------------------------------------------
                                   5301 ;num                       Allocated to registers 
                                   5302 ;------------------------------------------------------------
                                   5303 ;	.\ecen4350_lcd_v4.c:1026: void print4Hex(unsigned char num) {
                                   5304 ;	-----------------------------------------
                                   5305 ;	 function print4Hex
                                   5306 ;	-----------------------------------------
      0014DB                       5307 _print4Hex:
                                   5308 ;	.\ecen4350_lcd_v4.c:1027: write((u8) hexToASCII(num));
      0014DB 12r13r26         [24] 5309 	lcall	_hexToASCII
                                   5310 ;	.\ecen4350_lcd_v4.c:1028: }
      0014DE 02r0FrAA         [24] 5311 	ljmp	_write
                                   5312 ;------------------------------------------------------------
                                   5313 ;Allocation info for local variables in function 'print8Hex'
                                   5314 ;------------------------------------------------------------
                                   5315 ;num                       Allocated to registers r7 
                                   5316 ;------------------------------------------------------------
                                   5317 ;	.\ecen4350_lcd_v4.c:1030: void print8Hex(unsigned char num) {
                                   5318 ;	-----------------------------------------
                                   5319 ;	 function print8Hex
                                   5320 ;	-----------------------------------------
      0014E1                       5321 _print8Hex:
                                   5322 ;	.\ecen4350_lcd_v4.c:1031: print4Hex(num >> 4);
      0014E1 E5 82            [12] 5323 	mov	a,dpl
      0014E3 FF               [12] 5324 	mov	r7,a
      0014E4 C4               [12] 5325 	swap	a
      0014E5 54 0F            [12] 5326 	anl	a,#0x0f
      0014E7 F5 82            [12] 5327 	mov	dpl,a
      0014E9 C0 07            [24] 5328 	push	ar7
      0014EB 12r14rDB         [24] 5329 	lcall	_print4Hex
      0014EE D0 07            [24] 5330 	pop	ar7
                                   5331 ;	.\ecen4350_lcd_v4.c:1032: print4Hex(num & 0x0F);
      0014F0 74 0F            [12] 5332 	mov	a,#0x0f
      0014F2 5F               [12] 5333 	anl	a,r7
      0014F3 F5 82            [12] 5334 	mov	dpl,a
                                   5335 ;	.\ecen4350_lcd_v4.c:1033: }
      0014F5 02r14rDB         [24] 5336 	ljmp	_print4Hex
                                   5337 ;------------------------------------------------------------
                                   5338 ;Allocation info for local variables in function 'print16Hex'
                                   5339 ;------------------------------------------------------------
                                   5340 ;num                       Allocated to registers r6 r7 
                                   5341 ;------------------------------------------------------------
                                   5342 ;	.\ecen4350_lcd_v4.c:1035: void print16Hex(unsigned int num) {
                                   5343 ;	-----------------------------------------
                                   5344 ;	 function print16Hex
                                   5345 ;	-----------------------------------------
      0014F8                       5346 _print16Hex:
      0014F8 AE 82            [24] 5347 	mov	r6,dpl
      0014FA AF 83            [24] 5348 	mov	r7,dph
                                   5349 ;	.\ecen4350_lcd_v4.c:1036: print8Hex((unsigned char)(num >> 8));
      0014FC 8F 82            [24] 5350 	mov	dpl,r7
      0014FE C0 07            [24] 5351 	push	ar7
      001500 C0 06            [24] 5352 	push	ar6
      001502 12r14rE1         [24] 5353 	lcall	_print8Hex
      001505 D0 06            [24] 5354 	pop	ar6
      001507 D0 07            [24] 5355 	pop	ar7
                                   5356 ;	.\ecen4350_lcd_v4.c:1037: print8Hex((unsigned char)num);
      001509 8E 82            [24] 5357 	mov	dpl,r6
                                   5358 ;	.\ecen4350_lcd_v4.c:1038: }
      00150B 02r14rE1         [24] 5359 	ljmp	_print8Hex
                                   5360 ;------------------------------------------------------------
                                   5361 ;Allocation info for local variables in function 'print16Dec'
                                   5362 ;------------------------------------------------------------
                                   5363 ;num                       Allocated to registers 
                                   5364 ;val                       Allocated to registers r4 r5 
                                   5365 ;id                        Allocated to registers r6 r7 
                                   5366 ;------------------------------------------------------------
                                   5367 ;	.\ecen4350_lcd_v4.c:1040: void print16Dec(unsigned int num) {
                                   5368 ;	-----------------------------------------
                                   5369 ;	 function print16Dec
                                   5370 ;	-----------------------------------------
      00150E                       5371 _print16Dec:
                                   5372 ;	.\ecen4350_lcd_v4.c:1043: id = reverse16(num);
      00150E 12r12rA7         [24] 5373 	lcall	_reverse16
      001511 AE 82            [24] 5374 	mov	r6,dpl
      001513 AF 83            [24] 5375 	mov	r7,dph
                                   5376 ;	.\ecen4350_lcd_v4.c:1044: while (id >= 1) {
      001515                       5377 00101$:
      001515 C3               [12] 5378 	clr	c
      001516 EE               [12] 5379 	mov	a,r6
      001517 94 01            [12] 5380 	subb	a,#0x01
      001519 EF               [12] 5381 	mov	a,r7
      00151A 94 00            [12] 5382 	subb	a,#0x00
      00151C 40 44            [24] 5383 	jc	00104$
                                   5384 ;	.\ecen4350_lcd_v4.c:1045: val = id % 10;
      00151E 75*00 0A         [24] 5385 	mov	__moduint_PARM_2,#0x0a
      001521 75*01 00         [24] 5386 	mov	(__moduint_PARM_2 + 1),#0x00
      001524 8E 82            [24] 5387 	mov	dpl,r6
      001526 8F 83            [24] 5388 	mov	dph,r7
      001528 C0 07            [24] 5389 	push	ar7
      00152A C0 06            [24] 5390 	push	ar6
      00152C 12r00r00         [24] 5391 	lcall	__moduint
      00152F AC 82            [24] 5392 	mov	r4,dpl
      001531 AD 83            [24] 5393 	mov	r5,dph
      001533 D0 06            [24] 5394 	pop	ar6
      001535 D0 07            [24] 5395 	pop	ar7
                                   5396 ;	.\ecen4350_lcd_v4.c:1046: id = id/10;
      001537 75*00 0A         [24] 5397 	mov	__divuint_PARM_2,#0x0a
      00153A 75*01 00         [24] 5398 	mov	(__divuint_PARM_2 + 1),#0x00
      00153D 8E 82            [24] 5399 	mov	dpl,r6
      00153F 8F 83            [24] 5400 	mov	dph,r7
      001541 C0 05            [24] 5401 	push	ar5
      001543 C0 04            [24] 5402 	push	ar4
      001545 12r00r00         [24] 5403 	lcall	__divuint
      001548 AE 82            [24] 5404 	mov	r6,dpl
      00154A AF 83            [24] 5405 	mov	r7,dph
      00154C D0 04            [24] 5406 	pop	ar4
      00154E D0 05            [24] 5407 	pop	ar5
                                   5408 ;	.\ecen4350_lcd_v4.c:1047: write(val + '0');
      001550 74 30            [12] 5409 	mov	a,#0x30
      001552 2C               [12] 5410 	add	a,r4
      001553 F5 82            [12] 5411 	mov	dpl,a
      001555 C0 07            [24] 5412 	push	ar7
      001557 C0 06            [24] 5413 	push	ar6
      001559 12r0FrAA         [24] 5414 	lcall	_write
      00155C D0 06            [24] 5415 	pop	ar6
      00155E D0 07            [24] 5416 	pop	ar7
      001560 80 B3            [24] 5417 	sjmp	00101$
      001562                       5418 00104$:
                                   5419 ;	.\ecen4350_lcd_v4.c:1049: }
      001562 22               [24] 5420 	ret
                                   5421 ;------------------------------------------------------------
                                   5422 ;Allocation info for local variables in function 'print8ASCII'
                                   5423 ;------------------------------------------------------------
                                   5424 ;num                       Allocated to registers 
                                   5425 ;------------------------------------------------------------
                                   5426 ;	.\ecen4350_lcd_v4.c:1051: void print8ASCII(unsigned char num) {
                                   5427 ;	-----------------------------------------
                                   5428 ;	 function print8ASCII
                                   5429 ;	-----------------------------------------
      001563                       5430 _print8ASCII:
                                   5431 ;	.\ecen4350_lcd_v4.c:1052: write((u8)num);
                                   5432 ;	.\ecen4350_lcd_v4.c:1053: }
      001563 02r0FrAA         [24] 5433 	ljmp	_write
                                   5434 ;------------------------------------------------------------
                                   5435 ;Allocation info for local variables in function 'print16ASCII'
                                   5436 ;------------------------------------------------------------
                                   5437 ;num                       Allocated to registers r6 r7 
                                   5438 ;------------------------------------------------------------
                                   5439 ;	.\ecen4350_lcd_v4.c:1055: void print16ASCII(unsigned int num) {
                                   5440 ;	-----------------------------------------
                                   5441 ;	 function print16ASCII
                                   5442 ;	-----------------------------------------
      001566                       5443 _print16ASCII:
      001566 AE 82            [24] 5444 	mov	r6,dpl
      001568 AF 83            [24] 5445 	mov	r7,dph
                                   5446 ;	.\ecen4350_lcd_v4.c:1056: print8ASCII((unsigned char)(num >> 8));
      00156A 8F 82            [24] 5447 	mov	dpl,r7
      00156C C0 07            [24] 5448 	push	ar7
      00156E C0 06            [24] 5449 	push	ar6
      001570 12r15r63         [24] 5450 	lcall	_print8ASCII
      001573 D0 06            [24] 5451 	pop	ar6
      001575 D0 07            [24] 5452 	pop	ar7
                                   5453 ;	.\ecen4350_lcd_v4.c:1057: print8ASCII((unsigned char)num);
      001577 8E 82            [24] 5454 	mov	dpl,r6
                                   5455 ;	.\ecen4350_lcd_v4.c:1058: }
      001579 02r15r63         [24] 5456 	ljmp	_print8ASCII
                                   5457 ;------------------------------------------------------------
                                   5458 ;Allocation info for local variables in function 'writeSomeLines'
                                   5459 ;------------------------------------------------------------
                                   5460 ;	.\ecen4350_lcd_v4.c:1061: void writeSomeLines()
                                   5461 ;	-----------------------------------------
                                   5462 ;	 function writeSomeLines
                                   5463 ;	-----------------------------------------
      00157C                       5464 _writeSomeLines:
                                   5465 ;	.\ecen4350_lcd_v4.c:1063: setRotation(0);		//rotation 0 is for flat/flush LCD
      00157C 75 82 00         [24] 5466 	mov	dpl,#0x00
      00157F 12r05r28         [24] 5467 	lcall	_setRotation
                                   5468 ;	.\ecen4350_lcd_v4.c:1065: fillScreen(CYAN);
      001582 90 07 FF         [24] 5469 	mov	dptr,#0x07ff
      001585 12r0CrAC         [24] 5470 	lcall	_fillScreen
                                   5471 ;	.\ecen4350_lcd_v4.c:1066: fillTop(BLACK);
      001588 90 00 00         [24] 5472 	mov	dptr,#0x0000
      00158B 12r0BrC6         [24] 5473 	lcall	_fillTop
                                   5474 ;	.\ecen4350_lcd_v4.c:1067: setTextSize(5);
      00158E 75 82 05         [24] 5475 	mov	dpl,#0x05
      001591 12r05r10         [24] 5476 	lcall	_setTextSize
                                   5477 ;	.\ecen4350_lcd_v4.c:1068: setTextColor(CYAN, BLACK);
      001594 E4               [12] 5478 	clr	a
      001595 F5*00            [12] 5479 	mov	_setTextColor_PARM_2,a
      001597 F5*01            [12] 5480 	mov	(_setTextColor_PARM_2 + 1),a
      001599 90 07 FF         [24] 5481 	mov	dptr,#0x07ff
      00159C 12r05r03         [24] 5482 	lcall	_setTextColor
                                   5483 ;	.\ecen4350_lcd_v4.c:1069: setCursor(10,0);
      00159F E4               [12] 5484 	clr	a
      0015A0 F5*00            [12] 5485 	mov	_setCursor_PARM_2,a
      0015A2 F5*01            [12] 5486 	mov	(_setCursor_PARM_2 + 1),a
      0015A4 90 00 0A         [24] 5487 	mov	dptr,#0x000a
      0015A7 12r04rF6         [24] 5488 	lcall	_setCursor
                                   5489 ;	.\ecen4350_lcd_v4.c:1070: LCD_string_write("Welcome\n");
      0015AA 90r05r2C         [24] 5490 	mov	dptr,#___str_3
      0015AD 75 F0 80         [24] 5491 	mov	b,#0x80
      0015B0 12r10r10         [24] 5492 	lcall	_LCD_string_write
                                   5493 ;	.\ecen4350_lcd_v4.c:1071: setTextSize(2);
      0015B3 75 82 02         [24] 5494 	mov	dpl,#0x02
      0015B6 12r05r10         [24] 5495 	lcall	_setTextSize
                                   5496 ;	.\ecen4350_lcd_v4.c:1072: setTextColor(BLACK, CYAN);
      0015B9 75*00 FF         [24] 5497 	mov	_setTextColor_PARM_2,#0xff
      0015BC 75*01 07         [24] 5498 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015BF 90 00 00         [24] 5499 	mov	dptr,#0x0000
      0015C2 12r05r03         [24] 5500 	lcall	_setTextColor
                                   5501 ;	.\ecen4350_lcd_v4.c:1073: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      0015C5 90r05r35         [24] 5502 	mov	dptr,#___str_4
      0015C8 75 F0 80         [24] 5503 	mov	b,#0x80
      0015CB 12r10r10         [24] 5504 	lcall	_LCD_string_write
                                   5505 ;	.\ecen4350_lcd_v4.c:1074: delay(40);
      0015CE 90 00 28         [24] 5506 	mov	dptr,#0x0028
                                   5507 ;	.\ecen4350_lcd_v4.c:1075: }
      0015D1 02r00rE0         [24] 5508 	ljmp	_delay
                                   5509 ;------------------------------------------------------------
                                   5510 ;Allocation info for local variables in function 'setColorDefault'
                                   5511 ;------------------------------------------------------------
                                   5512 ;	.\ecen4350_lcd_v4.c:1078: void setColorDefault() {
                                   5513 ;	-----------------------------------------
                                   5514 ;	 function setColorDefault
                                   5515 ;	-----------------------------------------
      0015D4                       5516 _setColorDefault:
                                   5517 ;	.\ecen4350_lcd_v4.c:1079: setTextColor(colorText, colorBackground);
      0015D4 E4               [12] 5518 	clr	a
      0015D5 F5*00            [12] 5519 	mov	_setTextColor_PARM_2,a
      0015D7 F5*01            [12] 5520 	mov	(_setTextColor_PARM_2 + 1),a
      0015D9 90 07 FF         [24] 5521 	mov	dptr,#0x07ff
                                   5522 ;	.\ecen4350_lcd_v4.c:1080: } 
      0015DC 02r05r03         [24] 5523 	ljmp	_setTextColor
                                   5524 ;------------------------------------------------------------
                                   5525 ;Allocation info for local variables in function 'setColorSelect'
                                   5526 ;------------------------------------------------------------
                                   5527 ;	.\ecen4350_lcd_v4.c:1082: void setColorSelect() {
                                   5528 ;	-----------------------------------------
                                   5529 ;	 function setColorSelect
                                   5530 ;	-----------------------------------------
      0015DF                       5531 _setColorSelect:
                                   5532 ;	.\ecen4350_lcd_v4.c:1083: setTextColor(colorSelect, colorBackground);
      0015DF E4               [12] 5533 	clr	a
      0015E0 F5*00            [12] 5534 	mov	_setTextColor_PARM_2,a
      0015E2 F5*01            [12] 5535 	mov	(_setTextColor_PARM_2 + 1),a
      0015E4 90 F8 1F         [24] 5536 	mov	dptr,#0xf81f
                                   5537 ;	.\ecen4350_lcd_v4.c:1084: }
      0015E7 02r05r03         [24] 5538 	ljmp	_setTextColor
                                   5539 ;------------------------------------------------------------
                                   5540 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5541 ;------------------------------------------------------------
                                   5542 ;	.\ecen4350_lcd_v4.c:1086: void setColorHighlight1() {
                                   5543 ;	-----------------------------------------
                                   5544 ;	 function setColorHighlight1
                                   5545 ;	-----------------------------------------
      0015EA                       5546 _setColorHighlight1:
                                   5547 ;	.\ecen4350_lcd_v4.c:1087: setTextColor(colorSelect, CYAN);
      0015EA 75*00 FF         [24] 5548 	mov	_setTextColor_PARM_2,#0xff
      0015ED 75*01 07         [24] 5549 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015F0 90 F8 1F         [24] 5550 	mov	dptr,#0xf81f
                                   5551 ;	.\ecen4350_lcd_v4.c:1088: }
      0015F3 02r05r03         [24] 5552 	ljmp	_setTextColor
                                   5553 ;------------------------------------------------------------
                                   5554 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5555 ;------------------------------------------------------------
                                   5556 ;	.\ecen4350_lcd_v4.c:1090: void setColorHighlight2() {
                                   5557 ;	-----------------------------------------
                                   5558 ;	 function setColorHighlight2
                                   5559 ;	-----------------------------------------
      0015F6                       5560 _setColorHighlight2:
                                   5561 ;	.\ecen4350_lcd_v4.c:1091: setTextColor(BLACK, CYAN);
      0015F6 75*00 FF         [24] 5562 	mov	_setTextColor_PARM_2,#0xff
      0015F9 75*01 07         [24] 5563 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015FC 90 00 00         [24] 5564 	mov	dptr,#0x0000
                                   5565 ;	.\ecen4350_lcd_v4.c:1092: }
      0015FF 02r05r03         [24] 5566 	ljmp	_setTextColor
                                   5567 ;------------------------------------------------------------
                                   5568 ;Allocation info for local variables in function 'setColorGray'
                                   5569 ;------------------------------------------------------------
                                   5570 ;	.\ecen4350_lcd_v4.c:1094: void setColorGray() {
                                   5571 ;	-----------------------------------------
                                   5572 ;	 function setColorGray
                                   5573 ;	-----------------------------------------
      001602                       5574 _setColorGray:
                                   5575 ;	.\ecen4350_lcd_v4.c:1095: setTextColor(GRAY, colorBackground);
      001602 E4               [12] 5576 	clr	a
      001603 F5*00            [12] 5577 	mov	_setTextColor_PARM_2,a
      001605 F5*01            [12] 5578 	mov	(_setTextColor_PARM_2 + 1),a
      001607 90 D6 BA         [24] 5579 	mov	dptr,#0xd6ba
                                   5580 ;	.\ecen4350_lcd_v4.c:1096: }
      00160A 02r05r03         [24] 5581 	ljmp	_setTextColor
                                   5582 ;------------------------------------------------------------
                                   5583 ;Allocation info for local variables in function 'setColorMenu'
                                   5584 ;------------------------------------------------------------
                                   5585 ;	.\ecen4350_lcd_v4.c:1098: void setColorMenu() {
                                   5586 ;	-----------------------------------------
                                   5587 ;	 function setColorMenu
                                   5588 ;	-----------------------------------------
      00160D                       5589 _setColorMenu:
                                   5590 ;	.\ecen4350_lcd_v4.c:1099: setTextColor(BLACK, GRAY);
      00160D 75*00 BA         [24] 5591 	mov	_setTextColor_PARM_2,#0xba
      001610 75*01 D6         [24] 5592 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001613 90 00 00         [24] 5593 	mov	dptr,#0x0000
                                   5594 ;	.\ecen4350_lcd_v4.c:1100: }
      001616 02r05r03         [24] 5595 	ljmp	_setTextColor
                                   5596 ;------------------------------------------------------------
                                   5597 ;Allocation info for local variables in function 'setColorRed'
                                   5598 ;------------------------------------------------------------
                                   5599 ;	.\ecen4350_lcd_v4.c:1102: void setColorRed() {
                                   5600 ;	-----------------------------------------
                                   5601 ;	 function setColorRed
                                   5602 ;	-----------------------------------------
      001619                       5603 _setColorRed:
                                   5604 ;	.\ecen4350_lcd_v4.c:1103: setTextColor(RED, colorBackground);
      001619 E4               [12] 5605 	clr	a
      00161A F5*00            [12] 5606 	mov	_setTextColor_PARM_2,a
      00161C F5*01            [12] 5607 	mov	(_setTextColor_PARM_2 + 1),a
      00161E 90 F8 00         [24] 5608 	mov	dptr,#0xf800
                                   5609 ;	.\ecen4350_lcd_v4.c:1104: }
      001621 02r05r03         [24] 5610 	ljmp	_setTextColor
                                   5611 ;------------------------------------------------------------
                                   5612 ;Allocation info for local variables in function 'setColorWhite'
                                   5613 ;------------------------------------------------------------
                                   5614 ;	.\ecen4350_lcd_v4.c:1106: void setColorWhite() {
                                   5615 ;	-----------------------------------------
                                   5616 ;	 function setColorWhite
                                   5617 ;	-----------------------------------------
      001624                       5618 _setColorWhite:
                                   5619 ;	.\ecen4350_lcd_v4.c:1107: setTextColor(WHITE, colorBackground);
      001624 E4               [12] 5620 	clr	a
      001625 F5*00            [12] 5621 	mov	_setTextColor_PARM_2,a
      001627 F5*01            [12] 5622 	mov	(_setTextColor_PARM_2 + 1),a
      001629 90 FF FF         [24] 5623 	mov	dptr,#0xffff
                                   5624 ;	.\ecen4350_lcd_v4.c:1108: }
      00162C 02r05r03         [24] 5625 	ljmp	_setTextColor
                                   5626 ;------------------------------------------------------------
                                   5627 ;Allocation info for local variables in function 'setColorGreen'
                                   5628 ;------------------------------------------------------------
                                   5629 ;	.\ecen4350_lcd_v4.c:1110: void setColorGreen() {
                                   5630 ;	-----------------------------------------
                                   5631 ;	 function setColorGreen
                                   5632 ;	-----------------------------------------
      00162F                       5633 _setColorGreen:
                                   5634 ;	.\ecen4350_lcd_v4.c:1111: setTextColor(GREEN, colorBackground);
      00162F E4               [12] 5635 	clr	a
      001630 F5*00            [12] 5636 	mov	_setTextColor_PARM_2,a
      001632 F5*01            [12] 5637 	mov	(_setTextColor_PARM_2 + 1),a
      001634 90 07 E0         [24] 5638 	mov	dptr,#0x07e0
                                   5639 ;	.\ecen4350_lcd_v4.c:1112: }
      001637 02r05r03         [24] 5640 	ljmp	_setTextColor
                                   5641 ;------------------------------------------------------------
                                   5642 ;Allocation info for local variables in function 'setColorYellow'
                                   5643 ;------------------------------------------------------------
                                   5644 ;	.\ecen4350_lcd_v4.c:1114: void setColorYellow() {
                                   5645 ;	-----------------------------------------
                                   5646 ;	 function setColorYellow
                                   5647 ;	-----------------------------------------
      00163A                       5648 _setColorYellow:
                                   5649 ;	.\ecen4350_lcd_v4.c:1115: setTextColor(YELLOW, colorBackground);
      00163A E4               [12] 5650 	clr	a
      00163B F5*00            [12] 5651 	mov	_setTextColor_PARM_2,a
      00163D F5*01            [12] 5652 	mov	(_setTextColor_PARM_2 + 1),a
      00163F 90 FF E0         [24] 5653 	mov	dptr,#0xffe0
                                   5654 ;	.\ecen4350_lcd_v4.c:1116: }
      001642 02r05r03         [24] 5655 	ljmp	_setTextColor
                                   5656 ;------------------------------------------------------------
                                   5657 ;Allocation info for local variables in function 'inputAddress'
                                   5658 ;------------------------------------------------------------
                                   5659 ;address                   Allocated to registers r7 r6 
                                   5660 ;input                     Allocated to registers r7 
                                   5661 ;------------------------------------------------------------
                                   5662 ;	.\ecen4350_lcd_v4.c:1118: unsigned int inputAddress()
                                   5663 ;	-----------------------------------------
                                   5664 ;	 function inputAddress
                                   5665 ;	-----------------------------------------
      001645                       5666 _inputAddress:
                                   5667 ;	.\ecen4350_lcd_v4.c:1123: input = keyDetect();					
      001645 12r11r2E         [24] 5668 	lcall	_keyDetect
                                   5669 ;	.\ecen4350_lcd_v4.c:1126: write(input);									// Print to screen
      001648 AF 82            [24] 5670 	mov  r7,dpl
      00164A C0 07            [24] 5671 	push	ar7
      00164C 12r0FrAA         [24] 5672 	lcall	_write
      00164F D0 07            [24] 5673 	pop	ar7
                                   5674 ;	.\ecen4350_lcd_v4.c:1127: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      001651 8F 82            [24] 5675 	mov	dpl,r7
      001653 12r13r9C         [24] 5676 	lcall	_ASCIItoHex
                                   5677 ;	.\ecen4350_lcd_v4.c:1128: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      001656 E5 82            [12] 5678 	mov	a,dpl
      001658 C4               [12] 5679 	swap	a
      001659 54 F0            [12] 5680 	anl	a,#0xf0
      00165B FE               [12] 5681 	mov	r6,a
      00165C 7F 00            [12] 5682 	mov	r7,#0x00
                                   5683 ;	.\ecen4350_lcd_v4.c:1130: input = keyDetect();							// second highest address nibble
      00165E C0 07            [24] 5684 	push	ar7
      001660 C0 06            [24] 5685 	push	ar6
      001662 12r11r2E         [24] 5686 	lcall	_keyDetect
                                   5687 ;	.\ecen4350_lcd_v4.c:1133: write(input);									// Print to screen
      001665 AD 82            [24] 5688 	mov  r5,dpl
      001667 C0 05            [24] 5689 	push	ar5
      001669 12r0FrAA         [24] 5690 	lcall	_write
      00166C D0 05            [24] 5691 	pop	ar5
                                   5692 ;	.\ecen4350_lcd_v4.c:1134: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      00166E 8D 82            [24] 5693 	mov	dpl,r5
      001670 12r13r9C         [24] 5694 	lcall	_ASCIItoHex
      001673 AD 82            [24] 5695 	mov	r5,dpl
      001675 D0 06            [24] 5696 	pop	ar6
      001677 D0 07            [24] 5697 	pop	ar7
                                   5698 ;	.\ecen4350_lcd_v4.c:1135: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      001679 8D 04            [24] 5699 	mov	ar4,r5
      00167B 7D 00            [12] 5700 	mov	r5,#0x00
      00167D EF               [12] 5701 	mov	a,r7
      00167E 42 05            [12] 5702 	orl	ar5,a
      001680 EE               [12] 5703 	mov	a,r6
      001681 42 04            [12] 5704 	orl	ar4,a
                                   5705 ;	.\ecen4350_lcd_v4.c:1137: input = keyDetect();
      001683 C0 05            [24] 5706 	push	ar5
      001685 C0 04            [24] 5707 	push	ar4
      001687 12r11r2E         [24] 5708 	lcall	_keyDetect
      00168A AF 82            [24] 5709 	mov	r7,dpl
      00168C D0 04            [24] 5710 	pop	ar4
      00168E D0 05            [24] 5711 	pop	ar5
                                   5712 ;	.\ecen4350_lcd_v4.c:1140: write(input);
      001690 8F 82            [24] 5713 	mov	dpl,r7
      001692 C0 07            [24] 5714 	push	ar7
      001694 C0 05            [24] 5715 	push	ar5
      001696 C0 04            [24] 5716 	push	ar4
      001698 12r0FrAA         [24] 5717 	lcall	_write
      00169B D0 04            [24] 5718 	pop	ar4
      00169D D0 05            [24] 5719 	pop	ar5
      00169F D0 07            [24] 5720 	pop	ar7
                                   5721 ;	.\ecen4350_lcd_v4.c:1141: input = ASCIItoHex(input);
      0016A1 8F 82            [24] 5722 	mov	dpl,r7
      0016A3 C0 05            [24] 5723 	push	ar5
      0016A5 C0 04            [24] 5724 	push	ar4
      0016A7 12r13r9C         [24] 5725 	lcall	_ASCIItoHex
      0016AA AF 82            [24] 5726 	mov	r7,dpl
      0016AC D0 04            [24] 5727 	pop	ar4
      0016AE D0 05            [24] 5728 	pop	ar5
                                   5729 ;	.\ecen4350_lcd_v4.c:1142: address |= (int) input * 16;					// *0x0010
      0016B0 E4               [12] 5730 	clr	a
      0016B1 CF               [12] 5731 	xch	a,r7
      0016B2 C4               [12] 5732 	swap	a
      0016B3 CF               [12] 5733 	xch	a,r7
      0016B4 6F               [12] 5734 	xrl	a,r7
      0016B5 CF               [12] 5735 	xch	a,r7
      0016B6 54 F0            [12] 5736 	anl	a,#0xf0
      0016B8 CF               [12] 5737 	xch	a,r7
      0016B9 6F               [12] 5738 	xrl	a,r7
      0016BA FE               [12] 5739 	mov	r6,a
      0016BB ED               [12] 5740 	mov	a,r5
      0016BC 42 07            [12] 5741 	orl	ar7,a
      0016BE EC               [12] 5742 	mov	a,r4
      0016BF 42 06            [12] 5743 	orl	ar6,a
                                   5744 ;	.\ecen4350_lcd_v4.c:1144: input = keyDetect();
      0016C1 C0 07            [24] 5745 	push	ar7
      0016C3 C0 06            [24] 5746 	push	ar6
      0016C5 12r11r2E         [24] 5747 	lcall	_keyDetect
                                   5748 ;	.\ecen4350_lcd_v4.c:1147: write(input);
      0016C8 AD 82            [24] 5749 	mov  r5,dpl
      0016CA C0 05            [24] 5750 	push	ar5
      0016CC 12r0FrAA         [24] 5751 	lcall	_write
      0016CF D0 05            [24] 5752 	pop	ar5
                                   5753 ;	.\ecen4350_lcd_v4.c:1148: input = ASCIItoHex(input);
      0016D1 8D 82            [24] 5754 	mov	dpl,r5
      0016D3 12r13r9C         [24] 5755 	lcall	_ASCIItoHex
      0016D6 AD 82            [24] 5756 	mov	r5,dpl
      0016D8 D0 06            [24] 5757 	pop	ar6
      0016DA D0 07            [24] 5758 	pop	ar7
                                   5759 ;	.\ecen4350_lcd_v4.c:1149: address |= (int) input;							// *0x0001
      0016DC 7C 00            [12] 5760 	mov	r4,#0x00
      0016DE ED               [12] 5761 	mov	a,r5
      0016DF 4F               [12] 5762 	orl	a,r7
      0016E0 F5 82            [12] 5763 	mov	dpl,a
      0016E2 EC               [12] 5764 	mov	a,r4
      0016E3 4E               [12] 5765 	orl	a,r6
      0016E4 F5 83            [12] 5766 	mov	dph,a
                                   5767 ;	.\ecen4350_lcd_v4.c:1152: return address;									// yeet
                                   5768 ;	.\ecen4350_lcd_v4.c:1153: }
      0016E6 22               [24] 5769 	ret
                                   5770 ;------------------------------------------------------------
                                   5771 ;Allocation info for local variables in function 'inputBlockType'
                                   5772 ;------------------------------------------------------------
                                   5773 ;blockType                 Allocated to registers 
                                   5774 ;invalidType               Allocated to registers 
                                   5775 ;------------------------------------------------------------
                                   5776 ;	.\ecen4350_lcd_v4.c:1155: unsigned char inputBlockType() {
                                   5777 ;	-----------------------------------------
                                   5778 ;	 function inputBlockType
                                   5779 ;	-----------------------------------------
      0016E7                       5780 _inputBlockType:
                                   5781 ;	.\ecen4350_lcd_v4.c:1161: selection = keyDetect();
      0016E7 12r11r2E         [24] 5782 	lcall	_keyDetect
      0016EA AF 82            [24] 5783 	mov	r7,dpl
      0016EC 78r00            [12] 5784 	mov	r0,#_selection
      0016EE A6 07            [24] 5785 	mov	@r0,ar7
                                   5786 ;	.\ecen4350_lcd_v4.c:1162: blockType = ASCIItoHex(selection);
      0016F0 8F 82            [24] 5787 	mov	dpl,r7
                                   5788 ;	.\ecen4350_lcd_v4.c:1177: return blockType;
                                   5789 ;	.\ecen4350_lcd_v4.c:1178: }
      0016F2 02r13r9C         [24] 5790 	ljmp	_ASCIItoHex
                                   5791 ;------------------------------------------------------------
                                   5792 ;Allocation info for local variables in function 'inputBlockSize'
                                   5793 ;------------------------------------------------------------
                                   5794 ;blockSize                 Allocated to registers 
                                   5795 ;------------------------------------------------------------
                                   5796 ;	.\ecen4350_lcd_v4.c:1180: unsigned char inputBlockSize() {
                                   5797 ;	-----------------------------------------
                                   5798 ;	 function inputBlockSize
                                   5799 ;	-----------------------------------------
      0016F5                       5800 _inputBlockSize:
                                   5801 ;	.\ecen4350_lcd_v4.c:1183: selection = keyDetect();
      0016F5 12r11r2E         [24] 5802 	lcall	_keyDetect
      0016F8 AF 82            [24] 5803 	mov	r7,dpl
      0016FA 78r00            [12] 5804 	mov	r0,#_selection
      0016FC A6 07            [24] 5805 	mov	@r0,ar7
                                   5806 ;	.\ecen4350_lcd_v4.c:1184: write(selection);
      0016FE 8F 82            [24] 5807 	mov	dpl,r7
      001700 12r0FrAA         [24] 5808 	lcall	_write
                                   5809 ;	.\ecen4350_lcd_v4.c:1185: selection = ASCIItoHex(selection);
      001703 78r00            [12] 5810 	mov	r0,#_selection
      001705 86 82            [24] 5811 	mov	dpl,@r0
      001707 12r13r9C         [24] 5812 	lcall	_ASCIItoHex
      00170A AF 82            [24] 5813 	mov	r7,dpl
      00170C 78r00            [12] 5814 	mov	r0,#_selection
      00170E A6 07            [24] 5815 	mov	@r0,ar7
                                   5816 ;	.\ecen4350_lcd_v4.c:1186: blockSize |= selection * 16;
      001710 EF               [12] 5817 	mov	a,r7
      001711 C4               [12] 5818 	swap	a
      001712 54 F0            [12] 5819 	anl	a,#0xf0
      001714 FF               [12] 5820 	mov	r7,a
                                   5821 ;	.\ecen4350_lcd_v4.c:1187: selection = keyDetect();
      001715 C0 07            [24] 5822 	push	ar7
      001717 12r11r2E         [24] 5823 	lcall	_keyDetect
      00171A AE 82            [24] 5824 	mov	r6,dpl
      00171C 78r00            [12] 5825 	mov	r0,#_selection
      00171E A6 06            [24] 5826 	mov	@r0,ar6
                                   5827 ;	.\ecen4350_lcd_v4.c:1188: write(selection);
      001720 8E 82            [24] 5828 	mov	dpl,r6
      001722 12r0FrAA         [24] 5829 	lcall	_write
                                   5830 ;	.\ecen4350_lcd_v4.c:1189: selection = ASCIItoHex(selection);
      001725 78r00            [12] 5831 	mov	r0,#_selection
      001727 86 82            [24] 5832 	mov	dpl,@r0
      001729 12r13r9C         [24] 5833 	lcall	_ASCIItoHex
      00172C AE 82            [24] 5834 	mov	r6,dpl
      00172E D0 07            [24] 5835 	pop	ar7
      001730 78r00            [12] 5836 	mov	r0,#_selection
      001732 A6 06            [24] 5837 	mov	@r0,ar6
                                   5838 ;	.\ecen4350_lcd_v4.c:1190: blockSize |= selection;
      001734 EE               [12] 5839 	mov	a,r6
      001735 4F               [12] 5840 	orl	a,r7
      001736 F5 82            [12] 5841 	mov	dpl,a
                                   5842 ;	.\ecen4350_lcd_v4.c:1191: return blockSize;
                                   5843 ;	.\ecen4350_lcd_v4.c:1192: }
      001738 22               [24] 5844 	ret
                                   5845 ;------------------------------------------------------------
                                   5846 ;Allocation info for local variables in function 'printMenu'
                                   5847 ;------------------------------------------------------------
                                   5848 ;	.\ecen4350_lcd_v4.c:1195: void printMenu() {
                                   5849 ;	-----------------------------------------
                                   5850 ;	 function printMenu
                                   5851 ;	-----------------------------------------
      001739                       5852 _printMenu:
                                   5853 ;	.\ecen4350_lcd_v4.c:1197: setCursor(0,0);
      001739 E4               [12] 5854 	clr	a
      00173A F5*00            [12] 5855 	mov	_setCursor_PARM_2,a
      00173C F5*01            [12] 5856 	mov	(_setCursor_PARM_2 + 1),a
      00173E 90 00 00         [24] 5857 	mov	dptr,#0x0000
      001741 12r04rF6         [24] 5858 	lcall	_setCursor
                                   5859 ;	.\ecen4350_lcd_v4.c:1198: clearLCD();
      001744 12r0Dr93         [24] 5860 	lcall	_clearLCD
                                   5861 ;	.\ecen4350_lcd_v4.c:1201: fillTop(GRAY);
      001747 90 D6 BA         [24] 5862 	mov	dptr,#0xd6ba
      00174A 12r0BrC6         [24] 5863 	lcall	_fillTop
                                   5864 ;	.\ecen4350_lcd_v4.c:1202: setTextSize(5);
      00174D 75 82 05         [24] 5865 	mov	dpl,#0x05
      001750 12r05r10         [24] 5866 	lcall	_setTextSize
                                   5867 ;	.\ecen4350_lcd_v4.c:1203: setColorMenu();
      001753 12r16r0D         [24] 5868 	lcall	_setColorMenu
                                   5869 ;	.\ecen4350_lcd_v4.c:1204: setCursor(30, 0);
      001756 E4               [12] 5870 	clr	a
      001757 F5*00            [12] 5871 	mov	_setCursor_PARM_2,a
      001759 F5*01            [12] 5872 	mov	(_setCursor_PARM_2 + 1),a
      00175B 90 00 1E         [24] 5873 	mov	dptr,#0x001e
      00175E 12r04rF6         [24] 5874 	lcall	_setCursor
                                   5875 ;	.\ecen4350_lcd_v4.c:1205: LCD_string_write("<Menu>\n");
      001761 90r05r5C         [24] 5876 	mov	dptr,#___str_5
      001764 75 F0 80         [24] 5877 	mov	b,#0x80
      001767 12r10r10         [24] 5878 	lcall	_LCD_string_write
                                   5879 ;	.\ecen4350_lcd_v4.c:1207: setTextSize(2);
      00176A 75 82 02         [24] 5880 	mov	dpl,#0x02
      00176D 12r05r10         [24] 5881 	lcall	_setTextSize
                                   5882 ;	.\ecen4350_lcd_v4.c:1209: setCursor(0, 60);
      001770 75*00 3C         [24] 5883 	mov	_setCursor_PARM_2,#0x3c
      001773 75*01 00         [24] 5884 	mov	(_setCursor_PARM_2 + 1),#0x00
      001776 90 00 00         [24] 5885 	mov	dptr,#0x0000
      001779 12r04rF6         [24] 5886 	lcall	_setCursor
                                   5887 ;	.\ecen4350_lcd_v4.c:1210: setColorWhite();
      00177C 12r16r24         [24] 5888 	lcall	_setColorWhite
                                   5889 ;	.\ecen4350_lcd_v4.c:1211: LCD_string_write(" <D>");
      00177F 90r05r64         [24] 5890 	mov	dptr,#___str_6
      001782 75 F0 80         [24] 5891 	mov	b,#0x80
      001785 12r10r10         [24] 5892 	lcall	_LCD_string_write
                                   5893 ;	.\ecen4350_lcd_v4.c:1212: setColorDefault();
      001788 12r15rD4         [24] 5894 	lcall	_setColorDefault
                                   5895 ;	.\ecen4350_lcd_v4.c:1213: LCD_string_write(" DUMP\n");
      00178B 90r05r69         [24] 5896 	mov	dptr,#___str_7
      00178E 75 F0 80         [24] 5897 	mov	b,#0x80
      001791 12r10r10         [24] 5898 	lcall	_LCD_string_write
                                   5899 ;	.\ecen4350_lcd_v4.c:1215: setCursor(120, 60);
      001794 75*00 3C         [24] 5900 	mov	_setCursor_PARM_2,#0x3c
      001797 75*01 00         [24] 5901 	mov	(_setCursor_PARM_2 + 1),#0x00
      00179A 90 00 78         [24] 5902 	mov	dptr,#0x0078
      00179D 12r04rF6         [24] 5903 	lcall	_setCursor
                                   5904 ;	.\ecen4350_lcd_v4.c:1216: setColorWhite();
      0017A0 12r16r24         [24] 5905 	lcall	_setColorWhite
                                   5906 ;	.\ecen4350_lcd_v4.c:1217: LCD_string_write(" <B>");
      0017A3 90r05r70         [24] 5907 	mov	dptr,#___str_8
      0017A6 75 F0 80         [24] 5908 	mov	b,#0x80
      0017A9 12r10r10         [24] 5909 	lcall	_LCD_string_write
                                   5910 ;	.\ecen4350_lcd_v4.c:1218: setColorDefault();
      0017AC 12r15rD4         [24] 5911 	lcall	_setColorDefault
                                   5912 ;	.\ecen4350_lcd_v4.c:1219: LCD_string_write(" MOVE\n");
      0017AF 90r05r75         [24] 5913 	mov	dptr,#___str_9
      0017B2 75 F0 80         [24] 5914 	mov	b,#0x80
      0017B5 12r10r10         [24] 5915 	lcall	_LCD_string_write
                                   5916 ;	.\ecen4350_lcd_v4.c:1221: setCursor(0, 100);
      0017B8 75*00 64         [24] 5917 	mov	_setCursor_PARM_2,#0x64
      0017BB 75*01 00         [24] 5918 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017BE 90 00 00         [24] 5919 	mov	dptr,#0x0000
      0017C1 12r04rF6         [24] 5920 	lcall	_setCursor
                                   5921 ;	.\ecen4350_lcd_v4.c:1222: setColorWhite();
      0017C4 12r16r24         [24] 5922 	lcall	_setColorWhite
                                   5923 ;	.\ecen4350_lcd_v4.c:1223: LCD_string_write(" <E>");
      0017C7 90r05r7C         [24] 5924 	mov	dptr,#___str_10
      0017CA 75 F0 80         [24] 5925 	mov	b,#0x80
      0017CD 12r10r10         [24] 5926 	lcall	_LCD_string_write
                                   5927 ;	.\ecen4350_lcd_v4.c:1224: setColorDefault();
      0017D0 12r15rD4         [24] 5928 	lcall	_setColorDefault
                                   5929 ;	.\ecen4350_lcd_v4.c:1225: LCD_string_write(" EDIT\n");
      0017D3 90r05r81         [24] 5930 	mov	dptr,#___str_11
      0017D6 75 F0 80         [24] 5931 	mov	b,#0x80
      0017D9 12r10r10         [24] 5932 	lcall	_LCD_string_write
                                   5933 ;	.\ecen4350_lcd_v4.c:1227: setCursor(120, 100);
      0017DC 75*00 64         [24] 5934 	mov	_setCursor_PARM_2,#0x64
      0017DF 75*01 00         [24] 5935 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017E2 90 00 78         [24] 5936 	mov	dptr,#0x0078
      0017E5 12r04rF6         [24] 5937 	lcall	_setCursor
                                   5938 ;	.\ecen4350_lcd_v4.c:1228: setColorWhite();
      0017E8 12r16r24         [24] 5939 	lcall	_setColorWhite
                                   5940 ;	.\ecen4350_lcd_v4.c:1229: LCD_string_write(" <F>");
      0017EB 90r05r88         [24] 5941 	mov	dptr,#___str_12
      0017EE 75 F0 80         [24] 5942 	mov	b,#0x80
      0017F1 12r10r10         [24] 5943 	lcall	_LCD_string_write
                                   5944 ;	.\ecen4350_lcd_v4.c:1230: setColorDefault();
      0017F4 12r15rD4         [24] 5945 	lcall	_setColorDefault
                                   5946 ;	.\ecen4350_lcd_v4.c:1231: LCD_string_write(" FIND\n");
      0017F7 90r05r8D         [24] 5947 	mov	dptr,#___str_13
      0017FA 75 F0 80         [24] 5948 	mov	b,#0x80
      0017FD 12r10r10         [24] 5949 	lcall	_LCD_string_write
                                   5950 ;	.\ecen4350_lcd_v4.c:1233: setCursor(0, 140);
      001800 75*00 8C         [24] 5951 	mov	_setCursor_PARM_2,#0x8c
      001803 75*01 00         [24] 5952 	mov	(_setCursor_PARM_2 + 1),#0x00
      001806 90 00 00         [24] 5953 	mov	dptr,#0x0000
      001809 12r04rF6         [24] 5954 	lcall	_setCursor
                                   5955 ;	.\ecen4350_lcd_v4.c:1234: setColorWhite();
      00180C 12r16r24         [24] 5956 	lcall	_setColorWhite
                                   5957 ;	.\ecen4350_lcd_v4.c:1235: LCD_string_write(" <C>");
      00180F 90r05r94         [24] 5958 	mov	dptr,#___str_14
      001812 75 F0 80         [24] 5959 	mov	b,#0x80
      001815 12r10r10         [24] 5960 	lcall	_LCD_string_write
                                   5961 ;	.\ecen4350_lcd_v4.c:1236: setColorDefault();
      001818 12r15rD4         [24] 5962 	lcall	_setColorDefault
                                   5963 ;	.\ecen4350_lcd_v4.c:1237: LCD_string_write(" COUNT\n");
      00181B 90r05r99         [24] 5964 	mov	dptr,#___str_15
      00181E 75 F0 80         [24] 5965 	mov	b,#0x80
      001821 12r10r10         [24] 5966 	lcall	_LCD_string_write
                                   5967 ;	.\ecen4350_lcd_v4.c:1239: setCursor(0, 180);
      001824 75*00 B4         [24] 5968 	mov	_setCursor_PARM_2,#0xb4
      001827 75*01 00         [24] 5969 	mov	(_setCursor_PARM_2 + 1),#0x00
      00182A 90 00 00         [24] 5970 	mov	dptr,#0x0000
      00182D 12r04rF6         [24] 5971 	lcall	_setCursor
                                   5972 ;	.\ecen4350_lcd_v4.c:1240: setColorWhite();
      001830 12r16r24         [24] 5973 	lcall	_setColorWhite
                                   5974 ;	.\ecen4350_lcd_v4.c:1241: LCD_string_write(" <A>");
      001833 90r05rA1         [24] 5975 	mov	dptr,#___str_16
      001836 75 F0 80         [24] 5976 	mov	b,#0x80
      001839 12r10r10         [24] 5977 	lcall	_LCD_string_write
                                   5978 ;	.\ecen4350_lcd_v4.c:1242: setColorDefault();
      00183C 12r15rD4         [24] 5979 	lcall	_setColorDefault
                                   5980 ;	.\ecen4350_lcd_v4.c:1243: LCD_string_write(" MEM CHECK\n");
      00183F 90r05rA6         [24] 5981 	mov	dptr,#___str_17
      001842 75 F0 80         [24] 5982 	mov	b,#0x80
      001845 12r10r10         [24] 5983 	lcall	_LCD_string_write
                                   5984 ;	.\ecen4350_lcd_v4.c:1245: setCursor(0, 220);
      001848 75*00 DC         [24] 5985 	mov	_setCursor_PARM_2,#0xdc
      00184B 75*01 00         [24] 5986 	mov	(_setCursor_PARM_2 + 1),#0x00
      00184E 90 00 00         [24] 5987 	mov	dptr,#0x0000
      001851 12r04rF6         [24] 5988 	lcall	_setCursor
                                   5989 ;	.\ecen4350_lcd_v4.c:1246: setColorWhite();
      001854 12r16r24         [24] 5990 	lcall	_setColorWhite
                                   5991 ;	.\ecen4350_lcd_v4.c:1247: LCD_string_write(" <1>");
      001857 90r05rB2         [24] 5992 	mov	dptr,#___str_18
      00185A 75 F0 80         [24] 5993 	mov	b,#0x80
      00185D 12r10r10         [24] 5994 	lcall	_LCD_string_write
                                   5995 ;	.\ecen4350_lcd_v4.c:1248: setColorDefault();
      001860 12r15rD4         [24] 5996 	lcall	_setColorDefault
                                   5997 ;	.\ecen4350_lcd_v4.c:1249: LCD_string_write(" UART");
      001863 90r05rB7         [24] 5998 	mov	dptr,#___str_19
      001866 75 F0 80         [24] 5999 	mov	b,#0x80
      001869 12r10r10         [24] 6000 	lcall	_LCD_string_write
                                   6001 ;	.\ecen4350_lcd_v4.c:1250: setTextSize(1);
      00186C 75 82 01         [24] 6002 	mov	dpl,#0x01
      00186F 12r05r10         [24] 6003 	lcall	_setTextSize
                                   6004 ;	.\ecen4350_lcd_v4.c:1251: if (UART_en == 0) {
      001872 78r01            [12] 6005 	mov	r0,#_UART_en
      001874 E6               [12] 6006 	mov	a,@r0
      001875 70 09            [24] 6007 	jnz	00102$
                                   6008 ;	.\ecen4350_lcd_v4.c:1252: LCD_string_write(" [Disabled]\n");
      001877 90r05rBD         [24] 6009 	mov	dptr,#___str_20
      00187A 75 F0 80         [24] 6010 	mov	b,#0x80
      00187D 12r10r10         [24] 6011 	lcall	_LCD_string_write
      001880                       6012 00102$:
                                   6013 ;	.\ecen4350_lcd_v4.c:1253: } if (UART_en == 1) {
      001880 78r01            [12] 6014 	mov	r0,#_UART_en
      001882 B6 01 09         [24] 6015 	cjne	@r0,#0x01,00104$
                                   6016 ;	.\ecen4350_lcd_v4.c:1254: LCD_string_write(" [Enabled]\n");
      001885 90r05rCA         [24] 6017 	mov	dptr,#___str_21
      001888 75 F0 80         [24] 6018 	mov	b,#0x80
      00188B 12r10r10         [24] 6019 	lcall	_LCD_string_write
      00188E                       6020 00104$:
                                   6021 ;	.\ecen4350_lcd_v4.c:1256: setTextSize(2);
      00188E 75 82 02         [24] 6022 	mov	dpl,#0x02
                                   6023 ;	.\ecen4350_lcd_v4.c:1257: return;
                                   6024 ;	.\ecen4350_lcd_v4.c:1258: }
      001891 02r05r10         [24] 6025 	ljmp	_setTextSize
                                   6026 ;------------------------------------------------------------
                                   6027 ;Allocation info for local variables in function 'dump'
                                   6028 ;------------------------------------------------------------
                                   6029 ;d                         Allocated with name '_dump_d_65536_553'
                                   6030 ;__2621440106              Allocated to registers 
                                   6031 ;__2621440103              Allocated to registers 
                                   6032 ;__2621440104              Allocated to registers 
                                   6033 ;map_address               Allocated to registers 
                                   6034 ;d                         Allocated to registers 
                                   6035 ;__2621440107              Allocated to registers 
                                   6036 ;map_address               Allocated to registers 
                                   6037 ;d                         Allocated to registers 
                                   6038 ;__2621440118              Allocated to registers 
                                   6039 ;__2621440115              Allocated to registers 
                                   6040 ;__2621440112              Allocated to registers 
                                   6041 ;__2621440109              Allocated to registers 
                                   6042 ;__2621440110              Allocated to registers 
                                   6043 ;map_address               Allocated to registers 
                                   6044 ;d                         Allocated to registers 
                                   6045 ;__2621440113              Allocated to registers 
                                   6046 ;map_address               Allocated to registers 
                                   6047 ;d                         Allocated to registers 
                                   6048 ;__2621440116              Allocated to registers 
                                   6049 ;map_address               Allocated to registers 
                                   6050 ;d                         Allocated to registers 
                                   6051 ;__2621440119              Allocated to registers 
                                   6052 ;map_address               Allocated to registers 
                                   6053 ;d                         Allocated to registers 
                                   6054 ;__2621440142              Allocated to registers 
                                   6055 ;__2621440139              Allocated to registers 
                                   6056 ;__2621440136              Allocated to registers 
                                   6057 ;__2621440133              Allocated to registers 
                                   6058 ;__2621440130              Allocated to registers 
                                   6059 ;__2621440127              Allocated to registers 
                                   6060 ;__2621440124              Allocated to registers 
                                   6061 ;__2621440121              Allocated to registers 
                                   6062 ;__2621440122              Allocated to registers 
                                   6063 ;map_address               Allocated to registers 
                                   6064 ;d                         Allocated to registers 
                                   6065 ;__2621440125              Allocated to registers 
                                   6066 ;map_address               Allocated to registers 
                                   6067 ;d                         Allocated to registers 
                                   6068 ;__2621440128              Allocated to registers 
                                   6069 ;map_address               Allocated to registers 
                                   6070 ;d                         Allocated to registers 
                                   6071 ;__2621440131              Allocated to registers 
                                   6072 ;map_address               Allocated to registers 
                                   6073 ;d                         Allocated to registers r3 
                                   6074 ;__2621440134              Allocated to registers 
                                   6075 ;map_address               Allocated to registers 
                                   6076 ;d                         Allocated to registers 
                                   6077 ;__2621440137              Allocated to registers 
                                   6078 ;map_address               Allocated to registers 
                                   6079 ;d                         Allocated to registers 
                                   6080 ;__2621440140              Allocated to registers 
                                   6081 ;map_address               Allocated to registers 
                                   6082 ;d                         Allocated to registers 
                                   6083 ;__2621440143              Allocated to registers 
                                   6084 ;map_address               Allocated to registers 
                                   6085 ;d                         Allocated to registers 
                                   6086 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   6087 ;address                   Allocated with name '_dump_address_65536_553'
                                   6088 ;blockSize                 Allocated to registers r5 
                                   6089 ;blockType                 Allocated to registers r7 
                                   6090 ;exit                      Allocated with name '_dump_exit_65536_553'
                                   6091 ;invalidType               Allocated to registers r5 
                                   6092 ;invalidSize               Allocated to registers r3 
                                   6093 ;------------------------------------------------------------
                                   6094 ;	.\ecen4350_lcd_v4.c:1260: void dump()
                                   6095 ;	-----------------------------------------
                                   6096 ;	 function dump
                                   6097 ;	-----------------------------------------
      001894                       6098 _dump:
                                   6099 ;	.\ecen4350_lcd_v4.c:1265: __idata unsigned char blockType = 0;
      001894 7F 00            [12] 6100 	mov	r7,#0x00
                                   6101 ;	.\ecen4350_lcd_v4.c:1266: __idata unsigned char exit = 1;
      001896 78r10            [12] 6102 	mov	r0,#_dump_exit_65536_553
      001898 76 01            [12] 6103 	mov	@r0,#0x01
                                   6104 ;	.\ecen4350_lcd_v4.c:1267: __idata unsigned char invalidType = 1;
      00189A 7D 01            [12] 6105 	mov	r5,#0x01
                                   6106 ;	.\ecen4350_lcd_v4.c:1268: __idata unsigned char invalidSize = 1;
      00189C 7B 01            [12] 6107 	mov	r3,#0x01
                                   6108 ;	.\ecen4350_lcd_v4.c:1270: clearLCD();
      00189E C0 07            [24] 6109 	push	ar7
      0018A0 C0 05            [24] 6110 	push	ar5
      0018A2 C0 03            [24] 6111 	push	ar3
      0018A4 12r0Dr93         [24] 6112 	lcall	_clearLCD
                                   6113 ;	.\ecen4350_lcd_v4.c:1273: fillTop(GRAY);
      0018A7 90 D6 BA         [24] 6114 	mov	dptr,#0xd6ba
      0018AA 12r0BrC6         [24] 6115 	lcall	_fillTop
                                   6116 ;	.\ecen4350_lcd_v4.c:1274: setTextSize(5);
      0018AD 75 82 05         [24] 6117 	mov	dpl,#0x05
      0018B0 12r05r10         [24] 6118 	lcall	_setTextSize
                                   6119 ;	.\ecen4350_lcd_v4.c:1275: setColorMenu();
      0018B3 12r16r0D         [24] 6120 	lcall	_setColorMenu
                                   6121 ;	.\ecen4350_lcd_v4.c:1276: setCursor(30, 0);
      0018B6 E4               [12] 6122 	clr	a
      0018B7 F5*00            [12] 6123 	mov	_setCursor_PARM_2,a
      0018B9 F5*01            [12] 6124 	mov	(_setCursor_PARM_2 + 1),a
      0018BB 90 00 1E         [24] 6125 	mov	dptr,#0x001e
      0018BE 12r04rF6         [24] 6126 	lcall	_setCursor
                                   6127 ;	.\ecen4350_lcd_v4.c:1277: LCD_string_write("[DUMP]\n");
      0018C1 90r05rD6         [24] 6128 	mov	dptr,#___str_22
      0018C4 75 F0 80         [24] 6129 	mov	b,#0x80
      0018C7 12r10r10         [24] 6130 	lcall	_LCD_string_write
                                   6131 ;	.\ecen4350_lcd_v4.c:1278: setColorDefault();
      0018CA 12r15rD4         [24] 6132 	lcall	_setColorDefault
                                   6133 ;	.\ecen4350_lcd_v4.c:1279: setTextSize(2);
      0018CD 75 82 02         [24] 6134 	mov	dpl,#0x02
      0018D0 12r05r10         [24] 6135 	lcall	_setTextSize
                                   6136 ;	.\ecen4350_lcd_v4.c:1280: setCursor(0, 60);
      0018D3 75*00 3C         [24] 6137 	mov	_setCursor_PARM_2,#0x3c
      0018D6 75*01 00         [24] 6138 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018D9 90 00 00         [24] 6139 	mov	dptr,#0x0000
      0018DC 12r04rF6         [24] 6140 	lcall	_setCursor
                                   6141 ;	.\ecen4350_lcd_v4.c:1281: LCD_string_write(" Address Location:\n");
      0018DF 90r05rDE         [24] 6142 	mov	dptr,#___str_23
      0018E2 75 F0 80         [24] 6143 	mov	b,#0x80
      0018E5 12r10r10         [24] 6144 	lcall	_LCD_string_write
                                   6145 ;	.\ecen4350_lcd_v4.c:1282: setCursor(0, 80);
      0018E8 75*00 50         [24] 6146 	mov	_setCursor_PARM_2,#0x50
      0018EB 75*01 00         [24] 6147 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018EE 90 00 00         [24] 6148 	mov	dptr,#0x0000
      0018F1 12r04rF6         [24] 6149 	lcall	_setCursor
                                   6150 ;	.\ecen4350_lcd_v4.c:1283: setColorGray();
      0018F4 12r16r02         [24] 6151 	lcall	_setColorGray
                                   6152 ;	.\ecen4350_lcd_v4.c:1284: LCD_string_write(" 0x____");
      0018F7 90r05rF2         [24] 6153 	mov	dptr,#___str_24
      0018FA 75 F0 80         [24] 6154 	mov	b,#0x80
      0018FD 12r10r10         [24] 6155 	lcall	_LCD_string_write
                                   6156 ;	.\ecen4350_lcd_v4.c:1285: setColorDefault();
      001900 12r15rD4         [24] 6157 	lcall	_setColorDefault
                                   6158 ;	.\ecen4350_lcd_v4.c:1286: setCursor(0, 140);
      001903 75*00 8C         [24] 6159 	mov	_setCursor_PARM_2,#0x8c
      001906 75*01 00         [24] 6160 	mov	(_setCursor_PARM_2 + 1),#0x00
      001909 90 00 00         [24] 6161 	mov	dptr,#0x0000
      00190C 12r04rF6         [24] 6162 	lcall	_setCursor
                                   6163 ;	.\ecen4350_lcd_v4.c:1287: LCD_string_write(" Choose Block Type:\n");
      00190F 90r05rFA         [24] 6164 	mov	dptr,#___str_25
      001912 75 F0 80         [24] 6165 	mov	b,#0x80
      001915 12r10r10         [24] 6166 	lcall	_LCD_string_write
                                   6167 ;	.\ecen4350_lcd_v4.c:1288: setCursor(0, 160); 
      001918 75*00 A0         [24] 6168 	mov	_setCursor_PARM_2,#0xa0
      00191B 75*01 00         [24] 6169 	mov	(_setCursor_PARM_2 + 1),#0x00
      00191E 90 00 00         [24] 6170 	mov	dptr,#0x0000
      001921 12r04rF6         [24] 6171 	lcall	_setCursor
                                   6172 ;	.\ecen4350_lcd_v4.c:1289: setColorGray();
      001924 12r16r02         [24] 6173 	lcall	_setColorGray
                                   6174 ;	.\ecen4350_lcd_v4.c:1290: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001927 90r06r0F         [24] 6175 	mov	dptr,#___str_26
      00192A 75 F0 80         [24] 6176 	mov	b,#0x80
      00192D 12r10r10         [24] 6177 	lcall	_LCD_string_write
                                   6178 ;	.\ecen4350_lcd_v4.c:1291: setCursor(0, 240);
      001930 75*00 F0         [24] 6179 	mov	_setCursor_PARM_2,#0xf0
      001933 75*01 00         [24] 6180 	mov	(_setCursor_PARM_2 + 1),#0x00
      001936 90 00 00         [24] 6181 	mov	dptr,#0x0000
      001939 12r04rF6         [24] 6182 	lcall	_setCursor
                                   6183 ;	.\ecen4350_lcd_v4.c:1292: LCD_string_write(" Input Size:");
      00193C 90r06r31         [24] 6184 	mov	dptr,#___str_27
      00193F 75 F0 80         [24] 6185 	mov	b,#0x80
      001942 12r10r10         [24] 6186 	lcall	_LCD_string_write
                                   6187 ;	.\ecen4350_lcd_v4.c:1293: setColorGray();
      001945 12r16r02         [24] 6188 	lcall	_setColorGray
                                   6189 ;	.\ecen4350_lcd_v4.c:1294: LCD_string_write(" _");
      001948 90r06r3E         [24] 6190 	mov	dptr,#___str_28
      00194B 75 F0 80         [24] 6191 	mov	b,#0x80
      00194E 12r10r10         [24] 6192 	lcall	_LCD_string_write
                                   6193 ;	.\ecen4350_lcd_v4.c:1301: setColorSelect();
      001951 12r15rDF         [24] 6194 	lcall	_setColorSelect
                                   6195 ;	.\ecen4350_lcd_v4.c:1302: setCursor(0, 60);
      001954 75*00 3C         [24] 6196 	mov	_setCursor_PARM_2,#0x3c
      001957 75*01 00         [24] 6197 	mov	(_setCursor_PARM_2 + 1),#0x00
      00195A 90 00 00         [24] 6198 	mov	dptr,#0x0000
      00195D 12r04rF6         [24] 6199 	lcall	_setCursor
                                   6200 ;	.\ecen4350_lcd_v4.c:1303: LCD_string_write(" Address Location:");
      001960 90r06r41         [24] 6201 	mov	dptr,#___str_29
      001963 75 F0 80         [24] 6202 	mov	b,#0x80
      001966 12r10r10         [24] 6203 	lcall	_LCD_string_write
                                   6204 ;	.\ecen4350_lcd_v4.c:1304: setCursor(0, 80);
      001969 75*00 50         [24] 6205 	mov	_setCursor_PARM_2,#0x50
      00196C 75*01 00         [24] 6206 	mov	(_setCursor_PARM_2 + 1),#0x00
      00196F 90 00 00         [24] 6207 	mov	dptr,#0x0000
      001972 12r04rF6         [24] 6208 	lcall	_setCursor
                                   6209 ;	.\ecen4350_lcd_v4.c:1305: LCD_string_write(" ");
      001975 90r06r54         [24] 6210 	mov	dptr,#___str_30
      001978 75 F0 80         [24] 6211 	mov	b,#0x80
      00197B 12r10r10         [24] 6212 	lcall	_LCD_string_write
                                   6213 ;	.\ecen4350_lcd_v4.c:1306: setColorHighlight1();
      00197E 12r15rEA         [24] 6214 	lcall	_setColorHighlight1
                                   6215 ;	.\ecen4350_lcd_v4.c:1307: LCD_string_write("0x");
      001981 90r05r29         [24] 6216 	mov	dptr,#___str_2
      001984 75 F0 80         [24] 6217 	mov	b,#0x80
      001987 12r10r10         [24] 6218 	lcall	_LCD_string_write
                                   6219 ;	.\ecen4350_lcd_v4.c:1308: address = inputAddress();				// input 16-bit address and store in memory
      00198A 12r16r45         [24] 6220 	lcall	_inputAddress
      00198D 78r0E            [12] 6221 	mov	r0,#_dump_address_65536_553
      00198F A6 82            [24] 6222 	mov	@r0,dpl
      001991 08               [12] 6223 	inc	r0
      001992 A6 83            [24] 6224 	mov	@r0,dph
      001994 D0 03            [24] 6225 	pop	ar3
      001996 D0 05            [24] 6226 	pop	ar5
                                   6227 ;	.\ecen4350_lcd_v4.c:1309: d = (unsigned char __xdata *)(address);
      001998 78r0E            [12] 6228 	mov	r0,#_dump_address_65536_553
      00199A 86 04            [24] 6229 	mov	ar4,@r0
      00199C 08               [12] 6230 	inc	r0
      00199D 86 06            [24] 6231 	mov	ar6,@r0
                                   6232 ;	.\ecen4350_lcd_v4.c:1312: setColorDefault();
      00199F C0 06            [24] 6233 	push	ar6
      0019A1 C0 05            [24] 6234 	push	ar5
      0019A3 C0 04            [24] 6235 	push	ar4
      0019A5 C0 03            [24] 6236 	push	ar3
      0019A7 12r15rD4         [24] 6237 	lcall	_setColorDefault
                                   6238 ;	.\ecen4350_lcd_v4.c:1313: setCursor(0, 60);
      0019AA 75*00 3C         [24] 6239 	mov	_setCursor_PARM_2,#0x3c
      0019AD 75*01 00         [24] 6240 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019B0 90 00 00         [24] 6241 	mov	dptr,#0x0000
      0019B3 12r04rF6         [24] 6242 	lcall	_setCursor
                                   6243 ;	.\ecen4350_lcd_v4.c:1314: LCD_string_write(" Address Location:");
      0019B6 90r06r41         [24] 6244 	mov	dptr,#___str_29
      0019B9 75 F0 80         [24] 6245 	mov	b,#0x80
      0019BC 12r10r10         [24] 6246 	lcall	_LCD_string_write
                                   6247 ;	.\ecen4350_lcd_v4.c:1315: setCursor(0, 80);
      0019BF 75*00 50         [24] 6248 	mov	_setCursor_PARM_2,#0x50
      0019C2 75*01 00         [24] 6249 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019C5 90 00 00         [24] 6250 	mov	dptr,#0x0000
      0019C8 12r04rF6         [24] 6251 	lcall	_setCursor
                                   6252 ;	.\ecen4350_lcd_v4.c:1316: LCD_string_write(" ");
      0019CB 90r06r54         [24] 6253 	mov	dptr,#___str_30
      0019CE 75 F0 80         [24] 6254 	mov	b,#0x80
      0019D1 12r10r10         [24] 6255 	lcall	_LCD_string_write
                                   6256 ;	.\ecen4350_lcd_v4.c:1317: setColorHighlight2();
      0019D4 12r15rF6         [24] 6257 	lcall	_setColorHighlight2
                                   6258 ;	.\ecen4350_lcd_v4.c:1318: LCD_string_write("0x");
      0019D7 90r05r29         [24] 6259 	mov	dptr,#___str_2
      0019DA 75 F0 80         [24] 6260 	mov	b,#0x80
      0019DD 12r10r10         [24] 6261 	lcall	_LCD_string_write
                                   6262 ;	.\ecen4350_lcd_v4.c:1319: print16Hex(address);					// print 16-bit address from stored memory
      0019E0 78r0E            [12] 6263 	mov	r0,#_dump_address_65536_553
      0019E2 86 82            [24] 6264 	mov	dpl,@r0
      0019E4 08               [12] 6265 	inc	r0
      0019E5 86 83            [24] 6266 	mov	dph,@r0
      0019E7 12r14rF8         [24] 6267 	lcall	_print16Hex
                                   6268 ;	.\ecen4350_lcd_v4.c:1322: setColorSelect();
      0019EA 12r15rDF         [24] 6269 	lcall	_setColorSelect
                                   6270 ;	.\ecen4350_lcd_v4.c:1323: setCursor(0, 140);
      0019ED 75*00 8C         [24] 6271 	mov	_setCursor_PARM_2,#0x8c
      0019F0 75*01 00         [24] 6272 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019F3 90 00 00         [24] 6273 	mov	dptr,#0x0000
      0019F6 12r04rF6         [24] 6274 	lcall	_setCursor
                                   6275 ;	.\ecen4350_lcd_v4.c:1324: LCD_string_write(" Choose Block Type:");
      0019F9 90r06r56         [24] 6276 	mov	dptr,#___str_31
      0019FC 75 F0 80         [24] 6277 	mov	b,#0x80
      0019FF 12r10r10         [24] 6278 	lcall	_LCD_string_write
                                   6279 ;	.\ecen4350_lcd_v4.c:1325: setCursor(0, 160); 
      001A02 75*00 A0         [24] 6280 	mov	_setCursor_PARM_2,#0xa0
      001A05 75*01 00         [24] 6281 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A08 90 00 00         [24] 6282 	mov	dptr,#0x0000
      001A0B 12r04rF6         [24] 6283 	lcall	_setCursor
                                   6284 ;	.\ecen4350_lcd_v4.c:1326: setColorWhite();
      001A0E 12r16r24         [24] 6285 	lcall	_setColorWhite
                                   6286 ;	.\ecen4350_lcd_v4.c:1327: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001A11 90r06r0F         [24] 6287 	mov	dptr,#___str_26
      001A14 75 F0 80         [24] 6288 	mov	b,#0x80
      001A17 12r10r10         [24] 6289 	lcall	_LCD_string_write
      001A1A D0 03            [24] 6290 	pop	ar3
      001A1C D0 04            [24] 6291 	pop	ar4
      001A1E D0 05            [24] 6292 	pop	ar5
      001A20 D0 06            [24] 6293 	pop	ar6
      001A22 D0 07            [24] 6294 	pop	ar7
                                   6295 ;	.\ecen4350_lcd_v4.c:1330: while (invalidType) {
      001A24                       6296 00109$:
      001A24 ED               [12] 6297 	mov	a,r5
      001A25 70 03            [24] 6298 	jnz	00235$
      001A27 02r1BrA0         [24] 6299 	ljmp	00153$
      001A2A                       6300 00235$:
                                   6301 ;	.\ecen4350_lcd_v4.c:1331: setCursor(0, 160);
      001A2A 75*00 A0         [24] 6302 	mov	_setCursor_PARM_2,#0xa0
      001A2D 75*01 00         [24] 6303 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A30 90 00 00         [24] 6304 	mov	dptr,#0x0000
      001A33 C0 06            [24] 6305 	push	ar6
      001A35 C0 05            [24] 6306 	push	ar5
      001A37 C0 04            [24] 6307 	push	ar4
      001A39 C0 03            [24] 6308 	push	ar3
      001A3B 12r04rF6         [24] 6309 	lcall	_setCursor
                                   6310 ;	.\ecen4350_lcd_v4.c:1332: setColorWhite();
      001A3E 12r16r24         [24] 6311 	lcall	_setColorWhite
                                   6312 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write("\n\n");
      001A41 90r06r6A         [24] 6313 	mov	dptr,#___str_32
      001A44 75 F0 80         [24] 6314 	mov	b,#0x80
      001A47 12r10r10         [24] 6315 	lcall	_LCD_string_write
                                   6316 ;	.\ecen4350_lcd_v4.c:1335: blockType = inputBlockType();
      001A4A 12r16rE7         [24] 6317 	lcall	_inputBlockType
      001A4D AF 82            [24] 6318 	mov	r7,dpl
      001A4F D0 03            [24] 6319 	pop	ar3
      001A51 D0 04            [24] 6320 	pop	ar4
      001A53 D0 05            [24] 6321 	pop	ar5
      001A55 D0 06            [24] 6322 	pop	ar6
                                   6323 ;	.\ecen4350_lcd_v4.c:1337: if (blockType == 0x1) {
      001A57 BF 01 5B         [24] 6324 	cjne	r7,#0x01,00102$
                                   6325 ;	.\ecen4350_lcd_v4.c:1338: invalidType = 0;
      001A5A 7D 00            [12] 6326 	mov	r5,#0x00
                                   6327 ;	.\ecen4350_lcd_v4.c:1340: setColorDefault();
      001A5C C0 07            [24] 6328 	push	ar7
      001A5E C0 06            [24] 6329 	push	ar6
      001A60 C0 05            [24] 6330 	push	ar5
      001A62 C0 04            [24] 6331 	push	ar4
      001A64 C0 03            [24] 6332 	push	ar3
      001A66 12r15rD4         [24] 6333 	lcall	_setColorDefault
                                   6334 ;	.\ecen4350_lcd_v4.c:1341: setCursor(0, 140);
      001A69 75*00 8C         [24] 6335 	mov	_setCursor_PARM_2,#0x8c
      001A6C 75*01 00         [24] 6336 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A6F 90 00 00         [24] 6337 	mov	dptr,#0x0000
      001A72 12r04rF6         [24] 6338 	lcall	_setCursor
                                   6339 ;	.\ecen4350_lcd_v4.c:1342: LCD_string_write(" Choose Block Type:");
      001A75 90r06r56         [24] 6340 	mov	dptr,#___str_31
      001A78 75 F0 80         [24] 6341 	mov	b,#0x80
      001A7B 12r10r10         [24] 6342 	lcall	_LCD_string_write
                                   6343 ;	.\ecen4350_lcd_v4.c:1343: setCursor(0, 160);
      001A7E 75*00 A0         [24] 6344 	mov	_setCursor_PARM_2,#0xa0
      001A81 75*01 00         [24] 6345 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A84 90 00 00         [24] 6346 	mov	dptr,#0x0000
      001A87 12r04rF6         [24] 6347 	lcall	_setCursor
                                   6348 ;	.\ecen4350_lcd_v4.c:1344: LCD_string_write("  ");
      001A8A 90r06r6D         [24] 6349 	mov	dptr,#___str_33
      001A8D 75 F0 80         [24] 6350 	mov	b,#0x80
      001A90 12r10r10         [24] 6351 	lcall	_LCD_string_write
                                   6352 ;	.\ecen4350_lcd_v4.c:1345: setColorHighlight2();
      001A93 12r15rF6         [24] 6353 	lcall	_setColorHighlight2
                                   6354 ;	.\ecen4350_lcd_v4.c:1346: LCD_string_write("<1> BYTE\n");
      001A96 90r06r70         [24] 6355 	mov	dptr,#___str_34
      001A99 75 F0 80         [24] 6356 	mov	b,#0x80
      001A9C 12r10r10         [24] 6357 	lcall	_LCD_string_write
                                   6358 ;	.\ecen4350_lcd_v4.c:1347: setColorGray();
      001A9F 12r16r02         [24] 6359 	lcall	_setColorGray
                                   6360 ;	.\ecen4350_lcd_v4.c:1348: LCD_string_write("\n\n                \n                ");
      001AA2 90r06r7A         [24] 6361 	mov	dptr,#___str_35
      001AA5 75 F0 80         [24] 6362 	mov	b,#0x80
      001AA8 12r10r10         [24] 6363 	lcall	_LCD_string_write
      001AAB D0 03            [24] 6364 	pop	ar3
      001AAD D0 04            [24] 6365 	pop	ar4
      001AAF D0 05            [24] 6366 	pop	ar5
      001AB1 D0 06            [24] 6367 	pop	ar6
      001AB3 D0 07            [24] 6368 	pop	ar7
      001AB5                       6369 00102$:
                                   6370 ;	.\ecen4350_lcd_v4.c:1349: } if (blockType == 0x2) {
      001AB5 BF 02 5E         [24] 6371 	cjne	r7,#0x02,00104$
                                   6372 ;	.\ecen4350_lcd_v4.c:1350: invalidType = 0;
      001AB8 7D 00            [12] 6373 	mov	r5,#0x00
                                   6374 ;	.\ecen4350_lcd_v4.c:1352: setColorDefault();
      001ABA C0 07            [24] 6375 	push	ar7
      001ABC C0 06            [24] 6376 	push	ar6
      001ABE C0 05            [24] 6377 	push	ar5
      001AC0 C0 04            [24] 6378 	push	ar4
      001AC2 C0 03            [24] 6379 	push	ar3
      001AC4 12r15rD4         [24] 6380 	lcall	_setColorDefault
                                   6381 ;	.\ecen4350_lcd_v4.c:1353: setCursor(0, 140);
      001AC7 75*00 8C         [24] 6382 	mov	_setCursor_PARM_2,#0x8c
      001ACA 75*01 00         [24] 6383 	mov	(_setCursor_PARM_2 + 1),#0x00
      001ACD 90 00 00         [24] 6384 	mov	dptr,#0x0000
      001AD0 12r04rF6         [24] 6385 	lcall	_setCursor
                                   6386 ;	.\ecen4350_lcd_v4.c:1354: LCD_string_write(" Choose Block Type:");
      001AD3 90r06r56         [24] 6387 	mov	dptr,#___str_31
      001AD6 75 F0 80         [24] 6388 	mov	b,#0x80
      001AD9 12r10r10         [24] 6389 	lcall	_LCD_string_write
                                   6390 ;	.\ecen4350_lcd_v4.c:1355: setCursor(0, 160);
      001ADC 75*00 A0         [24] 6391 	mov	_setCursor_PARM_2,#0xa0
      001ADF 75*01 00         [24] 6392 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AE2 90 00 00         [24] 6393 	mov	dptr,#0x0000
      001AE5 12r04rF6         [24] 6394 	lcall	_setCursor
                                   6395 ;	.\ecen4350_lcd_v4.c:1356: setColorGray();
      001AE8 12r16r02         [24] 6396 	lcall	_setColorGray
                                   6397 ;	.\ecen4350_lcd_v4.c:1357: LCD_string_write("\n  ");
      001AEB 90r06r9E         [24] 6398 	mov	dptr,#___str_36
      001AEE 75 F0 80         [24] 6399 	mov	b,#0x80
      001AF1 12r10r10         [24] 6400 	lcall	_LCD_string_write
                                   6401 ;	.\ecen4350_lcd_v4.c:1358: setColorHighlight2();
      001AF4 12r15rF6         [24] 6402 	lcall	_setColorHighlight2
                                   6403 ;	.\ecen4350_lcd_v4.c:1359: LCD_string_write("<2> WORD\n");
      001AF7 90r06rA2         [24] 6404 	mov	dptr,#___str_37
      001AFA 75 F0 80         [24] 6405 	mov	b,#0x80
      001AFD 12r10r10         [24] 6406 	lcall	_LCD_string_write
                                   6407 ;	.\ecen4350_lcd_v4.c:1360: setColorGray();
      001B00 12r16r02         [24] 6408 	lcall	_setColorGray
                                   6409 ;	.\ecen4350_lcd_v4.c:1361: LCD_string_write("\n                \n                ");
      001B03 90r06rAC         [24] 6410 	mov	dptr,#___str_38
      001B06 75 F0 80         [24] 6411 	mov	b,#0x80
      001B09 12r10r10         [24] 6412 	lcall	_LCD_string_write
      001B0C D0 03            [24] 6413 	pop	ar3
      001B0E D0 04            [24] 6414 	pop	ar4
      001B10 D0 05            [24] 6415 	pop	ar5
      001B12 D0 06            [24] 6416 	pop	ar6
      001B14 D0 07            [24] 6417 	pop	ar7
      001B16                       6418 00104$:
                                   6419 ;	.\ecen4350_lcd_v4.c:1362: } if (blockType == 0x4) {
      001B16 BF 04 5E         [24] 6420 	cjne	r7,#0x04,00106$
                                   6421 ;	.\ecen4350_lcd_v4.c:1363: invalidType = 0;
      001B19 7D 00            [12] 6422 	mov	r5,#0x00
                                   6423 ;	.\ecen4350_lcd_v4.c:1365: setColorDefault();
      001B1B C0 07            [24] 6424 	push	ar7
      001B1D C0 06            [24] 6425 	push	ar6
      001B1F C0 05            [24] 6426 	push	ar5
      001B21 C0 04            [24] 6427 	push	ar4
      001B23 C0 03            [24] 6428 	push	ar3
      001B25 12r15rD4         [24] 6429 	lcall	_setColorDefault
                                   6430 ;	.\ecen4350_lcd_v4.c:1366: setCursor(0, 140);
      001B28 75*00 8C         [24] 6431 	mov	_setCursor_PARM_2,#0x8c
      001B2B 75*01 00         [24] 6432 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B2E 90 00 00         [24] 6433 	mov	dptr,#0x0000
      001B31 12r04rF6         [24] 6434 	lcall	_setCursor
                                   6435 ;	.\ecen4350_lcd_v4.c:1367: LCD_string_write(" Choose Block Type:");
      001B34 90r06r56         [24] 6436 	mov	dptr,#___str_31
      001B37 75 F0 80         [24] 6437 	mov	b,#0x80
      001B3A 12r10r10         [24] 6438 	lcall	_LCD_string_write
                                   6439 ;	.\ecen4350_lcd_v4.c:1368: setCursor(0, 160);
      001B3D 75*00 A0         [24] 6440 	mov	_setCursor_PARM_2,#0xa0
      001B40 75*01 00         [24] 6441 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B43 90 00 00         [24] 6442 	mov	dptr,#0x0000
      001B46 12r04rF6         [24] 6443 	lcall	_setCursor
                                   6444 ;	.\ecen4350_lcd_v4.c:1369: setColorGray();
      001B49 12r16r02         [24] 6445 	lcall	_setColorGray
                                   6446 ;	.\ecen4350_lcd_v4.c:1370: LCD_string_write("\n\n  ");
      001B4C 90r06rCF         [24] 6447 	mov	dptr,#___str_39
      001B4F 75 F0 80         [24] 6448 	mov	b,#0x80
      001B52 12r10r10         [24] 6449 	lcall	_LCD_string_write
                                   6450 ;	.\ecen4350_lcd_v4.c:1371: setColorHighlight2();
      001B55 12r15rF6         [24] 6451 	lcall	_setColorHighlight2
                                   6452 ;	.\ecen4350_lcd_v4.c:1372: LCD_string_write("<4> DWORD");
      001B58 90r06rD4         [24] 6453 	mov	dptr,#___str_40
      001B5B 75 F0 80         [24] 6454 	mov	b,#0x80
      001B5E 12r10r10         [24] 6455 	lcall	_LCD_string_write
                                   6456 ;	.\ecen4350_lcd_v4.c:1373: setColorGray();
      001B61 12r16r02         [24] 6457 	lcall	_setColorGray
                                   6458 ;	.\ecen4350_lcd_v4.c:1374: LCD_string_write("\n                \n                ");
      001B64 90r06rAC         [24] 6459 	mov	dptr,#___str_38
      001B67 75 F0 80         [24] 6460 	mov	b,#0x80
      001B6A 12r10r10         [24] 6461 	lcall	_LCD_string_write
      001B6D D0 03            [24] 6462 	pop	ar3
      001B6F D0 04            [24] 6463 	pop	ar4
      001B71 D0 05            [24] 6464 	pop	ar5
      001B73 D0 06            [24] 6465 	pop	ar6
      001B75 D0 07            [24] 6466 	pop	ar7
      001B77                       6467 00106$:
                                   6468 ;	.\ecen4350_lcd_v4.c:1376: if (invalidType) {
      001B77 ED               [12] 6469 	mov	a,r5
      001B78 70 03            [24] 6470 	jnz	00242$
      001B7A 02r1Ar24         [24] 6471 	ljmp	00109$
      001B7D                       6472 00242$:
                                   6473 ;	.\ecen4350_lcd_v4.c:1377: setColorRed();
      001B7D C0 07            [24] 6474 	push	ar7
      001B7F C0 06            [24] 6475 	push	ar6
      001B81 C0 05            [24] 6476 	push	ar5
      001B83 C0 04            [24] 6477 	push	ar4
      001B85 C0 03            [24] 6478 	push	ar3
      001B87 12r16r19         [24] 6479 	lcall	_setColorRed
                                   6480 ;	.\ecen4350_lcd_v4.c:1378: LCD_string_write("\n  Input Error\n  Try Again");
      001B8A 90r06rDE         [24] 6481 	mov	dptr,#___str_41
      001B8D 75 F0 80         [24] 6482 	mov	b,#0x80
      001B90 12r10r10         [24] 6483 	lcall	_LCD_string_write
      001B93 D0 03            [24] 6484 	pop	ar3
      001B95 D0 04            [24] 6485 	pop	ar4
      001B97 D0 05            [24] 6486 	pop	ar5
      001B99 D0 06            [24] 6487 	pop	ar6
      001B9B D0 07            [24] 6488 	pop	ar7
      001B9D 02r1Ar24         [24] 6489 	ljmp	00109$
                                   6490 ;	.\ecen4350_lcd_v4.c:1384: while (invalidSize)
      001BA0                       6491 00153$:
      001BA0                       6492 00115$:
      001BA0 EB               [12] 6493 	mov	a,r3
      001BA1 70 03            [24] 6494 	jnz	00243$
      001BA3 02r1Cr9B         [24] 6495 	ljmp	00117$
      001BA6                       6496 00243$:
                                   6497 ;	.\ecen4350_lcd_v4.c:1387: setCursor(0, 240);
      001BA6 75*00 F0         [24] 6498 	mov	_setCursor_PARM_2,#0xf0
      001BA9 75*01 00         [24] 6499 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BAC 90 00 00         [24] 6500 	mov	dptr,#0x0000
      001BAF C0 07            [24] 6501 	push	ar7
      001BB1 C0 06            [24] 6502 	push	ar6
      001BB3 C0 04            [24] 6503 	push	ar4
      001BB5 C0 03            [24] 6504 	push	ar3
      001BB7 12r04rF6         [24] 6505 	lcall	_setCursor
                                   6506 ;	.\ecen4350_lcd_v4.c:1388: setColorSelect();
      001BBA 12r15rDF         [24] 6507 	lcall	_setColorSelect
                                   6508 ;	.\ecen4350_lcd_v4.c:1389: LCD_string_write(" Input Size: ");
      001BBD 90r06rF9         [24] 6509 	mov	dptr,#___str_42
      001BC0 75 F0 80         [24] 6510 	mov	b,#0x80
      001BC3 12r10r10         [24] 6511 	lcall	_LCD_string_write
                                   6512 ;	.\ecen4350_lcd_v4.c:1390: setColorHighlight1();
      001BC6 12r15rEA         [24] 6513 	lcall	_setColorHighlight1
                                   6514 ;	.\ecen4350_lcd_v4.c:1391: selection = keyDetect();
      001BC9 12r11r2E         [24] 6515 	lcall	_keyDetect
      001BCC AD 82            [24] 6516 	mov	r5,dpl
      001BCE 78r00            [12] 6517 	mov	r0,#_selection
      001BD0 A6 05            [24] 6518 	mov	@r0,ar5
                                   6519 ;	.\ecen4350_lcd_v4.c:1392: write(selection);
      001BD2 8D 82            [24] 6520 	mov	dpl,r5
      001BD4 12r0FrAA         [24] 6521 	lcall	_write
                                   6522 ;	.\ecen4350_lcd_v4.c:1393: blockSize = ASCIItoHex(selection);
      001BD7 78r00            [12] 6523 	mov	r0,#_selection
      001BD9 86 82            [24] 6524 	mov	dpl,@r0
      001BDB 12r13r9C         [24] 6525 	lcall	_ASCIItoHex
      001BDE AD 82            [24] 6526 	mov	r5,dpl
      001BE0 D0 03            [24] 6527 	pop	ar3
      001BE2 D0 04            [24] 6528 	pop	ar4
                                   6529 ;	.\ecen4350_lcd_v4.c:1394: setColorDefault();
      001BE4 C0 05            [24] 6530 	push	ar5
      001BE6 C0 04            [24] 6531 	push	ar4
      001BE8 C0 03            [24] 6532 	push	ar3
      001BEA 12r15rD4         [24] 6533 	lcall	_setColorDefault
      001BED D0 03            [24] 6534 	pop	ar3
      001BEF D0 04            [24] 6535 	pop	ar4
      001BF1 D0 05            [24] 6536 	pop	ar5
      001BF3 D0 06            [24] 6537 	pop	ar6
      001BF5 D0 07            [24] 6538 	pop	ar7
                                   6539 ;	.\ecen4350_lcd_v4.c:1396: if (blockSize != blockType) {
      001BF7 ED               [12] 6540 	mov	a,r5
      001BF8 B5 07 02         [24] 6541 	cjne	a,ar7,00244$
      001BFB 80 4F            [24] 6542 	sjmp	00113$
      001BFD                       6543 00244$:
                                   6544 ;	.\ecen4350_lcd_v4.c:1397: setColorSelect();
      001BFD C0 07            [24] 6545 	push	ar7
      001BFF C0 06            [24] 6546 	push	ar6
      001C01 C0 04            [24] 6547 	push	ar4
      001C03 C0 03            [24] 6548 	push	ar3
      001C05 12r15rDF         [24] 6549 	lcall	_setColorSelect
                                   6550 ;	.\ecen4350_lcd_v4.c:1398: LCD_string_write(" Input Size:");
      001C08 90r06r31         [24] 6551 	mov	dptr,#___str_27
      001C0B 75 F0 80         [24] 6552 	mov	b,#0x80
      001C0E 12r10r10         [24] 6553 	lcall	_LCD_string_write
                                   6554 ;	.\ecen4350_lcd_v4.c:1399: setColorGray();
      001C11 12r16r02         [24] 6555 	lcall	_setColorGray
                                   6556 ;	.\ecen4350_lcd_v4.c:1400: LCD_string_write(" _");
      001C14 90r06r3E         [24] 6557 	mov	dptr,#___str_28
      001C17 75 F0 80         [24] 6558 	mov	b,#0x80
      001C1A 12r10r10         [24] 6559 	lcall	_LCD_string_write
                                   6560 ;	.\ecen4350_lcd_v4.c:1401: setCursor(0,260);
      001C1D 75*00 04         [24] 6561 	mov	_setCursor_PARM_2,#0x04
      001C20 75*01 01         [24] 6562 	mov	(_setCursor_PARM_2 + 1),#0x01
      001C23 90 00 00         [24] 6563 	mov	dptr,#0x0000
      001C26 12r04rF6         [24] 6564 	lcall	_setCursor
                                   6565 ;	.\ecen4350_lcd_v4.c:1402: setColorRed();
      001C29 12r16r19         [24] 6566 	lcall	_setColorRed
                                   6567 ;	.\ecen4350_lcd_v4.c:1403: LCD_string_write(" Mismatch Error\n Try Again");
      001C2C 90r07r07         [24] 6568 	mov	dptr,#___str_43
      001C2F 75 F0 80         [24] 6569 	mov	b,#0x80
      001C32 12r10r10         [24] 6570 	lcall	_LCD_string_write
                                   6571 ;	.\ecen4350_lcd_v4.c:1404: setCursor(0, 240);
      001C35 75*00 F0         [24] 6572 	mov	_setCursor_PARM_2,#0xf0
      001C38 75*01 00         [24] 6573 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C3B 90 00 00         [24] 6574 	mov	dptr,#0x0000
      001C3E 12r04rF6         [24] 6575 	lcall	_setCursor
      001C41 D0 03            [24] 6576 	pop	ar3
      001C43 D0 04            [24] 6577 	pop	ar4
      001C45 D0 06            [24] 6578 	pop	ar6
      001C47 D0 07            [24] 6579 	pop	ar7
      001C49 02r1BrA0         [24] 6580 	ljmp	00115$
      001C4C                       6581 00113$:
                                   6582 ;	.\ecen4350_lcd_v4.c:1406: setCursor(0, 240);
      001C4C 75*00 F0         [24] 6583 	mov	_setCursor_PARM_2,#0xf0
      001C4F 75*01 00         [24] 6584 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C52 90 00 00         [24] 6585 	mov	dptr,#0x0000
      001C55 C0 07            [24] 6586 	push	ar7
      001C57 C0 06            [24] 6587 	push	ar6
      001C59 C0 04            [24] 6588 	push	ar4
      001C5B 12r04rF6         [24] 6589 	lcall	_setCursor
                                   6590 ;	.\ecen4350_lcd_v4.c:1407: setColorDefault();
      001C5E 12r15rD4         [24] 6591 	lcall	_setColorDefault
                                   6592 ;	.\ecen4350_lcd_v4.c:1408: LCD_string_write(" Input Size: ");
      001C61 90r06rF9         [24] 6593 	mov	dptr,#___str_42
      001C64 75 F0 80         [24] 6594 	mov	b,#0x80
      001C67 12r10r10         [24] 6595 	lcall	_LCD_string_write
                                   6596 ;	.\ecen4350_lcd_v4.c:1409: setColorHighlight2();
      001C6A 12r15rF6         [24] 6597 	lcall	_setColorHighlight2
                                   6598 ;	.\ecen4350_lcd_v4.c:1410: write(selection);
      001C6D 78r00            [12] 6599 	mov	r0,#_selection
      001C6F 86 82            [24] 6600 	mov	dpl,@r0
      001C71 12r0FrAA         [24] 6601 	lcall	_write
                                   6602 ;	.\ecen4350_lcd_v4.c:1411: invalidSize = 0;
      001C74 7B 00            [12] 6603 	mov	r3,#0x00
                                   6604 ;	.\ecen4350_lcd_v4.c:1412: setCursor(0,260);
      001C76 75*00 04         [24] 6605 	mov	_setCursor_PARM_2,#0x04
      001C79 75*01 01         [24] 6606 	mov	(_setCursor_PARM_2 + 1),#0x01
      001C7C 90 00 00         [24] 6607 	mov	dptr,#0x0000
      001C7F C0 03            [24] 6608 	push	ar3
      001C81 12r04rF6         [24] 6609 	lcall	_setCursor
                                   6610 ;	.\ecen4350_lcd_v4.c:1413: setColorGreen();
      001C84 12r16r2F         [24] 6611 	lcall	_setColorGreen
                                   6612 ;	.\ecen4350_lcd_v4.c:1414: LCD_string_write(" Match Confirmed\n                ");
      001C87 90r07r22         [24] 6613 	mov	dptr,#___str_44
      001C8A 75 F0 80         [24] 6614 	mov	b,#0x80
      001C8D 12r10r10         [24] 6615 	lcall	_LCD_string_write
      001C90 D0 03            [24] 6616 	pop	ar3
      001C92 D0 04            [24] 6617 	pop	ar4
      001C94 D0 06            [24] 6618 	pop	ar6
      001C96 D0 07            [24] 6619 	pop	ar7
      001C98 02r1BrA0         [24] 6620 	ljmp	00115$
      001C9B                       6621 00117$:
                                   6622 ;	.\ecen4350_lcd_v4.c:1418: delay(40);
      001C9B 90 00 28         [24] 6623 	mov	dptr,#0x0028
      001C9E C0 07            [24] 6624 	push	ar7
      001CA0 C0 06            [24] 6625 	push	ar6
      001CA2 C0 04            [24] 6626 	push	ar4
      001CA4 12r00rE0         [24] 6627 	lcall	_delay
                                   6628 ;	.\ecen4350_lcd_v4.c:1419: clearLCD();
      001CA7 12r0Dr93         [24] 6629 	lcall	_clearLCD
                                   6630 ;	.\ecen4350_lcd_v4.c:1420: fillTop(GRAY);
      001CAA 90 D6 BA         [24] 6631 	mov	dptr,#0xd6ba
      001CAD 12r0BrC6         [24] 6632 	lcall	_fillTop
                                   6633 ;	.\ecen4350_lcd_v4.c:1427: setTextSize(5);
      001CB0 75 82 05         [24] 6634 	mov	dpl,#0x05
      001CB3 12r05r10         [24] 6635 	lcall	_setTextSize
                                   6636 ;	.\ecen4350_lcd_v4.c:1428: setColorMenu();
      001CB6 12r16r0D         [24] 6637 	lcall	_setColorMenu
                                   6638 ;	.\ecen4350_lcd_v4.c:1429: setCursor(30, 0);
      001CB9 E4               [12] 6639 	clr	a
      001CBA F5*00            [12] 6640 	mov	_setCursor_PARM_2,a
      001CBC F5*01            [12] 6641 	mov	(_setCursor_PARM_2 + 1),a
      001CBE 90 00 1E         [24] 6642 	mov	dptr,#0x001e
      001CC1 12r04rF6         [24] 6643 	lcall	_setCursor
                                   6644 ;	.\ecen4350_lcd_v4.c:1430: LCD_string_write("[DUMP]\n");
      001CC4 90r05rD6         [24] 6645 	mov	dptr,#___str_22
      001CC7 75 F0 80         [24] 6646 	mov	b,#0x80
      001CCA 12r10r10         [24] 6647 	lcall	_LCD_string_write
                                   6648 ;	.\ecen4350_lcd_v4.c:1431: setColorDefault();
      001CCD 12r15rD4         [24] 6649 	lcall	_setColorDefault
      001CD0 D0 04            [24] 6650 	pop	ar4
      001CD2 D0 06            [24] 6651 	pop	ar6
      001CD4 D0 07            [24] 6652 	pop	ar7
                                   6653 ;	.\ecen4350_lcd_v4.c:1433: while (exit) {
      001CD6 BF 01 03         [24] 6654 	cjne	r7,#0x01,00245$
      001CD9 EF               [12] 6655 	mov	a,r7
      001CDA 80 01            [24] 6656 	sjmp	00246$
      001CDC                       6657 00245$:
      001CDC E4               [12] 6658 	clr	a
      001CDD                       6659 00246$:
      001CDD FD               [12] 6660 	mov	r5,a
      001CDE E4               [12] 6661 	clr	a
      001CDF BF 02 01         [24] 6662 	cjne	r7,#0x02,00247$
      001CE2 04               [12] 6663 	inc	a
      001CE3                       6664 00247$:
      001CE3 F5*52            [12] 6665 	mov	_dump_sloc0_1_0,a
      001CE5 E4               [12] 6666 	clr	a
      001CE6 BF 04 01         [24] 6667 	cjne	r7,#0x04,00249$
      001CE9 04               [12] 6668 	inc	a
      001CEA                       6669 00249$:
      001CEA FF               [12] 6670 	mov	r7,a
      001CEB                       6671 00126$:
      001CEB 78r10            [12] 6672 	mov	r0,#_dump_exit_65536_553
      001CED E6               [12] 6673 	mov	a,@r0
      001CEE 70 01            [24] 6674 	jnz	00251$
      001CF0 22               [24] 6675 	ret
      001CF1                       6676 00251$:
                                   6677 ;	.\ecen4350_lcd_v4.c:1434: setTextSize(2);
      001CF1 75 82 02         [24] 6678 	mov	dpl,#0x02
      001CF4 C0 07            [24] 6679 	push	ar7
      001CF6 C0 06            [24] 6680 	push	ar6
      001CF8 C0 05            [24] 6681 	push	ar5
      001CFA C0 04            [24] 6682 	push	ar4
      001CFC 12r05r10         [24] 6683 	lcall	_setTextSize
                                   6684 ;	.\ecen4350_lcd_v4.c:1435: setColorWhite();
      001CFF 12r16r24         [24] 6685 	lcall	_setColorWhite
                                   6686 ;	.\ecen4350_lcd_v4.c:1436: setCursor(0, 60);
      001D02 75*00 3C         [24] 6687 	mov	_setCursor_PARM_2,#0x3c
      001D05 75*01 00         [24] 6688 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D08 90 00 00         [24] 6689 	mov	dptr,#0x0000
      001D0B 12r04rF6         [24] 6690 	lcall	_setCursor
                                   6691 ;	.\ecen4350_lcd_v4.c:1437: LCD_string_write(" Address:");
      001D0E 90r07r44         [24] 6692 	mov	dptr,#___str_45
      001D11 75 F0 80         [24] 6693 	mov	b,#0x80
      001D14 12r10r10         [24] 6694 	lcall	_LCD_string_write
                                   6695 ;	.\ecen4350_lcd_v4.c:1438: setColorDefault();
      001D17 12r15rD4         [24] 6696 	lcall	_setColorDefault
                                   6697 ;	.\ecen4350_lcd_v4.c:1439: setCursor(0, 80);
      001D1A 75*00 50         [24] 6698 	mov	_setCursor_PARM_2,#0x50
      001D1D 75*01 00         [24] 6699 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D20 90 00 00         [24] 6700 	mov	dptr,#0x0000
      001D23 12r04rF6         [24] 6701 	lcall	_setCursor
                                   6702 ;	.\ecen4350_lcd_v4.c:1440: LCD_string_write(" 0x");
      001D26 90r07r4E         [24] 6703 	mov	dptr,#___str_46
      001D29 75 F0 80         [24] 6704 	mov	b,#0x80
      001D2C 12r10r10         [24] 6705 	lcall	_LCD_string_write
                                   6706 ;	.\ecen4350_lcd_v4.c:1441: print16Hex(address);
      001D2F 78r0E            [12] 6707 	mov	r0,#_dump_address_65536_553
      001D31 86 82            [24] 6708 	mov	dpl,@r0
      001D33 08               [12] 6709 	inc	r0
      001D34 86 83            [24] 6710 	mov	dph,@r0
      001D36 12r14rF8         [24] 6711 	lcall	_print16Hex
      001D39 D0 04            [24] 6712 	pop	ar4
      001D3B D0 05            [24] 6713 	pop	ar5
      001D3D D0 06            [24] 6714 	pop	ar6
      001D3F D0 07            [24] 6715 	pop	ar7
                                   6716 ;	.\ecen4350_lcd_v4.c:1442: if (blockType == 0x1)
      001D41 ED               [12] 6717 	mov	a,r5
      001D42 70 03            [24] 6718 	jnz	00252$
      001D44 02r1Er09         [24] 6719 	ljmp	00119$
      001D47                       6720 00252$:
                                   6721 ;	.\ecen4350_lcd_v4.c:1444: setCursor(0, 120);
      001D47 75*00 78         [24] 6722 	mov	_setCursor_PARM_2,#0x78
      001D4A 75*01 00         [24] 6723 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D4D 90 00 00         [24] 6724 	mov	dptr,#0x0000
      001D50 C0 07            [24] 6725 	push	ar7
      001D52 C0 06            [24] 6726 	push	ar6
      001D54 C0 05            [24] 6727 	push	ar5
      001D56 C0 04            [24] 6728 	push	ar4
      001D58 12r04rF6         [24] 6729 	lcall	_setCursor
                                   6730 ;	.\ecen4350_lcd_v4.c:1445: setColorWhite();
      001D5B 12r16r24         [24] 6731 	lcall	_setColorWhite
                                   6732 ;	.\ecen4350_lcd_v4.c:1446: LCD_string_write(" Hex Data:");
      001D5E 90r07r52         [24] 6733 	mov	dptr,#___str_47
      001D61 75 F0 80         [24] 6734 	mov	b,#0x80
      001D64 12r10r10         [24] 6735 	lcall	_LCD_string_write
                                   6736 ;	.\ecen4350_lcd_v4.c:1447: setColorDefault();
      001D67 12r15rD4         [24] 6737 	lcall	_setColorDefault
                                   6738 ;	.\ecen4350_lcd_v4.c:1448: setCursor(10, 140);
      001D6A 75*00 8C         [24] 6739 	mov	_setCursor_PARM_2,#0x8c
      001D6D 75*01 00         [24] 6740 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D70 90 00 0A         [24] 6741 	mov	dptr,#0x000a
      001D73 12r04rF6         [24] 6742 	lcall	_setCursor
      001D76 D0 04            [24] 6743 	pop	ar4
      001D78 D0 05            [24] 6744 	pop	ar5
      001D7A D0 06            [24] 6745 	pop	ar6
                                   6746 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6747 ;	assignBit
      001D7C C2 B5            [12] 6748 	clr	_P3_5
                                   6749 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001D7E 8C 82            [24] 6750 	mov	dpl,r4
      001D80 8E 83            [24] 6751 	mov	dph,r6
      001D82 E0               [24] 6752 	movx	a,@dptr
      001D83 F5 82            [12] 6753 	mov	dpl,a
                                   6754 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6755 ;	assignBit
      001D85 D2 B5            [12] 6756 	setb	_P3_5
                                   6757 ;	.\ecen4350_lcd_v4.c:1449: print8Hex(ramRead8(d));
      001D87 C0 06            [24] 6758 	push	ar6
      001D89 C0 05            [24] 6759 	push	ar5
      001D8B C0 04            [24] 6760 	push	ar4
      001D8D 12r14rE1         [24] 6761 	lcall	_print8Hex
                                   6762 ;	.\ecen4350_lcd_v4.c:1451: setCursor(0, 180);
      001D90 75*00 B4         [24] 6763 	mov	_setCursor_PARM_2,#0xb4
      001D93 75*01 00         [24] 6764 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D96 90 00 00         [24] 6765 	mov	dptr,#0x0000
      001D99 12r04rF6         [24] 6766 	lcall	_setCursor
                                   6767 ;	.\ecen4350_lcd_v4.c:1452: setColorWhite();
      001D9C 12r16r24         [24] 6768 	lcall	_setColorWhite
                                   6769 ;	.\ecen4350_lcd_v4.c:1453: LCD_string_write(" ASCII Data:");
      001D9F 90r07r5D         [24] 6770 	mov	dptr,#___str_48
      001DA2 75 F0 80         [24] 6771 	mov	b,#0x80
      001DA5 12r10r10         [24] 6772 	lcall	_LCD_string_write
                                   6773 ;	.\ecen4350_lcd_v4.c:1454: setColorDefault();
      001DA8 12r15rD4         [24] 6774 	lcall	_setColorDefault
                                   6775 ;	.\ecen4350_lcd_v4.c:1455: setCursor(10, 200);
      001DAB 75*00 C8         [24] 6776 	mov	_setCursor_PARM_2,#0xc8
      001DAE 75*01 00         [24] 6777 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DB1 90 00 0A         [24] 6778 	mov	dptr,#0x000a
      001DB4 12r04rF6         [24] 6779 	lcall	_setCursor
      001DB7 D0 04            [24] 6780 	pop	ar4
      001DB9 D0 05            [24] 6781 	pop	ar5
      001DBB D0 06            [24] 6782 	pop	ar6
                                   6783 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6784 ;	assignBit
      001DBD C2 B5            [12] 6785 	clr	_P3_5
                                   6786 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001DBF 8C 82            [24] 6787 	mov	dpl,r4
      001DC1 8E 83            [24] 6788 	mov	dph,r6
      001DC3 E0               [24] 6789 	movx	a,@dptr
      001DC4 F5 82            [12] 6790 	mov	dpl,a
                                   6791 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6792 ;	assignBit
      001DC6 D2 B5            [12] 6793 	setb	_P3_5
                                   6794 ;	.\ecen4350_lcd_v4.c:1456: print8ASCII(ramRead8(d));
      001DC8 C0 06            [24] 6795 	push	ar6
      001DCA C0 05            [24] 6796 	push	ar5
      001DCC C0 04            [24] 6797 	push	ar4
      001DCE 12r15r63         [24] 6798 	lcall	_print8ASCII
                                   6799 ;	.\ecen4350_lcd_v4.c:1458: setCursor(0, 240);
      001DD1 75*00 F0         [24] 6800 	mov	_setCursor_PARM_2,#0xf0
      001DD4 75*01 00         [24] 6801 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DD7 90 00 00         [24] 6802 	mov	dptr,#0x0000
      001DDA 12r04rF6         [24] 6803 	lcall	_setCursor
                                   6804 ;	.\ecen4350_lcd_v4.c:1459: setColorWhite();
      001DDD 12r16r24         [24] 6805 	lcall	_setColorWhite
                                   6806 ;	.\ecen4350_lcd_v4.c:1460: LCD_string_write(" Data Type:");
      001DE0 90r07r6A         [24] 6807 	mov	dptr,#___str_49
      001DE3 75 F0 80         [24] 6808 	mov	b,#0x80
      001DE6 12r10r10         [24] 6809 	lcall	_LCD_string_write
                                   6810 ;	.\ecen4350_lcd_v4.c:1461: setCursor(0, 260);
      001DE9 75*00 04         [24] 6811 	mov	_setCursor_PARM_2,#0x04
      001DEC 75*01 01         [24] 6812 	mov	(_setCursor_PARM_2 + 1),#0x01
      001DEF 90 00 00         [24] 6813 	mov	dptr,#0x0000
      001DF2 12r04rF6         [24] 6814 	lcall	_setCursor
                                   6815 ;	.\ecen4350_lcd_v4.c:1462: setColorDefault();
      001DF5 12r15rD4         [24] 6816 	lcall	_setColorDefault
                                   6817 ;	.\ecen4350_lcd_v4.c:1463: LCD_string_write(" BYTE");
      001DF8 90r07r76         [24] 6818 	mov	dptr,#___str_50
      001DFB 75 F0 80         [24] 6819 	mov	b,#0x80
      001DFE 12r10r10         [24] 6820 	lcall	_LCD_string_write
      001E01 D0 04            [24] 6821 	pop	ar4
      001E03 D0 05            [24] 6822 	pop	ar5
      001E05 D0 06            [24] 6823 	pop	ar6
      001E07 D0 07            [24] 6824 	pop	ar7
      001E09                       6825 00119$:
                                   6826 ;	.\ecen4350_lcd_v4.c:1465: if (blockType == 0x2)
      001E09 E5*52            [12] 6827 	mov	a,_dump_sloc0_1_0
      001E0B 70 03            [24] 6828 	jnz	00253$
      001E0D 02r1Fr2D         [24] 6829 	ljmp	00121$
      001E10                       6830 00253$:
                                   6831 ;	.\ecen4350_lcd_v4.c:1467: setCursor(0, 120);
      001E10 C0 07            [24] 6832 	push	ar7
      001E12 75*00 78         [24] 6833 	mov	_setCursor_PARM_2,#0x78
      001E15 75*01 00         [24] 6834 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E18 90 00 00         [24] 6835 	mov	dptr,#0x0000
      001E1B C0 07            [24] 6836 	push	ar7
      001E1D C0 06            [24] 6837 	push	ar6
      001E1F C0 05            [24] 6838 	push	ar5
      001E21 C0 04            [24] 6839 	push	ar4
      001E23 12r04rF6         [24] 6840 	lcall	_setCursor
                                   6841 ;	.\ecen4350_lcd_v4.c:1468: setColorWhite();
      001E26 12r16r24         [24] 6842 	lcall	_setColorWhite
                                   6843 ;	.\ecen4350_lcd_v4.c:1469: LCD_string_write(" Hex Data:");
      001E29 90r07r52         [24] 6844 	mov	dptr,#___str_47
      001E2C 75 F0 80         [24] 6845 	mov	b,#0x80
      001E2F 12r10r10         [24] 6846 	lcall	_LCD_string_write
                                   6847 ;	.\ecen4350_lcd_v4.c:1470: setColorDefault();
      001E32 12r15rD4         [24] 6848 	lcall	_setColorDefault
                                   6849 ;	.\ecen4350_lcd_v4.c:1471: setCursor(10, 140);
      001E35 75*00 8C         [24] 6850 	mov	_setCursor_PARM_2,#0x8c
      001E38 75*01 00         [24] 6851 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E3B 90 00 0A         [24] 6852 	mov	dptr,#0x000a
      001E3E 12r04rF6         [24] 6853 	lcall	_setCursor
      001E41 D0 04            [24] 6854 	pop	ar4
      001E43 D0 05            [24] 6855 	pop	ar5
      001E45 D0 06            [24] 6856 	pop	ar6
                                   6857 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6858 ;	assignBit
      001E47 C2 B5            [12] 6859 	clr	_P3_5
                                   6860 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001E49 8C 82            [24] 6861 	mov	dpl,r4
      001E4B 8E 83            [24] 6862 	mov	dph,r6
      001E4D E0               [24] 6863 	movx	a,@dptr
      001E4E F5 82            [12] 6864 	mov	dpl,a
                                   6865 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6866 ;	assignBit
      001E50 D2 B5            [12] 6867 	setb	_P3_5
                                   6868 ;	.\ecen4350_lcd_v4.c:1472: print8Hex(ramRead8(d));
      001E52 C0 06            [24] 6869 	push	ar6
      001E54 C0 05            [24] 6870 	push	ar5
      001E56 C0 04            [24] 6871 	push	ar4
      001E58 12r14rE1         [24] 6872 	lcall	_print8Hex
      001E5B D0 04            [24] 6873 	pop	ar4
      001E5D D0 05            [24] 6874 	pop	ar5
      001E5F D0 06            [24] 6875 	pop	ar6
      001E61 D0 07            [24] 6876 	pop	ar7
                                   6877 ;	.\ecen4350_lcd_v4.c:1473: d++;
      001E63 74 01            [12] 6878 	mov	a,#0x01
      001E65 2C               [12] 6879 	add	a,r4
      001E66 FB               [12] 6880 	mov	r3,a
      001E67 E4               [12] 6881 	clr	a
      001E68 3E               [12] 6882 	addc	a,r6
      001E69 FF               [12] 6883 	mov	r7,a
                                   6884 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6885 ;	assignBit
      001E6A C2 B5            [12] 6886 	clr	_P3_5
                                   6887 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001E6C 8B 82            [24] 6888 	mov	dpl,r3
      001E6E 8F 83            [24] 6889 	mov	dph,r7
      001E70 E0               [24] 6890 	movx	a,@dptr
      001E71 F5 82            [12] 6891 	mov	dpl,a
                                   6892 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6893 ;	assignBit
      001E73 D2 B5            [12] 6894 	setb	_P3_5
                                   6895 ;	.\ecen4350_lcd_v4.c:1474: print8Hex(ramRead8(d));
      001E75 C0 07            [24] 6896 	push	ar7
      001E77 C0 05            [24] 6897 	push	ar5
      001E79 C0 03            [24] 6898 	push	ar3
      001E7B 12r14rE1         [24] 6899 	lcall	_print8Hex
      001E7E D0 03            [24] 6900 	pop	ar3
      001E80 D0 05            [24] 6901 	pop	ar5
      001E82 D0 07            [24] 6902 	pop	ar7
                                   6903 ;	.\ecen4350_lcd_v4.c:1475: d--;
      001E84 1B               [12] 6904 	dec	r3
      001E85 BB FF 01         [24] 6905 	cjne	r3,#0xff,00254$
      001E88 1F               [12] 6906 	dec	r7
      001E89                       6907 00254$:
                                   6908 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 180);
      001E89 75*00 B4         [24] 6909 	mov	_setCursor_PARM_2,#0xb4
      001E8C 75*01 00         [24] 6910 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E8F 90 00 00         [24] 6911 	mov	dptr,#0x0000
      001E92 C0 07            [24] 6912 	push	ar7
      001E94 C0 05            [24] 6913 	push	ar5
      001E96 C0 03            [24] 6914 	push	ar3
      001E98 12r04rF6         [24] 6915 	lcall	_setCursor
                                   6916 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      001E9B 12r16r24         [24] 6917 	lcall	_setColorWhite
                                   6918 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" ASCII Data:");
      001E9E 90r07r5D         [24] 6919 	mov	dptr,#___str_48
      001EA1 75 F0 80         [24] 6920 	mov	b,#0x80
      001EA4 12r10r10         [24] 6921 	lcall	_LCD_string_write
                                   6922 ;	.\ecen4350_lcd_v4.c:1480: setColorDefault();
      001EA7 12r15rD4         [24] 6923 	lcall	_setColorDefault
                                   6924 ;	.\ecen4350_lcd_v4.c:1481: setCursor(10, 200);
      001EAA 75*00 C8         [24] 6925 	mov	_setCursor_PARM_2,#0xc8
      001EAD 75*01 00         [24] 6926 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EB0 90 00 0A         [24] 6927 	mov	dptr,#0x000a
      001EB3 12r04rF6         [24] 6928 	lcall	_setCursor
      001EB6 D0 03            [24] 6929 	pop	ar3
      001EB8 D0 05            [24] 6930 	pop	ar5
      001EBA D0 07            [24] 6931 	pop	ar7
                                   6932 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6933 ;	assignBit
      001EBC C2 B5            [12] 6934 	clr	_P3_5
                                   6935 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001EBE 8B 82            [24] 6936 	mov	dpl,r3
      001EC0 8F 83            [24] 6937 	mov	dph,r7
      001EC2 E0               [24] 6938 	movx	a,@dptr
      001EC3 F5 82            [12] 6939 	mov	dpl,a
                                   6940 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6941 ;	assignBit
      001EC5 D2 B5            [12] 6942 	setb	_P3_5
                                   6943 ;	.\ecen4350_lcd_v4.c:1482: print8ASCII(ramRead8(d));
      001EC7 C0 07            [24] 6944 	push	ar7
      001EC9 C0 05            [24] 6945 	push	ar5
      001ECB C0 03            [24] 6946 	push	ar3
      001ECD 12r15r63         [24] 6947 	lcall	_print8ASCII
      001ED0 D0 03            [24] 6948 	pop	ar3
      001ED2 D0 05            [24] 6949 	pop	ar5
      001ED4 D0 07            [24] 6950 	pop	ar7
                                   6951 ;	.\ecen4350_lcd_v4.c:1483: d++;
      001ED6 74 01            [12] 6952 	mov	a,#0x01
      001ED8 2B               [12] 6953 	add	a,r3
      001ED9 FC               [12] 6954 	mov	r4,a
      001EDA E4               [12] 6955 	clr	a
      001EDB 3F               [12] 6956 	addc	a,r7
      001EDC FE               [12] 6957 	mov	r6,a
                                   6958 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6959 ;	assignBit
      001EDD C2 B5            [12] 6960 	clr	_P3_5
                                   6961 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001EDF 8C 82            [24] 6962 	mov	dpl,r4
      001EE1 8E 83            [24] 6963 	mov	dph,r6
      001EE3 E0               [24] 6964 	movx	a,@dptr
      001EE4 F5 82            [12] 6965 	mov	dpl,a
                                   6966 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6967 ;	assignBit
      001EE6 D2 B5            [12] 6968 	setb	_P3_5
                                   6969 ;	.\ecen4350_lcd_v4.c:1484: print8ASCII(ramRead8(d));
      001EE8 C0 07            [24] 6970 	push	ar7
      001EEA C0 06            [24] 6971 	push	ar6
      001EEC C0 05            [24] 6972 	push	ar5
      001EEE C0 04            [24] 6973 	push	ar4
      001EF0 12r15r63         [24] 6974 	lcall	_print8ASCII
                                   6975 ;	.\ecen4350_lcd_v4.c:1486: setCursor(0, 240);
      001EF3 75*00 F0         [24] 6976 	mov	_setCursor_PARM_2,#0xf0
      001EF6 75*01 00         [24] 6977 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EF9 90 00 00         [24] 6978 	mov	dptr,#0x0000
      001EFC 12r04rF6         [24] 6979 	lcall	_setCursor
                                   6980 ;	.\ecen4350_lcd_v4.c:1487: setColorWhite();
      001EFF 12r16r24         [24] 6981 	lcall	_setColorWhite
                                   6982 ;	.\ecen4350_lcd_v4.c:1488: LCD_string_write(" Data Type:");
      001F02 90r07r6A         [24] 6983 	mov	dptr,#___str_49
      001F05 75 F0 80         [24] 6984 	mov	b,#0x80
      001F08 12r10r10         [24] 6985 	lcall	_LCD_string_write
                                   6986 ;	.\ecen4350_lcd_v4.c:1489: setColorDefault();
      001F0B 12r15rD4         [24] 6987 	lcall	_setColorDefault
                                   6988 ;	.\ecen4350_lcd_v4.c:1490: setCursor(0, 260);
      001F0E 75*00 04         [24] 6989 	mov	_setCursor_PARM_2,#0x04
      001F11 75*01 01         [24] 6990 	mov	(_setCursor_PARM_2 + 1),#0x01
      001F14 90 00 00         [24] 6991 	mov	dptr,#0x0000
      001F17 12r04rF6         [24] 6992 	lcall	_setCursor
                                   6993 ;	.\ecen4350_lcd_v4.c:1491: LCD_string_write(" WORD");
      001F1A 90r07r7C         [24] 6994 	mov	dptr,#___str_51
      001F1D 75 F0 80         [24] 6995 	mov	b,#0x80
      001F20 12r10r10         [24] 6996 	lcall	_LCD_string_write
      001F23 D0 04            [24] 6997 	pop	ar4
      001F25 D0 05            [24] 6998 	pop	ar5
      001F27 D0 06            [24] 6999 	pop	ar6
      001F29 D0 07            [24] 7000 	pop	ar7
                                   7001 ;	.\ecen4350_lcd_v4.c:1547: return;
      001F2B D0 07            [24] 7002 	pop	ar7
                                   7003 ;	.\ecen4350_lcd_v4.c:1491: LCD_string_write(" WORD");
      001F2D                       7004 00121$:
                                   7005 ;	.\ecen4350_lcd_v4.c:1493: if (blockType == 0x4)
      001F2D EF               [12] 7006 	mov	a,r7
      001F2E 70 03            [24] 7007 	jnz	00255$
      001F30 02r20rDA         [24] 7008 	ljmp	00123$
      001F33                       7009 00255$:
                                   7010 ;	.\ecen4350_lcd_v4.c:1495: setCursor(0, 120);
      001F33 75*00 78         [24] 7011 	mov	_setCursor_PARM_2,#0x78
      001F36 75*01 00         [24] 7012 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F39 90 00 00         [24] 7013 	mov	dptr,#0x0000
      001F3C C0 07            [24] 7014 	push	ar7
      001F3E C0 06            [24] 7015 	push	ar6
      001F40 C0 05            [24] 7016 	push	ar5
      001F42 C0 04            [24] 7017 	push	ar4
      001F44 12r04rF6         [24] 7018 	lcall	_setCursor
                                   7019 ;	.\ecen4350_lcd_v4.c:1496: setColorWhite();
      001F47 12r16r24         [24] 7020 	lcall	_setColorWhite
                                   7021 ;	.\ecen4350_lcd_v4.c:1497: LCD_string_write(" Hex Data:");
      001F4A 90r07r52         [24] 7022 	mov	dptr,#___str_47
      001F4D 75 F0 80         [24] 7023 	mov	b,#0x80
      001F50 12r10r10         [24] 7024 	lcall	_LCD_string_write
                                   7025 ;	.\ecen4350_lcd_v4.c:1498: setColorDefault();
      001F53 12r15rD4         [24] 7026 	lcall	_setColorDefault
                                   7027 ;	.\ecen4350_lcd_v4.c:1499: setCursor(10, 140);
      001F56 75*00 8C         [24] 7028 	mov	_setCursor_PARM_2,#0x8c
      001F59 75*01 00         [24] 7029 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F5C 90 00 0A         [24] 7030 	mov	dptr,#0x000a
      001F5F 12r04rF6         [24] 7031 	lcall	_setCursor
      001F62 D0 04            [24] 7032 	pop	ar4
      001F64 D0 05            [24] 7033 	pop	ar5
      001F66 D0 06            [24] 7034 	pop	ar6
                                   7035 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7036 ;	assignBit
      001F68 C2 B5            [12] 7037 	clr	_P3_5
                                   7038 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001F6A 8C 82            [24] 7039 	mov	dpl,r4
      001F6C 8E 83            [24] 7040 	mov	dph,r6
      001F6E E0               [24] 7041 	movx	a,@dptr
      001F6F F5 82            [12] 7042 	mov	dpl,a
                                   7043 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7044 ;	assignBit
      001F71 D2 B5            [12] 7045 	setb	_P3_5
                                   7046 ;	.\ecen4350_lcd_v4.c:1500: print8Hex(ramRead8(d));
      001F73 C0 06            [24] 7047 	push	ar6
      001F75 C0 05            [24] 7048 	push	ar5
      001F77 C0 04            [24] 7049 	push	ar4
      001F79 12r14rE1         [24] 7050 	lcall	_print8Hex
      001F7C D0 04            [24] 7051 	pop	ar4
      001F7E D0 05            [24] 7052 	pop	ar5
      001F80 D0 06            [24] 7053 	pop	ar6
                                   7054 ;	.\ecen4350_lcd_v4.c:1501: d++;
      001F82 74 01            [12] 7055 	mov	a,#0x01
      001F84 2C               [12] 7056 	add	a,r4
      001F85 FA               [12] 7057 	mov	r2,a
      001F86 E4               [12] 7058 	clr	a
      001F87 3E               [12] 7059 	addc	a,r6
      001F88 FB               [12] 7060 	mov	r3,a
                                   7061 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7062 ;	assignBit
      001F89 C2 B5            [12] 7063 	clr	_P3_5
                                   7064 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001F8B 8A 82            [24] 7065 	mov	dpl,r2
      001F8D 8B 83            [24] 7066 	mov	dph,r3
      001F8F E0               [24] 7067 	movx	a,@dptr
      001F90 F5 82            [12] 7068 	mov	dpl,a
                                   7069 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7070 ;	assignBit
      001F92 D2 B5            [12] 7071 	setb	_P3_5
                                   7072 ;	.\ecen4350_lcd_v4.c:1502: print8Hex(ramRead8(d));
      001F94 C0 05            [24] 7073 	push	ar5
      001F96 C0 03            [24] 7074 	push	ar3
      001F98 C0 02            [24] 7075 	push	ar2
      001F9A 12r14rE1         [24] 7076 	lcall	_print8Hex
      001F9D D0 02            [24] 7077 	pop	ar2
      001F9F D0 03            [24] 7078 	pop	ar3
      001FA1 D0 05            [24] 7079 	pop	ar5
      001FA3 D0 07            [24] 7080 	pop	ar7
                                   7081 ;	.\ecen4350_lcd_v4.c:1503: d++;
      001FA5 0A               [12] 7082 	inc	r2
      001FA6 BA 00 01         [24] 7083 	cjne	r2,#0x00,00256$
      001FA9 0B               [12] 7084 	inc	r3
      001FAA                       7085 00256$:
                                   7086 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7087 ;	assignBit
      001FAA C2 B5            [12] 7088 	clr	_P3_5
                                   7089 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001FAC 8A 82            [24] 7090 	mov	dpl,r2
      001FAE 8B 83            [24] 7091 	mov	dph,r3
      001FB0 E0               [24] 7092 	movx	a,@dptr
      001FB1 F5 82            [12] 7093 	mov	dpl,a
                                   7094 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7095 ;	assignBit
      001FB3 D2 B5            [12] 7096 	setb	_P3_5
                                   7097 ;	.\ecen4350_lcd_v4.c:1504: print8Hex(ramRead8(d));
      001FB5 C0 07            [24] 7098 	push	ar7
      001FB7 C0 05            [24] 7099 	push	ar5
      001FB9 C0 03            [24] 7100 	push	ar3
      001FBB C0 02            [24] 7101 	push	ar2
      001FBD 12r14rE1         [24] 7102 	lcall	_print8Hex
      001FC0 D0 02            [24] 7103 	pop	ar2
      001FC2 D0 03            [24] 7104 	pop	ar3
                                   7105 ;	.\ecen4350_lcd_v4.c:1505: d++;
      001FC4 74 01            [12] 7106 	mov	a,#0x01
      001FC6 2A               [12] 7107 	add	a,r2
      001FC7 F5*50            [12] 7108 	mov	_dump_d_65536_553,a
      001FC9 E4               [12] 7109 	clr	a
      001FCA 3B               [12] 7110 	addc	a,r3
      001FCB F5*51            [12] 7111 	mov	(_dump_d_65536_553 + 1),a
                                   7112 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7113 ;	assignBit
      001FCD C2 B5            [12] 7114 	clr	_P3_5
                                   7115 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001FCF 85*50 82         [24] 7116 	mov	dpl,_dump_d_65536_553
      001FD2 85*51 83         [24] 7117 	mov	dph,(_dump_d_65536_553 + 1)
      001FD5 E0               [24] 7118 	movx	a,@dptr
      001FD6 FB               [12] 7119 	mov	r3,a
                                   7120 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7121 ;	assignBit
      001FD7 D2 B5            [12] 7122 	setb	_P3_5
                                   7123 ;	.\ecen4350_lcd_v4.c:1506: print8Hex(ramRead8(d));
      001FD9 8B 82            [24] 7124 	mov	dpl,r3
      001FDB 12r14rE1         [24] 7125 	lcall	_print8Hex
      001FDE D0 05            [24] 7126 	pop	ar5
      001FE0 D0 07            [24] 7127 	pop	ar7
                                   7128 ;	.\ecen4350_lcd_v4.c:1507: d--;
      001FE2 E5*50            [12] 7129 	mov	a,_dump_d_65536_553
      001FE4 24 FF            [12] 7130 	add	a,#0xff
      001FE6 FA               [12] 7131 	mov	r2,a
      001FE7 E5*51            [12] 7132 	mov	a,(_dump_d_65536_553 + 1)
      001FE9 34 FF            [12] 7133 	addc	a,#0xff
      001FEB FB               [12] 7134 	mov	r3,a
                                   7135 ;	.\ecen4350_lcd_v4.c:1508: d--;
      001FEC 1A               [12] 7136 	dec	r2
      001FED BA FF 01         [24] 7137 	cjne	r2,#0xff,00257$
      001FF0 1B               [12] 7138 	dec	r3
      001FF1                       7139 00257$:
                                   7140 ;	.\ecen4350_lcd_v4.c:1509: d--;
      001FF1 1A               [12] 7141 	dec	r2
      001FF2 BA FF 01         [24] 7142 	cjne	r2,#0xff,00258$
      001FF5 1B               [12] 7143 	dec	r3
      001FF6                       7144 00258$:
                                   7145 ;	.\ecen4350_lcd_v4.c:1511: setCursor(0, 180);
      001FF6 75*00 B4         [24] 7146 	mov	_setCursor_PARM_2,#0xb4
      001FF9 75*01 00         [24] 7147 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FFC 90 00 00         [24] 7148 	mov	dptr,#0x0000
      001FFF C0 07            [24] 7149 	push	ar7
      002001 C0 05            [24] 7150 	push	ar5
      002003 C0 03            [24] 7151 	push	ar3
      002005 C0 02            [24] 7152 	push	ar2
      002007 12r04rF6         [24] 7153 	lcall	_setCursor
                                   7154 ;	.\ecen4350_lcd_v4.c:1512: setColorWhite();
      00200A 12r16r24         [24] 7155 	lcall	_setColorWhite
                                   7156 ;	.\ecen4350_lcd_v4.c:1513: LCD_string_write(" ASCII Data:");
      00200D 90r07r5D         [24] 7157 	mov	dptr,#___str_48
      002010 75 F0 80         [24] 7158 	mov	b,#0x80
      002013 12r10r10         [24] 7159 	lcall	_LCD_string_write
                                   7160 ;	.\ecen4350_lcd_v4.c:1514: setColorDefault();
      002016 12r15rD4         [24] 7161 	lcall	_setColorDefault
                                   7162 ;	.\ecen4350_lcd_v4.c:1515: setCursor(10, 200);
      002019 75*00 C8         [24] 7163 	mov	_setCursor_PARM_2,#0xc8
      00201C 75*01 00         [24] 7164 	mov	(_setCursor_PARM_2 + 1),#0x00
      00201F 90 00 0A         [24] 7165 	mov	dptr,#0x000a
      002022 12r04rF6         [24] 7166 	lcall	_setCursor
      002025 D0 02            [24] 7167 	pop	ar2
      002027 D0 03            [24] 7168 	pop	ar3
                                   7169 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7170 ;	assignBit
      002029 C2 B5            [12] 7171 	clr	_P3_5
                                   7172 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      00202B 8A 82            [24] 7173 	mov	dpl,r2
      00202D 8B 83            [24] 7174 	mov	dph,r3
      00202F E0               [24] 7175 	movx	a,@dptr
      002030 F5 82            [12] 7176 	mov	dpl,a
                                   7177 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7178 ;	assignBit
      002032 D2 B5            [12] 7179 	setb	_P3_5
                                   7180 ;	.\ecen4350_lcd_v4.c:1516: print8ASCII(ramRead8(d));
      002034 C0 03            [24] 7181 	push	ar3
      002036 C0 02            [24] 7182 	push	ar2
      002038 12r15r63         [24] 7183 	lcall	_print8ASCII
      00203B D0 02            [24] 7184 	pop	ar2
      00203D D0 03            [24] 7185 	pop	ar3
      00203F D0 05            [24] 7186 	pop	ar5
      002041 D0 07            [24] 7187 	pop	ar7
                                   7188 ;	.\ecen4350_lcd_v4.c:1517: d++;
      002043 0A               [12] 7189 	inc	r2
      002044 BA 00 01         [24] 7190 	cjne	r2,#0x00,00259$
      002047 0B               [12] 7191 	inc	r3
      002048                       7192 00259$:
                                   7193 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7194 ;	assignBit
      002048 C2 B5            [12] 7195 	clr	_P3_5
                                   7196 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      00204A 8A 82            [24] 7197 	mov	dpl,r2
      00204C 8B 83            [24] 7198 	mov	dph,r3
      00204E E0               [24] 7199 	movx	a,@dptr
      00204F F5 82            [12] 7200 	mov	dpl,a
                                   7201 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7202 ;	assignBit
      002051 D2 B5            [12] 7203 	setb	_P3_5
                                   7204 ;	.\ecen4350_lcd_v4.c:1518: print8ASCII(ramRead8(d));
      002053 C0 07            [24] 7205 	push	ar7
      002055 C0 05            [24] 7206 	push	ar5
      002057 C0 03            [24] 7207 	push	ar3
      002059 C0 02            [24] 7208 	push	ar2
      00205B 12r15r63         [24] 7209 	lcall	_print8ASCII
      00205E D0 02            [24] 7210 	pop	ar2
      002060 D0 03            [24] 7211 	pop	ar3
      002062 D0 05            [24] 7212 	pop	ar5
      002064 D0 07            [24] 7213 	pop	ar7
                                   7214 ;	.\ecen4350_lcd_v4.c:1519: d++;
      002066 0A               [12] 7215 	inc	r2
      002067 BA 00 01         [24] 7216 	cjne	r2,#0x00,00260$
      00206A 0B               [12] 7217 	inc	r3
      00206B                       7218 00260$:
                                   7219 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7220 ;	assignBit
      00206B C2 B5            [12] 7221 	clr	_P3_5
                                   7222 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      00206D 8A 82            [24] 7223 	mov	dpl,r2
      00206F 8B 83            [24] 7224 	mov	dph,r3
      002071 E0               [24] 7225 	movx	a,@dptr
      002072 F5 82            [12] 7226 	mov	dpl,a
                                   7227 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7228 ;	assignBit
      002074 D2 B5            [12] 7229 	setb	_P3_5
                                   7230 ;	.\ecen4350_lcd_v4.c:1520: print8ASCII(ramRead8(d));
      002076 C0 07            [24] 7231 	push	ar7
      002078 C0 05            [24] 7232 	push	ar5
      00207A C0 03            [24] 7233 	push	ar3
      00207C C0 02            [24] 7234 	push	ar2
      00207E 12r15r63         [24] 7235 	lcall	_print8ASCII
      002081 D0 02            [24] 7236 	pop	ar2
      002083 D0 03            [24] 7237 	pop	ar3
      002085 D0 05            [24] 7238 	pop	ar5
                                   7239 ;	.\ecen4350_lcd_v4.c:1521: d++;
      002087 74 01            [12] 7240 	mov	a,#0x01
      002089 2A               [12] 7241 	add	a,r2
      00208A FC               [12] 7242 	mov	r4,a
      00208B E4               [12] 7243 	clr	a
      00208C 3B               [12] 7244 	addc	a,r3
      00208D FE               [12] 7245 	mov	r6,a
                                   7246 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7247 ;	assignBit
      00208E C2 B5            [12] 7248 	clr	_P3_5
                                   7249 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002090 8C 82            [24] 7250 	mov	dpl,r4
      002092 8E 83            [24] 7251 	mov	dph,r6
      002094 E0               [24] 7252 	movx	a,@dptr
      002095 F5 82            [12] 7253 	mov	dpl,a
                                   7254 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7255 ;	assignBit
      002097 D2 B5            [12] 7256 	setb	_P3_5
                                   7257 ;	.\ecen4350_lcd_v4.c:1522: print8ASCII(ramRead8(d));
      002099 C0 06            [24] 7258 	push	ar6
      00209B C0 05            [24] 7259 	push	ar5
      00209D C0 04            [24] 7260 	push	ar4
      00209F 12r15r63         [24] 7261 	lcall	_print8ASCII
                                   7262 ;	.\ecen4350_lcd_v4.c:1524: setCursor(0, 240);
      0020A2 75*00 F0         [24] 7263 	mov	_setCursor_PARM_2,#0xf0
      0020A5 75*01 00         [24] 7264 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020A8 90 00 00         [24] 7265 	mov	dptr,#0x0000
      0020AB 12r04rF6         [24] 7266 	lcall	_setCursor
                                   7267 ;	.\ecen4350_lcd_v4.c:1525: setColorWhite();
      0020AE 12r16r24         [24] 7268 	lcall	_setColorWhite
                                   7269 ;	.\ecen4350_lcd_v4.c:1526: LCD_string_write(" Data Type:");
      0020B1 90r07r6A         [24] 7270 	mov	dptr,#___str_49
      0020B4 75 F0 80         [24] 7271 	mov	b,#0x80
      0020B7 12r10r10         [24] 7272 	lcall	_LCD_string_write
                                   7273 ;	.\ecen4350_lcd_v4.c:1527: setColorDefault();
      0020BA 12r15rD4         [24] 7274 	lcall	_setColorDefault
                                   7275 ;	.\ecen4350_lcd_v4.c:1528: setCursor(0, 260);
      0020BD 75*00 04         [24] 7276 	mov	_setCursor_PARM_2,#0x04
      0020C0 75*01 01         [24] 7277 	mov	(_setCursor_PARM_2 + 1),#0x01
      0020C3 90 00 00         [24] 7278 	mov	dptr,#0x0000
      0020C6 12r04rF6         [24] 7279 	lcall	_setCursor
                                   7280 ;	.\ecen4350_lcd_v4.c:1529: LCD_string_write(" DWORD");
      0020C9 90r07r82         [24] 7281 	mov	dptr,#___str_52
      0020CC 75 F0 80         [24] 7282 	mov	b,#0x80
      0020CF 12r10r10         [24] 7283 	lcall	_LCD_string_write
      0020D2 D0 04            [24] 7284 	pop	ar4
      0020D4 D0 05            [24] 7285 	pop	ar5
      0020D6 D0 06            [24] 7286 	pop	ar6
      0020D8 D0 07            [24] 7287 	pop	ar7
      0020DA                       7288 00123$:
                                   7289 ;	.\ecen4350_lcd_v4.c:1531: setCursor(50, 300);
      0020DA 75*00 2C         [24] 7290 	mov	_setCursor_PARM_2,#0x2c
      0020DD 75*01 01         [24] 7291 	mov	(_setCursor_PARM_2 + 1),#0x01
      0020E0 90 00 32         [24] 7292 	mov	dptr,#0x0032
      0020E3 C0 07            [24] 7293 	push	ar7
      0020E5 C0 06            [24] 7294 	push	ar6
      0020E7 C0 05            [24] 7295 	push	ar5
      0020E9 C0 04            [24] 7296 	push	ar4
      0020EB 12r04rF6         [24] 7297 	lcall	_setCursor
                                   7298 ;	.\ecen4350_lcd_v4.c:1532: setColorWhite();
      0020EE 12r16r24         [24] 7299 	lcall	_setColorWhite
                                   7300 ;	.\ecen4350_lcd_v4.c:1533: LCD_string_write(" <0> Exit\n");
      0020F1 90r07r89         [24] 7301 	mov	dptr,#___str_53
      0020F4 75 F0 80         [24] 7302 	mov	b,#0x80
      0020F7 12r10r10         [24] 7303 	lcall	_LCD_string_write
                                   7304 ;	.\ecen4350_lcd_v4.c:1535: selection = keyDetect();
      0020FA 12r11r2E         [24] 7305 	lcall	_keyDetect
      0020FD AB 82            [24] 7306 	mov	r3,dpl
      0020FF D0 04            [24] 7307 	pop	ar4
      002101 D0 05            [24] 7308 	pop	ar5
      002103 D0 06            [24] 7309 	pop	ar6
      002105 D0 07            [24] 7310 	pop	ar7
      002107 78r00            [12] 7311 	mov	r0,#_selection
      002109 A6 03            [24] 7312 	mov	@r0,ar3
                                   7313 ;	.\ecen4350_lcd_v4.c:1537: if (selection == '0' ) {
      00210B BB 30 02         [24] 7314 	cjne	r3,#0x30,00261$
      00210E 80 03            [24] 7315 	sjmp	00262$
      002110                       7316 00261$:
      002110 02r1CrEB         [24] 7317 	ljmp	00126$
      002113                       7318 00262$:
                                   7319 ;	.\ecen4350_lcd_v4.c:1538: exit = 0;
      002113 78r10            [12] 7320 	mov	r0,#_dump_exit_65536_553
      002115 76 00            [12] 7321 	mov	@r0,#0x00
                                   7322 ;	.\ecen4350_lcd_v4.c:1539: setCursor(50, 300);
      002117 75*00 2C         [24] 7323 	mov	_setCursor_PARM_2,#0x2c
      00211A 75*01 01         [24] 7324 	mov	(_setCursor_PARM_2 + 1),#0x01
      00211D 90 00 32         [24] 7325 	mov	dptr,#0x0032
      002120 C0 07            [24] 7326 	push	ar7
      002122 C0 06            [24] 7327 	push	ar6
      002124 C0 05            [24] 7328 	push	ar5
      002126 C0 04            [24] 7329 	push	ar4
      002128 12r04rF6         [24] 7330 	lcall	_setCursor
                                   7331 ;	.\ecen4350_lcd_v4.c:1540: setColorSelect();
      00212B 12r15rDF         [24] 7332 	lcall	_setColorSelect
                                   7333 ;	.\ecen4350_lcd_v4.c:1541: LCD_string_write(" ");
      00212E 90r06r54         [24] 7334 	mov	dptr,#___str_30
      002131 75 F0 80         [24] 7335 	mov	b,#0x80
      002134 12r10r10         [24] 7336 	lcall	_LCD_string_write
                                   7337 ;	.\ecen4350_lcd_v4.c:1542: setColorHighlight2();
      002137 12r15rF6         [24] 7338 	lcall	_setColorHighlight2
                                   7339 ;	.\ecen4350_lcd_v4.c:1543: LCD_string_write("<0> Exit\n");
      00213A 90r07r94         [24] 7340 	mov	dptr,#___str_54
      00213D 75 F0 80         [24] 7341 	mov	b,#0x80
      002140 12r10r10         [24] 7342 	lcall	_LCD_string_write
                                   7343 ;	.\ecen4350_lcd_v4.c:1544: delay(40);
      002143 90 00 28         [24] 7344 	mov	dptr,#0x0028
      002146 12r00rE0         [24] 7345 	lcall	_delay
      002149 D0 04            [24] 7346 	pop	ar4
      00214B D0 05            [24] 7347 	pop	ar5
      00214D D0 06            [24] 7348 	pop	ar6
      00214F D0 07            [24] 7349 	pop	ar7
      002151 02r1CrEB         [24] 7350 	ljmp	00126$
                                   7351 ;	.\ecen4350_lcd_v4.c:1547: return;
                                   7352 ;	.\ecen4350_lcd_v4.c:1548: }
      002154 22               [24] 7353 	ret
                                   7354 ;------------------------------------------------------------
                                   7355 ;Allocation info for local variables in function 'move'
                                   7356 ;------------------------------------------------------------
                                   7357 ;d                         Allocated with name '_move_d_65536_609'
                                   7358 ;i                         Allocated with name '_move_i_131072_618'
                                   7359 ;__2621440148              Allocated to registers 
                                   7360 ;__2621440145              Allocated to registers 
                                   7361 ;__2621440146              Allocated to registers 
                                   7362 ;__3276800149              Allocated to registers 
                                   7363 ;map_address               Allocated to registers 
                                   7364 ;d                         Allocated to registers r5 
                                   7365 ;map_address               Allocated to registers 
                                   7366 ;d                         Allocated to registers 
                                   7367 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_609'
                                   7368 ;destAddress               Allocated to registers r2 r3 
                                   7369 ;blockSize                 Allocated to registers r6 r7 
                                   7370 ;blockType                 Allocated to registers r5 
                                   7371 ;invalidType               Allocated to registers r4 
                                   7372 ;invalidSize               Allocated with name '_move_invalidSize_65536_609'
                                   7373 ;------------------------------------------------------------
                                   7374 ;	.\ecen4350_lcd_v4.c:1550: void move() {
                                   7375 ;	-----------------------------------------
                                   7376 ;	 function move
                                   7377 ;	-----------------------------------------
      002155                       7378 _move:
                                   7379 ;	.\ecen4350_lcd_v4.c:1554: __idata unsigned int blockSize = 0;
      002155 7E 00            [12] 7380 	mov	r6,#0x00
      002157 7F 00            [12] 7381 	mov	r7,#0x00
                                   7382 ;	.\ecen4350_lcd_v4.c:1555: __idata unsigned char blockType = 0;
      002159 7D 00            [12] 7383 	mov	r5,#0x00
                                   7384 ;	.\ecen4350_lcd_v4.c:1556: __idata unsigned char invalidType = 1;
      00215B 7C 01            [12] 7385 	mov	r4,#0x01
                                   7386 ;	.\ecen4350_lcd_v4.c:1557: __idata unsigned char invalidSize = 1;
      00215D 78r13            [12] 7387 	mov	r0,#_move_invalidSize_65536_609
      00215F 76 01            [12] 7388 	mov	@r0,#0x01
                                   7389 ;	.\ecen4350_lcd_v4.c:1559: clearLCD();
      002161 C0 07            [24] 7390 	push	ar7
      002163 C0 06            [24] 7391 	push	ar6
      002165 C0 05            [24] 7392 	push	ar5
      002167 C0 04            [24] 7393 	push	ar4
      002169 12r0Dr93         [24] 7394 	lcall	_clearLCD
                                   7395 ;	.\ecen4350_lcd_v4.c:1562: fillTop(GRAY);
      00216C 90 D6 BA         [24] 7396 	mov	dptr,#0xd6ba
      00216F 12r0BrC6         [24] 7397 	lcall	_fillTop
                                   7398 ;	.\ecen4350_lcd_v4.c:1563: setTextSize(5);
      002172 75 82 05         [24] 7399 	mov	dpl,#0x05
      002175 12r05r10         [24] 7400 	lcall	_setTextSize
                                   7401 ;	.\ecen4350_lcd_v4.c:1564: setColorMenu();
      002178 12r16r0D         [24] 7402 	lcall	_setColorMenu
                                   7403 ;	.\ecen4350_lcd_v4.c:1565: setCursor(30, 0);
      00217B E4               [12] 7404 	clr	a
      00217C F5*00            [12] 7405 	mov	_setCursor_PARM_2,a
      00217E F5*01            [12] 7406 	mov	(_setCursor_PARM_2 + 1),a
      002180 90 00 1E         [24] 7407 	mov	dptr,#0x001e
      002183 12r04rF6         [24] 7408 	lcall	_setCursor
                                   7409 ;	.\ecen4350_lcd_v4.c:1566: LCD_string_write("[MOVE]\n");
      002186 90r07r9E         [24] 7410 	mov	dptr,#___str_55
      002189 75 F0 80         [24] 7411 	mov	b,#0x80
      00218C 12r10r10         [24] 7412 	lcall	_LCD_string_write
                                   7413 ;	.\ecen4350_lcd_v4.c:1567: setColorDefault();
      00218F 12r15rD4         [24] 7414 	lcall	_setColorDefault
                                   7415 ;	.\ecen4350_lcd_v4.c:1568: setTextSize(2);
      002192 75 82 02         [24] 7416 	mov	dpl,#0x02
      002195 12r05r10         [24] 7417 	lcall	_setTextSize
                                   7418 ;	.\ecen4350_lcd_v4.c:1569: setCursor(0, 60);
      002198 75*00 3C         [24] 7419 	mov	_setCursor_PARM_2,#0x3c
      00219B 75*01 00         [24] 7420 	mov	(_setCursor_PARM_2 + 1),#0x00
      00219E 90 00 00         [24] 7421 	mov	dptr,#0x0000
      0021A1 12r04rF6         [24] 7422 	lcall	_setCursor
                                   7423 ;	.\ecen4350_lcd_v4.c:1570: LCD_string_write(" Source Address:");
      0021A4 90r07rA6         [24] 7424 	mov	dptr,#___str_56
      0021A7 75 F0 80         [24] 7425 	mov	b,#0x80
      0021AA 12r10r10         [24] 7426 	lcall	_LCD_string_write
                                   7427 ;	.\ecen4350_lcd_v4.c:1571: setCursor(0, 80);
      0021AD 75*00 50         [24] 7428 	mov	_setCursor_PARM_2,#0x50
      0021B0 75*01 00         [24] 7429 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021B3 90 00 00         [24] 7430 	mov	dptr,#0x0000
      0021B6 12r04rF6         [24] 7431 	lcall	_setCursor
                                   7432 ;	.\ecen4350_lcd_v4.c:1572: setColorGray();
      0021B9 12r16r02         [24] 7433 	lcall	_setColorGray
                                   7434 ;	.\ecen4350_lcd_v4.c:1573: LCD_string_write(" 0x____");
      0021BC 90r05rF2         [24] 7435 	mov	dptr,#___str_24
      0021BF 75 F0 80         [24] 7436 	mov	b,#0x80
      0021C2 12r10r10         [24] 7437 	lcall	_LCD_string_write
                                   7438 ;	.\ecen4350_lcd_v4.c:1574: setCursor(0, 110);
      0021C5 75*00 6E         [24] 7439 	mov	_setCursor_PARM_2,#0x6e
      0021C8 75*01 00         [24] 7440 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021CB 90 00 00         [24] 7441 	mov	dptr,#0x0000
      0021CE 12r04rF6         [24] 7442 	lcall	_setCursor
                                   7443 ;	.\ecen4350_lcd_v4.c:1575: setColorDefault();
      0021D1 12r15rD4         [24] 7444 	lcall	_setColorDefault
                                   7445 ;	.\ecen4350_lcd_v4.c:1576: LCD_string_write(" Destination:");
      0021D4 90r07rB7         [24] 7446 	mov	dptr,#___str_57
      0021D7 75 F0 80         [24] 7447 	mov	b,#0x80
      0021DA 12r10r10         [24] 7448 	lcall	_LCD_string_write
                                   7449 ;	.\ecen4350_lcd_v4.c:1577: setCursor(0, 130);
      0021DD 75*00 82         [24] 7450 	mov	_setCursor_PARM_2,#0x82
      0021E0 75*01 00         [24] 7451 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021E3 90 00 00         [24] 7452 	mov	dptr,#0x0000
      0021E6 12r04rF6         [24] 7453 	lcall	_setCursor
                                   7454 ;	.\ecen4350_lcd_v4.c:1578: setColorGray();
      0021E9 12r16r02         [24] 7455 	lcall	_setColorGray
                                   7456 ;	.\ecen4350_lcd_v4.c:1579: LCD_string_write(" 0x____");
      0021EC 90r05rF2         [24] 7457 	mov	dptr,#___str_24
      0021EF 75 F0 80         [24] 7458 	mov	b,#0x80
      0021F2 12r10r10         [24] 7459 	lcall	_LCD_string_write
                                   7460 ;	.\ecen4350_lcd_v4.c:1580: setCursor(0, 160);
      0021F5 75*00 A0         [24] 7461 	mov	_setCursor_PARM_2,#0xa0
      0021F8 75*01 00         [24] 7462 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021FB 90 00 00         [24] 7463 	mov	dptr,#0x0000
      0021FE 12r04rF6         [24] 7464 	lcall	_setCursor
                                   7465 ;	.\ecen4350_lcd_v4.c:1581: setColorDefault();
      002201 12r15rD4         [24] 7466 	lcall	_setColorDefault
                                   7467 ;	.\ecen4350_lcd_v4.c:1582: LCD_string_write(" Choose Block Type:");
      002204 90r06r56         [24] 7468 	mov	dptr,#___str_31
      002207 75 F0 80         [24] 7469 	mov	b,#0x80
      00220A 12r10r10         [24] 7470 	lcall	_LCD_string_write
                                   7471 ;	.\ecen4350_lcd_v4.c:1583: setCursor(0, 180);
      00220D 75*00 B4         [24] 7472 	mov	_setCursor_PARM_2,#0xb4
      002210 75*01 00         [24] 7473 	mov	(_setCursor_PARM_2 + 1),#0x00
      002213 90 00 00         [24] 7474 	mov	dptr,#0x0000
      002216 12r04rF6         [24] 7475 	lcall	_setCursor
                                   7476 ;	.\ecen4350_lcd_v4.c:1584: setColorGray();
      002219 12r16r02         [24] 7477 	lcall	_setColorGray
                                   7478 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      00221C 90r06r0F         [24] 7479 	mov	dptr,#___str_26
      00221F 75 F0 80         [24] 7480 	mov	b,#0x80
      002222 12r10r10         [24] 7481 	lcall	_LCD_string_write
                                   7482 ;	.\ecen4350_lcd_v4.c:1586: setCursor(0, 260);
      002225 75*00 04         [24] 7483 	mov	_setCursor_PARM_2,#0x04
      002228 75*01 01         [24] 7484 	mov	(_setCursor_PARM_2 + 1),#0x01
      00222B 90 00 00         [24] 7485 	mov	dptr,#0x0000
      00222E 12r04rF6         [24] 7486 	lcall	_setCursor
                                   7487 ;	.\ecen4350_lcd_v4.c:1587: setColorDefault();
      002231 12r15rD4         [24] 7488 	lcall	_setColorDefault
                                   7489 ;	.\ecen4350_lcd_v4.c:1588: LCD_string_write(" Input Size:");
      002234 90r06r31         [24] 7490 	mov	dptr,#___str_27
      002237 75 F0 80         [24] 7491 	mov	b,#0x80
      00223A 12r10r10         [24] 7492 	lcall	_LCD_string_write
                                   7493 ;	.\ecen4350_lcd_v4.c:1589: setColorGray();
      00223D 12r16r02         [24] 7494 	lcall	_setColorGray
                                   7495 ;	.\ecen4350_lcd_v4.c:1590: LCD_string_write(" _");
      002240 90r06r3E         [24] 7496 	mov	dptr,#___str_28
      002243 75 F0 80         [24] 7497 	mov	b,#0x80
      002246 12r10r10         [24] 7498 	lcall	_LCD_string_write
                                   7499 ;	.\ecen4350_lcd_v4.c:1597: setCursor(0, 60);
      002249 75*00 3C         [24] 7500 	mov	_setCursor_PARM_2,#0x3c
      00224C 75*01 00         [24] 7501 	mov	(_setCursor_PARM_2 + 1),#0x00
      00224F 90 00 00         [24] 7502 	mov	dptr,#0x0000
      002252 12r04rF6         [24] 7503 	lcall	_setCursor
                                   7504 ;	.\ecen4350_lcd_v4.c:1598: setColorSelect();
      002255 12r15rDF         [24] 7505 	lcall	_setColorSelect
                                   7506 ;	.\ecen4350_lcd_v4.c:1599: LCD_string_write(" Source Address:");
      002258 90r07rA6         [24] 7507 	mov	dptr,#___str_56
      00225B 75 F0 80         [24] 7508 	mov	b,#0x80
      00225E 12r10r10         [24] 7509 	lcall	_LCD_string_write
                                   7510 ;	.\ecen4350_lcd_v4.c:1600: setCursor(0, 80);
      002261 75*00 50         [24] 7511 	mov	_setCursor_PARM_2,#0x50
      002264 75*01 00         [24] 7512 	mov	(_setCursor_PARM_2 + 1),#0x00
      002267 90 00 00         [24] 7513 	mov	dptr,#0x0000
      00226A 12r04rF6         [24] 7514 	lcall	_setCursor
                                   7515 ;	.\ecen4350_lcd_v4.c:1601: LCD_string_write(" ");
      00226D 90r06r54         [24] 7516 	mov	dptr,#___str_30
      002270 75 F0 80         [24] 7517 	mov	b,#0x80
      002273 12r10r10         [24] 7518 	lcall	_LCD_string_write
                                   7519 ;	.\ecen4350_lcd_v4.c:1602: setColorHighlight1();
      002276 12r15rEA         [24] 7520 	lcall	_setColorHighlight1
                                   7521 ;	.\ecen4350_lcd_v4.c:1603: LCD_string_write("0x");
      002279 90r05r29         [24] 7522 	mov	dptr,#___str_2
      00227C 75 F0 80         [24] 7523 	mov	b,#0x80
      00227F 12r10r10         [24] 7524 	lcall	_LCD_string_write
                                   7525 ;	.\ecen4350_lcd_v4.c:1604: sourceAddress = inputAddress();
      002282 12r16r45         [24] 7526 	lcall	_inputAddress
      002285 78r11            [12] 7527 	mov	r0,#_move_sourceAddress_65536_609
      002287 A6 82            [24] 7528 	mov	@r0,dpl
      002289 08               [12] 7529 	inc	r0
      00228A A6 83            [24] 7530 	mov	@r0,dph
                                   7531 ;	.\ecen4350_lcd_v4.c:1607: setColorDefault();
      00228C 12r15rD4         [24] 7532 	lcall	_setColorDefault
                                   7533 ;	.\ecen4350_lcd_v4.c:1608: setCursor(0, 60);
      00228F 75*00 3C         [24] 7534 	mov	_setCursor_PARM_2,#0x3c
      002292 75*01 00         [24] 7535 	mov	(_setCursor_PARM_2 + 1),#0x00
      002295 90 00 00         [24] 7536 	mov	dptr,#0x0000
      002298 12r04rF6         [24] 7537 	lcall	_setCursor
                                   7538 ;	.\ecen4350_lcd_v4.c:1609: LCD_string_write(" Source Address:");
      00229B 90r07rA6         [24] 7539 	mov	dptr,#___str_56
      00229E 75 F0 80         [24] 7540 	mov	b,#0x80
      0022A1 12r10r10         [24] 7541 	lcall	_LCD_string_write
                                   7542 ;	.\ecen4350_lcd_v4.c:1610: setCursor(0, 80);
      0022A4 75*00 50         [24] 7543 	mov	_setCursor_PARM_2,#0x50
      0022A7 75*01 00         [24] 7544 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022AA 90 00 00         [24] 7545 	mov	dptr,#0x0000
      0022AD 12r04rF6         [24] 7546 	lcall	_setCursor
                                   7547 ;	.\ecen4350_lcd_v4.c:1611: LCD_string_write(" ");
      0022B0 90r06r54         [24] 7548 	mov	dptr,#___str_30
      0022B3 75 F0 80         [24] 7549 	mov	b,#0x80
      0022B6 12r10r10         [24] 7550 	lcall	_LCD_string_write
                                   7551 ;	.\ecen4350_lcd_v4.c:1612: setColorHighlight2();
      0022B9 12r15rF6         [24] 7552 	lcall	_setColorHighlight2
                                   7553 ;	.\ecen4350_lcd_v4.c:1613: LCD_string_write("0x");
      0022BC 90r05r29         [24] 7554 	mov	dptr,#___str_2
      0022BF 75 F0 80         [24] 7555 	mov	b,#0x80
      0022C2 12r10r10         [24] 7556 	lcall	_LCD_string_write
                                   7557 ;	.\ecen4350_lcd_v4.c:1614: print16Hex(sourceAddress);
      0022C5 78r11            [12] 7558 	mov	r0,#_move_sourceAddress_65536_609
      0022C7 86 82            [24] 7559 	mov	dpl,@r0
      0022C9 08               [12] 7560 	inc	r0
      0022CA 86 83            [24] 7561 	mov	dph,@r0
      0022CC 12r14rF8         [24] 7562 	lcall	_print16Hex
                                   7563 ;	.\ecen4350_lcd_v4.c:1617: setCursor(0, 110);
      0022CF 75*00 6E         [24] 7564 	mov	_setCursor_PARM_2,#0x6e
      0022D2 75*01 00         [24] 7565 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022D5 90 00 00         [24] 7566 	mov	dptr,#0x0000
      0022D8 12r04rF6         [24] 7567 	lcall	_setCursor
                                   7568 ;	.\ecen4350_lcd_v4.c:1618: setColorSelect();
      0022DB 12r15rDF         [24] 7569 	lcall	_setColorSelect
                                   7570 ;	.\ecen4350_lcd_v4.c:1619: LCD_string_write(" Destination:");
      0022DE 90r07rB7         [24] 7571 	mov	dptr,#___str_57
      0022E1 75 F0 80         [24] 7572 	mov	b,#0x80
      0022E4 12r10r10         [24] 7573 	lcall	_LCD_string_write
                                   7574 ;	.\ecen4350_lcd_v4.c:1620: setCursor(0, 130);
      0022E7 75*00 82         [24] 7575 	mov	_setCursor_PARM_2,#0x82
      0022EA 75*01 00         [24] 7576 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022ED 90 00 00         [24] 7577 	mov	dptr,#0x0000
      0022F0 12r04rF6         [24] 7578 	lcall	_setCursor
                                   7579 ;	.\ecen4350_lcd_v4.c:1621: LCD_string_write(" ");
      0022F3 90r06r54         [24] 7580 	mov	dptr,#___str_30
      0022F6 75 F0 80         [24] 7581 	mov	b,#0x80
      0022F9 12r10r10         [24] 7582 	lcall	_LCD_string_write
                                   7583 ;	.\ecen4350_lcd_v4.c:1622: setColorHighlight1();
      0022FC 12r15rEA         [24] 7584 	lcall	_setColorHighlight1
                                   7585 ;	.\ecen4350_lcd_v4.c:1623: LCD_string_write("0x");
      0022FF 90r05r29         [24] 7586 	mov	dptr,#___str_2
      002302 75 F0 80         [24] 7587 	mov	b,#0x80
      002305 12r10r10         [24] 7588 	lcall	_LCD_string_write
                                   7589 ;	.\ecen4350_lcd_v4.c:1624: destAddress = inputAddress();
      002308 12r16r45         [24] 7590 	lcall	_inputAddress
      00230B AA 82            [24] 7591 	mov	r2,dpl
      00230D AB 83            [24] 7592 	mov	r3,dph
                                   7593 ;	.\ecen4350_lcd_v4.c:1627: setColorDefault();
      00230F C0 03            [24] 7594 	push	ar3
      002311 C0 02            [24] 7595 	push	ar2
      002313 12r15rD4         [24] 7596 	lcall	_setColorDefault
                                   7597 ;	.\ecen4350_lcd_v4.c:1628: setCursor(0, 110);
      002316 75*00 6E         [24] 7598 	mov	_setCursor_PARM_2,#0x6e
      002319 75*01 00         [24] 7599 	mov	(_setCursor_PARM_2 + 1),#0x00
      00231C 90 00 00         [24] 7600 	mov	dptr,#0x0000
      00231F 12r04rF6         [24] 7601 	lcall	_setCursor
                                   7602 ;	.\ecen4350_lcd_v4.c:1629: LCD_string_write( " Destination:");
      002322 90r07rB7         [24] 7603 	mov	dptr,#___str_57
      002325 75 F0 80         [24] 7604 	mov	b,#0x80
      002328 12r10r10         [24] 7605 	lcall	_LCD_string_write
                                   7606 ;	.\ecen4350_lcd_v4.c:1630: setCursor(0, 130);
      00232B 75*00 82         [24] 7607 	mov	_setCursor_PARM_2,#0x82
      00232E 75*01 00         [24] 7608 	mov	(_setCursor_PARM_2 + 1),#0x00
      002331 90 00 00         [24] 7609 	mov	dptr,#0x0000
      002334 12r04rF6         [24] 7610 	lcall	_setCursor
                                   7611 ;	.\ecen4350_lcd_v4.c:1631: LCD_string_write(" ");
      002337 90r06r54         [24] 7612 	mov	dptr,#___str_30
      00233A 75 F0 80         [24] 7613 	mov	b,#0x80
      00233D 12r10r10         [24] 7614 	lcall	_LCD_string_write
                                   7615 ;	.\ecen4350_lcd_v4.c:1632: setColorHighlight2();
      002340 12r15rF6         [24] 7616 	lcall	_setColorHighlight2
                                   7617 ;	.\ecen4350_lcd_v4.c:1633: LCD_string_write("0x");
      002343 90r05r29         [24] 7618 	mov	dptr,#___str_2
      002346 75 F0 80         [24] 7619 	mov	b,#0x80
      002349 12r10r10         [24] 7620 	lcall	_LCD_string_write
      00234C D0 02            [24] 7621 	pop	ar2
      00234E D0 03            [24] 7622 	pop	ar3
                                   7623 ;	.\ecen4350_lcd_v4.c:1634: print16Hex(destAddress);
      002350 8A 82            [24] 7624 	mov	dpl,r2
      002352 8B 83            [24] 7625 	mov	dph,r3
      002354 C0 03            [24] 7626 	push	ar3
      002356 C0 02            [24] 7627 	push	ar2
      002358 12r14rF8         [24] 7628 	lcall	_print16Hex
                                   7629 ;	.\ecen4350_lcd_v4.c:1637: setCursor(0, 160);
      00235B 75*00 A0         [24] 7630 	mov	_setCursor_PARM_2,#0xa0
      00235E 75*01 00         [24] 7631 	mov	(_setCursor_PARM_2 + 1),#0x00
      002361 90 00 00         [24] 7632 	mov	dptr,#0x0000
      002364 12r04rF6         [24] 7633 	lcall	_setCursor
                                   7634 ;	.\ecen4350_lcd_v4.c:1638: setColorSelect();
      002367 12r15rDF         [24] 7635 	lcall	_setColorSelect
                                   7636 ;	.\ecen4350_lcd_v4.c:1639: LCD_string_write(" Choose Block Type:");
      00236A 90r06r56         [24] 7637 	mov	dptr,#___str_31
      00236D 75 F0 80         [24] 7638 	mov	b,#0x80
      002370 12r10r10         [24] 7639 	lcall	_LCD_string_write
                                   7640 ;	.\ecen4350_lcd_v4.c:1640: setCursor(0, 180);
      002373 75*00 B4         [24] 7641 	mov	_setCursor_PARM_2,#0xb4
      002376 75*01 00         [24] 7642 	mov	(_setCursor_PARM_2 + 1),#0x00
      002379 90 00 00         [24] 7643 	mov	dptr,#0x0000
      00237C 12r04rF6         [24] 7644 	lcall	_setCursor
                                   7645 ;	.\ecen4350_lcd_v4.c:1641: setColorWhite();
      00237F 12r16r24         [24] 7646 	lcall	_setColorWhite
                                   7647 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      002382 90r06r0F         [24] 7648 	mov	dptr,#___str_26
      002385 75 F0 80         [24] 7649 	mov	b,#0x80
      002388 12r10r10         [24] 7650 	lcall	_LCD_string_write
      00238B D0 02            [24] 7651 	pop	ar2
      00238D D0 03            [24] 7652 	pop	ar3
      00238F D0 04            [24] 7653 	pop	ar4
      002391 D0 05            [24] 7654 	pop	ar5
      002393 D0 06            [24] 7655 	pop	ar6
      002395 D0 07            [24] 7656 	pop	ar7
                                   7657 ;	.\ecen4350_lcd_v4.c:1644: while (invalidType) {
      002397                       7658 00109$:
      002397 EC               [12] 7659 	mov	a,r4
      002398 70 03            [24] 7660 	jnz	00178$
      00239A 02r25r27         [24] 7661 	ljmp	00137$
      00239D                       7662 00178$:
                                   7663 ;	.\ecen4350_lcd_v4.c:1645: setCursor(0, 180);
      00239D 75*00 B4         [24] 7664 	mov	_setCursor_PARM_2,#0xb4
      0023A0 75*01 00         [24] 7665 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023A3 90 00 00         [24] 7666 	mov	dptr,#0x0000
      0023A6 C0 07            [24] 7667 	push	ar7
      0023A8 C0 06            [24] 7668 	push	ar6
      0023AA C0 04            [24] 7669 	push	ar4
      0023AC C0 03            [24] 7670 	push	ar3
      0023AE C0 02            [24] 7671 	push	ar2
      0023B0 12r04rF6         [24] 7672 	lcall	_setCursor
                                   7673 ;	.\ecen4350_lcd_v4.c:1646: setColorWhite();
      0023B3 12r16r24         [24] 7674 	lcall	_setColorWhite
                                   7675 ;	.\ecen4350_lcd_v4.c:1647: LCD_string_write("\n\n");
      0023B6 90r06r6A         [24] 7676 	mov	dptr,#___str_32
      0023B9 75 F0 80         [24] 7677 	mov	b,#0x80
      0023BC 12r10r10         [24] 7678 	lcall	_LCD_string_write
                                   7679 ;	.\ecen4350_lcd_v4.c:1649: blockType = inputBlockType();
      0023BF 12r16rE7         [24] 7680 	lcall	_inputBlockType
      0023C2 AD 82            [24] 7681 	mov	r5,dpl
      0023C4 D0 02            [24] 7682 	pop	ar2
      0023C6 D0 03            [24] 7683 	pop	ar3
      0023C8 D0 04            [24] 7684 	pop	ar4
      0023CA D0 06            [24] 7685 	pop	ar6
      0023CC D0 07            [24] 7686 	pop	ar7
                                   7687 ;	.\ecen4350_lcd_v4.c:1651: if (blockType == 0x1) {
      0023CE BD 01 5F         [24] 7688 	cjne	r5,#0x01,00102$
                                   7689 ;	.\ecen4350_lcd_v4.c:1652: invalidType = 0;
      0023D1 7C 00            [12] 7690 	mov	r4,#0x00
                                   7691 ;	.\ecen4350_lcd_v4.c:1654: setColorDefault();
      0023D3 C0 07            [24] 7692 	push	ar7
      0023D5 C0 06            [24] 7693 	push	ar6
      0023D7 C0 05            [24] 7694 	push	ar5
      0023D9 C0 04            [24] 7695 	push	ar4
      0023DB C0 03            [24] 7696 	push	ar3
      0023DD C0 02            [24] 7697 	push	ar2
      0023DF 12r15rD4         [24] 7698 	lcall	_setColorDefault
                                   7699 ;	.\ecen4350_lcd_v4.c:1655: setCursor(0, 160);
      0023E2 75*00 A0         [24] 7700 	mov	_setCursor_PARM_2,#0xa0
      0023E5 75*01 00         [24] 7701 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023E8 90 00 00         [24] 7702 	mov	dptr,#0x0000
      0023EB 12r04rF6         [24] 7703 	lcall	_setCursor
                                   7704 ;	.\ecen4350_lcd_v4.c:1656: LCD_string_write(" Choose Block Type:");
      0023EE 90r06r56         [24] 7705 	mov	dptr,#___str_31
      0023F1 75 F0 80         [24] 7706 	mov	b,#0x80
      0023F4 12r10r10         [24] 7707 	lcall	_LCD_string_write
                                   7708 ;	.\ecen4350_lcd_v4.c:1657: setCursor(0, 180);
      0023F7 75*00 B4         [24] 7709 	mov	_setCursor_PARM_2,#0xb4
      0023FA 75*01 00         [24] 7710 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023FD 90 00 00         [24] 7711 	mov	dptr,#0x0000
      002400 12r04rF6         [24] 7712 	lcall	_setCursor
                                   7713 ;	.\ecen4350_lcd_v4.c:1658: LCD_string_write("  ");
      002403 90r06r6D         [24] 7714 	mov	dptr,#___str_33
      002406 75 F0 80         [24] 7715 	mov	b,#0x80
      002409 12r10r10         [24] 7716 	lcall	_LCD_string_write
                                   7717 ;	.\ecen4350_lcd_v4.c:1659: setColorHighlight2();
      00240C 12r15rF6         [24] 7718 	lcall	_setColorHighlight2
                                   7719 ;	.\ecen4350_lcd_v4.c:1660: LCD_string_write("<1> BYTE\n");
      00240F 90r06r70         [24] 7720 	mov	dptr,#___str_34
      002412 75 F0 80         [24] 7721 	mov	b,#0x80
      002415 12r10r10         [24] 7722 	lcall	_LCD_string_write
                                   7723 ;	.\ecen4350_lcd_v4.c:1661: setColorGray();
      002418 12r16r02         [24] 7724 	lcall	_setColorGray
                                   7725 ;	.\ecen4350_lcd_v4.c:1662: LCD_string_write("\n\n                \n                ");
      00241B 90r06r7A         [24] 7726 	mov	dptr,#___str_35
      00241E 75 F0 80         [24] 7727 	mov	b,#0x80
      002421 12r10r10         [24] 7728 	lcall	_LCD_string_write
      002424 D0 02            [24] 7729 	pop	ar2
      002426 D0 03            [24] 7730 	pop	ar3
      002428 D0 04            [24] 7731 	pop	ar4
      00242A D0 05            [24] 7732 	pop	ar5
      00242C D0 06            [24] 7733 	pop	ar6
      00242E D0 07            [24] 7734 	pop	ar7
      002430                       7735 00102$:
                                   7736 ;	.\ecen4350_lcd_v4.c:1664: } if (blockType == 0x2) {
      002430 BD 02 62         [24] 7737 	cjne	r5,#0x02,00104$
                                   7738 ;	.\ecen4350_lcd_v4.c:1665: invalidType = 0;
      002433 7C 00            [12] 7739 	mov	r4,#0x00
                                   7740 ;	.\ecen4350_lcd_v4.c:1667: setColorDefault();
      002435 C0 07            [24] 7741 	push	ar7
      002437 C0 06            [24] 7742 	push	ar6
      002439 C0 05            [24] 7743 	push	ar5
      00243B C0 04            [24] 7744 	push	ar4
      00243D C0 03            [24] 7745 	push	ar3
      00243F C0 02            [24] 7746 	push	ar2
      002441 12r15rD4         [24] 7747 	lcall	_setColorDefault
                                   7748 ;	.\ecen4350_lcd_v4.c:1668: setCursor(0, 160);
      002444 75*00 A0         [24] 7749 	mov	_setCursor_PARM_2,#0xa0
      002447 75*01 00         [24] 7750 	mov	(_setCursor_PARM_2 + 1),#0x00
      00244A 90 00 00         [24] 7751 	mov	dptr,#0x0000
      00244D 12r04rF6         [24] 7752 	lcall	_setCursor
                                   7753 ;	.\ecen4350_lcd_v4.c:1669: LCD_string_write(" Choose Block Type:");
      002450 90r06r56         [24] 7754 	mov	dptr,#___str_31
      002453 75 F0 80         [24] 7755 	mov	b,#0x80
      002456 12r10r10         [24] 7756 	lcall	_LCD_string_write
                                   7757 ;	.\ecen4350_lcd_v4.c:1670: setCursor(0, 180);
      002459 75*00 B4         [24] 7758 	mov	_setCursor_PARM_2,#0xb4
      00245C 75*01 00         [24] 7759 	mov	(_setCursor_PARM_2 + 1),#0x00
      00245F 90 00 00         [24] 7760 	mov	dptr,#0x0000
      002462 12r04rF6         [24] 7761 	lcall	_setCursor
                                   7762 ;	.\ecen4350_lcd_v4.c:1671: setColorGray();
      002465 12r16r02         [24] 7763 	lcall	_setColorGray
                                   7764 ;	.\ecen4350_lcd_v4.c:1672: LCD_string_write("\n  ");
      002468 90r06r9E         [24] 7765 	mov	dptr,#___str_36
      00246B 75 F0 80         [24] 7766 	mov	b,#0x80
      00246E 12r10r10         [24] 7767 	lcall	_LCD_string_write
                                   7768 ;	.\ecen4350_lcd_v4.c:1673: setColorHighlight2();
      002471 12r15rF6         [24] 7769 	lcall	_setColorHighlight2
                                   7770 ;	.\ecen4350_lcd_v4.c:1674: LCD_string_write("<2> WORD\n");
      002474 90r06rA2         [24] 7771 	mov	dptr,#___str_37
      002477 75 F0 80         [24] 7772 	mov	b,#0x80
      00247A 12r10r10         [24] 7773 	lcall	_LCD_string_write
                                   7774 ;	.\ecen4350_lcd_v4.c:1675: setColorGray();
      00247D 12r16r02         [24] 7775 	lcall	_setColorGray
                                   7776 ;	.\ecen4350_lcd_v4.c:1676: LCD_string_write("\n                \n                ");
      002480 90r06rAC         [24] 7777 	mov	dptr,#___str_38
      002483 75 F0 80         [24] 7778 	mov	b,#0x80
      002486 12r10r10         [24] 7779 	lcall	_LCD_string_write
      002489 D0 02            [24] 7780 	pop	ar2
      00248B D0 03            [24] 7781 	pop	ar3
      00248D D0 04            [24] 7782 	pop	ar4
      00248F D0 05            [24] 7783 	pop	ar5
      002491 D0 06            [24] 7784 	pop	ar6
      002493 D0 07            [24] 7785 	pop	ar7
      002495                       7786 00104$:
                                   7787 ;	.\ecen4350_lcd_v4.c:1677: } if (blockType == 0x4) {
      002495 BD 04 62         [24] 7788 	cjne	r5,#0x04,00106$
                                   7789 ;	.\ecen4350_lcd_v4.c:1678: invalidType = 0;
      002498 7C 00            [12] 7790 	mov	r4,#0x00
                                   7791 ;	.\ecen4350_lcd_v4.c:1680: setColorDefault();
      00249A C0 07            [24] 7792 	push	ar7
      00249C C0 06            [24] 7793 	push	ar6
      00249E C0 05            [24] 7794 	push	ar5
      0024A0 C0 04            [24] 7795 	push	ar4
      0024A2 C0 03            [24] 7796 	push	ar3
      0024A4 C0 02            [24] 7797 	push	ar2
      0024A6 12r15rD4         [24] 7798 	lcall	_setColorDefault
                                   7799 ;	.\ecen4350_lcd_v4.c:1681: setCursor(0, 160);
      0024A9 75*00 A0         [24] 7800 	mov	_setCursor_PARM_2,#0xa0
      0024AC 75*01 00         [24] 7801 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024AF 90 00 00         [24] 7802 	mov	dptr,#0x0000
      0024B2 12r04rF6         [24] 7803 	lcall	_setCursor
                                   7804 ;	.\ecen4350_lcd_v4.c:1682: LCD_string_write(" Choose Block Type:");
      0024B5 90r06r56         [24] 7805 	mov	dptr,#___str_31
      0024B8 75 F0 80         [24] 7806 	mov	b,#0x80
      0024BB 12r10r10         [24] 7807 	lcall	_LCD_string_write
                                   7808 ;	.\ecen4350_lcd_v4.c:1683: setColorGray();
      0024BE 12r16r02         [24] 7809 	lcall	_setColorGray
                                   7810 ;	.\ecen4350_lcd_v4.c:1684: setCursor(0, 180);
      0024C1 75*00 B4         [24] 7811 	mov	_setCursor_PARM_2,#0xb4
      0024C4 75*01 00         [24] 7812 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024C7 90 00 00         [24] 7813 	mov	dptr,#0x0000
      0024CA 12r04rF6         [24] 7814 	lcall	_setCursor
                                   7815 ;	.\ecen4350_lcd_v4.c:1685: LCD_string_write("\n\n  ");
      0024CD 90r06rCF         [24] 7816 	mov	dptr,#___str_39
      0024D0 75 F0 80         [24] 7817 	mov	b,#0x80
      0024D3 12r10r10         [24] 7818 	lcall	_LCD_string_write
                                   7819 ;	.\ecen4350_lcd_v4.c:1686: setColorHighlight2();
      0024D6 12r15rF6         [24] 7820 	lcall	_setColorHighlight2
                                   7821 ;	.\ecen4350_lcd_v4.c:1687: LCD_string_write("<4> DWORD");
      0024D9 90r06rD4         [24] 7822 	mov	dptr,#___str_40
      0024DC 75 F0 80         [24] 7823 	mov	b,#0x80
      0024DF 12r10r10         [24] 7824 	lcall	_LCD_string_write
                                   7825 ;	.\ecen4350_lcd_v4.c:1688: setColorGray();
      0024E2 12r16r02         [24] 7826 	lcall	_setColorGray
                                   7827 ;	.\ecen4350_lcd_v4.c:1689: LCD_string_write("\n                \n                ");
      0024E5 90r06rAC         [24] 7828 	mov	dptr,#___str_38
      0024E8 75 F0 80         [24] 7829 	mov	b,#0x80
      0024EB 12r10r10         [24] 7830 	lcall	_LCD_string_write
      0024EE D0 02            [24] 7831 	pop	ar2
      0024F0 D0 03            [24] 7832 	pop	ar3
      0024F2 D0 04            [24] 7833 	pop	ar4
      0024F4 D0 05            [24] 7834 	pop	ar5
      0024F6 D0 06            [24] 7835 	pop	ar6
      0024F8 D0 07            [24] 7836 	pop	ar7
      0024FA                       7837 00106$:
                                   7838 ;	.\ecen4350_lcd_v4.c:1691: if (invalidType) {
      0024FA EC               [12] 7839 	mov	a,r4
      0024FB 70 03            [24] 7840 	jnz	00185$
      0024FD 02r23r97         [24] 7841 	ljmp	00109$
      002500                       7842 00185$:
                                   7843 ;	.\ecen4350_lcd_v4.c:1692: setColorRed();
      002500 C0 07            [24] 7844 	push	ar7
      002502 C0 06            [24] 7845 	push	ar6
      002504 C0 05            [24] 7846 	push	ar5
      002506 C0 04            [24] 7847 	push	ar4
      002508 C0 03            [24] 7848 	push	ar3
      00250A C0 02            [24] 7849 	push	ar2
      00250C 12r16r19         [24] 7850 	lcall	_setColorRed
                                   7851 ;	.\ecen4350_lcd_v4.c:1693: LCD_string_write("\n  Input Error\n  Try Again");
      00250F 90r06rDE         [24] 7852 	mov	dptr,#___str_41
      002512 75 F0 80         [24] 7853 	mov	b,#0x80
      002515 12r10r10         [24] 7854 	lcall	_LCD_string_write
      002518 D0 02            [24] 7855 	pop	ar2
      00251A D0 03            [24] 7856 	pop	ar3
      00251C D0 04            [24] 7857 	pop	ar4
      00251E D0 05            [24] 7858 	pop	ar5
      002520 D0 06            [24] 7859 	pop	ar6
      002522 D0 07            [24] 7860 	pop	ar7
      002524 02r23r97         [24] 7861 	ljmp	00109$
                                   7862 ;	.\ecen4350_lcd_v4.c:1699: while (invalidSize)
      002527                       7863 00137$:
      002527                       7864 00115$:
      002527 78r13            [12] 7865 	mov	r0,#_move_invalidSize_65536_609
      002529 E6               [12] 7866 	mov	a,@r0
      00252A 70 03            [24] 7867 	jnz	00186$
      00252C 02r26r4B         [24] 7868 	ljmp	00140$
      00252F                       7869 00186$:
                                   7870 ;	.\ecen4350_lcd_v4.c:1702: setCursor(0, 260);
      00252F C0 02            [24] 7871 	push	ar2
      002531 C0 03            [24] 7872 	push	ar3
      002533 75*00 04         [24] 7873 	mov	_setCursor_PARM_2,#0x04
      002536 75*01 01         [24] 7874 	mov	(_setCursor_PARM_2 + 1),#0x01
      002539 90 00 00         [24] 7875 	mov	dptr,#0x0000
      00253C C0 05            [24] 7876 	push	ar5
      00253E C0 03            [24] 7877 	push	ar3
      002540 C0 02            [24] 7878 	push	ar2
      002542 12r04rF6         [24] 7879 	lcall	_setCursor
                                   7880 ;	.\ecen4350_lcd_v4.c:1703: setColorSelect();
      002545 12r15rDF         [24] 7881 	lcall	_setColorSelect
                                   7882 ;	.\ecen4350_lcd_v4.c:1704: LCD_string_write(" Input Size: ");
      002548 90r06rF9         [24] 7883 	mov	dptr,#___str_42
      00254B 75 F0 80         [24] 7884 	mov	b,#0x80
      00254E 12r10r10         [24] 7885 	lcall	_LCD_string_write
                                   7886 ;	.\ecen4350_lcd_v4.c:1705: selection = keyDetect();
      002551 12r11r2E         [24] 7887 	lcall	_keyDetect
      002554 E5 82            [12] 7888 	mov	a,dpl
      002556 78r00            [12] 7889 	mov	r0,#_selection
      002558 F6               [12] 7890 	mov	@r0,a
                                   7891 ;	.\ecen4350_lcd_v4.c:1706: setColorHighlight1();
      002559 12r15rEA         [24] 7892 	lcall	_setColorHighlight1
                                   7893 ;	.\ecen4350_lcd_v4.c:1707: write(selection);
      00255C 78r00            [12] 7894 	mov	r0,#_selection
      00255E 86 82            [24] 7895 	mov	dpl,@r0
      002560 12r0FrAA         [24] 7896 	lcall	_write
                                   7897 ;	.\ecen4350_lcd_v4.c:1708: blockSize = ASCIItoHex(selection);
      002563 78r00            [12] 7898 	mov	r0,#_selection
      002565 86 82            [24] 7899 	mov	dpl,@r0
      002567 12r13r9C         [24] 7900 	lcall	_ASCIItoHex
      00256A AC 82            [24] 7901 	mov	r4,dpl
      00256C D0 02            [24] 7902 	pop	ar2
      00256E D0 03            [24] 7903 	pop	ar3
      002570 D0 05            [24] 7904 	pop	ar5
      002572 8C 06            [24] 7905 	mov	ar6,r4
      002574 7F 00            [12] 7906 	mov	r7,#0x00
                                   7907 ;	.\ecen4350_lcd_v4.c:1709: setColorDefault();
      002576 C0 07            [24] 7908 	push	ar7
      002578 C0 06            [24] 7909 	push	ar6
      00257A C0 05            [24] 7910 	push	ar5
      00257C C0 03            [24] 7911 	push	ar3
      00257E C0 02            [24] 7912 	push	ar2
      002580 12r15rD4         [24] 7913 	lcall	_setColorDefault
      002583 D0 02            [24] 7914 	pop	ar2
      002585 D0 03            [24] 7915 	pop	ar3
      002587 D0 05            [24] 7916 	pop	ar5
      002589 D0 06            [24] 7917 	pop	ar6
      00258B D0 07            [24] 7918 	pop	ar7
                                   7919 ;	.\ecen4350_lcd_v4.c:1711: if (blockSize != blockType) {
      00258D 8D 03            [24] 7920 	mov	ar3,r5
      00258F 7C 00            [12] 7921 	mov	r4,#0x00
      002591 EE               [12] 7922 	mov	a,r6
      002592 B5 03 0A         [24] 7923 	cjne	a,ar3,00187$
      002595 EF               [12] 7924 	mov	a,r7
      002596 B5 04 06         [24] 7925 	cjne	a,ar4,00187$
      002599 D0 03            [24] 7926 	pop	ar3
      00259B D0 02            [24] 7927 	pop	ar2
      00259D 80 57            [24] 7928 	sjmp	00113$
      00259F                       7929 00187$:
      00259F D0 03            [24] 7930 	pop	ar3
      0025A1 D0 02            [24] 7931 	pop	ar2
                                   7932 ;	.\ecen4350_lcd_v4.c:1712: setCursor(0,280);
      0025A3 75*00 18         [24] 7933 	mov	_setCursor_PARM_2,#0x18
      0025A6 75*01 01         [24] 7934 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025A9 90 00 00         [24] 7935 	mov	dptr,#0x0000
      0025AC C0 07            [24] 7936 	push	ar7
      0025AE C0 06            [24] 7937 	push	ar6
      0025B0 C0 05            [24] 7938 	push	ar5
      0025B2 C0 03            [24] 7939 	push	ar3
      0025B4 C0 02            [24] 7940 	push	ar2
      0025B6 12r04rF6         [24] 7941 	lcall	_setCursor
                                   7942 ;	.\ecen4350_lcd_v4.c:1713: setColorRed();
      0025B9 12r16r19         [24] 7943 	lcall	_setColorRed
                                   7944 ;	.\ecen4350_lcd_v4.c:1714: LCD_string_write(" Mismatch Error\n Try Again");
      0025BC 90r07r07         [24] 7945 	mov	dptr,#___str_43
      0025BF 75 F0 80         [24] 7946 	mov	b,#0x80
      0025C2 12r10r10         [24] 7947 	lcall	_LCD_string_write
                                   7948 ;	.\ecen4350_lcd_v4.c:1715: setCursor(0, 260);
      0025C5 75*00 04         [24] 7949 	mov	_setCursor_PARM_2,#0x04
      0025C8 75*01 01         [24] 7950 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025CB 90 00 00         [24] 7951 	mov	dptr,#0x0000
      0025CE 12r04rF6         [24] 7952 	lcall	_setCursor
                                   7953 ;	.\ecen4350_lcd_v4.c:1716: setColorSelect();
      0025D1 12r15rDF         [24] 7954 	lcall	_setColorSelect
                                   7955 ;	.\ecen4350_lcd_v4.c:1717: LCD_string_write(" Input Size:");
      0025D4 90r06r31         [24] 7956 	mov	dptr,#___str_27
      0025D7 75 F0 80         [24] 7957 	mov	b,#0x80
      0025DA 12r10r10         [24] 7958 	lcall	_LCD_string_write
                                   7959 ;	.\ecen4350_lcd_v4.c:1718: setColorGray();
      0025DD 12r16r02         [24] 7960 	lcall	_setColorGray
                                   7961 ;	.\ecen4350_lcd_v4.c:1719: LCD_string_write(" _");
      0025E0 90r06r3E         [24] 7962 	mov	dptr,#___str_28
      0025E3 75 F0 80         [24] 7963 	mov	b,#0x80
      0025E6 12r10r10         [24] 7964 	lcall	_LCD_string_write
      0025E9 D0 02            [24] 7965 	pop	ar2
      0025EB D0 03            [24] 7966 	pop	ar3
      0025ED D0 05            [24] 7967 	pop	ar5
      0025EF D0 06            [24] 7968 	pop	ar6
      0025F1 D0 07            [24] 7969 	pop	ar7
      0025F3 02r25r27         [24] 7970 	ljmp	00115$
      0025F6                       7971 00113$:
                                   7972 ;	.\ecen4350_lcd_v4.c:1721: setCursor(0, 260);
      0025F6 75*00 04         [24] 7973 	mov	_setCursor_PARM_2,#0x04
      0025F9 75*01 01         [24] 7974 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025FC 90 00 00         [24] 7975 	mov	dptr,#0x0000
      0025FF C0 07            [24] 7976 	push	ar7
      002601 C0 06            [24] 7977 	push	ar6
      002603 C0 05            [24] 7978 	push	ar5
      002605 C0 03            [24] 7979 	push	ar3
      002607 C0 02            [24] 7980 	push	ar2
      002609 12r04rF6         [24] 7981 	lcall	_setCursor
                                   7982 ;	.\ecen4350_lcd_v4.c:1722: setColorDefault();
      00260C 12r15rD4         [24] 7983 	lcall	_setColorDefault
                                   7984 ;	.\ecen4350_lcd_v4.c:1723: LCD_string_write(" Input Size: ");
      00260F 90r06rF9         [24] 7985 	mov	dptr,#___str_42
      002612 75 F0 80         [24] 7986 	mov	b,#0x80
      002615 12r10r10         [24] 7987 	lcall	_LCD_string_write
                                   7988 ;	.\ecen4350_lcd_v4.c:1724: setColorHighlight2();
      002618 12r15rF6         [24] 7989 	lcall	_setColorHighlight2
                                   7990 ;	.\ecen4350_lcd_v4.c:1725: write(selection);
      00261B 78r00            [12] 7991 	mov	r0,#_selection
      00261D 86 82            [24] 7992 	mov	dpl,@r0
      00261F 12r0FrAA         [24] 7993 	lcall	_write
                                   7994 ;	.\ecen4350_lcd_v4.c:1726: invalidSize = 0;
      002622 78r13            [12] 7995 	mov	r0,#_move_invalidSize_65536_609
      002624 76 00            [12] 7996 	mov	@r0,#0x00
                                   7997 ;	.\ecen4350_lcd_v4.c:1727: setCursor(0,280);
      002626 75*00 18         [24] 7998 	mov	_setCursor_PARM_2,#0x18
      002629 75*01 01         [24] 7999 	mov	(_setCursor_PARM_2 + 1),#0x01
      00262C 90 00 00         [24] 8000 	mov	dptr,#0x0000
      00262F 12r04rF6         [24] 8001 	lcall	_setCursor
                                   8002 ;	.\ecen4350_lcd_v4.c:1728: setColorGreen();
      002632 12r16r2F         [24] 8003 	lcall	_setColorGreen
                                   8004 ;	.\ecen4350_lcd_v4.c:1729: LCD_string_write(" Match Confirmed\n                ");
      002635 90r07r22         [24] 8005 	mov	dptr,#___str_44
      002638 75 F0 80         [24] 8006 	mov	b,#0x80
      00263B 12r10r10         [24] 8007 	lcall	_LCD_string_write
      00263E D0 02            [24] 8008 	pop	ar2
      002640 D0 03            [24] 8009 	pop	ar3
      002642 D0 05            [24] 8010 	pop	ar5
      002644 D0 06            [24] 8011 	pop	ar6
      002646 D0 07            [24] 8012 	pop	ar7
      002648 02r25r27         [24] 8013 	ljmp	00115$
                                   8014 ;	.\ecen4350_lcd_v4.c:1735: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      00264B                       8015 00140$:
      00264B 78r11            [12] 8016 	mov	r0,#_move_sourceAddress_65536_609
      00264D EE               [12] 8017 	mov	a,r6
      00264E 26               [12] 8018 	add	a,@r0
      00264F FE               [12] 8019 	mov	r6,a
      002650 EF               [12] 8020 	mov	a,r7
      002651 08               [12] 8021 	inc	r0
      002652 36               [12] 8022 	addc	a,@r0
      002653 FF               [12] 8023 	mov	r7,a
      002654 78r11            [12] 8024 	mov	r0,#_move_sourceAddress_65536_609
      002656 86*55            [24] 8025 	mov	_move_i_131072_618,@r0
      002658 08               [12] 8026 	inc	r0
      002659 86*56            [24] 8027 	mov	(_move_i_131072_618 + 1),@r0
      00265B                       8028 00125$:
      00265B C3               [12] 8029 	clr	c
      00265C E5*55            [12] 8030 	mov	a,_move_i_131072_618
      00265E 9E               [12] 8031 	subb	a,r6
      00265F E5*56            [12] 8032 	mov	a,(_move_i_131072_618 + 1)
      002661 9F               [12] 8033 	subb	a,r7
      002662 50 37            [24] 8034 	jnc	00121$
                                   8035 ;	.\ecen4350_lcd_v4.c:1736: d = (unsigned char __xdata*)(destAddress);
      002664 8A*53            [24] 8036 	mov	_move_d_65536_609,r2
      002666 8B*54            [24] 8037 	mov	(_move_d_65536_609 + 1),r3
                                   8038 ;	.\ecen4350_lcd_v4.c:1737: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      002668 85*55 82         [24] 8039 	mov	dpl,_move_i_131072_618
      00266B 85*56 83         [24] 8040 	mov	dph,(_move_i_131072_618 + 1)
                                   8041 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8042 ;	assignBit
      00266E C2 B5            [12] 8043 	clr	_P3_5
                                   8044 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002670 E0               [24] 8045 	movx	a,@dptr
      002671 FD               [12] 8046 	mov	r5,a
                                   8047 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8048 ;	assignBit
      002672 D2 B5            [12] 8049 	setb	_P3_5
                                   8050 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8051 ;	assignBit
      002674 C2 B5            [12] 8052 	clr	_P3_5
                                   8053 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      002676 85*53 82         [24] 8054 	mov	dpl,_move_d_65536_609
      002679 85*54 83         [24] 8055 	mov	dph,(_move_d_65536_609 + 1)
      00267C ED               [12] 8056 	mov	a,r5
      00267D F0               [24] 8057 	movx	@dptr,a
                                   8058 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8059 ;	assignBit
      00267E D2 B5            [12] 8060 	setb	_P3_5
                                   8061 ;	.\ecen4350_lcd_v4.c:1738: if (destAddress == 0xFFFF) {						// check end of RAM
      002680 BA FF 09         [24] 8062 	cjne	r2,#0xff,00119$
      002683 BB FF 06         [24] 8063 	cjne	r3,#0xff,00119$
                                   8064 ;	.\ecen4350_lcd_v4.c:1739: destAddress = 0x0000;
      002686 7A 00            [12] 8065 	mov	r2,#0x00
      002688 7B 00            [12] 8066 	mov	r3,#0x00
      00268A 80 05            [24] 8067 	sjmp	00126$
      00268C                       8068 00119$:
                                   8069 ;	.\ecen4350_lcd_v4.c:1741: destAddress++;
      00268C 0A               [12] 8070 	inc	r2
      00268D BA 00 01         [24] 8071 	cjne	r2,#0x00,00191$
      002690 0B               [12] 8072 	inc	r3
      002691                       8073 00191$:
      002691                       8074 00126$:
                                   8075 ;	.\ecen4350_lcd_v4.c:1735: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      002691 05*55            [12] 8076 	inc	_move_i_131072_618
      002693 E4               [12] 8077 	clr	a
      002694 B5*55 C4         [24] 8078 	cjne	a,_move_i_131072_618,00125$
      002697 05*56            [12] 8079 	inc	(_move_i_131072_618 + 1)
      002699 80 C0            [24] 8080 	sjmp	00125$
      00269B                       8081 00121$:
                                   8082 ;	.\ecen4350_lcd_v4.c:1745: setCursor(0, 300);
      00269B 75*00 2C         [24] 8083 	mov	_setCursor_PARM_2,#0x2c
      00269E 75*01 01         [24] 8084 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026A1 90 00 00         [24] 8085 	mov	dptr,#0x0000
      0026A4 12r04rF6         [24] 8086 	lcall	_setCursor
                                   8087 ;	.\ecen4350_lcd_v4.c:1746: setColorGreen();
      0026A7 12r16r2F         [24] 8088 	lcall	_setColorGreen
                                   8089 ;	.\ecen4350_lcd_v4.c:1747: LCD_string_write(" Move Complete\n");
      0026AA 90r07rC5         [24] 8090 	mov	dptr,#___str_58
      0026AD 75 F0 80         [24] 8091 	mov	b,#0x80
      0026B0 12r10r10         [24] 8092 	lcall	_LCD_string_write
                                   8093 ;	.\ecen4350_lcd_v4.c:1748: delay(60);
      0026B3 90 00 3C         [24] 8094 	mov	dptr,#0x003c
      0026B6 12r00rE0         [24] 8095 	lcall	_delay
                                   8096 ;	.\ecen4350_lcd_v4.c:1749: selection = 'null';
      0026B9 78r00            [12] 8097 	mov	r0,#_selection
      0026BB 76 6E            [12] 8098 	mov	@r0,#0x6e
                                   8099 ;	.\ecen4350_lcd_v4.c:1750: return;
                                   8100 ;	.\ecen4350_lcd_v4.c:1751: }
      0026BD 22               [24] 8101 	ret
                                   8102 ;------------------------------------------------------------
                                   8103 ;Allocation info for local variables in function 'edit'
                                   8104 ;------------------------------------------------------------
                                   8105 ;__1310720151              Allocated to registers 
                                   8106 ;d                         Allocated with name '_edit_d_65536_628'
                                   8107 ;__1310720152              Allocated to registers 
                                   8108 ;map_address               Allocated to registers 
                                   8109 ;d                         Allocated to registers 
                                   8110 ;__1310720154              Allocated to registers 
                                   8111 ;__1310720155              Allocated to registers 
                                   8112 ;map_address               Allocated to registers 
                                   8113 ;d                         Allocated to registers 
                                   8114 ;__2621440157              Allocated to registers 
                                   8115 ;__2621440158              Allocated to registers 
                                   8116 ;map_address               Allocated to registers 
                                   8117 ;d                         Allocated to registers r2 
                                   8118 ;__2621440160              Allocated to registers 
                                   8119 ;__2621440161              Allocated to registers 
                                   8120 ;map_address               Allocated to registers 
                                   8121 ;d                         Allocated to registers 
                                   8122 ;__2621440163              Allocated to registers 
                                   8123 ;__2621440164              Allocated to registers 
                                   8124 ;map_address               Allocated to registers 
                                   8125 ;d                         Allocated to registers 
                                   8126 ;__2621440166              Allocated to registers 
                                   8127 ;__2621440167              Allocated to registers 
                                   8128 ;map_address               Allocated to registers 
                                   8129 ;d                         Allocated to registers 
                                   8130 ;address                   Allocated to registers r5 r6 
                                   8131 ;value                     Allocated to registers r7 
                                   8132 ;exit                      Allocated with name '_edit_exit_65536_628'
                                   8133 ;invalid                   Allocated with name '_edit_invalid_65536_628'
                                   8134 ;------------------------------------------------------------
                                   8135 ;	.\ecen4350_lcd_v4.c:1753: void edit(){
                                   8136 ;	-----------------------------------------
                                   8137 ;	 function edit
                                   8138 ;	-----------------------------------------
      0026BE                       8139 _edit:
                                   8140 ;	.\ecen4350_lcd_v4.c:1757: __idata unsigned char exit = 1;
      0026BE 78r14            [12] 8141 	mov	r0,#_edit_exit_65536_628
      0026C0 76 01            [12] 8142 	mov	@r0,#0x01
                                   8143 ;	.\ecen4350_lcd_v4.c:1760: clearLCD();
      0026C2 12r0Dr93         [24] 8144 	lcall	_clearLCD
                                   8145 ;	.\ecen4350_lcd_v4.c:1763: fillTop(GRAY);
      0026C5 90 D6 BA         [24] 8146 	mov	dptr,#0xd6ba
      0026C8 12r0BrC6         [24] 8147 	lcall	_fillTop
                                   8148 ;	.\ecen4350_lcd_v4.c:1764: setTextSize(5);
      0026CB 75 82 05         [24] 8149 	mov	dpl,#0x05
      0026CE 12r05r10         [24] 8150 	lcall	_setTextSize
                                   8151 ;	.\ecen4350_lcd_v4.c:1765: setColorMenu();
      0026D1 12r16r0D         [24] 8152 	lcall	_setColorMenu
                                   8153 ;	.\ecen4350_lcd_v4.c:1766: setCursor(30, 0);
      0026D4 E4               [12] 8154 	clr	a
      0026D5 F5*00            [12] 8155 	mov	_setCursor_PARM_2,a
      0026D7 F5*01            [12] 8156 	mov	(_setCursor_PARM_2 + 1),a
      0026D9 90 00 1E         [24] 8157 	mov	dptr,#0x001e
      0026DC 12r04rF6         [24] 8158 	lcall	_setCursor
                                   8159 ;	.\ecen4350_lcd_v4.c:1767: LCD_string_write("[EDIT]\n");
      0026DF 90r07rD5         [24] 8160 	mov	dptr,#___str_59
      0026E2 75 F0 80         [24] 8161 	mov	b,#0x80
      0026E5 12r10r10         [24] 8162 	lcall	_LCD_string_write
                                   8163 ;	.\ecen4350_lcd_v4.c:1768: setTextSize(2);
      0026E8 75 82 02         [24] 8164 	mov	dpl,#0x02
      0026EB 12r05r10         [24] 8165 	lcall	_setTextSize
                                   8166 ;	.\ecen4350_lcd_v4.c:1769: setColorDefault();
      0026EE 12r15rD4         [24] 8167 	lcall	_setColorDefault
                                   8168 ;	.\ecen4350_lcd_v4.c:1770: setCursor(0, 60);
      0026F1 75*00 3C         [24] 8169 	mov	_setCursor_PARM_2,#0x3c
      0026F4 75*01 00         [24] 8170 	mov	(_setCursor_PARM_2 + 1),#0x00
      0026F7 90 00 00         [24] 8171 	mov	dptr,#0x0000
      0026FA 12r04rF6         [24] 8172 	lcall	_setCursor
                                   8173 ;	.\ecen4350_lcd_v4.c:1771: LCD_string_write(" Edit Address:");
      0026FD 90r07rDD         [24] 8174 	mov	dptr,#___str_60
      002700 75 F0 80         [24] 8175 	mov	b,#0x80
      002703 12r10r10         [24] 8176 	lcall	_LCD_string_write
                                   8177 ;	.\ecen4350_lcd_v4.c:1772: setCursor(0, 80);
      002706 75*00 50         [24] 8178 	mov	_setCursor_PARM_2,#0x50
      002709 75*01 00         [24] 8179 	mov	(_setCursor_PARM_2 + 1),#0x00
      00270C 90 00 00         [24] 8180 	mov	dptr,#0x0000
      00270F 12r04rF6         [24] 8181 	lcall	_setCursor
                                   8182 ;	.\ecen4350_lcd_v4.c:1773: setColorGray();
      002712 12r16r02         [24] 8183 	lcall	_setColorGray
                                   8184 ;	.\ecen4350_lcd_v4.c:1774: LCD_string_write(" 0x____");
      002715 90r05rF2         [24] 8185 	mov	dptr,#___str_24
      002718 75 F0 80         [24] 8186 	mov	b,#0x80
      00271B 12r10r10         [24] 8187 	lcall	_LCD_string_write
                                   8188 ;	.\ecen4350_lcd_v4.c:1775: setCursor(0, 110);
      00271E 75*00 6E         [24] 8189 	mov	_setCursor_PARM_2,#0x6e
      002721 75*01 00         [24] 8190 	mov	(_setCursor_PARM_2 + 1),#0x00
      002724 90 00 00         [24] 8191 	mov	dptr,#0x0000
      002727 12r04rF6         [24] 8192 	lcall	_setCursor
                                   8193 ;	.\ecen4350_lcd_v4.c:1776: setColorDefault();
      00272A 12r15rD4         [24] 8194 	lcall	_setColorDefault
                                   8195 ;	.\ecen4350_lcd_v4.c:1777: LCD_string_write(" Location Contents:\n");
      00272D 90r07rEC         [24] 8196 	mov	dptr,#___str_61
      002730 75 F0 80         [24] 8197 	mov	b,#0x80
      002733 12r10r10         [24] 8198 	lcall	_LCD_string_write
                                   8199 ;	.\ecen4350_lcd_v4.c:1778: setColorGray();
      002736 12r16r02         [24] 8200 	lcall	_setColorGray
                                   8201 ;	.\ecen4350_lcd_v4.c:1779: LCD_string_write(" __");
      002739 90r08r01         [24] 8202 	mov	dptr,#___str_62
      00273C 75 F0 80         [24] 8203 	mov	b,#0x80
      00273F 12r10r10         [24] 8204 	lcall	_LCD_string_write
                                   8205 ;	.\ecen4350_lcd_v4.c:1780: setCursor(0, 160);
      002742 75*00 A0         [24] 8206 	mov	_setCursor_PARM_2,#0xa0
      002745 75*01 00         [24] 8207 	mov	(_setCursor_PARM_2 + 1),#0x00
      002748 90 00 00         [24] 8208 	mov	dptr,#0x0000
      00274B 12r04rF6         [24] 8209 	lcall	_setCursor
                                   8210 ;	.\ecen4350_lcd_v4.c:1781: setColorDefault();
      00274E 12r15rD4         [24] 8211 	lcall	_setColorDefault
                                   8212 ;	.\ecen4350_lcd_v4.c:1782: LCD_string_write(" Enter New Value:\n");
      002751 90r08r05         [24] 8213 	mov	dptr,#___str_63
      002754 75 F0 80         [24] 8214 	mov	b,#0x80
      002757 12r10r10         [24] 8215 	lcall	_LCD_string_write
                                   8216 ;	.\ecen4350_lcd_v4.c:1783: setColorGray();
      00275A 12r16r02         [24] 8217 	lcall	_setColorGray
                                   8218 ;	.\ecen4350_lcd_v4.c:1784: LCD_string_write(" __");
      00275D 90r08r01         [24] 8219 	mov	dptr,#___str_62
      002760 75 F0 80         [24] 8220 	mov	b,#0x80
      002763 12r10r10         [24] 8221 	lcall	_LCD_string_write
                                   8222 ;	.\ecen4350_lcd_v4.c:1785: setCursor(0,210);
      002766 75*00 D2         [24] 8223 	mov	_setCursor_PARM_2,#0xd2
      002769 75*01 00         [24] 8224 	mov	(_setCursor_PARM_2 + 1),#0x00
      00276C 90 00 00         [24] 8225 	mov	dptr,#0x0000
      00276F 12r04rF6         [24] 8226 	lcall	_setCursor
                                   8227 ;	.\ecen4350_lcd_v4.c:1786: setColorDefault();
      002772 12r15rD4         [24] 8228 	lcall	_setColorDefault
                                   8229 ;	.\ecen4350_lcd_v4.c:1787: LCD_string_write(" Choose Next Action:\n");
      002775 90r08r18         [24] 8230 	mov	dptr,#___str_64
      002778 75 F0 80         [24] 8231 	mov	b,#0x80
      00277B 12r10r10         [24] 8232 	lcall	_LCD_string_write
                                   8233 ;	.\ecen4350_lcd_v4.c:1788: setColorGray();
      00277E 12r16r02         [24] 8234 	lcall	_setColorGray
                                   8235 ;	.\ecen4350_lcd_v4.c:1789: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002781 90r08r2E         [24] 8236 	mov	dptr,#___str_65
      002784 75 F0 80         [24] 8237 	mov	b,#0x80
      002787 12r10r10         [24] 8238 	lcall	_LCD_string_write
                                   8239 ;	.\ecen4350_lcd_v4.c:1790: LCD_string_write("  <0> Exit");
      00278A 90r08r54         [24] 8240 	mov	dptr,#___str_66
      00278D 75 F0 80         [24] 8241 	mov	b,#0x80
      002790 12r10r10         [24] 8242 	lcall	_LCD_string_write
                                   8243 ;	.\ecen4350_lcd_v4.c:1797: setColorSelect();
      002793 12r15rDF         [24] 8244 	lcall	_setColorSelect
                                   8245 ;	.\ecen4350_lcd_v4.c:1798: setCursor(0, 60);
      002796 75*00 3C         [24] 8246 	mov	_setCursor_PARM_2,#0x3c
      002799 75*01 00         [24] 8247 	mov	(_setCursor_PARM_2 + 1),#0x00
      00279C 90 00 00         [24] 8248 	mov	dptr,#0x0000
      00279F 12r04rF6         [24] 8249 	lcall	_setCursor
                                   8250 ;	.\ecen4350_lcd_v4.c:1799: LCD_string_write(" Edit Address:");
      0027A2 90r07rDD         [24] 8251 	mov	dptr,#___str_60
      0027A5 75 F0 80         [24] 8252 	mov	b,#0x80
      0027A8 12r10r10         [24] 8253 	lcall	_LCD_string_write
                                   8254 ;	.\ecen4350_lcd_v4.c:1800: setCursor(0, 80);
      0027AB 75*00 50         [24] 8255 	mov	_setCursor_PARM_2,#0x50
      0027AE 75*01 00         [24] 8256 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027B1 90 00 00         [24] 8257 	mov	dptr,#0x0000
      0027B4 12r04rF6         [24] 8258 	lcall	_setCursor
                                   8259 ;	.\ecen4350_lcd_v4.c:1801: LCD_string_write(" ");
      0027B7 90r06r54         [24] 8260 	mov	dptr,#___str_30
      0027BA 75 F0 80         [24] 8261 	mov	b,#0x80
      0027BD 12r10r10         [24] 8262 	lcall	_LCD_string_write
                                   8263 ;	.\ecen4350_lcd_v4.c:1802: setColorHighlight1();
      0027C0 12r15rEA         [24] 8264 	lcall	_setColorHighlight1
                                   8265 ;	.\ecen4350_lcd_v4.c:1803: LCD_string_write("0x");
      0027C3 90r05r29         [24] 8266 	mov	dptr,#___str_2
      0027C6 75 F0 80         [24] 8267 	mov	b,#0x80
      0027C9 12r10r10         [24] 8268 	lcall	_LCD_string_write
                                   8269 ;	.\ecen4350_lcd_v4.c:1804: address = inputAddress();		// input 16-bit address and store in memory
      0027CC 12r16r45         [24] 8270 	lcall	_inputAddress
      0027CF AD 82            [24] 8271 	mov	r5,dpl
      0027D1 AE 83            [24] 8272 	mov	r6,dph
                                   8273 ;	.\ecen4350_lcd_v4.c:1805: d = (unsigned char __xdata*)address;
      0027D3 8D 03            [24] 8274 	mov	ar3,r5
      0027D5 8E 04            [24] 8275 	mov	ar4,r6
                                   8276 ;	.\ecen4350_lcd_v4.c:1808: setColorDefault();
      0027D7 C0 06            [24] 8277 	push	ar6
      0027D9 C0 05            [24] 8278 	push	ar5
      0027DB C0 04            [24] 8279 	push	ar4
      0027DD C0 03            [24] 8280 	push	ar3
      0027DF 12r15rD4         [24] 8281 	lcall	_setColorDefault
                                   8282 ;	.\ecen4350_lcd_v4.c:1809: setCursor(0, 60);
      0027E2 75*00 3C         [24] 8283 	mov	_setCursor_PARM_2,#0x3c
      0027E5 75*01 00         [24] 8284 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027E8 90 00 00         [24] 8285 	mov	dptr,#0x0000
      0027EB 12r04rF6         [24] 8286 	lcall	_setCursor
                                   8287 ;	.\ecen4350_lcd_v4.c:1810: LCD_string_write(" Edit Address:");
      0027EE 90r07rDD         [24] 8288 	mov	dptr,#___str_60
      0027F1 75 F0 80         [24] 8289 	mov	b,#0x80
      0027F4 12r10r10         [24] 8290 	lcall	_LCD_string_write
                                   8291 ;	.\ecen4350_lcd_v4.c:1811: setCursor(0, 80);
      0027F7 75*00 50         [24] 8292 	mov	_setCursor_PARM_2,#0x50
      0027FA 75*01 00         [24] 8293 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027FD 90 00 00         [24] 8294 	mov	dptr,#0x0000
      002800 12r04rF6         [24] 8295 	lcall	_setCursor
                                   8296 ;	.\ecen4350_lcd_v4.c:1812: LCD_string_write(" ");
      002803 90r06r54         [24] 8297 	mov	dptr,#___str_30
      002806 75 F0 80         [24] 8298 	mov	b,#0x80
      002809 12r10r10         [24] 8299 	lcall	_LCD_string_write
                                   8300 ;	.\ecen4350_lcd_v4.c:1813: setColorHighlight2();
      00280C 12r15rF6         [24] 8301 	lcall	_setColorHighlight2
                                   8302 ;	.\ecen4350_lcd_v4.c:1814: LCD_string_write("0x");
      00280F 90r05r29         [24] 8303 	mov	dptr,#___str_2
      002812 75 F0 80         [24] 8304 	mov	b,#0x80
      002815 12r10r10         [24] 8305 	lcall	_LCD_string_write
      002818 D0 03            [24] 8306 	pop	ar3
      00281A D0 04            [24] 8307 	pop	ar4
      00281C D0 05            [24] 8308 	pop	ar5
      00281E D0 06            [24] 8309 	pop	ar6
                                   8310 ;	.\ecen4350_lcd_v4.c:1815: print16Hex(address);		// print 16-bit address from stored memory
      002820 8D 82            [24] 8311 	mov	dpl,r5
      002822 8E 83            [24] 8312 	mov	dph,r6
      002824 C0 06            [24] 8313 	push	ar6
      002826 C0 05            [24] 8314 	push	ar5
      002828 C0 04            [24] 8315 	push	ar4
      00282A C0 03            [24] 8316 	push	ar3
      00282C 12r14rF8         [24] 8317 	lcall	_print16Hex
                                   8318 ;	.\ecen4350_lcd_v4.c:1818: setCursor(0, 110);
      00282F 75*00 6E         [24] 8319 	mov	_setCursor_PARM_2,#0x6e
      002832 75*01 00         [24] 8320 	mov	(_setCursor_PARM_2 + 1),#0x00
      002835 90 00 00         [24] 8321 	mov	dptr,#0x0000
      002838 12r04rF6         [24] 8322 	lcall	_setCursor
                                   8323 ;	.\ecen4350_lcd_v4.c:1819: setColorDefault();
      00283B 12r15rD4         [24] 8324 	lcall	_setColorDefault
                                   8325 ;	.\ecen4350_lcd_v4.c:1820: LCD_string_write("\n ");
      00283E 90r08r5F         [24] 8326 	mov	dptr,#___str_67
      002841 75 F0 80         [24] 8327 	mov	b,#0x80
      002844 12r10r10         [24] 8328 	lcall	_LCD_string_write
                                   8329 ;	.\ecen4350_lcd_v4.c:1821: setColorHighlight2();
      002847 12r15rF6         [24] 8330 	lcall	_setColorHighlight2
      00284A D0 03            [24] 8331 	pop	ar3
      00284C D0 04            [24] 8332 	pop	ar4
                                   8333 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8334 ;	assignBit
      00284E C2 B5            [12] 8335 	clr	_P3_5
                                   8336 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002850 8B 82            [24] 8337 	mov	dpl,r3
      002852 8C 83            [24] 8338 	mov	dph,r4
      002854 E0               [24] 8339 	movx	a,@dptr
      002855 F5 82            [12] 8340 	mov	dpl,a
                                   8341 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8342 ;	assignBit
      002857 D2 B5            [12] 8343 	setb	_P3_5
                                   8344 ;	.\ecen4350_lcd_v4.c:1822: print8Hex(ramRead8(d));
      002859 C0 04            [24] 8345 	push	ar4
      00285B C0 03            [24] 8346 	push	ar3
      00285D 12r14rE1         [24] 8347 	lcall	_print8Hex
                                   8348 ;	.\ecen4350_lcd_v4.c:1825: setCursor(0, 160);
      002860 75*00 A0         [24] 8349 	mov	_setCursor_PARM_2,#0xa0
      002863 75*01 00         [24] 8350 	mov	(_setCursor_PARM_2 + 1),#0x00
      002866 90 00 00         [24] 8351 	mov	dptr,#0x0000
      002869 12r04rF6         [24] 8352 	lcall	_setCursor
                                   8353 ;	.\ecen4350_lcd_v4.c:1826: setColorSelect();
      00286C 12r15rDF         [24] 8354 	lcall	_setColorSelect
                                   8355 ;	.\ecen4350_lcd_v4.c:1827: LCD_string_write(" Enter New Value:\n ");
      00286F 90r08r62         [24] 8356 	mov	dptr,#___str_68
      002872 75 F0 80         [24] 8357 	mov	b,#0x80
      002875 12r10r10         [24] 8358 	lcall	_LCD_string_write
                                   8359 ;	.\ecen4350_lcd_v4.c:1828: setColorHighlight1();
      002878 12r15rEA         [24] 8360 	lcall	_setColorHighlight1
                                   8361 ;	.\ecen4350_lcd_v4.c:1829: selection = keyDetect();
      00287B 12r11r2E         [24] 8362 	lcall	_keyDetect
      00287E AA 82            [24] 8363 	mov	r2,dpl
      002880 78r00            [12] 8364 	mov	r0,#_selection
      002882 A6 02            [24] 8365 	mov	@r0,ar2
                                   8366 ;	.\ecen4350_lcd_v4.c:1830: write(selection);
      002884 8A 82            [24] 8367 	mov	dpl,r2
      002886 12r0FrAA         [24] 8368 	lcall	_write
                                   8369 ;	.\ecen4350_lcd_v4.c:1831: selection = ASCIItoHex(selection);
      002889 78r00            [12] 8370 	mov	r0,#_selection
      00288B 86 82            [24] 8371 	mov	dpl,@r0
      00288D 12r13r9C         [24] 8372 	lcall	_ASCIItoHex
      002890 AA 82            [24] 8373 	mov	r2,dpl
      002892 78r00            [12] 8374 	mov	r0,#_selection
      002894 A6 02            [24] 8375 	mov	@r0,ar2
                                   8376 ;	.\ecen4350_lcd_v4.c:1832: value |= selection * 16;
      002896 EA               [12] 8377 	mov	a,r2
      002897 C4               [12] 8378 	swap	a
      002898 54 F0            [12] 8379 	anl	a,#0xf0
      00289A FA               [12] 8380 	mov	r2,a
                                   8381 ;	.\ecen4350_lcd_v4.c:1833: selection = keyDetect();
      00289B C0 02            [24] 8382 	push	ar2
      00289D 12r11r2E         [24] 8383 	lcall	_keyDetect
      0028A0 AF 82            [24] 8384 	mov	r7,dpl
      0028A2 78r00            [12] 8385 	mov	r0,#_selection
      0028A4 A6 07            [24] 8386 	mov	@r0,ar7
                                   8387 ;	.\ecen4350_lcd_v4.c:1834: write(selection);
      0028A6 8F 82            [24] 8388 	mov	dpl,r7
      0028A8 12r0FrAA         [24] 8389 	lcall	_write
                                   8390 ;	.\ecen4350_lcd_v4.c:1835: selection = ASCIItoHex(selection);
      0028AB 78r00            [12] 8391 	mov	r0,#_selection
      0028AD 86 82            [24] 8392 	mov	dpl,@r0
      0028AF 12r13r9C         [24] 8393 	lcall	_ASCIItoHex
      0028B2 AF 82            [24] 8394 	mov	r7,dpl
      0028B4 D0 02            [24] 8395 	pop	ar2
      0028B6 D0 03            [24] 8396 	pop	ar3
      0028B8 D0 04            [24] 8397 	pop	ar4
      0028BA D0 05            [24] 8398 	pop	ar5
      0028BC D0 06            [24] 8399 	pop	ar6
      0028BE 78r00            [12] 8400 	mov	r0,#_selection
      0028C0 A6 07            [24] 8401 	mov	@r0,ar7
                                   8402 ;	.\ecen4350_lcd_v4.c:1836: value |= selection;
      0028C2 EA               [12] 8403 	mov	a,r2
      0028C3 42 07            [12] 8404 	orl	ar7,a
                                   8405 ;	.\ecen4350_lcd_v4.c:1839: setColorDefault();
      0028C5 C0 07            [24] 8406 	push	ar7
      0028C7 C0 06            [24] 8407 	push	ar6
      0028C9 C0 05            [24] 8408 	push	ar5
      0028CB C0 04            [24] 8409 	push	ar4
      0028CD C0 03            [24] 8410 	push	ar3
      0028CF 12r15rD4         [24] 8411 	lcall	_setColorDefault
                                   8412 ;	.\ecen4350_lcd_v4.c:1840: setCursor(0, 160);
      0028D2 75*00 A0         [24] 8413 	mov	_setCursor_PARM_2,#0xa0
      0028D5 75*01 00         [24] 8414 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028D8 90 00 00         [24] 8415 	mov	dptr,#0x0000
      0028DB 12r04rF6         [24] 8416 	lcall	_setCursor
                                   8417 ;	.\ecen4350_lcd_v4.c:1841: LCD_string_write(" Enter New Value:\n ");
      0028DE 90r08r62         [24] 8418 	mov	dptr,#___str_68
      0028E1 75 F0 80         [24] 8419 	mov	b,#0x80
      0028E4 12r10r10         [24] 8420 	lcall	_LCD_string_write
                                   8421 ;	.\ecen4350_lcd_v4.c:1842: setColorHighlight2();
      0028E7 12r15rF6         [24] 8422 	lcall	_setColorHighlight2
      0028EA D0 03            [24] 8423 	pop	ar3
      0028EC D0 04            [24] 8424 	pop	ar4
      0028EE D0 05            [24] 8425 	pop	ar5
      0028F0 D0 06            [24] 8426 	pop	ar6
      0028F2 D0 07            [24] 8427 	pop	ar7
                                   8428 ;	.\ecen4350_lcd_v4.c:1843: print8Hex(value);
      0028F4 8F 82            [24] 8429 	mov	dpl,r7
      0028F6 C0 07            [24] 8430 	push	ar7
      0028F8 C0 06            [24] 8431 	push	ar6
      0028FA C0 05            [24] 8432 	push	ar5
      0028FC C0 04            [24] 8433 	push	ar4
      0028FE C0 03            [24] 8434 	push	ar3
      002900 12r14rE1         [24] 8435 	lcall	_print8Hex
      002903 D0 03            [24] 8436 	pop	ar3
      002905 D0 04            [24] 8437 	pop	ar4
      002907 D0 05            [24] 8438 	pop	ar5
      002909 D0 06            [24] 8439 	pop	ar6
      00290B D0 07            [24] 8440 	pop	ar7
                                   8441 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8442 ;	assignBit
      00290D C2 B5            [12] 8443 	clr	_P3_5
                                   8444 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      00290F 8B 82            [24] 8445 	mov	dpl,r3
      002911 8C 83            [24] 8446 	mov	dph,r4
      002913 EF               [12] 8447 	mov	a,r7
      002914 F0               [24] 8448 	movx	@dptr,a
                                   8449 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8450 ;	assignBit
      002915 D2 B5            [12] 8451 	setb	_P3_5
                                   8452 ;	.\ecen4350_lcd_v4.c:1848: setCursor(0, 210);
      002917 75*00 D2         [24] 8453 	mov	_setCursor_PARM_2,#0xd2
      00291A 75*01 00         [24] 8454 	mov	(_setCursor_PARM_2 + 1),#0x00
      00291D 90 00 00         [24] 8455 	mov	dptr,#0x0000
      002920 C0 06            [24] 8456 	push	ar6
      002922 C0 05            [24] 8457 	push	ar5
      002924 12r04rF6         [24] 8458 	lcall	_setCursor
                                   8459 ;	.\ecen4350_lcd_v4.c:1849: setColorSelect();
      002927 12r15rDF         [24] 8460 	lcall	_setColorSelect
                                   8461 ;	.\ecen4350_lcd_v4.c:1850: LCD_string_write(" Choose Next Action:\n");
      00292A 90r08r18         [24] 8462 	mov	dptr,#___str_64
      00292D 75 F0 80         [24] 8463 	mov	b,#0x80
      002930 12r10r10         [24] 8464 	lcall	_LCD_string_write
                                   8465 ;	.\ecen4350_lcd_v4.c:1851: setColorWhite();
      002933 12r16r24         [24] 8466 	lcall	_setColorWhite
                                   8467 ;	.\ecen4350_lcd_v4.c:1852: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002936 90r08r2E         [24] 8468 	mov	dptr,#___str_65
      002939 75 F0 80         [24] 8469 	mov	b,#0x80
      00293C 12r10r10         [24] 8470 	lcall	_LCD_string_write
                                   8471 ;	.\ecen4350_lcd_v4.c:1853: LCD_string_write("  <0> Exit");
      00293F 90r08r54         [24] 8472 	mov	dptr,#___str_66
      002942 75 F0 80         [24] 8473 	mov	b,#0x80
      002945 12r10r10         [24] 8474 	lcall	_LCD_string_write
      002948 D0 05            [24] 8475 	pop	ar5
      00294A D0 06            [24] 8476 	pop	ar6
                                   8477 ;	.\ecen4350_lcd_v4.c:1859: while(exit){
      00294C                       8478 00109$:
      00294C 78r14            [12] 8479 	mov	r0,#_edit_exit_65536_628
      00294E E6               [12] 8480 	mov	a,@r0
      00294F 70 01            [24] 8481 	jnz	00150$
      002951 22               [24] 8482 	ret
      002952                       8483 00150$:
                                   8484 ;	.\ecen4350_lcd_v4.c:1860: selection = keyDetect();
      002952 C0 06            [24] 8485 	push	ar6
      002954 C0 05            [24] 8486 	push	ar5
      002956 12r11r2E         [24] 8487 	lcall	_keyDetect
      002959 AF 82            [24] 8488 	mov	r7,dpl
      00295B D0 05            [24] 8489 	pop	ar5
      00295D D0 06            [24] 8490 	pop	ar6
      00295F 78r00            [12] 8491 	mov	r0,#_selection
      002961 A6 07            [24] 8492 	mov	@r0,ar7
                                   8493 ;	.\ecen4350_lcd_v4.c:1861: invalid = 1;
      002963 78r15            [12] 8494 	mov	r0,#_edit_invalid_65536_628
      002965 76 01            [12] 8495 	mov	@r0,#0x01
                                   8496 ;	.\ecen4350_lcd_v4.c:1862: if (selection == '1') {		/* Highlight choice and gray out others */
      002967 BF 31 02         [24] 8497 	cjne	r7,#0x31,00151$
      00296A 80 03            [24] 8498 	sjmp	00152$
      00296C                       8499 00151$:
      00296C 02r2Br4B         [24] 8500 	ljmp	00102$
      00296F                       8501 00152$:
                                   8502 ;	.\ecen4350_lcd_v4.c:1863: invalid = 0;
      00296F 78r15            [12] 8503 	mov	r0,#_edit_invalid_65536_628
      002971 76 00            [12] 8504 	mov	@r0,#0x00
                                   8505 ;	.\ecen4350_lcd_v4.c:1865: setCursor(0, 210);
      002973 75*00 D2         [24] 8506 	mov	_setCursor_PARM_2,#0xd2
      002976 75*01 00         [24] 8507 	mov	(_setCursor_PARM_2 + 1),#0x00
      002979 90 00 00         [24] 8508 	mov	dptr,#0x0000
      00297C C0 06            [24] 8509 	push	ar6
      00297E C0 05            [24] 8510 	push	ar5
      002980 12r04rF6         [24] 8511 	lcall	_setCursor
                                   8512 ;	.\ecen4350_lcd_v4.c:1866: setColorDefault();
      002983 12r15rD4         [24] 8513 	lcall	_setColorDefault
                                   8514 ;	.\ecen4350_lcd_v4.c:1867: LCD_string_write("\n  ");
      002986 90r06r9E         [24] 8515 	mov	dptr,#___str_36
      002989 75 F0 80         [24] 8516 	mov	b,#0x80
      00298C 12r10r10         [24] 8517 	lcall	_LCD_string_write
                                   8518 ;	.\ecen4350_lcd_v4.c:1868: setColorHighlight2();
      00298F 12r15rF6         [24] 8519 	lcall	_setColorHighlight2
                                   8520 ;	.\ecen4350_lcd_v4.c:1869: LCD_string_write("<1> Next Address\n");
      002992 90r08r76         [24] 8521 	mov	dptr,#___str_69
      002995 75 F0 80         [24] 8522 	mov	b,#0x80
      002998 12r10r10         [24] 8523 	lcall	_LCD_string_write
                                   8524 ;	.\ecen4350_lcd_v4.c:1870: setColorGray();
      00299B 12r16r02         [24] 8525 	lcall	_setColorGray
                                   8526 ;	.\ecen4350_lcd_v4.c:1871: LCD_string_write("\n\n               ");
      00299E 90r08r88         [24] 8527 	mov	dptr,#___str_70
      0029A1 75 F0 80         [24] 8528 	mov	b,#0x80
      0029A4 12r10r10         [24] 8529 	lcall	_LCD_string_write
                                   8530 ;	.\ecen4350_lcd_v4.c:1872: delay(60);
      0029A7 90 00 3C         [24] 8531 	mov	dptr,#0x003c
      0029AA 12r00rE0         [24] 8532 	lcall	_delay
                                   8533 ;	.\ecen4350_lcd_v4.c:1875: setCursor(0, 80);
      0029AD 75*00 50         [24] 8534 	mov	_setCursor_PARM_2,#0x50
      0029B0 75*01 00         [24] 8535 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029B3 90 00 00         [24] 8536 	mov	dptr,#0x0000
      0029B6 12r04rF6         [24] 8537 	lcall	_setCursor
                                   8538 ;	.\ecen4350_lcd_v4.c:1876: setColorGray();
      0029B9 12r16r02         [24] 8539 	lcall	_setColorGray
                                   8540 ;	.\ecen4350_lcd_v4.c:1877: LCD_string_write(" 0x____");
      0029BC 90r05rF2         [24] 8541 	mov	dptr,#___str_24
      0029BF 75 F0 80         [24] 8542 	mov	b,#0x80
      0029C2 12r10r10         [24] 8543 	lcall	_LCD_string_write
                                   8544 ;	.\ecen4350_lcd_v4.c:1878: setCursor(0, 110);
      0029C5 75*00 6E         [24] 8545 	mov	_setCursor_PARM_2,#0x6e
      0029C8 75*01 00         [24] 8546 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029CB 90 00 00         [24] 8547 	mov	dptr,#0x0000
      0029CE 12r04rF6         [24] 8548 	lcall	_setCursor
                                   8549 ;	.\ecen4350_lcd_v4.c:1879: LCD_string_write("\n __");
      0029D1 90r08r9A         [24] 8550 	mov	dptr,#___str_71
      0029D4 75 F0 80         [24] 8551 	mov	b,#0x80
      0029D7 12r10r10         [24] 8552 	lcall	_LCD_string_write
                                   8553 ;	.\ecen4350_lcd_v4.c:1880: setCursor(0, 160);
      0029DA 75*00 A0         [24] 8554 	mov	_setCursor_PARM_2,#0xa0
      0029DD 75*01 00         [24] 8555 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029E0 90 00 00         [24] 8556 	mov	dptr,#0x0000
      0029E3 12r04rF6         [24] 8557 	lcall	_setCursor
                                   8558 ;	.\ecen4350_lcd_v4.c:1881: LCD_string_write("\n __");
      0029E6 90r08r9A         [24] 8559 	mov	dptr,#___str_71
      0029E9 75 F0 80         [24] 8560 	mov	b,#0x80
      0029EC 12r10r10         [24] 8561 	lcall	_LCD_string_write
                                   8562 ;	.\ecen4350_lcd_v4.c:1882: setCursor(0, 210);
      0029EF 75*00 D2         [24] 8563 	mov	_setCursor_PARM_2,#0xd2
      0029F2 75*01 00         [24] 8564 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029F5 90 00 00         [24] 8565 	mov	dptr,#0x0000
      0029F8 12r04rF6         [24] 8566 	lcall	_setCursor
                                   8567 ;	.\ecen4350_lcd_v4.c:1883: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      0029FB 90r08r9F         [24] 8568 	mov	dptr,#___str_72
      0029FE 75 F0 80         [24] 8569 	mov	b,#0x80
      002A01 12r10r10         [24] 8570 	lcall	_LCD_string_write
      002A04 D0 05            [24] 8571 	pop	ar5
      002A06 D0 06            [24] 8572 	pop	ar6
                                   8573 ;	.\ecen4350_lcd_v4.c:1886: address++;
      002A08 0D               [12] 8574 	inc	r5
      002A09 BD 00 01         [24] 8575 	cjne	r5,#0x00,00153$
      002A0C 0E               [12] 8576 	inc	r6
      002A0D                       8577 00153$:
                                   8578 ;	.\ecen4350_lcd_v4.c:1887: d = (unsigned char __xdata*)address;
      002A0D 8D*57            [24] 8579 	mov	_edit_d_65536_628,r5
      002A0F 8E*58            [24] 8580 	mov	(_edit_d_65536_628 + 1),r6
                                   8581 ;	.\ecen4350_lcd_v4.c:1888: setCursor(0, 80);
      002A11 75*00 50         [24] 8582 	mov	_setCursor_PARM_2,#0x50
      002A14 75*01 00         [24] 8583 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A17 90 00 00         [24] 8584 	mov	dptr,#0x0000
      002A1A C0 06            [24] 8585 	push	ar6
      002A1C C0 05            [24] 8586 	push	ar5
      002A1E 12r04rF6         [24] 8587 	lcall	_setCursor
                                   8588 ;	.\ecen4350_lcd_v4.c:1889: LCD_string_write(" ");
      002A21 90r06r54         [24] 8589 	mov	dptr,#___str_30
      002A24 75 F0 80         [24] 8590 	mov	b,#0x80
      002A27 12r10r10         [24] 8591 	lcall	_LCD_string_write
                                   8592 ;	.\ecen4350_lcd_v4.c:1890: setColorHighlight2();
      002A2A 12r15rF6         [24] 8593 	lcall	_setColorHighlight2
                                   8594 ;	.\ecen4350_lcd_v4.c:1891: LCD_string_write("0x");
      002A2D 90r05r29         [24] 8595 	mov	dptr,#___str_2
      002A30 75 F0 80         [24] 8596 	mov	b,#0x80
      002A33 12r10r10         [24] 8597 	lcall	_LCD_string_write
      002A36 D0 05            [24] 8598 	pop	ar5
      002A38 D0 06            [24] 8599 	pop	ar6
                                   8600 ;	.\ecen4350_lcd_v4.c:1892: print16Hex(address);		// print 16-bit address from stored memory
      002A3A 8D 82            [24] 8601 	mov	dpl,r5
      002A3C 8E 83            [24] 8602 	mov	dph,r6
      002A3E C0 06            [24] 8603 	push	ar6
      002A40 C0 05            [24] 8604 	push	ar5
      002A42 12r14rF8         [24] 8605 	lcall	_print16Hex
                                   8606 ;	.\ecen4350_lcd_v4.c:1895: setCursor(0, 110);
      002A45 75*00 6E         [24] 8607 	mov	_setCursor_PARM_2,#0x6e
      002A48 75*01 00         [24] 8608 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A4B 90 00 00         [24] 8609 	mov	dptr,#0x0000
      002A4E 12r04rF6         [24] 8610 	lcall	_setCursor
                                   8611 ;	.\ecen4350_lcd_v4.c:1896: setColorDefault();
      002A51 12r15rD4         [24] 8612 	lcall	_setColorDefault
                                   8613 ;	.\ecen4350_lcd_v4.c:1897: LCD_string_write("\n ");
      002A54 90r08r5F         [24] 8614 	mov	dptr,#___str_67
      002A57 75 F0 80         [24] 8615 	mov	b,#0x80
      002A5A 12r10r10         [24] 8616 	lcall	_LCD_string_write
                                   8617 ;	.\ecen4350_lcd_v4.c:1898: setColorHighlight2();
      002A5D 12r15rF6         [24] 8618 	lcall	_setColorHighlight2
                                   8619 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8620 ;	assignBit
      002A60 C2 B5            [12] 8621 	clr	_P3_5
                                   8622 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002A62 85*57 82         [24] 8623 	mov	dpl,_edit_d_65536_628
      002A65 85*58 83         [24] 8624 	mov	dph,(_edit_d_65536_628 + 1)
      002A68 E0               [24] 8625 	movx	a,@dptr
      002A69 FA               [12] 8626 	mov	r2,a
                                   8627 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8628 ;	assignBit
      002A6A D2 B5            [12] 8629 	setb	_P3_5
                                   8630 ;	.\ecen4350_lcd_v4.c:1899: print8Hex(ramRead8(d));
      002A6C 8A 82            [24] 8631 	mov	dpl,r2
      002A6E 12r14rE1         [24] 8632 	lcall	_print8Hex
                                   8633 ;	.\ecen4350_lcd_v4.c:1902: setCursor(0, 160);
      002A71 75*00 A0         [24] 8634 	mov	_setCursor_PARM_2,#0xa0
      002A74 75*01 00         [24] 8635 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A77 90 00 00         [24] 8636 	mov	dptr,#0x0000
      002A7A 12r04rF6         [24] 8637 	lcall	_setCursor
                                   8638 ;	.\ecen4350_lcd_v4.c:1903: setColorSelect();
      002A7D 12r15rDF         [24] 8639 	lcall	_setColorSelect
                                   8640 ;	.\ecen4350_lcd_v4.c:1904: LCD_string_write(" Enter New Value:\n ");
      002A80 90r08r62         [24] 8641 	mov	dptr,#___str_68
      002A83 75 F0 80         [24] 8642 	mov	b,#0x80
      002A86 12r10r10         [24] 8643 	lcall	_LCD_string_write
                                   8644 ;	.\ecen4350_lcd_v4.c:1905: setColorHighlight1();
      002A89 12r15rEA         [24] 8645 	lcall	_setColorHighlight1
                                   8646 ;	.\ecen4350_lcd_v4.c:1906: selection = keyDetect();
      002A8C 12r11r2E         [24] 8647 	lcall	_keyDetect
      002A8F AA 82            [24] 8648 	mov	r2,dpl
      002A91 78r00            [12] 8649 	mov	r0,#_selection
      002A93 A6 02            [24] 8650 	mov	@r0,ar2
                                   8651 ;	.\ecen4350_lcd_v4.c:1907: write(selection);
      002A95 8A 82            [24] 8652 	mov	dpl,r2
      002A97 12r0FrAA         [24] 8653 	lcall	_write
                                   8654 ;	.\ecen4350_lcd_v4.c:1908: selection = ASCIItoHex(selection);
      002A9A 78r00            [12] 8655 	mov	r0,#_selection
      002A9C 86 82            [24] 8656 	mov	dpl,@r0
      002A9E 12r13r9C         [24] 8657 	lcall	_ASCIItoHex
      002AA1 AA 82            [24] 8658 	mov	r2,dpl
      002AA3 78r00            [12] 8659 	mov	r0,#_selection
      002AA5 A6 02            [24] 8660 	mov	@r0,ar2
                                   8661 ;	.\ecen4350_lcd_v4.c:1909: value |= selection * 16;
      002AA7 EA               [12] 8662 	mov	a,r2
      002AA8 C4               [12] 8663 	swap	a
      002AA9 54 F0            [12] 8664 	anl	a,#0xf0
      002AAB FA               [12] 8665 	mov	r2,a
                                   8666 ;	.\ecen4350_lcd_v4.c:1910: selection = keyDetect();
      002AAC C0 02            [24] 8667 	push	ar2
      002AAE 12r11r2E         [24] 8668 	lcall	_keyDetect
      002AB1 AF 82            [24] 8669 	mov	r7,dpl
      002AB3 78r00            [12] 8670 	mov	r0,#_selection
      002AB5 A6 07            [24] 8671 	mov	@r0,ar7
                                   8672 ;	.\ecen4350_lcd_v4.c:1911: write(selection);
      002AB7 8F 82            [24] 8673 	mov	dpl,r7
      002AB9 12r0FrAA         [24] 8674 	lcall	_write
                                   8675 ;	.\ecen4350_lcd_v4.c:1912: selection = ASCIItoHex(selection);
      002ABC 78r00            [12] 8676 	mov	r0,#_selection
      002ABE 86 82            [24] 8677 	mov	dpl,@r0
      002AC0 12r13r9C         [24] 8678 	lcall	_ASCIItoHex
      002AC3 AF 82            [24] 8679 	mov	r7,dpl
      002AC5 D0 02            [24] 8680 	pop	ar2
      002AC7 D0 05            [24] 8681 	pop	ar5
      002AC9 D0 06            [24] 8682 	pop	ar6
      002ACB 78r00            [12] 8683 	mov	r0,#_selection
      002ACD A6 07            [24] 8684 	mov	@r0,ar7
                                   8685 ;	.\ecen4350_lcd_v4.c:1913: value |= selection;
      002ACF EA               [12] 8686 	mov	a,r2
      002AD0 42 07            [12] 8687 	orl	ar7,a
                                   8688 ;	.\ecen4350_lcd_v4.c:1916: setColorDefault();
      002AD2 C0 07            [24] 8689 	push	ar7
      002AD4 C0 06            [24] 8690 	push	ar6
      002AD6 C0 05            [24] 8691 	push	ar5
      002AD8 12r15rD4         [24] 8692 	lcall	_setColorDefault
                                   8693 ;	.\ecen4350_lcd_v4.c:1917: setCursor(0, 160);
      002ADB 75*00 A0         [24] 8694 	mov	_setCursor_PARM_2,#0xa0
      002ADE 75*01 00         [24] 8695 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AE1 90 00 00         [24] 8696 	mov	dptr,#0x0000
      002AE4 12r04rF6         [24] 8697 	lcall	_setCursor
                                   8698 ;	.\ecen4350_lcd_v4.c:1918: LCD_string_write(" Enter New Value:\n ");
      002AE7 90r08r62         [24] 8699 	mov	dptr,#___str_68
      002AEA 75 F0 80         [24] 8700 	mov	b,#0x80
      002AED 12r10r10         [24] 8701 	lcall	_LCD_string_write
                                   8702 ;	.\ecen4350_lcd_v4.c:1919: setColorHighlight2();
      002AF0 12r15rF6         [24] 8703 	lcall	_setColorHighlight2
      002AF3 D0 05            [24] 8704 	pop	ar5
      002AF5 D0 06            [24] 8705 	pop	ar6
      002AF7 D0 07            [24] 8706 	pop	ar7
                                   8707 ;	.\ecen4350_lcd_v4.c:1920: print8Hex(value);
      002AF9 8F 82            [24] 8708 	mov	dpl,r7
      002AFB C0 07            [24] 8709 	push	ar7
      002AFD C0 06            [24] 8710 	push	ar6
      002AFF C0 05            [24] 8711 	push	ar5
      002B01 12r14rE1         [24] 8712 	lcall	_print8Hex
      002B04 D0 05            [24] 8713 	pop	ar5
      002B06 D0 06            [24] 8714 	pop	ar6
      002B08 D0 07            [24] 8715 	pop	ar7
                                   8716 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8717 ;	assignBit
      002B0A C2 B5            [12] 8718 	clr	_P3_5
                                   8719 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      002B0C 85*57 82         [24] 8720 	mov	dpl,_edit_d_65536_628
      002B0F 85*58 83         [24] 8721 	mov	dph,(_edit_d_65536_628 + 1)
      002B12 EF               [12] 8722 	mov	a,r7
      002B13 F0               [24] 8723 	movx	@dptr,a
                                   8724 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8725 ;	assignBit
      002B14 D2 B5            [12] 8726 	setb	_P3_5
                                   8727 ;	.\ecen4350_lcd_v4.c:1925: setCursor(0, 210);
      002B16 75*00 D2         [24] 8728 	mov	_setCursor_PARM_2,#0xd2
      002B19 75*01 00         [24] 8729 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B1C 90 00 00         [24] 8730 	mov	dptr,#0x0000
      002B1F C0 06            [24] 8731 	push	ar6
      002B21 C0 05            [24] 8732 	push	ar5
      002B23 12r04rF6         [24] 8733 	lcall	_setCursor
                                   8734 ;	.\ecen4350_lcd_v4.c:1926: setColorSelect();
      002B26 12r15rDF         [24] 8735 	lcall	_setColorSelect
                                   8736 ;	.\ecen4350_lcd_v4.c:1927: LCD_string_write(" Choose Next Action:\n");
      002B29 90r08r18         [24] 8737 	mov	dptr,#___str_64
      002B2C 75 F0 80         [24] 8738 	mov	b,#0x80
      002B2F 12r10r10         [24] 8739 	lcall	_LCD_string_write
                                   8740 ;	.\ecen4350_lcd_v4.c:1928: setColorWhite();
      002B32 12r16r24         [24] 8741 	lcall	_setColorWhite
                                   8742 ;	.\ecen4350_lcd_v4.c:1929: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002B35 90r08r2E         [24] 8743 	mov	dptr,#___str_65
      002B38 75 F0 80         [24] 8744 	mov	b,#0x80
      002B3B 12r10r10         [24] 8745 	lcall	_LCD_string_write
                                   8746 ;	.\ecen4350_lcd_v4.c:1930: LCD_string_write("  <0> Exit");
      002B3E 90r08r54         [24] 8747 	mov	dptr,#___str_66
      002B41 75 F0 80         [24] 8748 	mov	b,#0x80
      002B44 12r10r10         [24] 8749 	lcall	_LCD_string_write
      002B47 D0 05            [24] 8750 	pop	ar5
      002B49 D0 06            [24] 8751 	pop	ar6
      002B4B                       8752 00102$:
                                   8753 ;	.\ecen4350_lcd_v4.c:1932: if (selection == '2') {			/* Highlight choice and gray out others*/
      002B4B 78r00            [12] 8754 	mov	r0,#_selection
      002B4D B6 32 02         [24] 8755 	cjne	@r0,#0x32,00154$
      002B50 80 03            [24] 8756 	sjmp	00155$
      002B52                       8757 00154$:
      002B52 02r2Dr97         [24] 8758 	ljmp	00104$
      002B55                       8759 00155$:
                                   8760 ;	.\ecen4350_lcd_v4.c:1933: invalid = 0;
      002B55 78r15            [12] 8761 	mov	r0,#_edit_invalid_65536_628
      002B57 76 00            [12] 8762 	mov	@r0,#0x00
                                   8763 ;	.\ecen4350_lcd_v4.c:1935: setCursor(0, 210);
      002B59 75*00 D2         [24] 8764 	mov	_setCursor_PARM_2,#0xd2
      002B5C 75*01 00         [24] 8765 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B5F 90 00 00         [24] 8766 	mov	dptr,#0x0000
      002B62 12r04rF6         [24] 8767 	lcall	_setCursor
                                   8768 ;	.\ecen4350_lcd_v4.c:1936: setColorDefault();
      002B65 12r15rD4         [24] 8769 	lcall	_setColorDefault
                                   8770 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Choose Next Action:\n  ");
      002B68 90r08rD0         [24] 8771 	mov	dptr,#___str_73
      002B6B 75 F0 80         [24] 8772 	mov	b,#0x80
      002B6E 12r10r10         [24] 8773 	lcall	_LCD_string_write
                                   8774 ;	.\ecen4350_lcd_v4.c:1938: setColorGray();
      002B71 12r16r02         [24] 8775 	lcall	_setColorGray
                                   8776 ;	.\ecen4350_lcd_v4.c:1939: LCD_string_write("\n  ");
      002B74 90r06r9E         [24] 8777 	mov	dptr,#___str_36
      002B77 75 F0 80         [24] 8778 	mov	b,#0x80
      002B7A 12r10r10         [24] 8779 	lcall	_LCD_string_write
                                   8780 ;	.\ecen4350_lcd_v4.c:1940: setColorHighlight2();
      002B7D 12r15rF6         [24] 8781 	lcall	_setColorHighlight2
                                   8782 ;	.\ecen4350_lcd_v4.c:1941: LCD_string_write("<2> New Address\n");
      002B80 90r08rE8         [24] 8783 	mov	dptr,#___str_74
      002B83 75 F0 80         [24] 8784 	mov	b,#0x80
      002B86 12r10r10         [24] 8785 	lcall	_LCD_string_write
                                   8786 ;	.\ecen4350_lcd_v4.c:1942: setColorGray();
      002B89 12r16r02         [24] 8787 	lcall	_setColorGray
                                   8788 ;	.\ecen4350_lcd_v4.c:1943: LCD_string_write("\n               ");
      002B8C 90r08rF9         [24] 8789 	mov	dptr,#___str_75
      002B8F 75 F0 80         [24] 8790 	mov	b,#0x80
      002B92 12r10r10         [24] 8791 	lcall	_LCD_string_write
                                   8792 ;	.\ecen4350_lcd_v4.c:1944: delay(60);
      002B95 90 00 3C         [24] 8793 	mov	dptr,#0x003c
      002B98 12r00rE0         [24] 8794 	lcall	_delay
                                   8795 ;	.\ecen4350_lcd_v4.c:1947: setCursor(0, 80);
      002B9B 75*00 50         [24] 8796 	mov	_setCursor_PARM_2,#0x50
      002B9E 75*01 00         [24] 8797 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BA1 90 00 00         [24] 8798 	mov	dptr,#0x0000
      002BA4 12r04rF6         [24] 8799 	lcall	_setCursor
                                   8800 ;	.\ecen4350_lcd_v4.c:1948: setColorGray();
      002BA7 12r16r02         [24] 8801 	lcall	_setColorGray
                                   8802 ;	.\ecen4350_lcd_v4.c:1949: LCD_string_write(" 0x____");
      002BAA 90r05rF2         [24] 8803 	mov	dptr,#___str_24
      002BAD 75 F0 80         [24] 8804 	mov	b,#0x80
      002BB0 12r10r10         [24] 8805 	lcall	_LCD_string_write
                                   8806 ;	.\ecen4350_lcd_v4.c:1950: setCursor(0, 110);
      002BB3 75*00 6E         [24] 8807 	mov	_setCursor_PARM_2,#0x6e
      002BB6 75*01 00         [24] 8808 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BB9 90 00 00         [24] 8809 	mov	dptr,#0x0000
      002BBC 12r04rF6         [24] 8810 	lcall	_setCursor
                                   8811 ;	.\ecen4350_lcd_v4.c:1951: LCD_string_write("\n __");
      002BBF 90r08r9A         [24] 8812 	mov	dptr,#___str_71
      002BC2 75 F0 80         [24] 8813 	mov	b,#0x80
      002BC5 12r10r10         [24] 8814 	lcall	_LCD_string_write
                                   8815 ;	.\ecen4350_lcd_v4.c:1952: setCursor(0, 160);
      002BC8 75*00 A0         [24] 8816 	mov	_setCursor_PARM_2,#0xa0
      002BCB 75*01 00         [24] 8817 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BCE 90 00 00         [24] 8818 	mov	dptr,#0x0000
      002BD1 12r04rF6         [24] 8819 	lcall	_setCursor
                                   8820 ;	.\ecen4350_lcd_v4.c:1953: LCD_string_write("\n __");
      002BD4 90r08r9A         [24] 8821 	mov	dptr,#___str_71
      002BD7 75 F0 80         [24] 8822 	mov	b,#0x80
      002BDA 12r10r10         [24] 8823 	lcall	_LCD_string_write
                                   8824 ;	.\ecen4350_lcd_v4.c:1954: setCursor(0, 210);
      002BDD 75*00 D2         [24] 8825 	mov	_setCursor_PARM_2,#0xd2
      002BE0 75*01 00         [24] 8826 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BE3 90 00 00         [24] 8827 	mov	dptr,#0x0000
      002BE6 12r04rF6         [24] 8828 	lcall	_setCursor
                                   8829 ;	.\ecen4350_lcd_v4.c:1955: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002BE9 90r08r9F         [24] 8830 	mov	dptr,#___str_72
      002BEC 75 F0 80         [24] 8831 	mov	b,#0x80
      002BEF 12r10r10         [24] 8832 	lcall	_LCD_string_write
                                   8833 ;	.\ecen4350_lcd_v4.c:1958: setCursor(0, 60);
      002BF2 75*00 3C         [24] 8834 	mov	_setCursor_PARM_2,#0x3c
      002BF5 75*01 00         [24] 8835 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BF8 90 00 00         [24] 8836 	mov	dptr,#0x0000
      002BFB 12r04rF6         [24] 8837 	lcall	_setCursor
                                   8838 ;	.\ecen4350_lcd_v4.c:1959: setColorSelect();
      002BFE 12r15rDF         [24] 8839 	lcall	_setColorSelect
                                   8840 ;	.\ecen4350_lcd_v4.c:1960: LCD_string_write(" Edit Address");
      002C01 90r09r0A         [24] 8841 	mov	dptr,#___str_76
      002C04 75 F0 80         [24] 8842 	mov	b,#0x80
      002C07 12r10r10         [24] 8843 	lcall	_LCD_string_write
                                   8844 ;	.\ecen4350_lcd_v4.c:1961: setCursor(0, 80);
      002C0A 75*00 50         [24] 8845 	mov	_setCursor_PARM_2,#0x50
      002C0D 75*01 00         [24] 8846 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C10 90 00 00         [24] 8847 	mov	dptr,#0x0000
      002C13 12r04rF6         [24] 8848 	lcall	_setCursor
                                   8849 ;	.\ecen4350_lcd_v4.c:1962: LCD_string_write(" ");
      002C16 90r06r54         [24] 8850 	mov	dptr,#___str_30
      002C19 75 F0 80         [24] 8851 	mov	b,#0x80
      002C1C 12r10r10         [24] 8852 	lcall	_LCD_string_write
                                   8853 ;	.\ecen4350_lcd_v4.c:1963: setColorHighlight1();
      002C1F 12r15rEA         [24] 8854 	lcall	_setColorHighlight1
                                   8855 ;	.\ecen4350_lcd_v4.c:1964: LCD_string_write("0x");
      002C22 90r05r29         [24] 8856 	mov	dptr,#___str_2
      002C25 75 F0 80         [24] 8857 	mov	b,#0x80
      002C28 12r10r10         [24] 8858 	lcall	_LCD_string_write
                                   8859 ;	.\ecen4350_lcd_v4.c:1965: address = inputAddress();		// input 16-bit address and store in memory
      002C2B 12r16r45         [24] 8860 	lcall	_inputAddress
      002C2E AD 82            [24] 8861 	mov	r5,dpl
      002C30 AE 83            [24] 8862 	mov	r6,dph
                                   8863 ;	.\ecen4350_lcd_v4.c:1966: d = (unsigned char __xdata*)address;
      002C32 8D 03            [24] 8864 	mov	ar3,r5
      002C34 8E 07            [24] 8865 	mov	ar7,r6
                                   8866 ;	.\ecen4350_lcd_v4.c:1969: setColorDefault();
      002C36 C0 07            [24] 8867 	push	ar7
      002C38 C0 06            [24] 8868 	push	ar6
      002C3A C0 05            [24] 8869 	push	ar5
      002C3C C0 03            [24] 8870 	push	ar3
      002C3E 12r15rD4         [24] 8871 	lcall	_setColorDefault
                                   8872 ;	.\ecen4350_lcd_v4.c:1970: setCursor(0, 60);
      002C41 75*00 3C         [24] 8873 	mov	_setCursor_PARM_2,#0x3c
      002C44 75*01 00         [24] 8874 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C47 90 00 00         [24] 8875 	mov	dptr,#0x0000
      002C4A 12r04rF6         [24] 8876 	lcall	_setCursor
                                   8877 ;	.\ecen4350_lcd_v4.c:1971: LCD_string_write(" Edit Address:");
      002C4D 90r07rDD         [24] 8878 	mov	dptr,#___str_60
      002C50 75 F0 80         [24] 8879 	mov	b,#0x80
      002C53 12r10r10         [24] 8880 	lcall	_LCD_string_write
                                   8881 ;	.\ecen4350_lcd_v4.c:1972: setCursor(0, 80);
      002C56 75*00 50         [24] 8882 	mov	_setCursor_PARM_2,#0x50
      002C59 75*01 00         [24] 8883 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C5C 90 00 00         [24] 8884 	mov	dptr,#0x0000
      002C5F 12r04rF6         [24] 8885 	lcall	_setCursor
                                   8886 ;	.\ecen4350_lcd_v4.c:1973: LCD_string_write(" ");
      002C62 90r06r54         [24] 8887 	mov	dptr,#___str_30
      002C65 75 F0 80         [24] 8888 	mov	b,#0x80
      002C68 12r10r10         [24] 8889 	lcall	_LCD_string_write
                                   8890 ;	.\ecen4350_lcd_v4.c:1974: setColorHighlight2();
      002C6B 12r15rF6         [24] 8891 	lcall	_setColorHighlight2
                                   8892 ;	.\ecen4350_lcd_v4.c:1975: LCD_string_write("0x");
      002C6E 90r05r29         [24] 8893 	mov	dptr,#___str_2
      002C71 75 F0 80         [24] 8894 	mov	b,#0x80
      002C74 12r10r10         [24] 8895 	lcall	_LCD_string_write
      002C77 D0 03            [24] 8896 	pop	ar3
      002C79 D0 05            [24] 8897 	pop	ar5
      002C7B D0 06            [24] 8898 	pop	ar6
                                   8899 ;	.\ecen4350_lcd_v4.c:1976: print16Hex(address);		// print 16-bit address from stored memory
      002C7D 8D 82            [24] 8900 	mov	dpl,r5
      002C7F 8E 83            [24] 8901 	mov	dph,r6
      002C81 C0 06            [24] 8902 	push	ar6
      002C83 C0 05            [24] 8903 	push	ar5
      002C85 C0 03            [24] 8904 	push	ar3
      002C87 12r14rF8         [24] 8905 	lcall	_print16Hex
                                   8906 ;	.\ecen4350_lcd_v4.c:1979: setCursor(0, 110);
      002C8A 75*00 6E         [24] 8907 	mov	_setCursor_PARM_2,#0x6e
      002C8D 75*01 00         [24] 8908 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C90 90 00 00         [24] 8909 	mov	dptr,#0x0000
      002C93 12r04rF6         [24] 8910 	lcall	_setCursor
                                   8911 ;	.\ecen4350_lcd_v4.c:1980: setColorDefault();
      002C96 12r15rD4         [24] 8912 	lcall	_setColorDefault
                                   8913 ;	.\ecen4350_lcd_v4.c:1981: LCD_string_write("\n ");
      002C99 90r08r5F         [24] 8914 	mov	dptr,#___str_67
      002C9C 75 F0 80         [24] 8915 	mov	b,#0x80
      002C9F 12r10r10         [24] 8916 	lcall	_LCD_string_write
                                   8917 ;	.\ecen4350_lcd_v4.c:1982: setColorHighlight2();
      002CA2 12r15rF6         [24] 8918 	lcall	_setColorHighlight2
      002CA5 D0 03            [24] 8919 	pop	ar3
      002CA7 D0 05            [24] 8920 	pop	ar5
      002CA9 D0 06            [24] 8921 	pop	ar6
      002CAB D0 07            [24] 8922 	pop	ar7
                                   8923 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8924 ;	assignBit
      002CAD C2 B5            [12] 8925 	clr	_P3_5
                                   8926 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002CAF 8B 82            [24] 8927 	mov	dpl,r3
      002CB1 8F 83            [24] 8928 	mov	dph,r7
      002CB3 E0               [24] 8929 	movx	a,@dptr
      002CB4 F5 82            [12] 8930 	mov	dpl,a
                                   8931 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8932 ;	assignBit
      002CB6 D2 B5            [12] 8933 	setb	_P3_5
                                   8934 ;	.\ecen4350_lcd_v4.c:1983: print8Hex(ramRead8(d));
      002CB8 C0 07            [24] 8935 	push	ar7
      002CBA C0 06            [24] 8936 	push	ar6
      002CBC C0 05            [24] 8937 	push	ar5
      002CBE C0 03            [24] 8938 	push	ar3
      002CC0 12r14rE1         [24] 8939 	lcall	_print8Hex
                                   8940 ;	.\ecen4350_lcd_v4.c:1986: setCursor(0, 160);
      002CC3 75*00 A0         [24] 8941 	mov	_setCursor_PARM_2,#0xa0
      002CC6 75*01 00         [24] 8942 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CC9 90 00 00         [24] 8943 	mov	dptr,#0x0000
      002CCC 12r04rF6         [24] 8944 	lcall	_setCursor
                                   8945 ;	.\ecen4350_lcd_v4.c:1987: setColorSelect();
      002CCF 12r15rDF         [24] 8946 	lcall	_setColorSelect
                                   8947 ;	.\ecen4350_lcd_v4.c:1988: LCD_string_write(" Enter New Value:\n ");
      002CD2 90r08r62         [24] 8948 	mov	dptr,#___str_68
      002CD5 75 F0 80         [24] 8949 	mov	b,#0x80
      002CD8 12r10r10         [24] 8950 	lcall	_LCD_string_write
                                   8951 ;	.\ecen4350_lcd_v4.c:1989: setColorHighlight1();
      002CDB 12r15rEA         [24] 8952 	lcall	_setColorHighlight1
                                   8953 ;	.\ecen4350_lcd_v4.c:1990: selection = keyDetect();
      002CDE 12r11r2E         [24] 8954 	lcall	_keyDetect
      002CE1 AA 82            [24] 8955 	mov	r2,dpl
      002CE3 78r00            [12] 8956 	mov	r0,#_selection
      002CE5 A6 02            [24] 8957 	mov	@r0,ar2
                                   8958 ;	.\ecen4350_lcd_v4.c:1991: write(selection);
      002CE7 8A 82            [24] 8959 	mov	dpl,r2
      002CE9 12r0FrAA         [24] 8960 	lcall	_write
                                   8961 ;	.\ecen4350_lcd_v4.c:1992: selection = ASCIItoHex(selection);
      002CEC 78r00            [12] 8962 	mov	r0,#_selection
      002CEE 86 82            [24] 8963 	mov	dpl,@r0
      002CF0 12r13r9C         [24] 8964 	lcall	_ASCIItoHex
      002CF3 AA 82            [24] 8965 	mov	r2,dpl
      002CF5 78r00            [12] 8966 	mov	r0,#_selection
      002CF7 A6 02            [24] 8967 	mov	@r0,ar2
                                   8968 ;	.\ecen4350_lcd_v4.c:1993: value |= selection * 16;
      002CF9 EA               [12] 8969 	mov	a,r2
      002CFA C4               [12] 8970 	swap	a
      002CFB 54 F0            [12] 8971 	anl	a,#0xf0
      002CFD FA               [12] 8972 	mov	r2,a
                                   8973 ;	.\ecen4350_lcd_v4.c:1994: selection = keyDetect();
      002CFE C0 02            [24] 8974 	push	ar2
      002D00 12r11r2E         [24] 8975 	lcall	_keyDetect
      002D03 AC 82            [24] 8976 	mov	r4,dpl
      002D05 78r00            [12] 8977 	mov	r0,#_selection
      002D07 A6 04            [24] 8978 	mov	@r0,ar4
                                   8979 ;	.\ecen4350_lcd_v4.c:1995: write(selection);
      002D09 8C 82            [24] 8980 	mov	dpl,r4
      002D0B 12r0FrAA         [24] 8981 	lcall	_write
                                   8982 ;	.\ecen4350_lcd_v4.c:1996: selection = ASCIItoHex(selection);
      002D0E 78r00            [12] 8983 	mov	r0,#_selection
      002D10 86 82            [24] 8984 	mov	dpl,@r0
      002D12 12r13r9C         [24] 8985 	lcall	_ASCIItoHex
      002D15 AC 82            [24] 8986 	mov	r4,dpl
      002D17 D0 02            [24] 8987 	pop	ar2
      002D19 D0 03            [24] 8988 	pop	ar3
      002D1B 78r00            [12] 8989 	mov	r0,#_selection
      002D1D A6 04            [24] 8990 	mov	@r0,ar4
                                   8991 ;	.\ecen4350_lcd_v4.c:1997: value |= selection;
      002D1F EA               [12] 8992 	mov	a,r2
      002D20 42 04            [12] 8993 	orl	ar4,a
                                   8994 ;	.\ecen4350_lcd_v4.c:2000: setColorDefault();
      002D22 C0 04            [24] 8995 	push	ar4
      002D24 C0 03            [24] 8996 	push	ar3
      002D26 12r15rD4         [24] 8997 	lcall	_setColorDefault
                                   8998 ;	.\ecen4350_lcd_v4.c:2001: setCursor(0, 160);
      002D29 75*00 A0         [24] 8999 	mov	_setCursor_PARM_2,#0xa0
      002D2C 75*01 00         [24] 9000 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D2F 90 00 00         [24] 9001 	mov	dptr,#0x0000
      002D32 12r04rF6         [24] 9002 	lcall	_setCursor
                                   9003 ;	.\ecen4350_lcd_v4.c:2002: LCD_string_write(" Enter New Value:\n ");
      002D35 90r08r62         [24] 9004 	mov	dptr,#___str_68
      002D38 75 F0 80         [24] 9005 	mov	b,#0x80
      002D3B 12r10r10         [24] 9006 	lcall	_LCD_string_write
                                   9007 ;	.\ecen4350_lcd_v4.c:2003: setColorHighlight2();
      002D3E 12r15rF6         [24] 9008 	lcall	_setColorHighlight2
      002D41 D0 03            [24] 9009 	pop	ar3
      002D43 D0 04            [24] 9010 	pop	ar4
                                   9011 ;	.\ecen4350_lcd_v4.c:2004: print8Hex(value);
      002D45 8C 82            [24] 9012 	mov	dpl,r4
      002D47 C0 04            [24] 9013 	push	ar4
      002D49 C0 03            [24] 9014 	push	ar3
      002D4B 12r14rE1         [24] 9015 	lcall	_print8Hex
      002D4E D0 03            [24] 9016 	pop	ar3
      002D50 D0 04            [24] 9017 	pop	ar4
      002D52 D0 05            [24] 9018 	pop	ar5
      002D54 D0 06            [24] 9019 	pop	ar6
      002D56 D0 07            [24] 9020 	pop	ar7
                                   9021 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   9022 ;	assignBit
      002D58 C2 B5            [12] 9023 	clr	_P3_5
                                   9024 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      002D5A 8B 82            [24] 9025 	mov	dpl,r3
      002D5C 8F 83            [24] 9026 	mov	dph,r7
      002D5E EC               [12] 9027 	mov	a,r4
      002D5F F0               [24] 9028 	movx	@dptr,a
                                   9029 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   9030 ;	assignBit
      002D60 D2 B5            [12] 9031 	setb	_P3_5
                                   9032 ;	.\ecen4350_lcd_v4.c:2009: setCursor(0, 210);
      002D62 75*00 D2         [24] 9033 	mov	_setCursor_PARM_2,#0xd2
      002D65 75*01 00         [24] 9034 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D68 90 00 00         [24] 9035 	mov	dptr,#0x0000
      002D6B C0 06            [24] 9036 	push	ar6
      002D6D C0 05            [24] 9037 	push	ar5
      002D6F 12r04rF6         [24] 9038 	lcall	_setCursor
                                   9039 ;	.\ecen4350_lcd_v4.c:2010: setColorSelect();
      002D72 12r15rDF         [24] 9040 	lcall	_setColorSelect
                                   9041 ;	.\ecen4350_lcd_v4.c:2011: LCD_string_write(" Choose Next Action:\n");
      002D75 90r08r18         [24] 9042 	mov	dptr,#___str_64
      002D78 75 F0 80         [24] 9043 	mov	b,#0x80
      002D7B 12r10r10         [24] 9044 	lcall	_LCD_string_write
                                   9045 ;	.\ecen4350_lcd_v4.c:2012: setColorWhite();
      002D7E 12r16r24         [24] 9046 	lcall	_setColorWhite
                                   9047 ;	.\ecen4350_lcd_v4.c:2013: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002D81 90r08r2E         [24] 9048 	mov	dptr,#___str_65
      002D84 75 F0 80         [24] 9049 	mov	b,#0x80
      002D87 12r10r10         [24] 9050 	lcall	_LCD_string_write
                                   9051 ;	.\ecen4350_lcd_v4.c:2014: LCD_string_write("  <0> Exit");
      002D8A 90r08r54         [24] 9052 	mov	dptr,#___str_66
      002D8D 75 F0 80         [24] 9053 	mov	b,#0x80
      002D90 12r10r10         [24] 9054 	lcall	_LCD_string_write
      002D93 D0 05            [24] 9055 	pop	ar5
      002D95 D0 06            [24] 9056 	pop	ar6
      002D97                       9057 00104$:
                                   9058 ;	.\ecen4350_lcd_v4.c:2016: if (selection == '0') {			/* Highlight choice and gray out others */
      002D97 78r00            [12] 9059 	mov	r0,#_selection
      002D99 B6 30 52         [24] 9060 	cjne	@r0,#0x30,00106$
                                   9061 ;	.\ecen4350_lcd_v4.c:2017: exit = 0;
      002D9C 78r14            [12] 9062 	mov	r0,#_edit_exit_65536_628
      002D9E 76 00            [12] 9063 	mov	@r0,#0x00
                                   9064 ;	.\ecen4350_lcd_v4.c:2018: invalid = 0;
      002DA0 78r15            [12] 9065 	mov	r0,#_edit_invalid_65536_628
      002DA2 76 00            [12] 9066 	mov	@r0,#0x00
                                   9067 ;	.\ecen4350_lcd_v4.c:2019: setCursor(0, 210);
      002DA4 75*00 D2         [24] 9068 	mov	_setCursor_PARM_2,#0xd2
      002DA7 75*01 00         [24] 9069 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DAA 90 00 00         [24] 9070 	mov	dptr,#0x0000
      002DAD C0 06            [24] 9071 	push	ar6
      002DAF C0 05            [24] 9072 	push	ar5
      002DB1 12r04rF6         [24] 9073 	lcall	_setCursor
                                   9074 ;	.\ecen4350_lcd_v4.c:2020: setColorDefault();
      002DB4 12r15rD4         [24] 9075 	lcall	_setColorDefault
                                   9076 ;	.\ecen4350_lcd_v4.c:2021: LCD_string_write("\n");
      002DB7 90r09r18         [24] 9077 	mov	dptr,#___str_77
      002DBA 75 F0 80         [24] 9078 	mov	b,#0x80
      002DBD 12r10r10         [24] 9079 	lcall	_LCD_string_write
                                   9080 ;	.\ecen4350_lcd_v4.c:2022: setColorGray();
      002DC0 12r16r02         [24] 9081 	lcall	_setColorGray
                                   9082 ;	.\ecen4350_lcd_v4.c:2023: LCD_string_write("\n\n  ");
      002DC3 90r06rCF         [24] 9083 	mov	dptr,#___str_39
      002DC6 75 F0 80         [24] 9084 	mov	b,#0x80
      002DC9 12r10r10         [24] 9085 	lcall	_LCD_string_write
                                   9086 ;	.\ecen4350_lcd_v4.c:2024: setColorHighlight2();
      002DCC 12r15rF6         [24] 9087 	lcall	_setColorHighlight2
                                   9088 ;	.\ecen4350_lcd_v4.c:2025: LCD_string_write("<0> Exit");
      002DCF 90r09r1A         [24] 9089 	mov	dptr,#___str_78
      002DD2 75 F0 80         [24] 9090 	mov	b,#0x80
      002DD5 12r10r10         [24] 9091 	lcall	_LCD_string_write
                                   9092 ;	.\ecen4350_lcd_v4.c:2026: setColorGray();
      002DD8 12r16r02         [24] 9093 	lcall	_setColorGray
                                   9094 ;	.\ecen4350_lcd_v4.c:2027: LCD_string_write("\n               ");
      002DDB 90r08rF9         [24] 9095 	mov	dptr,#___str_75
      002DDE 75 F0 80         [24] 9096 	mov	b,#0x80
      002DE1 12r10r10         [24] 9097 	lcall	_LCD_string_write
                                   9098 ;	.\ecen4350_lcd_v4.c:2028: delay(60);
      002DE4 90 00 3C         [24] 9099 	mov	dptr,#0x003c
      002DE7 12r00rE0         [24] 9100 	lcall	_delay
      002DEA D0 05            [24] 9101 	pop	ar5
      002DEC D0 06            [24] 9102 	pop	ar6
      002DEE                       9103 00106$:
                                   9104 ;	.\ecen4350_lcd_v4.c:2030: if (invalid) {
      002DEE 78r15            [12] 9105 	mov	r0,#_edit_invalid_65536_628
      002DF0 E6               [12] 9106 	mov	a,@r0
      002DF1 70 03            [24] 9107 	jnz	00158$
      002DF3 02r29r4C         [24] 9108 	ljmp	00109$
      002DF6                       9109 00158$:
                                   9110 ;	.\ecen4350_lcd_v4.c:2031: setCursor(0, 210);
      002DF6 75*00 D2         [24] 9111 	mov	_setCursor_PARM_2,#0xd2
      002DF9 75*01 00         [24] 9112 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DFC 90 00 00         [24] 9113 	mov	dptr,#0x0000
      002DFF C0 06            [24] 9114 	push	ar6
      002E01 C0 05            [24] 9115 	push	ar5
      002E03 12r04rF6         [24] 9116 	lcall	_setCursor
                                   9117 ;	.\ecen4350_lcd_v4.c:2032: setColorRed();
      002E06 12r16r19         [24] 9118 	lcall	_setColorRed
                                   9119 ;	.\ecen4350_lcd_v4.c:2033: LCD_string_write("\n\n\n\n Input Error ");
      002E09 90r09r23         [24] 9120 	mov	dptr,#___str_79
      002E0C 75 F0 80         [24] 9121 	mov	b,#0x80
      002E0F 12r10r10         [24] 9122 	lcall	_LCD_string_write
      002E12 D0 05            [24] 9123 	pop	ar5
      002E14 D0 06            [24] 9124 	pop	ar6
      002E16 02r29r4C         [24] 9125 	ljmp	00109$
                                   9126 ;	.\ecen4350_lcd_v4.c:2036: return;
                                   9127 ;	.\ecen4350_lcd_v4.c:2037: }
      002E19 22               [24] 9128 	ret
                                   9129 ;------------------------------------------------------------
                                   9130 ;Allocation info for local variables in function 'find'
                                   9131 ;------------------------------------------------------------
                                   9132 ;d                         Allocated to registers 
                                   9133 ;i                         Allocated with name '_find_i_262144_665'
                                   9134 ;__3932160169              Allocated to registers 
                                   9135 ;__3932160170              Allocated to registers 
                                   9136 ;map_address               Allocated to registers 
                                   9137 ;d                         Allocated to registers r4 
                                   9138 ;i                         Allocated to registers r4 r6 
                                   9139 ;__3932160172              Allocated to registers 
                                   9140 ;__3932160173              Allocated to registers 
                                   9141 ;map_address               Allocated to registers 
                                   9142 ;d                         Allocated to registers r3 
                                   9143 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9144 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9145 ;address                   Allocated with name '_find_address_65536_652'
                                   9146 ;destination               Allocated to registers 
                                   9147 ;blockSize                 Allocated with name '_find_blockSize_65536_652'
                                   9148 ;value                     Allocated with name '_find_value_65536_652'
                                   9149 ;scan                      Allocated with name '_find_scan_65536_652'
                                   9150 ;page                      Allocated to registers r5 
                                   9151 ;noneFound                 Allocated with name '_find_noneFound_65536_652'
                                   9152 ;invalidInput              Allocated to registers r7 
                                   9153 ;exit                      Allocated with name '_find_exit_65536_652'
                                   9154 ;------------------------------------------------------------
                                   9155 ;	.\ecen4350_lcd_v4.c:2039: void find() {
                                   9156 ;	-----------------------------------------
                                   9157 ;	 function find
                                   9158 ;	-----------------------------------------
      002E1A                       9159 _find:
                                   9160 ;	.\ecen4350_lcd_v4.c:2043: __idata unsigned char blockSize = 0;
      002E1A 78r18            [12] 9161 	mov	r0,#_find_blockSize_65536_652
      002E1C 76 00            [12] 9162 	mov	@r0,#0x00
                                   9163 ;	.\ecen4350_lcd_v4.c:2045: __idata unsigned char scan = 0;
      002E1E 78r1A            [12] 9164 	mov	r0,#_find_scan_65536_652
      002E20 76 00            [12] 9165 	mov	@r0,#0x00
                                   9166 ;	.\ecen4350_lcd_v4.c:2046: __idata unsigned char page = 0;
      002E22 7D 00            [12] 9167 	mov	r5,#0x00
                                   9168 ;	.\ecen4350_lcd_v4.c:2047: __idata unsigned char noneFound = 1;
      002E24 78r1B            [12] 9169 	mov	r0,#_find_noneFound_65536_652
      002E26 76 01            [12] 9170 	mov	@r0,#0x01
                                   9171 ;	.\ecen4350_lcd_v4.c:2048: __idata unsigned char invalidInput = 1;
      002E28 7B 01            [12] 9172 	mov	r3,#0x01
                                   9173 ;	.\ecen4350_lcd_v4.c:2049: __idata unsigned char exit = 1;
      002E2A 78r1C            [12] 9174 	mov	r0,#_find_exit_65536_652
      002E2C 76 01            [12] 9175 	mov	@r0,#0x01
                                   9176 ;	.\ecen4350_lcd_v4.c:2051: clearLCD();
      002E2E C0 05            [24] 9177 	push	ar5
      002E30 C0 03            [24] 9178 	push	ar3
      002E32 12r0Dr93         [24] 9179 	lcall	_clearLCD
                                   9180 ;	.\ecen4350_lcd_v4.c:2054: setTextSize(5);
      002E35 75 82 05         [24] 9181 	mov	dpl,#0x05
      002E38 12r05r10         [24] 9182 	lcall	_setTextSize
                                   9183 ;	.\ecen4350_lcd_v4.c:2055: fillTop(GRAY);
      002E3B 90 D6 BA         [24] 9184 	mov	dptr,#0xd6ba
      002E3E 12r0BrC6         [24] 9185 	lcall	_fillTop
                                   9186 ;	.\ecen4350_lcd_v4.c:2056: setColorMenu();
      002E41 12r16r0D         [24] 9187 	lcall	_setColorMenu
                                   9188 ;	.\ecen4350_lcd_v4.c:2057: setCursor(30, 0);
      002E44 E4               [12] 9189 	clr	a
      002E45 F5*00            [12] 9190 	mov	_setCursor_PARM_2,a
      002E47 F5*01            [12] 9191 	mov	(_setCursor_PARM_2 + 1),a
      002E49 90 00 1E         [24] 9192 	mov	dptr,#0x001e
      002E4C 12r04rF6         [24] 9193 	lcall	_setCursor
                                   9194 ;	.\ecen4350_lcd_v4.c:2058: LCD_string_write("[FIND]\n");
      002E4F 90r09r35         [24] 9195 	mov	dptr,#___str_80
      002E52 75 F0 80         [24] 9196 	mov	b,#0x80
      002E55 12r10r10         [24] 9197 	lcall	_LCD_string_write
                                   9198 ;	.\ecen4350_lcd_v4.c:2059: setColorDefault();
      002E58 12r15rD4         [24] 9199 	lcall	_setColorDefault
                                   9200 ;	.\ecen4350_lcd_v4.c:2060: setTextSize(2);
      002E5B 75 82 02         [24] 9201 	mov	dpl,#0x02
      002E5E 12r05r10         [24] 9202 	lcall	_setTextSize
                                   9203 ;	.\ecen4350_lcd_v4.c:2061: setCursor(0, 60);
      002E61 75*00 3C         [24] 9204 	mov	_setCursor_PARM_2,#0x3c
      002E64 75*01 00         [24] 9205 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E67 90 00 00         [24] 9206 	mov	dptr,#0x0000
      002E6A 12r04rF6         [24] 9207 	lcall	_setCursor
                                   9208 ;	.\ecen4350_lcd_v4.c:2062: LCD_string_write(" Find Value:");
      002E6D 90r09r3D         [24] 9209 	mov	dptr,#___str_81
      002E70 75 F0 80         [24] 9210 	mov	b,#0x80
      002E73 12r10r10         [24] 9211 	lcall	_LCD_string_write
                                   9212 ;	.\ecen4350_lcd_v4.c:2063: setCursor(0, 80);
      002E76 75*00 50         [24] 9213 	mov	_setCursor_PARM_2,#0x50
      002E79 75*01 00         [24] 9214 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E7C 90 00 00         [24] 9215 	mov	dptr,#0x0000
      002E7F 12r04rF6         [24] 9216 	lcall	_setCursor
                                   9217 ;	.\ecen4350_lcd_v4.c:2064: setColorGray();
      002E82 12r16r02         [24] 9218 	lcall	_setColorGray
                                   9219 ;	.\ecen4350_lcd_v4.c:2065: LCD_string_write(" __");
      002E85 90r08r01         [24] 9220 	mov	dptr,#___str_62
      002E88 75 F0 80         [24] 9221 	mov	b,#0x80
      002E8B 12r10r10         [24] 9222 	lcall	_LCD_string_write
                                   9223 ;	.\ecen4350_lcd_v4.c:2066: setCursor(0, 110);
      002E8E 75*00 6E         [24] 9224 	mov	_setCursor_PARM_2,#0x6e
      002E91 75*01 00         [24] 9225 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E94 90 00 00         [24] 9226 	mov	dptr,#0x0000
      002E97 12r04rF6         [24] 9227 	lcall	_setCursor
                                   9228 ;	.\ecen4350_lcd_v4.c:2067: setColorDefault();
      002E9A 12r15rD4         [24] 9229 	lcall	_setColorDefault
                                   9230 ;	.\ecen4350_lcd_v4.c:2068: LCD_string_write(" Search Address:");
      002E9D 90r09r4A         [24] 9231 	mov	dptr,#___str_82
      002EA0 75 F0 80         [24] 9232 	mov	b,#0x80
      002EA3 12r10r10         [24] 9233 	lcall	_LCD_string_write
                                   9234 ;	.\ecen4350_lcd_v4.c:2069: setCursor(0, 130 );
      002EA6 75*00 82         [24] 9235 	mov	_setCursor_PARM_2,#0x82
      002EA9 75*01 00         [24] 9236 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EAC 90 00 00         [24] 9237 	mov	dptr,#0x0000
      002EAF 12r04rF6         [24] 9238 	lcall	_setCursor
                                   9239 ;	.\ecen4350_lcd_v4.c:2070: setColorGray();
      002EB2 12r16r02         [24] 9240 	lcall	_setColorGray
                                   9241 ;	.\ecen4350_lcd_v4.c:2071: LCD_string_write(" 0x____");
      002EB5 90r05rF2         [24] 9242 	mov	dptr,#___str_24
      002EB8 75 F0 80         [24] 9243 	mov	b,#0x80
      002EBB 12r10r10         [24] 9244 	lcall	_LCD_string_write
                                   9245 ;	.\ecen4350_lcd_v4.c:2072: setCursor(0, 160);
      002EBE 75*00 A0         [24] 9246 	mov	_setCursor_PARM_2,#0xa0
      002EC1 75*01 00         [24] 9247 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EC4 90 00 00         [24] 9248 	mov	dptr,#0x0000
      002EC7 12r04rF6         [24] 9249 	lcall	_setCursor
                                   9250 ;	.\ecen4350_lcd_v4.c:2073: setColorDefault();
      002ECA 12r15rD4         [24] 9251 	lcall	_setColorDefault
                                   9252 ;	.\ecen4350_lcd_v4.c:2074: LCD_string_write(" Input Block Size:\n");
      002ECD 90r09r5B         [24] 9253 	mov	dptr,#___str_83
      002ED0 75 F0 80         [24] 9254 	mov	b,#0x80
      002ED3 12r10r10         [24] 9255 	lcall	_LCD_string_write
                                   9256 ;	.\ecen4350_lcd_v4.c:2075: setColorGray();
      002ED6 12r16r02         [24] 9257 	lcall	_setColorGray
                                   9258 ;	.\ecen4350_lcd_v4.c:2076: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      002ED9 90r09r6F         [24] 9259 	mov	dptr,#___str_84
      002EDC 75 F0 80         [24] 9260 	mov	b,#0x80
      002EDF 12r10r10         [24] 9261 	lcall	_LCD_string_write
                                   9262 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write("  <FF> (SCAN)");
      002EE2 90r09r95         [24] 9263 	mov	dptr,#___str_85
      002EE5 75 F0 80         [24] 9264 	mov	b,#0x80
      002EE8 12r10r10         [24] 9265 	lcall	_LCD_string_write
                                   9266 ;	.\ecen4350_lcd_v4.c:2079: (0, 250);
      002EEB 75*00 FA         [24] 9267 	mov	_setCursor_PARM_2,#0xfa
      002EEE 75*01 00         [24] 9268 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EF1 90 00 00         [24] 9269 	mov	dptr,#0x0000
      002EF4 12r04rF6         [24] 9270 	lcall	_setCursor
                                   9271 ;	.\ecen4350_lcd_v4.c:2080: setColorGray();
      002EF7 12r16r02         [24] 9272 	lcall	_setColorGray
                                   9273 ;	.\ecen4350_lcd_v4.c:2081: LCD_string_write("   __");
      002EFA 90r09rA3         [24] 9274 	mov	dptr,#___str_86
      002EFD 75 F0 80         [24] 9275 	mov	b,#0x80
      002F00 12r10r10         [24] 9276 	lcall	_LCD_string_write
                                   9277 ;	.\ecen4350_lcd_v4.c:2088: setColorSelect();
      002F03 12r15rDF         [24] 9278 	lcall	_setColorSelect
                                   9279 ;	.\ecen4350_lcd_v4.c:2089: setCursor(0, 60);
      002F06 75*00 3C         [24] 9280 	mov	_setCursor_PARM_2,#0x3c
      002F09 75*01 00         [24] 9281 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F0C 90 00 00         [24] 9282 	mov	dptr,#0x0000
      002F0F 12r04rF6         [24] 9283 	lcall	_setCursor
                                   9284 ;	.\ecen4350_lcd_v4.c:2090: LCD_string_write(" Find Value:");
      002F12 90r09r3D         [24] 9285 	mov	dptr,#___str_81
      002F15 75 F0 80         [24] 9286 	mov	b,#0x80
      002F18 12r10r10         [24] 9287 	lcall	_LCD_string_write
                                   9288 ;	.\ecen4350_lcd_v4.c:2091: setCursor(0, 80);
      002F1B 75*00 50         [24] 9289 	mov	_setCursor_PARM_2,#0x50
      002F1E 75*01 00         [24] 9290 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F21 90 00 00         [24] 9291 	mov	dptr,#0x0000
      002F24 12r04rF6         [24] 9292 	lcall	_setCursor
                                   9293 ;	.\ecen4350_lcd_v4.c:2092: setColorWhite();
      002F27 12r16r24         [24] 9294 	lcall	_setColorWhite
                                   9295 ;	.\ecen4350_lcd_v4.c:2093: setCursor(0, 80);
      002F2A 75*00 50         [24] 9296 	mov	_setCursor_PARM_2,#0x50
      002F2D 75*01 00         [24] 9297 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F30 90 00 00         [24] 9298 	mov	dptr,#0x0000
      002F33 12r04rF6         [24] 9299 	lcall	_setCursor
                                   9300 ;	.\ecen4350_lcd_v4.c:2094: LCD_string_write(" ");
      002F36 90r06r54         [24] 9301 	mov	dptr,#___str_30
      002F39 75 F0 80         [24] 9302 	mov	b,#0x80
      002F3C 12r10r10         [24] 9303 	lcall	_LCD_string_write
                                   9304 ;	.\ecen4350_lcd_v4.c:2095: setColorHighlight1();
      002F3F 12r15rEA         [24] 9305 	lcall	_setColorHighlight1
                                   9306 ;	.\ecen4350_lcd_v4.c:2096: selection = keyDetect();
      002F42 12r11r2E         [24] 9307 	lcall	_keyDetect
      002F45 AC 82            [24] 9308 	mov	r4,dpl
      002F47 78r00            [12] 9309 	mov	r0,#_selection
      002F49 A6 04            [24] 9310 	mov	@r0,ar4
                                   9311 ;	.\ecen4350_lcd_v4.c:2097: write(selection);
      002F4B 8C 82            [24] 9312 	mov	dpl,r4
      002F4D 12r0FrAA         [24] 9313 	lcall	_write
                                   9314 ;	.\ecen4350_lcd_v4.c:2098: selection = ASCIItoHex(selection);
      002F50 78r00            [12] 9315 	mov	r0,#_selection
      002F52 86 82            [24] 9316 	mov	dpl,@r0
      002F54 12r13r9C         [24] 9317 	lcall	_ASCIItoHex
      002F57 AC 82            [24] 9318 	mov	r4,dpl
      002F59 D0 03            [24] 9319 	pop	ar3
      002F5B 78r00            [12] 9320 	mov	r0,#_selection
      002F5D A6 04            [24] 9321 	mov	@r0,ar4
                                   9322 ;	.\ecen4350_lcd_v4.c:2099: value |= selection * 16;
      002F5F EC               [12] 9323 	mov	a,r4
      002F60 C4               [12] 9324 	swap	a
      002F61 54 F0            [12] 9325 	anl	a,#0xf0
      002F63 FC               [12] 9326 	mov	r4,a
                                   9327 ;	.\ecen4350_lcd_v4.c:2100: selection = keyDetect();
      002F64 C0 04            [24] 9328 	push	ar4
      002F66 C0 03            [24] 9329 	push	ar3
      002F68 12r11r2E         [24] 9330 	lcall	_keyDetect
      002F6B AE 82            [24] 9331 	mov	r6,dpl
      002F6D 78r00            [12] 9332 	mov	r0,#_selection
      002F6F A6 06            [24] 9333 	mov	@r0,ar6
                                   9334 ;	.\ecen4350_lcd_v4.c:2101: write(selection);
      002F71 8E 82            [24] 9335 	mov	dpl,r6
      002F73 12r0FrAA         [24] 9336 	lcall	_write
                                   9337 ;	.\ecen4350_lcd_v4.c:2102: selection = ASCIItoHex(selection);
      002F76 78r00            [12] 9338 	mov	r0,#_selection
      002F78 86 82            [24] 9339 	mov	dpl,@r0
      002F7A 12r13r9C         [24] 9340 	lcall	_ASCIItoHex
      002F7D AE 82            [24] 9341 	mov	r6,dpl
      002F7F D0 03            [24] 9342 	pop	ar3
      002F81 D0 04            [24] 9343 	pop	ar4
      002F83 78r00            [12] 9344 	mov	r0,#_selection
      002F85 A6 06            [24] 9345 	mov	@r0,ar6
                                   9346 ;	.\ecen4350_lcd_v4.c:2103: value |= selection;
      002F87 78r19            [12] 9347 	mov	r0,#_find_value_65536_652
      002F89 EE               [12] 9348 	mov	a,r6
      002F8A 4C               [12] 9349 	orl	a,r4
      002F8B F6               [12] 9350 	mov	@r0,a
                                   9351 ;	.\ecen4350_lcd_v4.c:2106: setColorDefault();
      002F8C C0 03            [24] 9352 	push	ar3
      002F8E 12r15rD4         [24] 9353 	lcall	_setColorDefault
                                   9354 ;	.\ecen4350_lcd_v4.c:2107: setCursor(0, 60);
      002F91 75*00 3C         [24] 9355 	mov	_setCursor_PARM_2,#0x3c
      002F94 75*01 00         [24] 9356 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F97 90 00 00         [24] 9357 	mov	dptr,#0x0000
      002F9A 12r04rF6         [24] 9358 	lcall	_setCursor
                                   9359 ;	.\ecen4350_lcd_v4.c:2108: LCD_string_write(" Find Value:");
      002F9D 90r09r3D         [24] 9360 	mov	dptr,#___str_81
      002FA0 75 F0 80         [24] 9361 	mov	b,#0x80
      002FA3 12r10r10         [24] 9362 	lcall	_LCD_string_write
                                   9363 ;	.\ecen4350_lcd_v4.c:2109: setCursor(0, 80);
      002FA6 75*00 50         [24] 9364 	mov	_setCursor_PARM_2,#0x50
      002FA9 75*01 00         [24] 9365 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FAC 90 00 00         [24] 9366 	mov	dptr,#0x0000
      002FAF 12r04rF6         [24] 9367 	lcall	_setCursor
                                   9368 ;	.\ecen4350_lcd_v4.c:2110: setColorWhite();
      002FB2 12r16r24         [24] 9369 	lcall	_setColorWhite
                                   9370 ;	.\ecen4350_lcd_v4.c:2111: LCD_string_write(" ");
      002FB5 90r06r54         [24] 9371 	mov	dptr,#___str_30
      002FB8 75 F0 80         [24] 9372 	mov	b,#0x80
      002FBB 12r10r10         [24] 9373 	lcall	_LCD_string_write
                                   9374 ;	.\ecen4350_lcd_v4.c:2112: setColorHighlight2();
      002FBE 12r15rF6         [24] 9375 	lcall	_setColorHighlight2
                                   9376 ;	.\ecen4350_lcd_v4.c:2113: print8Hex(value);
      002FC1 78r19            [12] 9377 	mov	r0,#_find_value_65536_652
      002FC3 86 82            [24] 9378 	mov	dpl,@r0
      002FC5 12r14rE1         [24] 9379 	lcall	_print8Hex
                                   9380 ;	.\ecen4350_lcd_v4.c:2116: setColorSelect();
      002FC8 12r15rDF         [24] 9381 	lcall	_setColorSelect
                                   9382 ;	.\ecen4350_lcd_v4.c:2117: setCursor(0, 110);
      002FCB 75*00 6E         [24] 9383 	mov	_setCursor_PARM_2,#0x6e
      002FCE 75*01 00         [24] 9384 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FD1 90 00 00         [24] 9385 	mov	dptr,#0x0000
      002FD4 12r04rF6         [24] 9386 	lcall	_setCursor
                                   9387 ;	.\ecen4350_lcd_v4.c:2118: LCD_string_write(" Search Address:");
      002FD7 90r09r4A         [24] 9388 	mov	dptr,#___str_82
      002FDA 75 F0 80         [24] 9389 	mov	b,#0x80
      002FDD 12r10r10         [24] 9390 	lcall	_LCD_string_write
                                   9391 ;	.\ecen4350_lcd_v4.c:2119: setCursor(0, 130);
      002FE0 75*00 82         [24] 9392 	mov	_setCursor_PARM_2,#0x82
      002FE3 75*01 00         [24] 9393 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FE6 90 00 00         [24] 9394 	mov	dptr,#0x0000
      002FE9 12r04rF6         [24] 9395 	lcall	_setCursor
                                   9396 ;	.\ecen4350_lcd_v4.c:2120: LCD_string_write(" ");
      002FEC 90r06r54         [24] 9397 	mov	dptr,#___str_30
      002FEF 75 F0 80         [24] 9398 	mov	b,#0x80
      002FF2 12r10r10         [24] 9399 	lcall	_LCD_string_write
                                   9400 ;	.\ecen4350_lcd_v4.c:2121: setColorHighlight1();
      002FF5 12r15rEA         [24] 9401 	lcall	_setColorHighlight1
                                   9402 ;	.\ecen4350_lcd_v4.c:2122: LCD_string_write("0x");
      002FF8 90r05r29         [24] 9403 	mov	dptr,#___str_2
      002FFB 75 F0 80         [24] 9404 	mov	b,#0x80
      002FFE 12r10r10         [24] 9405 	lcall	_LCD_string_write
                                   9406 ;	.\ecen4350_lcd_v4.c:2123: address = inputAddress();
      003001 12r16r45         [24] 9407 	lcall	_inputAddress
      003004 78r16            [12] 9408 	mov	r0,#_find_address_65536_652
      003006 A6 82            [24] 9409 	mov	@r0,dpl
      003008 08               [12] 9410 	inc	r0
      003009 A6 83            [24] 9411 	mov	@r0,dph
                                   9412 ;	.\ecen4350_lcd_v4.c:2126: setColorDefault();
      00300B 12r15rD4         [24] 9413 	lcall	_setColorDefault
                                   9414 ;	.\ecen4350_lcd_v4.c:2127: setCursor(0, 110);
      00300E 75*00 6E         [24] 9415 	mov	_setCursor_PARM_2,#0x6e
      003011 75*01 00         [24] 9416 	mov	(_setCursor_PARM_2 + 1),#0x00
      003014 90 00 00         [24] 9417 	mov	dptr,#0x0000
      003017 12r04rF6         [24] 9418 	lcall	_setCursor
                                   9419 ;	.\ecen4350_lcd_v4.c:2128: LCD_string_write(" Search Address:");
      00301A 90r09r4A         [24] 9420 	mov	dptr,#___str_82
      00301D 75 F0 80         [24] 9421 	mov	b,#0x80
      003020 12r10r10         [24] 9422 	lcall	_LCD_string_write
                                   9423 ;	.\ecen4350_lcd_v4.c:2129: setCursor(0, 130);
      003023 75*00 82         [24] 9424 	mov	_setCursor_PARM_2,#0x82
      003026 75*01 00         [24] 9425 	mov	(_setCursor_PARM_2 + 1),#0x00
      003029 90 00 00         [24] 9426 	mov	dptr,#0x0000
      00302C 12r04rF6         [24] 9427 	lcall	_setCursor
                                   9428 ;	.\ecen4350_lcd_v4.c:2130: LCD_string_write(" ");
      00302F 90r06r54         [24] 9429 	mov	dptr,#___str_30
      003032 75 F0 80         [24] 9430 	mov	b,#0x80
      003035 12r10r10         [24] 9431 	lcall	_LCD_string_write
                                   9432 ;	.\ecen4350_lcd_v4.c:2131: setColorHighlight2();
      003038 12r15rF6         [24] 9433 	lcall	_setColorHighlight2
                                   9434 ;	.\ecen4350_lcd_v4.c:2132: LCD_string_write("0x");
      00303B 90r05r29         [24] 9435 	mov	dptr,#___str_2
      00303E 75 F0 80         [24] 9436 	mov	b,#0x80
      003041 12r10r10         [24] 9437 	lcall	_LCD_string_write
                                   9438 ;	.\ecen4350_lcd_v4.c:2133: print16Hex(address);
      003044 78r16            [12] 9439 	mov	r0,#_find_address_65536_652
      003046 86 82            [24] 9440 	mov	dpl,@r0
      003048 08               [12] 9441 	inc	r0
      003049 86 83            [24] 9442 	mov	dph,@r0
      00304B 12r14rF8         [24] 9443 	lcall	_print16Hex
                                   9444 ;	.\ecen4350_lcd_v4.c:2136: setColorSelect();
      00304E 12r15rDF         [24] 9445 	lcall	_setColorSelect
                                   9446 ;	.\ecen4350_lcd_v4.c:2137: setCursor(0, 160);
      003051 75*00 A0         [24] 9447 	mov	_setCursor_PARM_2,#0xa0
      003054 75*01 00         [24] 9448 	mov	(_setCursor_PARM_2 + 1),#0x00
      003057 90 00 00         [24] 9449 	mov	dptr,#0x0000
      00305A 12r04rF6         [24] 9450 	lcall	_setCursor
                                   9451 ;	.\ecen4350_lcd_v4.c:2138: LCD_string_write(" Input Block Size:\n");
      00305D 90r09r5B         [24] 9452 	mov	dptr,#___str_83
      003060 75 F0 80         [24] 9453 	mov	b,#0x80
      003063 12r10r10         [24] 9454 	lcall	_LCD_string_write
                                   9455 ;	.\ecen4350_lcd_v4.c:2139: setColorWhite();
      003066 12r16r24         [24] 9456 	lcall	_setColorWhite
                                   9457 ;	.\ecen4350_lcd_v4.c:2140: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003069 90r09r6F         [24] 9458 	mov	dptr,#___str_84
      00306C 75 F0 80         [24] 9459 	mov	b,#0x80
      00306F 12r10r10         [24] 9460 	lcall	_LCD_string_write
                                   9461 ;	.\ecen4350_lcd_v4.c:2141: LCD_string_write("  <FF> (SCAN)");
      003072 90r09r95         [24] 9462 	mov	dptr,#___str_85
      003075 75 F0 80         [24] 9463 	mov	b,#0x80
      003078 12r10r10         [24] 9464 	lcall	_LCD_string_write
      00307B D0 03            [24] 9465 	pop	ar3
      00307D D0 05            [24] 9466 	pop	ar5
                                   9467 ;	.\ecen4350_lcd_v4.c:2142: while (invalidInput) {
      00307F                       9468 00113$:
      00307F EB               [12] 9469 	mov	a,r3
      003080 70 03            [24] 9470 	jnz	00539$
      003082 02r31r3E         [24] 9471 	ljmp	00115$
      003085                       9472 00539$:
                                   9473 ;	.\ecen4350_lcd_v4.c:2143: setCursor(0, 250);
      003085 75*00 FA         [24] 9474 	mov	_setCursor_PARM_2,#0xfa
      003088 75*01 00         [24] 9475 	mov	(_setCursor_PARM_2 + 1),#0x00
      00308B 90 00 00         [24] 9476 	mov	dptr,#0x0000
      00308E C0 05            [24] 9477 	push	ar5
      003090 C0 03            [24] 9478 	push	ar3
      003092 12r04rF6         [24] 9479 	lcall	_setCursor
                                   9480 ;	.\ecen4350_lcd_v4.c:2144: setColorGray();
      003095 12r16r02         [24] 9481 	lcall	_setColorGray
                                   9482 ;	.\ecen4350_lcd_v4.c:2145: LCD_string_write("   __");
      003098 90r09rA3         [24] 9483 	mov	dptr,#___str_86
      00309B 75 F0 80         [24] 9484 	mov	b,#0x80
      00309E 12r10r10         [24] 9485 	lcall	_LCD_string_write
                                   9486 ;	.\ecen4350_lcd_v4.c:2146: setCursor(0, 250);
      0030A1 75*00 FA         [24] 9487 	mov	_setCursor_PARM_2,#0xfa
      0030A4 75*01 00         [24] 9488 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030A7 90 00 00         [24] 9489 	mov	dptr,#0x0000
      0030AA 12r04rF6         [24] 9490 	lcall	_setCursor
                                   9491 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write("   ");
      0030AD 90r09rA9         [24] 9492 	mov	dptr,#___str_87
      0030B0 75 F0 80         [24] 9493 	mov	b,#0x80
      0030B3 12r10r10         [24] 9494 	lcall	_LCD_string_write
                                   9495 ;	.\ecen4350_lcd_v4.c:2148: setColorHighlight1();
      0030B6 12r15rEA         [24] 9496 	lcall	_setColorHighlight1
                                   9497 ;	.\ecen4350_lcd_v4.c:2149: blockSize = inputBlockSize();
      0030B9 12r16rF5         [24] 9498 	lcall	_inputBlockSize
      0030BC 78r18            [12] 9499 	mov	r0,#_find_blockSize_65536_652
      0030BE A6 82            [24] 9500 	mov	@r0,dpl
      0030C0 D0 03            [24] 9501 	pop	ar3
      0030C2 D0 05            [24] 9502 	pop	ar5
                                   9503 ;	.\ecen4350_lcd_v4.c:2150: if (blockSize == 0x01) {
      0030C4 78r18            [12] 9504 	mov	r0,#_find_blockSize_65536_652
      0030C6 B6 01 18         [24] 9505 	cjne	@r0,#0x01,00111$
                                   9506 ;	.\ecen4350_lcd_v4.c:2151: invalidInput = 0;
      0030C9 7B 00            [12] 9507 	mov	r3,#0x00
                                   9508 ;	.\ecen4350_lcd_v4.c:2152: setColorDefault();
      0030CB C0 05            [24] 9509 	push	ar5
      0030CD C0 03            [24] 9510 	push	ar3
      0030CF 12r15rD4         [24] 9511 	lcall	_setColorDefault
                                   9512 ;	.\ecen4350_lcd_v4.c:2153: LCD_string_write("\n                ");
      0030D2 90r09rAD         [24] 9513 	mov	dptr,#___str_88
      0030D5 75 F0 80         [24] 9514 	mov	b,#0x80
      0030D8 12r10r10         [24] 9515 	lcall	_LCD_string_write
      0030DB D0 03            [24] 9516 	pop	ar3
      0030DD D0 05            [24] 9517 	pop	ar5
      0030DF 80 9E            [24] 9518 	sjmp	00113$
      0030E1                       9519 00111$:
                                   9520 ;	.\ecen4350_lcd_v4.c:2154: } else if (blockSize == 0x02) {
      0030E1 78r18            [12] 9521 	mov	r0,#_find_blockSize_65536_652
      0030E3 B6 02 19         [24] 9522 	cjne	@r0,#0x02,00108$
                                   9523 ;	.\ecen4350_lcd_v4.c:2155: invalidInput = 0;
      0030E6 7B 00            [12] 9524 	mov	r3,#0x00
                                   9525 ;	.\ecen4350_lcd_v4.c:2156: setColorDefault();
      0030E8 C0 05            [24] 9526 	push	ar5
      0030EA C0 03            [24] 9527 	push	ar3
      0030EC 12r15rD4         [24] 9528 	lcall	_setColorDefault
                                   9529 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write("\n                ");
      0030EF 90r09rAD         [24] 9530 	mov	dptr,#___str_88
      0030F2 75 F0 80         [24] 9531 	mov	b,#0x80
      0030F5 12r10r10         [24] 9532 	lcall	_LCD_string_write
      0030F8 D0 03            [24] 9533 	pop	ar3
      0030FA D0 05            [24] 9534 	pop	ar5
      0030FC 02r30r7F         [24] 9535 	ljmp	00113$
      0030FF                       9536 00108$:
                                   9537 ;	.\ecen4350_lcd_v4.c:2158: } else if (blockSize == 0x04) {
      0030FF 78r18            [12] 9538 	mov	r0,#_find_blockSize_65536_652
      003101 B6 04 19         [24] 9539 	cjne	@r0,#0x04,00105$
                                   9540 ;	.\ecen4350_lcd_v4.c:2159: invalidInput = 0;
      003104 7B 00            [12] 9541 	mov	r3,#0x00
                                   9542 ;	.\ecen4350_lcd_v4.c:2160: setColorDefault();
      003106 C0 05            [24] 9543 	push	ar5
      003108 C0 03            [24] 9544 	push	ar3
      00310A 12r15rD4         [24] 9545 	lcall	_setColorDefault
                                   9546 ;	.\ecen4350_lcd_v4.c:2161: LCD_string_write("\n                ");
      00310D 90r09rAD         [24] 9547 	mov	dptr,#___str_88
      003110 75 F0 80         [24] 9548 	mov	b,#0x80
      003113 12r10r10         [24] 9549 	lcall	_LCD_string_write
      003116 D0 03            [24] 9550 	pop	ar3
      003118 D0 05            [24] 9551 	pop	ar5
      00311A 02r30r7F         [24] 9552 	ljmp	00113$
      00311D                       9553 00105$:
                                   9554 ;	.\ecen4350_lcd_v4.c:2162: } else if (blockSize == 0xFF) {
      00311D 78r18            [12] 9555 	mov	r0,#_find_blockSize_65536_652
      00311F B6 FF 05         [24] 9556 	cjne	@r0,#0xff,00102$
                                   9557 ;	.\ecen4350_lcd_v4.c:2163: invalidInput = 0;
      003122 7B 00            [12] 9558 	mov	r3,#0x00
      003124 02r30r7F         [24] 9559 	ljmp	00113$
      003127                       9560 00102$:
                                   9561 ;	.\ecen4350_lcd_v4.c:2166: setColorRed();
      003127 C0 05            [24] 9562 	push	ar5
      003129 C0 03            [24] 9563 	push	ar3
      00312B 12r16r19         [24] 9564 	lcall	_setColorRed
                                   9565 ;	.\ecen4350_lcd_v4.c:2167: LCD_string_write("\n Try again");
      00312E 90r09rBF         [24] 9566 	mov	dptr,#___str_89
      003131 75 F0 80         [24] 9567 	mov	b,#0x80
      003134 12r10r10         [24] 9568 	lcall	_LCD_string_write
      003137 D0 03            [24] 9569 	pop	ar3
      003139 D0 05            [24] 9570 	pop	ar5
      00313B 02r30r7F         [24] 9571 	ljmp	00113$
      00313E                       9572 00115$:
                                   9573 ;	.\ecen4350_lcd_v4.c:2172: setCursor(0, 160);
      00313E 75*00 A0         [24] 9574 	mov	_setCursor_PARM_2,#0xa0
      003141 75*01 00         [24] 9575 	mov	(_setCursor_PARM_2 + 1),#0x00
      003144 90 00 00         [24] 9576 	mov	dptr,#0x0000
      003147 C0 05            [24] 9577 	push	ar5
      003149 12r04rF6         [24] 9578 	lcall	_setCursor
                                   9579 ;	.\ecen4350_lcd_v4.c:2173: setColorDefault();
      00314C 12r15rD4         [24] 9580 	lcall	_setColorDefault
                                   9581 ;	.\ecen4350_lcd_v4.c:2174: LCD_string_write(" Input Block Size:\n");
      00314F 90r09r5B         [24] 9582 	mov	dptr,#___str_83
      003152 75 F0 80         [24] 9583 	mov	b,#0x80
      003155 12r10r10         [24] 9584 	lcall	_LCD_string_write
      003158 D0 05            [24] 9585 	pop	ar5
                                   9586 ;	.\ecen4350_lcd_v4.c:2175: if (blockSize == 0x01){
      00315A 78r18            [12] 9587 	mov	r0,#_find_blockSize_65536_652
      00315C B6 01 74         [24] 9588 	cjne	@r0,#0x01,00125$
                                   9589 ;	.\ecen4350_lcd_v4.c:2176: LCD_string_write("  ");
      00315F 90r06r6D         [24] 9590 	mov	dptr,#___str_33
      003162 75 F0 80         [24] 9591 	mov	b,#0x80
      003165 C0 05            [24] 9592 	push	ar5
      003167 12r10r10         [24] 9593 	lcall	_LCD_string_write
                                   9594 ;	.\ecen4350_lcd_v4.c:2177: setColorHighlight2();
      00316A 12r15rF6         [24] 9595 	lcall	_setColorHighlight2
                                   9596 ;	.\ecen4350_lcd_v4.c:2178: LCD_string_write("<01> BYTE\n");
      00316D 90r09rCB         [24] 9597 	mov	dptr,#___str_90
      003170 75 F0 80         [24] 9598 	mov	b,#0x80
      003173 12r10r10         [24] 9599 	lcall	_LCD_string_write
                                   9600 ;	.\ecen4350_lcd_v4.c:2179: setColorGray();
      003176 12r16r02         [24] 9601 	lcall	_setColorGray
                                   9602 ;	.\ecen4350_lcd_v4.c:2180: LCD_string_write("  <02> WORD\n");
      003179 90r09rD6         [24] 9603 	mov	dptr,#___str_91
      00317C 75 F0 80         [24] 9604 	mov	b,#0x80
      00317F 12r10r10         [24] 9605 	lcall	_LCD_string_write
                                   9606 ;	.\ecen4350_lcd_v4.c:2181: LCD_string_write("  <04> DWORD\n");
      003182 90r09rE3         [24] 9607 	mov	dptr,#___str_92
      003185 75 F0 80         [24] 9608 	mov	b,#0x80
      003188 12r10r10         [24] 9609 	lcall	_LCD_string_write
                                   9610 ;	.\ecen4350_lcd_v4.c:2182: LCD_string_write("  <FF> (SCAN)");
      00318B 90r09r95         [24] 9611 	mov	dptr,#___str_85
      00318E 75 F0 80         [24] 9612 	mov	b,#0x80
      003191 12r10r10         [24] 9613 	lcall	_LCD_string_write
                                   9614 ;	.\ecen4350_lcd_v4.c:2183: setColorDefault();
      003194 12r15rD4         [24] 9615 	lcall	_setColorDefault
                                   9616 ;	.\ecen4350_lcd_v4.c:2184: setCursor(0, 250);
      003197 75*00 FA         [24] 9617 	mov	_setCursor_PARM_2,#0xfa
      00319A 75*01 00         [24] 9618 	mov	(_setCursor_PARM_2 + 1),#0x00
      00319D 90 00 00         [24] 9619 	mov	dptr,#0x0000
      0031A0 12r04rF6         [24] 9620 	lcall	_setCursor
                                   9621 ;	.\ecen4350_lcd_v4.c:2185: LCD_string_write("   ");
      0031A3 90r09rA9         [24] 9622 	mov	dptr,#___str_87
      0031A6 75 F0 80         [24] 9623 	mov	b,#0x80
      0031A9 12r10r10         [24] 9624 	lcall	_LCD_string_write
                                   9625 ;	.\ecen4350_lcd_v4.c:2186: setColorHighlight2();
      0031AC 12r15rF6         [24] 9626 	lcall	_setColorHighlight2
                                   9627 ;	.\ecen4350_lcd_v4.c:2187: print8Hex(blockSize);
      0031AF 78r18            [12] 9628 	mov	r0,#_find_blockSize_65536_652
      0031B1 86 82            [24] 9629 	mov	dpl,@r0
      0031B3 12r14rE1         [24] 9630 	lcall	_print8Hex
                                   9631 ;	.\ecen4350_lcd_v4.c:2188: setColorDefault();
      0031B6 12r15rD4         [24] 9632 	lcall	_setColorDefault
                                   9633 ;	.\ecen4350_lcd_v4.c:2189: LCD_string_write("\n Search Size Limit:");
      0031B9 90r09rF1         [24] 9634 	mov	dptr,#___str_93
      0031BC 75 F0 80         [24] 9635 	mov	b,#0x80
      0031BF 12r10r10         [24] 9636 	lcall	_LCD_string_write
                                   9637 ;	.\ecen4350_lcd_v4.c:2190: setColorWhite();
      0031C2 12r16r24         [24] 9638 	lcall	_setColorWhite
                                   9639 ;	.\ecen4350_lcd_v4.c:2191: LCD_string_write("\n BYTE [8 bits]");
      0031C5 90r0Ar06         [24] 9640 	mov	dptr,#___str_94
      0031C8 75 F0 80         [24] 9641 	mov	b,#0x80
      0031CB 12r10r10         [24] 9642 	lcall	_LCD_string_write
      0031CE D0 05            [24] 9643 	pop	ar5
      0031D0 02r33r17         [24] 9644 	ljmp	00126$
      0031D3                       9645 00125$:
                                   9646 ;	.\ecen4350_lcd_v4.c:2192: } else if (blockSize == 0x02) {
      0031D3 78r18            [12] 9647 	mov	r0,#_find_blockSize_65536_652
      0031D5 B6 02 6E         [24] 9648 	cjne	@r0,#0x02,00122$
                                   9649 ;	.\ecen4350_lcd_v4.c:2193: setColorGray();
      0031D8 C0 05            [24] 9650 	push	ar5
      0031DA 12r16r02         [24] 9651 	lcall	_setColorGray
                                   9652 ;	.\ecen4350_lcd_v4.c:2194: LCD_string_write("  <01> BYTE\n  ");
      0031DD 90r0Ar16         [24] 9653 	mov	dptr,#___str_95
      0031E0 75 F0 80         [24] 9654 	mov	b,#0x80
      0031E3 12r10r10         [24] 9655 	lcall	_LCD_string_write
                                   9656 ;	.\ecen4350_lcd_v4.c:2195: setColorHighlight2();
      0031E6 12r15rF6         [24] 9657 	lcall	_setColorHighlight2
                                   9658 ;	.\ecen4350_lcd_v4.c:2196: LCD_string_write("<02> WORD\n");
      0031E9 90r0Ar25         [24] 9659 	mov	dptr,#___str_96
      0031EC 75 F0 80         [24] 9660 	mov	b,#0x80
      0031EF 12r10r10         [24] 9661 	lcall	_LCD_string_write
                                   9662 ;	.\ecen4350_lcd_v4.c:2197: setColorGray();
      0031F2 12r16r02         [24] 9663 	lcall	_setColorGray
                                   9664 ;	.\ecen4350_lcd_v4.c:2198: LCD_string_write("  <04> DWORD\n");
      0031F5 90r09rE3         [24] 9665 	mov	dptr,#___str_92
      0031F8 75 F0 80         [24] 9666 	mov	b,#0x80
      0031FB 12r10r10         [24] 9667 	lcall	_LCD_string_write
                                   9668 ;	.\ecen4350_lcd_v4.c:2199: LCD_string_write("  <FF> (SCAN)");
      0031FE 90r09r95         [24] 9669 	mov	dptr,#___str_85
      003201 75 F0 80         [24] 9670 	mov	b,#0x80
      003204 12r10r10         [24] 9671 	lcall	_LCD_string_write
                                   9672 ;	.\ecen4350_lcd_v4.c:2200: setColorDefault();
      003207 12r15rD4         [24] 9673 	lcall	_setColorDefault
                                   9674 ;	.\ecen4350_lcd_v4.c:2201: setCursor(0, 250);
      00320A 75*00 FA         [24] 9675 	mov	_setCursor_PARM_2,#0xfa
      00320D 75*01 00         [24] 9676 	mov	(_setCursor_PARM_2 + 1),#0x00
      003210 90 00 00         [24] 9677 	mov	dptr,#0x0000
      003213 12r04rF6         [24] 9678 	lcall	_setCursor
                                   9679 ;	.\ecen4350_lcd_v4.c:2202: LCD_string_write("   ");
      003216 90r09rA9         [24] 9680 	mov	dptr,#___str_87
      003219 75 F0 80         [24] 9681 	mov	b,#0x80
      00321C 12r10r10         [24] 9682 	lcall	_LCD_string_write
                                   9683 ;	.\ecen4350_lcd_v4.c:2203: setColorHighlight2();
      00321F 12r15rF6         [24] 9684 	lcall	_setColorHighlight2
                                   9685 ;	.\ecen4350_lcd_v4.c:2204: print8Hex(blockSize);
      003222 78r18            [12] 9686 	mov	r0,#_find_blockSize_65536_652
      003224 86 82            [24] 9687 	mov	dpl,@r0
      003226 12r14rE1         [24] 9688 	lcall	_print8Hex
                                   9689 ;	.\ecen4350_lcd_v4.c:2205: setColorDefault();
      003229 12r15rD4         [24] 9690 	lcall	_setColorDefault
                                   9691 ;	.\ecen4350_lcd_v4.c:2206: LCD_string_write("\n Search Size Limit:");
      00322C 90r09rF1         [24] 9692 	mov	dptr,#___str_93
      00322F 75 F0 80         [24] 9693 	mov	b,#0x80
      003232 12r10r10         [24] 9694 	lcall	_LCD_string_write
                                   9695 ;	.\ecen4350_lcd_v4.c:2207: setColorWhite();
      003235 12r16r24         [24] 9696 	lcall	_setColorWhite
                                   9697 ;	.\ecen4350_lcd_v4.c:2208: LCD_string_write("\n WORD [16 bits]");
      003238 90r0Ar30         [24] 9698 	mov	dptr,#___str_97
      00323B 75 F0 80         [24] 9699 	mov	b,#0x80
      00323E 12r10r10         [24] 9700 	lcall	_LCD_string_write
      003241 D0 05            [24] 9701 	pop	ar5
      003243 02r33r17         [24] 9702 	ljmp	00126$
      003246                       9703 00122$:
                                   9704 ;	.\ecen4350_lcd_v4.c:2209: } else if (blockSize == 0x04) {
      003246 78r18            [12] 9705 	mov	r0,#_find_blockSize_65536_652
      003248 B6 04 64         [24] 9706 	cjne	@r0,#0x04,00119$
                                   9707 ;	.\ecen4350_lcd_v4.c:2210: setColorGray();
      00324B C0 05            [24] 9708 	push	ar5
      00324D 12r16r02         [24] 9709 	lcall	_setColorGray
                                   9710 ;	.\ecen4350_lcd_v4.c:2211: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003250 90r0Ar41         [24] 9711 	mov	dptr,#___str_98
      003253 75 F0 80         [24] 9712 	mov	b,#0x80
      003256 12r10r10         [24] 9713 	lcall	_LCD_string_write
                                   9714 ;	.\ecen4350_lcd_v4.c:2212: setColorHighlight2();
      003259 12r15rF6         [24] 9715 	lcall	_setColorHighlight2
                                   9716 ;	.\ecen4350_lcd_v4.c:2213: LCD_string_write("<04> DWORD\n");
      00325C 90r0Ar5C         [24] 9717 	mov	dptr,#___str_99
      00325F 75 F0 80         [24] 9718 	mov	b,#0x80
      003262 12r10r10         [24] 9719 	lcall	_LCD_string_write
                                   9720 ;	.\ecen4350_lcd_v4.c:2214: setColorGray();
      003265 12r16r02         [24] 9721 	lcall	_setColorGray
                                   9722 ;	.\ecen4350_lcd_v4.c:2215: LCD_string_write("  <FF> (SCAN)");
      003268 90r09r95         [24] 9723 	mov	dptr,#___str_85
      00326B 75 F0 80         [24] 9724 	mov	b,#0x80
      00326E 12r10r10         [24] 9725 	lcall	_LCD_string_write
                                   9726 ;	.\ecen4350_lcd_v4.c:2216: setColorDefault();
      003271 12r15rD4         [24] 9727 	lcall	_setColorDefault
                                   9728 ;	.\ecen4350_lcd_v4.c:2217: setCursor(0, 250);
      003274 75*00 FA         [24] 9729 	mov	_setCursor_PARM_2,#0xfa
      003277 75*01 00         [24] 9730 	mov	(_setCursor_PARM_2 + 1),#0x00
      00327A 90 00 00         [24] 9731 	mov	dptr,#0x0000
      00327D 12r04rF6         [24] 9732 	lcall	_setCursor
                                   9733 ;	.\ecen4350_lcd_v4.c:2218: LCD_string_write("   ");
      003280 90r09rA9         [24] 9734 	mov	dptr,#___str_87
      003283 75 F0 80         [24] 9735 	mov	b,#0x80
      003286 12r10r10         [24] 9736 	lcall	_LCD_string_write
                                   9737 ;	.\ecen4350_lcd_v4.c:2219: setColorHighlight2();
      003289 12r15rF6         [24] 9738 	lcall	_setColorHighlight2
                                   9739 ;	.\ecen4350_lcd_v4.c:2220: print8Hex(blockSize);
      00328C 78r18            [12] 9740 	mov	r0,#_find_blockSize_65536_652
      00328E 86 82            [24] 9741 	mov	dpl,@r0
      003290 12r14rE1         [24] 9742 	lcall	_print8Hex
                                   9743 ;	.\ecen4350_lcd_v4.c:2221: setColorDefault();
      003293 12r15rD4         [24] 9744 	lcall	_setColorDefault
                                   9745 ;	.\ecen4350_lcd_v4.c:2222: LCD_string_write("\n Search Size Limit:");
      003296 90r09rF1         [24] 9746 	mov	dptr,#___str_93
      003299 75 F0 80         [24] 9747 	mov	b,#0x80
      00329C 12r10r10         [24] 9748 	lcall	_LCD_string_write
                                   9749 ;	.\ecen4350_lcd_v4.c:2223: setColorWhite();
      00329F 12r16r24         [24] 9750 	lcall	_setColorWhite
                                   9751 ;	.\ecen4350_lcd_v4.c:2224: LCD_string_write("\n DWORD [32 bits]");
      0032A2 90r0Ar68         [24] 9752 	mov	dptr,#___str_100
      0032A5 75 F0 80         [24] 9753 	mov	b,#0x80
      0032A8 12r10r10         [24] 9754 	lcall	_LCD_string_write
      0032AB D0 05            [24] 9755 	pop	ar5
      0032AD 80 68            [24] 9756 	sjmp	00126$
      0032AF                       9757 00119$:
                                   9758 ;	.\ecen4350_lcd_v4.c:2225: } else if (blockSize == 0xFF) {
      0032AF 78r18            [12] 9759 	mov	r0,#_find_blockSize_65536_652
      0032B1 B6 FF 63         [24] 9760 	cjne	@r0,#0xff,00126$
                                   9761 ;	.\ecen4350_lcd_v4.c:2226: scan = 1;
      0032B4 78r1A            [12] 9762 	mov	r0,#_find_scan_65536_652
      0032B6 76 01            [12] 9763 	mov	@r0,#0x01
                                   9764 ;	.\ecen4350_lcd_v4.c:2227: setColorGray();
      0032B8 C0 05            [24] 9765 	push	ar5
      0032BA 12r16r02         [24] 9766 	lcall	_setColorGray
                                   9767 ;	.\ecen4350_lcd_v4.c:2228: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      0032BD 90r0Ar41         [24] 9768 	mov	dptr,#___str_98
      0032C0 75 F0 80         [24] 9769 	mov	b,#0x80
      0032C3 12r10r10         [24] 9770 	lcall	_LCD_string_write
                                   9771 ;	.\ecen4350_lcd_v4.c:2229: LCD_string_write("<04> DWORD\n  ");
      0032C6 90r0Ar7A         [24] 9772 	mov	dptr,#___str_101
      0032C9 75 F0 80         [24] 9773 	mov	b,#0x80
      0032CC 12r10r10         [24] 9774 	lcall	_LCD_string_write
                                   9775 ;	.\ecen4350_lcd_v4.c:2230: setColorHighlight2();
      0032CF 12r15rF6         [24] 9776 	lcall	_setColorHighlight2
                                   9777 ;	.\ecen4350_lcd_v4.c:2231: LCD_string_write("<FF> (SCAN)");
      0032D2 90r0Ar88         [24] 9778 	mov	dptr,#___str_102
      0032D5 75 F0 80         [24] 9779 	mov	b,#0x80
      0032D8 12r10r10         [24] 9780 	lcall	_LCD_string_write
                                   9781 ;	.\ecen4350_lcd_v4.c:2232: setColorDefault();
      0032DB 12r15rD4         [24] 9782 	lcall	_setColorDefault
                                   9783 ;	.\ecen4350_lcd_v4.c:2233: setCursor(0, 250);
      0032DE 75*00 FA         [24] 9784 	mov	_setCursor_PARM_2,#0xfa
      0032E1 75*01 00         [24] 9785 	mov	(_setCursor_PARM_2 + 1),#0x00
      0032E4 90 00 00         [24] 9786 	mov	dptr,#0x0000
      0032E7 12r04rF6         [24] 9787 	lcall	_setCursor
                                   9788 ;	.\ecen4350_lcd_v4.c:2234: LCD_string_write("   ");
      0032EA 90r09rA9         [24] 9789 	mov	dptr,#___str_87
      0032ED 75 F0 80         [24] 9790 	mov	b,#0x80
      0032F0 12r10r10         [24] 9791 	lcall	_LCD_string_write
                                   9792 ;	.\ecen4350_lcd_v4.c:2235: setColorHighlight2();
      0032F3 12r15rF6         [24] 9793 	lcall	_setColorHighlight2
                                   9794 ;	.\ecen4350_lcd_v4.c:2236: print8Hex(blockSize);
      0032F6 78r18            [12] 9795 	mov	r0,#_find_blockSize_65536_652
      0032F8 86 82            [24] 9796 	mov	dpl,@r0
      0032FA 12r14rE1         [24] 9797 	lcall	_print8Hex
                                   9798 ;	.\ecen4350_lcd_v4.c:2237: setColorDefault();
      0032FD 12r15rD4         [24] 9799 	lcall	_setColorDefault
                                   9800 ;	.\ecen4350_lcd_v4.c:2238: LCD_string_write("\n Search Size Limit:");
      003300 90r09rF1         [24] 9801 	mov	dptr,#___str_93
      003303 75 F0 80         [24] 9802 	mov	b,#0x80
      003306 12r10r10         [24] 9803 	lcall	_LCD_string_write
                                   9804 ;	.\ecen4350_lcd_v4.c:2239: setColorWhite();
      003309 12r16r24         [24] 9805 	lcall	_setColorWhite
                                   9806 ;	.\ecen4350_lcd_v4.c:2240: LCD_string_write("\n [256 Blocks]");
      00330C 90r0Ar94         [24] 9807 	mov	dptr,#___str_103
      00330F 75 F0 80         [24] 9808 	mov	b,#0x80
      003312 12r10r10         [24] 9809 	lcall	_LCD_string_write
      003315 D0 05            [24] 9810 	pop	ar5
      003317                       9811 00126$:
                                   9812 ;	.\ecen4350_lcd_v4.c:2244: delay(40);
      003317 90 00 28         [24] 9813 	mov	dptr,#0x0028
      00331A C0 05            [24] 9814 	push	ar5
      00331C 12r00rE0         [24] 9815 	lcall	_delay
                                   9816 ;	.\ecen4350_lcd_v4.c:2245: clearLCD();
      00331F 12r0Dr93         [24] 9817 	lcall	_clearLCD
                                   9818 ;	.\ecen4350_lcd_v4.c:2246: fillTop(GRAY);
      003322 90 D6 BA         [24] 9819 	mov	dptr,#0xd6ba
      003325 12r0BrC6         [24] 9820 	lcall	_fillTop
                                   9821 ;	.\ecen4350_lcd_v4.c:2247: setTextSize(5);
      003328 75 82 05         [24] 9822 	mov	dpl,#0x05
      00332B 12r05r10         [24] 9823 	lcall	_setTextSize
                                   9824 ;	.\ecen4350_lcd_v4.c:2248: setColorMenu();
      00332E 12r16r0D         [24] 9825 	lcall	_setColorMenu
                                   9826 ;	.\ecen4350_lcd_v4.c:2249: setCursor(30,0);
      003331 E4               [12] 9827 	clr	a
      003332 F5*00            [12] 9828 	mov	_setCursor_PARM_2,a
      003334 F5*01            [12] 9829 	mov	(_setCursor_PARM_2 + 1),a
      003336 90 00 1E         [24] 9830 	mov	dptr,#0x001e
      003339 12r04rF6         [24] 9831 	lcall	_setCursor
                                   9832 ;	.\ecen4350_lcd_v4.c:2250: LCD_string_write("[FIND]\n");
      00333C 90r09r35         [24] 9833 	mov	dptr,#___str_80
      00333F 75 F0 80         [24] 9834 	mov	b,#0x80
      003342 12r10r10         [24] 9835 	lcall	_LCD_string_write
                                   9836 ;	.\ecen4350_lcd_v4.c:2251: setColorDefault();
      003345 12r15rD4         [24] 9837 	lcall	_setColorDefault
                                   9838 ;	.\ecen4350_lcd_v4.c:2252: setTextSize(2);
      003348 75 82 02         [24] 9839 	mov	dpl,#0x02
      00334B 12r05r10         [24] 9840 	lcall	_setTextSize
      00334E D0 05            [24] 9841 	pop	ar5
                                   9842 ;	.\ecen4350_lcd_v4.c:2258: while (exit) {
      003350                       9843 00205$:
      003350 78r1C            [12] 9844 	mov	r0,#_find_exit_65536_652
      003352 E6               [12] 9845 	mov	a,@r0
      003353 70 03            [24] 9846 	jnz	00556$
      003355 02r39r18         [24] 9847 	ljmp	00207$
      003358                       9848 00556$:
                                   9849 ;	.\ecen4350_lcd_v4.c:2260: if (scan) {	
      003358 78r1A            [12] 9850 	mov	r0,#_find_scan_65536_652
      00335A E6               [12] 9851 	mov	a,@r0
      00335B 70 03            [24] 9852 	jnz	00557$
      00335D 02r34r37         [24] 9853 	ljmp	00196$
      003360                       9854 00557$:
                                   9855 ;	.\ecen4350_lcd_v4.c:2261: setCursor(0, 60);
      003360 75*00 3C         [24] 9856 	mov	_setCursor_PARM_2,#0x3c
      003363 75*01 00         [24] 9857 	mov	(_setCursor_PARM_2 + 1),#0x00
      003366 90 00 00         [24] 9858 	mov	dptr,#0x0000
      003369 C0 05            [24] 9859 	push	ar5
      00336B 12r04rF6         [24] 9860 	lcall	_setCursor
                                   9861 ;	.\ecen4350_lcd_v4.c:2262: setColorYellow();
      00336E 12r16r3A         [24] 9862 	lcall	_setColorYellow
                                   9863 ;	.\ecen4350_lcd_v4.c:2263: LCD_string_write(" [Non-Interactive]\n");
      003371 90r0ArA3         [24] 9864 	mov	dptr,#___str_104
      003374 75 F0 80         [24] 9865 	mov	b,#0x80
      003377 12r10r10         [24] 9866 	lcall	_LCD_string_write
                                   9867 ;	.\ecen4350_lcd_v4.c:2264: setColorWhite();
      00337A 12r16r24         [24] 9868 	lcall	_setColorWhite
                                   9869 ;	.\ecen4350_lcd_v4.c:2265: LCD_string_write(" Search Value:\n ");
      00337D 90r0ArB7         [24] 9870 	mov	dptr,#___str_105
      003380 75 F0 80         [24] 9871 	mov	b,#0x80
      003383 12r10r10         [24] 9872 	lcall	_LCD_string_write
                                   9873 ;	.\ecen4350_lcd_v4.c:2266: setColorDefault();
      003386 12r15rD4         [24] 9874 	lcall	_setColorDefault
                                   9875 ;	.\ecen4350_lcd_v4.c:2267: print8Hex(value);
      003389 78r19            [12] 9876 	mov	r0,#_find_value_65536_652
      00338B 86 82            [24] 9877 	mov	dpl,@r0
      00338D 12r14rE1         [24] 9878 	lcall	_print8Hex
      003390 D0 05            [24] 9879 	pop	ar5
                                   9880 ;	.\ecen4350_lcd_v4.c:2268: for(unsigned int i = 0; i < blockSize; i++) {
      003392 8D 03            [24] 9881 	mov	ar3,r5
      003394 E4               [12] 9882 	clr	a
      003395 F5*59            [12] 9883 	mov	_find_i_262144_665,a
      003397 F5*5A            [12] 9884 	mov	(_find_i_262144_665 + 1),a
      003399                       9885 00211$:
      003399 78r18            [12] 9886 	mov	r0,#_find_blockSize_65536_652
      00339B 86 02            [24] 9887 	mov	ar2,@r0
      00339D 7E 00            [12] 9888 	mov	r6,#0x00
      00339F C3               [12] 9889 	clr	c
      0033A0 E5*59            [12] 9890 	mov	a,_find_i_262144_665
      0033A2 9A               [12] 9891 	subb	a,r2
      0033A3 E5*5A            [12] 9892 	mov	a,(_find_i_262144_665 + 1)
      0033A5 9E               [12] 9893 	subb	a,r6
      0033A6 40 03            [24] 9894 	jc	00558$
      0033A8 02r34r2E         [24] 9895 	ljmp	00271$
      0033AB                       9896 00558$:
                                   9897 ;	.\ecen4350_lcd_v4.c:2269: d = (unsigned char __xdata*)(i+address);
      0033AB 78r16            [12] 9898 	mov	r0,#_find_address_65536_652
      0033AD E6               [12] 9899 	mov	a,@r0
      0033AE 25*59            [12] 9900 	add	a,_find_i_262144_665
      0033B0 FC               [12] 9901 	mov	r4,a
      0033B1 08               [12] 9902 	inc	r0
      0033B2 E6               [12] 9903 	mov	a,@r0
      0033B3 35*5A            [12] 9904 	addc	a,(_find_i_262144_665 + 1)
      0033B5 FE               [12] 9905 	mov	r6,a
                                   9906 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   9907 ;	assignBit
      0033B6 C2 B5            [12] 9908 	clr	_P3_5
                                   9909 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      0033B8 8C 82            [24] 9910 	mov	dpl,r4
      0033BA 8E 83            [24] 9911 	mov	dph,r6
      0033BC E0               [24] 9912 	movx	a,@dptr
      0033BD FC               [12] 9913 	mov	r4,a
                                   9914 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   9915 ;	assignBit
      0033BE D2 B5            [12] 9916 	setb	_P3_5
                                   9917 ;	.\ecen4350_lcd_v4.c:2270: if(value == ramRead8(d)){
      0033C0 78r19            [12] 9918 	mov	r0,#_find_value_65536_652
      0033C2 E6               [12] 9919 	mov	a,@r0
      0033C3 B5 04 5D         [24] 9920 	cjne	a,ar4,00212$
                                   9921 ;	.\ecen4350_lcd_v4.c:2271: noneFound = 0;
      0033C6 78r1B            [12] 9922 	mov	r0,#_find_noneFound_65536_652
      0033C8 76 00            [12] 9923 	mov	@r0,#0x00
                                   9924 ;	.\ecen4350_lcd_v4.c:2273: if (page == 0) {		
      0033CA EB               [12] 9925 	mov	a,r3
      0033CB 70 34            [24] 9926 	jnz	00128$
                                   9927 ;	.\ecen4350_lcd_v4.c:2274: setColorWhite();
      0033CD C0 03            [24] 9928 	push	ar3
      0033CF 12r16r24         [24] 9929 	lcall	_setColorWhite
                                   9930 ;	.\ecen4350_lcd_v4.c:2275: setCursor(0, 120);
      0033D2 75*00 78         [24] 9931 	mov	_setCursor_PARM_2,#0x78
      0033D5 75*01 00         [24] 9932 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033D8 90 00 00         [24] 9933 	mov	dptr,#0x0000
      0033DB 12r04rF6         [24] 9934 	lcall	_setCursor
                                   9935 ;	.\ecen4350_lcd_v4.c:2276: LCD_string_write(" Found at Location:\n");
      0033DE 90r0ArC8         [24] 9936 	mov	dptr,#___str_106
      0033E1 75 F0 80         [24] 9937 	mov	b,#0x80
      0033E4 12r10r10         [24] 9938 	lcall	_LCD_string_write
                                   9939 ;	.\ecen4350_lcd_v4.c:2277: setColorDefault();
      0033E7 12r15rD4         [24] 9940 	lcall	_setColorDefault
                                   9941 ;	.\ecen4350_lcd_v4.c:2278: LCD_string_write(" 0x");
      0033EA 90r07r4E         [24] 9942 	mov	dptr,#___str_46
      0033ED 75 F0 80         [24] 9943 	mov	b,#0x80
      0033F0 12r10r10         [24] 9944 	lcall	_LCD_string_write
                                   9945 ;	.\ecen4350_lcd_v4.c:2279: print16Hex(i);
      0033F3 85*59 82         [24] 9946 	mov	dpl,_find_i_262144_665
      0033F6 85*5A 83         [24] 9947 	mov	dph,(_find_i_262144_665 + 1)
      0033F9 12r14rF8         [24] 9948 	lcall	_print16Hex
      0033FC D0 03            [24] 9949 	pop	ar3
                                   9950 ;	.\ecen4350_lcd_v4.c:2280: page++;
      0033FE 0B               [12] 9951 	inc	r3
      0033FF 80 22            [24] 9952 	sjmp	00212$
      003401                       9953 00128$:
                                   9954 ;	.\ecen4350_lcd_v4.c:2282: setCursor(0, 120);
      003401 75*00 78         [24] 9955 	mov	_setCursor_PARM_2,#0x78
      003404 75*01 00         [24] 9956 	mov	(_setCursor_PARM_2 + 1),#0x00
      003407 90 00 00         [24] 9957 	mov	dptr,#0x0000
      00340A C0 03            [24] 9958 	push	ar3
      00340C 12r04rF6         [24] 9959 	lcall	_setCursor
                                   9960 ;	.\ecen4350_lcd_v4.c:2283: LCD_string_write("\n 0x");
      00340F 90r0ArDD         [24] 9961 	mov	dptr,#___str_107
      003412 75 F0 80         [24] 9962 	mov	b,#0x80
      003415 12r10r10         [24] 9963 	lcall	_LCD_string_write
                                   9964 ;	.\ecen4350_lcd_v4.c:2284: print16Hex(i);
      003418 85*59 82         [24] 9965 	mov	dpl,_find_i_262144_665
      00341B 85*5A 83         [24] 9966 	mov	dph,(_find_i_262144_665 + 1)
      00341E 12r14rF8         [24] 9967 	lcall	_print16Hex
      003421 D0 03            [24] 9968 	pop	ar3
      003423                       9969 00212$:
                                   9970 ;	.\ecen4350_lcd_v4.c:2268: for(unsigned int i = 0; i < blockSize; i++) {
      003423 05*59            [12] 9971 	inc	_find_i_262144_665
      003425 E4               [12] 9972 	clr	a
      003426 B5*59 02         [24] 9973 	cjne	a,_find_i_262144_665,00562$
      003429 05*5A            [12] 9974 	inc	(_find_i_262144_665 + 1)
      00342B                       9975 00562$:
      00342B 02r33r99         [24] 9976 	ljmp	00211$
      00342E                       9977 00271$:
      00342E 8B 05            [24] 9978 	mov	ar5,r3
                                   9979 ;	.\ecen4350_lcd_v4.c:2288: exit = 0;
      003430 78r1C            [12] 9980 	mov	r0,#_find_exit_65536_652
      003432 76 00            [12] 9981 	mov	@r0,#0x00
      003434 02r38r9F         [24] 9982 	ljmp	00197$
      003437                       9983 00196$:
                                   9984 ;	.\ecen4350_lcd_v4.c:2290: setCursor(0, 60);
      003437 75*00 3C         [24] 9985 	mov	_setCursor_PARM_2,#0x3c
      00343A 75*01 00         [24] 9986 	mov	(_setCursor_PARM_2 + 1),#0x00
      00343D 90 00 00         [24] 9987 	mov	dptr,#0x0000
      003440 C0 05            [24] 9988 	push	ar5
      003442 12r04rF6         [24] 9989 	lcall	_setCursor
                                   9990 ;	.\ecen4350_lcd_v4.c:2291: setColorYellow();
      003445 12r16r3A         [24] 9991 	lcall	_setColorYellow
                                   9992 ;	.\ecen4350_lcd_v4.c:2292: LCD_string_write(" [Interactive]\n");
      003448 90r0ArE2         [24] 9993 	mov	dptr,#___str_108
      00344B 75 F0 80         [24] 9994 	mov	b,#0x80
      00344E 12r10r10         [24] 9995 	lcall	_LCD_string_write
                                   9996 ;	.\ecen4350_lcd_v4.c:2293: setColorWhite();
      003451 12r16r24         [24] 9997 	lcall	_setColorWhite
                                   9998 ;	.\ecen4350_lcd_v4.c:2294: LCD_string_write(" Search Value:\n ");
      003454 90r0ArB7         [24] 9999 	mov	dptr,#___str_105
      003457 75 F0 80         [24]10000 	mov	b,#0x80
      00345A 12r10r10         [24]10001 	lcall	_LCD_string_write
                                  10002 ;	.\ecen4350_lcd_v4.c:2295: setColorDefault();
      00345D 12r15rD4         [24]10003 	lcall	_setColorDefault
                                  10004 ;	.\ecen4350_lcd_v4.c:2296: print8Hex(value);
      003460 78r19            [12]10005 	mov	r0,#_find_value_65536_652
      003462 86 82            [24]10006 	mov	dpl,@r0
      003464 12r14rE1         [24]10007 	lcall	_print8Hex
      003467 D0 05            [24]10008 	pop	ar5
                                  10009 ;	.\ecen4350_lcd_v4.c:2299: for (unsigned int i = 0; i < blockSize; i++) {
      003469 E4               [12]10010 	clr	a
      00346A F5*5C            [12]10011 	mov	_find_sloc1_1_0,a
      00346C F5*5D            [12]10012 	mov	(_find_sloc1_1_0 + 1),a
      00346E                      10013 00214$:
      00346E 78r18            [12]10014 	mov	r0,#_find_blockSize_65536_652
      003470 86 02            [24]10015 	mov	ar2,@r0
      003472 7B 00            [12]10016 	mov	r3,#0x00
      003474 C3               [12]10017 	clr	c
      003475 E5*5C            [12]10018 	mov	a,_find_sloc1_1_0
      003477 9A               [12]10019 	subb	a,r2
      003478 E5*5D            [12]10020 	mov	a,(_find_sloc1_1_0 + 1)
      00347A 9B               [12]10021 	subb	a,r3
      00347B 40 03            [24]10022 	jc	00563$
      00347D 02r38r9F         [24]10023 	ljmp	00197$
      003480                      10024 00563$:
                                  10025 ;	.\ecen4350_lcd_v4.c:2300: d = (unsigned char __xdata*)(i+address);
      003480 78r16            [12]10026 	mov	r0,#_find_address_65536_652
      003482 E6               [12]10027 	mov	a,@r0
      003483 25*5C            [12]10028 	add	a,_find_sloc1_1_0
      003485 FA               [12]10029 	mov	r2,a
      003486 08               [12]10030 	inc	r0
      003487 E6               [12]10031 	mov	a,@r0
      003488 35*5D            [12]10032 	addc	a,(_find_sloc1_1_0 + 1)
      00348A FB               [12]10033 	mov	r3,a
      00348B 8A 82            [24]10034 	mov	dpl,r2
      00348D 8B 83            [24]10035 	mov	dph,r3
                                  10036 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  10037 ;	assignBit
      00348F C2 B5            [12]10038 	clr	_P3_5
                                  10039 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      003491 E0               [24]10040 	movx	a,@dptr
      003492 FB               [12]10041 	mov	r3,a
                                  10042 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  10043 ;	assignBit
      003493 D2 B5            [12]10044 	setb	_P3_5
                                  10045 ;	.\ecen4350_lcd_v4.c:2301: if(value == ramRead8(d)){
      003495 78r19            [12]10046 	mov	r0,#_find_value_65536_652
      003497 E6               [12]10047 	mov	a,@r0
      003498 B5 03 02         [24]10048 	cjne	a,ar3,00564$
      00349B 80 03            [24]10049 	sjmp	00565$
      00349D                      10050 00564$:
      00349D 02r38r94         [24]10051 	ljmp	00215$
      0034A0                      10052 00565$:
                                  10053 ;	.\ecen4350_lcd_v4.c:2302: noneFound = 0;		// toggle flag
      0034A0 78r1B            [12]10054 	mov	r0,#_find_noneFound_65536_652
      0034A2 76 00            [12]10055 	mov	@r0,#0x00
                                  10056 ;	.\ecen4350_lcd_v4.c:2303: setCursor(0, 120);
      0034A4 75*00 78         [24]10057 	mov	_setCursor_PARM_2,#0x78
      0034A7 75*01 00         [24]10058 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034AA 90 00 00         [24]10059 	mov	dptr,#0x0000
      0034AD C0 05            [24]10060 	push	ar5
      0034AF 12r04rF6         [24]10061 	lcall	_setCursor
                                  10062 ;	.\ecen4350_lcd_v4.c:2304: setColorWhite();
      0034B2 12r16r24         [24]10063 	lcall	_setColorWhite
                                  10064 ;	.\ecen4350_lcd_v4.c:2305: LCD_string_write(" Found at Location \n");
      0034B5 90r0ArF2         [24]10065 	mov	dptr,#___str_109
      0034B8 75 F0 80         [24]10066 	mov	b,#0x80
      0034BB 12r10r10         [24]10067 	lcall	_LCD_string_write
                                  10068 ;	.\ecen4350_lcd_v4.c:2306: setColorDefault();
      0034BE 12r15rD4         [24]10069 	lcall	_setColorDefault
                                  10070 ;	.\ecen4350_lcd_v4.c:2307: LCD_string_write(" 0x");
      0034C1 90r07r4E         [24]10071 	mov	dptr,#___str_46
      0034C4 75 F0 80         [24]10072 	mov	b,#0x80
      0034C7 12r10r10         [24]10073 	lcall	_LCD_string_write
      0034CA D0 05            [24]10074 	pop	ar5
                                  10075 ;	.\ecen4350_lcd_v4.c:2308: print16Hex(page+address);
      0034CC 8D 02            [24]10076 	mov	ar2,r5
      0034CE 7B 00            [12]10077 	mov	r3,#0x00
      0034D0 78r16            [12]10078 	mov	r0,#_find_address_65536_652
      0034D2 E6               [12]10079 	mov	a,@r0
      0034D3 2A               [12]10080 	add	a,r2
      0034D4 F5 82            [12]10081 	mov	dpl,a
      0034D6 08               [12]10082 	inc	r0
      0034D7 E6               [12]10083 	mov	a,@r0
      0034D8 3B               [12]10084 	addc	a,r3
      0034D9 F5 83            [12]10085 	mov	dph,a
      0034DB C0 05            [24]10086 	push	ar5
      0034DD 12r14rF8         [24]10087 	lcall	_print16Hex
                                  10088 ;	.\ecen4350_lcd_v4.c:2309: setCursor(50, 300);
      0034E0 75*00 2C         [24]10089 	mov	_setCursor_PARM_2,#0x2c
      0034E3 75*01 01         [24]10090 	mov	(_setCursor_PARM_2 + 1),#0x01
      0034E6 90 00 32         [24]10091 	mov	dptr,#0x0032
      0034E9 12r04rF6         [24]10092 	lcall	_setCursor
                                  10093 ;	.\ecen4350_lcd_v4.c:2310: setColorGray();
      0034EC 12r16r02         [24]10094 	lcall	_setColorGray
                                  10095 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write("Page: ");
      0034EF 90r0Br07         [24]10096 	mov	dptr,#___str_110
      0034F2 75 F0 80         [24]10097 	mov	b,#0x80
      0034F5 12r10r10         [24]10098 	lcall	_LCD_string_write
                                  10099 ;	.\ecen4350_lcd_v4.c:2312: setColorHighlight2();
      0034F8 12r15rF6         [24]10100 	lcall	_setColorHighlight2
      0034FB D0 05            [24]10101 	pop	ar5
                                  10102 ;	.\ecen4350_lcd_v4.c:2313: print8Hex(page+1);
      0034FD 8D 03            [24]10103 	mov	ar3,r5
      0034FF EB               [12]10104 	mov	a,r3
      003500 04               [12]10105 	inc	a
      003501 F5 82            [12]10106 	mov	dpl,a
      003503 C0 05            [24]10107 	push	ar5
      003505 12r14rE1         [24]10108 	lcall	_print8Hex
      003508 D0 05            [24]10109 	pop	ar5
                                  10110 ;	.\ecen4350_lcd_v4.c:2317: if (i == 0) {					// At beginning, page <0>
      00350A E5*5C            [12]10111 	mov	a,_find_sloc1_1_0
      00350C 45*5D            [12]10112 	orl	a,(_find_sloc1_1_0 + 1)
      00350E 60 03            [24]10113 	jz	00566$
      003510 02r36r3F         [24]10114 	ljmp	00190$
      003513                      10115 00566$:
                                  10116 ;	.\ecen4350_lcd_v4.c:2318: if (i != blockSize - 1) {	// not at the end yet, no previous page
      003513 C0 05            [24]10117 	push	ar5
      003515 78r18            [12]10118 	mov	r0,#_find_blockSize_65536_652
      003517 86 02            [24]10119 	mov	ar2,@r0
      003519 7B 00            [12]10120 	mov	r3,#0x00
      00351B EA               [12]10121 	mov	a,r2
      00351C 24 FF            [12]10122 	add	a,#0xff
      00351E FD               [12]10123 	mov	r5,a
      00351F EB               [12]10124 	mov	a,r3
      003520 34 FF            [12]10125 	addc	a,#0xff
      003522 FF               [12]10126 	mov	r7,a
      003523 ED               [12]10127 	mov	a,r5
      003524 B5*5C 09         [24]10128 	cjne	a,_find_sloc1_1_0,00567$
      003527 EF               [12]10129 	mov	a,r7
      003528 B5*5D 05         [24]10130 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      00352B D0 05            [24]10131 	pop	ar5
      00352D 02r35rC0         [24]10132 	ljmp	00148$
      003530                      10133 00567$:
                                  10134 ;	.\ecen4350_lcd_v4.c:2319: setCursor(0, 180);
      003530 75*00 B4         [24]10135 	mov	_setCursor_PARM_2,#0xb4
      003533 75*01 00         [24]10136 	mov	(_setCursor_PARM_2 + 1),#0x00
      003536 90 00 00         [24]10137 	mov	dptr,#0x0000
      003539 12r04rF6         [24]10138 	lcall	_setCursor
                                  10139 ;	.\ecen4350_lcd_v4.c:2320: setColorWhite();
      00353C 12r16r24         [24]10140 	lcall	_setColorWhite
                                  10141 ;	.\ecen4350_lcd_v4.c:2321: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      00353F 90r0Br0E         [24]10142 	mov	dptr,#___str_111
      003542 75 F0 80         [24]10143 	mov	b,#0x80
      003545 12r10r10         [24]10144 	lcall	_LCD_string_write
      003548 D0 05            [24]10145 	pop	ar5
                                  10146 ;	.\ecen4350_lcd_v4.c:2322: invalidInput = 1;
      00354A 7F 01            [12]10147 	mov	r7,#0x01
                                  10148 ;	.\ecen4350_lcd_v4.c:2323: while (invalidInput) {
      00354C 8D*5B            [24]10149 	mov	_find_sloc0_1_0,r5
      00354E                      10150 00137$:
      00354E EF               [12]10151 	mov	a,r7
      00354F 70 03            [24]10152 	jnz	00568$
      003551 02r36r32         [24]10153 	ljmp	00272$
      003554                      10154 00568$:
                                  10155 ;	.\ecen4350_lcd_v4.c:2324: selection = keyDetect();
      003554 C0 07            [24]10156 	push	ar7
      003556 12r11r2E         [24]10157 	lcall	_keyDetect
      003559 AF 82            [24]10158 	mov	r7,dpl
      00355B 78r00            [12]10159 	mov	r0,#_selection
      00355D A6 07            [24]10160 	mov	@r0,ar7
                                  10161 ;	.\ecen4350_lcd_v4.c:2325: if(selection == '1'){
      00355F BF 31 02         [24]10162 	cjne	r7,#0x31,00569$
      003562 80 04            [24]10163 	sjmp	00570$
      003564                      10164 00569$:
      003564 D0 07            [24]10165 	pop	ar7
      003566 80 27            [24]10166 	sjmp	00134$
      003568                      10167 00570$:
      003568 D0 07            [24]10168 	pop	ar7
                                  10169 ;	.\ecen4350_lcd_v4.c:2326: setCursor(0, 180);
      00356A 75*00 B4         [24]10170 	mov	_setCursor_PARM_2,#0xb4
      00356D 75*01 00         [24]10171 	mov	(_setCursor_PARM_2 + 1),#0x00
      003570 90 00 00         [24]10172 	mov	dptr,#0x0000
      003573 12r04rF6         [24]10173 	lcall	_setCursor
                                  10174 ;	.\ecen4350_lcd_v4.c:2327: LCD_string_write(" ");
      003576 90r06r54         [24]10175 	mov	dptr,#___str_30
      003579 75 F0 80         [24]10176 	mov	b,#0x80
      00357C 12r10r10         [24]10177 	lcall	_LCD_string_write
                                  10178 ;	.\ecen4350_lcd_v4.c:2328: setColorHighlight2();
      00357F 12r15rF6         [24]10179 	lcall	_setColorHighlight2
                                  10180 ;	.\ecen4350_lcd_v4.c:2329: LCD_string_write("<1> Next");
      003582 90r0Br31         [24]10181 	mov	dptr,#___str_112
      003585 75 F0 80         [24]10182 	mov	b,#0x80
      003588 12r10r10         [24]10183 	lcall	_LCD_string_write
                                  10184 ;	.\ecen4350_lcd_v4.c:2330: invalidInput = 0;
      00358B 7F 00            [12]10185 	mov	r7,#0x00
                                  10186 ;	.\ecen4350_lcd_v4.c:2331: page++;
      00358D 05*5B            [12]10187 	inc	_find_sloc0_1_0
      00358F                      10188 00134$:
                                  10189 ;	.\ecen4350_lcd_v4.c:2332: } if(selection == '0') {
      00358F 78r00            [12]10190 	mov	r0,#_selection
      003591 B6 30 BA         [24]10191 	cjne	@r0,#0x30,00137$
                                  10192 ;	.\ecen4350_lcd_v4.c:2333: setColorDefault();
      003594 12r15rD4         [24]10193 	lcall	_setColorDefault
                                  10194 ;	.\ecen4350_lcd_v4.c:2334: setCursor(0, 180);
      003597 75*00 B4         [24]10195 	mov	_setCursor_PARM_2,#0xb4
      00359A 75*01 00         [24]10196 	mov	(_setCursor_PARM_2 + 1),#0x00
      00359D 90 00 00         [24]10197 	mov	dptr,#0x0000
      0035A0 12r04rF6         [24]10198 	lcall	_setCursor
                                  10199 ;	.\ecen4350_lcd_v4.c:2335: LCD_string_write("\n ");
      0035A3 90r08r5F         [24]10200 	mov	dptr,#___str_67
      0035A6 75 F0 80         [24]10201 	mov	b,#0x80
      0035A9 12r10r10         [24]10202 	lcall	_LCD_string_write
                                  10203 ;	.\ecen4350_lcd_v4.c:2336: setColorHighlight2();
      0035AC 12r15rF6         [24]10204 	lcall	_setColorHighlight2
                                  10205 ;	.\ecen4350_lcd_v4.c:2337: LCD_string_write("<0> Exit");
      0035AF 90r09r1A         [24]10206 	mov	dptr,#___str_78
      0035B2 75 F0 80         [24]10207 	mov	b,#0x80
      0035B5 12r10r10         [24]10208 	lcall	_LCD_string_write
                                  10209 ;	.\ecen4350_lcd_v4.c:2338: exit = 0;		// set exit flag
      0035B8 78r1C            [12]10210 	mov	r0,#_find_exit_65536_652
      0035BA 76 00            [12]10211 	mov	@r0,#0x00
                                  10212 ;	.\ecen4350_lcd_v4.c:2339: invalidInput = 0;
      0035BC 7F 00            [12]10213 	mov	r7,#0x00
      0035BE 80 8E            [24]10214 	sjmp	00137$
      0035C0                      10215 00148$:
                                  10216 ;	.\ecen4350_lcd_v4.c:2342: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      0035C0 1A               [12]10217 	dec	r2
      0035C1 BA FF 01         [24]10218 	cjne	r2,#0xff,00573$
      0035C4 1B               [12]10219 	dec	r3
      0035C5                      10220 00573$:
      0035C5 EA               [12]10221 	mov	a,r2
      0035C6 B5*5C 6B         [24]10222 	cjne	a,_find_sloc1_1_0,00149$
      0035C9 EB               [12]10223 	mov	a,r3
      0035CA B5*5D 67         [24]10224 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10225 ;	.\ecen4350_lcd_v4.c:2343: setCursor(0, 180);
      0035CD 75*00 B4         [24]10226 	mov	_setCursor_PARM_2,#0xb4
      0035D0 75*01 00         [24]10227 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035D3 90 00 00         [24]10228 	mov	dptr,#0x0000
      0035D6 C0 05            [24]10229 	push	ar5
      0035D8 12r04rF6         [24]10230 	lcall	_setCursor
                                  10231 ;	.\ecen4350_lcd_v4.c:2344: setColorWhite();
      0035DB 12r16r24         [24]10232 	lcall	_setColorWhite
                                  10233 ;	.\ecen4350_lcd_v4.c:2345: LCD_string_write("          \n <0> Exit\n              ");
      0035DE 90r0Br3A         [24]10234 	mov	dptr,#___str_113
      0035E1 75 F0 80         [24]10235 	mov	b,#0x80
      0035E4 12r10r10         [24]10236 	lcall	_LCD_string_write
      0035E7 D0 05            [24]10237 	pop	ar5
                                  10238 ;	.\ecen4350_lcd_v4.c:2346: invalidInput = 1;
      0035E9 7F 01            [12]10239 	mov	r7,#0x01
                                  10240 ;	.\ecen4350_lcd_v4.c:2347: while (invalidInput) {
      0035EB                      10241 00142$:
      0035EB EF               [12]10242 	mov	a,r7
      0035EC 60 46            [24]10243 	jz	00149$
                                  10244 ;	.\ecen4350_lcd_v4.c:2348: selection = keyDetect();
      0035EE C0 07            [24]10245 	push	ar7
      0035F0 C0 05            [24]10246 	push	ar5
      0035F2 12r11r2E         [24]10247 	lcall	_keyDetect
      0035F5 AB 82            [24]10248 	mov	r3,dpl
      0035F7 D0 05            [24]10249 	pop	ar5
      0035F9 D0 07            [24]10250 	pop	ar7
      0035FB 78r00            [12]10251 	mov	r0,#_selection
      0035FD A6 03            [24]10252 	mov	@r0,ar3
                                  10253 ;	.\ecen4350_lcd_v4.c:2349: if(selection == '0') {
      0035FF BB 30 E9         [24]10254 	cjne	r3,#0x30,00142$
                                  10255 ;	.\ecen4350_lcd_v4.c:2350: setColorDefault();
      003602 C0 05            [24]10256 	push	ar5
      003604 12r15rD4         [24]10257 	lcall	_setColorDefault
                                  10258 ;	.\ecen4350_lcd_v4.c:2351: setCursor(0, 180);
      003607 75*00 B4         [24]10259 	mov	_setCursor_PARM_2,#0xb4
      00360A 75*01 00         [24]10260 	mov	(_setCursor_PARM_2 + 1),#0x00
      00360D 90 00 00         [24]10261 	mov	dptr,#0x0000
      003610 12r04rF6         [24]10262 	lcall	_setCursor
                                  10263 ;	.\ecen4350_lcd_v4.c:2352: LCD_string_write("\n ");
      003613 90r08r5F         [24]10264 	mov	dptr,#___str_67
      003616 75 F0 80         [24]10265 	mov	b,#0x80
      003619 12r10r10         [24]10266 	lcall	_LCD_string_write
                                  10267 ;	.\ecen4350_lcd_v4.c:2353: setColorHighlight2();
      00361C 12r15rF6         [24]10268 	lcall	_setColorHighlight2
                                  10269 ;	.\ecen4350_lcd_v4.c:2354: LCD_string_write("<0> Exit");
      00361F 90r09r1A         [24]10270 	mov	dptr,#___str_78
      003622 75 F0 80         [24]10271 	mov	b,#0x80
      003625 12r10r10         [24]10272 	lcall	_LCD_string_write
      003628 D0 05            [24]10273 	pop	ar5
                                  10274 ;	.\ecen4350_lcd_v4.c:2355: exit = 0;		// set exit flag
      00362A 78r1C            [12]10275 	mov	r0,#_find_exit_65536_652
      00362C 76 00            [12]10276 	mov	@r0,#0x00
                                  10277 ;	.\ecen4350_lcd_v4.c:2356: invalidInput = 0;
      00362E 7F 00            [12]10278 	mov	r7,#0x00
      003630 80 B9            [24]10279 	sjmp	00142$
      003632                      10280 00272$:
      003632 AD*5B            [24]10281 	mov	r5,_find_sloc0_1_0
      003634                      10282 00149$:
                                  10283 ;	.\ecen4350_lcd_v4.c:2360: if (exit == 0) {	// check exit flag
      003634 78r1C            [12]10284 	mov	r0,#_find_exit_65536_652
      003636 E6               [12]10285 	mov	a,@r0
      003637 60 03            [24]10286 	jz	00579$
      003639 02r38r94         [24]10287 	ljmp	00215$
      00363C                      10288 00579$:
                                  10289 ;	.\ecen4350_lcd_v4.c:2361: break;			// break out of for loop iteration
      00363C 02r38r9F         [24]10290 	ljmp	00197$
      00363F                      10291 00190$:
                                  10292 ;	.\ecen4350_lcd_v4.c:2366: else if (i == blockSize - 1) {		// At Page End 
      00363F C0 05            [24]10293 	push	ar5
      003641 78r18            [12]10294 	mov	r0,#_find_blockSize_65536_652
      003643 86 03            [24]10295 	mov	ar3,@r0
      003645 7F 00            [12]10296 	mov	r7,#0x00
      003647 EB               [12]10297 	mov	a,r3
      003648 24 FF            [12]10298 	add	a,#0xff
      00364A FA               [12]10299 	mov	r2,a
      00364B EF               [12]10300 	mov	a,r7
      00364C 34 FF            [12]10301 	addc	a,#0xff
      00364E FD               [12]10302 	mov	r5,a
      00364F EA               [12]10303 	mov	a,r2
      003650 B5*5C 06         [24]10304 	cjne	a,_find_sloc1_1_0,00580$
      003653 ED               [12]10305 	mov	a,r5
      003654 B5*5D 02         [24]10306 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      003657 80 05            [24]10307 	sjmp	00581$
      003659                      10308 00580$:
      003659 D0 05            [24]10309 	pop	ar5
      00365B 02r37r8B         [24]10310 	ljmp	00187$
      00365E                      10311 00581$:
      00365E D0 05            [24]10312 	pop	ar5
                                  10313 ;	.\ecen4350_lcd_v4.c:2367: if (i != 0) {				// not at beginning, no next page
      003660 E5*5C            [12]10314 	mov	a,_find_sloc1_1_0
      003662 45*5D            [12]10315 	orl	a,(_find_sloc1_1_0 + 1)
      003664 70 03            [24]10316 	jnz	00582$
      003666 02r37r14         [24]10317 	ljmp	00167$
      003669                      10318 00582$:
                                  10319 ;	.\ecen4350_lcd_v4.c:2368: setCursor(0, 180);
      003669 75*00 B4         [24]10320 	mov	_setCursor_PARM_2,#0xb4
      00366C 75*01 00         [24]10321 	mov	(_setCursor_PARM_2 + 1),#0x00
      00366F 90 00 00         [24]10322 	mov	dptr,#0x0000
      003672 C0 05            [24]10323 	push	ar5
      003674 12r04rF6         [24]10324 	lcall	_setCursor
                                  10325 ;	.\ecen4350_lcd_v4.c:2369: setColorWhite();
      003677 12r16r24         [24]10326 	lcall	_setColorWhite
                                  10327 ;	.\ecen4350_lcd_v4.c:2370: LCD_string_write("          \n <0> Exit\n <2> Previous");
      00367A 90r0Br5E         [24]10328 	mov	dptr,#___str_114
      00367D 75 F0 80         [24]10329 	mov	b,#0x80
      003680 12r10r10         [24]10330 	lcall	_LCD_string_write
      003683 D0 05            [24]10331 	pop	ar5
                                  10332 ;	.\ecen4350_lcd_v4.c:2371: invalidInput = 1;
      003685 7F 01            [12]10333 	mov	r7,#0x01
                                  10334 ;	.\ecen4350_lcd_v4.c:2372: while (invalidInput) {
      003687 8D*5B            [24]10335 	mov	_find_sloc0_1_0,r5
      003689                      10336 00156$:
      003689 EF               [12]10337 	mov	a,r7
      00368A 70 03            [24]10338 	jnz	00583$
      00368C 02r37r7E         [24]10339 	ljmp	00273$
      00368F                      10340 00583$:
                                  10341 ;	.\ecen4350_lcd_v4.c:2373: selection = keyDetect();
      00368F C0 07            [24]10342 	push	ar7
      003691 C0 07            [24]10343 	push	ar7
      003693 12r11r2E         [24]10344 	lcall	_keyDetect
      003696 AA 82            [24]10345 	mov	r2,dpl
      003698 D0 07            [24]10346 	pop	ar7
      00369A 78r00            [12]10347 	mov	r0,#_selection
      00369C A6 02            [24]10348 	mov	@r0,ar2
                                  10349 ;	.\ecen4350_lcd_v4.c:2374: if(selection == '0'){
      00369E BA 30 02         [24]10350 	cjne	r2,#0x30,00584$
      0036A1 80 04            [24]10351 	sjmp	00585$
      0036A3                      10352 00584$:
      0036A3 D0 07            [24]10353 	pop	ar7
      0036A5 80 29            [24]10354 	sjmp	00153$
      0036A7                      10355 00585$:
      0036A7 D0 07            [24]10356 	pop	ar7
                                  10357 ;	.\ecen4350_lcd_v4.c:2375: setCursor(0, 180);
      0036A9 75*00 B4         [24]10358 	mov	_setCursor_PARM_2,#0xb4
      0036AC 75*01 00         [24]10359 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036AF 90 00 00         [24]10360 	mov	dptr,#0x0000
      0036B2 12r04rF6         [24]10361 	lcall	_setCursor
                                  10362 ;	.\ecen4350_lcd_v4.c:2376: LCD_string_write("\n ");
      0036B5 90r08r5F         [24]10363 	mov	dptr,#___str_67
      0036B8 75 F0 80         [24]10364 	mov	b,#0x80
      0036BB 12r10r10         [24]10365 	lcall	_LCD_string_write
                                  10366 ;	.\ecen4350_lcd_v4.c:2377: setColorHighlight2();
      0036BE 12r15rF6         [24]10367 	lcall	_setColorHighlight2
                                  10368 ;	.\ecen4350_lcd_v4.c:2378: LCD_string_write("<0> Exit\n");
      0036C1 90r07r94         [24]10369 	mov	dptr,#___str_54
      0036C4 75 F0 80         [24]10370 	mov	b,#0x80
      0036C7 12r10r10         [24]10371 	lcall	_LCD_string_write
                                  10372 ;	.\ecen4350_lcd_v4.c:2379: invalidInput = 0;
      0036CA 7F 00            [12]10373 	mov	r7,#0x00
                                  10374 ;	.\ecen4350_lcd_v4.c:2380: exit = 0;
      0036CC 78r1C            [12]10375 	mov	r0,#_find_exit_65536_652
      0036CE 76 00            [12]10376 	mov	@r0,#0x00
      0036D0                      10377 00153$:
                                  10378 ;	.\ecen4350_lcd_v4.c:2381: } if (selection == '2') {
      0036D0 78r00            [12]10379 	mov	r0,#_selection
      0036D2 B6 32 B4         [24]10380 	cjne	@r0,#0x32,00156$
                                  10381 ;	.\ecen4350_lcd_v4.c:2382: setCursor(0, 180);
      0036D5 75*00 B4         [24]10382 	mov	_setCursor_PARM_2,#0xb4
      0036D8 75*01 00         [24]10383 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036DB 90 00 00         [24]10384 	mov	dptr,#0x0000
      0036DE 12r04rF6         [24]10385 	lcall	_setCursor
                                  10386 ;	.\ecen4350_lcd_v4.c:2383: setColorWhite();
      0036E1 12r16r24         [24]10387 	lcall	_setColorWhite
                                  10388 ;	.\ecen4350_lcd_v4.c:2384: LCD_string_write("\n\n ");
      0036E4 90r0Br81         [24]10389 	mov	dptr,#___str_115
      0036E7 75 F0 80         [24]10390 	mov	b,#0x80
      0036EA 12r10r10         [24]10391 	lcall	_LCD_string_write
                                  10392 ;	.\ecen4350_lcd_v4.c:2385: setColorHighlight2();
      0036ED 12r15rF6         [24]10393 	lcall	_setColorHighlight2
                                  10394 ;	.\ecen4350_lcd_v4.c:2386: LCD_string_write("<2> Previous");
      0036F0 90r0Br85         [24]10395 	mov	dptr,#___str_116
      0036F3 75 F0 80         [24]10396 	mov	b,#0x80
      0036F6 12r10r10         [24]10397 	lcall	_LCD_string_write
                                  10398 ;	.\ecen4350_lcd_v4.c:2387: invalidInput = 0;
      0036F9 7F 00            [12]10399 	mov	r7,#0x00
                                  10400 ;	.\ecen4350_lcd_v4.c:2388: i--;			// two decrements plus next loop increment is equal to one decrement
      0036FB E5*5C            [12]10401 	mov	a,_find_sloc1_1_0
      0036FD 24 FF            [12]10402 	add	a,#0xff
      0036FF FA               [12]10403 	mov	r2,a
      003700 E5*5D            [12]10404 	mov	a,(_find_sloc1_1_0 + 1)
      003702 34 FF            [12]10405 	addc	a,#0xff
      003704 FE               [12]10406 	mov	r6,a
                                  10407 ;	.\ecen4350_lcd_v4.c:2389: i--;
      003705 EA               [12]10408 	mov	a,r2
      003706 24 FF            [12]10409 	add	a,#0xff
      003708 F5*5C            [12]10410 	mov	_find_sloc1_1_0,a
      00370A EE               [12]10411 	mov	a,r6
      00370B 34 FF            [12]10412 	addc	a,#0xff
      00370D F5*5D            [12]10413 	mov	(_find_sloc1_1_0 + 1),a
                                  10414 ;	.\ecen4350_lcd_v4.c:2390: page--;			// decrement to previous page
      00370F 15*5B            [12]10415 	dec	_find_sloc0_1_0
      003711 02r36r89         [24]10416 	ljmp	00156$
      003714                      10417 00167$:
                                  10418 ;	.\ecen4350_lcd_v4.c:2394: else if (i == 0){				// end at beginning, no next or previous
      003714 E5*5C            [12]10419 	mov	a,_find_sloc1_1_0
      003716 45*5D            [12]10420 	orl	a,(_find_sloc1_1_0 + 1)
                                  10421 ;	.\ecen4350_lcd_v4.c:2395: setCursor(0, 180);
      003718 70 66            [24]10422 	jnz	00168$
      00371A 75*00 B4         [24]10423 	mov	_setCursor_PARM_2,#0xb4
      00371D F5*01            [12]10424 	mov	(_setCursor_PARM_2 + 1),a
      00371F 90 00 00         [24]10425 	mov	dptr,#0x0000
      003722 C0 05            [24]10426 	push	ar5
      003724 12r04rF6         [24]10427 	lcall	_setCursor
                                  10428 ;	.\ecen4350_lcd_v4.c:2396: setColorWhite();
      003727 12r16r24         [24]10429 	lcall	_setColorWhite
                                  10430 ;	.\ecen4350_lcd_v4.c:2397: LCD_string_write("          \n <0> Exit\n              ");
      00372A 90r0Br3A         [24]10431 	mov	dptr,#___str_113
      00372D 75 F0 80         [24]10432 	mov	b,#0x80
      003730 12r10r10         [24]10433 	lcall	_LCD_string_write
      003733 D0 05            [24]10434 	pop	ar5
                                  10435 ;	.\ecen4350_lcd_v4.c:2398: invalidInput = 1;
      003735 7E 01            [12]10436 	mov	r6,#0x01
                                  10437 ;	.\ecen4350_lcd_v4.c:2399: while (invalidInput) {
      003737                      10438 00161$:
      003737 EE               [12]10439 	mov	a,r6
      003738 60 46            [24]10440 	jz	00168$
                                  10441 ;	.\ecen4350_lcd_v4.c:2400: selection = keyDetect();
      00373A C0 06            [24]10442 	push	ar6
      00373C C0 05            [24]10443 	push	ar5
      00373E 12r11r2E         [24]10444 	lcall	_keyDetect
      003741 AC 82            [24]10445 	mov	r4,dpl
      003743 D0 05            [24]10446 	pop	ar5
      003745 D0 06            [24]10447 	pop	ar6
      003747 78r00            [12]10448 	mov	r0,#_selection
      003749 A6 04            [24]10449 	mov	@r0,ar4
                                  10450 ;	.\ecen4350_lcd_v4.c:2401: if(selection == '0') {
      00374B BC 30 E9         [24]10451 	cjne	r4,#0x30,00161$
                                  10452 ;	.\ecen4350_lcd_v4.c:2402: setColorDefault();
      00374E C0 05            [24]10453 	push	ar5
      003750 12r15rD4         [24]10454 	lcall	_setColorDefault
                                  10455 ;	.\ecen4350_lcd_v4.c:2403: setCursor(0, 180);
      003753 75*00 B4         [24]10456 	mov	_setCursor_PARM_2,#0xb4
      003756 75*01 00         [24]10457 	mov	(_setCursor_PARM_2 + 1),#0x00
      003759 90 00 00         [24]10458 	mov	dptr,#0x0000
      00375C 12r04rF6         [24]10459 	lcall	_setCursor
                                  10460 ;	.\ecen4350_lcd_v4.c:2404: LCD_string_write("\n ");
      00375F 90r08r5F         [24]10461 	mov	dptr,#___str_67
      003762 75 F0 80         [24]10462 	mov	b,#0x80
      003765 12r10r10         [24]10463 	lcall	_LCD_string_write
                                  10464 ;	.\ecen4350_lcd_v4.c:2405: setColorHighlight2();
      003768 12r15rF6         [24]10465 	lcall	_setColorHighlight2
                                  10466 ;	.\ecen4350_lcd_v4.c:2406: LCD_string_write("<0> Exit");
      00376B 90r09r1A         [24]10467 	mov	dptr,#___str_78
      00376E 75 F0 80         [24]10468 	mov	b,#0x80
      003771 12r10r10         [24]10469 	lcall	_LCD_string_write
      003774 D0 05            [24]10470 	pop	ar5
                                  10471 ;	.\ecen4350_lcd_v4.c:2407: exit = 0;		// set exit flag
      003776 78r1C            [12]10472 	mov	r0,#_find_exit_65536_652
      003778 76 00            [12]10473 	mov	@r0,#0x00
                                  10474 ;	.\ecen4350_lcd_v4.c:2408: invalidInput = 0;
      00377A 7E 00            [12]10475 	mov	r6,#0x00
      00377C 80 B9            [24]10476 	sjmp	00161$
      00377E                      10477 00273$:
      00377E AD*5B            [24]10478 	mov	r5,_find_sloc0_1_0
      003780                      10479 00168$:
                                  10480 ;	.\ecen4350_lcd_v4.c:2412: if (exit == 0) {	// check exit flag
      003780 78r1C            [12]10481 	mov	r0,#_find_exit_65536_652
      003782 E6               [12]10482 	mov	a,@r0
      003783 60 03            [24]10483 	jz	00592$
      003785 02r38r94         [24]10484 	ljmp	00215$
      003788                      10485 00592$:
                                  10486 ;	.\ecen4350_lcd_v4.c:2413: break;			// break out of for loop iteration
      003788 02r38r9F         [24]10487 	ljmp	00197$
      00378B                      10488 00187$:
                                  10489 ;	.\ecen4350_lcd_v4.c:2418: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00378B 1B               [12]10490 	dec	r3
      00378C BB FF 01         [24]10491 	cjne	r3,#0xff,00593$
      00378F 1F               [12]10492 	dec	r7
      003790                      10493 00593$:
      003790 EB               [12]10494 	mov	a,r3
      003791 B5*5C 07         [24]10495 	cjne	a,_find_sloc1_1_0,00594$
      003794 EF               [12]10496 	mov	a,r7
      003795 B5*5D 03         [24]10497 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      003798 02r38r94         [24]10498 	ljmp	00215$
      00379B                      10499 00594$:
                                  10500 ;	.\ecen4350_lcd_v4.c:2419: if (i != 0) {
      00379B E5*5C            [12]10501 	mov	a,_find_sloc1_1_0
      00379D 45*5D            [12]10502 	orl	a,(_find_sloc1_1_0 + 1)
      00379F 70 03            [24]10503 	jnz	00595$
      0037A1 02r38r8F         [24]10504 	ljmp	00181$
      0037A4                      10505 00595$:
                                  10506 ;	.\ecen4350_lcd_v4.c:2420: setCursor(0, 180);
      0037A4 75*00 B4         [24]10507 	mov	_setCursor_PARM_2,#0xb4
      0037A7 75*01 00         [24]10508 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037AA 90 00 00         [24]10509 	mov	dptr,#0x0000
      0037AD C0 05            [24]10510 	push	ar5
      0037AF 12r04rF6         [24]10511 	lcall	_setCursor
                                  10512 ;	.\ecen4350_lcd_v4.c:2421: setColorWhite();
      0037B2 12r16r24         [24]10513 	lcall	_setColorWhite
                                  10514 ;	.\ecen4350_lcd_v4.c:2422: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      0037B5 90r0Br92         [24]10515 	mov	dptr,#___str_117
      0037B8 75 F0 80         [24]10516 	mov	b,#0x80
      0037BB 12r10r10         [24]10517 	lcall	_LCD_string_write
      0037BE D0 05            [24]10518 	pop	ar5
                                  10519 ;	.\ecen4350_lcd_v4.c:2423: invalidInput = 1;
      0037C0 7F 01            [12]10520 	mov	r7,#0x01
                                  10521 ;	.\ecen4350_lcd_v4.c:2424: while (invalidInput) {
      0037C2                      10522 00177$:
      0037C2 EF               [12]10523 	mov	a,r7
      0037C3 70 03            [24]10524 	jnz	00596$
      0037C5 02r38r8F         [24]10525 	ljmp	00181$
      0037C8                      10526 00596$:
                                  10527 ;	.\ecen4350_lcd_v4.c:2425: selection = keyDetect();
      0037C8 C0 07            [24]10528 	push	ar7
      0037CA C0 05            [24]10529 	push	ar5
      0037CC 12r11r2E         [24]10530 	lcall	_keyDetect
      0037CF AE 82            [24]10531 	mov	r6,dpl
      0037D1 D0 05            [24]10532 	pop	ar5
      0037D3 D0 07            [24]10533 	pop	ar7
      0037D5 78r00            [12]10534 	mov	r0,#_selection
      0037D7 A6 06            [24]10535 	mov	@r0,ar6
                                  10536 ;	.\ecen4350_lcd_v4.c:2426: if (selection == '1') {
      0037D9 BE 31 28         [24]10537 	cjne	r6,#0x31,00172$
                                  10538 ;	.\ecen4350_lcd_v4.c:2427: setCursor(0, 180);
      0037DC 75*00 B4         [24]10539 	mov	_setCursor_PARM_2,#0xb4
      0037DF 75*01 00         [24]10540 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037E2 90 00 00         [24]10541 	mov	dptr,#0x0000
      0037E5 C0 05            [24]10542 	push	ar5
      0037E7 12r04rF6         [24]10543 	lcall	_setCursor
                                  10544 ;	.\ecen4350_lcd_v4.c:2428: LCD_string_write(" ");
      0037EA 90r06r54         [24]10545 	mov	dptr,#___str_30
      0037ED 75 F0 80         [24]10546 	mov	b,#0x80
      0037F0 12r10r10         [24]10547 	lcall	_LCD_string_write
                                  10548 ;	.\ecen4350_lcd_v4.c:2429: setColorHighlight2();
      0037F3 12r15rF6         [24]10549 	lcall	_setColorHighlight2
                                  10550 ;	.\ecen4350_lcd_v4.c:2430: LCD_string_write("<1> Next");
      0037F6 90r0Br31         [24]10551 	mov	dptr,#___str_112
      0037F9 75 F0 80         [24]10552 	mov	b,#0x80
      0037FC 12r10r10         [24]10553 	lcall	_LCD_string_write
      0037FF D0 05            [24]10554 	pop	ar5
                                  10555 ;	.\ecen4350_lcd_v4.c:2431: invalidInput = 0;
      003801 7F 00            [12]10556 	mov	r7,#0x00
                                  10557 ;	.\ecen4350_lcd_v4.c:2432: page++;
      003803 0D               [12]10558 	inc	r5
      003804                      10559 00172$:
                                  10560 ;	.\ecen4350_lcd_v4.c:2433: } if (selection == '2') {
      003804 78r00            [12]10561 	mov	r0,#_selection
      003806 B6 32 3F         [24]10562 	cjne	@r0,#0x32,00174$
                                  10563 ;	.\ecen4350_lcd_v4.c:2434: setCursor(0, 180);
      003809 75*00 B4         [24]10564 	mov	_setCursor_PARM_2,#0xb4
      00380C 75*01 00         [24]10565 	mov	(_setCursor_PARM_2 + 1),#0x00
      00380F 90 00 00         [24]10566 	mov	dptr,#0x0000
      003812 C0 05            [24]10567 	push	ar5
      003814 12r04rF6         [24]10568 	lcall	_setCursor
                                  10569 ;	.\ecen4350_lcd_v4.c:2435: setColorWhite();
      003817 12r16r24         [24]10570 	lcall	_setColorWhite
                                  10571 ;	.\ecen4350_lcd_v4.c:2436: LCD_string_write("\n\n ");
      00381A 90r0Br81         [24]10572 	mov	dptr,#___str_115
      00381D 75 F0 80         [24]10573 	mov	b,#0x80
      003820 12r10r10         [24]10574 	lcall	_LCD_string_write
                                  10575 ;	.\ecen4350_lcd_v4.c:2437: setColorHighlight2();
      003823 12r15rF6         [24]10576 	lcall	_setColorHighlight2
                                  10577 ;	.\ecen4350_lcd_v4.c:2438: LCD_string_write("<2> Previous");
      003826 90r0Br85         [24]10578 	mov	dptr,#___str_116
      003829 75 F0 80         [24]10579 	mov	b,#0x80
      00382C 12r10r10         [24]10580 	lcall	_LCD_string_write
      00382F D0 05            [24]10581 	pop	ar5
                                  10582 ;	.\ecen4350_lcd_v4.c:2439: invalidInput = 0;
      003831 7F 00            [12]10583 	mov	r7,#0x00
                                  10584 ;	.\ecen4350_lcd_v4.c:2440: i--;
      003833 E5*5C            [12]10585 	mov	a,_find_sloc1_1_0
      003835 24 FF            [12]10586 	add	a,#0xff
      003837 FC               [12]10587 	mov	r4,a
      003838 E5*5D            [12]10588 	mov	a,(_find_sloc1_1_0 + 1)
      00383A 34 FF            [12]10589 	addc	a,#0xff
      00383C FE               [12]10590 	mov	r6,a
                                  10591 ;	.\ecen4350_lcd_v4.c:2441: i--;		// two decrements plus next loop increment is equal to one decrement
      00383D EC               [12]10592 	mov	a,r4
      00383E 24 FF            [12]10593 	add	a,#0xff
      003840 F5*5C            [12]10594 	mov	_find_sloc1_1_0,a
      003842 EE               [12]10595 	mov	a,r6
      003843 34 FF            [12]10596 	addc	a,#0xff
      003845 F5*5D            [12]10597 	mov	(_find_sloc1_1_0 + 1),a
                                  10598 ;	.\ecen4350_lcd_v4.c:2442: page--;		// decrement to previous page
      003847 1D               [12]10599 	dec	r5
      003848                      10600 00174$:
                                  10601 ;	.\ecen4350_lcd_v4.c:2443: } if (selection == '0') {
      003848 78r00            [12]10602 	mov	r0,#_selection
      00384A B6 30 02         [24]10603 	cjne	@r0,#0x30,00601$
      00384D 80 03            [24]10604 	sjmp	00602$
      00384F                      10605 00601$:
      00384F 02r37rC2         [24]10606 	ljmp	00177$
      003852                      10607 00602$:
                                  10608 ;	.\ecen4350_lcd_v4.c:2444: setColorWhite();
      003852 C0 05            [24]10609 	push	ar5
      003854 12r16r24         [24]10610 	lcall	_setColorWhite
                                  10611 ;	.\ecen4350_lcd_v4.c:2445: setCursor(0, 180);
      003857 75*00 B4         [24]10612 	mov	_setCursor_PARM_2,#0xb4
      00385A 75*01 00         [24]10613 	mov	(_setCursor_PARM_2 + 1),#0x00
      00385D 90 00 00         [24]10614 	mov	dptr,#0x0000
      003860 12r04rF6         [24]10615 	lcall	_setCursor
                                  10616 ;	.\ecen4350_lcd_v4.c:2446: LCD_string_write(" <1> Next\n ");
      003863 90r0BrB4         [24]10617 	mov	dptr,#___str_118
      003866 75 F0 80         [24]10618 	mov	b,#0x80
      003869 12r10r10         [24]10619 	lcall	_LCD_string_write
                                  10620 ;	.\ecen4350_lcd_v4.c:2447: setColorHighlight2();
      00386C 12r15rF6         [24]10621 	lcall	_setColorHighlight2
                                  10622 ;	.\ecen4350_lcd_v4.c:2448: LCD_string_write("<0> Exit");
      00386F 90r09r1A         [24]10623 	mov	dptr,#___str_78
      003872 75 F0 80         [24]10624 	mov	b,#0x80
      003875 12r10r10         [24]10625 	lcall	_LCD_string_write
                                  10626 ;	.\ecen4350_lcd_v4.c:2449: setColorWhite();
      003878 12r16r24         [24]10627 	lcall	_setColorWhite
                                  10628 ;	.\ecen4350_lcd_v4.c:2450: LCD_string_write("\n <2> Previous");
      00387B 90r0BrC0         [24]10629 	mov	dptr,#___str_119
      00387E 75 F0 80         [24]10630 	mov	b,#0x80
      003881 12r10r10         [24]10631 	lcall	_LCD_string_write
      003884 D0 05            [24]10632 	pop	ar5
                                  10633 ;	.\ecen4350_lcd_v4.c:2451: exit = 0;		// set exit flag
      003886 78r1C            [12]10634 	mov	r0,#_find_exit_65536_652
      003888 76 00            [12]10635 	mov	@r0,#0x00
                                  10636 ;	.\ecen4350_lcd_v4.c:2452: invalidInput = 0;
      00388A 7F 00            [12]10637 	mov	r7,#0x00
      00388C 02r37rC2         [24]10638 	ljmp	00177$
      00388F                      10639 00181$:
                                  10640 ;	.\ecen4350_lcd_v4.c:2456: if (exit == 0) {		// check exit flag
      00388F 78r1C            [12]10641 	mov	r0,#_find_exit_65536_652
      003891 E6               [12]10642 	mov	a,@r0
      003892 60 0B            [24]10643 	jz	00197$
                                  10644 ;	.\ecen4350_lcd_v4.c:2457: break;			// break out the loop
      003894                      10645 00215$:
                                  10646 ;	.\ecen4350_lcd_v4.c:2299: for (unsigned int i = 0; i < blockSize; i++) {
      003894 05*5C            [12]10647 	inc	_find_sloc1_1_0
      003896 E4               [12]10648 	clr	a
      003897 B5*5C 02         [24]10649 	cjne	a,_find_sloc1_1_0,00604$
      00389A 05*5D            [12]10650 	inc	(_find_sloc1_1_0 + 1)
      00389C                      10651 00604$:
      00389C 02r34r6E         [24]10652 	ljmp	00214$
      00389F                      10653 00197$:
                                  10654 ;	.\ecen4350_lcd_v4.c:2463: if(noneFound) {
      00389F 78r1B            [12]10655 	mov	r0,#_find_noneFound_65536_652
      0038A1 E6               [12]10656 	mov	a,@r0
      0038A2 70 03            [24]10657 	jnz	00605$
      0038A4 02r33r50         [24]10658 	ljmp	00205$
      0038A7                      10659 00605$:
                                  10660 ;	.\ecen4350_lcd_v4.c:2464: setColorRed();
      0038A7 C0 05            [24]10661 	push	ar5
      0038A9 12r16r19         [24]10662 	lcall	_setColorRed
                                  10663 ;	.\ecen4350_lcd_v4.c:2465: setCursor(0, 140);
      0038AC 75*00 8C         [24]10664 	mov	_setCursor_PARM_2,#0x8c
      0038AF 75*01 00         [24]10665 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038B2 90 00 00         [24]10666 	mov	dptr,#0x0000
      0038B5 12r04rF6         [24]10667 	lcall	_setCursor
                                  10668 ;	.\ecen4350_lcd_v4.c:2466: LCD_string_write(" Value Not Found\n Within Block\n ");
      0038B8 90r0BrCF         [24]10669 	mov	dptr,#___str_120
      0038BB 75 F0 80         [24]10670 	mov	b,#0x80
      0038BE 12r10r10         [24]10671 	lcall	_LCD_string_write
                                  10672 ;	.\ecen4350_lcd_v4.c:2467: setColorWhite();
      0038C1 12r16r24         [24]10673 	lcall	_setColorWhite
                                  10674 ;	.\ecen4350_lcd_v4.c:2468: LCD_string_write("\n <0> Exit");
      0038C4 90r0BrF0         [24]10675 	mov	dptr,#___str_121
      0038C7 75 F0 80         [24]10676 	mov	b,#0x80
      0038CA 12r10r10         [24]10677 	lcall	_LCD_string_write
      0038CD D0 05            [24]10678 	pop	ar5
                                  10679 ;	.\ecen4350_lcd_v4.c:2469: invalidInput = 1;
      0038CF 7F 01            [12]10680 	mov	r7,#0x01
                                  10681 ;	.\ecen4350_lcd_v4.c:2471: while (invalidInput) {
      0038D1                      10682 00200$:
      0038D1 EF               [12]10683 	mov	a,r7
      0038D2 70 03            [24]10684 	jnz	00606$
      0038D4 02r33r50         [24]10685 	ljmp	00205$
      0038D7                      10686 00606$:
                                  10687 ;	.\ecen4350_lcd_v4.c:2472: selection = keyDetect();
      0038D7 C0 07            [24]10688 	push	ar7
      0038D9 C0 05            [24]10689 	push	ar5
      0038DB 12r11r2E         [24]10690 	lcall	_keyDetect
      0038DE AE 82            [24]10691 	mov	r6,dpl
      0038E0 D0 05            [24]10692 	pop	ar5
      0038E2 D0 07            [24]10693 	pop	ar7
      0038E4 78r00            [12]10694 	mov	r0,#_selection
      0038E6 A6 06            [24]10695 	mov	@r0,ar6
                                  10696 ;	.\ecen4350_lcd_v4.c:2473: if (selection == '0'){
      0038E8 BE 30 E6         [24]10697 	cjne	r6,#0x30,00200$
                                  10698 ;	.\ecen4350_lcd_v4.c:2474: setCursor(0, 140);
      0038EB 75*00 8C         [24]10699 	mov	_setCursor_PARM_2,#0x8c
      0038EE 75*01 00         [24]10700 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038F1 90 00 00         [24]10701 	mov	dptr,#0x0000
      0038F4 C0 05            [24]10702 	push	ar5
      0038F6 12r04rF6         [24]10703 	lcall	_setCursor
                                  10704 ;	.\ecen4350_lcd_v4.c:2475: LCD_string_write("\n\n\n ");
      0038F9 90r0BrFB         [24]10705 	mov	dptr,#___str_122
      0038FC 75 F0 80         [24]10706 	mov	b,#0x80
      0038FF 12r10r10         [24]10707 	lcall	_LCD_string_write
                                  10708 ;	.\ecen4350_lcd_v4.c:2476: setColorHighlight2();
      003902 12r15rF6         [24]10709 	lcall	_setColorHighlight2
                                  10710 ;	.\ecen4350_lcd_v4.c:2477: LCD_string_write("<0> Exit");
      003905 90r09r1A         [24]10711 	mov	dptr,#___str_78
      003908 75 F0 80         [24]10712 	mov	b,#0x80
      00390B 12r10r10         [24]10713 	lcall	_LCD_string_write
      00390E D0 05            [24]10714 	pop	ar5
                                  10715 ;	.\ecen4350_lcd_v4.c:2478: invalidInput = 0;
      003910 7F 00            [12]10716 	mov	r7,#0x00
                                  10717 ;	.\ecen4350_lcd_v4.c:2479: exit = 0;
      003912 78r1C            [12]10718 	mov	r0,#_find_exit_65536_652
      003914 76 00            [12]10719 	mov	@r0,#0x00
      003916 80 B9            [24]10720 	sjmp	00200$
      003918                      10721 00207$:
                                  10722 ;	.\ecen4350_lcd_v4.c:2484: delay(80);
      003918 90 00 50         [24]10723 	mov	dptr,#0x0050
                                  10724 ;	.\ecen4350_lcd_v4.c:2485: return;
                                  10725 ;	.\ecen4350_lcd_v4.c:2486: }
      00391B 02r00rE0         [24]10726 	ljmp	_delay
                                  10727 ;------------------------------------------------------------
                                  10728 ;Allocation info for local variables in function 'count'
                                  10729 ;------------------------------------------------------------
                                  10730 ;d                         Allocated to registers 
                                  10731 ;i                         Allocated with name '_count_i_262144_721'
                                  10732 ;__3932160175              Allocated to registers 
                                  10733 ;__3932160176              Allocated to registers 
                                  10734 ;map_address               Allocated to registers 
                                  10735 ;d                         Allocated to registers r4 
                                  10736 ;i                         Allocated to registers r4 r6 
                                  10737 ;__3932160178              Allocated to registers 
                                  10738 ;__3932160179              Allocated to registers 
                                  10739 ;map_address               Allocated to registers 
                                  10740 ;d                         Allocated to registers r3 
                                  10741 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10742 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10743 ;address                   Allocated with name '_count_address_65536_708'
                                  10744 ;destination               Allocated to registers 
                                  10745 ;blockSize                 Allocated with name '_count_blockSize_65536_708'
                                  10746 ;value                     Allocated with name '_count_value_65536_708'
                                  10747 ;scan                      Allocated with name '_count_scan_65536_708'
                                  10748 ;page                      Allocated to registers r5 
                                  10749 ;noneFound                 Allocated with name '_count_noneFound_65536_708'
                                  10750 ;invalidInput              Allocated to registers r7 
                                  10751 ;exit                      Allocated with name '_count_exit_65536_708'
                                  10752 ;------------------------------------------------------------
                                  10753 ;	.\ecen4350_lcd_v4.c:2488: void count() {
                                  10754 ;	-----------------------------------------
                                  10755 ;	 function count
                                  10756 ;	-----------------------------------------
      00391E                      10757 _count:
                                  10758 ;	.\ecen4350_lcd_v4.c:2492: __idata unsigned char blockSize = 0;
      00391E 78r1F            [12]10759 	mov	r0,#_count_blockSize_65536_708
      003920 76 00            [12]10760 	mov	@r0,#0x00
                                  10761 ;	.\ecen4350_lcd_v4.c:2494: __idata unsigned char scan = 0;
      003922 78r21            [12]10762 	mov	r0,#_count_scan_65536_708
      003924 76 00            [12]10763 	mov	@r0,#0x00
                                  10764 ;	.\ecen4350_lcd_v4.c:2495: __idata unsigned char page = 0;
      003926 7D 00            [12]10765 	mov	r5,#0x00
                                  10766 ;	.\ecen4350_lcd_v4.c:2496: __idata unsigned char noneFound = 1;
      003928 78r22            [12]10767 	mov	r0,#_count_noneFound_65536_708
      00392A 76 01            [12]10768 	mov	@r0,#0x01
                                  10769 ;	.\ecen4350_lcd_v4.c:2497: __idata unsigned char invalidInput = 1;
      00392C 7B 01            [12]10770 	mov	r3,#0x01
                                  10771 ;	.\ecen4350_lcd_v4.c:2498: __idata unsigned char exit = 1;
      00392E 78r23            [12]10772 	mov	r0,#_count_exit_65536_708
      003930 76 01            [12]10773 	mov	@r0,#0x01
                                  10774 ;	.\ecen4350_lcd_v4.c:2500: clearLCD();
      003932 C0 05            [24]10775 	push	ar5
      003934 C0 03            [24]10776 	push	ar3
      003936 12r0Dr93         [24]10777 	lcall	_clearLCD
                                  10778 ;	.\ecen4350_lcd_v4.c:2503: setTextSize(5);
      003939 75 82 05         [24]10779 	mov	dpl,#0x05
      00393C 12r05r10         [24]10780 	lcall	_setTextSize
                                  10781 ;	.\ecen4350_lcd_v4.c:2504: fillTop(GRAY);
      00393F 90 D6 BA         [24]10782 	mov	dptr,#0xd6ba
      003942 12r0BrC6         [24]10783 	lcall	_fillTop
                                  10784 ;	.\ecen4350_lcd_v4.c:2505: setColorMenu();
      003945 12r16r0D         [24]10785 	lcall	_setColorMenu
                                  10786 ;	.\ecen4350_lcd_v4.c:2506: setCursor(15, 0);
      003948 E4               [12]10787 	clr	a
      003949 F5*00            [12]10788 	mov	_setCursor_PARM_2,a
      00394B F5*01            [12]10789 	mov	(_setCursor_PARM_2 + 1),a
      00394D 90 00 0F         [24]10790 	mov	dptr,#0x000f
      003950 12r04rF6         [24]10791 	lcall	_setCursor
                                  10792 ;	.\ecen4350_lcd_v4.c:2507: LCD_string_write("[COUNT]\n");
      003953 90r0Cr00         [24]10793 	mov	dptr,#___str_123
      003956 75 F0 80         [24]10794 	mov	b,#0x80
      003959 12r10r10         [24]10795 	lcall	_LCD_string_write
                                  10796 ;	.\ecen4350_lcd_v4.c:2508: setColorDefault();
      00395C 12r15rD4         [24]10797 	lcall	_setColorDefault
                                  10798 ;	.\ecen4350_lcd_v4.c:2509: setTextSize(2);
      00395F 75 82 02         [24]10799 	mov	dpl,#0x02
      003962 12r05r10         [24]10800 	lcall	_setTextSize
                                  10801 ;	.\ecen4350_lcd_v4.c:2510: setCursor(0, 60);
      003965 75*00 3C         [24]10802 	mov	_setCursor_PARM_2,#0x3c
      003968 75*01 00         [24]10803 	mov	(_setCursor_PARM_2 + 1),#0x00
      00396B 90 00 00         [24]10804 	mov	dptr,#0x0000
      00396E 12r04rF6         [24]10805 	lcall	_setCursor
                                  10806 ;	.\ecen4350_lcd_v4.c:2511: LCD_string_write(" Search Value:");
      003971 90r0Cr09         [24]10807 	mov	dptr,#___str_124
      003974 75 F0 80         [24]10808 	mov	b,#0x80
      003977 12r10r10         [24]10809 	lcall	_LCD_string_write
                                  10810 ;	.\ecen4350_lcd_v4.c:2512: setCursor(0, 80);
      00397A 75*00 50         [24]10811 	mov	_setCursor_PARM_2,#0x50
      00397D 75*01 00         [24]10812 	mov	(_setCursor_PARM_2 + 1),#0x00
      003980 90 00 00         [24]10813 	mov	dptr,#0x0000
      003983 12r04rF6         [24]10814 	lcall	_setCursor
                                  10815 ;	.\ecen4350_lcd_v4.c:2513: setColorGray();
      003986 12r16r02         [24]10816 	lcall	_setColorGray
                                  10817 ;	.\ecen4350_lcd_v4.c:2514: LCD_string_write(" __");
      003989 90r08r01         [24]10818 	mov	dptr,#___str_62
      00398C 75 F0 80         [24]10819 	mov	b,#0x80
      00398F 12r10r10         [24]10820 	lcall	_LCD_string_write
                                  10821 ;	.\ecen4350_lcd_v4.c:2515: setCursor(0, 110);
      003992 75*00 6E         [24]10822 	mov	_setCursor_PARM_2,#0x6e
      003995 75*01 00         [24]10823 	mov	(_setCursor_PARM_2 + 1),#0x00
      003998 90 00 00         [24]10824 	mov	dptr,#0x0000
      00399B 12r04rF6         [24]10825 	lcall	_setCursor
                                  10826 ;	.\ecen4350_lcd_v4.c:2516: setColorDefault();
      00399E 12r15rD4         [24]10827 	lcall	_setColorDefault
                                  10828 ;	.\ecen4350_lcd_v4.c:2517: LCD_string_write(" Search Address:");
      0039A1 90r09r4A         [24]10829 	mov	dptr,#___str_82
      0039A4 75 F0 80         [24]10830 	mov	b,#0x80
      0039A7 12r10r10         [24]10831 	lcall	_LCD_string_write
                                  10832 ;	.\ecen4350_lcd_v4.c:2518: setCursor(0, 130 );
      0039AA 75*00 82         [24]10833 	mov	_setCursor_PARM_2,#0x82
      0039AD 75*01 00         [24]10834 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039B0 90 00 00         [24]10835 	mov	dptr,#0x0000
      0039B3 12r04rF6         [24]10836 	lcall	_setCursor
                                  10837 ;	.\ecen4350_lcd_v4.c:2519: setColorGray();
      0039B6 12r16r02         [24]10838 	lcall	_setColorGray
                                  10839 ;	.\ecen4350_lcd_v4.c:2520: LCD_string_write(" 0x____");
      0039B9 90r05rF2         [24]10840 	mov	dptr,#___str_24
      0039BC 75 F0 80         [24]10841 	mov	b,#0x80
      0039BF 12r10r10         [24]10842 	lcall	_LCD_string_write
                                  10843 ;	.\ecen4350_lcd_v4.c:2521: setCursor(0, 160);
      0039C2 75*00 A0         [24]10844 	mov	_setCursor_PARM_2,#0xa0
      0039C5 75*01 00         [24]10845 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039C8 90 00 00         [24]10846 	mov	dptr,#0x0000
      0039CB 12r04rF6         [24]10847 	lcall	_setCursor
                                  10848 ;	.\ecen4350_lcd_v4.c:2522: setColorDefault();
      0039CE 12r15rD4         [24]10849 	lcall	_setColorDefault
                                  10850 ;	.\ecen4350_lcd_v4.c:2523: LCD_string_write(" Input Block Size:\n");
      0039D1 90r09r5B         [24]10851 	mov	dptr,#___str_83
      0039D4 75 F0 80         [24]10852 	mov	b,#0x80
      0039D7 12r10r10         [24]10853 	lcall	_LCD_string_write
                                  10854 ;	.\ecen4350_lcd_v4.c:2524: setColorGray();
      0039DA 12r16r02         [24]10855 	lcall	_setColorGray
                                  10856 ;	.\ecen4350_lcd_v4.c:2525: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      0039DD 90r09r6F         [24]10857 	mov	dptr,#___str_84
      0039E0 75 F0 80         [24]10858 	mov	b,#0x80
      0039E3 12r10r10         [24]10859 	lcall	_LCD_string_write
                                  10860 ;	.\ecen4350_lcd_v4.c:2526: LCD_string_write("  <FF> (SCAN)");
      0039E6 90r09r95         [24]10861 	mov	dptr,#___str_85
      0039E9 75 F0 80         [24]10862 	mov	b,#0x80
      0039EC 12r10r10         [24]10863 	lcall	_LCD_string_write
                                  10864 ;	.\ecen4350_lcd_v4.c:2527: setCursor(0, 250);
      0039EF 75*00 FA         [24]10865 	mov	_setCursor_PARM_2,#0xfa
      0039F2 75*01 00         [24]10866 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039F5 90 00 00         [24]10867 	mov	dptr,#0x0000
      0039F8 12r04rF6         [24]10868 	lcall	_setCursor
                                  10869 ;	.\ecen4350_lcd_v4.c:2528: setColorGray();
      0039FB 12r16r02         [24]10870 	lcall	_setColorGray
                                  10871 ;	.\ecen4350_lcd_v4.c:2529: LCD_string_write("   __");
      0039FE 90r09rA3         [24]10872 	mov	dptr,#___str_86
      003A01 75 F0 80         [24]10873 	mov	b,#0x80
      003A04 12r10r10         [24]10874 	lcall	_LCD_string_write
                                  10875 ;	.\ecen4350_lcd_v4.c:2536: setColorSelect();
      003A07 12r15rDF         [24]10876 	lcall	_setColorSelect
                                  10877 ;	.\ecen4350_lcd_v4.c:2537: setCursor(0, 60);
      003A0A 75*00 3C         [24]10878 	mov	_setCursor_PARM_2,#0x3c
      003A0D 75*01 00         [24]10879 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A10 90 00 00         [24]10880 	mov	dptr,#0x0000
      003A13 12r04rF6         [24]10881 	lcall	_setCursor
                                  10882 ;	.\ecen4350_lcd_v4.c:2538: LCD_string_write(" Search Value:");
      003A16 90r0Cr09         [24]10883 	mov	dptr,#___str_124
      003A19 75 F0 80         [24]10884 	mov	b,#0x80
      003A1C 12r10r10         [24]10885 	lcall	_LCD_string_write
                                  10886 ;	.\ecen4350_lcd_v4.c:2539: setCursor(0, 80);
      003A1F 75*00 50         [24]10887 	mov	_setCursor_PARM_2,#0x50
      003A22 75*01 00         [24]10888 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A25 90 00 00         [24]10889 	mov	dptr,#0x0000
      003A28 12r04rF6         [24]10890 	lcall	_setCursor
                                  10891 ;	.\ecen4350_lcd_v4.c:2540: setColorWhite();
      003A2B 12r16r24         [24]10892 	lcall	_setColorWhite
                                  10893 ;	.\ecen4350_lcd_v4.c:2541: setCursor(0, 80);
      003A2E 75*00 50         [24]10894 	mov	_setCursor_PARM_2,#0x50
      003A31 75*01 00         [24]10895 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A34 90 00 00         [24]10896 	mov	dptr,#0x0000
      003A37 12r04rF6         [24]10897 	lcall	_setCursor
                                  10898 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" ");
      003A3A 90r06r54         [24]10899 	mov	dptr,#___str_30
      003A3D 75 F0 80         [24]10900 	mov	b,#0x80
      003A40 12r10r10         [24]10901 	lcall	_LCD_string_write
                                  10902 ;	.\ecen4350_lcd_v4.c:2543: setColorHighlight1();
      003A43 12r15rEA         [24]10903 	lcall	_setColorHighlight1
                                  10904 ;	.\ecen4350_lcd_v4.c:2544: selection = keyDetect();
      003A46 12r11r2E         [24]10905 	lcall	_keyDetect
      003A49 AC 82            [24]10906 	mov	r4,dpl
      003A4B 78r00            [12]10907 	mov	r0,#_selection
      003A4D A6 04            [24]10908 	mov	@r0,ar4
                                  10909 ;	.\ecen4350_lcd_v4.c:2545: write(selection);
      003A4F 8C 82            [24]10910 	mov	dpl,r4
      003A51 12r0FrAA         [24]10911 	lcall	_write
                                  10912 ;	.\ecen4350_lcd_v4.c:2546: selection = ASCIItoHex(selection);
      003A54 78r00            [12]10913 	mov	r0,#_selection
      003A56 86 82            [24]10914 	mov	dpl,@r0
      003A58 12r13r9C         [24]10915 	lcall	_ASCIItoHex
      003A5B AC 82            [24]10916 	mov	r4,dpl
      003A5D D0 03            [24]10917 	pop	ar3
      003A5F 78r00            [12]10918 	mov	r0,#_selection
      003A61 A6 04            [24]10919 	mov	@r0,ar4
                                  10920 ;	.\ecen4350_lcd_v4.c:2547: value |= selection * 16;
      003A63 EC               [12]10921 	mov	a,r4
      003A64 C4               [12]10922 	swap	a
      003A65 54 F0            [12]10923 	anl	a,#0xf0
      003A67 FC               [12]10924 	mov	r4,a
                                  10925 ;	.\ecen4350_lcd_v4.c:2548: selection = keyDetect();
      003A68 C0 04            [24]10926 	push	ar4
      003A6A C0 03            [24]10927 	push	ar3
      003A6C 12r11r2E         [24]10928 	lcall	_keyDetect
      003A6F AE 82            [24]10929 	mov	r6,dpl
      003A71 78r00            [12]10930 	mov	r0,#_selection
      003A73 A6 06            [24]10931 	mov	@r0,ar6
                                  10932 ;	.\ecen4350_lcd_v4.c:2549: write(selection);
      003A75 8E 82            [24]10933 	mov	dpl,r6
      003A77 12r0FrAA         [24]10934 	lcall	_write
                                  10935 ;	.\ecen4350_lcd_v4.c:2550: selection = ASCIItoHex(selection);
      003A7A 78r00            [12]10936 	mov	r0,#_selection
      003A7C 86 82            [24]10937 	mov	dpl,@r0
      003A7E 12r13r9C         [24]10938 	lcall	_ASCIItoHex
      003A81 AE 82            [24]10939 	mov	r6,dpl
      003A83 D0 03            [24]10940 	pop	ar3
      003A85 D0 04            [24]10941 	pop	ar4
      003A87 78r00            [12]10942 	mov	r0,#_selection
      003A89 A6 06            [24]10943 	mov	@r0,ar6
                                  10944 ;	.\ecen4350_lcd_v4.c:2551: value |= selection;
      003A8B 78r20            [12]10945 	mov	r0,#_count_value_65536_708
      003A8D EE               [12]10946 	mov	a,r6
      003A8E 4C               [12]10947 	orl	a,r4
      003A8F F6               [12]10948 	mov	@r0,a
                                  10949 ;	.\ecen4350_lcd_v4.c:2554: setColorDefault();
      003A90 C0 03            [24]10950 	push	ar3
      003A92 12r15rD4         [24]10951 	lcall	_setColorDefault
                                  10952 ;	.\ecen4350_lcd_v4.c:2555: setCursor(0, 60);
      003A95 75*00 3C         [24]10953 	mov	_setCursor_PARM_2,#0x3c
      003A98 75*01 00         [24]10954 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A9B 90 00 00         [24]10955 	mov	dptr,#0x0000
      003A9E 12r04rF6         [24]10956 	lcall	_setCursor
                                  10957 ;	.\ecen4350_lcd_v4.c:2556: LCD_string_write(" Search Value:");
      003AA1 90r0Cr09         [24]10958 	mov	dptr,#___str_124
      003AA4 75 F0 80         [24]10959 	mov	b,#0x80
      003AA7 12r10r10         [24]10960 	lcall	_LCD_string_write
                                  10961 ;	.\ecen4350_lcd_v4.c:2557: setCursor(0, 80);
      003AAA 75*00 50         [24]10962 	mov	_setCursor_PARM_2,#0x50
      003AAD 75*01 00         [24]10963 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AB0 90 00 00         [24]10964 	mov	dptr,#0x0000
      003AB3 12r04rF6         [24]10965 	lcall	_setCursor
                                  10966 ;	.\ecen4350_lcd_v4.c:2558: setColorWhite();
      003AB6 12r16r24         [24]10967 	lcall	_setColorWhite
                                  10968 ;	.\ecen4350_lcd_v4.c:2559: LCD_string_write(" ");
      003AB9 90r06r54         [24]10969 	mov	dptr,#___str_30
      003ABC 75 F0 80         [24]10970 	mov	b,#0x80
      003ABF 12r10r10         [24]10971 	lcall	_LCD_string_write
                                  10972 ;	.\ecen4350_lcd_v4.c:2560: setColorHighlight2();
      003AC2 12r15rF6         [24]10973 	lcall	_setColorHighlight2
                                  10974 ;	.\ecen4350_lcd_v4.c:2561: print8Hex(value);
      003AC5 78r20            [12]10975 	mov	r0,#_count_value_65536_708
      003AC7 86 82            [24]10976 	mov	dpl,@r0
      003AC9 12r14rE1         [24]10977 	lcall	_print8Hex
                                  10978 ;	.\ecen4350_lcd_v4.c:2564: setColorSelect();
      003ACC 12r15rDF         [24]10979 	lcall	_setColorSelect
                                  10980 ;	.\ecen4350_lcd_v4.c:2565: setCursor(0, 110);
      003ACF 75*00 6E         [24]10981 	mov	_setCursor_PARM_2,#0x6e
      003AD2 75*01 00         [24]10982 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AD5 90 00 00         [24]10983 	mov	dptr,#0x0000
      003AD8 12r04rF6         [24]10984 	lcall	_setCursor
                                  10985 ;	.\ecen4350_lcd_v4.c:2566: LCD_string_write(" Search Address:");
      003ADB 90r09r4A         [24]10986 	mov	dptr,#___str_82
      003ADE 75 F0 80         [24]10987 	mov	b,#0x80
      003AE1 12r10r10         [24]10988 	lcall	_LCD_string_write
                                  10989 ;	.\ecen4350_lcd_v4.c:2567: setCursor(0, 130);
      003AE4 75*00 82         [24]10990 	mov	_setCursor_PARM_2,#0x82
      003AE7 75*01 00         [24]10991 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AEA 90 00 00         [24]10992 	mov	dptr,#0x0000
      003AED 12r04rF6         [24]10993 	lcall	_setCursor
                                  10994 ;	.\ecen4350_lcd_v4.c:2568: LCD_string_write(" ");
      003AF0 90r06r54         [24]10995 	mov	dptr,#___str_30
      003AF3 75 F0 80         [24]10996 	mov	b,#0x80
      003AF6 12r10r10         [24]10997 	lcall	_LCD_string_write
                                  10998 ;	.\ecen4350_lcd_v4.c:2569: setColorHighlight1();
      003AF9 12r15rEA         [24]10999 	lcall	_setColorHighlight1
                                  11000 ;	.\ecen4350_lcd_v4.c:2570: LCD_string_write("0x");
      003AFC 90r05r29         [24]11001 	mov	dptr,#___str_2
      003AFF 75 F0 80         [24]11002 	mov	b,#0x80
      003B02 12r10r10         [24]11003 	lcall	_LCD_string_write
                                  11004 ;	.\ecen4350_lcd_v4.c:2571: address = inputAddress();
      003B05 12r16r45         [24]11005 	lcall	_inputAddress
      003B08 78r1D            [12]11006 	mov	r0,#_count_address_65536_708
      003B0A A6 82            [24]11007 	mov	@r0,dpl
      003B0C 08               [12]11008 	inc	r0
      003B0D A6 83            [24]11009 	mov	@r0,dph
                                  11010 ;	.\ecen4350_lcd_v4.c:2574: setColorDefault();
      003B0F 12r15rD4         [24]11011 	lcall	_setColorDefault
                                  11012 ;	.\ecen4350_lcd_v4.c:2575: setCursor(0, 110);
      003B12 75*00 6E         [24]11013 	mov	_setCursor_PARM_2,#0x6e
      003B15 75*01 00         [24]11014 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B18 90 00 00         [24]11015 	mov	dptr,#0x0000
      003B1B 12r04rF6         [24]11016 	lcall	_setCursor
                                  11017 ;	.\ecen4350_lcd_v4.c:2576: LCD_string_write(" Search Address:");
      003B1E 90r09r4A         [24]11018 	mov	dptr,#___str_82
      003B21 75 F0 80         [24]11019 	mov	b,#0x80
      003B24 12r10r10         [24]11020 	lcall	_LCD_string_write
                                  11021 ;	.\ecen4350_lcd_v4.c:2577: setCursor(0, 130);
      003B27 75*00 82         [24]11022 	mov	_setCursor_PARM_2,#0x82
      003B2A 75*01 00         [24]11023 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B2D 90 00 00         [24]11024 	mov	dptr,#0x0000
      003B30 12r04rF6         [24]11025 	lcall	_setCursor
                                  11026 ;	.\ecen4350_lcd_v4.c:2578: LCD_string_write(" ");
      003B33 90r06r54         [24]11027 	mov	dptr,#___str_30
      003B36 75 F0 80         [24]11028 	mov	b,#0x80
      003B39 12r10r10         [24]11029 	lcall	_LCD_string_write
                                  11030 ;	.\ecen4350_lcd_v4.c:2579: setColorHighlight2();
      003B3C 12r15rF6         [24]11031 	lcall	_setColorHighlight2
                                  11032 ;	.\ecen4350_lcd_v4.c:2580: LCD_string_write("0x");
      003B3F 90r05r29         [24]11033 	mov	dptr,#___str_2
      003B42 75 F0 80         [24]11034 	mov	b,#0x80
      003B45 12r10r10         [24]11035 	lcall	_LCD_string_write
                                  11036 ;	.\ecen4350_lcd_v4.c:2581: print16Hex(address);
      003B48 78r1D            [12]11037 	mov	r0,#_count_address_65536_708
      003B4A 86 82            [24]11038 	mov	dpl,@r0
      003B4C 08               [12]11039 	inc	r0
      003B4D 86 83            [24]11040 	mov	dph,@r0
      003B4F 12r14rF8         [24]11041 	lcall	_print16Hex
                                  11042 ;	.\ecen4350_lcd_v4.c:2584: setColorSelect();
      003B52 12r15rDF         [24]11043 	lcall	_setColorSelect
                                  11044 ;	.\ecen4350_lcd_v4.c:2585: setCursor(0, 160);
      003B55 75*00 A0         [24]11045 	mov	_setCursor_PARM_2,#0xa0
      003B58 75*01 00         [24]11046 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B5B 90 00 00         [24]11047 	mov	dptr,#0x0000
      003B5E 12r04rF6         [24]11048 	lcall	_setCursor
                                  11049 ;	.\ecen4350_lcd_v4.c:2586: LCD_string_write(" Input Block Size:\n");
      003B61 90r09r5B         [24]11050 	mov	dptr,#___str_83
      003B64 75 F0 80         [24]11051 	mov	b,#0x80
      003B67 12r10r10         [24]11052 	lcall	_LCD_string_write
                                  11053 ;	.\ecen4350_lcd_v4.c:2587: setColorWhite();
      003B6A 12r16r24         [24]11054 	lcall	_setColorWhite
                                  11055 ;	.\ecen4350_lcd_v4.c:2588: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003B6D 90r09r6F         [24]11056 	mov	dptr,#___str_84
      003B70 75 F0 80         [24]11057 	mov	b,#0x80
      003B73 12r10r10         [24]11058 	lcall	_LCD_string_write
                                  11059 ;	.\ecen4350_lcd_v4.c:2589: LCD_string_write("  <FF> (SCAN)");
      003B76 90r09r95         [24]11060 	mov	dptr,#___str_85
      003B79 75 F0 80         [24]11061 	mov	b,#0x80
      003B7C 12r10r10         [24]11062 	lcall	_LCD_string_write
      003B7F D0 03            [24]11063 	pop	ar3
      003B81 D0 05            [24]11064 	pop	ar5
                                  11065 ;	.\ecen4350_lcd_v4.c:2590: while (invalidInput) {
      003B83                      11066 00113$:
      003B83 EB               [12]11067 	mov	a,r3
      003B84 70 03            [24]11068 	jnz	00530$
      003B86 02r3Cr42         [24]11069 	ljmp	00115$
      003B89                      11070 00530$:
                                  11071 ;	.\ecen4350_lcd_v4.c:2591: setCursor(0, 250);
      003B89 75*00 FA         [24]11072 	mov	_setCursor_PARM_2,#0xfa
      003B8C 75*01 00         [24]11073 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B8F 90 00 00         [24]11074 	mov	dptr,#0x0000
      003B92 C0 05            [24]11075 	push	ar5
      003B94 C0 03            [24]11076 	push	ar3
      003B96 12r04rF6         [24]11077 	lcall	_setCursor
                                  11078 ;	.\ecen4350_lcd_v4.c:2592: setColorGray();
      003B99 12r16r02         [24]11079 	lcall	_setColorGray
                                  11080 ;	.\ecen4350_lcd_v4.c:2593: LCD_string_write("   __");
      003B9C 90r09rA3         [24]11081 	mov	dptr,#___str_86
      003B9F 75 F0 80         [24]11082 	mov	b,#0x80
      003BA2 12r10r10         [24]11083 	lcall	_LCD_string_write
                                  11084 ;	.\ecen4350_lcd_v4.c:2594: setCursor(0, 250);
      003BA5 75*00 FA         [24]11085 	mov	_setCursor_PARM_2,#0xfa
      003BA8 75*01 00         [24]11086 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BAB 90 00 00         [24]11087 	mov	dptr,#0x0000
      003BAE 12r04rF6         [24]11088 	lcall	_setCursor
                                  11089 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write("   ");
      003BB1 90r09rA9         [24]11090 	mov	dptr,#___str_87
      003BB4 75 F0 80         [24]11091 	mov	b,#0x80
      003BB7 12r10r10         [24]11092 	lcall	_LCD_string_write
                                  11093 ;	.\ecen4350_lcd_v4.c:2596: setColorHighlight1();
      003BBA 12r15rEA         [24]11094 	lcall	_setColorHighlight1
                                  11095 ;	.\ecen4350_lcd_v4.c:2597: blockSize = inputBlockSize();
      003BBD 12r16rF5         [24]11096 	lcall	_inputBlockSize
      003BC0 78r1F            [12]11097 	mov	r0,#_count_blockSize_65536_708
      003BC2 A6 82            [24]11098 	mov	@r0,dpl
      003BC4 D0 03            [24]11099 	pop	ar3
      003BC6 D0 05            [24]11100 	pop	ar5
                                  11101 ;	.\ecen4350_lcd_v4.c:2598: if (blockSize == 0x01) {
      003BC8 78r1F            [12]11102 	mov	r0,#_count_blockSize_65536_708
      003BCA B6 01 18         [24]11103 	cjne	@r0,#0x01,00111$
                                  11104 ;	.\ecen4350_lcd_v4.c:2599: invalidInput = 0;
      003BCD 7B 00            [12]11105 	mov	r3,#0x00
                                  11106 ;	.\ecen4350_lcd_v4.c:2600: setColorDefault();
      003BCF C0 05            [24]11107 	push	ar5
      003BD1 C0 03            [24]11108 	push	ar3
      003BD3 12r15rD4         [24]11109 	lcall	_setColorDefault
                                  11110 ;	.\ecen4350_lcd_v4.c:2601: LCD_string_write("\n                ");
      003BD6 90r09rAD         [24]11111 	mov	dptr,#___str_88
      003BD9 75 F0 80         [24]11112 	mov	b,#0x80
      003BDC 12r10r10         [24]11113 	lcall	_LCD_string_write
      003BDF D0 03            [24]11114 	pop	ar3
      003BE1 D0 05            [24]11115 	pop	ar5
      003BE3 80 9E            [24]11116 	sjmp	00113$
      003BE5                      11117 00111$:
                                  11118 ;	.\ecen4350_lcd_v4.c:2602: } else if (blockSize == 0x02) {
      003BE5 78r1F            [12]11119 	mov	r0,#_count_blockSize_65536_708
      003BE7 B6 02 19         [24]11120 	cjne	@r0,#0x02,00108$
                                  11121 ;	.\ecen4350_lcd_v4.c:2603: invalidInput = 0;
      003BEA 7B 00            [12]11122 	mov	r3,#0x00
                                  11123 ;	.\ecen4350_lcd_v4.c:2604: setColorDefault();
      003BEC C0 05            [24]11124 	push	ar5
      003BEE C0 03            [24]11125 	push	ar3
      003BF0 12r15rD4         [24]11126 	lcall	_setColorDefault
                                  11127 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write("\n                ");
      003BF3 90r09rAD         [24]11128 	mov	dptr,#___str_88
      003BF6 75 F0 80         [24]11129 	mov	b,#0x80
      003BF9 12r10r10         [24]11130 	lcall	_LCD_string_write
      003BFC D0 03            [24]11131 	pop	ar3
      003BFE D0 05            [24]11132 	pop	ar5
      003C00 02r3Br83         [24]11133 	ljmp	00113$
      003C03                      11134 00108$:
                                  11135 ;	.\ecen4350_lcd_v4.c:2606: } else if (blockSize == 0x04) {
      003C03 78r1F            [12]11136 	mov	r0,#_count_blockSize_65536_708
      003C05 B6 04 19         [24]11137 	cjne	@r0,#0x04,00105$
                                  11138 ;	.\ecen4350_lcd_v4.c:2607: invalidInput = 0;
      003C08 7B 00            [12]11139 	mov	r3,#0x00
                                  11140 ;	.\ecen4350_lcd_v4.c:2608: setColorDefault();
      003C0A C0 05            [24]11141 	push	ar5
      003C0C C0 03            [24]11142 	push	ar3
      003C0E 12r15rD4         [24]11143 	lcall	_setColorDefault
                                  11144 ;	.\ecen4350_lcd_v4.c:2609: LCD_string_write("\n                ");
      003C11 90r09rAD         [24]11145 	mov	dptr,#___str_88
      003C14 75 F0 80         [24]11146 	mov	b,#0x80
      003C17 12r10r10         [24]11147 	lcall	_LCD_string_write
      003C1A D0 03            [24]11148 	pop	ar3
      003C1C D0 05            [24]11149 	pop	ar5
      003C1E 02r3Br83         [24]11150 	ljmp	00113$
      003C21                      11151 00105$:
                                  11152 ;	.\ecen4350_lcd_v4.c:2610: } else if (blockSize == 0xFF) {
      003C21 78r1F            [12]11153 	mov	r0,#_count_blockSize_65536_708
      003C23 B6 FF 05         [24]11154 	cjne	@r0,#0xff,00102$
                                  11155 ;	.\ecen4350_lcd_v4.c:2611: invalidInput = 0;
      003C26 7B 00            [12]11156 	mov	r3,#0x00
      003C28 02r3Br83         [24]11157 	ljmp	00113$
      003C2B                      11158 00102$:
                                  11159 ;	.\ecen4350_lcd_v4.c:2614: setColorRed();
      003C2B C0 05            [24]11160 	push	ar5
      003C2D C0 03            [24]11161 	push	ar3
      003C2F 12r16r19         [24]11162 	lcall	_setColorRed
                                  11163 ;	.\ecen4350_lcd_v4.c:2615: LCD_string_write("\n Try again");
      003C32 90r09rBF         [24]11164 	mov	dptr,#___str_89
      003C35 75 F0 80         [24]11165 	mov	b,#0x80
      003C38 12r10r10         [24]11166 	lcall	_LCD_string_write
      003C3B D0 03            [24]11167 	pop	ar3
      003C3D D0 05            [24]11168 	pop	ar5
      003C3F 02r3Br83         [24]11169 	ljmp	00113$
      003C42                      11170 00115$:
                                  11171 ;	.\ecen4350_lcd_v4.c:2620: setCursor(0, 160);
      003C42 75*00 A0         [24]11172 	mov	_setCursor_PARM_2,#0xa0
      003C45 75*01 00         [24]11173 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C48 90 00 00         [24]11174 	mov	dptr,#0x0000
      003C4B C0 05            [24]11175 	push	ar5
      003C4D 12r04rF6         [24]11176 	lcall	_setCursor
                                  11177 ;	.\ecen4350_lcd_v4.c:2621: setColorDefault();
      003C50 12r15rD4         [24]11178 	lcall	_setColorDefault
                                  11179 ;	.\ecen4350_lcd_v4.c:2622: LCD_string_write(" Input Block Size:\n");
      003C53 90r09r5B         [24]11180 	mov	dptr,#___str_83
      003C56 75 F0 80         [24]11181 	mov	b,#0x80
      003C59 12r10r10         [24]11182 	lcall	_LCD_string_write
      003C5C D0 05            [24]11183 	pop	ar5
                                  11184 ;	.\ecen4350_lcd_v4.c:2623: if (blockSize == 0x01){
      003C5E 78r1F            [12]11185 	mov	r0,#_count_blockSize_65536_708
      003C60 B6 01 74         [24]11186 	cjne	@r0,#0x01,00125$
                                  11187 ;	.\ecen4350_lcd_v4.c:2624: LCD_string_write("  ");
      003C63 90r06r6D         [24]11188 	mov	dptr,#___str_33
      003C66 75 F0 80         [24]11189 	mov	b,#0x80
      003C69 C0 05            [24]11190 	push	ar5
      003C6B 12r10r10         [24]11191 	lcall	_LCD_string_write
                                  11192 ;	.\ecen4350_lcd_v4.c:2625: setColorHighlight2();
      003C6E 12r15rF6         [24]11193 	lcall	_setColorHighlight2
                                  11194 ;	.\ecen4350_lcd_v4.c:2626: LCD_string_write("<01> BYTE\n");
      003C71 90r09rCB         [24]11195 	mov	dptr,#___str_90
      003C74 75 F0 80         [24]11196 	mov	b,#0x80
      003C77 12r10r10         [24]11197 	lcall	_LCD_string_write
                                  11198 ;	.\ecen4350_lcd_v4.c:2627: setColorGray();
      003C7A 12r16r02         [24]11199 	lcall	_setColorGray
                                  11200 ;	.\ecen4350_lcd_v4.c:2628: LCD_string_write("  <02> WORD\n");
      003C7D 90r09rD6         [24]11201 	mov	dptr,#___str_91
      003C80 75 F0 80         [24]11202 	mov	b,#0x80
      003C83 12r10r10         [24]11203 	lcall	_LCD_string_write
                                  11204 ;	.\ecen4350_lcd_v4.c:2629: LCD_string_write("  <04> DWORD\n");
      003C86 90r09rE3         [24]11205 	mov	dptr,#___str_92
      003C89 75 F0 80         [24]11206 	mov	b,#0x80
      003C8C 12r10r10         [24]11207 	lcall	_LCD_string_write
                                  11208 ;	.\ecen4350_lcd_v4.c:2630: LCD_string_write("  <FF> (SCAN)");
      003C8F 90r09r95         [24]11209 	mov	dptr,#___str_85
      003C92 75 F0 80         [24]11210 	mov	b,#0x80
      003C95 12r10r10         [24]11211 	lcall	_LCD_string_write
                                  11212 ;	.\ecen4350_lcd_v4.c:2631: setColorDefault();
      003C98 12r15rD4         [24]11213 	lcall	_setColorDefault
                                  11214 ;	.\ecen4350_lcd_v4.c:2632: setCursor(0, 250);
      003C9B 75*00 FA         [24]11215 	mov	_setCursor_PARM_2,#0xfa
      003C9E 75*01 00         [24]11216 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CA1 90 00 00         [24]11217 	mov	dptr,#0x0000
      003CA4 12r04rF6         [24]11218 	lcall	_setCursor
                                  11219 ;	.\ecen4350_lcd_v4.c:2633: LCD_string_write("   ");
      003CA7 90r09rA9         [24]11220 	mov	dptr,#___str_87
      003CAA 75 F0 80         [24]11221 	mov	b,#0x80
      003CAD 12r10r10         [24]11222 	lcall	_LCD_string_write
                                  11223 ;	.\ecen4350_lcd_v4.c:2634: setColorHighlight2();
      003CB0 12r15rF6         [24]11224 	lcall	_setColorHighlight2
                                  11225 ;	.\ecen4350_lcd_v4.c:2635: print8Hex(blockSize);
      003CB3 78r1F            [12]11226 	mov	r0,#_count_blockSize_65536_708
      003CB5 86 82            [24]11227 	mov	dpl,@r0
      003CB7 12r14rE1         [24]11228 	lcall	_print8Hex
                                  11229 ;	.\ecen4350_lcd_v4.c:2636: setColorDefault();
      003CBA 12r15rD4         [24]11230 	lcall	_setColorDefault
                                  11231 ;	.\ecen4350_lcd_v4.c:2637: LCD_string_write("\n Search Size Limit:");
      003CBD 90r09rF1         [24]11232 	mov	dptr,#___str_93
      003CC0 75 F0 80         [24]11233 	mov	b,#0x80
      003CC3 12r10r10         [24]11234 	lcall	_LCD_string_write
                                  11235 ;	.\ecen4350_lcd_v4.c:2638: setColorWhite();
      003CC6 12r16r24         [24]11236 	lcall	_setColorWhite
                                  11237 ;	.\ecen4350_lcd_v4.c:2639: LCD_string_write("\n BYTE [8 bits]");
      003CC9 90r0Ar06         [24]11238 	mov	dptr,#___str_94
      003CCC 75 F0 80         [24]11239 	mov	b,#0x80
      003CCF 12r10r10         [24]11240 	lcall	_LCD_string_write
      003CD2 D0 05            [24]11241 	pop	ar5
      003CD4 02r3Er1B         [24]11242 	ljmp	00126$
      003CD7                      11243 00125$:
                                  11244 ;	.\ecen4350_lcd_v4.c:2640: } else if (blockSize == 0x02) {
      003CD7 78r1F            [12]11245 	mov	r0,#_count_blockSize_65536_708
      003CD9 B6 02 6E         [24]11246 	cjne	@r0,#0x02,00122$
                                  11247 ;	.\ecen4350_lcd_v4.c:2641: setColorGray();
      003CDC C0 05            [24]11248 	push	ar5
      003CDE 12r16r02         [24]11249 	lcall	_setColorGray
                                  11250 ;	.\ecen4350_lcd_v4.c:2642: LCD_string_write("  <01> BYTE\n  ");
      003CE1 90r0Ar16         [24]11251 	mov	dptr,#___str_95
      003CE4 75 F0 80         [24]11252 	mov	b,#0x80
      003CE7 12r10r10         [24]11253 	lcall	_LCD_string_write
                                  11254 ;	.\ecen4350_lcd_v4.c:2643: setColorHighlight2();
      003CEA 12r15rF6         [24]11255 	lcall	_setColorHighlight2
                                  11256 ;	.\ecen4350_lcd_v4.c:2644: LCD_string_write("<02> WORD\n");
      003CED 90r0Ar25         [24]11257 	mov	dptr,#___str_96
      003CF0 75 F0 80         [24]11258 	mov	b,#0x80
      003CF3 12r10r10         [24]11259 	lcall	_LCD_string_write
                                  11260 ;	.\ecen4350_lcd_v4.c:2645: setColorGray();
      003CF6 12r16r02         [24]11261 	lcall	_setColorGray
                                  11262 ;	.\ecen4350_lcd_v4.c:2646: LCD_string_write("  <04> DWORD\n");
      003CF9 90r09rE3         [24]11263 	mov	dptr,#___str_92
      003CFC 75 F0 80         [24]11264 	mov	b,#0x80
      003CFF 12r10r10         [24]11265 	lcall	_LCD_string_write
                                  11266 ;	.\ecen4350_lcd_v4.c:2647: LCD_string_write("  <FF> (SCAN)");
      003D02 90r09r95         [24]11267 	mov	dptr,#___str_85
      003D05 75 F0 80         [24]11268 	mov	b,#0x80
      003D08 12r10r10         [24]11269 	lcall	_LCD_string_write
                                  11270 ;	.\ecen4350_lcd_v4.c:2648: setColorDefault();
      003D0B 12r15rD4         [24]11271 	lcall	_setColorDefault
                                  11272 ;	.\ecen4350_lcd_v4.c:2649: setCursor(0, 250);
      003D0E 75*00 FA         [24]11273 	mov	_setCursor_PARM_2,#0xfa
      003D11 75*01 00         [24]11274 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D14 90 00 00         [24]11275 	mov	dptr,#0x0000
      003D17 12r04rF6         [24]11276 	lcall	_setCursor
                                  11277 ;	.\ecen4350_lcd_v4.c:2650: LCD_string_write("   ");
      003D1A 90r09rA9         [24]11278 	mov	dptr,#___str_87
      003D1D 75 F0 80         [24]11279 	mov	b,#0x80
      003D20 12r10r10         [24]11280 	lcall	_LCD_string_write
                                  11281 ;	.\ecen4350_lcd_v4.c:2651: setColorHighlight2();
      003D23 12r15rF6         [24]11282 	lcall	_setColorHighlight2
                                  11283 ;	.\ecen4350_lcd_v4.c:2652: print8Hex(blockSize);
      003D26 78r1F            [12]11284 	mov	r0,#_count_blockSize_65536_708
      003D28 86 82            [24]11285 	mov	dpl,@r0
      003D2A 12r14rE1         [24]11286 	lcall	_print8Hex
                                  11287 ;	.\ecen4350_lcd_v4.c:2653: setColorDefault();
      003D2D 12r15rD4         [24]11288 	lcall	_setColorDefault
                                  11289 ;	.\ecen4350_lcd_v4.c:2654: LCD_string_write("\n Search Size Limit:");
      003D30 90r09rF1         [24]11290 	mov	dptr,#___str_93
      003D33 75 F0 80         [24]11291 	mov	b,#0x80
      003D36 12r10r10         [24]11292 	lcall	_LCD_string_write
                                  11293 ;	.\ecen4350_lcd_v4.c:2655: setColorWhite();
      003D39 12r16r24         [24]11294 	lcall	_setColorWhite
                                  11295 ;	.\ecen4350_lcd_v4.c:2656: LCD_string_write("\n WORD [16 bits]");
      003D3C 90r0Ar30         [24]11296 	mov	dptr,#___str_97
      003D3F 75 F0 80         [24]11297 	mov	b,#0x80
      003D42 12r10r10         [24]11298 	lcall	_LCD_string_write
      003D45 D0 05            [24]11299 	pop	ar5
      003D47 02r3Er1B         [24]11300 	ljmp	00126$
      003D4A                      11301 00122$:
                                  11302 ;	.\ecen4350_lcd_v4.c:2657: } else if (blockSize == 0x04) {
      003D4A 78r1F            [12]11303 	mov	r0,#_count_blockSize_65536_708
      003D4C B6 04 64         [24]11304 	cjne	@r0,#0x04,00119$
                                  11305 ;	.\ecen4350_lcd_v4.c:2658: setColorGray();
      003D4F C0 05            [24]11306 	push	ar5
      003D51 12r16r02         [24]11307 	lcall	_setColorGray
                                  11308 ;	.\ecen4350_lcd_v4.c:2659: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003D54 90r0Ar41         [24]11309 	mov	dptr,#___str_98
      003D57 75 F0 80         [24]11310 	mov	b,#0x80
      003D5A 12r10r10         [24]11311 	lcall	_LCD_string_write
                                  11312 ;	.\ecen4350_lcd_v4.c:2660: setColorHighlight2();
      003D5D 12r15rF6         [24]11313 	lcall	_setColorHighlight2
                                  11314 ;	.\ecen4350_lcd_v4.c:2661: LCD_string_write("<04> DWORD\n");
      003D60 90r0Ar5C         [24]11315 	mov	dptr,#___str_99
      003D63 75 F0 80         [24]11316 	mov	b,#0x80
      003D66 12r10r10         [24]11317 	lcall	_LCD_string_write
                                  11318 ;	.\ecen4350_lcd_v4.c:2662: setColorGray();
      003D69 12r16r02         [24]11319 	lcall	_setColorGray
                                  11320 ;	.\ecen4350_lcd_v4.c:2663: LCD_string_write("  <FF> (SCAN)");
      003D6C 90r09r95         [24]11321 	mov	dptr,#___str_85
      003D6F 75 F0 80         [24]11322 	mov	b,#0x80
      003D72 12r10r10         [24]11323 	lcall	_LCD_string_write
                                  11324 ;	.\ecen4350_lcd_v4.c:2664: setColorDefault();
      003D75 12r15rD4         [24]11325 	lcall	_setColorDefault
                                  11326 ;	.\ecen4350_lcd_v4.c:2665: setCursor(0, 250);
      003D78 75*00 FA         [24]11327 	mov	_setCursor_PARM_2,#0xfa
      003D7B 75*01 00         [24]11328 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D7E 90 00 00         [24]11329 	mov	dptr,#0x0000
      003D81 12r04rF6         [24]11330 	lcall	_setCursor
                                  11331 ;	.\ecen4350_lcd_v4.c:2666: LCD_string_write("   ");
      003D84 90r09rA9         [24]11332 	mov	dptr,#___str_87
      003D87 75 F0 80         [24]11333 	mov	b,#0x80
      003D8A 12r10r10         [24]11334 	lcall	_LCD_string_write
                                  11335 ;	.\ecen4350_lcd_v4.c:2667: setColorHighlight2();
      003D8D 12r15rF6         [24]11336 	lcall	_setColorHighlight2
                                  11337 ;	.\ecen4350_lcd_v4.c:2668: print8Hex(blockSize);
      003D90 78r1F            [12]11338 	mov	r0,#_count_blockSize_65536_708
      003D92 86 82            [24]11339 	mov	dpl,@r0
      003D94 12r14rE1         [24]11340 	lcall	_print8Hex
                                  11341 ;	.\ecen4350_lcd_v4.c:2669: setColorDefault();
      003D97 12r15rD4         [24]11342 	lcall	_setColorDefault
                                  11343 ;	.\ecen4350_lcd_v4.c:2670: LCD_string_write("\n Search Size Limit:");
      003D9A 90r09rF1         [24]11344 	mov	dptr,#___str_93
      003D9D 75 F0 80         [24]11345 	mov	b,#0x80
      003DA0 12r10r10         [24]11346 	lcall	_LCD_string_write
                                  11347 ;	.\ecen4350_lcd_v4.c:2671: setColorWhite();
      003DA3 12r16r24         [24]11348 	lcall	_setColorWhite
                                  11349 ;	.\ecen4350_lcd_v4.c:2672: LCD_string_write("\n DWORD [32 bits]");
      003DA6 90r0Ar68         [24]11350 	mov	dptr,#___str_100
      003DA9 75 F0 80         [24]11351 	mov	b,#0x80
      003DAC 12r10r10         [24]11352 	lcall	_LCD_string_write
      003DAF D0 05            [24]11353 	pop	ar5
      003DB1 80 68            [24]11354 	sjmp	00126$
      003DB3                      11355 00119$:
                                  11356 ;	.\ecen4350_lcd_v4.c:2673: } else if (blockSize == 0xFF) {
      003DB3 78r1F            [12]11357 	mov	r0,#_count_blockSize_65536_708
      003DB5 B6 FF 63         [24]11358 	cjne	@r0,#0xff,00126$
                                  11359 ;	.\ecen4350_lcd_v4.c:2674: scan = 1;
      003DB8 78r21            [12]11360 	mov	r0,#_count_scan_65536_708
      003DBA 76 01            [12]11361 	mov	@r0,#0x01
                                  11362 ;	.\ecen4350_lcd_v4.c:2675: setColorGray();
      003DBC C0 05            [24]11363 	push	ar5
      003DBE 12r16r02         [24]11364 	lcall	_setColorGray
                                  11365 ;	.\ecen4350_lcd_v4.c:2676: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003DC1 90r0Ar41         [24]11366 	mov	dptr,#___str_98
      003DC4 75 F0 80         [24]11367 	mov	b,#0x80
      003DC7 12r10r10         [24]11368 	lcall	_LCD_string_write
                                  11369 ;	.\ecen4350_lcd_v4.c:2677: LCD_string_write("<04> DWORD\n  ");
      003DCA 90r0Ar7A         [24]11370 	mov	dptr,#___str_101
      003DCD 75 F0 80         [24]11371 	mov	b,#0x80
      003DD0 12r10r10         [24]11372 	lcall	_LCD_string_write
                                  11373 ;	.\ecen4350_lcd_v4.c:2678: setColorHighlight2();
      003DD3 12r15rF6         [24]11374 	lcall	_setColorHighlight2
                                  11375 ;	.\ecen4350_lcd_v4.c:2679: LCD_string_write("<FF> (SCAN)");
      003DD6 90r0Ar88         [24]11376 	mov	dptr,#___str_102
      003DD9 75 F0 80         [24]11377 	mov	b,#0x80
      003DDC 12r10r10         [24]11378 	lcall	_LCD_string_write
                                  11379 ;	.\ecen4350_lcd_v4.c:2680: setColorDefault();
      003DDF 12r15rD4         [24]11380 	lcall	_setColorDefault
                                  11381 ;	.\ecen4350_lcd_v4.c:2681: setCursor(0, 250);
      003DE2 75*00 FA         [24]11382 	mov	_setCursor_PARM_2,#0xfa
      003DE5 75*01 00         [24]11383 	mov	(_setCursor_PARM_2 + 1),#0x00
      003DE8 90 00 00         [24]11384 	mov	dptr,#0x0000
      003DEB 12r04rF6         [24]11385 	lcall	_setCursor
                                  11386 ;	.\ecen4350_lcd_v4.c:2682: LCD_string_write("   ");
      003DEE 90r09rA9         [24]11387 	mov	dptr,#___str_87
      003DF1 75 F0 80         [24]11388 	mov	b,#0x80
      003DF4 12r10r10         [24]11389 	lcall	_LCD_string_write
                                  11390 ;	.\ecen4350_lcd_v4.c:2683: setColorHighlight2();
      003DF7 12r15rF6         [24]11391 	lcall	_setColorHighlight2
                                  11392 ;	.\ecen4350_lcd_v4.c:2684: print8Hex(blockSize);
      003DFA 78r1F            [12]11393 	mov	r0,#_count_blockSize_65536_708
      003DFC 86 82            [24]11394 	mov	dpl,@r0
      003DFE 12r14rE1         [24]11395 	lcall	_print8Hex
                                  11396 ;	.\ecen4350_lcd_v4.c:2685: setColorDefault();
      003E01 12r15rD4         [24]11397 	lcall	_setColorDefault
                                  11398 ;	.\ecen4350_lcd_v4.c:2686: LCD_string_write("\n Search Size Limit:");
      003E04 90r09rF1         [24]11399 	mov	dptr,#___str_93
      003E07 75 F0 80         [24]11400 	mov	b,#0x80
      003E0A 12r10r10         [24]11401 	lcall	_LCD_string_write
                                  11402 ;	.\ecen4350_lcd_v4.c:2687: setColorWhite();
      003E0D 12r16r24         [24]11403 	lcall	_setColorWhite
                                  11404 ;	.\ecen4350_lcd_v4.c:2688: LCD_string_write("\n [256 Blocks]");
      003E10 90r0Ar94         [24]11405 	mov	dptr,#___str_103
      003E13 75 F0 80         [24]11406 	mov	b,#0x80
      003E16 12r10r10         [24]11407 	lcall	_LCD_string_write
      003E19 D0 05            [24]11408 	pop	ar5
      003E1B                      11409 00126$:
                                  11410 ;	.\ecen4350_lcd_v4.c:2692: delay(40);
      003E1B 90 00 28         [24]11411 	mov	dptr,#0x0028
      003E1E C0 05            [24]11412 	push	ar5
      003E20 12r00rE0         [24]11413 	lcall	_delay
                                  11414 ;	.\ecen4350_lcd_v4.c:2693: clearLCD();
      003E23 12r0Dr93         [24]11415 	lcall	_clearLCD
                                  11416 ;	.\ecen4350_lcd_v4.c:2694: fillTop(GRAY);
      003E26 90 D6 BA         [24]11417 	mov	dptr,#0xd6ba
      003E29 12r0BrC6         [24]11418 	lcall	_fillTop
                                  11419 ;	.\ecen4350_lcd_v4.c:2695: setTextSize(5);
      003E2C 75 82 05         [24]11420 	mov	dpl,#0x05
      003E2F 12r05r10         [24]11421 	lcall	_setTextSize
                                  11422 ;	.\ecen4350_lcd_v4.c:2696: setColorMenu();
      003E32 12r16r0D         [24]11423 	lcall	_setColorMenu
                                  11424 ;	.\ecen4350_lcd_v4.c:2697: setCursor(15,0);
      003E35 E4               [12]11425 	clr	a
      003E36 F5*00            [12]11426 	mov	_setCursor_PARM_2,a
      003E38 F5*01            [12]11427 	mov	(_setCursor_PARM_2 + 1),a
      003E3A 90 00 0F         [24]11428 	mov	dptr,#0x000f
      003E3D 12r04rF6         [24]11429 	lcall	_setCursor
                                  11430 ;	.\ecen4350_lcd_v4.c:2698: LCD_string_write("[COUNT]\n");
      003E40 90r0Cr00         [24]11431 	mov	dptr,#___str_123
      003E43 75 F0 80         [24]11432 	mov	b,#0x80
      003E46 12r10r10         [24]11433 	lcall	_LCD_string_write
                                  11434 ;	.\ecen4350_lcd_v4.c:2699: setColorDefault();
      003E49 12r15rD4         [24]11435 	lcall	_setColorDefault
                                  11436 ;	.\ecen4350_lcd_v4.c:2700: setTextSize(2);
      003E4C 75 82 02         [24]11437 	mov	dpl,#0x02
      003E4F 12r05r10         [24]11438 	lcall	_setTextSize
      003E52 D0 05            [24]11439 	pop	ar5
                                  11440 ;	.\ecen4350_lcd_v4.c:2706: while (exit) {
      003E54                      11441 00202$:
      003E54 78r23            [12]11442 	mov	r0,#_count_exit_65536_708
      003E56 E6               [12]11443 	mov	a,@r0
      003E57 70 03            [24]11444 	jnz	00547$
      003E59 02r43rF3         [24]11445 	ljmp	00204$
      003E5C                      11446 00547$:
                                  11447 ;	.\ecen4350_lcd_v4.c:2708: if (scan) {	
      003E5C 78r21            [12]11448 	mov	r0,#_count_scan_65536_708
      003E5E E6               [12]11449 	mov	a,@r0
      003E5F 70 03            [24]11450 	jnz	00548$
      003E61 02r3Fr19         [24]11451 	ljmp	00193$
      003E64                      11452 00548$:
                                  11453 ;	.\ecen4350_lcd_v4.c:2709: setCursor(0, 60);
      003E64 75*00 3C         [24]11454 	mov	_setCursor_PARM_2,#0x3c
      003E67 75*01 00         [24]11455 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E6A 90 00 00         [24]11456 	mov	dptr,#0x0000
      003E6D C0 05            [24]11457 	push	ar5
      003E6F 12r04rF6         [24]11458 	lcall	_setCursor
                                  11459 ;	.\ecen4350_lcd_v4.c:2710: setColorYellow();
      003E72 12r16r3A         [24]11460 	lcall	_setColorYellow
                                  11461 ;	.\ecen4350_lcd_v4.c:2711: LCD_string_write(" [Non-Interactive]\n");
      003E75 90r0ArA3         [24]11462 	mov	dptr,#___str_104
      003E78 75 F0 80         [24]11463 	mov	b,#0x80
      003E7B 12r10r10         [24]11464 	lcall	_LCD_string_write
                                  11465 ;	.\ecen4350_lcd_v4.c:2712: setColorWhite();
      003E7E 12r16r24         [24]11466 	lcall	_setColorWhite
                                  11467 ;	.\ecen4350_lcd_v4.c:2713: LCD_string_write(" Search Value:\n ");
      003E81 90r0ArB7         [24]11468 	mov	dptr,#___str_105
      003E84 75 F0 80         [24]11469 	mov	b,#0x80
      003E87 12r10r10         [24]11470 	lcall	_LCD_string_write
                                  11471 ;	.\ecen4350_lcd_v4.c:2714: setColorDefault();
      003E8A 12r15rD4         [24]11472 	lcall	_setColorDefault
                                  11473 ;	.\ecen4350_lcd_v4.c:2715: print8Hex(value);
      003E8D 78r20            [12]11474 	mov	r0,#_count_value_65536_708
      003E8F 86 82            [24]11475 	mov	dpl,@r0
      003E91 12r14rE1         [24]11476 	lcall	_print8Hex
      003E94 D0 05            [24]11477 	pop	ar5
                                  11478 ;	.\ecen4350_lcd_v4.c:2716: for(unsigned int i = 0; i < blockSize; i++) {
      003E96 8D 03            [24]11479 	mov	ar3,r5
      003E98 E4               [12]11480 	clr	a
      003E99 F5*5E            [12]11481 	mov	_count_i_262144_721,a
      003E9B F5*5F            [12]11482 	mov	(_count_i_262144_721 + 1),a
      003E9D                      11483 00208$:
      003E9D 78r1F            [12]11484 	mov	r0,#_count_blockSize_65536_708
      003E9F 86 02            [24]11485 	mov	ar2,@r0
      003EA1 7E 00            [12]11486 	mov	r6,#0x00
      003EA3 C3               [12]11487 	clr	c
      003EA4 E5*5E            [12]11488 	mov	a,_count_i_262144_721
      003EA6 9A               [12]11489 	subb	a,r2
      003EA7 E5*5F            [12]11490 	mov	a,(_count_i_262144_721 + 1)
      003EA9 9E               [12]11491 	subb	a,r6
      003EAA 50 2A            [24]11492 	jnc	00267$
                                  11493 ;	.\ecen4350_lcd_v4.c:2717: d = (unsigned char __xdata*)(i+address);
      003EAC 78r1D            [12]11494 	mov	r0,#_count_address_65536_708
      003EAE E6               [12]11495 	mov	a,@r0
      003EAF 25*5E            [12]11496 	add	a,_count_i_262144_721
      003EB1 FC               [12]11497 	mov	r4,a
      003EB2 08               [12]11498 	inc	r0
      003EB3 E6               [12]11499 	mov	a,@r0
      003EB4 35*5F            [12]11500 	addc	a,(_count_i_262144_721 + 1)
      003EB6 FE               [12]11501 	mov	r6,a
                                  11502 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  11503 ;	assignBit
      003EB7 C2 B5            [12]11504 	clr	_P3_5
                                  11505 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      003EB9 8C 82            [24]11506 	mov	dpl,r4
      003EBB 8E 83            [24]11507 	mov	dph,r6
      003EBD E0               [24]11508 	movx	a,@dptr
      003EBE FC               [12]11509 	mov	r4,a
                                  11510 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  11511 ;	assignBit
      003EBF D2 B5            [12]11512 	setb	_P3_5
                                  11513 ;	.\ecen4350_lcd_v4.c:2718: if(value == ramRead8(d)){
      003EC1 78r20            [12]11514 	mov	r0,#_count_value_65536_708
      003EC3 E6               [12]11515 	mov	a,@r0
      003EC4 B5 04 05         [24]11516 	cjne	a,ar4,00209$
                                  11517 ;	.\ecen4350_lcd_v4.c:2719: noneFound = 0;
      003EC7 78r22            [12]11518 	mov	r0,#_count_noneFound_65536_708
      003EC9 76 00            [12]11519 	mov	@r0,#0x00
                                  11520 ;	.\ecen4350_lcd_v4.c:2720: page++;
      003ECB 0B               [12]11521 	inc	r3
      003ECC                      11522 00209$:
                                  11523 ;	.\ecen4350_lcd_v4.c:2716: for(unsigned int i = 0; i < blockSize; i++) {
      003ECC 05*5E            [12]11524 	inc	_count_i_262144_721
      003ECE E4               [12]11525 	clr	a
      003ECF B5*5E CB         [24]11526 	cjne	a,_count_i_262144_721,00208$
      003ED2 05*5F            [12]11527 	inc	(_count_i_262144_721 + 1)
      003ED4 80 C7            [24]11528 	sjmp	00208$
      003ED6                      11529 00267$:
      003ED6 8B 05            [24]11530 	mov	ar5,r3
                                  11531 ;	.\ecen4350_lcd_v4.c:2723: setCursor(0, 120);
      003ED8 75*00 78         [24]11532 	mov	_setCursor_PARM_2,#0x78
      003EDB 75*01 00         [24]11533 	mov	(_setCursor_PARM_2 + 1),#0x00
      003EDE 90 00 00         [24]11534 	mov	dptr,#0x0000
      003EE1 C0 05            [24]11535 	push	ar5
      003EE3 C0 03            [24]11536 	push	ar3
      003EE5 12r04rF6         [24]11537 	lcall	_setCursor
                                  11538 ;	.\ecen4350_lcd_v4.c:2724: setColorWhite();
      003EE8 12r16r24         [24]11539 	lcall	_setColorWhite
                                  11540 ;	.\ecen4350_lcd_v4.c:2725: LCD_string_write(" Found in\n ");
      003EEB 90r0Cr18         [24]11541 	mov	dptr,#___str_125
      003EEE 75 F0 80         [24]11542 	mov	b,#0x80
      003EF1 12r10r10         [24]11543 	lcall	_LCD_string_write
                                  11544 ;	.\ecen4350_lcd_v4.c:2726: setColorDefault();
      003EF4 12r15rD4         [24]11545 	lcall	_setColorDefault
                                  11546 ;	.\ecen4350_lcd_v4.c:2727: LCD_string_write("0x");
      003EF7 90r05r29         [24]11547 	mov	dptr,#___str_2
      003EFA 75 F0 80         [24]11548 	mov	b,#0x80
      003EFD 12r10r10         [24]11549 	lcall	_LCD_string_write
      003F00 D0 03            [24]11550 	pop	ar3
                                  11551 ;	.\ecen4350_lcd_v4.c:2728: print8Hex(page);
      003F02 8B 82            [24]11552 	mov	dpl,r3
      003F04 12r14rE1         [24]11553 	lcall	_print8Hex
                                  11554 ;	.\ecen4350_lcd_v4.c:2729: LCD_string_write(" Bytes (Hex)\n ");
      003F07 90r0Cr24         [24]11555 	mov	dptr,#___str_126
      003F0A 75 F0 80         [24]11556 	mov	b,#0x80
      003F0D 12r10r10         [24]11557 	lcall	_LCD_string_write
      003F10 D0 05            [24]11558 	pop	ar5
                                  11559 ;	.\ecen4350_lcd_v4.c:2730: exit = 0;
      003F12 78r23            [12]11560 	mov	r0,#_count_exit_65536_708
      003F14 76 00            [12]11561 	mov	@r0,#0x00
      003F16 02r43r7A         [24]11562 	ljmp	00194$
      003F19                      11563 00193$:
                                  11564 ;	.\ecen4350_lcd_v4.c:2732: setCursor(0, 60);
      003F19 75*00 3C         [24]11565 	mov	_setCursor_PARM_2,#0x3c
      003F1C 75*01 00         [24]11566 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F1F 90 00 00         [24]11567 	mov	dptr,#0x0000
      003F22 C0 05            [24]11568 	push	ar5
      003F24 12r04rF6         [24]11569 	lcall	_setCursor
                                  11570 ;	.\ecen4350_lcd_v4.c:2733: setColorYellow();
      003F27 12r16r3A         [24]11571 	lcall	_setColorYellow
                                  11572 ;	.\ecen4350_lcd_v4.c:2734: LCD_string_write(" [Interactive]\n");
      003F2A 90r0ArE2         [24]11573 	mov	dptr,#___str_108
      003F2D 75 F0 80         [24]11574 	mov	b,#0x80
      003F30 12r10r10         [24]11575 	lcall	_LCD_string_write
                                  11576 ;	.\ecen4350_lcd_v4.c:2735: setColorWhite();
      003F33 12r16r24         [24]11577 	lcall	_setColorWhite
                                  11578 ;	.\ecen4350_lcd_v4.c:2736: LCD_string_write(" Search Value:\n ");
      003F36 90r0ArB7         [24]11579 	mov	dptr,#___str_105
      003F39 75 F0 80         [24]11580 	mov	b,#0x80
      003F3C 12r10r10         [24]11581 	lcall	_LCD_string_write
                                  11582 ;	.\ecen4350_lcd_v4.c:2737: setColorDefault();
      003F3F 12r15rD4         [24]11583 	lcall	_setColorDefault
      003F42 D0 05            [24]11584 	pop	ar5
                                  11585 ;	.\ecen4350_lcd_v4.c:2740: for (unsigned int i = 0; i < blockSize; i++) {
      003F44 E4               [12]11586 	clr	a
      003F45 F5*61            [12]11587 	mov	_count_sloc1_1_0,a
      003F47 F5*62            [12]11588 	mov	(_count_sloc1_1_0 + 1),a
      003F49                      11589 00211$:
      003F49 78r1F            [12]11590 	mov	r0,#_count_blockSize_65536_708
      003F4B 86 02            [24]11591 	mov	ar2,@r0
      003F4D 7B 00            [12]11592 	mov	r3,#0x00
      003F4F C3               [12]11593 	clr	c
      003F50 E5*61            [12]11594 	mov	a,_count_sloc1_1_0
      003F52 9A               [12]11595 	subb	a,r2
      003F53 E5*62            [12]11596 	mov	a,(_count_sloc1_1_0 + 1)
      003F55 9B               [12]11597 	subb	a,r3
      003F56 40 03            [24]11598 	jc	00553$
      003F58 02r43r7A         [24]11599 	ljmp	00194$
      003F5B                      11600 00553$:
                                  11601 ;	.\ecen4350_lcd_v4.c:2741: d = (unsigned char __xdata*)(i+address);
      003F5B 78r1D            [12]11602 	mov	r0,#_count_address_65536_708
      003F5D E6               [12]11603 	mov	a,@r0
      003F5E 25*61            [12]11604 	add	a,_count_sloc1_1_0
      003F60 FA               [12]11605 	mov	r2,a
      003F61 08               [12]11606 	inc	r0
      003F62 E6               [12]11607 	mov	a,@r0
      003F63 35*62            [12]11608 	addc	a,(_count_sloc1_1_0 + 1)
      003F65 FB               [12]11609 	mov	r3,a
      003F66 8A 82            [24]11610 	mov	dpl,r2
      003F68 8B 83            [24]11611 	mov	dph,r3
                                  11612 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  11613 ;	assignBit
      003F6A C2 B5            [12]11614 	clr	_P3_5
                                  11615 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      003F6C E0               [24]11616 	movx	a,@dptr
      003F6D FB               [12]11617 	mov	r3,a
                                  11618 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  11619 ;	assignBit
      003F6E D2 B5            [12]11620 	setb	_P3_5
                                  11621 ;	.\ecen4350_lcd_v4.c:2742: if(value == ramRead8(d)){
      003F70 78r20            [12]11622 	mov	r0,#_count_value_65536_708
      003F72 E6               [12]11623 	mov	a,@r0
      003F73 B5 03 02         [24]11624 	cjne	a,ar3,00554$
      003F76 80 03            [24]11625 	sjmp	00555$
      003F78                      11626 00554$:
      003F78 02r43r6F         [24]11627 	ljmp	00212$
      003F7B                      11628 00555$:
                                  11629 ;	.\ecen4350_lcd_v4.c:2743: noneFound = 0;		// toggle flag
      003F7B 78r22            [12]11630 	mov	r0,#_count_noneFound_65536_708
      003F7D 76 00            [12]11631 	mov	@r0,#0x00
                                  11632 ;	.\ecen4350_lcd_v4.c:2744: setCursor(0, 120);
      003F7F 75*00 78         [24]11633 	mov	_setCursor_PARM_2,#0x78
      003F82 75*01 00         [24]11634 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F85 90 00 00         [24]11635 	mov	dptr,#0x0000
      003F88 C0 05            [24]11636 	push	ar5
      003F8A 12r04rF6         [24]11637 	lcall	_setCursor
                                  11638 ;	.\ecen4350_lcd_v4.c:2745: setColorWhite();
      003F8D 12r16r24         [24]11639 	lcall	_setColorWhite
                                  11640 ;	.\ecen4350_lcd_v4.c:2746: LCD_string_write(" Found at Location \n");
      003F90 90r0ArF2         [24]11641 	mov	dptr,#___str_109
      003F93 75 F0 80         [24]11642 	mov	b,#0x80
      003F96 12r10r10         [24]11643 	lcall	_LCD_string_write
                                  11644 ;	.\ecen4350_lcd_v4.c:2747: setColorDefault();
      003F99 12r15rD4         [24]11645 	lcall	_setColorDefault
                                  11646 ;	.\ecen4350_lcd_v4.c:2748: LCD_string_write(" 0x");
      003F9C 90r07r4E         [24]11647 	mov	dptr,#___str_46
      003F9F 75 F0 80         [24]11648 	mov	b,#0x80
      003FA2 12r10r10         [24]11649 	lcall	_LCD_string_write
      003FA5 D0 05            [24]11650 	pop	ar5
                                  11651 ;	.\ecen4350_lcd_v4.c:2749: print16Hex(page+address);
      003FA7 8D 02            [24]11652 	mov	ar2,r5
      003FA9 7B 00            [12]11653 	mov	r3,#0x00
      003FAB 78r1D            [12]11654 	mov	r0,#_count_address_65536_708
      003FAD E6               [12]11655 	mov	a,@r0
      003FAE 2A               [12]11656 	add	a,r2
      003FAF F5 82            [12]11657 	mov	dpl,a
      003FB1 08               [12]11658 	inc	r0
      003FB2 E6               [12]11659 	mov	a,@r0
      003FB3 3B               [12]11660 	addc	a,r3
      003FB4 F5 83            [12]11661 	mov	dph,a
      003FB6 C0 05            [24]11662 	push	ar5
      003FB8 12r14rF8         [24]11663 	lcall	_print16Hex
                                  11664 ;	.\ecen4350_lcd_v4.c:2750: setCursor(50, 300);
      003FBB 75*00 2C         [24]11665 	mov	_setCursor_PARM_2,#0x2c
      003FBE 75*01 01         [24]11666 	mov	(_setCursor_PARM_2 + 1),#0x01
      003FC1 90 00 32         [24]11667 	mov	dptr,#0x0032
      003FC4 12r04rF6         [24]11668 	lcall	_setCursor
                                  11669 ;	.\ecen4350_lcd_v4.c:2751: setColorGray();
      003FC7 12r16r02         [24]11670 	lcall	_setColorGray
                                  11671 ;	.\ecen4350_lcd_v4.c:2752: LCD_string_write("Count: ");
      003FCA 90r0Cr33         [24]11672 	mov	dptr,#___str_127
      003FCD 75 F0 80         [24]11673 	mov	b,#0x80
      003FD0 12r10r10         [24]11674 	lcall	_LCD_string_write
                                  11675 ;	.\ecen4350_lcd_v4.c:2753: setColorHighlight2();
      003FD3 12r15rF6         [24]11676 	lcall	_setColorHighlight2
      003FD6 D0 05            [24]11677 	pop	ar5
                                  11678 ;	.\ecen4350_lcd_v4.c:2754: print8Hex(page+1);
      003FD8 8D 03            [24]11679 	mov	ar3,r5
      003FDA EB               [12]11680 	mov	a,r3
      003FDB 04               [12]11681 	inc	a
      003FDC F5 82            [12]11682 	mov	dpl,a
      003FDE C0 05            [24]11683 	push	ar5
      003FE0 12r14rE1         [24]11684 	lcall	_print8Hex
      003FE3 D0 05            [24]11685 	pop	ar5
                                  11686 ;	.\ecen4350_lcd_v4.c:2758: if (i == 0) {					// At beginning, page <0>
      003FE5 E5*61            [12]11687 	mov	a,_count_sloc1_1_0
      003FE7 45*62            [12]11688 	orl	a,(_count_sloc1_1_0 + 1)
      003FE9 60 03            [24]11689 	jz	00556$
      003FEB 02r41r1A         [24]11690 	ljmp	00187$
      003FEE                      11691 00556$:
                                  11692 ;	.\ecen4350_lcd_v4.c:2759: if (i != blockSize - 1) {	// not at the end yet, no previous page
      003FEE C0 05            [24]11693 	push	ar5
      003FF0 78r1F            [12]11694 	mov	r0,#_count_blockSize_65536_708
      003FF2 86 02            [24]11695 	mov	ar2,@r0
      003FF4 7B 00            [12]11696 	mov	r3,#0x00
      003FF6 EA               [12]11697 	mov	a,r2
      003FF7 24 FF            [12]11698 	add	a,#0xff
      003FF9 FD               [12]11699 	mov	r5,a
      003FFA EB               [12]11700 	mov	a,r3
      003FFB 34 FF            [12]11701 	addc	a,#0xff
      003FFD FF               [12]11702 	mov	r7,a
      003FFE ED               [12]11703 	mov	a,r5
      003FFF B5*61 09         [24]11704 	cjne	a,_count_sloc1_1_0,00557$
      004002 EF               [12]11705 	mov	a,r7
      004003 B5*62 05         [24]11706 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      004006 D0 05            [24]11707 	pop	ar5
      004008 02r40r9B         [24]11708 	ljmp	00145$
      00400B                      11709 00557$:
                                  11710 ;	.\ecen4350_lcd_v4.c:2760: setCursor(0, 180);
      00400B 75*00 B4         [24]11711 	mov	_setCursor_PARM_2,#0xb4
      00400E 75*01 00         [24]11712 	mov	(_setCursor_PARM_2 + 1),#0x00
      004011 90 00 00         [24]11713 	mov	dptr,#0x0000
      004014 12r04rF6         [24]11714 	lcall	_setCursor
                                  11715 ;	.\ecen4350_lcd_v4.c:2761: setColorWhite();
      004017 12r16r24         [24]11716 	lcall	_setColorWhite
                                  11717 ;	.\ecen4350_lcd_v4.c:2762: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      00401A 90r0Br0E         [24]11718 	mov	dptr,#___str_111
      00401D 75 F0 80         [24]11719 	mov	b,#0x80
      004020 12r10r10         [24]11720 	lcall	_LCD_string_write
      004023 D0 05            [24]11721 	pop	ar5
                                  11722 ;	.\ecen4350_lcd_v4.c:2763: invalidInput = 1;
      004025 7F 01            [12]11723 	mov	r7,#0x01
                                  11724 ;	.\ecen4350_lcd_v4.c:2764: while (invalidInput) {
      004027 8D*60            [24]11725 	mov	_count_sloc0_1_0,r5
      004029                      11726 00134$:
      004029 EF               [12]11727 	mov	a,r7
      00402A 70 03            [24]11728 	jnz	00558$
      00402C 02r41r0D         [24]11729 	ljmp	00268$
      00402F                      11730 00558$:
                                  11731 ;	.\ecen4350_lcd_v4.c:2765: selection = keyDetect();
      00402F C0 07            [24]11732 	push	ar7
      004031 12r11r2E         [24]11733 	lcall	_keyDetect
      004034 AF 82            [24]11734 	mov	r7,dpl
      004036 78r00            [12]11735 	mov	r0,#_selection
      004038 A6 07            [24]11736 	mov	@r0,ar7
                                  11737 ;	.\ecen4350_lcd_v4.c:2766: if(selection == '1'){
      00403A BF 31 02         [24]11738 	cjne	r7,#0x31,00559$
      00403D 80 04            [24]11739 	sjmp	00560$
      00403F                      11740 00559$:
      00403F D0 07            [24]11741 	pop	ar7
      004041 80 27            [24]11742 	sjmp	00131$
      004043                      11743 00560$:
      004043 D0 07            [24]11744 	pop	ar7
                                  11745 ;	.\ecen4350_lcd_v4.c:2767: setCursor(0, 180);
      004045 75*00 B4         [24]11746 	mov	_setCursor_PARM_2,#0xb4
      004048 75*01 00         [24]11747 	mov	(_setCursor_PARM_2 + 1),#0x00
      00404B 90 00 00         [24]11748 	mov	dptr,#0x0000
      00404E 12r04rF6         [24]11749 	lcall	_setCursor
                                  11750 ;	.\ecen4350_lcd_v4.c:2768: LCD_string_write(" ");
      004051 90r06r54         [24]11751 	mov	dptr,#___str_30
      004054 75 F0 80         [24]11752 	mov	b,#0x80
      004057 12r10r10         [24]11753 	lcall	_LCD_string_write
                                  11754 ;	.\ecen4350_lcd_v4.c:2769: setColorHighlight2();
      00405A 12r15rF6         [24]11755 	lcall	_setColorHighlight2
                                  11756 ;	.\ecen4350_lcd_v4.c:2770: LCD_string_write("<1> Next");
      00405D 90r0Br31         [24]11757 	mov	dptr,#___str_112
      004060 75 F0 80         [24]11758 	mov	b,#0x80
      004063 12r10r10         [24]11759 	lcall	_LCD_string_write
                                  11760 ;	.\ecen4350_lcd_v4.c:2771: invalidInput = 0;
      004066 7F 00            [12]11761 	mov	r7,#0x00
                                  11762 ;	.\ecen4350_lcd_v4.c:2772: page++;
      004068 05*60            [12]11763 	inc	_count_sloc0_1_0
      00406A                      11764 00131$:
                                  11765 ;	.\ecen4350_lcd_v4.c:2773: } if(selection == '0') {
      00406A 78r00            [12]11766 	mov	r0,#_selection
      00406C B6 30 BA         [24]11767 	cjne	@r0,#0x30,00134$
                                  11768 ;	.\ecen4350_lcd_v4.c:2774: setColorDefault();
      00406F 12r15rD4         [24]11769 	lcall	_setColorDefault
                                  11770 ;	.\ecen4350_lcd_v4.c:2775: setCursor(0, 180);
      004072 75*00 B4         [24]11771 	mov	_setCursor_PARM_2,#0xb4
      004075 75*01 00         [24]11772 	mov	(_setCursor_PARM_2 + 1),#0x00
      004078 90 00 00         [24]11773 	mov	dptr,#0x0000
      00407B 12r04rF6         [24]11774 	lcall	_setCursor
                                  11775 ;	.\ecen4350_lcd_v4.c:2776: LCD_string_write("\n ");
      00407E 90r08r5F         [24]11776 	mov	dptr,#___str_67
      004081 75 F0 80         [24]11777 	mov	b,#0x80
      004084 12r10r10         [24]11778 	lcall	_LCD_string_write
                                  11779 ;	.\ecen4350_lcd_v4.c:2777: setColorHighlight2();
      004087 12r15rF6         [24]11780 	lcall	_setColorHighlight2
                                  11781 ;	.\ecen4350_lcd_v4.c:2778: LCD_string_write("<0> Exit");
      00408A 90r09r1A         [24]11782 	mov	dptr,#___str_78
      00408D 75 F0 80         [24]11783 	mov	b,#0x80
      004090 12r10r10         [24]11784 	lcall	_LCD_string_write
                                  11785 ;	.\ecen4350_lcd_v4.c:2779: exit = 0;		// set exit flag
      004093 78r23            [12]11786 	mov	r0,#_count_exit_65536_708
      004095 76 00            [12]11787 	mov	@r0,#0x00
                                  11788 ;	.\ecen4350_lcd_v4.c:2780: invalidInput = 0;
      004097 7F 00            [12]11789 	mov	r7,#0x00
      004099 80 8E            [24]11790 	sjmp	00134$
      00409B                      11791 00145$:
                                  11792 ;	.\ecen4350_lcd_v4.c:2783: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      00409B 1A               [12]11793 	dec	r2
      00409C BA FF 01         [24]11794 	cjne	r2,#0xff,00563$
      00409F 1B               [12]11795 	dec	r3
      0040A0                      11796 00563$:
      0040A0 EA               [12]11797 	mov	a,r2
      0040A1 B5*61 6B         [24]11798 	cjne	a,_count_sloc1_1_0,00146$
      0040A4 EB               [12]11799 	mov	a,r3
      0040A5 B5*62 67         [24]11800 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11801 ;	.\ecen4350_lcd_v4.c:2784: setCursor(0, 180);
      0040A8 75*00 B4         [24]11802 	mov	_setCursor_PARM_2,#0xb4
      0040AB 75*01 00         [24]11803 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040AE 90 00 00         [24]11804 	mov	dptr,#0x0000
      0040B1 C0 05            [24]11805 	push	ar5
      0040B3 12r04rF6         [24]11806 	lcall	_setCursor
                                  11807 ;	.\ecen4350_lcd_v4.c:2785: setColorWhite();
      0040B6 12r16r24         [24]11808 	lcall	_setColorWhite
                                  11809 ;	.\ecen4350_lcd_v4.c:2786: LCD_string_write("          \n <0> Exit\n              ");
      0040B9 90r0Br3A         [24]11810 	mov	dptr,#___str_113
      0040BC 75 F0 80         [24]11811 	mov	b,#0x80
      0040BF 12r10r10         [24]11812 	lcall	_LCD_string_write
      0040C2 D0 05            [24]11813 	pop	ar5
                                  11814 ;	.\ecen4350_lcd_v4.c:2787: invalidInput = 1;
      0040C4 7F 01            [12]11815 	mov	r7,#0x01
                                  11816 ;	.\ecen4350_lcd_v4.c:2788: while (invalidInput) {
      0040C6                      11817 00139$:
      0040C6 EF               [12]11818 	mov	a,r7
      0040C7 60 46            [24]11819 	jz	00146$
                                  11820 ;	.\ecen4350_lcd_v4.c:2789: selection = keyDetect();
      0040C9 C0 07            [24]11821 	push	ar7
      0040CB C0 05            [24]11822 	push	ar5
      0040CD 12r11r2E         [24]11823 	lcall	_keyDetect
      0040D0 AB 82            [24]11824 	mov	r3,dpl
      0040D2 D0 05            [24]11825 	pop	ar5
      0040D4 D0 07            [24]11826 	pop	ar7
      0040D6 78r00            [12]11827 	mov	r0,#_selection
      0040D8 A6 03            [24]11828 	mov	@r0,ar3
                                  11829 ;	.\ecen4350_lcd_v4.c:2790: if(selection == '0') {
      0040DA BB 30 E9         [24]11830 	cjne	r3,#0x30,00139$
                                  11831 ;	.\ecen4350_lcd_v4.c:2791: setColorDefault();
      0040DD C0 05            [24]11832 	push	ar5
      0040DF 12r15rD4         [24]11833 	lcall	_setColorDefault
                                  11834 ;	.\ecen4350_lcd_v4.c:2792: setCursor(0, 180);
      0040E2 75*00 B4         [24]11835 	mov	_setCursor_PARM_2,#0xb4
      0040E5 75*01 00         [24]11836 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040E8 90 00 00         [24]11837 	mov	dptr,#0x0000
      0040EB 12r04rF6         [24]11838 	lcall	_setCursor
                                  11839 ;	.\ecen4350_lcd_v4.c:2793: LCD_string_write("\n ");
      0040EE 90r08r5F         [24]11840 	mov	dptr,#___str_67
      0040F1 75 F0 80         [24]11841 	mov	b,#0x80
      0040F4 12r10r10         [24]11842 	lcall	_LCD_string_write
                                  11843 ;	.\ecen4350_lcd_v4.c:2794: setColorHighlight2();
      0040F7 12r15rF6         [24]11844 	lcall	_setColorHighlight2
                                  11845 ;	.\ecen4350_lcd_v4.c:2795: LCD_string_write("<0> Exit");
      0040FA 90r09r1A         [24]11846 	mov	dptr,#___str_78
      0040FD 75 F0 80         [24]11847 	mov	b,#0x80
      004100 12r10r10         [24]11848 	lcall	_LCD_string_write
      004103 D0 05            [24]11849 	pop	ar5
                                  11850 ;	.\ecen4350_lcd_v4.c:2796: exit = 0;		// set exit flag
      004105 78r23            [12]11851 	mov	r0,#_count_exit_65536_708
      004107 76 00            [12]11852 	mov	@r0,#0x00
                                  11853 ;	.\ecen4350_lcd_v4.c:2797: invalidInput = 0;
      004109 7F 00            [12]11854 	mov	r7,#0x00
      00410B 80 B9            [24]11855 	sjmp	00139$
      00410D                      11856 00268$:
      00410D AD*60            [24]11857 	mov	r5,_count_sloc0_1_0
      00410F                      11858 00146$:
                                  11859 ;	.\ecen4350_lcd_v4.c:2801: if (exit == 0) {	// check exit flag
      00410F 78r23            [12]11860 	mov	r0,#_count_exit_65536_708
      004111 E6               [12]11861 	mov	a,@r0
      004112 60 03            [24]11862 	jz	00569$
      004114 02r43r6F         [24]11863 	ljmp	00212$
      004117                      11864 00569$:
                                  11865 ;	.\ecen4350_lcd_v4.c:2802: break;			// break out of for loop iteration
      004117 02r43r7A         [24]11866 	ljmp	00194$
      00411A                      11867 00187$:
                                  11868 ;	.\ecen4350_lcd_v4.c:2807: else if (i == blockSize - 1) {		// At Page End 
      00411A C0 05            [24]11869 	push	ar5
      00411C 78r1F            [12]11870 	mov	r0,#_count_blockSize_65536_708
      00411E 86 03            [24]11871 	mov	ar3,@r0
      004120 7F 00            [12]11872 	mov	r7,#0x00
      004122 EB               [12]11873 	mov	a,r3
      004123 24 FF            [12]11874 	add	a,#0xff
      004125 FA               [12]11875 	mov	r2,a
      004126 EF               [12]11876 	mov	a,r7
      004127 34 FF            [12]11877 	addc	a,#0xff
      004129 FD               [12]11878 	mov	r5,a
      00412A EA               [12]11879 	mov	a,r2
      00412B B5*61 06         [24]11880 	cjne	a,_count_sloc1_1_0,00570$
      00412E ED               [12]11881 	mov	a,r5
      00412F B5*62 02         [24]11882 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      004132 80 05            [24]11883 	sjmp	00571$
      004134                      11884 00570$:
      004134 D0 05            [24]11885 	pop	ar5
      004136 02r42r66         [24]11886 	ljmp	00184$
      004139                      11887 00571$:
      004139 D0 05            [24]11888 	pop	ar5
                                  11889 ;	.\ecen4350_lcd_v4.c:2808: if (i != 0) {				// not at beginning, no next page
      00413B E5*61            [12]11890 	mov	a,_count_sloc1_1_0
      00413D 45*62            [12]11891 	orl	a,(_count_sloc1_1_0 + 1)
      00413F 70 03            [24]11892 	jnz	00572$
      004141 02r41rEF         [24]11893 	ljmp	00164$
      004144                      11894 00572$:
                                  11895 ;	.\ecen4350_lcd_v4.c:2809: setCursor(0, 180);
      004144 75*00 B4         [24]11896 	mov	_setCursor_PARM_2,#0xb4
      004147 75*01 00         [24]11897 	mov	(_setCursor_PARM_2 + 1),#0x00
      00414A 90 00 00         [24]11898 	mov	dptr,#0x0000
      00414D C0 05            [24]11899 	push	ar5
      00414F 12r04rF6         [24]11900 	lcall	_setCursor
                                  11901 ;	.\ecen4350_lcd_v4.c:2810: setColorWhite();
      004152 12r16r24         [24]11902 	lcall	_setColorWhite
                                  11903 ;	.\ecen4350_lcd_v4.c:2811: LCD_string_write("          \n <0> Exit\n <2> Previous");
      004155 90r0Br5E         [24]11904 	mov	dptr,#___str_114
      004158 75 F0 80         [24]11905 	mov	b,#0x80
      00415B 12r10r10         [24]11906 	lcall	_LCD_string_write
      00415E D0 05            [24]11907 	pop	ar5
                                  11908 ;	.\ecen4350_lcd_v4.c:2812: invalidInput = 1;
      004160 7F 01            [12]11909 	mov	r7,#0x01
                                  11910 ;	.\ecen4350_lcd_v4.c:2813: while (invalidInput) {
      004162 8D*60            [24]11911 	mov	_count_sloc0_1_0,r5
      004164                      11912 00153$:
      004164 EF               [12]11913 	mov	a,r7
      004165 70 03            [24]11914 	jnz	00573$
      004167 02r42r59         [24]11915 	ljmp	00269$
      00416A                      11916 00573$:
                                  11917 ;	.\ecen4350_lcd_v4.c:2814: selection = keyDetect();
      00416A C0 07            [24]11918 	push	ar7
      00416C C0 07            [24]11919 	push	ar7
      00416E 12r11r2E         [24]11920 	lcall	_keyDetect
      004171 AA 82            [24]11921 	mov	r2,dpl
      004173 D0 07            [24]11922 	pop	ar7
      004175 78r00            [12]11923 	mov	r0,#_selection
      004177 A6 02            [24]11924 	mov	@r0,ar2
                                  11925 ;	.\ecen4350_lcd_v4.c:2815: if(selection == '0'){
      004179 BA 30 02         [24]11926 	cjne	r2,#0x30,00574$
      00417C 80 04            [24]11927 	sjmp	00575$
      00417E                      11928 00574$:
      00417E D0 07            [24]11929 	pop	ar7
      004180 80 29            [24]11930 	sjmp	00150$
      004182                      11931 00575$:
      004182 D0 07            [24]11932 	pop	ar7
                                  11933 ;	.\ecen4350_lcd_v4.c:2816: setCursor(0, 180);
      004184 75*00 B4         [24]11934 	mov	_setCursor_PARM_2,#0xb4
      004187 75*01 00         [24]11935 	mov	(_setCursor_PARM_2 + 1),#0x00
      00418A 90 00 00         [24]11936 	mov	dptr,#0x0000
      00418D 12r04rF6         [24]11937 	lcall	_setCursor
                                  11938 ;	.\ecen4350_lcd_v4.c:2817: LCD_string_write("\n ");
      004190 90r08r5F         [24]11939 	mov	dptr,#___str_67
      004193 75 F0 80         [24]11940 	mov	b,#0x80
      004196 12r10r10         [24]11941 	lcall	_LCD_string_write
                                  11942 ;	.\ecen4350_lcd_v4.c:2818: setColorHighlight2();
      004199 12r15rF6         [24]11943 	lcall	_setColorHighlight2
                                  11944 ;	.\ecen4350_lcd_v4.c:2819: LCD_string_write("<0> Exit\n");
      00419C 90r07r94         [24]11945 	mov	dptr,#___str_54
      00419F 75 F0 80         [24]11946 	mov	b,#0x80
      0041A2 12r10r10         [24]11947 	lcall	_LCD_string_write
                                  11948 ;	.\ecen4350_lcd_v4.c:2820: invalidInput = 0;
      0041A5 7F 00            [12]11949 	mov	r7,#0x00
                                  11950 ;	.\ecen4350_lcd_v4.c:2821: exit = 0;
      0041A7 78r23            [12]11951 	mov	r0,#_count_exit_65536_708
      0041A9 76 00            [12]11952 	mov	@r0,#0x00
      0041AB                      11953 00150$:
                                  11954 ;	.\ecen4350_lcd_v4.c:2822: } if (selection == '2') {
      0041AB 78r00            [12]11955 	mov	r0,#_selection
      0041AD B6 32 B4         [24]11956 	cjne	@r0,#0x32,00153$
                                  11957 ;	.\ecen4350_lcd_v4.c:2823: setCursor(0, 180);
      0041B0 75*00 B4         [24]11958 	mov	_setCursor_PARM_2,#0xb4
      0041B3 75*01 00         [24]11959 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041B6 90 00 00         [24]11960 	mov	dptr,#0x0000
      0041B9 12r04rF6         [24]11961 	lcall	_setCursor
                                  11962 ;	.\ecen4350_lcd_v4.c:2824: setColorWhite();
      0041BC 12r16r24         [24]11963 	lcall	_setColorWhite
                                  11964 ;	.\ecen4350_lcd_v4.c:2825: LCD_string_write("\n\n ");
      0041BF 90r0Br81         [24]11965 	mov	dptr,#___str_115
      0041C2 75 F0 80         [24]11966 	mov	b,#0x80
      0041C5 12r10r10         [24]11967 	lcall	_LCD_string_write
                                  11968 ;	.\ecen4350_lcd_v4.c:2826: setColorHighlight2();
      0041C8 12r15rF6         [24]11969 	lcall	_setColorHighlight2
                                  11970 ;	.\ecen4350_lcd_v4.c:2827: LCD_string_write("<2> Previous");
      0041CB 90r0Br85         [24]11971 	mov	dptr,#___str_116
      0041CE 75 F0 80         [24]11972 	mov	b,#0x80
      0041D1 12r10r10         [24]11973 	lcall	_LCD_string_write
                                  11974 ;	.\ecen4350_lcd_v4.c:2828: invalidInput = 0;
      0041D4 7F 00            [12]11975 	mov	r7,#0x00
                                  11976 ;	.\ecen4350_lcd_v4.c:2829: i--;			// two decrements plus next loop increment is equal to one decrement
      0041D6 E5*61            [12]11977 	mov	a,_count_sloc1_1_0
      0041D8 24 FF            [12]11978 	add	a,#0xff
      0041DA FA               [12]11979 	mov	r2,a
      0041DB E5*62            [12]11980 	mov	a,(_count_sloc1_1_0 + 1)
      0041DD 34 FF            [12]11981 	addc	a,#0xff
      0041DF FE               [12]11982 	mov	r6,a
                                  11983 ;	.\ecen4350_lcd_v4.c:2830: i--;
      0041E0 EA               [12]11984 	mov	a,r2
      0041E1 24 FF            [12]11985 	add	a,#0xff
      0041E3 F5*61            [12]11986 	mov	_count_sloc1_1_0,a
      0041E5 EE               [12]11987 	mov	a,r6
      0041E6 34 FF            [12]11988 	addc	a,#0xff
      0041E8 F5*62            [12]11989 	mov	(_count_sloc1_1_0 + 1),a
                                  11990 ;	.\ecen4350_lcd_v4.c:2831: page--;			// decrement to previous page
      0041EA 15*60            [12]11991 	dec	_count_sloc0_1_0
      0041EC 02r41r64         [24]11992 	ljmp	00153$
      0041EF                      11993 00164$:
                                  11994 ;	.\ecen4350_lcd_v4.c:2835: else if (i == 0){				// end at beginning, no next or previous
      0041EF E5*61            [12]11995 	mov	a,_count_sloc1_1_0
      0041F1 45*62            [12]11996 	orl	a,(_count_sloc1_1_0 + 1)
                                  11997 ;	.\ecen4350_lcd_v4.c:2836: setCursor(0, 180);
      0041F3 70 66            [24]11998 	jnz	00165$
      0041F5 75*00 B4         [24]11999 	mov	_setCursor_PARM_2,#0xb4
      0041F8 F5*01            [12]12000 	mov	(_setCursor_PARM_2 + 1),a
      0041FA 90 00 00         [24]12001 	mov	dptr,#0x0000
      0041FD C0 05            [24]12002 	push	ar5
      0041FF 12r04rF6         [24]12003 	lcall	_setCursor
                                  12004 ;	.\ecen4350_lcd_v4.c:2837: setColorWhite();
      004202 12r16r24         [24]12005 	lcall	_setColorWhite
                                  12006 ;	.\ecen4350_lcd_v4.c:2838: LCD_string_write("          \n <0> Exit\n              ");
      004205 90r0Br3A         [24]12007 	mov	dptr,#___str_113
      004208 75 F0 80         [24]12008 	mov	b,#0x80
      00420B 12r10r10         [24]12009 	lcall	_LCD_string_write
      00420E D0 05            [24]12010 	pop	ar5
                                  12011 ;	.\ecen4350_lcd_v4.c:2839: invalidInput = 1;
      004210 7E 01            [12]12012 	mov	r6,#0x01
                                  12013 ;	.\ecen4350_lcd_v4.c:2840: while (invalidInput) {
      004212                      12014 00158$:
      004212 EE               [12]12015 	mov	a,r6
      004213 60 46            [24]12016 	jz	00165$
                                  12017 ;	.\ecen4350_lcd_v4.c:2841: selection = keyDetect();
      004215 C0 06            [24]12018 	push	ar6
      004217 C0 05            [24]12019 	push	ar5
      004219 12r11r2E         [24]12020 	lcall	_keyDetect
      00421C AC 82            [24]12021 	mov	r4,dpl
      00421E D0 05            [24]12022 	pop	ar5
      004220 D0 06            [24]12023 	pop	ar6
      004222 78r00            [12]12024 	mov	r0,#_selection
      004224 A6 04            [24]12025 	mov	@r0,ar4
                                  12026 ;	.\ecen4350_lcd_v4.c:2842: if(selection == '0') {
      004226 BC 30 E9         [24]12027 	cjne	r4,#0x30,00158$
                                  12028 ;	.\ecen4350_lcd_v4.c:2843: setColorDefault();
      004229 C0 05            [24]12029 	push	ar5
      00422B 12r15rD4         [24]12030 	lcall	_setColorDefault
                                  12031 ;	.\ecen4350_lcd_v4.c:2844: setCursor(0, 180);
      00422E 75*00 B4         [24]12032 	mov	_setCursor_PARM_2,#0xb4
      004231 75*01 00         [24]12033 	mov	(_setCursor_PARM_2 + 1),#0x00
      004234 90 00 00         [24]12034 	mov	dptr,#0x0000
      004237 12r04rF6         [24]12035 	lcall	_setCursor
                                  12036 ;	.\ecen4350_lcd_v4.c:2845: LCD_string_write("\n ");
      00423A 90r08r5F         [24]12037 	mov	dptr,#___str_67
      00423D 75 F0 80         [24]12038 	mov	b,#0x80
      004240 12r10r10         [24]12039 	lcall	_LCD_string_write
                                  12040 ;	.\ecen4350_lcd_v4.c:2846: setColorHighlight2();
      004243 12r15rF6         [24]12041 	lcall	_setColorHighlight2
                                  12042 ;	.\ecen4350_lcd_v4.c:2847: LCD_string_write("<0> Exit");
      004246 90r09r1A         [24]12043 	mov	dptr,#___str_78
      004249 75 F0 80         [24]12044 	mov	b,#0x80
      00424C 12r10r10         [24]12045 	lcall	_LCD_string_write
      00424F D0 05            [24]12046 	pop	ar5
                                  12047 ;	.\ecen4350_lcd_v4.c:2848: exit = 0;		// set exit flag
      004251 78r23            [12]12048 	mov	r0,#_count_exit_65536_708
      004253 76 00            [12]12049 	mov	@r0,#0x00
                                  12050 ;	.\ecen4350_lcd_v4.c:2849: invalidInput = 0;
      004255 7E 00            [12]12051 	mov	r6,#0x00
      004257 80 B9            [24]12052 	sjmp	00158$
      004259                      12053 00269$:
      004259 AD*60            [24]12054 	mov	r5,_count_sloc0_1_0
      00425B                      12055 00165$:
                                  12056 ;	.\ecen4350_lcd_v4.c:2853: if (exit == 0) {	// check exit flag
      00425B 78r23            [12]12057 	mov	r0,#_count_exit_65536_708
      00425D E6               [12]12058 	mov	a,@r0
      00425E 60 03            [24]12059 	jz	00582$
      004260 02r43r6F         [24]12060 	ljmp	00212$
      004263                      12061 00582$:
                                  12062 ;	.\ecen4350_lcd_v4.c:2854: break;			// break out of for loop iteration
      004263 02r43r7A         [24]12063 	ljmp	00194$
      004266                      12064 00184$:
                                  12065 ;	.\ecen4350_lcd_v4.c:2859: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      004266 1B               [12]12066 	dec	r3
      004267 BB FF 01         [24]12067 	cjne	r3,#0xff,00583$
      00426A 1F               [12]12068 	dec	r7
      00426B                      12069 00583$:
      00426B EB               [12]12070 	mov	a,r3
      00426C B5*61 07         [24]12071 	cjne	a,_count_sloc1_1_0,00584$
      00426F EF               [12]12072 	mov	a,r7
      004270 B5*62 03         [24]12073 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      004273 02r43r6F         [24]12074 	ljmp	00212$
      004276                      12075 00584$:
                                  12076 ;	.\ecen4350_lcd_v4.c:2860: if (i != 0) {
      004276 E5*61            [12]12077 	mov	a,_count_sloc1_1_0
      004278 45*62            [12]12078 	orl	a,(_count_sloc1_1_0 + 1)
      00427A 70 03            [24]12079 	jnz	00585$
      00427C 02r43r6A         [24]12080 	ljmp	00178$
      00427F                      12081 00585$:
                                  12082 ;	.\ecen4350_lcd_v4.c:2861: setCursor(0, 180);
      00427F 75*00 B4         [24]12083 	mov	_setCursor_PARM_2,#0xb4
      004282 75*01 00         [24]12084 	mov	(_setCursor_PARM_2 + 1),#0x00
      004285 90 00 00         [24]12085 	mov	dptr,#0x0000
      004288 C0 05            [24]12086 	push	ar5
      00428A 12r04rF6         [24]12087 	lcall	_setCursor
                                  12088 ;	.\ecen4350_lcd_v4.c:2862: setColorWhite();
      00428D 12r16r24         [24]12089 	lcall	_setColorWhite
                                  12090 ;	.\ecen4350_lcd_v4.c:2863: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      004290 90r0Br92         [24]12091 	mov	dptr,#___str_117
      004293 75 F0 80         [24]12092 	mov	b,#0x80
      004296 12r10r10         [24]12093 	lcall	_LCD_string_write
      004299 D0 05            [24]12094 	pop	ar5
                                  12095 ;	.\ecen4350_lcd_v4.c:2864: invalidInput = 1;
      00429B 7F 01            [12]12096 	mov	r7,#0x01
                                  12097 ;	.\ecen4350_lcd_v4.c:2865: while (invalidInput) {
      00429D                      12098 00174$:
      00429D EF               [12]12099 	mov	a,r7
      00429E 70 03            [24]12100 	jnz	00586$
      0042A0 02r43r6A         [24]12101 	ljmp	00178$
      0042A3                      12102 00586$:
                                  12103 ;	.\ecen4350_lcd_v4.c:2866: selection = keyDetect();
      0042A3 C0 07            [24]12104 	push	ar7
      0042A5 C0 05            [24]12105 	push	ar5
      0042A7 12r11r2E         [24]12106 	lcall	_keyDetect
      0042AA AE 82            [24]12107 	mov	r6,dpl
      0042AC D0 05            [24]12108 	pop	ar5
      0042AE D0 07            [24]12109 	pop	ar7
      0042B0 78r00            [12]12110 	mov	r0,#_selection
      0042B2 A6 06            [24]12111 	mov	@r0,ar6
                                  12112 ;	.\ecen4350_lcd_v4.c:2867: if (selection == '1') {
      0042B4 BE 31 28         [24]12113 	cjne	r6,#0x31,00169$
                                  12114 ;	.\ecen4350_lcd_v4.c:2868: setCursor(0, 180);
      0042B7 75*00 B4         [24]12115 	mov	_setCursor_PARM_2,#0xb4
      0042BA 75*01 00         [24]12116 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042BD 90 00 00         [24]12117 	mov	dptr,#0x0000
      0042C0 C0 05            [24]12118 	push	ar5
      0042C2 12r04rF6         [24]12119 	lcall	_setCursor
                                  12120 ;	.\ecen4350_lcd_v4.c:2869: LCD_string_write(" ");
      0042C5 90r06r54         [24]12121 	mov	dptr,#___str_30
      0042C8 75 F0 80         [24]12122 	mov	b,#0x80
      0042CB 12r10r10         [24]12123 	lcall	_LCD_string_write
                                  12124 ;	.\ecen4350_lcd_v4.c:2870: setColorHighlight2();
      0042CE 12r15rF6         [24]12125 	lcall	_setColorHighlight2
                                  12126 ;	.\ecen4350_lcd_v4.c:2871: LCD_string_write("<1> Next");
      0042D1 90r0Br31         [24]12127 	mov	dptr,#___str_112
      0042D4 75 F0 80         [24]12128 	mov	b,#0x80
      0042D7 12r10r10         [24]12129 	lcall	_LCD_string_write
      0042DA D0 05            [24]12130 	pop	ar5
                                  12131 ;	.\ecen4350_lcd_v4.c:2872: invalidInput = 0;
      0042DC 7F 00            [12]12132 	mov	r7,#0x00
                                  12133 ;	.\ecen4350_lcd_v4.c:2873: page++;
      0042DE 0D               [12]12134 	inc	r5
      0042DF                      12135 00169$:
                                  12136 ;	.\ecen4350_lcd_v4.c:2874: } if (selection == '2') {
      0042DF 78r00            [12]12137 	mov	r0,#_selection
      0042E1 B6 32 3F         [24]12138 	cjne	@r0,#0x32,00171$
                                  12139 ;	.\ecen4350_lcd_v4.c:2875: setCursor(0, 180);
      0042E4 75*00 B4         [24]12140 	mov	_setCursor_PARM_2,#0xb4
      0042E7 75*01 00         [24]12141 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042EA 90 00 00         [24]12142 	mov	dptr,#0x0000
      0042ED C0 05            [24]12143 	push	ar5
      0042EF 12r04rF6         [24]12144 	lcall	_setCursor
                                  12145 ;	.\ecen4350_lcd_v4.c:2876: setColorWhite();
      0042F2 12r16r24         [24]12146 	lcall	_setColorWhite
                                  12147 ;	.\ecen4350_lcd_v4.c:2877: LCD_string_write("\n\n ");
      0042F5 90r0Br81         [24]12148 	mov	dptr,#___str_115
      0042F8 75 F0 80         [24]12149 	mov	b,#0x80
      0042FB 12r10r10         [24]12150 	lcall	_LCD_string_write
                                  12151 ;	.\ecen4350_lcd_v4.c:2878: setColorHighlight2();
      0042FE 12r15rF6         [24]12152 	lcall	_setColorHighlight2
                                  12153 ;	.\ecen4350_lcd_v4.c:2879: LCD_string_write("<2> Previous");
      004301 90r0Br85         [24]12154 	mov	dptr,#___str_116
      004304 75 F0 80         [24]12155 	mov	b,#0x80
      004307 12r10r10         [24]12156 	lcall	_LCD_string_write
      00430A D0 05            [24]12157 	pop	ar5
                                  12158 ;	.\ecen4350_lcd_v4.c:2880: invalidInput = 0;
      00430C 7F 00            [12]12159 	mov	r7,#0x00
                                  12160 ;	.\ecen4350_lcd_v4.c:2881: i--;
      00430E E5*61            [12]12161 	mov	a,_count_sloc1_1_0
      004310 24 FF            [12]12162 	add	a,#0xff
      004312 FC               [12]12163 	mov	r4,a
      004313 E5*62            [12]12164 	mov	a,(_count_sloc1_1_0 + 1)
      004315 34 FF            [12]12165 	addc	a,#0xff
      004317 FE               [12]12166 	mov	r6,a
                                  12167 ;	.\ecen4350_lcd_v4.c:2882: i--;		// two decrements plus next loop increment is equal to one decrement
      004318 EC               [12]12168 	mov	a,r4
      004319 24 FF            [12]12169 	add	a,#0xff
      00431B F5*61            [12]12170 	mov	_count_sloc1_1_0,a
      00431D EE               [12]12171 	mov	a,r6
      00431E 34 FF            [12]12172 	addc	a,#0xff
      004320 F5*62            [12]12173 	mov	(_count_sloc1_1_0 + 1),a
                                  12174 ;	.\ecen4350_lcd_v4.c:2883: page--;		// decrement to previous page
      004322 1D               [12]12175 	dec	r5
      004323                      12176 00171$:
                                  12177 ;	.\ecen4350_lcd_v4.c:2884: } if (selection == '0') {
      004323 78r00            [12]12178 	mov	r0,#_selection
      004325 B6 30 02         [24]12179 	cjne	@r0,#0x30,00591$
      004328 80 03            [24]12180 	sjmp	00592$
      00432A                      12181 00591$:
      00432A 02r42r9D         [24]12182 	ljmp	00174$
      00432D                      12183 00592$:
                                  12184 ;	.\ecen4350_lcd_v4.c:2885: setColorWhite();
      00432D C0 05            [24]12185 	push	ar5
      00432F 12r16r24         [24]12186 	lcall	_setColorWhite
                                  12187 ;	.\ecen4350_lcd_v4.c:2886: setCursor(0, 180);
      004332 75*00 B4         [24]12188 	mov	_setCursor_PARM_2,#0xb4
      004335 75*01 00         [24]12189 	mov	(_setCursor_PARM_2 + 1),#0x00
      004338 90 00 00         [24]12190 	mov	dptr,#0x0000
      00433B 12r04rF6         [24]12191 	lcall	_setCursor
                                  12192 ;	.\ecen4350_lcd_v4.c:2887: LCD_string_write(" <1> Next\n ");
      00433E 90r0BrB4         [24]12193 	mov	dptr,#___str_118
      004341 75 F0 80         [24]12194 	mov	b,#0x80
      004344 12r10r10         [24]12195 	lcall	_LCD_string_write
                                  12196 ;	.\ecen4350_lcd_v4.c:2888: setColorHighlight2();
      004347 12r15rF6         [24]12197 	lcall	_setColorHighlight2
                                  12198 ;	.\ecen4350_lcd_v4.c:2889: LCD_string_write("<0> Exit");
      00434A 90r09r1A         [24]12199 	mov	dptr,#___str_78
      00434D 75 F0 80         [24]12200 	mov	b,#0x80
      004350 12r10r10         [24]12201 	lcall	_LCD_string_write
                                  12202 ;	.\ecen4350_lcd_v4.c:2890: setColorWhite();
      004353 12r16r24         [24]12203 	lcall	_setColorWhite
                                  12204 ;	.\ecen4350_lcd_v4.c:2891: LCD_string_write("\n <2> Previous");
      004356 90r0BrC0         [24]12205 	mov	dptr,#___str_119
      004359 75 F0 80         [24]12206 	mov	b,#0x80
      00435C 12r10r10         [24]12207 	lcall	_LCD_string_write
      00435F D0 05            [24]12208 	pop	ar5
                                  12209 ;	.\ecen4350_lcd_v4.c:2892: exit = 0;		// set exit flag
      004361 78r23            [12]12210 	mov	r0,#_count_exit_65536_708
      004363 76 00            [12]12211 	mov	@r0,#0x00
                                  12212 ;	.\ecen4350_lcd_v4.c:2893: invalidInput = 0;
      004365 7F 00            [12]12213 	mov	r7,#0x00
      004367 02r42r9D         [24]12214 	ljmp	00174$
      00436A                      12215 00178$:
                                  12216 ;	.\ecen4350_lcd_v4.c:2897: if (exit == 0) {		// check exit flag
      00436A 78r23            [12]12217 	mov	r0,#_count_exit_65536_708
      00436C E6               [12]12218 	mov	a,@r0
      00436D 60 0B            [24]12219 	jz	00194$
                                  12220 ;	.\ecen4350_lcd_v4.c:2898: break;			// break out the loop
      00436F                      12221 00212$:
                                  12222 ;	.\ecen4350_lcd_v4.c:2740: for (unsigned int i = 0; i < blockSize; i++) {
      00436F 05*61            [12]12223 	inc	_count_sloc1_1_0
      004371 E4               [12]12224 	clr	a
      004372 B5*61 02         [24]12225 	cjne	a,_count_sloc1_1_0,00594$
      004375 05*62            [12]12226 	inc	(_count_sloc1_1_0 + 1)
      004377                      12227 00594$:
      004377 02r3Fr49         [24]12228 	ljmp	00211$
      00437A                      12229 00194$:
                                  12230 ;	.\ecen4350_lcd_v4.c:2904: if(noneFound) {
      00437A 78r22            [12]12231 	mov	r0,#_count_noneFound_65536_708
      00437C E6               [12]12232 	mov	a,@r0
      00437D 70 03            [24]12233 	jnz	00595$
      00437F 02r3Er54         [24]12234 	ljmp	00202$
      004382                      12235 00595$:
                                  12236 ;	.\ecen4350_lcd_v4.c:2905: setColorRed();
      004382 C0 05            [24]12237 	push	ar5
      004384 12r16r19         [24]12238 	lcall	_setColorRed
                                  12239 ;	.\ecen4350_lcd_v4.c:2906: setCursor(0, 160);
      004387 75*00 A0         [24]12240 	mov	_setCursor_PARM_2,#0xa0
      00438A 75*01 00         [24]12241 	mov	(_setCursor_PARM_2 + 1),#0x00
      00438D 90 00 00         [24]12242 	mov	dptr,#0x0000
      004390 12r04rF6         [24]12243 	lcall	_setCursor
                                  12244 ;	.\ecen4350_lcd_v4.c:2907: LCD_string_write(" Value Not Found\n Within Block\n ");
      004393 90r0BrCF         [24]12245 	mov	dptr,#___str_120
      004396 75 F0 80         [24]12246 	mov	b,#0x80
      004399 12r10r10         [24]12247 	lcall	_LCD_string_write
                                  12248 ;	.\ecen4350_lcd_v4.c:2908: setColorWhite();
      00439C 12r16r24         [24]12249 	lcall	_setColorWhite
                                  12250 ;	.\ecen4350_lcd_v4.c:2909: LCD_string_write("\n <0> Exit");
      00439F 90r0BrF0         [24]12251 	mov	dptr,#___str_121
      0043A2 75 F0 80         [24]12252 	mov	b,#0x80
      0043A5 12r10r10         [24]12253 	lcall	_LCD_string_write
      0043A8 D0 05            [24]12254 	pop	ar5
                                  12255 ;	.\ecen4350_lcd_v4.c:2910: invalidInput = 1;
      0043AA 7F 01            [12]12256 	mov	r7,#0x01
                                  12257 ;	.\ecen4350_lcd_v4.c:2912: while (invalidInput) {
      0043AC                      12258 00197$:
      0043AC EF               [12]12259 	mov	a,r7
      0043AD 70 03            [24]12260 	jnz	00596$
      0043AF 02r3Er54         [24]12261 	ljmp	00202$
      0043B2                      12262 00596$:
                                  12263 ;	.\ecen4350_lcd_v4.c:2913: selection = keyDetect();
      0043B2 C0 07            [24]12264 	push	ar7
      0043B4 C0 05            [24]12265 	push	ar5
      0043B6 12r11r2E         [24]12266 	lcall	_keyDetect
      0043B9 AE 82            [24]12267 	mov	r6,dpl
      0043BB D0 05            [24]12268 	pop	ar5
      0043BD D0 07            [24]12269 	pop	ar7
      0043BF 78r00            [12]12270 	mov	r0,#_selection
      0043C1 A6 06            [24]12271 	mov	@r0,ar6
                                  12272 ;	.\ecen4350_lcd_v4.c:2914: if (selection == '0'){
      0043C3 BE 30 E6         [24]12273 	cjne	r6,#0x30,00197$
                                  12274 ;	.\ecen4350_lcd_v4.c:2915: setCursor(0, 160);
      0043C6 75*00 A0         [24]12275 	mov	_setCursor_PARM_2,#0xa0
      0043C9 75*01 00         [24]12276 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043CC 90 00 00         [24]12277 	mov	dptr,#0x0000
      0043CF C0 05            [24]12278 	push	ar5
      0043D1 12r04rF6         [24]12279 	lcall	_setCursor
                                  12280 ;	.\ecen4350_lcd_v4.c:2916: LCD_string_write("\n\n\n ");
      0043D4 90r0BrFB         [24]12281 	mov	dptr,#___str_122
      0043D7 75 F0 80         [24]12282 	mov	b,#0x80
      0043DA 12r10r10         [24]12283 	lcall	_LCD_string_write
                                  12284 ;	.\ecen4350_lcd_v4.c:2917: setColorHighlight2();
      0043DD 12r15rF6         [24]12285 	lcall	_setColorHighlight2
                                  12286 ;	.\ecen4350_lcd_v4.c:2918: LCD_string_write("<0> Exit");
      0043E0 90r09r1A         [24]12287 	mov	dptr,#___str_78
      0043E3 75 F0 80         [24]12288 	mov	b,#0x80
      0043E6 12r10r10         [24]12289 	lcall	_LCD_string_write
      0043E9 D0 05            [24]12290 	pop	ar5
                                  12291 ;	.\ecen4350_lcd_v4.c:2919: invalidInput = 0;
      0043EB 7F 00            [12]12292 	mov	r7,#0x00
                                  12293 ;	.\ecen4350_lcd_v4.c:2920: exit = 0;
      0043ED 78r23            [12]12294 	mov	r0,#_count_exit_65536_708
      0043EF 76 00            [12]12295 	mov	@r0,#0x00
      0043F1 80 B9            [24]12296 	sjmp	00197$
      0043F3                      12297 00204$:
                                  12298 ;	.\ecen4350_lcd_v4.c:2925: delay(80);
      0043F3 90 00 50         [24]12299 	mov	dptr,#0x0050
                                  12300 ;	.\ecen4350_lcd_v4.c:2926: return;
                                  12301 ;	.\ecen4350_lcd_v4.c:2927: }
      0043F6 02r00rE0         [24]12302 	ljmp	_delay
                                  12303 ;------------------------------------------------------------
                                  12304 ;Allocation info for local variables in function 'check'
                                  12305 ;------------------------------------------------------------
                                  12306 ;temp                      Allocated to registers r7 
                                  12307 ;------------------------------------------------------------
                                  12308 ;	.\ecen4350_lcd_v4.c:2929: void check() {
                                  12309 ;	-----------------------------------------
                                  12310 ;	 function check
                                  12311 ;	-----------------------------------------
      0043F9                      12312 _check:
                                  12313 ;	.\ecen4350_lcd_v4.c:2931: clearLCD();
      0043F9 12r0Dr93         [24]12314 	lcall	_clearLCD
                                  12315 ;	.\ecen4350_lcd_v4.c:2934: fillTop(GRAY);
      0043FC 90 D6 BA         [24]12316 	mov	dptr,#0xd6ba
      0043FF 12r0BrC6         [24]12317 	lcall	_fillTop
                                  12318 ;	.\ecen4350_lcd_v4.c:2935: setTextSize(5);
      004402 75 82 05         [24]12319 	mov	dpl,#0x05
      004405 12r05r10         [24]12320 	lcall	_setTextSize
                                  12321 ;	.\ecen4350_lcd_v4.c:2936: setColorMenu();
      004408 12r16r0D         [24]12322 	lcall	_setColorMenu
                                  12323 ;	.\ecen4350_lcd_v4.c:2937: setCursor(15, 0);
      00440B E4               [12]12324 	clr	a
      00440C F5*00            [12]12325 	mov	_setCursor_PARM_2,a
      00440E F5*01            [12]12326 	mov	(_setCursor_PARM_2 + 1),a
      004410 90 00 0F         [24]12327 	mov	dptr,#0x000f
      004413 12r04rF6         [24]12328 	lcall	_setCursor
                                  12329 ;	.\ecen4350_lcd_v4.c:2938: LCD_string_write("[CHECK]\n");
      004416 90r0Cr3B         [24]12330 	mov	dptr,#___str_128
      004419 75 F0 80         [24]12331 	mov	b,#0x80
      00441C 12r10r10         [24]12332 	lcall	_LCD_string_write
                                  12333 ;	.\ecen4350_lcd_v4.c:2939: setColorDefault();
      00441F 12r15rD4         [24]12334 	lcall	_setColorDefault
                                  12335 ;	.\ecen4350_lcd_v4.c:2940: setTextSize(2);
      004422 75 82 02         [24]12336 	mov	dpl,#0x02
      004425 12r05r10         [24]12337 	lcall	_setTextSize
                                  12338 ;	.\ecen4350_lcd_v4.c:2941: setCursor(0, 60);
      004428 75*00 3C         [24]12339 	mov	_setCursor_PARM_2,#0x3c
      00442B 75*01 00         [24]12340 	mov	(_setCursor_PARM_2 + 1),#0x00
      00442E 90 00 00         [24]12341 	mov	dptr,#0x0000
      004431 12r04rF6         [24]12342 	lcall	_setCursor
                                  12343 ;	.\ecen4350_lcd_v4.c:2942: LCD_string_write(" Enter Value:\n");
      004434 90r0Cr44         [24]12344 	mov	dptr,#___str_129
      004437 75 F0 80         [24]12345 	mov	b,#0x80
      00443A 12r10r10         [24]12346 	lcall	_LCD_string_write
                                  12347 ;	.\ecen4350_lcd_v4.c:2943: setColorGray();
      00443D 12r16r02         [24]12348 	lcall	_setColorGray
                                  12349 ;	.\ecen4350_lcd_v4.c:2944: LCD_string_write(" __");
      004440 90r08r01         [24]12350 	mov	dptr,#___str_62
      004443 75 F0 80         [24]12351 	mov	b,#0x80
      004446 12r10r10         [24]12352 	lcall	_LCD_string_write
                                  12353 ;	.\ecen4350_lcd_v4.c:2946: setCursor(0,60);
      004449 75*00 3C         [24]12354 	mov	_setCursor_PARM_2,#0x3c
      00444C 75*01 00         [24]12355 	mov	(_setCursor_PARM_2 + 1),#0x00
      00444F 90 00 00         [24]12356 	mov	dptr,#0x0000
      004452 12r04rF6         [24]12357 	lcall	_setCursor
                                  12358 ;	.\ecen4350_lcd_v4.c:2947: LCD_string_write("\n ");
      004455 90r08r5F         [24]12359 	mov	dptr,#___str_67
      004458 75 F0 80         [24]12360 	mov	b,#0x80
      00445B 12r10r10         [24]12361 	lcall	_LCD_string_write
                                  12362 ;	.\ecen4350_lcd_v4.c:2948: setColorHighlight1();
      00445E 12r15rEA         [24]12363 	lcall	_setColorHighlight1
                                  12364 ;	.\ecen4350_lcd_v4.c:2949: selection = 0;
      004461 78r00            [12]12365 	mov	r0,#_selection
      004463 76 00            [12]12366 	mov	@r0,#0x00
                                  12367 ;	.\ecen4350_lcd_v4.c:2950: temp = keyDetect();
      004465 12r11r2E         [24]12368 	lcall	_keyDetect
                                  12369 ;	.\ecen4350_lcd_v4.c:2951: write(temp);
      004468 AF 82            [24]12370 	mov  r7,dpl
      00446A C0 07            [24]12371 	push	ar7
      00446C 12r0FrAA         [24]12372 	lcall	_write
      00446F D0 07            [24]12373 	pop	ar7
                                  12374 ;	.\ecen4350_lcd_v4.c:2952: temp = ASCIItoHex(temp);
      004471 8F 82            [24]12375 	mov	dpl,r7
      004473 12r13r9C         [24]12376 	lcall	_ASCIItoHex
                                  12377 ;	.\ecen4350_lcd_v4.c:2953: selection |= temp * 16;
      004476 E5 82            [12]12378 	mov	a,dpl
      004478 C4               [12]12379 	swap	a
      004479 54 F0            [12]12380 	anl	a,#0xf0
      00447B FF               [12]12381 	mov	r7,a
      00447C 78r00            [12]12382 	mov	r0,#_selection
      00447E E6               [12]12383 	mov	a,@r0
      00447F 4F               [12]12384 	orl	a,r7
      004480 78r00            [12]12385 	mov	r0,#_selection
      004482 F6               [12]12386 	mov	@r0,a
                                  12387 ;	.\ecen4350_lcd_v4.c:2954: temp = keyDetect();
      004483 12r11r2E         [24]12388 	lcall	_keyDetect
                                  12389 ;	.\ecen4350_lcd_v4.c:2955: write(temp);
      004486 AF 82            [24]12390 	mov  r7,dpl
      004488 C0 07            [24]12391 	push	ar7
      00448A 12r0FrAA         [24]12392 	lcall	_write
      00448D D0 07            [24]12393 	pop	ar7
                                  12394 ;	.\ecen4350_lcd_v4.c:2956: temp = ASCIItoHex(temp);
      00448F 8F 82            [24]12395 	mov	dpl,r7
      004491 12r13r9C         [24]12396 	lcall	_ASCIItoHex
      004494 AF 82            [24]12397 	mov	r7,dpl
                                  12398 ;	.\ecen4350_lcd_v4.c:2957: selection |= temp;
      004496 78r00            [12]12399 	mov	r0,#_selection
      004498 EF               [12]12400 	mov	a,r7
      004499 46               [12]12401 	orl	a,@r0
      00449A F6               [12]12402 	mov	@r0,a
                                  12403 ;	.\ecen4350_lcd_v4.c:2958: setColorDefault();
      00449B 12r15rD4         [24]12404 	lcall	_setColorDefault
                                  12405 ;	.\ecen4350_lcd_v4.c:2959: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      00449E 90r0Cr53         [24]12406 	mov	dptr,#___str_130
      0044A1 75 F0 80         [24]12407 	mov	b,#0x80
      0044A4 12r10r10         [24]12408 	lcall	_LCD_string_write
                                  12409 ;	.\ecen4350_lcd_v4.c:2960: writeAllRAM(selection);
      0044A7 78r00            [12]12410 	mov	r0,#_selection
      0044A9 86 82            [24]12411 	mov	dpl,@r0
      0044AB 12r00r22         [24]12412 	lcall	_writeAllRAM
                                  12413 ;	.\ecen4350_lcd_v4.c:2961: setColorWhite();
      0044AE 12r16r24         [24]12414 	lcall	_setColorWhite
                                  12415 ;	.\ecen4350_lcd_v4.c:2962: LCD_string_write("\n Verifying write...");
      0044B1 90r0Cr80         [24]12416 	mov	dptr,#___str_131
      0044B4 75 F0 80         [24]12417 	mov	b,#0x80
      0044B7 12r10r10         [24]12418 	lcall	_LCD_string_write
                                  12419 ;	.\ecen4350_lcd_v4.c:2963: checkAllRAM(selection);
      0044BA 78r00            [12]12420 	mov	r0,#_selection
      0044BC 86 82            [24]12421 	mov	dpl,@r0
      0044BE 12r00r51         [24]12422 	lcall	_checkAllRAM
                                  12423 ;	.\ecen4350_lcd_v4.c:2964: LCD_string_write("\n Complete.");
      0044C1 90r0Cr95         [24]12424 	mov	dptr,#___str_132
      0044C4 75 F0 80         [24]12425 	mov	b,#0x80
      0044C7 12r10r10         [24]12426 	lcall	_LCD_string_write
                                  12427 ;	.\ecen4350_lcd_v4.c:2965: setTextColor(BLUE, colorBackground);
      0044CA E4               [12]12428 	clr	a
      0044CB F5*00            [12]12429 	mov	_setTextColor_PARM_2,a
      0044CD F5*01            [12]12430 	mov	(_setTextColor_PARM_2 + 1),a
      0044CF 90 00 1F         [24]12431 	mov	dptr,#0x001f
      0044D2 12r05r03         [24]12432 	lcall	_setTextColor
                                  12433 ;	.\ecen4350_lcd_v4.c:2966: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      0044D5 90r0CrA1         [24]12434 	mov	dptr,#___str_133
      0044D8 75 F0 80         [24]12435 	mov	b,#0x80
      0044DB 12r10r10         [24]12436 	lcall	_LCD_string_write
                                  12437 ;	.\ecen4350_lcd_v4.c:2967: selection = ~selection;
      0044DE 78r00            [12]12438 	mov	r0,#_selection
      0044E0 E6               [12]12439 	mov	a,@r0
      0044E1 F4               [12]12440 	cpl	a
      0044E2 F6               [12]12441 	mov	@r0,a
                                  12442 ;	.\ecen4350_lcd_v4.c:2968: setColorSelect();
      0044E3 12r15rDF         [24]12443 	lcall	_setColorSelect
                                  12444 ;	.\ecen4350_lcd_v4.c:2969: LCD_string_write("\n Writing new byte...");
      0044E6 90r0CrC5         [24]12445 	mov	dptr,#___str_134
      0044E9 75 F0 80         [24]12446 	mov	b,#0x80
      0044EC 12r10r10         [24]12447 	lcall	_LCD_string_write
                                  12448 ;	.\ecen4350_lcd_v4.c:2970: writeAllRAM(selection);
      0044EF 78r00            [12]12449 	mov	r0,#_selection
      0044F1 86 82            [24]12450 	mov	dpl,@r0
      0044F3 12r00r22         [24]12451 	lcall	_writeAllRAM
                                  12452 ;	.\ecen4350_lcd_v4.c:2971: setColorYellow();
      0044F6 12r16r3A         [24]12453 	lcall	_setColorYellow
                                  12454 ;	.\ecen4350_lcd_v4.c:2972: LCD_string_write("\n Verifying write...");
      0044F9 90r0Cr80         [24]12455 	mov	dptr,#___str_131
      0044FC 75 F0 80         [24]12456 	mov	b,#0x80
      0044FF 12r10r10         [24]12457 	lcall	_LCD_string_write
                                  12458 ;	.\ecen4350_lcd_v4.c:2973: checkAllRAM(selection);
      004502 78r00            [12]12459 	mov	r0,#_selection
      004504 86 82            [24]12460 	mov	dpl,@r0
      004506 12r00r51         [24]12461 	lcall	_checkAllRAM
                                  12462 ;	.\ecen4350_lcd_v4.c:2974: setColorGreen();
      004509 12r16r2F         [24]12463 	lcall	_setColorGreen
                                  12464 ;	.\ecen4350_lcd_v4.c:2975: LCD_string_write("\n\n Check Complete.");
      00450C 90r0CrDB         [24]12465 	mov	dptr,#___str_135
      00450F 75 F0 80         [24]12466 	mov	b,#0x80
      004512 12r10r10         [24]12467 	lcall	_LCD_string_write
                                  12468 ;	.\ecen4350_lcd_v4.c:2976: delay(120);
      004515 90 00 78         [24]12469 	mov	dptr,#0x0078
                                  12470 ;	.\ecen4350_lcd_v4.c:2977: return;
                                  12471 ;	.\ecen4350_lcd_v4.c:2978: }
      004518 02r00rE0         [24]12472 	ljmp	_delay
                                  12473 ;------------------------------------------------------------
                                  12474 ;Allocation info for local variables in function 'uart'
                                  12475 ;------------------------------------------------------------
                                  12476 ;initLock                  Allocated to registers r7 
                                  12477 ;temp                      Allocated to registers r6 
                                  12478 ;------------------------------------------------------------
                                  12479 ;	.\ecen4350_lcd_v4.c:2980: void uart() {
                                  12480 ;	-----------------------------------------
                                  12481 ;	 function uart
                                  12482 ;	-----------------------------------------
      00451B                      12483 _uart:
                                  12484 ;	.\ecen4350_lcd_v4.c:2981: __idata u8 initLock = 0;
      00451B 7F 00            [12]12485 	mov	r7,#0x00
                                  12486 ;	.\ecen4350_lcd_v4.c:2982: __idata u8 temp = 0;
      00451D 7E 00            [12]12487 	mov	r6,#0x00
                                  12488 ;	.\ecen4350_lcd_v4.c:2985: uartMenu:
      00451F                      12489 00101$:
                                  12490 ;	.\ecen4350_lcd_v4.c:2986: clearLCD();
      00451F C0 07            [24]12491 	push	ar7
      004521 C0 06            [24]12492 	push	ar6
      004523 12r0Dr93         [24]12493 	lcall	_clearLCD
                                  12494 ;	.\ecen4350_lcd_v4.c:2987: fillTop(GRAY);
      004526 90 D6 BA         [24]12495 	mov	dptr,#0xd6ba
      004529 12r0BrC6         [24]12496 	lcall	_fillTop
                                  12497 ;	.\ecen4350_lcd_v4.c:2988: setTextSize(5);
      00452C 75 82 05         [24]12498 	mov	dpl,#0x05
      00452F 12r05r10         [24]12499 	lcall	_setTextSize
                                  12500 ;	.\ecen4350_lcd_v4.c:2989: setColorMenu();
      004532 12r16r0D         [24]12501 	lcall	_setColorMenu
                                  12502 ;	.\ecen4350_lcd_v4.c:2990: setCursor(30, 0);
      004535 E4               [12]12503 	clr	a
      004536 F5*00            [12]12504 	mov	_setCursor_PARM_2,a
      004538 F5*01            [12]12505 	mov	(_setCursor_PARM_2 + 1),a
      00453A 90 00 1E         [24]12506 	mov	dptr,#0x001e
      00453D 12r04rF6         [24]12507 	lcall	_setCursor
                                  12508 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write("[UART]\n");
      004540 90r0CrEE         [24]12509 	mov	dptr,#___str_136
      004543 75 F0 80         [24]12510 	mov	b,#0x80
      004546 12r10r10         [24]12511 	lcall	_LCD_string_write
                                  12512 ;	.\ecen4350_lcd_v4.c:2994: setTextSize(2);
      004549 75 82 02         [24]12513 	mov	dpl,#0x02
      00454C 12r05r10         [24]12514 	lcall	_setTextSize
                                  12515 ;	.\ecen4350_lcd_v4.c:2995: setColorDefault();
      00454F 12r15rD4         [24]12516 	lcall	_setColorDefault
      004552 D0 06            [24]12517 	pop	ar6
      004554 D0 07            [24]12518 	pop	ar7
                                  12519 ;	.\ecen4350_lcd_v4.c:2996: if (baudSet == 1){
      004556 78r02            [12]12520 	mov	r0,#_baudSet
      004558 B6 01 02         [24]12521 	cjne	@r0,#0x01,00629$
      00455B 80 03            [24]12522 	sjmp	00630$
      00455D                      12523 00629$:
      00455D 02r45rFC         [24]12524 	ljmp	00114$
      004560                      12525 00630$:
                                  12526 ;	.\ecen4350_lcd_v4.c:2997: setCursor(0, 60);
      004560 75*00 3C         [24]12527 	mov	_setCursor_PARM_2,#0x3c
      004563 75*01 00         [24]12528 	mov	(_setCursor_PARM_2 + 1),#0x00
      004566 90 00 00         [24]12529 	mov	dptr,#0x0000
      004569 C0 07            [24]12530 	push	ar7
      00456B C0 06            [24]12531 	push	ar6
      00456D 12r04rF6         [24]12532 	lcall	_setCursor
                                  12533 ;	.\ecen4350_lcd_v4.c:2998: LCD_string_write(" <1> ");
      004570 90r0CrF6         [24]12534 	mov	dptr,#___str_137
      004573 75 F0 80         [24]12535 	mov	b,#0x80
      004576 12r10r10         [24]12536 	lcall	_LCD_string_write
      004579 D0 06            [24]12537 	pop	ar6
      00457B D0 07            [24]12538 	pop	ar7
                                  12539 ;	.\ecen4350_lcd_v4.c:2999: if (baudType == 0x1) {
      00457D 78r07            [12]12540 	mov	r0,#_baudType
      00457F B6 01 11         [24]12541 	cjne	@r0,#0x01,00104$
                                  12542 ;	.\ecen4350_lcd_v4.c:3000: LCD_string_write("1200");
      004582 90r0CrFC         [24]12543 	mov	dptr,#___str_138
      004585 75 F0 80         [24]12544 	mov	b,#0x80
      004588 C0 07            [24]12545 	push	ar7
      00458A C0 06            [24]12546 	push	ar6
      00458C 12r10r10         [24]12547 	lcall	_LCD_string_write
      00458F D0 06            [24]12548 	pop	ar6
      004591 D0 07            [24]12549 	pop	ar7
      004593                      12550 00104$:
                                  12551 ;	.\ecen4350_lcd_v4.c:3002: if (baudType == 0x2) {
      004593 78r07            [12]12552 	mov	r0,#_baudType
      004595 B6 02 11         [24]12553 	cjne	@r0,#0x02,00106$
                                  12554 ;	.\ecen4350_lcd_v4.c:3003: LCD_string_write("2400");
      004598 90r0Dr01         [24]12555 	mov	dptr,#___str_139
      00459B 75 F0 80         [24]12556 	mov	b,#0x80
      00459E C0 07            [24]12557 	push	ar7
      0045A0 C0 06            [24]12558 	push	ar6
      0045A2 12r10r10         [24]12559 	lcall	_LCD_string_write
      0045A5 D0 06            [24]12560 	pop	ar6
      0045A7 D0 07            [24]12561 	pop	ar7
      0045A9                      12562 00106$:
                                  12563 ;	.\ecen4350_lcd_v4.c:3004: } if (baudType == 0x3){
      0045A9 78r07            [12]12564 	mov	r0,#_baudType
      0045AB B6 03 11         [24]12565 	cjne	@r0,#0x03,00108$
                                  12566 ;	.\ecen4350_lcd_v4.c:3005: LCD_string_write("4800");
      0045AE 90r0Dr06         [24]12567 	mov	dptr,#___str_140
      0045B1 75 F0 80         [24]12568 	mov	b,#0x80
      0045B4 C0 07            [24]12569 	push	ar7
      0045B6 C0 06            [24]12570 	push	ar6
      0045B8 12r10r10         [24]12571 	lcall	_LCD_string_write
      0045BB D0 06            [24]12572 	pop	ar6
      0045BD D0 07            [24]12573 	pop	ar7
      0045BF                      12574 00108$:
                                  12575 ;	.\ecen4350_lcd_v4.c:3006: } if (baudType == 0x4){
      0045BF 78r07            [12]12576 	mov	r0,#_baudType
      0045C1 B6 04 11         [24]12577 	cjne	@r0,#0x04,00110$
                                  12578 ;	.\ecen4350_lcd_v4.c:3007: LCD_string_write("9600");
      0045C4 90r0Dr0B         [24]12579 	mov	dptr,#___str_141
      0045C7 75 F0 80         [24]12580 	mov	b,#0x80
      0045CA C0 07            [24]12581 	push	ar7
      0045CC C0 06            [24]12582 	push	ar6
      0045CE 12r10r10         [24]12583 	lcall	_LCD_string_write
      0045D1 D0 06            [24]12584 	pop	ar6
      0045D3 D0 07            [24]12585 	pop	ar7
      0045D5                      12586 00110$:
                                  12587 ;	.\ecen4350_lcd_v4.c:3008: } if (baudType == 0x5) {
      0045D5 78r07            [12]12588 	mov	r0,#_baudType
      0045D7 B6 05 11         [24]12589 	cjne	@r0,#0x05,00112$
                                  12590 ;	.\ecen4350_lcd_v4.c:3009: LCD_string_write("19200");
      0045DA 90r0Dr10         [24]12591 	mov	dptr,#___str_142
      0045DD 75 F0 80         [24]12592 	mov	b,#0x80
      0045E0 C0 07            [24]12593 	push	ar7
      0045E2 C0 06            [24]12594 	push	ar6
      0045E4 12r10r10         [24]12595 	lcall	_LCD_string_write
      0045E7 D0 06            [24]12596 	pop	ar6
      0045E9 D0 07            [24]12597 	pop	ar7
      0045EB                      12598 00112$:
                                  12599 ;	.\ecen4350_lcd_v4.c:3011: LCD_string_write(" baud\n");
      0045EB 90r0Dr16         [24]12600 	mov	dptr,#___str_143
      0045EE 75 F0 80         [24]12601 	mov	b,#0x80
      0045F1 C0 07            [24]12602 	push	ar7
      0045F3 C0 06            [24]12603 	push	ar6
      0045F5 12r10r10         [24]12604 	lcall	_LCD_string_write
      0045F8 D0 06            [24]12605 	pop	ar6
      0045FA D0 07            [24]12606 	pop	ar7
      0045FC                      12607 00114$:
                                  12608 ;	.\ecen4350_lcd_v4.c:3012: } if (baudSet == 0) {
      0045FC 78r02            [12]12609 	mov	r0,#_baudSet
      0045FE E6               [12]12610 	mov	a,@r0
                                  12611 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 60);
      0045FF 70 1C            [24]12612 	jnz	00116$
      004601 75*00 3C         [24]12613 	mov	_setCursor_PARM_2,#0x3c
      004604 F5*01            [12]12614 	mov	(_setCursor_PARM_2 + 1),a
      004606 90 00 00         [24]12615 	mov	dptr,#0x0000
      004609 C0 07            [24]12616 	push	ar7
      00460B C0 06            [24]12617 	push	ar6
      00460D 12r04rF6         [24]12618 	lcall	_setCursor
                                  12619 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <1> Set Data Rate\n");
      004610 90r0Dr1D         [24]12620 	mov	dptr,#___str_144
      004613 75 F0 80         [24]12621 	mov	b,#0x80
      004616 12r10r10         [24]12622 	lcall	_LCD_string_write
      004619 D0 06            [24]12623 	pop	ar6
      00461B D0 07            [24]12624 	pop	ar7
      00461D                      12625 00116$:
                                  12626 ;	.\ecen4350_lcd_v4.c:3016: if (bitSet == 1) {
      00461D 78r03            [12]12627 	mov	r0,#_bitSet
      00461F B6 01 5A         [24]12628 	cjne	@r0,#0x01,00122$
                                  12629 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 100);
      004622 75*00 64         [24]12630 	mov	_setCursor_PARM_2,#0x64
      004625 75*01 00         [24]12631 	mov	(_setCursor_PARM_2 + 1),#0x00
      004628 90 00 00         [24]12632 	mov	dptr,#0x0000
      00462B C0 07            [24]12633 	push	ar7
      00462D C0 06            [24]12634 	push	ar6
      00462F 12r04rF6         [24]12635 	lcall	_setCursor
                                  12636 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <2> ");
      004632 90r0Dr31         [24]12637 	mov	dptr,#___str_145
      004635 75 F0 80         [24]12638 	mov	b,#0x80
      004638 12r10r10         [24]12639 	lcall	_LCD_string_write
      00463B D0 06            [24]12640 	pop	ar6
      00463D D0 07            [24]12641 	pop	ar7
                                  12642 ;	.\ecen4350_lcd_v4.c:3019: if (_8b == 1) {
      00463F 78r09            [12]12643 	mov	r0,#__8b
      004641 B6 01 11         [24]12644 	cjne	@r0,#0x01,00118$
                                  12645 ;	.\ecen4350_lcd_v4.c:3020: LCD_string_write("8");
      004644 90r0Dr37         [24]12646 	mov	dptr,#___str_146
      004647 75 F0 80         [24]12647 	mov	b,#0x80
      00464A C0 07            [24]12648 	push	ar7
      00464C C0 06            [24]12649 	push	ar6
      00464E 12r10r10         [24]12650 	lcall	_LCD_string_write
      004651 D0 06            [24]12651 	pop	ar6
      004653 D0 07            [24]12652 	pop	ar7
      004655                      12653 00118$:
                                  12654 ;	.\ecen4350_lcd_v4.c:3021: } if (_8b == 0) {
      004655 78r09            [12]12655 	mov	r0,#__8b
      004657 E6               [12]12656 	mov	a,@r0
      004658 70 11            [24]12657 	jnz	00120$
                                  12658 ;	.\ecen4350_lcd_v4.c:3022: LCD_string_write("9");
      00465A 90r0Dr39         [24]12659 	mov	dptr,#___str_147
      00465D 75 F0 80         [24]12660 	mov	b,#0x80
      004660 C0 07            [24]12661 	push	ar7
      004662 C0 06            [24]12662 	push	ar6
      004664 12r10r10         [24]12663 	lcall	_LCD_string_write
      004667 D0 06            [24]12664 	pop	ar6
      004669 D0 07            [24]12665 	pop	ar7
      00466B                      12666 00120$:
                                  12667 ;	.\ecen4350_lcd_v4.c:3024: LCD_string_write("-bit Mode\n");
      00466B 90r0Dr3B         [24]12668 	mov	dptr,#___str_148
      00466E 75 F0 80         [24]12669 	mov	b,#0x80
      004671 C0 07            [24]12670 	push	ar7
      004673 C0 06            [24]12671 	push	ar6
      004675 12r10r10         [24]12672 	lcall	_LCD_string_write
      004678 D0 06            [24]12673 	pop	ar6
      00467A D0 07            [24]12674 	pop	ar7
      00467C                      12675 00122$:
                                  12676 ;	.\ecen4350_lcd_v4.c:3025: } if (bitSet == 0) {
      00467C 78r03            [12]12677 	mov	r0,#_bitSet
      00467E E6               [12]12678 	mov	a,@r0
                                  12679 ;	.\ecen4350_lcd_v4.c:3026: setCursor(0, 100);
      00467F 70 1C            [24]12680 	jnz	00124$
      004681 75*00 64         [24]12681 	mov	_setCursor_PARM_2,#0x64
      004684 F5*01            [12]12682 	mov	(_setCursor_PARM_2 + 1),a
      004686 90 00 00         [24]12683 	mov	dptr,#0x0000
      004689 C0 07            [24]12684 	push	ar7
      00468B C0 06            [24]12685 	push	ar6
      00468D 12r04rF6         [24]12686 	lcall	_setCursor
                                  12687 ;	.\ecen4350_lcd_v4.c:3027: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      004690 90r0Dr46         [24]12688 	mov	dptr,#___str_149
      004693 75 F0 80         [24]12689 	mov	b,#0x80
      004696 12r10r10         [24]12690 	lcall	_LCD_string_write
      004699 D0 06            [24]12691 	pop	ar6
      00469B D0 07            [24]12692 	pop	ar7
      00469D                      12693 00124$:
                                  12694 ;	.\ecen4350_lcd_v4.c:3028: } if (paritySet == 1) {
      00469D 78r04            [12]12695 	mov	r0,#_paritySet
      00469F B6 01 02         [24]12696 	cjne	@r0,#0x01,00648$
      0046A2 80 03            [24]12697 	sjmp	00649$
      0046A4                      12698 00648$:
      0046A4 02r47r6F         [24]12699 	ljmp	00140$
      0046A7                      12700 00649$:
                                  12701 ;	.\ecen4350_lcd_v4.c:3029: setCursor(0, 140);
      0046A7 75*00 8C         [24]12702 	mov	_setCursor_PARM_2,#0x8c
      0046AA 75*01 00         [24]12703 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046AD 90 00 00         [24]12704 	mov	dptr,#0x0000
      0046B0 C0 07            [24]12705 	push	ar7
      0046B2 C0 06            [24]12706 	push	ar6
      0046B4 12r04rF6         [24]12707 	lcall	_setCursor
                                  12708 ;	.\ecen4350_lcd_v4.c:3030: LCD_string_write(" <3> ");
      0046B7 90r0Dr6E         [24]12709 	mov	dptr,#___str_150
      0046BA 75 F0 80         [24]12710 	mov	b,#0x80
      0046BD 12r10r10         [24]12711 	lcall	_LCD_string_write
      0046C0 D0 06            [24]12712 	pop	ar6
      0046C2 D0 07            [24]12713 	pop	ar7
                                  12714 ;	.\ecen4350_lcd_v4.c:3031: if (pType == 0x1) {
      0046C4 78r08            [12]12715 	mov	r0,#_pType
      0046C6 B6 01 11         [24]12716 	cjne	@r0,#0x01,00126$
                                  12717 ;	.\ecen4350_lcd_v4.c:3032: LCD_string_write("No ");
      0046C9 90r0Dr74         [24]12718 	mov	dptr,#___str_151
      0046CC 75 F0 80         [24]12719 	mov	b,#0x80
      0046CF C0 07            [24]12720 	push	ar7
      0046D1 C0 06            [24]12721 	push	ar6
      0046D3 12r10r10         [24]12722 	lcall	_LCD_string_write
      0046D6 D0 06            [24]12723 	pop	ar6
      0046D8 D0 07            [24]12724 	pop	ar7
      0046DA                      12725 00126$:
                                  12726 ;	.\ecen4350_lcd_v4.c:3033: } if (pType == 0x2) {
      0046DA 78r08            [12]12727 	mov	r0,#_pType
      0046DC B6 02 11         [24]12728 	cjne	@r0,#0x02,00128$
                                  12729 ;	.\ecen4350_lcd_v4.c:3034: LCD_string_write("Even ");
      0046DF 90r0Dr78         [24]12730 	mov	dptr,#___str_152
      0046E2 75 F0 80         [24]12731 	mov	b,#0x80
      0046E5 C0 07            [24]12732 	push	ar7
      0046E7 C0 06            [24]12733 	push	ar6
      0046E9 12r10r10         [24]12734 	lcall	_LCD_string_write
      0046EC D0 06            [24]12735 	pop	ar6
      0046EE D0 07            [24]12736 	pop	ar7
      0046F0                      12737 00128$:
                                  12738 ;	.\ecen4350_lcd_v4.c:3035: } if (pType == 0x3) {
      0046F0 78r08            [12]12739 	mov	r0,#_pType
      0046F2 B6 03 11         [24]12740 	cjne	@r0,#0x03,00130$
                                  12741 ;	.\ecen4350_lcd_v4.c:3036: LCD_string_write("Even ");
      0046F5 90r0Dr78         [24]12742 	mov	dptr,#___str_152
      0046F8 75 F0 80         [24]12743 	mov	b,#0x80
      0046FB C0 07            [24]12744 	push	ar7
      0046FD C0 06            [24]12745 	push	ar6
      0046FF 12r10r10         [24]12746 	lcall	_LCD_string_write
      004702 D0 06            [24]12747 	pop	ar6
      004704 D0 07            [24]12748 	pop	ar7
      004706                      12749 00130$:
                                  12750 ;	.\ecen4350_lcd_v4.c:3037: } if (pType == 0x4) {	
      004706 78r08            [12]12751 	mov	r0,#_pType
      004708 B6 04 11         [24]12752 	cjne	@r0,#0x04,00132$
                                  12753 ;	.\ecen4350_lcd_v4.c:3038: LCD_string_write("Odd ");
      00470B 90r0Dr7E         [24]12754 	mov	dptr,#___str_153
      00470E 75 F0 80         [24]12755 	mov	b,#0x80
      004711 C0 07            [24]12756 	push	ar7
      004713 C0 06            [24]12757 	push	ar6
      004715 12r10r10         [24]12758 	lcall	_LCD_string_write
      004718 D0 06            [24]12759 	pop	ar6
      00471A D0 07            [24]12760 	pop	ar7
      00471C                      12761 00132$:
                                  12762 ;	.\ecen4350_lcd_v4.c:3039: } if (pType == 0x5) {
      00471C 78r08            [12]12763 	mov	r0,#_pType
      00471E B6 05 11         [24]12764 	cjne	@r0,#0x05,00134$
                                  12765 ;	.\ecen4350_lcd_v4.c:3040: LCD_string_write("Odd ");
      004721 90r0Dr7E         [24]12766 	mov	dptr,#___str_153
      004724 75 F0 80         [24]12767 	mov	b,#0x80
      004727 C0 07            [24]12768 	push	ar7
      004729 C0 06            [24]12769 	push	ar6
      00472B 12r10r10         [24]12770 	lcall	_LCD_string_write
      00472E D0 06            [24]12771 	pop	ar6
      004730 D0 07            [24]12772 	pop	ar7
      004732                      12773 00134$:
                                  12774 ;	.\ecen4350_lcd_v4.c:3042: if (pType == 0x7) {
      004732 78r08            [12]12775 	mov	r0,#_pType
      004734 B6 07 11         [24]12776 	cjne	@r0,#0x07,00136$
                                  12777 ;	.\ecen4350_lcd_v4.c:3043: LCD_string_write("No ");
      004737 90r0Dr74         [24]12778 	mov	dptr,#___str_151
      00473A 75 F0 80         [24]12779 	mov	b,#0x80
      00473D C0 07            [24]12780 	push	ar7
      00473F C0 06            [24]12781 	push	ar6
      004741 12r10r10         [24]12782 	lcall	_LCD_string_write
      004744 D0 06            [24]12783 	pop	ar6
      004746 D0 07            [24]12784 	pop	ar7
      004748                      12785 00136$:
                                  12786 ;	.\ecen4350_lcd_v4.c:3044: } if (pType == 0x8) {
      004748 78r08            [12]12787 	mov	r0,#_pType
      00474A B6 08 11         [24]12788 	cjne	@r0,#0x08,00138$
                                  12789 ;	.\ecen4350_lcd_v4.c:3045: LCD_string_write("Even ");
      00474D 90r0Dr78         [24]12790 	mov	dptr,#___str_152
      004750 75 F0 80         [24]12791 	mov	b,#0x80
      004753 C0 07            [24]12792 	push	ar7
      004755 C0 06            [24]12793 	push	ar6
      004757 12r10r10         [24]12794 	lcall	_LCD_string_write
      00475A D0 06            [24]12795 	pop	ar6
      00475C D0 07            [24]12796 	pop	ar7
      00475E                      12797 00138$:
                                  12798 ;	.\ecen4350_lcd_v4.c:3047: LCD_string_write("Parity\n");
      00475E 90r0Dr83         [24]12799 	mov	dptr,#___str_154
      004761 75 F0 80         [24]12800 	mov	b,#0x80
      004764 C0 07            [24]12801 	push	ar7
      004766 C0 06            [24]12802 	push	ar6
      004768 12r10r10         [24]12803 	lcall	_LCD_string_write
      00476B D0 06            [24]12804 	pop	ar6
      00476D D0 07            [24]12805 	pop	ar7
      00476F                      12806 00140$:
                                  12807 ;	.\ecen4350_lcd_v4.c:3048: } if (paritySet == 0) {
      00476F 78r04            [12]12808 	mov	r0,#_paritySet
      004771 E6               [12]12809 	mov	a,@r0
                                  12810 ;	.\ecen4350_lcd_v4.c:3049: setCursor(0, 140);
      004772 70 1C            [24]12811 	jnz	00142$
      004774 75*00 8C         [24]12812 	mov	_setCursor_PARM_2,#0x8c
      004777 F5*01            [12]12813 	mov	(_setCursor_PARM_2 + 1),a
      004779 90 00 00         [24]12814 	mov	dptr,#0x0000
      00477C C0 07            [24]12815 	push	ar7
      00477E C0 06            [24]12816 	push	ar6
      004780 12r04rF6         [24]12817 	lcall	_setCursor
                                  12818 ;	.\ecen4350_lcd_v4.c:3050: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004783 90r0Dr8B         [24]12819 	mov	dptr,#___str_155
      004786 75 F0 80         [24]12820 	mov	b,#0x80
      004789 12r10r10         [24]12821 	lcall	_LCD_string_write
      00478C D0 06            [24]12822 	pop	ar6
      00478E D0 07            [24]12823 	pop	ar7
      004790                      12824 00142$:
                                  12825 ;	.\ecen4350_lcd_v4.c:3051: } if (UART_en == 1) {
      004790 78r01            [12]12826 	mov	r0,#_UART_en
      004792 B6 01 26         [24]12827 	cjne	@r0,#0x01,00144$
                                  12828 ;	.\ecen4350_lcd_v4.c:3052: setCursor(0, 180);
      004795 75*00 B4         [24]12829 	mov	_setCursor_PARM_2,#0xb4
      004798 75*01 00         [24]12830 	mov	(_setCursor_PARM_2 + 1),#0x00
      00479B 90 00 00         [24]12831 	mov	dptr,#0x0000
      00479E C0 07            [24]12832 	push	ar7
      0047A0 C0 06            [24]12833 	push	ar6
      0047A2 12r04rF6         [24]12834 	lcall	_setCursor
                                  12835 ;	.\ecen4350_lcd_v4.c:3053: LCD_string_write(" <4> Disable UART\n");
      0047A5 90r0DrAF         [24]12836 	mov	dptr,#___str_156
      0047A8 75 F0 80         [24]12837 	mov	b,#0x80
      0047AB 12r10r10         [24]12838 	lcall	_LCD_string_write
                                  12839 ;	.\ecen4350_lcd_v4.c:3054: LCD_string_write("     [Enabled]\n");
      0047AE 90r0DrC2         [24]12840 	mov	dptr,#___str_157
      0047B1 75 F0 80         [24]12841 	mov	b,#0x80
      0047B4 12r10r10         [24]12842 	lcall	_LCD_string_write
      0047B7 D0 06            [24]12843 	pop	ar6
      0047B9 D0 07            [24]12844 	pop	ar7
      0047BB                      12845 00144$:
                                  12846 ;	.\ecen4350_lcd_v4.c:3055: } if (UART_en == 0) {
      0047BB 78r01            [12]12847 	mov	r0,#_UART_en
      0047BD E6               [12]12848 	mov	a,@r0
                                  12849 ;	.\ecen4350_lcd_v4.c:3056: setCursor(0, 180);
      0047BE 70 25            [24]12850 	jnz	00146$
      0047C0 75*00 B4         [24]12851 	mov	_setCursor_PARM_2,#0xb4
      0047C3 F5*01            [12]12852 	mov	(_setCursor_PARM_2 + 1),a
      0047C5 90 00 00         [24]12853 	mov	dptr,#0x0000
      0047C8 C0 07            [24]12854 	push	ar7
      0047CA C0 06            [24]12855 	push	ar6
      0047CC 12r04rF6         [24]12856 	lcall	_setCursor
                                  12857 ;	.\ecen4350_lcd_v4.c:3057: LCD_string_write(" <4> Enable UART\n");
      0047CF 90r0DrD2         [24]12858 	mov	dptr,#___str_158
      0047D2 75 F0 80         [24]12859 	mov	b,#0x80
      0047D5 12r10r10         [24]12860 	lcall	_LCD_string_write
                                  12861 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write("     (Disabled)\n");
      0047D8 90r0DrE4         [24]12862 	mov	dptr,#___str_159
      0047DB 75 F0 80         [24]12863 	mov	b,#0x80
      0047DE 12r10r10         [24]12864 	lcall	_LCD_string_write
      0047E1 D0 06            [24]12865 	pop	ar6
      0047E3 D0 07            [24]12866 	pop	ar7
      0047E5                      12867 00146$:
                                  12868 ;	.\ecen4350_lcd_v4.c:3060: setCursor(0, 240);
      0047E5 75*00 F0         [24]12869 	mov	_setCursor_PARM_2,#0xf0
      0047E8 75*01 00         [24]12870 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047EB 90 00 00         [24]12871 	mov	dptr,#0x0000
      0047EE C0 07            [24]12872 	push	ar7
      0047F0 C0 06            [24]12873 	push	ar6
      0047F2 12r04rF6         [24]12874 	lcall	_setCursor
                                  12875 ;	.\ecen4350_lcd_v4.c:3061: LCD_string_write(" <0> Exit \n");
      0047F5 90r0DrF5         [24]12876 	mov	dptr,#___str_160
      0047F8 75 F0 80         [24]12877 	mov	b,#0x80
      0047FB 12r10r10         [24]12878 	lcall	_LCD_string_write
      0047FE D0 06            [24]12879 	pop	ar6
      004800 D0 07            [24]12880 	pop	ar7
                                  12881 ;	.\ecen4350_lcd_v4.c:3063: mainInput:
      004802                      12882 00147$:
                                  12883 ;	.\ecen4350_lcd_v4.c:3064: selection = keyDetect();
      004802 C0 07            [24]12884 	push	ar7
      004804 C0 06            [24]12885 	push	ar6
      004806 12r11r2E         [24]12886 	lcall	_keyDetect
      004809 AD 82            [24]12887 	mov	r5,dpl
      00480B D0 06            [24]12888 	pop	ar6
      00480D D0 07            [24]12889 	pop	ar7
      00480F 78r00            [12]12890 	mov	r0,#_selection
      004811 A6 05            [24]12891 	mov	@r0,ar5
                                  12892 ;	.\ecen4350_lcd_v4.c:3065: if (selection =='0') {
      004813 BD 30 33         [24]12893 	cjne	r5,#0x30,00149$
                                  12894 ;	.\ecen4350_lcd_v4.c:3066: setCursor (0, 240);
      004816 75*00 F0         [24]12895 	mov	_setCursor_PARM_2,#0xf0
      004819 75*01 00         [24]12896 	mov	(_setCursor_PARM_2 + 1),#0x00
      00481C 90 00 00         [24]12897 	mov	dptr,#0x0000
      00481F 12r04rF6         [24]12898 	lcall	_setCursor
                                  12899 ;	.\ecen4350_lcd_v4.c:3067: LCD_string_write(" ");
      004822 90r06r54         [24]12900 	mov	dptr,#___str_30
      004825 75 F0 80         [24]12901 	mov	b,#0x80
      004828 12r10r10         [24]12902 	lcall	_LCD_string_write
                                  12903 ;	.\ecen4350_lcd_v4.c:3068: setColorHighlight1();
      00482B 12r15rEA         [24]12904 	lcall	_setColorHighlight1
                                  12905 ;	.\ecen4350_lcd_v4.c:3069: LCD_string_write("<0> ");
      00482E 90r0Er01         [24]12906 	mov	dptr,#___str_161
      004831 75 F0 80         [24]12907 	mov	b,#0x80
      004834 12r10r10         [24]12908 	lcall	_LCD_string_write
                                  12909 ;	.\ecen4350_lcd_v4.c:3070: setColorHighlight2();
      004837 12r15rF6         [24]12910 	lcall	_setColorHighlight2
                                  12911 ;	.\ecen4350_lcd_v4.c:3071: LCD_string_write("Exit\n");
      00483A 90r0Er06         [24]12912 	mov	dptr,#___str_162
      00483D 75 F0 80         [24]12913 	mov	b,#0x80
      004840 12r10r10         [24]12914 	lcall	_LCD_string_write
                                  12915 ;	.\ecen4350_lcd_v4.c:3072: delay(20);
      004843 90 00 14         [24]12916 	mov	dptr,#0x0014
                                  12917 ;	.\ecen4350_lcd_v4.c:3073: goto finish;
      004846 02r00rE0         [24]12918 	ljmp	_delay
      004849                      12919 00149$:
                                  12920 ;	.\ecen4350_lcd_v4.c:3075: if (selection == '4') {
      004849 BD 34 02         [24]12921 	cjne	r5,#0x34,00670$
      00484C 80 03            [24]12922 	sjmp	00671$
      00484E                      12923 00670$:
      00484E 02r49r14         [24]12924 	ljmp	00155$
      004851                      12925 00671$:
                                  12926 ;	.\ecen4350_lcd_v4.c:3076: setCursor (0, 180);
      004851 75*00 B4         [24]12927 	mov	_setCursor_PARM_2,#0xb4
      004854 75*01 00         [24]12928 	mov	(_setCursor_PARM_2 + 1),#0x00
      004857 90 00 00         [24]12929 	mov	dptr,#0x0000
      00485A C0 07            [24]12930 	push	ar7
      00485C C0 06            [24]12931 	push	ar6
      00485E 12r04rF6         [24]12932 	lcall	_setCursor
                                  12933 ;	.\ecen4350_lcd_v4.c:3077: LCD_string_write(" ");
      004861 90r06r54         [24]12934 	mov	dptr,#___str_30
      004864 75 F0 80         [24]12935 	mov	b,#0x80
      004867 12r10r10         [24]12936 	lcall	_LCD_string_write
                                  12937 ;	.\ecen4350_lcd_v4.c:3078: setColorHighlight1();
      00486A 12r15rEA         [24]12938 	lcall	_setColorHighlight1
                                  12939 ;	.\ecen4350_lcd_v4.c:3079: LCD_string_write("<4> ");
      00486D 90r0Er0C         [24]12940 	mov	dptr,#___str_163
      004870 75 F0 80         [24]12941 	mov	b,#0x80
      004873 12r10r10         [24]12942 	lcall	_LCD_string_write
                                  12943 ;	.\ecen4350_lcd_v4.c:3080: setColorHighlight2();
      004876 12r15rF6         [24]12944 	lcall	_setColorHighlight2
      004879 D0 06            [24]12945 	pop	ar6
      00487B D0 07            [24]12946 	pop	ar7
                                  12947 ;	.\ecen4350_lcd_v4.c:3081: if (UART_en == 1) {
      00487D 78r01            [12]12948 	mov	r0,#_UART_en
      00487F B6 01 54         [24]12949 	cjne	@r0,#0x01,00151$
                                  12950 ;	.\ecen4350_lcd_v4.c:3082: LCD_string_write("Disable UART\n");
      004882 90r0Er11         [24]12951 	mov	dptr,#___str_164
      004885 75 F0 80         [24]12952 	mov	b,#0x80
      004888 12r10r10         [24]12953 	lcall	_LCD_string_write
                                  12954 ;	.\ecen4350_lcd_v4.c:3083: setColorDefault();
      00488B 12r15rD4         [24]12955 	lcall	_setColorDefault
                                  12956 ;	.\ecen4350_lcd_v4.c:3084: LCD_string_write("     ");
      00488E 90r0Er1F         [24]12957 	mov	dptr,#___str_165
      004891 75 F0 80         [24]12958 	mov	b,#0x80
      004894 12r10r10         [24]12959 	lcall	_LCD_string_write
                                  12960 ;	.\ecen4350_lcd_v4.c:3085: setColorHighlight1();
      004897 12r15rEA         [24]12961 	lcall	_setColorHighlight1
                                  12962 ;	.\ecen4350_lcd_v4.c:3086: LCD_string_write("[Enabled]");
      00489A 90r0Er25         [24]12963 	mov	dptr,#___str_166
      00489D 75 F0 80         [24]12964 	mov	b,#0x80
      0048A0 12r10r10         [24]12965 	lcall	_LCD_string_write
                                  12966 ;	.\ecen4350_lcd_v4.c:3087: setColorDefault();
      0048A3 12r15rD4         [24]12967 	lcall	_setColorDefault
                                  12968 ;	.\ecen4350_lcd_v4.c:3088: initLock = 0;
      0048A6 7F 00            [12]12969 	mov	r7,#0x00
                                  12970 ;	.\ecen4350_lcd_v4.c:3089: temp = 0;
      0048A8 7E 00            [12]12971 	mov	r6,#0x00
                                  12972 ;	.\ecen4350_lcd_v4.c:3090: UART_disable();
      0048AA C0 07            [24]12973 	push	ar7
      0048AC C0 06            [24]12974 	push	ar6
      0048AE 12r01r1E         [24]12975 	lcall	_UART_disable
                                  12976 ;	.\ecen4350_lcd_v4.c:3091: clearLCD();
      0048B1 12r0Dr93         [24]12977 	lcall	_clearLCD
                                  12978 ;	.\ecen4350_lcd_v4.c:3092: setCursor(30, 120);
      0048B4 75*00 78         [24]12979 	mov	_setCursor_PARM_2,#0x78
      0048B7 75*01 00         [24]12980 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048BA 90 00 1E         [24]12981 	mov	dptr,#0x001e
      0048BD 12r04rF6         [24]12982 	lcall	_setCursor
                                  12983 ;	.\ecen4350_lcd_v4.c:3093: LCD_string_write("UART Disabled.");
      0048C0 90r0Er2F         [24]12984 	mov	dptr,#___str_167
      0048C3 75 F0 80         [24]12985 	mov	b,#0x80
      0048C6 12r10r10         [24]12986 	lcall	_LCD_string_write
                                  12987 ;	.\ecen4350_lcd_v4.c:3094: delay(40);
      0048C9 90 00 28         [24]12988 	mov	dptr,#0x0028
      0048CC 12r00rE0         [24]12989 	lcall	_delay
      0048CF D0 06            [24]12990 	pop	ar6
      0048D1 D0 07            [24]12991 	pop	ar7
                                  12992 ;	.\ecen4350_lcd_v4.c:3095: goto uartMenu;
      0048D3 02r45r1F         [24]12993 	ljmp	00101$
      0048D6                      12994 00151$:
                                  12995 ;	.\ecen4350_lcd_v4.c:3096: } if (UART_en == 0 ){
      0048D6 78r01            [12]12996 	mov	r0,#_UART_en
      0048D8 E6               [12]12997 	mov	a,@r0
      0048D9 70 39            [24]12998 	jnz	00155$
                                  12999 ;	.\ecen4350_lcd_v4.c:3097: LCD_string_write("Enable UART\n");
      0048DB 90r0Er3E         [24]13000 	mov	dptr,#___str_168
      0048DE 75 F0 80         [24]13001 	mov	b,#0x80
      0048E1 C0 06            [24]13002 	push	ar6
      0048E3 12r10r10         [24]13003 	lcall	_LCD_string_write
                                  13004 ;	.\ecen4350_lcd_v4.c:3098: setColorDefault();
      0048E6 12r15rD4         [24]13005 	lcall	_setColorDefault
                                  13006 ;	.\ecen4350_lcd_v4.c:3099: LCD_string_write("     ");
      0048E9 90r0Er1F         [24]13007 	mov	dptr,#___str_165
      0048EC 75 F0 80         [24]13008 	mov	b,#0x80
      0048EF 12r10r10         [24]13009 	lcall	_LCD_string_write
                                  13010 ;	.\ecen4350_lcd_v4.c:3100: setColorHighlight1();
      0048F2 12r15rEA         [24]13011 	lcall	_setColorHighlight1
                                  13012 ;	.\ecen4350_lcd_v4.c:3101: LCD_string_write("(Disabled)");
      0048F5 90r0Er4B         [24]13013 	mov	dptr,#___str_169
      0048F8 75 F0 80         [24]13014 	mov	b,#0x80
      0048FB 12r10r10         [24]13015 	lcall	_LCD_string_write
                                  13016 ;	.\ecen4350_lcd_v4.c:3102: setColorDefault();
      0048FE 12r15rD4         [24]13017 	lcall	_setColorDefault
                                  13018 ;	.\ecen4350_lcd_v4.c:3103: delay(40);
      004901 90 00 28         [24]13019 	mov	dptr,#0x0028
      004904 12r00rE0         [24]13020 	lcall	_delay
                                  13021 ;	.\ecen4350_lcd_v4.c:3104: delay(40);
      004907 90 00 28         [24]13022 	mov	dptr,#0x0028
      00490A 12r00rE0         [24]13023 	lcall	_delay
      00490D D0 06            [24]13024 	pop	ar6
                                  13025 ;	.\ecen4350_lcd_v4.c:3105: initLock = 1;
      00490F 7F 01            [12]13026 	mov	r7,#0x01
                                  13027 ;	.\ecen4350_lcd_v4.c:3106: goto verifyUART;
      004911 02r4Br11         [24]13028 	ljmp	00175$
      004914                      13029 00155$:
                                  13030 ;	.\ecen4350_lcd_v4.c:3108: } if (selection == '1') {
      004914 78r00            [12]13031 	mov	r0,#_selection
      004916 B6 31 02         [24]13032 	cjne	@r0,#0x31,00675$
      004919 80 03            [24]13033 	sjmp	00676$
      00491B                      13034 00675$:
      00491B 02r49rA1         [24]13035 	ljmp	00161$
      00491E                      13036 00676$:
                                  13037 ;	.\ecen4350_lcd_v4.c:3109: setCursor (0, 60);
      00491E 75*00 3C         [24]13038 	mov	_setCursor_PARM_2,#0x3c
      004921 75*01 00         [24]13039 	mov	(_setCursor_PARM_2 + 1),#0x00
      004924 90 00 00         [24]13040 	mov	dptr,#0x0000
      004927 C0 07            [24]13041 	push	ar7
      004929 C0 06            [24]13042 	push	ar6
      00492B 12r04rF6         [24]13043 	lcall	_setCursor
                                  13044 ;	.\ecen4350_lcd_v4.c:3110: LCD_string_write(" ");
      00492E 90r06r54         [24]13045 	mov	dptr,#___str_30
      004931 75 F0 80         [24]13046 	mov	b,#0x80
      004934 12r10r10         [24]13047 	lcall	_LCD_string_write
                                  13048 ;	.\ecen4350_lcd_v4.c:3111: setColorHighlight1();
      004937 12r15rEA         [24]13049 	lcall	_setColorHighlight1
                                  13050 ;	.\ecen4350_lcd_v4.c:3112: LCD_string_write("<1> ");
      00493A 90r0Er56         [24]13051 	mov	dptr,#___str_170
      00493D 75 F0 80         [24]13052 	mov	b,#0x80
      004940 12r10r10         [24]13053 	lcall	_LCD_string_write
                                  13054 ;	.\ecen4350_lcd_v4.c:3113: setColorHighlight2();
      004943 12r15rF6         [24]13055 	lcall	_setColorHighlight2
                                  13056 ;	.\ecen4350_lcd_v4.c:3114: LCD_string_write("Set Data Rate\n");
      004946 90r0Er5B         [24]13057 	mov	dptr,#___str_171
      004949 75 F0 80         [24]13058 	mov	b,#0x80
      00494C 12r10r10         [24]13059 	lcall	_LCD_string_write
                                  13060 ;	.\ecen4350_lcd_v4.c:3115: delay(20);
      00494F 90 00 14         [24]13061 	mov	dptr,#0x0014
      004952 12r00rE0         [24]13062 	lcall	_delay
      004955 D0 06            [24]13063 	pop	ar6
      004957 D0 07            [24]13064 	pop	ar7
                                  13065 ;	.\ecen4350_lcd_v4.c:3116: if (UART_en == 1) {
      004959 78r01            [12]13066 	mov	r0,#_UART_en
      00495B B6 01 3B         [24]13067 	cjne	@r0,#0x01,00157$
                                  13068 ;	.\ecen4350_lcd_v4.c:3117: setCursor(0, 200);
      00495E 75*00 C8         [24]13069 	mov	_setCursor_PARM_2,#0xc8
      004961 75*01 00         [24]13070 	mov	(_setCursor_PARM_2 + 1),#0x00
      004964 90 00 00         [24]13071 	mov	dptr,#0x0000
      004967 C0 07            [24]13072 	push	ar7
      004969 C0 06            [24]13073 	push	ar6
      00496B 12r04rF6         [24]13074 	lcall	_setCursor
                                  13075 ;	.\ecen4350_lcd_v4.c:3118: setColorRed();
      00496E 12r16r19         [24]13076 	lcall	_setColorRed
                                  13077 ;	.\ecen4350_lcd_v4.c:3119: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004971 90r0Er6A         [24]13078 	mov	dptr,#___str_172
      004974 75 F0 80         [24]13079 	mov	b,#0x80
      004977 12r10r10         [24]13080 	lcall	_LCD_string_write
                                  13081 ;	.\ecen4350_lcd_v4.c:3120: setColorDefault();
      00497A 12r15rD4         [24]13082 	lcall	_setColorDefault
                                  13083 ;	.\ecen4350_lcd_v4.c:3121: setCursor(0, 60);
      00497D 75*00 3C         [24]13084 	mov	_setCursor_PARM_2,#0x3c
      004980 75*01 00         [24]13085 	mov	(_setCursor_PARM_2 + 1),#0x00
      004983 90 00 00         [24]13086 	mov	dptr,#0x0000
      004986 12r04rF6         [24]13087 	lcall	_setCursor
                                  13088 ;	.\ecen4350_lcd_v4.c:3122: LCD_string_write(" <1> Set Data Rate\n");
      004989 90r0Dr1D         [24]13089 	mov	dptr,#___str_144
      00498C 75 F0 80         [24]13090 	mov	b,#0x80
      00498F 12r10r10         [24]13091 	lcall	_LCD_string_write
      004992 D0 06            [24]13092 	pop	ar6
      004994 D0 07            [24]13093 	pop	ar7
                                  13094 ;	.\ecen4350_lcd_v4.c:3123: goto mainInput;
      004996 02r48r02         [24]13095 	ljmp	00147$
      004999                      13096 00157$:
                                  13097 ;	.\ecen4350_lcd_v4.c:3124: } if (UART_en == 0) {
      004999 78r01            [12]13098 	mov	r0,#_UART_en
      00499B E6               [12]13099 	mov	a,@r0
      00499C 70 03            [24]13100 	jnz	00679$
      00499E 02r4Cr20         [24]13101 	ljmp	00194$
      0049A1                      13102 00679$:
                                  13103 ;	.\ecen4350_lcd_v4.c:3125: goto setRate;
      0049A1                      13104 00161$:
                                  13105 ;	.\ecen4350_lcd_v4.c:3128: if (selection == '2') {
      0049A1 78r00            [12]13106 	mov	r0,#_selection
      0049A3 B6 32 02         [24]13107 	cjne	@r0,#0x32,00680$
      0049A6 80 03            [24]13108 	sjmp	00681$
      0049A8                      13109 00680$:
      0049A8 02r4Ar40         [24]13110 	ljmp	00167$
      0049AB                      13111 00681$:
                                  13112 ;	.\ecen4350_lcd_v4.c:3129: setCursor (0, 100);
      0049AB 75*00 64         [24]13113 	mov	_setCursor_PARM_2,#0x64
      0049AE 75*01 00         [24]13114 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049B1 90 00 00         [24]13115 	mov	dptr,#0x0000
      0049B4 C0 07            [24]13116 	push	ar7
      0049B6 C0 06            [24]13117 	push	ar6
      0049B8 12r04rF6         [24]13118 	lcall	_setCursor
                                  13119 ;	.\ecen4350_lcd_v4.c:3130: LCD_string_write(" ");
      0049BB 90r06r54         [24]13120 	mov	dptr,#___str_30
      0049BE 75 F0 80         [24]13121 	mov	b,#0x80
      0049C1 12r10r10         [24]13122 	lcall	_LCD_string_write
                                  13123 ;	.\ecen4350_lcd_v4.c:3131: setColorHighlight1();
      0049C4 12r15rEA         [24]13124 	lcall	_setColorHighlight1
                                  13125 ;	.\ecen4350_lcd_v4.c:3132: LCD_string_write("<2> ");
      0049C7 90r0Er8C         [24]13126 	mov	dptr,#___str_173
      0049CA 75 F0 80         [24]13127 	mov	b,#0x80
      0049CD 12r10r10         [24]13128 	lcall	_LCD_string_write
                                  13129 ;	.\ecen4350_lcd_v4.c:3133: setColorHighlight2();
      0049D0 12r15rF6         [24]13130 	lcall	_setColorHighlight2
                                  13131 ;	.\ecen4350_lcd_v4.c:3134: LCD_string_write("Number of Bits\n");
      0049D3 90r0Er91         [24]13132 	mov	dptr,#___str_174
      0049D6 75 F0 80         [24]13133 	mov	b,#0x80
      0049D9 12r10r10         [24]13134 	lcall	_LCD_string_write
                                  13135 ;	.\ecen4350_lcd_v4.c:3135: setColorDefault();
      0049DC 12r15rD4         [24]13136 	lcall	_setColorDefault
                                  13137 ;	.\ecen4350_lcd_v4.c:3136: LCD_string_write("     ");
      0049DF 90r0Er1F         [24]13138 	mov	dptr,#___str_165
      0049E2 75 F0 80         [24]13139 	mov	b,#0x80
      0049E5 12r10r10         [24]13140 	lcall	_LCD_string_write
                                  13141 ;	.\ecen4350_lcd_v4.c:3137: setColorHighlight1();
      0049E8 12r15rEA         [24]13142 	lcall	_setColorHighlight1
                                  13143 ;	.\ecen4350_lcd_v4.c:3138: LCD_string_write("(8 or 9 bits)\n");
      0049EB 90r0ErA1         [24]13144 	mov	dptr,#___str_175
      0049EE 75 F0 80         [24]13145 	mov	b,#0x80
      0049F1 12r10r10         [24]13146 	lcall	_LCD_string_write
      0049F4 D0 06            [24]13147 	pop	ar6
      0049F6 D0 07            [24]13148 	pop	ar7
                                  13149 ;	.\ecen4350_lcd_v4.c:3139: if (UART_en == 1) {
      0049F8 78r01            [12]13150 	mov	r0,#_UART_en
      0049FA B6 01 3B         [24]13151 	cjne	@r0,#0x01,00163$
                                  13152 ;	.\ecen4350_lcd_v4.c:3140: setCursor(0, 200);
      0049FD 75*00 C8         [24]13153 	mov	_setCursor_PARM_2,#0xc8
      004A00 75*01 00         [24]13154 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A03 90 00 00         [24]13155 	mov	dptr,#0x0000
      004A06 C0 07            [24]13156 	push	ar7
      004A08 C0 06            [24]13157 	push	ar6
      004A0A 12r04rF6         [24]13158 	lcall	_setCursor
                                  13159 ;	.\ecen4350_lcd_v4.c:3141: setColorRed();
      004A0D 12r16r19         [24]13160 	lcall	_setColorRed
                                  13161 ;	.\ecen4350_lcd_v4.c:3142: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004A10 90r0Er6A         [24]13162 	mov	dptr,#___str_172
      004A13 75 F0 80         [24]13163 	mov	b,#0x80
      004A16 12r10r10         [24]13164 	lcall	_LCD_string_write
                                  13165 ;	.\ecen4350_lcd_v4.c:3143: setColorDefault();
      004A19 12r15rD4         [24]13166 	lcall	_setColorDefault
                                  13167 ;	.\ecen4350_lcd_v4.c:3144: setCursor(0, 100);		
      004A1C 75*00 64         [24]13168 	mov	_setCursor_PARM_2,#0x64
      004A1F 75*01 00         [24]13169 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A22 90 00 00         [24]13170 	mov	dptr,#0x0000
      004A25 12r04rF6         [24]13171 	lcall	_setCursor
                                  13172 ;	.\ecen4350_lcd_v4.c:3145: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      004A28 90r0Dr46         [24]13173 	mov	dptr,#___str_149
      004A2B 75 F0 80         [24]13174 	mov	b,#0x80
      004A2E 12r10r10         [24]13175 	lcall	_LCD_string_write
      004A31 D0 06            [24]13176 	pop	ar6
      004A33 D0 07            [24]13177 	pop	ar7
                                  13178 ;	.\ecen4350_lcd_v4.c:3146: goto mainInput;
      004A35 02r48r02         [24]13179 	ljmp	00147$
      004A38                      13180 00163$:
                                  13181 ;	.\ecen4350_lcd_v4.c:3147: } if (UART_en == 0) goto setBit;
      004A38 78r01            [12]13182 	mov	r0,#_UART_en
      004A3A E6               [12]13183 	mov	a,@r0
      004A3B 70 03            [24]13184 	jnz	00684$
      004A3D 02r4ErA7         [24]13185 	ljmp	00221$
      004A40                      13186 00684$:
      004A40                      13187 00167$:
                                  13188 ;	.\ecen4350_lcd_v4.c:3148: } if (selection == '3') {
      004A40 78r00            [12]13189 	mov	r0,#_selection
      004A42 B6 33 02         [24]13190 	cjne	@r0,#0x33,00685$
      004A45 80 03            [24]13191 	sjmp	00686$
      004A47                      13192 00685$:
      004A47 02r4ArEB         [24]13193 	ljmp	00173$
      004A4A                      13194 00686$:
                                  13195 ;	.\ecen4350_lcd_v4.c:3149: setCursor (0, 140);
      004A4A 75*00 8C         [24]13196 	mov	_setCursor_PARM_2,#0x8c
      004A4D 75*01 00         [24]13197 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A50 90 00 00         [24]13198 	mov	dptr,#0x0000
      004A53 C0 07            [24]13199 	push	ar7
      004A55 C0 06            [24]13200 	push	ar6
      004A57 12r04rF6         [24]13201 	lcall	_setCursor
                                  13202 ;	.\ecen4350_lcd_v4.c:3150: LCD_string_write(" ");
      004A5A 90r06r54         [24]13203 	mov	dptr,#___str_30
      004A5D 75 F0 80         [24]13204 	mov	b,#0x80
      004A60 12r10r10         [24]13205 	lcall	_LCD_string_write
                                  13206 ;	.\ecen4350_lcd_v4.c:3151: setColorHighlight1();
      004A63 12r15rEA         [24]13207 	lcall	_setColorHighlight1
                                  13208 ;	.\ecen4350_lcd_v4.c:3152: LCD_string_write("<3> ");
      004A66 90r0ErB0         [24]13209 	mov	dptr,#___str_176
      004A69 75 F0 80         [24]13210 	mov	b,#0x80
      004A6C 12r10r10         [24]13211 	lcall	_LCD_string_write
                                  13212 ;	.\ecen4350_lcd_v4.c:3153: setColorHighlight2();
      004A6F 12r15rF6         [24]13213 	lcall	_setColorHighlight2
                                  13214 ;	.\ecen4350_lcd_v4.c:3154: LCD_string_write("Parity ");
      004A72 90r0ErB5         [24]13215 	mov	dptr,#___str_177
      004A75 75 F0 80         [24]13216 	mov	b,#0x80
      004A78 12r10r10         [24]13217 	lcall	_LCD_string_write
                                  13218 ;	.\ecen4350_lcd_v4.c:3155: setColorHighlight1();
      004A7B 12r15rEA         [24]13219 	lcall	_setColorHighlight1
                                  13220 ;	.\ecen4350_lcd_v4.c:3156: LCD_string_write("(Even/\n");
      004A7E 90r0ErBD         [24]13221 	mov	dptr,#___str_178
      004A81 75 F0 80         [24]13222 	mov	b,#0x80
      004A84 12r10r10         [24]13223 	lcall	_LCD_string_write
                                  13224 ;	.\ecen4350_lcd_v4.c:3157: setColorDefault();
      004A87 12r15rD4         [24]13225 	lcall	_setColorDefault
                                  13226 ;	.\ecen4350_lcd_v4.c:3158: LCD_string_write("     ");
      004A8A 90r0Er1F         [24]13227 	mov	dptr,#___str_165
      004A8D 75 F0 80         [24]13228 	mov	b,#0x80
      004A90 12r10r10         [24]13229 	lcall	_LCD_string_write
                                  13230 ;	.\ecen4350_lcd_v4.c:3159: setColorHighlight1();
      004A93 12r15rEA         [24]13231 	lcall	_setColorHighlight1
                                  13232 ;	.\ecen4350_lcd_v4.c:3160: LCD_string_write("(Odd/None)\n");
      004A96 90r0ErC5         [24]13233 	mov	dptr,#___str_179
      004A99 75 F0 80         [24]13234 	mov	b,#0x80
      004A9C 12r10r10         [24]13235 	lcall	_LCD_string_write
      004A9F D0 06            [24]13236 	pop	ar6
      004AA1 D0 07            [24]13237 	pop	ar7
                                  13238 ;	.\ecen4350_lcd_v4.c:3161: if (UART_en == 1) {
      004AA3 78r01            [12]13239 	mov	r0,#_UART_en
      004AA5 B6 01 3B         [24]13240 	cjne	@r0,#0x01,00169$
                                  13241 ;	.\ecen4350_lcd_v4.c:3162: setCursor(0, 200);
      004AA8 75*00 C8         [24]13242 	mov	_setCursor_PARM_2,#0xc8
      004AAB 75*01 00         [24]13243 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AAE 90 00 00         [24]13244 	mov	dptr,#0x0000
      004AB1 C0 07            [24]13245 	push	ar7
      004AB3 C0 06            [24]13246 	push	ar6
      004AB5 12r04rF6         [24]13247 	lcall	_setCursor
                                  13248 ;	.\ecen4350_lcd_v4.c:3163: setColorRed();
      004AB8 12r16r19         [24]13249 	lcall	_setColorRed
                                  13250 ;	.\ecen4350_lcd_v4.c:3164: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004ABB 90r0Er6A         [24]13251 	mov	dptr,#___str_172
      004ABE 75 F0 80         [24]13252 	mov	b,#0x80
      004AC1 12r10r10         [24]13253 	lcall	_LCD_string_write
                                  13254 ;	.\ecen4350_lcd_v4.c:3165: setColorDefault();
      004AC4 12r15rD4         [24]13255 	lcall	_setColorDefault
                                  13256 ;	.\ecen4350_lcd_v4.c:3166: setCursor(0, 140);
      004AC7 75*00 8C         [24]13257 	mov	_setCursor_PARM_2,#0x8c
      004ACA 75*01 00         [24]13258 	mov	(_setCursor_PARM_2 + 1),#0x00
      004ACD 90 00 00         [24]13259 	mov	dptr,#0x0000
      004AD0 12r04rF6         [24]13260 	lcall	_setCursor
                                  13261 ;	.\ecen4350_lcd_v4.c:3167: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004AD3 90r0Dr8B         [24]13262 	mov	dptr,#___str_155
      004AD6 75 F0 80         [24]13263 	mov	b,#0x80
      004AD9 12r10r10         [24]13264 	lcall	_LCD_string_write
      004ADC D0 06            [24]13265 	pop	ar6
      004ADE D0 07            [24]13266 	pop	ar7
                                  13267 ;	.\ecen4350_lcd_v4.c:3168: goto mainInput;
      004AE0 02r48r02         [24]13268 	ljmp	00147$
      004AE3                      13269 00169$:
                                  13270 ;	.\ecen4350_lcd_v4.c:3169: } if (UART_en == 0) goto setParity;
      004AE3 78r01            [12]13271 	mov	r0,#_UART_en
      004AE5 E6               [12]13272 	mov	a,@r0
      004AE6 70 29            [24]13273 	jnz	00175$
      004AE8 02r4FrD4         [24]13274 	ljmp	00228$
      004AEB                      13275 00173$:
                                  13276 ;	.\ecen4350_lcd_v4.c:3171: setColorRed();
      004AEB C0 07            [24]13277 	push	ar7
      004AED C0 06            [24]13278 	push	ar6
      004AEF 12r16r19         [24]13279 	lcall	_setColorRed
                                  13280 ;	.\ecen4350_lcd_v4.c:3172: setCursor(0, 200);
      004AF2 75*00 C8         [24]13281 	mov	_setCursor_PARM_2,#0xc8
      004AF5 75*01 00         [24]13282 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AF8 90 00 00         [24]13283 	mov	dptr,#0x0000
      004AFB 12r04rF6         [24]13284 	lcall	_setCursor
                                  13285 ;	.\ecen4350_lcd_v4.c:3173: LCD_string_write("\n\n\n\n Incorrect input\n  Try again.\n");
      004AFE 90r0ErD1         [24]13286 	mov	dptr,#___str_180
      004B01 75 F0 80         [24]13287 	mov	b,#0x80
      004B04 12r10r10         [24]13288 	lcall	_LCD_string_write
                                  13289 ;	.\ecen4350_lcd_v4.c:3174: setColorDefault();
      004B07 12r15rD4         [24]13290 	lcall	_setColorDefault
      004B0A D0 06            [24]13291 	pop	ar6
      004B0C D0 07            [24]13292 	pop	ar7
                                  13293 ;	.\ecen4350_lcd_v4.c:3175: goto mainInput;
      004B0E 02r48r02         [24]13294 	ljmp	00147$
                                  13295 ;	.\ecen4350_lcd_v4.c:3178: verifyUART:
      004B11                      13296 00175$:
                                  13297 ;	.\ecen4350_lcd_v4.c:3179: clearLCD();
      004B11 C0 07            [24]13298 	push	ar7
      004B13 C0 06            [24]13299 	push	ar6
      004B15 12r0Dr93         [24]13300 	lcall	_clearLCD
                                  13301 ;	.\ecen4350_lcd_v4.c:3180: setCursor(0, 120);
      004B18 75*00 78         [24]13302 	mov	_setCursor_PARM_2,#0x78
      004B1B 75*01 00         [24]13303 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B1E 90 00 00         [24]13304 	mov	dptr,#0x0000
      004B21 12r04rF6         [24]13305 	lcall	_setCursor
      004B24 D0 06            [24]13306 	pop	ar6
      004B26 D0 07            [24]13307 	pop	ar7
                                  13308 ;	.\ecen4350_lcd_v4.c:3181: if (initLock == 1) {
      004B28 BF 01 02         [24]13309 	cjne	r7,#0x01,00690$
      004B2B 80 03            [24]13310 	sjmp	00691$
      004B2D                      13311 00690$:
      004B2D 02r4Cr20         [24]13312 	ljmp	00194$
      004B30                      13313 00691$:
                                  13314 ;	.\ecen4350_lcd_v4.c:3182: if (UART_en == 1) {
      004B30 78r01            [12]13315 	mov	r0,#_UART_en
      004B32 B6 01 26         [24]13316 	cjne	@r0,#0x01,00177$
                                  13317 ;	.\ecen4350_lcd_v4.c:3183: setColorGreen();
      004B35 C0 07            [24]13318 	push	ar7
      004B37 C0 06            [24]13319 	push	ar6
      004B39 12r16r2F         [24]13320 	lcall	_setColorGreen
                                  13321 ;	.\ecen4350_lcd_v4.c:3184: LCD_string_write("\n Disabling UART...\n");
      004B3C 90r0ErF4         [24]13322 	mov	dptr,#___str_181
      004B3F 75 F0 80         [24]13323 	mov	b,#0x80
      004B42 12r10r10         [24]13324 	lcall	_LCD_string_write
                                  13325 ;	.\ecen4350_lcd_v4.c:3185: UART_disable();
      004B45 12r01r1E         [24]13326 	lcall	_UART_disable
                                  13327 ;	.\ecen4350_lcd_v4.c:3186: setColorDefault();
      004B48 12r15rD4         [24]13328 	lcall	_setColorDefault
                                  13329 ;	.\ecen4350_lcd_v4.c:3187: delay(40);
      004B4B 90 00 28         [24]13330 	mov	dptr,#0x0028
      004B4E 12r00rE0         [24]13331 	lcall	_delay
                                  13332 ;	.\ecen4350_lcd_v4.c:3188: setColorDefault();
      004B51 12r15rD4         [24]13333 	lcall	_setColorDefault
      004B54 D0 06            [24]13334 	pop	ar6
      004B56 D0 07            [24]13335 	pop	ar7
                                  13336 ;	.\ecen4350_lcd_v4.c:3189: goto uartMenu;
      004B58 02r45r1F         [24]13337 	ljmp	00101$
      004B5B                      13338 00177$:
                                  13339 ;	.\ecen4350_lcd_v4.c:3190: } if (UART_en == 0) {
      004B5B 78r01            [12]13340 	mov	r0,#_UART_en
      004B5D E6               [12]13341 	mov	a,@r0
      004B5E 60 03            [24]13342 	jz	00694$
      004B60 02r45r1F         [24]13343 	ljmp	00101$
      004B63                      13344 00694$:
                                  13345 ;	.\ecen4350_lcd_v4.c:3191: if ((baudSet == 1) && (paritySet == 1) && (bitSet == 1)) {
      004B63 78r02            [12]13346 	mov	r0,#_baudSet
      004B65 B6 01 33         [24]13347 	cjne	@r0,#0x01,00185$
      004B68 78r04            [12]13348 	mov	r0,#_paritySet
      004B6A B6 01 2E         [24]13349 	cjne	@r0,#0x01,00185$
      004B6D 78r03            [12]13350 	mov	r0,#_bitSet
      004B6F B6 01 29         [24]13351 	cjne	@r0,#0x01,00185$
                                  13352 ;	.\ecen4350_lcd_v4.c:3192: setColorSelect();
      004B72 C0 07            [24]13353 	push	ar7
      004B74 C0 06            [24]13354 	push	ar6
      004B76 12r15rDF         [24]13355 	lcall	_setColorSelect
                                  13356 ;	.\ecen4350_lcd_v4.c:3193: LCD_string_write("\n Settings Verified:\n");
      004B79 90r0Fr09         [24]13357 	mov	dptr,#___str_182
      004B7C 75 F0 80         [24]13358 	mov	b,#0x80
      004B7F 12r10r10         [24]13359 	lcall	_LCD_string_write
                                  13360 ;	.\ecen4350_lcd_v4.c:3194: setColorDefault();
      004B82 12r15rD4         [24]13361 	lcall	_setColorDefault
                                  13362 ;	.\ecen4350_lcd_v4.c:3195: LCD_string_write(" Enabling UART...");
      004B85 90r0Fr1F         [24]13363 	mov	dptr,#___str_183
      004B88 75 F0 80         [24]13364 	mov	b,#0x80
      004B8B 12r10r10         [24]13365 	lcall	_LCD_string_write
                                  13366 ;	.\ecen4350_lcd_v4.c:3196: delay(40);
      004B8E 90 00 28         [24]13367 	mov	dptr,#0x0028
      004B91 12r00rE0         [24]13368 	lcall	_delay
      004B94 D0 06            [24]13369 	pop	ar6
      004B96 D0 07            [24]13370 	pop	ar7
                                  13371 ;	.\ecen4350_lcd_v4.c:3197: goto setFrame; //init UARt with settings
      004B98 02r51rE2         [24]13372 	ljmp	00255$
      004B9B                      13373 00185$:
                                  13374 ;	.\ecen4350_lcd_v4.c:3199: if (baudSet == 0) {
      004B9B 78r02            [12]13375 	mov	r0,#_baudSet
      004B9D E6               [12]13376 	mov	a,@r0
      004B9E 70 28            [24]13377 	jnz	00179$
                                  13378 ;	.\ecen4350_lcd_v4.c:3200: setColorRed();
      004BA0 C0 07            [24]13379 	push	ar7
      004BA2 C0 06            [24]13380 	push	ar6
      004BA4 12r16r19         [24]13381 	lcall	_setColorRed
                                  13382 ;	.\ecen4350_lcd_v4.c:3201: LCD_string_write(" BAUD ERROR\n");
      004BA7 90r0Fr31         [24]13383 	mov	dptr,#___str_184
      004BAA 75 F0 80         [24]13384 	mov	b,#0x80
      004BAD 12r10r10         [24]13385 	lcall	_LCD_string_write
                                  13386 ;	.\ecen4350_lcd_v4.c:3202: setColorDefault();
      004BB0 12r15rD4         [24]13387 	lcall	_setColorDefault
                                  13388 ;	.\ecen4350_lcd_v4.c:3203: LCD_string_write(" Entering Baud...\n");
      004BB3 90r0Fr3E         [24]13389 	mov	dptr,#___str_185
      004BB6 75 F0 80         [24]13390 	mov	b,#0x80
      004BB9 12r10r10         [24]13391 	lcall	_LCD_string_write
                                  13392 ;	.\ecen4350_lcd_v4.c:3204: delay(40);
      004BBC 90 00 28         [24]13393 	mov	dptr,#0x0028
      004BBF 12r00rE0         [24]13394 	lcall	_delay
      004BC2 D0 06            [24]13395 	pop	ar6
      004BC4 D0 07            [24]13396 	pop	ar7
                                  13397 ;	.\ecen4350_lcd_v4.c:3205: goto setRate;
      004BC6 80 58            [24]13398 	sjmp	00194$
      004BC8                      13399 00179$:
                                  13400 ;	.\ecen4350_lcd_v4.c:3206: } if (bitSet == 0) {
      004BC8 78r03            [12]13401 	mov	r0,#_bitSet
      004BCA E6               [12]13402 	mov	a,@r0
      004BCB 70 25            [24]13403 	jnz	00181$
                                  13404 ;	.\ecen4350_lcd_v4.c:3207: setColorRed();
      004BCD C0 07            [24]13405 	push	ar7
      004BCF 12r16r19         [24]13406 	lcall	_setColorRed
                                  13407 ;	.\ecen4350_lcd_v4.c:3208: LCD_string_write(" BIT ERROR\n");
      004BD2 90r0Fr51         [24]13408 	mov	dptr,#___str_186
      004BD5 75 F0 80         [24]13409 	mov	b,#0x80
      004BD8 12r10r10         [24]13410 	lcall	_LCD_string_write
                                  13411 ;	.\ecen4350_lcd_v4.c:3209: setColorDefault();
      004BDB 12r15rD4         [24]13412 	lcall	_setColorDefault
                                  13413 ;	.\ecen4350_lcd_v4.c:3210: LCD_string_write(" Entering Bits...\n");
      004BDE 90r0Fr5D         [24]13414 	mov	dptr,#___str_187
      004BE1 75 F0 80         [24]13415 	mov	b,#0x80
      004BE4 12r10r10         [24]13416 	lcall	_LCD_string_write
                                  13417 ;	.\ecen4350_lcd_v4.c:3211: delay(40);
      004BE7 90 00 28         [24]13418 	mov	dptr,#0x0028
      004BEA 12r00rE0         [24]13419 	lcall	_delay
      004BED D0 07            [24]13420 	pop	ar7
                                  13421 ;	.\ecen4350_lcd_v4.c:3212: goto setBit;
      004BEF 02r4ErA7         [24]13422 	ljmp	00221$
      004BF2                      13423 00181$:
                                  13424 ;	.\ecen4350_lcd_v4.c:3213: } if (paritySet == 0) {
      004BF2 78r04            [12]13425 	mov	r0,#_paritySet
      004BF4 E6               [12]13426 	mov	a,@r0
      004BF5 70 29            [24]13427 	jnz	00194$
                                  13428 ;	.\ecen4350_lcd_v4.c:3214: setColorRed();
      004BF7 C0 07            [24]13429 	push	ar7
      004BF9 C0 06            [24]13430 	push	ar6
      004BFB 12r16r19         [24]13431 	lcall	_setColorRed
                                  13432 ;	.\ecen4350_lcd_v4.c:3215: LCD_string_write(" PARITY ERROR\n");
      004BFE 90r0Fr70         [24]13433 	mov	dptr,#___str_188
      004C01 75 F0 80         [24]13434 	mov	b,#0x80
      004C04 12r10r10         [24]13435 	lcall	_LCD_string_write
                                  13436 ;	.\ecen4350_lcd_v4.c:3216: setColorDefault();
      004C07 12r15rD4         [24]13437 	lcall	_setColorDefault
                                  13438 ;	.\ecen4350_lcd_v4.c:3217: LCD_string_write(" Entering Parity...\n");
      004C0A 90r0Fr7F         [24]13439 	mov	dptr,#___str_189
      004C0D 75 F0 80         [24]13440 	mov	b,#0x80
      004C10 12r10r10         [24]13441 	lcall	_LCD_string_write
                                  13442 ;	.\ecen4350_lcd_v4.c:3218: delay(40);
      004C13 90 00 28         [24]13443 	mov	dptr,#0x0028
      004C16 12r00rE0         [24]13444 	lcall	_delay
      004C19 D0 06            [24]13445 	pop	ar6
      004C1B D0 07            [24]13446 	pop	ar7
                                  13447 ;	.\ecen4350_lcd_v4.c:3219: goto setParity;
      004C1D 02r4FrD4         [24]13448 	ljmp	00228$
                                  13449 ;	.\ecen4350_lcd_v4.c:3225: setRate: 
      004C20                      13450 00194$:
                                  13451 ;	.\ecen4350_lcd_v4.c:3226: clearLCD();
      004C20 C0 07            [24]13452 	push	ar7
      004C22 C0 06            [24]13453 	push	ar6
      004C24 12r0Dr93         [24]13454 	lcall	_clearLCD
                                  13455 ;	.\ecen4350_lcd_v4.c:3227: fillTop(GRAY);
      004C27 90 D6 BA         [24]13456 	mov	dptr,#0xd6ba
      004C2A 12r0BrC6         [24]13457 	lcall	_fillTop
                                  13458 ;	.\ecen4350_lcd_v4.c:3228: setTextSize(5);
      004C2D 75 82 05         [24]13459 	mov	dpl,#0x05
      004C30 12r05r10         [24]13460 	lcall	_setTextSize
                                  13461 ;	.\ecen4350_lcd_v4.c:3229: setColorMenu();
      004C33 12r16r0D         [24]13462 	lcall	_setColorMenu
                                  13463 ;	.\ecen4350_lcd_v4.c:3230: setCursor(30, 0);
      004C36 E4               [12]13464 	clr	a
      004C37 F5*00            [12]13465 	mov	_setCursor_PARM_2,a
      004C39 F5*01            [12]13466 	mov	(_setCursor_PARM_2 + 1),a
      004C3B 90 00 1E         [24]13467 	mov	dptr,#0x001e
      004C3E 12r04rF6         [24]13468 	lcall	_setCursor
                                  13469 ;	.\ecen4350_lcd_v4.c:3231: LCD_string_write("[UART]\n");
      004C41 90r0CrEE         [24]13470 	mov	dptr,#___str_136
      004C44 75 F0 80         [24]13471 	mov	b,#0x80
      004C47 12r10r10         [24]13472 	lcall	_LCD_string_write
                                  13473 ;	.\ecen4350_lcd_v4.c:3232: setTextSize(2);
      004C4A 75 82 02         [24]13474 	mov	dpl,#0x02
      004C4D 12r05r10         [24]13475 	lcall	_setTextSize
                                  13476 ;	.\ecen4350_lcd_v4.c:3233: setColorDefault();
      004C50 12r15rD4         [24]13477 	lcall	_setColorDefault
                                  13478 ;	.\ecen4350_lcd_v4.c:3234: setCursor(0, 60);
      004C53 75*00 3C         [24]13479 	mov	_setCursor_PARM_2,#0x3c
      004C56 75*01 00         [24]13480 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C59 90 00 00         [24]13481 	mov	dptr,#0x0000
      004C5C 12r04rF6         [24]13482 	lcall	_setCursor
                                  13483 ;	.\ecen4350_lcd_v4.c:3235: LCD_string_write(" <1> 1200 Baud\n");
      004C5F 90r0Fr94         [24]13484 	mov	dptr,#___str_190
      004C62 75 F0 80         [24]13485 	mov	b,#0x80
      004C65 12r10r10         [24]13486 	lcall	_LCD_string_write
                                  13487 ;	.\ecen4350_lcd_v4.c:3236: setCursor(0, 100);
      004C68 75*00 64         [24]13488 	mov	_setCursor_PARM_2,#0x64
      004C6B 75*01 00         [24]13489 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C6E 90 00 00         [24]13490 	mov	dptr,#0x0000
      004C71 12r04rF6         [24]13491 	lcall	_setCursor
                                  13492 ;	.\ecen4350_lcd_v4.c:3237: LCD_string_write(" <2> 2400 Baud\n");
      004C74 90r0FrA4         [24]13493 	mov	dptr,#___str_191
      004C77 75 F0 80         [24]13494 	mov	b,#0x80
      004C7A 12r10r10         [24]13495 	lcall	_LCD_string_write
                                  13496 ;	.\ecen4350_lcd_v4.c:3238: setCursor(0, 140);
      004C7D 75*00 8C         [24]13497 	mov	_setCursor_PARM_2,#0x8c
      004C80 75*01 00         [24]13498 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C83 90 00 00         [24]13499 	mov	dptr,#0x0000
      004C86 12r04rF6         [24]13500 	lcall	_setCursor
                                  13501 ;	.\ecen4350_lcd_v4.c:3239: LCD_string_write(" <3> 4800 Baud\n");
      004C89 90r0FrB4         [24]13502 	mov	dptr,#___str_192
      004C8C 75 F0 80         [24]13503 	mov	b,#0x80
      004C8F 12r10r10         [24]13504 	lcall	_LCD_string_write
                                  13505 ;	.\ecen4350_lcd_v4.c:3240: setCursor(0, 180);
      004C92 75*00 B4         [24]13506 	mov	_setCursor_PARM_2,#0xb4
      004C95 75*01 00         [24]13507 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C98 90 00 00         [24]13508 	mov	dptr,#0x0000
      004C9B 12r04rF6         [24]13509 	lcall	_setCursor
                                  13510 ;	.\ecen4350_lcd_v4.c:3241: LCD_string_write(" <4> 9600 Baud\n");
      004C9E 90r0FrC4         [24]13511 	mov	dptr,#___str_193
      004CA1 75 F0 80         [24]13512 	mov	b,#0x80
      004CA4 12r10r10         [24]13513 	lcall	_LCD_string_write
                                  13514 ;	.\ecen4350_lcd_v4.c:3242: setCursor(0, 220);
      004CA7 75*00 DC         [24]13515 	mov	_setCursor_PARM_2,#0xdc
      004CAA 75*01 00         [24]13516 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CAD 90 00 00         [24]13517 	mov	dptr,#0x0000
      004CB0 12r04rF6         [24]13518 	lcall	_setCursor
                                  13519 ;	.\ecen4350_lcd_v4.c:3243: LCD_string_write(" <5> 19200 Baud\n");
      004CB3 90r0FrD4         [24]13520 	mov	dptr,#___str_194
      004CB6 75 F0 80         [24]13521 	mov	b,#0x80
      004CB9 12r10r10         [24]13522 	lcall	_LCD_string_write
      004CBC D0 06            [24]13523 	pop	ar6
      004CBE D0 07            [24]13524 	pop	ar7
                                  13525 ;	.\ecen4350_lcd_v4.c:3244: baudInput:
      004CC0                      13526 00195$:
                                  13527 ;	.\ecen4350_lcd_v4.c:3245: selection = keyDetect();
      004CC0 C0 07            [24]13528 	push	ar7
      004CC2 C0 06            [24]13529 	push	ar6
      004CC4 12r11r2E         [24]13530 	lcall	_keyDetect
      004CC7 AD 82            [24]13531 	mov	r5,dpl
      004CC9 D0 06            [24]13532 	pop	ar6
      004CCB D0 07            [24]13533 	pop	ar7
      004CCD 78r00            [12]13534 	mov	r0,#_selection
      004CCF A6 05            [24]13535 	mov	@r0,ar5
                                  13536 ;	.\ecen4350_lcd_v4.c:3246: if (selection == '1' ) {
      004CD1 BD 31 4E         [24]13537 	cjne	r5,#0x31,00200$
                                  13538 ;	.\ecen4350_lcd_v4.c:3247: setCursor(0, 60);
      004CD4 75*00 3C         [24]13539 	mov	_setCursor_PARM_2,#0x3c
      004CD7 75*01 00         [24]13540 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CDA 90 00 00         [24]13541 	mov	dptr,#0x0000
      004CDD C0 07            [24]13542 	push	ar7
      004CDF C0 06            [24]13543 	push	ar6
      004CE1 12r04rF6         [24]13544 	lcall	_setCursor
                                  13545 ;	.\ecen4350_lcd_v4.c:3248: LCD_string_write(" ");
      004CE4 90r06r54         [24]13546 	mov	dptr,#___str_30
      004CE7 75 F0 80         [24]13547 	mov	b,#0x80
      004CEA 12r10r10         [24]13548 	lcall	_LCD_string_write
                                  13549 ;	.\ecen4350_lcd_v4.c:3249: setColorHighlight1();
      004CED 12r15rEA         [24]13550 	lcall	_setColorHighlight1
                                  13551 ;	.\ecen4350_lcd_v4.c:3250: LCD_string_write("<1> ");
      004CF0 90r0Er56         [24]13552 	mov	dptr,#___str_170
      004CF3 75 F0 80         [24]13553 	mov	b,#0x80
      004CF6 12r10r10         [24]13554 	lcall	_LCD_string_write
                                  13555 ;	.\ecen4350_lcd_v4.c:3251: setColorHighlight2();
      004CF9 12r15rF6         [24]13556 	lcall	_setColorHighlight2
                                  13557 ;	.\ecen4350_lcd_v4.c:3252: LCD_string_write("1200 Baud\n");
      004CFC 90r0FrE5         [24]13558 	mov	dptr,#___str_195
      004CFF 75 F0 80         [24]13559 	mov	b,#0x80
      004D02 12r10r10         [24]13560 	lcall	_LCD_string_write
      004D05 D0 06            [24]13561 	pop	ar6
      004D07 D0 07            [24]13562 	pop	ar7
                                  13563 ;	.\ecen4350_lcd_v4.c:3253: TH1 = 0xE6;	// 1200 baud
      004D09 75 8D E6         [24]13564 	mov	_TH1,#0xe6
                                  13565 ;	.\ecen4350_lcd_v4.c:3254: PCON = 0x00; //SMOD = 0
      004D0C 75 87 00         [24]13566 	mov	_PCON,#0x00
                                  13567 ;	.\ecen4350_lcd_v4.c:3255: baudSet = 1;
      004D0F 78r02            [12]13568 	mov	r0,#_baudSet
      004D11 76 01            [12]13569 	mov	@r0,#0x01
                                  13570 ;	.\ecen4350_lcd_v4.c:3256: baudType = 0x1;
      004D13 78r07            [12]13571 	mov	r0,#_baudType
      004D15 76 01            [12]13572 	mov	@r0,#0x01
                                  13573 ;	.\ecen4350_lcd_v4.c:3257: if (initLock == 1) goto cont;
      004D17 BF 01 02         [24]13574 	cjne	r7,#0x01,00706$
      004D1A 80 03            [24]13575 	sjmp	00707$
      004D1C                      13576 00706$:
      004D1C 02r45r1F         [24]13577 	ljmp	00101$
      004D1F                      13578 00707$:
      004D1F 02r52rE1         [24]13579 	ljmp	00278$
                                  13580 ;	.\ecen4350_lcd_v4.c:3258: else goto uartMenu;
      004D22                      13581 00200$:
                                  13582 ;	.\ecen4350_lcd_v4.c:3260: if (selection == '2' ) {
      004D22 BD 32 4E         [24]13583 	cjne	r5,#0x32,00205$
                                  13584 ;	.\ecen4350_lcd_v4.c:3261: setCursor(0, 100);
      004D25 75*00 64         [24]13585 	mov	_setCursor_PARM_2,#0x64
      004D28 75*01 00         [24]13586 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D2B 90 00 00         [24]13587 	mov	dptr,#0x0000
      004D2E C0 07            [24]13588 	push	ar7
      004D30 C0 06            [24]13589 	push	ar6
      004D32 12r04rF6         [24]13590 	lcall	_setCursor
                                  13591 ;	.\ecen4350_lcd_v4.c:3262: LCD_string_write(" ");
      004D35 90r06r54         [24]13592 	mov	dptr,#___str_30
      004D38 75 F0 80         [24]13593 	mov	b,#0x80
      004D3B 12r10r10         [24]13594 	lcall	_LCD_string_write
                                  13595 ;	.\ecen4350_lcd_v4.c:3263: setColorHighlight1();
      004D3E 12r15rEA         [24]13596 	lcall	_setColorHighlight1
                                  13597 ;	.\ecen4350_lcd_v4.c:3264: LCD_string_write("<2> ");
      004D41 90r0Er8C         [24]13598 	mov	dptr,#___str_173
      004D44 75 F0 80         [24]13599 	mov	b,#0x80
      004D47 12r10r10         [24]13600 	lcall	_LCD_string_write
                                  13601 ;	.\ecen4350_lcd_v4.c:3265: setColorHighlight2();
      004D4A 12r15rF6         [24]13602 	lcall	_setColorHighlight2
                                  13603 ;	.\ecen4350_lcd_v4.c:3266: LCD_string_write("2400 Baud\n");
      004D4D 90r0FrF0         [24]13604 	mov	dptr,#___str_196
      004D50 75 F0 80         [24]13605 	mov	b,#0x80
      004D53 12r10r10         [24]13606 	lcall	_LCD_string_write
      004D56 D0 06            [24]13607 	pop	ar6
      004D58 D0 07            [24]13608 	pop	ar7
                                  13609 ;	.\ecen4350_lcd_v4.c:3267: TH1 = 0xF3; // 2400 baud
      004D5A 75 8D F3         [24]13610 	mov	_TH1,#0xf3
                                  13611 ;	.\ecen4350_lcd_v4.c:3268: PCON = 0x00; //SMOD = 0
      004D5D 75 87 00         [24]13612 	mov	_PCON,#0x00
                                  13613 ;	.\ecen4350_lcd_v4.c:3269: baudSet = 1;
      004D60 78r02            [12]13614 	mov	r0,#_baudSet
      004D62 76 01            [12]13615 	mov	@r0,#0x01
                                  13616 ;	.\ecen4350_lcd_v4.c:3270: baudType = 0x2;
      004D64 78r07            [12]13617 	mov	r0,#_baudType
      004D66 76 02            [12]13618 	mov	@r0,#0x02
                                  13619 ;	.\ecen4350_lcd_v4.c:3271: if (initLock == 1) goto cont;
      004D68 BF 01 02         [24]13620 	cjne	r7,#0x01,00710$
      004D6B 80 03            [24]13621 	sjmp	00711$
      004D6D                      13622 00710$:
      004D6D 02r45r1F         [24]13623 	ljmp	00101$
      004D70                      13624 00711$:
      004D70 02r52rE1         [24]13625 	ljmp	00278$
                                  13626 ;	.\ecen4350_lcd_v4.c:3272: else goto uartMenu;
      004D73                      13627 00205$:
                                  13628 ;	.\ecen4350_lcd_v4.c:3274: if (selection == '3' ) {
      004D73 BD 33 4E         [24]13629 	cjne	r5,#0x33,00210$
                                  13630 ;	.\ecen4350_lcd_v4.c:3275: setCursor(0, 140);
      004D76 75*00 8C         [24]13631 	mov	_setCursor_PARM_2,#0x8c
      004D79 75*01 00         [24]13632 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D7C 90 00 00         [24]13633 	mov	dptr,#0x0000
      004D7F C0 07            [24]13634 	push	ar7
      004D81 C0 06            [24]13635 	push	ar6
      004D83 12r04rF6         [24]13636 	lcall	_setCursor
                                  13637 ;	.\ecen4350_lcd_v4.c:3276: LCD_string_write(" ");
      004D86 90r06r54         [24]13638 	mov	dptr,#___str_30
      004D89 75 F0 80         [24]13639 	mov	b,#0x80
      004D8C 12r10r10         [24]13640 	lcall	_LCD_string_write
                                  13641 ;	.\ecen4350_lcd_v4.c:3277: setColorHighlight1();
      004D8F 12r15rEA         [24]13642 	lcall	_setColorHighlight1
                                  13643 ;	.\ecen4350_lcd_v4.c:3278: LCD_string_write("<3> ");
      004D92 90r0ErB0         [24]13644 	mov	dptr,#___str_176
      004D95 75 F0 80         [24]13645 	mov	b,#0x80
      004D98 12r10r10         [24]13646 	lcall	_LCD_string_write
                                  13647 ;	.\ecen4350_lcd_v4.c:3279: setColorHighlight2();
      004D9B 12r15rF6         [24]13648 	lcall	_setColorHighlight2
                                  13649 ;	.\ecen4350_lcd_v4.c:3280: LCD_string_write("4800 Baud\n");
      004D9E 90r0FrFB         [24]13650 	mov	dptr,#___str_197
      004DA1 75 F0 80         [24]13651 	mov	b,#0x80
      004DA4 12r10r10         [24]13652 	lcall	_LCD_string_write
      004DA7 D0 06            [24]13653 	pop	ar6
      004DA9 D0 07            [24]13654 	pop	ar7
                                  13655 ;	.\ecen4350_lcd_v4.c:3281: TH1 = 0xF3; //4800 baud
      004DAB 75 8D F3         [24]13656 	mov	_TH1,#0xf3
                                  13657 ;	.\ecen4350_lcd_v4.c:3282: PCON = 0x80; //SMOD 1
      004DAE 75 87 80         [24]13658 	mov	_PCON,#0x80
                                  13659 ;	.\ecen4350_lcd_v4.c:3283: baudSet = 1; 
      004DB1 78r02            [12]13660 	mov	r0,#_baudSet
      004DB3 76 01            [12]13661 	mov	@r0,#0x01
                                  13662 ;	.\ecen4350_lcd_v4.c:3284: baudType = 0x3;
      004DB5 78r07            [12]13663 	mov	r0,#_baudType
      004DB7 76 03            [12]13664 	mov	@r0,#0x03
                                  13665 ;	.\ecen4350_lcd_v4.c:3285: if (initLock == 1) goto cont;
      004DB9 BF 01 02         [24]13666 	cjne	r7,#0x01,00714$
      004DBC 80 03            [24]13667 	sjmp	00715$
      004DBE                      13668 00714$:
      004DBE 02r45r1F         [24]13669 	ljmp	00101$
      004DC1                      13670 00715$:
      004DC1 02r52rE1         [24]13671 	ljmp	00278$
                                  13672 ;	.\ecen4350_lcd_v4.c:3286: else goto uartMenu;
      004DC4                      13673 00210$:
                                  13674 ;	.\ecen4350_lcd_v4.c:3288: if (selection == '4' ) {
      004DC4 BD 34 4E         [24]13675 	cjne	r5,#0x34,00215$
                                  13676 ;	.\ecen4350_lcd_v4.c:3289: setCursor(0, 180);
      004DC7 75*00 B4         [24]13677 	mov	_setCursor_PARM_2,#0xb4
      004DCA 75*01 00         [24]13678 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DCD 90 00 00         [24]13679 	mov	dptr,#0x0000
      004DD0 C0 07            [24]13680 	push	ar7
      004DD2 C0 06            [24]13681 	push	ar6
      004DD4 12r04rF6         [24]13682 	lcall	_setCursor
                                  13683 ;	.\ecen4350_lcd_v4.c:3290: LCD_string_write(" ");
      004DD7 90r06r54         [24]13684 	mov	dptr,#___str_30
      004DDA 75 F0 80         [24]13685 	mov	b,#0x80
      004DDD 12r10r10         [24]13686 	lcall	_LCD_string_write
                                  13687 ;	.\ecen4350_lcd_v4.c:3291: setColorHighlight1();
      004DE0 12r15rEA         [24]13688 	lcall	_setColorHighlight1
                                  13689 ;	.\ecen4350_lcd_v4.c:3292: LCD_string_write("<4> ");
      004DE3 90r0Er0C         [24]13690 	mov	dptr,#___str_163
      004DE6 75 F0 80         [24]13691 	mov	b,#0x80
      004DE9 12r10r10         [24]13692 	lcall	_LCD_string_write
                                  13693 ;	.\ecen4350_lcd_v4.c:3293: setColorHighlight2();
      004DEC 12r15rF6         [24]13694 	lcall	_setColorHighlight2
                                  13695 ;	.\ecen4350_lcd_v4.c:3294: LCD_string_write("9600 Baud\n");
      004DEF 90r10r06         [24]13696 	mov	dptr,#___str_198
      004DF2 75 F0 80         [24]13697 	mov	b,#0x80
      004DF5 12r10r10         [24]13698 	lcall	_LCD_string_write
      004DF8 D0 06            [24]13699 	pop	ar6
      004DFA D0 07            [24]13700 	pop	ar7
                                  13701 ;	.\ecen4350_lcd_v4.c:3295: TH1 = 0xFD; //9600 baud
      004DFC 75 8D FD         [24]13702 	mov	_TH1,#0xfd
                                  13703 ;	.\ecen4350_lcd_v4.c:3296: PCON = 0x00; //SMOD 0
      004DFF 75 87 00         [24]13704 	mov	_PCON,#0x00
                                  13705 ;	.\ecen4350_lcd_v4.c:3297: baudSet = 1;
      004E02 78r02            [12]13706 	mov	r0,#_baudSet
      004E04 76 01            [12]13707 	mov	@r0,#0x01
                                  13708 ;	.\ecen4350_lcd_v4.c:3298: baudType = 0x4;
      004E06 78r07            [12]13709 	mov	r0,#_baudType
      004E08 76 04            [12]13710 	mov	@r0,#0x04
                                  13711 ;	.\ecen4350_lcd_v4.c:3299: if (initLock == 1) goto cont;
      004E0A BF 01 02         [24]13712 	cjne	r7,#0x01,00718$
      004E0D 80 03            [24]13713 	sjmp	00719$
      004E0F                      13714 00718$:
      004E0F 02r45r1F         [24]13715 	ljmp	00101$
      004E12                      13716 00719$:
      004E12 02r52rE1         [24]13717 	ljmp	00278$
                                  13718 ;	.\ecen4350_lcd_v4.c:3300: else goto uartMenu;
      004E15                      13719 00215$:
                                  13720 ;	.\ecen4350_lcd_v4.c:3302: if (selection == '5' ) {
      004E15 BD 35 4E         [24]13721 	cjne	r5,#0x35,00219$
                                  13722 ;	.\ecen4350_lcd_v4.c:3303: setCursor(0, 220);
      004E18 75*00 DC         [24]13723 	mov	_setCursor_PARM_2,#0xdc
      004E1B 75*01 00         [24]13724 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E1E 90 00 00         [24]13725 	mov	dptr,#0x0000
      004E21 C0 07            [24]13726 	push	ar7
      004E23 C0 06            [24]13727 	push	ar6
      004E25 12r04rF6         [24]13728 	lcall	_setCursor
                                  13729 ;	.\ecen4350_lcd_v4.c:3304: LCD_string_write(" ");
      004E28 90r06r54         [24]13730 	mov	dptr,#___str_30
      004E2B 75 F0 80         [24]13731 	mov	b,#0x80
      004E2E 12r10r10         [24]13732 	lcall	_LCD_string_write
                                  13733 ;	.\ecen4350_lcd_v4.c:3305: setColorHighlight1();
      004E31 12r15rEA         [24]13734 	lcall	_setColorHighlight1
                                  13735 ;	.\ecen4350_lcd_v4.c:3306: LCD_string_write("<5> ");
      004E34 90r10r11         [24]13736 	mov	dptr,#___str_199
      004E37 75 F0 80         [24]13737 	mov	b,#0x80
      004E3A 12r10r10         [24]13738 	lcall	_LCD_string_write
                                  13739 ;	.\ecen4350_lcd_v4.c:3307: setColorHighlight2();
      004E3D 12r15rF6         [24]13740 	lcall	_setColorHighlight2
                                  13741 ;	.\ecen4350_lcd_v4.c:3308: LCD_string_write("19200 Baud\n");
      004E40 90r10r16         [24]13742 	mov	dptr,#___str_200
      004E43 75 F0 80         [24]13743 	mov	b,#0x80
      004E46 12r10r10         [24]13744 	lcall	_LCD_string_write
      004E49 D0 06            [24]13745 	pop	ar6
      004E4B D0 07            [24]13746 	pop	ar7
                                  13747 ;	.\ecen4350_lcd_v4.c:3309: TH1 = 0xFD;	//19200 baud
      004E4D 75 8D FD         [24]13748 	mov	_TH1,#0xfd
                                  13749 ;	.\ecen4350_lcd_v4.c:3310: PCON = 0x80; //SMOD 1
      004E50 75 87 80         [24]13750 	mov	_PCON,#0x80
                                  13751 ;	.\ecen4350_lcd_v4.c:3311: baudSet = 1;
      004E53 78r02            [12]13752 	mov	r0,#_baudSet
      004E55 76 01            [12]13753 	mov	@r0,#0x01
                                  13754 ;	.\ecen4350_lcd_v4.c:3312: baudType = 0x5;
      004E57 78r07            [12]13755 	mov	r0,#_baudType
      004E59 76 05            [12]13756 	mov	@r0,#0x05
                                  13757 ;	.\ecen4350_lcd_v4.c:3313: if (initLock == 1) goto cont;
      004E5B BF 01 02         [24]13758 	cjne	r7,#0x01,00722$
      004E5E 80 03            [24]13759 	sjmp	00723$
      004E60                      13760 00722$:
      004E60 02r45r1F         [24]13761 	ljmp	00101$
      004E63                      13762 00723$:
      004E63 02r52rE1         [24]13763 	ljmp	00278$
                                  13764 ;	.\ecen4350_lcd_v4.c:3314: goto uartMenu;
      004E66                      13765 00219$:
                                  13766 ;	.\ecen4350_lcd_v4.c:3316: setColorRed();
      004E66 C0 07            [24]13767 	push	ar7
      004E68 C0 06            [24]13768 	push	ar6
      004E6A 12r16r19         [24]13769 	lcall	_setColorRed
                                  13770 ;	.\ecen4350_lcd_v4.c:3317: setCursor(0, 240);
      004E6D 75*00 F0         [24]13771 	mov	_setCursor_PARM_2,#0xf0
      004E70 75*01 00         [24]13772 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E73 90 00 00         [24]13773 	mov	dptr,#0x0000
      004E76 12r04rF6         [24]13774 	lcall	_setCursor
                                  13775 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write(" INPUT ERROR");
      004E79 90r10r22         [24]13776 	mov	dptr,#___str_201
      004E7C 75 F0 80         [24]13777 	mov	b,#0x80
      004E7F 12r10r10         [24]13778 	lcall	_LCD_string_write
                                  13779 ;	.\ecen4350_lcd_v4.c:3319: delay(20);
      004E82 90 00 14         [24]13780 	mov	dptr,#0x0014
      004E85 12r00rE0         [24]13781 	lcall	_delay
                                  13782 ;	.\ecen4350_lcd_v4.c:3320: setColorDefault();
      004E88 12r15rD4         [24]13783 	lcall	_setColorDefault
                                  13784 ;	.\ecen4350_lcd_v4.c:3321: setCursor(0, 240);
      004E8B 75*00 F0         [24]13785 	mov	_setCursor_PARM_2,#0xf0
      004E8E 75*01 00         [24]13786 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E91 90 00 00         [24]13787 	mov	dptr,#0x0000
      004E94 12r04rF6         [24]13788 	lcall	_setCursor
                                  13789 ;	.\ecen4350_lcd_v4.c:3322: LCD_string_write("            ");
      004E97 90r10r2F         [24]13790 	mov	dptr,#___str_202
      004E9A 75 F0 80         [24]13791 	mov	b,#0x80
      004E9D 12r10r10         [24]13792 	lcall	_LCD_string_write
      004EA0 D0 06            [24]13793 	pop	ar6
      004EA2 D0 07            [24]13794 	pop	ar7
                                  13795 ;	.\ecen4350_lcd_v4.c:3323: goto baudInput;
      004EA4 02r4CrC0         [24]13796 	ljmp	00195$
                                  13797 ;	.\ecen4350_lcd_v4.c:3326: setBit:
      004EA7                      13798 00221$:
                                  13799 ;	.\ecen4350_lcd_v4.c:3327: clearLCD();
      004EA7 C0 07            [24]13800 	push	ar7
      004EA9 12r0Dr93         [24]13801 	lcall	_clearLCD
                                  13802 ;	.\ecen4350_lcd_v4.c:3328: fillTop(GRAY);
      004EAC 90 D6 BA         [24]13803 	mov	dptr,#0xd6ba
      004EAF 12r0BrC6         [24]13804 	lcall	_fillTop
                                  13805 ;	.\ecen4350_lcd_v4.c:3329: setTextSize(5);
      004EB2 75 82 05         [24]13806 	mov	dpl,#0x05
      004EB5 12r05r10         [24]13807 	lcall	_setTextSize
                                  13808 ;	.\ecen4350_lcd_v4.c:3330: setColorMenu();
      004EB8 12r16r0D         [24]13809 	lcall	_setColorMenu
                                  13810 ;	.\ecen4350_lcd_v4.c:3331: setCursor(30, 0);
      004EBB E4               [12]13811 	clr	a
      004EBC F5*00            [12]13812 	mov	_setCursor_PARM_2,a
      004EBE F5*01            [12]13813 	mov	(_setCursor_PARM_2 + 1),a
      004EC0 90 00 1E         [24]13814 	mov	dptr,#0x001e
      004EC3 12r04rF6         [24]13815 	lcall	_setCursor
                                  13816 ;	.\ecen4350_lcd_v4.c:3332: LCD_string_write("[UART]\n");
      004EC6 90r0CrEE         [24]13817 	mov	dptr,#___str_136
      004EC9 75 F0 80         [24]13818 	mov	b,#0x80
      004ECC 12r10r10         [24]13819 	lcall	_LCD_string_write
                                  13820 ;	.\ecen4350_lcd_v4.c:3333: setTextSize(2);
      004ECF 75 82 02         [24]13821 	mov	dpl,#0x02
      004ED2 12r05r10         [24]13822 	lcall	_setTextSize
                                  13823 ;	.\ecen4350_lcd_v4.c:3334: setColorDefault();
      004ED5 12r15rD4         [24]13824 	lcall	_setColorDefault
                                  13825 ;	.\ecen4350_lcd_v4.c:3335: setCursor(0, 60);
      004ED8 75*00 3C         [24]13826 	mov	_setCursor_PARM_2,#0x3c
      004EDB 75*01 00         [24]13827 	mov	(_setCursor_PARM_2 + 1),#0x00
      004EDE 90 00 00         [24]13828 	mov	dptr,#0x0000
      004EE1 12r04rF6         [24]13829 	lcall	_setCursor
                                  13830 ;	.\ecen4350_lcd_v4.c:3336: LCD_string_write(" <1> 8-bit Mode\n");
      004EE4 90r10r3C         [24]13831 	mov	dptr,#___str_203
      004EE7 75 F0 80         [24]13832 	mov	b,#0x80
      004EEA 12r10r10         [24]13833 	lcall	_LCD_string_write
                                  13834 ;	.\ecen4350_lcd_v4.c:3337: setCursor(0, 100);
      004EED 75*00 64         [24]13835 	mov	_setCursor_PARM_2,#0x64
      004EF0 75*01 00         [24]13836 	mov	(_setCursor_PARM_2 + 1),#0x00
      004EF3 90 00 00         [24]13837 	mov	dptr,#0x0000
      004EF6 12r04rF6         [24]13838 	lcall	_setCursor
                                  13839 ;	.\ecen4350_lcd_v4.c:3338: LCD_string_write(" <2> 9-bit Mode\n");
      004EF9 90r10r4D         [24]13840 	mov	dptr,#___str_204
      004EFC 75 F0 80         [24]13841 	mov	b,#0x80
      004EFF 12r10r10         [24]13842 	lcall	_LCD_string_write
      004F02 D0 07            [24]13843 	pop	ar7
                                  13844 ;	.\ecen4350_lcd_v4.c:3339: sel:
      004F04                      13845 00222$:
                                  13846 ;	.\ecen4350_lcd_v4.c:3340: selection = keyDetect();
      004F04 C0 07            [24]13847 	push	ar7
      004F06 12r11r2E         [24]13848 	lcall	_keyDetect
      004F09 AD 82            [24]13849 	mov	r5,dpl
      004F0B D0 07            [24]13850 	pop	ar7
      004F0D 78r00            [12]13851 	mov	r0,#_selection
      004F0F A6 05            [24]13852 	mov	@r0,ar5
                                  13853 ;	.\ecen4350_lcd_v4.c:3341: if (selection == '1') {
      004F11 BD 31 3E         [24]13854 	cjne	r5,#0x31,00224$
                                  13855 ;	.\ecen4350_lcd_v4.c:3342: setCursor(0, 60);
      004F14 75*00 3C         [24]13856 	mov	_setCursor_PARM_2,#0x3c
      004F17 75*01 00         [24]13857 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F1A 90 00 00         [24]13858 	mov	dptr,#0x0000
      004F1D C0 07            [24]13859 	push	ar7
      004F1F 12r04rF6         [24]13860 	lcall	_setCursor
                                  13861 ;	.\ecen4350_lcd_v4.c:3343: LCD_string_write(" ");
      004F22 90r06r54         [24]13862 	mov	dptr,#___str_30
      004F25 75 F0 80         [24]13863 	mov	b,#0x80
      004F28 12r10r10         [24]13864 	lcall	_LCD_string_write
                                  13865 ;	.\ecen4350_lcd_v4.c:3344: setColorHighlight1();
      004F2B 12r15rEA         [24]13866 	lcall	_setColorHighlight1
                                  13867 ;	.\ecen4350_lcd_v4.c:3345: LCD_string_write("<1> ");
      004F2E 90r0Er56         [24]13868 	mov	dptr,#___str_170
      004F31 75 F0 80         [24]13869 	mov	b,#0x80
      004F34 12r10r10         [24]13870 	lcall	_LCD_string_write
                                  13871 ;	.\ecen4350_lcd_v4.c:3346: setColorHighlight2();
      004F37 12r15rF6         [24]13872 	lcall	_setColorHighlight2
                                  13873 ;	.\ecen4350_lcd_v4.c:3347: LCD_string_write("8-bit Mode\n");
      004F3A 90r10r5E         [24]13874 	mov	dptr,#___str_205
      004F3D 75 F0 80         [24]13875 	mov	b,#0x80
      004F40 12r10r10         [24]13876 	lcall	_LCD_string_write
      004F43 D0 07            [24]13877 	pop	ar7
                                  13878 ;	.\ecen4350_lcd_v4.c:3348: bitSet = 1;
      004F45 78r03            [12]13879 	mov	r0,#_bitSet
      004F47 76 01            [12]13880 	mov	@r0,#0x01
                                  13881 ;	.\ecen4350_lcd_v4.c:3349: _8b = 1;
      004F49 78r09            [12]13882 	mov	r0,#__8b
      004F4B 76 01            [12]13883 	mov	@r0,#0x01
                                  13884 ;	.\ecen4350_lcd_v4.c:3350: temp = 1;
      004F4D 7E 01            [12]13885 	mov	r6,#0x01
                                  13886 ;	.\ecen4350_lcd_v4.c:3351: goto cont;
      004F4F 02r52rE1         [24]13887 	ljmp	00278$
      004F52                      13888 00224$:
                                  13889 ;	.\ecen4350_lcd_v4.c:3352: } if (selection == '2') {
      004F52 BD 32 3E         [24]13890 	cjne	r5,#0x32,00226$
                                  13891 ;	.\ecen4350_lcd_v4.c:3353: setCursor(0, 100);
      004F55 75*00 64         [24]13892 	mov	_setCursor_PARM_2,#0x64
      004F58 75*01 00         [24]13893 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F5B 90 00 00         [24]13894 	mov	dptr,#0x0000
      004F5E C0 07            [24]13895 	push	ar7
      004F60 12r04rF6         [24]13896 	lcall	_setCursor
                                  13897 ;	.\ecen4350_lcd_v4.c:3354: LCD_string_write(" ");
      004F63 90r06r54         [24]13898 	mov	dptr,#___str_30
      004F66 75 F0 80         [24]13899 	mov	b,#0x80
      004F69 12r10r10         [24]13900 	lcall	_LCD_string_write
                                  13901 ;	.\ecen4350_lcd_v4.c:3355: setColorHighlight1();
      004F6C 12r15rEA         [24]13902 	lcall	_setColorHighlight1
                                  13903 ;	.\ecen4350_lcd_v4.c:3356: LCD_string_write("<2> ");
      004F6F 90r0Er8C         [24]13904 	mov	dptr,#___str_173
      004F72 75 F0 80         [24]13905 	mov	b,#0x80
      004F75 12r10r10         [24]13906 	lcall	_LCD_string_write
                                  13907 ;	.\ecen4350_lcd_v4.c:3357: setColorHighlight2();
      004F78 12r15rF6         [24]13908 	lcall	_setColorHighlight2
                                  13909 ;	.\ecen4350_lcd_v4.c:3358: LCD_string_write("9-bit Mode\n");
      004F7B 90r10r6A         [24]13910 	mov	dptr,#___str_206
      004F7E 75 F0 80         [24]13911 	mov	b,#0x80
      004F81 12r10r10         [24]13912 	lcall	_LCD_string_write
      004F84 D0 07            [24]13913 	pop	ar7
                                  13914 ;	.\ecen4350_lcd_v4.c:3359: bitSet = 1;
      004F86 78r03            [12]13915 	mov	r0,#_bitSet
      004F88 76 01            [12]13916 	mov	@r0,#0x01
                                  13917 ;	.\ecen4350_lcd_v4.c:3360: _8b = 0;
      004F8A 78r09            [12]13918 	mov	r0,#__8b
      004F8C 76 00            [12]13919 	mov	@r0,#0x00
                                  13920 ;	.\ecen4350_lcd_v4.c:3361: temp = 2;
      004F8E 7E 02            [12]13921 	mov	r6,#0x02
                                  13922 ;	.\ecen4350_lcd_v4.c:3362: goto cont;
      004F90 02r52rE1         [24]13923 	ljmp	00278$
      004F93                      13924 00226$:
                                  13925 ;	.\ecen4350_lcd_v4.c:3364: bitSet = 0;
      004F93 78r03            [12]13926 	mov	r0,#_bitSet
      004F95 76 00            [12]13927 	mov	@r0,#0x00
                                  13928 ;	.\ecen4350_lcd_v4.c:3365: setColorRed();
      004F97 C0 07            [24]13929 	push	ar7
      004F99 12r16r19         [24]13930 	lcall	_setColorRed
                                  13931 ;	.\ecen4350_lcd_v4.c:3366: setCursor(0, 240);
      004F9C 75*00 F0         [24]13932 	mov	_setCursor_PARM_2,#0xf0
      004F9F 75*01 00         [24]13933 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FA2 90 00 00         [24]13934 	mov	dptr,#0x0000
      004FA5 12r04rF6         [24]13935 	lcall	_setCursor
                                  13936 ;	.\ecen4350_lcd_v4.c:3367: LCD_string_write(" INPUT ERROR");
      004FA8 90r10r22         [24]13937 	mov	dptr,#___str_201
      004FAB 75 F0 80         [24]13938 	mov	b,#0x80
      004FAE 12r10r10         [24]13939 	lcall	_LCD_string_write
                                  13940 ;	.\ecen4350_lcd_v4.c:3368: delay(20);
      004FB1 90 00 14         [24]13941 	mov	dptr,#0x0014
      004FB4 12r00rE0         [24]13942 	lcall	_delay
                                  13943 ;	.\ecen4350_lcd_v4.c:3369: setColorDefault();
      004FB7 12r15rD4         [24]13944 	lcall	_setColorDefault
                                  13945 ;	.\ecen4350_lcd_v4.c:3370: setCursor(0, 240);
      004FBA 75*00 F0         [24]13946 	mov	_setCursor_PARM_2,#0xf0
      004FBD 75*01 00         [24]13947 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FC0 90 00 00         [24]13948 	mov	dptr,#0x0000
      004FC3 12r04rF6         [24]13949 	lcall	_setCursor
                                  13950 ;	.\ecen4350_lcd_v4.c:3371: LCD_string_write("            ");
      004FC6 90r10r2F         [24]13951 	mov	dptr,#___str_202
      004FC9 75 F0 80         [24]13952 	mov	b,#0x80
      004FCC 12r10r10         [24]13953 	lcall	_LCD_string_write
      004FCF D0 07            [24]13954 	pop	ar7
                                  13955 ;	.\ecen4350_lcd_v4.c:3372: goto sel;
      004FD1 02r4Fr04         [24]13956 	ljmp	00222$
                                  13957 ;	.\ecen4350_lcd_v4.c:3375: setParity:
      004FD4                      13958 00228$:
                                  13959 ;	.\ecen4350_lcd_v4.c:3376: if (temp == 0) {
      004FD4 EE               [12]13960 	mov	a,r6
                                  13961 ;	.\ecen4350_lcd_v4.c:3377: setCursor(0, 240);
      004FD5 70 3D            [24]13962 	jnz	00230$
      004FD7 75*00 F0         [24]13963 	mov	_setCursor_PARM_2,#0xf0
      004FDA F5*01            [12]13964 	mov	(_setCursor_PARM_2 + 1),a
      004FDC 90 00 00         [24]13965 	mov	dptr,#0x0000
      004FDF C0 07            [24]13966 	push	ar7
      004FE1 C0 06            [24]13967 	push	ar6
      004FE3 12r04rF6         [24]13968 	lcall	_setCursor
                                  13969 ;	.\ecen4350_lcd_v4.c:3378: setColorRed();
      004FE6 12r16r19         [24]13970 	lcall	_setColorRed
                                  13971 ;	.\ecen4350_lcd_v4.c:3379: writeNewLine();
      004FE9 12r10r4F         [24]13972 	lcall	_writeNewLine
                                  13973 ;	.\ecen4350_lcd_v4.c:3380: LCD_string_write("\n Please set the\n  bit mode first.\n");
      004FEC 90r10r76         [24]13974 	mov	dptr,#___str_207
      004FEF 75 F0 80         [24]13975 	mov	b,#0x80
      004FF2 12r10r10         [24]13976 	lcall	_LCD_string_write
                                  13977 ;	.\ecen4350_lcd_v4.c:3381: setColorDefault();
      004FF5 12r15rD4         [24]13978 	lcall	_setColorDefault
                                  13979 ;	.\ecen4350_lcd_v4.c:3382: setCursor(0, 140);
      004FF8 75*00 8C         [24]13980 	mov	_setCursor_PARM_2,#0x8c
      004FFB 75*01 00         [24]13981 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FFE 90 00 00         [24]13982 	mov	dptr,#0x0000
      005001 12r04rF6         [24]13983 	lcall	_setCursor
                                  13984 ;	.\ecen4350_lcd_v4.c:3383: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      005004 90r0Dr8B         [24]13985 	mov	dptr,#___str_155
      005007 75 F0 80         [24]13986 	mov	b,#0x80
      00500A 12r10r10         [24]13987 	lcall	_LCD_string_write
      00500D D0 06            [24]13988 	pop	ar6
      00500F D0 07            [24]13989 	pop	ar7
                                  13990 ;	.\ecen4350_lcd_v4.c:3384: goto mainInput;
      005011 02r48r02         [24]13991 	ljmp	00147$
      005014                      13992 00230$:
                                  13993 ;	.\ecen4350_lcd_v4.c:3385: } if (temp == 1) {
      005014 BE 01 04         [24]13994 	cjne	r6,#0x01,00232$
                                  13995 ;	.\ecen4350_lcd_v4.c:3386: _8b = 1;
      005017 78r09            [12]13996 	mov	r0,#__8b
      005019 76 01            [12]13997 	mov	@r0,#0x01
      00501B                      13998 00232$:
                                  13999 ;	.\ecen4350_lcd_v4.c:3387: } if (temp == 2) {
      00501B BE 02 04         [24]14000 	cjne	r6,#0x02,00234$
                                  14001 ;	.\ecen4350_lcd_v4.c:3388: _8b = 0;
      00501E 78r09            [12]14002 	mov	r0,#__8b
      005020 76 00            [12]14003 	mov	@r0,#0x00
      005022                      14004 00234$:
                                  14005 ;	.\ecen4350_lcd_v4.c:3390: clearLCD();
      005022 C0 07            [24]14006 	push	ar7
      005024 C0 06            [24]14007 	push	ar6
      005026 12r0Dr93         [24]14008 	lcall	_clearLCD
                                  14009 ;	.\ecen4350_lcd_v4.c:3391: fillTop(GRAY);
      005029 90 D6 BA         [24]14010 	mov	dptr,#0xd6ba
      00502C 12r0BrC6         [24]14011 	lcall	_fillTop
                                  14012 ;	.\ecen4350_lcd_v4.c:3392: setTextSize(5);
      00502F 75 82 05         [24]14013 	mov	dpl,#0x05
      005032 12r05r10         [24]14014 	lcall	_setTextSize
                                  14015 ;	.\ecen4350_lcd_v4.c:3393: setColorMenu();
      005035 12r16r0D         [24]14016 	lcall	_setColorMenu
                                  14017 ;	.\ecen4350_lcd_v4.c:3394: setCursor(30, 0);
      005038 E4               [12]14018 	clr	a
      005039 F5*00            [12]14019 	mov	_setCursor_PARM_2,a
      00503B F5*01            [12]14020 	mov	(_setCursor_PARM_2 + 1),a
      00503D 90 00 1E         [24]14021 	mov	dptr,#0x001e
      005040 12r04rF6         [24]14022 	lcall	_setCursor
                                  14023 ;	.\ecen4350_lcd_v4.c:3395: LCD_string_write("[UART]\n");
      005043 90r0CrEE         [24]14024 	mov	dptr,#___str_136
      005046 75 F0 80         [24]14025 	mov	b,#0x80
      005049 12r10r10         [24]14026 	lcall	_LCD_string_write
                                  14027 ;	.\ecen4350_lcd_v4.c:3396: setTextSize(2);
      00504C 75 82 02         [24]14028 	mov	dpl,#0x02
      00504F 12r05r10         [24]14029 	lcall	_setTextSize
                                  14030 ;	.\ecen4350_lcd_v4.c:3397: setColorDefault();
      005052 12r15rD4         [24]14031 	lcall	_setColorDefault
                                  14032 ;	.\ecen4350_lcd_v4.c:3398: setCursor(0, 60);
      005055 75*00 3C         [24]14033 	mov	_setCursor_PARM_2,#0x3c
      005058 75*01 00         [24]14034 	mov	(_setCursor_PARM_2 + 1),#0x00
      00505B 90 00 00         [24]14035 	mov	dptr,#0x0000
      00505E 12r04rF6         [24]14036 	lcall	_setCursor
                                  14037 ;	.\ecen4350_lcd_v4.c:3399: LCD_string_write(" <1> Even Parity\n");
      005061 90r10r9A         [24]14038 	mov	dptr,#___str_208
      005064 75 F0 80         [24]14039 	mov	b,#0x80
      005067 12r10r10         [24]14040 	lcall	_LCD_string_write
                                  14041 ;	.\ecen4350_lcd_v4.c:3400: setCursor(0, 100);
      00506A 75*00 64         [24]14042 	mov	_setCursor_PARM_2,#0x64
      00506D 75*01 00         [24]14043 	mov	(_setCursor_PARM_2 + 1),#0x00
      005070 90 00 00         [24]14044 	mov	dptr,#0x0000
      005073 12r04rF6         [24]14045 	lcall	_setCursor
                                  14046 ;	.\ecen4350_lcd_v4.c:3401: LCD_string_write(" <2> Odd Parity\n");
      005076 90r10rAC         [24]14047 	mov	dptr,#___str_209
      005079 75 F0 80         [24]14048 	mov	b,#0x80
      00507C 12r10r10         [24]14049 	lcall	_LCD_string_write
                                  14050 ;	.\ecen4350_lcd_v4.c:3402: setCursor(0, 140);
      00507F 75*00 8C         [24]14051 	mov	_setCursor_PARM_2,#0x8c
      005082 75*01 00         [24]14052 	mov	(_setCursor_PARM_2 + 1),#0x00
      005085 90 00 00         [24]14053 	mov	dptr,#0x0000
      005088 12r04rF6         [24]14054 	lcall	_setCursor
                                  14055 ;	.\ecen4350_lcd_v4.c:3403: LCD_string_write(" <3> No Parity");
      00508B 90r10rBD         [24]14056 	mov	dptr,#___str_210
      00508E 75 F0 80         [24]14057 	mov	b,#0x80
      005091 12r10r10         [24]14058 	lcall	_LCD_string_write
      005094 D0 06            [24]14059 	pop	ar6
      005096 D0 07            [24]14060 	pop	ar7
                                  14061 ;	.\ecen4350_lcd_v4.c:3405: boop: 
      005098                      14062 00235$:
                                  14063 ;	.\ecen4350_lcd_v4.c:3406: selection = keyDetect();
      005098 C0 07            [24]14064 	push	ar7
      00509A C0 06            [24]14065 	push	ar6
      00509C 12r11r2E         [24]14066 	lcall	_keyDetect
      00509F AD 82            [24]14067 	mov	r5,dpl
      0050A1 D0 06            [24]14068 	pop	ar6
      0050A3 D0 07            [24]14069 	pop	ar7
      0050A5 78r00            [12]14070 	mov	r0,#_selection
      0050A7 A6 05            [24]14071 	mov	@r0,ar5
                                  14072 ;	.\ecen4350_lcd_v4.c:3407: if (selection == '1') {
      0050A9 BD 31 63         [24]14073 	cjne	r5,#0x31,00241$
                                  14074 ;	.\ecen4350_lcd_v4.c:3408: setCursor(0, 60);
      0050AC 75*00 3C         [24]14075 	mov	_setCursor_PARM_2,#0x3c
      0050AF 75*01 00         [24]14076 	mov	(_setCursor_PARM_2 + 1),#0x00
      0050B2 90 00 00         [24]14077 	mov	dptr,#0x0000
      0050B5 C0 07            [24]14078 	push	ar7
      0050B7 C0 06            [24]14079 	push	ar6
      0050B9 12r04rF6         [24]14080 	lcall	_setCursor
                                  14081 ;	.\ecen4350_lcd_v4.c:3409: LCD_string_write(" ");
      0050BC 90r06r54         [24]14082 	mov	dptr,#___str_30
      0050BF 75 F0 80         [24]14083 	mov	b,#0x80
      0050C2 12r10r10         [24]14084 	lcall	_LCD_string_write
                                  14085 ;	.\ecen4350_lcd_v4.c:3410: setColorHighlight1();
      0050C5 12r15rEA         [24]14086 	lcall	_setColorHighlight1
                                  14087 ;	.\ecen4350_lcd_v4.c:3411: LCD_string_write("<1> ");
      0050C8 90r0Er56         [24]14088 	mov	dptr,#___str_170
      0050CB 75 F0 80         [24]14089 	mov	b,#0x80
      0050CE 12r10r10         [24]14090 	lcall	_LCD_string_write
                                  14091 ;	.\ecen4350_lcd_v4.c:3412: setColorHighlight2();
      0050D1 12r15rF6         [24]14092 	lcall	_setColorHighlight2
                                  14093 ;	.\ecen4350_lcd_v4.c:3413: LCD_string_write("Even Parity\n");
      0050D4 90r10rCC         [24]14094 	mov	dptr,#___str_211
      0050D7 75 F0 80         [24]14095 	mov	b,#0x80
      0050DA 12r10r10         [24]14096 	lcall	_LCD_string_write
      0050DD D0 06            [24]14097 	pop	ar6
      0050DF D0 07            [24]14098 	pop	ar7
                                  14099 ;	.\ecen4350_lcd_v4.c:3415: if(_8b == 0) {
      0050E1 78r09            [12]14100 	mov	r0,#__8b
      0050E3 E6               [12]14101 	mov	a,@r0
      0050E4 70 12            [24]14102 	jnz	00237$
                                  14103 ;	.\ecen4350_lcd_v4.c:3416: frame_NEP = 0x111;	//9 bit, Even, Parity Set
      0050E6 78r0C            [12]14104 	mov	r0,#_frame_NEP
      0050E8 76 11            [12]14105 	mov	@r0,#0x11
      0050EA 08               [12]14106 	inc	r0
      0050EB 76 01            [12]14107 	mov	@r0,#0x01
                                  14108 ;	.\ecen4350_lcd_v4.c:3417: paritySet = 1;
      0050ED 78r04            [12]14109 	mov	r0,#_paritySet
      0050EF 76 01            [12]14110 	mov	@r0,#0x01
                                  14111 ;	.\ecen4350_lcd_v4.c:3418: pType = 0x2;
      0050F1 78r08            [12]14112 	mov	r0,#_pType
      0050F3 76 02            [12]14113 	mov	@r0,#0x02
                                  14114 ;	.\ecen4350_lcd_v4.c:3419: goto cont;
      0050F5 02r52rE1         [24]14115 	ljmp	00278$
      0050F8                      14116 00237$:
                                  14117 ;	.\ecen4350_lcd_v4.c:3420: } if (_8b == 1){
      0050F8 78r09            [12]14118 	mov	r0,#__8b
      0050FA B6 01 12         [24]14119 	cjne	@r0,#0x01,00241$
                                  14120 ;	.\ecen4350_lcd_v4.c:3421: frame_NEP = 0x011;	//8 bit, even, Parity Set
      0050FD 78r0C            [12]14121 	mov	r0,#_frame_NEP
      0050FF 76 11            [12]14122 	mov	@r0,#0x11
      005101 08               [12]14123 	inc	r0
      005102 76 00            [12]14124 	mov	@r0,#0x00
                                  14125 ;	.\ecen4350_lcd_v4.c:3422: paritySet = 1;
      005104 78r04            [12]14126 	mov	r0,#_paritySet
      005106 76 01            [12]14127 	mov	@r0,#0x01
                                  14128 ;	.\ecen4350_lcd_v4.c:3423: pType = 0x3;
      005108 78r08            [12]14129 	mov	r0,#_pType
      00510A 76 03            [12]14130 	mov	@r0,#0x03
                                  14131 ;	.\ecen4350_lcd_v4.c:3424: goto cont`;
      00510C 02r52rE1         [24]14132 	ljmp	00278$
      00510F                      14133 00241$:
                                  14134 ;	.\ecen4350_lcd_v4.c:3426: } if (selection == '2') {
      00510F 78r00            [12]14135 	mov	r0,#_selection
      005111 B6 32 63         [24]14136 	cjne	@r0,#0x32,00247$
                                  14137 ;	.\ecen4350_lcd_v4.c:3427: setCursor(0, 100);
      005114 75*00 64         [24]14138 	mov	_setCursor_PARM_2,#0x64
      005117 75*01 00         [24]14139 	mov	(_setCursor_PARM_2 + 1),#0x00
      00511A 90 00 00         [24]14140 	mov	dptr,#0x0000
      00511D C0 07            [24]14141 	push	ar7
      00511F C0 06            [24]14142 	push	ar6
      005121 12r04rF6         [24]14143 	lcall	_setCursor
                                  14144 ;	.\ecen4350_lcd_v4.c:3428: LCD_string_write(" ");
      005124 90r06r54         [24]14145 	mov	dptr,#___str_30
      005127 75 F0 80         [24]14146 	mov	b,#0x80
      00512A 12r10r10         [24]14147 	lcall	_LCD_string_write
                                  14148 ;	.\ecen4350_lcd_v4.c:3429: setColorHighlight1();
      00512D 12r15rEA         [24]14149 	lcall	_setColorHighlight1
                                  14150 ;	.\ecen4350_lcd_v4.c:3430: LCD_string_write("<2> ");
      005130 90r0Er8C         [24]14151 	mov	dptr,#___str_173
      005133 75 F0 80         [24]14152 	mov	b,#0x80
      005136 12r10r10         [24]14153 	lcall	_LCD_string_write
                                  14154 ;	.\ecen4350_lcd_v4.c:3431: setColorHighlight2();
      005139 12r15rF6         [24]14155 	lcall	_setColorHighlight2
                                  14156 ;	.\ecen4350_lcd_v4.c:3432: LCD_string_write("Odd Parity\n");
      00513C 90r10rD9         [24]14157 	mov	dptr,#___str_212
      00513F 75 F0 80         [24]14158 	mov	b,#0x80
      005142 12r10r10         [24]14159 	lcall	_LCD_string_write
      005145 D0 06            [24]14160 	pop	ar6
      005147 D0 07            [24]14161 	pop	ar7
                                  14162 ;	.\ecen4350_lcd_v4.c:3434: if (_8b == 0) {
      005149 78r09            [12]14163 	mov	r0,#__8b
      00514B E6               [12]14164 	mov	a,@r0
      00514C 70 12            [24]14165 	jnz	00243$
                                  14166 ;	.\ecen4350_lcd_v4.c:3435: frame_NEP = 0x101;		//9 bit, odd, parity set
      00514E 78r0C            [12]14167 	mov	r0,#_frame_NEP
      005150 76 01            [12]14168 	mov	@r0,#0x01
      005152 08               [12]14169 	inc	r0
      005153 76 01            [12]14170 	mov	@r0,#0x01
                                  14171 ;	.\ecen4350_lcd_v4.c:3436: paritySet = 1;
      005155 78r04            [12]14172 	mov	r0,#_paritySet
      005157 76 01            [12]14173 	mov	@r0,#0x01
                                  14174 ;	.\ecen4350_lcd_v4.c:3437: pType = 0x4;
      005159 78r08            [12]14175 	mov	r0,#_pType
      00515B 76 04            [12]14176 	mov	@r0,#0x04
                                  14177 ;	.\ecen4350_lcd_v4.c:3438: goto cont;
      00515D 02r52rE1         [24]14178 	ljmp	00278$
      005160                      14179 00243$:
                                  14180 ;	.\ecen4350_lcd_v4.c:3439: } if (_8b == 1) {
      005160 78r09            [12]14181 	mov	r0,#__8b
      005162 B6 01 12         [24]14182 	cjne	@r0,#0x01,00247$
                                  14183 ;	.\ecen4350_lcd_v4.c:3440: frame_NEP = 0x001;		//8 bit, odd, parity set
      005165 78r0C            [12]14184 	mov	r0,#_frame_NEP
      005167 76 01            [12]14185 	mov	@r0,#0x01
      005169 08               [12]14186 	inc	r0
      00516A 76 00            [12]14187 	mov	@r0,#0x00
                                  14188 ;	.\ecen4350_lcd_v4.c:3441: paritySet = 1;
      00516C 78r04            [12]14189 	mov	r0,#_paritySet
      00516E 76 01            [12]14190 	mov	@r0,#0x01
                                  14191 ;	.\ecen4350_lcd_v4.c:3442: pType = 0x5;
      005170 78r08            [12]14192 	mov	r0,#_pType
      005172 76 05            [12]14193 	mov	@r0,#0x05
                                  14194 ;	.\ecen4350_lcd_v4.c:3443: goto cont;
      005174 02r52rE1         [24]14195 	ljmp	00278$
      005177                      14196 00247$:
                                  14197 ;	.\ecen4350_lcd_v4.c:3445: } if (selection == '3') {
      005177 78r00            [12]14198 	mov	r0,#_selection
      005179 B6 33 02         [24]14199 	cjne	@r0,#0x33,00743$
      00517C 80 03            [24]14200 	sjmp	00744$
      00517E                      14201 00743$:
      00517E 02r50r98         [24]14202 	ljmp	00235$
      005181                      14203 00744$:
                                  14204 ;	.\ecen4350_lcd_v4.c:3446: setCursor(0, 140);
      005181 75*00 8C         [24]14205 	mov	_setCursor_PARM_2,#0x8c
      005184 75*01 00         [24]14206 	mov	(_setCursor_PARM_2 + 1),#0x00
      005187 90 00 00         [24]14207 	mov	dptr,#0x0000
      00518A C0 07            [24]14208 	push	ar7
      00518C C0 06            [24]14209 	push	ar6
      00518E 12r04rF6         [24]14210 	lcall	_setCursor
                                  14211 ;	.\ecen4350_lcd_v4.c:3447: LCD_string_write(" ");
      005191 90r06r54         [24]14212 	mov	dptr,#___str_30
      005194 75 F0 80         [24]14213 	mov	b,#0x80
      005197 12r10r10         [24]14214 	lcall	_LCD_string_write
                                  14215 ;	.\ecen4350_lcd_v4.c:3448: setColorHighlight1();
      00519A 12r15rEA         [24]14216 	lcall	_setColorHighlight1
                                  14217 ;	.\ecen4350_lcd_v4.c:3449: LCD_string_write("<3> ");
      00519D 90r0ErB0         [24]14218 	mov	dptr,#___str_176
      0051A0 75 F0 80         [24]14219 	mov	b,#0x80
      0051A3 12r10r10         [24]14220 	lcall	_LCD_string_write
                                  14221 ;	.\ecen4350_lcd_v4.c:3450: setColorHighlight2();
      0051A6 12r15rF6         [24]14222 	lcall	_setColorHighlight2
                                  14223 ;	.\ecen4350_lcd_v4.c:3451: LCD_string_write("No Parity\n");
      0051A9 90r10rE5         [24]14224 	mov	dptr,#___str_213
      0051AC 75 F0 80         [24]14225 	mov	b,#0x80
      0051AF 12r10r10         [24]14226 	lcall	_LCD_string_write
      0051B2 D0 06            [24]14227 	pop	ar6
      0051B4 D0 07            [24]14228 	pop	ar7
                                  14229 ;	.\ecen4350_lcd_v4.c:3453: if (_8b == 0) {
      0051B6 78r09            [12]14230 	mov	r0,#__8b
      0051B8 E6               [12]14231 	mov	a,@r0
                                  14232 ;	.\ecen4350_lcd_v4.c:3454: frame_NEP = 0x100; 			//9 bit, odd, no parity
      0051B9 70 11            [24]14233 	jnz	00249$
      0051BB 78r0C            [12]14234 	mov	r0,#_frame_NEP
      0051BD F6               [12]14235 	mov	@r0,a
      0051BE 08               [12]14236 	inc	r0
      0051BF 76 01            [12]14237 	mov	@r0,#0x01
                                  14238 ;	.\ecen4350_lcd_v4.c:3455: paritySet = 1;
      0051C1 78r04            [12]14239 	mov	r0,#_paritySet
      0051C3 76 01            [12]14240 	mov	@r0,#0x01
                                  14241 ;	.\ecen4350_lcd_v4.c:3456: pType = 0x1;
      0051C5 78r08            [12]14242 	mov	r0,#_pType
      0051C7 76 01            [12]14243 	mov	@r0,#0x01
                                  14244 ;	.\ecen4350_lcd_v4.c:3457: goto cont;
      0051C9 02r52rE1         [24]14245 	ljmp	00278$
      0051CC                      14246 00249$:
                                  14247 ;	.\ecen4350_lcd_v4.c:3458: } if (_8b == 1) {
      0051CC 78r09            [12]14248 	mov	r0,#__8b
      0051CE B6 01 11         [24]14249 	cjne	@r0,#0x01,00255$
                                  14250 ;	.\ecen4350_lcd_v4.c:3459: frame_NEP = 0x000;		 	//8 bit, odd, no parity
      0051D1 78r0C            [12]14251 	mov	r0,#_frame_NEP
      0051D3 E4               [12]14252 	clr	a
      0051D4 F6               [12]14253 	mov	@r0,a
      0051D5 08               [12]14254 	inc	r0
      0051D6 F6               [12]14255 	mov	@r0,a
                                  14256 ;	.\ecen4350_lcd_v4.c:3460: paritySet = 1;
      0051D7 78r04            [12]14257 	mov	r0,#_paritySet
      0051D9 76 01            [12]14258 	mov	@r0,#0x01
                                  14259 ;	.\ecen4350_lcd_v4.c:3461: pType = 0x7;
      0051DB 78r08            [12]14260 	mov	r0,#_pType
      0051DD 76 07            [12]14261 	mov	@r0,#0x07
                                  14262 ;	.\ecen4350_lcd_v4.c:3462: goto cont;
      0051DF 02r52rE1         [24]14263 	ljmp	00278$
                                  14264 ;	.\ecen4350_lcd_v4.c:3466: setFrame:
      0051E2                      14265 00255$:
                                  14266 ;	.\ecen4350_lcd_v4.c:3467: paritySet = 0;
      0051E2 78r04            [12]14267 	mov	r0,#_paritySet
      0051E4 76 00            [12]14268 	mov	@r0,#0x00
                                  14269 ;	.\ecen4350_lcd_v4.c:3468: if ((frame_NEP == 0x000) || 	//8 bit, odd, no parity 
      0051E6 78r0C            [12]14270 	mov	r0,#_frame_NEP
      0051E8 E6               [12]14271 	mov	a,@r0
      0051E9 08               [12]14272 	inc	r0
      0051EA 46               [12]14273 	orl	a,@r0
      0051EB 60 50            [24]14274 	jz	00268$
                                  14275 ;	.\ecen4350_lcd_v4.c:3469: (frame_NEP == 0x001) ||		//8 bit, odd, parity set
      0051ED 78r0C            [12]14276 	mov	r0,#_frame_NEP
      0051EF B6 01 06         [24]14277 	cjne	@r0,#0x01,00749$
      0051F2 08               [12]14278 	inc	r0
      0051F3 B6 00 02         [24]14279 	cjne	@r0,#0x00,00749$
      0051F6 80 45            [24]14280 	sjmp	00268$
      0051F8                      14281 00749$:
                                  14282 ;	.\ecen4350_lcd_v4.c:3470: (frame_NEP == 0x010) ||		//8 bit, even, no parity
      0051F8 78r0C            [12]14283 	mov	r0,#_frame_NEP
      0051FA B6 10 06         [24]14284 	cjne	@r0,#0x10,00750$
      0051FD 08               [12]14285 	inc	r0
      0051FE B6 00 02         [24]14286 	cjne	@r0,#0x00,00750$
      005201 80 3A            [24]14287 	sjmp	00268$
      005203                      14288 00750$:
                                  14289 ;	.\ecen4350_lcd_v4.c:3471: (frame_NEP == 0x011) ||		//8 bit, even, parity set
      005203 78r0C            [12]14290 	mov	r0,#_frame_NEP
      005205 B6 11 06         [24]14291 	cjne	@r0,#0x11,00751$
      005208 08               [12]14292 	inc	r0
      005209 B6 00 02         [24]14293 	cjne	@r0,#0x00,00751$
      00520C 80 2F            [24]14294 	sjmp	00268$
      00520E                      14295 00751$:
                                  14296 ;	.\ecen4350_lcd_v4.c:3472: (frame_NEP == 0x100) ||		//9 bit, odd, no parity
      00520E 78r0C            [12]14297 	mov	r0,#_frame_NEP
      005210 B6 00 06         [24]14298 	cjne	@r0,#0x00,00752$
      005213 08               [12]14299 	inc	r0
      005214 B6 01 02         [24]14300 	cjne	@r0,#0x01,00752$
      005217 80 24            [24]14301 	sjmp	00268$
      005219                      14302 00752$:
                                  14303 ;	.\ecen4350_lcd_v4.c:3473: (frame_NEP == 0x101) ||		//9 bit, odd, parity set
      005219 78r0C            [12]14304 	mov	r0,#_frame_NEP
      00521B B6 01 06         [24]14305 	cjne	@r0,#0x01,00753$
      00521E 08               [12]14306 	inc	r0
      00521F B6 01 02         [24]14307 	cjne	@r0,#0x01,00753$
      005222 80 19            [24]14308 	sjmp	00268$
      005224                      14309 00753$:
                                  14310 ;	.\ecen4350_lcd_v4.c:3474: (frame_NEP == 0x110) ||		//9 bit, even, no parity
      005224 78r0C            [12]14311 	mov	r0,#_frame_NEP
      005226 B6 10 06         [24]14312 	cjne	@r0,#0x10,00754$
      005229 08               [12]14313 	inc	r0
      00522A B6 01 02         [24]14314 	cjne	@r0,#0x01,00754$
      00522D 80 0E            [24]14315 	sjmp	00268$
      00522F                      14316 00754$:
                                  14317 ;	.\ecen4350_lcd_v4.c:3475: (frame_NEP == 0x111)) {		//9 bit, even, parity set
      00522F 78r0C            [12]14318 	mov	r0,#_frame_NEP
      005231 B6 11 06         [24]14319 	cjne	@r0,#0x11,00755$
      005234 08               [12]14320 	inc	r0
      005235 B6 01 02         [24]14321 	cjne	@r0,#0x01,00755$
      005238 80 03            [24]14322 	sjmp	00756$
      00523A                      14323 00755$:
      00523A 02r52rC0         [24]14324 	ljmp	00269$
      00523D                      14325 00756$:
      00523D                      14326 00268$:
                                  14327 ;	.\ecen4350_lcd_v4.c:3477: paritySet = 1;
      00523D 78r04            [12]14328 	mov	r0,#_paritySet
      00523F 76 01            [12]14329 	mov	@r0,#0x01
                                  14330 ;	.\ecen4350_lcd_v4.c:3478: tempFrame = frame_NEP;
      005241 78r0C            [12]14331 	mov	r0,#_frame_NEP
      005243 86 04            [24]14332 	mov	ar4,@r0
      005245 08               [12]14333 	inc	r0
      005246 86 05            [24]14334 	mov	ar5,@r0
      005248 78r0A            [12]14335 	mov	r0,#_tempFrame
      00524A A6 04            [24]14336 	mov	@r0,ar4
      00524C 08               [12]14337 	inc	r0
      00524D A6 05            [24]14338 	mov	@r0,ar5
                                  14339 ;	.\ecen4350_lcd_v4.c:3480: if ((tempFrame & 0x100) == 0x100){ //9-bit Mode
      00524F 7C 00            [12]14340 	mov	r4,#0x00
      005251 53 05 01         [24]14341 	anl	ar5,#0x01
      005254 BC 00 16         [24]14342 	cjne	r4,#0x00,00257$
      005257 BD 01 13         [24]14343 	cjne	r5,#0x01,00257$
                                  14344 ;	.\ecen4350_lcd_v4.c:3481: initLock = 0;
      00525A 7F 00            [12]14345 	mov	r7,#0x00
                                  14346 ;	.\ecen4350_lcd_v4.c:3482: SCON = 0xC0;  	// Asynchronous mode, 9-bit data and 1-stop (b9)
      00525C 75 98 C0         [24]14347 	mov	_SCON,#0xc0
                                  14348 ;	.\ecen4350_lcd_v4.c:3483: TMOD = 0x20;  	// Timer1 input Mode2. input auto reload
      00525F 75 89 20         [24]14349 	mov	_TMOD,#0x20
                                  14350 ;	.\ecen4350_lcd_v4.c:3485: UART_init();  	// 9-bit, Serial Mode 3, variable baud
      005262 C0 07            [24]14351 	push	ar7
      005264 C0 06            [24]14352 	push	ar6
      005266 12r01r13         [24]14353 	lcall	_UART_init
      005269 D0 06            [24]14354 	pop	ar6
      00526B D0 07            [24]14355 	pop	ar7
      00526D                      14356 00257$:
                                  14357 ;	.\ecen4350_lcd_v4.c:3486: } if ((tempFrame & 0x100) == 0x000){
      00526D 78r0B            [12]14358 	mov	r0,#(_tempFrame + 1)
      00526F E6               [12]14359 	mov	a,@r0
      005270 20 E0 13         [24]14360 	jb	acc.0,00259$
                                  14361 ;	.\ecen4350_lcd_v4.c:3487: initLock = 0;
      005273 7F 00            [12]14362 	mov	r7,#0x00
                                  14363 ;	.\ecen4350_lcd_v4.c:3488: SCON = 0x50;  	// Asynchronous mode, 8-bit data and 1-stop bit
      005275 75 98 50         [24]14364 	mov	_SCON,#0x50
                                  14365 ;	.\ecen4350_lcd_v4.c:3489: TMOD = 0x20;  	// Timer1 input Mode2. input 8 bit auto reload
      005278 75 89 20         [24]14366 	mov	_TMOD,#0x20
                                  14367 ;	.\ecen4350_lcd_v4.c:3490: UART_init();	//8-bit Mode, Serial Mode 1; variable baud
      00527B C0 07            [24]14368 	push	ar7
      00527D C0 06            [24]14369 	push	ar6
      00527F 12r01r13         [24]14370 	lcall	_UART_init
      005282 D0 06            [24]14371 	pop	ar6
      005284 D0 07            [24]14372 	pop	ar7
      005286                      14373 00259$:
                                  14374 ;	.\ecen4350_lcd_v4.c:3491: } if ((tempFrame & 0x010) == 0x010) {
      005286 78r0A            [12]14375 	mov	r0,#_tempFrame
      005288 74 10            [12]14376 	mov	a,#0x10
      00528A 56               [12]14377 	anl	a,@r0
      00528B FC               [12]14378 	mov	r4,a
      00528C 7D 00            [12]14379 	mov	r5,#0x00
      00528E BC 10 09         [24]14380 	cjne	r4,#0x10,00261$
      005291 BD 00 06         [24]14381 	cjne	r5,#0x00,00261$
                                  14382 ;	.\ecen4350_lcd_v4.c:3492: initLock = 0;	//even parity
      005294 7F 00            [12]14383 	mov	r7,#0x00
                                  14384 ;	.\ecen4350_lcd_v4.c:3493: parityEven = 1;
      005296 78r05            [12]14385 	mov	r0,#_parityEven
      005298 76 01            [12]14386 	mov	@r0,#0x01
      00529A                      14387 00261$:
                                  14388 ;	.\ecen4350_lcd_v4.c:3495: } if ((tempFrame & 0x010) == 0x000) {
      00529A 78r0A            [12]14389 	mov	r0,#_tempFrame
      00529C E6               [12]14390 	mov	a,@r0
      00529D 20 E4 06         [24]14391 	jb	acc.4,00263$
                                  14392 ;	.\ecen4350_lcd_v4.c:3496: initLock = 0;	//odd parity
      0052A0 7F 00            [12]14393 	mov	r7,#0x00
                                  14394 ;	.\ecen4350_lcd_v4.c:3497: parityEven = 0;
      0052A2 78r05            [12]14395 	mov	r0,#_parityEven
      0052A4 76 00            [12]14396 	mov	@r0,#0x00
      0052A6                      14397 00263$:
                                  14398 ;	.\ecen4350_lcd_v4.c:3499: } if ((tempFrame & 0x001) == 0x001) {
      0052A6 78r0A            [12]14399 	mov	r0,#_tempFrame
      0052A8 74 01            [12]14400 	mov	a,#0x01
      0052AA 56               [12]14401 	anl	a,@r0
      0052AB FC               [12]14402 	mov	r4,a
      0052AC 7D 00            [12]14403 	mov	r5,#0x00
      0052AE BC 01 05         [24]14404 	cjne	r4,#0x01,00265$
      0052B1 BD 00 02         [24]14405 	cjne	r5,#0x00,00265$
                                  14406 ;	.\ecen4350_lcd_v4.c:3500: initLock = 0;	//set parity
      0052B4 7F 00            [12]14407 	mov	r7,#0x00
      0052B6                      14408 00265$:
                                  14409 ;	.\ecen4350_lcd_v4.c:3502: } if ((tempFrame & 0x001) == 0x000) {
      0052B6 78r0A            [12]14410 	mov	r0,#_tempFrame
      0052B8 E6               [12]14411 	mov	a,@r0
      0052B9 20 E0 25         [24]14412 	jb	acc.0,00278$
                                  14413 ;	.\ecen4350_lcd_v4.c:3503: initLock = 0;	//no parity
      0052BC 7F 00            [12]14414 	mov	r7,#0x00
      0052BE 80 21            [24]14415 	sjmp	00278$
      0052C0                      14416 00269$:
                                  14417 ;	.\ecen4350_lcd_v4.c:3507: writeNewLine();
      0052C0 C0 07            [24]14418 	push	ar7
      0052C2 C0 06            [24]14419 	push	ar6
      0052C4 12r10r4F         [24]14420 	lcall	_writeNewLine
                                  14421 ;	.\ecen4350_lcd_v4.c:3508: LCD_string_write(" Something is wrong.\n  UART failed to set.\n");
      0052C7 90r10rF0         [24]14422 	mov	dptr,#___str_214
      0052CA 75 F0 80         [24]14423 	mov	b,#0x80
      0052CD 12r10r10         [24]14424 	lcall	_LCD_string_write
                                  14425 ;	.\ecen4350_lcd_v4.c:3509: delay(80);
      0052D0 90 00 50         [24]14426 	mov	dptr,#0x0050
      0052D3 12r00rE0         [24]14427 	lcall	_delay
      0052D6 D0 06            [24]14428 	pop	ar6
      0052D8 D0 07            [24]14429 	pop	ar7
                                  14430 ;	.\ecen4350_lcd_v4.c:3510: bitSet = 0;
      0052DA 78r03            [12]14431 	mov	r0,#_bitSet
      0052DC 76 00            [12]14432 	mov	@r0,#0x00
                                  14433 ;	.\ecen4350_lcd_v4.c:3511: goto uartMenu;
      0052DE 02r45r1F         [24]14434 	ljmp	00101$
                                  14435 ;	.\ecen4350_lcd_v4.c:3513: cont:
      0052E1                      14436 00278$:
                                  14437 ;	.\ecen4350_lcd_v4.c:3514: if (initLock == 1) goto verifyUART;
      0052E1 BF 01 02         [24]14438 	cjne	r7,#0x01,00766$
      0052E4 80 03            [24]14439 	sjmp	00767$
      0052E6                      14440 00766$:
      0052E6 02r45r1F         [24]14441 	ljmp	00101$
      0052E9                      14442 00767$:
      0052E9 02r4Br11         [24]14443 	ljmp	00175$
                                  14444 ;	.\ecen4350_lcd_v4.c:3516: finish:
                                  14445 ;	.\ecen4350_lcd_v4.c:3517: return;
                                  14446 ;	.\ecen4350_lcd_v4.c:3518: }
      0052EC 22               [24]14447 	ret
                                  14448 ;------------------------------------------------------------
                                  14449 ;Allocation info for local variables in function 'main'
                                  14450 ;------------------------------------------------------------
                                  14451 ;__1310720181              Allocated to registers 
                                  14452 ;__1310720182              Allocated to registers 
                                  14453 ;map_address               Allocated to registers 
                                  14454 ;d                         Allocated to registers 
                                  14455 ;__1310720184              Allocated to registers 
                                  14456 ;__1310720185              Allocated to registers 
                                  14457 ;map_address               Allocated to registers 
                                  14458 ;d                         Allocated to registers 
                                  14459 ;__1310720187              Allocated to registers 
                                  14460 ;__1310720188              Allocated to registers 
                                  14461 ;map_address               Allocated to registers 
                                  14462 ;d                         Allocated to registers 
                                  14463 ;__1310720190              Allocated to registers 
                                  14464 ;__1310720191              Allocated to registers 
                                  14465 ;map_address               Allocated to registers 
                                  14466 ;d                         Allocated to registers 
                                  14467 ;__1966080193              Allocated to registers 
                                  14468 ;__1966080194              Allocated to registers 
                                  14469 ;map_address               Allocated to registers 
                                  14470 ;d                         Allocated to registers 
                                  14471 ;__2621440196              Allocated to registers 
                                  14472 ;__2621440197              Allocated to registers 
                                  14473 ;map_address               Allocated to registers 
                                  14474 ;d                         Allocated to registers 
                                  14475 ;__2621440199              Allocated to registers 
                                  14476 ;__2621440200              Allocated to registers 
                                  14477 ;map_address               Allocated to registers 
                                  14478 ;d                         Allocated to registers 
                                  14479 ;__2621440202              Allocated to registers 
                                  14480 ;__2621440203              Allocated to registers 
                                  14481 ;map_address               Allocated to registers 
                                  14482 ;d                         Allocated to registers 
                                  14483 ;__2621440205              Allocated to registers 
                                  14484 ;__2621440206              Allocated to registers 
                                  14485 ;map_address               Allocated to registers 
                                  14486 ;d                         Allocated to registers 
                                  14487 ;__2621440208              Allocated to registers 
                                  14488 ;__2621440209              Allocated to registers 
                                  14489 ;map_address               Allocated to registers 
                                  14490 ;d                         Allocated to registers 
                                  14491 ;__2621440211              Allocated to registers 
                                  14492 ;__2621440212              Allocated to registers 
                                  14493 ;map_address               Allocated to registers 
                                  14494 ;d                         Allocated to registers 
                                  14495 ;__2621440214              Allocated to registers 
                                  14496 ;__2621440215              Allocated to registers 
                                  14497 ;map_address               Allocated to registers 
                                  14498 ;d                         Allocated to registers 
                                  14499 ;__2621440217              Allocated to registers 
                                  14500 ;__2621440218              Allocated to registers 
                                  14501 ;map_address               Allocated to registers 
                                  14502 ;d                         Allocated to registers 
                                  14503 ;__2621440220              Allocated to registers 
                                  14504 ;__2621440221              Allocated to registers 
                                  14505 ;map_address               Allocated to registers 
                                  14506 ;d                         Allocated to registers 
                                  14507 ;__2621440223              Allocated to registers 
                                  14508 ;__2621440224              Allocated to registers 
                                  14509 ;map_address               Allocated to registers 
                                  14510 ;d                         Allocated to registers 
                                  14511 ;__2621440226              Allocated to registers 
                                  14512 ;__2621440227              Allocated to registers 
                                  14513 ;map_address               Allocated to registers 
                                  14514 ;d                         Allocated to registers 
                                  14515 ;__2621440229              Allocated to registers 
                                  14516 ;__2621440230              Allocated to registers 
                                  14517 ;map_address               Allocated to registers 
                                  14518 ;d                         Allocated to registers 
                                  14519 ;__2621440232              Allocated to registers 
                                  14520 ;__2621440233              Allocated to registers 
                                  14521 ;map_address               Allocated to registers 
                                  14522 ;d                         Allocated to registers 
                                  14523 ;__2621440235              Allocated to registers 
                                  14524 ;__2621440236              Allocated to registers 
                                  14525 ;map_address               Allocated to registers 
                                  14526 ;d                         Allocated to registers 
                                  14527 ;validKey                  Allocated to registers r7 
                                  14528 ;------------------------------------------------------------
                                  14529 ;	.\ecen4350_lcd_v4.c:3521: void main() {
                                  14530 ;	-----------------------------------------
                                  14531 ;	 function main
                                  14532 ;	-----------------------------------------
      0052ED                      14533 _main:
                                  14534 ;	.\ecen4350_lcd_v4.c:3525: delay(10);
      0052ED 90 00 0A         [24]14535 	mov	dptr,#0x000a
      0052F0 12r00rE0         [24]14536 	lcall	_delay
                                  14537 ;	.\ecen4350_lcd_v4.c:3526: iowrite8(seg7_address, ON);
      0052F3 85*04 82         [24]14538 	mov	dpl,_seg7_address
      0052F6 85*05 83         [24]14539 	mov	dph,(_seg7_address + 1)
                                  14540 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14541 ;	assignBit
      0052F9 D2 B5            [12]14542 	setb	_P3_5
                                  14543 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0052FB E4               [12]14544 	clr	a
      0052FC F0               [24]14545 	movx	@dptr,a
                                  14546 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14547 ;	assignBit
      0052FD C2 B5            [12]14548 	clr	_P3_5
                                  14549 ;	.\ecen4350_lcd_v4.c:3527: delay(5);
      0052FF 90 00 05         [24]14550 	mov	dptr,#0x0005
      005302 12r00rE0         [24]14551 	lcall	_delay
                                  14552 ;	.\ecen4350_lcd_v4.c:3528: CD = 0;
                                  14553 ;	assignBit
      005305 C2 B4            [12]14554 	clr	_P3_4
                                  14555 ;	.\ecen4350_lcd_v4.c:3529: IOM = 0;
                                  14556 ;	assignBit
      005307 C2 B5            [12]14557 	clr	_P3_5
                                  14558 ;	.\ecen4350_lcd_v4.c:3530: rtcInit();							// RTC init
      005309 12r03r35         [24]14559 	lcall	_rtcInit
                                  14560 ;	.\ecen4350_lcd_v4.c:3532: TFT_LCD_INIT();						// LCD init
      00530C 12r06r2E         [24]14561 	lcall	_TFT_LCD_INIT
                                  14562 ;	.\ecen4350_lcd_v4.c:3533: iowrite8(seg7_address, SEG_H);		// [H]
      00530F 85*04 82         [24]14563 	mov	dpl,_seg7_address
      005312 85*05 83         [24]14564 	mov	dph,(_seg7_address + 1)
                                  14565 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14566 ;	assignBit
      005315 D2 B5            [12]14567 	setb	_P3_5
                                  14568 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005317 74 89            [12]14569 	mov	a,#0x89
      005319 F0               [24]14570 	movx	@dptr,a
                                  14571 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14572 ;	assignBit
      00531A C2 B5            [12]14573 	clr	_P3_5
                                  14574 ;	.\ecen4350_lcd_v4.c:3534: delay(40);							
      00531C 90 00 28         [24]14575 	mov	dptr,#0x0028
      00531F 12r00rE0         [24]14576 	lcall	_delay
                                  14577 ;	.\ecen4350_lcd_v4.c:3535: iowrite8(seg7_address, 0b01111011); // [i.]
      005322 85*04 82         [24]14578 	mov	dpl,_seg7_address
      005325 85*05 83         [24]14579 	mov	dph,(_seg7_address + 1)
                                  14580 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14581 ;	assignBit
      005328 D2 B5            [12]14582 	setb	_P3_5
                                  14583 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00532A 74 7B            [12]14584 	mov	a,#0x7b
      00532C F0               [24]14585 	movx	@dptr,a
                                  14586 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14587 ;	assignBit
      00532D C2 B5            [12]14588 	clr	_P3_5
                                  14589 ;	.\ecen4350_lcd_v4.c:3536: delay(40);
      00532F 90 00 28         [24]14590 	mov	dptr,#0x0028
      005332 12r00rE0         [24]14591 	lcall	_delay
                                  14592 ;	.\ecen4350_lcd_v4.c:3537: iowrite8(seg7_address, OFF);
      005335 85*04 82         [24]14593 	mov	dpl,_seg7_address
      005338 85*05 83         [24]14594 	mov	dph,(_seg7_address + 1)
                                  14595 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14596 ;	assignBit
      00533B D2 B5            [12]14597 	setb	_P3_5
                                  14598 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00533D 74 FF            [12]14599 	mov	a,#0xff
      00533F F0               [24]14600 	movx	@dptr,a
                                  14601 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14602 ;	assignBit
      005340 C2 B5            [12]14603 	clr	_P3_5
                                  14604 ;	.\ecen4350_lcd_v4.c:3538: delay(20);
      005342 90 00 14         [24]14605 	mov	dptr,#0x0014
      005345 12r00rE0         [24]14606 	lcall	_delay
                                  14607 ;	.\ecen4350_lcd_v4.c:3539: seg7Test();
      005348 12r01rDA         [24]14608 	lcall	_seg7Test
                                  14609 ;	.\ecen4350_lcd_v4.c:3541: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      00534B 12r15r7C         [24]14610 	lcall	_writeSomeLines
                                  14611 ;	.\ecen4350_lcd_v4.c:3543: clearLCD();							// set LCD background
      00534E 12r0Dr93         [24]14612 	lcall	_clearLCD
                                  14613 ;	.\ecen4350_lcd_v4.c:3544: setColorDefault();	// set text color
      005351 12r15rD4         [24]14614 	lcall	_setColorDefault
                                  14615 ;	.\ecen4350_lcd_v4.c:3545: setCursor(30, 120);				
      005354 75*00 78         [24]14616 	mov	_setCursor_PARM_2,#0x78
      005357 75*01 00         [24]14617 	mov	(_setCursor_PARM_2 + 1),#0x00
      00535A 90 00 1E         [24]14618 	mov	dptr,#0x001e
      00535D 12r04rF6         [24]14619 	lcall	_setCursor
                                  14620 ;	.\ecen4350_lcd_v4.c:3546: LCD_string_write("RAM POST\n");
      005360 90r11r1C         [24]14621 	mov	dptr,#___str_215
      005363 75 F0 80         [24]14622 	mov	b,#0x80
      005366 12r10r10         [24]14623 	lcall	_LCD_string_write
                                  14624 ;	.\ecen4350_lcd_v4.c:3547: writeAllRAM(0xAA);
      005369 75 82 AA         [24]14625 	mov	dpl,#0xaa
      00536C 12r00r22         [24]14626 	lcall	_writeAllRAM
                                  14627 ;	.\ecen4350_lcd_v4.c:3548: setCursor(30, 150);
      00536F 75*00 96         [24]14628 	mov	_setCursor_PARM_2,#0x96
      005372 75*01 00         [24]14629 	mov	(_setCursor_PARM_2 + 1),#0x00
      005375 90 00 1E         [24]14630 	mov	dptr,#0x001e
      005378 12r04rF6         [24]14631 	lcall	_setCursor
                                  14632 ;	.\ecen4350_lcd_v4.c:3549: LCD_string_write("...\n");
      00537B 90r11r26         [24]14633 	mov	dptr,#___str_216
      00537E 75 F0 80         [24]14634 	mov	b,#0x80
      005381 12r10r10         [24]14635 	lcall	_LCD_string_write
                                  14636 ;	.\ecen4350_lcd_v4.c:3550: checkAllRAM(0xAA);
      005384 75 82 AA         [24]14637 	mov	dpl,#0xaa
      005387 12r00r51         [24]14638 	lcall	_checkAllRAM
                                  14639 ;	.\ecen4350_lcd_v4.c:3551: UART_en = 0;
      00538A 78r01            [12]14640 	mov	r0,#_UART_en
      00538C 76 00            [12]14641 	mov	@r0,#0x00
                                  14642 ;	.\ecen4350_lcd_v4.c:3554: loop:
      00538E                      14643 00101$:
                                  14644 ;	.\ecen4350_lcd_v4.c:3555: validKey = 1;
      00538E 7F 01            [12]14645 	mov	r7,#0x01
                                  14646 ;	.\ecen4350_lcd_v4.c:3556: iowrite8(seg7_address, OFF);
      005390 85*04 82         [24]14647 	mov	dpl,_seg7_address
      005393 85*05 83         [24]14648 	mov	dph,(_seg7_address + 1)
                                  14649 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14650 ;	assignBit
      005396 D2 B5            [12]14651 	setb	_P3_5
                                  14652 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005398 74 FF            [12]14653 	mov	a,#0xff
      00539A F0               [24]14654 	movx	@dptr,a
                                  14655 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14656 ;	assignBit
      00539B C2 B5            [12]14657 	clr	_P3_5
                                  14658 ;	.\ecen4350_lcd_v4.c:3557: clearLCD();
      00539D C0 07            [24]14659 	push	ar7
      00539F 12r0Dr93         [24]14660 	lcall	_clearLCD
                                  14661 ;	.\ecen4350_lcd_v4.c:3558: setCursor(30, 120);
      0053A2 75*00 78         [24]14662 	mov	_setCursor_PARM_2,#0x78
      0053A5 75*01 00         [24]14663 	mov	(_setCursor_PARM_2 + 1),#0x00
      0053A8 90 00 1E         [24]14664 	mov	dptr,#0x001e
      0053AB 12r04rF6         [24]14665 	lcall	_setCursor
                                  14666 ;	.\ecen4350_lcd_v4.c:3559: setTextSize(3);
      0053AE 75 82 03         [24]14667 	mov	dpl,#0x03
      0053B1 12r05r10         [24]14668 	lcall	_setTextSize
                                  14669 ;	.\ecen4350_lcd_v4.c:3560: setColorSelect();
      0053B4 12r15rDF         [24]14670 	lcall	_setColorSelect
                                  14671 ;	.\ecen4350_lcd_v4.c:3561: rtcPrint();
      0053B7 12r03rE6         [24]14672 	lcall	_rtcPrint
                                  14673 ;	.\ecen4350_lcd_v4.c:3562: printMenu();
      0053BA 12r17r39         [24]14674 	lcall	_printMenu
      0053BD D0 07            [24]14675 	pop	ar7
                                  14676 ;	.\ecen4350_lcd_v4.c:3563: inputKey:
      0053BF                      14677 00102$:
                                  14678 ;	.\ecen4350_lcd_v4.c:3564: selection = keyDetect();
      0053BF C0 07            [24]14679 	push	ar7
      0053C1 12r11r2E         [24]14680 	lcall	_keyDetect
      0053C4 AE 82            [24]14681 	mov	r6,dpl
      0053C6 D0 07            [24]14682 	pop	ar7
      0053C8 78r00            [12]14683 	mov	r0,#_selection
      0053CA A6 06            [24]14684 	mov	@r0,ar6
                                  14685 ;	.\ecen4350_lcd_v4.c:3565: if (selection == 'D') {
      0053CC BE 44 68         [24]14686 	cjne	r6,#0x44,00106$
                                  14687 ;	.\ecen4350_lcd_v4.c:3566: iowrite8(seg7_address, ON);
      0053CF 85*04 82         [24]14688 	mov	dpl,_seg7_address
      0053D2 85*05 83         [24]14689 	mov	dph,(_seg7_address + 1)
                                  14690 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14691 ;	assignBit
      0053D5 D2 B5            [12]14692 	setb	_P3_5
                                  14693 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0053D7 E4               [12]14694 	clr	a
      0053D8 F0               [24]14695 	movx	@dptr,a
                                  14696 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14697 ;	assignBit
      0053D9 C2 B5            [12]14698 	clr	_P3_5
                                  14699 ;	.\ecen4350_lcd_v4.c:3567: setCursor(10, 60);
      0053DB 75*00 3C         [24]14700 	mov	_setCursor_PARM_2,#0x3c
      0053DE 75*01 00         [24]14701 	mov	(_setCursor_PARM_2 + 1),#0x00
      0053E1 90 00 0A         [24]14702 	mov	dptr,#0x000a
      0053E4 C0 07            [24]14703 	push	ar7
      0053E6 12r04rF6         [24]14704 	lcall	_setCursor
                                  14705 ;	.\ecen4350_lcd_v4.c:3568: setColorHighlight1();
      0053E9 12r15rEA         [24]14706 	lcall	_setColorHighlight1
                                  14707 ;	.\ecen4350_lcd_v4.c:3569: LCD_string_write("<D>");
      0053EC 90r11r2B         [24]14708 	mov	dptr,#___str_217
      0053EF 75 F0 80         [24]14709 	mov	b,#0x80
      0053F2 12r10r10         [24]14710 	lcall	_LCD_string_write
                                  14711 ;	.\ecen4350_lcd_v4.c:3570: setColorHighlight2();
      0053F5 12r15rF6         [24]14712 	lcall	_setColorHighlight2
                                  14713 ;	.\ecen4350_lcd_v4.c:3571: LCD_string_write(" DUMP\n");
      0053F8 90r05r69         [24]14714 	mov	dptr,#___str_7
      0053FB 75 F0 80         [24]14715 	mov	b,#0x80
      0053FE 12r10r10         [24]14716 	lcall	_LCD_string_write
                                  14717 ;	.\ecen4350_lcd_v4.c:3572: delay(20);
      005401 90 00 14         [24]14718 	mov	dptr,#0x0014
      005404 12r00rE0         [24]14719 	lcall	_delay
      005407 D0 07            [24]14720 	pop	ar7
                                  14721 ;	.\ecen4350_lcd_v4.c:3573: iowrite8(seg7_address, SEG_D);
      005409 85*04 82         [24]14722 	mov	dpl,_seg7_address
      00540C 85*05 83         [24]14723 	mov	dph,(_seg7_address + 1)
                                  14724 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14725 ;	assignBit
      00540F D2 B5            [12]14726 	setb	_P3_5
                                  14727 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005411 74 A1            [12]14728 	mov	a,#0xa1
      005413 F0               [24]14729 	movx	@dptr,a
                                  14730 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14731 ;	assignBit
      005414 C2 B5            [12]14732 	clr	_P3_5
                                  14733 ;	.\ecen4350_lcd_v4.c:3574: if (validKey == 0) {
      005416 EF               [12]14734 	mov	a,r7
      005417 70 18            [24]14735 	jnz	00104$
                                  14736 ;	.\ecen4350_lcd_v4.c:3575: setColorDefault();
      005419 12r15rD4         [24]14737 	lcall	_setColorDefault
                                  14738 ;	.\ecen4350_lcd_v4.c:3576: setCursor(60, 280);
      00541C 75*00 18         [24]14739 	mov	_setCursor_PARM_2,#0x18
      00541F 75*01 01         [24]14740 	mov	(_setCursor_PARM_2 + 1),#0x01
      005422 90 00 3C         [24]14741 	mov	dptr,#0x003c
      005425 12r04rF6         [24]14742 	lcall	_setCursor
                                  14743 ;	.\ecen4350_lcd_v4.c:3577: LCD_string_write("          ");
      005428 90r11r2F         [24]14744 	mov	dptr,#___str_218
      00542B 75 F0 80         [24]14745 	mov	b,#0x80
      00542E 12r10r10         [24]14746 	lcall	_LCD_string_write
      005431                      14747 00104$:
                                  14748 ;	.\ecen4350_lcd_v4.c:3579: dump();
      005431 12r18r94         [24]14749 	lcall	_dump
                                  14750 ;	.\ecen4350_lcd_v4.c:3580: goto loop;
      005434 02r53r8E         [24]14751 	ljmp	00101$
      005437                      14752 00106$:
                                  14753 ;	.\ecen4350_lcd_v4.c:3581: } if(selection == 'B') {
      005437 BE 42 68         [24]14754 	cjne	r6,#0x42,00110$
                                  14755 ;	.\ecen4350_lcd_v4.c:3582: iowrite8(seg7_address, ON);
      00543A 85*04 82         [24]14756 	mov	dpl,_seg7_address
      00543D 85*05 83         [24]14757 	mov	dph,(_seg7_address + 1)
                                  14758 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14759 ;	assignBit
      005440 D2 B5            [12]14760 	setb	_P3_5
                                  14761 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005442 E4               [12]14762 	clr	a
      005443 F0               [24]14763 	movx	@dptr,a
                                  14764 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14765 ;	assignBit
      005444 C2 B5            [12]14766 	clr	_P3_5
                                  14767 ;	.\ecen4350_lcd_v4.c:3583: setCursor(130, 60);
      005446 75*00 3C         [24]14768 	mov	_setCursor_PARM_2,#0x3c
      005449 75*01 00         [24]14769 	mov	(_setCursor_PARM_2 + 1),#0x00
      00544C 90 00 82         [24]14770 	mov	dptr,#0x0082
      00544F C0 07            [24]14771 	push	ar7
      005451 12r04rF6         [24]14772 	lcall	_setCursor
                                  14773 ;	.\ecen4350_lcd_v4.c:3584: setColorHighlight1();
      005454 12r15rEA         [24]14774 	lcall	_setColorHighlight1
                                  14775 ;	.\ecen4350_lcd_v4.c:3585: LCD_string_write("<B>");
      005457 90r11r3A         [24]14776 	mov	dptr,#___str_219
      00545A 75 F0 80         [24]14777 	mov	b,#0x80
      00545D 12r10r10         [24]14778 	lcall	_LCD_string_write
                                  14779 ;	.\ecen4350_lcd_v4.c:3586: setColorHighlight2();
      005460 12r15rF6         [24]14780 	lcall	_setColorHighlight2
                                  14781 ;	.\ecen4350_lcd_v4.c:3587: LCD_string_write(" MOVE\n");
      005463 90r05r75         [24]14782 	mov	dptr,#___str_9
      005466 75 F0 80         [24]14783 	mov	b,#0x80
      005469 12r10r10         [24]14784 	lcall	_LCD_string_write
                                  14785 ;	.\ecen4350_lcd_v4.c:3588: delay(20);
      00546C 90 00 14         [24]14786 	mov	dptr,#0x0014
      00546F 12r00rE0         [24]14787 	lcall	_delay
      005472 D0 07            [24]14788 	pop	ar7
                                  14789 ;	.\ecen4350_lcd_v4.c:3589: iowrite8(seg7_address, SEG_B);
      005474 85*04 82         [24]14790 	mov	dpl,_seg7_address
      005477 85*05 83         [24]14791 	mov	dph,(_seg7_address + 1)
                                  14792 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14793 ;	assignBit
      00547A D2 B5            [12]14794 	setb	_P3_5
                                  14795 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00547C 74 83            [12]14796 	mov	a,#0x83
      00547E F0               [24]14797 	movx	@dptr,a
                                  14798 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14799 ;	assignBit
      00547F C2 B5            [12]14800 	clr	_P3_5
                                  14801 ;	.\ecen4350_lcd_v4.c:3590: if (validKey == 0) {
      005481 EF               [12]14802 	mov	a,r7
      005482 70 18            [24]14803 	jnz	00108$
                                  14804 ;	.\ecen4350_lcd_v4.c:3591: setColorDefault();
      005484 12r15rD4         [24]14805 	lcall	_setColorDefault
                                  14806 ;	.\ecen4350_lcd_v4.c:3592: setCursor(60, 280);
      005487 75*00 18         [24]14807 	mov	_setCursor_PARM_2,#0x18
      00548A 75*01 01         [24]14808 	mov	(_setCursor_PARM_2 + 1),#0x01
      00548D 90 00 3C         [24]14809 	mov	dptr,#0x003c
      005490 12r04rF6         [24]14810 	lcall	_setCursor
                                  14811 ;	.\ecen4350_lcd_v4.c:3593: LCD_string_write("          ");
      005493 90r11r2F         [24]14812 	mov	dptr,#___str_218
      005496 75 F0 80         [24]14813 	mov	b,#0x80
      005499 12r10r10         [24]14814 	lcall	_LCD_string_write
      00549C                      14815 00108$:
                                  14816 ;	.\ecen4350_lcd_v4.c:3595: move();
      00549C 12r21r55         [24]14817 	lcall	_move
                                  14818 ;	.\ecen4350_lcd_v4.c:3596: goto loop;
      00549F 02r53r8E         [24]14819 	ljmp	00101$
      0054A2                      14820 00110$:
                                  14821 ;	.\ecen4350_lcd_v4.c:3597: } if(selection == 'E') {
      0054A2 BE 45 68         [24]14822 	cjne	r6,#0x45,00114$
                                  14823 ;	.\ecen4350_lcd_v4.c:3598: iowrite8(seg7_address, ON);
      0054A5 85*04 82         [24]14824 	mov	dpl,_seg7_address
      0054A8 85*05 83         [24]14825 	mov	dph,(_seg7_address + 1)
                                  14826 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14827 ;	assignBit
      0054AB D2 B5            [12]14828 	setb	_P3_5
                                  14829 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0054AD E4               [12]14830 	clr	a
      0054AE F0               [24]14831 	movx	@dptr,a
                                  14832 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14833 ;	assignBit
      0054AF C2 B5            [12]14834 	clr	_P3_5
                                  14835 ;	.\ecen4350_lcd_v4.c:3599: setCursor(10, 100);
      0054B1 75*00 64         [24]14836 	mov	_setCursor_PARM_2,#0x64
      0054B4 75*01 00         [24]14837 	mov	(_setCursor_PARM_2 + 1),#0x00
      0054B7 90 00 0A         [24]14838 	mov	dptr,#0x000a
      0054BA C0 07            [24]14839 	push	ar7
      0054BC 12r04rF6         [24]14840 	lcall	_setCursor
                                  14841 ;	.\ecen4350_lcd_v4.c:3600: setColorHighlight1();
      0054BF 12r15rEA         [24]14842 	lcall	_setColorHighlight1
                                  14843 ;	.\ecen4350_lcd_v4.c:3601: LCD_string_write("<E>");
      0054C2 90r11r3E         [24]14844 	mov	dptr,#___str_220
      0054C5 75 F0 80         [24]14845 	mov	b,#0x80
      0054C8 12r10r10         [24]14846 	lcall	_LCD_string_write
                                  14847 ;	.\ecen4350_lcd_v4.c:3602: setColorHighlight2();
      0054CB 12r15rF6         [24]14848 	lcall	_setColorHighlight2
                                  14849 ;	.\ecen4350_lcd_v4.c:3603: LCD_string_write(" EDIT\n");
      0054CE 90r05r81         [24]14850 	mov	dptr,#___str_11
      0054D1 75 F0 80         [24]14851 	mov	b,#0x80
      0054D4 12r10r10         [24]14852 	lcall	_LCD_string_write
                                  14853 ;	.\ecen4350_lcd_v4.c:3604: delay(20);
      0054D7 90 00 14         [24]14854 	mov	dptr,#0x0014
      0054DA 12r00rE0         [24]14855 	lcall	_delay
      0054DD D0 07            [24]14856 	pop	ar7
                                  14857 ;	.\ecen4350_lcd_v4.c:3605: iowrite8(seg7_address, SEG_E);
      0054DF 85*04 82         [24]14858 	mov	dpl,_seg7_address
      0054E2 85*05 83         [24]14859 	mov	dph,(_seg7_address + 1)
                                  14860 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14861 ;	assignBit
      0054E5 D2 B5            [12]14862 	setb	_P3_5
                                  14863 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0054E7 74 86            [12]14864 	mov	a,#0x86
      0054E9 F0               [24]14865 	movx	@dptr,a
                                  14866 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14867 ;	assignBit
      0054EA C2 B5            [12]14868 	clr	_P3_5
                                  14869 ;	.\ecen4350_lcd_v4.c:3606: if (validKey == 0) {
      0054EC EF               [12]14870 	mov	a,r7
      0054ED 70 18            [24]14871 	jnz	00112$
                                  14872 ;	.\ecen4350_lcd_v4.c:3607: setColorDefault();
      0054EF 12r15rD4         [24]14873 	lcall	_setColorDefault
                                  14874 ;	.\ecen4350_lcd_v4.c:3608: setCursor(60, 280);
      0054F2 75*00 18         [24]14875 	mov	_setCursor_PARM_2,#0x18
      0054F5 75*01 01         [24]14876 	mov	(_setCursor_PARM_2 + 1),#0x01
      0054F8 90 00 3C         [24]14877 	mov	dptr,#0x003c
      0054FB 12r04rF6         [24]14878 	lcall	_setCursor
                                  14879 ;	.\ecen4350_lcd_v4.c:3609: LCD_string_write("          ");
      0054FE 90r11r2F         [24]14880 	mov	dptr,#___str_218
      005501 75 F0 80         [24]14881 	mov	b,#0x80
      005504 12r10r10         [24]14882 	lcall	_LCD_string_write
      005507                      14883 00112$:
                                  14884 ;	.\ecen4350_lcd_v4.c:3611: edit();
      005507 12r26rBE         [24]14885 	lcall	_edit
                                  14886 ;	.\ecen4350_lcd_v4.c:3612: goto loop;
      00550A 02r53r8E         [24]14887 	ljmp	00101$
      00550D                      14888 00114$:
                                  14889 ;	.\ecen4350_lcd_v4.c:3613: } if(selection == 'F') {
      00550D BE 46 68         [24]14890 	cjne	r6,#0x46,00118$
                                  14891 ;	.\ecen4350_lcd_v4.c:3614: iowrite8(seg7_address, ON);
      005510 85*04 82         [24]14892 	mov	dpl,_seg7_address
      005513 85*05 83         [24]14893 	mov	dph,(_seg7_address + 1)
                                  14894 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14895 ;	assignBit
      005516 D2 B5            [12]14896 	setb	_P3_5
                                  14897 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005518 E4               [12]14898 	clr	a
      005519 F0               [24]14899 	movx	@dptr,a
                                  14900 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14901 ;	assignBit
      00551A C2 B5            [12]14902 	clr	_P3_5
                                  14903 ;	.\ecen4350_lcd_v4.c:3615: setCursor(130, 100);
      00551C 75*00 64         [24]14904 	mov	_setCursor_PARM_2,#0x64
      00551F 75*01 00         [24]14905 	mov	(_setCursor_PARM_2 + 1),#0x00
      005522 90 00 82         [24]14906 	mov	dptr,#0x0082
      005525 C0 07            [24]14907 	push	ar7
      005527 12r04rF6         [24]14908 	lcall	_setCursor
                                  14909 ;	.\ecen4350_lcd_v4.c:3616: setColorHighlight1();
      00552A 12r15rEA         [24]14910 	lcall	_setColorHighlight1
                                  14911 ;	.\ecen4350_lcd_v4.c:3617: LCD_string_write("<F>");
      00552D 90r11r42         [24]14912 	mov	dptr,#___str_221
      005530 75 F0 80         [24]14913 	mov	b,#0x80
      005533 12r10r10         [24]14914 	lcall	_LCD_string_write
                                  14915 ;	.\ecen4350_lcd_v4.c:3618: setColorHighlight2();
      005536 12r15rF6         [24]14916 	lcall	_setColorHighlight2
                                  14917 ;	.\ecen4350_lcd_v4.c:3619: LCD_string_write(" FIND\n");
      005539 90r05r8D         [24]14918 	mov	dptr,#___str_13
      00553C 75 F0 80         [24]14919 	mov	b,#0x80
      00553F 12r10r10         [24]14920 	lcall	_LCD_string_write
                                  14921 ;	.\ecen4350_lcd_v4.c:3620: delay(20);
      005542 90 00 14         [24]14922 	mov	dptr,#0x0014
      005545 12r00rE0         [24]14923 	lcall	_delay
      005548 D0 07            [24]14924 	pop	ar7
                                  14925 ;	.\ecen4350_lcd_v4.c:3621: iowrite8(seg7_address, SEG_F);
      00554A 85*04 82         [24]14926 	mov	dpl,_seg7_address
      00554D 85*05 83         [24]14927 	mov	dph,(_seg7_address + 1)
                                  14928 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14929 ;	assignBit
      005550 D2 B5            [12]14930 	setb	_P3_5
                                  14931 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005552 74 8E            [12]14932 	mov	a,#0x8e
      005554 F0               [24]14933 	movx	@dptr,a
                                  14934 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14935 ;	assignBit
      005555 C2 B5            [12]14936 	clr	_P3_5
                                  14937 ;	.\ecen4350_lcd_v4.c:3622: if (validKey == 0) {
      005557 EF               [12]14938 	mov	a,r7
      005558 70 18            [24]14939 	jnz	00116$
                                  14940 ;	.\ecen4350_lcd_v4.c:3623: setColorDefault();
      00555A 12r15rD4         [24]14941 	lcall	_setColorDefault
                                  14942 ;	.\ecen4350_lcd_v4.c:3624: setCursor(60, 280);
      00555D 75*00 18         [24]14943 	mov	_setCursor_PARM_2,#0x18
      005560 75*01 01         [24]14944 	mov	(_setCursor_PARM_2 + 1),#0x01
      005563 90 00 3C         [24]14945 	mov	dptr,#0x003c
      005566 12r04rF6         [24]14946 	lcall	_setCursor
                                  14947 ;	.\ecen4350_lcd_v4.c:3625: LCD_string_write("          ");
      005569 90r11r2F         [24]14948 	mov	dptr,#___str_218
      00556C 75 F0 80         [24]14949 	mov	b,#0x80
      00556F 12r10r10         [24]14950 	lcall	_LCD_string_write
      005572                      14951 00116$:
                                  14952 ;	.\ecen4350_lcd_v4.c:3627: find();
      005572 12r2Er1A         [24]14953 	lcall	_find
                                  14954 ;	.\ecen4350_lcd_v4.c:3628: goto loop;
      005575 02r53r8E         [24]14955 	ljmp	00101$
      005578                      14956 00118$:
                                  14957 ;	.\ecen4350_lcd_v4.c:3629: } if(selection == 'C') {
      005578 BE 43 68         [24]14958 	cjne	r6,#0x43,00122$
                                  14959 ;	.\ecen4350_lcd_v4.c:3630: iowrite8(seg7_address, ON);
      00557B 85*04 82         [24]14960 	mov	dpl,_seg7_address
      00557E 85*05 83         [24]14961 	mov	dph,(_seg7_address + 1)
                                  14962 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14963 ;	assignBit
      005581 D2 B5            [12]14964 	setb	_P3_5
                                  14965 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005583 E4               [12]14966 	clr	a
      005584 F0               [24]14967 	movx	@dptr,a
                                  14968 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14969 ;	assignBit
      005585 C2 B5            [12]14970 	clr	_P3_5
                                  14971 ;	.\ecen4350_lcd_v4.c:3631: setCursor(10, 160);
      005587 75*00 A0         [24]14972 	mov	_setCursor_PARM_2,#0xa0
      00558A 75*01 00         [24]14973 	mov	(_setCursor_PARM_2 + 1),#0x00
      00558D 90 00 0A         [24]14974 	mov	dptr,#0x000a
      005590 C0 07            [24]14975 	push	ar7
      005592 12r04rF6         [24]14976 	lcall	_setCursor
                                  14977 ;	.\ecen4350_lcd_v4.c:3632: setColorHighlight1();
      005595 12r15rEA         [24]14978 	lcall	_setColorHighlight1
                                  14979 ;	.\ecen4350_lcd_v4.c:3633: LCD_string_write("<C>");
      005598 90r11r46         [24]14980 	mov	dptr,#___str_222
      00559B 75 F0 80         [24]14981 	mov	b,#0x80
      00559E 12r10r10         [24]14982 	lcall	_LCD_string_write
                                  14983 ;	.\ecen4350_lcd_v4.c:3634: setColorHighlight2();
      0055A1 12r15rF6         [24]14984 	lcall	_setColorHighlight2
                                  14985 ;	.\ecen4350_lcd_v4.c:3635: LCD_string_write(" COUNT\n");
      0055A4 90r05r99         [24]14986 	mov	dptr,#___str_15
      0055A7 75 F0 80         [24]14987 	mov	b,#0x80
      0055AA 12r10r10         [24]14988 	lcall	_LCD_string_write
                                  14989 ;	.\ecen4350_lcd_v4.c:3636: delay(20);
      0055AD 90 00 14         [24]14990 	mov	dptr,#0x0014
      0055B0 12r00rE0         [24]14991 	lcall	_delay
      0055B3 D0 07            [24]14992 	pop	ar7
                                  14993 ;	.\ecen4350_lcd_v4.c:3637: iowrite8(seg7_address, SEG_C);
      0055B5 85*04 82         [24]14994 	mov	dpl,_seg7_address
      0055B8 85*05 83         [24]14995 	mov	dph,(_seg7_address + 1)
                                  14996 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14997 ;	assignBit
      0055BB D2 B5            [12]14998 	setb	_P3_5
                                  14999 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0055BD 74 C6            [12]15000 	mov	a,#0xc6
      0055BF F0               [24]15001 	movx	@dptr,a
                                  15002 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15003 ;	assignBit
      0055C0 C2 B5            [12]15004 	clr	_P3_5
                                  15005 ;	.\ecen4350_lcd_v4.c:3638: if (validKey == 0) {
      0055C2 EF               [12]15006 	mov	a,r7
      0055C3 70 18            [24]15007 	jnz	00120$
                                  15008 ;	.\ecen4350_lcd_v4.c:3639: setColorDefault();
      0055C5 12r15rD4         [24]15009 	lcall	_setColorDefault
                                  15010 ;	.\ecen4350_lcd_v4.c:3640: setCursor(60, 280);
      0055C8 75*00 18         [24]15011 	mov	_setCursor_PARM_2,#0x18
      0055CB 75*01 01         [24]15012 	mov	(_setCursor_PARM_2 + 1),#0x01
      0055CE 90 00 3C         [24]15013 	mov	dptr,#0x003c
      0055D1 12r04rF6         [24]15014 	lcall	_setCursor
                                  15015 ;	.\ecen4350_lcd_v4.c:3641: LCD_string_write("          ");
      0055D4 90r11r2F         [24]15016 	mov	dptr,#___str_218
      0055D7 75 F0 80         [24]15017 	mov	b,#0x80
      0055DA 12r10r10         [24]15018 	lcall	_LCD_string_write
      0055DD                      15019 00120$:
                                  15020 ;	.\ecen4350_lcd_v4.c:3643: count();
      0055DD 12r39r1E         [24]15021 	lcall	_count
                                  15022 ;	.\ecen4350_lcd_v4.c:3644: goto loop;
      0055E0 02r53r8E         [24]15023 	ljmp	00101$
      0055E3                      15024 00122$:
                                  15025 ;	.\ecen4350_lcd_v4.c:3645: } if(selection == 'A') {
      0055E3 BE 41 68         [24]15026 	cjne	r6,#0x41,00126$
                                  15027 ;	.\ecen4350_lcd_v4.c:3646: iowrite8(seg7_address, ON);
      0055E6 85*04 82         [24]15028 	mov	dpl,_seg7_address
      0055E9 85*05 83         [24]15029 	mov	dph,(_seg7_address + 1)
                                  15030 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15031 ;	assignBit
      0055EC D2 B5            [12]15032 	setb	_P3_5
                                  15033 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0055EE E4               [12]15034 	clr	a
      0055EF F0               [24]15035 	movx	@dptr,a
                                  15036 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15037 ;	assignBit
      0055F0 C2 B5            [12]15038 	clr	_P3_5
                                  15039 ;	.\ecen4350_lcd_v4.c:3647: setCursor(10, 180);
      0055F2 75*00 B4         [24]15040 	mov	_setCursor_PARM_2,#0xb4
      0055F5 75*01 00         [24]15041 	mov	(_setCursor_PARM_2 + 1),#0x00
      0055F8 90 00 0A         [24]15042 	mov	dptr,#0x000a
      0055FB C0 07            [24]15043 	push	ar7
      0055FD 12r04rF6         [24]15044 	lcall	_setCursor
                                  15045 ;	.\ecen4350_lcd_v4.c:3648: setColorHighlight1();
      005600 12r15rEA         [24]15046 	lcall	_setColorHighlight1
                                  15047 ;	.\ecen4350_lcd_v4.c:3649: LCD_string_write("<A>");
      005603 90r11r4A         [24]15048 	mov	dptr,#___str_223
      005606 75 F0 80         [24]15049 	mov	b,#0x80
      005609 12r10r10         [24]15050 	lcall	_LCD_string_write
                                  15051 ;	.\ecen4350_lcd_v4.c:3650: setColorHighlight2();
      00560C 12r15rF6         [24]15052 	lcall	_setColorHighlight2
                                  15053 ;	.\ecen4350_lcd_v4.c:3651: LCD_string_write(" MEM CHECK\n");
      00560F 90r05rA6         [24]15054 	mov	dptr,#___str_17
      005612 75 F0 80         [24]15055 	mov	b,#0x80
      005615 12r10r10         [24]15056 	lcall	_LCD_string_write
                                  15057 ;	.\ecen4350_lcd_v4.c:3652: delay(20);
      005618 90 00 14         [24]15058 	mov	dptr,#0x0014
      00561B 12r00rE0         [24]15059 	lcall	_delay
      00561E D0 07            [24]15060 	pop	ar7
                                  15061 ;	.\ecen4350_lcd_v4.c:3653: iowrite8(seg7_address, SEG_A);
      005620 85*04 82         [24]15062 	mov	dpl,_seg7_address
      005623 85*05 83         [24]15063 	mov	dph,(_seg7_address + 1)
                                  15064 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15065 ;	assignBit
      005626 D2 B5            [12]15066 	setb	_P3_5
                                  15067 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005628 74 88            [12]15068 	mov	a,#0x88
      00562A F0               [24]15069 	movx	@dptr,a
                                  15070 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15071 ;	assignBit
      00562B C2 B5            [12]15072 	clr	_P3_5
                                  15073 ;	.\ecen4350_lcd_v4.c:3654: if (validKey == 0) {
      00562D EF               [12]15074 	mov	a,r7
      00562E 70 18            [24]15075 	jnz	00124$
                                  15076 ;	.\ecen4350_lcd_v4.c:3655: setColorDefault();
      005630 12r15rD4         [24]15077 	lcall	_setColorDefault
                                  15078 ;	.\ecen4350_lcd_v4.c:3656: setCursor(60, 280);
      005633 75*00 18         [24]15079 	mov	_setCursor_PARM_2,#0x18
      005636 75*01 01         [24]15080 	mov	(_setCursor_PARM_2 + 1),#0x01
      005639 90 00 3C         [24]15081 	mov	dptr,#0x003c
      00563C 12r04rF6         [24]15082 	lcall	_setCursor
                                  15083 ;	.\ecen4350_lcd_v4.c:3657: LCD_string_write("          ");
      00563F 90r11r2F         [24]15084 	mov	dptr,#___str_218
      005642 75 F0 80         [24]15085 	mov	b,#0x80
      005645 12r10r10         [24]15086 	lcall	_LCD_string_write
      005648                      15087 00124$:
                                  15088 ;	.\ecen4350_lcd_v4.c:3659: check();
      005648 12r43rF9         [24]15089 	lcall	_check
                                  15090 ;	.\ecen4350_lcd_v4.c:3660: goto loop;
      00564B 02r53r8E         [24]15091 	ljmp	00101$
      00564E                      15092 00126$:
                                  15093 ;	.\ecen4350_lcd_v4.c:3661: } if(selection == '1') {
      00564E BE 31 02         [24]15094 	cjne	r6,#0x31,00250$
      005651 80 03            [24]15095 	sjmp	00251$
      005653                      15096 00250$:
      005653 02r56rF2         [24]15097 	ljmp	00134$
      005656                      15098 00251$:
                                  15099 ;	.\ecen4350_lcd_v4.c:3662: iowrite8(seg7_address, ON);
      005656 85*04 82         [24]15100 	mov	dpl,_seg7_address
      005659 85*05 83         [24]15101 	mov	dph,(_seg7_address + 1)
                                  15102 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15103 ;	assignBit
      00565C D2 B5            [12]15104 	setb	_P3_5
                                  15105 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00565E E4               [12]15106 	clr	a
      00565F F0               [24]15107 	movx	@dptr,a
                                  15108 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15109 ;	assignBit
      005660 C2 B5            [12]15110 	clr	_P3_5
                                  15111 ;	.\ecen4350_lcd_v4.c:3663: setCursor(10, 220);
      005662 75*00 DC         [24]15112 	mov	_setCursor_PARM_2,#0xdc
      005665 75*01 00         [24]15113 	mov	(_setCursor_PARM_2 + 1),#0x00
      005668 90 00 0A         [24]15114 	mov	dptr,#0x000a
      00566B C0 07            [24]15115 	push	ar7
      00566D 12r04rF6         [24]15116 	lcall	_setCursor
                                  15117 ;	.\ecen4350_lcd_v4.c:3664: setColorHighlight1();
      005670 12r15rEA         [24]15118 	lcall	_setColorHighlight1
                                  15119 ;	.\ecen4350_lcd_v4.c:3665: LCD_string_write("<1>");
      005673 90r11r4E         [24]15120 	mov	dptr,#___str_224
      005676 75 F0 80         [24]15121 	mov	b,#0x80
      005679 12r10r10         [24]15122 	lcall	_LCD_string_write
                                  15123 ;	.\ecen4350_lcd_v4.c:3666: setColorHighlight2();
      00567C 12r15rF6         [24]15124 	lcall	_setColorHighlight2
                                  15125 ;	.\ecen4350_lcd_v4.c:3667: LCD_string_write(" UART");
      00567F 90r05rB7         [24]15126 	mov	dptr,#___str_19
      005682 75 F0 80         [24]15127 	mov	b,#0x80
      005685 12r10r10         [24]15128 	lcall	_LCD_string_write
                                  15129 ;	.\ecen4350_lcd_v4.c:3668: setTextSize(1);
      005688 75 82 01         [24]15130 	mov	dpl,#0x01
      00568B 12r05r10         [24]15131 	lcall	_setTextSize
      00568E D0 07            [24]15132 	pop	ar7
                                  15133 ;	.\ecen4350_lcd_v4.c:3669: if (UART_en == 1) {
      005690 78r01            [12]15134 	mov	r0,#_UART_en
      005692 B6 01 0D         [24]15135 	cjne	@r0,#0x01,00128$
                                  15136 ;	.\ecen4350_lcd_v4.c:3670: LCD_string_write(" [Enabled]\n");
      005695 90r05rCA         [24]15137 	mov	dptr,#___str_21
      005698 75 F0 80         [24]15138 	mov	b,#0x80
      00569B C0 07            [24]15139 	push	ar7
      00569D 12r10r10         [24]15140 	lcall	_LCD_string_write
      0056A0 D0 07            [24]15141 	pop	ar7
      0056A2                      15142 00128$:
                                  15143 ;	.\ecen4350_lcd_v4.c:3671: } if (UART_en == 0) {
      0056A2 78r01            [12]15144 	mov	r0,#_UART_en
      0056A4 E6               [12]15145 	mov	a,@r0
      0056A5 70 0D            [24]15146 	jnz	00130$
                                  15147 ;	.\ecen4350_lcd_v4.c:3672: LCD_string_write(" [Disabled]\n");
      0056A7 90r05rBD         [24]15148 	mov	dptr,#___str_20
      0056AA 75 F0 80         [24]15149 	mov	b,#0x80
      0056AD C0 07            [24]15150 	push	ar7
      0056AF 12r10r10         [24]15151 	lcall	_LCD_string_write
      0056B2 D0 07            [24]15152 	pop	ar7
      0056B4                      15153 00130$:
                                  15154 ;	.\ecen4350_lcd_v4.c:3674: setTextSize(2);
      0056B4 75 82 02         [24]15155 	mov	dpl,#0x02
      0056B7 C0 07            [24]15156 	push	ar7
      0056B9 12r05r10         [24]15157 	lcall	_setTextSize
                                  15158 ;	.\ecen4350_lcd_v4.c:3675: delay(20);
      0056BC 90 00 14         [24]15159 	mov	dptr,#0x0014
      0056BF 12r00rE0         [24]15160 	lcall	_delay
      0056C2 D0 07            [24]15161 	pop	ar7
                                  15162 ;	.\ecen4350_lcd_v4.c:3676: iowrite8(seg7_address, SEG_U);
      0056C4 85*04 82         [24]15163 	mov	dpl,_seg7_address
      0056C7 85*05 83         [24]15164 	mov	dph,(_seg7_address + 1)
                                  15165 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15166 ;	assignBit
      0056CA D2 B5            [12]15167 	setb	_P3_5
                                  15168 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0056CC 74 C1            [12]15169 	mov	a,#0xc1
      0056CE F0               [24]15170 	movx	@dptr,a
                                  15171 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15172 ;	assignBit
      0056CF C2 B5            [12]15173 	clr	_P3_5
                                  15174 ;	.\ecen4350_lcd_v4.c:3677: if (validKey == 0) {
      0056D1 EF               [12]15175 	mov	a,r7
      0056D2 70 18            [24]15176 	jnz	00132$
                                  15177 ;	.\ecen4350_lcd_v4.c:3678: setColorDefault();
      0056D4 12r15rD4         [24]15178 	lcall	_setColorDefault
                                  15179 ;	.\ecen4350_lcd_v4.c:3679: setCursor(60, 280);
      0056D7 75*00 18         [24]15180 	mov	_setCursor_PARM_2,#0x18
      0056DA 75*01 01         [24]15181 	mov	(_setCursor_PARM_2 + 1),#0x01
      0056DD 90 00 3C         [24]15182 	mov	dptr,#0x003c
      0056E0 12r04rF6         [24]15183 	lcall	_setCursor
                                  15184 ;	.\ecen4350_lcd_v4.c:3680: LCD_string_write("          ");
      0056E3 90r11r2F         [24]15185 	mov	dptr,#___str_218
      0056E6 75 F0 80         [24]15186 	mov	b,#0x80
      0056E9 12r10r10         [24]15187 	lcall	_LCD_string_write
      0056EC                      15188 00132$:
                                  15189 ;	.\ecen4350_lcd_v4.c:3683: uart();
      0056EC 12r45r1B         [24]15190 	lcall	_uart
                                  15191 ;	.\ecen4350_lcd_v4.c:3684: goto loop;
      0056EF 02r53r8E         [24]15192 	ljmp	00101$
      0056F2                      15193 00134$:
                                  15194 ;	.\ecen4350_lcd_v4.c:3686: setCursor(45, 260);
      0056F2 75*00 04         [24]15195 	mov	_setCursor_PARM_2,#0x04
      0056F5 75*01 01         [24]15196 	mov	(_setCursor_PARM_2 + 1),#0x01
      0056F8 90 00 2D         [24]15197 	mov	dptr,#0x002d
      0056FB 12r04rF6         [24]15198 	lcall	_setCursor
                                  15199 ;	.\ecen4350_lcd_v4.c:3687: setColorRed();
      0056FE 12r16r19         [24]15200 	lcall	_setColorRed
                                  15201 ;	.\ecen4350_lcd_v4.c:3688: LCD_string_write("INVALID INPUT\n");
      005701 90r11r52         [24]15202 	mov	dptr,#___str_225
      005704 75 F0 80         [24]15203 	mov	b,#0x80
      005707 12r10r10         [24]15204 	lcall	_LCD_string_write
                                  15205 ;	.\ecen4350_lcd_v4.c:3689: setCursor(60, 280);
      00570A 75*00 18         [24]15206 	mov	_setCursor_PARM_2,#0x18
      00570D 75*01 01         [24]15207 	mov	(_setCursor_PARM_2 + 1),#0x01
      005710 90 00 3C         [24]15208 	mov	dptr,#0x003c
      005713 12r04rF6         [24]15209 	lcall	_setCursor
                                  15210 ;	.\ecen4350_lcd_v4.c:3690: LCD_string_write("Try again.");
      005716 90r11r61         [24]15211 	mov	dptr,#___str_226
      005719 75 F0 80         [24]15212 	mov	b,#0x80
      00571C 12r10r10         [24]15213 	lcall	_LCD_string_write
                                  15214 ;	.\ecen4350_lcd_v4.c:3691: validKey = 0;
      00571F 7F 00            [12]15215 	mov	r7,#0x00
                                  15216 ;	.\ecen4350_lcd_v4.c:3692: delay(20);
      005721 90 00 14         [24]15217 	mov	dptr,#0x0014
      005724 C0 07            [24]15218 	push	ar7
      005726 12r00rE0         [24]15219 	lcall	_delay
                                  15220 ;	.\ecen4350_lcd_v4.c:3693: setColorDefault();
      005729 12r15rD4         [24]15221 	lcall	_setColorDefault
                                  15222 ;	.\ecen4350_lcd_v4.c:3694: setCursor(45, 260);
      00572C 75*00 04         [24]15223 	mov	_setCursor_PARM_2,#0x04
      00572F 75*01 01         [24]15224 	mov	(_setCursor_PARM_2 + 1),#0x01
      005732 90 00 2D         [24]15225 	mov	dptr,#0x002d
      005735 12r04rF6         [24]15226 	lcall	_setCursor
                                  15227 ;	.\ecen4350_lcd_v4.c:3695: LCD_string_write("               \n");
      005738 90r11r6C         [24]15228 	mov	dptr,#___str_227
      00573B 75 F0 80         [24]15229 	mov	b,#0x80
      00573E 12r10r10         [24]15230 	lcall	_LCD_string_write
      005741 D0 07            [24]15231 	pop	ar7
                                  15232 ;	.\ecen4350_lcd_v4.c:3696: goto inputKey;
                                  15233 ;	.\ecen4350_lcd_v4.c:3700: }
      005743 02r53rBF         [24]15234 	ljmp	00102$
                                  15235 	.area CSEG    (CODE)
                                  15236 	.area CONST   (CODE)
      000000                      15237 _font:
      000000 00                   15238 	.db #0x00	; 0
      000001 00                   15239 	.db #0x00	; 0
      000002 00                   15240 	.db #0x00	; 0
      000003 00                   15241 	.db #0x00	; 0
      000004 00                   15242 	.db #0x00	; 0
      000005 3E                   15243 	.db #0x3e	; 62
      000006 5B                   15244 	.db #0x5b	; 91
      000007 4F                   15245 	.db #0x4f	; 79	'O'
      000008 5B                   15246 	.db #0x5b	; 91
      000009 3E                   15247 	.db #0x3e	; 62
      00000A 3E                   15248 	.db #0x3e	; 62
      00000B 6B                   15249 	.db #0x6b	; 107	'k'
      00000C 4F                   15250 	.db #0x4f	; 79	'O'
      00000D 6B                   15251 	.db #0x6b	; 107	'k'
      00000E 3E                   15252 	.db #0x3e	; 62
      00000F 1C                   15253 	.db #0x1c	; 28
      000010 3E                   15254 	.db #0x3e	; 62
      000011 7C                   15255 	.db #0x7c	; 124
      000012 3E                   15256 	.db #0x3e	; 62
      000013 1C                   15257 	.db #0x1c	; 28
      000014 18                   15258 	.db #0x18	; 24
      000015 3C                   15259 	.db #0x3c	; 60
      000016 7E                   15260 	.db #0x7e	; 126
      000017 3C                   15261 	.db #0x3c	; 60
      000018 18                   15262 	.db #0x18	; 24
      000019 1C                   15263 	.db #0x1c	; 28
      00001A 57                   15264 	.db #0x57	; 87	'W'
      00001B 7D                   15265 	.db #0x7d	; 125
      00001C 57                   15266 	.db #0x57	; 87	'W'
      00001D 1C                   15267 	.db #0x1c	; 28
      00001E 1C                   15268 	.db #0x1c	; 28
      00001F 5E                   15269 	.db #0x5e	; 94
      000020 7F                   15270 	.db #0x7f	; 127
      000021 5E                   15271 	.db #0x5e	; 94
      000022 1C                   15272 	.db #0x1c	; 28
      000023 00                   15273 	.db #0x00	; 0
      000024 18                   15274 	.db #0x18	; 24
      000025 3C                   15275 	.db #0x3c	; 60
      000026 18                   15276 	.db #0x18	; 24
      000027 00                   15277 	.db #0x00	; 0
      000028 FF                   15278 	.db #0xff	; 255
      000029 E7                   15279 	.db #0xe7	; 231
      00002A C3                   15280 	.db #0xc3	; 195
      00002B E7                   15281 	.db #0xe7	; 231
      00002C FF                   15282 	.db #0xff	; 255
      00002D 00                   15283 	.db #0x00	; 0
      00002E 18                   15284 	.db #0x18	; 24
      00002F 24                   15285 	.db #0x24	; 36
      000030 18                   15286 	.db #0x18	; 24
      000031 00                   15287 	.db #0x00	; 0
      000032 FF                   15288 	.db #0xff	; 255
      000033 E7                   15289 	.db #0xe7	; 231
      000034 DB                   15290 	.db #0xdb	; 219
      000035 E7                   15291 	.db #0xe7	; 231
      000036 FF                   15292 	.db #0xff	; 255
      000037 30                   15293 	.db #0x30	; 48	'0'
      000038 48                   15294 	.db #0x48	; 72	'H'
      000039 3A                   15295 	.db #0x3a	; 58
      00003A 06                   15296 	.db #0x06	; 6
      00003B 0E                   15297 	.db #0x0e	; 14
      00003C 26                   15298 	.db #0x26	; 38
      00003D 29                   15299 	.db #0x29	; 41
      00003E 79                   15300 	.db #0x79	; 121	'y'
      00003F 29                   15301 	.db #0x29	; 41
      000040 26                   15302 	.db #0x26	; 38
      000041 40                   15303 	.db #0x40	; 64
      000042 7F                   15304 	.db #0x7f	; 127
      000043 05                   15305 	.db #0x05	; 5
      000044 05                   15306 	.db #0x05	; 5
      000045 07                   15307 	.db #0x07	; 7
      000046 40                   15308 	.db #0x40	; 64
      000047 7F                   15309 	.db #0x7f	; 127
      000048 05                   15310 	.db #0x05	; 5
      000049 25                   15311 	.db #0x25	; 37
      00004A 3F                   15312 	.db #0x3f	; 63
      00004B 5A                   15313 	.db #0x5a	; 90	'Z'
      00004C 3C                   15314 	.db #0x3c	; 60
      00004D E7                   15315 	.db #0xe7	; 231
      00004E 3C                   15316 	.db #0x3c	; 60
      00004F 5A                   15317 	.db #0x5a	; 90	'Z'
      000050 7F                   15318 	.db #0x7f	; 127
      000051 3E                   15319 	.db #0x3e	; 62
      000052 1C                   15320 	.db #0x1c	; 28
      000053 1C                   15321 	.db #0x1c	; 28
      000054 08                   15322 	.db #0x08	; 8
      000055 08                   15323 	.db #0x08	; 8
      000056 1C                   15324 	.db #0x1c	; 28
      000057 1C                   15325 	.db #0x1c	; 28
      000058 3E                   15326 	.db #0x3e	; 62
      000059 7F                   15327 	.db #0x7f	; 127
      00005A 14                   15328 	.db #0x14	; 20
      00005B 22                   15329 	.db #0x22	; 34
      00005C 7F                   15330 	.db #0x7f	; 127
      00005D 22                   15331 	.db #0x22	; 34
      00005E 14                   15332 	.db #0x14	; 20
      00005F 5F                   15333 	.db #0x5f	; 95
      000060 5F                   15334 	.db #0x5f	; 95
      000061 00                   15335 	.db #0x00	; 0
      000062 5F                   15336 	.db #0x5f	; 95
      000063 5F                   15337 	.db #0x5f	; 95
      000064 06                   15338 	.db #0x06	; 6
      000065 09                   15339 	.db #0x09	; 9
      000066 7F                   15340 	.db #0x7f	; 127
      000067 01                   15341 	.db #0x01	; 1
      000068 7F                   15342 	.db #0x7f	; 127
      000069 00                   15343 	.db #0x00	; 0
      00006A 66                   15344 	.db #0x66	; 102	'f'
      00006B 89                   15345 	.db #0x89	; 137
      00006C 95                   15346 	.db #0x95	; 149
      00006D 6A                   15347 	.db #0x6a	; 106	'j'
      00006E 60                   15348 	.db #0x60	; 96
      00006F 60                   15349 	.db #0x60	; 96
      000070 60                   15350 	.db #0x60	; 96
      000071 60                   15351 	.db #0x60	; 96
      000072 60                   15352 	.db #0x60	; 96
      000073 94                   15353 	.db #0x94	; 148
      000074 A2                   15354 	.db #0xa2	; 162
      000075 FF                   15355 	.db #0xff	; 255
      000076 A2                   15356 	.db #0xa2	; 162
      000077 94                   15357 	.db #0x94	; 148
      000078 08                   15358 	.db #0x08	; 8
      000079 04                   15359 	.db #0x04	; 4
      00007A 7E                   15360 	.db #0x7e	; 126
      00007B 04                   15361 	.db #0x04	; 4
      00007C 08                   15362 	.db #0x08	; 8
      00007D 10                   15363 	.db #0x10	; 16
      00007E 20                   15364 	.db #0x20	; 32
      00007F 7E                   15365 	.db #0x7e	; 126
      000080 20                   15366 	.db #0x20	; 32
      000081 10                   15367 	.db #0x10	; 16
      000082 08                   15368 	.db #0x08	; 8
      000083 08                   15369 	.db #0x08	; 8
      000084 2A                   15370 	.db #0x2a	; 42
      000085 1C                   15371 	.db #0x1c	; 28
      000086 08                   15372 	.db #0x08	; 8
      000087 08                   15373 	.db #0x08	; 8
      000088 1C                   15374 	.db #0x1c	; 28
      000089 2A                   15375 	.db #0x2a	; 42
      00008A 08                   15376 	.db #0x08	; 8
      00008B 08                   15377 	.db #0x08	; 8
      00008C 1E                   15378 	.db #0x1e	; 30
      00008D 10                   15379 	.db #0x10	; 16
      00008E 10                   15380 	.db #0x10	; 16
      00008F 10                   15381 	.db #0x10	; 16
      000090 10                   15382 	.db #0x10	; 16
      000091 0C                   15383 	.db #0x0c	; 12
      000092 1E                   15384 	.db #0x1e	; 30
      000093 0C                   15385 	.db #0x0c	; 12
      000094 1E                   15386 	.db #0x1e	; 30
      000095 0C                   15387 	.db #0x0c	; 12
      000096 30                   15388 	.db #0x30	; 48	'0'
      000097 38                   15389 	.db #0x38	; 56	'8'
      000098 3E                   15390 	.db #0x3e	; 62
      000099 38                   15391 	.db #0x38	; 56	'8'
      00009A 30                   15392 	.db #0x30	; 48	'0'
      00009B 06                   15393 	.db #0x06	; 6
      00009C 0E                   15394 	.db #0x0e	; 14
      00009D 3E                   15395 	.db #0x3e	; 62
      00009E 0E                   15396 	.db #0x0e	; 14
      00009F 06                   15397 	.db #0x06	; 6
      0000A0 00                   15398 	.db #0x00	; 0
      0000A1 00                   15399 	.db #0x00	; 0
      0000A2 00                   15400 	.db #0x00	; 0
      0000A3 00                   15401 	.db #0x00	; 0
      0000A4 00                   15402 	.db #0x00	; 0
      0000A5 00                   15403 	.db #0x00	; 0
      0000A6 00                   15404 	.db #0x00	; 0
      0000A7 5F                   15405 	.db #0x5f	; 95
      0000A8 00                   15406 	.db #0x00	; 0
      0000A9 00                   15407 	.db #0x00	; 0
      0000AA 00                   15408 	.db #0x00	; 0
      0000AB 07                   15409 	.db #0x07	; 7
      0000AC 00                   15410 	.db #0x00	; 0
      0000AD 07                   15411 	.db #0x07	; 7
      0000AE 00                   15412 	.db #0x00	; 0
      0000AF 14                   15413 	.db #0x14	; 20
      0000B0 7F                   15414 	.db #0x7f	; 127
      0000B1 14                   15415 	.db #0x14	; 20
      0000B2 7F                   15416 	.db #0x7f	; 127
      0000B3 14                   15417 	.db #0x14	; 20
      0000B4 24                   15418 	.db #0x24	; 36
      0000B5 2A                   15419 	.db #0x2a	; 42
      0000B6 7F                   15420 	.db #0x7f	; 127
      0000B7 2A                   15421 	.db #0x2a	; 42
      0000B8 12                   15422 	.db #0x12	; 18
      0000B9 23                   15423 	.db #0x23	; 35
      0000BA 13                   15424 	.db #0x13	; 19
      0000BB 08                   15425 	.db #0x08	; 8
      0000BC 64                   15426 	.db #0x64	; 100	'd'
      0000BD 62                   15427 	.db #0x62	; 98	'b'
      0000BE 36                   15428 	.db #0x36	; 54	'6'
      0000BF 49                   15429 	.db #0x49	; 73	'I'
      0000C0 56                   15430 	.db #0x56	; 86	'V'
      0000C1 20                   15431 	.db #0x20	; 32
      0000C2 50                   15432 	.db #0x50	; 80	'P'
      0000C3 00                   15433 	.db #0x00	; 0
      0000C4 08                   15434 	.db #0x08	; 8
      0000C5 07                   15435 	.db #0x07	; 7
      0000C6 03                   15436 	.db #0x03	; 3
      0000C7 00                   15437 	.db #0x00	; 0
      0000C8 00                   15438 	.db #0x00	; 0
      0000C9 1C                   15439 	.db #0x1c	; 28
      0000CA 22                   15440 	.db #0x22	; 34
      0000CB 41                   15441 	.db #0x41	; 65	'A'
      0000CC 00                   15442 	.db #0x00	; 0
      0000CD 00                   15443 	.db #0x00	; 0
      0000CE 41                   15444 	.db #0x41	; 65	'A'
      0000CF 22                   15445 	.db #0x22	; 34
      0000D0 1C                   15446 	.db #0x1c	; 28
      0000D1 00                   15447 	.db #0x00	; 0
      0000D2 2A                   15448 	.db #0x2a	; 42
      0000D3 1C                   15449 	.db #0x1c	; 28
      0000D4 7F                   15450 	.db #0x7f	; 127
      0000D5 1C                   15451 	.db #0x1c	; 28
      0000D6 2A                   15452 	.db #0x2a	; 42
      0000D7 08                   15453 	.db #0x08	; 8
      0000D8 08                   15454 	.db #0x08	; 8
      0000D9 3E                   15455 	.db #0x3e	; 62
      0000DA 08                   15456 	.db #0x08	; 8
      0000DB 08                   15457 	.db #0x08	; 8
      0000DC 00                   15458 	.db #0x00	; 0
      0000DD 80                   15459 	.db #0x80	; 128
      0000DE 70                   15460 	.db #0x70	; 112	'p'
      0000DF 30                   15461 	.db #0x30	; 48	'0'
      0000E0 00                   15462 	.db #0x00	; 0
      0000E1 08                   15463 	.db #0x08	; 8
      0000E2 08                   15464 	.db #0x08	; 8
      0000E3 08                   15465 	.db #0x08	; 8
      0000E4 08                   15466 	.db #0x08	; 8
      0000E5 08                   15467 	.db #0x08	; 8
      0000E6 00                   15468 	.db #0x00	; 0
      0000E7 00                   15469 	.db #0x00	; 0
      0000E8 60                   15470 	.db #0x60	; 96
      0000E9 60                   15471 	.db #0x60	; 96
      0000EA 00                   15472 	.db #0x00	; 0
      0000EB 20                   15473 	.db #0x20	; 32
      0000EC 10                   15474 	.db #0x10	; 16
      0000ED 08                   15475 	.db #0x08	; 8
      0000EE 04                   15476 	.db #0x04	; 4
      0000EF 02                   15477 	.db #0x02	; 2
      0000F0 3E                   15478 	.db #0x3e	; 62
      0000F1 51                   15479 	.db #0x51	; 81	'Q'
      0000F2 49                   15480 	.db #0x49	; 73	'I'
      0000F3 45                   15481 	.db #0x45	; 69	'E'
      0000F4 3E                   15482 	.db #0x3e	; 62
      0000F5 00                   15483 	.db #0x00	; 0
      0000F6 42                   15484 	.db #0x42	; 66	'B'
      0000F7 7F                   15485 	.db #0x7f	; 127
      0000F8 40                   15486 	.db #0x40	; 64
      0000F9 00                   15487 	.db #0x00	; 0
      0000FA 72                   15488 	.db #0x72	; 114	'r'
      0000FB 49                   15489 	.db #0x49	; 73	'I'
      0000FC 49                   15490 	.db #0x49	; 73	'I'
      0000FD 49                   15491 	.db #0x49	; 73	'I'
      0000FE 46                   15492 	.db #0x46	; 70	'F'
      0000FF 21                   15493 	.db #0x21	; 33
      000100 41                   15494 	.db #0x41	; 65	'A'
      000101 49                   15495 	.db #0x49	; 73	'I'
      000102 4D                   15496 	.db #0x4d	; 77	'M'
      000103 33                   15497 	.db #0x33	; 51	'3'
      000104 18                   15498 	.db #0x18	; 24
      000105 14                   15499 	.db #0x14	; 20
      000106 12                   15500 	.db #0x12	; 18
      000107 7F                   15501 	.db #0x7f	; 127
      000108 10                   15502 	.db #0x10	; 16
      000109 27                   15503 	.db #0x27	; 39
      00010A 45                   15504 	.db #0x45	; 69	'E'
      00010B 45                   15505 	.db #0x45	; 69	'E'
      00010C 45                   15506 	.db #0x45	; 69	'E'
      00010D 39                   15507 	.db #0x39	; 57	'9'
      00010E 3C                   15508 	.db #0x3c	; 60
      00010F 4A                   15509 	.db #0x4a	; 74	'J'
      000110 49                   15510 	.db #0x49	; 73	'I'
      000111 49                   15511 	.db #0x49	; 73	'I'
      000112 31                   15512 	.db #0x31	; 49	'1'
      000113 41                   15513 	.db #0x41	; 65	'A'
      000114 21                   15514 	.db #0x21	; 33
      000115 11                   15515 	.db #0x11	; 17
      000116 09                   15516 	.db #0x09	; 9
      000117 07                   15517 	.db #0x07	; 7
      000118 36                   15518 	.db #0x36	; 54	'6'
      000119 49                   15519 	.db #0x49	; 73	'I'
      00011A 49                   15520 	.db #0x49	; 73	'I'
      00011B 49                   15521 	.db #0x49	; 73	'I'
      00011C 36                   15522 	.db #0x36	; 54	'6'
      00011D 46                   15523 	.db #0x46	; 70	'F'
      00011E 49                   15524 	.db #0x49	; 73	'I'
      00011F 49                   15525 	.db #0x49	; 73	'I'
      000120 29                   15526 	.db #0x29	; 41
      000121 1E                   15527 	.db #0x1e	; 30
      000122 00                   15528 	.db #0x00	; 0
      000123 00                   15529 	.db #0x00	; 0
      000124 14                   15530 	.db #0x14	; 20
      000125 00                   15531 	.db #0x00	; 0
      000126 00                   15532 	.db #0x00	; 0
      000127 00                   15533 	.db #0x00	; 0
      000128 40                   15534 	.db #0x40	; 64
      000129 34                   15535 	.db #0x34	; 52	'4'
      00012A 00                   15536 	.db #0x00	; 0
      00012B 00                   15537 	.db #0x00	; 0
      00012C 00                   15538 	.db #0x00	; 0
      00012D 08                   15539 	.db #0x08	; 8
      00012E 14                   15540 	.db #0x14	; 20
      00012F 22                   15541 	.db #0x22	; 34
      000130 41                   15542 	.db #0x41	; 65	'A'
      000131 14                   15543 	.db #0x14	; 20
      000132 14                   15544 	.db #0x14	; 20
      000133 14                   15545 	.db #0x14	; 20
      000134 14                   15546 	.db #0x14	; 20
      000135 14                   15547 	.db #0x14	; 20
      000136 00                   15548 	.db #0x00	; 0
      000137 41                   15549 	.db #0x41	; 65	'A'
      000138 22                   15550 	.db #0x22	; 34
      000139 14                   15551 	.db #0x14	; 20
      00013A 08                   15552 	.db #0x08	; 8
      00013B 02                   15553 	.db #0x02	; 2
      00013C 01                   15554 	.db #0x01	; 1
      00013D 59                   15555 	.db #0x59	; 89	'Y'
      00013E 09                   15556 	.db #0x09	; 9
      00013F 06                   15557 	.db #0x06	; 6
      000140 3E                   15558 	.db #0x3e	; 62
      000141 41                   15559 	.db #0x41	; 65	'A'
      000142 5D                   15560 	.db #0x5d	; 93
      000143 59                   15561 	.db #0x59	; 89	'Y'
      000144 4E                   15562 	.db #0x4e	; 78	'N'
      000145 7C                   15563 	.db #0x7c	; 124
      000146 12                   15564 	.db #0x12	; 18
      000147 11                   15565 	.db #0x11	; 17
      000148 12                   15566 	.db #0x12	; 18
      000149 7C                   15567 	.db #0x7c	; 124
      00014A 7F                   15568 	.db #0x7f	; 127
      00014B 49                   15569 	.db #0x49	; 73	'I'
      00014C 49                   15570 	.db #0x49	; 73	'I'
      00014D 49                   15571 	.db #0x49	; 73	'I'
      00014E 36                   15572 	.db #0x36	; 54	'6'
      00014F 3E                   15573 	.db #0x3e	; 62
      000150 41                   15574 	.db #0x41	; 65	'A'
      000151 41                   15575 	.db #0x41	; 65	'A'
      000152 41                   15576 	.db #0x41	; 65	'A'
      000153 22                   15577 	.db #0x22	; 34
      000154 7F                   15578 	.db #0x7f	; 127
      000155 41                   15579 	.db #0x41	; 65	'A'
      000156 41                   15580 	.db #0x41	; 65	'A'
      000157 41                   15581 	.db #0x41	; 65	'A'
      000158 3E                   15582 	.db #0x3e	; 62
      000159 7F                   15583 	.db #0x7f	; 127
      00015A 49                   15584 	.db #0x49	; 73	'I'
      00015B 49                   15585 	.db #0x49	; 73	'I'
      00015C 49                   15586 	.db #0x49	; 73	'I'
      00015D 41                   15587 	.db #0x41	; 65	'A'
      00015E 7F                   15588 	.db #0x7f	; 127
      00015F 09                   15589 	.db #0x09	; 9
      000160 09                   15590 	.db #0x09	; 9
      000161 09                   15591 	.db #0x09	; 9
      000162 01                   15592 	.db #0x01	; 1
      000163 3E                   15593 	.db #0x3e	; 62
      000164 41                   15594 	.db #0x41	; 65	'A'
      000165 41                   15595 	.db #0x41	; 65	'A'
      000166 51                   15596 	.db #0x51	; 81	'Q'
      000167 73                   15597 	.db #0x73	; 115	's'
      000168 7F                   15598 	.db #0x7f	; 127
      000169 08                   15599 	.db #0x08	; 8
      00016A 08                   15600 	.db #0x08	; 8
      00016B 08                   15601 	.db #0x08	; 8
      00016C 7F                   15602 	.db #0x7f	; 127
      00016D 00                   15603 	.db #0x00	; 0
      00016E 41                   15604 	.db #0x41	; 65	'A'
      00016F 7F                   15605 	.db #0x7f	; 127
      000170 41                   15606 	.db #0x41	; 65	'A'
      000171 00                   15607 	.db #0x00	; 0
      000172 20                   15608 	.db #0x20	; 32
      000173 40                   15609 	.db #0x40	; 64
      000174 41                   15610 	.db #0x41	; 65	'A'
      000175 3F                   15611 	.db #0x3f	; 63
      000176 01                   15612 	.db #0x01	; 1
      000177 7F                   15613 	.db #0x7f	; 127
      000178 08                   15614 	.db #0x08	; 8
      000179 14                   15615 	.db #0x14	; 20
      00017A 22                   15616 	.db #0x22	; 34
      00017B 41                   15617 	.db #0x41	; 65	'A'
      00017C 7F                   15618 	.db #0x7f	; 127
      00017D 40                   15619 	.db #0x40	; 64
      00017E 40                   15620 	.db #0x40	; 64
      00017F 40                   15621 	.db #0x40	; 64
      000180 40                   15622 	.db #0x40	; 64
      000181 7F                   15623 	.db #0x7f	; 127
      000182 02                   15624 	.db #0x02	; 2
      000183 1C                   15625 	.db #0x1c	; 28
      000184 02                   15626 	.db #0x02	; 2
      000185 7F                   15627 	.db #0x7f	; 127
      000186 7F                   15628 	.db #0x7f	; 127
      000187 04                   15629 	.db #0x04	; 4
      000188 08                   15630 	.db #0x08	; 8
      000189 10                   15631 	.db #0x10	; 16
      00018A 7F                   15632 	.db #0x7f	; 127
      00018B 3E                   15633 	.db #0x3e	; 62
      00018C 41                   15634 	.db #0x41	; 65	'A'
      00018D 41                   15635 	.db #0x41	; 65	'A'
      00018E 41                   15636 	.db #0x41	; 65	'A'
      00018F 3E                   15637 	.db #0x3e	; 62
      000190 7F                   15638 	.db #0x7f	; 127
      000191 09                   15639 	.db #0x09	; 9
      000192 09                   15640 	.db #0x09	; 9
      000193 09                   15641 	.db #0x09	; 9
      000194 06                   15642 	.db #0x06	; 6
      000195 3E                   15643 	.db #0x3e	; 62
      000196 41                   15644 	.db #0x41	; 65	'A'
      000197 51                   15645 	.db #0x51	; 81	'Q'
      000198 21                   15646 	.db #0x21	; 33
      000199 5E                   15647 	.db #0x5e	; 94
      00019A 7F                   15648 	.db #0x7f	; 127
      00019B 09                   15649 	.db #0x09	; 9
      00019C 19                   15650 	.db #0x19	; 25
      00019D 29                   15651 	.db #0x29	; 41
      00019E 46                   15652 	.db #0x46	; 70	'F'
      00019F 26                   15653 	.db #0x26	; 38
      0001A0 49                   15654 	.db #0x49	; 73	'I'
      0001A1 49                   15655 	.db #0x49	; 73	'I'
      0001A2 49                   15656 	.db #0x49	; 73	'I'
      0001A3 32                   15657 	.db #0x32	; 50	'2'
      0001A4 03                   15658 	.db #0x03	; 3
      0001A5 01                   15659 	.db #0x01	; 1
      0001A6 7F                   15660 	.db #0x7f	; 127
      0001A7 01                   15661 	.db #0x01	; 1
      0001A8 03                   15662 	.db #0x03	; 3
      0001A9 3F                   15663 	.db #0x3f	; 63
      0001AA 40                   15664 	.db #0x40	; 64
      0001AB 40                   15665 	.db #0x40	; 64
      0001AC 40                   15666 	.db #0x40	; 64
      0001AD 3F                   15667 	.db #0x3f	; 63
      0001AE 1F                   15668 	.db #0x1f	; 31
      0001AF 20                   15669 	.db #0x20	; 32
      0001B0 40                   15670 	.db #0x40	; 64
      0001B1 20                   15671 	.db #0x20	; 32
      0001B2 1F                   15672 	.db #0x1f	; 31
      0001B3 3F                   15673 	.db #0x3f	; 63
      0001B4 40                   15674 	.db #0x40	; 64
      0001B5 38                   15675 	.db #0x38	; 56	'8'
      0001B6 40                   15676 	.db #0x40	; 64
      0001B7 3F                   15677 	.db #0x3f	; 63
      0001B8 63                   15678 	.db #0x63	; 99	'c'
      0001B9 14                   15679 	.db #0x14	; 20
      0001BA 08                   15680 	.db #0x08	; 8
      0001BB 14                   15681 	.db #0x14	; 20
      0001BC 63                   15682 	.db #0x63	; 99	'c'
      0001BD 03                   15683 	.db #0x03	; 3
      0001BE 04                   15684 	.db #0x04	; 4
      0001BF 78                   15685 	.db #0x78	; 120	'x'
      0001C0 04                   15686 	.db #0x04	; 4
      0001C1 03                   15687 	.db #0x03	; 3
      0001C2 61                   15688 	.db #0x61	; 97	'a'
      0001C3 59                   15689 	.db #0x59	; 89	'Y'
      0001C4 49                   15690 	.db #0x49	; 73	'I'
      0001C5 4D                   15691 	.db #0x4d	; 77	'M'
      0001C6 43                   15692 	.db #0x43	; 67	'C'
      0001C7 00                   15693 	.db #0x00	; 0
      0001C8 7F                   15694 	.db #0x7f	; 127
      0001C9 41                   15695 	.db #0x41	; 65	'A'
      0001CA 41                   15696 	.db #0x41	; 65	'A'
      0001CB 41                   15697 	.db #0x41	; 65	'A'
      0001CC 02                   15698 	.db #0x02	; 2
      0001CD 04                   15699 	.db #0x04	; 4
      0001CE 08                   15700 	.db #0x08	; 8
      0001CF 10                   15701 	.db #0x10	; 16
      0001D0 20                   15702 	.db #0x20	; 32
      0001D1 00                   15703 	.db #0x00	; 0
      0001D2 41                   15704 	.db #0x41	; 65	'A'
      0001D3 41                   15705 	.db #0x41	; 65	'A'
      0001D4 41                   15706 	.db #0x41	; 65	'A'
      0001D5 7F                   15707 	.db #0x7f	; 127
      0001D6 04                   15708 	.db #0x04	; 4
      0001D7 02                   15709 	.db #0x02	; 2
      0001D8 01                   15710 	.db #0x01	; 1
      0001D9 02                   15711 	.db #0x02	; 2
      0001DA 04                   15712 	.db #0x04	; 4
      0001DB 40                   15713 	.db #0x40	; 64
      0001DC 40                   15714 	.db #0x40	; 64
      0001DD 40                   15715 	.db #0x40	; 64
      0001DE 40                   15716 	.db #0x40	; 64
      0001DF 40                   15717 	.db #0x40	; 64
      0001E0 00                   15718 	.db #0x00	; 0
      0001E1 03                   15719 	.db #0x03	; 3
      0001E2 07                   15720 	.db #0x07	; 7
      0001E3 08                   15721 	.db #0x08	; 8
      0001E4 00                   15722 	.db #0x00	; 0
      0001E5 20                   15723 	.db #0x20	; 32
      0001E6 54                   15724 	.db #0x54	; 84	'T'
      0001E7 54                   15725 	.db #0x54	; 84	'T'
      0001E8 78                   15726 	.db #0x78	; 120	'x'
      0001E9 40                   15727 	.db #0x40	; 64
      0001EA 7F                   15728 	.db #0x7f	; 127
      0001EB 28                   15729 	.db #0x28	; 40
      0001EC 44                   15730 	.db #0x44	; 68	'D'
      0001ED 44                   15731 	.db #0x44	; 68	'D'
      0001EE 38                   15732 	.db #0x38	; 56	'8'
      0001EF 38                   15733 	.db #0x38	; 56	'8'
      0001F0 44                   15734 	.db #0x44	; 68	'D'
      0001F1 44                   15735 	.db #0x44	; 68	'D'
      0001F2 44                   15736 	.db #0x44	; 68	'D'
      0001F3 28                   15737 	.db #0x28	; 40
      0001F4 38                   15738 	.db #0x38	; 56	'8'
      0001F5 44                   15739 	.db #0x44	; 68	'D'
      0001F6 44                   15740 	.db #0x44	; 68	'D'
      0001F7 28                   15741 	.db #0x28	; 40
      0001F8 7F                   15742 	.db #0x7f	; 127
      0001F9 38                   15743 	.db #0x38	; 56	'8'
      0001FA 54                   15744 	.db #0x54	; 84	'T'
      0001FB 54                   15745 	.db #0x54	; 84	'T'
      0001FC 54                   15746 	.db #0x54	; 84	'T'
      0001FD 18                   15747 	.db #0x18	; 24
      0001FE 00                   15748 	.db #0x00	; 0
      0001FF 08                   15749 	.db #0x08	; 8
      000200 7E                   15750 	.db #0x7e	; 126
      000201 09                   15751 	.db #0x09	; 9
      000202 02                   15752 	.db #0x02	; 2
      000203 18                   15753 	.db #0x18	; 24
      000204 A4                   15754 	.db #0xa4	; 164
      000205 A4                   15755 	.db #0xa4	; 164
      000206 9C                   15756 	.db #0x9c	; 156
      000207 78                   15757 	.db #0x78	; 120	'x'
      000208 7F                   15758 	.db #0x7f	; 127
      000209 08                   15759 	.db #0x08	; 8
      00020A 04                   15760 	.db #0x04	; 4
      00020B 04                   15761 	.db #0x04	; 4
      00020C 78                   15762 	.db #0x78	; 120	'x'
      00020D 00                   15763 	.db #0x00	; 0
      00020E 44                   15764 	.db #0x44	; 68	'D'
      00020F 7D                   15765 	.db #0x7d	; 125
      000210 40                   15766 	.db #0x40	; 64
      000211 00                   15767 	.db #0x00	; 0
      000212 20                   15768 	.db #0x20	; 32
      000213 40                   15769 	.db #0x40	; 64
      000214 40                   15770 	.db #0x40	; 64
      000215 3D                   15771 	.db #0x3d	; 61
      000216 00                   15772 	.db #0x00	; 0
      000217 7F                   15773 	.db #0x7f	; 127
      000218 10                   15774 	.db #0x10	; 16
      000219 28                   15775 	.db #0x28	; 40
      00021A 44                   15776 	.db #0x44	; 68	'D'
      00021B 00                   15777 	.db #0x00	; 0
      00021C 00                   15778 	.db #0x00	; 0
      00021D 41                   15779 	.db #0x41	; 65	'A'
      00021E 7F                   15780 	.db #0x7f	; 127
      00021F 40                   15781 	.db #0x40	; 64
      000220 00                   15782 	.db #0x00	; 0
      000221 7C                   15783 	.db #0x7c	; 124
      000222 04                   15784 	.db #0x04	; 4
      000223 78                   15785 	.db #0x78	; 120	'x'
      000224 04                   15786 	.db #0x04	; 4
      000225 78                   15787 	.db #0x78	; 120	'x'
      000226 7C                   15788 	.db #0x7c	; 124
      000227 08                   15789 	.db #0x08	; 8
      000228 04                   15790 	.db #0x04	; 4
      000229 04                   15791 	.db #0x04	; 4
      00022A 78                   15792 	.db #0x78	; 120	'x'
      00022B 38                   15793 	.db #0x38	; 56	'8'
      00022C 44                   15794 	.db #0x44	; 68	'D'
      00022D 44                   15795 	.db #0x44	; 68	'D'
      00022E 44                   15796 	.db #0x44	; 68	'D'
      00022F 38                   15797 	.db #0x38	; 56	'8'
      000230 FC                   15798 	.db #0xfc	; 252
      000231 18                   15799 	.db #0x18	; 24
      000232 24                   15800 	.db #0x24	; 36
      000233 24                   15801 	.db #0x24	; 36
      000234 18                   15802 	.db #0x18	; 24
      000235 18                   15803 	.db #0x18	; 24
      000236 24                   15804 	.db #0x24	; 36
      000237 24                   15805 	.db #0x24	; 36
      000238 18                   15806 	.db #0x18	; 24
      000239 FC                   15807 	.db #0xfc	; 252
      00023A 7C                   15808 	.db #0x7c	; 124
      00023B 08                   15809 	.db #0x08	; 8
      00023C 04                   15810 	.db #0x04	; 4
      00023D 04                   15811 	.db #0x04	; 4
      00023E 08                   15812 	.db #0x08	; 8
      00023F 48                   15813 	.db #0x48	; 72	'H'
      000240 54                   15814 	.db #0x54	; 84	'T'
      000241 54                   15815 	.db #0x54	; 84	'T'
      000242 54                   15816 	.db #0x54	; 84	'T'
      000243 24                   15817 	.db #0x24	; 36
      000244 04                   15818 	.db #0x04	; 4
      000245 04                   15819 	.db #0x04	; 4
      000246 3F                   15820 	.db #0x3f	; 63
      000247 44                   15821 	.db #0x44	; 68	'D'
      000248 24                   15822 	.db #0x24	; 36
      000249 3C                   15823 	.db #0x3c	; 60
      00024A 40                   15824 	.db #0x40	; 64
      00024B 40                   15825 	.db #0x40	; 64
      00024C 20                   15826 	.db #0x20	; 32
      00024D 7C                   15827 	.db #0x7c	; 124
      00024E 1C                   15828 	.db #0x1c	; 28
      00024F 20                   15829 	.db #0x20	; 32
      000250 40                   15830 	.db #0x40	; 64
      000251 20                   15831 	.db #0x20	; 32
      000252 1C                   15832 	.db #0x1c	; 28
      000253 3C                   15833 	.db #0x3c	; 60
      000254 40                   15834 	.db #0x40	; 64
      000255 30                   15835 	.db #0x30	; 48	'0'
      000256 40                   15836 	.db #0x40	; 64
      000257 3C                   15837 	.db #0x3c	; 60
      000258 44                   15838 	.db #0x44	; 68	'D'
      000259 28                   15839 	.db #0x28	; 40
      00025A 10                   15840 	.db #0x10	; 16
      00025B 28                   15841 	.db #0x28	; 40
      00025C 44                   15842 	.db #0x44	; 68	'D'
      00025D 4C                   15843 	.db #0x4c	; 76	'L'
      00025E 90                   15844 	.db #0x90	; 144
      00025F 90                   15845 	.db #0x90	; 144
      000260 90                   15846 	.db #0x90	; 144
      000261 7C                   15847 	.db #0x7c	; 124
      000262 44                   15848 	.db #0x44	; 68	'D'
      000263 64                   15849 	.db #0x64	; 100	'd'
      000264 54                   15850 	.db #0x54	; 84	'T'
      000265 4C                   15851 	.db #0x4c	; 76	'L'
      000266 44                   15852 	.db #0x44	; 68	'D'
      000267 00                   15853 	.db #0x00	; 0
      000268 08                   15854 	.db #0x08	; 8
      000269 36                   15855 	.db #0x36	; 54	'6'
      00026A 41                   15856 	.db #0x41	; 65	'A'
      00026B 00                   15857 	.db #0x00	; 0
      00026C 00                   15858 	.db #0x00	; 0
      00026D 00                   15859 	.db #0x00	; 0
      00026E 77                   15860 	.db #0x77	; 119	'w'
      00026F 00                   15861 	.db #0x00	; 0
      000270 00                   15862 	.db #0x00	; 0
      000271 00                   15863 	.db #0x00	; 0
      000272 41                   15864 	.db #0x41	; 65	'A'
      000273 36                   15865 	.db #0x36	; 54	'6'
      000274 08                   15866 	.db #0x08	; 8
      000275 00                   15867 	.db #0x00	; 0
      000276 02                   15868 	.db #0x02	; 2
      000277 01                   15869 	.db #0x01	; 1
      000278 02                   15870 	.db #0x02	; 2
      000279 04                   15871 	.db #0x04	; 4
      00027A 02                   15872 	.db #0x02	; 2
      00027B 3C                   15873 	.db #0x3c	; 60
      00027C 26                   15874 	.db #0x26	; 38
      00027D 23                   15875 	.db #0x23	; 35
      00027E 26                   15876 	.db #0x26	; 38
      00027F 3C                   15877 	.db #0x3c	; 60
      000280 1E                   15878 	.db #0x1e	; 30
      000281 A1                   15879 	.db #0xa1	; 161
      000282 A1                   15880 	.db #0xa1	; 161
      000283 61                   15881 	.db #0x61	; 97	'a'
      000284 12                   15882 	.db #0x12	; 18
      000285 3A                   15883 	.db #0x3a	; 58
      000286 40                   15884 	.db #0x40	; 64
      000287 40                   15885 	.db #0x40	; 64
      000288 20                   15886 	.db #0x20	; 32
      000289 7A                   15887 	.db #0x7a	; 122	'z'
      00028A 38                   15888 	.db #0x38	; 56	'8'
      00028B 54                   15889 	.db #0x54	; 84	'T'
      00028C 54                   15890 	.db #0x54	; 84	'T'
      00028D 55                   15891 	.db #0x55	; 85	'U'
      00028E 59                   15892 	.db #0x59	; 89	'Y'
      00028F 21                   15893 	.db #0x21	; 33
      000290 55                   15894 	.db #0x55	; 85	'U'
      000291 55                   15895 	.db #0x55	; 85	'U'
      000292 79                   15896 	.db #0x79	; 121	'y'
      000293 41                   15897 	.db #0x41	; 65	'A'
      000294 22                   15898 	.db #0x22	; 34
      000295 54                   15899 	.db #0x54	; 84	'T'
      000296 54                   15900 	.db #0x54	; 84	'T'
      000297 78                   15901 	.db #0x78	; 120	'x'
      000298 42                   15902 	.db #0x42	; 66	'B'
      000299 21                   15903 	.db #0x21	; 33
      00029A 55                   15904 	.db #0x55	; 85	'U'
      00029B 54                   15905 	.db #0x54	; 84	'T'
      00029C 78                   15906 	.db #0x78	; 120	'x'
      00029D 40                   15907 	.db #0x40	; 64
      00029E 20                   15908 	.db #0x20	; 32
      00029F 54                   15909 	.db #0x54	; 84	'T'
      0002A0 55                   15910 	.db #0x55	; 85	'U'
      0002A1 79                   15911 	.db #0x79	; 121	'y'
      0002A2 40                   15912 	.db #0x40	; 64
      0002A3 0C                   15913 	.db #0x0c	; 12
      0002A4 1E                   15914 	.db #0x1e	; 30
      0002A5 52                   15915 	.db #0x52	; 82	'R'
      0002A6 72                   15916 	.db #0x72	; 114	'r'
      0002A7 12                   15917 	.db #0x12	; 18
      0002A8 39                   15918 	.db #0x39	; 57	'9'
      0002A9 55                   15919 	.db #0x55	; 85	'U'
      0002AA 55                   15920 	.db #0x55	; 85	'U'
      0002AB 55                   15921 	.db #0x55	; 85	'U'
      0002AC 59                   15922 	.db #0x59	; 89	'Y'
      0002AD 39                   15923 	.db #0x39	; 57	'9'
      0002AE 54                   15924 	.db #0x54	; 84	'T'
      0002AF 54                   15925 	.db #0x54	; 84	'T'
      0002B0 54                   15926 	.db #0x54	; 84	'T'
      0002B1 59                   15927 	.db #0x59	; 89	'Y'
      0002B2 39                   15928 	.db #0x39	; 57	'9'
      0002B3 55                   15929 	.db #0x55	; 85	'U'
      0002B4 54                   15930 	.db #0x54	; 84	'T'
      0002B5 54                   15931 	.db #0x54	; 84	'T'
      0002B6 58                   15932 	.db #0x58	; 88	'X'
      0002B7 00                   15933 	.db #0x00	; 0
      0002B8 00                   15934 	.db #0x00	; 0
      0002B9 45                   15935 	.db #0x45	; 69	'E'
      0002BA 7C                   15936 	.db #0x7c	; 124
      0002BB 41                   15937 	.db #0x41	; 65	'A'
      0002BC 00                   15938 	.db #0x00	; 0
      0002BD 02                   15939 	.db #0x02	; 2
      0002BE 45                   15940 	.db #0x45	; 69	'E'
      0002BF 7D                   15941 	.db #0x7d	; 125
      0002C0 42                   15942 	.db #0x42	; 66	'B'
      0002C1 00                   15943 	.db #0x00	; 0
      0002C2 01                   15944 	.db #0x01	; 1
      0002C3 45                   15945 	.db #0x45	; 69	'E'
      0002C4 7C                   15946 	.db #0x7c	; 124
      0002C5 40                   15947 	.db #0x40	; 64
      0002C6 7D                   15948 	.db #0x7d	; 125
      0002C7 12                   15949 	.db #0x12	; 18
      0002C8 11                   15950 	.db #0x11	; 17
      0002C9 12                   15951 	.db #0x12	; 18
      0002CA 7D                   15952 	.db #0x7d	; 125
      0002CB F0                   15953 	.db #0xf0	; 240
      0002CC 28                   15954 	.db #0x28	; 40
      0002CD 25                   15955 	.db #0x25	; 37
      0002CE 28                   15956 	.db #0x28	; 40
      0002CF F0                   15957 	.db #0xf0	; 240
      0002D0 7C                   15958 	.db #0x7c	; 124
      0002D1 54                   15959 	.db #0x54	; 84	'T'
      0002D2 55                   15960 	.db #0x55	; 85	'U'
      0002D3 45                   15961 	.db #0x45	; 69	'E'
      0002D4 00                   15962 	.db #0x00	; 0
      0002D5 20                   15963 	.db #0x20	; 32
      0002D6 54                   15964 	.db #0x54	; 84	'T'
      0002D7 54                   15965 	.db #0x54	; 84	'T'
      0002D8 7C                   15966 	.db #0x7c	; 124
      0002D9 54                   15967 	.db #0x54	; 84	'T'
      0002DA 7C                   15968 	.db #0x7c	; 124
      0002DB 0A                   15969 	.db #0x0a	; 10
      0002DC 09                   15970 	.db #0x09	; 9
      0002DD 7F                   15971 	.db #0x7f	; 127
      0002DE 49                   15972 	.db #0x49	; 73	'I'
      0002DF 32                   15973 	.db #0x32	; 50	'2'
      0002E0 49                   15974 	.db #0x49	; 73	'I'
      0002E1 49                   15975 	.db #0x49	; 73	'I'
      0002E2 49                   15976 	.db #0x49	; 73	'I'
      0002E3 32                   15977 	.db #0x32	; 50	'2'
      0002E4 3A                   15978 	.db #0x3a	; 58
      0002E5 44                   15979 	.db #0x44	; 68	'D'
      0002E6 44                   15980 	.db #0x44	; 68	'D'
      0002E7 44                   15981 	.db #0x44	; 68	'D'
      0002E8 3A                   15982 	.db #0x3a	; 58
      0002E9 32                   15983 	.db #0x32	; 50	'2'
      0002EA 4A                   15984 	.db #0x4a	; 74	'J'
      0002EB 48                   15985 	.db #0x48	; 72	'H'
      0002EC 48                   15986 	.db #0x48	; 72	'H'
      0002ED 30                   15987 	.db #0x30	; 48	'0'
      0002EE 3A                   15988 	.db #0x3a	; 58
      0002EF 41                   15989 	.db #0x41	; 65	'A'
      0002F0 41                   15990 	.db #0x41	; 65	'A'
      0002F1 21                   15991 	.db #0x21	; 33
      0002F2 7A                   15992 	.db #0x7a	; 122	'z'
      0002F3 3A                   15993 	.db #0x3a	; 58
      0002F4 42                   15994 	.db #0x42	; 66	'B'
      0002F5 40                   15995 	.db #0x40	; 64
      0002F6 20                   15996 	.db #0x20	; 32
      0002F7 78                   15997 	.db #0x78	; 120	'x'
      0002F8 00                   15998 	.db #0x00	; 0
      0002F9 9D                   15999 	.db #0x9d	; 157
      0002FA A0                   16000 	.db #0xa0	; 160
      0002FB A0                   16001 	.db #0xa0	; 160
      0002FC 7D                   16002 	.db #0x7d	; 125
      0002FD 3D                   16003 	.db #0x3d	; 61
      0002FE 42                   16004 	.db #0x42	; 66	'B'
      0002FF 42                   16005 	.db #0x42	; 66	'B'
      000300 42                   16006 	.db #0x42	; 66	'B'
      000301 3D                   16007 	.db #0x3d	; 61
      000302 3D                   16008 	.db #0x3d	; 61
      000303 40                   16009 	.db #0x40	; 64
      000304 40                   16010 	.db #0x40	; 64
      000305 40                   16011 	.db #0x40	; 64
      000306 3D                   16012 	.db #0x3d	; 61
      000307 3C                   16013 	.db #0x3c	; 60
      000308 24                   16014 	.db #0x24	; 36
      000309 FF                   16015 	.db #0xff	; 255
      00030A 24                   16016 	.db #0x24	; 36
      00030B 24                   16017 	.db #0x24	; 36
      00030C 48                   16018 	.db #0x48	; 72	'H'
      00030D 7E                   16019 	.db #0x7e	; 126
      00030E 49                   16020 	.db #0x49	; 73	'I'
      00030F 43                   16021 	.db #0x43	; 67	'C'
      000310 66                   16022 	.db #0x66	; 102	'f'
      000311 2B                   16023 	.db #0x2b	; 43
      000312 2F                   16024 	.db #0x2f	; 47
      000313 FC                   16025 	.db #0xfc	; 252
      000314 2F                   16026 	.db #0x2f	; 47
      000315 2B                   16027 	.db #0x2b	; 43
      000316 FF                   16028 	.db #0xff	; 255
      000317 09                   16029 	.db #0x09	; 9
      000318 29                   16030 	.db #0x29	; 41
      000319 F6                   16031 	.db #0xf6	; 246
      00031A 20                   16032 	.db #0x20	; 32
      00031B C0                   16033 	.db #0xc0	; 192
      00031C 88                   16034 	.db #0x88	; 136
      00031D 7E                   16035 	.db #0x7e	; 126
      00031E 09                   16036 	.db #0x09	; 9
      00031F 03                   16037 	.db #0x03	; 3
      000320 20                   16038 	.db #0x20	; 32
      000321 54                   16039 	.db #0x54	; 84	'T'
      000322 54                   16040 	.db #0x54	; 84	'T'
      000323 79                   16041 	.db #0x79	; 121	'y'
      000324 41                   16042 	.db #0x41	; 65	'A'
      000325 00                   16043 	.db #0x00	; 0
      000326 00                   16044 	.db #0x00	; 0
      000327 44                   16045 	.db #0x44	; 68	'D'
      000328 7D                   16046 	.db #0x7d	; 125
      000329 41                   16047 	.db #0x41	; 65	'A'
      00032A 30                   16048 	.db #0x30	; 48	'0'
      00032B 48                   16049 	.db #0x48	; 72	'H'
      00032C 48                   16050 	.db #0x48	; 72	'H'
      00032D 4A                   16051 	.db #0x4a	; 74	'J'
      00032E 32                   16052 	.db #0x32	; 50	'2'
      00032F 38                   16053 	.db #0x38	; 56	'8'
      000330 40                   16054 	.db #0x40	; 64
      000331 40                   16055 	.db #0x40	; 64
      000332 22                   16056 	.db #0x22	; 34
      000333 7A                   16057 	.db #0x7a	; 122	'z'
      000334 00                   16058 	.db #0x00	; 0
      000335 7A                   16059 	.db #0x7a	; 122	'z'
      000336 0A                   16060 	.db #0x0a	; 10
      000337 0A                   16061 	.db #0x0a	; 10
      000338 72                   16062 	.db #0x72	; 114	'r'
      000339 7D                   16063 	.db #0x7d	; 125
      00033A 0D                   16064 	.db #0x0d	; 13
      00033B 19                   16065 	.db #0x19	; 25
      00033C 31                   16066 	.db #0x31	; 49	'1'
      00033D 7D                   16067 	.db #0x7d	; 125
      00033E 26                   16068 	.db #0x26	; 38
      00033F 29                   16069 	.db #0x29	; 41
      000340 29                   16070 	.db #0x29	; 41
      000341 2F                   16071 	.db #0x2f	; 47
      000342 28                   16072 	.db #0x28	; 40
      000343 26                   16073 	.db #0x26	; 38
      000344 29                   16074 	.db #0x29	; 41
      000345 29                   16075 	.db #0x29	; 41
      000346 29                   16076 	.db #0x29	; 41
      000347 26                   16077 	.db #0x26	; 38
      000348 30                   16078 	.db #0x30	; 48	'0'
      000349 48                   16079 	.db #0x48	; 72	'H'
      00034A 4D                   16080 	.db #0x4d	; 77	'M'
      00034B 40                   16081 	.db #0x40	; 64
      00034C 20                   16082 	.db #0x20	; 32
      00034D 38                   16083 	.db #0x38	; 56	'8'
      00034E 08                   16084 	.db #0x08	; 8
      00034F 08                   16085 	.db #0x08	; 8
      000350 08                   16086 	.db #0x08	; 8
      000351 08                   16087 	.db #0x08	; 8
      000352 08                   16088 	.db #0x08	; 8
      000353 08                   16089 	.db #0x08	; 8
      000354 08                   16090 	.db #0x08	; 8
      000355 08                   16091 	.db #0x08	; 8
      000356 38                   16092 	.db #0x38	; 56	'8'
      000357 2F                   16093 	.db #0x2f	; 47
      000358 10                   16094 	.db #0x10	; 16
      000359 C8                   16095 	.db #0xc8	; 200
      00035A AC                   16096 	.db #0xac	; 172
      00035B BA                   16097 	.db #0xba	; 186
      00035C 2F                   16098 	.db #0x2f	; 47
      00035D 10                   16099 	.db #0x10	; 16
      00035E 28                   16100 	.db #0x28	; 40
      00035F 34                   16101 	.db #0x34	; 52	'4'
      000360 FA                   16102 	.db #0xfa	; 250
      000361 00                   16103 	.db #0x00	; 0
      000362 00                   16104 	.db #0x00	; 0
      000363 7B                   16105 	.db #0x7b	; 123
      000364 00                   16106 	.db #0x00	; 0
      000365 00                   16107 	.db #0x00	; 0
      000366 08                   16108 	.db #0x08	; 8
      000367 14                   16109 	.db #0x14	; 20
      000368 2A                   16110 	.db #0x2a	; 42
      000369 14                   16111 	.db #0x14	; 20
      00036A 22                   16112 	.db #0x22	; 34
      00036B 22                   16113 	.db #0x22	; 34
      00036C 14                   16114 	.db #0x14	; 20
      00036D 2A                   16115 	.db #0x2a	; 42
      00036E 14                   16116 	.db #0x14	; 20
      00036F 08                   16117 	.db #0x08	; 8
      000370 AA                   16118 	.db #0xaa	; 170
      000371 00                   16119 	.db #0x00	; 0
      000372 55                   16120 	.db #0x55	; 85	'U'
      000373 00                   16121 	.db #0x00	; 0
      000374 AA                   16122 	.db #0xaa	; 170
      000375 AA                   16123 	.db #0xaa	; 170
      000376 55                   16124 	.db #0x55	; 85	'U'
      000377 AA                   16125 	.db #0xaa	; 170
      000378 55                   16126 	.db #0x55	; 85	'U'
      000379 AA                   16127 	.db #0xaa	; 170
      00037A 00                   16128 	.db #0x00	; 0
      00037B 00                   16129 	.db #0x00	; 0
      00037C 00                   16130 	.db #0x00	; 0
      00037D FF                   16131 	.db #0xff	; 255
      00037E 00                   16132 	.db #0x00	; 0
      00037F 10                   16133 	.db #0x10	; 16
      000380 10                   16134 	.db #0x10	; 16
      000381 10                   16135 	.db #0x10	; 16
      000382 FF                   16136 	.db #0xff	; 255
      000383 00                   16137 	.db #0x00	; 0
      000384 14                   16138 	.db #0x14	; 20
      000385 14                   16139 	.db #0x14	; 20
      000386 14                   16140 	.db #0x14	; 20
      000387 FF                   16141 	.db #0xff	; 255
      000388 00                   16142 	.db #0x00	; 0
      000389 10                   16143 	.db #0x10	; 16
      00038A 10                   16144 	.db #0x10	; 16
      00038B FF                   16145 	.db #0xff	; 255
      00038C 00                   16146 	.db #0x00	; 0
      00038D FF                   16147 	.db #0xff	; 255
      00038E 10                   16148 	.db #0x10	; 16
      00038F 10                   16149 	.db #0x10	; 16
      000390 F0                   16150 	.db #0xf0	; 240
      000391 10                   16151 	.db #0x10	; 16
      000392 F0                   16152 	.db #0xf0	; 240
      000393 14                   16153 	.db #0x14	; 20
      000394 14                   16154 	.db #0x14	; 20
      000395 14                   16155 	.db #0x14	; 20
      000396 FC                   16156 	.db #0xfc	; 252
      000397 00                   16157 	.db #0x00	; 0
      000398 14                   16158 	.db #0x14	; 20
      000399 14                   16159 	.db #0x14	; 20
      00039A F7                   16160 	.db #0xf7	; 247
      00039B 00                   16161 	.db #0x00	; 0
      00039C FF                   16162 	.db #0xff	; 255
      00039D 00                   16163 	.db #0x00	; 0
      00039E 00                   16164 	.db #0x00	; 0
      00039F FF                   16165 	.db #0xff	; 255
      0003A0 00                   16166 	.db #0x00	; 0
      0003A1 FF                   16167 	.db #0xff	; 255
      0003A2 14                   16168 	.db #0x14	; 20
      0003A3 14                   16169 	.db #0x14	; 20
      0003A4 F4                   16170 	.db #0xf4	; 244
      0003A5 04                   16171 	.db #0x04	; 4
      0003A6 FC                   16172 	.db #0xfc	; 252
      0003A7 14                   16173 	.db #0x14	; 20
      0003A8 14                   16174 	.db #0x14	; 20
      0003A9 17                   16175 	.db #0x17	; 23
      0003AA 10                   16176 	.db #0x10	; 16
      0003AB 1F                   16177 	.db #0x1f	; 31
      0003AC 10                   16178 	.db #0x10	; 16
      0003AD 10                   16179 	.db #0x10	; 16
      0003AE 1F                   16180 	.db #0x1f	; 31
      0003AF 10                   16181 	.db #0x10	; 16
      0003B0 1F                   16182 	.db #0x1f	; 31
      0003B1 14                   16183 	.db #0x14	; 20
      0003B2 14                   16184 	.db #0x14	; 20
      0003B3 14                   16185 	.db #0x14	; 20
      0003B4 1F                   16186 	.db #0x1f	; 31
      0003B5 00                   16187 	.db #0x00	; 0
      0003B6 10                   16188 	.db #0x10	; 16
      0003B7 10                   16189 	.db #0x10	; 16
      0003B8 10                   16190 	.db #0x10	; 16
      0003B9 F0                   16191 	.db #0xf0	; 240
      0003BA 00                   16192 	.db #0x00	; 0
      0003BB 00                   16193 	.db #0x00	; 0
      0003BC 00                   16194 	.db #0x00	; 0
      0003BD 00                   16195 	.db #0x00	; 0
      0003BE 1F                   16196 	.db #0x1f	; 31
      0003BF 10                   16197 	.db #0x10	; 16
      0003C0 10                   16198 	.db #0x10	; 16
      0003C1 10                   16199 	.db #0x10	; 16
      0003C2 10                   16200 	.db #0x10	; 16
      0003C3 1F                   16201 	.db #0x1f	; 31
      0003C4 10                   16202 	.db #0x10	; 16
      0003C5 10                   16203 	.db #0x10	; 16
      0003C6 10                   16204 	.db #0x10	; 16
      0003C7 10                   16205 	.db #0x10	; 16
      0003C8 F0                   16206 	.db #0xf0	; 240
      0003C9 10                   16207 	.db #0x10	; 16
      0003CA 00                   16208 	.db #0x00	; 0
      0003CB 00                   16209 	.db #0x00	; 0
      0003CC 00                   16210 	.db #0x00	; 0
      0003CD FF                   16211 	.db #0xff	; 255
      0003CE 10                   16212 	.db #0x10	; 16
      0003CF 10                   16213 	.db #0x10	; 16
      0003D0 10                   16214 	.db #0x10	; 16
      0003D1 10                   16215 	.db #0x10	; 16
      0003D2 10                   16216 	.db #0x10	; 16
      0003D3 10                   16217 	.db #0x10	; 16
      0003D4 10                   16218 	.db #0x10	; 16
      0003D5 10                   16219 	.db #0x10	; 16
      0003D6 10                   16220 	.db #0x10	; 16
      0003D7 FF                   16221 	.db #0xff	; 255
      0003D8 10                   16222 	.db #0x10	; 16
      0003D9 00                   16223 	.db #0x00	; 0
      0003DA 00                   16224 	.db #0x00	; 0
      0003DB 00                   16225 	.db #0x00	; 0
      0003DC FF                   16226 	.db #0xff	; 255
      0003DD 14                   16227 	.db #0x14	; 20
      0003DE 00                   16228 	.db #0x00	; 0
      0003DF 00                   16229 	.db #0x00	; 0
      0003E0 FF                   16230 	.db #0xff	; 255
      0003E1 00                   16231 	.db #0x00	; 0
      0003E2 FF                   16232 	.db #0xff	; 255
      0003E3 00                   16233 	.db #0x00	; 0
      0003E4 00                   16234 	.db #0x00	; 0
      0003E5 1F                   16235 	.db #0x1f	; 31
      0003E6 10                   16236 	.db #0x10	; 16
      0003E7 17                   16237 	.db #0x17	; 23
      0003E8 00                   16238 	.db #0x00	; 0
      0003E9 00                   16239 	.db #0x00	; 0
      0003EA FC                   16240 	.db #0xfc	; 252
      0003EB 04                   16241 	.db #0x04	; 4
      0003EC F4                   16242 	.db #0xf4	; 244
      0003ED 14                   16243 	.db #0x14	; 20
      0003EE 14                   16244 	.db #0x14	; 20
      0003EF 17                   16245 	.db #0x17	; 23
      0003F0 10                   16246 	.db #0x10	; 16
      0003F1 17                   16247 	.db #0x17	; 23
      0003F2 14                   16248 	.db #0x14	; 20
      0003F3 14                   16249 	.db #0x14	; 20
      0003F4 F4                   16250 	.db #0xf4	; 244
      0003F5 04                   16251 	.db #0x04	; 4
      0003F6 F4                   16252 	.db #0xf4	; 244
      0003F7 00                   16253 	.db #0x00	; 0
      0003F8 00                   16254 	.db #0x00	; 0
      0003F9 FF                   16255 	.db #0xff	; 255
      0003FA 00                   16256 	.db #0x00	; 0
      0003FB F7                   16257 	.db #0xf7	; 247
      0003FC 14                   16258 	.db #0x14	; 20
      0003FD 14                   16259 	.db #0x14	; 20
      0003FE 14                   16260 	.db #0x14	; 20
      0003FF 14                   16261 	.db #0x14	; 20
      000400 14                   16262 	.db #0x14	; 20
      000401 14                   16263 	.db #0x14	; 20
      000402 14                   16264 	.db #0x14	; 20
      000403 F7                   16265 	.db #0xf7	; 247
      000404 00                   16266 	.db #0x00	; 0
      000405 F7                   16267 	.db #0xf7	; 247
      000406 14                   16268 	.db #0x14	; 20
      000407 14                   16269 	.db #0x14	; 20
      000408 14                   16270 	.db #0x14	; 20
      000409 17                   16271 	.db #0x17	; 23
      00040A 14                   16272 	.db #0x14	; 20
      00040B 10                   16273 	.db #0x10	; 16
      00040C 10                   16274 	.db #0x10	; 16
      00040D 1F                   16275 	.db #0x1f	; 31
      00040E 10                   16276 	.db #0x10	; 16
      00040F 1F                   16277 	.db #0x1f	; 31
      000410 14                   16278 	.db #0x14	; 20
      000411 14                   16279 	.db #0x14	; 20
      000412 14                   16280 	.db #0x14	; 20
      000413 F4                   16281 	.db #0xf4	; 244
      000414 14                   16282 	.db #0x14	; 20
      000415 10                   16283 	.db #0x10	; 16
      000416 10                   16284 	.db #0x10	; 16
      000417 F0                   16285 	.db #0xf0	; 240
      000418 10                   16286 	.db #0x10	; 16
      000419 F0                   16287 	.db #0xf0	; 240
      00041A 00                   16288 	.db #0x00	; 0
      00041B 00                   16289 	.db #0x00	; 0
      00041C 1F                   16290 	.db #0x1f	; 31
      00041D 10                   16291 	.db #0x10	; 16
      00041E 1F                   16292 	.db #0x1f	; 31
      00041F 00                   16293 	.db #0x00	; 0
      000420 00                   16294 	.db #0x00	; 0
      000421 00                   16295 	.db #0x00	; 0
      000422 1F                   16296 	.db #0x1f	; 31
      000423 14                   16297 	.db #0x14	; 20
      000424 00                   16298 	.db #0x00	; 0
      000425 00                   16299 	.db #0x00	; 0
      000426 00                   16300 	.db #0x00	; 0
      000427 FC                   16301 	.db #0xfc	; 252
      000428 14                   16302 	.db #0x14	; 20
      000429 00                   16303 	.db #0x00	; 0
      00042A 00                   16304 	.db #0x00	; 0
      00042B F0                   16305 	.db #0xf0	; 240
      00042C 10                   16306 	.db #0x10	; 16
      00042D F0                   16307 	.db #0xf0	; 240
      00042E 10                   16308 	.db #0x10	; 16
      00042F 10                   16309 	.db #0x10	; 16
      000430 FF                   16310 	.db #0xff	; 255
      000431 10                   16311 	.db #0x10	; 16
      000432 FF                   16312 	.db #0xff	; 255
      000433 14                   16313 	.db #0x14	; 20
      000434 14                   16314 	.db #0x14	; 20
      000435 14                   16315 	.db #0x14	; 20
      000436 FF                   16316 	.db #0xff	; 255
      000437 14                   16317 	.db #0x14	; 20
      000438 10                   16318 	.db #0x10	; 16
      000439 10                   16319 	.db #0x10	; 16
      00043A 10                   16320 	.db #0x10	; 16
      00043B 1F                   16321 	.db #0x1f	; 31
      00043C 00                   16322 	.db #0x00	; 0
      00043D 00                   16323 	.db #0x00	; 0
      00043E 00                   16324 	.db #0x00	; 0
      00043F 00                   16325 	.db #0x00	; 0
      000440 F0                   16326 	.db #0xf0	; 240
      000441 10                   16327 	.db #0x10	; 16
      000442 FF                   16328 	.db #0xff	; 255
      000443 FF                   16329 	.db #0xff	; 255
      000444 FF                   16330 	.db #0xff	; 255
      000445 FF                   16331 	.db #0xff	; 255
      000446 FF                   16332 	.db #0xff	; 255
      000447 F0                   16333 	.db #0xf0	; 240
      000448 F0                   16334 	.db #0xf0	; 240
      000449 F0                   16335 	.db #0xf0	; 240
      00044A F0                   16336 	.db #0xf0	; 240
      00044B F0                   16337 	.db #0xf0	; 240
      00044C FF                   16338 	.db #0xff	; 255
      00044D FF                   16339 	.db #0xff	; 255
      00044E FF                   16340 	.db #0xff	; 255
      00044F 00                   16341 	.db #0x00	; 0
      000450 00                   16342 	.db #0x00	; 0
      000451 00                   16343 	.db #0x00	; 0
      000452 00                   16344 	.db #0x00	; 0
      000453 00                   16345 	.db #0x00	; 0
      000454 FF                   16346 	.db #0xff	; 255
      000455 FF                   16347 	.db #0xff	; 255
      000456 0F                   16348 	.db #0x0f	; 15
      000457 0F                   16349 	.db #0x0f	; 15
      000458 0F                   16350 	.db #0x0f	; 15
      000459 0F                   16351 	.db #0x0f	; 15
      00045A 0F                   16352 	.db #0x0f	; 15
      00045B 38                   16353 	.db #0x38	; 56	'8'
      00045C 44                   16354 	.db #0x44	; 68	'D'
      00045D 44                   16355 	.db #0x44	; 68	'D'
      00045E 38                   16356 	.db #0x38	; 56	'8'
      00045F 44                   16357 	.db #0x44	; 68	'D'
      000460 FC                   16358 	.db #0xfc	; 252
      000461 4A                   16359 	.db #0x4a	; 74	'J'
      000462 4A                   16360 	.db #0x4a	; 74	'J'
      000463 4A                   16361 	.db #0x4a	; 74	'J'
      000464 34                   16362 	.db #0x34	; 52	'4'
      000465 7E                   16363 	.db #0x7e	; 126
      000466 02                   16364 	.db #0x02	; 2
      000467 02                   16365 	.db #0x02	; 2
      000468 06                   16366 	.db #0x06	; 6
      000469 06                   16367 	.db #0x06	; 6
      00046A 02                   16368 	.db #0x02	; 2
      00046B 7E                   16369 	.db #0x7e	; 126
      00046C 02                   16370 	.db #0x02	; 2
      00046D 7E                   16371 	.db #0x7e	; 126
      00046E 02                   16372 	.db #0x02	; 2
      00046F 63                   16373 	.db #0x63	; 99	'c'
      000470 55                   16374 	.db #0x55	; 85	'U'
      000471 49                   16375 	.db #0x49	; 73	'I'
      000472 41                   16376 	.db #0x41	; 65	'A'
      000473 63                   16377 	.db #0x63	; 99	'c'
      000474 38                   16378 	.db #0x38	; 56	'8'
      000475 44                   16379 	.db #0x44	; 68	'D'
      000476 44                   16380 	.db #0x44	; 68	'D'
      000477 3C                   16381 	.db #0x3c	; 60
      000478 04                   16382 	.db #0x04	; 4
      000479 40                   16383 	.db #0x40	; 64
      00047A 7E                   16384 	.db #0x7e	; 126
      00047B 20                   16385 	.db #0x20	; 32
      00047C 1E                   16386 	.db #0x1e	; 30
      00047D 20                   16387 	.db #0x20	; 32
      00047E 06                   16388 	.db #0x06	; 6
      00047F 02                   16389 	.db #0x02	; 2
      000480 7E                   16390 	.db #0x7e	; 126
      000481 02                   16391 	.db #0x02	; 2
      000482 02                   16392 	.db #0x02	; 2
      000483 99                   16393 	.db #0x99	; 153
      000484 A5                   16394 	.db #0xa5	; 165
      000485 E7                   16395 	.db #0xe7	; 231
      000486 A5                   16396 	.db #0xa5	; 165
      000487 99                   16397 	.db #0x99	; 153
      000488 1C                   16398 	.db #0x1c	; 28
      000489 2A                   16399 	.db #0x2a	; 42
      00048A 49                   16400 	.db #0x49	; 73	'I'
      00048B 2A                   16401 	.db #0x2a	; 42
      00048C 1C                   16402 	.db #0x1c	; 28
      00048D 4C                   16403 	.db #0x4c	; 76	'L'
      00048E 72                   16404 	.db #0x72	; 114	'r'
      00048F 01                   16405 	.db #0x01	; 1
      000490 72                   16406 	.db #0x72	; 114	'r'
      000491 4C                   16407 	.db #0x4c	; 76	'L'
      000492 30                   16408 	.db #0x30	; 48	'0'
      000493 4A                   16409 	.db #0x4a	; 74	'J'
      000494 4D                   16410 	.db #0x4d	; 77	'M'
      000495 4D                   16411 	.db #0x4d	; 77	'M'
      000496 30                   16412 	.db #0x30	; 48	'0'
      000497 30                   16413 	.db #0x30	; 48	'0'
      000498 48                   16414 	.db #0x48	; 72	'H'
      000499 78                   16415 	.db #0x78	; 120	'x'
      00049A 48                   16416 	.db #0x48	; 72	'H'
      00049B 30                   16417 	.db #0x30	; 48	'0'
      00049C BC                   16418 	.db #0xbc	; 188
      00049D 62                   16419 	.db #0x62	; 98	'b'
      00049E 5A                   16420 	.db #0x5a	; 90	'Z'
      00049F 46                   16421 	.db #0x46	; 70	'F'
      0004A0 3D                   16422 	.db #0x3d	; 61
      0004A1 3E                   16423 	.db #0x3e	; 62
      0004A2 49                   16424 	.db #0x49	; 73	'I'
      0004A3 49                   16425 	.db #0x49	; 73	'I'
      0004A4 49                   16426 	.db #0x49	; 73	'I'
      0004A5 00                   16427 	.db #0x00	; 0
      0004A6 7E                   16428 	.db #0x7e	; 126
      0004A7 01                   16429 	.db #0x01	; 1
      0004A8 01                   16430 	.db #0x01	; 1
      0004A9 01                   16431 	.db #0x01	; 1
      0004AA 7E                   16432 	.db #0x7e	; 126
      0004AB 2A                   16433 	.db #0x2a	; 42
      0004AC 2A                   16434 	.db #0x2a	; 42
      0004AD 2A                   16435 	.db #0x2a	; 42
      0004AE 2A                   16436 	.db #0x2a	; 42
      0004AF 2A                   16437 	.db #0x2a	; 42
      0004B0 44                   16438 	.db #0x44	; 68	'D'
      0004B1 44                   16439 	.db #0x44	; 68	'D'
      0004B2 5F                   16440 	.db #0x5f	; 95
      0004B3 44                   16441 	.db #0x44	; 68	'D'
      0004B4 44                   16442 	.db #0x44	; 68	'D'
      0004B5 40                   16443 	.db #0x40	; 64
      0004B6 51                   16444 	.db #0x51	; 81	'Q'
      0004B7 4A                   16445 	.db #0x4a	; 74	'J'
      0004B8 44                   16446 	.db #0x44	; 68	'D'
      0004B9 40                   16447 	.db #0x40	; 64
      0004BA 40                   16448 	.db #0x40	; 64
      0004BB 44                   16449 	.db #0x44	; 68	'D'
      0004BC 4A                   16450 	.db #0x4a	; 74	'J'
      0004BD 51                   16451 	.db #0x51	; 81	'Q'
      0004BE 40                   16452 	.db #0x40	; 64
      0004BF 00                   16453 	.db #0x00	; 0
      0004C0 00                   16454 	.db #0x00	; 0
      0004C1 FF                   16455 	.db #0xff	; 255
      0004C2 01                   16456 	.db #0x01	; 1
      0004C3 03                   16457 	.db #0x03	; 3
      0004C4 E0                   16458 	.db #0xe0	; 224
      0004C5 80                   16459 	.db #0x80	; 128
      0004C6 FF                   16460 	.db #0xff	; 255
      0004C7 00                   16461 	.db #0x00	; 0
      0004C8 00                   16462 	.db #0x00	; 0
      0004C9 08                   16463 	.db #0x08	; 8
      0004CA 08                   16464 	.db #0x08	; 8
      0004CB 6B                   16465 	.db #0x6b	; 107	'k'
      0004CC 6B                   16466 	.db #0x6b	; 107	'k'
      0004CD 08                   16467 	.db #0x08	; 8
      0004CE 36                   16468 	.db #0x36	; 54	'6'
      0004CF 12                   16469 	.db #0x12	; 18
      0004D0 36                   16470 	.db #0x36	; 54	'6'
      0004D1 24                   16471 	.db #0x24	; 36
      0004D2 36                   16472 	.db #0x36	; 54	'6'
      0004D3 06                   16473 	.db #0x06	; 6
      0004D4 0F                   16474 	.db #0x0f	; 15
      0004D5 09                   16475 	.db #0x09	; 9
      0004D6 0F                   16476 	.db #0x0f	; 15
      0004D7 06                   16477 	.db #0x06	; 6
      0004D8 00                   16478 	.db #0x00	; 0
      0004D9 00                   16479 	.db #0x00	; 0
      0004DA 18                   16480 	.db #0x18	; 24
      0004DB 18                   16481 	.db #0x18	; 24
      0004DC 00                   16482 	.db #0x00	; 0
      0004DD 00                   16483 	.db #0x00	; 0
      0004DE 00                   16484 	.db #0x00	; 0
      0004DF 10                   16485 	.db #0x10	; 16
      0004E0 10                   16486 	.db #0x10	; 16
      0004E1 00                   16487 	.db #0x00	; 0
      0004E2 30                   16488 	.db #0x30	; 48	'0'
      0004E3 40                   16489 	.db #0x40	; 64
      0004E4 FF                   16490 	.db #0xff	; 255
      0004E5 01                   16491 	.db #0x01	; 1
      0004E6 01                   16492 	.db #0x01	; 1
      0004E7 00                   16493 	.db #0x00	; 0
      0004E8 1F                   16494 	.db #0x1f	; 31
      0004E9 01                   16495 	.db #0x01	; 1
      0004EA 01                   16496 	.db #0x01	; 1
      0004EB 1E                   16497 	.db #0x1e	; 30
      0004EC 00                   16498 	.db #0x00	; 0
      0004ED 19                   16499 	.db #0x19	; 25
      0004EE 1D                   16500 	.db #0x1d	; 29
      0004EF 17                   16501 	.db #0x17	; 23
      0004F0 12                   16502 	.db #0x12	; 18
      0004F1 00                   16503 	.db #0x00	; 0
      0004F2 3C                   16504 	.db #0x3c	; 60
      0004F3 3C                   16505 	.db #0x3c	; 60
      0004F4 3C                   16506 	.db #0x3c	; 60
      0004F5 3C                   16507 	.db #0x3c	; 60
      0004F6 00                   16508 	.db #0x00	; 0
      0004F7 00                   16509 	.db #0x00	; 0
      0004F8 00                   16510 	.db #0x00	; 0
      0004F9 00                   16511 	.db #0x00	; 0
      0004FA 00                   16512 	.db #0x00	; 0
      0004FB                      16513 _keypad:
      0004FB 31                   16514 	.db #0x31	; 49	'1'
      0004FC 34                   16515 	.db #0x34	; 52	'4'
      0004FD 37                   16516 	.db #0x37	; 55	'7'
      0004FE 46                   16517 	.db #0x46	; 70	'F'
      0004FF 32                   16518 	.db #0x32	; 50	'2'
      000500 35                   16519 	.db #0x35	; 53	'5'
      000501 38                   16520 	.db #0x38	; 56	'8'
      000502 30                   16521 	.db #0x30	; 48	'0'
      000503 33                   16522 	.db #0x33	; 51	'3'
      000504 36                   16523 	.db #0x36	; 54	'6'
      000505 39                   16524 	.db #0x39	; 57	'9'
      000506 45                   16525 	.db #0x45	; 69	'E'
      000507 41                   16526 	.db #0x41	; 65	'A'
      000508 42                   16527 	.db #0x42	; 66	'B'
      000509 43                   16528 	.db #0x43	; 67	'C'
      00050A 44                   16529 	.db #0x44	; 68	'D'
                                  16530 	.area CONST   (CODE)
      00050B                      16531 ___str_0:
      00050B 45 52 52 4F 52 20 46 16532 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      00051B 00                   16533 	.db 0x00
                                  16534 	.area CSEG    (CODE)
                                  16535 	.area CONST   (CODE)
      00051C                      16536 ___str_1:
      00051C 46 72 65 65 20 54 79 16537 	.ascii "Free Type: "
             70 65 3A 20
      000527 0A                   16538 	.db 0x0a
      000528 00                   16539 	.db 0x00
                                  16540 	.area CSEG    (CODE)
                                  16541 	.area CONST   (CODE)
      000529                      16542 ___str_2:
      000529 30 78                16543 	.ascii "0x"
      00052B 00                   16544 	.db 0x00
                                  16545 	.area CSEG    (CODE)
                                  16546 	.area CONST   (CODE)
      00052C                      16547 ___str_3:
      00052C 57 65 6C 63 6F 6D 65 16548 	.ascii "Welcome"
      000533 0A                   16549 	.db 0x0a
      000534 00                   16550 	.db 0x00
                                  16551 	.area CSEG    (CODE)
                                  16552 	.area CONST   (CODE)
      000535                      16553 ___str_4:
      000535 0A                   16554 	.db 0x0a
      000536 20 54 79 6C 65 72 20 16555 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      000543 0A                   16556 	.db 0x0a
      000544 20 20 45 43 45 4E 2D 16557 	.ascii "  ECEN-4350"
             34 33 35 30
      00054F 0A                   16558 	.db 0x0a
      000550 20 20 46 61 6C 6C 20 16559 	.ascii "  Fall 2021"
             32 30 32 31
      00055B 00                   16560 	.db 0x00
                                  16561 	.area CSEG    (CODE)
                                  16562 	.area CONST   (CODE)
      00055C                      16563 ___str_5:
      00055C 3C 4D 65 6E 75 3E    16564 	.ascii "<Menu>"
      000562 0A                   16565 	.db 0x0a
      000563 00                   16566 	.db 0x00
                                  16567 	.area CSEG    (CODE)
                                  16568 	.area CONST   (CODE)
      000564                      16569 ___str_6:
      000564 20 3C 44 3E          16570 	.ascii " <D>"
      000568 00                   16571 	.db 0x00
                                  16572 	.area CSEG    (CODE)
                                  16573 	.area CONST   (CODE)
      000569                      16574 ___str_7:
      000569 20 44 55 4D 50       16575 	.ascii " DUMP"
      00056E 0A                   16576 	.db 0x0a
      00056F 00                   16577 	.db 0x00
                                  16578 	.area CSEG    (CODE)
                                  16579 	.area CONST   (CODE)
      000570                      16580 ___str_8:
      000570 20 3C 42 3E          16581 	.ascii " <B>"
      000574 00                   16582 	.db 0x00
                                  16583 	.area CSEG    (CODE)
                                  16584 	.area CONST   (CODE)
      000575                      16585 ___str_9:
      000575 20 4D 4F 56 45       16586 	.ascii " MOVE"
      00057A 0A                   16587 	.db 0x0a
      00057B 00                   16588 	.db 0x00
                                  16589 	.area CSEG    (CODE)
                                  16590 	.area CONST   (CODE)
      00057C                      16591 ___str_10:
      00057C 20 3C 45 3E          16592 	.ascii " <E>"
      000580 00                   16593 	.db 0x00
                                  16594 	.area CSEG    (CODE)
                                  16595 	.area CONST   (CODE)
      000581                      16596 ___str_11:
      000581 20 45 44 49 54       16597 	.ascii " EDIT"
      000586 0A                   16598 	.db 0x0a
      000587 00                   16599 	.db 0x00
                                  16600 	.area CSEG    (CODE)
                                  16601 	.area CONST   (CODE)
      000588                      16602 ___str_12:
      000588 20 3C 46 3E          16603 	.ascii " <F>"
      00058C 00                   16604 	.db 0x00
                                  16605 	.area CSEG    (CODE)
                                  16606 	.area CONST   (CODE)
      00058D                      16607 ___str_13:
      00058D 20 46 49 4E 44       16608 	.ascii " FIND"
      000592 0A                   16609 	.db 0x0a
      000593 00                   16610 	.db 0x00
                                  16611 	.area CSEG    (CODE)
                                  16612 	.area CONST   (CODE)
      000594                      16613 ___str_14:
      000594 20 3C 43 3E          16614 	.ascii " <C>"
      000598 00                   16615 	.db 0x00
                                  16616 	.area CSEG    (CODE)
                                  16617 	.area CONST   (CODE)
      000599                      16618 ___str_15:
      000599 20 43 4F 55 4E 54    16619 	.ascii " COUNT"
      00059F 0A                   16620 	.db 0x0a
      0005A0 00                   16621 	.db 0x00
                                  16622 	.area CSEG    (CODE)
                                  16623 	.area CONST   (CODE)
      0005A1                      16624 ___str_16:
      0005A1 20 3C 41 3E          16625 	.ascii " <A>"
      0005A5 00                   16626 	.db 0x00
                                  16627 	.area CSEG    (CODE)
                                  16628 	.area CONST   (CODE)
      0005A6                      16629 ___str_17:
      0005A6 20 4D 45 4D 20 43 48 16630 	.ascii " MEM CHECK"
             45 43 4B
      0005B0 0A                   16631 	.db 0x0a
      0005B1 00                   16632 	.db 0x00
                                  16633 	.area CSEG    (CODE)
                                  16634 	.area CONST   (CODE)
      0005B2                      16635 ___str_18:
      0005B2 20 3C 31 3E          16636 	.ascii " <1>"
      0005B6 00                   16637 	.db 0x00
                                  16638 	.area CSEG    (CODE)
                                  16639 	.area CONST   (CODE)
      0005B7                      16640 ___str_19:
      0005B7 20 55 41 52 54       16641 	.ascii " UART"
      0005BC 00                   16642 	.db 0x00
                                  16643 	.area CSEG    (CODE)
                                  16644 	.area CONST   (CODE)
      0005BD                      16645 ___str_20:
      0005BD 20 5B 44 69 73 61 62 16646 	.ascii " [Disabled]"
             6C 65 64 5D
      0005C8 0A                   16647 	.db 0x0a
      0005C9 00                   16648 	.db 0x00
                                  16649 	.area CSEG    (CODE)
                                  16650 	.area CONST   (CODE)
      0005CA                      16651 ___str_21:
      0005CA 20 5B 45 6E 61 62 6C 16652 	.ascii " [Enabled]"
             65 64 5D
      0005D4 0A                   16653 	.db 0x0a
      0005D5 00                   16654 	.db 0x00
                                  16655 	.area CSEG    (CODE)
                                  16656 	.area CONST   (CODE)
      0005D6                      16657 ___str_22:
      0005D6 5B 44 55 4D 50 5D    16658 	.ascii "[DUMP]"
      0005DC 0A                   16659 	.db 0x0a
      0005DD 00                   16660 	.db 0x00
                                  16661 	.area CSEG    (CODE)
                                  16662 	.area CONST   (CODE)
      0005DE                      16663 ___str_23:
      0005DE 20 41 64 64 72 65 73 16664 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      0005F0 0A                   16665 	.db 0x0a
      0005F1 00                   16666 	.db 0x00
                                  16667 	.area CSEG    (CODE)
                                  16668 	.area CONST   (CODE)
      0005F2                      16669 ___str_24:
      0005F2 20 30 78 5F 5F 5F 5F 16670 	.ascii " 0x____"
      0005F9 00                   16671 	.db 0x00
                                  16672 	.area CSEG    (CODE)
                                  16673 	.area CONST   (CODE)
      0005FA                      16674 ___str_25:
      0005FA 20 43 68 6F 6F 73 65 16675 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      00060D 0A                   16676 	.db 0x0a
      00060E 00                   16677 	.db 0x00
                                  16678 	.area CSEG    (CODE)
                                  16679 	.area CONST   (CODE)
      00060F                      16680 ___str_26:
      00060F 20 20 3C 31 3E 20 42 16681 	.ascii "  <1> BYTE"
             59 54 45
      000619 0A                   16682 	.db 0x0a
      00061A 20 20 3C 32 3E 20 57 16683 	.ascii "  <2> WORD"
             4F 52 44
      000624 0A                   16684 	.db 0x0a
      000625 20 20 3C 34 3E 20 44 16685 	.ascii "  <4> DWORD"
             57 4F 52 44
      000630 00                   16686 	.db 0x00
                                  16687 	.area CSEG    (CODE)
                                  16688 	.area CONST   (CODE)
      000631                      16689 ___str_27:
      000631 20 49 6E 70 75 74 20 16690 	.ascii " Input Size:"
             53 69 7A 65 3A
      00063D 00                   16691 	.db 0x00
                                  16692 	.area CSEG    (CODE)
                                  16693 	.area CONST   (CODE)
      00063E                      16694 ___str_28:
      00063E 20 5F                16695 	.ascii " _"
      000640 00                   16696 	.db 0x00
                                  16697 	.area CSEG    (CODE)
                                  16698 	.area CONST   (CODE)
      000641                      16699 ___str_29:
      000641 20 41 64 64 72 65 73 16700 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      000653 00                   16701 	.db 0x00
                                  16702 	.area CSEG    (CODE)
                                  16703 	.area CONST   (CODE)
      000654                      16704 ___str_30:
      000654 20                   16705 	.ascii " "
      000655 00                   16706 	.db 0x00
                                  16707 	.area CSEG    (CODE)
                                  16708 	.area CONST   (CODE)
      000656                      16709 ___str_31:
      000656 20 43 68 6F 6F 73 65 16710 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      000669 00                   16711 	.db 0x00
                                  16712 	.area CSEG    (CODE)
                                  16713 	.area CONST   (CODE)
      00066A                      16714 ___str_32:
      00066A 0A                   16715 	.db 0x0a
      00066B 0A                   16716 	.db 0x0a
      00066C 00                   16717 	.db 0x00
                                  16718 	.area CSEG    (CODE)
                                  16719 	.area CONST   (CODE)
      00066D                      16720 ___str_33:
      00066D 20 20                16721 	.ascii "  "
      00066F 00                   16722 	.db 0x00
                                  16723 	.area CSEG    (CODE)
                                  16724 	.area CONST   (CODE)
      000670                      16725 ___str_34:
      000670 3C 31 3E 20 42 59 54 16726 	.ascii "<1> BYTE"
             45
      000678 0A                   16727 	.db 0x0a
      000679 00                   16728 	.db 0x00
                                  16729 	.area CSEG    (CODE)
                                  16730 	.area CONST   (CODE)
      00067A                      16731 ___str_35:
      00067A 0A                   16732 	.db 0x0a
      00067B 0A                   16733 	.db 0x0a
      00067C 20 20 20 20 20 20 20 16734 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00068C 0A                   16735 	.db 0x0a
      00068D 20 20 20 20 20 20 20 16736 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00069D 00                   16737 	.db 0x00
                                  16738 	.area CSEG    (CODE)
                                  16739 	.area CONST   (CODE)
      00069E                      16740 ___str_36:
      00069E 0A                   16741 	.db 0x0a
      00069F 20 20                16742 	.ascii "  "
      0006A1 00                   16743 	.db 0x00
                                  16744 	.area CSEG    (CODE)
                                  16745 	.area CONST   (CODE)
      0006A2                      16746 ___str_37:
      0006A2 3C 32 3E 20 57 4F 52 16747 	.ascii "<2> WORD"
             44
      0006AA 0A                   16748 	.db 0x0a
      0006AB 00                   16749 	.db 0x00
                                  16750 	.area CSEG    (CODE)
                                  16751 	.area CONST   (CODE)
      0006AC                      16752 ___str_38:
      0006AC 0A                   16753 	.db 0x0a
      0006AD 20 20 20 20 20 20 20 16754 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006BD 0A                   16755 	.db 0x0a
      0006BE 20 20 20 20 20 20 20 16756 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006CE 00                   16757 	.db 0x00
                                  16758 	.area CSEG    (CODE)
                                  16759 	.area CONST   (CODE)
      0006CF                      16760 ___str_39:
      0006CF 0A                   16761 	.db 0x0a
      0006D0 0A                   16762 	.db 0x0a
      0006D1 20 20                16763 	.ascii "  "
      0006D3 00                   16764 	.db 0x00
                                  16765 	.area CSEG    (CODE)
                                  16766 	.area CONST   (CODE)
      0006D4                      16767 ___str_40:
      0006D4 3C 34 3E 20 44 57 4F 16768 	.ascii "<4> DWORD"
             52 44
      0006DD 00                   16769 	.db 0x00
                                  16770 	.area CSEG    (CODE)
                                  16771 	.area CONST   (CODE)
      0006DE                      16772 ___str_41:
      0006DE 0A                   16773 	.db 0x0a
      0006DF 20 20 49 6E 70 75 74 16774 	.ascii "  Input Error"
             20 45 72 72 6F 72
      0006EC 0A                   16775 	.db 0x0a
      0006ED 20 20 54 72 79 20 41 16776 	.ascii "  Try Again"
             67 61 69 6E
      0006F8 00                   16777 	.db 0x00
                                  16778 	.area CSEG    (CODE)
                                  16779 	.area CONST   (CODE)
      0006F9                      16780 ___str_42:
      0006F9 20 49 6E 70 75 74 20 16781 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      000706 00                   16782 	.db 0x00
                                  16783 	.area CSEG    (CODE)
                                  16784 	.area CONST   (CODE)
      000707                      16785 ___str_43:
      000707 20 4D 69 73 6D 61 74 16786 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      000716 0A                   16787 	.db 0x0a
      000717 20 54 72 79 20 41 67 16788 	.ascii " Try Again"
             61 69 6E
      000721 00                   16789 	.db 0x00
                                  16790 	.area CSEG    (CODE)
                                  16791 	.area CONST   (CODE)
      000722                      16792 ___str_44:
      000722 20 4D 61 74 63 68 20 16793 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      000732 0A                   16794 	.db 0x0a
      000733 20 20 20 20 20 20 20 16795 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      000743 00                   16796 	.db 0x00
                                  16797 	.area CSEG    (CODE)
                                  16798 	.area CONST   (CODE)
      000744                      16799 ___str_45:
      000744 20 41 64 64 72 65 73 16800 	.ascii " Address:"
             73 3A
      00074D 00                   16801 	.db 0x00
                                  16802 	.area CSEG    (CODE)
                                  16803 	.area CONST   (CODE)
      00074E                      16804 ___str_46:
      00074E 20 30 78             16805 	.ascii " 0x"
      000751 00                   16806 	.db 0x00
                                  16807 	.area CSEG    (CODE)
                                  16808 	.area CONST   (CODE)
      000752                      16809 ___str_47:
      000752 20 48 65 78 20 44 61 16810 	.ascii " Hex Data:"
             74 61 3A
      00075C 00                   16811 	.db 0x00
                                  16812 	.area CSEG    (CODE)
                                  16813 	.area CONST   (CODE)
      00075D                      16814 ___str_48:
      00075D 20 41 53 43 49 49 20 16815 	.ascii " ASCII Data:"
             44 61 74 61 3A
      000769 00                   16816 	.db 0x00
                                  16817 	.area CSEG    (CODE)
                                  16818 	.area CONST   (CODE)
      00076A                      16819 ___str_49:
      00076A 20 44 61 74 61 20 54 16820 	.ascii " Data Type:"
             79 70 65 3A
      000775 00                   16821 	.db 0x00
                                  16822 	.area CSEG    (CODE)
                                  16823 	.area CONST   (CODE)
      000776                      16824 ___str_50:
      000776 20 42 59 54 45       16825 	.ascii " BYTE"
      00077B 00                   16826 	.db 0x00
                                  16827 	.area CSEG    (CODE)
                                  16828 	.area CONST   (CODE)
      00077C                      16829 ___str_51:
      00077C 20 57 4F 52 44       16830 	.ascii " WORD"
      000781 00                   16831 	.db 0x00
                                  16832 	.area CSEG    (CODE)
                                  16833 	.area CONST   (CODE)
      000782                      16834 ___str_52:
      000782 20 44 57 4F 52 44    16835 	.ascii " DWORD"
      000788 00                   16836 	.db 0x00
                                  16837 	.area CSEG    (CODE)
                                  16838 	.area CONST   (CODE)
      000789                      16839 ___str_53:
      000789 20 3C 30 3E 20 45 78 16840 	.ascii " <0> Exit"
             69 74
      000792 0A                   16841 	.db 0x0a
      000793 00                   16842 	.db 0x00
                                  16843 	.area CSEG    (CODE)
                                  16844 	.area CONST   (CODE)
      000794                      16845 ___str_54:
      000794 3C 30 3E 20 45 78 69 16846 	.ascii "<0> Exit"
             74
      00079C 0A                   16847 	.db 0x0a
      00079D 00                   16848 	.db 0x00
                                  16849 	.area CSEG    (CODE)
                                  16850 	.area CONST   (CODE)
      00079E                      16851 ___str_55:
      00079E 5B 4D 4F 56 45 5D    16852 	.ascii "[MOVE]"
      0007A4 0A                   16853 	.db 0x0a
      0007A5 00                   16854 	.db 0x00
                                  16855 	.area CSEG    (CODE)
                                  16856 	.area CONST   (CODE)
      0007A6                      16857 ___str_56:
      0007A6 20 53 6F 75 72 63 65 16858 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      0007B6 00                   16859 	.db 0x00
                                  16860 	.area CSEG    (CODE)
                                  16861 	.area CONST   (CODE)
      0007B7                      16862 ___str_57:
      0007B7 20 44 65 73 74 69 6E 16863 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      0007C4 00                   16864 	.db 0x00
                                  16865 	.area CSEG    (CODE)
                                  16866 	.area CONST   (CODE)
      0007C5                      16867 ___str_58:
      0007C5 20 4D 6F 76 65 20 43 16868 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      0007D3 0A                   16869 	.db 0x0a
      0007D4 00                   16870 	.db 0x00
                                  16871 	.area CSEG    (CODE)
                                  16872 	.area CONST   (CODE)
      0007D5                      16873 ___str_59:
      0007D5 5B 45 44 49 54 5D    16874 	.ascii "[EDIT]"
      0007DB 0A                   16875 	.db 0x0a
      0007DC 00                   16876 	.db 0x00
                                  16877 	.area CSEG    (CODE)
                                  16878 	.area CONST   (CODE)
      0007DD                      16879 ___str_60:
      0007DD 20 45 64 69 74 20 41 16880 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      0007EB 00                   16881 	.db 0x00
                                  16882 	.area CSEG    (CODE)
                                  16883 	.area CONST   (CODE)
      0007EC                      16884 ___str_61:
      0007EC 20 4C 6F 63 61 74 69 16885 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      0007FF 0A                   16886 	.db 0x0a
      000800 00                   16887 	.db 0x00
                                  16888 	.area CSEG    (CODE)
                                  16889 	.area CONST   (CODE)
      000801                      16890 ___str_62:
      000801 20 5F 5F             16891 	.ascii " __"
      000804 00                   16892 	.db 0x00
                                  16893 	.area CSEG    (CODE)
                                  16894 	.area CONST   (CODE)
      000805                      16895 ___str_63:
      000805 20 45 6E 74 65 72 20 16896 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000816 0A                   16897 	.db 0x0a
      000817 00                   16898 	.db 0x00
                                  16899 	.area CSEG    (CODE)
                                  16900 	.area CONST   (CODE)
      000818                      16901 ___str_64:
      000818 20 43 68 6F 6F 73 65 16902 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      00082C 0A                   16903 	.db 0x0a
      00082D 00                   16904 	.db 0x00
                                  16905 	.area CSEG    (CODE)
                                  16906 	.area CONST   (CODE)
      00082E                      16907 ___str_65:
      00082E 20 20 3C 31 3E 20 4E 16908 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      000840 0A                   16909 	.db 0x0a
      000841 20 20 3C 32 3E 20 4E 16910 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      000852 0A                   16911 	.db 0x0a
      000853 00                   16912 	.db 0x00
                                  16913 	.area CSEG    (CODE)
                                  16914 	.area CONST   (CODE)
      000854                      16915 ___str_66:
      000854 20 20 3C 30 3E 20 45 16916 	.ascii "  <0> Exit"
             78 69 74
      00085E 00                   16917 	.db 0x00
                                  16918 	.area CSEG    (CODE)
                                  16919 	.area CONST   (CODE)
      00085F                      16920 ___str_67:
      00085F 0A                   16921 	.db 0x0a
      000860 20                   16922 	.ascii " "
      000861 00                   16923 	.db 0x00
                                  16924 	.area CSEG    (CODE)
                                  16925 	.area CONST   (CODE)
      000862                      16926 ___str_68:
      000862 20 45 6E 74 65 72 20 16927 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000873 0A                   16928 	.db 0x0a
      000874 20                   16929 	.ascii " "
      000875 00                   16930 	.db 0x00
                                  16931 	.area CSEG    (CODE)
                                  16932 	.area CONST   (CODE)
      000876                      16933 ___str_69:
      000876 3C 31 3E 20 4E 65 78 16934 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      000886 0A                   16935 	.db 0x0a
      000887 00                   16936 	.db 0x00
                                  16937 	.area CSEG    (CODE)
                                  16938 	.area CONST   (CODE)
      000888                      16939 ___str_70:
      000888 0A                   16940 	.db 0x0a
      000889 0A                   16941 	.db 0x0a
      00088A 20 20 20 20 20 20 20 16942 	.ascii "               "
             20 20 20 20 20 20 20
             20
      000899 00                   16943 	.db 0x00
                                  16944 	.area CSEG    (CODE)
                                  16945 	.area CONST   (CODE)
      00089A                      16946 ___str_71:
      00089A 0A                   16947 	.db 0x0a
      00089B 20 5F 5F             16948 	.ascii " __"
      00089E 00                   16949 	.db 0x00
                                  16950 	.area CSEG    (CODE)
                                  16951 	.area CONST   (CODE)
      00089F                      16952 ___str_72:
      00089F 0A                   16953 	.db 0x0a
      0008A0 20 20 3C 31 3E 20 4E 16954 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0008B2 0A                   16955 	.db 0x0a
      0008B3 20 20 3C 32 3E 20 4E 16956 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0008C4 0A                   16957 	.db 0x0a
      0008C5 20 20 3C 30 3E 20 45 16958 	.ascii "  <0> Exit"
             78 69 74
      0008CF 00                   16959 	.db 0x00
                                  16960 	.area CSEG    (CODE)
                                  16961 	.area CONST   (CODE)
      0008D0                      16962 ___str_73:
      0008D0 20 43 68 6F 6F 73 65 16963 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      0008E4 0A                   16964 	.db 0x0a
      0008E5 20 20                16965 	.ascii "  "
      0008E7 00                   16966 	.db 0x00
                                  16967 	.area CSEG    (CODE)
                                  16968 	.area CONST   (CODE)
      0008E8                      16969 ___str_74:
      0008E8 3C 32 3E 20 4E 65 77 16970 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      0008F7 0A                   16971 	.db 0x0a
      0008F8 00                   16972 	.db 0x00
                                  16973 	.area CSEG    (CODE)
                                  16974 	.area CONST   (CODE)
      0008F9                      16975 ___str_75:
      0008F9 0A                   16976 	.db 0x0a
      0008FA 20 20 20 20 20 20 20 16977 	.ascii "               "
             20 20 20 20 20 20 20
             20
      000909 00                   16978 	.db 0x00
                                  16979 	.area CSEG    (CODE)
                                  16980 	.area CONST   (CODE)
      00090A                      16981 ___str_76:
      00090A 20 45 64 69 74 20 41 16982 	.ascii " Edit Address"
             64 64 72 65 73 73
      000917 00                   16983 	.db 0x00
                                  16984 	.area CSEG    (CODE)
                                  16985 	.area CONST   (CODE)
      000918                      16986 ___str_77:
      000918 0A                   16987 	.db 0x0a
      000919 00                   16988 	.db 0x00
                                  16989 	.area CSEG    (CODE)
                                  16990 	.area CONST   (CODE)
      00091A                      16991 ___str_78:
      00091A 3C 30 3E 20 45 78 69 16992 	.ascii "<0> Exit"
             74
      000922 00                   16993 	.db 0x00
                                  16994 	.area CSEG    (CODE)
                                  16995 	.area CONST   (CODE)
      000923                      16996 ___str_79:
      000923 0A                   16997 	.db 0x0a
      000924 0A                   16998 	.db 0x0a
      000925 0A                   16999 	.db 0x0a
      000926 0A                   17000 	.db 0x0a
      000927 20 49 6E 70 75 74 20 17001 	.ascii " Input Error "
             45 72 72 6F 72 20
      000934 00                   17002 	.db 0x00
                                  17003 	.area CSEG    (CODE)
                                  17004 	.area CONST   (CODE)
      000935                      17005 ___str_80:
      000935 5B 46 49 4E 44 5D    17006 	.ascii "[FIND]"
      00093B 0A                   17007 	.db 0x0a
      00093C 00                   17008 	.db 0x00
                                  17009 	.area CSEG    (CODE)
                                  17010 	.area CONST   (CODE)
      00093D                      17011 ___str_81:
      00093D 20 46 69 6E 64 20 56 17012 	.ascii " Find Value:"
             61 6C 75 65 3A
      000949 00                   17013 	.db 0x00
                                  17014 	.area CSEG    (CODE)
                                  17015 	.area CONST   (CODE)
      00094A                      17016 ___str_82:
      00094A 20 53 65 61 72 63 68 17017 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      00095A 00                   17018 	.db 0x00
                                  17019 	.area CSEG    (CODE)
                                  17020 	.area CONST   (CODE)
      00095B                      17021 ___str_83:
      00095B 20 49 6E 70 75 74 20 17022 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      00096D 0A                   17023 	.db 0x0a
      00096E 00                   17024 	.db 0x00
                                  17025 	.area CSEG    (CODE)
                                  17026 	.area CONST   (CODE)
      00096F                      17027 ___str_84:
      00096F 20 20 3C 30 31 3E 20 17028 	.ascii "  <01> BYTE"
             42 59 54 45
      00097A 0A                   17029 	.db 0x0a
      00097B 20 20 3C 30 32 3E 20 17030 	.ascii "  <02> WORD"
             57 4F 52 44
      000986 0A                   17031 	.db 0x0a
      000987 20 20 3C 30 34 3E 20 17032 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      000993 0A                   17033 	.db 0x0a
      000994 00                   17034 	.db 0x00
                                  17035 	.area CSEG    (CODE)
                                  17036 	.area CONST   (CODE)
      000995                      17037 ___str_85:
      000995 20 20 3C 46 46 3E 20 17038 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      0009A2 00                   17039 	.db 0x00
                                  17040 	.area CSEG    (CODE)
                                  17041 	.area CONST   (CODE)
      0009A3                      17042 ___str_86:
      0009A3 20 20 20 5F 5F       17043 	.ascii "   __"
      0009A8 00                   17044 	.db 0x00
                                  17045 	.area CSEG    (CODE)
                                  17046 	.area CONST   (CODE)
      0009A9                      17047 ___str_87:
      0009A9 20 20 20             17048 	.ascii "   "
      0009AC 00                   17049 	.db 0x00
                                  17050 	.area CSEG    (CODE)
                                  17051 	.area CONST   (CODE)
      0009AD                      17052 ___str_88:
      0009AD 0A                   17053 	.db 0x0a
      0009AE 20 20 20 20 20 20 20 17054 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0009BE 00                   17055 	.db 0x00
                                  17056 	.area CSEG    (CODE)
                                  17057 	.area CONST   (CODE)
      0009BF                      17058 ___str_89:
      0009BF 0A                   17059 	.db 0x0a
      0009C0 20 54 72 79 20 61 67 17060 	.ascii " Try again"
             61 69 6E
      0009CA 00                   17061 	.db 0x00
                                  17062 	.area CSEG    (CODE)
                                  17063 	.area CONST   (CODE)
      0009CB                      17064 ___str_90:
      0009CB 3C 30 31 3E 20 42 59 17065 	.ascii "<01> BYTE"
             54 45
      0009D4 0A                   17066 	.db 0x0a
      0009D5 00                   17067 	.db 0x00
                                  17068 	.area CSEG    (CODE)
                                  17069 	.area CONST   (CODE)
      0009D6                      17070 ___str_91:
      0009D6 20 20 3C 30 32 3E 20 17071 	.ascii "  <02> WORD"
             57 4F 52 44
      0009E1 0A                   17072 	.db 0x0a
      0009E2 00                   17073 	.db 0x00
                                  17074 	.area CSEG    (CODE)
                                  17075 	.area CONST   (CODE)
      0009E3                      17076 ___str_92:
      0009E3 20 20 3C 30 34 3E 20 17077 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      0009EF 0A                   17078 	.db 0x0a
      0009F0 00                   17079 	.db 0x00
                                  17080 	.area CSEG    (CODE)
                                  17081 	.area CONST   (CODE)
      0009F1                      17082 ___str_93:
      0009F1 0A                   17083 	.db 0x0a
      0009F2 20 53 65 61 72 63 68 17084 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      000A05 00                   17085 	.db 0x00
                                  17086 	.area CSEG    (CODE)
                                  17087 	.area CONST   (CODE)
      000A06                      17088 ___str_94:
      000A06 0A                   17089 	.db 0x0a
      000A07 20 42 59 54 45 20 5B 17090 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      000A15 00                   17091 	.db 0x00
                                  17092 	.area CSEG    (CODE)
                                  17093 	.area CONST   (CODE)
      000A16                      17094 ___str_95:
      000A16 20 20 3C 30 31 3E 20 17095 	.ascii "  <01> BYTE"
             42 59 54 45
      000A21 0A                   17096 	.db 0x0a
      000A22 20 20                17097 	.ascii "  "
      000A24 00                   17098 	.db 0x00
                                  17099 	.area CSEG    (CODE)
                                  17100 	.area CONST   (CODE)
      000A25                      17101 ___str_96:
      000A25 3C 30 32 3E 20 57 4F 17102 	.ascii "<02> WORD"
             52 44
      000A2E 0A                   17103 	.db 0x0a
      000A2F 00                   17104 	.db 0x00
                                  17105 	.area CSEG    (CODE)
                                  17106 	.area CONST   (CODE)
      000A30                      17107 ___str_97:
      000A30 0A                   17108 	.db 0x0a
      000A31 20 57 4F 52 44 20 5B 17109 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      000A40 00                   17110 	.db 0x00
                                  17111 	.area CSEG    (CODE)
                                  17112 	.area CONST   (CODE)
      000A41                      17113 ___str_98:
      000A41 20 20 3C 30 31 3E 20 17114 	.ascii "  <01> BYTE"
             42 59 54 45
      000A4C 0A                   17115 	.db 0x0a
      000A4D 20 20 3C 30 32 3E 20 17116 	.ascii "  <02> WORD"
             57 4F 52 44
      000A58 0A                   17117 	.db 0x0a
      000A59 20 20                17118 	.ascii "  "
      000A5B 00                   17119 	.db 0x00
                                  17120 	.area CSEG    (CODE)
                                  17121 	.area CONST   (CODE)
      000A5C                      17122 ___str_99:
      000A5C 3C 30 34 3E 20 44 57 17123 	.ascii "<04> DWORD"
             4F 52 44
      000A66 0A                   17124 	.db 0x0a
      000A67 00                   17125 	.db 0x00
                                  17126 	.area CSEG    (CODE)
                                  17127 	.area CONST   (CODE)
      000A68                      17128 ___str_100:
      000A68 0A                   17129 	.db 0x0a
      000A69 20 44 57 4F 52 44 20 17130 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      000A79 00                   17131 	.db 0x00
                                  17132 	.area CSEG    (CODE)
                                  17133 	.area CONST   (CODE)
      000A7A                      17134 ___str_101:
      000A7A 3C 30 34 3E 20 44 57 17135 	.ascii "<04> DWORD"
             4F 52 44
      000A84 0A                   17136 	.db 0x0a
      000A85 20 20                17137 	.ascii "  "
      000A87 00                   17138 	.db 0x00
                                  17139 	.area CSEG    (CODE)
                                  17140 	.area CONST   (CODE)
      000A88                      17141 ___str_102:
      000A88 3C 46 46 3E 20 28 53 17142 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      000A93 00                   17143 	.db 0x00
                                  17144 	.area CSEG    (CODE)
                                  17145 	.area CONST   (CODE)
      000A94                      17146 ___str_103:
      000A94 0A                   17147 	.db 0x0a
      000A95 20 5B 32 35 36 20 42 17148 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      000AA2 00                   17149 	.db 0x00
                                  17150 	.area CSEG    (CODE)
                                  17151 	.area CONST   (CODE)
      000AA3                      17152 ___str_104:
      000AA3 20 5B 4E 6F 6E 2D 49 17153 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      000AB5 0A                   17154 	.db 0x0a
      000AB6 00                   17155 	.db 0x00
                                  17156 	.area CSEG    (CODE)
                                  17157 	.area CONST   (CODE)
      000AB7                      17158 ___str_105:
      000AB7 20 53 65 61 72 63 68 17159 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000AC5 0A                   17160 	.db 0x0a
      000AC6 20                   17161 	.ascii " "
      000AC7 00                   17162 	.db 0x00
                                  17163 	.area CSEG    (CODE)
                                  17164 	.area CONST   (CODE)
      000AC8                      17165 ___str_106:
      000AC8 20 46 6F 75 6E 64 20 17166 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      000ADB 0A                   17167 	.db 0x0a
      000ADC 00                   17168 	.db 0x00
                                  17169 	.area CSEG    (CODE)
                                  17170 	.area CONST   (CODE)
      000ADD                      17171 ___str_107:
      000ADD 0A                   17172 	.db 0x0a
      000ADE 20 30 78             17173 	.ascii " 0x"
      000AE1 00                   17174 	.db 0x00
                                  17175 	.area CSEG    (CODE)
                                  17176 	.area CONST   (CODE)
      000AE2                      17177 ___str_108:
      000AE2 20 5B 49 6E 74 65 72 17178 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      000AF0 0A                   17179 	.db 0x0a
      000AF1 00                   17180 	.db 0x00
                                  17181 	.area CSEG    (CODE)
                                  17182 	.area CONST   (CODE)
      000AF2                      17183 ___str_109:
      000AF2 20 46 6F 75 6E 64 20 17184 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      000B05 0A                   17185 	.db 0x0a
      000B06 00                   17186 	.db 0x00
                                  17187 	.area CSEG    (CODE)
                                  17188 	.area CONST   (CODE)
      000B07                      17189 ___str_110:
      000B07 50 61 67 65 3A 20    17190 	.ascii "Page: "
      000B0D 00                   17191 	.db 0x00
                                  17192 	.area CSEG    (CODE)
                                  17193 	.area CONST   (CODE)
      000B0E                      17194 ___str_111:
      000B0E 20 3C 31 3E 20 4E 65 17195 	.ascii " <1> Next"
             78 74
      000B17 0A                   17196 	.db 0x0a
      000B18 20 3C 30 3E 20 45 78 17197 	.ascii " <0> Exit"
             69 74
      000B21 0A                   17198 	.db 0x0a
      000B22 20 20 20 20 20 20 20 17199 	.ascii "              "
             20 20 20 20 20 20 20
      000B30 00                   17200 	.db 0x00
                                  17201 	.area CSEG    (CODE)
                                  17202 	.area CONST   (CODE)
      000B31                      17203 ___str_112:
      000B31 3C 31 3E 20 4E 65 78 17204 	.ascii "<1> Next"
             74
      000B39 00                   17205 	.db 0x00
                                  17206 	.area CSEG    (CODE)
                                  17207 	.area CONST   (CODE)
      000B3A                      17208 ___str_113:
      000B3A 20 20 20 20 20 20 20 17209 	.ascii "          "
             20 20 20
      000B44 0A                   17210 	.db 0x0a
      000B45 20 3C 30 3E 20 45 78 17211 	.ascii " <0> Exit"
             69 74
      000B4E 0A                   17212 	.db 0x0a
      000B4F 20 20 20 20 20 20 20 17213 	.ascii "              "
             20 20 20 20 20 20 20
      000B5D 00                   17214 	.db 0x00
                                  17215 	.area CSEG    (CODE)
                                  17216 	.area CONST   (CODE)
      000B5E                      17217 ___str_114:
      000B5E 20 20 20 20 20 20 20 17218 	.ascii "          "
             20 20 20
      000B68 0A                   17219 	.db 0x0a
      000B69 20 3C 30 3E 20 45 78 17220 	.ascii " <0> Exit"
             69 74
      000B72 0A                   17221 	.db 0x0a
      000B73 20 3C 32 3E 20 50 72 17222 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000B80 00                   17223 	.db 0x00
                                  17224 	.area CSEG    (CODE)
                                  17225 	.area CONST   (CODE)
      000B81                      17226 ___str_115:
      000B81 0A                   17227 	.db 0x0a
      000B82 0A                   17228 	.db 0x0a
      000B83 20                   17229 	.ascii " "
      000B84 00                   17230 	.db 0x00
                                  17231 	.area CSEG    (CODE)
                                  17232 	.area CONST   (CODE)
      000B85                      17233 ___str_116:
      000B85 3C 32 3E 20 50 72 65 17234 	.ascii "<2> Previous"
             76 69 6F 75 73
      000B91 00                   17235 	.db 0x00
                                  17236 	.area CSEG    (CODE)
                                  17237 	.area CONST   (CODE)
      000B92                      17238 ___str_117:
      000B92 20 3C 31 3E 20 4E 65 17239 	.ascii " <1> Next"
             78 74
      000B9B 0A                   17240 	.db 0x0a
      000B9C 20 3C 30 3E 20 45 78 17241 	.ascii " <0> Exit"
             69 74
      000BA5 0A                   17242 	.db 0x0a
      000BA6 20 3C 32 3E 20 50 72 17243 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BB3 00                   17244 	.db 0x00
                                  17245 	.area CSEG    (CODE)
                                  17246 	.area CONST   (CODE)
      000BB4                      17247 ___str_118:
      000BB4 20 3C 31 3E 20 4E 65 17248 	.ascii " <1> Next"
             78 74
      000BBD 0A                   17249 	.db 0x0a
      000BBE 20                   17250 	.ascii " "
      000BBF 00                   17251 	.db 0x00
                                  17252 	.area CSEG    (CODE)
                                  17253 	.area CONST   (CODE)
      000BC0                      17254 ___str_119:
      000BC0 0A                   17255 	.db 0x0a
      000BC1 20 3C 32 3E 20 50 72 17256 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BCE 00                   17257 	.db 0x00
                                  17258 	.area CSEG    (CODE)
                                  17259 	.area CONST   (CODE)
      000BCF                      17260 ___str_120:
      000BCF 20 56 61 6C 75 65 20 17261 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      000BDF 0A                   17262 	.db 0x0a
      000BE0 20 57 69 74 68 69 6E 17263 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      000BED 0A                   17264 	.db 0x0a
      000BEE 20                   17265 	.ascii " "
      000BEF 00                   17266 	.db 0x00
                                  17267 	.area CSEG    (CODE)
                                  17268 	.area CONST   (CODE)
      000BF0                      17269 ___str_121:
      000BF0 0A                   17270 	.db 0x0a
      000BF1 20 3C 30 3E 20 45 78 17271 	.ascii " <0> Exit"
             69 74
      000BFA 00                   17272 	.db 0x00
                                  17273 	.area CSEG    (CODE)
                                  17274 	.area CONST   (CODE)
      000BFB                      17275 ___str_122:
      000BFB 0A                   17276 	.db 0x0a
      000BFC 0A                   17277 	.db 0x0a
      000BFD 0A                   17278 	.db 0x0a
      000BFE 20                   17279 	.ascii " "
      000BFF 00                   17280 	.db 0x00
                                  17281 	.area CSEG    (CODE)
                                  17282 	.area CONST   (CODE)
      000C00                      17283 ___str_123:
      000C00 5B 43 4F 55 4E 54 5D 17284 	.ascii "[COUNT]"
      000C07 0A                   17285 	.db 0x0a
      000C08 00                   17286 	.db 0x00
                                  17287 	.area CSEG    (CODE)
                                  17288 	.area CONST   (CODE)
      000C09                      17289 ___str_124:
      000C09 20 53 65 61 72 63 68 17290 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000C17 00                   17291 	.db 0x00
                                  17292 	.area CSEG    (CODE)
                                  17293 	.area CONST   (CODE)
      000C18                      17294 ___str_125:
      000C18 20 46 6F 75 6E 64 20 17295 	.ascii " Found in"
             69 6E
      000C21 0A                   17296 	.db 0x0a
      000C22 20                   17297 	.ascii " "
      000C23 00                   17298 	.db 0x00
                                  17299 	.area CSEG    (CODE)
                                  17300 	.area CONST   (CODE)
      000C24                      17301 ___str_126:
      000C24 20 42 79 74 65 73 20 17302 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      000C30 0A                   17303 	.db 0x0a
      000C31 20                   17304 	.ascii " "
      000C32 00                   17305 	.db 0x00
                                  17306 	.area CSEG    (CODE)
                                  17307 	.area CONST   (CODE)
      000C33                      17308 ___str_127:
      000C33 43 6F 75 6E 74 3A 20 17309 	.ascii "Count: "
      000C3A 00                   17310 	.db 0x00
                                  17311 	.area CSEG    (CODE)
                                  17312 	.area CONST   (CODE)
      000C3B                      17313 ___str_128:
      000C3B 5B 43 48 45 43 4B 5D 17314 	.ascii "[CHECK]"
      000C42 0A                   17315 	.db 0x0a
      000C43 00                   17316 	.db 0x00
                                  17317 	.area CSEG    (CODE)
                                  17318 	.area CONST   (CODE)
      000C44                      17319 ___str_129:
      000C44 20 45 6E 74 65 72 20 17320 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      000C51 0A                   17321 	.db 0x0a
      000C52 00                   17322 	.db 0x00
                                  17323 	.area CSEG    (CODE)
                                  17324 	.area CONST   (CODE)
      000C53                      17325 ___str_130:
      000C53 0A                   17326 	.db 0x0a
      000C54 0A                   17327 	.db 0x0a
      000C55 20 57 72 69 74 69 6E 17328 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      000C65 0A                   17329 	.db 0x0a
      000C66 20 61 6C 6C 20 6D 65 17330 	.ascii " all memory"
             6D 6F 72 79
      000C71 0A                   17331 	.db 0x0a
      000C72 20 6C 6F 63 61 74 69 17332 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      000C7F 00                   17333 	.db 0x00
                                  17334 	.area CSEG    (CODE)
                                  17335 	.area CONST   (CODE)
      000C80                      17336 ___str_131:
      000C80 0A                   17337 	.db 0x0a
      000C81 20 56 65 72 69 66 79 17338 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      000C94 00                   17339 	.db 0x00
                                  17340 	.area CSEG    (CODE)
                                  17341 	.area CONST   (CODE)
      000C95                      17342 ___str_132:
      000C95 0A                   17343 	.db 0x0a
      000C96 20 43 6F 6D 70 6C 65 17344 	.ascii " Complete."
             74 65 2E
      000CA0 00                   17345 	.db 0x00
                                  17346 	.area CSEG    (CODE)
                                  17347 	.area CONST   (CODE)
      000CA1                      17348 ___str_133:
      000CA1 0A                   17349 	.db 0x0a
      000CA2 0A                   17350 	.db 0x0a
      000CA3 20 54 6F 67 67 6C 69 17351 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      000CB4 0A                   17352 	.db 0x0a
      000CB5 20 65 61 63 68 20 6E 17353 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      000CC4 00                   17354 	.db 0x00
                                  17355 	.area CSEG    (CODE)
                                  17356 	.area CONST   (CODE)
      000CC5                      17357 ___str_134:
      000CC5 0A                   17358 	.db 0x0a
      000CC6 20 57 72 69 74 69 6E 17359 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      000CDA 00                   17360 	.db 0x00
                                  17361 	.area CSEG    (CODE)
                                  17362 	.area CONST   (CODE)
      000CDB                      17363 ___str_135:
      000CDB 0A                   17364 	.db 0x0a
      000CDC 0A                   17365 	.db 0x0a
      000CDD 20 43 68 65 63 6B 20 17366 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      000CED 00                   17367 	.db 0x00
                                  17368 	.area CSEG    (CODE)
                                  17369 	.area CONST   (CODE)
      000CEE                      17370 ___str_136:
      000CEE 5B 55 41 52 54 5D    17371 	.ascii "[UART]"
      000CF4 0A                   17372 	.db 0x0a
      000CF5 00                   17373 	.db 0x00
                                  17374 	.area CSEG    (CODE)
                                  17375 	.area CONST   (CODE)
      000CF6                      17376 ___str_137:
      000CF6 20 3C 31 3E 20       17377 	.ascii " <1> "
      000CFB 00                   17378 	.db 0x00
                                  17379 	.area CSEG    (CODE)
                                  17380 	.area CONST   (CODE)
      000CFC                      17381 ___str_138:
      000CFC 31 32 30 30          17382 	.ascii "1200"
      000D00 00                   17383 	.db 0x00
                                  17384 	.area CSEG    (CODE)
                                  17385 	.area CONST   (CODE)
      000D01                      17386 ___str_139:
      000D01 32 34 30 30          17387 	.ascii "2400"
      000D05 00                   17388 	.db 0x00
                                  17389 	.area CSEG    (CODE)
                                  17390 	.area CONST   (CODE)
      000D06                      17391 ___str_140:
      000D06 34 38 30 30          17392 	.ascii "4800"
      000D0A 00                   17393 	.db 0x00
                                  17394 	.area CSEG    (CODE)
                                  17395 	.area CONST   (CODE)
      000D0B                      17396 ___str_141:
      000D0B 39 36 30 30          17397 	.ascii "9600"
      000D0F 00                   17398 	.db 0x00
                                  17399 	.area CSEG    (CODE)
                                  17400 	.area CONST   (CODE)
      000D10                      17401 ___str_142:
      000D10 31 39 32 30 30       17402 	.ascii "19200"
      000D15 00                   17403 	.db 0x00
                                  17404 	.area CSEG    (CODE)
                                  17405 	.area CONST   (CODE)
      000D16                      17406 ___str_143:
      000D16 20 62 61 75 64       17407 	.ascii " baud"
      000D1B 0A                   17408 	.db 0x0a
      000D1C 00                   17409 	.db 0x00
                                  17410 	.area CSEG    (CODE)
                                  17411 	.area CONST   (CODE)
      000D1D                      17412 ___str_144:
      000D1D 20 3C 31 3E 20 53 65 17413 	.ascii " <1> Set Data Rate"
             74 20 44 61 74 61 20
             52 61 74 65
      000D2F 0A                   17414 	.db 0x0a
      000D30 00                   17415 	.db 0x00
                                  17416 	.area CSEG    (CODE)
                                  17417 	.area CONST   (CODE)
      000D31                      17418 ___str_145:
      000D31 20 3C 32 3E 20       17419 	.ascii " <2> "
      000D36 00                   17420 	.db 0x00
                                  17421 	.area CSEG    (CODE)
                                  17422 	.area CONST   (CODE)
      000D37                      17423 ___str_146:
      000D37 38                   17424 	.ascii "8"
      000D38 00                   17425 	.db 0x00
                                  17426 	.area CSEG    (CODE)
                                  17427 	.area CONST   (CODE)
      000D39                      17428 ___str_147:
      000D39 39                   17429 	.ascii "9"
      000D3A 00                   17430 	.db 0x00
                                  17431 	.area CSEG    (CODE)
                                  17432 	.area CONST   (CODE)
      000D3B                      17433 ___str_148:
      000D3B 2D 62 69 74 20 4D 6F 17434 	.ascii "-bit Mode"
             64 65
      000D44 0A                   17435 	.db 0x0a
      000D45 00                   17436 	.db 0x00
                                  17437 	.area CSEG    (CODE)
                                  17438 	.area CONST   (CODE)
      000D46                      17439 ___str_149:
      000D46 20 3C 32 3E 20 4E 75 17440 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      000D59 0A                   17441 	.db 0x0a
      000D5A 20 20 20 20 20 28 38 17442 	.ascii "     (8 or 9 bits)"
             20 6F 72 20 39 20 62
             69 74 73 29
      000D6C 0A                   17443 	.db 0x0a
      000D6D 00                   17444 	.db 0x00
                                  17445 	.area CSEG    (CODE)
                                  17446 	.area CONST   (CODE)
      000D6E                      17447 ___str_150:
      000D6E 20 3C 33 3E 20       17448 	.ascii " <3> "
      000D73 00                   17449 	.db 0x00
                                  17450 	.area CSEG    (CODE)
                                  17451 	.area CONST   (CODE)
      000D74                      17452 ___str_151:
      000D74 4E 6F 20             17453 	.ascii "No "
      000D77 00                   17454 	.db 0x00
                                  17455 	.area CSEG    (CODE)
                                  17456 	.area CONST   (CODE)
      000D78                      17457 ___str_152:
      000D78 45 76 65 6E 20       17458 	.ascii "Even "
      000D7D 00                   17459 	.db 0x00
                                  17460 	.area CSEG    (CODE)
                                  17461 	.area CONST   (CODE)
      000D7E                      17462 ___str_153:
      000D7E 4F 64 64 20          17463 	.ascii "Odd "
      000D82 00                   17464 	.db 0x00
                                  17465 	.area CSEG    (CODE)
                                  17466 	.area CONST   (CODE)
      000D83                      17467 ___str_154:
      000D83 50 61 72 69 74 79    17468 	.ascii "Parity"
      000D89 0A                   17469 	.db 0x0a
      000D8A 00                   17470 	.db 0x00
                                  17471 	.area CSEG    (CODE)
                                  17472 	.area CONST   (CODE)
      000D8B                      17473 ___str_155:
      000D8B 20 3C 33 3E 20 50 61 17474 	.ascii " <3> Parity (Even)"
             72 69 74 79 20 28 45
             76 65 6E 29
      000D9D 0A                   17475 	.db 0x0a
      000D9E 20 20 20 20 20 28 4F 17476 	.ascii "     (Odd/None)"
             64 64 2F 4E 6F 6E 65
             29
      000DAD 0A                   17477 	.db 0x0a
      000DAE 00                   17478 	.db 0x00
                                  17479 	.area CSEG    (CODE)
                                  17480 	.area CONST   (CODE)
      000DAF                      17481 ___str_156:
      000DAF 20 3C 34 3E 20 44 69 17482 	.ascii " <4> Disable UART"
             73 61 62 6C 65 20 55
             41 52 54
      000DC0 0A                   17483 	.db 0x0a
      000DC1 00                   17484 	.db 0x00
                                  17485 	.area CSEG    (CODE)
                                  17486 	.area CONST   (CODE)
      000DC2                      17487 ___str_157:
      000DC2 20 20 20 20 20 5B 45 17488 	.ascii "     [Enabled]"
             6E 61 62 6C 65 64 5D
      000DD0 0A                   17489 	.db 0x0a
      000DD1 00                   17490 	.db 0x00
                                  17491 	.area CSEG    (CODE)
                                  17492 	.area CONST   (CODE)
      000DD2                      17493 ___str_158:
      000DD2 20 3C 34 3E 20 45 6E 17494 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      000DE2 0A                   17495 	.db 0x0a
      000DE3 00                   17496 	.db 0x00
                                  17497 	.area CSEG    (CODE)
                                  17498 	.area CONST   (CODE)
      000DE4                      17499 ___str_159:
      000DE4 20 20 20 20 20 28 44 17500 	.ascii "     (Disabled)"
             69 73 61 62 6C 65 64
             29
      000DF3 0A                   17501 	.db 0x0a
      000DF4 00                   17502 	.db 0x00
                                  17503 	.area CSEG    (CODE)
                                  17504 	.area CONST   (CODE)
      000DF5                      17505 ___str_160:
      000DF5 20 3C 30 3E 20 45 78 17506 	.ascii " <0> Exit "
             69 74 20
      000DFF 0A                   17507 	.db 0x0a
      000E00 00                   17508 	.db 0x00
                                  17509 	.area CSEG    (CODE)
                                  17510 	.area CONST   (CODE)
      000E01                      17511 ___str_161:
      000E01 3C 30 3E 20          17512 	.ascii "<0> "
      000E05 00                   17513 	.db 0x00
                                  17514 	.area CSEG    (CODE)
                                  17515 	.area CONST   (CODE)
      000E06                      17516 ___str_162:
      000E06 45 78 69 74          17517 	.ascii "Exit"
      000E0A 0A                   17518 	.db 0x0a
      000E0B 00                   17519 	.db 0x00
                                  17520 	.area CSEG    (CODE)
                                  17521 	.area CONST   (CODE)
      000E0C                      17522 ___str_163:
      000E0C 3C 34 3E 20          17523 	.ascii "<4> "
      000E10 00                   17524 	.db 0x00
                                  17525 	.area CSEG    (CODE)
                                  17526 	.area CONST   (CODE)
      000E11                      17527 ___str_164:
      000E11 44 69 73 61 62 6C 65 17528 	.ascii "Disable UART"
             20 55 41 52 54
      000E1D 0A                   17529 	.db 0x0a
      000E1E 00                   17530 	.db 0x00
                                  17531 	.area CSEG    (CODE)
                                  17532 	.area CONST   (CODE)
      000E1F                      17533 ___str_165:
      000E1F 20 20 20 20 20       17534 	.ascii "     "
      000E24 00                   17535 	.db 0x00
                                  17536 	.area CSEG    (CODE)
                                  17537 	.area CONST   (CODE)
      000E25                      17538 ___str_166:
      000E25 5B 45 6E 61 62 6C 65 17539 	.ascii "[Enabled]"
             64 5D
      000E2E 00                   17540 	.db 0x00
                                  17541 	.area CSEG    (CODE)
                                  17542 	.area CONST   (CODE)
      000E2F                      17543 ___str_167:
      000E2F 55 41 52 54 20 44 69 17544 	.ascii "UART Disabled."
             73 61 62 6C 65 64 2E
      000E3D 00                   17545 	.db 0x00
                                  17546 	.area CSEG    (CODE)
                                  17547 	.area CONST   (CODE)
      000E3E                      17548 ___str_168:
      000E3E 45 6E 61 62 6C 65 20 17549 	.ascii "Enable UART"
             55 41 52 54
      000E49 0A                   17550 	.db 0x0a
      000E4A 00                   17551 	.db 0x00
                                  17552 	.area CSEG    (CODE)
                                  17553 	.area CONST   (CODE)
      000E4B                      17554 ___str_169:
      000E4B 28 44 69 73 61 62 6C 17555 	.ascii "(Disabled)"
             65 64 29
      000E55 00                   17556 	.db 0x00
                                  17557 	.area CSEG    (CODE)
                                  17558 	.area CONST   (CODE)
      000E56                      17559 ___str_170:
      000E56 3C 31 3E 20          17560 	.ascii "<1> "
      000E5A 00                   17561 	.db 0x00
                                  17562 	.area CSEG    (CODE)
                                  17563 	.area CONST   (CODE)
      000E5B                      17564 ___str_171:
      000E5B 53 65 74 20 44 61 74 17565 	.ascii "Set Data Rate"
             61 20 52 61 74 65
      000E68 0A                   17566 	.db 0x0a
      000E69 00                   17567 	.db 0x00
                                  17568 	.area CSEG    (CODE)
                                  17569 	.area CONST   (CODE)
      000E6A                      17570 ___str_172:
      000E6A 0A                   17571 	.db 0x0a
      000E6B 0A                   17572 	.db 0x0a
      000E6C 0A                   17573 	.db 0x0a
      000E6D 0A                   17574 	.db 0x0a
      000E6E 20 50 6C 65 61 73 65 17575 	.ascii " Please disable"
             20 64 69 73 61 62 6C
             65
      000E7D 0A                   17576 	.db 0x0a
      000E7E 20 55 41 52 54 20 66 17577 	.ascii " UART first."
             69 72 73 74 2E
      000E8A 0A                   17578 	.db 0x0a
      000E8B 00                   17579 	.db 0x00
                                  17580 	.area CSEG    (CODE)
                                  17581 	.area CONST   (CODE)
      000E8C                      17582 ___str_173:
      000E8C 3C 32 3E 20          17583 	.ascii "<2> "
      000E90 00                   17584 	.db 0x00
                                  17585 	.area CSEG    (CODE)
                                  17586 	.area CONST   (CODE)
      000E91                      17587 ___str_174:
      000E91 4E 75 6D 62 65 72 20 17588 	.ascii "Number of Bits"
             6F 66 20 42 69 74 73
      000E9F 0A                   17589 	.db 0x0a
      000EA0 00                   17590 	.db 0x00
                                  17591 	.area CSEG    (CODE)
                                  17592 	.area CONST   (CODE)
      000EA1                      17593 ___str_175:
      000EA1 28 38 20 6F 72 20 39 17594 	.ascii "(8 or 9 bits)"
             20 62 69 74 73 29
      000EAE 0A                   17595 	.db 0x0a
      000EAF 00                   17596 	.db 0x00
                                  17597 	.area CSEG    (CODE)
                                  17598 	.area CONST   (CODE)
      000EB0                      17599 ___str_176:
      000EB0 3C 33 3E 20          17600 	.ascii "<3> "
      000EB4 00                   17601 	.db 0x00
                                  17602 	.area CSEG    (CODE)
                                  17603 	.area CONST   (CODE)
      000EB5                      17604 ___str_177:
      000EB5 50 61 72 69 74 79 20 17605 	.ascii "Parity "
      000EBC 00                   17606 	.db 0x00
                                  17607 	.area CSEG    (CODE)
                                  17608 	.area CONST   (CODE)
      000EBD                      17609 ___str_178:
      000EBD 28 45 76 65 6E 2F    17610 	.ascii "(Even/"
      000EC3 0A                   17611 	.db 0x0a
      000EC4 00                   17612 	.db 0x00
                                  17613 	.area CSEG    (CODE)
                                  17614 	.area CONST   (CODE)
      000EC5                      17615 ___str_179:
      000EC5 28 4F 64 64 2F 4E 6F 17616 	.ascii "(Odd/None)"
             6E 65 29
      000ECF 0A                   17617 	.db 0x0a
      000ED0 00                   17618 	.db 0x00
                                  17619 	.area CSEG    (CODE)
                                  17620 	.area CONST   (CODE)
      000ED1                      17621 ___str_180:
      000ED1 0A                   17622 	.db 0x0a
      000ED2 0A                   17623 	.db 0x0a
      000ED3 0A                   17624 	.db 0x0a
      000ED4 0A                   17625 	.db 0x0a
      000ED5 20 49 6E 63 6F 72 72 17626 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      000EE5 0A                   17627 	.db 0x0a
      000EE6 20 20 54 72 79 20 61 17628 	.ascii "  Try again."
             67 61 69 6E 2E
      000EF2 0A                   17629 	.db 0x0a
      000EF3 00                   17630 	.db 0x00
                                  17631 	.area CSEG    (CODE)
                                  17632 	.area CONST   (CODE)
      000EF4                      17633 ___str_181:
      000EF4 0A                   17634 	.db 0x0a
      000EF5 20 44 69 73 61 62 6C 17635 	.ascii " Disabling UART..."
             69 6E 67 20 55 41 52
             54 2E 2E 2E
      000F07 0A                   17636 	.db 0x0a
      000F08 00                   17637 	.db 0x00
                                  17638 	.area CSEG    (CODE)
                                  17639 	.area CONST   (CODE)
      000F09                      17640 ___str_182:
      000F09 0A                   17641 	.db 0x0a
      000F0A 20 53 65 74 74 69 6E 17642 	.ascii " Settings Verified:"
             67 73 20 56 65 72 69
             66 69 65 64 3A
      000F1D 0A                   17643 	.db 0x0a
      000F1E 00                   17644 	.db 0x00
                                  17645 	.area CSEG    (CODE)
                                  17646 	.area CONST   (CODE)
      000F1F                      17647 ___str_183:
      000F1F 20 45 6E 61 62 6C 69 17648 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      000F30 00                   17649 	.db 0x00
                                  17650 	.area CSEG    (CODE)
                                  17651 	.area CONST   (CODE)
      000F31                      17652 ___str_184:
      000F31 20 42 41 55 44 20 45 17653 	.ascii " BAUD ERROR"
             52 52 4F 52
      000F3C 0A                   17654 	.db 0x0a
      000F3D 00                   17655 	.db 0x00
                                  17656 	.area CSEG    (CODE)
                                  17657 	.area CONST   (CODE)
      000F3E                      17658 ___str_185:
      000F3E 20 45 6E 74 65 72 69 17659 	.ascii " Entering Baud..."
             6E 67 20 42 61 75 64
             2E 2E 2E
      000F4F 0A                   17660 	.db 0x0a
      000F50 00                   17661 	.db 0x00
                                  17662 	.area CSEG    (CODE)
                                  17663 	.area CONST   (CODE)
      000F51                      17664 ___str_186:
      000F51 20 42 49 54 20 45 52 17665 	.ascii " BIT ERROR"
             52 4F 52
      000F5B 0A                   17666 	.db 0x0a
      000F5C 00                   17667 	.db 0x00
                                  17668 	.area CSEG    (CODE)
                                  17669 	.area CONST   (CODE)
      000F5D                      17670 ___str_187:
      000F5D 20 45 6E 74 65 72 69 17671 	.ascii " Entering Bits..."
             6E 67 20 42 69 74 73
             2E 2E 2E
      000F6E 0A                   17672 	.db 0x0a
      000F6F 00                   17673 	.db 0x00
                                  17674 	.area CSEG    (CODE)
                                  17675 	.area CONST   (CODE)
      000F70                      17676 ___str_188:
      000F70 20 50 41 52 49 54 59 17677 	.ascii " PARITY ERROR"
             20 45 52 52 4F 52
      000F7D 0A                   17678 	.db 0x0a
      000F7E 00                   17679 	.db 0x00
                                  17680 	.area CSEG    (CODE)
                                  17681 	.area CONST   (CODE)
      000F7F                      17682 ___str_189:
      000F7F 20 45 6E 74 65 72 69 17683 	.ascii " Entering Parity..."
             6E 67 20 50 61 72 69
             74 79 2E 2E 2E
      000F92 0A                   17684 	.db 0x0a
      000F93 00                   17685 	.db 0x00
                                  17686 	.area CSEG    (CODE)
                                  17687 	.area CONST   (CODE)
      000F94                      17688 ___str_190:
      000F94 20 3C 31 3E 20 31 32 17689 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      000FA2 0A                   17690 	.db 0x0a
      000FA3 00                   17691 	.db 0x00
                                  17692 	.area CSEG    (CODE)
                                  17693 	.area CONST   (CODE)
      000FA4                      17694 ___str_191:
      000FA4 20 3C 32 3E 20 32 34 17695 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      000FB2 0A                   17696 	.db 0x0a
      000FB3 00                   17697 	.db 0x00
                                  17698 	.area CSEG    (CODE)
                                  17699 	.area CONST   (CODE)
      000FB4                      17700 ___str_192:
      000FB4 20 3C 33 3E 20 34 38 17701 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      000FC2 0A                   17702 	.db 0x0a
      000FC3 00                   17703 	.db 0x00
                                  17704 	.area CSEG    (CODE)
                                  17705 	.area CONST   (CODE)
      000FC4                      17706 ___str_193:
      000FC4 20 3C 34 3E 20 39 36 17707 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      000FD2 0A                   17708 	.db 0x0a
      000FD3 00                   17709 	.db 0x00
                                  17710 	.area CSEG    (CODE)
                                  17711 	.area CONST   (CODE)
      000FD4                      17712 ___str_194:
      000FD4 20 3C 35 3E 20 31 39 17713 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      000FE3 0A                   17714 	.db 0x0a
      000FE4 00                   17715 	.db 0x00
                                  17716 	.area CSEG    (CODE)
                                  17717 	.area CONST   (CODE)
      000FE5                      17718 ___str_195:
      000FE5 31 32 30 30 20 42 61 17719 	.ascii "1200 Baud"
             75 64
      000FEE 0A                   17720 	.db 0x0a
      000FEF 00                   17721 	.db 0x00
                                  17722 	.area CSEG    (CODE)
                                  17723 	.area CONST   (CODE)
      000FF0                      17724 ___str_196:
      000FF0 32 34 30 30 20 42 61 17725 	.ascii "2400 Baud"
             75 64
      000FF9 0A                   17726 	.db 0x0a
      000FFA 00                   17727 	.db 0x00
                                  17728 	.area CSEG    (CODE)
                                  17729 	.area CONST   (CODE)
      000FFB                      17730 ___str_197:
      000FFB 34 38 30 30 20 42 61 17731 	.ascii "4800 Baud"
             75 64
      001004 0A                   17732 	.db 0x0a
      001005 00                   17733 	.db 0x00
                                  17734 	.area CSEG    (CODE)
                                  17735 	.area CONST   (CODE)
      001006                      17736 ___str_198:
      001006 39 36 30 30 20 42 61 17737 	.ascii "9600 Baud"
             75 64
      00100F 0A                   17738 	.db 0x0a
      001010 00                   17739 	.db 0x00
                                  17740 	.area CSEG    (CODE)
                                  17741 	.area CONST   (CODE)
      001011                      17742 ___str_199:
      001011 3C 35 3E 20          17743 	.ascii "<5> "
      001015 00                   17744 	.db 0x00
                                  17745 	.area CSEG    (CODE)
                                  17746 	.area CONST   (CODE)
      001016                      17747 ___str_200:
      001016 31 39 32 30 30 20 42 17748 	.ascii "19200 Baud"
             61 75 64
      001020 0A                   17749 	.db 0x0a
      001021 00                   17750 	.db 0x00
                                  17751 	.area CSEG    (CODE)
                                  17752 	.area CONST   (CODE)
      001022                      17753 ___str_201:
      001022 20 49 4E 50 55 54 20 17754 	.ascii " INPUT ERROR"
             45 52 52 4F 52
      00102E 00                   17755 	.db 0x00
                                  17756 	.area CSEG    (CODE)
                                  17757 	.area CONST   (CODE)
      00102F                      17758 ___str_202:
      00102F 20 20 20 20 20 20 20 17759 	.ascii "            "
             20 20 20 20 20
      00103B 00                   17760 	.db 0x00
                                  17761 	.area CSEG    (CODE)
                                  17762 	.area CONST   (CODE)
      00103C                      17763 ___str_203:
      00103C 20 3C 31 3E 20 38 2D 17764 	.ascii " <1> 8-bit Mode"
             62 69 74 20 4D 6F 64
             65
      00104B 0A                   17765 	.db 0x0a
      00104C 00                   17766 	.db 0x00
                                  17767 	.area CSEG    (CODE)
                                  17768 	.area CONST   (CODE)
      00104D                      17769 ___str_204:
      00104D 20 3C 32 3E 20 39 2D 17770 	.ascii " <2> 9-bit Mode"
             62 69 74 20 4D 6F 64
             65
      00105C 0A                   17771 	.db 0x0a
      00105D 00                   17772 	.db 0x00
                                  17773 	.area CSEG    (CODE)
                                  17774 	.area CONST   (CODE)
      00105E                      17775 ___str_205:
      00105E 38 2D 62 69 74 20 4D 17776 	.ascii "8-bit Mode"
             6F 64 65
      001068 0A                   17777 	.db 0x0a
      001069 00                   17778 	.db 0x00
                                  17779 	.area CSEG    (CODE)
                                  17780 	.area CONST   (CODE)
      00106A                      17781 ___str_206:
      00106A 39 2D 62 69 74 20 4D 17782 	.ascii "9-bit Mode"
             6F 64 65
      001074 0A                   17783 	.db 0x0a
      001075 00                   17784 	.db 0x00
                                  17785 	.area CSEG    (CODE)
                                  17786 	.area CONST   (CODE)
      001076                      17787 ___str_207:
      001076 0A                   17788 	.db 0x0a
      001077 20 50 6C 65 61 73 65 17789 	.ascii " Please set the"
             20 73 65 74 20 74 68
             65
      001086 0A                   17790 	.db 0x0a
      001087 20 20 62 69 74 20 6D 17791 	.ascii "  bit mode first."
             6F 64 65 20 66 69 72
             73 74 2E
      001098 0A                   17792 	.db 0x0a
      001099 00                   17793 	.db 0x00
                                  17794 	.area CSEG    (CODE)
                                  17795 	.area CONST   (CODE)
      00109A                      17796 ___str_208:
      00109A 20 3C 31 3E 20 45 76 17797 	.ascii " <1> Even Parity"
             65 6E 20 50 61 72 69
             74 79
      0010AA 0A                   17798 	.db 0x0a
      0010AB 00                   17799 	.db 0x00
                                  17800 	.area CSEG    (CODE)
                                  17801 	.area CONST   (CODE)
      0010AC                      17802 ___str_209:
      0010AC 20 3C 32 3E 20 4F 64 17803 	.ascii " <2> Odd Parity"
             64 20 50 61 72 69 74
             79
      0010BB 0A                   17804 	.db 0x0a
      0010BC 00                   17805 	.db 0x00
                                  17806 	.area CSEG    (CODE)
                                  17807 	.area CONST   (CODE)
      0010BD                      17808 ___str_210:
      0010BD 20 3C 33 3E 20 4E 6F 17809 	.ascii " <3> No Parity"
             20 50 61 72 69 74 79
      0010CB 00                   17810 	.db 0x00
                                  17811 	.area CSEG    (CODE)
                                  17812 	.area CONST   (CODE)
      0010CC                      17813 ___str_211:
      0010CC 45 76 65 6E 20 50 61 17814 	.ascii "Even Parity"
             72 69 74 79
      0010D7 0A                   17815 	.db 0x0a
      0010D8 00                   17816 	.db 0x00
                                  17817 	.area CSEG    (CODE)
                                  17818 	.area CONST   (CODE)
      0010D9                      17819 ___str_212:
      0010D9 4F 64 64 20 50 61 72 17820 	.ascii "Odd Parity"
             69 74 79
      0010E3 0A                   17821 	.db 0x0a
      0010E4 00                   17822 	.db 0x00
                                  17823 	.area CSEG    (CODE)
                                  17824 	.area CONST   (CODE)
      0010E5                      17825 ___str_213:
      0010E5 4E 6F 20 50 61 72 69 17826 	.ascii "No Parity"
             74 79
      0010EE 0A                   17827 	.db 0x0a
      0010EF 00                   17828 	.db 0x00
                                  17829 	.area CSEG    (CODE)
                                  17830 	.area CONST   (CODE)
      0010F0                      17831 ___str_214:
      0010F0 20 53 6F 6D 65 74 68 17832 	.ascii " Something is wrong."
             69 6E 67 20 69 73 20
             77 72 6F 6E 67 2E
      001104 0A                   17833 	.db 0x0a
      001105 20 20 55 41 52 54 20 17834 	.ascii "  UART failed to set."
             66 61 69 6C 65 64 20
             74 6F 20 73 65 74 2E
      00111A 0A                   17835 	.db 0x0a
      00111B 00                   17836 	.db 0x00
                                  17837 	.area CSEG    (CODE)
                                  17838 	.area CONST   (CODE)
      00111C                      17839 ___str_215:
      00111C 52 41 4D 20 50 4F 53 17840 	.ascii "RAM POST"
             54
      001124 0A                   17841 	.db 0x0a
      001125 00                   17842 	.db 0x00
                                  17843 	.area CSEG    (CODE)
                                  17844 	.area CONST   (CODE)
      001126                      17845 ___str_216:
      001126 2E 2E 2E             17846 	.ascii "..."
      001129 0A                   17847 	.db 0x0a
      00112A 00                   17848 	.db 0x00
                                  17849 	.area CSEG    (CODE)
                                  17850 	.area CONST   (CODE)
      00112B                      17851 ___str_217:
      00112B 3C 44 3E             17852 	.ascii "<D>"
      00112E 00                   17853 	.db 0x00
                                  17854 	.area CSEG    (CODE)
                                  17855 	.area CONST   (CODE)
      00112F                      17856 ___str_218:
      00112F 20 20 20 20 20 20 20 17857 	.ascii "          "
             20 20 20
      001139 00                   17858 	.db 0x00
                                  17859 	.area CSEG    (CODE)
                                  17860 	.area CONST   (CODE)
      00113A                      17861 ___str_219:
      00113A 3C 42 3E             17862 	.ascii "<B>"
      00113D 00                   17863 	.db 0x00
                                  17864 	.area CSEG    (CODE)
                                  17865 	.area CONST   (CODE)
      00113E                      17866 ___str_220:
      00113E 3C 45 3E             17867 	.ascii "<E>"
      001141 00                   17868 	.db 0x00
                                  17869 	.area CSEG    (CODE)
                                  17870 	.area CONST   (CODE)
      001142                      17871 ___str_221:
      001142 3C 46 3E             17872 	.ascii "<F>"
      001145 00                   17873 	.db 0x00
                                  17874 	.area CSEG    (CODE)
                                  17875 	.area CONST   (CODE)
      001146                      17876 ___str_222:
      001146 3C 43 3E             17877 	.ascii "<C>"
      001149 00                   17878 	.db 0x00
                                  17879 	.area CSEG    (CODE)
                                  17880 	.area CONST   (CODE)
      00114A                      17881 ___str_223:
      00114A 3C 41 3E             17882 	.ascii "<A>"
      00114D 00                   17883 	.db 0x00
                                  17884 	.area CSEG    (CODE)
                                  17885 	.area CONST   (CODE)
      00114E                      17886 ___str_224:
      00114E 3C 31 3E             17887 	.ascii "<1>"
      001151 00                   17888 	.db 0x00
                                  17889 	.area CSEG    (CODE)
                                  17890 	.area CONST   (CODE)
      001152                      17891 ___str_225:
      001152 49 4E 56 41 4C 49 44 17892 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      00115F 0A                   17893 	.db 0x0a
      001160 00                   17894 	.db 0x00
                                  17895 	.area CSEG    (CODE)
                                  17896 	.area CONST   (CODE)
      001161                      17897 ___str_226:
      001161 54 72 79 20 61 67 61 17898 	.ascii "Try again."
             69 6E 2E
      00116B 00                   17899 	.db 0x00
                                  17900 	.area CSEG    (CODE)
                                  17901 	.area CONST   (CODE)
      00116C                      17902 ___str_227:
      00116C 20 20 20 20 20 20 20 17903 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00117B 0A                   17904 	.db 0x0a
      00117C 00                   17905 	.db 0x00
                                  17906 	.area CSEG    (CODE)
                                  17907 	.area XINIT   (CODE)
                                  17908 	.area CABS    (ABS,CODE)
