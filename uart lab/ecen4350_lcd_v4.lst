                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_Init
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _FL
                                     36 	.globl _P
                                     37 	.globl _TF2
                                     38 	.globl _EXF2
                                     39 	.globl _RCLK
                                     40 	.globl _TCLK
                                     41 	.globl _EXEN2
                                     42 	.globl _TR2
                                     43 	.globl _C_T2
                                     44 	.globl _CP_RL2
                                     45 	.globl _T2CON_7
                                     46 	.globl _T2CON_6
                                     47 	.globl _T2CON_5
                                     48 	.globl _T2CON_4
                                     49 	.globl _T2CON_3
                                     50 	.globl _T2CON_2
                                     51 	.globl _T2CON_1
                                     52 	.globl _T2CON_0
                                     53 	.globl _PT2
                                     54 	.globl _PS
                                     55 	.globl _PT1
                                     56 	.globl _PX1
                                     57 	.globl _PT0
                                     58 	.globl _PX0
                                     59 	.globl _RD
                                     60 	.globl _WR
                                     61 	.globl _T1
                                     62 	.globl _T0
                                     63 	.globl _INT1
                                     64 	.globl _INT0
                                     65 	.globl _TXD
                                     66 	.globl _RXD
                                     67 	.globl _P3_7
                                     68 	.globl _P3_6
                                     69 	.globl _P3_5
                                     70 	.globl _P3_4
                                     71 	.globl _P3_3
                                     72 	.globl _P3_2
                                     73 	.globl _P3_1
                                     74 	.globl _P3_0
                                     75 	.globl _EA
                                     76 	.globl _ET2
                                     77 	.globl _ES
                                     78 	.globl _ET1
                                     79 	.globl _EX1
                                     80 	.globl _ET0
                                     81 	.globl _EX0
                                     82 	.globl _P2_7
                                     83 	.globl _P2_6
                                     84 	.globl _P2_5
                                     85 	.globl _P2_4
                                     86 	.globl _P2_3
                                     87 	.globl _P2_2
                                     88 	.globl _P2_1
                                     89 	.globl _P2_0
                                     90 	.globl _SM0
                                     91 	.globl _SM1
                                     92 	.globl _SM2
                                     93 	.globl _REN
                                     94 	.globl _TB8
                                     95 	.globl _RB8
                                     96 	.globl _TI
                                     97 	.globl _RI
                                     98 	.globl _T2EX
                                     99 	.globl _T2
                                    100 	.globl _P1_7
                                    101 	.globl _P1_6
                                    102 	.globl _P1_5
                                    103 	.globl _P1_4
                                    104 	.globl _P1_3
                                    105 	.globl _P1_2
                                    106 	.globl _P1_1
                                    107 	.globl _P1_0
                                    108 	.globl _TF1
                                    109 	.globl _TR1
                                    110 	.globl _TF0
                                    111 	.globl _TR0
                                    112 	.globl _IE1
                                    113 	.globl _IT1
                                    114 	.globl _IE0
                                    115 	.globl _IT0
                                    116 	.globl _P0_7
                                    117 	.globl _P0_6
                                    118 	.globl _P0_5
                                    119 	.globl _P0_4
                                    120 	.globl _P0_3
                                    121 	.globl _P0_2
                                    122 	.globl _P0_1
                                    123 	.globl _P0_0
                                    124 	.globl _B
                                    125 	.globl _A
                                    126 	.globl _ACC
                                    127 	.globl _PSW
                                    128 	.globl _TH2
                                    129 	.globl _TL2
                                    130 	.globl _RCAP2H
                                    131 	.globl _RCAP2L
                                    132 	.globl _T2MOD
                                    133 	.globl _T2CON
                                    134 	.globl _IP
                                    135 	.globl _P3
                                    136 	.globl _IE
                                    137 	.globl _P2
                                    138 	.globl _SBUF
                                    139 	.globl _SCON
                                    140 	.globl _P1
                                    141 	.globl _TH1
                                    142 	.globl _TH0
                                    143 	.globl _TL1
                                    144 	.globl _TL0
                                    145 	.globl _TMOD
                                    146 	.globl _TCON
                                    147 	.globl _PCON
                                    148 	.globl _DPH
                                    149 	.globl _DPL
                                    150 	.globl _SP
                                    151 	.globl _P0
                                    152 	.globl _bitSet
                                    153 	.globl _paritySet
                                    154 	.globl _baudSet
                                    155 	.globl _UART_en
                                    156 	.globl _selection
                                    157 	.globl _drawChar_PARM_6
                                    158 	.globl _drawChar_PARM_5
                                    159 	.globl _drawChar_PARM_4
                                    160 	.globl _drawChar_PARM_3
                                    161 	.globl _drawChar_PARM_2
                                    162 	.globl _fillRect_PARM_5
                                    163 	.globl _fillRect_PARM_4
                                    164 	.globl _fillRect_PARM_3
                                    165 	.globl _fillRect_PARM_2
                                    166 	.globl _testCircles_PARM_2
                                    167 	.globl _drawCircle_PARM_4
                                    168 	.globl _drawCircle_PARM_3
                                    169 	.globl _drawCircle_PARM_2
                                    170 	.globl _drawPixel_PARM_3
                                    171 	.globl _drawPixel_PARM_2
                                    172 	.globl _rtcWrite_PARM_2
                                    173 	.globl __height
                                    174 	.globl __width
                                    175 	.globl _textbgcolor
                                    176 	.globl _textcolor
                                    177 	.globl _rotation
                                    178 	.globl _textsize
                                    179 	.globl _cursor_y
                                    180 	.globl _cursor_x
                                    181 	.globl _received_flag
                                    182 	.globl _received_byte
                                    183 	.globl _seg7_address
                                    184 	.globl _lcd_address
                                    185 	.globl _rowloc
                                    186 	.globl _colloc
                                    187 	.globl _iowrite8
                                    188 	.globl _ioread8
                                    189 	.globl _ramWrite8
                                    190 	.globl _ramRead8
                                    191 	.globl _writeAllRAM
                                    192 	.globl _checkAllRAM
                                    193 	.globl _delay
                                    194 	.globl _writeRegister8
                                    195 	.globl _writeRegister16
                                    196 	.globl _seg7Test
                                    197 	.globl _rtcInit
                                    198 	.globl _rtcBusy
                                    199 	.globl _rtcCmd
                                    200 	.globl _rtcWrite
                                    201 	.globl _rtcRead
                                    202 	.globl _rtcPrint
                                    203 	.globl _setCursor
                                    204 	.globl _setTextColor
                                    205 	.globl _setTextSize
                                    206 	.globl _setAddress
                                    207 	.globl _TFT_LCD_INIT
                                    208 	.globl _drawPixel
                                    209 	.globl _drawCircle
                                    210 	.globl _testCircles
                                    211 	.globl _fillRect
                                    212 	.globl _fillTop
                                    213 	.globl _fillScreen
                                    214 	.globl _clearLCD
                                    215 	.globl _LCD_string_write
                                    216 	.globl _writeNewLine
                                    217 	.globl _freeType
                                    218 	.globl _keyDetect
                                    219 	.globl _reverse
                                    220 	.globl _reverse16
                                    221 	.globl _hexToASCII
                                    222 	.globl _ASCIItoHex
                                    223 	.globl _asciiToDec
                                    224 	.globl _asciiToHex
                                    225 	.globl _print4Hex
                                    226 	.globl _print8Hex
                                    227 	.globl _print16Hex
                                    228 	.globl _print16Dec
                                    229 	.globl _print8ASCII
                                    230 	.globl _print16ASCII
                                    231 	.globl _setColorDefault
                                    232 	.globl _setColorSelect
                                    233 	.globl _setColorHighlight1
                                    234 	.globl _setColorHighlight2
                                    235 	.globl _setColorGray
                                    236 	.globl _setColorMenu
                                    237 	.globl _setColorRed
                                    238 	.globl _setColorWhite
                                    239 	.globl _setColorGreen
                                    240 	.globl _setColorYellow
                                    241 	.globl _inputAddress
                                    242 	.globl _inputBlockType
                                    243 	.globl _inputBlockSize
                                    244 	.globl _printMenu
                                    245 	.globl _dump
                                    246 	.globl _move
                                    247 	.globl _edit
                                    248 	.globl _find
                                    249 	.globl _count
                                    250 	.globl _check
                                    251 	.globl _uart
                                    252 	.globl _main
                                    253 ;--------------------------------------------------------
                                    254 ; special function registers
                                    255 ;--------------------------------------------------------
                                    256 	.area RSEG    (ABS,DATA)
      000000                        257 	.org 0x0000
                           000080   258 _P0	=	0x0080
                           000081   259 _SP	=	0x0081
                           000082   260 _DPL	=	0x0082
                           000083   261 _DPH	=	0x0083
                           000087   262 _PCON	=	0x0087
                           000088   263 _TCON	=	0x0088
                           000089   264 _TMOD	=	0x0089
                           00008A   265 _TL0	=	0x008a
                           00008B   266 _TL1	=	0x008b
                           00008C   267 _TH0	=	0x008c
                           00008D   268 _TH1	=	0x008d
                           000090   269 _P1	=	0x0090
                           000098   270 _SCON	=	0x0098
                           000099   271 _SBUF	=	0x0099
                           0000A0   272 _P2	=	0x00a0
                           0000A8   273 _IE	=	0x00a8
                           0000B0   274 _P3	=	0x00b0
                           0000B8   275 _IP	=	0x00b8
                           0000C8   276 _T2CON	=	0x00c8
                           0000C9   277 _T2MOD	=	0x00c9
                           0000CA   278 _RCAP2L	=	0x00ca
                           0000CB   279 _RCAP2H	=	0x00cb
                           0000CC   280 _TL2	=	0x00cc
                           0000CD   281 _TH2	=	0x00cd
                           0000D0   282 _PSW	=	0x00d0
                           0000E0   283 _ACC	=	0x00e0
                           0000E0   284 _A	=	0x00e0
                           0000F0   285 _B	=	0x00f0
                                    286 ;--------------------------------------------------------
                                    287 ; special function bits
                                    288 ;--------------------------------------------------------
                                    289 	.area RSEG    (ABS,DATA)
      000000                        290 	.org 0x0000
                           000080   291 _P0_0	=	0x0080
                           000081   292 _P0_1	=	0x0081
                           000082   293 _P0_2	=	0x0082
                           000083   294 _P0_3	=	0x0083
                           000084   295 _P0_4	=	0x0084
                           000085   296 _P0_5	=	0x0085
                           000086   297 _P0_6	=	0x0086
                           000087   298 _P0_7	=	0x0087
                           000088   299 _IT0	=	0x0088
                           000089   300 _IE0	=	0x0089
                           00008A   301 _IT1	=	0x008a
                           00008B   302 _IE1	=	0x008b
                           00008C   303 _TR0	=	0x008c
                           00008D   304 _TF0	=	0x008d
                           00008E   305 _TR1	=	0x008e
                           00008F   306 _TF1	=	0x008f
                           000090   307 _P1_0	=	0x0090
                           000091   308 _P1_1	=	0x0091
                           000092   309 _P1_2	=	0x0092
                           000093   310 _P1_3	=	0x0093
                           000094   311 _P1_4	=	0x0094
                           000095   312 _P1_5	=	0x0095
                           000096   313 _P1_6	=	0x0096
                           000097   314 _P1_7	=	0x0097
                           000090   315 _T2	=	0x0090
                           000091   316 _T2EX	=	0x0091
                           000098   317 _RI	=	0x0098
                           000099   318 _TI	=	0x0099
                           00009A   319 _RB8	=	0x009a
                           00009B   320 _TB8	=	0x009b
                           00009C   321 _REN	=	0x009c
                           00009D   322 _SM2	=	0x009d
                           00009E   323 _SM1	=	0x009e
                           00009F   324 _SM0	=	0x009f
                           0000A0   325 _P2_0	=	0x00a0
                           0000A1   326 _P2_1	=	0x00a1
                           0000A2   327 _P2_2	=	0x00a2
                           0000A3   328 _P2_3	=	0x00a3
                           0000A4   329 _P2_4	=	0x00a4
                           0000A5   330 _P2_5	=	0x00a5
                           0000A6   331 _P2_6	=	0x00a6
                           0000A7   332 _P2_7	=	0x00a7
                           0000A8   333 _EX0	=	0x00a8
                           0000A9   334 _ET0	=	0x00a9
                           0000AA   335 _EX1	=	0x00aa
                           0000AB   336 _ET1	=	0x00ab
                           0000AC   337 _ES	=	0x00ac
                           0000AD   338 _ET2	=	0x00ad
                           0000AF   339 _EA	=	0x00af
                           0000B0   340 _P3_0	=	0x00b0
                           0000B1   341 _P3_1	=	0x00b1
                           0000B2   342 _P3_2	=	0x00b2
                           0000B3   343 _P3_3	=	0x00b3
                           0000B4   344 _P3_4	=	0x00b4
                           0000B5   345 _P3_5	=	0x00b5
                           0000B6   346 _P3_6	=	0x00b6
                           0000B7   347 _P3_7	=	0x00b7
                           0000B0   348 _RXD	=	0x00b0
                           0000B1   349 _TXD	=	0x00b1
                           0000B2   350 _INT0	=	0x00b2
                           0000B3   351 _INT1	=	0x00b3
                           0000B4   352 _T0	=	0x00b4
                           0000B5   353 _T1	=	0x00b5
                           0000B6   354 _WR	=	0x00b6
                           0000B7   355 _RD	=	0x00b7
                           0000B8   356 _PX0	=	0x00b8
                           0000B9   357 _PT0	=	0x00b9
                           0000BA   358 _PX1	=	0x00ba
                           0000BB   359 _PT1	=	0x00bb
                           0000BC   360 _PS	=	0x00bc
                           0000BD   361 _PT2	=	0x00bd
                           0000C8   362 _T2CON_0	=	0x00c8
                           0000C9   363 _T2CON_1	=	0x00c9
                           0000CA   364 _T2CON_2	=	0x00ca
                           0000CB   365 _T2CON_3	=	0x00cb
                           0000CC   366 _T2CON_4	=	0x00cc
                           0000CD   367 _T2CON_5	=	0x00cd
                           0000CE   368 _T2CON_6	=	0x00ce
                           0000CF   369 _T2CON_7	=	0x00cf
                           0000C8   370 _CP_RL2	=	0x00c8
                           0000C9   371 _C_T2	=	0x00c9
                           0000CA   372 _TR2	=	0x00ca
                           0000CB   373 _EXEN2	=	0x00cb
                           0000CC   374 _TCLK	=	0x00cc
                           0000CD   375 _RCLK	=	0x00cd
                           0000CE   376 _EXF2	=	0x00ce
                           0000CF   377 _TF2	=	0x00cf
                           0000D0   378 _P	=	0x00d0
                           0000D1   379 _FL	=	0x00d1
                           0000D2   380 _OV	=	0x00d2
                           0000D3   381 _RS0	=	0x00d3
                           0000D4   382 _RS1	=	0x00d4
                           0000D5   383 _F0	=	0x00d5
                           0000D6   384 _AC	=	0x00d6
                           0000D7   385 _CY	=	0x00d7
                                    386 ;--------------------------------------------------------
                                    387 ; overlayable register banks
                                    388 ;--------------------------------------------------------
                                    389 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        390 	.ds 8
                                    391 ;--------------------------------------------------------
                                    392 ; internal ram data
                                    393 ;--------------------------------------------------------
                                    394 	.area DSEG    (DATA)
      000000                        395 _colloc::
      000000                        396 	.ds 1
      000001                        397 _rowloc::
      000001                        398 	.ds 1
      000002                        399 _lcd_address::
      000002                        400 	.ds 2
      000004                        401 _seg7_address::
      000004                        402 	.ds 2
      000006                        403 _received_byte::
      000006                        404 	.ds 1
      000007                        405 _received_flag::
      000007                        406 	.ds 1
      000008                        407 _cursor_x::
      000008                        408 	.ds 2
      00000A                        409 _cursor_y::
      00000A                        410 	.ds 2
      00000C                        411 _textsize::
      00000C                        412 	.ds 1
      00000D                        413 _rotation::
      00000D                        414 	.ds 1
      00000E                        415 _textcolor::
      00000E                        416 	.ds 2
      000010                        417 _textbgcolor::
      000010                        418 	.ds 2
      000012                        419 __width::
      000012                        420 	.ds 2
      000014                        421 __height::
      000014                        422 	.ds 2
      000016                        423 _rtcWrite_PARM_2:
      000016                        424 	.ds 1
      000017                        425 _rtcPrint_printval_65536_222:
      000017                        426 	.ds 9
      000020                        427 _drawPixel_PARM_2:
      000020                        428 	.ds 2
      000022                        429 _drawPixel_PARM_3:
      000022                        430 	.ds 2
      000024                        431 _drawCircle_PARM_2:
      000024                        432 	.ds 2
      000026                        433 _drawCircle_PARM_3:
      000026                        434 	.ds 2
      000028                        435 _drawCircle_PARM_4:
      000028                        436 	.ds 2
      00002A                        437 _drawCircle_x0_65536_389:
      00002A                        438 	.ds 2
      00002C                        439 _drawCircle_f_65536_390:
      00002C                        440 	.ds 2
      00002E                        441 _drawCircle_ddF_x_65536_390:
      00002E                        442 	.ds 2
      000030                        443 _drawCircle_x_65536_390:
      000030                        444 	.ds 2
      000032                        445 _testCircles_PARM_2:
      000032                        446 	.ds 2
      000034                        447 _testCircles_w_65536_394:
      000034                        448 	.ds 2
      000036                        449 _testCircles_h_65536_394:
      000036                        450 	.ds 2
      000038                        451 _fillRect_PARM_2:
      000038                        452 	.ds 2
      00003A                        453 _fillRect_PARM_3:
      00003A                        454 	.ds 2
      00003C                        455 _fillRect_PARM_4:
      00003C                        456 	.ds 2
      00003E                        457 _fillRect_PARM_5:
      00003E                        458 	.ds 2
      000040                        459 _drawChar_PARM_2:
      000040                        460 	.ds 2
      000042                        461 _drawChar_PARM_3:
      000042                        462 	.ds 1
      000043                        463 _drawChar_PARM_4:
      000043                        464 	.ds 2
      000045                        465 _drawChar_PARM_5:
      000045                        466 	.ds 2
      000047                        467 _drawChar_PARM_6:
      000047                        468 	.ds 1
      000048                        469 _drawChar_x_65536_454:
      000048                        470 	.ds 2
      00004A                        471 _drawChar_i_131072_457:
      00004A                        472 	.ds 1
      00004B                        473 _drawChar_line_196608_458:
      00004B                        474 	.ds 1
      00004C                        475 _drawChar_sloc0_1_0:
      00004C                        476 	.ds 2
      00004E                        477 _asciiToHex_store_65536_515:
      00004E                        478 	.ds 2
      000050                        479 _dump_d_65536_547:
      000050                        480 	.ds 2
      000052                        481 _dump_sloc0_1_0:
      000052                        482 	.ds 1
      000053                        483 _move_d_65536_603:
      000053                        484 	.ds 2
      000055                        485 _move_i_131072_612:
      000055                        486 	.ds 2
      000057                        487 _edit_d_65536_622:
      000057                        488 	.ds 2
      000059                        489 _find_i_262144_659:
      000059                        490 	.ds 2
      00005B                        491 _find_sloc0_1_0:
      00005B                        492 	.ds 1
      00005C                        493 _find_sloc1_1_0:
      00005C                        494 	.ds 2
      00005E                        495 _count_i_262144_715:
      00005E                        496 	.ds 2
      000060                        497 _count_sloc0_1_0:
      000060                        498 	.ds 1
      000061                        499 _count_sloc1_1_0:
      000061                        500 	.ds 2
                                    501 ;--------------------------------------------------------
                                    502 ; overlayable items in internal ram 
                                    503 ;--------------------------------------------------------
                                    504 	.area	OSEG    (OVR,DATA)
      000000                        505 _iowrite8_PARM_2:
      000000                        506 	.ds 1
                                    507 	.area	OSEG    (OVR,DATA)
                                    508 	.area	OSEG    (OVR,DATA)
      000000                        509 _ramWrite8_PARM_2:
      000000                        510 	.ds 1
                                    511 	.area	OSEG    (OVR,DATA)
                                    512 	.area	OSEG    (OVR,DATA)
                                    513 	.area	OSEG    (OVR,DATA)
                                    514 	.area	OSEG    (OVR,DATA)
                                    515 	.area	OSEG    (OVR,DATA)
      000000                        516 _writeRegister8_PARM_2:
      000000                        517 	.ds 1
                                    518 	.area	OSEG    (OVR,DATA)
      000000                        519 _writeRegister16_PARM_2:
      000000                        520 	.ds 2
                                    521 	.area	OSEG    (OVR,DATA)
                                    522 	.area	OSEG    (OVR,DATA)
      000000                        523 _rtcCmd_PARM_2:
      000000                        524 	.ds 1
                                    525 	.area	OSEG    (OVR,DATA)
      000000                        526 _setCursor_PARM_2:
      000000                        527 	.ds 2
                                    528 	.area	OSEG    (OVR,DATA)
      000000                        529 _setTextColor_PARM_2:
      000000                        530 	.ds 2
                                    531 	.area	OSEG    (OVR,DATA)
                                    532 	.area	OSEG    (OVR,DATA)
      000000                        533 _setAddress_PARM_2:
      000000                        534 	.ds 2
      000002                        535 _setAddress_PARM_3:
      000002                        536 	.ds 2
      000004                        537 _setAddress_PARM_4:
      000004                        538 	.ds 2
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
                                    541 ;--------------------------------------------------------
                                    542 ; Stack segment in internal ram 
                                    543 ;--------------------------------------------------------
                                    544 	.area	SSEG
      000000                        545 __start__stack:
      000000                        546 	.ds	1
                                    547 
                                    548 ;--------------------------------------------------------
                                    549 ; indirectly addressable internal ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area ISEG    (DATA)
      000000                        552 _selection::
      000000                        553 	.ds 1
      000001                        554 _UART_en::
      000001                        555 	.ds 1
      000002                        556 _baudSet::
      000002                        557 	.ds 1
      000003                        558 _paritySet::
      000003                        559 	.ds 1
      000004                        560 _bitSet::
      000004                        561 	.ds 1
      000005                        562 _dump_address_65536_547:
      000005                        563 	.ds 2
      000007                        564 _dump_exit_65536_547:
      000007                        565 	.ds 1
      000008                        566 _move_sourceAddress_65536_603:
      000008                        567 	.ds 2
      00000A                        568 _move_invalidSize_65536_603:
      00000A                        569 	.ds 1
      00000B                        570 _edit_exit_65536_622:
      00000B                        571 	.ds 1
      00000C                        572 _edit_invalid_65536_622:
      00000C                        573 	.ds 1
      00000D                        574 _find_address_65536_646:
      00000D                        575 	.ds 2
      00000F                        576 _find_blockSize_65536_646:
      00000F                        577 	.ds 1
      000010                        578 _find_value_65536_646:
      000010                        579 	.ds 1
      000011                        580 _find_scan_65536_646:
      000011                        581 	.ds 1
      000012                        582 _find_noneFound_65536_646:
      000012                        583 	.ds 1
      000013                        584 _find_exit_65536_646:
      000013                        585 	.ds 1
      000014                        586 _count_address_65536_702:
      000014                        587 	.ds 2
      000016                        588 _count_blockSize_65536_702:
      000016                        589 	.ds 1
      000017                        590 _count_value_65536_702:
      000017                        591 	.ds 1
      000018                        592 _count_scan_65536_702:
      000018                        593 	.ds 1
      000019                        594 _count_noneFound_65536_702:
      000019                        595 	.ds 1
      00001A                        596 _count_exit_65536_702:
      00001A                        597 	.ds 1
                                    598 ;--------------------------------------------------------
                                    599 ; absolute internal ram data
                                    600 ;--------------------------------------------------------
                                    601 	.area IABS    (ABS,DATA)
                                    602 	.area IABS    (ABS,DATA)
                                    603 ;--------------------------------------------------------
                                    604 ; bit data
                                    605 ;--------------------------------------------------------
                                    606 	.area BSEG    (BIT)
                                    607 ;--------------------------------------------------------
                                    608 ; paged external ram data
                                    609 ;--------------------------------------------------------
                                    610 	.area PSEG    (PAG,XDATA)
                                    611 ;--------------------------------------------------------
                                    612 ; external ram data
                                    613 ;--------------------------------------------------------
                                    614 	.area XSEG    (XDATA)
                                    615 ;--------------------------------------------------------
                                    616 ; absolute external ram data
                                    617 ;--------------------------------------------------------
                                    618 	.area XABS    (ABS,XDATA)
                                    619 ;--------------------------------------------------------
                                    620 ; external initialized ram data
                                    621 ;--------------------------------------------------------
                                    622 	.area XISEG   (XDATA)
                                    623 	.area HOME    (CODE)
                                    624 	.area GSINIT0 (CODE)
                                    625 	.area GSINIT1 (CODE)
                                    626 	.area GSINIT2 (CODE)
                                    627 	.area GSINIT3 (CODE)
                                    628 	.area GSINIT4 (CODE)
                                    629 	.area GSINIT5 (CODE)
                                    630 	.area GSINIT  (CODE)
                                    631 	.area GSFINAL (CODE)
                                    632 	.area CSEG    (CODE)
                                    633 ;--------------------------------------------------------
                                    634 ; interrupt vector 
                                    635 ;--------------------------------------------------------
                                    636 	.area HOME    (CODE)
      000000                        637 __interrupt_vect:
      000000 02r00r00         [24]  638 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  639 	reti
      000004                        640 	.ds	7
      00000B 32               [24]  641 	reti
      00000C                        642 	.ds	7
      000013 32               [24]  643 	reti
      000014                        644 	.ds	7
      00001B 32               [24]  645 	reti
      00001C                        646 	.ds	7
      000023 02r01r29         [24]  647 	ljmp	_ISR_receive
                                    648 ;--------------------------------------------------------
                                    649 ; global & static initialisations
                                    650 ;--------------------------------------------------------
                                    651 	.area HOME    (CODE)
                                    652 	.area GSINIT  (CODE)
                                    653 	.area GSFINAL (CODE)
                                    654 	.area GSINIT  (CODE)
                                    655 	.globl __sdcc_gsinit_startup
                                    656 	.globl __sdcc_program_startup
                                    657 	.globl __start__stack
                                    658 	.globl __mcs51_genXINIT
                                    659 	.globl __mcs51_genXRAMCLEAR
                                    660 	.globl __mcs51_genRAMCLEAR
                                    661 ;	.\ecen4350_lcd_v4.c:45: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000000 75*02 00         [24]  662 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  663 	mov	(_lcd_address + 1),#0x40
                                    664 ;	.\ecen4350_lcd_v4.c:46: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000006 75*04 00         [24]  665 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  666 	mov	(_seg7_address + 1),#0x80
                                    667 ;	.\ecen4350_lcd_v4.c:48: volatile unsigned char received_byte = 0;
      00000C 75*06 00         [24]  668 	mov	_received_byte,#0x00
                                    669 ;	.\ecen4350_lcd_v4.c:49: volatile unsigned char received_flag = 0;
      00000F 75*07 00         [24]  670 	mov	_received_flag,#0x00
                                    671 ;	.\ecen4350_lcd_v4.c:52: __idata unsigned char UART_en = 0;
      000012 78r01            [12]  672 	mov	r0,#_UART_en
      000014 76 00            [12]  673 	mov	@r0,#0x00
                                    674 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char baudSet = 0;
      000016 78r02            [12]  675 	mov	r0,#_baudSet
      000018 76 00            [12]  676 	mov	@r0,#0x00
                                    677 ;	.\ecen4350_lcd_v4.c:54: __idata unsigned char paritySet = 0;
      00001A 78r03            [12]  678 	mov	r0,#_paritySet
      00001C 76 00            [12]  679 	mov	@r0,#0x00
                                    680 ;	.\ecen4350_lcd_v4.c:55: __idata unsigned char bitSet = 0;
      00001E 78r04            [12]  681 	mov	r0,#_bitSet
      000020 76 00            [12]  682 	mov	@r0,#0x00
                                    683 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  684 	ljmp	__sdcc_program_startup
                                    685 ;--------------------------------------------------------
                                    686 ; Home
                                    687 ;--------------------------------------------------------
                                    688 	.area HOME    (CODE)
                                    689 	.area HOME    (CODE)
      000026                        690 __sdcc_program_startup:
      000026 02r49r1C         [24]  691 	ljmp	_main
                                    692 ;	return from main will return to caller
                                    693 ;--------------------------------------------------------
                                    694 ; code
                                    695 ;--------------------------------------------------------
                                    696 	.area CSEG    (CODE)
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'iowrite8'
                                    699 ;------------------------------------------------------------
                                    700 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    701 ;map_address               Allocated to registers 
                                    702 ;------------------------------------------------------------
                                    703 ;	.\ecen4350_lcd_v4.c:92: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    704 ;	-----------------------------------------
                                    705 ;	 function iowrite8
                                    706 ;	-----------------------------------------
      000000                        707 _iowrite8:
                           000007   708 	ar7 = 0x07
                           000006   709 	ar6 = 0x06
                           000005   710 	ar5 = 0x05
                           000004   711 	ar4 = 0x04
                           000003   712 	ar3 = 0x03
                           000002   713 	ar2 = 0x02
                           000001   714 	ar1 = 0x01
                           000000   715 	ar0 = 0x00
                                    716 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    717 ;	assignBit
      000000 D2 B5            [12]  718 	setb	_P3_5
                                    719 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000002 E5*00            [12]  720 	mov	a,_iowrite8_PARM_2
      000004 F0               [24]  721 	movx	@dptr,a
                                    722 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    723 ;	assignBit
      000005 C2 B5            [12]  724 	clr	_P3_5
                                    725 ;	.\ecen4350_lcd_v4.c:96: }
      000007 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'ioread8'
                                    729 ;------------------------------------------------------------
                                    730 ;map_address               Allocated to registers 
                                    731 ;d                         Allocated to registers r7 
                                    732 ;------------------------------------------------------------
                                    733 ;	.\ecen4350_lcd_v4.c:98: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    734 ;	-----------------------------------------
                                    735 ;	 function ioread8
                                    736 ;	-----------------------------------------
      000008                        737 _ioread8:
                                    738 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                    739 ;	assignBit
      000008 D2 B5            [12]  740 	setb	_P3_5
                                    741 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00000A E0               [24]  742 	movx	a,@dptr
      00000B FF               [12]  743 	mov	r7,a
                                    744 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                    745 ;	assignBit
      00000C C2 B5            [12]  746 	clr	_P3_5
                                    747 ;	.\ecen4350_lcd_v4.c:104: return d;
      00000E 8F 82            [24]  748 	mov	dpl,r7
                                    749 ;	.\ecen4350_lcd_v4.c:105: }
      000010 22               [24]  750 	ret
                                    751 ;------------------------------------------------------------
                                    752 ;Allocation info for local variables in function 'ramWrite8'
                                    753 ;------------------------------------------------------------
                                    754 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    755 ;map_address               Allocated to registers 
                                    756 ;------------------------------------------------------------
                                    757 ;	.\ecen4350_lcd_v4.c:107: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    758 ;	-----------------------------------------
                                    759 ;	 function ramWrite8
                                    760 ;	-----------------------------------------
      000011                        761 _ramWrite8:
                                    762 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                    763 ;	assignBit
      000011 C2 B5            [12]  764 	clr	_P3_5
                                    765 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      000013 E5*00            [12]  766 	mov	a,_ramWrite8_PARM_2
      000015 F0               [24]  767 	movx	@dptr,a
                                    768 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                    769 ;	assignBit
      000016 D2 B5            [12]  770 	setb	_P3_5
                                    771 ;	.\ecen4350_lcd_v4.c:112: }
      000018 22               [24]  772 	ret
                                    773 ;------------------------------------------------------------
                                    774 ;Allocation info for local variables in function 'ramRead8'
                                    775 ;------------------------------------------------------------
                                    776 ;map_address               Allocated to registers 
                                    777 ;d                         Allocated to registers r7 
                                    778 ;------------------------------------------------------------
                                    779 ;	.\ecen4350_lcd_v4.c:114: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    780 ;	-----------------------------------------
                                    781 ;	 function ramRead8
                                    782 ;	-----------------------------------------
      000019                        783 _ramRead8:
                                    784 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                    785 ;	assignBit
      000019 C2 B5            [12]  786 	clr	_P3_5
                                    787 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00001B E0               [24]  788 	movx	a,@dptr
      00001C FF               [12]  789 	mov	r7,a
                                    790 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                    791 ;	assignBit
      00001D D2 B5            [12]  792 	setb	_P3_5
                                    793 ;	.\ecen4350_lcd_v4.c:120: return d;
      00001F 8F 82            [24]  794 	mov	dpl,r7
                                    795 ;	.\ecen4350_lcd_v4.c:121: }
      000021 22               [24]  796 	ret
                                    797 ;------------------------------------------------------------
                                    798 ;Allocation info for local variables in function 'writeAllRAM'
                                    799 ;------------------------------------------------------------
                                    800 ;d                         Allocated to registers r7 
                                    801 ;i                         Allocated to registers r3 r4 r5 r6 
                                    802 ;ram_address               Allocated to registers 
                                    803 ;------------------------------------------------------------
                                    804 ;	.\ecen4350_lcd_v4.c:123: void writeAllRAM(unsigned char d)
                                    805 ;	-----------------------------------------
                                    806 ;	 function writeAllRAM
                                    807 ;	-----------------------------------------
      000022                        808 _writeAllRAM:
      000022 AF 82            [24]  809 	mov	r7,dpl
                                    810 ;	.\ecen4350_lcd_v4.c:128: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000024 7B 00            [12]  811 	mov	r3,#0x00
      000026 7C 00            [12]  812 	mov	r4,#0x00
      000028 7D 00            [12]  813 	mov	r5,#0x00
      00002A 7E 00            [12]  814 	mov	r6,#0x00
      00002C                        815 00102$:
                                    816 ;	.\ecen4350_lcd_v4.c:130: IOM = 0;
                                    817 ;	assignBit
      00002C C2 B5            [12]  818 	clr	_P3_5
                                    819 ;	.\ecen4350_lcd_v4.c:131: ram_address = (unsigned char __xdata *)(i);
      00002E 8B 82            [24]  820 	mov	dpl,r3
      000030 8C 83            [24]  821 	mov	dph,r4
                                    822 ;	.\ecen4350_lcd_v4.c:132: *ram_address = d;
      000032 EF               [12]  823 	mov	a,r7
      000033 F0               [24]  824 	movx	@dptr,a
                                    825 ;	.\ecen4350_lcd_v4.c:133: IOM = 1;
                                    826 ;	assignBit
      000034 D2 B5            [12]  827 	setb	_P3_5
                                    828 ;	.\ecen4350_lcd_v4.c:128: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000036 0B               [12]  829 	inc	r3
      000037 BB 00 09         [24]  830 	cjne	r3,#0x00,00111$
      00003A 0C               [12]  831 	inc	r4
      00003B BC 00 05         [24]  832 	cjne	r4,#0x00,00111$
      00003E 0D               [12]  833 	inc	r5
      00003F BD 00 01         [24]  834 	cjne	r5,#0x00,00111$
      000042 0E               [12]  835 	inc	r6
      000043                        836 00111$:
      000043 C3               [12]  837 	clr	c
      000044 74 FF            [12]  838 	mov	a,#0xff
      000046 9B               [12]  839 	subb	a,r3
      000047 74 FF            [12]  840 	mov	a,#0xff
      000049 9C               [12]  841 	subb	a,r4
      00004A E4               [12]  842 	clr	a
      00004B 9D               [12]  843 	subb	a,r5
      00004C E4               [12]  844 	clr	a
      00004D 9E               [12]  845 	subb	a,r6
      00004E 50 DC            [24]  846 	jnc	00102$
                                    847 ;	.\ecen4350_lcd_v4.c:135: }
      000050 22               [24]  848 	ret
                                    849 ;------------------------------------------------------------
                                    850 ;Allocation info for local variables in function 'checkAllRAM'
                                    851 ;------------------------------------------------------------
                                    852 ;d                         Allocated to registers r7 
                                    853 ;ram_address               Allocated to registers 
                                    854 ;i                         Allocated to registers r3 r4 r5 r6 
                                    855 ;__3276800001              Allocated to registers 
                                    856 ;__3276800002              Allocated to registers 
                                    857 ;map_address               Allocated to registers 
                                    858 ;d                         Allocated to registers 
                                    859 ;__2621440004              Allocated to registers 
                                    860 ;__2621440005              Allocated to registers 
                                    861 ;map_address               Allocated to registers 
                                    862 ;d                         Allocated to registers 
                                    863 ;------------------------------------------------------------
                                    864 ;	.\ecen4350_lcd_v4.c:137: void checkAllRAM(unsigned char d)
                                    865 ;	-----------------------------------------
                                    866 ;	 function checkAllRAM
                                    867 ;	-----------------------------------------
      000051                        868 _checkAllRAM:
      000051 AF 82            [24]  869 	mov	r7,dpl
                                    870 ;	.\ecen4350_lcd_v4.c:140: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000053 7B 00            [12]  871 	mov	r3,#0x00
      000055 7C 00            [12]  872 	mov	r4,#0x00
      000057 7D 00            [12]  873 	mov	r5,#0x00
      000059 7E 00            [12]  874 	mov	r6,#0x00
      00005B                        875 00107$:
      00005B C3               [12]  876 	clr	c
      00005C 74 FF            [12]  877 	mov	a,#0xff
      00005E 9B               [12]  878 	subb	a,r3
      00005F 74 FF            [12]  879 	mov	a,#0xff
      000061 9C               [12]  880 	subb	a,r4
      000062 E4               [12]  881 	clr	a
      000063 9D               [12]  882 	subb	a,r5
      000064 E4               [12]  883 	clr	a
      000065 9E               [12]  884 	subb	a,r6
      000066 50 01            [24]  885 	jnc	00124$
      000068 22               [24]  886 	ret
      000069                        887 00124$:
                                    888 ;	.\ecen4350_lcd_v4.c:141: IOM = 0;
                                    889 ;	assignBit
      000069 C2 B5            [12]  890 	clr	_P3_5
                                    891 ;	.\ecen4350_lcd_v4.c:142: ram_address = (unsigned char __xdata *)(i);
      00006B 8B 82            [24]  892 	mov	dpl,r3
      00006D 8C 83            [24]  893 	mov	dph,r4
                                    894 ;	.\ecen4350_lcd_v4.c:144: if(d != *ram_address) {
      00006F E0               [24]  895 	movx	a,@dptr
      000070 FA               [12]  896 	mov	r2,a
      000071 EF               [12]  897 	mov	a,r7
      000072 B5 02 02         [24]  898 	cjne	a,ar2,00125$
      000075 80 4A            [24]  899 	sjmp	00102$
      000077                        900 00125$:
                                    901 ;	.\ecen4350_lcd_v4.c:145: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      000077 85*04 82         [24]  902 	mov	dpl,_seg7_address
      00007A 85*05 83         [24]  903 	mov	dph,(_seg7_address + 1)
                                    904 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    905 ;	assignBit
      00007D D2 B5            [12]  906 	setb	_P3_5
                                    907 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00007F 74 8E            [12]  908 	mov	a,#0x8e
      000081 F0               [24]  909 	movx	@dptr,a
                                    910 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    911 ;	assignBit
      000082 C2 B5            [12]  912 	clr	_P3_5
                                    913 ;	.\ecen4350_lcd_v4.c:146: setCursor(0,0);
      000084 E4               [12]  914 	clr	a
      000085 F5*00            [12]  915 	mov	_setCursor_PARM_2,a
      000087 F5*01            [12]  916 	mov	(_setCursor_PARM_2 + 1),a
      000089 90 00 00         [24]  917 	mov	dptr,#0x0000
      00008C C0 07            [24]  918 	push	ar7
      00008E C0 06            [24]  919 	push	ar6
      000090 C0 05            [24]  920 	push	ar5
      000092 C0 04            [24]  921 	push	ar4
      000094 C0 03            [24]  922 	push	ar3
      000096 12r04rB6         [24]  923 	lcall	_setCursor
                                    924 ;	.\ecen4350_lcd_v4.c:147: LCD_string_write("ERROR FOUND At: ");
      000099 90r05r0B         [24]  925 	mov	dptr,#___str_0
      00009C 75 F0 80         [24]  926 	mov	b,#0x80
      00009F 12r0FrD0         [24]  927 	lcall	_LCD_string_write
      0000A2 D0 03            [24]  928 	pop	ar3
      0000A4 D0 04            [24]  929 	pop	ar4
                                    930 ;	.\ecen4350_lcd_v4.c:148: print16Hex(i);
      0000A6 8B 82            [24]  931 	mov	dpl,r3
      0000A8 8C 83            [24]  932 	mov	dph,r4
      0000AA C0 04            [24]  933 	push	ar4
      0000AC C0 03            [24]  934 	push	ar3
      0000AE 12r14rB8         [24]  935 	lcall	_print16Hex
                                    936 ;	.\ecen4350_lcd_v4.c:149: delay(40);
      0000B1 90 00 28         [24]  937 	mov	dptr,#0x0028
      0000B4 12r00rE0         [24]  938 	lcall	_delay
      0000B7 D0 03            [24]  939 	pop	ar3
      0000B9 D0 04            [24]  940 	pop	ar4
      0000BB D0 05            [24]  941 	pop	ar5
      0000BD D0 06            [24]  942 	pop	ar6
      0000BF D0 07            [24]  943 	pop	ar7
      0000C1                        944 00102$:
                                    945 ;	.\ecen4350_lcd_v4.c:151: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      0000C1 85*04 82         [24]  946 	mov	dpl,_seg7_address
      0000C4 85*05 83         [24]  947 	mov	dph,(_seg7_address + 1)
                                    948 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    949 ;	assignBit
      0000C7 D2 B5            [12]  950 	setb	_P3_5
                                    951 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0000C9 74 8C            [12]  952 	mov	a,#0x8c
      0000CB F0               [24]  953 	movx	@dptr,a
                                    954 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    955 ;	assignBit
      0000CC C2 B5            [12]  956 	clr	_P3_5
                                    957 ;	.\ecen4350_lcd_v4.c:152: IOM = 1;
                                    958 ;	assignBit
      0000CE D2 B5            [12]  959 	setb	_P3_5
                                    960 ;	.\ecen4350_lcd_v4.c:140: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      0000D0 0B               [12]  961 	inc	r3
      0000D1 BB 00 09         [24]  962 	cjne	r3,#0x00,00126$
      0000D4 0C               [12]  963 	inc	r4
      0000D5 BC 00 05         [24]  964 	cjne	r4,#0x00,00126$
      0000D8 0D               [12]  965 	inc	r5
      0000D9 BD 00 01         [24]  966 	cjne	r5,#0x00,00126$
      0000DC 0E               [12]  967 	inc	r6
      0000DD                        968 00126$:
                                    969 ;	.\ecen4350_lcd_v4.c:154: }
      0000DD 02r00r5B         [24]  970 	ljmp	00107$
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'delay'
                                    973 ;------------------------------------------------------------
                                    974 ;d                         Allocated to registers r6 r7 
                                    975 ;i                         Allocated to registers r4 r5 
                                    976 ;j                         Allocated to registers r2 r3 
                                    977 ;------------------------------------------------------------
                                    978 ;	.\ecen4350_lcd_v4.c:156: void delay(int d) /// x 1ms
                                    979 ;	-----------------------------------------
                                    980 ;	 function delay
                                    981 ;	-----------------------------------------
      0000E0                        982 _delay:
      0000E0 AE 82            [24]  983 	mov	r6,dpl
      0000E2 AF 83            [24]  984 	mov	r7,dph
                                    985 ;	.\ecen4350_lcd_v4.c:159: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0000E4 7C 00            [12]  986 	mov	r4,#0x00
      0000E6 7D 00            [12]  987 	mov	r5,#0x00
      0000E8                        988 00107$:
      0000E8 C3               [12]  989 	clr	c
      0000E9 EC               [12]  990 	mov	a,r4
      0000EA 9E               [12]  991 	subb	a,r6
      0000EB ED               [12]  992 	mov	a,r5
      0000EC 64 80            [12]  993 	xrl	a,#0x80
      0000EE 8F F0            [24]  994 	mov	b,r7
      0000F0 63 F0 80         [24]  995 	xrl	b,#0x80
      0000F3 95 F0            [12]  996 	subb	a,b
      0000F5 50 1B            [24]  997 	jnc	00109$
                                    998 ;	.\ecen4350_lcd_v4.c:161: for (j = 0; j < 1000; j++);
      0000F7 7A E8            [12]  999 	mov	r2,#0xe8
      0000F9 7B 03            [12] 1000 	mov	r3,#0x03
      0000FB                       1001 00105$:
      0000FB EA               [12] 1002 	mov	a,r2
      0000FC 24 FF            [12] 1003 	add	a,#0xff
      0000FE F8               [12] 1004 	mov	r0,a
      0000FF EB               [12] 1005 	mov	a,r3
      000100 34 FF            [12] 1006 	addc	a,#0xff
      000102 F9               [12] 1007 	mov	r1,a
      000103 88 02            [24] 1008 	mov	ar2,r0
      000105 89 03            [24] 1009 	mov	ar3,r1
      000107 E8               [12] 1010 	mov	a,r0
      000108 49               [12] 1011 	orl	a,r1
      000109 70 F0            [24] 1012 	jnz	00105$
                                   1013 ;	.\ecen4350_lcd_v4.c:159: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      00010B 0C               [12] 1014 	inc	r4
      00010C BC 00 D9         [24] 1015 	cjne	r4,#0x00,00107$
      00010F 0D               [12] 1016 	inc	r5
      000110 80 D6            [24] 1017 	sjmp	00107$
      000112                       1018 00109$:
                                   1019 ;	.\ecen4350_lcd_v4.c:163: }
      000112 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'UART_Init'
                                   1023 ;------------------------------------------------------------
                                   1024 ;	.\ecen4350_lcd_v4.c:165: void UART_Init(){
                                   1025 ;	-----------------------------------------
                                   1026 ;	 function UART_Init
                                   1027 ;	-----------------------------------------
      000113                       1028 _UART_Init:
                                   1029 ;	.\ecen4350_lcd_v4.c:166: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      000113 75 98 50         [24] 1030 	mov	_SCON,#0x50
                                   1031 ;	.\ecen4350_lcd_v4.c:167: TMOD = 0x20;  // Timer1 input Mode2. input 8 bit auto reload
      000116 75 89 20         [24] 1032 	mov	_TMOD,#0x20
                                   1033 ;	.\ecen4350_lcd_v4.c:168: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                   1034 ;	assignBit
      000119 D2 8E            [12] 1035 	setb	_TR1
                                   1036 ;	.\ecen4350_lcd_v4.c:169: ES  = 1;      // Enable Serial Interrupt
                                   1037 ;	assignBit
      00011B D2 AC            [12] 1038 	setb	_ES
                                   1039 ;	.\ecen4350_lcd_v4.c:170: EA  = 1;      // Enable Global Interrupt bit
                                   1040 ;	assignBit
      00011D D2 AF            [12] 1041 	setb	_EA
                                   1042 ;	.\ecen4350_lcd_v4.c:171: }
      00011F 22               [24] 1043 	ret
                                   1044 ;------------------------------------------------------------
                                   1045 ;Allocation info for local variables in function 'UART_transmit'
                                   1046 ;------------------------------------------------------------
                                   1047 ;byte                      Allocated to registers 
                                   1048 ;------------------------------------------------------------
                                   1049 ;	.\ecen4350_lcd_v4.c:174: void UART_transmit(unsigned char byte){
                                   1050 ;	-----------------------------------------
                                   1051 ;	 function UART_transmit
                                   1052 ;	-----------------------------------------
      000120                       1053 _UART_transmit:
      000120 85 82 99         [24] 1054 	mov	_SBUF,dpl
                                   1055 ;	.\ecen4350_lcd_v4.c:176: while(TI == 1);
      000123                       1056 00101$:
      000123 20 99 FD         [24] 1057 	jb	_TI,00101$
                                   1058 ;	.\ecen4350_lcd_v4.c:177: TI = 0;
                                   1059 ;	assignBit
      000126 C2 99            [12] 1060 	clr	_TI
                                   1061 ;	.\ecen4350_lcd_v4.c:178: }
      000128 22               [24] 1062 	ret
                                   1063 ;------------------------------------------------------------
                                   1064 ;Allocation info for local variables in function 'ISR_receive'
                                   1065 ;------------------------------------------------------------
                                   1066 ;	.\ecen4350_lcd_v4.c:180: void ISR_receive() __interrupt (4) {
                                   1067 ;	-----------------------------------------
                                   1068 ;	 function ISR_receive
                                   1069 ;	-----------------------------------------
      000129                       1070 _ISR_receive:
                                   1071 ;	.\ecen4350_lcd_v4.c:181: if (RI == 1){
      000129 30 98 08         [24] 1072 	jnb	_RI,00103$
                                   1073 ;	.\ecen4350_lcd_v4.c:182: received_byte = SBUF;
      00012C 85 99*06         [24] 1074 	mov	_received_byte,_SBUF
                                   1075 ;	.\ecen4350_lcd_v4.c:183: RI = 0;
                                   1076 ;	assignBit
      00012F C2 98            [12] 1077 	clr	_RI
                                   1078 ;	.\ecen4350_lcd_v4.c:184: received_flag= 1;
      000131 75*07 01         [24] 1079 	mov	_received_flag,#0x01
      000134                       1080 00103$:
                                   1081 ;	.\ecen4350_lcd_v4.c:186: }
      000134 32               [24] 1082 	reti
                                   1083 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1084 ;	eliminated unneeded push/pop psw
                                   1085 ;	eliminated unneeded push/pop dpl
                                   1086 ;	eliminated unneeded push/pop dph
                                   1087 ;	eliminated unneeded push/pop b
                                   1088 ;	eliminated unneeded push/pop acc
                                   1089 ;------------------------------------------------------------
                                   1090 ;Allocation info for local variables in function 'writeRegister8'
                                   1091 ;------------------------------------------------------------
                                   1092 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1093 ;address                   Allocated to registers r7 
                                   1094 ;------------------------------------------------------------
                                   1095 ;	.\ecen4350_lcd_v4.c:188: void writeRegister8(u8 address, u8 d)
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function writeRegister8
                                   1098 ;	-----------------------------------------
      000135                       1099 _writeRegister8:
      000135 AF 82            [24] 1100 	mov	r7,dpl
                                   1101 ;	.\ecen4350_lcd_v4.c:191: CD = __CMD__;
                                   1102 ;	assignBit
      000137 C2 B4            [12] 1103 	clr	_P3_4
                                   1104 ;	.\ecen4350_lcd_v4.c:192: write8(address);
                                   1105 ;	assignBit
      000139 D2 B5            [12] 1106 	setb	_P3_5
      00013B 85*02 82         [24] 1107 	mov	dpl,_lcd_address
      00013E 85*03 83         [24] 1108 	mov	dph,(_lcd_address + 1)
      000141 EF               [12] 1109 	mov	a,r7
      000142 F0               [24] 1110 	movx	@dptr,a
                                   1111 ;	assignBit
      000143 C2 B5            [12] 1112 	clr	_P3_5
                                   1113 ;	.\ecen4350_lcd_v4.c:193: CD = __DATA__;
                                   1114 ;	assignBit
      000145 D2 B4            [12] 1115 	setb	_P3_4
                                   1116 ;	.\ecen4350_lcd_v4.c:194: write8(d);
                                   1117 ;	assignBit
      000147 D2 B5            [12] 1118 	setb	_P3_5
      000149 85*02 82         [24] 1119 	mov	dpl,_lcd_address
      00014C 85*03 83         [24] 1120 	mov	dph,(_lcd_address + 1)
      00014F E5*00            [12] 1121 	mov	a,_writeRegister8_PARM_2
      000151 F0               [24] 1122 	movx	@dptr,a
                                   1123 ;	assignBit
      000152 C2 B5            [12] 1124 	clr	_P3_5
                                   1125 ;	.\ecen4350_lcd_v4.c:196: }
      000154 22               [24] 1126 	ret
                                   1127 ;------------------------------------------------------------
                                   1128 ;Allocation info for local variables in function 'writeRegister16'
                                   1129 ;------------------------------------------------------------
                                   1130 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1131 ;address                   Allocated to registers r6 r7 
                                   1132 ;hi                        Allocated to registers r6 r7 
                                   1133 ;lo                        Allocated to registers r4 r5 
                                   1134 ;------------------------------------------------------------
                                   1135 ;	.\ecen4350_lcd_v4.c:198: void writeRegister16(u16 address, u16 d)
                                   1136 ;	-----------------------------------------
                                   1137 ;	 function writeRegister16
                                   1138 ;	-----------------------------------------
      000155                       1139 _writeRegister16:
      000155 AE 82            [24] 1140 	mov	r6,dpl
      000157 AF 83            [24] 1141 	mov	r7,dph
                                   1142 ;	.\ecen4350_lcd_v4.c:201: hi = (address) >> 8;
      000159 8F 04            [24] 1143 	mov	ar4,r7
                                   1144 ;	.\ecen4350_lcd_v4.c:202: lo = (address);
                                   1145 ;	.\ecen4350_lcd_v4.c:205: write8Reg(hi);
                                   1146 ;	assignBit
      00015B C2 B4            [12] 1147 	clr	_P3_4
                                   1148 ;	assignBit
      00015D D2 B5            [12] 1149 	setb	_P3_5
      00015F 85*02 82         [24] 1150 	mov	dpl,_lcd_address
      000162 85*03 83         [24] 1151 	mov	dph,(_lcd_address + 1)
      000165 EC               [12] 1152 	mov	a,r4
      000166 F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	assignBit
      000167 C2 B5            [12] 1155 	clr	_P3_5
                                   1156 ;	.\ecen4350_lcd_v4.c:206: write8Reg(lo);
                                   1157 ;	assignBit
      000169 C2 B4            [12] 1158 	clr	_P3_4
                                   1159 ;	assignBit
      00016B D2 B5            [12] 1160 	setb	_P3_5
      00016D 85*02 82         [24] 1161 	mov	dpl,_lcd_address
      000170 85*03 83         [24] 1162 	mov	dph,(_lcd_address + 1)
      000173 EE               [12] 1163 	mov	a,r6
      000174 F0               [24] 1164 	movx	@dptr,a
                                   1165 ;	assignBit
      000175 C2 B5            [12] 1166 	clr	_P3_5
                                   1167 ;	.\ecen4350_lcd_v4.c:207: hi = (d) >> 8;
      000177 AE*01            [24] 1168 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1169 ;	.\ecen4350_lcd_v4.c:208: lo = (d);
      000179 AC*00            [24] 1170 	mov	r4,_writeRegister16_PARM_2
                                   1171 ;	.\ecen4350_lcd_v4.c:209: CD = 1;
                                   1172 ;	assignBit
      00017B D2 B4            [12] 1173 	setb	_P3_4
                                   1174 ;	.\ecen4350_lcd_v4.c:210: write8Data(hi);
                                   1175 ;	assignBit
      00017D D2 B4            [12] 1176 	setb	_P3_4
                                   1177 ;	assignBit
      00017F D2 B5            [12] 1178 	setb	_P3_5
      000181 85*02 82         [24] 1179 	mov	dpl,_lcd_address
      000184 85*03 83         [24] 1180 	mov	dph,(_lcd_address + 1)
      000187 EE               [12] 1181 	mov	a,r6
      000188 F0               [24] 1182 	movx	@dptr,a
                                   1183 ;	assignBit
      000189 C2 B5            [12] 1184 	clr	_P3_5
                                   1185 ;	.\ecen4350_lcd_v4.c:211: write8Data(lo);
                                   1186 ;	assignBit
      00018B D2 B4            [12] 1187 	setb	_P3_4
                                   1188 ;	assignBit
      00018D D2 B5            [12] 1189 	setb	_P3_5
      00018F 85*02 82         [24] 1190 	mov	dpl,_lcd_address
      000192 85*03 83         [24] 1191 	mov	dph,(_lcd_address + 1)
      000195 EC               [12] 1192 	mov	a,r4
      000196 F0               [24] 1193 	movx	@dptr,a
                                   1194 ;	assignBit
      000197 C2 B5            [12] 1195 	clr	_P3_5
                                   1196 ;	.\ecen4350_lcd_v4.c:213: }
      000199 22               [24] 1197 	ret
                                   1198 ;------------------------------------------------------------
                                   1199 ;Allocation info for local variables in function 'seg7Test'
                                   1200 ;------------------------------------------------------------
                                   1201 ;__1310720007              Allocated to registers 
                                   1202 ;__1310720008              Allocated to registers 
                                   1203 ;map_address               Allocated to registers 
                                   1204 ;d                         Allocated to registers 
                                   1205 ;__1310720010              Allocated to registers 
                                   1206 ;__1310720011              Allocated to registers 
                                   1207 ;map_address               Allocated to registers 
                                   1208 ;d                         Allocated to registers 
                                   1209 ;__1310720013              Allocated to registers 
                                   1210 ;__1310720014              Allocated to registers 
                                   1211 ;map_address               Allocated to registers 
                                   1212 ;d                         Allocated to registers 
                                   1213 ;__1310720016              Allocated to registers 
                                   1214 ;__1310720017              Allocated to registers 
                                   1215 ;map_address               Allocated to registers 
                                   1216 ;d                         Allocated to registers 
                                   1217 ;__1310720019              Allocated to registers 
                                   1218 ;__1310720020              Allocated to registers 
                                   1219 ;map_address               Allocated to registers 
                                   1220 ;d                         Allocated to registers 
                                   1221 ;__1310720022              Allocated to registers 
                                   1222 ;__1310720023              Allocated to registers 
                                   1223 ;map_address               Allocated to registers 
                                   1224 ;d                         Allocated to registers 
                                   1225 ;__1310720025              Allocated to registers 
                                   1226 ;__1310720026              Allocated to registers 
                                   1227 ;map_address               Allocated to registers 
                                   1228 ;d                         Allocated to registers 
                                   1229 ;__1310720028              Allocated to registers 
                                   1230 ;__1310720029              Allocated to registers 
                                   1231 ;map_address               Allocated to registers 
                                   1232 ;d                         Allocated to registers 
                                   1233 ;__1310720031              Allocated to registers 
                                   1234 ;__1310720032              Allocated to registers 
                                   1235 ;map_address               Allocated to registers 
                                   1236 ;d                         Allocated to registers 
                                   1237 ;__1310720034              Allocated to registers 
                                   1238 ;__1310720035              Allocated to registers 
                                   1239 ;map_address               Allocated to registers 
                                   1240 ;d                         Allocated to registers 
                                   1241 ;__1310720037              Allocated to registers 
                                   1242 ;__1310720038              Allocated to registers 
                                   1243 ;map_address               Allocated to registers 
                                   1244 ;d                         Allocated to registers 
                                   1245 ;__1310720040              Allocated to registers 
                                   1246 ;__1310720041              Allocated to registers 
                                   1247 ;map_address               Allocated to registers 
                                   1248 ;d                         Allocated to registers 
                                   1249 ;__1310720043              Allocated to registers 
                                   1250 ;__1310720044              Allocated to registers 
                                   1251 ;map_address               Allocated to registers 
                                   1252 ;d                         Allocated to registers 
                                   1253 ;__1310720046              Allocated to registers 
                                   1254 ;__1310720047              Allocated to registers 
                                   1255 ;map_address               Allocated to registers 
                                   1256 ;d                         Allocated to registers 
                                   1257 ;__1310720049              Allocated to registers 
                                   1258 ;__1310720050              Allocated to registers 
                                   1259 ;map_address               Allocated to registers 
                                   1260 ;d                         Allocated to registers 
                                   1261 ;__1310720052              Allocated to registers 
                                   1262 ;__1310720053              Allocated to registers 
                                   1263 ;map_address               Allocated to registers 
                                   1264 ;d                         Allocated to registers 
                                   1265 ;__1310720055              Allocated to registers 
                                   1266 ;__1310720056              Allocated to registers 
                                   1267 ;map_address               Allocated to registers 
                                   1268 ;d                         Allocated to registers 
                                   1269 ;__1310720058              Allocated to registers 
                                   1270 ;__1310720059              Allocated to registers 
                                   1271 ;map_address               Allocated to registers 
                                   1272 ;d                         Allocated to registers 
                                   1273 ;------------------------------------------------------------
                                   1274 ;	.\ecen4350_lcd_v4.c:215: void seg7Test(void)
                                   1275 ;	-----------------------------------------
                                   1276 ;	 function seg7Test
                                   1277 ;	-----------------------------------------
      00019A                       1278 _seg7Test:
                                   1279 ;	.\ecen4350_lcd_v4.c:217: delay(4);
      00019A 90 00 04         [24] 1280 	mov	dptr,#0x0004
      00019D 12r00rE0         [24] 1281 	lcall	_delay
                                   1282 ;	.\ecen4350_lcd_v4.c:218: iowrite8(seg7_address, ON);
      0001A0 85*04 82         [24] 1283 	mov	dpl,_seg7_address
      0001A3 85*05 83         [24] 1284 	mov	dph,(_seg7_address + 1)
                                   1285 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1286 ;	assignBit
      0001A6 D2 B5            [12] 1287 	setb	_P3_5
                                   1288 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0001A8 E4               [12] 1289 	clr	a
      0001A9 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1292 ;	assignBit
      0001AA C2 B5            [12] 1293 	clr	_P3_5
                                   1294 ;	.\ecen4350_lcd_v4.c:219: delay(4);
      0001AC 90 00 04         [24] 1295 	mov	dptr,#0x0004
      0001AF 12r00rE0         [24] 1296 	lcall	_delay
                                   1297 ;	.\ecen4350_lcd_v4.c:220: iowrite8(seg7_address, ZERO);
      0001B2 85*04 82         [24] 1298 	mov	dpl,_seg7_address
      0001B5 85*05 83         [24] 1299 	mov	dph,(_seg7_address + 1)
                                   1300 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1301 ;	assignBit
      0001B8 D2 B5            [12] 1302 	setb	_P3_5
                                   1303 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0001BA 74 C0            [12] 1304 	mov	a,#0xc0
      0001BC F0               [24] 1305 	movx	@dptr,a
                                   1306 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1307 ;	assignBit
      0001BD C2 B5            [12] 1308 	clr	_P3_5
                                   1309 ;	.\ecen4350_lcd_v4.c:221: delay(4);
      0001BF 90 00 04         [24] 1310 	mov	dptr,#0x0004
      0001C2 12r00rE0         [24] 1311 	lcall	_delay
                                   1312 ;	.\ecen4350_lcd_v4.c:222: iowrite8(seg7_address, ONE);
      0001C5 85*04 82         [24] 1313 	mov	dpl,_seg7_address
      0001C8 85*05 83         [24] 1314 	mov	dph,(_seg7_address + 1)
                                   1315 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1316 ;	assignBit
      0001CB D2 B5            [12] 1317 	setb	_P3_5
                                   1318 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0001CD 74 F9            [12] 1319 	mov	a,#0xf9
      0001CF F0               [24] 1320 	movx	@dptr,a
                                   1321 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1322 ;	assignBit
      0001D0 C2 B5            [12] 1323 	clr	_P3_5
                                   1324 ;	.\ecen4350_lcd_v4.c:223: delay(4);
      0001D2 90 00 04         [24] 1325 	mov	dptr,#0x0004
      0001D5 12r00rE0         [24] 1326 	lcall	_delay
                                   1327 ;	.\ecen4350_lcd_v4.c:224: iowrite8(seg7_address, TWO);
      0001D8 85*04 82         [24] 1328 	mov	dpl,_seg7_address
      0001DB 85*05 83         [24] 1329 	mov	dph,(_seg7_address + 1)
                                   1330 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1331 ;	assignBit
      0001DE D2 B5            [12] 1332 	setb	_P3_5
                                   1333 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0001E0 74 A4            [12] 1334 	mov	a,#0xa4
      0001E2 F0               [24] 1335 	movx	@dptr,a
                                   1336 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1337 ;	assignBit
      0001E3 C2 B5            [12] 1338 	clr	_P3_5
                                   1339 ;	.\ecen4350_lcd_v4.c:225: delay(4);
      0001E5 90 00 04         [24] 1340 	mov	dptr,#0x0004
      0001E8 12r00rE0         [24] 1341 	lcall	_delay
                                   1342 ;	.\ecen4350_lcd_v4.c:226: iowrite8(seg7_address, THREE);
      0001EB 85*04 82         [24] 1343 	mov	dpl,_seg7_address
      0001EE 85*05 83         [24] 1344 	mov	dph,(_seg7_address + 1)
                                   1345 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1346 ;	assignBit
      0001F1 D2 B5            [12] 1347 	setb	_P3_5
                                   1348 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0001F3 74 B0            [12] 1349 	mov	a,#0xb0
      0001F5 F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1352 ;	assignBit
      0001F6 C2 B5            [12] 1353 	clr	_P3_5
                                   1354 ;	.\ecen4350_lcd_v4.c:227: delay(4);
      0001F8 90 00 04         [24] 1355 	mov	dptr,#0x0004
      0001FB 12r00rE0         [24] 1356 	lcall	_delay
                                   1357 ;	.\ecen4350_lcd_v4.c:228: iowrite8(seg7_address, FOUR);
      0001FE 85*04 82         [24] 1358 	mov	dpl,_seg7_address
      000201 85*05 83         [24] 1359 	mov	dph,(_seg7_address + 1)
                                   1360 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1361 ;	assignBit
      000204 D2 B5            [12] 1362 	setb	_P3_5
                                   1363 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000206 74 99            [12] 1364 	mov	a,#0x99
      000208 F0               [24] 1365 	movx	@dptr,a
                                   1366 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1367 ;	assignBit
      000209 C2 B5            [12] 1368 	clr	_P3_5
                                   1369 ;	.\ecen4350_lcd_v4.c:229: delay(4);
      00020B 90 00 04         [24] 1370 	mov	dptr,#0x0004
      00020E 12r00rE0         [24] 1371 	lcall	_delay
                                   1372 ;	.\ecen4350_lcd_v4.c:230: iowrite8(seg7_address, FIVE);
      000211 85*04 82         [24] 1373 	mov	dpl,_seg7_address
      000214 85*05 83         [24] 1374 	mov	dph,(_seg7_address + 1)
                                   1375 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1376 ;	assignBit
      000217 D2 B5            [12] 1377 	setb	_P3_5
                                   1378 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000219 74 92            [12] 1379 	mov	a,#0x92
      00021B F0               [24] 1380 	movx	@dptr,a
                                   1381 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1382 ;	assignBit
      00021C C2 B5            [12] 1383 	clr	_P3_5
                                   1384 ;	.\ecen4350_lcd_v4.c:231: delay(4);
      00021E 90 00 04         [24] 1385 	mov	dptr,#0x0004
      000221 12r00rE0         [24] 1386 	lcall	_delay
                                   1387 ;	.\ecen4350_lcd_v4.c:232: iowrite8(seg7_address, SIX);
      000224 85*04 82         [24] 1388 	mov	dpl,_seg7_address
      000227 85*05 83         [24] 1389 	mov	dph,(_seg7_address + 1)
                                   1390 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1391 ;	assignBit
      00022A D2 B5            [12] 1392 	setb	_P3_5
                                   1393 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00022C 74 82            [12] 1394 	mov	a,#0x82
      00022E F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1397 ;	assignBit
      00022F C2 B5            [12] 1398 	clr	_P3_5
                                   1399 ;	.\ecen4350_lcd_v4.c:233: delay(4);
      000231 90 00 04         [24] 1400 	mov	dptr,#0x0004
      000234 12r00rE0         [24] 1401 	lcall	_delay
                                   1402 ;	.\ecen4350_lcd_v4.c:234: iowrite8(seg7_address, SEVEN);
      000237 85*04 82         [24] 1403 	mov	dpl,_seg7_address
      00023A 85*05 83         [24] 1404 	mov	dph,(_seg7_address + 1)
                                   1405 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1406 ;	assignBit
      00023D D2 B5            [12] 1407 	setb	_P3_5
                                   1408 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00023F 74 F8            [12] 1409 	mov	a,#0xf8
      000241 F0               [24] 1410 	movx	@dptr,a
                                   1411 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1412 ;	assignBit
      000242 C2 B5            [12] 1413 	clr	_P3_5
                                   1414 ;	.\ecen4350_lcd_v4.c:235: delay(4);
      000244 90 00 04         [24] 1415 	mov	dptr,#0x0004
      000247 12r00rE0         [24] 1416 	lcall	_delay
                                   1417 ;	.\ecen4350_lcd_v4.c:236: iowrite8(seg7_address, EIGHT);
      00024A 85*04 82         [24] 1418 	mov	dpl,_seg7_address
      00024D 85*05 83         [24] 1419 	mov	dph,(_seg7_address + 1)
                                   1420 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1421 ;	assignBit
      000250 D2 B5            [12] 1422 	setb	_P3_5
                                   1423 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000252 74 80            [12] 1424 	mov	a,#0x80
      000254 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1427 ;	assignBit
      000255 C2 B5            [12] 1428 	clr	_P3_5
                                   1429 ;	.\ecen4350_lcd_v4.c:237: delay(4);
      000257 90 00 04         [24] 1430 	mov	dptr,#0x0004
      00025A 12r00rE0         [24] 1431 	lcall	_delay
                                   1432 ;	.\ecen4350_lcd_v4.c:238: iowrite8(seg7_address, NINE);
      00025D 85*04 82         [24] 1433 	mov	dpl,_seg7_address
      000260 85*05 83         [24] 1434 	mov	dph,(_seg7_address + 1)
                                   1435 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1436 ;	assignBit
      000263 D2 B5            [12] 1437 	setb	_P3_5
                                   1438 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000265 74 98            [12] 1439 	mov	a,#0x98
      000267 F0               [24] 1440 	movx	@dptr,a
                                   1441 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1442 ;	assignBit
      000268 C2 B5            [12] 1443 	clr	_P3_5
                                   1444 ;	.\ecen4350_lcd_v4.c:239: delay(4);
      00026A 90 00 04         [24] 1445 	mov	dptr,#0x0004
      00026D 12r00rE0         [24] 1446 	lcall	_delay
                                   1447 ;	.\ecen4350_lcd_v4.c:240: iowrite8(seg7_address, SEG_A);
      000270 85*04 82         [24] 1448 	mov	dpl,_seg7_address
      000273 85*05 83         [24] 1449 	mov	dph,(_seg7_address + 1)
                                   1450 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1451 ;	assignBit
      000276 D2 B5            [12] 1452 	setb	_P3_5
                                   1453 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000278 74 88            [12] 1454 	mov	a,#0x88
      00027A F0               [24] 1455 	movx	@dptr,a
                                   1456 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1457 ;	assignBit
      00027B C2 B5            [12] 1458 	clr	_P3_5
                                   1459 ;	.\ecen4350_lcd_v4.c:241: delay(4);
      00027D 90 00 04         [24] 1460 	mov	dptr,#0x0004
      000280 12r00rE0         [24] 1461 	lcall	_delay
                                   1462 ;	.\ecen4350_lcd_v4.c:242: iowrite8(seg7_address, SEG_B);
      000283 85*04 82         [24] 1463 	mov	dpl,_seg7_address
      000286 85*05 83         [24] 1464 	mov	dph,(_seg7_address + 1)
                                   1465 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1466 ;	assignBit
      000289 D2 B5            [12] 1467 	setb	_P3_5
                                   1468 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00028B 74 83            [12] 1469 	mov	a,#0x83
      00028D F0               [24] 1470 	movx	@dptr,a
                                   1471 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1472 ;	assignBit
      00028E C2 B5            [12] 1473 	clr	_P3_5
                                   1474 ;	.\ecen4350_lcd_v4.c:243: delay(4);
      000290 90 00 04         [24] 1475 	mov	dptr,#0x0004
      000293 12r00rE0         [24] 1476 	lcall	_delay
                                   1477 ;	.\ecen4350_lcd_v4.c:244: iowrite8(seg7_address, SEG_C);
      000296 85*04 82         [24] 1478 	mov	dpl,_seg7_address
      000299 85*05 83         [24] 1479 	mov	dph,(_seg7_address + 1)
                                   1480 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1481 ;	assignBit
      00029C D2 B5            [12] 1482 	setb	_P3_5
                                   1483 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00029E 74 C6            [12] 1484 	mov	a,#0xc6
      0002A0 F0               [24] 1485 	movx	@dptr,a
                                   1486 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1487 ;	assignBit
      0002A1 C2 B5            [12] 1488 	clr	_P3_5
                                   1489 ;	.\ecen4350_lcd_v4.c:245: delay(4);
      0002A3 90 00 04         [24] 1490 	mov	dptr,#0x0004
      0002A6 12r00rE0         [24] 1491 	lcall	_delay
                                   1492 ;	.\ecen4350_lcd_v4.c:246: iowrite8(seg7_address, SEG_D);
      0002A9 85*04 82         [24] 1493 	mov	dpl,_seg7_address
      0002AC 85*05 83         [24] 1494 	mov	dph,(_seg7_address + 1)
                                   1495 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1496 ;	assignBit
      0002AF D2 B5            [12] 1497 	setb	_P3_5
                                   1498 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002B1 74 A1            [12] 1499 	mov	a,#0xa1
      0002B3 F0               [24] 1500 	movx	@dptr,a
                                   1501 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1502 ;	assignBit
      0002B4 C2 B5            [12] 1503 	clr	_P3_5
                                   1504 ;	.\ecen4350_lcd_v4.c:247: delay(4);
      0002B6 90 00 04         [24] 1505 	mov	dptr,#0x0004
      0002B9 12r00rE0         [24] 1506 	lcall	_delay
                                   1507 ;	.\ecen4350_lcd_v4.c:248: iowrite8(seg7_address, SEG_E);
      0002BC 85*04 82         [24] 1508 	mov	dpl,_seg7_address
      0002BF 85*05 83         [24] 1509 	mov	dph,(_seg7_address + 1)
                                   1510 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1511 ;	assignBit
      0002C2 D2 B5            [12] 1512 	setb	_P3_5
                                   1513 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002C4 74 86            [12] 1514 	mov	a,#0x86
      0002C6 F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1517 ;	assignBit
      0002C7 C2 B5            [12] 1518 	clr	_P3_5
                                   1519 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      0002C9 90 00 04         [24] 1520 	mov	dptr,#0x0004
      0002CC 12r00rE0         [24] 1521 	lcall	_delay
                                   1522 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, SEG_F);
      0002CF 85*04 82         [24] 1523 	mov	dpl,_seg7_address
      0002D2 85*05 83         [24] 1524 	mov	dph,(_seg7_address + 1)
                                   1525 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1526 ;	assignBit
      0002D5 D2 B5            [12] 1527 	setb	_P3_5
                                   1528 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002D7 74 8E            [12] 1529 	mov	a,#0x8e
      0002D9 F0               [24] 1530 	movx	@dptr,a
                                   1531 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1532 ;	assignBit
      0002DA C2 B5            [12] 1533 	clr	_P3_5
                                   1534 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      0002DC 90 00 04         [24] 1535 	mov	dptr,#0x0004
      0002DF 12r00rE0         [24] 1536 	lcall	_delay
                                   1537 ;	.\ecen4350_lcd_v4.c:252: iowrite8(seg7_address, OFF);
      0002E2 85*04 82         [24] 1538 	mov	dpl,_seg7_address
      0002E5 85*05 83         [24] 1539 	mov	dph,(_seg7_address + 1)
                                   1540 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1541 ;	assignBit
      0002E8 D2 B5            [12] 1542 	setb	_P3_5
                                   1543 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002EA 74 FF            [12] 1544 	mov	a,#0xff
      0002EC F0               [24] 1545 	movx	@dptr,a
                                   1546 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1547 ;	assignBit
      0002ED C2 B5            [12] 1548 	clr	_P3_5
                                   1549 ;	.\ecen4350_lcd_v4.c:253: delay(4);
      0002EF 90 00 04         [24] 1550 	mov	dptr,#0x0004
                                   1551 ;	.\ecen4350_lcd_v4.c:254: }
      0002F2 02r00rE0         [24] 1552 	ljmp	_delay
                                   1553 ;------------------------------------------------------------
                                   1554 ;Allocation info for local variables in function 'rtcInit'
                                   1555 ;------------------------------------------------------------
                                   1556 ;i                         Allocated to registers r6 r7 
                                   1557 ;------------------------------------------------------------
                                   1558 ;	.\ecen4350_lcd_v4.c:257: void rtcInit(void)
                                   1559 ;	-----------------------------------------
                                   1560 ;	 function rtcInit
                                   1561 ;	-----------------------------------------
      0002F5                       1562 _rtcInit:
                                   1563 ;	.\ecen4350_lcd_v4.c:261: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      0002F5 75*00 07         [24] 1564 	mov	_rtcCmd_PARM_2,#0x07
      0002F8 90 00 0F         [24] 1565 	mov	dptr,#0x000f
      0002FB 12r03r39         [24] 1566 	lcall	_rtcCmd
                                   1567 ;	.\ecen4350_lcd_v4.c:264: for (i = __S1_REG__; i < __REG_D__; i++)
      0002FE 7E 00            [12] 1568 	mov	r6,#0x00
      000300 7F 00            [12] 1569 	mov	r7,#0x00
      000302                       1570 00102$:
                                   1571 ;	.\ecen4350_lcd_v4.c:266: rtcWrite(i, 0x00);
      000302 75*16 00         [24] 1572 	mov	_rtcWrite_PARM_2,#0x00
      000305 8E 82            [24] 1573 	mov	dpl,r6
      000307 8F 83            [24] 1574 	mov	dph,r7
      000309 C0 07            [24] 1575 	push	ar7
      00030B C0 06            [24] 1576 	push	ar6
      00030D 12r03r42         [24] 1577 	lcall	_rtcWrite
      000310 D0 06            [24] 1578 	pop	ar6
      000312 D0 07            [24] 1579 	pop	ar7
                                   1580 ;	.\ecen4350_lcd_v4.c:264: for (i = __S1_REG__; i < __REG_D__; i++)
      000314 0E               [12] 1581 	inc	r6
      000315 BE 00 01         [24] 1582 	cjne	r6,#0x00,00115$
      000318 0F               [12] 1583 	inc	r7
      000319                       1584 00115$:
      000319 C3               [12] 1585 	clr	c
      00031A EE               [12] 1586 	mov	a,r6
      00031B 94 0D            [12] 1587 	subb	a,#0x0d
      00031D EF               [12] 1588 	mov	a,r7
      00031E 94 00            [12] 1589 	subb	a,#0x00
      000320 40 E0            [24] 1590 	jc	00102$
                                   1591 ;	.\ecen4350_lcd_v4.c:269: rtcCmd(__REG_F__, __HR_24__);
      000322 75*00 04         [24] 1592 	mov	_rtcCmd_PARM_2,#0x04
      000325 90 00 0F         [24] 1593 	mov	dptr,#0x000f
                                   1594 ;	.\ecen4350_lcd_v4.c:270: }
      000328 02r03r39         [24] 1595 	ljmp	_rtcCmd
                                   1596 ;------------------------------------------------------------
                                   1597 ;Allocation info for local variables in function 'rtcBusy'
                                   1598 ;------------------------------------------------------------
                                   1599 ;__1310720061              Allocated to registers 
                                   1600 ;map_address               Allocated to registers 
                                   1601 ;__1310720062              Allocated to registers 
                                   1602 ;map_address               Allocated to registers 
                                   1603 ;d                         Allocated to registers r7 
                                   1604 ;------------------------------------------------------------
                                   1605 ;	.\ecen4350_lcd_v4.c:272: void rtcBusy(void)
                                   1606 ;	-----------------------------------------
                                   1607 ;	 function rtcBusy
                                   1608 ;	-----------------------------------------
      00032B                       1609 _rtcBusy:
                                   1610 ;	.\ecen4350_lcd_v4.c:275: while ((ioread8(map_address) & 0x02))		;
      00032B                       1611 00101$:
                                   1612 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   1613 ;	assignBit
      00032B D2 B5            [12] 1614 	setb	_P3_5
                                   1615 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00032D 90 00 0D         [24] 1616 	mov	dptr,#0x000d
      000330 E0               [24] 1617 	movx	a,@dptr
      000331 FF               [12] 1618 	mov	r7,a
                                   1619 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   1620 ;	assignBit
      000332 C2 B5            [12] 1621 	clr	_P3_5
                                   1622 ;	.\ecen4350_lcd_v4.c:275: while ((ioread8(map_address) & 0x02))		;
      000334 EF               [12] 1623 	mov	a,r7
      000335 20 E1 F3         [24] 1624 	jb	acc.1,00101$
                                   1625 ;	.\ecen4350_lcd_v4.c:276: }
      000338 22               [24] 1626 	ret
                                   1627 ;------------------------------------------------------------
                                   1628 ;Allocation info for local variables in function 'rtcCmd'
                                   1629 ;------------------------------------------------------------
                                   1630 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1631 ;addr                      Allocated to registers r6 r7 
                                   1632 ;map_address               Allocated to registers 
                                   1633 ;__1310720064              Allocated to registers 
                                   1634 ;__1310720065              Allocated to registers r7 
                                   1635 ;map_address               Allocated to registers 
                                   1636 ;d                         Allocated to registers 
                                   1637 ;------------------------------------------------------------
                                   1638 ;	.\ecen4350_lcd_v4.c:278: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1639 ;	-----------------------------------------
                                   1640 ;	 function rtcCmd
                                   1641 ;	-----------------------------------------
      000339                       1642 _rtcCmd:
                                   1643 ;	.\ecen4350_lcd_v4.c:280: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1644 ;	.\ecen4350_lcd_v4.c:281: iowrite8(map_address, d);
      000339 AF*00            [24] 1645 	mov	r7,_rtcCmd_PARM_2
                                   1646 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1647 ;	assignBit
      00033B D2 B5            [12] 1648 	setb	_P3_5
                                   1649 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00033D EF               [12] 1650 	mov	a,r7
      00033E F0               [24] 1651 	movx	@dptr,a
                                   1652 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1653 ;	assignBit
      00033F C2 B5            [12] 1654 	clr	_P3_5
                                   1655 ;	.\ecen4350_lcd_v4.c:281: iowrite8(map_address, d);
                                   1656 ;	.\ecen4350_lcd_v4.c:282: }
      000341 22               [24] 1657 	ret
                                   1658 ;------------------------------------------------------------
                                   1659 ;Allocation info for local variables in function 'rtcWrite'
                                   1660 ;------------------------------------------------------------
                                   1661 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1662 ;addr                      Allocated to registers r6 r7 
                                   1663 ;map_address               Allocated to registers r6 r7 
                                   1664 ;__1310720067              Allocated to registers 
                                   1665 ;__1310720068              Allocated to registers 
                                   1666 ;addr                      Allocated to registers 
                                   1667 ;d                         Allocated to registers 
                                   1668 ;map_address               Allocated to registers 
                                   1669 ;__1310720064              Allocated to registers 
                                   1670 ;__1310720065              Allocated to registers 
                                   1671 ;map_address               Allocated to registers 
                                   1672 ;d                         Allocated to registers 
                                   1673 ;__1310720070              Allocated to registers 
                                   1674 ;__1310720071              Allocated to registers 
                                   1675 ;map_address               Allocated to registers 
                                   1676 ;d                         Allocated to registers 
                                   1677 ;__1310720073              Allocated to registers 
                                   1678 ;__1310720074              Allocated to registers r7 
                                   1679 ;addr                      Allocated to registers 
                                   1680 ;d                         Allocated to registers 
                                   1681 ;map_address               Allocated to registers 
                                   1682 ;__1310720064              Allocated to registers 
                                   1683 ;__1310720065              Allocated to registers 
                                   1684 ;map_address               Allocated to registers 
                                   1685 ;d                         Allocated to registers 
                                   1686 ;------------------------------------------------------------
                                   1687 ;	.\ecen4350_lcd_v4.c:284: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1688 ;	-----------------------------------------
                                   1689 ;	 function rtcWrite
                                   1690 ;	-----------------------------------------
      000342                       1691 _rtcWrite:
      000342 AE 82            [24] 1692 	mov	r6,dpl
      000344 AF 83            [24] 1693 	mov	r7,dph
                                   1694 ;	.\ecen4350_lcd_v4.c:286: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1695 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1696 ;	assignBit
      000346 D2 B5            [12] 1697 	setb	_P3_5
                                   1698 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000348 90 00 0D         [24] 1699 	mov	dptr,#0x000d
      00034B 74 01            [12] 1700 	mov	a,#0x01
      00034D F0               [24] 1701 	movx	@dptr,a
                                   1702 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1703 ;	assignBit
      00034E C2 B5            [12] 1704 	clr	_P3_5
                                   1705 ;	.\ecen4350_lcd_v4.c:288: rtcBusy();
      000350 C0 07            [24] 1706 	push	ar7
      000352 C0 06            [24] 1707 	push	ar6
      000354 12r03r2B         [24] 1708 	lcall	_rtcBusy
      000357 D0 06            [24] 1709 	pop	ar6
      000359 D0 07            [24] 1710 	pop	ar7
                                   1711 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1712 ;	assignBit
      00035B D2 B5            [12] 1713 	setb	_P3_5
                                   1714 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00035D 8E 82            [24] 1715 	mov	dpl,r6
      00035F 8F 83            [24] 1716 	mov	dph,r7
      000361 E4               [12] 1717 	clr	a
      000362 F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1720 ;	assignBit
      000363 C2 B5            [12] 1721 	clr	_P3_5
                                   1722 ;	.\ecen4350_lcd_v4.c:290: rtcCmd(__REG_D__, d);
      000365 AF*16            [24] 1723 	mov	r7,_rtcWrite_PARM_2
                                   1724 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1725 ;	assignBit
      000367 D2 B5            [12] 1726 	setb	_P3_5
                                   1727 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000369 90 00 0D         [24] 1728 	mov	dptr,#0x000d
      00036C EF               [12] 1729 	mov	a,r7
      00036D F0               [24] 1730 	movx	@dptr,a
                                   1731 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1732 ;	assignBit
      00036E C2 B5            [12] 1733 	clr	_P3_5
                                   1734 ;	.\ecen4350_lcd_v4.c:290: rtcCmd(__REG_D__, d);
                                   1735 ;	.\ecen4350_lcd_v4.c:291: }
      000370 22               [24] 1736 	ret
                                   1737 ;------------------------------------------------------------
                                   1738 ;Allocation info for local variables in function 'rtcRead'
                                   1739 ;------------------------------------------------------------
                                   1740 ;addr                      Allocated to registers r6 r7 
                                   1741 ;__1310720079              Allocated to registers 
                                   1742 ;d                         Allocated to registers r7 
                                   1743 ;map_address               Allocated to registers r6 r7 
                                   1744 ;__1310720076              Allocated to registers 
                                   1745 ;__1310720077              Allocated to registers 
                                   1746 ;addr                      Allocated to registers 
                                   1747 ;d                         Allocated to registers 
                                   1748 ;map_address               Allocated to registers 
                                   1749 ;__1310720064              Allocated to registers 
                                   1750 ;__1310720065              Allocated to registers 
                                   1751 ;map_address               Allocated to registers 
                                   1752 ;d                         Allocated to registers 
                                   1753 ;__1310720080              Allocated to registers 
                                   1754 ;map_address               Allocated to registers 
                                   1755 ;d                         Allocated to registers r6 
                                   1756 ;__1310720082              Allocated to registers 
                                   1757 ;__1310720083              Allocated to registers 
                                   1758 ;addr                      Allocated to registers 
                                   1759 ;d                         Allocated to registers 
                                   1760 ;map_address               Allocated to registers 
                                   1761 ;__1310720064              Allocated to registers 
                                   1762 ;__1310720065              Allocated to registers 
                                   1763 ;map_address               Allocated to registers 
                                   1764 ;d                         Allocated to registers 
                                   1765 ;------------------------------------------------------------
                                   1766 ;	.\ecen4350_lcd_v4.c:293: inline unsigned char rtcRead(unsigned int addr)
                                   1767 ;	-----------------------------------------
                                   1768 ;	 function rtcRead
                                   1769 ;	-----------------------------------------
      000371                       1770 _rtcRead:
      000371 AE 82            [24] 1771 	mov	r6,dpl
      000373 AF 83            [24] 1772 	mov	r7,dph
                                   1773 ;	.\ecen4350_lcd_v4.c:296: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1774 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1775 ;	assignBit
      000375 D2 B5            [12] 1776 	setb	_P3_5
                                   1777 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000377 90 00 0D         [24] 1778 	mov	dptr,#0x000d
      00037A 74 01            [12] 1779 	mov	a,#0x01
      00037C F0               [24] 1780 	movx	@dptr,a
                                   1781 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1782 ;	assignBit
      00037D C2 B5            [12] 1783 	clr	_P3_5
                                   1784 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      00037F C0 07            [24] 1785 	push	ar7
      000381 C0 06            [24] 1786 	push	ar6
      000383 12r03r2B         [24] 1787 	lcall	_rtcBusy
      000386 D0 06            [24] 1788 	pop	ar6
      000388 D0 07            [24] 1789 	pop	ar7
                                   1790 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   1791 ;	assignBit
      00038A D2 B5            [12] 1792 	setb	_P3_5
                                   1793 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00038C 8E 82            [24] 1794 	mov	dpl,r6
      00038E 8F 83            [24] 1795 	mov	dph,r7
      000390 E0               [24] 1796 	movx	a,@dptr
      000391 FE               [12] 1797 	mov	r6,a
                                   1798 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   1799 ;	assignBit
      000392 C2 B5            [12] 1800 	clr	_P3_5
                                   1801 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000394 74 0F            [12] 1802 	mov	a,#0x0f
      000396 5E               [12] 1803 	anl	a,r6
      000397 44 30            [12] 1804 	orl	a,#0x30
      000399 FF               [12] 1805 	mov	r7,a
                                   1806 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1807 ;	assignBit
      00039A D2 B5            [12] 1808 	setb	_P3_5
                                   1809 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00039C 90 00 0D         [24] 1810 	mov	dptr,#0x000d
      00039F E4               [12] 1811 	clr	a
      0003A0 F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1814 ;	assignBit
      0003A1 C2 B5            [12] 1815 	clr	_P3_5
                                   1816 ;	.\ecen4350_lcd_v4.c:303: return d;
      0003A3 8F 82            [24] 1817 	mov	dpl,r7
                                   1818 ;	.\ecen4350_lcd_v4.c:304: }
      0003A5 22               [24] 1819 	ret
                                   1820 ;------------------------------------------------------------
                                   1821 ;Allocation info for local variables in function 'rtcPrint'
                                   1822 ;------------------------------------------------------------
                                   1823 ;__1310720100              Allocated to registers 
                                   1824 ;__1310720097              Allocated to registers 
                                   1825 ;__1310720094              Allocated to registers 
                                   1826 ;__1310720091              Allocated to registers 
                                   1827 ;__1310720088              Allocated to registers 
                                   1828 ;__1310720085              Allocated to registers 
                                   1829 ;mi1                       Allocated to registers 
                                   1830 ;mi10                      Allocated to registers 
                                   1831 ;s1                        Allocated to registers 
                                   1832 ;s10                       Allocated to registers 
                                   1833 ;h1                        Allocated to registers 
                                   1834 ;h10                       Allocated to registers 
                                   1835 ;printval                  Allocated with name '_rtcPrint_printval_65536_222'
                                   1836 ;__1310720086              Allocated to registers 
                                   1837 ;addr                      Allocated to registers 
                                   1838 ;__1310720079              Allocated to registers 
                                   1839 ;d                         Allocated to registers r7 
                                   1840 ;map_address               Allocated to registers 
                                   1841 ;__1310720076              Allocated to registers 
                                   1842 ;__1310720077              Allocated to registers 
                                   1843 ;addr                      Allocated to registers 
                                   1844 ;d                         Allocated to registers 
                                   1845 ;map_address               Allocated to registers 
                                   1846 ;__1310720064              Allocated to registers 
                                   1847 ;__1310720065              Allocated to registers 
                                   1848 ;map_address               Allocated to registers 
                                   1849 ;d                         Allocated to registers 
                                   1850 ;__1310720080              Allocated to registers 
                                   1851 ;map_address               Allocated to registers 
                                   1852 ;d                         Allocated to registers r7 
                                   1853 ;__1310720082              Allocated to registers 
                                   1854 ;__1310720083              Allocated to registers 
                                   1855 ;addr                      Allocated to registers 
                                   1856 ;d                         Allocated to registers 
                                   1857 ;map_address               Allocated to registers 
                                   1858 ;__1310720064              Allocated to registers 
                                   1859 ;__1310720065              Allocated to registers 
                                   1860 ;map_address               Allocated to registers 
                                   1861 ;d                         Allocated to registers 
                                   1862 ;__1310720089              Allocated to registers 
                                   1863 ;addr                      Allocated to registers 
                                   1864 ;__1310720079              Allocated to registers 
                                   1865 ;d                         Allocated to registers r6 
                                   1866 ;map_address               Allocated to registers 
                                   1867 ;__1310720076              Allocated to registers 
                                   1868 ;__1310720077              Allocated to registers 
                                   1869 ;addr                      Allocated to registers 
                                   1870 ;d                         Allocated to registers 
                                   1871 ;map_address               Allocated to registers 
                                   1872 ;__1310720064              Allocated to registers 
                                   1873 ;__1310720065              Allocated to registers 
                                   1874 ;map_address               Allocated to registers 
                                   1875 ;d                         Allocated to registers 
                                   1876 ;__1310720080              Allocated to registers 
                                   1877 ;map_address               Allocated to registers 
                                   1878 ;d                         Allocated to registers r6 
                                   1879 ;__1310720082              Allocated to registers 
                                   1880 ;__1310720083              Allocated to registers 
                                   1881 ;addr                      Allocated to registers 
                                   1882 ;d                         Allocated to registers 
                                   1883 ;map_address               Allocated to registers 
                                   1884 ;__1310720064              Allocated to registers 
                                   1885 ;__1310720065              Allocated to registers 
                                   1886 ;map_address               Allocated to registers 
                                   1887 ;d                         Allocated to registers 
                                   1888 ;__1310720092              Allocated to registers 
                                   1889 ;addr                      Allocated to registers 
                                   1890 ;__1310720079              Allocated to registers 
                                   1891 ;d                         Allocated to registers r5 
                                   1892 ;map_address               Allocated to registers 
                                   1893 ;__1310720076              Allocated to registers 
                                   1894 ;__1310720077              Allocated to registers 
                                   1895 ;addr                      Allocated to registers 
                                   1896 ;d                         Allocated to registers 
                                   1897 ;map_address               Allocated to registers 
                                   1898 ;__1310720064              Allocated to registers 
                                   1899 ;__1310720065              Allocated to registers 
                                   1900 ;map_address               Allocated to registers 
                                   1901 ;d                         Allocated to registers 
                                   1902 ;__1310720080              Allocated to registers 
                                   1903 ;map_address               Allocated to registers 
                                   1904 ;d                         Allocated to registers r5 
                                   1905 ;__1310720082              Allocated to registers 
                                   1906 ;__1310720083              Allocated to registers 
                                   1907 ;addr                      Allocated to registers 
                                   1908 ;d                         Allocated to registers 
                                   1909 ;map_address               Allocated to registers 
                                   1910 ;__1310720064              Allocated to registers 
                                   1911 ;__1310720065              Allocated to registers 
                                   1912 ;map_address               Allocated to registers 
                                   1913 ;d                         Allocated to registers 
                                   1914 ;__1310720095              Allocated to registers 
                                   1915 ;addr                      Allocated to registers 
                                   1916 ;__1310720079              Allocated to registers 
                                   1917 ;d                         Allocated to registers r4 
                                   1918 ;map_address               Allocated to registers 
                                   1919 ;__1310720076              Allocated to registers 
                                   1920 ;__1310720077              Allocated to registers 
                                   1921 ;addr                      Allocated to registers 
                                   1922 ;d                         Allocated to registers 
                                   1923 ;map_address               Allocated to registers 
                                   1924 ;__1310720064              Allocated to registers 
                                   1925 ;__1310720065              Allocated to registers 
                                   1926 ;map_address               Allocated to registers 
                                   1927 ;d                         Allocated to registers 
                                   1928 ;__1310720080              Allocated to registers 
                                   1929 ;map_address               Allocated to registers 
                                   1930 ;d                         Allocated to registers r4 
                                   1931 ;__1310720082              Allocated to registers 
                                   1932 ;__1310720083              Allocated to registers 
                                   1933 ;addr                      Allocated to registers 
                                   1934 ;d                         Allocated to registers 
                                   1935 ;map_address               Allocated to registers 
                                   1936 ;__1310720064              Allocated to registers 
                                   1937 ;__1310720065              Allocated to registers 
                                   1938 ;map_address               Allocated to registers 
                                   1939 ;d                         Allocated to registers 
                                   1940 ;__1310720098              Allocated to registers 
                                   1941 ;addr                      Allocated to registers 
                                   1942 ;__1310720079              Allocated to registers 
                                   1943 ;d                         Allocated to registers r3 
                                   1944 ;map_address               Allocated to registers 
                                   1945 ;__1310720076              Allocated to registers 
                                   1946 ;__1310720077              Allocated to registers 
                                   1947 ;addr                      Allocated to registers 
                                   1948 ;d                         Allocated to registers 
                                   1949 ;map_address               Allocated to registers 
                                   1950 ;__1310720064              Allocated to registers 
                                   1951 ;__1310720065              Allocated to registers 
                                   1952 ;map_address               Allocated to registers 
                                   1953 ;d                         Allocated to registers 
                                   1954 ;__1310720080              Allocated to registers 
                                   1955 ;map_address               Allocated to registers 
                                   1956 ;d                         Allocated to registers r3 
                                   1957 ;__1310720082              Allocated to registers 
                                   1958 ;__1310720083              Allocated to registers 
                                   1959 ;addr                      Allocated to registers 
                                   1960 ;d                         Allocated to registers 
                                   1961 ;map_address               Allocated to registers 
                                   1962 ;__1310720064              Allocated to registers 
                                   1963 ;__1310720065              Allocated to registers 
                                   1964 ;map_address               Allocated to registers 
                                   1965 ;d                         Allocated to registers 
                                   1966 ;__1310720101              Allocated to registers 
                                   1967 ;addr                      Allocated to registers 
                                   1968 ;__1310720079              Allocated to registers 
                                   1969 ;d                         Allocated to registers r2 
                                   1970 ;map_address               Allocated to registers 
                                   1971 ;__1310720076              Allocated to registers 
                                   1972 ;__1310720077              Allocated to registers 
                                   1973 ;addr                      Allocated to registers 
                                   1974 ;d                         Allocated to registers 
                                   1975 ;map_address               Allocated to registers 
                                   1976 ;__1310720064              Allocated to registers 
                                   1977 ;__1310720065              Allocated to registers 
                                   1978 ;map_address               Allocated to registers 
                                   1979 ;d                         Allocated to registers 
                                   1980 ;__1310720080              Allocated to registers 
                                   1981 ;map_address               Allocated to registers 
                                   1982 ;d                         Allocated to registers r2 
                                   1983 ;__1310720082              Allocated to registers 
                                   1984 ;__1310720083              Allocated to registers 
                                   1985 ;addr                      Allocated to registers 
                                   1986 ;d                         Allocated to registers 
                                   1987 ;map_address               Allocated to registers 
                                   1988 ;__1310720064              Allocated to registers 
                                   1989 ;__1310720065              Allocated to registers 
                                   1990 ;map_address               Allocated to registers 
                                   1991 ;d                         Allocated to registers 
                                   1992 ;------------------------------------------------------------
                                   1993 ;	.\ecen4350_lcd_v4.c:306: void rtcPrint(void)
                                   1994 ;	-----------------------------------------
                                   1995 ;	 function rtcPrint
                                   1996 ;	-----------------------------------------
      0003A6                       1997 _rtcPrint:
                                   1998 ;	.\ecen4350_lcd_v4.c:310: printval[8] = '\0'; // end with address null character for string
      0003A6 75*1F 00         [24] 1999 	mov	(_rtcPrint_printval_65536_222 + 0x0008),#0x00
                                   2000 ;	.\ecen4350_lcd_v4.c:311: printval[2] = ':';
      0003A9 75*19 3A         [24] 2001 	mov	(_rtcPrint_printval_65536_222 + 0x0002),#0x3a
                                   2002 ;	.\ecen4350_lcd_v4.c:312: printval[5] = ':';
      0003AC 75*1C 3A         [24] 2003 	mov	(_rtcPrint_printval_65536_222 + 0x0005),#0x3a
                                   2004 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2005 ;	assignBit
      0003AF D2 B5            [12] 2006 	setb	_P3_5
                                   2007 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003B1 90 00 0D         [24] 2008 	mov	dptr,#0x000d
      0003B4 74 01            [12] 2009 	mov	a,#0x01
      0003B6 F0               [24] 2010 	movx	@dptr,a
                                   2011 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2012 ;	assignBit
      0003B7 C2 B5            [12] 2013 	clr	_P3_5
                                   2014 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      0003B9 12r03r2B         [24] 2015 	lcall	_rtcBusy
                                   2016 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2017 ;	assignBit
      0003BC D2 B5            [12] 2018 	setb	_P3_5
                                   2019 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0003BE 90 00 02         [24] 2020 	mov	dptr,#0x0002
      0003C1 E0               [24] 2021 	movx	a,@dptr
      0003C2 FF               [12] 2022 	mov	r7,a
                                   2023 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2024 ;	assignBit
      0003C3 C2 B5            [12] 2025 	clr	_P3_5
                                   2026 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0003C5 74 0F            [12] 2027 	mov	a,#0x0f
      0003C7 5F               [12] 2028 	anl	a,r7
      0003C8 44 30            [12] 2029 	orl	a,#0x30
      0003CA FF               [12] 2030 	mov	r7,a
                                   2031 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2032 ;	assignBit
      0003CB D2 B5            [12] 2033 	setb	_P3_5
                                   2034 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003CD 90 00 0D         [24] 2035 	mov	dptr,#0x000d
      0003D0 E4               [12] 2036 	clr	a
      0003D1 F0               [24] 2037 	movx	@dptr,a
                                   2038 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2039 ;	assignBit
      0003D2 C2 B5            [12] 2040 	clr	_P3_5
                                   2041 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2042 ;	assignBit
      0003D4 D2 B5            [12] 2043 	setb	_P3_5
                                   2044 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003D6 90 00 0D         [24] 2045 	mov	dptr,#0x000d
      0003D9 74 01            [12] 2046 	mov	a,#0x01
      0003DB F0               [24] 2047 	movx	@dptr,a
                                   2048 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2049 ;	assignBit
      0003DC C2 B5            [12] 2050 	clr	_P3_5
                                   2051 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      0003DE C0 07            [24] 2052 	push	ar7
      0003E0 12r03r2B         [24] 2053 	lcall	_rtcBusy
                                   2054 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2055 ;	assignBit
      0003E3 D2 B5            [12] 2056 	setb	_P3_5
                                   2057 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0003E5 90 00 03         [24] 2058 	mov	dptr,#0x0003
      0003E8 E0               [24] 2059 	movx	a,@dptr
      0003E9 FE               [12] 2060 	mov	r6,a
                                   2061 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2062 ;	assignBit
      0003EA C2 B5            [12] 2063 	clr	_P3_5
                                   2064 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0003EC 74 0F            [12] 2065 	mov	a,#0x0f
      0003EE 5E               [12] 2066 	anl	a,r6
      0003EF 44 30            [12] 2067 	orl	a,#0x30
      0003F1 FE               [12] 2068 	mov	r6,a
                                   2069 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2070 ;	assignBit
      0003F2 D2 B5            [12] 2071 	setb	_P3_5
                                   2072 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003F4 90 00 0D         [24] 2073 	mov	dptr,#0x000d
      0003F7 E4               [12] 2074 	clr	a
      0003F8 F0               [24] 2075 	movx	@dptr,a
                                   2076 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2077 ;	assignBit
      0003F9 C2 B5            [12] 2078 	clr	_P3_5
                                   2079 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2080 ;	assignBit
      0003FB D2 B5            [12] 2081 	setb	_P3_5
                                   2082 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003FD 90 00 0D         [24] 2083 	mov	dptr,#0x000d
      000400 74 01            [12] 2084 	mov	a,#0x01
      000402 F0               [24] 2085 	movx	@dptr,a
                                   2086 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2087 ;	assignBit
      000403 C2 B5            [12] 2088 	clr	_P3_5
                                   2089 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000405 C0 06            [24] 2090 	push	ar6
      000407 12r03r2B         [24] 2091 	lcall	_rtcBusy
                                   2092 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2093 ;	assignBit
      00040A D2 B5            [12] 2094 	setb	_P3_5
                                   2095 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00040C 90 00 04         [24] 2096 	mov	dptr,#0x0004
      00040F E0               [24] 2097 	movx	a,@dptr
      000410 FD               [12] 2098 	mov	r5,a
                                   2099 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2100 ;	assignBit
      000411 C2 B5            [12] 2101 	clr	_P3_5
                                   2102 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000413 74 0F            [12] 2103 	mov	a,#0x0f
      000415 5D               [12] 2104 	anl	a,r5
      000416 44 30            [12] 2105 	orl	a,#0x30
      000418 FD               [12] 2106 	mov	r5,a
                                   2107 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2108 ;	assignBit
      000419 D2 B5            [12] 2109 	setb	_P3_5
                                   2110 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00041B 90 00 0D         [24] 2111 	mov	dptr,#0x000d
      00041E E4               [12] 2112 	clr	a
      00041F F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2115 ;	assignBit
      000420 C2 B5            [12] 2116 	clr	_P3_5
                                   2117 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2118 ;	assignBit
      000422 D2 B5            [12] 2119 	setb	_P3_5
                                   2120 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000424 90 00 0D         [24] 2121 	mov	dptr,#0x000d
      000427 74 01            [12] 2122 	mov	a,#0x01
      000429 F0               [24] 2123 	movx	@dptr,a
                                   2124 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2125 ;	assignBit
      00042A C2 B5            [12] 2126 	clr	_P3_5
                                   2127 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      00042C C0 05            [24] 2128 	push	ar5
      00042E 12r03r2B         [24] 2129 	lcall	_rtcBusy
                                   2130 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2131 ;	assignBit
      000431 D2 B5            [12] 2132 	setb	_P3_5
                                   2133 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      000433 90 00 05         [24] 2134 	mov	dptr,#0x0005
      000436 E0               [24] 2135 	movx	a,@dptr
      000437 FC               [12] 2136 	mov	r4,a
                                   2137 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2138 ;	assignBit
      000438 C2 B5            [12] 2139 	clr	_P3_5
                                   2140 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00043A 74 0F            [12] 2141 	mov	a,#0x0f
      00043C 5C               [12] 2142 	anl	a,r4
      00043D 44 30            [12] 2143 	orl	a,#0x30
      00043F FC               [12] 2144 	mov	r4,a
                                   2145 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2146 ;	assignBit
      000440 D2 B5            [12] 2147 	setb	_P3_5
                                   2148 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000442 90 00 0D         [24] 2149 	mov	dptr,#0x000d
      000445 E4               [12] 2150 	clr	a
      000446 F0               [24] 2151 	movx	@dptr,a
                                   2152 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2153 ;	assignBit
      000447 C2 B5            [12] 2154 	clr	_P3_5
                                   2155 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2156 ;	assignBit
      000449 D2 B5            [12] 2157 	setb	_P3_5
                                   2158 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00044B 90 00 0D         [24] 2159 	mov	dptr,#0x000d
      00044E 74 01            [12] 2160 	mov	a,#0x01
      000450 F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2163 ;	assignBit
      000451 C2 B5            [12] 2164 	clr	_P3_5
                                   2165 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000453 C0 04            [24] 2166 	push	ar4
      000455 12r03r2B         [24] 2167 	lcall	_rtcBusy
                                   2168 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2169 ;	assignBit
      000458 D2 B5            [12] 2170 	setb	_P3_5
                                   2171 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00045A 90 00 00         [24] 2172 	mov	dptr,#0x0000
      00045D E0               [24] 2173 	movx	a,@dptr
      00045E FB               [12] 2174 	mov	r3,a
                                   2175 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2176 ;	assignBit
      00045F C2 B5            [12] 2177 	clr	_P3_5
                                   2178 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000461 74 0F            [12] 2179 	mov	a,#0x0f
      000463 5B               [12] 2180 	anl	a,r3
      000464 44 30            [12] 2181 	orl	a,#0x30
      000466 FB               [12] 2182 	mov	r3,a
                                   2183 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2184 ;	assignBit
      000467 D2 B5            [12] 2185 	setb	_P3_5
                                   2186 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000469 90 00 0D         [24] 2187 	mov	dptr,#0x000d
      00046C E4               [12] 2188 	clr	a
      00046D F0               [24] 2189 	movx	@dptr,a
                                   2190 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2191 ;	assignBit
      00046E C2 B5            [12] 2192 	clr	_P3_5
                                   2193 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2194 ;	assignBit
      000470 D2 B5            [12] 2195 	setb	_P3_5
                                   2196 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000472 90 00 0D         [24] 2197 	mov	dptr,#0x000d
      000475 74 01            [12] 2198 	mov	a,#0x01
      000477 F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2201 ;	assignBit
      000478 C2 B5            [12] 2202 	clr	_P3_5
                                   2203 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      00047A C0 03            [24] 2204 	push	ar3
      00047C 12r03r2B         [24] 2205 	lcall	_rtcBusy
      00047F D0 03            [24] 2206 	pop	ar3
      000481 D0 04            [24] 2207 	pop	ar4
      000483 D0 05            [24] 2208 	pop	ar5
      000485 D0 06            [24] 2209 	pop	ar6
      000487 D0 07            [24] 2210 	pop	ar7
                                   2211 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2212 ;	assignBit
      000489 D2 B5            [12] 2213 	setb	_P3_5
                                   2214 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00048B 90 00 01         [24] 2215 	mov	dptr,#0x0001
      00048E E0               [24] 2216 	movx	a,@dptr
      00048F FA               [12] 2217 	mov	r2,a
                                   2218 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2219 ;	assignBit
      000490 C2 B5            [12] 2220 	clr	_P3_5
                                   2221 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000492 74 0F            [12] 2222 	mov	a,#0x0f
      000494 5A               [12] 2223 	anl	a,r2
      000495 44 30            [12] 2224 	orl	a,#0x30
      000497 FA               [12] 2225 	mov	r2,a
                                   2226 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2227 ;	assignBit
      000498 D2 B5            [12] 2228 	setb	_P3_5
                                   2229 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00049A 90 00 0D         [24] 2230 	mov	dptr,#0x000d
      00049D E4               [12] 2231 	clr	a
      00049E F0               [24] 2232 	movx	@dptr,a
                                   2233 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2234 ;	assignBit
      00049F C2 B5            [12] 2235 	clr	_P3_5
                                   2236 ;	.\ecen4350_lcd_v4.c:326: printval[0] = h10;
      0004A1 8C*17            [24] 2237 	mov	_rtcPrint_printval_65536_222,r4
                                   2238 ;	.\ecen4350_lcd_v4.c:327: printval[1] = h1;
      0004A3 8D*18            [24] 2239 	mov	(_rtcPrint_printval_65536_222 + 0x0001),r5
                                   2240 ;	.\ecen4350_lcd_v4.c:328: printval[3] = mi10;
      0004A5 8E*1A            [24] 2241 	mov	(_rtcPrint_printval_65536_222 + 0x0003),r6
                                   2242 ;	.\ecen4350_lcd_v4.c:329: printval[4] = mi1;
      0004A7 8F*1B            [24] 2243 	mov	(_rtcPrint_printval_65536_222 + 0x0004),r7
                                   2244 ;	.\ecen4350_lcd_v4.c:330: printval[6] = s10;
      0004A9 8A*1D            [24] 2245 	mov	(_rtcPrint_printval_65536_222 + 0x0006),r2
                                   2246 ;	.\ecen4350_lcd_v4.c:331: printval[7] = s1;
      0004AB 8B*1E            [24] 2247 	mov	(_rtcPrint_printval_65536_222 + 0x0007),r3
                                   2248 ;	.\ecen4350_lcd_v4.c:332: LCD_string_write(printval);
      0004AD 90r00r17         [24] 2249 	mov	dptr,#_rtcPrint_printval_65536_222
      0004B0 75 F0 40         [24] 2250 	mov	b,#0x40
                                   2251 ;	.\ecen4350_lcd_v4.c:333: }
      0004B3 02r0FrD0         [24] 2252 	ljmp	_LCD_string_write
                                   2253 ;------------------------------------------------------------
                                   2254 ;Allocation info for local variables in function 'setCursor'
                                   2255 ;------------------------------------------------------------
                                   2256 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2257 ;x                         Allocated to registers 
                                   2258 ;------------------------------------------------------------
                                   2259 ;	.\ecen4350_lcd_v4.c:335: void setCursor(u16 x, u16 y)
                                   2260 ;	-----------------------------------------
                                   2261 ;	 function setCursor
                                   2262 ;	-----------------------------------------
      0004B6                       2263 _setCursor:
      0004B6 85 82*08         [24] 2264 	mov	_cursor_x,dpl
      0004B9 85 83*09         [24] 2265 	mov	(_cursor_x + 1),dph
                                   2266 ;	.\ecen4350_lcd_v4.c:338: cursor_y = y;
      0004BC 85*00*0A         [24] 2267 	mov	_cursor_y,_setCursor_PARM_2
      0004BF 85*01*0B         [24] 2268 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2269 ;	.\ecen4350_lcd_v4.c:339: }
      0004C2 22               [24] 2270 	ret
                                   2271 ;------------------------------------------------------------
                                   2272 ;Allocation info for local variables in function 'setTextColor'
                                   2273 ;------------------------------------------------------------
                                   2274 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2275 ;x                         Allocated to registers 
                                   2276 ;------------------------------------------------------------
                                   2277 ;	.\ecen4350_lcd_v4.c:341: void setTextColor(u16 x, u16 y)
                                   2278 ;	-----------------------------------------
                                   2279 ;	 function setTextColor
                                   2280 ;	-----------------------------------------
      0004C3                       2281 _setTextColor:
      0004C3 85 82*0E         [24] 2282 	mov	_textcolor,dpl
      0004C6 85 83*0F         [24] 2283 	mov	(_textcolor + 1),dph
                                   2284 ;	.\ecen4350_lcd_v4.c:344: textbgcolor = y;
      0004C9 85*00*10         [24] 2285 	mov	_textbgcolor,_setTextColor_PARM_2
      0004CC 85*01*11         [24] 2286 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2287 ;	.\ecen4350_lcd_v4.c:345: }
      0004CF 22               [24] 2288 	ret
                                   2289 ;------------------------------------------------------------
                                   2290 ;Allocation info for local variables in function 'setTextSize'
                                   2291 ;------------------------------------------------------------
                                   2292 ;s                         Allocated to registers r7 
                                   2293 ;------------------------------------------------------------
                                   2294 ;	.\ecen4350_lcd_v4.c:348: void setTextSize(u8 s)
                                   2295 ;	-----------------------------------------
                                   2296 ;	 function setTextSize
                                   2297 ;	-----------------------------------------
      0004D0                       2298 _setTextSize:
                                   2299 ;	.\ecen4350_lcd_v4.c:350: if (s > 8)
      0004D0 E5 82            [12] 2300 	mov	a,dpl
      0004D2 FF               [12] 2301 	mov	r7,a
      0004D3 24 F7            [12] 2302 	add	a,#0xff - 0x08
      0004D5 50 01            [24] 2303 	jnc	00102$
                                   2304 ;	.\ecen4350_lcd_v4.c:351: return;
      0004D7 22               [24] 2305 	ret
      0004D8                       2306 00102$:
                                   2307 ;	.\ecen4350_lcd_v4.c:352: textsize = (s > 0) ? s : 1;
      0004D8 EF               [12] 2308 	mov	a,r7
      0004D9 60 06            [24] 2309 	jz	00105$
      0004DB 8F 06            [24] 2310 	mov	ar6,r7
      0004DD 7F 00            [12] 2311 	mov	r7,#0x00
      0004DF 80 04            [24] 2312 	sjmp	00106$
      0004E1                       2313 00105$:
      0004E1 7E 01            [12] 2314 	mov	r6,#0x01
      0004E3 7F 00            [12] 2315 	mov	r7,#0x00
      0004E5                       2316 00106$:
      0004E5 8E*0C            [24] 2317 	mov	_textsize,r6
                                   2318 ;	.\ecen4350_lcd_v4.c:353: }
      0004E7 22               [24] 2319 	ret
                                   2320 ;------------------------------------------------------------
                                   2321 ;Allocation info for local variables in function 'setRotation'
                                   2322 ;------------------------------------------------------------
                                   2323 ;flag                      Allocated to registers r7 
                                   2324 ;------------------------------------------------------------
                                   2325 ;	.\ecen4350_lcd_v4.c:355: void setRotation(u8 flag)
                                   2326 ;	-----------------------------------------
                                   2327 ;	 function setRotation
                                   2328 ;	-----------------------------------------
      0004E8                       2329 _setRotation:
                                   2330 ;	.\ecen4350_lcd_v4.c:357: switch (flag)
      0004E8 E5 82            [12] 2331 	mov	a,dpl
      0004EA FF               [12] 2332 	mov	r7,a
      0004EB 24 FC            [12] 2333 	add	a,#0xff - 0x03
      0004ED 40 4E            [24] 2334 	jc	00105$
      0004EF EF               [12] 2335 	mov	a,r7
      0004F0 2F               [12] 2336 	add	a,r7
                                   2337 ;	.\ecen4350_lcd_v4.c:359: case 0:
      0004F1 90r04rF5         [24] 2338 	mov	dptr,#00115$
      0004F4 73               [24] 2339 	jmp	@a+dptr
      0004F5                       2340 00115$:
      0004F5 80 06            [24] 2341 	sjmp	00101$
      0004F7 80 14            [24] 2342 	sjmp	00102$
      0004F9 80 22            [24] 2343 	sjmp	00103$
      0004FB 80 30            [24] 2344 	sjmp	00104$
      0004FD                       2345 00101$:
                                   2346 ;	.\ecen4350_lcd_v4.c:360: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0004FD 7F 48            [12] 2347 	mov	r7,#0x48
                                   2348 ;	.\ecen4350_lcd_v4.c:361: _width = TFTWIDTH;
      0004FF 75*12 F0         [24] 2349 	mov	__width,#0xf0
      000502 75*13 00         [24] 2350 	mov	(__width + 1),#0x00
                                   2351 ;	.\ecen4350_lcd_v4.c:362: _height = TFTHEIGHT;
      000505 75*14 40         [24] 2352 	mov	__height,#0x40
      000508 75*15 01         [24] 2353 	mov	(__height + 1),#0x01
                                   2354 ;	.\ecen4350_lcd_v4.c:363: break;
                                   2355 ;	.\ecen4350_lcd_v4.c:364: case 1:
      00050B 80 3E            [24] 2356 	sjmp	00106$
      00050D                       2357 00102$:
                                   2358 ;	.\ecen4350_lcd_v4.c:365: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00050D 7F 28            [12] 2359 	mov	r7,#0x28
                                   2360 ;	.\ecen4350_lcd_v4.c:366: _width = TFTHEIGHT;
      00050F 75*12 40         [24] 2361 	mov	__width,#0x40
      000512 75*13 01         [24] 2362 	mov	(__width + 1),#0x01
                                   2363 ;	.\ecen4350_lcd_v4.c:367: _height = TFTWIDTH;
      000515 75*14 F0         [24] 2364 	mov	__height,#0xf0
      000518 75*15 00         [24] 2365 	mov	(__height + 1),#0x00
                                   2366 ;	.\ecen4350_lcd_v4.c:368: break;
                                   2367 ;	.\ecen4350_lcd_v4.c:369: case 2:
      00051B 80 2E            [24] 2368 	sjmp	00106$
      00051D                       2369 00103$:
                                   2370 ;	.\ecen4350_lcd_v4.c:370: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00051D 7F 88            [12] 2371 	mov	r7,#0x88
                                   2372 ;	.\ecen4350_lcd_v4.c:371: _width = TFTWIDTH;
      00051F 75*12 F0         [24] 2373 	mov	__width,#0xf0
      000522 75*13 00         [24] 2374 	mov	(__width + 1),#0x00
                                   2375 ;	.\ecen4350_lcd_v4.c:372: _height = TFTHEIGHT;
      000525 75*14 40         [24] 2376 	mov	__height,#0x40
      000528 75*15 01         [24] 2377 	mov	(__height + 1),#0x01
                                   2378 ;	.\ecen4350_lcd_v4.c:373: break;
                                   2379 ;	.\ecen4350_lcd_v4.c:374: case 3:
      00052B 80 1E            [24] 2380 	sjmp	00106$
      00052D                       2381 00104$:
                                   2382 ;	.\ecen4350_lcd_v4.c:375: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00052D 7F E8            [12] 2383 	mov	r7,#0xe8
                                   2384 ;	.\ecen4350_lcd_v4.c:376: _width = TFTHEIGHT;
      00052F 75*12 40         [24] 2385 	mov	__width,#0x40
      000532 75*13 01         [24] 2386 	mov	(__width + 1),#0x01
                                   2387 ;	.\ecen4350_lcd_v4.c:377: _height = TFTWIDTH;
      000535 75*14 F0         [24] 2388 	mov	__height,#0xf0
      000538 75*15 00         [24] 2389 	mov	(__height + 1),#0x00
                                   2390 ;	.\ecen4350_lcd_v4.c:378: break;
                                   2391 ;	.\ecen4350_lcd_v4.c:379: default:
      00053B 80 0E            [24] 2392 	sjmp	00106$
      00053D                       2393 00105$:
                                   2394 ;	.\ecen4350_lcd_v4.c:380: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00053D 7F 48            [12] 2395 	mov	r7,#0x48
                                   2396 ;	.\ecen4350_lcd_v4.c:381: _width = TFTWIDTH;
      00053F 75*12 F0         [24] 2397 	mov	__width,#0xf0
      000542 75*13 00         [24] 2398 	mov	(__width + 1),#0x00
                                   2399 ;	.\ecen4350_lcd_v4.c:382: _height = TFTHEIGHT;
      000545 75*14 40         [24] 2400 	mov	__height,#0x40
      000548 75*15 01         [24] 2401 	mov	(__height + 1),#0x01
                                   2402 ;	.\ecen4350_lcd_v4.c:384: }
      00054B                       2403 00106$:
                                   2404 ;	.\ecen4350_lcd_v4.c:385: writeRegister8(ILI9341_MEMCONTROL, flag);
      00054B 8F*00            [24] 2405 	mov	_writeRegister8_PARM_2,r7
      00054D 75 82 36         [24] 2406 	mov	dpl,#0x36
                                   2407 ;	.\ecen4350_lcd_v4.c:386: }
      000550 02r01r35         [24] 2408 	ljmp	_writeRegister8
                                   2409 ;------------------------------------------------------------
                                   2410 ;Allocation info for local variables in function 'setAddress'
                                   2411 ;------------------------------------------------------------
                                   2412 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2413 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2414 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2415 ;x1                        Allocated to registers r6 r7 
                                   2416 ;------------------------------------------------------------
                                   2417 ;	.\ecen4350_lcd_v4.c:389: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2418 ;	-----------------------------------------
                                   2419 ;	 function setAddress
                                   2420 ;	-----------------------------------------
      000553                       2421 _setAddress:
      000553 AE 82            [24] 2422 	mov	r6,dpl
      000555 AF 83            [24] 2423 	mov	r7,dph
                                   2424 ;	.\ecen4350_lcd_v4.c:392: write8Reg(0x2A);
                                   2425 ;	assignBit
      000557 C2 B4            [12] 2426 	clr	_P3_4
                                   2427 ;	assignBit
      000559 D2 B5            [12] 2428 	setb	_P3_5
      00055B 85*02 82         [24] 2429 	mov	dpl,_lcd_address
      00055E 85*03 83         [24] 2430 	mov	dph,(_lcd_address + 1)
      000561 74 2A            [12] 2431 	mov	a,#0x2a
      000563 F0               [24] 2432 	movx	@dptr,a
                                   2433 ;	assignBit
      000564 C2 B5            [12] 2434 	clr	_P3_5
                                   2435 ;	.\ecen4350_lcd_v4.c:393: write8Data(x1 >> 8);
                                   2436 ;	assignBit
      000566 D2 B4            [12] 2437 	setb	_P3_4
                                   2438 ;	assignBit
      000568 D2 B5            [12] 2439 	setb	_P3_5
      00056A 85*02 82         [24] 2440 	mov	dpl,_lcd_address
      00056D 85*03 83         [24] 2441 	mov	dph,(_lcd_address + 1)
      000570 8F 05            [24] 2442 	mov	ar5,r7
      000572 ED               [12] 2443 	mov	a,r5
      000573 F0               [24] 2444 	movx	@dptr,a
                                   2445 ;	assignBit
      000574 C2 B5            [12] 2446 	clr	_P3_5
                                   2447 ;	.\ecen4350_lcd_v4.c:394: write8Data(x1);
                                   2448 ;	assignBit
      000576 D2 B4            [12] 2449 	setb	_P3_4
                                   2450 ;	assignBit
      000578 D2 B5            [12] 2451 	setb	_P3_5
      00057A 85*02 82         [24] 2452 	mov	dpl,_lcd_address
      00057D 85*03 83         [24] 2453 	mov	dph,(_lcd_address + 1)
      000580 EE               [12] 2454 	mov	a,r6
      000581 F0               [24] 2455 	movx	@dptr,a
                                   2456 ;	assignBit
      000582 C2 B5            [12] 2457 	clr	_P3_5
                                   2458 ;	.\ecen4350_lcd_v4.c:395: write8Data(x2 >> 8);
                                   2459 ;	assignBit
      000584 D2 B4            [12] 2460 	setb	_P3_4
                                   2461 ;	assignBit
      000586 D2 B5            [12] 2462 	setb	_P3_5
      000588 85*02 82         [24] 2463 	mov	dpl,_lcd_address
      00058B 85*03 83         [24] 2464 	mov	dph,(_lcd_address + 1)
      00058E E5*03            [12] 2465 	mov	a,(_setAddress_PARM_3 + 1)
      000590 F0               [24] 2466 	movx	@dptr,a
                                   2467 ;	assignBit
      000591 C2 B5            [12] 2468 	clr	_P3_5
                                   2469 ;	.\ecen4350_lcd_v4.c:396: write8Data(x2);
                                   2470 ;	assignBit
      000593 D2 B4            [12] 2471 	setb	_P3_4
                                   2472 ;	assignBit
      000595 D2 B5            [12] 2473 	setb	_P3_5
      000597 85*02 82         [24] 2474 	mov	dpl,_lcd_address
      00059A 85*03 83         [24] 2475 	mov	dph,(_lcd_address + 1)
      00059D E5*02            [12] 2476 	mov	a,_setAddress_PARM_3
      00059F F0               [24] 2477 	movx	@dptr,a
                                   2478 ;	assignBit
      0005A0 C2 B5            [12] 2479 	clr	_P3_5
                                   2480 ;	.\ecen4350_lcd_v4.c:398: write8Reg(0x2B);
                                   2481 ;	assignBit
      0005A2 C2 B4            [12] 2482 	clr	_P3_4
                                   2483 ;	assignBit
      0005A4 D2 B5            [12] 2484 	setb	_P3_5
      0005A6 85*02 82         [24] 2485 	mov	dpl,_lcd_address
      0005A9 85*03 83         [24] 2486 	mov	dph,(_lcd_address + 1)
      0005AC 74 2B            [12] 2487 	mov	a,#0x2b
      0005AE F0               [24] 2488 	movx	@dptr,a
                                   2489 ;	assignBit
      0005AF C2 B5            [12] 2490 	clr	_P3_5
                                   2491 ;	.\ecen4350_lcd_v4.c:399: write8Data(y1 >> 8);
                                   2492 ;	assignBit
      0005B1 D2 B4            [12] 2493 	setb	_P3_4
                                   2494 ;	assignBit
      0005B3 D2 B5            [12] 2495 	setb	_P3_5
      0005B5 85*02 82         [24] 2496 	mov	dpl,_lcd_address
      0005B8 85*03 83         [24] 2497 	mov	dph,(_lcd_address + 1)
      0005BB E5*01            [12] 2498 	mov	a,(_setAddress_PARM_2 + 1)
      0005BD F0               [24] 2499 	movx	@dptr,a
                                   2500 ;	assignBit
      0005BE C2 B5            [12] 2501 	clr	_P3_5
                                   2502 ;	.\ecen4350_lcd_v4.c:400: write8Data(y1);
                                   2503 ;	assignBit
      0005C0 D2 B4            [12] 2504 	setb	_P3_4
                                   2505 ;	assignBit
      0005C2 D2 B5            [12] 2506 	setb	_P3_5
      0005C4 85*02 82         [24] 2507 	mov	dpl,_lcd_address
      0005C7 85*03 83         [24] 2508 	mov	dph,(_lcd_address + 1)
      0005CA E5*00            [12] 2509 	mov	a,_setAddress_PARM_2
      0005CC F0               [24] 2510 	movx	@dptr,a
                                   2511 ;	assignBit
      0005CD C2 B5            [12] 2512 	clr	_P3_5
                                   2513 ;	.\ecen4350_lcd_v4.c:401: write8Data(y2 >> 8);
                                   2514 ;	assignBit
      0005CF D2 B4            [12] 2515 	setb	_P3_4
                                   2516 ;	assignBit
      0005D1 D2 B5            [12] 2517 	setb	_P3_5
      0005D3 85*02 82         [24] 2518 	mov	dpl,_lcd_address
      0005D6 85*03 83         [24] 2519 	mov	dph,(_lcd_address + 1)
      0005D9 E5*05            [12] 2520 	mov	a,(_setAddress_PARM_4 + 1)
      0005DB F0               [24] 2521 	movx	@dptr,a
                                   2522 ;	assignBit
      0005DC C2 B5            [12] 2523 	clr	_P3_5
                                   2524 ;	.\ecen4350_lcd_v4.c:402: write8Data(y2);
                                   2525 ;	assignBit
      0005DE D2 B4            [12] 2526 	setb	_P3_4
                                   2527 ;	assignBit
      0005E0 D2 B5            [12] 2528 	setb	_P3_5
      0005E2 85*02 82         [24] 2529 	mov	dpl,_lcd_address
      0005E5 85*03 83         [24] 2530 	mov	dph,(_lcd_address + 1)
      0005E8 E5*04            [12] 2531 	mov	a,_setAddress_PARM_4
      0005EA F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	assignBit
      0005EB C2 B5            [12] 2534 	clr	_P3_5
                                   2535 ;	.\ecen4350_lcd_v4.c:405: }
      0005ED 22               [24] 2536 	ret
                                   2537 ;------------------------------------------------------------
                                   2538 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2539 ;------------------------------------------------------------
                                   2540 ;	.\ecen4350_lcd_v4.c:407: void TFT_LCD_INIT(void)
                                   2541 ;	-----------------------------------------
                                   2542 ;	 function TFT_LCD_INIT
                                   2543 ;	-----------------------------------------
      0005EE                       2544 _TFT_LCD_INIT:
                                   2545 ;	.\ecen4350_lcd_v4.c:411: _width = TFTWIDTH;
      0005EE 75*12 F0         [24] 2546 	mov	__width,#0xf0
      0005F1 75*13 00         [24] 2547 	mov	(__width + 1),#0x00
                                   2548 ;	.\ecen4350_lcd_v4.c:412: _height = TFTHEIGHT;
      0005F4 75*14 40         [24] 2549 	mov	__height,#0x40
      0005F7 75*15 01         [24] 2550 	mov	(__height + 1),#0x01
                                   2551 ;	.\ecen4350_lcd_v4.c:415: IOM = 0;
                                   2552 ;	assignBit
      0005FA C2 B5            [12] 2553 	clr	_P3_5
                                   2554 ;	.\ecen4350_lcd_v4.c:417: CD = 1;
                                   2555 ;	assignBit
      0005FC D2 B4            [12] 2556 	setb	_P3_4
                                   2557 ;	.\ecen4350_lcd_v4.c:419: write8Reg(0x00);
                                   2558 ;	assignBit
      0005FE C2 B4            [12] 2559 	clr	_P3_4
                                   2560 ;	assignBit
      000600 D2 B5            [12] 2561 	setb	_P3_5
      000602 85*02 82         [24] 2562 	mov	dpl,_lcd_address
      000605 85*03 83         [24] 2563 	mov	dph,(_lcd_address + 1)
      000608 E4               [12] 2564 	clr	a
      000609 F0               [24] 2565 	movx	@dptr,a
                                   2566 ;	assignBit
      00060A C2 B5            [12] 2567 	clr	_P3_5
                                   2568 ;	.\ecen4350_lcd_v4.c:420: write8Data(0x00);
                                   2569 ;	assignBit
      00060C D2 B4            [12] 2570 	setb	_P3_4
                                   2571 ;	assignBit
      00060E D2 B5            [12] 2572 	setb	_P3_5
      000610 85*02 82         [24] 2573 	mov	dpl,_lcd_address
      000613 85*03 83         [24] 2574 	mov	dph,(_lcd_address + 1)
      000616 E4               [12] 2575 	clr	a
      000617 F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	assignBit
      000618 C2 B5            [12] 2578 	clr	_P3_5
                                   2579 ;	.\ecen4350_lcd_v4.c:421: write8Data(0x00);
                                   2580 ;	assignBit
      00061A D2 B4            [12] 2581 	setb	_P3_4
                                   2582 ;	assignBit
      00061C D2 B5            [12] 2583 	setb	_P3_5
      00061E 85*02 82         [24] 2584 	mov	dpl,_lcd_address
      000621 85*03 83         [24] 2585 	mov	dph,(_lcd_address + 1)
      000624 E4               [12] 2586 	clr	a
      000625 F0               [24] 2587 	movx	@dptr,a
                                   2588 ;	assignBit
      000626 C2 B5            [12] 2589 	clr	_P3_5
                                   2590 ;	.\ecen4350_lcd_v4.c:422: write8Data(0x00);
                                   2591 ;	assignBit
      000628 D2 B4            [12] 2592 	setb	_P3_4
                                   2593 ;	assignBit
      00062A D2 B5            [12] 2594 	setb	_P3_5
      00062C 85*02 82         [24] 2595 	mov	dpl,_lcd_address
      00062F 85*03 83         [24] 2596 	mov	dph,(_lcd_address + 1)
      000632 E4               [12] 2597 	clr	a
      000633 F0               [24] 2598 	movx	@dptr,a
                                   2599 ;	assignBit
      000634 C2 B5            [12] 2600 	clr	_P3_5
                                   2601 ;	.\ecen4350_lcd_v4.c:424: delay(100);						// changed from 200 to 100
      000636 90 00 64         [24] 2602 	mov	dptr,#0x0064
      000639 12r00rE0         [24] 2603 	lcall	_delay
                                   2604 ;	.\ecen4350_lcd_v4.c:428: writeRegister8(ILI9341_SOFTRESET, 0);
      00063C 75*00 00         [24] 2605 	mov	_writeRegister8_PARM_2,#0x00
      00063F 75 82 01         [24] 2606 	mov	dpl,#0x01
      000642 12r01r35         [24] 2607 	lcall	_writeRegister8
                                   2608 ;	.\ecen4350_lcd_v4.c:429: delay(50);
      000645 90 00 32         [24] 2609 	mov	dptr,#0x0032
      000648 12r00rE0         [24] 2610 	lcall	_delay
                                   2611 ;	.\ecen4350_lcd_v4.c:430: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00064B 75*00 00         [24] 2612 	mov	_writeRegister8_PARM_2,#0x00
      00064E 75 82 28         [24] 2613 	mov	dpl,#0x28
      000651 12r01r35         [24] 2614 	lcall	_writeRegister8
                                   2615 ;	.\ecen4350_lcd_v4.c:431: delay(10);
      000654 90 00 0A         [24] 2616 	mov	dptr,#0x000a
      000657 12r00rE0         [24] 2617 	lcall	_delay
                                   2618 ;	.\ecen4350_lcd_v4.c:433: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      00065A 75*00 23         [24] 2619 	mov	_writeRegister8_PARM_2,#0x23
      00065D 75 82 C0         [24] 2620 	mov	dpl,#0xc0
      000660 12r01r35         [24] 2621 	lcall	_writeRegister8
                                   2622 ;	.\ecen4350_lcd_v4.c:434: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000663 75*00 11         [24] 2623 	mov	_writeRegister8_PARM_2,#0x11
      000666 75 82 C1         [24] 2624 	mov	dpl,#0xc1
      000669 12r01r35         [24] 2625 	lcall	_writeRegister8
                                   2626 ;	.\ecen4350_lcd_v4.c:435: write8Reg(ILI9341_VCOMCONTROL1);
                                   2627 ;	assignBit
      00066C C2 B4            [12] 2628 	clr	_P3_4
                                   2629 ;	assignBit
      00066E D2 B5            [12] 2630 	setb	_P3_5
      000670 85*02 82         [24] 2631 	mov	dpl,_lcd_address
      000673 85*03 83         [24] 2632 	mov	dph,(_lcd_address + 1)
      000676 74 C5            [12] 2633 	mov	a,#0xc5
      000678 F0               [24] 2634 	movx	@dptr,a
                                   2635 ;	assignBit
      000679 C2 B5            [12] 2636 	clr	_P3_5
                                   2637 ;	.\ecen4350_lcd_v4.c:436: write8Data(0x3d);
                                   2638 ;	assignBit
      00067B D2 B4            [12] 2639 	setb	_P3_4
                                   2640 ;	assignBit
      00067D D2 B5            [12] 2641 	setb	_P3_5
      00067F 85*02 82         [24] 2642 	mov	dpl,_lcd_address
      000682 85*03 83         [24] 2643 	mov	dph,(_lcd_address + 1)
      000685 74 3D            [12] 2644 	mov	a,#0x3d
      000687 F0               [24] 2645 	movx	@dptr,a
                                   2646 ;	assignBit
      000688 C2 B5            [12] 2647 	clr	_P3_5
                                   2648 ;	.\ecen4350_lcd_v4.c:437: write8Data(0x30);
                                   2649 ;	assignBit
      00068A D2 B4            [12] 2650 	setb	_P3_4
                                   2651 ;	assignBit
      00068C D2 B5            [12] 2652 	setb	_P3_5
      00068E 85*02 82         [24] 2653 	mov	dpl,_lcd_address
      000691 85*03 83         [24] 2654 	mov	dph,(_lcd_address + 1)
      000694 74 30            [12] 2655 	mov	a,#0x30
      000696 F0               [24] 2656 	movx	@dptr,a
                                   2657 ;	assignBit
      000697 C2 B5            [12] 2658 	clr	_P3_5
                                   2659 ;	.\ecen4350_lcd_v4.c:438: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000699 75*00 AA         [24] 2660 	mov	_writeRegister8_PARM_2,#0xaa
      00069C 75 82 C7         [24] 2661 	mov	dpl,#0xc7
      00069F 12r01r35         [24] 2662 	lcall	_writeRegister8
                                   2663 ;	.\ecen4350_lcd_v4.c:439: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0006A2 75*00 88         [24] 2664 	mov	_writeRegister8_PARM_2,#0x88
      0006A5 75 82 36         [24] 2665 	mov	dpl,#0x36
      0006A8 12r01r35         [24] 2666 	lcall	_writeRegister8
                                   2667 ;	.\ecen4350_lcd_v4.c:440: write8Reg(ILI9341_PIXELFORMAT);
                                   2668 ;	assignBit
      0006AB C2 B4            [12] 2669 	clr	_P3_4
                                   2670 ;	assignBit
      0006AD D2 B5            [12] 2671 	setb	_P3_5
      0006AF 85*02 82         [24] 2672 	mov	dpl,_lcd_address
      0006B2 85*03 83         [24] 2673 	mov	dph,(_lcd_address + 1)
      0006B5 74 3A            [12] 2674 	mov	a,#0x3a
      0006B7 F0               [24] 2675 	movx	@dptr,a
                                   2676 ;	assignBit
      0006B8 C2 B5            [12] 2677 	clr	_P3_5
                                   2678 ;	.\ecen4350_lcd_v4.c:441: write8Data(0x55);
                                   2679 ;	assignBit
      0006BA D2 B4            [12] 2680 	setb	_P3_4
                                   2681 ;	assignBit
      0006BC D2 B5            [12] 2682 	setb	_P3_5
      0006BE 85*02 82         [24] 2683 	mov	dpl,_lcd_address
      0006C1 85*03 83         [24] 2684 	mov	dph,(_lcd_address + 1)
      0006C4 74 55            [12] 2685 	mov	a,#0x55
      0006C6 F0               [24] 2686 	movx	@dptr,a
                                   2687 ;	assignBit
      0006C7 C2 B5            [12] 2688 	clr	_P3_5
                                   2689 ;	.\ecen4350_lcd_v4.c:442: write8Data(0x00);
                                   2690 ;	assignBit
      0006C9 D2 B4            [12] 2691 	setb	_P3_4
                                   2692 ;	assignBit
      0006CB D2 B5            [12] 2693 	setb	_P3_5
      0006CD 85*02 82         [24] 2694 	mov	dpl,_lcd_address
      0006D0 85*03 83         [24] 2695 	mov	dph,(_lcd_address + 1)
      0006D3 E4               [12] 2696 	clr	a
      0006D4 F0               [24] 2697 	movx	@dptr,a
                                   2698 ;	assignBit
      0006D5 C2 B5            [12] 2699 	clr	_P3_5
                                   2700 ;	.\ecen4350_lcd_v4.c:443: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0006D7 75*00 1B         [24] 2701 	mov	_writeRegister16_PARM_2,#0x1b
      0006DA 75*01 00         [24] 2702 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0006DD 90 00 B1         [24] 2703 	mov	dptr,#0x00b1
      0006E0 12r01r55         [24] 2704 	lcall	_writeRegister16
                                   2705 ;	.\ecen4350_lcd_v4.c:445: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0006E3 75*00 07         [24] 2706 	mov	_writeRegister8_PARM_2,#0x07
      0006E6 75 82 B7         [24] 2707 	mov	dpl,#0xb7
      0006E9 12r01r35         [24] 2708 	lcall	_writeRegister8
                                   2709 ;	.\ecen4350_lcd_v4.c:448: writeRegister8(ILI9341_SLEEPOUT, 0);
      0006EC 75*00 00         [24] 2710 	mov	_writeRegister8_PARM_2,#0x00
      0006EF 75 82 11         [24] 2711 	mov	dpl,#0x11
      0006F2 12r01r35         [24] 2712 	lcall	_writeRegister8
                                   2713 ;	.\ecen4350_lcd_v4.c:449: delay(100);								// changed from 150 to 100
      0006F5 90 00 64         [24] 2714 	mov	dptr,#0x0064
      0006F8 12r00rE0         [24] 2715 	lcall	_delay
                                   2716 ;	.\ecen4350_lcd_v4.c:450: writeRegister8(ILI9341_DISPLAYON, 0);
      0006FB 75*00 00         [24] 2717 	mov	_writeRegister8_PARM_2,#0x00
      0006FE 75 82 29         [24] 2718 	mov	dpl,#0x29
      000701 12r01r35         [24] 2719 	lcall	_writeRegister8
                                   2720 ;	.\ecen4350_lcd_v4.c:451: delay(150);								// changed from 200 to 150
      000704 90 00 96         [24] 2721 	mov	dptr,#0x0096
      000707 12r00rE0         [24] 2722 	lcall	_delay
                                   2723 ;	.\ecen4350_lcd_v4.c:452: setAddress(0, 0, _width - 1, _height - 1);
      00070A E5*12            [12] 2724 	mov	a,__width
      00070C 24 FF            [12] 2725 	add	a,#0xff
      00070E F5*02            [12] 2726 	mov	_setAddress_PARM_3,a
      000710 E5*13            [12] 2727 	mov	a,(__width + 1)
      000712 34 FF            [12] 2728 	addc	a,#0xff
      000714 F5*03            [12] 2729 	mov	(_setAddress_PARM_3 + 1),a
      000716 E5*14            [12] 2730 	mov	a,__height
      000718 24 FF            [12] 2731 	add	a,#0xff
      00071A F5*04            [12] 2732 	mov	_setAddress_PARM_4,a
      00071C E5*15            [12] 2733 	mov	a,(__height + 1)
      00071E 34 FF            [12] 2734 	addc	a,#0xff
      000720 F5*05            [12] 2735 	mov	(_setAddress_PARM_4 + 1),a
      000722 E4               [12] 2736 	clr	a
      000723 F5*00            [12] 2737 	mov	_setAddress_PARM_2,a
      000725 F5*01            [12] 2738 	mov	(_setAddress_PARM_2 + 1),a
      000727 90 00 00         [24] 2739 	mov	dptr,#0x0000
                                   2740 ;	.\ecen4350_lcd_v4.c:456: }
      00072A 02r05r53         [24] 2741 	ljmp	_setAddress
                                   2742 ;------------------------------------------------------------
                                   2743 ;Allocation info for local variables in function 'drawPixel'
                                   2744 ;------------------------------------------------------------
                                   2745 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2746 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2747 ;x3                        Allocated to registers r6 r7 
                                   2748 ;------------------------------------------------------------
                                   2749 ;	.\ecen4350_lcd_v4.c:457: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2750 ;	-----------------------------------------
                                   2751 ;	 function drawPixel
                                   2752 ;	-----------------------------------------
      00072D                       2753 _drawPixel:
      00072D AE 82            [24] 2754 	mov	r6,dpl
      00072F AF 83            [24] 2755 	mov	r7,dph
                                   2756 ;	.\ecen4350_lcd_v4.c:465: setAddress(x3, y3, x3 + 1, y3 + 1);
      000731 74 01            [12] 2757 	mov	a,#0x01
      000733 2E               [12] 2758 	add	a,r6
      000734 F5*02            [12] 2759 	mov	_setAddress_PARM_3,a
      000736 E4               [12] 2760 	clr	a
      000737 3F               [12] 2761 	addc	a,r7
      000738 F5*03            [12] 2762 	mov	(_setAddress_PARM_3 + 1),a
      00073A 74 01            [12] 2763 	mov	a,#0x01
      00073C 25*20            [12] 2764 	add	a,_drawPixel_PARM_2
      00073E F5*04            [12] 2765 	mov	_setAddress_PARM_4,a
      000740 E4               [12] 2766 	clr	a
      000741 35*21            [12] 2767 	addc	a,(_drawPixel_PARM_2 + 1)
      000743 F5*05            [12] 2768 	mov	(_setAddress_PARM_4 + 1),a
      000745 85*20*00         [24] 2769 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000748 85*21*01         [24] 2770 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      00074B 8E 82            [24] 2771 	mov	dpl,r6
      00074D 8F 83            [24] 2772 	mov	dph,r7
      00074F 12r05r53         [24] 2773 	lcall	_setAddress
                                   2774 ;	.\ecen4350_lcd_v4.c:469: CD = 0;
                                   2775 ;	assignBit
      000752 C2 B4            [12] 2776 	clr	_P3_4
                                   2777 ;	.\ecen4350_lcd_v4.c:470: write8(0x2C);
                                   2778 ;	assignBit
      000754 D2 B5            [12] 2779 	setb	_P3_5
      000756 85*02 82         [24] 2780 	mov	dpl,_lcd_address
      000759 85*03 83         [24] 2781 	mov	dph,(_lcd_address + 1)
      00075C 74 2C            [12] 2782 	mov	a,#0x2c
      00075E F0               [24] 2783 	movx	@dptr,a
                                   2784 ;	assignBit
      00075F C2 B5            [12] 2785 	clr	_P3_5
                                   2786 ;	.\ecen4350_lcd_v4.c:472: CD = 1;
                                   2787 ;	assignBit
      000761 D2 B4            [12] 2788 	setb	_P3_4
                                   2789 ;	.\ecen4350_lcd_v4.c:473: write8(color1 >> 8);
                                   2790 ;	assignBit
      000763 D2 B5            [12] 2791 	setb	_P3_5
      000765 85*02 82         [24] 2792 	mov	dpl,_lcd_address
      000768 85*03 83         [24] 2793 	mov	dph,(_lcd_address + 1)
      00076B E5*23            [12] 2794 	mov	a,(_drawPixel_PARM_3 + 1)
      00076D F0               [24] 2795 	movx	@dptr,a
                                   2796 ;	assignBit
      00076E C2 B5            [12] 2797 	clr	_P3_5
                                   2798 ;	.\ecen4350_lcd_v4.c:474: write8(color1);
                                   2799 ;	assignBit
      000770 D2 B5            [12] 2800 	setb	_P3_5
      000772 85*02 82         [24] 2801 	mov	dpl,_lcd_address
      000775 85*03 83         [24] 2802 	mov	dph,(_lcd_address + 1)
      000778 E5*22            [12] 2803 	mov	a,_drawPixel_PARM_3
      00077A F0               [24] 2804 	movx	@dptr,a
                                   2805 ;	assignBit
      00077B C2 B5            [12] 2806 	clr	_P3_5
                                   2807 ;	.\ecen4350_lcd_v4.c:476: }
      00077D 22               [24] 2808 	ret
                                   2809 ;------------------------------------------------------------
                                   2810 ;Allocation info for local variables in function 'drawCircle'
                                   2811 ;------------------------------------------------------------
                                   2812 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2813 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2814 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2815 ;x0                        Allocated with name '_drawCircle_x0_65536_389'
                                   2816 ;f                         Allocated with name '_drawCircle_f_65536_390'
                                   2817 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_390'
                                   2818 ;ddF_y                     Allocated to registers r2 r3 
                                   2819 ;x                         Allocated with name '_drawCircle_x_65536_390'
                                   2820 ;y                         Allocated to registers r0 r1 
                                   2821 ;------------------------------------------------------------
                                   2822 ;	.\ecen4350_lcd_v4.c:480: void drawCircle(int x0, int y0, int r, u16 color)
                                   2823 ;	-----------------------------------------
                                   2824 ;	 function drawCircle
                                   2825 ;	-----------------------------------------
      00077E                       2826 _drawCircle:
      00077E 85 82*2A         [24] 2827 	mov	_drawCircle_x0_65536_389,dpl
      000781 85 83*2B         [24] 2828 	mov	(_drawCircle_x0_65536_389 + 1),dph
                                   2829 ;	.\ecen4350_lcd_v4.c:482: int f = 1 - r;
      000784 74 01            [12] 2830 	mov	a,#0x01
      000786 C3               [12] 2831 	clr	c
      000787 95*26            [12] 2832 	subb	a,_drawCircle_PARM_3
      000789 F5*2C            [12] 2833 	mov	_drawCircle_f_65536_390,a
      00078B E4               [12] 2834 	clr	a
      00078C 95*27            [12] 2835 	subb	a,(_drawCircle_PARM_3 + 1)
      00078E F5*2D            [12] 2836 	mov	(_drawCircle_f_65536_390 + 1),a
                                   2837 ;	.\ecen4350_lcd_v4.c:484: int ddF_y = -2 * r;
      000790 85*26*00         [24] 2838 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      000793 85*27*01         [24] 2839 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      000796 90 FF FE         [24] 2840 	mov	dptr,#0xfffe
      000799 12r00r00         [24] 2841 	lcall	__mulint
      00079C AA 82            [24] 2842 	mov	r2,dpl
      00079E AB 83            [24] 2843 	mov	r3,dph
                                   2844 ;	.\ecen4350_lcd_v4.c:486: int y = r;
      0007A0 A8*26            [24] 2845 	mov	r0,_drawCircle_PARM_3
      0007A2 A9*27            [24] 2846 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2847 ;	.\ecen4350_lcd_v4.c:488: drawPixel(x0, y0 + r, color);
      0007A4 E8               [12] 2848 	mov	a,r0
      0007A5 25*24            [12] 2849 	add	a,_drawCircle_PARM_2
      0007A7 F5*20            [12] 2850 	mov	_drawPixel_PARM_2,a
      0007A9 E9               [12] 2851 	mov	a,r1
      0007AA 35*25            [12] 2852 	addc	a,(_drawCircle_PARM_2 + 1)
      0007AC F5*21            [12] 2853 	mov	(_drawPixel_PARM_2 + 1),a
      0007AE 85*28*22         [24] 2854 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007B1 85*29*23         [24] 2855 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007B4 85*2A 82         [24] 2856 	mov	dpl,_drawCircle_x0_65536_389
      0007B7 85*2B 83         [24] 2857 	mov	dph,(_drawCircle_x0_65536_389 + 1)
      0007BA C0 03            [24] 2858 	push	ar3
      0007BC C0 02            [24] 2859 	push	ar2
      0007BE C0 01            [24] 2860 	push	ar1
      0007C0 C0 00            [24] 2861 	push	ar0
      0007C2 12r07r2D         [24] 2862 	lcall	_drawPixel
      0007C5 D0 00            [24] 2863 	pop	ar0
      0007C7 D0 01            [24] 2864 	pop	ar1
                                   2865 ;	.\ecen4350_lcd_v4.c:489: drawPixel(x0, y0 - r, color);
      0007C9 E5*24            [12] 2866 	mov	a,_drawCircle_PARM_2
      0007CB C3               [12] 2867 	clr	c
      0007CC 98               [12] 2868 	subb	a,r0
      0007CD F5*20            [12] 2869 	mov	_drawPixel_PARM_2,a
      0007CF E5*25            [12] 2870 	mov	a,(_drawCircle_PARM_2 + 1)
      0007D1 99               [12] 2871 	subb	a,r1
      0007D2 F5*21            [12] 2872 	mov	(_drawPixel_PARM_2 + 1),a
      0007D4 85*28*22         [24] 2873 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007D7 85*29*23         [24] 2874 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007DA 85*2A 82         [24] 2875 	mov	dpl,_drawCircle_x0_65536_389
      0007DD 85*2B 83         [24] 2876 	mov	dph,(_drawCircle_x0_65536_389 + 1)
      0007E0 C0 01            [24] 2877 	push	ar1
      0007E2 C0 00            [24] 2878 	push	ar0
      0007E4 12r07r2D         [24] 2879 	lcall	_drawPixel
      0007E7 D0 00            [24] 2880 	pop	ar0
      0007E9 D0 01            [24] 2881 	pop	ar1
                                   2882 ;	.\ecen4350_lcd_v4.c:490: drawPixel(x0 + r, y0, color);
      0007EB E8               [12] 2883 	mov	a,r0
      0007EC 25*2A            [12] 2884 	add	a,_drawCircle_x0_65536_389
      0007EE F5 82            [12] 2885 	mov	dpl,a
      0007F0 E9               [12] 2886 	mov	a,r1
      0007F1 35*2B            [12] 2887 	addc	a,(_drawCircle_x0_65536_389 + 1)
      0007F3 F5 83            [12] 2888 	mov	dph,a
      0007F5 85*24*20         [24] 2889 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0007F8 85*25*21         [24] 2890 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0007FB 85*28*22         [24] 2891 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007FE 85*29*23         [24] 2892 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000801 C0 01            [24] 2893 	push	ar1
      000803 C0 00            [24] 2894 	push	ar0
      000805 12r07r2D         [24] 2895 	lcall	_drawPixel
      000808 D0 00            [24] 2896 	pop	ar0
      00080A D0 01            [24] 2897 	pop	ar1
                                   2898 ;	.\ecen4350_lcd_v4.c:491: drawPixel(x0 - r, y0, color);
      00080C E5*2A            [12] 2899 	mov	a,_drawCircle_x0_65536_389
      00080E C3               [12] 2900 	clr	c
      00080F 98               [12] 2901 	subb	a,r0
      000810 F5 82            [12] 2902 	mov	dpl,a
      000812 E5*2B            [12] 2903 	mov	a,(_drawCircle_x0_65536_389 + 1)
      000814 99               [12] 2904 	subb	a,r1
      000815 F5 83            [12] 2905 	mov	dph,a
      000817 85*24*20         [24] 2906 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00081A 85*25*21         [24] 2907 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00081D 85*28*22         [24] 2908 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000820 85*29*23         [24] 2909 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000823 C0 01            [24] 2910 	push	ar1
      000825 C0 00            [24] 2911 	push	ar0
      000827 12r07r2D         [24] 2912 	lcall	_drawPixel
      00082A D0 00            [24] 2913 	pop	ar0
      00082C D0 01            [24] 2914 	pop	ar1
      00082E D0 02            [24] 2915 	pop	ar2
      000830 D0 03            [24] 2916 	pop	ar3
                                   2917 ;	.\ecen4350_lcd_v4.c:493: while (x < y)
      000832 E4               [12] 2918 	clr	a
      000833 F5*30            [12] 2919 	mov	_drawCircle_x_65536_390,a
      000835 F5*31            [12] 2920 	mov	(_drawCircle_x_65536_390 + 1),a
      000837 75*2E 01         [24] 2921 	mov	_drawCircle_ddF_x_65536_390,#0x01
                                   2922 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_390 + 1),#0x00
      00083A F5*2F            [12] 2923 	mov	(_drawCircle_ddF_x_65536_390 + 1),a
      00083C                       2924 00103$:
      00083C C3               [12] 2925 	clr	c
      00083D E5*30            [12] 2926 	mov	a,_drawCircle_x_65536_390
      00083F 98               [12] 2927 	subb	a,r0
      000840 E5*31            [12] 2928 	mov	a,(_drawCircle_x_65536_390 + 1)
      000842 64 80            [12] 2929 	xrl	a,#0x80
      000844 89 F0            [24] 2930 	mov	b,r1
      000846 63 F0 80         [24] 2931 	xrl	b,#0x80
      000849 95 F0            [12] 2932 	subb	a,b
      00084B 40 01            [24] 2933 	jc	00121$
      00084D 22               [24] 2934 	ret
      00084E                       2935 00121$:
                                   2936 ;	.\ecen4350_lcd_v4.c:495: if (f >= 0)
      00084E E5*2D            [12] 2937 	mov	a,(_drawCircle_f_65536_390 + 1)
      000850 20 E7 16         [24] 2938 	jb	acc.7,00102$
                                   2939 ;	.\ecen4350_lcd_v4.c:497: y--;
      000853 18               [12] 2940 	dec	r0
      000854 B8 FF 01         [24] 2941 	cjne	r0,#0xff,00123$
      000857 19               [12] 2942 	dec	r1
      000858                       2943 00123$:
                                   2944 ;	.\ecen4350_lcd_v4.c:498: ddF_y += 2;
      000858 74 02            [12] 2945 	mov	a,#0x02
      00085A 2A               [12] 2946 	add	a,r2
      00085B FA               [12] 2947 	mov	r2,a
      00085C E4               [12] 2948 	clr	a
      00085D 3B               [12] 2949 	addc	a,r3
      00085E FB               [12] 2950 	mov	r3,a
                                   2951 ;	.\ecen4350_lcd_v4.c:499: f += ddF_y;
      00085F EA               [12] 2952 	mov	a,r2
      000860 25*2C            [12] 2953 	add	a,_drawCircle_f_65536_390
      000862 F5*2C            [12] 2954 	mov	_drawCircle_f_65536_390,a
      000864 EB               [12] 2955 	mov	a,r3
      000865 35*2D            [12] 2956 	addc	a,(_drawCircle_f_65536_390 + 1)
      000867 F5*2D            [12] 2957 	mov	(_drawCircle_f_65536_390 + 1),a
      000869                       2958 00102$:
                                   2959 ;	.\ecen4350_lcd_v4.c:501: x++;
      000869 C0 02            [24] 2960 	push	ar2
      00086B C0 03            [24] 2961 	push	ar3
      00086D 05*30            [12] 2962 	inc	_drawCircle_x_65536_390
      00086F E4               [12] 2963 	clr	a
      000870 B5*30 02         [24] 2964 	cjne	a,_drawCircle_x_65536_390,00124$
      000873 05*31            [12] 2965 	inc	(_drawCircle_x_65536_390 + 1)
      000875                       2966 00124$:
                                   2967 ;	.\ecen4350_lcd_v4.c:502: ddF_x += 2;
      000875 74 02            [12] 2968 	mov	a,#0x02
      000877 25*2E            [12] 2969 	add	a,_drawCircle_ddF_x_65536_390
      000879 F5*2E            [12] 2970 	mov	_drawCircle_ddF_x_65536_390,a
      00087B E4               [12] 2971 	clr	a
      00087C 35*2F            [12] 2972 	addc	a,(_drawCircle_ddF_x_65536_390 + 1)
      00087E F5*2F            [12] 2973 	mov	(_drawCircle_ddF_x_65536_390 + 1),a
                                   2974 ;	.\ecen4350_lcd_v4.c:503: f += ddF_x;
      000880 E5*2E            [12] 2975 	mov	a,_drawCircle_ddF_x_65536_390
      000882 25*2C            [12] 2976 	add	a,_drawCircle_f_65536_390
      000884 F5*2C            [12] 2977 	mov	_drawCircle_f_65536_390,a
      000886 E5*2F            [12] 2978 	mov	a,(_drawCircle_ddF_x_65536_390 + 1)
      000888 35*2D            [12] 2979 	addc	a,(_drawCircle_f_65536_390 + 1)
      00088A F5*2D            [12] 2980 	mov	(_drawCircle_f_65536_390 + 1),a
                                   2981 ;	.\ecen4350_lcd_v4.c:505: drawPixel(x0 + x, y0 + y, color);
      00088C E5*30            [12] 2982 	mov	a,_drawCircle_x_65536_390
      00088E 25*2A            [12] 2983 	add	a,_drawCircle_x0_65536_389
      000890 FE               [12] 2984 	mov	r6,a
      000891 E5*31            [12] 2985 	mov	a,(_drawCircle_x_65536_390 + 1)
      000893 35*2B            [12] 2986 	addc	a,(_drawCircle_x0_65536_389 + 1)
      000895 FF               [12] 2987 	mov	r7,a
      000896 E8               [12] 2988 	mov	a,r0
      000897 25*24            [12] 2989 	add	a,_drawCircle_PARM_2
      000899 FC               [12] 2990 	mov	r4,a
      00089A E9               [12] 2991 	mov	a,r1
      00089B 35*25            [12] 2992 	addc	a,(_drawCircle_PARM_2 + 1)
      00089D FD               [12] 2993 	mov	r5,a
      00089E 8C*20            [24] 2994 	mov	_drawPixel_PARM_2,r4
      0008A0 8D*21            [24] 2995 	mov	(_drawPixel_PARM_2 + 1),r5
      0008A2 85*28*22         [24] 2996 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008A5 85*29*23         [24] 2997 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008A8 8E 82            [24] 2998 	mov	dpl,r6
      0008AA 8F 83            [24] 2999 	mov	dph,r7
      0008AC C0 07            [24] 3000 	push	ar7
      0008AE C0 06            [24] 3001 	push	ar6
      0008B0 C0 05            [24] 3002 	push	ar5
      0008B2 C0 04            [24] 3003 	push	ar4
      0008B4 C0 03            [24] 3004 	push	ar3
      0008B6 C0 02            [24] 3005 	push	ar2
      0008B8 C0 01            [24] 3006 	push	ar1
      0008BA C0 00            [24] 3007 	push	ar0
      0008BC 12r07r2D         [24] 3008 	lcall	_drawPixel
      0008BF D0 00            [24] 3009 	pop	ar0
      0008C1 D0 01            [24] 3010 	pop	ar1
      0008C3 D0 02            [24] 3011 	pop	ar2
      0008C5 D0 03            [24] 3012 	pop	ar3
      0008C7 D0 04            [24] 3013 	pop	ar4
      0008C9 D0 05            [24] 3014 	pop	ar5
                                   3015 ;	.\ecen4350_lcd_v4.c:506: drawPixel(x0 - x, y0 + y, color);
      0008CB E5*2A            [12] 3016 	mov	a,_drawCircle_x0_65536_389
      0008CD C3               [12] 3017 	clr	c
      0008CE 95*30            [12] 3018 	subb	a,_drawCircle_x_65536_390
      0008D0 FA               [12] 3019 	mov	r2,a
      0008D1 E5*2B            [12] 3020 	mov	a,(_drawCircle_x0_65536_389 + 1)
      0008D3 95*31            [12] 3021 	subb	a,(_drawCircle_x_65536_390 + 1)
      0008D5 FB               [12] 3022 	mov	r3,a
      0008D6 8C*20            [24] 3023 	mov	_drawPixel_PARM_2,r4
      0008D8 8D*21            [24] 3024 	mov	(_drawPixel_PARM_2 + 1),r5
      0008DA 85*28*22         [24] 3025 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008DD 85*29*23         [24] 3026 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008E0 8A 82            [24] 3027 	mov	dpl,r2
      0008E2 8B 83            [24] 3028 	mov	dph,r3
      0008E4 C0 03            [24] 3029 	push	ar3
      0008E6 C0 02            [24] 3030 	push	ar2
      0008E8 C0 01            [24] 3031 	push	ar1
      0008EA C0 00            [24] 3032 	push	ar0
      0008EC 12r07r2D         [24] 3033 	lcall	_drawPixel
      0008EF D0 00            [24] 3034 	pop	ar0
      0008F1 D0 01            [24] 3035 	pop	ar1
      0008F3 D0 02            [24] 3036 	pop	ar2
      0008F5 D0 03            [24] 3037 	pop	ar3
      0008F7 D0 06            [24] 3038 	pop	ar6
      0008F9 D0 07            [24] 3039 	pop	ar7
                                   3040 ;	.\ecen4350_lcd_v4.c:507: drawPixel(x0 + x, y0 - y, color);
      0008FB E5*24            [12] 3041 	mov	a,_drawCircle_PARM_2
      0008FD C3               [12] 3042 	clr	c
      0008FE 98               [12] 3043 	subb	a,r0
      0008FF FC               [12] 3044 	mov	r4,a
      000900 E5*25            [12] 3045 	mov	a,(_drawCircle_PARM_2 + 1)
      000902 99               [12] 3046 	subb	a,r1
      000903 FD               [12] 3047 	mov	r5,a
      000904 8C*20            [24] 3048 	mov	_drawPixel_PARM_2,r4
      000906 8D*21            [24] 3049 	mov	(_drawPixel_PARM_2 + 1),r5
      000908 85*28*22         [24] 3050 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00090B 85*29*23         [24] 3051 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00090E 8E 82            [24] 3052 	mov	dpl,r6
      000910 8F 83            [24] 3053 	mov	dph,r7
      000912 C0 05            [24] 3054 	push	ar5
      000914 C0 04            [24] 3055 	push	ar4
      000916 C0 03            [24] 3056 	push	ar3
      000918 C0 02            [24] 3057 	push	ar2
      00091A C0 01            [24] 3058 	push	ar1
      00091C C0 00            [24] 3059 	push	ar0
      00091E 12r07r2D         [24] 3060 	lcall	_drawPixel
      000921 D0 00            [24] 3061 	pop	ar0
      000923 D0 01            [24] 3062 	pop	ar1
      000925 D0 02            [24] 3063 	pop	ar2
      000927 D0 03            [24] 3064 	pop	ar3
      000929 D0 04            [24] 3065 	pop	ar4
      00092B D0 05            [24] 3066 	pop	ar5
                                   3067 ;	.\ecen4350_lcd_v4.c:508: drawPixel(x0 - x, y0 - y, color);
      00092D 8C*20            [24] 3068 	mov	_drawPixel_PARM_2,r4
      00092F 8D*21            [24] 3069 	mov	(_drawPixel_PARM_2 + 1),r5
      000931 85*28*22         [24] 3070 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000934 85*29*23         [24] 3071 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000937 8A 82            [24] 3072 	mov	dpl,r2
      000939 8B 83            [24] 3073 	mov	dph,r3
      00093B C0 03            [24] 3074 	push	ar3
      00093D C0 02            [24] 3075 	push	ar2
      00093F C0 01            [24] 3076 	push	ar1
      000941 C0 00            [24] 3077 	push	ar0
      000943 12r07r2D         [24] 3078 	lcall	_drawPixel
      000946 D0 00            [24] 3079 	pop	ar0
      000948 D0 01            [24] 3080 	pop	ar1
      00094A D0 02            [24] 3081 	pop	ar2
      00094C D0 03            [24] 3082 	pop	ar3
                                   3083 ;	.\ecen4350_lcd_v4.c:509: drawPixel(x0 + y, y0 + x, color);
      00094E E8               [12] 3084 	mov	a,r0
      00094F 25*2A            [12] 3085 	add	a,_drawCircle_x0_65536_389
      000951 FE               [12] 3086 	mov	r6,a
      000952 E9               [12] 3087 	mov	a,r1
      000953 35*2B            [12] 3088 	addc	a,(_drawCircle_x0_65536_389 + 1)
      000955 FF               [12] 3089 	mov	r7,a
      000956 E5*30            [12] 3090 	mov	a,_drawCircle_x_65536_390
      000958 25*24            [12] 3091 	add	a,_drawCircle_PARM_2
      00095A FC               [12] 3092 	mov	r4,a
      00095B E5*31            [12] 3093 	mov	a,(_drawCircle_x_65536_390 + 1)
      00095D 35*25            [12] 3094 	addc	a,(_drawCircle_PARM_2 + 1)
      00095F FD               [12] 3095 	mov	r5,a
      000960 8C*20            [24] 3096 	mov	_drawPixel_PARM_2,r4
      000962 8D*21            [24] 3097 	mov	(_drawPixel_PARM_2 + 1),r5
      000964 85*28*22         [24] 3098 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000967 85*29*23         [24] 3099 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00096A 8E 82            [24] 3100 	mov	dpl,r6
      00096C 8F 83            [24] 3101 	mov	dph,r7
      00096E C0 07            [24] 3102 	push	ar7
      000970 C0 06            [24] 3103 	push	ar6
      000972 C0 05            [24] 3104 	push	ar5
      000974 C0 04            [24] 3105 	push	ar4
      000976 C0 03            [24] 3106 	push	ar3
      000978 C0 02            [24] 3107 	push	ar2
      00097A C0 01            [24] 3108 	push	ar1
      00097C C0 00            [24] 3109 	push	ar0
      00097E 12r07r2D         [24] 3110 	lcall	_drawPixel
      000981 D0 00            [24] 3111 	pop	ar0
      000983 D0 01            [24] 3112 	pop	ar1
      000985 D0 02            [24] 3113 	pop	ar2
      000987 D0 03            [24] 3114 	pop	ar3
      000989 D0 04            [24] 3115 	pop	ar4
      00098B D0 05            [24] 3116 	pop	ar5
                                   3117 ;	.\ecen4350_lcd_v4.c:510: drawPixel(x0 - y, y0 + x, color);
      00098D E5*2A            [12] 3118 	mov	a,_drawCircle_x0_65536_389
      00098F C3               [12] 3119 	clr	c
      000990 98               [12] 3120 	subb	a,r0
      000991 FA               [12] 3121 	mov	r2,a
      000992 E5*2B            [12] 3122 	mov	a,(_drawCircle_x0_65536_389 + 1)
      000994 99               [12] 3123 	subb	a,r1
      000995 FB               [12] 3124 	mov	r3,a
      000996 8C*20            [24] 3125 	mov	_drawPixel_PARM_2,r4
      000998 8D*21            [24] 3126 	mov	(_drawPixel_PARM_2 + 1),r5
      00099A 85*28*22         [24] 3127 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00099D 85*29*23         [24] 3128 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009A0 8A 82            [24] 3129 	mov	dpl,r2
      0009A2 8B 83            [24] 3130 	mov	dph,r3
      0009A4 C0 03            [24] 3131 	push	ar3
      0009A6 C0 02            [24] 3132 	push	ar2
      0009A8 C0 01            [24] 3133 	push	ar1
      0009AA C0 00            [24] 3134 	push	ar0
      0009AC 12r07r2D         [24] 3135 	lcall	_drawPixel
      0009AF D0 00            [24] 3136 	pop	ar0
      0009B1 D0 01            [24] 3137 	pop	ar1
      0009B3 D0 02            [24] 3138 	pop	ar2
      0009B5 D0 03            [24] 3139 	pop	ar3
      0009B7 D0 06            [24] 3140 	pop	ar6
      0009B9 D0 07            [24] 3141 	pop	ar7
                                   3142 ;	.\ecen4350_lcd_v4.c:511: drawPixel(x0 + y, y0 - x, color);
      0009BB E5*24            [12] 3143 	mov	a,_drawCircle_PARM_2
      0009BD C3               [12] 3144 	clr	c
      0009BE 95*30            [12] 3145 	subb	a,_drawCircle_x_65536_390
      0009C0 FC               [12] 3146 	mov	r4,a
      0009C1 E5*25            [12] 3147 	mov	a,(_drawCircle_PARM_2 + 1)
      0009C3 95*31            [12] 3148 	subb	a,(_drawCircle_x_65536_390 + 1)
      0009C5 FD               [12] 3149 	mov	r5,a
      0009C6 8C*20            [24] 3150 	mov	_drawPixel_PARM_2,r4
      0009C8 8D*21            [24] 3151 	mov	(_drawPixel_PARM_2 + 1),r5
      0009CA 85*28*22         [24] 3152 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009CD 85*29*23         [24] 3153 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009D0 8E 82            [24] 3154 	mov	dpl,r6
      0009D2 8F 83            [24] 3155 	mov	dph,r7
      0009D4 C0 05            [24] 3156 	push	ar5
      0009D6 C0 04            [24] 3157 	push	ar4
      0009D8 C0 03            [24] 3158 	push	ar3
      0009DA C0 02            [24] 3159 	push	ar2
      0009DC C0 01            [24] 3160 	push	ar1
      0009DE C0 00            [24] 3161 	push	ar0
      0009E0 12r07r2D         [24] 3162 	lcall	_drawPixel
      0009E3 D0 00            [24] 3163 	pop	ar0
      0009E5 D0 01            [24] 3164 	pop	ar1
      0009E7 D0 02            [24] 3165 	pop	ar2
      0009E9 D0 03            [24] 3166 	pop	ar3
      0009EB D0 04            [24] 3167 	pop	ar4
      0009ED D0 05            [24] 3168 	pop	ar5
                                   3169 ;	.\ecen4350_lcd_v4.c:512: drawPixel(x0 - y, y0 - x, color);
      0009EF 8C*20            [24] 3170 	mov	_drawPixel_PARM_2,r4
      0009F1 8D*21            [24] 3171 	mov	(_drawPixel_PARM_2 + 1),r5
      0009F3 85*28*22         [24] 3172 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009F6 85*29*23         [24] 3173 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009F9 8A 82            [24] 3174 	mov	dpl,r2
      0009FB 8B 83            [24] 3175 	mov	dph,r3
      0009FD C0 03            [24] 3176 	push	ar3
      0009FF C0 02            [24] 3177 	push	ar2
      000A01 C0 01            [24] 3178 	push	ar1
      000A03 C0 00            [24] 3179 	push	ar0
      000A05 12r07r2D         [24] 3180 	lcall	_drawPixel
      000A08 D0 00            [24] 3181 	pop	ar0
      000A0A D0 01            [24] 3182 	pop	ar1
      000A0C D0 02            [24] 3183 	pop	ar2
      000A0E D0 03            [24] 3184 	pop	ar3
      000A10 D0 03            [24] 3185 	pop	ar3
      000A12 D0 02            [24] 3186 	pop	ar2
                                   3187 ;	.\ecen4350_lcd_v4.c:514: }
      000A14 02r08r3C         [24] 3188 	ljmp	00103$
                                   3189 ;------------------------------------------------------------
                                   3190 ;Allocation info for local variables in function 'testCircles'
                                   3191 ;------------------------------------------------------------
                                   3192 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3193 ;radius                    Allocated to registers r7 
                                   3194 ;x                         Allocated to registers r0 r1 
                                   3195 ;y                         Allocated to registers r2 r3 
                                   3196 ;r2                        Allocated to registers r4 r5 
                                   3197 ;w                         Allocated with name '_testCircles_w_65536_394'
                                   3198 ;h                         Allocated with name '_testCircles_h_65536_394'
                                   3199 ;------------------------------------------------------------
                                   3200 ;	.\ecen4350_lcd_v4.c:516: void testCircles(u8 radius, u16 color)
                                   3201 ;	-----------------------------------------
                                   3202 ;	 function testCircles
                                   3203 ;	-----------------------------------------
      000A17                       3204 _testCircles:
                                   3205 ;	.\ecen4350_lcd_v4.c:519: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000A17 AE 82            [24] 3206 	mov	r6,dpl
      000A19 7F 00            [12] 3207 	mov	r7,#0x00
      000A1B EE               [12] 3208 	mov	a,r6
      000A1C 2E               [12] 3209 	add	a,r6
      000A1D FC               [12] 3210 	mov	r4,a
      000A1E EF               [12] 3211 	mov	a,r7
      000A1F 33               [12] 3212 	rlc	a
      000A20 FD               [12] 3213 	mov	r5,a
      000A21 8E 02            [24] 3214 	mov	ar2,r6
      000A23 8F 03            [24] 3215 	mov	ar3,r7
      000A25 EA               [12] 3216 	mov	a,r2
      000A26 25*12            [12] 3217 	add	a,__width
      000A28 F5*34            [12] 3218 	mov	_testCircles_w_65536_394,a
      000A2A EB               [12] 3219 	mov	a,r3
      000A2B 35*13            [12] 3220 	addc	a,(__width + 1)
      000A2D F5*35            [12] 3221 	mov	(_testCircles_w_65536_394 + 1),a
      000A2F EA               [12] 3222 	mov	a,r2
      000A30 25*14            [12] 3223 	add	a,__height
      000A32 F5*36            [12] 3224 	mov	_testCircles_h_65536_394,a
      000A34 EB               [12] 3225 	mov	a,r3
      000A35 35*15            [12] 3226 	addc	a,(__height + 1)
      000A37 F5*37            [12] 3227 	mov	(_testCircles_h_65536_394 + 1),a
                                   3228 ;	.\ecen4350_lcd_v4.c:521: for (x = 0; x < w; x += r2)
      000A39 78 00            [12] 3229 	mov	r0,#0x00
      000A3B 79 00            [12] 3230 	mov	r1,#0x00
      000A3D                       3231 00107$:
      000A3D C3               [12] 3232 	clr	c
      000A3E E8               [12] 3233 	mov	a,r0
      000A3F 95*34            [12] 3234 	subb	a,_testCircles_w_65536_394
      000A41 E9               [12] 3235 	mov	a,r1
      000A42 64 80            [12] 3236 	xrl	a,#0x80
      000A44 85*35 F0         [24] 3237 	mov	b,(_testCircles_w_65536_394 + 1)
      000A47 63 F0 80         [24] 3238 	xrl	b,#0x80
      000A4A 95 F0            [12] 3239 	subb	a,b
      000A4C 50 5A            [24] 3240 	jnc	00109$
                                   3241 ;	.\ecen4350_lcd_v4.c:523: for (y = 0; y < h; y += r2)
      000A4E 7A 00            [12] 3242 	mov	r2,#0x00
      000A50 7B 00            [12] 3243 	mov	r3,#0x00
      000A52                       3244 00104$:
      000A52 C3               [12] 3245 	clr	c
      000A53 EA               [12] 3246 	mov	a,r2
      000A54 95*36            [12] 3247 	subb	a,_testCircles_h_65536_394
      000A56 EB               [12] 3248 	mov	a,r3
      000A57 64 80            [12] 3249 	xrl	a,#0x80
      000A59 85*37 F0         [24] 3250 	mov	b,(_testCircles_h_65536_394 + 1)
      000A5C 63 F0 80         [24] 3251 	xrl	b,#0x80
      000A5F 95 F0            [12] 3252 	subb	a,b
      000A61 50 3D            [24] 3253 	jnc	00108$
                                   3254 ;	.\ecen4350_lcd_v4.c:525: drawCircle(x, y, radius, color);
      000A63 8A*24            [24] 3255 	mov	_drawCircle_PARM_2,r2
      000A65 8B*25            [24] 3256 	mov	(_drawCircle_PARM_2 + 1),r3
      000A67 8E*26            [24] 3257 	mov	_drawCircle_PARM_3,r6
      000A69 8F*27            [24] 3258 	mov	(_drawCircle_PARM_3 + 1),r7
      000A6B 85*32*28         [24] 3259 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000A6E 85*33*29         [24] 3260 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000A71 88 82            [24] 3261 	mov	dpl,r0
      000A73 89 83            [24] 3262 	mov	dph,r1
      000A75 C0 07            [24] 3263 	push	ar7
      000A77 C0 06            [24] 3264 	push	ar6
      000A79 C0 05            [24] 3265 	push	ar5
      000A7B C0 04            [24] 3266 	push	ar4
      000A7D C0 03            [24] 3267 	push	ar3
      000A7F C0 02            [24] 3268 	push	ar2
      000A81 C0 01            [24] 3269 	push	ar1
      000A83 C0 00            [24] 3270 	push	ar0
      000A85 12r07r7E         [24] 3271 	lcall	_drawCircle
      000A88 D0 00            [24] 3272 	pop	ar0
      000A8A D0 01            [24] 3273 	pop	ar1
      000A8C D0 02            [24] 3274 	pop	ar2
      000A8E D0 03            [24] 3275 	pop	ar3
      000A90 D0 04            [24] 3276 	pop	ar4
      000A92 D0 05            [24] 3277 	pop	ar5
      000A94 D0 06            [24] 3278 	pop	ar6
      000A96 D0 07            [24] 3279 	pop	ar7
                                   3280 ;	.\ecen4350_lcd_v4.c:523: for (y = 0; y < h; y += r2)
      000A98 EC               [12] 3281 	mov	a,r4
      000A99 2A               [12] 3282 	add	a,r2
      000A9A FA               [12] 3283 	mov	r2,a
      000A9B ED               [12] 3284 	mov	a,r5
      000A9C 3B               [12] 3285 	addc	a,r3
      000A9D FB               [12] 3286 	mov	r3,a
      000A9E 80 B2            [24] 3287 	sjmp	00104$
      000AA0                       3288 00108$:
                                   3289 ;	.\ecen4350_lcd_v4.c:521: for (x = 0; x < w; x += r2)
      000AA0 EC               [12] 3290 	mov	a,r4
      000AA1 28               [12] 3291 	add	a,r0
      000AA2 F8               [12] 3292 	mov	r0,a
      000AA3 ED               [12] 3293 	mov	a,r5
      000AA4 39               [12] 3294 	addc	a,r1
      000AA5 F9               [12] 3295 	mov	r1,a
      000AA6 80 95            [24] 3296 	sjmp	00107$
      000AA8                       3297 00109$:
                                   3298 ;	.\ecen4350_lcd_v4.c:528: }
      000AA8 22               [24] 3299 	ret
                                   3300 ;------------------------------------------------------------
                                   3301 ;Allocation info for local variables in function 'fillRect'
                                   3302 ;------------------------------------------------------------
                                   3303 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3304 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3305 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3306 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3307 ;x                         Allocated to registers 
                                   3308 ;------------------------------------------------------------
                                   3309 ;	.\ecen4350_lcd_v4.c:529: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3310 ;	-----------------------------------------
                                   3311 ;	 function fillRect
                                   3312 ;	-----------------------------------------
      000AA9                       3313 _fillRect:
      000AA9 AE 82            [24] 3314 	mov	r6,dpl
      000AAB AF 83            [24] 3315 	mov	r7,dph
                                   3316 ;	.\ecen4350_lcd_v4.c:531: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000AAD C3               [12] 3317 	clr	c
      000AAE EE               [12] 3318 	mov	a,r6
      000AAF 94 F0            [12] 3319 	subb	a,#0xf0
      000AB1 EF               [12] 3320 	mov	a,r7
      000AB2 94 00            [12] 3321 	subb	a,#0x00
      000AB4 50 0B            [24] 3322 	jnc	00101$
      000AB6 C3               [12] 3323 	clr	c
      000AB7 E5*38            [12] 3324 	mov	a,_fillRect_PARM_2
      000AB9 94 40            [12] 3325 	subb	a,#0x40
      000ABB E5*39            [12] 3326 	mov	a,(_fillRect_PARM_2 + 1)
      000ABD 94 01            [12] 3327 	subb	a,#0x01
      000ABF 40 01            [24] 3328 	jc	00102$
      000AC1                       3329 00101$:
                                   3330 ;	.\ecen4350_lcd_v4.c:533: return;
      000AC1 22               [24] 3331 	ret
      000AC2                       3332 00102$:
                                   3333 ;	.\ecen4350_lcd_v4.c:536: if ((x + w - 1) >= TFTWIDTH)
      000AC2 E5*3A            [12] 3334 	mov	a,_fillRect_PARM_3
      000AC4 2E               [12] 3335 	add	a,r6
      000AC5 FC               [12] 3336 	mov	r4,a
      000AC6 E5*3B            [12] 3337 	mov	a,(_fillRect_PARM_3 + 1)
      000AC8 3F               [12] 3338 	addc	a,r7
      000AC9 FD               [12] 3339 	mov	r5,a
      000ACA 1C               [12] 3340 	dec	r4
      000ACB BC FF 01         [24] 3341 	cjne	r4,#0xff,00161$
      000ACE 1D               [12] 3342 	dec	r5
      000ACF                       3343 00161$:
      000ACF C3               [12] 3344 	clr	c
      000AD0 EC               [12] 3345 	mov	a,r4
      000AD1 94 F0            [12] 3346 	subb	a,#0xf0
      000AD3 ED               [12] 3347 	mov	a,r5
      000AD4 94 00            [12] 3348 	subb	a,#0x00
      000AD6 40 0A            [24] 3349 	jc	00105$
                                   3350 ;	.\ecen4350_lcd_v4.c:538: w = TFTWIDTH - x;
      000AD8 74 F0            [12] 3351 	mov	a,#0xf0
      000ADA C3               [12] 3352 	clr	c
      000ADB 9E               [12] 3353 	subb	a,r6
      000ADC F5*3A            [12] 3354 	mov	_fillRect_PARM_3,a
      000ADE E4               [12] 3355 	clr	a
      000ADF 9F               [12] 3356 	subb	a,r7
      000AE0 F5*3B            [12] 3357 	mov	(_fillRect_PARM_3 + 1),a
      000AE2                       3358 00105$:
                                   3359 ;	.\ecen4350_lcd_v4.c:541: if ((y + h - 1) >= TFTHEIGHT)
      000AE2 E5*3C            [12] 3360 	mov	a,_fillRect_PARM_4
      000AE4 25*38            [12] 3361 	add	a,_fillRect_PARM_2
      000AE6 FC               [12] 3362 	mov	r4,a
      000AE7 E5*3D            [12] 3363 	mov	a,(_fillRect_PARM_4 + 1)
      000AE9 35*39            [12] 3364 	addc	a,(_fillRect_PARM_2 + 1)
      000AEB FD               [12] 3365 	mov	r5,a
      000AEC 1C               [12] 3366 	dec	r4
      000AED BC FF 01         [24] 3367 	cjne	r4,#0xff,00163$
      000AF0 1D               [12] 3368 	dec	r5
      000AF1                       3369 00163$:
      000AF1 C3               [12] 3370 	clr	c
      000AF2 EC               [12] 3371 	mov	a,r4
      000AF3 94 40            [12] 3372 	subb	a,#0x40
      000AF5 ED               [12] 3373 	mov	a,r5
      000AF6 94 01            [12] 3374 	subb	a,#0x01
      000AF8 40 0D            [24] 3375 	jc	00107$
                                   3376 ;	.\ecen4350_lcd_v4.c:543: h = TFTHEIGHT - y;
      000AFA 74 40            [12] 3377 	mov	a,#0x40
      000AFC C3               [12] 3378 	clr	c
      000AFD 95*38            [12] 3379 	subb	a,_fillRect_PARM_2
      000AFF F5*3C            [12] 3380 	mov	_fillRect_PARM_4,a
      000B01 74 01            [12] 3381 	mov	a,#0x01
      000B03 95*39            [12] 3382 	subb	a,(_fillRect_PARM_2 + 1)
      000B05 F5*3D            [12] 3383 	mov	(_fillRect_PARM_4 + 1),a
      000B07                       3384 00107$:
                                   3385 ;	.\ecen4350_lcd_v4.c:546: setAddress(x, y, x + w - 1, y + h - 1);
      000B07 E5*3A            [12] 3386 	mov	a,_fillRect_PARM_3
      000B09 2E               [12] 3387 	add	a,r6
      000B0A FC               [12] 3388 	mov	r4,a
      000B0B E5*3B            [12] 3389 	mov	a,(_fillRect_PARM_3 + 1)
      000B0D 3F               [12] 3390 	addc	a,r7
      000B0E FD               [12] 3391 	mov	r5,a
      000B0F EC               [12] 3392 	mov	a,r4
      000B10 24 FF            [12] 3393 	add	a,#0xff
      000B12 F5*02            [12] 3394 	mov	_setAddress_PARM_3,a
      000B14 ED               [12] 3395 	mov	a,r5
      000B15 34 FF            [12] 3396 	addc	a,#0xff
      000B17 F5*03            [12] 3397 	mov	(_setAddress_PARM_3 + 1),a
      000B19 E5*3C            [12] 3398 	mov	a,_fillRect_PARM_4
      000B1B 25*38            [12] 3399 	add	a,_fillRect_PARM_2
      000B1D FC               [12] 3400 	mov	r4,a
      000B1E E5*3D            [12] 3401 	mov	a,(_fillRect_PARM_4 + 1)
      000B20 35*39            [12] 3402 	addc	a,(_fillRect_PARM_2 + 1)
      000B22 FD               [12] 3403 	mov	r5,a
      000B23 EC               [12] 3404 	mov	a,r4
      000B24 24 FF            [12] 3405 	add	a,#0xff
      000B26 F5*04            [12] 3406 	mov	_setAddress_PARM_4,a
      000B28 ED               [12] 3407 	mov	a,r5
      000B29 34 FF            [12] 3408 	addc	a,#0xff
      000B2B F5*05            [12] 3409 	mov	(_setAddress_PARM_4 + 1),a
      000B2D 85*38*00         [24] 3410 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000B30 85*39*01         [24] 3411 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000B33 8E 82            [24] 3412 	mov	dpl,r6
      000B35 8F 83            [24] 3413 	mov	dph,r7
      000B37 12r05r53         [24] 3414 	lcall	_setAddress
                                   3415 ;	.\ecen4350_lcd_v4.c:549: write8Reg(0x2C);
                                   3416 ;	assignBit
      000B3A C2 B4            [12] 3417 	clr	_P3_4
                                   3418 ;	assignBit
      000B3C D2 B5            [12] 3419 	setb	_P3_5
      000B3E 85*02 82         [24] 3420 	mov	dpl,_lcd_address
      000B41 85*03 83         [24] 3421 	mov	dph,(_lcd_address + 1)
      000B44 74 2C            [12] 3422 	mov	a,#0x2c
      000B46 F0               [24] 3423 	movx	@dptr,a
                                   3424 ;	assignBit
      000B47 C2 B5            [12] 3425 	clr	_P3_5
                                   3426 ;	.\ecen4350_lcd_v4.c:551: CD = 1;
                                   3427 ;	assignBit
      000B49 D2 B4            [12] 3428 	setb	_P3_4
                                   3429 ;	.\ecen4350_lcd_v4.c:552: for (y = h; y > 0; y--)
      000B4B AF*3F            [24] 3430 	mov	r7,(_fillRect_PARM_5 + 1)
      000B4D AD*3C            [24] 3431 	mov	r5,_fillRect_PARM_4
      000B4F AE*3D            [24] 3432 	mov	r6,(_fillRect_PARM_4 + 1)
      000B51                       3433 00114$:
      000B51 ED               [12] 3434 	mov	a,r5
      000B52 4E               [12] 3435 	orl	a,r6
      000B53 60 30            [24] 3436 	jz	00116$
                                   3437 ;	.\ecen4350_lcd_v4.c:554: for (x = w; x > 0; x--)
      000B55 AB*3A            [24] 3438 	mov	r3,_fillRect_PARM_3
      000B57 AC*3B            [24] 3439 	mov	r4,(_fillRect_PARM_3 + 1)
      000B59                       3440 00111$:
      000B59 EB               [12] 3441 	mov	a,r3
      000B5A 4C               [12] 3442 	orl	a,r4
      000B5B 60 21            [24] 3443 	jz	00115$
                                   3444 ;	.\ecen4350_lcd_v4.c:557: write8(color >> 8);
                                   3445 ;	assignBit
      000B5D D2 B5            [12] 3446 	setb	_P3_5
      000B5F 85*02 82         [24] 3447 	mov	dpl,_lcd_address
      000B62 85*03 83         [24] 3448 	mov	dph,(_lcd_address + 1)
      000B65 EF               [12] 3449 	mov	a,r7
      000B66 F0               [24] 3450 	movx	@dptr,a
                                   3451 ;	assignBit
      000B67 C2 B5            [12] 3452 	clr	_P3_5
                                   3453 ;	.\ecen4350_lcd_v4.c:558: write8(color);
                                   3454 ;	assignBit
      000B69 D2 B5            [12] 3455 	setb	_P3_5
      000B6B 85*02 82         [24] 3456 	mov	dpl,_lcd_address
      000B6E 85*03 83         [24] 3457 	mov	dph,(_lcd_address + 1)
      000B71 E5*3E            [12] 3458 	mov	a,_fillRect_PARM_5
      000B73 FA               [12] 3459 	mov	r2,a
      000B74 F0               [24] 3460 	movx	@dptr,a
                                   3461 ;	assignBit
      000B75 C2 B5            [12] 3462 	clr	_P3_5
                                   3463 ;	.\ecen4350_lcd_v4.c:554: for (x = w; x > 0; x--)
      000B77 1B               [12] 3464 	dec	r3
      000B78 BB FF 01         [24] 3465 	cjne	r3,#0xff,00167$
      000B7B 1C               [12] 3466 	dec	r4
      000B7C                       3467 00167$:
      000B7C 80 DB            [24] 3468 	sjmp	00111$
      000B7E                       3469 00115$:
                                   3470 ;	.\ecen4350_lcd_v4.c:552: for (y = h; y > 0; y--)
      000B7E 1D               [12] 3471 	dec	r5
      000B7F BD FF 01         [24] 3472 	cjne	r5,#0xff,00168$
      000B82 1E               [12] 3473 	dec	r6
      000B83                       3474 00168$:
      000B83 80 CC            [24] 3475 	sjmp	00114$
      000B85                       3476 00116$:
                                   3477 ;	.\ecen4350_lcd_v4.c:562: }
      000B85 22               [24] 3478 	ret
                                   3479 ;------------------------------------------------------------
                                   3480 ;Allocation info for local variables in function 'fillTop'
                                   3481 ;------------------------------------------------------------
                                   3482 ;Color                     Allocated to registers r6 r7 
                                   3483 ;len                       Allocated to registers 
                                   3484 ;blocks                    Allocated to registers r4 r7 
                                   3485 ;i                         Allocated to registers r3 
                                   3486 ;hi                        Allocated to registers r5 
                                   3487 ;lo                        Allocated to registers r6 
                                   3488 ;------------------------------------------------------------
                                   3489 ;	.\ecen4350_lcd_v4.c:564: void fillTop(unsigned int Color) {
                                   3490 ;	-----------------------------------------
                                   3491 ;	 function fillTop
                                   3492 ;	-----------------------------------------
      000B86                       3493 _fillTop:
      000B86 AE 82            [24] 3494 	mov	r6,dpl
      000B88 AF 83            [24] 3495 	mov	r7,dph
                                   3496 ;	.\ecen4350_lcd_v4.c:568: unsigned char i, hi = Color >> 8, 
      000B8A 8F 05            [24] 3497 	mov	ar5,r7
                                   3498 ;	.\ecen4350_lcd_v4.c:569: lo = Color;
                                   3499 ;	.\ecen4350_lcd_v4.c:572: setAddress(0, 0, TFTWIDTH - 1, 39);
      000B8C E4               [12] 3500 	clr	a
      000B8D F5*00            [12] 3501 	mov	_setAddress_PARM_2,a
      000B8F F5*01            [12] 3502 	mov	(_setAddress_PARM_2 + 1),a
      000B91 75*02 EF         [24] 3503 	mov	_setAddress_PARM_3,#0xef
                                   3504 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000B94 F5*03            [12] 3505 	mov	(_setAddress_PARM_3 + 1),a
      000B96 75*04 27         [24] 3506 	mov	_setAddress_PARM_4,#0x27
                                   3507 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000B99 F5*05            [12] 3508 	mov	(_setAddress_PARM_4 + 1),a
      000B9B 90 00 00         [24] 3509 	mov	dptr,#0x0000
      000B9E C0 06            [24] 3510 	push	ar6
      000BA0 C0 05            [24] 3511 	push	ar5
      000BA2 12r05r53         [24] 3512 	lcall	_setAddress
      000BA5 D0 05            [24] 3513 	pop	ar5
      000BA7 D0 06            [24] 3514 	pop	ar6
                                   3515 ;	.\ecen4350_lcd_v4.c:574: write8Reg(0x2C);
                                   3516 ;	assignBit
      000BA9 C2 B4            [12] 3517 	clr	_P3_4
                                   3518 ;	assignBit
      000BAB D2 B5            [12] 3519 	setb	_P3_5
      000BAD 85*02 82         [24] 3520 	mov	dpl,_lcd_address
      000BB0 85*03 83         [24] 3521 	mov	dph,(_lcd_address + 1)
      000BB3 74 2C            [12] 3522 	mov	a,#0x2c
      000BB5 F0               [24] 3523 	movx	@dptr,a
                                   3524 ;	assignBit
      000BB6 C2 B5            [12] 3525 	clr	_P3_5
                                   3526 ;	.\ecen4350_lcd_v4.c:576: CD = 1;
                                   3527 ;	assignBit
      000BB8 D2 B4            [12] 3528 	setb	_P3_4
                                   3529 ;	.\ecen4350_lcd_v4.c:577: write8(hi);
                                   3530 ;	assignBit
      000BBA D2 B5            [12] 3531 	setb	_P3_5
      000BBC 85*02 82         [24] 3532 	mov	dpl,_lcd_address
      000BBF 85*03 83         [24] 3533 	mov	dph,(_lcd_address + 1)
      000BC2 ED               [12] 3534 	mov	a,r5
      000BC3 F0               [24] 3535 	movx	@dptr,a
                                   3536 ;	assignBit
      000BC4 C2 B5            [12] 3537 	clr	_P3_5
                                   3538 ;	.\ecen4350_lcd_v4.c:578: write8(lo);
                                   3539 ;	assignBit
      000BC6 D2 B5            [12] 3540 	setb	_P3_5
      000BC8 85*02 82         [24] 3541 	mov	dpl,_lcd_address
      000BCB 85*03 83         [24] 3542 	mov	dph,(_lcd_address + 1)
      000BCE EE               [12] 3543 	mov	a,r6
      000BCF F0               [24] 3544 	movx	@dptr,a
                                   3545 ;	assignBit
      000BD0 C2 B5            [12] 3546 	clr	_P3_5
                                   3547 ;	.\ecen4350_lcd_v4.c:581: while (blocks--)
      000BD2 7C 96            [12] 3548 	mov	r4,#0x96
      000BD4 7F 00            [12] 3549 	mov	r7,#0x00
      000BD6                       3550 00104$:
      000BD6 8C 02            [24] 3551 	mov	ar2,r4
      000BD8 8F 03            [24] 3552 	mov	ar3,r7
      000BDA 1C               [12] 3553 	dec	r4
      000BDB BC FF 01         [24] 3554 	cjne	r4,#0xff,00140$
      000BDE 1F               [12] 3555 	dec	r7
      000BDF                       3556 00140$:
      000BDF EA               [12] 3557 	mov	a,r2
      000BE0 4B               [12] 3558 	orl	a,r3
      000BE1 60 66            [24] 3559 	jz	00106$
                                   3560 ;	.\ecen4350_lcd_v4.c:584: do
      000BE3 7B 10            [12] 3561 	mov	r3,#0x10
      000BE5                       3562 00101$:
                                   3563 ;	.\ecen4350_lcd_v4.c:587: write8(hi);
                                   3564 ;	assignBit
      000BE5 D2 B5            [12] 3565 	setb	_P3_5
      000BE7 85*02 82         [24] 3566 	mov	dpl,_lcd_address
      000BEA 85*03 83         [24] 3567 	mov	dph,(_lcd_address + 1)
      000BED ED               [12] 3568 	mov	a,r5
      000BEE F0               [24] 3569 	movx	@dptr,a
                                   3570 ;	assignBit
      000BEF C2 B5            [12] 3571 	clr	_P3_5
                                   3572 ;	.\ecen4350_lcd_v4.c:588: write8(lo);
                                   3573 ;	assignBit
      000BF1 D2 B5            [12] 3574 	setb	_P3_5
      000BF3 85*02 82         [24] 3575 	mov	dpl,_lcd_address
      000BF6 85*03 83         [24] 3576 	mov	dph,(_lcd_address + 1)
      000BF9 EE               [12] 3577 	mov	a,r6
      000BFA F0               [24] 3578 	movx	@dptr,a
                                   3579 ;	assignBit
      000BFB C2 B5            [12] 3580 	clr	_P3_5
                                   3581 ;	.\ecen4350_lcd_v4.c:589: write8(hi);
                                   3582 ;	assignBit
      000BFD D2 B5            [12] 3583 	setb	_P3_5
      000BFF 85*02 82         [24] 3584 	mov	dpl,_lcd_address
      000C02 85*03 83         [24] 3585 	mov	dph,(_lcd_address + 1)
      000C05 ED               [12] 3586 	mov	a,r5
      000C06 F0               [24] 3587 	movx	@dptr,a
                                   3588 ;	assignBit
      000C07 C2 B5            [12] 3589 	clr	_P3_5
                                   3590 ;	.\ecen4350_lcd_v4.c:590: write8(lo);
                                   3591 ;	assignBit
      000C09 D2 B5            [12] 3592 	setb	_P3_5
      000C0B 85*02 82         [24] 3593 	mov	dpl,_lcd_address
      000C0E 85*03 83         [24] 3594 	mov	dph,(_lcd_address + 1)
      000C11 EE               [12] 3595 	mov	a,r6
      000C12 F0               [24] 3596 	movx	@dptr,a
                                   3597 ;	assignBit
      000C13 C2 B5            [12] 3598 	clr	_P3_5
                                   3599 ;	.\ecen4350_lcd_v4.c:591: write8(hi);
                                   3600 ;	assignBit
      000C15 D2 B5            [12] 3601 	setb	_P3_5
      000C17 85*02 82         [24] 3602 	mov	dpl,_lcd_address
      000C1A 85*03 83         [24] 3603 	mov	dph,(_lcd_address + 1)
      000C1D ED               [12] 3604 	mov	a,r5
      000C1E F0               [24] 3605 	movx	@dptr,a
                                   3606 ;	assignBit
      000C1F C2 B5            [12] 3607 	clr	_P3_5
                                   3608 ;	.\ecen4350_lcd_v4.c:592: write8(lo);
                                   3609 ;	assignBit
      000C21 D2 B5            [12] 3610 	setb	_P3_5
      000C23 85*02 82         [24] 3611 	mov	dpl,_lcd_address
      000C26 85*03 83         [24] 3612 	mov	dph,(_lcd_address + 1)
      000C29 EE               [12] 3613 	mov	a,r6
      000C2A F0               [24] 3614 	movx	@dptr,a
                                   3615 ;	assignBit
      000C2B C2 B5            [12] 3616 	clr	_P3_5
                                   3617 ;	.\ecen4350_lcd_v4.c:593: write8(hi);
                                   3618 ;	assignBit
      000C2D D2 B5            [12] 3619 	setb	_P3_5
      000C2F 85*02 82         [24] 3620 	mov	dpl,_lcd_address
      000C32 85*03 83         [24] 3621 	mov	dph,(_lcd_address + 1)
      000C35 ED               [12] 3622 	mov	a,r5
      000C36 F0               [24] 3623 	movx	@dptr,a
                                   3624 ;	assignBit
      000C37 C2 B5            [12] 3625 	clr	_P3_5
                                   3626 ;	.\ecen4350_lcd_v4.c:594: write8(lo);
                                   3627 ;	assignBit
      000C39 D2 B5            [12] 3628 	setb	_P3_5
      000C3B 85*02 82         [24] 3629 	mov	dpl,_lcd_address
      000C3E 85*03 83         [24] 3630 	mov	dph,(_lcd_address + 1)
      000C41 EE               [12] 3631 	mov	a,r6
      000C42 F0               [24] 3632 	movx	@dptr,a
                                   3633 ;	assignBit
      000C43 C2 B5            [12] 3634 	clr	_P3_5
                                   3635 ;	.\ecen4350_lcd_v4.c:595: } while (--i);
      000C45 DB 9E            [24] 3636 	djnz	r3,00101$
      000C47 80 8D            [24] 3637 	sjmp	00104$
      000C49                       3638 00106$:
                                   3639 ;	.\ecen4350_lcd_v4.c:597: for (i = (char)len & 63; i--;)
      000C49 7F 3F            [12] 3640 	mov	r7,#0x3f
      000C4B                       3641 00109$:
      000C4B 8F 04            [24] 3642 	mov	ar4,r7
      000C4D 1F               [12] 3643 	dec	r7
      000C4E EC               [12] 3644 	mov	a,r4
      000C4F 60 1A            [24] 3645 	jz	00111$
                                   3646 ;	.\ecen4350_lcd_v4.c:600: write8(hi);
                                   3647 ;	assignBit
      000C51 D2 B5            [12] 3648 	setb	_P3_5
      000C53 85*02 82         [24] 3649 	mov	dpl,_lcd_address
      000C56 85*03 83         [24] 3650 	mov	dph,(_lcd_address + 1)
      000C59 ED               [12] 3651 	mov	a,r5
      000C5A F0               [24] 3652 	movx	@dptr,a
                                   3653 ;	assignBit
      000C5B C2 B5            [12] 3654 	clr	_P3_5
                                   3655 ;	.\ecen4350_lcd_v4.c:601: write8(lo);
                                   3656 ;	assignBit
      000C5D D2 B5            [12] 3657 	setb	_P3_5
      000C5F 85*02 82         [24] 3658 	mov	dpl,_lcd_address
      000C62 85*03 83         [24] 3659 	mov	dph,(_lcd_address + 1)
      000C65 EE               [12] 3660 	mov	a,r6
      000C66 F0               [24] 3661 	movx	@dptr,a
                                   3662 ;	assignBit
      000C67 C2 B5            [12] 3663 	clr	_P3_5
      000C69 80 E0            [24] 3664 	sjmp	00109$
      000C6B                       3665 00111$:
                                   3666 ;	.\ecen4350_lcd_v4.c:605: }
      000C6B 22               [24] 3667 	ret
                                   3668 ;------------------------------------------------------------
                                   3669 ;Allocation info for local variables in function 'fillScreen'
                                   3670 ;------------------------------------------------------------
                                   3671 ;Color                     Allocated to registers r6 r7 
                                   3672 ;len                       Allocated to registers 
                                   3673 ;blocks                    Allocated to registers r4 r7 
                                   3674 ;i                         Allocated to registers r3 
                                   3675 ;hi                        Allocated to registers r5 
                                   3676 ;lo                        Allocated to registers r6 
                                   3677 ;------------------------------------------------------------
                                   3678 ;	.\ecen4350_lcd_v4.c:607: void fillScreen(unsigned int Color)
                                   3679 ;	-----------------------------------------
                                   3680 ;	 function fillScreen
                                   3681 ;	-----------------------------------------
      000C6C                       3682 _fillScreen:
      000C6C AE 82            [24] 3683 	mov	r6,dpl
      000C6E AF 83            [24] 3684 	mov	r7,dph
                                   3685 ;	.\ecen4350_lcd_v4.c:614: unsigned char i, hi = Color >> 8,
      000C70 8F 05            [24] 3686 	mov	ar5,r7
                                   3687 ;	.\ecen4350_lcd_v4.c:615: lo = Color;
                                   3688 ;	.\ecen4350_lcd_v4.c:618: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000C72 E4               [12] 3689 	clr	a
      000C73 F5*00            [12] 3690 	mov	_setAddress_PARM_2,a
      000C75 F5*01            [12] 3691 	mov	(_setAddress_PARM_2 + 1),a
      000C77 75*02 EF         [24] 3692 	mov	_setAddress_PARM_3,#0xef
                                   3693 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000C7A F5*03            [12] 3694 	mov	(_setAddress_PARM_3 + 1),a
      000C7C 75*04 3F         [24] 3695 	mov	_setAddress_PARM_4,#0x3f
      000C7F 75*05 01         [24] 3696 	mov	(_setAddress_PARM_4 + 1),#0x01
      000C82 90 00 00         [24] 3697 	mov	dptr,#0x0000
      000C85 C0 06            [24] 3698 	push	ar6
      000C87 C0 05            [24] 3699 	push	ar5
      000C89 12r05r53         [24] 3700 	lcall	_setAddress
      000C8C D0 05            [24] 3701 	pop	ar5
      000C8E D0 06            [24] 3702 	pop	ar6
                                   3703 ;	.\ecen4350_lcd_v4.c:622: write8Reg(0x2C);
                                   3704 ;	assignBit
      000C90 C2 B4            [12] 3705 	clr	_P3_4
                                   3706 ;	assignBit
      000C92 D2 B5            [12] 3707 	setb	_P3_5
      000C94 85*02 82         [24] 3708 	mov	dpl,_lcd_address
      000C97 85*03 83         [24] 3709 	mov	dph,(_lcd_address + 1)
      000C9A 74 2C            [12] 3710 	mov	a,#0x2c
      000C9C F0               [24] 3711 	movx	@dptr,a
                                   3712 ;	assignBit
      000C9D C2 B5            [12] 3713 	clr	_P3_5
                                   3714 ;	.\ecen4350_lcd_v4.c:624: CD = 1;
                                   3715 ;	assignBit
      000C9F D2 B4            [12] 3716 	setb	_P3_4
                                   3717 ;	.\ecen4350_lcd_v4.c:625: write8(hi);
                                   3718 ;	assignBit
      000CA1 D2 B5            [12] 3719 	setb	_P3_5
      000CA3 85*02 82         [24] 3720 	mov	dpl,_lcd_address
      000CA6 85*03 83         [24] 3721 	mov	dph,(_lcd_address + 1)
      000CA9 ED               [12] 3722 	mov	a,r5
      000CAA F0               [24] 3723 	movx	@dptr,a
                                   3724 ;	assignBit
      000CAB C2 B5            [12] 3725 	clr	_P3_5
                                   3726 ;	.\ecen4350_lcd_v4.c:626: write8(lo);
                                   3727 ;	assignBit
      000CAD D2 B5            [12] 3728 	setb	_P3_5
      000CAF 85*02 82         [24] 3729 	mov	dpl,_lcd_address
      000CB2 85*03 83         [24] 3730 	mov	dph,(_lcd_address + 1)
      000CB5 EE               [12] 3731 	mov	a,r6
      000CB6 F0               [24] 3732 	movx	@dptr,a
                                   3733 ;	assignBit
      000CB7 C2 B5            [12] 3734 	clr	_P3_5
                                   3735 ;	.\ecen4350_lcd_v4.c:629: while (blocks--)
      000CB9 7C B0            [12] 3736 	mov	r4,#0xb0
      000CBB 7F 04            [12] 3737 	mov	r7,#0x04
      000CBD                       3738 00104$:
      000CBD 8C 02            [24] 3739 	mov	ar2,r4
      000CBF 8F 03            [24] 3740 	mov	ar3,r7
      000CC1 1C               [12] 3741 	dec	r4
      000CC2 BC FF 01         [24] 3742 	cjne	r4,#0xff,00140$
      000CC5 1F               [12] 3743 	dec	r7
      000CC6                       3744 00140$:
      000CC6 EA               [12] 3745 	mov	a,r2
      000CC7 4B               [12] 3746 	orl	a,r3
      000CC8 60 66            [24] 3747 	jz	00106$
                                   3748 ;	.\ecen4350_lcd_v4.c:632: do
      000CCA 7B 10            [12] 3749 	mov	r3,#0x10
      000CCC                       3750 00101$:
                                   3751 ;	.\ecen4350_lcd_v4.c:635: write8(hi);
                                   3752 ;	assignBit
      000CCC D2 B5            [12] 3753 	setb	_P3_5
      000CCE 85*02 82         [24] 3754 	mov	dpl,_lcd_address
      000CD1 85*03 83         [24] 3755 	mov	dph,(_lcd_address + 1)
      000CD4 ED               [12] 3756 	mov	a,r5
      000CD5 F0               [24] 3757 	movx	@dptr,a
                                   3758 ;	assignBit
      000CD6 C2 B5            [12] 3759 	clr	_P3_5
                                   3760 ;	.\ecen4350_lcd_v4.c:636: write8(lo);
                                   3761 ;	assignBit
      000CD8 D2 B5            [12] 3762 	setb	_P3_5
      000CDA 85*02 82         [24] 3763 	mov	dpl,_lcd_address
      000CDD 85*03 83         [24] 3764 	mov	dph,(_lcd_address + 1)
      000CE0 EE               [12] 3765 	mov	a,r6
      000CE1 F0               [24] 3766 	movx	@dptr,a
                                   3767 ;	assignBit
      000CE2 C2 B5            [12] 3768 	clr	_P3_5
                                   3769 ;	.\ecen4350_lcd_v4.c:637: write8(hi);
                                   3770 ;	assignBit
      000CE4 D2 B5            [12] 3771 	setb	_P3_5
      000CE6 85*02 82         [24] 3772 	mov	dpl,_lcd_address
      000CE9 85*03 83         [24] 3773 	mov	dph,(_lcd_address + 1)
      000CEC ED               [12] 3774 	mov	a,r5
      000CED F0               [24] 3775 	movx	@dptr,a
                                   3776 ;	assignBit
      000CEE C2 B5            [12] 3777 	clr	_P3_5
                                   3778 ;	.\ecen4350_lcd_v4.c:638: write8(lo);
                                   3779 ;	assignBit
      000CF0 D2 B5            [12] 3780 	setb	_P3_5
      000CF2 85*02 82         [24] 3781 	mov	dpl,_lcd_address
      000CF5 85*03 83         [24] 3782 	mov	dph,(_lcd_address + 1)
      000CF8 EE               [12] 3783 	mov	a,r6
      000CF9 F0               [24] 3784 	movx	@dptr,a
                                   3785 ;	assignBit
      000CFA C2 B5            [12] 3786 	clr	_P3_5
                                   3787 ;	.\ecen4350_lcd_v4.c:639: write8(hi);
                                   3788 ;	assignBit
      000CFC D2 B5            [12] 3789 	setb	_P3_5
      000CFE 85*02 82         [24] 3790 	mov	dpl,_lcd_address
      000D01 85*03 83         [24] 3791 	mov	dph,(_lcd_address + 1)
      000D04 ED               [12] 3792 	mov	a,r5
      000D05 F0               [24] 3793 	movx	@dptr,a
                                   3794 ;	assignBit
      000D06 C2 B5            [12] 3795 	clr	_P3_5
                                   3796 ;	.\ecen4350_lcd_v4.c:640: write8(lo);
                                   3797 ;	assignBit
      000D08 D2 B5            [12] 3798 	setb	_P3_5
      000D0A 85*02 82         [24] 3799 	mov	dpl,_lcd_address
      000D0D 85*03 83         [24] 3800 	mov	dph,(_lcd_address + 1)
      000D10 EE               [12] 3801 	mov	a,r6
      000D11 F0               [24] 3802 	movx	@dptr,a
                                   3803 ;	assignBit
      000D12 C2 B5            [12] 3804 	clr	_P3_5
                                   3805 ;	.\ecen4350_lcd_v4.c:641: write8(hi);
                                   3806 ;	assignBit
      000D14 D2 B5            [12] 3807 	setb	_P3_5
      000D16 85*02 82         [24] 3808 	mov	dpl,_lcd_address
      000D19 85*03 83         [24] 3809 	mov	dph,(_lcd_address + 1)
      000D1C ED               [12] 3810 	mov	a,r5
      000D1D F0               [24] 3811 	movx	@dptr,a
                                   3812 ;	assignBit
      000D1E C2 B5            [12] 3813 	clr	_P3_5
                                   3814 ;	.\ecen4350_lcd_v4.c:642: write8(lo);
                                   3815 ;	assignBit
      000D20 D2 B5            [12] 3816 	setb	_P3_5
      000D22 85*02 82         [24] 3817 	mov	dpl,_lcd_address
      000D25 85*03 83         [24] 3818 	mov	dph,(_lcd_address + 1)
      000D28 EE               [12] 3819 	mov	a,r6
      000D29 F0               [24] 3820 	movx	@dptr,a
                                   3821 ;	assignBit
      000D2A C2 B5            [12] 3822 	clr	_P3_5
                                   3823 ;	.\ecen4350_lcd_v4.c:643: } while (--i);
      000D2C DB 9E            [24] 3824 	djnz	r3,00101$
      000D2E 80 8D            [24] 3825 	sjmp	00104$
      000D30                       3826 00106$:
                                   3827 ;	.\ecen4350_lcd_v4.c:645: for (i = (char)len & 63; i--;)
      000D30 7F 3F            [12] 3828 	mov	r7,#0x3f
      000D32                       3829 00109$:
      000D32 8F 04            [24] 3830 	mov	ar4,r7
      000D34 1F               [12] 3831 	dec	r7
      000D35 EC               [12] 3832 	mov	a,r4
      000D36 60 1A            [24] 3833 	jz	00111$
                                   3834 ;	.\ecen4350_lcd_v4.c:648: write8(hi);
                                   3835 ;	assignBit
      000D38 D2 B5            [12] 3836 	setb	_P3_5
      000D3A 85*02 82         [24] 3837 	mov	dpl,_lcd_address
      000D3D 85*03 83         [24] 3838 	mov	dph,(_lcd_address + 1)
      000D40 ED               [12] 3839 	mov	a,r5
      000D41 F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	assignBit
      000D42 C2 B5            [12] 3842 	clr	_P3_5
                                   3843 ;	.\ecen4350_lcd_v4.c:649: write8(lo);
                                   3844 ;	assignBit
      000D44 D2 B5            [12] 3845 	setb	_P3_5
      000D46 85*02 82         [24] 3846 	mov	dpl,_lcd_address
      000D49 85*03 83         [24] 3847 	mov	dph,(_lcd_address + 1)
      000D4C EE               [12] 3848 	mov	a,r6
      000D4D F0               [24] 3849 	movx	@dptr,a
                                   3850 ;	assignBit
      000D4E C2 B5            [12] 3851 	clr	_P3_5
      000D50 80 E0            [24] 3852 	sjmp	00109$
      000D52                       3853 00111$:
                                   3854 ;	.\ecen4350_lcd_v4.c:653: }
      000D52 22               [24] 3855 	ret
                                   3856 ;------------------------------------------------------------
                                   3857 ;Allocation info for local variables in function 'clearLCD'
                                   3858 ;------------------------------------------------------------
                                   3859 ;	.\ecen4350_lcd_v4.c:655: void clearLCD (void)
                                   3860 ;	-----------------------------------------
                                   3861 ;	 function clearLCD
                                   3862 ;	-----------------------------------------
      000D53                       3863 _clearLCD:
                                   3864 ;	.\ecen4350_lcd_v4.c:657: fillScreen(colorBackground);
      000D53 90 00 00         [24] 3865 	mov	dptr,#0x0000
                                   3866 ;	.\ecen4350_lcd_v4.c:658: }
      000D56 02r0Cr6C         [24] 3867 	ljmp	_fillScreen
                                   3868 ;------------------------------------------------------------
                                   3869 ;Allocation info for local variables in function 'drawChar'
                                   3870 ;------------------------------------------------------------
                                   3871 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3872 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3873 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3874 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3875 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3876 ;x                         Allocated with name '_drawChar_x_65536_454'
                                   3877 ;i                         Allocated with name '_drawChar_i_131072_457'
                                   3878 ;line                      Allocated with name '_drawChar_line_196608_458'
                                   3879 ;j                         Allocated to registers r0 
                                   3880 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3881 ;------------------------------------------------------------
                                   3882 ;	.\ecen4350_lcd_v4.c:659: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3883 ;	-----------------------------------------
                                   3884 ;	 function drawChar
                                   3885 ;	-----------------------------------------
      000D59                       3886 _drawChar:
      000D59 85 82*48         [24] 3887 	mov	_drawChar_x_65536_454,dpl
      000D5C 85 83*49         [24] 3888 	mov	(_drawChar_x_65536_454 + 1),dph
                                   3889 ;	.\ecen4350_lcd_v4.c:661: if ((x >= TFTWIDTH) ||			// Clip right
      000D5F C3               [12] 3890 	clr	c
      000D60 E5*48            [12] 3891 	mov	a,_drawChar_x_65536_454
      000D62 94 F0            [12] 3892 	subb	a,#0xf0
      000D64 E5*49            [12] 3893 	mov	a,(_drawChar_x_65536_454 + 1)
      000D66 64 80            [12] 3894 	xrl	a,#0x80
      000D68 94 80            [12] 3895 	subb	a,#0x80
      000D6A 50 59            [24] 3896 	jnc	00101$
                                   3897 ;	.\ecen4350_lcd_v4.c:662: (y >= TFTHEIGHT) ||			// Clip bottom
      000D6C C3               [12] 3898 	clr	c
      000D6D E5*40            [12] 3899 	mov	a,_drawChar_PARM_2
      000D6F 94 40            [12] 3900 	subb	a,#0x40
      000D71 E5*41            [12] 3901 	mov	a,(_drawChar_PARM_2 + 1)
      000D73 64 80            [12] 3902 	xrl	a,#0x80
      000D75 94 81            [12] 3903 	subb	a,#0x81
      000D77 50 4C            [24] 3904 	jnc	00101$
                                   3905 ;	.\ecen4350_lcd_v4.c:663: ((x + 6 * size - 1) < 0) || // Clip left
      000D79 AC*47            [24] 3906 	mov	r4,_drawChar_PARM_6
      000D7B 7D 00            [12] 3907 	mov	r5,#0x00
      000D7D 8C*00            [24] 3908 	mov	__mulint_PARM_2,r4
      000D7F 8D*01            [24] 3909 	mov	(__mulint_PARM_2 + 1),r5
      000D81 90 00 06         [24] 3910 	mov	dptr,#0x0006
      000D84 C0 05            [24] 3911 	push	ar5
      000D86 C0 04            [24] 3912 	push	ar4
      000D88 12r00r00         [24] 3913 	lcall	__mulint
      000D8B AA 82            [24] 3914 	mov	r2,dpl
      000D8D AB 83            [24] 3915 	mov	r3,dph
      000D8F D0 04            [24] 3916 	pop	ar4
      000D91 D0 05            [24] 3917 	pop	ar5
      000D93 EA               [12] 3918 	mov	a,r2
      000D94 25*48            [12] 3919 	add	a,_drawChar_x_65536_454
      000D96 FA               [12] 3920 	mov	r2,a
      000D97 EB               [12] 3921 	mov	a,r3
      000D98 35*49            [12] 3922 	addc	a,(_drawChar_x_65536_454 + 1)
      000D9A FB               [12] 3923 	mov	r3,a
      000D9B 1A               [12] 3924 	dec	r2
      000D9C BA FF 01         [24] 3925 	cjne	r2,#0xff,00182$
      000D9F 1B               [12] 3926 	dec	r3
      000DA0                       3927 00182$:
      000DA0 EB               [12] 3928 	mov	a,r3
      000DA1 20 E7 21         [24] 3929 	jb	acc.7,00101$
                                   3930 ;	.\ecen4350_lcd_v4.c:664: ((y + 8 * size - 1) < 0))	// Clip top
      000DA4 ED               [12] 3931 	mov	a,r5
      000DA5 C4               [12] 3932 	swap	a
      000DA6 03               [12] 3933 	rr	a
      000DA7 54 F8            [12] 3934 	anl	a,#0xf8
      000DA9 CC               [12] 3935 	xch	a,r4
      000DAA C4               [12] 3936 	swap	a
      000DAB 03               [12] 3937 	rr	a
      000DAC CC               [12] 3938 	xch	a,r4
      000DAD 6C               [12] 3939 	xrl	a,r4
      000DAE CC               [12] 3940 	xch	a,r4
      000DAF 54 F8            [12] 3941 	anl	a,#0xf8
      000DB1 CC               [12] 3942 	xch	a,r4
      000DB2 6C               [12] 3943 	xrl	a,r4
      000DB3 FD               [12] 3944 	mov	r5,a
      000DB4 EC               [12] 3945 	mov	a,r4
      000DB5 25*40            [12] 3946 	add	a,_drawChar_PARM_2
      000DB7 FC               [12] 3947 	mov	r4,a
      000DB8 ED               [12] 3948 	mov	a,r5
      000DB9 35*41            [12] 3949 	addc	a,(_drawChar_PARM_2 + 1)
      000DBB FD               [12] 3950 	mov	r5,a
      000DBC 1C               [12] 3951 	dec	r4
      000DBD BC FF 01         [24] 3952 	cjne	r4,#0xff,00184$
      000DC0 1D               [12] 3953 	dec	r5
      000DC1                       3954 00184$:
      000DC1 ED               [12] 3955 	mov	a,r5
      000DC2 30 E7 01         [24] 3956 	jnb	acc.7,00141$
      000DC5                       3957 00101$:
                                   3958 ;	.\ecen4350_lcd_v4.c:666: return;
      000DC5 22               [24] 3959 	ret
                                   3960 ;	.\ecen4350_lcd_v4.c:669: for (char i = 0; i < 6; i++)
      000DC6                       3961 00141$:
      000DC6 74 01            [12] 3962 	mov	a,#0x01
      000DC8 B5*47 04         [24] 3963 	cjne	a,_drawChar_PARM_6,00186$
      000DCB 74 01            [12] 3964 	mov	a,#0x01
      000DCD 80 01            [24] 3965 	sjmp	00187$
      000DCF                       3966 00186$:
      000DCF E4               [12] 3967 	clr	a
      000DD0                       3968 00187$:
      000DD0 FD               [12] 3969 	mov	r5,a
      000DD1 FC               [12] 3970 	mov	r4,a
      000DD2 E5*43            [12] 3971 	mov	a,_drawChar_PARM_4
      000DD4 B5*45 09         [24] 3972 	cjne	a,_drawChar_PARM_5,00188$
      000DD7 E5*44            [12] 3973 	mov	a,(_drawChar_PARM_4 + 1)
      000DD9 B5*46 04         [24] 3974 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000DDC 74 01            [12] 3975 	mov	a,#0x01
      000DDE 80 01            [24] 3976 	sjmp	00189$
      000DE0                       3977 00188$:
      000DE0 E4               [12] 3978 	clr	a
      000DE1                       3979 00189$:
      000DE1 FB               [12] 3980 	mov	r3,a
      000DE2 75*4A 00         [24] 3981 	mov	_drawChar_i_131072_457,#0x00
      000DE5                       3982 00126$:
      000DE5 74 FA            [12] 3983 	mov	a,#0x100 - 0x06
      000DE7 25*4A            [12] 3984 	add	a,_drawChar_i_131072_457
      000DE9 50 01            [24] 3985 	jnc	00190$
      000DEB 22               [24] 3986 	ret
      000DEC                       3987 00190$:
                                   3988 ;	.\ecen4350_lcd_v4.c:673: if (i == 5)
      000DEC 74 05            [12] 3989 	mov	a,#0x05
      000DEE B5*4A 05         [24] 3990 	cjne	a,_drawChar_i_131072_457,00107$
                                   3991 ;	.\ecen4350_lcd_v4.c:675: line = 0x0;
      000DF1 75*4B 00         [24] 3992 	mov	_drawChar_line_196608_458,#0x00
      000DF4 80 31            [24] 3993 	sjmp	00140$
      000DF6                       3994 00107$:
                                   3995 ;	.\ecen4350_lcd_v4.c:679: line = pgm_read_byte(font + (c * 5) + i);
      000DF6 85*42*00         [24] 3996 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000DF9 75*01 00         [24] 3997 	mov	(__mulint_PARM_2 + 1),#0x00
      000DFC 90 00 05         [24] 3998 	mov	dptr,#0x0005
      000DFF C0 05            [24] 3999 	push	ar5
      000E01 C0 04            [24] 4000 	push	ar4
      000E03 C0 03            [24] 4001 	push	ar3
      000E05 12r00r00         [24] 4002 	lcall	__mulint
      000E08 A8 82            [24] 4003 	mov	r0,dpl
      000E0A AF 83            [24] 4004 	mov	r7,dph
      000E0C D0 03            [24] 4005 	pop	ar3
      000E0E D0 04            [24] 4006 	pop	ar4
      000E10 D0 05            [24] 4007 	pop	ar5
      000E12 E8               [12] 4008 	mov	a,r0
      000E13 24r00            [12] 4009 	add	a,#_font
      000E15 F8               [12] 4010 	mov	r0,a
      000E16 EF               [12] 4011 	mov	a,r7
      000E17 34s00            [12] 4012 	addc	a,#(_font >> 8)
      000E19 FF               [12] 4013 	mov	r7,a
      000E1A E5*4A            [12] 4014 	mov	a,_drawChar_i_131072_457
      000E1C 28               [12] 4015 	add	a,r0
      000E1D F5 82            [12] 4016 	mov	dpl,a
      000E1F E4               [12] 4017 	clr	a
      000E20 3F               [12] 4018 	addc	a,r7
      000E21 F5 83            [12] 4019 	mov	dph,a
      000E23 E4               [12] 4020 	clr	a
      000E24 93               [24] 4021 	movc	a,@a+dptr
      000E25 F5*4B            [12] 4022 	mov	_drawChar_line_196608_458,a
                                   4023 ;	.\ecen4350_lcd_v4.c:682: for (char j = 0; j < 8; j++)
      000E27                       4024 00140$:
      000E27 85*4A F0         [24] 4025 	mov	b,_drawChar_i_131072_457
      000E2A E5*47            [12] 4026 	mov	a,_drawChar_PARM_6
      000E2C A4               [48] 4027 	mul	ab
      000E2D 25*48            [12] 4028 	add	a,_drawChar_x_65536_454
      000E2F FE               [12] 4029 	mov	r6,a
      000E30 E5*49            [12] 4030 	mov	a,(_drawChar_x_65536_454 + 1)
      000E32 35 F0            [12] 4031 	addc	a,b
      000E34 FF               [12] 4032 	mov	r7,a
      000E35 8E*4C            [24] 4033 	mov	_drawChar_sloc0_1_0,r6
      000E37 8F*4D            [24] 4034 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000E39 78 00            [12] 4035 	mov	r0,#0x00
      000E3B                       4036 00123$:
      000E3B B8 08 00         [24] 4037 	cjne	r0,#0x08,00193$
      000E3E                       4038 00193$:
      000E3E 40 03            [24] 4039 	jc	00194$
      000E40 02r0Fr65         [24] 4040 	ljmp	00127$
      000E43                       4041 00194$:
                                   4042 ;	.\ecen4350_lcd_v4.c:684: if (line & 0x1)
      000E43 E5*4B            [12] 4043 	mov	a,_drawChar_line_196608_458
      000E45 20 E0 03         [24] 4044 	jb	acc.0,00195$
      000E48 02r0ErD3         [24] 4045 	ljmp	00118$
      000E4B                       4046 00195$:
                                   4047 ;	.\ecen4350_lcd_v4.c:686: if (size == 1) // default size
      000E4B ED               [12] 4048 	mov	a,r5
      000E4C 60 40            [24] 4049 	jz	00110$
                                   4050 ;	.\ecen4350_lcd_v4.c:688: drawPixel(x + i, y + j, color);
      000E4E A9*4A            [24] 4051 	mov	r1,_drawChar_i_131072_457
      000E50 7A 00            [12] 4052 	mov	r2,#0x00
      000E52 E9               [12] 4053 	mov	a,r1
      000E53 25*48            [12] 4054 	add	a,_drawChar_x_65536_454
      000E55 F5 82            [12] 4055 	mov	dpl,a
      000E57 EA               [12] 4056 	mov	a,r2
      000E58 35*49            [12] 4057 	addc	a,(_drawChar_x_65536_454 + 1)
      000E5A F5 83            [12] 4058 	mov	dph,a
      000E5C 88 01            [24] 4059 	mov	ar1,r0
      000E5E 7A 00            [12] 4060 	mov	r2,#0x00
      000E60 E9               [12] 4061 	mov	a,r1
      000E61 25*40            [12] 4062 	add	a,_drawChar_PARM_2
      000E63 F5*20            [12] 4063 	mov	_drawPixel_PARM_2,a
      000E65 EA               [12] 4064 	mov	a,r2
      000E66 35*41            [12] 4065 	addc	a,(_drawChar_PARM_2 + 1)
      000E68 F5*21            [12] 4066 	mov	(_drawPixel_PARM_2 + 1),a
      000E6A 85*43*22         [24] 4067 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000E6D 85*44*23         [24] 4068 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000E70 C0 07            [24] 4069 	push	ar7
      000E72 C0 06            [24] 4070 	push	ar6
      000E74 C0 05            [24] 4071 	push	ar5
      000E76 C0 04            [24] 4072 	push	ar4
      000E78 C0 03            [24] 4073 	push	ar3
      000E7A C0 00            [24] 4074 	push	ar0
      000E7C 12r07r2D         [24] 4075 	lcall	_drawPixel
      000E7F D0 00            [24] 4076 	pop	ar0
      000E81 D0 03            [24] 4077 	pop	ar3
      000E83 D0 04            [24] 4078 	pop	ar4
      000E85 D0 05            [24] 4079 	pop	ar5
      000E87 D0 06            [24] 4080 	pop	ar6
      000E89 D0 07            [24] 4081 	pop	ar7
      000E8B 02r0Fr5B         [24] 4082 	ljmp	00119$
      000E8E                       4083 00110$:
                                   4084 ;	.\ecen4350_lcd_v4.c:692: fillRect(x + (i * size), y + (j * size), size, size, color);
      000E8E 88 F0            [24] 4085 	mov	b,r0
      000E90 E5*47            [12] 4086 	mov	a,_drawChar_PARM_6
      000E92 A4               [48] 4087 	mul	ab
      000E93 25*40            [12] 4088 	add	a,_drawChar_PARM_2
      000E95 F5*38            [12] 4089 	mov	_fillRect_PARM_2,a
      000E97 E5*41            [12] 4090 	mov	a,(_drawChar_PARM_2 + 1)
      000E99 35 F0            [12] 4091 	addc	a,b
      000E9B F5*39            [12] 4092 	mov	(_fillRect_PARM_2 + 1),a
      000E9D A9*47            [24] 4093 	mov	r1,_drawChar_PARM_6
      000E9F 7A 00            [12] 4094 	mov	r2,#0x00
      000EA1 89*3A            [24] 4095 	mov	_fillRect_PARM_3,r1
      000EA3 8A*3B            [24] 4096 	mov	(_fillRect_PARM_3 + 1),r2
      000EA5 89*3C            [24] 4097 	mov	_fillRect_PARM_4,r1
      000EA7 8A*3D            [24] 4098 	mov	(_fillRect_PARM_4 + 1),r2
      000EA9 85*43*3E         [24] 4099 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000EAC 85*44*3F         [24] 4100 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000EAF 85*4C 82         [24] 4101 	mov	dpl,_drawChar_sloc0_1_0
      000EB2 85*4D 83         [24] 4102 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000EB5 C0 07            [24] 4103 	push	ar7
      000EB7 C0 06            [24] 4104 	push	ar6
      000EB9 C0 05            [24] 4105 	push	ar5
      000EBB C0 04            [24] 4106 	push	ar4
      000EBD C0 03            [24] 4107 	push	ar3
      000EBF C0 00            [24] 4108 	push	ar0
      000EC1 12r0ArA9         [24] 4109 	lcall	_fillRect
      000EC4 D0 00            [24] 4110 	pop	ar0
      000EC6 D0 03            [24] 4111 	pop	ar3
      000EC8 D0 04            [24] 4112 	pop	ar4
      000ECA D0 05            [24] 4113 	pop	ar5
      000ECC D0 06            [24] 4114 	pop	ar6
      000ECE D0 07            [24] 4115 	pop	ar7
      000ED0 02r0Fr5B         [24] 4116 	ljmp	00119$
      000ED3                       4117 00118$:
                                   4118 ;	.\ecen4350_lcd_v4.c:695: else if (bg != color)
      000ED3 EB               [12] 4119 	mov	a,r3
      000ED4 60 03            [24] 4120 	jz	00197$
      000ED6 02r0Fr5B         [24] 4121 	ljmp	00119$
      000ED9                       4122 00197$:
                                   4123 ;	.\ecen4350_lcd_v4.c:697: if (size == 1) // default size
      000ED9 EC               [12] 4124 	mov	a,r4
      000EDA 60 3F            [24] 4125 	jz	00113$
                                   4126 ;	.\ecen4350_lcd_v4.c:699: drawPixel(x + i, y + j, bg);
      000EDC A9*4A            [24] 4127 	mov	r1,_drawChar_i_131072_457
      000EDE 7A 00            [12] 4128 	mov	r2,#0x00
      000EE0 E9               [12] 4129 	mov	a,r1
      000EE1 25*48            [12] 4130 	add	a,_drawChar_x_65536_454
      000EE3 F5 82            [12] 4131 	mov	dpl,a
      000EE5 EA               [12] 4132 	mov	a,r2
      000EE6 35*49            [12] 4133 	addc	a,(_drawChar_x_65536_454 + 1)
      000EE8 F5 83            [12] 4134 	mov	dph,a
      000EEA 88 01            [24] 4135 	mov	ar1,r0
      000EEC 7A 00            [12] 4136 	mov	r2,#0x00
      000EEE E9               [12] 4137 	mov	a,r1
      000EEF 25*40            [12] 4138 	add	a,_drawChar_PARM_2
      000EF1 F5*20            [12] 4139 	mov	_drawPixel_PARM_2,a
      000EF3 EA               [12] 4140 	mov	a,r2
      000EF4 35*41            [12] 4141 	addc	a,(_drawChar_PARM_2 + 1)
      000EF6 F5*21            [12] 4142 	mov	(_drawPixel_PARM_2 + 1),a
      000EF8 85*45*22         [24] 4143 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000EFB 85*46*23         [24] 4144 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000EFE C0 07            [24] 4145 	push	ar7
      000F00 C0 06            [24] 4146 	push	ar6
      000F02 C0 05            [24] 4147 	push	ar5
      000F04 C0 04            [24] 4148 	push	ar4
      000F06 C0 03            [24] 4149 	push	ar3
      000F08 C0 00            [24] 4150 	push	ar0
      000F0A 12r07r2D         [24] 4151 	lcall	_drawPixel
      000F0D D0 00            [24] 4152 	pop	ar0
      000F0F D0 03            [24] 4153 	pop	ar3
      000F11 D0 04            [24] 4154 	pop	ar4
      000F13 D0 05            [24] 4155 	pop	ar5
      000F15 D0 06            [24] 4156 	pop	ar6
      000F17 D0 07            [24] 4157 	pop	ar7
      000F19 80 40            [24] 4158 	sjmp	00119$
      000F1B                       4159 00113$:
                                   4160 ;	.\ecen4350_lcd_v4.c:703: fillRect(x + i * size, y + j * size, size, size, bg);
      000F1B 88 F0            [24] 4161 	mov	b,r0
      000F1D E5*47            [12] 4162 	mov	a,_drawChar_PARM_6
      000F1F A4               [48] 4163 	mul	ab
      000F20 25*40            [12] 4164 	add	a,_drawChar_PARM_2
      000F22 F5*38            [12] 4165 	mov	_fillRect_PARM_2,a
      000F24 E5*41            [12] 4166 	mov	a,(_drawChar_PARM_2 + 1)
      000F26 35 F0            [12] 4167 	addc	a,b
      000F28 F5*39            [12] 4168 	mov	(_fillRect_PARM_2 + 1),a
      000F2A A9*47            [24] 4169 	mov	r1,_drawChar_PARM_6
      000F2C 7A 00            [12] 4170 	mov	r2,#0x00
      000F2E 89*3A            [24] 4171 	mov	_fillRect_PARM_3,r1
      000F30 8A*3B            [24] 4172 	mov	(_fillRect_PARM_3 + 1),r2
      000F32 89*3C            [24] 4173 	mov	_fillRect_PARM_4,r1
      000F34 8A*3D            [24] 4174 	mov	(_fillRect_PARM_4 + 1),r2
      000F36 85*45*3E         [24] 4175 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000F39 85*46*3F         [24] 4176 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000F3C 8E 82            [24] 4177 	mov	dpl,r6
      000F3E 8F 83            [24] 4178 	mov	dph,r7
      000F40 C0 07            [24] 4179 	push	ar7
      000F42 C0 06            [24] 4180 	push	ar6
      000F44 C0 05            [24] 4181 	push	ar5
      000F46 C0 04            [24] 4182 	push	ar4
      000F48 C0 03            [24] 4183 	push	ar3
      000F4A C0 00            [24] 4184 	push	ar0
      000F4C 12r0ArA9         [24] 4185 	lcall	_fillRect
      000F4F D0 00            [24] 4186 	pop	ar0
      000F51 D0 03            [24] 4187 	pop	ar3
      000F53 D0 04            [24] 4188 	pop	ar4
      000F55 D0 05            [24] 4189 	pop	ar5
      000F57 D0 06            [24] 4190 	pop	ar6
      000F59 D0 07            [24] 4191 	pop	ar7
      000F5B                       4192 00119$:
                                   4193 ;	.\ecen4350_lcd_v4.c:707: line >>= 1;
      000F5B E5*4B            [12] 4194 	mov	a,_drawChar_line_196608_458
      000F5D C3               [12] 4195 	clr	c
      000F5E 13               [12] 4196 	rrc	a
      000F5F F5*4B            [12] 4197 	mov	_drawChar_line_196608_458,a
                                   4198 ;	.\ecen4350_lcd_v4.c:682: for (char j = 0; j < 8; j++)
      000F61 08               [12] 4199 	inc	r0
      000F62 02r0Er3B         [24] 4200 	ljmp	00123$
      000F65                       4201 00127$:
                                   4202 ;	.\ecen4350_lcd_v4.c:669: for (char i = 0; i < 6; i++)
      000F65 05*4A            [12] 4203 	inc	_drawChar_i_131072_457
                                   4204 ;	.\ecen4350_lcd_v4.c:710: }
      000F67 02r0DrE5         [24] 4205 	ljmp	00126$
                                   4206 ;------------------------------------------------------------
                                   4207 ;Allocation info for local variables in function 'write'
                                   4208 ;------------------------------------------------------------
                                   4209 ;c                         Allocated to registers r7 
                                   4210 ;------------------------------------------------------------
                                   4211 ;	.\ecen4350_lcd_v4.c:712: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4212 ;	-----------------------------------------
                                   4213 ;	 function write
                                   4214 ;	-----------------------------------------
      000F6A                       4215 _write:
      000F6A AF 82            [24] 4216 	mov	r7,dpl
                                   4217 ;	.\ecen4350_lcd_v4.c:714: if (c == '\n')
      000F6C BF 0A 22         [24] 4218 	cjne	r7,#0x0a,00105$
                                   4219 ;	.\ecen4350_lcd_v4.c:716: cursor_y += textsize * 8;
      000F6F AD*0C            [24] 4220 	mov	r5,_textsize
      000F71 E4               [12] 4221 	clr	a
      000F72 C4               [12] 4222 	swap	a
      000F73 03               [12] 4223 	rr	a
      000F74 54 F8            [12] 4224 	anl	a,#0xf8
      000F76 CD               [12] 4225 	xch	a,r5
      000F77 C4               [12] 4226 	swap	a
      000F78 03               [12] 4227 	rr	a
      000F79 CD               [12] 4228 	xch	a,r5
      000F7A 6D               [12] 4229 	xrl	a,r5
      000F7B CD               [12] 4230 	xch	a,r5
      000F7C 54 F8            [12] 4231 	anl	a,#0xf8
      000F7E CD               [12] 4232 	xch	a,r5
      000F7F 6D               [12] 4233 	xrl	a,r5
      000F80 FE               [12] 4234 	mov	r6,a
      000F81 ED               [12] 4235 	mov	a,r5
      000F82 25*0A            [12] 4236 	add	a,_cursor_y
      000F84 F5*0A            [12] 4237 	mov	_cursor_y,a
      000F86 EE               [12] 4238 	mov	a,r6
      000F87 35*0B            [12] 4239 	addc	a,(_cursor_y + 1)
      000F89 F5*0B            [12] 4240 	mov	(_cursor_y + 1),a
                                   4241 ;	.\ecen4350_lcd_v4.c:717: cursor_x = 0;
      000F8B E4               [12] 4242 	clr	a
      000F8C F5*08            [12] 4243 	mov	_cursor_x,a
      000F8E F5*09            [12] 4244 	mov	(_cursor_x + 1),a
      000F90 22               [24] 4245 	ret
      000F91                       4246 00105$:
                                   4247 ;	.\ecen4350_lcd_v4.c:719: else if (c == '\r')
      000F91 BF 0D 01         [24] 4248 	cjne	r7,#0x0d,00119$
      000F94 22               [24] 4249 	ret
      000F95                       4250 00119$:
                                   4251 ;	.\ecen4350_lcd_v4.c:725: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000F95 85*0A*40         [24] 4252 	mov	_drawChar_PARM_2,_cursor_y
      000F98 85*0B*41         [24] 4253 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000F9B 8F*42            [24] 4254 	mov	_drawChar_PARM_3,r7
      000F9D 85*0E*43         [24] 4255 	mov	_drawChar_PARM_4,_textcolor
      000FA0 85*0F*44         [24] 4256 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000FA3 85*10*45         [24] 4257 	mov	_drawChar_PARM_5,_textbgcolor
      000FA6 85*11*46         [24] 4258 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000FA9 85*0C*47         [24] 4259 	mov	_drawChar_PARM_6,_textsize
      000FAC 85*08 82         [24] 4260 	mov	dpl,_cursor_x
      000FAF 85*09 83         [24] 4261 	mov	dph,(_cursor_x + 1)
      000FB2 12r0Dr59         [24] 4262 	lcall	_drawChar
                                   4263 ;	.\ecen4350_lcd_v4.c:726: cursor_x += textsize * 6;
      000FB5 85*0C*00         [24] 4264 	mov	__mulint_PARM_2,_textsize
      000FB8 75*01 00         [24] 4265 	mov	(__mulint_PARM_2 + 1),#0x00
      000FBB 90 00 06         [24] 4266 	mov	dptr,#0x0006
      000FBE 12r00r00         [24] 4267 	lcall	__mulint
      000FC1 AE 82            [24] 4268 	mov	r6,dpl
      000FC3 AF 83            [24] 4269 	mov	r7,dph
      000FC5 EE               [12] 4270 	mov	a,r6
      000FC6 25*08            [12] 4271 	add	a,_cursor_x
      000FC8 F5*08            [12] 4272 	mov	_cursor_x,a
      000FCA EF               [12] 4273 	mov	a,r7
      000FCB 35*09            [12] 4274 	addc	a,(_cursor_x + 1)
      000FCD F5*09            [12] 4275 	mov	(_cursor_x + 1),a
                                   4276 ;	.\ecen4350_lcd_v4.c:728: }
      000FCF 22               [24] 4277 	ret
                                   4278 ;------------------------------------------------------------
                                   4279 ;Allocation info for local variables in function 'LCD_string_write'
                                   4280 ;------------------------------------------------------------
                                   4281 ;str                       Allocated to registers r5 r6 r7 
                                   4282 ;i                         Allocated to registers r3 r4 
                                   4283 ;------------------------------------------------------------
                                   4284 ;	.\ecen4350_lcd_v4.c:729: void LCD_string_write(char *str)
                                   4285 ;	-----------------------------------------
                                   4286 ;	 function LCD_string_write
                                   4287 ;	-----------------------------------------
      000FD0                       4288 _LCD_string_write:
      000FD0 AD 82            [24] 4289 	mov	r5,dpl
      000FD2 AE 83            [24] 4290 	mov	r6,dph
      000FD4 AF F0            [24] 4291 	mov	r7,b
                                   4292 ;	.\ecen4350_lcd_v4.c:732: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      000FD6 7B 00            [12] 4293 	mov	r3,#0x00
      000FD8 7C 00            [12] 4294 	mov	r4,#0x00
      000FDA                       4295 00103$:
      000FDA EB               [12] 4296 	mov	a,r3
      000FDB 2D               [12] 4297 	add	a,r5
      000FDC F8               [12] 4298 	mov	r0,a
      000FDD EC               [12] 4299 	mov	a,r4
      000FDE 3E               [12] 4300 	addc	a,r6
      000FDF F9               [12] 4301 	mov	r1,a
      000FE0 8F 02            [24] 4302 	mov	ar2,r7
      000FE2 88 82            [24] 4303 	mov	dpl,r0
      000FE4 89 83            [24] 4304 	mov	dph,r1
      000FE6 8A F0            [24] 4305 	mov	b,r2
      000FE8 12r00r00         [24] 4306 	lcall	__gptrget
      000FEB FA               [12] 4307 	mov	r2,a
      000FEC 60 20            [24] 4308 	jz	00105$
                                   4309 ;	.\ecen4350_lcd_v4.c:734: write(str[i]); /* Call transmit data function */
      000FEE 8A 82            [24] 4310 	mov	dpl,r2
      000FF0 C0 07            [24] 4311 	push	ar7
      000FF2 C0 06            [24] 4312 	push	ar6
      000FF4 C0 05            [24] 4313 	push	ar5
      000FF6 C0 04            [24] 4314 	push	ar4
      000FF8 C0 03            [24] 4315 	push	ar3
      000FFA 12r0Fr6A         [24] 4316 	lcall	_write
      000FFD D0 03            [24] 4317 	pop	ar3
      000FFF D0 04            [24] 4318 	pop	ar4
      001001 D0 05            [24] 4319 	pop	ar5
      001003 D0 06            [24] 4320 	pop	ar6
      001005 D0 07            [24] 4321 	pop	ar7
                                   4322 ;	.\ecen4350_lcd_v4.c:732: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      001007 0B               [12] 4323 	inc	r3
      001008 BB 00 CF         [24] 4324 	cjne	r3,#0x00,00103$
      00100B 0C               [12] 4325 	inc	r4
      00100C 80 CC            [24] 4326 	sjmp	00103$
      00100E                       4327 00105$:
                                   4328 ;	.\ecen4350_lcd_v4.c:736: }
      00100E 22               [24] 4329 	ret
                                   4330 ;------------------------------------------------------------
                                   4331 ;Allocation info for local variables in function 'writeNewLine'
                                   4332 ;------------------------------------------------------------
                                   4333 ;	.\ecen4350_lcd_v4.c:738: void writeNewLine(void)
                                   4334 ;	-----------------------------------------
                                   4335 ;	 function writeNewLine
                                   4336 ;	-----------------------------------------
      00100F                       4337 _writeNewLine:
                                   4338 ;	.\ecen4350_lcd_v4.c:740: write('\n');
      00100F 75 82 0A         [24] 4339 	mov	dpl,#0x0a
                                   4340 ;	.\ecen4350_lcd_v4.c:741: }
      001012 02r0Fr6A         [24] 4341 	ljmp	_write
                                   4342 ;------------------------------------------------------------
                                   4343 ;Allocation info for local variables in function 'freeType'
                                   4344 ;------------------------------------------------------------
                                   4345 ;count                     Allocated to registers r7 
                                   4346 ;d                         Allocated to registers 
                                   4347 ;row                       Allocated to registers r6 
                                   4348 ;------------------------------------------------------------
                                   4349 ;	.\ecen4350_lcd_v4.c:743: void freeType()
                                   4350 ;	-----------------------------------------
                                   4351 ;	 function freeType
                                   4352 ;	-----------------------------------------
      001015                       4353 _freeType:
                                   4354 ;	.\ecen4350_lcd_v4.c:745: unsigned char count = 0;
      001015 7F 00            [12] 4355 	mov	r7,#0x00
                                   4356 ;	.\ecen4350_lcd_v4.c:747: u8 row = 1;
      001017 7E 01            [12] 4357 	mov	r6,#0x01
                                   4358 ;	.\ecen4350_lcd_v4.c:749: clearLCD();
      001019 C0 07            [24] 4359 	push	ar7
      00101B C0 06            [24] 4360 	push	ar6
      00101D 12r0Dr53         [24] 4361 	lcall	_clearLCD
                                   4362 ;	.\ecen4350_lcd_v4.c:750: setCursor(0,0);
      001020 E4               [12] 4363 	clr	a
      001021 F5*00            [12] 4364 	mov	_setCursor_PARM_2,a
      001023 F5*01            [12] 4365 	mov	(_setCursor_PARM_2 + 1),a
      001025 90 00 00         [24] 4366 	mov	dptr,#0x0000
      001028 12r04rB6         [24] 4367 	lcall	_setCursor
                                   4368 ;	.\ecen4350_lcd_v4.c:751: setTextColor(colorSelect, colorBackground);
      00102B E4               [12] 4369 	clr	a
      00102C F5*00            [12] 4370 	mov	_setTextColor_PARM_2,a
      00102E F5*01            [12] 4371 	mov	(_setTextColor_PARM_2 + 1),a
      001030 90 F8 1F         [24] 4372 	mov	dptr,#0xf81f
      001033 12r04rC3         [24] 4373 	lcall	_setTextColor
                                   4374 ;	.\ecen4350_lcd_v4.c:752: LCD_string_write("Free Type: \n");
      001036 90r05r1C         [24] 4375 	mov	dptr,#___str_1
      001039 75 F0 80         [24] 4376 	mov	b,#0x80
      00103C 12r0FrD0         [24] 4377 	lcall	_LCD_string_write
                                   4378 ;	.\ecen4350_lcd_v4.c:753: setTextColor(colorText, colorBackground);
      00103F E4               [12] 4379 	clr	a
      001040 F5*00            [12] 4380 	mov	_setTextColor_PARM_2,a
      001042 F5*01            [12] 4381 	mov	(_setTextColor_PARM_2 + 1),a
      001044 90 07 FF         [24] 4382 	mov	dptr,#0x07ff
      001047 12r04rC3         [24] 4383 	lcall	_setTextColor
                                   4384 ;	.\ecen4350_lcd_v4.c:754: LCD_string_write("0x");
      00104A 90r05r29         [24] 4385 	mov	dptr,#___str_2
      00104D 75 F0 80         [24] 4386 	mov	b,#0x80
      001050 12r0FrD0         [24] 4387 	lcall	_LCD_string_write
      001053 D0 06            [24] 4388 	pop	ar6
      001055 D0 07            [24] 4389 	pop	ar7
                                   4390 ;	.\ecen4350_lcd_v4.c:755: while (1)
      001057                       4391 00108$:
                                   4392 ;	.\ecen4350_lcd_v4.c:758: if (count == 8)
      001057 BF 08 02         [24] 4393 	cjne	r7,#0x08,00124$
      00105A 80 03            [24] 4394 	sjmp	00125$
      00105C                       4395 00124$:
      00105C 02r10rDC         [24] 4396 	ljmp	00105$
      00105F                       4397 00125$:
                                   4398 ;	.\ecen4350_lcd_v4.c:761: count = 0;
      00105F 7F 00            [12] 4399 	mov	r7,#0x00
                                   4400 ;	.\ecen4350_lcd_v4.c:762: write(d);
      001061 75 82 0A         [24] 4401 	mov	dpl,#0x0a
      001064 C0 07            [24] 4402 	push	ar7
      001066 C0 06            [24] 4403 	push	ar6
      001068 12r0Fr6A         [24] 4404 	lcall	_write
      00106B D0 06            [24] 4405 	pop	ar6
      00106D D0 07            [24] 4406 	pop	ar7
                                   4407 ;	.\ecen4350_lcd_v4.c:763: if (row == 4)
      00106F BE 04 55         [24] 4408 	cjne	r6,#0x04,00102$
                                   4409 ;	.\ecen4350_lcd_v4.c:765: delay(5);
      001072 90 00 05         [24] 4410 	mov	dptr,#0x0005
      001075 C0 07            [24] 4411 	push	ar7
      001077 12r00rE0         [24] 4412 	lcall	_delay
                                   4413 ;	.\ecen4350_lcd_v4.c:766: clearLCD();
      00107A 12r0Dr53         [24] 4414 	lcall	_clearLCD
                                   4415 ;	.\ecen4350_lcd_v4.c:767: setTextColor(colorSelect, colorBackground);
      00107D E4               [12] 4416 	clr	a
      00107E F5*00            [12] 4417 	mov	_setTextColor_PARM_2,a
      001080 F5*01            [12] 4418 	mov	(_setTextColor_PARM_2 + 1),a
      001082 90 F8 1F         [24] 4419 	mov	dptr,#0xf81f
      001085 12r04rC3         [24] 4420 	lcall	_setTextColor
                                   4421 ;	.\ecen4350_lcd_v4.c:768: rtcPrint();
      001088 12r03rA6         [24] 4422 	lcall	_rtcPrint
                                   4423 ;	.\ecen4350_lcd_v4.c:769: clearLCD();
      00108B 12r0Dr53         [24] 4424 	lcall	_clearLCD
                                   4425 ;	.\ecen4350_lcd_v4.c:770: setCursor(0,0);
      00108E E4               [12] 4426 	clr	a
      00108F F5*00            [12] 4427 	mov	_setCursor_PARM_2,a
      001091 F5*01            [12] 4428 	mov	(_setCursor_PARM_2 + 1),a
      001093 90 00 00         [24] 4429 	mov	dptr,#0x0000
      001096 12r04rB6         [24] 4430 	lcall	_setCursor
                                   4431 ;	.\ecen4350_lcd_v4.c:771: setTextColor(colorSelect, colorBackground);
      001099 E4               [12] 4432 	clr	a
      00109A F5*00            [12] 4433 	mov	_setTextColor_PARM_2,a
      00109C F5*01            [12] 4434 	mov	(_setTextColor_PARM_2 + 1),a
      00109E 90 F8 1F         [24] 4435 	mov	dptr,#0xf81f
      0010A1 12r04rC3         [24] 4436 	lcall	_setTextColor
                                   4437 ;	.\ecen4350_lcd_v4.c:772: LCD_string_write("Free Type: \n");
      0010A4 90r05r1C         [24] 4438 	mov	dptr,#___str_1
      0010A7 75 F0 80         [24] 4439 	mov	b,#0x80
      0010AA 12r0FrD0         [24] 4440 	lcall	_LCD_string_write
                                   4441 ;	.\ecen4350_lcd_v4.c:773: setTextColor(colorText, colorBackground);
      0010AD E4               [12] 4442 	clr	a
      0010AE F5*00            [12] 4443 	mov	_setTextColor_PARM_2,a
      0010B0 F5*01            [12] 4444 	mov	(_setTextColor_PARM_2 + 1),a
      0010B2 90 07 FF         [24] 4445 	mov	dptr,#0x07ff
      0010B5 12r04rC3         [24] 4446 	lcall	_setTextColor
                                   4447 ;	.\ecen4350_lcd_v4.c:774: LCD_string_write("0x");
      0010B8 90r05r29         [24] 4448 	mov	dptr,#___str_2
      0010BB 75 F0 80         [24] 4449 	mov	b,#0x80
      0010BE 12r0FrD0         [24] 4450 	lcall	_LCD_string_write
      0010C1 D0 07            [24] 4451 	pop	ar7
                                   4452 ;	.\ecen4350_lcd_v4.c:776: row = 1;
      0010C3 7E 01            [12] 4453 	mov	r6,#0x01
      0010C5 80 90            [24] 4454 	sjmp	00108$
      0010C7                       4455 00102$:
                                   4456 ;	.\ecen4350_lcd_v4.c:779: LCD_string_write("0x");
      0010C7 90r05r29         [24] 4457 	mov	dptr,#___str_2
      0010CA 75 F0 80         [24] 4458 	mov	b,#0x80
      0010CD C0 07            [24] 4459 	push	ar7
      0010CF C0 06            [24] 4460 	push	ar6
      0010D1 12r0FrD0         [24] 4461 	lcall	_LCD_string_write
      0010D4 D0 06            [24] 4462 	pop	ar6
      0010D6 D0 07            [24] 4463 	pop	ar7
                                   4464 ;	.\ecen4350_lcd_v4.c:780: row++;
      0010D8 0E               [12] 4465 	inc	r6
      0010D9 02r10r57         [24] 4466 	ljmp	00108$
      0010DC                       4467 00105$:
                                   4468 ;	.\ecen4350_lcd_v4.c:785: d = keyDetect();
      0010DC C0 07            [24] 4469 	push	ar7
      0010DE C0 06            [24] 4470 	push	ar6
      0010E0 12r10rEE         [24] 4471 	lcall	_keyDetect
                                   4472 ;	.\ecen4350_lcd_v4.c:786: write(d);
      0010E3 12r0Fr6A         [24] 4473 	lcall	_write
      0010E6 D0 06            [24] 4474 	pop	ar6
      0010E8 D0 07            [24] 4475 	pop	ar7
                                   4476 ;	.\ecen4350_lcd_v4.c:787: count++;
      0010EA 0F               [12] 4477 	inc	r7
                                   4478 ;	.\ecen4350_lcd_v4.c:792: }
      0010EB 02r10r57         [24] 4479 	ljmp	00108$
                                   4480 ;------------------------------------------------------------
                                   4481 ;Allocation info for local variables in function 'keyDetect'
                                   4482 ;------------------------------------------------------------
                                   4483 ;portdata                  Allocated to registers r7 
                                   4484 ;------------------------------------------------------------
                                   4485 ;	.\ecen4350_lcd_v4.c:795: unsigned char keyDetect()
                                   4486 ;	-----------------------------------------
                                   4487 ;	 function keyDetect
                                   4488 ;	-----------------------------------------
      0010EE                       4489 _keyDetect:
                                   4490 ;	.\ecen4350_lcd_v4.c:798: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      0010EE 75 90 F0         [24] 4491 	mov	_P1,#0xf0
                                   4492 ;	.\ecen4350_lcd_v4.c:799: do 
      0010F1                       4493 00101$:
                                   4494 ;	.\ecen4350_lcd_v4.c:801: portdata = (__KEYPAD_PORT__ & 0xF0);
      0010F1 E5 90            [12] 4495 	mov	a,_P1
      0010F3 54 F0            [12] 4496 	anl	a,#0xf0
      0010F5 FF               [12] 4497 	mov	r7,a
                                   4498 ;	.\ecen4350_lcd_v4.c:802: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      0010F6 BF F0 F8         [24] 4499 	cjne	r7,#0xf0,00101$
                                   4500 ;	.\ecen4350_lcd_v4.c:806: do
      0010F9                       4501 00105$:
                                   4502 ;	.\ecen4350_lcd_v4.c:809: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      0010F9 85 90*00         [24] 4503 	mov	_colloc,_P1
                                   4504 ;	.\ecen4350_lcd_v4.c:810: colloc &= 0xF0;		  									/* mask port for column read only */
      0010FC 53*00 F0         [24] 4505 	anl	_colloc,#0xf0
                                   4506 ;	.\ecen4350_lcd_v4.c:811: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      0010FF 74 F0            [12] 4507 	mov	a,#0xf0
      001101 B5*00 04         [24] 4508 	cjne	a,_colloc,00107$
      001104 E5*07            [12] 4509 	mov	a,_received_flag
      001106 60 F1            [24] 4510 	jz	00105$
      001108                       4511 00107$:
                                   4512 ;	.\ecen4350_lcd_v4.c:812: delay(10);													/* 15ms key debounce time */
      001108 90 00 0A         [24] 4513 	mov	dptr,#0x000a
      00110B 12r00rE0         [24] 4514 	lcall	_delay
                                   4515 ;	.\ecen4350_lcd_v4.c:813: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      00110E E5 90            [12] 4516 	mov	a,_P1
      001110 54 F0            [12] 4517 	anl	a,#0xf0
                                   4518 ;	.\ecen4350_lcd_v4.c:814: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      001112 FF               [12] 4519 	mov	r7,a
      001113 B5*00 02         [24] 4520 	cjne	a,_colloc,00214$
      001116 80 04            [24] 4521 	sjmp	00123$
      001118                       4522 00214$:
      001118 E5*07            [12] 4523 	mov	a,_received_flag
      00111A 60 DD            [24] 4524 	jz	00105$
                                   4525 ;	.\ecen4350_lcd_v4.c:816: while (1)
      00111C                       4526 00123$:
                                   4527 ;	.\ecen4350_lcd_v4.c:818: if (received_flag == 1)											/* check for key input via serial interrupt */
      00111C 74 01            [12] 4528 	mov	a,#0x01
      00111E B5*07 09         [24] 4529 	cjne	a,_received_flag,00113$
                                   4530 ;	.\ecen4350_lcd_v4.c:820: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      001121 E5*06            [12] 4531 	mov	a,_received_byte
      001123 FF               [12] 4532 	mov	r7,a
      001124 24 C0            [12] 4533 	add	a,#0xc0
      001126 F5*06            [12] 4534 	mov	_received_byte,a
                                   4535 ;	.\ecen4350_lcd_v4.c:821: break;														/* break outside while() */
      001128 80 52            [24] 4536 	sjmp	00124$
      00112A                       4537 00113$:
                                   4538 ;	.\ecen4350_lcd_v4.c:824: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      00112A 75 90 FE         [24] 4539 	mov	_P1,#0xfe
                                   4540 ;	.\ecen4350_lcd_v4.c:825: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      00112D E5 90            [12] 4541 	mov	a,_P1
      00112F 54 F0            [12] 4542 	anl	a,#0xf0
      001131 F5*00            [12] 4543 	mov	_colloc,a
                                   4544 ;	.\ecen4350_lcd_v4.c:826: if (colloc != 0xF0)
      001133 74 F0            [12] 4545 	mov	a,#0xf0
      001135 B5*00 02         [24] 4546 	cjne	a,_colloc,00218$
      001138 80 05            [24] 4547 	sjmp	00115$
      00113A                       4548 00218$:
                                   4549 ;	.\ecen4350_lcd_v4.c:828: rowloc = 0;
      00113A 75*01 00         [24] 4550 	mov	_rowloc,#0x00
                                   4551 ;	.\ecen4350_lcd_v4.c:829: break;
      00113D 80 3D            [24] 4552 	sjmp	00124$
      00113F                       4553 00115$:
                                   4554 ;	.\ecen4350_lcd_v4.c:832: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      00113F 75 90 FD         [24] 4555 	mov	_P1,#0xfd
                                   4556 ;	.\ecen4350_lcd_v4.c:833: colloc = (__KEYPAD_PORT__ & 0xF0);
      001142 E5 90            [12] 4557 	mov	a,_P1
      001144 54 F0            [12] 4558 	anl	a,#0xf0
      001146 F5*00            [12] 4559 	mov	_colloc,a
                                   4560 ;	.\ecen4350_lcd_v4.c:834: if (colloc != 0xF0)
      001148 74 F0            [12] 4561 	mov	a,#0xf0
      00114A B5*00 02         [24] 4562 	cjne	a,_colloc,00219$
      00114D 80 05            [24] 4563 	sjmp	00117$
      00114F                       4564 00219$:
                                   4565 ;	.\ecen4350_lcd_v4.c:836: rowloc = 1;
      00114F 75*01 01         [24] 4566 	mov	_rowloc,#0x01
                                   4567 ;	.\ecen4350_lcd_v4.c:837: break;
      001152 80 28            [24] 4568 	sjmp	00124$
      001154                       4569 00117$:
                                   4570 ;	.\ecen4350_lcd_v4.c:840: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      001154 75 90 FB         [24] 4571 	mov	_P1,#0xfb
                                   4572 ;	.\ecen4350_lcd_v4.c:841: colloc = (__KEYPAD_PORT__ & 0xF0);
      001157 E5 90            [12] 4573 	mov	a,_P1
      001159 54 F0            [12] 4574 	anl	a,#0xf0
      00115B F5*00            [12] 4575 	mov	_colloc,a
                                   4576 ;	.\ecen4350_lcd_v4.c:842: if (colloc != 0xF0)
      00115D 74 F0            [12] 4577 	mov	a,#0xf0
      00115F B5*00 02         [24] 4578 	cjne	a,_colloc,00220$
      001162 80 05            [24] 4579 	sjmp	00119$
      001164                       4580 00220$:
                                   4581 ;	.\ecen4350_lcd_v4.c:844: rowloc = 2;
      001164 75*01 02         [24] 4582 	mov	_rowloc,#0x02
                                   4583 ;	.\ecen4350_lcd_v4.c:845: break;
      001167 80 13            [24] 4584 	sjmp	00124$
      001169                       4585 00119$:
                                   4586 ;	.\ecen4350_lcd_v4.c:848: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      001169 75 90 F7         [24] 4587 	mov	_P1,#0xf7
                                   4588 ;	.\ecen4350_lcd_v4.c:849: colloc = (__KEYPAD_PORT__ & 0xF0);
      00116C E5 90            [12] 4589 	mov	a,_P1
      00116E 54 F0            [12] 4590 	anl	a,#0xf0
      001170 F5*00            [12] 4591 	mov	_colloc,a
                                   4592 ;	.\ecen4350_lcd_v4.c:850: if (colloc != 0xF0)
      001172 74 F0            [12] 4593 	mov	a,#0xf0
      001174 B5*00 02         [24] 4594 	cjne	a,_colloc,00221$
      001177 80 A3            [24] 4595 	sjmp	00123$
      001179                       4596 00221$:
                                   4597 ;	.\ecen4350_lcd_v4.c:852: rowloc = 3;
      001179 75*01 03         [24] 4598 	mov	_rowloc,#0x03
                                   4599 ;	.\ecen4350_lcd_v4.c:853: break;
      00117C                       4600 00124$:
                                   4601 ;	.\ecen4350_lcd_v4.c:857: if (received_flag == 1)
      00117C 74 01            [12] 4602 	mov	a,#0x01
      00117E B5*07 07         [24] 4603 	cjne	a,_received_flag,00135$
                                   4604 ;	.\ecen4350_lcd_v4.c:859: received_flag = 0;
      001181 75*07 00         [24] 4605 	mov	_received_flag,#0x00
                                   4606 ;	.\ecen4350_lcd_v4.c:860: return received_byte;
      001184 85*06 82         [24] 4607 	mov	dpl,_received_byte
      001187 22               [24] 4608 	ret
      001188                       4609 00135$:
                                   4610 ;	.\ecen4350_lcd_v4.c:862: else if (colloc == 0xE0)
      001188 74 E0            [12] 4611 	mov	a,#0xe0
      00118A B5*00 15         [24] 4612 	cjne	a,_colloc,00132$
                                   4613 ;	.\ecen4350_lcd_v4.c:864: return (keypad[rowloc][0]);
      00118D E5*01            [12] 4614 	mov	a,_rowloc
      00118F 75 F0 04         [24] 4615 	mov	b,#0x04
      001192 A4               [48] 4616 	mul	ab
      001193 24rFB            [12] 4617 	add	a,#_keypad
      001195 F5 82            [12] 4618 	mov	dpl,a
      001197 74s04            [12] 4619 	mov	a,#(_keypad >> 8)
      001199 35 F0            [12] 4620 	addc	a,b
      00119B F5 83            [12] 4621 	mov	dph,a
      00119D E4               [12] 4622 	clr	a
      00119E 93               [24] 4623 	movc	a,@a+dptr
      00119F F5 82            [12] 4624 	mov	dpl,a
      0011A1 22               [24] 4625 	ret
      0011A2                       4626 00132$:
                                   4627 ;	.\ecen4350_lcd_v4.c:866: else if (colloc == 0xD0)
      0011A2 74 D0            [12] 4628 	mov	a,#0xd0
      0011A4 B5*00 18         [24] 4629 	cjne	a,_colloc,00129$
                                   4630 ;	.\ecen4350_lcd_v4.c:868: return (keypad[rowloc][1]);
      0011A7 E5*01            [12] 4631 	mov	a,_rowloc
      0011A9 75 F0 04         [24] 4632 	mov	b,#0x04
      0011AC A4               [48] 4633 	mul	ab
      0011AD 24rFB            [12] 4634 	add	a,#_keypad
      0011AF FE               [12] 4635 	mov	r6,a
      0011B0 74s04            [12] 4636 	mov	a,#(_keypad >> 8)
      0011B2 35 F0            [12] 4637 	addc	a,b
      0011B4 FF               [12] 4638 	mov	r7,a
      0011B5 8E 82            [24] 4639 	mov	dpl,r6
      0011B7 8F 83            [24] 4640 	mov	dph,r7
      0011B9 A3               [24] 4641 	inc	dptr
      0011BA E4               [12] 4642 	clr	a
      0011BB 93               [24] 4643 	movc	a,@a+dptr
      0011BC F5 82            [12] 4644 	mov	dpl,a
      0011BE 22               [24] 4645 	ret
      0011BF                       4646 00129$:
                                   4647 ;	.\ecen4350_lcd_v4.c:870: else if (colloc == 0xB0)
      0011BF 74 B0            [12] 4648 	mov	a,#0xb0
      0011C1 B5*00 19         [24] 4649 	cjne	a,_colloc,00126$
                                   4650 ;	.\ecen4350_lcd_v4.c:872: return (keypad[rowloc][2]);
      0011C4 E5*01            [12] 4651 	mov	a,_rowloc
      0011C6 75 F0 04         [24] 4652 	mov	b,#0x04
      0011C9 A4               [48] 4653 	mul	ab
      0011CA 24rFB            [12] 4654 	add	a,#_keypad
      0011CC FE               [12] 4655 	mov	r6,a
      0011CD 74s04            [12] 4656 	mov	a,#(_keypad >> 8)
      0011CF 35 F0            [12] 4657 	addc	a,b
      0011D1 FF               [12] 4658 	mov	r7,a
      0011D2 8E 82            [24] 4659 	mov	dpl,r6
      0011D4 8F 83            [24] 4660 	mov	dph,r7
      0011D6 A3               [24] 4661 	inc	dptr
      0011D7 A3               [24] 4662 	inc	dptr
      0011D8 E4               [12] 4663 	clr	a
      0011D9 93               [24] 4664 	movc	a,@a+dptr
      0011DA F5 82            [12] 4665 	mov	dpl,a
      0011DC 22               [24] 4666 	ret
      0011DD                       4667 00126$:
                                   4668 ;	.\ecen4350_lcd_v4.c:876: return (keypad[rowloc][3]);
      0011DD E5*01            [12] 4669 	mov	a,_rowloc
      0011DF 75 F0 04         [24] 4670 	mov	b,#0x04
      0011E2 A4               [48] 4671 	mul	ab
      0011E3 24rFB            [12] 4672 	add	a,#_keypad
      0011E5 FE               [12] 4673 	mov	r6,a
      0011E6 74s04            [12] 4674 	mov	a,#(_keypad >> 8)
      0011E8 35 F0            [12] 4675 	addc	a,b
      0011EA FF               [12] 4676 	mov	r7,a
      0011EB 8E 82            [24] 4677 	mov	dpl,r6
      0011ED 8F 83            [24] 4678 	mov	dph,r7
      0011EF A3               [24] 4679 	inc	dptr
      0011F0 A3               [24] 4680 	inc	dptr
      0011F1 A3               [24] 4681 	inc	dptr
      0011F2 E4               [12] 4682 	clr	a
      0011F3 93               [24] 4683 	movc	a,@a+dptr
                                   4684 ;	.\ecen4350_lcd_v4.c:878: }
      0011F4 F5 82            [12] 4685 	mov	dpl,a
      0011F6 22               [24] 4686 	ret
                                   4687 ;------------------------------------------------------------
                                   4688 ;Allocation info for local variables in function 'reverse'
                                   4689 ;------------------------------------------------------------
                                   4690 ;d                         Allocated to registers r7 
                                   4691 ;rev                       Allocated to registers r5 r6 
                                   4692 ;val                       Allocated to registers r1 r2 
                                   4693 ;------------------------------------------------------------
                                   4694 ;	.\ecen4350_lcd_v4.c:880: unsigned int reverse(unsigned char d)
                                   4695 ;	-----------------------------------------
                                   4696 ;	 function reverse
                                   4697 ;	-----------------------------------------
      0011F7                       4698 _reverse:
      0011F7 AF 82            [24] 4699 	mov	r7,dpl
                                   4700 ;	.\ecen4350_lcd_v4.c:882: unsigned int rev = 0;
      0011F9 7D 00            [12] 4701 	mov	r5,#0x00
      0011FB 7E 00            [12] 4702 	mov	r6,#0x00
                                   4703 ;	.\ecen4350_lcd_v4.c:884: while (d >= 1)
      0011FD                       4704 00101$:
      0011FD BF 01 00         [24] 4705 	cjne	r7,#0x01,00114$
      001200                       4706 00114$:
      001200 40 60            [24] 4707 	jc	00103$
                                   4708 ;	.\ecen4350_lcd_v4.c:887: val = d % 10;
      001202 8F 03            [24] 4709 	mov	ar3,r7
      001204 7C 00            [12] 4710 	mov	r4,#0x00
      001206 75*00 0A         [24] 4711 	mov	__modsint_PARM_2,#0x0a
                                   4712 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001209 8C*01            [24] 4713 	mov	(__modsint_PARM_2 + 1),r4
      00120B 8B 82            [24] 4714 	mov	dpl,r3
      00120D 8C 83            [24] 4715 	mov	dph,r4
      00120F C0 06            [24] 4716 	push	ar6
      001211 C0 05            [24] 4717 	push	ar5
      001213 C0 04            [24] 4718 	push	ar4
      001215 C0 03            [24] 4719 	push	ar3
      001217 12r00r00         [24] 4720 	lcall	__modsint
      00121A A9 82            [24] 4721 	mov	r1,dpl
      00121C AA 83            [24] 4722 	mov	r2,dph
      00121E D0 03            [24] 4723 	pop	ar3
      001220 D0 04            [24] 4724 	pop	ar4
                                   4725 ;	.\ecen4350_lcd_v4.c:888: d = d / 10;
      001222 75*00 0A         [24] 4726 	mov	__divsint_PARM_2,#0x0a
      001225 75*01 00         [24] 4727 	mov	(__divsint_PARM_2 + 1),#0x00
      001228 8B 82            [24] 4728 	mov	dpl,r3
      00122A 8C 83            [24] 4729 	mov	dph,r4
      00122C C0 02            [24] 4730 	push	ar2
      00122E C0 01            [24] 4731 	push	ar1
      001230 12r00r00         [24] 4732 	lcall	__divsint
      001233 AB 82            [24] 4733 	mov	r3,dpl
      001235 D0 01            [24] 4734 	pop	ar1
      001237 D0 02            [24] 4735 	pop	ar2
      001239 D0 05            [24] 4736 	pop	ar5
      00123B D0 06            [24] 4737 	pop	ar6
      00123D 8B 07            [24] 4738 	mov	ar7,r3
                                   4739 ;	.\ecen4350_lcd_v4.c:889: rev = rev * 10 + val;
      00123F 8D*00            [24] 4740 	mov	__mulint_PARM_2,r5
      001241 8E*01            [24] 4741 	mov	(__mulint_PARM_2 + 1),r6
      001243 90 00 0A         [24] 4742 	mov	dptr,#0x000a
      001246 C0 07            [24] 4743 	push	ar7
      001248 C0 02            [24] 4744 	push	ar2
      00124A C0 01            [24] 4745 	push	ar1
      00124C 12r00r00         [24] 4746 	lcall	__mulint
      00124F E5 82            [12] 4747 	mov	a,dpl
      001251 85 83 F0         [24] 4748 	mov	b,dph
      001254 D0 01            [24] 4749 	pop	ar1
      001256 D0 02            [24] 4750 	pop	ar2
      001258 D0 07            [24] 4751 	pop	ar7
      00125A 29               [12] 4752 	add	a,r1
      00125B FD               [12] 4753 	mov	r5,a
      00125C EA               [12] 4754 	mov	a,r2
      00125D 35 F0            [12] 4755 	addc	a,b
      00125F FE               [12] 4756 	mov	r6,a
      001260 80 9B            [24] 4757 	sjmp	00101$
      001262                       4758 00103$:
                                   4759 ;	.\ecen4350_lcd_v4.c:891: return rev;
      001262 8D 82            [24] 4760 	mov	dpl,r5
      001264 8E 83            [24] 4761 	mov	dph,r6
                                   4762 ;	.\ecen4350_lcd_v4.c:892: }
      001266 22               [24] 4763 	ret
                                   4764 ;------------------------------------------------------------
                                   4765 ;Allocation info for local variables in function 'reverse16'
                                   4766 ;------------------------------------------------------------
                                   4767 ;d                         Allocated to registers r6 r7 
                                   4768 ;rev                       Allocated to registers r4 r5 
                                   4769 ;val                       Allocated to registers r2 r3 
                                   4770 ;------------------------------------------------------------
                                   4771 ;	.\ecen4350_lcd_v4.c:894: unsigned int reverse16(unsigned int d)
                                   4772 ;	-----------------------------------------
                                   4773 ;	 function reverse16
                                   4774 ;	-----------------------------------------
      001267                       4775 _reverse16:
      001267 AE 82            [24] 4776 	mov	r6,dpl
      001269 AF 83            [24] 4777 	mov	r7,dph
                                   4778 ;	.\ecen4350_lcd_v4.c:896: unsigned int rev = 0;
      00126B 7C 00            [12] 4779 	mov	r4,#0x00
      00126D 7D 00            [12] 4780 	mov	r5,#0x00
                                   4781 ;	.\ecen4350_lcd_v4.c:898: while (d >= 1)
      00126F                       4782 00101$:
      00126F C3               [12] 4783 	clr	c
      001270 EE               [12] 4784 	mov	a,r6
      001271 94 01            [12] 4785 	subb	a,#0x01
      001273 EF               [12] 4786 	mov	a,r7
      001274 94 00            [12] 4787 	subb	a,#0x00
      001276 40 69            [24] 4788 	jc	00103$
                                   4789 ;	.\ecen4350_lcd_v4.c:901: val = d % 10;
      001278 75*00 0A         [24] 4790 	mov	__moduint_PARM_2,#0x0a
      00127B 75*01 00         [24] 4791 	mov	(__moduint_PARM_2 + 1),#0x00
      00127E 8E 82            [24] 4792 	mov	dpl,r6
      001280 8F 83            [24] 4793 	mov	dph,r7
      001282 C0 07            [24] 4794 	push	ar7
      001284 C0 06            [24] 4795 	push	ar6
      001286 C0 05            [24] 4796 	push	ar5
      001288 C0 04            [24] 4797 	push	ar4
      00128A 12r00r00         [24] 4798 	lcall	__moduint
      00128D AA 82            [24] 4799 	mov	r2,dpl
      00128F AB 83            [24] 4800 	mov	r3,dph
      001291 D0 04            [24] 4801 	pop	ar4
      001293 D0 05            [24] 4802 	pop	ar5
      001295 D0 06            [24] 4803 	pop	ar6
      001297 D0 07            [24] 4804 	pop	ar7
                                   4805 ;	.\ecen4350_lcd_v4.c:902: d = d / 10;
      001299 75*00 0A         [24] 4806 	mov	__divuint_PARM_2,#0x0a
      00129C 75*01 00         [24] 4807 	mov	(__divuint_PARM_2 + 1),#0x00
      00129F 8E 82            [24] 4808 	mov	dpl,r6
      0012A1 8F 83            [24] 4809 	mov	dph,r7
      0012A3 C0 05            [24] 4810 	push	ar5
      0012A5 C0 04            [24] 4811 	push	ar4
      0012A7 C0 03            [24] 4812 	push	ar3
      0012A9 C0 02            [24] 4813 	push	ar2
      0012AB 12r00r00         [24] 4814 	lcall	__divuint
      0012AE AE 82            [24] 4815 	mov	r6,dpl
      0012B0 AF 83            [24] 4816 	mov	r7,dph
      0012B2 D0 02            [24] 4817 	pop	ar2
      0012B4 D0 03            [24] 4818 	pop	ar3
      0012B6 D0 04            [24] 4819 	pop	ar4
      0012B8 D0 05            [24] 4820 	pop	ar5
                                   4821 ;	.\ecen4350_lcd_v4.c:903: rev = rev * 10 + val;
      0012BA 8C*00            [24] 4822 	mov	__mulint_PARM_2,r4
      0012BC 8D*01            [24] 4823 	mov	(__mulint_PARM_2 + 1),r5
      0012BE 90 00 0A         [24] 4824 	mov	dptr,#0x000a
      0012C1 C0 07            [24] 4825 	push	ar7
      0012C3 C0 06            [24] 4826 	push	ar6
      0012C5 C0 03            [24] 4827 	push	ar3
      0012C7 C0 02            [24] 4828 	push	ar2
      0012C9 12r00r00         [24] 4829 	lcall	__mulint
      0012CC E5 82            [12] 4830 	mov	a,dpl
      0012CE 85 83 F0         [24] 4831 	mov	b,dph
      0012D1 D0 02            [24] 4832 	pop	ar2
      0012D3 D0 03            [24] 4833 	pop	ar3
      0012D5 D0 06            [24] 4834 	pop	ar6
      0012D7 D0 07            [24] 4835 	pop	ar7
      0012D9 2A               [12] 4836 	add	a,r2
      0012DA FC               [12] 4837 	mov	r4,a
      0012DB EB               [12] 4838 	mov	a,r3
      0012DC 35 F0            [12] 4839 	addc	a,b
      0012DE FD               [12] 4840 	mov	r5,a
      0012DF 80 8E            [24] 4841 	sjmp	00101$
      0012E1                       4842 00103$:
                                   4843 ;	.\ecen4350_lcd_v4.c:905: return rev;
      0012E1 8C 82            [24] 4844 	mov	dpl,r4
      0012E3 8D 83            [24] 4845 	mov	dph,r5
                                   4846 ;	.\ecen4350_lcd_v4.c:906: }
      0012E5 22               [24] 4847 	ret
                                   4848 ;------------------------------------------------------------
                                   4849 ;Allocation info for local variables in function 'hexToASCII'
                                   4850 ;------------------------------------------------------------
                                   4851 ;key                       Allocated to registers r7 
                                   4852 ;------------------------------------------------------------
                                   4853 ;	.\ecen4350_lcd_v4.c:908: unsigned char hexToASCII(unsigned char key) {
                                   4854 ;	-----------------------------------------
                                   4855 ;	 function hexToASCII
                                   4856 ;	-----------------------------------------
      0012E6                       4857 _hexToASCII:
                                   4858 ;	.\ecen4350_lcd_v4.c:909: if(key == 0x0) return '0';
      0012E6 E5 82            [12] 4859 	mov	a,dpl
      0012E8 FF               [12] 4860 	mov	r7,a
      0012E9 70 04            [24] 4861 	jnz	00102$
      0012EB 75 82 30         [24] 4862 	mov	dpl,#0x30
      0012EE 22               [24] 4863 	ret
      0012EF                       4864 00102$:
                                   4865 ;	.\ecen4350_lcd_v4.c:910: if(key == 0x1) return '1';
      0012EF BF 01 04         [24] 4866 	cjne	r7,#0x01,00104$
      0012F2 75 82 31         [24] 4867 	mov	dpl,#0x31
      0012F5 22               [24] 4868 	ret
      0012F6                       4869 00104$:
                                   4870 ;	.\ecen4350_lcd_v4.c:911: if(key == 0x2) return '2';
      0012F6 BF 02 04         [24] 4871 	cjne	r7,#0x02,00106$
      0012F9 75 82 32         [24] 4872 	mov	dpl,#0x32
      0012FC 22               [24] 4873 	ret
      0012FD                       4874 00106$:
                                   4875 ;	.\ecen4350_lcd_v4.c:912: if(key == 0x3) return '3';
      0012FD BF 03 04         [24] 4876 	cjne	r7,#0x03,00108$
      001300 75 82 33         [24] 4877 	mov	dpl,#0x33
      001303 22               [24] 4878 	ret
      001304                       4879 00108$:
                                   4880 ;	.\ecen4350_lcd_v4.c:913: if(key == 0x4) return '4';
      001304 BF 04 04         [24] 4881 	cjne	r7,#0x04,00110$
      001307 75 82 34         [24] 4882 	mov	dpl,#0x34
      00130A 22               [24] 4883 	ret
      00130B                       4884 00110$:
                                   4885 ;	.\ecen4350_lcd_v4.c:914: if(key == 0x5) return '5';
      00130B BF 05 04         [24] 4886 	cjne	r7,#0x05,00112$
      00130E 75 82 35         [24] 4887 	mov	dpl,#0x35
      001311 22               [24] 4888 	ret
      001312                       4889 00112$:
                                   4890 ;	.\ecen4350_lcd_v4.c:915: if(key == 0x6) return '6';
      001312 BF 06 04         [24] 4891 	cjne	r7,#0x06,00114$
      001315 75 82 36         [24] 4892 	mov	dpl,#0x36
      001318 22               [24] 4893 	ret
      001319                       4894 00114$:
                                   4895 ;	.\ecen4350_lcd_v4.c:916: if(key == 0x7) return '7';
      001319 BF 07 04         [24] 4896 	cjne	r7,#0x07,00116$
      00131C 75 82 37         [24] 4897 	mov	dpl,#0x37
      00131F 22               [24] 4898 	ret
      001320                       4899 00116$:
                                   4900 ;	.\ecen4350_lcd_v4.c:917: if(key == 0x8) return '8';
      001320 BF 08 04         [24] 4901 	cjne	r7,#0x08,00118$
      001323 75 82 38         [24] 4902 	mov	dpl,#0x38
      001326 22               [24] 4903 	ret
      001327                       4904 00118$:
                                   4905 ;	.\ecen4350_lcd_v4.c:918: if(key == 0x9) return '9';
      001327 BF 09 04         [24] 4906 	cjne	r7,#0x09,00120$
      00132A 75 82 39         [24] 4907 	mov	dpl,#0x39
      00132D 22               [24] 4908 	ret
      00132E                       4909 00120$:
                                   4910 ;	.\ecen4350_lcd_v4.c:919: if(key == 0xA) return 'A';
      00132E BF 0A 04         [24] 4911 	cjne	r7,#0x0a,00122$
      001331 75 82 41         [24] 4912 	mov	dpl,#0x41
      001334 22               [24] 4913 	ret
      001335                       4914 00122$:
                                   4915 ;	.\ecen4350_lcd_v4.c:920: if(key == 0xB) return 'B';
      001335 BF 0B 04         [24] 4916 	cjne	r7,#0x0b,00124$
      001338 75 82 42         [24] 4917 	mov	dpl,#0x42
      00133B 22               [24] 4918 	ret
      00133C                       4919 00124$:
                                   4920 ;	.\ecen4350_lcd_v4.c:921: if(key == 0xC) return 'C';
      00133C BF 0C 04         [24] 4921 	cjne	r7,#0x0c,00126$
      00133F 75 82 43         [24] 4922 	mov	dpl,#0x43
      001342 22               [24] 4923 	ret
      001343                       4924 00126$:
                                   4925 ;	.\ecen4350_lcd_v4.c:922: if(key == 0xD) return 'D';
      001343 BF 0D 04         [24] 4926 	cjne	r7,#0x0d,00128$
      001346 75 82 44         [24] 4927 	mov	dpl,#0x44
      001349 22               [24] 4928 	ret
      00134A                       4929 00128$:
                                   4930 ;	.\ecen4350_lcd_v4.c:923: if(key == 0xE) return 'E';
      00134A BF 0E 04         [24] 4931 	cjne	r7,#0x0e,00130$
      00134D 75 82 45         [24] 4932 	mov	dpl,#0x45
      001350 22               [24] 4933 	ret
      001351                       4934 00130$:
                                   4935 ;	.\ecen4350_lcd_v4.c:924: if(key == 0xF) return 'F';
      001351 BF 0F 04         [24] 4936 	cjne	r7,#0x0f,00132$
      001354 75 82 46         [24] 4937 	mov	dpl,#0x46
      001357 22               [24] 4938 	ret
      001358                       4939 00132$:
                                   4940 ;	.\ecen4350_lcd_v4.c:926: return 0xff;
      001358 75 82 FF         [24] 4941 	mov	dpl,#0xff
                                   4942 ;	.\ecen4350_lcd_v4.c:927: }
      00135B 22               [24] 4943 	ret
                                   4944 ;------------------------------------------------------------
                                   4945 ;Allocation info for local variables in function 'ASCIItoHex'
                                   4946 ;------------------------------------------------------------
                                   4947 ;key                       Allocated to registers r7 
                                   4948 ;------------------------------------------------------------
                                   4949 ;	.\ecen4350_lcd_v4.c:929: unsigned char ASCIItoHex(unsigned char key) {
                                   4950 ;	-----------------------------------------
                                   4951 ;	 function ASCIItoHex
                                   4952 ;	-----------------------------------------
      00135C                       4953 _ASCIItoHex:
      00135C AF 82            [24] 4954 	mov	r7,dpl
                                   4955 ;	.\ecen4350_lcd_v4.c:930: if(key == '0') return 0x0;
      00135E BF 30 04         [24] 4956 	cjne	r7,#0x30,00102$
      001361 75 82 00         [24] 4957 	mov	dpl,#0x00
      001364 22               [24] 4958 	ret
      001365                       4959 00102$:
                                   4960 ;	.\ecen4350_lcd_v4.c:931: if(key == '1') return 0x1;
      001365 BF 31 04         [24] 4961 	cjne	r7,#0x31,00104$
      001368 75 82 01         [24] 4962 	mov	dpl,#0x01
      00136B 22               [24] 4963 	ret
      00136C                       4964 00104$:
                                   4965 ;	.\ecen4350_lcd_v4.c:932: if(key == '2') return 0x2;
      00136C BF 32 04         [24] 4966 	cjne	r7,#0x32,00106$
      00136F 75 82 02         [24] 4967 	mov	dpl,#0x02
      001372 22               [24] 4968 	ret
      001373                       4969 00106$:
                                   4970 ;	.\ecen4350_lcd_v4.c:933: if(key == '3') return 0x3;
      001373 BF 33 04         [24] 4971 	cjne	r7,#0x33,00108$
      001376 75 82 03         [24] 4972 	mov	dpl,#0x03
      001379 22               [24] 4973 	ret
      00137A                       4974 00108$:
                                   4975 ;	.\ecen4350_lcd_v4.c:934: if(key == '4') return 0x4;
      00137A BF 34 04         [24] 4976 	cjne	r7,#0x34,00110$
      00137D 75 82 04         [24] 4977 	mov	dpl,#0x04
      001380 22               [24] 4978 	ret
      001381                       4979 00110$:
                                   4980 ;	.\ecen4350_lcd_v4.c:935: if(key == '5') return 0x5;
      001381 BF 35 04         [24] 4981 	cjne	r7,#0x35,00112$
      001384 75 82 05         [24] 4982 	mov	dpl,#0x05
      001387 22               [24] 4983 	ret
      001388                       4984 00112$:
                                   4985 ;	.\ecen4350_lcd_v4.c:936: if(key == '6') return 0x6;
      001388 BF 36 04         [24] 4986 	cjne	r7,#0x36,00114$
      00138B 75 82 06         [24] 4987 	mov	dpl,#0x06
      00138E 22               [24] 4988 	ret
      00138F                       4989 00114$:
                                   4990 ;	.\ecen4350_lcd_v4.c:937: if(key == '7') return 0x7;
      00138F BF 37 04         [24] 4991 	cjne	r7,#0x37,00116$
      001392 75 82 07         [24] 4992 	mov	dpl,#0x07
      001395 22               [24] 4993 	ret
      001396                       4994 00116$:
                                   4995 ;	.\ecen4350_lcd_v4.c:938: if(key == '8') return 0x8;
      001396 BF 38 04         [24] 4996 	cjne	r7,#0x38,00118$
      001399 75 82 08         [24] 4997 	mov	dpl,#0x08
      00139C 22               [24] 4998 	ret
      00139D                       4999 00118$:
                                   5000 ;	.\ecen4350_lcd_v4.c:939: if(key == '9') return 0x9;
      00139D BF 39 04         [24] 5001 	cjne	r7,#0x39,00120$
      0013A0 75 82 09         [24] 5002 	mov	dpl,#0x09
      0013A3 22               [24] 5003 	ret
      0013A4                       5004 00120$:
                                   5005 ;	.\ecen4350_lcd_v4.c:940: if(key == 'A') return 0xA;
      0013A4 BF 41 04         [24] 5006 	cjne	r7,#0x41,00122$
      0013A7 75 82 0A         [24] 5007 	mov	dpl,#0x0a
      0013AA 22               [24] 5008 	ret
      0013AB                       5009 00122$:
                                   5010 ;	.\ecen4350_lcd_v4.c:941: if(key == 'B') return 0xB;
      0013AB BF 42 04         [24] 5011 	cjne	r7,#0x42,00124$
      0013AE 75 82 0B         [24] 5012 	mov	dpl,#0x0b
      0013B1 22               [24] 5013 	ret
      0013B2                       5014 00124$:
                                   5015 ;	.\ecen4350_lcd_v4.c:942: if(key == 'C') return 0xC;
      0013B2 BF 43 04         [24] 5016 	cjne	r7,#0x43,00126$
      0013B5 75 82 0C         [24] 5017 	mov	dpl,#0x0c
      0013B8 22               [24] 5018 	ret
      0013B9                       5019 00126$:
                                   5020 ;	.\ecen4350_lcd_v4.c:943: if(key == 'D') return 0xD;
      0013B9 BF 44 04         [24] 5021 	cjne	r7,#0x44,00128$
      0013BC 75 82 0D         [24] 5022 	mov	dpl,#0x0d
      0013BF 22               [24] 5023 	ret
      0013C0                       5024 00128$:
                                   5025 ;	.\ecen4350_lcd_v4.c:944: if(key == 'E') return 0xE;
      0013C0 BF 45 04         [24] 5026 	cjne	r7,#0x45,00130$
      0013C3 75 82 0E         [24] 5027 	mov	dpl,#0x0e
      0013C6 22               [24] 5028 	ret
      0013C7                       5029 00130$:
                                   5030 ;	.\ecen4350_lcd_v4.c:945: if(key == 'F') return 0xF;
      0013C7 BF 46 04         [24] 5031 	cjne	r7,#0x46,00132$
      0013CA 75 82 0F         [24] 5032 	mov	dpl,#0x0f
      0013CD 22               [24] 5033 	ret
      0013CE                       5034 00132$:
                                   5035 ;	.\ecen4350_lcd_v4.c:947: return 0xff;
      0013CE 75 82 FF         [24] 5036 	mov	dpl,#0xff
                                   5037 ;	.\ecen4350_lcd_v4.c:948: }
      0013D1 22               [24] 5038 	ret
                                   5039 ;------------------------------------------------------------
                                   5040 ;Allocation info for local variables in function 'asciiToDec'
                                   5041 ;------------------------------------------------------------
                                   5042 ;d                         Allocated to registers 
                                   5043 ;val                       Allocated to registers r4 
                                   5044 ;id                        Allocated to registers r6 r7 
                                   5045 ;------------------------------------------------------------
                                   5046 ;	.\ecen4350_lcd_v4.c:950: void asciiToDec(unsigned char d)
                                   5047 ;	-----------------------------------------
                                   5048 ;	 function asciiToDec
                                   5049 ;	-----------------------------------------
      0013D2                       5050 _asciiToDec:
                                   5051 ;	.\ecen4350_lcd_v4.c:954: id = reverse(d);
      0013D2 12r11rF7         [24] 5052 	lcall	_reverse
      0013D5 AE 82            [24] 5053 	mov	r6,dpl
      0013D7 AF 83            [24] 5054 	mov	r7,dph
                                   5055 ;	.\ecen4350_lcd_v4.c:955: while (id >= 1)
      0013D9                       5056 00101$:
      0013D9 C3               [12] 5057 	clr	c
      0013DA EE               [12] 5058 	mov	a,r6
      0013DB 94 01            [12] 5059 	subb	a,#0x01
      0013DD EF               [12] 5060 	mov	a,r7
      0013DE 94 00            [12] 5061 	subb	a,#0x00
      0013E0 40 3E            [24] 5062 	jc	00103$
                                   5063 ;	.\ecen4350_lcd_v4.c:958: val = id % 10;
      0013E2 75*00 0A         [24] 5064 	mov	__moduint_PARM_2,#0x0a
      0013E5 75*01 00         [24] 5065 	mov	(__moduint_PARM_2 + 1),#0x00
      0013E8 8E 82            [24] 5066 	mov	dpl,r6
      0013EA 8F 83            [24] 5067 	mov	dph,r7
      0013EC C0 07            [24] 5068 	push	ar7
      0013EE C0 06            [24] 5069 	push	ar6
      0013F0 12r00r00         [24] 5070 	lcall	__moduint
      0013F3 AC 82            [24] 5071 	mov	r4,dpl
      0013F5 D0 06            [24] 5072 	pop	ar6
      0013F7 D0 07            [24] 5073 	pop	ar7
                                   5074 ;	.\ecen4350_lcd_v4.c:959: id = id / 10;
      0013F9 75*00 0A         [24] 5075 	mov	__divuint_PARM_2,#0x0a
      0013FC 75*01 00         [24] 5076 	mov	(__divuint_PARM_2 + 1),#0x00
      0013FF 8E 82            [24] 5077 	mov	dpl,r6
      001401 8F 83            [24] 5078 	mov	dph,r7
      001403 C0 04            [24] 5079 	push	ar4
      001405 12r00r00         [24] 5080 	lcall	__divuint
      001408 AE 82            [24] 5081 	mov	r6,dpl
      00140A AF 83            [24] 5082 	mov	r7,dph
      00140C D0 04            [24] 5083 	pop	ar4
                                   5084 ;	.\ecen4350_lcd_v4.c:960: write(val + '0');
      00140E 74 30            [12] 5085 	mov	a,#0x30
      001410 2C               [12] 5086 	add	a,r4
      001411 F5 82            [12] 5087 	mov	dpl,a
      001413 C0 07            [24] 5088 	push	ar7
      001415 C0 06            [24] 5089 	push	ar6
      001417 12r0Fr6A         [24] 5090 	lcall	_write
      00141A D0 06            [24] 5091 	pop	ar6
      00141C D0 07            [24] 5092 	pop	ar7
      00141E 80 B9            [24] 5093 	sjmp	00101$
      001420                       5094 00103$:
                                   5095 ;	.\ecen4350_lcd_v4.c:962: write('\n');
      001420 75 82 0A         [24] 5096 	mov	dpl,#0x0a
                                   5097 ;	.\ecen4350_lcd_v4.c:963: }
      001423 02r0Fr6A         [24] 5098 	ljmp	_write
                                   5099 ;------------------------------------------------------------
                                   5100 ;Allocation info for local variables in function 'asciiToHex'
                                   5101 ;------------------------------------------------------------
                                   5102 ;d                         Allocated to registers r7 
                                   5103 ;val                       Allocated to registers r2 
                                   5104 ;store                     Allocated with name '_asciiToHex_store_65536_515'
                                   5105 ;i                         Allocated to registers r6 
                                   5106 ;------------------------------------------------------------
                                   5107 ;	.\ecen4350_lcd_v4.c:965: void asciiToHex(unsigned char d)
                                   5108 ;	-----------------------------------------
                                   5109 ;	 function asciiToHex
                                   5110 ;	-----------------------------------------
      001426                       5111 _asciiToHex:
      001426 AF 82            [24] 5112 	mov	r7,dpl
                                   5113 ;	.\ecen4350_lcd_v4.c:970: store[0] = 0;
      001428 75*4E 00         [24] 5114 	mov	_asciiToHex_store_65536_515,#0x00
                                   5115 ;	.\ecen4350_lcd_v4.c:971: store[1] = 0;
      00142B 75*4F 00         [24] 5116 	mov	(_asciiToHex_store_65536_515 + 0x0001),#0x00
                                   5117 ;	.\ecen4350_lcd_v4.c:972: while (d >= 1)
      00142E 7E 00            [12] 5118 	mov	r6,#0x00
      001430                       5119 00104$:
      001430 BF 01 00         [24] 5120 	cjne	r7,#0x01,00122$
      001433                       5121 00122$:
      001433 40 5A            [24] 5122 	jc	00106$
                                   5123 ;	.\ecen4350_lcd_v4.c:975: val = d % 16;
      001435 8F 04            [24] 5124 	mov	ar4,r7
      001437 7D 00            [12] 5125 	mov	r5,#0x00
      001439 74 0F            [12] 5126 	mov	a,#0x0f
      00143B 5C               [12] 5127 	anl	a,r4
      00143C FA               [12] 5128 	mov	r2,a
                                   5129 ;	.\ecen4350_lcd_v4.c:976: d = d / 16;
      00143D 75*00 10         [24] 5130 	mov	__divsint_PARM_2,#0x10
                                   5131 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001440 8D*01            [24] 5132 	mov	(__divsint_PARM_2 + 1),r5
      001442 8C 82            [24] 5133 	mov	dpl,r4
      001444 8D 83            [24] 5134 	mov	dph,r5
      001446 C0 06            [24] 5135 	push	ar6
      001448 C0 02            [24] 5136 	push	ar2
      00144A 12r00r00         [24] 5137 	lcall	__divsint
      00144D AC 82            [24] 5138 	mov	r4,dpl
      00144F D0 02            [24] 5139 	pop	ar2
      001451 D0 06            [24] 5140 	pop	ar6
      001453 8C 07            [24] 5141 	mov	ar7,r4
                                   5142 ;	.\ecen4350_lcd_v4.c:977: if (val <= 9)
      001455 EA               [12] 5143 	mov	a,r2
      001456 24 F6            [12] 5144 	add	a,#0xff - 0x09
      001458 40 0C            [24] 5145 	jc	00102$
                                   5146 ;	.\ecen4350_lcd_v4.c:980: store[i] = val + '0';
      00145A EE               [12] 5147 	mov	a,r6
      00145B 24r4E            [12] 5148 	add	a,#_asciiToHex_store_65536_515
      00145D F9               [12] 5149 	mov	r1,a
      00145E 8A 05            [24] 5150 	mov	ar5,r2
      001460 74 30            [12] 5151 	mov	a,#0x30
      001462 2D               [12] 5152 	add	a,r5
      001463 F7               [12] 5153 	mov	@r1,a
      001464 80 26            [24] 5154 	sjmp	00103$
      001466                       5155 00102$:
                                   5156 ;	.\ecen4350_lcd_v4.c:984: store[i] = (val % 10) + 'A';
      001466 EE               [12] 5157 	mov	a,r6
      001467 24r4E            [12] 5158 	add	a,#_asciiToHex_store_65536_515
      001469 F9               [12] 5159 	mov	r1,a
      00146A 7D 00            [12] 5160 	mov	r5,#0x00
      00146C 75*00 0A         [24] 5161 	mov	__modsint_PARM_2,#0x0a
                                   5162 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00146F 8D*01            [24] 5163 	mov	(__modsint_PARM_2 + 1),r5
      001471 8A 82            [24] 5164 	mov	dpl,r2
      001473 8D 83            [24] 5165 	mov	dph,r5
      001475 C0 07            [24] 5166 	push	ar7
      001477 C0 06            [24] 5167 	push	ar6
      001479 C0 01            [24] 5168 	push	ar1
      00147B 12r00r00         [24] 5169 	lcall	__modsint
      00147E AC 82            [24] 5170 	mov	r4,dpl
      001480 AD 83            [24] 5171 	mov	r5,dph
      001482 D0 01            [24] 5172 	pop	ar1
      001484 D0 06            [24] 5173 	pop	ar6
      001486 D0 07            [24] 5174 	pop	ar7
      001488 74 41            [12] 5175 	mov	a,#0x41
      00148A 2C               [12] 5176 	add	a,r4
      00148B F7               [12] 5177 	mov	@r1,a
      00148C                       5178 00103$:
                                   5179 ;	.\ecen4350_lcd_v4.c:986: i++;
      00148C 0E               [12] 5180 	inc	r6
      00148D 80 A1            [24] 5181 	sjmp	00104$
      00148F                       5182 00106$:
                                   5183 ;	.\ecen4350_lcd_v4.c:988: write(store[1]);
      00148F 85*4F 82         [24] 5184 	mov	dpl,(_asciiToHex_store_65536_515 + 0x0001)
      001492 12r0Fr6A         [24] 5185 	lcall	_write
                                   5186 ;	.\ecen4350_lcd_v4.c:989: write(store[0]);
      001495 85*4E 82         [24] 5187 	mov	dpl,_asciiToHex_store_65536_515
                                   5188 ;	.\ecen4350_lcd_v4.c:991: }
      001498 02r0Fr6A         [24] 5189 	ljmp	_write
                                   5190 ;------------------------------------------------------------
                                   5191 ;Allocation info for local variables in function 'print4Hex'
                                   5192 ;------------------------------------------------------------
                                   5193 ;num                       Allocated to registers 
                                   5194 ;------------------------------------------------------------
                                   5195 ;	.\ecen4350_lcd_v4.c:994: void print4Hex(unsigned char num) {
                                   5196 ;	-----------------------------------------
                                   5197 ;	 function print4Hex
                                   5198 ;	-----------------------------------------
      00149B                       5199 _print4Hex:
                                   5200 ;	.\ecen4350_lcd_v4.c:995: write((u8) hexToASCII(num));
      00149B 12r12rE6         [24] 5201 	lcall	_hexToASCII
                                   5202 ;	.\ecen4350_lcd_v4.c:996: }
      00149E 02r0Fr6A         [24] 5203 	ljmp	_write
                                   5204 ;------------------------------------------------------------
                                   5205 ;Allocation info for local variables in function 'print8Hex'
                                   5206 ;------------------------------------------------------------
                                   5207 ;num                       Allocated to registers r7 
                                   5208 ;------------------------------------------------------------
                                   5209 ;	.\ecen4350_lcd_v4.c:998: void print8Hex(unsigned char num) {
                                   5210 ;	-----------------------------------------
                                   5211 ;	 function print8Hex
                                   5212 ;	-----------------------------------------
      0014A1                       5213 _print8Hex:
                                   5214 ;	.\ecen4350_lcd_v4.c:999: print4Hex(num >> 4);
      0014A1 E5 82            [12] 5215 	mov	a,dpl
      0014A3 FF               [12] 5216 	mov	r7,a
      0014A4 C4               [12] 5217 	swap	a
      0014A5 54 0F            [12] 5218 	anl	a,#0x0f
      0014A7 F5 82            [12] 5219 	mov	dpl,a
      0014A9 C0 07            [24] 5220 	push	ar7
      0014AB 12r14r9B         [24] 5221 	lcall	_print4Hex
      0014AE D0 07            [24] 5222 	pop	ar7
                                   5223 ;	.\ecen4350_lcd_v4.c:1000: print4Hex(num & 0x0F);
      0014B0 74 0F            [12] 5224 	mov	a,#0x0f
      0014B2 5F               [12] 5225 	anl	a,r7
      0014B3 F5 82            [12] 5226 	mov	dpl,a
                                   5227 ;	.\ecen4350_lcd_v4.c:1001: }
      0014B5 02r14r9B         [24] 5228 	ljmp	_print4Hex
                                   5229 ;------------------------------------------------------------
                                   5230 ;Allocation info for local variables in function 'print16Hex'
                                   5231 ;------------------------------------------------------------
                                   5232 ;num                       Allocated to registers r6 r7 
                                   5233 ;------------------------------------------------------------
                                   5234 ;	.\ecen4350_lcd_v4.c:1003: void print16Hex(unsigned int num) {
                                   5235 ;	-----------------------------------------
                                   5236 ;	 function print16Hex
                                   5237 ;	-----------------------------------------
      0014B8                       5238 _print16Hex:
      0014B8 AE 82            [24] 5239 	mov	r6,dpl
      0014BA AF 83            [24] 5240 	mov	r7,dph
                                   5241 ;	.\ecen4350_lcd_v4.c:1004: print8Hex((unsigned char)(num >> 8));
      0014BC 8F 82            [24] 5242 	mov	dpl,r7
      0014BE C0 07            [24] 5243 	push	ar7
      0014C0 C0 06            [24] 5244 	push	ar6
      0014C2 12r14rA1         [24] 5245 	lcall	_print8Hex
      0014C5 D0 06            [24] 5246 	pop	ar6
      0014C7 D0 07            [24] 5247 	pop	ar7
                                   5248 ;	.\ecen4350_lcd_v4.c:1005: print8Hex((unsigned char)num);
      0014C9 8E 82            [24] 5249 	mov	dpl,r6
                                   5250 ;	.\ecen4350_lcd_v4.c:1006: }
      0014CB 02r14rA1         [24] 5251 	ljmp	_print8Hex
                                   5252 ;------------------------------------------------------------
                                   5253 ;Allocation info for local variables in function 'print16Dec'
                                   5254 ;------------------------------------------------------------
                                   5255 ;num                       Allocated to registers 
                                   5256 ;val                       Allocated to registers r4 r5 
                                   5257 ;id                        Allocated to registers r6 r7 
                                   5258 ;------------------------------------------------------------
                                   5259 ;	.\ecen4350_lcd_v4.c:1008: void print16Dec(unsigned int num) {
                                   5260 ;	-----------------------------------------
                                   5261 ;	 function print16Dec
                                   5262 ;	-----------------------------------------
      0014CE                       5263 _print16Dec:
                                   5264 ;	.\ecen4350_lcd_v4.c:1011: id = reverse16(num);
      0014CE 12r12r67         [24] 5265 	lcall	_reverse16
      0014D1 AE 82            [24] 5266 	mov	r6,dpl
      0014D3 AF 83            [24] 5267 	mov	r7,dph
                                   5268 ;	.\ecen4350_lcd_v4.c:1012: while (id >= 1) {
      0014D5                       5269 00101$:
      0014D5 C3               [12] 5270 	clr	c
      0014D6 EE               [12] 5271 	mov	a,r6
      0014D7 94 01            [12] 5272 	subb	a,#0x01
      0014D9 EF               [12] 5273 	mov	a,r7
      0014DA 94 00            [12] 5274 	subb	a,#0x00
      0014DC 40 44            [24] 5275 	jc	00104$
                                   5276 ;	.\ecen4350_lcd_v4.c:1013: val = id % 10;
      0014DE 75*00 0A         [24] 5277 	mov	__moduint_PARM_2,#0x0a
      0014E1 75*01 00         [24] 5278 	mov	(__moduint_PARM_2 + 1),#0x00
      0014E4 8E 82            [24] 5279 	mov	dpl,r6
      0014E6 8F 83            [24] 5280 	mov	dph,r7
      0014E8 C0 07            [24] 5281 	push	ar7
      0014EA C0 06            [24] 5282 	push	ar6
      0014EC 12r00r00         [24] 5283 	lcall	__moduint
      0014EF AC 82            [24] 5284 	mov	r4,dpl
      0014F1 AD 83            [24] 5285 	mov	r5,dph
      0014F3 D0 06            [24] 5286 	pop	ar6
      0014F5 D0 07            [24] 5287 	pop	ar7
                                   5288 ;	.\ecen4350_lcd_v4.c:1014: id = id/10;
      0014F7 75*00 0A         [24] 5289 	mov	__divuint_PARM_2,#0x0a
      0014FA 75*01 00         [24] 5290 	mov	(__divuint_PARM_2 + 1),#0x00
      0014FD 8E 82            [24] 5291 	mov	dpl,r6
      0014FF 8F 83            [24] 5292 	mov	dph,r7
      001501 C0 05            [24] 5293 	push	ar5
      001503 C0 04            [24] 5294 	push	ar4
      001505 12r00r00         [24] 5295 	lcall	__divuint
      001508 AE 82            [24] 5296 	mov	r6,dpl
      00150A AF 83            [24] 5297 	mov	r7,dph
      00150C D0 04            [24] 5298 	pop	ar4
      00150E D0 05            [24] 5299 	pop	ar5
                                   5300 ;	.\ecen4350_lcd_v4.c:1015: write(val + '0');
      001510 74 30            [12] 5301 	mov	a,#0x30
      001512 2C               [12] 5302 	add	a,r4
      001513 F5 82            [12] 5303 	mov	dpl,a
      001515 C0 07            [24] 5304 	push	ar7
      001517 C0 06            [24] 5305 	push	ar6
      001519 12r0Fr6A         [24] 5306 	lcall	_write
      00151C D0 06            [24] 5307 	pop	ar6
      00151E D0 07            [24] 5308 	pop	ar7
      001520 80 B3            [24] 5309 	sjmp	00101$
      001522                       5310 00104$:
                                   5311 ;	.\ecen4350_lcd_v4.c:1017: }
      001522 22               [24] 5312 	ret
                                   5313 ;------------------------------------------------------------
                                   5314 ;Allocation info for local variables in function 'print8ASCII'
                                   5315 ;------------------------------------------------------------
                                   5316 ;num                       Allocated to registers 
                                   5317 ;------------------------------------------------------------
                                   5318 ;	.\ecen4350_lcd_v4.c:1019: void print8ASCII(unsigned char num) {
                                   5319 ;	-----------------------------------------
                                   5320 ;	 function print8ASCII
                                   5321 ;	-----------------------------------------
      001523                       5322 _print8ASCII:
                                   5323 ;	.\ecen4350_lcd_v4.c:1020: write((u8)num);
                                   5324 ;	.\ecen4350_lcd_v4.c:1021: }
      001523 02r0Fr6A         [24] 5325 	ljmp	_write
                                   5326 ;------------------------------------------------------------
                                   5327 ;Allocation info for local variables in function 'print16ASCII'
                                   5328 ;------------------------------------------------------------
                                   5329 ;num                       Allocated to registers r6 r7 
                                   5330 ;------------------------------------------------------------
                                   5331 ;	.\ecen4350_lcd_v4.c:1023: void print16ASCII(unsigned int num) {
                                   5332 ;	-----------------------------------------
                                   5333 ;	 function print16ASCII
                                   5334 ;	-----------------------------------------
      001526                       5335 _print16ASCII:
      001526 AE 82            [24] 5336 	mov	r6,dpl
      001528 AF 83            [24] 5337 	mov	r7,dph
                                   5338 ;	.\ecen4350_lcd_v4.c:1024: print8ASCII((unsigned char)(num >> 8));
      00152A 8F 82            [24] 5339 	mov	dpl,r7
      00152C C0 07            [24] 5340 	push	ar7
      00152E C0 06            [24] 5341 	push	ar6
      001530 12r15r23         [24] 5342 	lcall	_print8ASCII
      001533 D0 06            [24] 5343 	pop	ar6
      001535 D0 07            [24] 5344 	pop	ar7
                                   5345 ;	.\ecen4350_lcd_v4.c:1025: print8ASCII((unsigned char)num);
      001537 8E 82            [24] 5346 	mov	dpl,r6
                                   5347 ;	.\ecen4350_lcd_v4.c:1026: }
      001539 02r15r23         [24] 5348 	ljmp	_print8ASCII
                                   5349 ;------------------------------------------------------------
                                   5350 ;Allocation info for local variables in function 'writeSomeLines'
                                   5351 ;------------------------------------------------------------
                                   5352 ;	.\ecen4350_lcd_v4.c:1029: void writeSomeLines()
                                   5353 ;	-----------------------------------------
                                   5354 ;	 function writeSomeLines
                                   5355 ;	-----------------------------------------
      00153C                       5356 _writeSomeLines:
                                   5357 ;	.\ecen4350_lcd_v4.c:1031: setRotation(0);		//rotation 0 is for flat/flush LCD
      00153C 75 82 00         [24] 5358 	mov	dpl,#0x00
      00153F 12r04rE8         [24] 5359 	lcall	_setRotation
                                   5360 ;	.\ecen4350_lcd_v4.c:1033: fillScreen(CYAN);
      001542 90 07 FF         [24] 5361 	mov	dptr,#0x07ff
      001545 12r0Cr6C         [24] 5362 	lcall	_fillScreen
                                   5363 ;	.\ecen4350_lcd_v4.c:1034: fillTop(BLACK);
      001548 90 00 00         [24] 5364 	mov	dptr,#0x0000
      00154B 12r0Br86         [24] 5365 	lcall	_fillTop
                                   5366 ;	.\ecen4350_lcd_v4.c:1035: setTextSize(5);
      00154E 75 82 05         [24] 5367 	mov	dpl,#0x05
      001551 12r04rD0         [24] 5368 	lcall	_setTextSize
                                   5369 ;	.\ecen4350_lcd_v4.c:1036: setTextColor(CYAN, BLACK);
      001554 E4               [12] 5370 	clr	a
      001555 F5*00            [12] 5371 	mov	_setTextColor_PARM_2,a
      001557 F5*01            [12] 5372 	mov	(_setTextColor_PARM_2 + 1),a
      001559 90 07 FF         [24] 5373 	mov	dptr,#0x07ff
      00155C 12r04rC3         [24] 5374 	lcall	_setTextColor
                                   5375 ;	.\ecen4350_lcd_v4.c:1037: setCursor(10,0);
      00155F E4               [12] 5376 	clr	a
      001560 F5*00            [12] 5377 	mov	_setCursor_PARM_2,a
      001562 F5*01            [12] 5378 	mov	(_setCursor_PARM_2 + 1),a
      001564 90 00 0A         [24] 5379 	mov	dptr,#0x000a
      001567 12r04rB6         [24] 5380 	lcall	_setCursor
                                   5381 ;	.\ecen4350_lcd_v4.c:1038: LCD_string_write("Welcome\n");
      00156A 90r05r2C         [24] 5382 	mov	dptr,#___str_3
      00156D 75 F0 80         [24] 5383 	mov	b,#0x80
      001570 12r0FrD0         [24] 5384 	lcall	_LCD_string_write
                                   5385 ;	.\ecen4350_lcd_v4.c:1039: setTextSize(2);
      001573 75 82 02         [24] 5386 	mov	dpl,#0x02
      001576 12r04rD0         [24] 5387 	lcall	_setTextSize
                                   5388 ;	.\ecen4350_lcd_v4.c:1040: setTextColor(BLACK, CYAN);
      001579 75*00 FF         [24] 5389 	mov	_setTextColor_PARM_2,#0xff
      00157C 75*01 07         [24] 5390 	mov	(_setTextColor_PARM_2 + 1),#0x07
      00157F 90 00 00         [24] 5391 	mov	dptr,#0x0000
      001582 12r04rC3         [24] 5392 	lcall	_setTextColor
                                   5393 ;	.\ecen4350_lcd_v4.c:1041: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      001585 90r05r35         [24] 5394 	mov	dptr,#___str_4
      001588 75 F0 80         [24] 5395 	mov	b,#0x80
      00158B 12r0FrD0         [24] 5396 	lcall	_LCD_string_write
                                   5397 ;	.\ecen4350_lcd_v4.c:1042: delay(40);
      00158E 90 00 28         [24] 5398 	mov	dptr,#0x0028
                                   5399 ;	.\ecen4350_lcd_v4.c:1043: }
      001591 02r00rE0         [24] 5400 	ljmp	_delay
                                   5401 ;------------------------------------------------------------
                                   5402 ;Allocation info for local variables in function 'setColorDefault'
                                   5403 ;------------------------------------------------------------
                                   5404 ;	.\ecen4350_lcd_v4.c:1046: void setColorDefault() {
                                   5405 ;	-----------------------------------------
                                   5406 ;	 function setColorDefault
                                   5407 ;	-----------------------------------------
      001594                       5408 _setColorDefault:
                                   5409 ;	.\ecen4350_lcd_v4.c:1047: setTextColor(colorText, colorBackground);
      001594 E4               [12] 5410 	clr	a
      001595 F5*00            [12] 5411 	mov	_setTextColor_PARM_2,a
      001597 F5*01            [12] 5412 	mov	(_setTextColor_PARM_2 + 1),a
      001599 90 07 FF         [24] 5413 	mov	dptr,#0x07ff
                                   5414 ;	.\ecen4350_lcd_v4.c:1048: } 
      00159C 02r04rC3         [24] 5415 	ljmp	_setTextColor
                                   5416 ;------------------------------------------------------------
                                   5417 ;Allocation info for local variables in function 'setColorSelect'
                                   5418 ;------------------------------------------------------------
                                   5419 ;	.\ecen4350_lcd_v4.c:1050: void setColorSelect() {
                                   5420 ;	-----------------------------------------
                                   5421 ;	 function setColorSelect
                                   5422 ;	-----------------------------------------
      00159F                       5423 _setColorSelect:
                                   5424 ;	.\ecen4350_lcd_v4.c:1051: setTextColor(colorSelect, colorBackground);
      00159F E4               [12] 5425 	clr	a
      0015A0 F5*00            [12] 5426 	mov	_setTextColor_PARM_2,a
      0015A2 F5*01            [12] 5427 	mov	(_setTextColor_PARM_2 + 1),a
      0015A4 90 F8 1F         [24] 5428 	mov	dptr,#0xf81f
                                   5429 ;	.\ecen4350_lcd_v4.c:1052: }
      0015A7 02r04rC3         [24] 5430 	ljmp	_setTextColor
                                   5431 ;------------------------------------------------------------
                                   5432 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5433 ;------------------------------------------------------------
                                   5434 ;	.\ecen4350_lcd_v4.c:1054: void setColorHighlight1() {
                                   5435 ;	-----------------------------------------
                                   5436 ;	 function setColorHighlight1
                                   5437 ;	-----------------------------------------
      0015AA                       5438 _setColorHighlight1:
                                   5439 ;	.\ecen4350_lcd_v4.c:1055: setTextColor(colorSelect, CYAN);
      0015AA 75*00 FF         [24] 5440 	mov	_setTextColor_PARM_2,#0xff
      0015AD 75*01 07         [24] 5441 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015B0 90 F8 1F         [24] 5442 	mov	dptr,#0xf81f
                                   5443 ;	.\ecen4350_lcd_v4.c:1056: }
      0015B3 02r04rC3         [24] 5444 	ljmp	_setTextColor
                                   5445 ;------------------------------------------------------------
                                   5446 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5447 ;------------------------------------------------------------
                                   5448 ;	.\ecen4350_lcd_v4.c:1058: void setColorHighlight2() {
                                   5449 ;	-----------------------------------------
                                   5450 ;	 function setColorHighlight2
                                   5451 ;	-----------------------------------------
      0015B6                       5452 _setColorHighlight2:
                                   5453 ;	.\ecen4350_lcd_v4.c:1059: setTextColor(BLACK, CYAN);
      0015B6 75*00 FF         [24] 5454 	mov	_setTextColor_PARM_2,#0xff
      0015B9 75*01 07         [24] 5455 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015BC 90 00 00         [24] 5456 	mov	dptr,#0x0000
                                   5457 ;	.\ecen4350_lcd_v4.c:1060: }
      0015BF 02r04rC3         [24] 5458 	ljmp	_setTextColor
                                   5459 ;------------------------------------------------------------
                                   5460 ;Allocation info for local variables in function 'setColorGray'
                                   5461 ;------------------------------------------------------------
                                   5462 ;	.\ecen4350_lcd_v4.c:1062: void setColorGray() {
                                   5463 ;	-----------------------------------------
                                   5464 ;	 function setColorGray
                                   5465 ;	-----------------------------------------
      0015C2                       5466 _setColorGray:
                                   5467 ;	.\ecen4350_lcd_v4.c:1063: setTextColor(GRAY, colorBackground);
      0015C2 E4               [12] 5468 	clr	a
      0015C3 F5*00            [12] 5469 	mov	_setTextColor_PARM_2,a
      0015C5 F5*01            [12] 5470 	mov	(_setTextColor_PARM_2 + 1),a
      0015C7 90 D6 BA         [24] 5471 	mov	dptr,#0xd6ba
                                   5472 ;	.\ecen4350_lcd_v4.c:1064: }
      0015CA 02r04rC3         [24] 5473 	ljmp	_setTextColor
                                   5474 ;------------------------------------------------------------
                                   5475 ;Allocation info for local variables in function 'setColorMenu'
                                   5476 ;------------------------------------------------------------
                                   5477 ;	.\ecen4350_lcd_v4.c:1066: void setColorMenu() {
                                   5478 ;	-----------------------------------------
                                   5479 ;	 function setColorMenu
                                   5480 ;	-----------------------------------------
      0015CD                       5481 _setColorMenu:
                                   5482 ;	.\ecen4350_lcd_v4.c:1067: setTextColor(BLACK, GRAY);
      0015CD 75*00 BA         [24] 5483 	mov	_setTextColor_PARM_2,#0xba
      0015D0 75*01 D6         [24] 5484 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      0015D3 90 00 00         [24] 5485 	mov	dptr,#0x0000
                                   5486 ;	.\ecen4350_lcd_v4.c:1068: }
      0015D6 02r04rC3         [24] 5487 	ljmp	_setTextColor
                                   5488 ;------------------------------------------------------------
                                   5489 ;Allocation info for local variables in function 'setColorRed'
                                   5490 ;------------------------------------------------------------
                                   5491 ;	.\ecen4350_lcd_v4.c:1070: void setColorRed() {
                                   5492 ;	-----------------------------------------
                                   5493 ;	 function setColorRed
                                   5494 ;	-----------------------------------------
      0015D9                       5495 _setColorRed:
                                   5496 ;	.\ecen4350_lcd_v4.c:1071: setTextColor(RED, colorBackground);
      0015D9 E4               [12] 5497 	clr	a
      0015DA F5*00            [12] 5498 	mov	_setTextColor_PARM_2,a
      0015DC F5*01            [12] 5499 	mov	(_setTextColor_PARM_2 + 1),a
      0015DE 90 F8 00         [24] 5500 	mov	dptr,#0xf800
                                   5501 ;	.\ecen4350_lcd_v4.c:1072: }
      0015E1 02r04rC3         [24] 5502 	ljmp	_setTextColor
                                   5503 ;------------------------------------------------------------
                                   5504 ;Allocation info for local variables in function 'setColorWhite'
                                   5505 ;------------------------------------------------------------
                                   5506 ;	.\ecen4350_lcd_v4.c:1074: void setColorWhite() {
                                   5507 ;	-----------------------------------------
                                   5508 ;	 function setColorWhite
                                   5509 ;	-----------------------------------------
      0015E4                       5510 _setColorWhite:
                                   5511 ;	.\ecen4350_lcd_v4.c:1075: setTextColor(WHITE, colorBackground);
      0015E4 E4               [12] 5512 	clr	a
      0015E5 F5*00            [12] 5513 	mov	_setTextColor_PARM_2,a
      0015E7 F5*01            [12] 5514 	mov	(_setTextColor_PARM_2 + 1),a
      0015E9 90 FF FF         [24] 5515 	mov	dptr,#0xffff
                                   5516 ;	.\ecen4350_lcd_v4.c:1076: }
      0015EC 02r04rC3         [24] 5517 	ljmp	_setTextColor
                                   5518 ;------------------------------------------------------------
                                   5519 ;Allocation info for local variables in function 'setColorGreen'
                                   5520 ;------------------------------------------------------------
                                   5521 ;	.\ecen4350_lcd_v4.c:1078: void setColorGreen() {
                                   5522 ;	-----------------------------------------
                                   5523 ;	 function setColorGreen
                                   5524 ;	-----------------------------------------
      0015EF                       5525 _setColorGreen:
                                   5526 ;	.\ecen4350_lcd_v4.c:1079: setTextColor(GREEN, colorBackground);
      0015EF E4               [12] 5527 	clr	a
      0015F0 F5*00            [12] 5528 	mov	_setTextColor_PARM_2,a
      0015F2 F5*01            [12] 5529 	mov	(_setTextColor_PARM_2 + 1),a
      0015F4 90 07 E0         [24] 5530 	mov	dptr,#0x07e0
                                   5531 ;	.\ecen4350_lcd_v4.c:1080: }
      0015F7 02r04rC3         [24] 5532 	ljmp	_setTextColor
                                   5533 ;------------------------------------------------------------
                                   5534 ;Allocation info for local variables in function 'setColorYellow'
                                   5535 ;------------------------------------------------------------
                                   5536 ;	.\ecen4350_lcd_v4.c:1082: void setColorYellow() {
                                   5537 ;	-----------------------------------------
                                   5538 ;	 function setColorYellow
                                   5539 ;	-----------------------------------------
      0015FA                       5540 _setColorYellow:
                                   5541 ;	.\ecen4350_lcd_v4.c:1083: setTextColor(YELLOW, colorBackground);
      0015FA E4               [12] 5542 	clr	a
      0015FB F5*00            [12] 5543 	mov	_setTextColor_PARM_2,a
      0015FD F5*01            [12] 5544 	mov	(_setTextColor_PARM_2 + 1),a
      0015FF 90 FF E0         [24] 5545 	mov	dptr,#0xffe0
                                   5546 ;	.\ecen4350_lcd_v4.c:1084: }
      001602 02r04rC3         [24] 5547 	ljmp	_setTextColor
                                   5548 ;------------------------------------------------------------
                                   5549 ;Allocation info for local variables in function 'inputAddress'
                                   5550 ;------------------------------------------------------------
                                   5551 ;address                   Allocated to registers r7 r6 
                                   5552 ;input                     Allocated to registers r7 
                                   5553 ;------------------------------------------------------------
                                   5554 ;	.\ecen4350_lcd_v4.c:1086: unsigned int inputAddress()
                                   5555 ;	-----------------------------------------
                                   5556 ;	 function inputAddress
                                   5557 ;	-----------------------------------------
      001605                       5558 _inputAddress:
                                   5559 ;	.\ecen4350_lcd_v4.c:1091: input = keyDetect();					
      001605 12r10rEE         [24] 5560 	lcall	_keyDetect
                                   5561 ;	.\ecen4350_lcd_v4.c:1094: write(input);									// Print to screen
      001608 AF 82            [24] 5562 	mov  r7,dpl
      00160A C0 07            [24] 5563 	push	ar7
      00160C 12r0Fr6A         [24] 5564 	lcall	_write
      00160F D0 07            [24] 5565 	pop	ar7
                                   5566 ;	.\ecen4350_lcd_v4.c:1095: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      001611 8F 82            [24] 5567 	mov	dpl,r7
      001613 12r13r5C         [24] 5568 	lcall	_ASCIItoHex
                                   5569 ;	.\ecen4350_lcd_v4.c:1096: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      001616 E5 82            [12] 5570 	mov	a,dpl
      001618 C4               [12] 5571 	swap	a
      001619 54 F0            [12] 5572 	anl	a,#0xf0
      00161B FE               [12] 5573 	mov	r6,a
      00161C 7F 00            [12] 5574 	mov	r7,#0x00
                                   5575 ;	.\ecen4350_lcd_v4.c:1098: input = keyDetect();							// second highest address nibble
      00161E C0 07            [24] 5576 	push	ar7
      001620 C0 06            [24] 5577 	push	ar6
      001622 12r10rEE         [24] 5578 	lcall	_keyDetect
                                   5579 ;	.\ecen4350_lcd_v4.c:1101: write(input);									// Print to screen
      001625 AD 82            [24] 5580 	mov  r5,dpl
      001627 C0 05            [24] 5581 	push	ar5
      001629 12r0Fr6A         [24] 5582 	lcall	_write
      00162C D0 05            [24] 5583 	pop	ar5
                                   5584 ;	.\ecen4350_lcd_v4.c:1102: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      00162E 8D 82            [24] 5585 	mov	dpl,r5
      001630 12r13r5C         [24] 5586 	lcall	_ASCIItoHex
      001633 AD 82            [24] 5587 	mov	r5,dpl
      001635 D0 06            [24] 5588 	pop	ar6
      001637 D0 07            [24] 5589 	pop	ar7
                                   5590 ;	.\ecen4350_lcd_v4.c:1103: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      001639 8D 04            [24] 5591 	mov	ar4,r5
      00163B 7D 00            [12] 5592 	mov	r5,#0x00
      00163D EF               [12] 5593 	mov	a,r7
      00163E 42 05            [12] 5594 	orl	ar5,a
      001640 EE               [12] 5595 	mov	a,r6
      001641 42 04            [12] 5596 	orl	ar4,a
                                   5597 ;	.\ecen4350_lcd_v4.c:1105: input = keyDetect();
      001643 C0 05            [24] 5598 	push	ar5
      001645 C0 04            [24] 5599 	push	ar4
      001647 12r10rEE         [24] 5600 	lcall	_keyDetect
      00164A AF 82            [24] 5601 	mov	r7,dpl
      00164C D0 04            [24] 5602 	pop	ar4
      00164E D0 05            [24] 5603 	pop	ar5
                                   5604 ;	.\ecen4350_lcd_v4.c:1108: write(input);
      001650 8F 82            [24] 5605 	mov	dpl,r7
      001652 C0 07            [24] 5606 	push	ar7
      001654 C0 05            [24] 5607 	push	ar5
      001656 C0 04            [24] 5608 	push	ar4
      001658 12r0Fr6A         [24] 5609 	lcall	_write
      00165B D0 04            [24] 5610 	pop	ar4
      00165D D0 05            [24] 5611 	pop	ar5
      00165F D0 07            [24] 5612 	pop	ar7
                                   5613 ;	.\ecen4350_lcd_v4.c:1109: input = ASCIItoHex(input);
      001661 8F 82            [24] 5614 	mov	dpl,r7
      001663 C0 05            [24] 5615 	push	ar5
      001665 C0 04            [24] 5616 	push	ar4
      001667 12r13r5C         [24] 5617 	lcall	_ASCIItoHex
      00166A AF 82            [24] 5618 	mov	r7,dpl
      00166C D0 04            [24] 5619 	pop	ar4
      00166E D0 05            [24] 5620 	pop	ar5
                                   5621 ;	.\ecen4350_lcd_v4.c:1110: address |= (int) input * 16;					// *0x0010
      001670 E4               [12] 5622 	clr	a
      001671 CF               [12] 5623 	xch	a,r7
      001672 C4               [12] 5624 	swap	a
      001673 CF               [12] 5625 	xch	a,r7
      001674 6F               [12] 5626 	xrl	a,r7
      001675 CF               [12] 5627 	xch	a,r7
      001676 54 F0            [12] 5628 	anl	a,#0xf0
      001678 CF               [12] 5629 	xch	a,r7
      001679 6F               [12] 5630 	xrl	a,r7
      00167A FE               [12] 5631 	mov	r6,a
      00167B ED               [12] 5632 	mov	a,r5
      00167C 42 07            [12] 5633 	orl	ar7,a
      00167E EC               [12] 5634 	mov	a,r4
      00167F 42 06            [12] 5635 	orl	ar6,a
                                   5636 ;	.\ecen4350_lcd_v4.c:1112: input = keyDetect();
      001681 C0 07            [24] 5637 	push	ar7
      001683 C0 06            [24] 5638 	push	ar6
      001685 12r10rEE         [24] 5639 	lcall	_keyDetect
                                   5640 ;	.\ecen4350_lcd_v4.c:1115: write(input);
      001688 AD 82            [24] 5641 	mov  r5,dpl
      00168A C0 05            [24] 5642 	push	ar5
      00168C 12r0Fr6A         [24] 5643 	lcall	_write
      00168F D0 05            [24] 5644 	pop	ar5
                                   5645 ;	.\ecen4350_lcd_v4.c:1116: input = ASCIItoHex(input);
      001691 8D 82            [24] 5646 	mov	dpl,r5
      001693 12r13r5C         [24] 5647 	lcall	_ASCIItoHex
      001696 AD 82            [24] 5648 	mov	r5,dpl
      001698 D0 06            [24] 5649 	pop	ar6
      00169A D0 07            [24] 5650 	pop	ar7
                                   5651 ;	.\ecen4350_lcd_v4.c:1117: address |= (int) input;							// *0x0001
      00169C 7C 00            [12] 5652 	mov	r4,#0x00
      00169E ED               [12] 5653 	mov	a,r5
      00169F 4F               [12] 5654 	orl	a,r7
      0016A0 F5 82            [12] 5655 	mov	dpl,a
      0016A2 EC               [12] 5656 	mov	a,r4
      0016A3 4E               [12] 5657 	orl	a,r6
      0016A4 F5 83            [12] 5658 	mov	dph,a
                                   5659 ;	.\ecen4350_lcd_v4.c:1120: return address;									// yeet
                                   5660 ;	.\ecen4350_lcd_v4.c:1121: }
      0016A6 22               [24] 5661 	ret
                                   5662 ;------------------------------------------------------------
                                   5663 ;Allocation info for local variables in function 'inputBlockType'
                                   5664 ;------------------------------------------------------------
                                   5665 ;blockType                 Allocated to registers 
                                   5666 ;invalidType               Allocated to registers 
                                   5667 ;------------------------------------------------------------
                                   5668 ;	.\ecen4350_lcd_v4.c:1123: unsigned char inputBlockType() {
                                   5669 ;	-----------------------------------------
                                   5670 ;	 function inputBlockType
                                   5671 ;	-----------------------------------------
      0016A7                       5672 _inputBlockType:
                                   5673 ;	.\ecen4350_lcd_v4.c:1129: selection = keyDetect();
      0016A7 12r10rEE         [24] 5674 	lcall	_keyDetect
      0016AA AF 82            [24] 5675 	mov	r7,dpl
      0016AC 78r00            [12] 5676 	mov	r0,#_selection
      0016AE A6 07            [24] 5677 	mov	@r0,ar7
                                   5678 ;	.\ecen4350_lcd_v4.c:1130: blockType = ASCIItoHex(selection);
      0016B0 8F 82            [24] 5679 	mov	dpl,r7
                                   5680 ;	.\ecen4350_lcd_v4.c:1145: return blockType;
                                   5681 ;	.\ecen4350_lcd_v4.c:1146: }
      0016B2 02r13r5C         [24] 5682 	ljmp	_ASCIItoHex
                                   5683 ;------------------------------------------------------------
                                   5684 ;Allocation info for local variables in function 'inputBlockSize'
                                   5685 ;------------------------------------------------------------
                                   5686 ;blockSize                 Allocated to registers 
                                   5687 ;------------------------------------------------------------
                                   5688 ;	.\ecen4350_lcd_v4.c:1148: unsigned char inputBlockSize() {
                                   5689 ;	-----------------------------------------
                                   5690 ;	 function inputBlockSize
                                   5691 ;	-----------------------------------------
      0016B5                       5692 _inputBlockSize:
                                   5693 ;	.\ecen4350_lcd_v4.c:1151: selection = keyDetect();
      0016B5 12r10rEE         [24] 5694 	lcall	_keyDetect
      0016B8 AF 82            [24] 5695 	mov	r7,dpl
      0016BA 78r00            [12] 5696 	mov	r0,#_selection
      0016BC A6 07            [24] 5697 	mov	@r0,ar7
                                   5698 ;	.\ecen4350_lcd_v4.c:1152: write(selection);
      0016BE 8F 82            [24] 5699 	mov	dpl,r7
      0016C0 12r0Fr6A         [24] 5700 	lcall	_write
                                   5701 ;	.\ecen4350_lcd_v4.c:1153: selection = ASCIItoHex(selection);
      0016C3 78r00            [12] 5702 	mov	r0,#_selection
      0016C5 86 82            [24] 5703 	mov	dpl,@r0
      0016C7 12r13r5C         [24] 5704 	lcall	_ASCIItoHex
      0016CA AF 82            [24] 5705 	mov	r7,dpl
      0016CC 78r00            [12] 5706 	mov	r0,#_selection
      0016CE A6 07            [24] 5707 	mov	@r0,ar7
                                   5708 ;	.\ecen4350_lcd_v4.c:1154: blockSize |= selection * 16;
      0016D0 EF               [12] 5709 	mov	a,r7
      0016D1 C4               [12] 5710 	swap	a
      0016D2 54 F0            [12] 5711 	anl	a,#0xf0
      0016D4 FF               [12] 5712 	mov	r7,a
                                   5713 ;	.\ecen4350_lcd_v4.c:1155: selection = keyDetect();
      0016D5 C0 07            [24] 5714 	push	ar7
      0016D7 12r10rEE         [24] 5715 	lcall	_keyDetect
      0016DA AE 82            [24] 5716 	mov	r6,dpl
      0016DC 78r00            [12] 5717 	mov	r0,#_selection
      0016DE A6 06            [24] 5718 	mov	@r0,ar6
                                   5719 ;	.\ecen4350_lcd_v4.c:1156: write(selection);
      0016E0 8E 82            [24] 5720 	mov	dpl,r6
      0016E2 12r0Fr6A         [24] 5721 	lcall	_write
                                   5722 ;	.\ecen4350_lcd_v4.c:1157: selection = ASCIItoHex(selection);
      0016E5 78r00            [12] 5723 	mov	r0,#_selection
      0016E7 86 82            [24] 5724 	mov	dpl,@r0
      0016E9 12r13r5C         [24] 5725 	lcall	_ASCIItoHex
      0016EC AE 82            [24] 5726 	mov	r6,dpl
      0016EE D0 07            [24] 5727 	pop	ar7
      0016F0 78r00            [12] 5728 	mov	r0,#_selection
      0016F2 A6 06            [24] 5729 	mov	@r0,ar6
                                   5730 ;	.\ecen4350_lcd_v4.c:1158: blockSize |= selection;
      0016F4 EE               [12] 5731 	mov	a,r6
      0016F5 4F               [12] 5732 	orl	a,r7
      0016F6 F5 82            [12] 5733 	mov	dpl,a
                                   5734 ;	.\ecen4350_lcd_v4.c:1159: return blockSize;
                                   5735 ;	.\ecen4350_lcd_v4.c:1160: }
      0016F8 22               [24] 5736 	ret
                                   5737 ;------------------------------------------------------------
                                   5738 ;Allocation info for local variables in function 'printMenu'
                                   5739 ;------------------------------------------------------------
                                   5740 ;	.\ecen4350_lcd_v4.c:1163: void printMenu() {
                                   5741 ;	-----------------------------------------
                                   5742 ;	 function printMenu
                                   5743 ;	-----------------------------------------
      0016F9                       5744 _printMenu:
                                   5745 ;	.\ecen4350_lcd_v4.c:1165: if (UART_en == 1) goto withUART;
      0016F9 78r01            [12] 5746 	mov	r0,#_UART_en
      0016FB B6 01 03         [24] 5747 	cjne	@r0,#0x01,00111$
      0016FE 02r18r34         [24] 5748 	ljmp	00103$
      001701                       5749 00111$:
                                   5750 ;	.\ecen4350_lcd_v4.c:1166: setCursor(0,0);
      001701 E4               [12] 5751 	clr	a
      001702 F5*00            [12] 5752 	mov	_setCursor_PARM_2,a
      001704 F5*01            [12] 5753 	mov	(_setCursor_PARM_2 + 1),a
      001706 90 00 00         [24] 5754 	mov	dptr,#0x0000
      001709 12r04rB6         [24] 5755 	lcall	_setCursor
                                   5756 ;	.\ecen4350_lcd_v4.c:1167: clearLCD();
      00170C 12r0Dr53         [24] 5757 	lcall	_clearLCD
                                   5758 ;	.\ecen4350_lcd_v4.c:1170: fillTop(GRAY);
      00170F 90 D6 BA         [24] 5759 	mov	dptr,#0xd6ba
      001712 12r0Br86         [24] 5760 	lcall	_fillTop
                                   5761 ;	.\ecen4350_lcd_v4.c:1171: setTextSize(5);
      001715 75 82 05         [24] 5762 	mov	dpl,#0x05
      001718 12r04rD0         [24] 5763 	lcall	_setTextSize
                                   5764 ;	.\ecen4350_lcd_v4.c:1172: setColorMenu();
      00171B 12r15rCD         [24] 5765 	lcall	_setColorMenu
                                   5766 ;	.\ecen4350_lcd_v4.c:1173: setCursor(30, 0);
      00171E E4               [12] 5767 	clr	a
      00171F F5*00            [12] 5768 	mov	_setCursor_PARM_2,a
      001721 F5*01            [12] 5769 	mov	(_setCursor_PARM_2 + 1),a
      001723 90 00 1E         [24] 5770 	mov	dptr,#0x001e
      001726 12r04rB6         [24] 5771 	lcall	_setCursor
                                   5772 ;	.\ecen4350_lcd_v4.c:1174: LCD_string_write("<Menu>\n");
      001729 90r05r5C         [24] 5773 	mov	dptr,#___str_5
      00172C 75 F0 80         [24] 5774 	mov	b,#0x80
      00172F 12r0FrD0         [24] 5775 	lcall	_LCD_string_write
                                   5776 ;	.\ecen4350_lcd_v4.c:1176: setTextSize(2);
      001732 75 82 02         [24] 5777 	mov	dpl,#0x02
      001735 12r04rD0         [24] 5778 	lcall	_setTextSize
                                   5779 ;	.\ecen4350_lcd_v4.c:1178: setCursor(0, 60);
      001738 75*00 3C         [24] 5780 	mov	_setCursor_PARM_2,#0x3c
      00173B 75*01 00         [24] 5781 	mov	(_setCursor_PARM_2 + 1),#0x00
      00173E 90 00 00         [24] 5782 	mov	dptr,#0x0000
      001741 12r04rB6         [24] 5783 	lcall	_setCursor
                                   5784 ;	.\ecen4350_lcd_v4.c:1179: setColorWhite();
      001744 12r15rE4         [24] 5785 	lcall	_setColorWhite
                                   5786 ;	.\ecen4350_lcd_v4.c:1180: LCD_string_write(" <D>");
      001747 90r05r64         [24] 5787 	mov	dptr,#___str_6
      00174A 75 F0 80         [24] 5788 	mov	b,#0x80
      00174D 12r0FrD0         [24] 5789 	lcall	_LCD_string_write
                                   5790 ;	.\ecen4350_lcd_v4.c:1181: setColorDefault();
      001750 12r15r94         [24] 5791 	lcall	_setColorDefault
                                   5792 ;	.\ecen4350_lcd_v4.c:1182: LCD_string_write(" DUMP\n");
      001753 90r05r69         [24] 5793 	mov	dptr,#___str_7
      001756 75 F0 80         [24] 5794 	mov	b,#0x80
      001759 12r0FrD0         [24] 5795 	lcall	_LCD_string_write
                                   5796 ;	.\ecen4350_lcd_v4.c:1184: setCursor(120, 60);
      00175C 75*00 3C         [24] 5797 	mov	_setCursor_PARM_2,#0x3c
      00175F 75*01 00         [24] 5798 	mov	(_setCursor_PARM_2 + 1),#0x00
      001762 90 00 78         [24] 5799 	mov	dptr,#0x0078
      001765 12r04rB6         [24] 5800 	lcall	_setCursor
                                   5801 ;	.\ecen4350_lcd_v4.c:1185: setColorWhite();
      001768 12r15rE4         [24] 5802 	lcall	_setColorWhite
                                   5803 ;	.\ecen4350_lcd_v4.c:1186: LCD_string_write(" <B>");
      00176B 90r05r70         [24] 5804 	mov	dptr,#___str_8
      00176E 75 F0 80         [24] 5805 	mov	b,#0x80
      001771 12r0FrD0         [24] 5806 	lcall	_LCD_string_write
                                   5807 ;	.\ecen4350_lcd_v4.c:1187: setColorDefault();
      001774 12r15r94         [24] 5808 	lcall	_setColorDefault
                                   5809 ;	.\ecen4350_lcd_v4.c:1188: LCD_string_write(" MOVE\n");
      001777 90r05r75         [24] 5810 	mov	dptr,#___str_9
      00177A 75 F0 80         [24] 5811 	mov	b,#0x80
      00177D 12r0FrD0         [24] 5812 	lcall	_LCD_string_write
                                   5813 ;	.\ecen4350_lcd_v4.c:1190: setCursor(0, 100);
      001780 75*00 64         [24] 5814 	mov	_setCursor_PARM_2,#0x64
      001783 75*01 00         [24] 5815 	mov	(_setCursor_PARM_2 + 1),#0x00
      001786 90 00 00         [24] 5816 	mov	dptr,#0x0000
      001789 12r04rB6         [24] 5817 	lcall	_setCursor
                                   5818 ;	.\ecen4350_lcd_v4.c:1191: setColorWhite();
      00178C 12r15rE4         [24] 5819 	lcall	_setColorWhite
                                   5820 ;	.\ecen4350_lcd_v4.c:1192: LCD_string_write(" <E>");
      00178F 90r05r7C         [24] 5821 	mov	dptr,#___str_10
      001792 75 F0 80         [24] 5822 	mov	b,#0x80
      001795 12r0FrD0         [24] 5823 	lcall	_LCD_string_write
                                   5824 ;	.\ecen4350_lcd_v4.c:1193: setColorDefault();
      001798 12r15r94         [24] 5825 	lcall	_setColorDefault
                                   5826 ;	.\ecen4350_lcd_v4.c:1194: LCD_string_write(" EDIT\n");
      00179B 90r05r81         [24] 5827 	mov	dptr,#___str_11
      00179E 75 F0 80         [24] 5828 	mov	b,#0x80
      0017A1 12r0FrD0         [24] 5829 	lcall	_LCD_string_write
                                   5830 ;	.\ecen4350_lcd_v4.c:1196: setCursor(120, 100);
      0017A4 75*00 64         [24] 5831 	mov	_setCursor_PARM_2,#0x64
      0017A7 75*01 00         [24] 5832 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017AA 90 00 78         [24] 5833 	mov	dptr,#0x0078
      0017AD 12r04rB6         [24] 5834 	lcall	_setCursor
                                   5835 ;	.\ecen4350_lcd_v4.c:1197: setColorWhite();
      0017B0 12r15rE4         [24] 5836 	lcall	_setColorWhite
                                   5837 ;	.\ecen4350_lcd_v4.c:1198: LCD_string_write(" <F>");
      0017B3 90r05r88         [24] 5838 	mov	dptr,#___str_12
      0017B6 75 F0 80         [24] 5839 	mov	b,#0x80
      0017B9 12r0FrD0         [24] 5840 	lcall	_LCD_string_write
                                   5841 ;	.\ecen4350_lcd_v4.c:1199: setColorDefault();
      0017BC 12r15r94         [24] 5842 	lcall	_setColorDefault
                                   5843 ;	.\ecen4350_lcd_v4.c:1200: LCD_string_write(" FIND\n");
      0017BF 90r05r8D         [24] 5844 	mov	dptr,#___str_13
      0017C2 75 F0 80         [24] 5845 	mov	b,#0x80
      0017C5 12r0FrD0         [24] 5846 	lcall	_LCD_string_write
                                   5847 ;	.\ecen4350_lcd_v4.c:1202: setCursor(0, 140);
      0017C8 75*00 8C         [24] 5848 	mov	_setCursor_PARM_2,#0x8c
      0017CB 75*01 00         [24] 5849 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017CE 90 00 00         [24] 5850 	mov	dptr,#0x0000
      0017D1 12r04rB6         [24] 5851 	lcall	_setCursor
                                   5852 ;	.\ecen4350_lcd_v4.c:1203: setColorWhite();
      0017D4 12r15rE4         [24] 5853 	lcall	_setColorWhite
                                   5854 ;	.\ecen4350_lcd_v4.c:1204: LCD_string_write(" <C>");
      0017D7 90r05r94         [24] 5855 	mov	dptr,#___str_14
      0017DA 75 F0 80         [24] 5856 	mov	b,#0x80
      0017DD 12r0FrD0         [24] 5857 	lcall	_LCD_string_write
                                   5858 ;	.\ecen4350_lcd_v4.c:1205: setColorDefault();
      0017E0 12r15r94         [24] 5859 	lcall	_setColorDefault
                                   5860 ;	.\ecen4350_lcd_v4.c:1206: LCD_string_write(" COUNT\n");
      0017E3 90r05r99         [24] 5861 	mov	dptr,#___str_15
      0017E6 75 F0 80         [24] 5862 	mov	b,#0x80
      0017E9 12r0FrD0         [24] 5863 	lcall	_LCD_string_write
                                   5864 ;	.\ecen4350_lcd_v4.c:1208: setCursor(0, 180);
      0017EC 75*00 B4         [24] 5865 	mov	_setCursor_PARM_2,#0xb4
      0017EF 75*01 00         [24] 5866 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017F2 90 00 00         [24] 5867 	mov	dptr,#0x0000
      0017F5 12r04rB6         [24] 5868 	lcall	_setCursor
                                   5869 ;	.\ecen4350_lcd_v4.c:1209: setColorWhite();
      0017F8 12r15rE4         [24] 5870 	lcall	_setColorWhite
                                   5871 ;	.\ecen4350_lcd_v4.c:1210: LCD_string_write(" <A>");
      0017FB 90r05rA1         [24] 5872 	mov	dptr,#___str_16
      0017FE 75 F0 80         [24] 5873 	mov	b,#0x80
      001801 12r0FrD0         [24] 5874 	lcall	_LCD_string_write
                                   5875 ;	.\ecen4350_lcd_v4.c:1211: setColorDefault();
      001804 12r15r94         [24] 5876 	lcall	_setColorDefault
                                   5877 ;	.\ecen4350_lcd_v4.c:1212: LCD_string_write(" MEM CHECK\n");
      001807 90r05rA6         [24] 5878 	mov	dptr,#___str_17
      00180A 75 F0 80         [24] 5879 	mov	b,#0x80
      00180D 12r0FrD0         [24] 5880 	lcall	_LCD_string_write
                                   5881 ;	.\ecen4350_lcd_v4.c:1214: setCursor(0, 220);
      001810 75*00 DC         [24] 5882 	mov	_setCursor_PARM_2,#0xdc
      001813 75*01 00         [24] 5883 	mov	(_setCursor_PARM_2 + 1),#0x00
      001816 90 00 00         [24] 5884 	mov	dptr,#0x0000
      001819 12r04rB6         [24] 5885 	lcall	_setCursor
                                   5886 ;	.\ecen4350_lcd_v4.c:1215: setColorWhite();
      00181C 12r15rE4         [24] 5887 	lcall	_setColorWhite
                                   5888 ;	.\ecen4350_lcd_v4.c:1216: LCD_string_write(" <1>");
      00181F 90r05rB2         [24] 5889 	mov	dptr,#___str_18
      001822 75 F0 80         [24] 5890 	mov	b,#0x80
      001825 12r0FrD0         [24] 5891 	lcall	_LCD_string_write
                                   5892 ;	.\ecen4350_lcd_v4.c:1217: setColorDefault();
      001828 12r15r94         [24] 5893 	lcall	_setColorDefault
                                   5894 ;	.\ecen4350_lcd_v4.c:1218: LCD_string_write(" UART [Disabled]");
      00182B 90r05rB7         [24] 5895 	mov	dptr,#___str_19
      00182E 75 F0 80         [24] 5896 	mov	b,#0x80
                                   5897 ;	.\ecen4350_lcd_v4.c:1219: goto exit;
      001831 02r0FrD0         [24] 5898 	ljmp	_LCD_string_write
                                   5899 ;	.\ecen4350_lcd_v4.c:1221: withUART:
      001834                       5900 00103$:
                                   5901 ;	.\ecen4350_lcd_v4.c:1222: setCursor(0,0);
      001834 E4               [12] 5902 	clr	a
      001835 F5*00            [12] 5903 	mov	_setCursor_PARM_2,a
      001837 F5*01            [12] 5904 	mov	(_setCursor_PARM_2 + 1),a
      001839 90 00 00         [24] 5905 	mov	dptr,#0x0000
      00183C 12r04rB6         [24] 5906 	lcall	_setCursor
                                   5907 ;	.\ecen4350_lcd_v4.c:1223: clearLCD();
      00183F 12r0Dr53         [24] 5908 	lcall	_clearLCD
                                   5909 ;	.\ecen4350_lcd_v4.c:1226: fillTop(GRAY);
      001842 90 D6 BA         [24] 5910 	mov	dptr,#0xd6ba
      001845 12r0Br86         [24] 5911 	lcall	_fillTop
                                   5912 ;	.\ecen4350_lcd_v4.c:1227: setTextSize(5);
      001848 75 82 05         [24] 5913 	mov	dpl,#0x05
      00184B 12r04rD0         [24] 5914 	lcall	_setTextSize
                                   5915 ;	.\ecen4350_lcd_v4.c:1228: setColorMenu();
      00184E 12r15rCD         [24] 5916 	lcall	_setColorMenu
                                   5917 ;	.\ecen4350_lcd_v4.c:1229: setCursor(30, 0);
      001851 E4               [12] 5918 	clr	a
      001852 F5*00            [12] 5919 	mov	_setCursor_PARM_2,a
      001854 F5*01            [12] 5920 	mov	(_setCursor_PARM_2 + 1),a
      001856 90 00 1E         [24] 5921 	mov	dptr,#0x001e
      001859 12r04rB6         [24] 5922 	lcall	_setCursor
                                   5923 ;	.\ecen4350_lcd_v4.c:1230: LCD_string_write("<Menu>\n");
      00185C 90r05r5C         [24] 5924 	mov	dptr,#___str_5
      00185F 75 F0 80         [24] 5925 	mov	b,#0x80
      001862 12r0FrD0         [24] 5926 	lcall	_LCD_string_write
                                   5927 ;	.\ecen4350_lcd_v4.c:1232: setTextSize(2);
      001865 75 82 02         [24] 5928 	mov	dpl,#0x02
      001868 12r04rD0         [24] 5929 	lcall	_setTextSize
                                   5930 ;	.\ecen4350_lcd_v4.c:1234: setCursor(0, 60);
      00186B 75*00 3C         [24] 5931 	mov	_setCursor_PARM_2,#0x3c
      00186E 75*01 00         [24] 5932 	mov	(_setCursor_PARM_2 + 1),#0x00
      001871 90 00 00         [24] 5933 	mov	dptr,#0x0000
      001874 12r04rB6         [24] 5934 	lcall	_setCursor
                                   5935 ;	.\ecen4350_lcd_v4.c:1235: setColorWhite();
      001877 12r15rE4         [24] 5936 	lcall	_setColorWhite
                                   5937 ;	.\ecen4350_lcd_v4.c:1236: LCD_string_write(" <D>");
      00187A 90r05r64         [24] 5938 	mov	dptr,#___str_6
      00187D 75 F0 80         [24] 5939 	mov	b,#0x80
      001880 12r0FrD0         [24] 5940 	lcall	_LCD_string_write
                                   5941 ;	.\ecen4350_lcd_v4.c:1237: setColorDefault();
      001883 12r15r94         [24] 5942 	lcall	_setColorDefault
                                   5943 ;	.\ecen4350_lcd_v4.c:1238: LCD_string_write(" DUMP\n");
      001886 90r05r69         [24] 5944 	mov	dptr,#___str_7
      001889 75 F0 80         [24] 5945 	mov	b,#0x80
      00188C 12r0FrD0         [24] 5946 	lcall	_LCD_string_write
                                   5947 ;	.\ecen4350_lcd_v4.c:1240: setCursor(120, 60);
      00188F 75*00 3C         [24] 5948 	mov	_setCursor_PARM_2,#0x3c
      001892 75*01 00         [24] 5949 	mov	(_setCursor_PARM_2 + 1),#0x00
      001895 90 00 78         [24] 5950 	mov	dptr,#0x0078
      001898 12r04rB6         [24] 5951 	lcall	_setCursor
                                   5952 ;	.\ecen4350_lcd_v4.c:1241: setColorWhite();
      00189B 12r15rE4         [24] 5953 	lcall	_setColorWhite
                                   5954 ;	.\ecen4350_lcd_v4.c:1242: LCD_string_write(" <B>");
      00189E 90r05r70         [24] 5955 	mov	dptr,#___str_8
      0018A1 75 F0 80         [24] 5956 	mov	b,#0x80
      0018A4 12r0FrD0         [24] 5957 	lcall	_LCD_string_write
                                   5958 ;	.\ecen4350_lcd_v4.c:1243: setColorDefault();
      0018A7 12r15r94         [24] 5959 	lcall	_setColorDefault
                                   5960 ;	.\ecen4350_lcd_v4.c:1244: LCD_string_write(" MOVE\n");
      0018AA 90r05r75         [24] 5961 	mov	dptr,#___str_9
      0018AD 75 F0 80         [24] 5962 	mov	b,#0x80
      0018B0 12r0FrD0         [24] 5963 	lcall	_LCD_string_write
                                   5964 ;	.\ecen4350_lcd_v4.c:1246: setCursor(0, 100);
      0018B3 75*00 64         [24] 5965 	mov	_setCursor_PARM_2,#0x64
      0018B6 75*01 00         [24] 5966 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018B9 90 00 00         [24] 5967 	mov	dptr,#0x0000
      0018BC 12r04rB6         [24] 5968 	lcall	_setCursor
                                   5969 ;	.\ecen4350_lcd_v4.c:1247: setColorWhite();
      0018BF 12r15rE4         [24] 5970 	lcall	_setColorWhite
                                   5971 ;	.\ecen4350_lcd_v4.c:1248: LCD_string_write(" <E>");
      0018C2 90r05r7C         [24] 5972 	mov	dptr,#___str_10
      0018C5 75 F0 80         [24] 5973 	mov	b,#0x80
      0018C8 12r0FrD0         [24] 5974 	lcall	_LCD_string_write
                                   5975 ;	.\ecen4350_lcd_v4.c:1249: setColorDefault();
      0018CB 12r15r94         [24] 5976 	lcall	_setColorDefault
                                   5977 ;	.\ecen4350_lcd_v4.c:1250: LCD_string_write(" EDIT\n");
      0018CE 90r05r81         [24] 5978 	mov	dptr,#___str_11
      0018D1 75 F0 80         [24] 5979 	mov	b,#0x80
      0018D4 12r0FrD0         [24] 5980 	lcall	_LCD_string_write
                                   5981 ;	.\ecen4350_lcd_v4.c:1252: setCursor(120, 100);
      0018D7 75*00 64         [24] 5982 	mov	_setCursor_PARM_2,#0x64
      0018DA 75*01 00         [24] 5983 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018DD 90 00 78         [24] 5984 	mov	dptr,#0x0078
      0018E0 12r04rB6         [24] 5985 	lcall	_setCursor
                                   5986 ;	.\ecen4350_lcd_v4.c:1253: setColorWhite();
      0018E3 12r15rE4         [24] 5987 	lcall	_setColorWhite
                                   5988 ;	.\ecen4350_lcd_v4.c:1254: LCD_string_write(" <F>");
      0018E6 90r05r88         [24] 5989 	mov	dptr,#___str_12
      0018E9 75 F0 80         [24] 5990 	mov	b,#0x80
      0018EC 12r0FrD0         [24] 5991 	lcall	_LCD_string_write
                                   5992 ;	.\ecen4350_lcd_v4.c:1255: setColorDefault();
      0018EF 12r15r94         [24] 5993 	lcall	_setColorDefault
                                   5994 ;	.\ecen4350_lcd_v4.c:1256: LCD_string_write(" FIND\n");
      0018F2 90r05r8D         [24] 5995 	mov	dptr,#___str_13
      0018F5 75 F0 80         [24] 5996 	mov	b,#0x80
      0018F8 12r0FrD0         [24] 5997 	lcall	_LCD_string_write
                                   5998 ;	.\ecen4350_lcd_v4.c:1258: setCursor(0, 140);
      0018FB 75*00 8C         [24] 5999 	mov	_setCursor_PARM_2,#0x8c
      0018FE 75*01 00         [24] 6000 	mov	(_setCursor_PARM_2 + 1),#0x00
      001901 90 00 00         [24] 6001 	mov	dptr,#0x0000
      001904 12r04rB6         [24] 6002 	lcall	_setCursor
                                   6003 ;	.\ecen4350_lcd_v4.c:1259: setColorWhite();
      001907 12r15rE4         [24] 6004 	lcall	_setColorWhite
                                   6005 ;	.\ecen4350_lcd_v4.c:1260: LCD_string_write(" <C>");
      00190A 90r05r94         [24] 6006 	mov	dptr,#___str_14
      00190D 75 F0 80         [24] 6007 	mov	b,#0x80
      001910 12r0FrD0         [24] 6008 	lcall	_LCD_string_write
                                   6009 ;	.\ecen4350_lcd_v4.c:1261: setColorDefault();
      001913 12r15r94         [24] 6010 	lcall	_setColorDefault
                                   6011 ;	.\ecen4350_lcd_v4.c:1262: LCD_string_write(" COUNT\n");
      001916 90r05r99         [24] 6012 	mov	dptr,#___str_15
      001919 75 F0 80         [24] 6013 	mov	b,#0x80
      00191C 12r0FrD0         [24] 6014 	lcall	_LCD_string_write
                                   6015 ;	.\ecen4350_lcd_v4.c:1264: setCursor(0, 180);
      00191F 75*00 B4         [24] 6016 	mov	_setCursor_PARM_2,#0xb4
      001922 75*01 00         [24] 6017 	mov	(_setCursor_PARM_2 + 1),#0x00
      001925 90 00 00         [24] 6018 	mov	dptr,#0x0000
      001928 12r04rB6         [24] 6019 	lcall	_setCursor
                                   6020 ;	.\ecen4350_lcd_v4.c:1265: setColorWhite();
      00192B 12r15rE4         [24] 6021 	lcall	_setColorWhite
                                   6022 ;	.\ecen4350_lcd_v4.c:1266: LCD_string_write(" <A>");
      00192E 90r05rA1         [24] 6023 	mov	dptr,#___str_16
      001931 75 F0 80         [24] 6024 	mov	b,#0x80
      001934 12r0FrD0         [24] 6025 	lcall	_LCD_string_write
                                   6026 ;	.\ecen4350_lcd_v4.c:1267: setColorDefault();
      001937 12r15r94         [24] 6027 	lcall	_setColorDefault
                                   6028 ;	.\ecen4350_lcd_v4.c:1268: LCD_string_write(" MEM CHECK\n");
      00193A 90r05rA6         [24] 6029 	mov	dptr,#___str_17
      00193D 75 F0 80         [24] 6030 	mov	b,#0x80
      001940 12r0FrD0         [24] 6031 	lcall	_LCD_string_write
                                   6032 ;	.\ecen4350_lcd_v4.c:1270: setCursor(0, 220);
      001943 75*00 DC         [24] 6033 	mov	_setCursor_PARM_2,#0xdc
      001946 75*01 00         [24] 6034 	mov	(_setCursor_PARM_2 + 1),#0x00
      001949 90 00 00         [24] 6035 	mov	dptr,#0x0000
      00194C 12r04rB6         [24] 6036 	lcall	_setCursor
                                   6037 ;	.\ecen4350_lcd_v4.c:1271: setColorWhite();
      00194F 12r15rE4         [24] 6038 	lcall	_setColorWhite
                                   6039 ;	.\ecen4350_lcd_v4.c:1272: LCD_string_write(" <1>");
      001952 90r05rB2         [24] 6040 	mov	dptr,#___str_18
      001955 75 F0 80         [24] 6041 	mov	b,#0x80
      001958 12r0FrD0         [24] 6042 	lcall	_LCD_string_write
                                   6043 ;	.\ecen4350_lcd_v4.c:1273: setColorDefault();
      00195B 12r15r94         [24] 6044 	lcall	_setColorDefault
                                   6045 ;	.\ecen4350_lcd_v4.c:1274: LCD_string_write(" UART [Enabled]");
      00195E 90r05rC8         [24] 6046 	mov	dptr,#___str_20
      001961 75 F0 80         [24] 6047 	mov	b,#0x80
      001964 12r0FrD0         [24] 6048 	lcall	_LCD_string_write
                                   6049 ;	.\ecen4350_lcd_v4.c:1275: exit: 
                                   6050 ;	.\ecen4350_lcd_v4.c:1276: return;
                                   6051 ;	.\ecen4350_lcd_v4.c:1277: }
      001967 22               [24] 6052 	ret
                                   6053 ;------------------------------------------------------------
                                   6054 ;Allocation info for local variables in function 'dump'
                                   6055 ;------------------------------------------------------------
                                   6056 ;d                         Allocated with name '_dump_d_65536_547'
                                   6057 ;__2621440106              Allocated to registers 
                                   6058 ;__2621440103              Allocated to registers 
                                   6059 ;__2621440104              Allocated to registers 
                                   6060 ;map_address               Allocated to registers 
                                   6061 ;d                         Allocated to registers 
                                   6062 ;__2621440107              Allocated to registers 
                                   6063 ;map_address               Allocated to registers 
                                   6064 ;d                         Allocated to registers 
                                   6065 ;__2621440118              Allocated to registers 
                                   6066 ;__2621440115              Allocated to registers 
                                   6067 ;__2621440112              Allocated to registers 
                                   6068 ;__2621440109              Allocated to registers 
                                   6069 ;__2621440110              Allocated to registers 
                                   6070 ;map_address               Allocated to registers 
                                   6071 ;d                         Allocated to registers 
                                   6072 ;__2621440113              Allocated to registers 
                                   6073 ;map_address               Allocated to registers 
                                   6074 ;d                         Allocated to registers 
                                   6075 ;__2621440116              Allocated to registers 
                                   6076 ;map_address               Allocated to registers 
                                   6077 ;d                         Allocated to registers 
                                   6078 ;__2621440119              Allocated to registers 
                                   6079 ;map_address               Allocated to registers 
                                   6080 ;d                         Allocated to registers 
                                   6081 ;__2621440142              Allocated to registers 
                                   6082 ;__2621440139              Allocated to registers 
                                   6083 ;__2621440136              Allocated to registers 
                                   6084 ;__2621440133              Allocated to registers 
                                   6085 ;__2621440130              Allocated to registers 
                                   6086 ;__2621440127              Allocated to registers 
                                   6087 ;__2621440124              Allocated to registers 
                                   6088 ;__2621440121              Allocated to registers 
                                   6089 ;__2621440122              Allocated to registers 
                                   6090 ;map_address               Allocated to registers 
                                   6091 ;d                         Allocated to registers 
                                   6092 ;__2621440125              Allocated to registers 
                                   6093 ;map_address               Allocated to registers 
                                   6094 ;d                         Allocated to registers 
                                   6095 ;__2621440128              Allocated to registers 
                                   6096 ;map_address               Allocated to registers 
                                   6097 ;d                         Allocated to registers 
                                   6098 ;__2621440131              Allocated to registers 
                                   6099 ;map_address               Allocated to registers 
                                   6100 ;d                         Allocated to registers r3 
                                   6101 ;__2621440134              Allocated to registers 
                                   6102 ;map_address               Allocated to registers 
                                   6103 ;d                         Allocated to registers 
                                   6104 ;__2621440137              Allocated to registers 
                                   6105 ;map_address               Allocated to registers 
                                   6106 ;d                         Allocated to registers 
                                   6107 ;__2621440140              Allocated to registers 
                                   6108 ;map_address               Allocated to registers 
                                   6109 ;d                         Allocated to registers 
                                   6110 ;__2621440143              Allocated to registers 
                                   6111 ;map_address               Allocated to registers 
                                   6112 ;d                         Allocated to registers 
                                   6113 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   6114 ;address                   Allocated with name '_dump_address_65536_547'
                                   6115 ;blockSize                 Allocated to registers r5 
                                   6116 ;blockType                 Allocated to registers r7 
                                   6117 ;exit                      Allocated with name '_dump_exit_65536_547'
                                   6118 ;invalidType               Allocated to registers r5 
                                   6119 ;invalidSize               Allocated to registers r3 
                                   6120 ;------------------------------------------------------------
                                   6121 ;	.\ecen4350_lcd_v4.c:1279: void dump()
                                   6122 ;	-----------------------------------------
                                   6123 ;	 function dump
                                   6124 ;	-----------------------------------------
      001968                       6125 _dump:
                                   6126 ;	.\ecen4350_lcd_v4.c:1284: __idata unsigned char blockType = 0;
      001968 7F 00            [12] 6127 	mov	r7,#0x00
                                   6128 ;	.\ecen4350_lcd_v4.c:1285: __idata unsigned char exit = 1;
      00196A 78r07            [12] 6129 	mov	r0,#_dump_exit_65536_547
      00196C 76 01            [12] 6130 	mov	@r0,#0x01
                                   6131 ;	.\ecen4350_lcd_v4.c:1286: __idata unsigned char invalidType = 1;
      00196E 7D 01            [12] 6132 	mov	r5,#0x01
                                   6133 ;	.\ecen4350_lcd_v4.c:1287: __idata unsigned char invalidSize = 1;
      001970 7B 01            [12] 6134 	mov	r3,#0x01
                                   6135 ;	.\ecen4350_lcd_v4.c:1289: clearLCD();
      001972 C0 07            [24] 6136 	push	ar7
      001974 C0 05            [24] 6137 	push	ar5
      001976 C0 03            [24] 6138 	push	ar3
      001978 12r0Dr53         [24] 6139 	lcall	_clearLCD
                                   6140 ;	.\ecen4350_lcd_v4.c:1292: fillTop(GRAY);
      00197B 90 D6 BA         [24] 6141 	mov	dptr,#0xd6ba
      00197E 12r0Br86         [24] 6142 	lcall	_fillTop
                                   6143 ;	.\ecen4350_lcd_v4.c:1293: setTextSize(5);
      001981 75 82 05         [24] 6144 	mov	dpl,#0x05
      001984 12r04rD0         [24] 6145 	lcall	_setTextSize
                                   6146 ;	.\ecen4350_lcd_v4.c:1294: setColorMenu();
      001987 12r15rCD         [24] 6147 	lcall	_setColorMenu
                                   6148 ;	.\ecen4350_lcd_v4.c:1295: setCursor(30, 0);
      00198A E4               [12] 6149 	clr	a
      00198B F5*00            [12] 6150 	mov	_setCursor_PARM_2,a
      00198D F5*01            [12] 6151 	mov	(_setCursor_PARM_2 + 1),a
      00198F 90 00 1E         [24] 6152 	mov	dptr,#0x001e
      001992 12r04rB6         [24] 6153 	lcall	_setCursor
                                   6154 ;	.\ecen4350_lcd_v4.c:1296: LCD_string_write("[DUMP]\n");
      001995 90r05rD8         [24] 6155 	mov	dptr,#___str_21
      001998 75 F0 80         [24] 6156 	mov	b,#0x80
      00199B 12r0FrD0         [24] 6157 	lcall	_LCD_string_write
                                   6158 ;	.\ecen4350_lcd_v4.c:1297: setColorDefault();
      00199E 12r15r94         [24] 6159 	lcall	_setColorDefault
                                   6160 ;	.\ecen4350_lcd_v4.c:1298: setTextSize(2);
      0019A1 75 82 02         [24] 6161 	mov	dpl,#0x02
      0019A4 12r04rD0         [24] 6162 	lcall	_setTextSize
                                   6163 ;	.\ecen4350_lcd_v4.c:1299: setCursor(0, 60);
      0019A7 75*00 3C         [24] 6164 	mov	_setCursor_PARM_2,#0x3c
      0019AA 75*01 00         [24] 6165 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019AD 90 00 00         [24] 6166 	mov	dptr,#0x0000
      0019B0 12r04rB6         [24] 6167 	lcall	_setCursor
                                   6168 ;	.\ecen4350_lcd_v4.c:1300: LCD_string_write(" Address Location:\n");
      0019B3 90r05rE0         [24] 6169 	mov	dptr,#___str_22
      0019B6 75 F0 80         [24] 6170 	mov	b,#0x80
      0019B9 12r0FrD0         [24] 6171 	lcall	_LCD_string_write
                                   6172 ;	.\ecen4350_lcd_v4.c:1301: setCursor(0, 80);
      0019BC 75*00 50         [24] 6173 	mov	_setCursor_PARM_2,#0x50
      0019BF 75*01 00         [24] 6174 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019C2 90 00 00         [24] 6175 	mov	dptr,#0x0000
      0019C5 12r04rB6         [24] 6176 	lcall	_setCursor
                                   6177 ;	.\ecen4350_lcd_v4.c:1302: setColorGray();
      0019C8 12r15rC2         [24] 6178 	lcall	_setColorGray
                                   6179 ;	.\ecen4350_lcd_v4.c:1303: LCD_string_write(" 0x____");
      0019CB 90r05rF4         [24] 6180 	mov	dptr,#___str_23
      0019CE 75 F0 80         [24] 6181 	mov	b,#0x80
      0019D1 12r0FrD0         [24] 6182 	lcall	_LCD_string_write
                                   6183 ;	.\ecen4350_lcd_v4.c:1304: setColorDefault();
      0019D4 12r15r94         [24] 6184 	lcall	_setColorDefault
                                   6185 ;	.\ecen4350_lcd_v4.c:1305: setCursor(0, 140);
      0019D7 75*00 8C         [24] 6186 	mov	_setCursor_PARM_2,#0x8c
      0019DA 75*01 00         [24] 6187 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019DD 90 00 00         [24] 6188 	mov	dptr,#0x0000
      0019E0 12r04rB6         [24] 6189 	lcall	_setCursor
                                   6190 ;	.\ecen4350_lcd_v4.c:1306: LCD_string_write(" Choose Block Type:\n");
      0019E3 90r05rFC         [24] 6191 	mov	dptr,#___str_24
      0019E6 75 F0 80         [24] 6192 	mov	b,#0x80
      0019E9 12r0FrD0         [24] 6193 	lcall	_LCD_string_write
                                   6194 ;	.\ecen4350_lcd_v4.c:1307: setCursor(0, 160); 
      0019EC 75*00 A0         [24] 6195 	mov	_setCursor_PARM_2,#0xa0
      0019EF 75*01 00         [24] 6196 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019F2 90 00 00         [24] 6197 	mov	dptr,#0x0000
      0019F5 12r04rB6         [24] 6198 	lcall	_setCursor
                                   6199 ;	.\ecen4350_lcd_v4.c:1308: setColorGray();
      0019F8 12r15rC2         [24] 6200 	lcall	_setColorGray
                                   6201 ;	.\ecen4350_lcd_v4.c:1309: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0019FB 90r06r11         [24] 6202 	mov	dptr,#___str_25
      0019FE 75 F0 80         [24] 6203 	mov	b,#0x80
      001A01 12r0FrD0         [24] 6204 	lcall	_LCD_string_write
                                   6205 ;	.\ecen4350_lcd_v4.c:1310: setCursor(0, 240);
      001A04 75*00 F0         [24] 6206 	mov	_setCursor_PARM_2,#0xf0
      001A07 75*01 00         [24] 6207 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A0A 90 00 00         [24] 6208 	mov	dptr,#0x0000
      001A0D 12r04rB6         [24] 6209 	lcall	_setCursor
                                   6210 ;	.\ecen4350_lcd_v4.c:1311: LCD_string_write(" Input Size:");
      001A10 90r06r33         [24] 6211 	mov	dptr,#___str_26
      001A13 75 F0 80         [24] 6212 	mov	b,#0x80
      001A16 12r0FrD0         [24] 6213 	lcall	_LCD_string_write
                                   6214 ;	.\ecen4350_lcd_v4.c:1312: setColorGray();
      001A19 12r15rC2         [24] 6215 	lcall	_setColorGray
                                   6216 ;	.\ecen4350_lcd_v4.c:1313: LCD_string_write(" _");
      001A1C 90r06r40         [24] 6217 	mov	dptr,#___str_27
      001A1F 75 F0 80         [24] 6218 	mov	b,#0x80
      001A22 12r0FrD0         [24] 6219 	lcall	_LCD_string_write
                                   6220 ;	.\ecen4350_lcd_v4.c:1320: setColorSelect();
      001A25 12r15r9F         [24] 6221 	lcall	_setColorSelect
                                   6222 ;	.\ecen4350_lcd_v4.c:1321: setCursor(0, 60);
      001A28 75*00 3C         [24] 6223 	mov	_setCursor_PARM_2,#0x3c
      001A2B 75*01 00         [24] 6224 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A2E 90 00 00         [24] 6225 	mov	dptr,#0x0000
      001A31 12r04rB6         [24] 6226 	lcall	_setCursor
                                   6227 ;	.\ecen4350_lcd_v4.c:1322: LCD_string_write(" Address Location:");
      001A34 90r06r43         [24] 6228 	mov	dptr,#___str_28
      001A37 75 F0 80         [24] 6229 	mov	b,#0x80
      001A3A 12r0FrD0         [24] 6230 	lcall	_LCD_string_write
                                   6231 ;	.\ecen4350_lcd_v4.c:1323: setCursor(0, 80);
      001A3D 75*00 50         [24] 6232 	mov	_setCursor_PARM_2,#0x50
      001A40 75*01 00         [24] 6233 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A43 90 00 00         [24] 6234 	mov	dptr,#0x0000
      001A46 12r04rB6         [24] 6235 	lcall	_setCursor
                                   6236 ;	.\ecen4350_lcd_v4.c:1324: LCD_string_write(" ");
      001A49 90r06r56         [24] 6237 	mov	dptr,#___str_29
      001A4C 75 F0 80         [24] 6238 	mov	b,#0x80
      001A4F 12r0FrD0         [24] 6239 	lcall	_LCD_string_write
                                   6240 ;	.\ecen4350_lcd_v4.c:1325: setColorHighlight1();
      001A52 12r15rAA         [24] 6241 	lcall	_setColorHighlight1
                                   6242 ;	.\ecen4350_lcd_v4.c:1326: LCD_string_write("0x");
      001A55 90r05r29         [24] 6243 	mov	dptr,#___str_2
      001A58 75 F0 80         [24] 6244 	mov	b,#0x80
      001A5B 12r0FrD0         [24] 6245 	lcall	_LCD_string_write
                                   6246 ;	.\ecen4350_lcd_v4.c:1327: address = inputAddress();				// input 16-bit address and store in memory
      001A5E 12r16r05         [24] 6247 	lcall	_inputAddress
      001A61 78r05            [12] 6248 	mov	r0,#_dump_address_65536_547
      001A63 A6 82            [24] 6249 	mov	@r0,dpl
      001A65 08               [12] 6250 	inc	r0
      001A66 A6 83            [24] 6251 	mov	@r0,dph
      001A68 D0 03            [24] 6252 	pop	ar3
      001A6A D0 05            [24] 6253 	pop	ar5
                                   6254 ;	.\ecen4350_lcd_v4.c:1328: d = (unsigned char __xdata *)(address);
      001A6C 78r05            [12] 6255 	mov	r0,#_dump_address_65536_547
      001A6E 86 04            [24] 6256 	mov	ar4,@r0
      001A70 08               [12] 6257 	inc	r0
      001A71 86 06            [24] 6258 	mov	ar6,@r0
                                   6259 ;	.\ecen4350_lcd_v4.c:1331: setColorDefault();
      001A73 C0 06            [24] 6260 	push	ar6
      001A75 C0 05            [24] 6261 	push	ar5
      001A77 C0 04            [24] 6262 	push	ar4
      001A79 C0 03            [24] 6263 	push	ar3
      001A7B 12r15r94         [24] 6264 	lcall	_setColorDefault
                                   6265 ;	.\ecen4350_lcd_v4.c:1332: setCursor(0, 60);
      001A7E 75*00 3C         [24] 6266 	mov	_setCursor_PARM_2,#0x3c
      001A81 75*01 00         [24] 6267 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A84 90 00 00         [24] 6268 	mov	dptr,#0x0000
      001A87 12r04rB6         [24] 6269 	lcall	_setCursor
                                   6270 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write(" Address Location:");
      001A8A 90r06r43         [24] 6271 	mov	dptr,#___str_28
      001A8D 75 F0 80         [24] 6272 	mov	b,#0x80
      001A90 12r0FrD0         [24] 6273 	lcall	_LCD_string_write
                                   6274 ;	.\ecen4350_lcd_v4.c:1334: setCursor(0, 80);
      001A93 75*00 50         [24] 6275 	mov	_setCursor_PARM_2,#0x50
      001A96 75*01 00         [24] 6276 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A99 90 00 00         [24] 6277 	mov	dptr,#0x0000
      001A9C 12r04rB6         [24] 6278 	lcall	_setCursor
                                   6279 ;	.\ecen4350_lcd_v4.c:1335: LCD_string_write(" ");
      001A9F 90r06r56         [24] 6280 	mov	dptr,#___str_29
      001AA2 75 F0 80         [24] 6281 	mov	b,#0x80
      001AA5 12r0FrD0         [24] 6282 	lcall	_LCD_string_write
                                   6283 ;	.\ecen4350_lcd_v4.c:1336: setColorHighlight2();
      001AA8 12r15rB6         [24] 6284 	lcall	_setColorHighlight2
                                   6285 ;	.\ecen4350_lcd_v4.c:1337: LCD_string_write("0x");
      001AAB 90r05r29         [24] 6286 	mov	dptr,#___str_2
      001AAE 75 F0 80         [24] 6287 	mov	b,#0x80
      001AB1 12r0FrD0         [24] 6288 	lcall	_LCD_string_write
                                   6289 ;	.\ecen4350_lcd_v4.c:1338: print16Hex(address);					// print 16-bit address from stored memory
      001AB4 78r05            [12] 6290 	mov	r0,#_dump_address_65536_547
      001AB6 86 82            [24] 6291 	mov	dpl,@r0
      001AB8 08               [12] 6292 	inc	r0
      001AB9 86 83            [24] 6293 	mov	dph,@r0
      001ABB 12r14rB8         [24] 6294 	lcall	_print16Hex
                                   6295 ;	.\ecen4350_lcd_v4.c:1341: setColorSelect();
      001ABE 12r15r9F         [24] 6296 	lcall	_setColorSelect
                                   6297 ;	.\ecen4350_lcd_v4.c:1342: setCursor(0, 140);
      001AC1 75*00 8C         [24] 6298 	mov	_setCursor_PARM_2,#0x8c
      001AC4 75*01 00         [24] 6299 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AC7 90 00 00         [24] 6300 	mov	dptr,#0x0000
      001ACA 12r04rB6         [24] 6301 	lcall	_setCursor
                                   6302 ;	.\ecen4350_lcd_v4.c:1343: LCD_string_write(" Choose Block Type:");
      001ACD 90r06r58         [24] 6303 	mov	dptr,#___str_30
      001AD0 75 F0 80         [24] 6304 	mov	b,#0x80
      001AD3 12r0FrD0         [24] 6305 	lcall	_LCD_string_write
                                   6306 ;	.\ecen4350_lcd_v4.c:1344: setCursor(0, 160); 
      001AD6 75*00 A0         [24] 6307 	mov	_setCursor_PARM_2,#0xa0
      001AD9 75*01 00         [24] 6308 	mov	(_setCursor_PARM_2 + 1),#0x00
      001ADC 90 00 00         [24] 6309 	mov	dptr,#0x0000
      001ADF 12r04rB6         [24] 6310 	lcall	_setCursor
                                   6311 ;	.\ecen4350_lcd_v4.c:1345: setColorWhite();
      001AE2 12r15rE4         [24] 6312 	lcall	_setColorWhite
                                   6313 ;	.\ecen4350_lcd_v4.c:1346: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001AE5 90r06r11         [24] 6314 	mov	dptr,#___str_25
      001AE8 75 F0 80         [24] 6315 	mov	b,#0x80
      001AEB 12r0FrD0         [24] 6316 	lcall	_LCD_string_write
      001AEE D0 03            [24] 6317 	pop	ar3
      001AF0 D0 04            [24] 6318 	pop	ar4
      001AF2 D0 05            [24] 6319 	pop	ar5
      001AF4 D0 06            [24] 6320 	pop	ar6
      001AF6 D0 07            [24] 6321 	pop	ar7
                                   6322 ;	.\ecen4350_lcd_v4.c:1349: while (invalidType) {
      001AF8                       6323 00109$:
      001AF8 ED               [12] 6324 	mov	a,r5
      001AF9 70 03            [24] 6325 	jnz	00235$
      001AFB 02r1Cr74         [24] 6326 	ljmp	00153$
      001AFE                       6327 00235$:
                                   6328 ;	.\ecen4350_lcd_v4.c:1350: setCursor(0, 160);
      001AFE 75*00 A0         [24] 6329 	mov	_setCursor_PARM_2,#0xa0
      001B01 75*01 00         [24] 6330 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B04 90 00 00         [24] 6331 	mov	dptr,#0x0000
      001B07 C0 06            [24] 6332 	push	ar6
      001B09 C0 05            [24] 6333 	push	ar5
      001B0B C0 04            [24] 6334 	push	ar4
      001B0D C0 03            [24] 6335 	push	ar3
      001B0F 12r04rB6         [24] 6336 	lcall	_setCursor
                                   6337 ;	.\ecen4350_lcd_v4.c:1351: setColorWhite();
      001B12 12r15rE4         [24] 6338 	lcall	_setColorWhite
                                   6339 ;	.\ecen4350_lcd_v4.c:1352: LCD_string_write("\n\n");
      001B15 90r06r6C         [24] 6340 	mov	dptr,#___str_31
      001B18 75 F0 80         [24] 6341 	mov	b,#0x80
      001B1B 12r0FrD0         [24] 6342 	lcall	_LCD_string_write
                                   6343 ;	.\ecen4350_lcd_v4.c:1354: blockType = inputBlockType();
      001B1E 12r16rA7         [24] 6344 	lcall	_inputBlockType
      001B21 AF 82            [24] 6345 	mov	r7,dpl
      001B23 D0 03            [24] 6346 	pop	ar3
      001B25 D0 04            [24] 6347 	pop	ar4
      001B27 D0 05            [24] 6348 	pop	ar5
      001B29 D0 06            [24] 6349 	pop	ar6
                                   6350 ;	.\ecen4350_lcd_v4.c:1356: if (blockType == 0x1) {
      001B2B BF 01 5B         [24] 6351 	cjne	r7,#0x01,00102$
                                   6352 ;	.\ecen4350_lcd_v4.c:1357: invalidType = 0;
      001B2E 7D 00            [12] 6353 	mov	r5,#0x00
                                   6354 ;	.\ecen4350_lcd_v4.c:1359: setColorDefault();
      001B30 C0 07            [24] 6355 	push	ar7
      001B32 C0 06            [24] 6356 	push	ar6
      001B34 C0 05            [24] 6357 	push	ar5
      001B36 C0 04            [24] 6358 	push	ar4
      001B38 C0 03            [24] 6359 	push	ar3
      001B3A 12r15r94         [24] 6360 	lcall	_setColorDefault
                                   6361 ;	.\ecen4350_lcd_v4.c:1360: setCursor(0, 140);
      001B3D 75*00 8C         [24] 6362 	mov	_setCursor_PARM_2,#0x8c
      001B40 75*01 00         [24] 6363 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B43 90 00 00         [24] 6364 	mov	dptr,#0x0000
      001B46 12r04rB6         [24] 6365 	lcall	_setCursor
                                   6366 ;	.\ecen4350_lcd_v4.c:1361: LCD_string_write(" Choose Block Type:");
      001B49 90r06r58         [24] 6367 	mov	dptr,#___str_30
      001B4C 75 F0 80         [24] 6368 	mov	b,#0x80
      001B4F 12r0FrD0         [24] 6369 	lcall	_LCD_string_write
                                   6370 ;	.\ecen4350_lcd_v4.c:1362: setCursor(0, 160);
      001B52 75*00 A0         [24] 6371 	mov	_setCursor_PARM_2,#0xa0
      001B55 75*01 00         [24] 6372 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B58 90 00 00         [24] 6373 	mov	dptr,#0x0000
      001B5B 12r04rB6         [24] 6374 	lcall	_setCursor
                                   6375 ;	.\ecen4350_lcd_v4.c:1363: LCD_string_write("  ");
      001B5E 90r06r6F         [24] 6376 	mov	dptr,#___str_32
      001B61 75 F0 80         [24] 6377 	mov	b,#0x80
      001B64 12r0FrD0         [24] 6378 	lcall	_LCD_string_write
                                   6379 ;	.\ecen4350_lcd_v4.c:1364: setColorHighlight2();
      001B67 12r15rB6         [24] 6380 	lcall	_setColorHighlight2
                                   6381 ;	.\ecen4350_lcd_v4.c:1365: LCD_string_write("<1> BYTE\n");
      001B6A 90r06r72         [24] 6382 	mov	dptr,#___str_33
      001B6D 75 F0 80         [24] 6383 	mov	b,#0x80
      001B70 12r0FrD0         [24] 6384 	lcall	_LCD_string_write
                                   6385 ;	.\ecen4350_lcd_v4.c:1366: setColorGray();
      001B73 12r15rC2         [24] 6386 	lcall	_setColorGray
                                   6387 ;	.\ecen4350_lcd_v4.c:1367: LCD_string_write("\n\n                \n                ");
      001B76 90r06r7C         [24] 6388 	mov	dptr,#___str_34
      001B79 75 F0 80         [24] 6389 	mov	b,#0x80
      001B7C 12r0FrD0         [24] 6390 	lcall	_LCD_string_write
      001B7F D0 03            [24] 6391 	pop	ar3
      001B81 D0 04            [24] 6392 	pop	ar4
      001B83 D0 05            [24] 6393 	pop	ar5
      001B85 D0 06            [24] 6394 	pop	ar6
      001B87 D0 07            [24] 6395 	pop	ar7
      001B89                       6396 00102$:
                                   6397 ;	.\ecen4350_lcd_v4.c:1368: } if (blockType == 0x2) {
      001B89 BF 02 5E         [24] 6398 	cjne	r7,#0x02,00104$
                                   6399 ;	.\ecen4350_lcd_v4.c:1369: invalidType = 0;
      001B8C 7D 00            [12] 6400 	mov	r5,#0x00
                                   6401 ;	.\ecen4350_lcd_v4.c:1371: setColorDefault();
      001B8E C0 07            [24] 6402 	push	ar7
      001B90 C0 06            [24] 6403 	push	ar6
      001B92 C0 05            [24] 6404 	push	ar5
      001B94 C0 04            [24] 6405 	push	ar4
      001B96 C0 03            [24] 6406 	push	ar3
      001B98 12r15r94         [24] 6407 	lcall	_setColorDefault
                                   6408 ;	.\ecen4350_lcd_v4.c:1372: setCursor(0, 140);
      001B9B 75*00 8C         [24] 6409 	mov	_setCursor_PARM_2,#0x8c
      001B9E 75*01 00         [24] 6410 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BA1 90 00 00         [24] 6411 	mov	dptr,#0x0000
      001BA4 12r04rB6         [24] 6412 	lcall	_setCursor
                                   6413 ;	.\ecen4350_lcd_v4.c:1373: LCD_string_write(" Choose Block Type:");
      001BA7 90r06r58         [24] 6414 	mov	dptr,#___str_30
      001BAA 75 F0 80         [24] 6415 	mov	b,#0x80
      001BAD 12r0FrD0         [24] 6416 	lcall	_LCD_string_write
                                   6417 ;	.\ecen4350_lcd_v4.c:1374: setCursor(0, 160);
      001BB0 75*00 A0         [24] 6418 	mov	_setCursor_PARM_2,#0xa0
      001BB3 75*01 00         [24] 6419 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BB6 90 00 00         [24] 6420 	mov	dptr,#0x0000
      001BB9 12r04rB6         [24] 6421 	lcall	_setCursor
                                   6422 ;	.\ecen4350_lcd_v4.c:1375: setColorGray();
      001BBC 12r15rC2         [24] 6423 	lcall	_setColorGray
                                   6424 ;	.\ecen4350_lcd_v4.c:1376: LCD_string_write("\n  ");
      001BBF 90r06rA0         [24] 6425 	mov	dptr,#___str_35
      001BC2 75 F0 80         [24] 6426 	mov	b,#0x80
      001BC5 12r0FrD0         [24] 6427 	lcall	_LCD_string_write
                                   6428 ;	.\ecen4350_lcd_v4.c:1377: setColorHighlight2();
      001BC8 12r15rB6         [24] 6429 	lcall	_setColorHighlight2
                                   6430 ;	.\ecen4350_lcd_v4.c:1378: LCD_string_write("<2> WORD\n");
      001BCB 90r06rA4         [24] 6431 	mov	dptr,#___str_36
      001BCE 75 F0 80         [24] 6432 	mov	b,#0x80
      001BD1 12r0FrD0         [24] 6433 	lcall	_LCD_string_write
                                   6434 ;	.\ecen4350_lcd_v4.c:1379: setColorGray();
      001BD4 12r15rC2         [24] 6435 	lcall	_setColorGray
                                   6436 ;	.\ecen4350_lcd_v4.c:1380: LCD_string_write("\n                \n                ");
      001BD7 90r06rAE         [24] 6437 	mov	dptr,#___str_37
      001BDA 75 F0 80         [24] 6438 	mov	b,#0x80
      001BDD 12r0FrD0         [24] 6439 	lcall	_LCD_string_write
      001BE0 D0 03            [24] 6440 	pop	ar3
      001BE2 D0 04            [24] 6441 	pop	ar4
      001BE4 D0 05            [24] 6442 	pop	ar5
      001BE6 D0 06            [24] 6443 	pop	ar6
      001BE8 D0 07            [24] 6444 	pop	ar7
      001BEA                       6445 00104$:
                                   6446 ;	.\ecen4350_lcd_v4.c:1381: } if (blockType == 0x4) {
      001BEA BF 04 5E         [24] 6447 	cjne	r7,#0x04,00106$
                                   6448 ;	.\ecen4350_lcd_v4.c:1382: invalidType = 0;
      001BED 7D 00            [12] 6449 	mov	r5,#0x00
                                   6450 ;	.\ecen4350_lcd_v4.c:1384: setColorDefault();
      001BEF C0 07            [24] 6451 	push	ar7
      001BF1 C0 06            [24] 6452 	push	ar6
      001BF3 C0 05            [24] 6453 	push	ar5
      001BF5 C0 04            [24] 6454 	push	ar4
      001BF7 C0 03            [24] 6455 	push	ar3
      001BF9 12r15r94         [24] 6456 	lcall	_setColorDefault
                                   6457 ;	.\ecen4350_lcd_v4.c:1385: setCursor(0, 140);
      001BFC 75*00 8C         [24] 6458 	mov	_setCursor_PARM_2,#0x8c
      001BFF 75*01 00         [24] 6459 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C02 90 00 00         [24] 6460 	mov	dptr,#0x0000
      001C05 12r04rB6         [24] 6461 	lcall	_setCursor
                                   6462 ;	.\ecen4350_lcd_v4.c:1386: LCD_string_write(" Choose Block Type:");
      001C08 90r06r58         [24] 6463 	mov	dptr,#___str_30
      001C0B 75 F0 80         [24] 6464 	mov	b,#0x80
      001C0E 12r0FrD0         [24] 6465 	lcall	_LCD_string_write
                                   6466 ;	.\ecen4350_lcd_v4.c:1387: setCursor(0, 160);
      001C11 75*00 A0         [24] 6467 	mov	_setCursor_PARM_2,#0xa0
      001C14 75*01 00         [24] 6468 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C17 90 00 00         [24] 6469 	mov	dptr,#0x0000
      001C1A 12r04rB6         [24] 6470 	lcall	_setCursor
                                   6471 ;	.\ecen4350_lcd_v4.c:1388: setColorGray();
      001C1D 12r15rC2         [24] 6472 	lcall	_setColorGray
                                   6473 ;	.\ecen4350_lcd_v4.c:1389: LCD_string_write("\n\n  ");
      001C20 90r06rD1         [24] 6474 	mov	dptr,#___str_38
      001C23 75 F0 80         [24] 6475 	mov	b,#0x80
      001C26 12r0FrD0         [24] 6476 	lcall	_LCD_string_write
                                   6477 ;	.\ecen4350_lcd_v4.c:1390: setColorHighlight2();
      001C29 12r15rB6         [24] 6478 	lcall	_setColorHighlight2
                                   6479 ;	.\ecen4350_lcd_v4.c:1391: LCD_string_write("<4> DWORD");
      001C2C 90r06rD6         [24] 6480 	mov	dptr,#___str_39
      001C2F 75 F0 80         [24] 6481 	mov	b,#0x80
      001C32 12r0FrD0         [24] 6482 	lcall	_LCD_string_write
                                   6483 ;	.\ecen4350_lcd_v4.c:1392: setColorGray();
      001C35 12r15rC2         [24] 6484 	lcall	_setColorGray
                                   6485 ;	.\ecen4350_lcd_v4.c:1393: LCD_string_write("\n                \n                ");
      001C38 90r06rAE         [24] 6486 	mov	dptr,#___str_37
      001C3B 75 F0 80         [24] 6487 	mov	b,#0x80
      001C3E 12r0FrD0         [24] 6488 	lcall	_LCD_string_write
      001C41 D0 03            [24] 6489 	pop	ar3
      001C43 D0 04            [24] 6490 	pop	ar4
      001C45 D0 05            [24] 6491 	pop	ar5
      001C47 D0 06            [24] 6492 	pop	ar6
      001C49 D0 07            [24] 6493 	pop	ar7
      001C4B                       6494 00106$:
                                   6495 ;	.\ecen4350_lcd_v4.c:1395: if (invalidType) {
      001C4B ED               [12] 6496 	mov	a,r5
      001C4C 70 03            [24] 6497 	jnz	00242$
      001C4E 02r1ArF8         [24] 6498 	ljmp	00109$
      001C51                       6499 00242$:
                                   6500 ;	.\ecen4350_lcd_v4.c:1396: setColorRed();
      001C51 C0 07            [24] 6501 	push	ar7
      001C53 C0 06            [24] 6502 	push	ar6
      001C55 C0 05            [24] 6503 	push	ar5
      001C57 C0 04            [24] 6504 	push	ar4
      001C59 C0 03            [24] 6505 	push	ar3
      001C5B 12r15rD9         [24] 6506 	lcall	_setColorRed
                                   6507 ;	.\ecen4350_lcd_v4.c:1397: LCD_string_write("\n  Input Error\n  Try Again");
      001C5E 90r06rE0         [24] 6508 	mov	dptr,#___str_40
      001C61 75 F0 80         [24] 6509 	mov	b,#0x80
      001C64 12r0FrD0         [24] 6510 	lcall	_LCD_string_write
      001C67 D0 03            [24] 6511 	pop	ar3
      001C69 D0 04            [24] 6512 	pop	ar4
      001C6B D0 05            [24] 6513 	pop	ar5
      001C6D D0 06            [24] 6514 	pop	ar6
      001C6F D0 07            [24] 6515 	pop	ar7
      001C71 02r1ArF8         [24] 6516 	ljmp	00109$
                                   6517 ;	.\ecen4350_lcd_v4.c:1403: while (invalidSize)
      001C74                       6518 00153$:
      001C74                       6519 00115$:
      001C74 EB               [12] 6520 	mov	a,r3
      001C75 70 03            [24] 6521 	jnz	00243$
      001C77 02r1Dr6F         [24] 6522 	ljmp	00117$
      001C7A                       6523 00243$:
                                   6524 ;	.\ecen4350_lcd_v4.c:1406: setCursor(0, 240);
      001C7A 75*00 F0         [24] 6525 	mov	_setCursor_PARM_2,#0xf0
      001C7D 75*01 00         [24] 6526 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C80 90 00 00         [24] 6527 	mov	dptr,#0x0000
      001C83 C0 07            [24] 6528 	push	ar7
      001C85 C0 06            [24] 6529 	push	ar6
      001C87 C0 04            [24] 6530 	push	ar4
      001C89 C0 03            [24] 6531 	push	ar3
      001C8B 12r04rB6         [24] 6532 	lcall	_setCursor
                                   6533 ;	.\ecen4350_lcd_v4.c:1407: setColorSelect();
      001C8E 12r15r9F         [24] 6534 	lcall	_setColorSelect
                                   6535 ;	.\ecen4350_lcd_v4.c:1408: LCD_string_write(" Input Size: ");
      001C91 90r06rFB         [24] 6536 	mov	dptr,#___str_41
      001C94 75 F0 80         [24] 6537 	mov	b,#0x80
      001C97 12r0FrD0         [24] 6538 	lcall	_LCD_string_write
                                   6539 ;	.\ecen4350_lcd_v4.c:1409: setColorHighlight1();
      001C9A 12r15rAA         [24] 6540 	lcall	_setColorHighlight1
                                   6541 ;	.\ecen4350_lcd_v4.c:1410: selection = keyDetect();
      001C9D 12r10rEE         [24] 6542 	lcall	_keyDetect
      001CA0 AD 82            [24] 6543 	mov	r5,dpl
      001CA2 78r00            [12] 6544 	mov	r0,#_selection
      001CA4 A6 05            [24] 6545 	mov	@r0,ar5
                                   6546 ;	.\ecen4350_lcd_v4.c:1411: write(selection);
      001CA6 8D 82            [24] 6547 	mov	dpl,r5
      001CA8 12r0Fr6A         [24] 6548 	lcall	_write
                                   6549 ;	.\ecen4350_lcd_v4.c:1412: blockSize = ASCIItoHex(selection);
      001CAB 78r00            [12] 6550 	mov	r0,#_selection
      001CAD 86 82            [24] 6551 	mov	dpl,@r0
      001CAF 12r13r5C         [24] 6552 	lcall	_ASCIItoHex
      001CB2 AD 82            [24] 6553 	mov	r5,dpl
      001CB4 D0 03            [24] 6554 	pop	ar3
      001CB6 D0 04            [24] 6555 	pop	ar4
                                   6556 ;	.\ecen4350_lcd_v4.c:1413: setColorDefault();
      001CB8 C0 05            [24] 6557 	push	ar5
      001CBA C0 04            [24] 6558 	push	ar4
      001CBC C0 03            [24] 6559 	push	ar3
      001CBE 12r15r94         [24] 6560 	lcall	_setColorDefault
      001CC1 D0 03            [24] 6561 	pop	ar3
      001CC3 D0 04            [24] 6562 	pop	ar4
      001CC5 D0 05            [24] 6563 	pop	ar5
      001CC7 D0 06            [24] 6564 	pop	ar6
      001CC9 D0 07            [24] 6565 	pop	ar7
                                   6566 ;	.\ecen4350_lcd_v4.c:1415: if (blockSize != blockType) {
      001CCB ED               [12] 6567 	mov	a,r5
      001CCC B5 07 02         [24] 6568 	cjne	a,ar7,00244$
      001CCF 80 4F            [24] 6569 	sjmp	00113$
      001CD1                       6570 00244$:
                                   6571 ;	.\ecen4350_lcd_v4.c:1416: setColorSelect();
      001CD1 C0 07            [24] 6572 	push	ar7
      001CD3 C0 06            [24] 6573 	push	ar6
      001CD5 C0 04            [24] 6574 	push	ar4
      001CD7 C0 03            [24] 6575 	push	ar3
      001CD9 12r15r9F         [24] 6576 	lcall	_setColorSelect
                                   6577 ;	.\ecen4350_lcd_v4.c:1417: LCD_string_write(" Input Size:");
      001CDC 90r06r33         [24] 6578 	mov	dptr,#___str_26
      001CDF 75 F0 80         [24] 6579 	mov	b,#0x80
      001CE2 12r0FrD0         [24] 6580 	lcall	_LCD_string_write
                                   6581 ;	.\ecen4350_lcd_v4.c:1418: setColorGray();
      001CE5 12r15rC2         [24] 6582 	lcall	_setColorGray
                                   6583 ;	.\ecen4350_lcd_v4.c:1419: LCD_string_write(" _");
      001CE8 90r06r40         [24] 6584 	mov	dptr,#___str_27
      001CEB 75 F0 80         [24] 6585 	mov	b,#0x80
      001CEE 12r0FrD0         [24] 6586 	lcall	_LCD_string_write
                                   6587 ;	.\ecen4350_lcd_v4.c:1420: setCursor(0,260);
      001CF1 75*00 04         [24] 6588 	mov	_setCursor_PARM_2,#0x04
      001CF4 75*01 01         [24] 6589 	mov	(_setCursor_PARM_2 + 1),#0x01
      001CF7 90 00 00         [24] 6590 	mov	dptr,#0x0000
      001CFA 12r04rB6         [24] 6591 	lcall	_setCursor
                                   6592 ;	.\ecen4350_lcd_v4.c:1421: setColorRed();
      001CFD 12r15rD9         [24] 6593 	lcall	_setColorRed
                                   6594 ;	.\ecen4350_lcd_v4.c:1422: LCD_string_write(" Mismatch Error\n Try Again");
      001D00 90r07r09         [24] 6595 	mov	dptr,#___str_42
      001D03 75 F0 80         [24] 6596 	mov	b,#0x80
      001D06 12r0FrD0         [24] 6597 	lcall	_LCD_string_write
                                   6598 ;	.\ecen4350_lcd_v4.c:1423: setCursor(0, 240);
      001D09 75*00 F0         [24] 6599 	mov	_setCursor_PARM_2,#0xf0
      001D0C 75*01 00         [24] 6600 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D0F 90 00 00         [24] 6601 	mov	dptr,#0x0000
      001D12 12r04rB6         [24] 6602 	lcall	_setCursor
      001D15 D0 03            [24] 6603 	pop	ar3
      001D17 D0 04            [24] 6604 	pop	ar4
      001D19 D0 06            [24] 6605 	pop	ar6
      001D1B D0 07            [24] 6606 	pop	ar7
      001D1D 02r1Cr74         [24] 6607 	ljmp	00115$
      001D20                       6608 00113$:
                                   6609 ;	.\ecen4350_lcd_v4.c:1425: setCursor(0, 240);
      001D20 75*00 F0         [24] 6610 	mov	_setCursor_PARM_2,#0xf0
      001D23 75*01 00         [24] 6611 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D26 90 00 00         [24] 6612 	mov	dptr,#0x0000
      001D29 C0 07            [24] 6613 	push	ar7
      001D2B C0 06            [24] 6614 	push	ar6
      001D2D C0 04            [24] 6615 	push	ar4
      001D2F 12r04rB6         [24] 6616 	lcall	_setCursor
                                   6617 ;	.\ecen4350_lcd_v4.c:1426: setColorDefault();
      001D32 12r15r94         [24] 6618 	lcall	_setColorDefault
                                   6619 ;	.\ecen4350_lcd_v4.c:1427: LCD_string_write(" Input Size: ");
      001D35 90r06rFB         [24] 6620 	mov	dptr,#___str_41
      001D38 75 F0 80         [24] 6621 	mov	b,#0x80
      001D3B 12r0FrD0         [24] 6622 	lcall	_LCD_string_write
                                   6623 ;	.\ecen4350_lcd_v4.c:1428: setColorHighlight2();
      001D3E 12r15rB6         [24] 6624 	lcall	_setColorHighlight2
                                   6625 ;	.\ecen4350_lcd_v4.c:1429: write(selection);
      001D41 78r00            [12] 6626 	mov	r0,#_selection
      001D43 86 82            [24] 6627 	mov	dpl,@r0
      001D45 12r0Fr6A         [24] 6628 	lcall	_write
                                   6629 ;	.\ecen4350_lcd_v4.c:1430: invalidSize = 0;
      001D48 7B 00            [12] 6630 	mov	r3,#0x00
                                   6631 ;	.\ecen4350_lcd_v4.c:1431: setCursor(0,260);
      001D4A 75*00 04         [24] 6632 	mov	_setCursor_PARM_2,#0x04
      001D4D 75*01 01         [24] 6633 	mov	(_setCursor_PARM_2 + 1),#0x01
      001D50 90 00 00         [24] 6634 	mov	dptr,#0x0000
      001D53 C0 03            [24] 6635 	push	ar3
      001D55 12r04rB6         [24] 6636 	lcall	_setCursor
                                   6637 ;	.\ecen4350_lcd_v4.c:1432: setColorGreen();
      001D58 12r15rEF         [24] 6638 	lcall	_setColorGreen
                                   6639 ;	.\ecen4350_lcd_v4.c:1433: LCD_string_write(" Match Confirmed\n                ");
      001D5B 90r07r24         [24] 6640 	mov	dptr,#___str_43
      001D5E 75 F0 80         [24] 6641 	mov	b,#0x80
      001D61 12r0FrD0         [24] 6642 	lcall	_LCD_string_write
      001D64 D0 03            [24] 6643 	pop	ar3
      001D66 D0 04            [24] 6644 	pop	ar4
      001D68 D0 06            [24] 6645 	pop	ar6
      001D6A D0 07            [24] 6646 	pop	ar7
      001D6C 02r1Cr74         [24] 6647 	ljmp	00115$
      001D6F                       6648 00117$:
                                   6649 ;	.\ecen4350_lcd_v4.c:1437: delay(40);
      001D6F 90 00 28         [24] 6650 	mov	dptr,#0x0028
      001D72 C0 07            [24] 6651 	push	ar7
      001D74 C0 06            [24] 6652 	push	ar6
      001D76 C0 04            [24] 6653 	push	ar4
      001D78 12r00rE0         [24] 6654 	lcall	_delay
                                   6655 ;	.\ecen4350_lcd_v4.c:1438: clearLCD();
      001D7B 12r0Dr53         [24] 6656 	lcall	_clearLCD
                                   6657 ;	.\ecen4350_lcd_v4.c:1439: fillTop(GRAY);
      001D7E 90 D6 BA         [24] 6658 	mov	dptr,#0xd6ba
      001D81 12r0Br86         [24] 6659 	lcall	_fillTop
                                   6660 ;	.\ecen4350_lcd_v4.c:1446: setTextSize(5);
      001D84 75 82 05         [24] 6661 	mov	dpl,#0x05
      001D87 12r04rD0         [24] 6662 	lcall	_setTextSize
                                   6663 ;	.\ecen4350_lcd_v4.c:1447: setColorMenu();
      001D8A 12r15rCD         [24] 6664 	lcall	_setColorMenu
                                   6665 ;	.\ecen4350_lcd_v4.c:1448: setCursor(30, 0);
      001D8D E4               [12] 6666 	clr	a
      001D8E F5*00            [12] 6667 	mov	_setCursor_PARM_2,a
      001D90 F5*01            [12] 6668 	mov	(_setCursor_PARM_2 + 1),a
      001D92 90 00 1E         [24] 6669 	mov	dptr,#0x001e
      001D95 12r04rB6         [24] 6670 	lcall	_setCursor
                                   6671 ;	.\ecen4350_lcd_v4.c:1449: LCD_string_write("[DUMP]\n");
      001D98 90r05rD8         [24] 6672 	mov	dptr,#___str_21
      001D9B 75 F0 80         [24] 6673 	mov	b,#0x80
      001D9E 12r0FrD0         [24] 6674 	lcall	_LCD_string_write
                                   6675 ;	.\ecen4350_lcd_v4.c:1450: setColorDefault();
      001DA1 12r15r94         [24] 6676 	lcall	_setColorDefault
      001DA4 D0 04            [24] 6677 	pop	ar4
      001DA6 D0 06            [24] 6678 	pop	ar6
      001DA8 D0 07            [24] 6679 	pop	ar7
                                   6680 ;	.\ecen4350_lcd_v4.c:1452: while (exit) {
      001DAA BF 01 03         [24] 6681 	cjne	r7,#0x01,00245$
      001DAD EF               [12] 6682 	mov	a,r7
      001DAE 80 01            [24] 6683 	sjmp	00246$
      001DB0                       6684 00245$:
      001DB0 E4               [12] 6685 	clr	a
      001DB1                       6686 00246$:
      001DB1 FD               [12] 6687 	mov	r5,a
      001DB2 E4               [12] 6688 	clr	a
      001DB3 BF 02 01         [24] 6689 	cjne	r7,#0x02,00247$
      001DB6 04               [12] 6690 	inc	a
      001DB7                       6691 00247$:
      001DB7 F5*52            [12] 6692 	mov	_dump_sloc0_1_0,a
      001DB9 E4               [12] 6693 	clr	a
      001DBA BF 04 01         [24] 6694 	cjne	r7,#0x04,00249$
      001DBD 04               [12] 6695 	inc	a
      001DBE                       6696 00249$:
      001DBE FF               [12] 6697 	mov	r7,a
      001DBF                       6698 00126$:
      001DBF 78r07            [12] 6699 	mov	r0,#_dump_exit_65536_547
      001DC1 E6               [12] 6700 	mov	a,@r0
      001DC2 70 01            [24] 6701 	jnz	00251$
      001DC4 22               [24] 6702 	ret
      001DC5                       6703 00251$:
                                   6704 ;	.\ecen4350_lcd_v4.c:1453: setTextSize(2);
      001DC5 75 82 02         [24] 6705 	mov	dpl,#0x02
      001DC8 C0 07            [24] 6706 	push	ar7
      001DCA C0 06            [24] 6707 	push	ar6
      001DCC C0 05            [24] 6708 	push	ar5
      001DCE C0 04            [24] 6709 	push	ar4
      001DD0 12r04rD0         [24] 6710 	lcall	_setTextSize
                                   6711 ;	.\ecen4350_lcd_v4.c:1454: setColorWhite();
      001DD3 12r15rE4         [24] 6712 	lcall	_setColorWhite
                                   6713 ;	.\ecen4350_lcd_v4.c:1455: setCursor(0, 60);
      001DD6 75*00 3C         [24] 6714 	mov	_setCursor_PARM_2,#0x3c
      001DD9 75*01 00         [24] 6715 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DDC 90 00 00         [24] 6716 	mov	dptr,#0x0000
      001DDF 12r04rB6         [24] 6717 	lcall	_setCursor
                                   6718 ;	.\ecen4350_lcd_v4.c:1456: LCD_string_write(" Address:");
      001DE2 90r07r46         [24] 6719 	mov	dptr,#___str_44
      001DE5 75 F0 80         [24] 6720 	mov	b,#0x80
      001DE8 12r0FrD0         [24] 6721 	lcall	_LCD_string_write
                                   6722 ;	.\ecen4350_lcd_v4.c:1457: setColorDefault();
      001DEB 12r15r94         [24] 6723 	lcall	_setColorDefault
                                   6724 ;	.\ecen4350_lcd_v4.c:1458: setCursor(0, 80);
      001DEE 75*00 50         [24] 6725 	mov	_setCursor_PARM_2,#0x50
      001DF1 75*01 00         [24] 6726 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DF4 90 00 00         [24] 6727 	mov	dptr,#0x0000
      001DF7 12r04rB6         [24] 6728 	lcall	_setCursor
                                   6729 ;	.\ecen4350_lcd_v4.c:1459: LCD_string_write(" 0x");
      001DFA 90r07r50         [24] 6730 	mov	dptr,#___str_45
      001DFD 75 F0 80         [24] 6731 	mov	b,#0x80
      001E00 12r0FrD0         [24] 6732 	lcall	_LCD_string_write
                                   6733 ;	.\ecen4350_lcd_v4.c:1460: print16Hex(address);
      001E03 78r05            [12] 6734 	mov	r0,#_dump_address_65536_547
      001E05 86 82            [24] 6735 	mov	dpl,@r0
      001E07 08               [12] 6736 	inc	r0
      001E08 86 83            [24] 6737 	mov	dph,@r0
      001E0A 12r14rB8         [24] 6738 	lcall	_print16Hex
      001E0D D0 04            [24] 6739 	pop	ar4
      001E0F D0 05            [24] 6740 	pop	ar5
      001E11 D0 06            [24] 6741 	pop	ar6
      001E13 D0 07            [24] 6742 	pop	ar7
                                   6743 ;	.\ecen4350_lcd_v4.c:1461: if (blockType == 0x1)
      001E15 ED               [12] 6744 	mov	a,r5
      001E16 70 03            [24] 6745 	jnz	00252$
      001E18 02r1ErDD         [24] 6746 	ljmp	00119$
      001E1B                       6747 00252$:
                                   6748 ;	.\ecen4350_lcd_v4.c:1463: setCursor(0, 120);
      001E1B 75*00 78         [24] 6749 	mov	_setCursor_PARM_2,#0x78
      001E1E 75*01 00         [24] 6750 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E21 90 00 00         [24] 6751 	mov	dptr,#0x0000
      001E24 C0 07            [24] 6752 	push	ar7
      001E26 C0 06            [24] 6753 	push	ar6
      001E28 C0 05            [24] 6754 	push	ar5
      001E2A C0 04            [24] 6755 	push	ar4
      001E2C 12r04rB6         [24] 6756 	lcall	_setCursor
                                   6757 ;	.\ecen4350_lcd_v4.c:1464: setColorWhite();
      001E2F 12r15rE4         [24] 6758 	lcall	_setColorWhite
                                   6759 ;	.\ecen4350_lcd_v4.c:1465: LCD_string_write(" Hex Data:");
      001E32 90r07r54         [24] 6760 	mov	dptr,#___str_46
      001E35 75 F0 80         [24] 6761 	mov	b,#0x80
      001E38 12r0FrD0         [24] 6762 	lcall	_LCD_string_write
                                   6763 ;	.\ecen4350_lcd_v4.c:1466: setColorDefault();
      001E3B 12r15r94         [24] 6764 	lcall	_setColorDefault
                                   6765 ;	.\ecen4350_lcd_v4.c:1467: setCursor(10, 140);
      001E3E 75*00 8C         [24] 6766 	mov	_setCursor_PARM_2,#0x8c
      001E41 75*01 00         [24] 6767 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E44 90 00 0A         [24] 6768 	mov	dptr,#0x000a
      001E47 12r04rB6         [24] 6769 	lcall	_setCursor
      001E4A D0 04            [24] 6770 	pop	ar4
      001E4C D0 05            [24] 6771 	pop	ar5
      001E4E D0 06            [24] 6772 	pop	ar6
                                   6773 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6774 ;	assignBit
      001E50 C2 B5            [12] 6775 	clr	_P3_5
                                   6776 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001E52 8C 82            [24] 6777 	mov	dpl,r4
      001E54 8E 83            [24] 6778 	mov	dph,r6
      001E56 E0               [24] 6779 	movx	a,@dptr
      001E57 F5 82            [12] 6780 	mov	dpl,a
                                   6781 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6782 ;	assignBit
      001E59 D2 B5            [12] 6783 	setb	_P3_5
                                   6784 ;	.\ecen4350_lcd_v4.c:1468: print8Hex(ramRead8(d));
      001E5B C0 06            [24] 6785 	push	ar6
      001E5D C0 05            [24] 6786 	push	ar5
      001E5F C0 04            [24] 6787 	push	ar4
      001E61 12r14rA1         [24] 6788 	lcall	_print8Hex
                                   6789 ;	.\ecen4350_lcd_v4.c:1470: setCursor(0, 180);
      001E64 75*00 B4         [24] 6790 	mov	_setCursor_PARM_2,#0xb4
      001E67 75*01 00         [24] 6791 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E6A 90 00 00         [24] 6792 	mov	dptr,#0x0000
      001E6D 12r04rB6         [24] 6793 	lcall	_setCursor
                                   6794 ;	.\ecen4350_lcd_v4.c:1471: setColorWhite();
      001E70 12r15rE4         [24] 6795 	lcall	_setColorWhite
                                   6796 ;	.\ecen4350_lcd_v4.c:1472: LCD_string_write(" ASCII Data:");
      001E73 90r07r5F         [24] 6797 	mov	dptr,#___str_47
      001E76 75 F0 80         [24] 6798 	mov	b,#0x80
      001E79 12r0FrD0         [24] 6799 	lcall	_LCD_string_write
                                   6800 ;	.\ecen4350_lcd_v4.c:1473: setColorDefault();
      001E7C 12r15r94         [24] 6801 	lcall	_setColorDefault
                                   6802 ;	.\ecen4350_lcd_v4.c:1474: setCursor(10, 200);
      001E7F 75*00 C8         [24] 6803 	mov	_setCursor_PARM_2,#0xc8
      001E82 75*01 00         [24] 6804 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E85 90 00 0A         [24] 6805 	mov	dptr,#0x000a
      001E88 12r04rB6         [24] 6806 	lcall	_setCursor
      001E8B D0 04            [24] 6807 	pop	ar4
      001E8D D0 05            [24] 6808 	pop	ar5
      001E8F D0 06            [24] 6809 	pop	ar6
                                   6810 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6811 ;	assignBit
      001E91 C2 B5            [12] 6812 	clr	_P3_5
                                   6813 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001E93 8C 82            [24] 6814 	mov	dpl,r4
      001E95 8E 83            [24] 6815 	mov	dph,r6
      001E97 E0               [24] 6816 	movx	a,@dptr
      001E98 F5 82            [12] 6817 	mov	dpl,a
                                   6818 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6819 ;	assignBit
      001E9A D2 B5            [12] 6820 	setb	_P3_5
                                   6821 ;	.\ecen4350_lcd_v4.c:1475: print8ASCII(ramRead8(d));
      001E9C C0 06            [24] 6822 	push	ar6
      001E9E C0 05            [24] 6823 	push	ar5
      001EA0 C0 04            [24] 6824 	push	ar4
      001EA2 12r15r23         [24] 6825 	lcall	_print8ASCII
                                   6826 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 240);
      001EA5 75*00 F0         [24] 6827 	mov	_setCursor_PARM_2,#0xf0
      001EA8 75*01 00         [24] 6828 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EAB 90 00 00         [24] 6829 	mov	dptr,#0x0000
      001EAE 12r04rB6         [24] 6830 	lcall	_setCursor
                                   6831 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      001EB1 12r15rE4         [24] 6832 	lcall	_setColorWhite
                                   6833 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" Data Type:");
      001EB4 90r07r6C         [24] 6834 	mov	dptr,#___str_48
      001EB7 75 F0 80         [24] 6835 	mov	b,#0x80
      001EBA 12r0FrD0         [24] 6836 	lcall	_LCD_string_write
                                   6837 ;	.\ecen4350_lcd_v4.c:1480: setCursor(0, 260);
      001EBD 75*00 04         [24] 6838 	mov	_setCursor_PARM_2,#0x04
      001EC0 75*01 01         [24] 6839 	mov	(_setCursor_PARM_2 + 1),#0x01
      001EC3 90 00 00         [24] 6840 	mov	dptr,#0x0000
      001EC6 12r04rB6         [24] 6841 	lcall	_setCursor
                                   6842 ;	.\ecen4350_lcd_v4.c:1481: setColorDefault();
      001EC9 12r15r94         [24] 6843 	lcall	_setColorDefault
                                   6844 ;	.\ecen4350_lcd_v4.c:1482: LCD_string_write(" BYTE");
      001ECC 90r07r78         [24] 6845 	mov	dptr,#___str_49
      001ECF 75 F0 80         [24] 6846 	mov	b,#0x80
      001ED2 12r0FrD0         [24] 6847 	lcall	_LCD_string_write
      001ED5 D0 04            [24] 6848 	pop	ar4
      001ED7 D0 05            [24] 6849 	pop	ar5
      001ED9 D0 06            [24] 6850 	pop	ar6
      001EDB D0 07            [24] 6851 	pop	ar7
      001EDD                       6852 00119$:
                                   6853 ;	.\ecen4350_lcd_v4.c:1484: if (blockType == 0x2)
      001EDD E5*52            [12] 6854 	mov	a,_dump_sloc0_1_0
      001EDF 70 03            [24] 6855 	jnz	00253$
      001EE1 02r20r01         [24] 6856 	ljmp	00121$
      001EE4                       6857 00253$:
                                   6858 ;	.\ecen4350_lcd_v4.c:1486: setCursor(0, 120);
      001EE4 C0 07            [24] 6859 	push	ar7
      001EE6 75*00 78         [24] 6860 	mov	_setCursor_PARM_2,#0x78
      001EE9 75*01 00         [24] 6861 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EEC 90 00 00         [24] 6862 	mov	dptr,#0x0000
      001EEF C0 07            [24] 6863 	push	ar7
      001EF1 C0 06            [24] 6864 	push	ar6
      001EF3 C0 05            [24] 6865 	push	ar5
      001EF5 C0 04            [24] 6866 	push	ar4
      001EF7 12r04rB6         [24] 6867 	lcall	_setCursor
                                   6868 ;	.\ecen4350_lcd_v4.c:1487: setColorWhite();
      001EFA 12r15rE4         [24] 6869 	lcall	_setColorWhite
                                   6870 ;	.\ecen4350_lcd_v4.c:1488: LCD_string_write(" Hex Data:");
      001EFD 90r07r54         [24] 6871 	mov	dptr,#___str_46
      001F00 75 F0 80         [24] 6872 	mov	b,#0x80
      001F03 12r0FrD0         [24] 6873 	lcall	_LCD_string_write
                                   6874 ;	.\ecen4350_lcd_v4.c:1489: setColorDefault();
      001F06 12r15r94         [24] 6875 	lcall	_setColorDefault
                                   6876 ;	.\ecen4350_lcd_v4.c:1490: setCursor(10, 140);
      001F09 75*00 8C         [24] 6877 	mov	_setCursor_PARM_2,#0x8c
      001F0C 75*01 00         [24] 6878 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F0F 90 00 0A         [24] 6879 	mov	dptr,#0x000a
      001F12 12r04rB6         [24] 6880 	lcall	_setCursor
      001F15 D0 04            [24] 6881 	pop	ar4
      001F17 D0 05            [24] 6882 	pop	ar5
      001F19 D0 06            [24] 6883 	pop	ar6
                                   6884 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6885 ;	assignBit
      001F1B C2 B5            [12] 6886 	clr	_P3_5
                                   6887 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001F1D 8C 82            [24] 6888 	mov	dpl,r4
      001F1F 8E 83            [24] 6889 	mov	dph,r6
      001F21 E0               [24] 6890 	movx	a,@dptr
      001F22 F5 82            [12] 6891 	mov	dpl,a
                                   6892 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6893 ;	assignBit
      001F24 D2 B5            [12] 6894 	setb	_P3_5
                                   6895 ;	.\ecen4350_lcd_v4.c:1491: print8Hex(ramRead8(d));
      001F26 C0 06            [24] 6896 	push	ar6
      001F28 C0 05            [24] 6897 	push	ar5
      001F2A C0 04            [24] 6898 	push	ar4
      001F2C 12r14rA1         [24] 6899 	lcall	_print8Hex
      001F2F D0 04            [24] 6900 	pop	ar4
      001F31 D0 05            [24] 6901 	pop	ar5
      001F33 D0 06            [24] 6902 	pop	ar6
      001F35 D0 07            [24] 6903 	pop	ar7
                                   6904 ;	.\ecen4350_lcd_v4.c:1492: d++;
      001F37 74 01            [12] 6905 	mov	a,#0x01
      001F39 2C               [12] 6906 	add	a,r4
      001F3A FB               [12] 6907 	mov	r3,a
      001F3B E4               [12] 6908 	clr	a
      001F3C 3E               [12] 6909 	addc	a,r6
      001F3D FF               [12] 6910 	mov	r7,a
                                   6911 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6912 ;	assignBit
      001F3E C2 B5            [12] 6913 	clr	_P3_5
                                   6914 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001F40 8B 82            [24] 6915 	mov	dpl,r3
      001F42 8F 83            [24] 6916 	mov	dph,r7
      001F44 E0               [24] 6917 	movx	a,@dptr
      001F45 F5 82            [12] 6918 	mov	dpl,a
                                   6919 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6920 ;	assignBit
      001F47 D2 B5            [12] 6921 	setb	_P3_5
                                   6922 ;	.\ecen4350_lcd_v4.c:1493: print8Hex(ramRead8(d));
      001F49 C0 07            [24] 6923 	push	ar7
      001F4B C0 05            [24] 6924 	push	ar5
      001F4D C0 03            [24] 6925 	push	ar3
      001F4F 12r14rA1         [24] 6926 	lcall	_print8Hex
      001F52 D0 03            [24] 6927 	pop	ar3
      001F54 D0 05            [24] 6928 	pop	ar5
      001F56 D0 07            [24] 6929 	pop	ar7
                                   6930 ;	.\ecen4350_lcd_v4.c:1494: d--;
      001F58 1B               [12] 6931 	dec	r3
      001F59 BB FF 01         [24] 6932 	cjne	r3,#0xff,00254$
      001F5C 1F               [12] 6933 	dec	r7
      001F5D                       6934 00254$:
                                   6935 ;	.\ecen4350_lcd_v4.c:1496: setCursor(0, 180);
      001F5D 75*00 B4         [24] 6936 	mov	_setCursor_PARM_2,#0xb4
      001F60 75*01 00         [24] 6937 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F63 90 00 00         [24] 6938 	mov	dptr,#0x0000
      001F66 C0 07            [24] 6939 	push	ar7
      001F68 C0 05            [24] 6940 	push	ar5
      001F6A C0 03            [24] 6941 	push	ar3
      001F6C 12r04rB6         [24] 6942 	lcall	_setCursor
                                   6943 ;	.\ecen4350_lcd_v4.c:1497: setColorWhite();
      001F6F 12r15rE4         [24] 6944 	lcall	_setColorWhite
                                   6945 ;	.\ecen4350_lcd_v4.c:1498: LCD_string_write(" ASCII Data:");
      001F72 90r07r5F         [24] 6946 	mov	dptr,#___str_47
      001F75 75 F0 80         [24] 6947 	mov	b,#0x80
      001F78 12r0FrD0         [24] 6948 	lcall	_LCD_string_write
                                   6949 ;	.\ecen4350_lcd_v4.c:1499: setColorDefault();
      001F7B 12r15r94         [24] 6950 	lcall	_setColorDefault
                                   6951 ;	.\ecen4350_lcd_v4.c:1500: setCursor(10, 200);
      001F7E 75*00 C8         [24] 6952 	mov	_setCursor_PARM_2,#0xc8
      001F81 75*01 00         [24] 6953 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F84 90 00 0A         [24] 6954 	mov	dptr,#0x000a
      001F87 12r04rB6         [24] 6955 	lcall	_setCursor
      001F8A D0 03            [24] 6956 	pop	ar3
      001F8C D0 05            [24] 6957 	pop	ar5
      001F8E D0 07            [24] 6958 	pop	ar7
                                   6959 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6960 ;	assignBit
      001F90 C2 B5            [12] 6961 	clr	_P3_5
                                   6962 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001F92 8B 82            [24] 6963 	mov	dpl,r3
      001F94 8F 83            [24] 6964 	mov	dph,r7
      001F96 E0               [24] 6965 	movx	a,@dptr
      001F97 F5 82            [12] 6966 	mov	dpl,a
                                   6967 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6968 ;	assignBit
      001F99 D2 B5            [12] 6969 	setb	_P3_5
                                   6970 ;	.\ecen4350_lcd_v4.c:1501: print8ASCII(ramRead8(d));
      001F9B C0 07            [24] 6971 	push	ar7
      001F9D C0 05            [24] 6972 	push	ar5
      001F9F C0 03            [24] 6973 	push	ar3
      001FA1 12r15r23         [24] 6974 	lcall	_print8ASCII
      001FA4 D0 03            [24] 6975 	pop	ar3
      001FA6 D0 05            [24] 6976 	pop	ar5
      001FA8 D0 07            [24] 6977 	pop	ar7
                                   6978 ;	.\ecen4350_lcd_v4.c:1502: d++;
      001FAA 74 01            [12] 6979 	mov	a,#0x01
      001FAC 2B               [12] 6980 	add	a,r3
      001FAD FC               [12] 6981 	mov	r4,a
      001FAE E4               [12] 6982 	clr	a
      001FAF 3F               [12] 6983 	addc	a,r7
      001FB0 FE               [12] 6984 	mov	r6,a
                                   6985 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6986 ;	assignBit
      001FB1 C2 B5            [12] 6987 	clr	_P3_5
                                   6988 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001FB3 8C 82            [24] 6989 	mov	dpl,r4
      001FB5 8E 83            [24] 6990 	mov	dph,r6
      001FB7 E0               [24] 6991 	movx	a,@dptr
      001FB8 F5 82            [12] 6992 	mov	dpl,a
                                   6993 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6994 ;	assignBit
      001FBA D2 B5            [12] 6995 	setb	_P3_5
                                   6996 ;	.\ecen4350_lcd_v4.c:1503: print8ASCII(ramRead8(d));
      001FBC C0 07            [24] 6997 	push	ar7
      001FBE C0 06            [24] 6998 	push	ar6
      001FC0 C0 05            [24] 6999 	push	ar5
      001FC2 C0 04            [24] 7000 	push	ar4
      001FC4 12r15r23         [24] 7001 	lcall	_print8ASCII
                                   7002 ;	.\ecen4350_lcd_v4.c:1505: setCursor(0, 240);
      001FC7 75*00 F0         [24] 7003 	mov	_setCursor_PARM_2,#0xf0
      001FCA 75*01 00         [24] 7004 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FCD 90 00 00         [24] 7005 	mov	dptr,#0x0000
      001FD0 12r04rB6         [24] 7006 	lcall	_setCursor
                                   7007 ;	.\ecen4350_lcd_v4.c:1506: setColorWhite();
      001FD3 12r15rE4         [24] 7008 	lcall	_setColorWhite
                                   7009 ;	.\ecen4350_lcd_v4.c:1507: LCD_string_write(" Data Type:");
      001FD6 90r07r6C         [24] 7010 	mov	dptr,#___str_48
      001FD9 75 F0 80         [24] 7011 	mov	b,#0x80
      001FDC 12r0FrD0         [24] 7012 	lcall	_LCD_string_write
                                   7013 ;	.\ecen4350_lcd_v4.c:1508: setColorDefault();
      001FDF 12r15r94         [24] 7014 	lcall	_setColorDefault
                                   7015 ;	.\ecen4350_lcd_v4.c:1509: setCursor(0, 260);
      001FE2 75*00 04         [24] 7016 	mov	_setCursor_PARM_2,#0x04
      001FE5 75*01 01         [24] 7017 	mov	(_setCursor_PARM_2 + 1),#0x01
      001FE8 90 00 00         [24] 7018 	mov	dptr,#0x0000
      001FEB 12r04rB6         [24] 7019 	lcall	_setCursor
                                   7020 ;	.\ecen4350_lcd_v4.c:1510: LCD_string_write(" WORD");
      001FEE 90r07r7E         [24] 7021 	mov	dptr,#___str_50
      001FF1 75 F0 80         [24] 7022 	mov	b,#0x80
      001FF4 12r0FrD0         [24] 7023 	lcall	_LCD_string_write
      001FF7 D0 04            [24] 7024 	pop	ar4
      001FF9 D0 05            [24] 7025 	pop	ar5
      001FFB D0 06            [24] 7026 	pop	ar6
      001FFD D0 07            [24] 7027 	pop	ar7
                                   7028 ;	.\ecen4350_lcd_v4.c:1566: return;
      001FFF D0 07            [24] 7029 	pop	ar7
                                   7030 ;	.\ecen4350_lcd_v4.c:1510: LCD_string_write(" WORD");
      002001                       7031 00121$:
                                   7032 ;	.\ecen4350_lcd_v4.c:1512: if (blockType == 0x4)
      002001 EF               [12] 7033 	mov	a,r7
      002002 70 03            [24] 7034 	jnz	00255$
      002004 02r21rAE         [24] 7035 	ljmp	00123$
      002007                       7036 00255$:
                                   7037 ;	.\ecen4350_lcd_v4.c:1514: setCursor(0, 120);
      002007 75*00 78         [24] 7038 	mov	_setCursor_PARM_2,#0x78
      00200A 75*01 00         [24] 7039 	mov	(_setCursor_PARM_2 + 1),#0x00
      00200D 90 00 00         [24] 7040 	mov	dptr,#0x0000
      002010 C0 07            [24] 7041 	push	ar7
      002012 C0 06            [24] 7042 	push	ar6
      002014 C0 05            [24] 7043 	push	ar5
      002016 C0 04            [24] 7044 	push	ar4
      002018 12r04rB6         [24] 7045 	lcall	_setCursor
                                   7046 ;	.\ecen4350_lcd_v4.c:1515: setColorWhite();
      00201B 12r15rE4         [24] 7047 	lcall	_setColorWhite
                                   7048 ;	.\ecen4350_lcd_v4.c:1516: LCD_string_write(" Hex Data:");
      00201E 90r07r54         [24] 7049 	mov	dptr,#___str_46
      002021 75 F0 80         [24] 7050 	mov	b,#0x80
      002024 12r0FrD0         [24] 7051 	lcall	_LCD_string_write
                                   7052 ;	.\ecen4350_lcd_v4.c:1517: setColorDefault();
      002027 12r15r94         [24] 7053 	lcall	_setColorDefault
                                   7054 ;	.\ecen4350_lcd_v4.c:1518: setCursor(10, 140);
      00202A 75*00 8C         [24] 7055 	mov	_setCursor_PARM_2,#0x8c
      00202D 75*01 00         [24] 7056 	mov	(_setCursor_PARM_2 + 1),#0x00
      002030 90 00 0A         [24] 7057 	mov	dptr,#0x000a
      002033 12r04rB6         [24] 7058 	lcall	_setCursor
      002036 D0 04            [24] 7059 	pop	ar4
      002038 D0 05            [24] 7060 	pop	ar5
      00203A D0 06            [24] 7061 	pop	ar6
                                   7062 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7063 ;	assignBit
      00203C C2 B5            [12] 7064 	clr	_P3_5
                                   7065 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00203E 8C 82            [24] 7066 	mov	dpl,r4
      002040 8E 83            [24] 7067 	mov	dph,r6
      002042 E0               [24] 7068 	movx	a,@dptr
      002043 F5 82            [12] 7069 	mov	dpl,a
                                   7070 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7071 ;	assignBit
      002045 D2 B5            [12] 7072 	setb	_P3_5
                                   7073 ;	.\ecen4350_lcd_v4.c:1519: print8Hex(ramRead8(d));
      002047 C0 06            [24] 7074 	push	ar6
      002049 C0 05            [24] 7075 	push	ar5
      00204B C0 04            [24] 7076 	push	ar4
      00204D 12r14rA1         [24] 7077 	lcall	_print8Hex
      002050 D0 04            [24] 7078 	pop	ar4
      002052 D0 05            [24] 7079 	pop	ar5
      002054 D0 06            [24] 7080 	pop	ar6
                                   7081 ;	.\ecen4350_lcd_v4.c:1520: d++;
      002056 74 01            [12] 7082 	mov	a,#0x01
      002058 2C               [12] 7083 	add	a,r4
      002059 FA               [12] 7084 	mov	r2,a
      00205A E4               [12] 7085 	clr	a
      00205B 3E               [12] 7086 	addc	a,r6
      00205C FB               [12] 7087 	mov	r3,a
                                   7088 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7089 ;	assignBit
      00205D C2 B5            [12] 7090 	clr	_P3_5
                                   7091 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00205F 8A 82            [24] 7092 	mov	dpl,r2
      002061 8B 83            [24] 7093 	mov	dph,r3
      002063 E0               [24] 7094 	movx	a,@dptr
      002064 F5 82            [12] 7095 	mov	dpl,a
                                   7096 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7097 ;	assignBit
      002066 D2 B5            [12] 7098 	setb	_P3_5
                                   7099 ;	.\ecen4350_lcd_v4.c:1521: print8Hex(ramRead8(d));
      002068 C0 05            [24] 7100 	push	ar5
      00206A C0 03            [24] 7101 	push	ar3
      00206C C0 02            [24] 7102 	push	ar2
      00206E 12r14rA1         [24] 7103 	lcall	_print8Hex
      002071 D0 02            [24] 7104 	pop	ar2
      002073 D0 03            [24] 7105 	pop	ar3
      002075 D0 05            [24] 7106 	pop	ar5
      002077 D0 07            [24] 7107 	pop	ar7
                                   7108 ;	.\ecen4350_lcd_v4.c:1522: d++;
      002079 0A               [12] 7109 	inc	r2
      00207A BA 00 01         [24] 7110 	cjne	r2,#0x00,00256$
      00207D 0B               [12] 7111 	inc	r3
      00207E                       7112 00256$:
                                   7113 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7114 ;	assignBit
      00207E C2 B5            [12] 7115 	clr	_P3_5
                                   7116 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002080 8A 82            [24] 7117 	mov	dpl,r2
      002082 8B 83            [24] 7118 	mov	dph,r3
      002084 E0               [24] 7119 	movx	a,@dptr
      002085 F5 82            [12] 7120 	mov	dpl,a
                                   7121 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7122 ;	assignBit
      002087 D2 B5            [12] 7123 	setb	_P3_5
                                   7124 ;	.\ecen4350_lcd_v4.c:1523: print8Hex(ramRead8(d));
      002089 C0 07            [24] 7125 	push	ar7
      00208B C0 05            [24] 7126 	push	ar5
      00208D C0 03            [24] 7127 	push	ar3
      00208F C0 02            [24] 7128 	push	ar2
      002091 12r14rA1         [24] 7129 	lcall	_print8Hex
      002094 D0 02            [24] 7130 	pop	ar2
      002096 D0 03            [24] 7131 	pop	ar3
                                   7132 ;	.\ecen4350_lcd_v4.c:1524: d++;
      002098 74 01            [12] 7133 	mov	a,#0x01
      00209A 2A               [12] 7134 	add	a,r2
      00209B F5*50            [12] 7135 	mov	_dump_d_65536_547,a
      00209D E4               [12] 7136 	clr	a
      00209E 3B               [12] 7137 	addc	a,r3
      00209F F5*51            [12] 7138 	mov	(_dump_d_65536_547 + 1),a
                                   7139 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7140 ;	assignBit
      0020A1 C2 B5            [12] 7141 	clr	_P3_5
                                   7142 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0020A3 85*50 82         [24] 7143 	mov	dpl,_dump_d_65536_547
      0020A6 85*51 83         [24] 7144 	mov	dph,(_dump_d_65536_547 + 1)
      0020A9 E0               [24] 7145 	movx	a,@dptr
      0020AA FB               [12] 7146 	mov	r3,a
                                   7147 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7148 ;	assignBit
      0020AB D2 B5            [12] 7149 	setb	_P3_5
                                   7150 ;	.\ecen4350_lcd_v4.c:1525: print8Hex(ramRead8(d));
      0020AD 8B 82            [24] 7151 	mov	dpl,r3
      0020AF 12r14rA1         [24] 7152 	lcall	_print8Hex
      0020B2 D0 05            [24] 7153 	pop	ar5
      0020B4 D0 07            [24] 7154 	pop	ar7
                                   7155 ;	.\ecen4350_lcd_v4.c:1526: d--;
      0020B6 E5*50            [12] 7156 	mov	a,_dump_d_65536_547
      0020B8 24 FF            [12] 7157 	add	a,#0xff
      0020BA FA               [12] 7158 	mov	r2,a
      0020BB E5*51            [12] 7159 	mov	a,(_dump_d_65536_547 + 1)
      0020BD 34 FF            [12] 7160 	addc	a,#0xff
      0020BF FB               [12] 7161 	mov	r3,a
                                   7162 ;	.\ecen4350_lcd_v4.c:1527: d--;
      0020C0 1A               [12] 7163 	dec	r2
      0020C1 BA FF 01         [24] 7164 	cjne	r2,#0xff,00257$
      0020C4 1B               [12] 7165 	dec	r3
      0020C5                       7166 00257$:
                                   7167 ;	.\ecen4350_lcd_v4.c:1528: d--;
      0020C5 1A               [12] 7168 	dec	r2
      0020C6 BA FF 01         [24] 7169 	cjne	r2,#0xff,00258$
      0020C9 1B               [12] 7170 	dec	r3
      0020CA                       7171 00258$:
                                   7172 ;	.\ecen4350_lcd_v4.c:1530: setCursor(0, 180);
      0020CA 75*00 B4         [24] 7173 	mov	_setCursor_PARM_2,#0xb4
      0020CD 75*01 00         [24] 7174 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020D0 90 00 00         [24] 7175 	mov	dptr,#0x0000
      0020D3 C0 07            [24] 7176 	push	ar7
      0020D5 C0 05            [24] 7177 	push	ar5
      0020D7 C0 03            [24] 7178 	push	ar3
      0020D9 C0 02            [24] 7179 	push	ar2
      0020DB 12r04rB6         [24] 7180 	lcall	_setCursor
                                   7181 ;	.\ecen4350_lcd_v4.c:1531: setColorWhite();
      0020DE 12r15rE4         [24] 7182 	lcall	_setColorWhite
                                   7183 ;	.\ecen4350_lcd_v4.c:1532: LCD_string_write(" ASCII Data:");
      0020E1 90r07r5F         [24] 7184 	mov	dptr,#___str_47
      0020E4 75 F0 80         [24] 7185 	mov	b,#0x80
      0020E7 12r0FrD0         [24] 7186 	lcall	_LCD_string_write
                                   7187 ;	.\ecen4350_lcd_v4.c:1533: setColorDefault();
      0020EA 12r15r94         [24] 7188 	lcall	_setColorDefault
                                   7189 ;	.\ecen4350_lcd_v4.c:1534: setCursor(10, 200);
      0020ED 75*00 C8         [24] 7190 	mov	_setCursor_PARM_2,#0xc8
      0020F0 75*01 00         [24] 7191 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020F3 90 00 0A         [24] 7192 	mov	dptr,#0x000a
      0020F6 12r04rB6         [24] 7193 	lcall	_setCursor
      0020F9 D0 02            [24] 7194 	pop	ar2
      0020FB D0 03            [24] 7195 	pop	ar3
                                   7196 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7197 ;	assignBit
      0020FD C2 B5            [12] 7198 	clr	_P3_5
                                   7199 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0020FF 8A 82            [24] 7200 	mov	dpl,r2
      002101 8B 83            [24] 7201 	mov	dph,r3
      002103 E0               [24] 7202 	movx	a,@dptr
      002104 F5 82            [12] 7203 	mov	dpl,a
                                   7204 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7205 ;	assignBit
      002106 D2 B5            [12] 7206 	setb	_P3_5
                                   7207 ;	.\ecen4350_lcd_v4.c:1535: print8ASCII(ramRead8(d));
      002108 C0 03            [24] 7208 	push	ar3
      00210A C0 02            [24] 7209 	push	ar2
      00210C 12r15r23         [24] 7210 	lcall	_print8ASCII
      00210F D0 02            [24] 7211 	pop	ar2
      002111 D0 03            [24] 7212 	pop	ar3
      002113 D0 05            [24] 7213 	pop	ar5
      002115 D0 07            [24] 7214 	pop	ar7
                                   7215 ;	.\ecen4350_lcd_v4.c:1536: d++;
      002117 0A               [12] 7216 	inc	r2
      002118 BA 00 01         [24] 7217 	cjne	r2,#0x00,00259$
      00211B 0B               [12] 7218 	inc	r3
      00211C                       7219 00259$:
                                   7220 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7221 ;	assignBit
      00211C C2 B5            [12] 7222 	clr	_P3_5
                                   7223 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00211E 8A 82            [24] 7224 	mov	dpl,r2
      002120 8B 83            [24] 7225 	mov	dph,r3
      002122 E0               [24] 7226 	movx	a,@dptr
      002123 F5 82            [12] 7227 	mov	dpl,a
                                   7228 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7229 ;	assignBit
      002125 D2 B5            [12] 7230 	setb	_P3_5
                                   7231 ;	.\ecen4350_lcd_v4.c:1537: print8ASCII(ramRead8(d));
      002127 C0 07            [24] 7232 	push	ar7
      002129 C0 05            [24] 7233 	push	ar5
      00212B C0 03            [24] 7234 	push	ar3
      00212D C0 02            [24] 7235 	push	ar2
      00212F 12r15r23         [24] 7236 	lcall	_print8ASCII
      002132 D0 02            [24] 7237 	pop	ar2
      002134 D0 03            [24] 7238 	pop	ar3
      002136 D0 05            [24] 7239 	pop	ar5
      002138 D0 07            [24] 7240 	pop	ar7
                                   7241 ;	.\ecen4350_lcd_v4.c:1538: d++;
      00213A 0A               [12] 7242 	inc	r2
      00213B BA 00 01         [24] 7243 	cjne	r2,#0x00,00260$
      00213E 0B               [12] 7244 	inc	r3
      00213F                       7245 00260$:
                                   7246 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7247 ;	assignBit
      00213F C2 B5            [12] 7248 	clr	_P3_5
                                   7249 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002141 8A 82            [24] 7250 	mov	dpl,r2
      002143 8B 83            [24] 7251 	mov	dph,r3
      002145 E0               [24] 7252 	movx	a,@dptr
      002146 F5 82            [12] 7253 	mov	dpl,a
                                   7254 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7255 ;	assignBit
      002148 D2 B5            [12] 7256 	setb	_P3_5
                                   7257 ;	.\ecen4350_lcd_v4.c:1539: print8ASCII(ramRead8(d));
      00214A C0 07            [24] 7258 	push	ar7
      00214C C0 05            [24] 7259 	push	ar5
      00214E C0 03            [24] 7260 	push	ar3
      002150 C0 02            [24] 7261 	push	ar2
      002152 12r15r23         [24] 7262 	lcall	_print8ASCII
      002155 D0 02            [24] 7263 	pop	ar2
      002157 D0 03            [24] 7264 	pop	ar3
      002159 D0 05            [24] 7265 	pop	ar5
                                   7266 ;	.\ecen4350_lcd_v4.c:1540: d++;
      00215B 74 01            [12] 7267 	mov	a,#0x01
      00215D 2A               [12] 7268 	add	a,r2
      00215E FC               [12] 7269 	mov	r4,a
      00215F E4               [12] 7270 	clr	a
      002160 3B               [12] 7271 	addc	a,r3
      002161 FE               [12] 7272 	mov	r6,a
                                   7273 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7274 ;	assignBit
      002162 C2 B5            [12] 7275 	clr	_P3_5
                                   7276 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002164 8C 82            [24] 7277 	mov	dpl,r4
      002166 8E 83            [24] 7278 	mov	dph,r6
      002168 E0               [24] 7279 	movx	a,@dptr
      002169 F5 82            [12] 7280 	mov	dpl,a
                                   7281 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7282 ;	assignBit
      00216B D2 B5            [12] 7283 	setb	_P3_5
                                   7284 ;	.\ecen4350_lcd_v4.c:1541: print8ASCII(ramRead8(d));
      00216D C0 06            [24] 7285 	push	ar6
      00216F C0 05            [24] 7286 	push	ar5
      002171 C0 04            [24] 7287 	push	ar4
      002173 12r15r23         [24] 7288 	lcall	_print8ASCII
                                   7289 ;	.\ecen4350_lcd_v4.c:1543: setCursor(0, 240);
      002176 75*00 F0         [24] 7290 	mov	_setCursor_PARM_2,#0xf0
      002179 75*01 00         [24] 7291 	mov	(_setCursor_PARM_2 + 1),#0x00
      00217C 90 00 00         [24] 7292 	mov	dptr,#0x0000
      00217F 12r04rB6         [24] 7293 	lcall	_setCursor
                                   7294 ;	.\ecen4350_lcd_v4.c:1544: setColorWhite();
      002182 12r15rE4         [24] 7295 	lcall	_setColorWhite
                                   7296 ;	.\ecen4350_lcd_v4.c:1545: LCD_string_write(" Data Type:");
      002185 90r07r6C         [24] 7297 	mov	dptr,#___str_48
      002188 75 F0 80         [24] 7298 	mov	b,#0x80
      00218B 12r0FrD0         [24] 7299 	lcall	_LCD_string_write
                                   7300 ;	.\ecen4350_lcd_v4.c:1546: setColorDefault();
      00218E 12r15r94         [24] 7301 	lcall	_setColorDefault
                                   7302 ;	.\ecen4350_lcd_v4.c:1547: setCursor(0, 260);
      002191 75*00 04         [24] 7303 	mov	_setCursor_PARM_2,#0x04
      002194 75*01 01         [24] 7304 	mov	(_setCursor_PARM_2 + 1),#0x01
      002197 90 00 00         [24] 7305 	mov	dptr,#0x0000
      00219A 12r04rB6         [24] 7306 	lcall	_setCursor
                                   7307 ;	.\ecen4350_lcd_v4.c:1548: LCD_string_write(" DWORD");
      00219D 90r07r84         [24] 7308 	mov	dptr,#___str_51
      0021A0 75 F0 80         [24] 7309 	mov	b,#0x80
      0021A3 12r0FrD0         [24] 7310 	lcall	_LCD_string_write
      0021A6 D0 04            [24] 7311 	pop	ar4
      0021A8 D0 05            [24] 7312 	pop	ar5
      0021AA D0 06            [24] 7313 	pop	ar6
      0021AC D0 07            [24] 7314 	pop	ar7
      0021AE                       7315 00123$:
                                   7316 ;	.\ecen4350_lcd_v4.c:1550: setCursor(50, 300);
      0021AE 75*00 2C         [24] 7317 	mov	_setCursor_PARM_2,#0x2c
      0021B1 75*01 01         [24] 7318 	mov	(_setCursor_PARM_2 + 1),#0x01
      0021B4 90 00 32         [24] 7319 	mov	dptr,#0x0032
      0021B7 C0 07            [24] 7320 	push	ar7
      0021B9 C0 06            [24] 7321 	push	ar6
      0021BB C0 05            [24] 7322 	push	ar5
      0021BD C0 04            [24] 7323 	push	ar4
      0021BF 12r04rB6         [24] 7324 	lcall	_setCursor
                                   7325 ;	.\ecen4350_lcd_v4.c:1551: setColorWhite();
      0021C2 12r15rE4         [24] 7326 	lcall	_setColorWhite
                                   7327 ;	.\ecen4350_lcd_v4.c:1552: LCD_string_write(" <0> Exit\n");
      0021C5 90r07r8B         [24] 7328 	mov	dptr,#___str_52
      0021C8 75 F0 80         [24] 7329 	mov	b,#0x80
      0021CB 12r0FrD0         [24] 7330 	lcall	_LCD_string_write
                                   7331 ;	.\ecen4350_lcd_v4.c:1554: selection = keyDetect();
      0021CE 12r10rEE         [24] 7332 	lcall	_keyDetect
      0021D1 AB 82            [24] 7333 	mov	r3,dpl
      0021D3 D0 04            [24] 7334 	pop	ar4
      0021D5 D0 05            [24] 7335 	pop	ar5
      0021D7 D0 06            [24] 7336 	pop	ar6
      0021D9 D0 07            [24] 7337 	pop	ar7
      0021DB 78r00            [12] 7338 	mov	r0,#_selection
      0021DD A6 03            [24] 7339 	mov	@r0,ar3
                                   7340 ;	.\ecen4350_lcd_v4.c:1556: if (selection == '0' ) {
      0021DF BB 30 02         [24] 7341 	cjne	r3,#0x30,00261$
      0021E2 80 03            [24] 7342 	sjmp	00262$
      0021E4                       7343 00261$:
      0021E4 02r1DrBF         [24] 7344 	ljmp	00126$
      0021E7                       7345 00262$:
                                   7346 ;	.\ecen4350_lcd_v4.c:1557: exit = 0;
      0021E7 78r07            [12] 7347 	mov	r0,#_dump_exit_65536_547
      0021E9 76 00            [12] 7348 	mov	@r0,#0x00
                                   7349 ;	.\ecen4350_lcd_v4.c:1558: setCursor(50, 300);
      0021EB 75*00 2C         [24] 7350 	mov	_setCursor_PARM_2,#0x2c
      0021EE 75*01 01         [24] 7351 	mov	(_setCursor_PARM_2 + 1),#0x01
      0021F1 90 00 32         [24] 7352 	mov	dptr,#0x0032
      0021F4 C0 07            [24] 7353 	push	ar7
      0021F6 C0 06            [24] 7354 	push	ar6
      0021F8 C0 05            [24] 7355 	push	ar5
      0021FA C0 04            [24] 7356 	push	ar4
      0021FC 12r04rB6         [24] 7357 	lcall	_setCursor
                                   7358 ;	.\ecen4350_lcd_v4.c:1559: setColorSelect();
      0021FF 12r15r9F         [24] 7359 	lcall	_setColorSelect
                                   7360 ;	.\ecen4350_lcd_v4.c:1560: LCD_string_write(" ");
      002202 90r06r56         [24] 7361 	mov	dptr,#___str_29
      002205 75 F0 80         [24] 7362 	mov	b,#0x80
      002208 12r0FrD0         [24] 7363 	lcall	_LCD_string_write
                                   7364 ;	.\ecen4350_lcd_v4.c:1561: setColorHighlight2();
      00220B 12r15rB6         [24] 7365 	lcall	_setColorHighlight2
                                   7366 ;	.\ecen4350_lcd_v4.c:1562: LCD_string_write("<0> Exit\n");
      00220E 90r07r96         [24] 7367 	mov	dptr,#___str_53
      002211 75 F0 80         [24] 7368 	mov	b,#0x80
      002214 12r0FrD0         [24] 7369 	lcall	_LCD_string_write
                                   7370 ;	.\ecen4350_lcd_v4.c:1563: delay(40);
      002217 90 00 28         [24] 7371 	mov	dptr,#0x0028
      00221A 12r00rE0         [24] 7372 	lcall	_delay
      00221D D0 04            [24] 7373 	pop	ar4
      00221F D0 05            [24] 7374 	pop	ar5
      002221 D0 06            [24] 7375 	pop	ar6
      002223 D0 07            [24] 7376 	pop	ar7
      002225 02r1DrBF         [24] 7377 	ljmp	00126$
                                   7378 ;	.\ecen4350_lcd_v4.c:1566: return;
                                   7379 ;	.\ecen4350_lcd_v4.c:1567: }
      002228 22               [24] 7380 	ret
                                   7381 ;------------------------------------------------------------
                                   7382 ;Allocation info for local variables in function 'move'
                                   7383 ;------------------------------------------------------------
                                   7384 ;d                         Allocated with name '_move_d_65536_603'
                                   7385 ;i                         Allocated with name '_move_i_131072_612'
                                   7386 ;__2621440148              Allocated to registers 
                                   7387 ;__2621440145              Allocated to registers 
                                   7388 ;__2621440146              Allocated to registers 
                                   7389 ;__3276800149              Allocated to registers 
                                   7390 ;map_address               Allocated to registers 
                                   7391 ;d                         Allocated to registers r5 
                                   7392 ;map_address               Allocated to registers 
                                   7393 ;d                         Allocated to registers 
                                   7394 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_603'
                                   7395 ;destAddress               Allocated to registers r2 r3 
                                   7396 ;blockSize                 Allocated to registers r6 r7 
                                   7397 ;blockType                 Allocated to registers r5 
                                   7398 ;invalidType               Allocated to registers r4 
                                   7399 ;invalidSize               Allocated with name '_move_invalidSize_65536_603'
                                   7400 ;------------------------------------------------------------
                                   7401 ;	.\ecen4350_lcd_v4.c:1569: void move() {
                                   7402 ;	-----------------------------------------
                                   7403 ;	 function move
                                   7404 ;	-----------------------------------------
      002229                       7405 _move:
                                   7406 ;	.\ecen4350_lcd_v4.c:1573: __idata unsigned int blockSize = 0;
      002229 7E 00            [12] 7407 	mov	r6,#0x00
      00222B 7F 00            [12] 7408 	mov	r7,#0x00
                                   7409 ;	.\ecen4350_lcd_v4.c:1574: __idata unsigned char blockType = 0;
      00222D 7D 00            [12] 7410 	mov	r5,#0x00
                                   7411 ;	.\ecen4350_lcd_v4.c:1575: __idata unsigned char invalidType = 1;
      00222F 7C 01            [12] 7412 	mov	r4,#0x01
                                   7413 ;	.\ecen4350_lcd_v4.c:1576: __idata unsigned char invalidSize = 1;
      002231 78r0A            [12] 7414 	mov	r0,#_move_invalidSize_65536_603
      002233 76 01            [12] 7415 	mov	@r0,#0x01
                                   7416 ;	.\ecen4350_lcd_v4.c:1578: clearLCD();
      002235 C0 07            [24] 7417 	push	ar7
      002237 C0 06            [24] 7418 	push	ar6
      002239 C0 05            [24] 7419 	push	ar5
      00223B C0 04            [24] 7420 	push	ar4
      00223D 12r0Dr53         [24] 7421 	lcall	_clearLCD
                                   7422 ;	.\ecen4350_lcd_v4.c:1581: fillTop(GRAY);
      002240 90 D6 BA         [24] 7423 	mov	dptr,#0xd6ba
      002243 12r0Br86         [24] 7424 	lcall	_fillTop
                                   7425 ;	.\ecen4350_lcd_v4.c:1582: setTextSize(5);
      002246 75 82 05         [24] 7426 	mov	dpl,#0x05
      002249 12r04rD0         [24] 7427 	lcall	_setTextSize
                                   7428 ;	.\ecen4350_lcd_v4.c:1583: setColorMenu();
      00224C 12r15rCD         [24] 7429 	lcall	_setColorMenu
                                   7430 ;	.\ecen4350_lcd_v4.c:1584: setCursor(30, 0);
      00224F E4               [12] 7431 	clr	a
      002250 F5*00            [12] 7432 	mov	_setCursor_PARM_2,a
      002252 F5*01            [12] 7433 	mov	(_setCursor_PARM_2 + 1),a
      002254 90 00 1E         [24] 7434 	mov	dptr,#0x001e
      002257 12r04rB6         [24] 7435 	lcall	_setCursor
                                   7436 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write("[MOVE]\n");
      00225A 90r07rA0         [24] 7437 	mov	dptr,#___str_54
      00225D 75 F0 80         [24] 7438 	mov	b,#0x80
      002260 12r0FrD0         [24] 7439 	lcall	_LCD_string_write
                                   7440 ;	.\ecen4350_lcd_v4.c:1586: setColorDefault();
      002263 12r15r94         [24] 7441 	lcall	_setColorDefault
                                   7442 ;	.\ecen4350_lcd_v4.c:1587: setTextSize(2);
      002266 75 82 02         [24] 7443 	mov	dpl,#0x02
      002269 12r04rD0         [24] 7444 	lcall	_setTextSize
                                   7445 ;	.\ecen4350_lcd_v4.c:1588: setCursor(0, 60);
      00226C 75*00 3C         [24] 7446 	mov	_setCursor_PARM_2,#0x3c
      00226F 75*01 00         [24] 7447 	mov	(_setCursor_PARM_2 + 1),#0x00
      002272 90 00 00         [24] 7448 	mov	dptr,#0x0000
      002275 12r04rB6         [24] 7449 	lcall	_setCursor
                                   7450 ;	.\ecen4350_lcd_v4.c:1589: LCD_string_write(" Source Address:");
      002278 90r07rA8         [24] 7451 	mov	dptr,#___str_55
      00227B 75 F0 80         [24] 7452 	mov	b,#0x80
      00227E 12r0FrD0         [24] 7453 	lcall	_LCD_string_write
                                   7454 ;	.\ecen4350_lcd_v4.c:1590: setCursor(0, 80);
      002281 75*00 50         [24] 7455 	mov	_setCursor_PARM_2,#0x50
      002284 75*01 00         [24] 7456 	mov	(_setCursor_PARM_2 + 1),#0x00
      002287 90 00 00         [24] 7457 	mov	dptr,#0x0000
      00228A 12r04rB6         [24] 7458 	lcall	_setCursor
                                   7459 ;	.\ecen4350_lcd_v4.c:1591: setColorGray();
      00228D 12r15rC2         [24] 7460 	lcall	_setColorGray
                                   7461 ;	.\ecen4350_lcd_v4.c:1592: LCD_string_write(" 0x____");
      002290 90r05rF4         [24] 7462 	mov	dptr,#___str_23
      002293 75 F0 80         [24] 7463 	mov	b,#0x80
      002296 12r0FrD0         [24] 7464 	lcall	_LCD_string_write
                                   7465 ;	.\ecen4350_lcd_v4.c:1593: setCursor(0, 110);
      002299 75*00 6E         [24] 7466 	mov	_setCursor_PARM_2,#0x6e
      00229C 75*01 00         [24] 7467 	mov	(_setCursor_PARM_2 + 1),#0x00
      00229F 90 00 00         [24] 7468 	mov	dptr,#0x0000
      0022A2 12r04rB6         [24] 7469 	lcall	_setCursor
                                   7470 ;	.\ecen4350_lcd_v4.c:1594: setColorDefault();
      0022A5 12r15r94         [24] 7471 	lcall	_setColorDefault
                                   7472 ;	.\ecen4350_lcd_v4.c:1595: LCD_string_write(" Destination:");
      0022A8 90r07rB9         [24] 7473 	mov	dptr,#___str_56
      0022AB 75 F0 80         [24] 7474 	mov	b,#0x80
      0022AE 12r0FrD0         [24] 7475 	lcall	_LCD_string_write
                                   7476 ;	.\ecen4350_lcd_v4.c:1596: setCursor(0, 130);
      0022B1 75*00 82         [24] 7477 	mov	_setCursor_PARM_2,#0x82
      0022B4 75*01 00         [24] 7478 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022B7 90 00 00         [24] 7479 	mov	dptr,#0x0000
      0022BA 12r04rB6         [24] 7480 	lcall	_setCursor
                                   7481 ;	.\ecen4350_lcd_v4.c:1597: setColorGray();
      0022BD 12r15rC2         [24] 7482 	lcall	_setColorGray
                                   7483 ;	.\ecen4350_lcd_v4.c:1598: LCD_string_write(" 0x____");
      0022C0 90r05rF4         [24] 7484 	mov	dptr,#___str_23
      0022C3 75 F0 80         [24] 7485 	mov	b,#0x80
      0022C6 12r0FrD0         [24] 7486 	lcall	_LCD_string_write
                                   7487 ;	.\ecen4350_lcd_v4.c:1599: setCursor(0, 160);
      0022C9 75*00 A0         [24] 7488 	mov	_setCursor_PARM_2,#0xa0
      0022CC 75*01 00         [24] 7489 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022CF 90 00 00         [24] 7490 	mov	dptr,#0x0000
      0022D2 12r04rB6         [24] 7491 	lcall	_setCursor
                                   7492 ;	.\ecen4350_lcd_v4.c:1600: setColorDefault();
      0022D5 12r15r94         [24] 7493 	lcall	_setColorDefault
                                   7494 ;	.\ecen4350_lcd_v4.c:1601: LCD_string_write(" Choose Block Type:");
      0022D8 90r06r58         [24] 7495 	mov	dptr,#___str_30
      0022DB 75 F0 80         [24] 7496 	mov	b,#0x80
      0022DE 12r0FrD0         [24] 7497 	lcall	_LCD_string_write
                                   7498 ;	.\ecen4350_lcd_v4.c:1602: setCursor(0, 180);
      0022E1 75*00 B4         [24] 7499 	mov	_setCursor_PARM_2,#0xb4
      0022E4 75*01 00         [24] 7500 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022E7 90 00 00         [24] 7501 	mov	dptr,#0x0000
      0022EA 12r04rB6         [24] 7502 	lcall	_setCursor
                                   7503 ;	.\ecen4350_lcd_v4.c:1603: setColorGray();
      0022ED 12r15rC2         [24] 7504 	lcall	_setColorGray
                                   7505 ;	.\ecen4350_lcd_v4.c:1604: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0022F0 90r06r11         [24] 7506 	mov	dptr,#___str_25
      0022F3 75 F0 80         [24] 7507 	mov	b,#0x80
      0022F6 12r0FrD0         [24] 7508 	lcall	_LCD_string_write
                                   7509 ;	.\ecen4350_lcd_v4.c:1605: setCursor(0, 260);
      0022F9 75*00 04         [24] 7510 	mov	_setCursor_PARM_2,#0x04
      0022FC 75*01 01         [24] 7511 	mov	(_setCursor_PARM_2 + 1),#0x01
      0022FF 90 00 00         [24] 7512 	mov	dptr,#0x0000
      002302 12r04rB6         [24] 7513 	lcall	_setCursor
                                   7514 ;	.\ecen4350_lcd_v4.c:1606: setColorDefault();
      002305 12r15r94         [24] 7515 	lcall	_setColorDefault
                                   7516 ;	.\ecen4350_lcd_v4.c:1607: LCD_string_write(" Input Size:");
      002308 90r06r33         [24] 7517 	mov	dptr,#___str_26
      00230B 75 F0 80         [24] 7518 	mov	b,#0x80
      00230E 12r0FrD0         [24] 7519 	lcall	_LCD_string_write
                                   7520 ;	.\ecen4350_lcd_v4.c:1608: setColorGray();
      002311 12r15rC2         [24] 7521 	lcall	_setColorGray
                                   7522 ;	.\ecen4350_lcd_v4.c:1609: LCD_string_write(" _");
      002314 90r06r40         [24] 7523 	mov	dptr,#___str_27
      002317 75 F0 80         [24] 7524 	mov	b,#0x80
      00231A 12r0FrD0         [24] 7525 	lcall	_LCD_string_write
                                   7526 ;	.\ecen4350_lcd_v4.c:1616: setCursor(0, 60);
      00231D 75*00 3C         [24] 7527 	mov	_setCursor_PARM_2,#0x3c
      002320 75*01 00         [24] 7528 	mov	(_setCursor_PARM_2 + 1),#0x00
      002323 90 00 00         [24] 7529 	mov	dptr,#0x0000
      002326 12r04rB6         [24] 7530 	lcall	_setCursor
                                   7531 ;	.\ecen4350_lcd_v4.c:1617: setColorSelect();
      002329 12r15r9F         [24] 7532 	lcall	_setColorSelect
                                   7533 ;	.\ecen4350_lcd_v4.c:1618: LCD_string_write(" Source Address:");
      00232C 90r07rA8         [24] 7534 	mov	dptr,#___str_55
      00232F 75 F0 80         [24] 7535 	mov	b,#0x80
      002332 12r0FrD0         [24] 7536 	lcall	_LCD_string_write
                                   7537 ;	.\ecen4350_lcd_v4.c:1619: setCursor(0, 80);
      002335 75*00 50         [24] 7538 	mov	_setCursor_PARM_2,#0x50
      002338 75*01 00         [24] 7539 	mov	(_setCursor_PARM_2 + 1),#0x00
      00233B 90 00 00         [24] 7540 	mov	dptr,#0x0000
      00233E 12r04rB6         [24] 7541 	lcall	_setCursor
                                   7542 ;	.\ecen4350_lcd_v4.c:1620: LCD_string_write(" ");
      002341 90r06r56         [24] 7543 	mov	dptr,#___str_29
      002344 75 F0 80         [24] 7544 	mov	b,#0x80
      002347 12r0FrD0         [24] 7545 	lcall	_LCD_string_write
                                   7546 ;	.\ecen4350_lcd_v4.c:1621: setColorHighlight1();
      00234A 12r15rAA         [24] 7547 	lcall	_setColorHighlight1
                                   7548 ;	.\ecen4350_lcd_v4.c:1622: LCD_string_write("0x");
      00234D 90r05r29         [24] 7549 	mov	dptr,#___str_2
      002350 75 F0 80         [24] 7550 	mov	b,#0x80
      002353 12r0FrD0         [24] 7551 	lcall	_LCD_string_write
                                   7552 ;	.\ecen4350_lcd_v4.c:1623: sourceAddress = inputAddress();
      002356 12r16r05         [24] 7553 	lcall	_inputAddress
      002359 78r08            [12] 7554 	mov	r0,#_move_sourceAddress_65536_603
      00235B A6 82            [24] 7555 	mov	@r0,dpl
      00235D 08               [12] 7556 	inc	r0
      00235E A6 83            [24] 7557 	mov	@r0,dph
                                   7558 ;	.\ecen4350_lcd_v4.c:1626: setColorDefault();
      002360 12r15r94         [24] 7559 	lcall	_setColorDefault
                                   7560 ;	.\ecen4350_lcd_v4.c:1627: setCursor(0, 60);
      002363 75*00 3C         [24] 7561 	mov	_setCursor_PARM_2,#0x3c
      002366 75*01 00         [24] 7562 	mov	(_setCursor_PARM_2 + 1),#0x00
      002369 90 00 00         [24] 7563 	mov	dptr,#0x0000
      00236C 12r04rB6         [24] 7564 	lcall	_setCursor
                                   7565 ;	.\ecen4350_lcd_v4.c:1628: LCD_string_write(" Source Address:");
      00236F 90r07rA8         [24] 7566 	mov	dptr,#___str_55
      002372 75 F0 80         [24] 7567 	mov	b,#0x80
      002375 12r0FrD0         [24] 7568 	lcall	_LCD_string_write
                                   7569 ;	.\ecen4350_lcd_v4.c:1629: setCursor(0, 80);
      002378 75*00 50         [24] 7570 	mov	_setCursor_PARM_2,#0x50
      00237B 75*01 00         [24] 7571 	mov	(_setCursor_PARM_2 + 1),#0x00
      00237E 90 00 00         [24] 7572 	mov	dptr,#0x0000
      002381 12r04rB6         [24] 7573 	lcall	_setCursor
                                   7574 ;	.\ecen4350_lcd_v4.c:1630: LCD_string_write(" ");
      002384 90r06r56         [24] 7575 	mov	dptr,#___str_29
      002387 75 F0 80         [24] 7576 	mov	b,#0x80
      00238A 12r0FrD0         [24] 7577 	lcall	_LCD_string_write
                                   7578 ;	.\ecen4350_lcd_v4.c:1631: setColorHighlight2();
      00238D 12r15rB6         [24] 7579 	lcall	_setColorHighlight2
                                   7580 ;	.\ecen4350_lcd_v4.c:1632: LCD_string_write("0x");
      002390 90r05r29         [24] 7581 	mov	dptr,#___str_2
      002393 75 F0 80         [24] 7582 	mov	b,#0x80
      002396 12r0FrD0         [24] 7583 	lcall	_LCD_string_write
                                   7584 ;	.\ecen4350_lcd_v4.c:1633: print16Hex(sourceAddress);
      002399 78r08            [12] 7585 	mov	r0,#_move_sourceAddress_65536_603
      00239B 86 82            [24] 7586 	mov	dpl,@r0
      00239D 08               [12] 7587 	inc	r0
      00239E 86 83            [24] 7588 	mov	dph,@r0
      0023A0 12r14rB8         [24] 7589 	lcall	_print16Hex
                                   7590 ;	.\ecen4350_lcd_v4.c:1636: setCursor(0, 110);
      0023A3 75*00 6E         [24] 7591 	mov	_setCursor_PARM_2,#0x6e
      0023A6 75*01 00         [24] 7592 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023A9 90 00 00         [24] 7593 	mov	dptr,#0x0000
      0023AC 12r04rB6         [24] 7594 	lcall	_setCursor
                                   7595 ;	.\ecen4350_lcd_v4.c:1637: setColorSelect();
      0023AF 12r15r9F         [24] 7596 	lcall	_setColorSelect
                                   7597 ;	.\ecen4350_lcd_v4.c:1638: LCD_string_write(" Destination:");
      0023B2 90r07rB9         [24] 7598 	mov	dptr,#___str_56
      0023B5 75 F0 80         [24] 7599 	mov	b,#0x80
      0023B8 12r0FrD0         [24] 7600 	lcall	_LCD_string_write
                                   7601 ;	.\ecen4350_lcd_v4.c:1639: setCursor(0, 130);
      0023BB 75*00 82         [24] 7602 	mov	_setCursor_PARM_2,#0x82
      0023BE 75*01 00         [24] 7603 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023C1 90 00 00         [24] 7604 	mov	dptr,#0x0000
      0023C4 12r04rB6         [24] 7605 	lcall	_setCursor
                                   7606 ;	.\ecen4350_lcd_v4.c:1640: LCD_string_write(" ");
      0023C7 90r06r56         [24] 7607 	mov	dptr,#___str_29
      0023CA 75 F0 80         [24] 7608 	mov	b,#0x80
      0023CD 12r0FrD0         [24] 7609 	lcall	_LCD_string_write
                                   7610 ;	.\ecen4350_lcd_v4.c:1641: setColorHighlight1();
      0023D0 12r15rAA         [24] 7611 	lcall	_setColorHighlight1
                                   7612 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("0x");
      0023D3 90r05r29         [24] 7613 	mov	dptr,#___str_2
      0023D6 75 F0 80         [24] 7614 	mov	b,#0x80
      0023D9 12r0FrD0         [24] 7615 	lcall	_LCD_string_write
                                   7616 ;	.\ecen4350_lcd_v4.c:1643: destAddress = inputAddress();
      0023DC 12r16r05         [24] 7617 	lcall	_inputAddress
      0023DF AA 82            [24] 7618 	mov	r2,dpl
      0023E1 AB 83            [24] 7619 	mov	r3,dph
                                   7620 ;	.\ecen4350_lcd_v4.c:1646: setColorDefault();
      0023E3 C0 03            [24] 7621 	push	ar3
      0023E5 C0 02            [24] 7622 	push	ar2
      0023E7 12r15r94         [24] 7623 	lcall	_setColorDefault
                                   7624 ;	.\ecen4350_lcd_v4.c:1647: setCursor(0, 110);
      0023EA 75*00 6E         [24] 7625 	mov	_setCursor_PARM_2,#0x6e
      0023ED 75*01 00         [24] 7626 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023F0 90 00 00         [24] 7627 	mov	dptr,#0x0000
      0023F3 12r04rB6         [24] 7628 	lcall	_setCursor
                                   7629 ;	.\ecen4350_lcd_v4.c:1648: LCD_string_write( " Destination:");
      0023F6 90r07rB9         [24] 7630 	mov	dptr,#___str_56
      0023F9 75 F0 80         [24] 7631 	mov	b,#0x80
      0023FC 12r0FrD0         [24] 7632 	lcall	_LCD_string_write
                                   7633 ;	.\ecen4350_lcd_v4.c:1649: setCursor(0, 130);
      0023FF 75*00 82         [24] 7634 	mov	_setCursor_PARM_2,#0x82
      002402 75*01 00         [24] 7635 	mov	(_setCursor_PARM_2 + 1),#0x00
      002405 90 00 00         [24] 7636 	mov	dptr,#0x0000
      002408 12r04rB6         [24] 7637 	lcall	_setCursor
                                   7638 ;	.\ecen4350_lcd_v4.c:1650: LCD_string_write(" ");
      00240B 90r06r56         [24] 7639 	mov	dptr,#___str_29
      00240E 75 F0 80         [24] 7640 	mov	b,#0x80
      002411 12r0FrD0         [24] 7641 	lcall	_LCD_string_write
                                   7642 ;	.\ecen4350_lcd_v4.c:1651: setColorHighlight2();
      002414 12r15rB6         [24] 7643 	lcall	_setColorHighlight2
                                   7644 ;	.\ecen4350_lcd_v4.c:1652: LCD_string_write("0x");
      002417 90r05r29         [24] 7645 	mov	dptr,#___str_2
      00241A 75 F0 80         [24] 7646 	mov	b,#0x80
      00241D 12r0FrD0         [24] 7647 	lcall	_LCD_string_write
      002420 D0 02            [24] 7648 	pop	ar2
      002422 D0 03            [24] 7649 	pop	ar3
                                   7650 ;	.\ecen4350_lcd_v4.c:1653: print16Hex(destAddress);
      002424 8A 82            [24] 7651 	mov	dpl,r2
      002426 8B 83            [24] 7652 	mov	dph,r3
      002428 C0 03            [24] 7653 	push	ar3
      00242A C0 02            [24] 7654 	push	ar2
      00242C 12r14rB8         [24] 7655 	lcall	_print16Hex
                                   7656 ;	.\ecen4350_lcd_v4.c:1656: setCursor(0, 160);
      00242F 75*00 A0         [24] 7657 	mov	_setCursor_PARM_2,#0xa0
      002432 75*01 00         [24] 7658 	mov	(_setCursor_PARM_2 + 1),#0x00
      002435 90 00 00         [24] 7659 	mov	dptr,#0x0000
      002438 12r04rB6         [24] 7660 	lcall	_setCursor
                                   7661 ;	.\ecen4350_lcd_v4.c:1657: setColorSelect();
      00243B 12r15r9F         [24] 7662 	lcall	_setColorSelect
                                   7663 ;	.\ecen4350_lcd_v4.c:1658: LCD_string_write(" Choose Block Type:");
      00243E 90r06r58         [24] 7664 	mov	dptr,#___str_30
      002441 75 F0 80         [24] 7665 	mov	b,#0x80
      002444 12r0FrD0         [24] 7666 	lcall	_LCD_string_write
                                   7667 ;	.\ecen4350_lcd_v4.c:1659: setCursor(0, 180);
      002447 75*00 B4         [24] 7668 	mov	_setCursor_PARM_2,#0xb4
      00244A 75*01 00         [24] 7669 	mov	(_setCursor_PARM_2 + 1),#0x00
      00244D 90 00 00         [24] 7670 	mov	dptr,#0x0000
      002450 12r04rB6         [24] 7671 	lcall	_setCursor
                                   7672 ;	.\ecen4350_lcd_v4.c:1660: setColorWhite();
      002453 12r15rE4         [24] 7673 	lcall	_setColorWhite
                                   7674 ;	.\ecen4350_lcd_v4.c:1661: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      002456 90r06r11         [24] 7675 	mov	dptr,#___str_25
      002459 75 F0 80         [24] 7676 	mov	b,#0x80
      00245C 12r0FrD0         [24] 7677 	lcall	_LCD_string_write
      00245F D0 02            [24] 7678 	pop	ar2
      002461 D0 03            [24] 7679 	pop	ar3
      002463 D0 04            [24] 7680 	pop	ar4
      002465 D0 05            [24] 7681 	pop	ar5
      002467 D0 06            [24] 7682 	pop	ar6
      002469 D0 07            [24] 7683 	pop	ar7
                                   7684 ;	.\ecen4350_lcd_v4.c:1663: while (invalidType) {
      00246B                       7685 00109$:
      00246B EC               [12] 7686 	mov	a,r4
      00246C 70 03            [24] 7687 	jnz	00178$
      00246E 02r25rFB         [24] 7688 	ljmp	00137$
      002471                       7689 00178$:
                                   7690 ;	.\ecen4350_lcd_v4.c:1664: setCursor(0, 180);
      002471 75*00 B4         [24] 7691 	mov	_setCursor_PARM_2,#0xb4
      002474 75*01 00         [24] 7692 	mov	(_setCursor_PARM_2 + 1),#0x00
      002477 90 00 00         [24] 7693 	mov	dptr,#0x0000
      00247A C0 07            [24] 7694 	push	ar7
      00247C C0 06            [24] 7695 	push	ar6
      00247E C0 04            [24] 7696 	push	ar4
      002480 C0 03            [24] 7697 	push	ar3
      002482 C0 02            [24] 7698 	push	ar2
      002484 12r04rB6         [24] 7699 	lcall	_setCursor
                                   7700 ;	.\ecen4350_lcd_v4.c:1665: setColorWhite();
      002487 12r15rE4         [24] 7701 	lcall	_setColorWhite
                                   7702 ;	.\ecen4350_lcd_v4.c:1666: LCD_string_write("\n\n");
      00248A 90r06r6C         [24] 7703 	mov	dptr,#___str_31
      00248D 75 F0 80         [24] 7704 	mov	b,#0x80
      002490 12r0FrD0         [24] 7705 	lcall	_LCD_string_write
                                   7706 ;	.\ecen4350_lcd_v4.c:1668: blockType = inputBlockType();
      002493 12r16rA7         [24] 7707 	lcall	_inputBlockType
      002496 AD 82            [24] 7708 	mov	r5,dpl
      002498 D0 02            [24] 7709 	pop	ar2
      00249A D0 03            [24] 7710 	pop	ar3
      00249C D0 04            [24] 7711 	pop	ar4
      00249E D0 06            [24] 7712 	pop	ar6
      0024A0 D0 07            [24] 7713 	pop	ar7
                                   7714 ;	.\ecen4350_lcd_v4.c:1670: if (blockType == 0x1) {
      0024A2 BD 01 5F         [24] 7715 	cjne	r5,#0x01,00102$
                                   7716 ;	.\ecen4350_lcd_v4.c:1671: invalidType = 0;
      0024A5 7C 00            [12] 7717 	mov	r4,#0x00
                                   7718 ;	.\ecen4350_lcd_v4.c:1673: setColorDefault();
      0024A7 C0 07            [24] 7719 	push	ar7
      0024A9 C0 06            [24] 7720 	push	ar6
      0024AB C0 05            [24] 7721 	push	ar5
      0024AD C0 04            [24] 7722 	push	ar4
      0024AF C0 03            [24] 7723 	push	ar3
      0024B1 C0 02            [24] 7724 	push	ar2
      0024B3 12r15r94         [24] 7725 	lcall	_setColorDefault
                                   7726 ;	.\ecen4350_lcd_v4.c:1674: setCursor(0, 160);
      0024B6 75*00 A0         [24] 7727 	mov	_setCursor_PARM_2,#0xa0
      0024B9 75*01 00         [24] 7728 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024BC 90 00 00         [24] 7729 	mov	dptr,#0x0000
      0024BF 12r04rB6         [24] 7730 	lcall	_setCursor
                                   7731 ;	.\ecen4350_lcd_v4.c:1675: LCD_string_write(" Choose Block Type:");
      0024C2 90r06r58         [24] 7732 	mov	dptr,#___str_30
      0024C5 75 F0 80         [24] 7733 	mov	b,#0x80
      0024C8 12r0FrD0         [24] 7734 	lcall	_LCD_string_write
                                   7735 ;	.\ecen4350_lcd_v4.c:1676: setCursor(0, 180);
      0024CB 75*00 B4         [24] 7736 	mov	_setCursor_PARM_2,#0xb4
      0024CE 75*01 00         [24] 7737 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024D1 90 00 00         [24] 7738 	mov	dptr,#0x0000
      0024D4 12r04rB6         [24] 7739 	lcall	_setCursor
                                   7740 ;	.\ecen4350_lcd_v4.c:1677: LCD_string_write("  ");
      0024D7 90r06r6F         [24] 7741 	mov	dptr,#___str_32
      0024DA 75 F0 80         [24] 7742 	mov	b,#0x80
      0024DD 12r0FrD0         [24] 7743 	lcall	_LCD_string_write
                                   7744 ;	.\ecen4350_lcd_v4.c:1678: setColorHighlight2();
      0024E0 12r15rB6         [24] 7745 	lcall	_setColorHighlight2
                                   7746 ;	.\ecen4350_lcd_v4.c:1679: LCD_string_write("<1> BYTE\n");
      0024E3 90r06r72         [24] 7747 	mov	dptr,#___str_33
      0024E6 75 F0 80         [24] 7748 	mov	b,#0x80
      0024E9 12r0FrD0         [24] 7749 	lcall	_LCD_string_write
                                   7750 ;	.\ecen4350_lcd_v4.c:1680: setColorGray();
      0024EC 12r15rC2         [24] 7751 	lcall	_setColorGray
                                   7752 ;	.\ecen4350_lcd_v4.c:1681: LCD_string_write("\n\n                \n                ");
      0024EF 90r06r7C         [24] 7753 	mov	dptr,#___str_34
      0024F2 75 F0 80         [24] 7754 	mov	b,#0x80
      0024F5 12r0FrD0         [24] 7755 	lcall	_LCD_string_write
      0024F8 D0 02            [24] 7756 	pop	ar2
      0024FA D0 03            [24] 7757 	pop	ar3
      0024FC D0 04            [24] 7758 	pop	ar4
      0024FE D0 05            [24] 7759 	pop	ar5
      002500 D0 06            [24] 7760 	pop	ar6
      002502 D0 07            [24] 7761 	pop	ar7
      002504                       7762 00102$:
                                   7763 ;	.\ecen4350_lcd_v4.c:1683: } if (blockType == 0x2) {
      002504 BD 02 62         [24] 7764 	cjne	r5,#0x02,00104$
                                   7765 ;	.\ecen4350_lcd_v4.c:1684: invalidType = 0;
      002507 7C 00            [12] 7766 	mov	r4,#0x00
                                   7767 ;	.\ecen4350_lcd_v4.c:1686: setColorDefault();
      002509 C0 07            [24] 7768 	push	ar7
      00250B C0 06            [24] 7769 	push	ar6
      00250D C0 05            [24] 7770 	push	ar5
      00250F C0 04            [24] 7771 	push	ar4
      002511 C0 03            [24] 7772 	push	ar3
      002513 C0 02            [24] 7773 	push	ar2
      002515 12r15r94         [24] 7774 	lcall	_setColorDefault
                                   7775 ;	.\ecen4350_lcd_v4.c:1687: setCursor(0, 160);
      002518 75*00 A0         [24] 7776 	mov	_setCursor_PARM_2,#0xa0
      00251B 75*01 00         [24] 7777 	mov	(_setCursor_PARM_2 + 1),#0x00
      00251E 90 00 00         [24] 7778 	mov	dptr,#0x0000
      002521 12r04rB6         [24] 7779 	lcall	_setCursor
                                   7780 ;	.\ecen4350_lcd_v4.c:1688: LCD_string_write(" Choose Block Type:");
      002524 90r06r58         [24] 7781 	mov	dptr,#___str_30
      002527 75 F0 80         [24] 7782 	mov	b,#0x80
      00252A 12r0FrD0         [24] 7783 	lcall	_LCD_string_write
                                   7784 ;	.\ecen4350_lcd_v4.c:1689: setCursor(0, 180);
      00252D 75*00 B4         [24] 7785 	mov	_setCursor_PARM_2,#0xb4
      002530 75*01 00         [24] 7786 	mov	(_setCursor_PARM_2 + 1),#0x00
      002533 90 00 00         [24] 7787 	mov	dptr,#0x0000
      002536 12r04rB6         [24] 7788 	lcall	_setCursor
                                   7789 ;	.\ecen4350_lcd_v4.c:1690: setColorGray();
      002539 12r15rC2         [24] 7790 	lcall	_setColorGray
                                   7791 ;	.\ecen4350_lcd_v4.c:1691: LCD_string_write("\n  ");
      00253C 90r06rA0         [24] 7792 	mov	dptr,#___str_35
      00253F 75 F0 80         [24] 7793 	mov	b,#0x80
      002542 12r0FrD0         [24] 7794 	lcall	_LCD_string_write
                                   7795 ;	.\ecen4350_lcd_v4.c:1692: setColorHighlight2();
      002545 12r15rB6         [24] 7796 	lcall	_setColorHighlight2
                                   7797 ;	.\ecen4350_lcd_v4.c:1693: LCD_string_write("<2> WORD\n");
      002548 90r06rA4         [24] 7798 	mov	dptr,#___str_36
      00254B 75 F0 80         [24] 7799 	mov	b,#0x80
      00254E 12r0FrD0         [24] 7800 	lcall	_LCD_string_write
                                   7801 ;	.\ecen4350_lcd_v4.c:1694: setColorGray();
      002551 12r15rC2         [24] 7802 	lcall	_setColorGray
                                   7803 ;	.\ecen4350_lcd_v4.c:1695: LCD_string_write("\n                \n                ");
      002554 90r06rAE         [24] 7804 	mov	dptr,#___str_37
      002557 75 F0 80         [24] 7805 	mov	b,#0x80
      00255A 12r0FrD0         [24] 7806 	lcall	_LCD_string_write
      00255D D0 02            [24] 7807 	pop	ar2
      00255F D0 03            [24] 7808 	pop	ar3
      002561 D0 04            [24] 7809 	pop	ar4
      002563 D0 05            [24] 7810 	pop	ar5
      002565 D0 06            [24] 7811 	pop	ar6
      002567 D0 07            [24] 7812 	pop	ar7
      002569                       7813 00104$:
                                   7814 ;	.\ecen4350_lcd_v4.c:1696: } if (blockType == 0x4) {
      002569 BD 04 62         [24] 7815 	cjne	r5,#0x04,00106$
                                   7816 ;	.\ecen4350_lcd_v4.c:1697: invalidType = 0;
      00256C 7C 00            [12] 7817 	mov	r4,#0x00
                                   7818 ;	.\ecen4350_lcd_v4.c:1699: setColorDefault();
      00256E C0 07            [24] 7819 	push	ar7
      002570 C0 06            [24] 7820 	push	ar6
      002572 C0 05            [24] 7821 	push	ar5
      002574 C0 04            [24] 7822 	push	ar4
      002576 C0 03            [24] 7823 	push	ar3
      002578 C0 02            [24] 7824 	push	ar2
      00257A 12r15r94         [24] 7825 	lcall	_setColorDefault
                                   7826 ;	.\ecen4350_lcd_v4.c:1700: setCursor(0, 160);
      00257D 75*00 A0         [24] 7827 	mov	_setCursor_PARM_2,#0xa0
      002580 75*01 00         [24] 7828 	mov	(_setCursor_PARM_2 + 1),#0x00
      002583 90 00 00         [24] 7829 	mov	dptr,#0x0000
      002586 12r04rB6         [24] 7830 	lcall	_setCursor
                                   7831 ;	.\ecen4350_lcd_v4.c:1701: LCD_string_write(" Choose Block Type:");
      002589 90r06r58         [24] 7832 	mov	dptr,#___str_30
      00258C 75 F0 80         [24] 7833 	mov	b,#0x80
      00258F 12r0FrD0         [24] 7834 	lcall	_LCD_string_write
                                   7835 ;	.\ecen4350_lcd_v4.c:1702: setColorGray();
      002592 12r15rC2         [24] 7836 	lcall	_setColorGray
                                   7837 ;	.\ecen4350_lcd_v4.c:1703: setCursor(0, 180);
      002595 75*00 B4         [24] 7838 	mov	_setCursor_PARM_2,#0xb4
      002598 75*01 00         [24] 7839 	mov	(_setCursor_PARM_2 + 1),#0x00
      00259B 90 00 00         [24] 7840 	mov	dptr,#0x0000
      00259E 12r04rB6         [24] 7841 	lcall	_setCursor
                                   7842 ;	.\ecen4350_lcd_v4.c:1704: LCD_string_write("\n\n  ");
      0025A1 90r06rD1         [24] 7843 	mov	dptr,#___str_38
      0025A4 75 F0 80         [24] 7844 	mov	b,#0x80
      0025A7 12r0FrD0         [24] 7845 	lcall	_LCD_string_write
                                   7846 ;	.\ecen4350_lcd_v4.c:1705: setColorHighlight2();
      0025AA 12r15rB6         [24] 7847 	lcall	_setColorHighlight2
                                   7848 ;	.\ecen4350_lcd_v4.c:1706: LCD_string_write("<4> DWORD");
      0025AD 90r06rD6         [24] 7849 	mov	dptr,#___str_39
      0025B0 75 F0 80         [24] 7850 	mov	b,#0x80
      0025B3 12r0FrD0         [24] 7851 	lcall	_LCD_string_write
                                   7852 ;	.\ecen4350_lcd_v4.c:1707: setColorGray();
      0025B6 12r15rC2         [24] 7853 	lcall	_setColorGray
                                   7854 ;	.\ecen4350_lcd_v4.c:1708: LCD_string_write("\n                \n                ");
      0025B9 90r06rAE         [24] 7855 	mov	dptr,#___str_37
      0025BC 75 F0 80         [24] 7856 	mov	b,#0x80
      0025BF 12r0FrD0         [24] 7857 	lcall	_LCD_string_write
      0025C2 D0 02            [24] 7858 	pop	ar2
      0025C4 D0 03            [24] 7859 	pop	ar3
      0025C6 D0 04            [24] 7860 	pop	ar4
      0025C8 D0 05            [24] 7861 	pop	ar5
      0025CA D0 06            [24] 7862 	pop	ar6
      0025CC D0 07            [24] 7863 	pop	ar7
      0025CE                       7864 00106$:
                                   7865 ;	.\ecen4350_lcd_v4.c:1710: if (invalidType) {
      0025CE EC               [12] 7866 	mov	a,r4
      0025CF 70 03            [24] 7867 	jnz	00185$
      0025D1 02r24r6B         [24] 7868 	ljmp	00109$
      0025D4                       7869 00185$:
                                   7870 ;	.\ecen4350_lcd_v4.c:1711: setColorRed();
      0025D4 C0 07            [24] 7871 	push	ar7
      0025D6 C0 06            [24] 7872 	push	ar6
      0025D8 C0 05            [24] 7873 	push	ar5
      0025DA C0 04            [24] 7874 	push	ar4
      0025DC C0 03            [24] 7875 	push	ar3
      0025DE C0 02            [24] 7876 	push	ar2
      0025E0 12r15rD9         [24] 7877 	lcall	_setColorRed
                                   7878 ;	.\ecen4350_lcd_v4.c:1712: LCD_string_write("\n  Input Error\n  Try Again");
      0025E3 90r06rE0         [24] 7879 	mov	dptr,#___str_40
      0025E6 75 F0 80         [24] 7880 	mov	b,#0x80
      0025E9 12r0FrD0         [24] 7881 	lcall	_LCD_string_write
      0025EC D0 02            [24] 7882 	pop	ar2
      0025EE D0 03            [24] 7883 	pop	ar3
      0025F0 D0 04            [24] 7884 	pop	ar4
      0025F2 D0 05            [24] 7885 	pop	ar5
      0025F4 D0 06            [24] 7886 	pop	ar6
      0025F6 D0 07            [24] 7887 	pop	ar7
      0025F8 02r24r6B         [24] 7888 	ljmp	00109$
                                   7889 ;	.\ecen4350_lcd_v4.c:1718: while (invalidSize)
      0025FB                       7890 00137$:
      0025FB                       7891 00115$:
      0025FB 78r0A            [12] 7892 	mov	r0,#_move_invalidSize_65536_603
      0025FD E6               [12] 7893 	mov	a,@r0
      0025FE 70 03            [24] 7894 	jnz	00186$
      002600 02r27r1F         [24] 7895 	ljmp	00140$
      002603                       7896 00186$:
                                   7897 ;	.\ecen4350_lcd_v4.c:1721: setCursor(0, 260);
      002603 C0 02            [24] 7898 	push	ar2
      002605 C0 03            [24] 7899 	push	ar3
      002607 75*00 04         [24] 7900 	mov	_setCursor_PARM_2,#0x04
      00260A 75*01 01         [24] 7901 	mov	(_setCursor_PARM_2 + 1),#0x01
      00260D 90 00 00         [24] 7902 	mov	dptr,#0x0000
      002610 C0 05            [24] 7903 	push	ar5
      002612 C0 03            [24] 7904 	push	ar3
      002614 C0 02            [24] 7905 	push	ar2
      002616 12r04rB6         [24] 7906 	lcall	_setCursor
                                   7907 ;	.\ecen4350_lcd_v4.c:1722: setColorSelect();
      002619 12r15r9F         [24] 7908 	lcall	_setColorSelect
                                   7909 ;	.\ecen4350_lcd_v4.c:1723: LCD_string_write(" Input Size: ");
      00261C 90r06rFB         [24] 7910 	mov	dptr,#___str_41
      00261F 75 F0 80         [24] 7911 	mov	b,#0x80
      002622 12r0FrD0         [24] 7912 	lcall	_LCD_string_write
                                   7913 ;	.\ecen4350_lcd_v4.c:1724: selection = keyDetect();
      002625 12r10rEE         [24] 7914 	lcall	_keyDetect
      002628 E5 82            [12] 7915 	mov	a,dpl
      00262A 78r00            [12] 7916 	mov	r0,#_selection
      00262C F6               [12] 7917 	mov	@r0,a
                                   7918 ;	.\ecen4350_lcd_v4.c:1725: setColorHighlight1();
      00262D 12r15rAA         [24] 7919 	lcall	_setColorHighlight1
                                   7920 ;	.\ecen4350_lcd_v4.c:1726: write(selection);
      002630 78r00            [12] 7921 	mov	r0,#_selection
      002632 86 82            [24] 7922 	mov	dpl,@r0
      002634 12r0Fr6A         [24] 7923 	lcall	_write
                                   7924 ;	.\ecen4350_lcd_v4.c:1727: blockSize = ASCIItoHex(selection);
      002637 78r00            [12] 7925 	mov	r0,#_selection
      002639 86 82            [24] 7926 	mov	dpl,@r0
      00263B 12r13r5C         [24] 7927 	lcall	_ASCIItoHex
      00263E AC 82            [24] 7928 	mov	r4,dpl
      002640 D0 02            [24] 7929 	pop	ar2
      002642 D0 03            [24] 7930 	pop	ar3
      002644 D0 05            [24] 7931 	pop	ar5
      002646 8C 06            [24] 7932 	mov	ar6,r4
      002648 7F 00            [12] 7933 	mov	r7,#0x00
                                   7934 ;	.\ecen4350_lcd_v4.c:1728: setColorDefault();
      00264A C0 07            [24] 7935 	push	ar7
      00264C C0 06            [24] 7936 	push	ar6
      00264E C0 05            [24] 7937 	push	ar5
      002650 C0 03            [24] 7938 	push	ar3
      002652 C0 02            [24] 7939 	push	ar2
      002654 12r15r94         [24] 7940 	lcall	_setColorDefault
      002657 D0 02            [24] 7941 	pop	ar2
      002659 D0 03            [24] 7942 	pop	ar3
      00265B D0 05            [24] 7943 	pop	ar5
      00265D D0 06            [24] 7944 	pop	ar6
      00265F D0 07            [24] 7945 	pop	ar7
                                   7946 ;	.\ecen4350_lcd_v4.c:1730: if (blockSize != blockType) {
      002661 8D 03            [24] 7947 	mov	ar3,r5
      002663 7C 00            [12] 7948 	mov	r4,#0x00
      002665 EE               [12] 7949 	mov	a,r6
      002666 B5 03 0A         [24] 7950 	cjne	a,ar3,00187$
      002669 EF               [12] 7951 	mov	a,r7
      00266A B5 04 06         [24] 7952 	cjne	a,ar4,00187$
      00266D D0 03            [24] 7953 	pop	ar3
      00266F D0 02            [24] 7954 	pop	ar2
      002671 80 57            [24] 7955 	sjmp	00113$
      002673                       7956 00187$:
      002673 D0 03            [24] 7957 	pop	ar3
      002675 D0 02            [24] 7958 	pop	ar2
                                   7959 ;	.\ecen4350_lcd_v4.c:1731: setCursor(0,280);
      002677 75*00 18         [24] 7960 	mov	_setCursor_PARM_2,#0x18
      00267A 75*01 01         [24] 7961 	mov	(_setCursor_PARM_2 + 1),#0x01
      00267D 90 00 00         [24] 7962 	mov	dptr,#0x0000
      002680 C0 07            [24] 7963 	push	ar7
      002682 C0 06            [24] 7964 	push	ar6
      002684 C0 05            [24] 7965 	push	ar5
      002686 C0 03            [24] 7966 	push	ar3
      002688 C0 02            [24] 7967 	push	ar2
      00268A 12r04rB6         [24] 7968 	lcall	_setCursor
                                   7969 ;	.\ecen4350_lcd_v4.c:1732: setColorRed();
      00268D 12r15rD9         [24] 7970 	lcall	_setColorRed
                                   7971 ;	.\ecen4350_lcd_v4.c:1733: LCD_string_write(" Mismatch Error\n Try Again");
      002690 90r07r09         [24] 7972 	mov	dptr,#___str_42
      002693 75 F0 80         [24] 7973 	mov	b,#0x80
      002696 12r0FrD0         [24] 7974 	lcall	_LCD_string_write
                                   7975 ;	.\ecen4350_lcd_v4.c:1734: setCursor(0, 260);
      002699 75*00 04         [24] 7976 	mov	_setCursor_PARM_2,#0x04
      00269C 75*01 01         [24] 7977 	mov	(_setCursor_PARM_2 + 1),#0x01
      00269F 90 00 00         [24] 7978 	mov	dptr,#0x0000
      0026A2 12r04rB6         [24] 7979 	lcall	_setCursor
                                   7980 ;	.\ecen4350_lcd_v4.c:1735: setColorSelect();
      0026A5 12r15r9F         [24] 7981 	lcall	_setColorSelect
                                   7982 ;	.\ecen4350_lcd_v4.c:1736: LCD_string_write(" Input Size:");
      0026A8 90r06r33         [24] 7983 	mov	dptr,#___str_26
      0026AB 75 F0 80         [24] 7984 	mov	b,#0x80
      0026AE 12r0FrD0         [24] 7985 	lcall	_LCD_string_write
                                   7986 ;	.\ecen4350_lcd_v4.c:1737: setColorGray();
      0026B1 12r15rC2         [24] 7987 	lcall	_setColorGray
                                   7988 ;	.\ecen4350_lcd_v4.c:1738: LCD_string_write(" _");
      0026B4 90r06r40         [24] 7989 	mov	dptr,#___str_27
      0026B7 75 F0 80         [24] 7990 	mov	b,#0x80
      0026BA 12r0FrD0         [24] 7991 	lcall	_LCD_string_write
      0026BD D0 02            [24] 7992 	pop	ar2
      0026BF D0 03            [24] 7993 	pop	ar3
      0026C1 D0 05            [24] 7994 	pop	ar5
      0026C3 D0 06            [24] 7995 	pop	ar6
      0026C5 D0 07            [24] 7996 	pop	ar7
      0026C7 02r25rFB         [24] 7997 	ljmp	00115$
      0026CA                       7998 00113$:
                                   7999 ;	.\ecen4350_lcd_v4.c:1740: setCursor(0, 260);
      0026CA 75*00 04         [24] 8000 	mov	_setCursor_PARM_2,#0x04
      0026CD 75*01 01         [24] 8001 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026D0 90 00 00         [24] 8002 	mov	dptr,#0x0000
      0026D3 C0 07            [24] 8003 	push	ar7
      0026D5 C0 06            [24] 8004 	push	ar6
      0026D7 C0 05            [24] 8005 	push	ar5
      0026D9 C0 03            [24] 8006 	push	ar3
      0026DB C0 02            [24] 8007 	push	ar2
      0026DD 12r04rB6         [24] 8008 	lcall	_setCursor
                                   8009 ;	.\ecen4350_lcd_v4.c:1741: setColorDefault();
      0026E0 12r15r94         [24] 8010 	lcall	_setColorDefault
                                   8011 ;	.\ecen4350_lcd_v4.c:1742: LCD_string_write(" Input Size: ");
      0026E3 90r06rFB         [24] 8012 	mov	dptr,#___str_41
      0026E6 75 F0 80         [24] 8013 	mov	b,#0x80
      0026E9 12r0FrD0         [24] 8014 	lcall	_LCD_string_write
                                   8015 ;	.\ecen4350_lcd_v4.c:1743: setColorHighlight2();
      0026EC 12r15rB6         [24] 8016 	lcall	_setColorHighlight2
                                   8017 ;	.\ecen4350_lcd_v4.c:1744: write(selection);
      0026EF 78r00            [12] 8018 	mov	r0,#_selection
      0026F1 86 82            [24] 8019 	mov	dpl,@r0
      0026F3 12r0Fr6A         [24] 8020 	lcall	_write
                                   8021 ;	.\ecen4350_lcd_v4.c:1745: invalidSize = 0;
      0026F6 78r0A            [12] 8022 	mov	r0,#_move_invalidSize_65536_603
      0026F8 76 00            [12] 8023 	mov	@r0,#0x00
                                   8024 ;	.\ecen4350_lcd_v4.c:1746: setCursor(0,280);
      0026FA 75*00 18         [24] 8025 	mov	_setCursor_PARM_2,#0x18
      0026FD 75*01 01         [24] 8026 	mov	(_setCursor_PARM_2 + 1),#0x01
      002700 90 00 00         [24] 8027 	mov	dptr,#0x0000
      002703 12r04rB6         [24] 8028 	lcall	_setCursor
                                   8029 ;	.\ecen4350_lcd_v4.c:1747: setColorGreen();
      002706 12r15rEF         [24] 8030 	lcall	_setColorGreen
                                   8031 ;	.\ecen4350_lcd_v4.c:1748: LCD_string_write(" Match Confirmed\n                ");
      002709 90r07r24         [24] 8032 	mov	dptr,#___str_43
      00270C 75 F0 80         [24] 8033 	mov	b,#0x80
      00270F 12r0FrD0         [24] 8034 	lcall	_LCD_string_write
      002712 D0 02            [24] 8035 	pop	ar2
      002714 D0 03            [24] 8036 	pop	ar3
      002716 D0 05            [24] 8037 	pop	ar5
      002718 D0 06            [24] 8038 	pop	ar6
      00271A D0 07            [24] 8039 	pop	ar7
      00271C 02r25rFB         [24] 8040 	ljmp	00115$
                                   8041 ;	.\ecen4350_lcd_v4.c:1754: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      00271F                       8042 00140$:
      00271F 78r08            [12] 8043 	mov	r0,#_move_sourceAddress_65536_603
      002721 EE               [12] 8044 	mov	a,r6
      002722 26               [12] 8045 	add	a,@r0
      002723 FE               [12] 8046 	mov	r6,a
      002724 EF               [12] 8047 	mov	a,r7
      002725 08               [12] 8048 	inc	r0
      002726 36               [12] 8049 	addc	a,@r0
      002727 FF               [12] 8050 	mov	r7,a
      002728 78r08            [12] 8051 	mov	r0,#_move_sourceAddress_65536_603
      00272A 86*55            [24] 8052 	mov	_move_i_131072_612,@r0
      00272C 08               [12] 8053 	inc	r0
      00272D 86*56            [24] 8054 	mov	(_move_i_131072_612 + 1),@r0
      00272F                       8055 00125$:
      00272F C3               [12] 8056 	clr	c
      002730 E5*55            [12] 8057 	mov	a,_move_i_131072_612
      002732 9E               [12] 8058 	subb	a,r6
      002733 E5*56            [12] 8059 	mov	a,(_move_i_131072_612 + 1)
      002735 9F               [12] 8060 	subb	a,r7
      002736 50 37            [24] 8061 	jnc	00121$
                                   8062 ;	.\ecen4350_lcd_v4.c:1755: d = (unsigned char __xdata*)(destAddress);
      002738 8A*53            [24] 8063 	mov	_move_d_65536_603,r2
      00273A 8B*54            [24] 8064 	mov	(_move_d_65536_603 + 1),r3
                                   8065 ;	.\ecen4350_lcd_v4.c:1756: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      00273C 85*55 82         [24] 8066 	mov	dpl,_move_i_131072_612
      00273F 85*56 83         [24] 8067 	mov	dph,(_move_i_131072_612 + 1)
                                   8068 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8069 ;	assignBit
      002742 C2 B5            [12] 8070 	clr	_P3_5
                                   8071 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002744 E0               [24] 8072 	movx	a,@dptr
      002745 FD               [12] 8073 	mov	r5,a
                                   8074 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8075 ;	assignBit
      002746 D2 B5            [12] 8076 	setb	_P3_5
                                   8077 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8078 ;	assignBit
      002748 C2 B5            [12] 8079 	clr	_P3_5
                                   8080 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      00274A 85*53 82         [24] 8081 	mov	dpl,_move_d_65536_603
      00274D 85*54 83         [24] 8082 	mov	dph,(_move_d_65536_603 + 1)
      002750 ED               [12] 8083 	mov	a,r5
      002751 F0               [24] 8084 	movx	@dptr,a
                                   8085 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8086 ;	assignBit
      002752 D2 B5            [12] 8087 	setb	_P3_5
                                   8088 ;	.\ecen4350_lcd_v4.c:1757: if (destAddress == 0xFFFF) {						// check end of RAM
      002754 BA FF 09         [24] 8089 	cjne	r2,#0xff,00119$
      002757 BB FF 06         [24] 8090 	cjne	r3,#0xff,00119$
                                   8091 ;	.\ecen4350_lcd_v4.c:1758: destAddress = 0x0000;
      00275A 7A 00            [12] 8092 	mov	r2,#0x00
      00275C 7B 00            [12] 8093 	mov	r3,#0x00
      00275E 80 05            [24] 8094 	sjmp	00126$
      002760                       8095 00119$:
                                   8096 ;	.\ecen4350_lcd_v4.c:1760: destAddress++;
      002760 0A               [12] 8097 	inc	r2
      002761 BA 00 01         [24] 8098 	cjne	r2,#0x00,00191$
      002764 0B               [12] 8099 	inc	r3
      002765                       8100 00191$:
      002765                       8101 00126$:
                                   8102 ;	.\ecen4350_lcd_v4.c:1754: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      002765 05*55            [12] 8103 	inc	_move_i_131072_612
      002767 E4               [12] 8104 	clr	a
      002768 B5*55 C4         [24] 8105 	cjne	a,_move_i_131072_612,00125$
      00276B 05*56            [12] 8106 	inc	(_move_i_131072_612 + 1)
      00276D 80 C0            [24] 8107 	sjmp	00125$
      00276F                       8108 00121$:
                                   8109 ;	.\ecen4350_lcd_v4.c:1764: setCursor(0, 300);
      00276F 75*00 2C         [24] 8110 	mov	_setCursor_PARM_2,#0x2c
      002772 75*01 01         [24] 8111 	mov	(_setCursor_PARM_2 + 1),#0x01
      002775 90 00 00         [24] 8112 	mov	dptr,#0x0000
      002778 12r04rB6         [24] 8113 	lcall	_setCursor
                                   8114 ;	.\ecen4350_lcd_v4.c:1765: setColorGreen();
      00277B 12r15rEF         [24] 8115 	lcall	_setColorGreen
                                   8116 ;	.\ecen4350_lcd_v4.c:1766: LCD_string_write(" Move Complete\n");
      00277E 90r07rC7         [24] 8117 	mov	dptr,#___str_57
      002781 75 F0 80         [24] 8118 	mov	b,#0x80
      002784 12r0FrD0         [24] 8119 	lcall	_LCD_string_write
                                   8120 ;	.\ecen4350_lcd_v4.c:1767: delay(60);
      002787 90 00 3C         [24] 8121 	mov	dptr,#0x003c
      00278A 12r00rE0         [24] 8122 	lcall	_delay
                                   8123 ;	.\ecen4350_lcd_v4.c:1768: selection = 'null';
      00278D 78r00            [12] 8124 	mov	r0,#_selection
      00278F 76 6E            [12] 8125 	mov	@r0,#0x6e
                                   8126 ;	.\ecen4350_lcd_v4.c:1769: return;
                                   8127 ;	.\ecen4350_lcd_v4.c:1770: }
      002791 22               [24] 8128 	ret
                                   8129 ;------------------------------------------------------------
                                   8130 ;Allocation info for local variables in function 'edit'
                                   8131 ;------------------------------------------------------------
                                   8132 ;__1310720151              Allocated to registers 
                                   8133 ;d                         Allocated with name '_edit_d_65536_622'
                                   8134 ;__1310720152              Allocated to registers 
                                   8135 ;map_address               Allocated to registers 
                                   8136 ;d                         Allocated to registers 
                                   8137 ;__1310720154              Allocated to registers 
                                   8138 ;__1310720155              Allocated to registers 
                                   8139 ;map_address               Allocated to registers 
                                   8140 ;d                         Allocated to registers 
                                   8141 ;__2621440157              Allocated to registers 
                                   8142 ;__2621440158              Allocated to registers 
                                   8143 ;map_address               Allocated to registers 
                                   8144 ;d                         Allocated to registers r2 
                                   8145 ;__2621440160              Allocated to registers 
                                   8146 ;__2621440161              Allocated to registers 
                                   8147 ;map_address               Allocated to registers 
                                   8148 ;d                         Allocated to registers 
                                   8149 ;__2621440163              Allocated to registers 
                                   8150 ;__2621440164              Allocated to registers 
                                   8151 ;map_address               Allocated to registers 
                                   8152 ;d                         Allocated to registers 
                                   8153 ;__2621440166              Allocated to registers 
                                   8154 ;__2621440167              Allocated to registers 
                                   8155 ;map_address               Allocated to registers 
                                   8156 ;d                         Allocated to registers 
                                   8157 ;address                   Allocated to registers r5 r6 
                                   8158 ;value                     Allocated to registers r7 
                                   8159 ;exit                      Allocated with name '_edit_exit_65536_622'
                                   8160 ;invalid                   Allocated with name '_edit_invalid_65536_622'
                                   8161 ;------------------------------------------------------------
                                   8162 ;	.\ecen4350_lcd_v4.c:1772: void edit(){
                                   8163 ;	-----------------------------------------
                                   8164 ;	 function edit
                                   8165 ;	-----------------------------------------
      002792                       8166 _edit:
                                   8167 ;	.\ecen4350_lcd_v4.c:1776: __idata unsigned char exit = 1;
      002792 78r0B            [12] 8168 	mov	r0,#_edit_exit_65536_622
      002794 76 01            [12] 8169 	mov	@r0,#0x01
                                   8170 ;	.\ecen4350_lcd_v4.c:1779: clearLCD();
      002796 12r0Dr53         [24] 8171 	lcall	_clearLCD
                                   8172 ;	.\ecen4350_lcd_v4.c:1782: fillTop(GRAY);
      002799 90 D6 BA         [24] 8173 	mov	dptr,#0xd6ba
      00279C 12r0Br86         [24] 8174 	lcall	_fillTop
                                   8175 ;	.\ecen4350_lcd_v4.c:1783: setTextSize(5);
      00279F 75 82 05         [24] 8176 	mov	dpl,#0x05
      0027A2 12r04rD0         [24] 8177 	lcall	_setTextSize
                                   8178 ;	.\ecen4350_lcd_v4.c:1784: setColorMenu();
      0027A5 12r15rCD         [24] 8179 	lcall	_setColorMenu
                                   8180 ;	.\ecen4350_lcd_v4.c:1785: setCursor(30, 0);
      0027A8 E4               [12] 8181 	clr	a
      0027A9 F5*00            [12] 8182 	mov	_setCursor_PARM_2,a
      0027AB F5*01            [12] 8183 	mov	(_setCursor_PARM_2 + 1),a
      0027AD 90 00 1E         [24] 8184 	mov	dptr,#0x001e
      0027B0 12r04rB6         [24] 8185 	lcall	_setCursor
                                   8186 ;	.\ecen4350_lcd_v4.c:1786: LCD_string_write("[EDIT]\n");
      0027B3 90r07rD7         [24] 8187 	mov	dptr,#___str_58
      0027B6 75 F0 80         [24] 8188 	mov	b,#0x80
      0027B9 12r0FrD0         [24] 8189 	lcall	_LCD_string_write
                                   8190 ;	.\ecen4350_lcd_v4.c:1787: setTextSize(2);
      0027BC 75 82 02         [24] 8191 	mov	dpl,#0x02
      0027BF 12r04rD0         [24] 8192 	lcall	_setTextSize
                                   8193 ;	.\ecen4350_lcd_v4.c:1788: setColorDefault();
      0027C2 12r15r94         [24] 8194 	lcall	_setColorDefault
                                   8195 ;	.\ecen4350_lcd_v4.c:1789: setCursor(0, 60);
      0027C5 75*00 3C         [24] 8196 	mov	_setCursor_PARM_2,#0x3c
      0027C8 75*01 00         [24] 8197 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027CB 90 00 00         [24] 8198 	mov	dptr,#0x0000
      0027CE 12r04rB6         [24] 8199 	lcall	_setCursor
                                   8200 ;	.\ecen4350_lcd_v4.c:1790: LCD_string_write(" Edit Address:");
      0027D1 90r07rDF         [24] 8201 	mov	dptr,#___str_59
      0027D4 75 F0 80         [24] 8202 	mov	b,#0x80
      0027D7 12r0FrD0         [24] 8203 	lcall	_LCD_string_write
                                   8204 ;	.\ecen4350_lcd_v4.c:1791: setCursor(0, 80);
      0027DA 75*00 50         [24] 8205 	mov	_setCursor_PARM_2,#0x50
      0027DD 75*01 00         [24] 8206 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027E0 90 00 00         [24] 8207 	mov	dptr,#0x0000
      0027E3 12r04rB6         [24] 8208 	lcall	_setCursor
                                   8209 ;	.\ecen4350_lcd_v4.c:1792: setColorGray();
      0027E6 12r15rC2         [24] 8210 	lcall	_setColorGray
                                   8211 ;	.\ecen4350_lcd_v4.c:1793: LCD_string_write(" 0x____");
      0027E9 90r05rF4         [24] 8212 	mov	dptr,#___str_23
      0027EC 75 F0 80         [24] 8213 	mov	b,#0x80
      0027EF 12r0FrD0         [24] 8214 	lcall	_LCD_string_write
                                   8215 ;	.\ecen4350_lcd_v4.c:1794: setCursor(0, 110);
      0027F2 75*00 6E         [24] 8216 	mov	_setCursor_PARM_2,#0x6e
      0027F5 75*01 00         [24] 8217 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027F8 90 00 00         [24] 8218 	mov	dptr,#0x0000
      0027FB 12r04rB6         [24] 8219 	lcall	_setCursor
                                   8220 ;	.\ecen4350_lcd_v4.c:1795: setColorDefault();
      0027FE 12r15r94         [24] 8221 	lcall	_setColorDefault
                                   8222 ;	.\ecen4350_lcd_v4.c:1796: LCD_string_write(" Location Contents:\n");
      002801 90r07rEE         [24] 8223 	mov	dptr,#___str_60
      002804 75 F0 80         [24] 8224 	mov	b,#0x80
      002807 12r0FrD0         [24] 8225 	lcall	_LCD_string_write
                                   8226 ;	.\ecen4350_lcd_v4.c:1797: setColorGray();
      00280A 12r15rC2         [24] 8227 	lcall	_setColorGray
                                   8228 ;	.\ecen4350_lcd_v4.c:1798: LCD_string_write(" __");
      00280D 90r08r03         [24] 8229 	mov	dptr,#___str_61
      002810 75 F0 80         [24] 8230 	mov	b,#0x80
      002813 12r0FrD0         [24] 8231 	lcall	_LCD_string_write
                                   8232 ;	.\ecen4350_lcd_v4.c:1799: setCursor(0, 160);
      002816 75*00 A0         [24] 8233 	mov	_setCursor_PARM_2,#0xa0
      002819 75*01 00         [24] 8234 	mov	(_setCursor_PARM_2 + 1),#0x00
      00281C 90 00 00         [24] 8235 	mov	dptr,#0x0000
      00281F 12r04rB6         [24] 8236 	lcall	_setCursor
                                   8237 ;	.\ecen4350_lcd_v4.c:1800: setColorDefault();
      002822 12r15r94         [24] 8238 	lcall	_setColorDefault
                                   8239 ;	.\ecen4350_lcd_v4.c:1801: LCD_string_write(" Enter New Value:\n");
      002825 90r08r07         [24] 8240 	mov	dptr,#___str_62
      002828 75 F0 80         [24] 8241 	mov	b,#0x80
      00282B 12r0FrD0         [24] 8242 	lcall	_LCD_string_write
                                   8243 ;	.\ecen4350_lcd_v4.c:1802: setColorGray();
      00282E 12r15rC2         [24] 8244 	lcall	_setColorGray
                                   8245 ;	.\ecen4350_lcd_v4.c:1803: LCD_string_write(" __");
      002831 90r08r03         [24] 8246 	mov	dptr,#___str_61
      002834 75 F0 80         [24] 8247 	mov	b,#0x80
      002837 12r0FrD0         [24] 8248 	lcall	_LCD_string_write
                                   8249 ;	.\ecen4350_lcd_v4.c:1804: setCursor(0,210);
      00283A 75*00 D2         [24] 8250 	mov	_setCursor_PARM_2,#0xd2
      00283D 75*01 00         [24] 8251 	mov	(_setCursor_PARM_2 + 1),#0x00
      002840 90 00 00         [24] 8252 	mov	dptr,#0x0000
      002843 12r04rB6         [24] 8253 	lcall	_setCursor
                                   8254 ;	.\ecen4350_lcd_v4.c:1805: setColorDefault();
      002846 12r15r94         [24] 8255 	lcall	_setColorDefault
                                   8256 ;	.\ecen4350_lcd_v4.c:1806: LCD_string_write(" Choose Next Action:\n");
      002849 90r08r1A         [24] 8257 	mov	dptr,#___str_63
      00284C 75 F0 80         [24] 8258 	mov	b,#0x80
      00284F 12r0FrD0         [24] 8259 	lcall	_LCD_string_write
                                   8260 ;	.\ecen4350_lcd_v4.c:1807: setColorGray();
      002852 12r15rC2         [24] 8261 	lcall	_setColorGray
                                   8262 ;	.\ecen4350_lcd_v4.c:1808: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002855 90r08r30         [24] 8263 	mov	dptr,#___str_64
      002858 75 F0 80         [24] 8264 	mov	b,#0x80
      00285B 12r0FrD0         [24] 8265 	lcall	_LCD_string_write
                                   8266 ;	.\ecen4350_lcd_v4.c:1809: LCD_string_write("  <0> Exit");
      00285E 90r08r56         [24] 8267 	mov	dptr,#___str_65
      002861 75 F0 80         [24] 8268 	mov	b,#0x80
      002864 12r0FrD0         [24] 8269 	lcall	_LCD_string_write
                                   8270 ;	.\ecen4350_lcd_v4.c:1816: setColorSelect();
      002867 12r15r9F         [24] 8271 	lcall	_setColorSelect
                                   8272 ;	.\ecen4350_lcd_v4.c:1817: setCursor(0, 60);
      00286A 75*00 3C         [24] 8273 	mov	_setCursor_PARM_2,#0x3c
      00286D 75*01 00         [24] 8274 	mov	(_setCursor_PARM_2 + 1),#0x00
      002870 90 00 00         [24] 8275 	mov	dptr,#0x0000
      002873 12r04rB6         [24] 8276 	lcall	_setCursor
                                   8277 ;	.\ecen4350_lcd_v4.c:1818: LCD_string_write(" Edit Address:");
      002876 90r07rDF         [24] 8278 	mov	dptr,#___str_59
      002879 75 F0 80         [24] 8279 	mov	b,#0x80
      00287C 12r0FrD0         [24] 8280 	lcall	_LCD_string_write
                                   8281 ;	.\ecen4350_lcd_v4.c:1819: setCursor(0, 80);
      00287F 75*00 50         [24] 8282 	mov	_setCursor_PARM_2,#0x50
      002882 75*01 00         [24] 8283 	mov	(_setCursor_PARM_2 + 1),#0x00
      002885 90 00 00         [24] 8284 	mov	dptr,#0x0000
      002888 12r04rB6         [24] 8285 	lcall	_setCursor
                                   8286 ;	.\ecen4350_lcd_v4.c:1820: LCD_string_write(" ");
      00288B 90r06r56         [24] 8287 	mov	dptr,#___str_29
      00288E 75 F0 80         [24] 8288 	mov	b,#0x80
      002891 12r0FrD0         [24] 8289 	lcall	_LCD_string_write
                                   8290 ;	.\ecen4350_lcd_v4.c:1821: setColorHighlight1();
      002894 12r15rAA         [24] 8291 	lcall	_setColorHighlight1
                                   8292 ;	.\ecen4350_lcd_v4.c:1822: LCD_string_write("0x");
      002897 90r05r29         [24] 8293 	mov	dptr,#___str_2
      00289A 75 F0 80         [24] 8294 	mov	b,#0x80
      00289D 12r0FrD0         [24] 8295 	lcall	_LCD_string_write
                                   8296 ;	.\ecen4350_lcd_v4.c:1823: address = inputAddress();		// input 16-bit address and store in memory
      0028A0 12r16r05         [24] 8297 	lcall	_inputAddress
      0028A3 AD 82            [24] 8298 	mov	r5,dpl
      0028A5 AE 83            [24] 8299 	mov	r6,dph
                                   8300 ;	.\ecen4350_lcd_v4.c:1824: d = (unsigned char __xdata*)address;
      0028A7 8D 03            [24] 8301 	mov	ar3,r5
      0028A9 8E 04            [24] 8302 	mov	ar4,r6
                                   8303 ;	.\ecen4350_lcd_v4.c:1827: setColorDefault();
      0028AB C0 06            [24] 8304 	push	ar6
      0028AD C0 05            [24] 8305 	push	ar5
      0028AF C0 04            [24] 8306 	push	ar4
      0028B1 C0 03            [24] 8307 	push	ar3
      0028B3 12r15r94         [24] 8308 	lcall	_setColorDefault
                                   8309 ;	.\ecen4350_lcd_v4.c:1828: setCursor(0, 60);
      0028B6 75*00 3C         [24] 8310 	mov	_setCursor_PARM_2,#0x3c
      0028B9 75*01 00         [24] 8311 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028BC 90 00 00         [24] 8312 	mov	dptr,#0x0000
      0028BF 12r04rB6         [24] 8313 	lcall	_setCursor
                                   8314 ;	.\ecen4350_lcd_v4.c:1829: LCD_string_write(" Edit Address:");
      0028C2 90r07rDF         [24] 8315 	mov	dptr,#___str_59
      0028C5 75 F0 80         [24] 8316 	mov	b,#0x80
      0028C8 12r0FrD0         [24] 8317 	lcall	_LCD_string_write
                                   8318 ;	.\ecen4350_lcd_v4.c:1830: setCursor(0, 80);
      0028CB 75*00 50         [24] 8319 	mov	_setCursor_PARM_2,#0x50
      0028CE 75*01 00         [24] 8320 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028D1 90 00 00         [24] 8321 	mov	dptr,#0x0000
      0028D4 12r04rB6         [24] 8322 	lcall	_setCursor
                                   8323 ;	.\ecen4350_lcd_v4.c:1831: LCD_string_write(" ");
      0028D7 90r06r56         [24] 8324 	mov	dptr,#___str_29
      0028DA 75 F0 80         [24] 8325 	mov	b,#0x80
      0028DD 12r0FrD0         [24] 8326 	lcall	_LCD_string_write
                                   8327 ;	.\ecen4350_lcd_v4.c:1832: setColorHighlight2();
      0028E0 12r15rB6         [24] 8328 	lcall	_setColorHighlight2
                                   8329 ;	.\ecen4350_lcd_v4.c:1833: LCD_string_write("0x");
      0028E3 90r05r29         [24] 8330 	mov	dptr,#___str_2
      0028E6 75 F0 80         [24] 8331 	mov	b,#0x80
      0028E9 12r0FrD0         [24] 8332 	lcall	_LCD_string_write
      0028EC D0 03            [24] 8333 	pop	ar3
      0028EE D0 04            [24] 8334 	pop	ar4
      0028F0 D0 05            [24] 8335 	pop	ar5
      0028F2 D0 06            [24] 8336 	pop	ar6
                                   8337 ;	.\ecen4350_lcd_v4.c:1834: print16Hex(address);		// print 16-bit address from stored memory
      0028F4 8D 82            [24] 8338 	mov	dpl,r5
      0028F6 8E 83            [24] 8339 	mov	dph,r6
      0028F8 C0 06            [24] 8340 	push	ar6
      0028FA C0 05            [24] 8341 	push	ar5
      0028FC C0 04            [24] 8342 	push	ar4
      0028FE C0 03            [24] 8343 	push	ar3
      002900 12r14rB8         [24] 8344 	lcall	_print16Hex
                                   8345 ;	.\ecen4350_lcd_v4.c:1837: setCursor(0, 110);
      002903 75*00 6E         [24] 8346 	mov	_setCursor_PARM_2,#0x6e
      002906 75*01 00         [24] 8347 	mov	(_setCursor_PARM_2 + 1),#0x00
      002909 90 00 00         [24] 8348 	mov	dptr,#0x0000
      00290C 12r04rB6         [24] 8349 	lcall	_setCursor
                                   8350 ;	.\ecen4350_lcd_v4.c:1838: setColorDefault();
      00290F 12r15r94         [24] 8351 	lcall	_setColorDefault
                                   8352 ;	.\ecen4350_lcd_v4.c:1839: LCD_string_write("\n ");
      002912 90r08r61         [24] 8353 	mov	dptr,#___str_66
      002915 75 F0 80         [24] 8354 	mov	b,#0x80
      002918 12r0FrD0         [24] 8355 	lcall	_LCD_string_write
                                   8356 ;	.\ecen4350_lcd_v4.c:1840: setColorHighlight2();
      00291B 12r15rB6         [24] 8357 	lcall	_setColorHighlight2
      00291E D0 03            [24] 8358 	pop	ar3
      002920 D0 04            [24] 8359 	pop	ar4
                                   8360 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8361 ;	assignBit
      002922 C2 B5            [12] 8362 	clr	_P3_5
                                   8363 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002924 8B 82            [24] 8364 	mov	dpl,r3
      002926 8C 83            [24] 8365 	mov	dph,r4
      002928 E0               [24] 8366 	movx	a,@dptr
      002929 F5 82            [12] 8367 	mov	dpl,a
                                   8368 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8369 ;	assignBit
      00292B D2 B5            [12] 8370 	setb	_P3_5
                                   8371 ;	.\ecen4350_lcd_v4.c:1841: print8Hex(ramRead8(d));
      00292D C0 04            [24] 8372 	push	ar4
      00292F C0 03            [24] 8373 	push	ar3
      002931 12r14rA1         [24] 8374 	lcall	_print8Hex
                                   8375 ;	.\ecen4350_lcd_v4.c:1844: setCursor(0, 160);
      002934 75*00 A0         [24] 8376 	mov	_setCursor_PARM_2,#0xa0
      002937 75*01 00         [24] 8377 	mov	(_setCursor_PARM_2 + 1),#0x00
      00293A 90 00 00         [24] 8378 	mov	dptr,#0x0000
      00293D 12r04rB6         [24] 8379 	lcall	_setCursor
                                   8380 ;	.\ecen4350_lcd_v4.c:1845: setColorSelect();
      002940 12r15r9F         [24] 8381 	lcall	_setColorSelect
                                   8382 ;	.\ecen4350_lcd_v4.c:1846: LCD_string_write(" Enter New Value:\n ");
      002943 90r08r64         [24] 8383 	mov	dptr,#___str_67
      002946 75 F0 80         [24] 8384 	mov	b,#0x80
      002949 12r0FrD0         [24] 8385 	lcall	_LCD_string_write
                                   8386 ;	.\ecen4350_lcd_v4.c:1847: setColorHighlight1();
      00294C 12r15rAA         [24] 8387 	lcall	_setColorHighlight1
                                   8388 ;	.\ecen4350_lcd_v4.c:1848: selection = keyDetect();
      00294F 12r10rEE         [24] 8389 	lcall	_keyDetect
      002952 AA 82            [24] 8390 	mov	r2,dpl
      002954 78r00            [12] 8391 	mov	r0,#_selection
      002956 A6 02            [24] 8392 	mov	@r0,ar2
                                   8393 ;	.\ecen4350_lcd_v4.c:1849: write(selection);
      002958 8A 82            [24] 8394 	mov	dpl,r2
      00295A 12r0Fr6A         [24] 8395 	lcall	_write
                                   8396 ;	.\ecen4350_lcd_v4.c:1850: selection = ASCIItoHex(selection);
      00295D 78r00            [12] 8397 	mov	r0,#_selection
      00295F 86 82            [24] 8398 	mov	dpl,@r0
      002961 12r13r5C         [24] 8399 	lcall	_ASCIItoHex
      002964 AA 82            [24] 8400 	mov	r2,dpl
      002966 78r00            [12] 8401 	mov	r0,#_selection
      002968 A6 02            [24] 8402 	mov	@r0,ar2
                                   8403 ;	.\ecen4350_lcd_v4.c:1851: value |= selection * 16;
      00296A EA               [12] 8404 	mov	a,r2
      00296B C4               [12] 8405 	swap	a
      00296C 54 F0            [12] 8406 	anl	a,#0xf0
      00296E FA               [12] 8407 	mov	r2,a
                                   8408 ;	.\ecen4350_lcd_v4.c:1852: selection = keyDetect();
      00296F C0 02            [24] 8409 	push	ar2
      002971 12r10rEE         [24] 8410 	lcall	_keyDetect
      002974 AF 82            [24] 8411 	mov	r7,dpl
      002976 78r00            [12] 8412 	mov	r0,#_selection
      002978 A6 07            [24] 8413 	mov	@r0,ar7
                                   8414 ;	.\ecen4350_lcd_v4.c:1853: write(selection);
      00297A 8F 82            [24] 8415 	mov	dpl,r7
      00297C 12r0Fr6A         [24] 8416 	lcall	_write
                                   8417 ;	.\ecen4350_lcd_v4.c:1854: selection = ASCIItoHex(selection);
      00297F 78r00            [12] 8418 	mov	r0,#_selection
      002981 86 82            [24] 8419 	mov	dpl,@r0
      002983 12r13r5C         [24] 8420 	lcall	_ASCIItoHex
      002986 AF 82            [24] 8421 	mov	r7,dpl
      002988 D0 02            [24] 8422 	pop	ar2
      00298A D0 03            [24] 8423 	pop	ar3
      00298C D0 04            [24] 8424 	pop	ar4
      00298E D0 05            [24] 8425 	pop	ar5
      002990 D0 06            [24] 8426 	pop	ar6
      002992 78r00            [12] 8427 	mov	r0,#_selection
      002994 A6 07            [24] 8428 	mov	@r0,ar7
                                   8429 ;	.\ecen4350_lcd_v4.c:1855: value |= selection;
      002996 EA               [12] 8430 	mov	a,r2
      002997 42 07            [12] 8431 	orl	ar7,a
                                   8432 ;	.\ecen4350_lcd_v4.c:1858: setColorDefault();
      002999 C0 07            [24] 8433 	push	ar7
      00299B C0 06            [24] 8434 	push	ar6
      00299D C0 05            [24] 8435 	push	ar5
      00299F C0 04            [24] 8436 	push	ar4
      0029A1 C0 03            [24] 8437 	push	ar3
      0029A3 12r15r94         [24] 8438 	lcall	_setColorDefault
                                   8439 ;	.\ecen4350_lcd_v4.c:1859: setCursor(0, 160);
      0029A6 75*00 A0         [24] 8440 	mov	_setCursor_PARM_2,#0xa0
      0029A9 75*01 00         [24] 8441 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029AC 90 00 00         [24] 8442 	mov	dptr,#0x0000
      0029AF 12r04rB6         [24] 8443 	lcall	_setCursor
                                   8444 ;	.\ecen4350_lcd_v4.c:1860: LCD_string_write(" Enter New Value:\n ");
      0029B2 90r08r64         [24] 8445 	mov	dptr,#___str_67
      0029B5 75 F0 80         [24] 8446 	mov	b,#0x80
      0029B8 12r0FrD0         [24] 8447 	lcall	_LCD_string_write
                                   8448 ;	.\ecen4350_lcd_v4.c:1861: setColorHighlight2();
      0029BB 12r15rB6         [24] 8449 	lcall	_setColorHighlight2
      0029BE D0 03            [24] 8450 	pop	ar3
      0029C0 D0 04            [24] 8451 	pop	ar4
      0029C2 D0 05            [24] 8452 	pop	ar5
      0029C4 D0 06            [24] 8453 	pop	ar6
      0029C6 D0 07            [24] 8454 	pop	ar7
                                   8455 ;	.\ecen4350_lcd_v4.c:1862: print8Hex(value);
      0029C8 8F 82            [24] 8456 	mov	dpl,r7
      0029CA C0 07            [24] 8457 	push	ar7
      0029CC C0 06            [24] 8458 	push	ar6
      0029CE C0 05            [24] 8459 	push	ar5
      0029D0 C0 04            [24] 8460 	push	ar4
      0029D2 C0 03            [24] 8461 	push	ar3
      0029D4 12r14rA1         [24] 8462 	lcall	_print8Hex
      0029D7 D0 03            [24] 8463 	pop	ar3
      0029D9 D0 04            [24] 8464 	pop	ar4
      0029DB D0 05            [24] 8465 	pop	ar5
      0029DD D0 06            [24] 8466 	pop	ar6
      0029DF D0 07            [24] 8467 	pop	ar7
                                   8468 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8469 ;	assignBit
      0029E1 C2 B5            [12] 8470 	clr	_P3_5
                                   8471 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      0029E3 8B 82            [24] 8472 	mov	dpl,r3
      0029E5 8C 83            [24] 8473 	mov	dph,r4
      0029E7 EF               [12] 8474 	mov	a,r7
      0029E8 F0               [24] 8475 	movx	@dptr,a
                                   8476 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8477 ;	assignBit
      0029E9 D2 B5            [12] 8478 	setb	_P3_5
                                   8479 ;	.\ecen4350_lcd_v4.c:1867: setCursor(0, 210);
      0029EB 75*00 D2         [24] 8480 	mov	_setCursor_PARM_2,#0xd2
      0029EE 75*01 00         [24] 8481 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029F1 90 00 00         [24] 8482 	mov	dptr,#0x0000
      0029F4 C0 06            [24] 8483 	push	ar6
      0029F6 C0 05            [24] 8484 	push	ar5
      0029F8 12r04rB6         [24] 8485 	lcall	_setCursor
                                   8486 ;	.\ecen4350_lcd_v4.c:1868: setColorSelect();
      0029FB 12r15r9F         [24] 8487 	lcall	_setColorSelect
                                   8488 ;	.\ecen4350_lcd_v4.c:1869: LCD_string_write(" Choose Next Action:\n");
      0029FE 90r08r1A         [24] 8489 	mov	dptr,#___str_63
      002A01 75 F0 80         [24] 8490 	mov	b,#0x80
      002A04 12r0FrD0         [24] 8491 	lcall	_LCD_string_write
                                   8492 ;	.\ecen4350_lcd_v4.c:1870: setColorWhite();
      002A07 12r15rE4         [24] 8493 	lcall	_setColorWhite
                                   8494 ;	.\ecen4350_lcd_v4.c:1871: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002A0A 90r08r30         [24] 8495 	mov	dptr,#___str_64
      002A0D 75 F0 80         [24] 8496 	mov	b,#0x80
      002A10 12r0FrD0         [24] 8497 	lcall	_LCD_string_write
                                   8498 ;	.\ecen4350_lcd_v4.c:1872: LCD_string_write("  <0> Exit");
      002A13 90r08r56         [24] 8499 	mov	dptr,#___str_65
      002A16 75 F0 80         [24] 8500 	mov	b,#0x80
      002A19 12r0FrD0         [24] 8501 	lcall	_LCD_string_write
      002A1C D0 05            [24] 8502 	pop	ar5
      002A1E D0 06            [24] 8503 	pop	ar6
                                   8504 ;	.\ecen4350_lcd_v4.c:1878: while(exit){
      002A20                       8505 00109$:
      002A20 78r0B            [12] 8506 	mov	r0,#_edit_exit_65536_622
      002A22 E6               [12] 8507 	mov	a,@r0
      002A23 70 01            [24] 8508 	jnz	00150$
      002A25 22               [24] 8509 	ret
      002A26                       8510 00150$:
                                   8511 ;	.\ecen4350_lcd_v4.c:1879: selection = keyDetect();
      002A26 C0 06            [24] 8512 	push	ar6
      002A28 C0 05            [24] 8513 	push	ar5
      002A2A 12r10rEE         [24] 8514 	lcall	_keyDetect
      002A2D AF 82            [24] 8515 	mov	r7,dpl
      002A2F D0 05            [24] 8516 	pop	ar5
      002A31 D0 06            [24] 8517 	pop	ar6
      002A33 78r00            [12] 8518 	mov	r0,#_selection
      002A35 A6 07            [24] 8519 	mov	@r0,ar7
                                   8520 ;	.\ecen4350_lcd_v4.c:1880: invalid = 1;
      002A37 78r0C            [12] 8521 	mov	r0,#_edit_invalid_65536_622
      002A39 76 01            [12] 8522 	mov	@r0,#0x01
                                   8523 ;	.\ecen4350_lcd_v4.c:1881: if (selection == '1') {		/* Highlight choice and gray out others */
      002A3B BF 31 02         [24] 8524 	cjne	r7,#0x31,00151$
      002A3E 80 03            [24] 8525 	sjmp	00152$
      002A40                       8526 00151$:
      002A40 02r2Cr1F         [24] 8527 	ljmp	00102$
      002A43                       8528 00152$:
                                   8529 ;	.\ecen4350_lcd_v4.c:1882: invalid = 0;
      002A43 78r0C            [12] 8530 	mov	r0,#_edit_invalid_65536_622
      002A45 76 00            [12] 8531 	mov	@r0,#0x00
                                   8532 ;	.\ecen4350_lcd_v4.c:1884: setCursor(0, 210);
      002A47 75*00 D2         [24] 8533 	mov	_setCursor_PARM_2,#0xd2
      002A4A 75*01 00         [24] 8534 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A4D 90 00 00         [24] 8535 	mov	dptr,#0x0000
      002A50 C0 06            [24] 8536 	push	ar6
      002A52 C0 05            [24] 8537 	push	ar5
      002A54 12r04rB6         [24] 8538 	lcall	_setCursor
                                   8539 ;	.\ecen4350_lcd_v4.c:1885: setColorDefault();
      002A57 12r15r94         [24] 8540 	lcall	_setColorDefault
                                   8541 ;	.\ecen4350_lcd_v4.c:1886: LCD_string_write("\n  ");
      002A5A 90r06rA0         [24] 8542 	mov	dptr,#___str_35
      002A5D 75 F0 80         [24] 8543 	mov	b,#0x80
      002A60 12r0FrD0         [24] 8544 	lcall	_LCD_string_write
                                   8545 ;	.\ecen4350_lcd_v4.c:1887: setColorHighlight2();
      002A63 12r15rB6         [24] 8546 	lcall	_setColorHighlight2
                                   8547 ;	.\ecen4350_lcd_v4.c:1888: LCD_string_write("<1> Next Address\n");
      002A66 90r08r78         [24] 8548 	mov	dptr,#___str_68
      002A69 75 F0 80         [24] 8549 	mov	b,#0x80
      002A6C 12r0FrD0         [24] 8550 	lcall	_LCD_string_write
                                   8551 ;	.\ecen4350_lcd_v4.c:1889: setColorGray();
      002A6F 12r15rC2         [24] 8552 	lcall	_setColorGray
                                   8553 ;	.\ecen4350_lcd_v4.c:1890: LCD_string_write("\n\n               ");
      002A72 90r08r8A         [24] 8554 	mov	dptr,#___str_69
      002A75 75 F0 80         [24] 8555 	mov	b,#0x80
      002A78 12r0FrD0         [24] 8556 	lcall	_LCD_string_write
                                   8557 ;	.\ecen4350_lcd_v4.c:1891: delay(60);
      002A7B 90 00 3C         [24] 8558 	mov	dptr,#0x003c
      002A7E 12r00rE0         [24] 8559 	lcall	_delay
                                   8560 ;	.\ecen4350_lcd_v4.c:1894: setCursor(0, 80);
      002A81 75*00 50         [24] 8561 	mov	_setCursor_PARM_2,#0x50
      002A84 75*01 00         [24] 8562 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A87 90 00 00         [24] 8563 	mov	dptr,#0x0000
      002A8A 12r04rB6         [24] 8564 	lcall	_setCursor
                                   8565 ;	.\ecen4350_lcd_v4.c:1895: setColorGray();
      002A8D 12r15rC2         [24] 8566 	lcall	_setColorGray
                                   8567 ;	.\ecen4350_lcd_v4.c:1896: LCD_string_write(" 0x____");
      002A90 90r05rF4         [24] 8568 	mov	dptr,#___str_23
      002A93 75 F0 80         [24] 8569 	mov	b,#0x80
      002A96 12r0FrD0         [24] 8570 	lcall	_LCD_string_write
                                   8571 ;	.\ecen4350_lcd_v4.c:1897: setCursor(0, 110);
      002A99 75*00 6E         [24] 8572 	mov	_setCursor_PARM_2,#0x6e
      002A9C 75*01 00         [24] 8573 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A9F 90 00 00         [24] 8574 	mov	dptr,#0x0000
      002AA2 12r04rB6         [24] 8575 	lcall	_setCursor
                                   8576 ;	.\ecen4350_lcd_v4.c:1898: LCD_string_write("\n __");
      002AA5 90r08r9C         [24] 8577 	mov	dptr,#___str_70
      002AA8 75 F0 80         [24] 8578 	mov	b,#0x80
      002AAB 12r0FrD0         [24] 8579 	lcall	_LCD_string_write
                                   8580 ;	.\ecen4350_lcd_v4.c:1899: setCursor(0, 160);
      002AAE 75*00 A0         [24] 8581 	mov	_setCursor_PARM_2,#0xa0
      002AB1 75*01 00         [24] 8582 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AB4 90 00 00         [24] 8583 	mov	dptr,#0x0000
      002AB7 12r04rB6         [24] 8584 	lcall	_setCursor
                                   8585 ;	.\ecen4350_lcd_v4.c:1900: LCD_string_write("\n __");
      002ABA 90r08r9C         [24] 8586 	mov	dptr,#___str_70
      002ABD 75 F0 80         [24] 8587 	mov	b,#0x80
      002AC0 12r0FrD0         [24] 8588 	lcall	_LCD_string_write
                                   8589 ;	.\ecen4350_lcd_v4.c:1901: setCursor(0, 210);
      002AC3 75*00 D2         [24] 8590 	mov	_setCursor_PARM_2,#0xd2
      002AC6 75*01 00         [24] 8591 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AC9 90 00 00         [24] 8592 	mov	dptr,#0x0000
      002ACC 12r04rB6         [24] 8593 	lcall	_setCursor
                                   8594 ;	.\ecen4350_lcd_v4.c:1902: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002ACF 90r08rA1         [24] 8595 	mov	dptr,#___str_71
      002AD2 75 F0 80         [24] 8596 	mov	b,#0x80
      002AD5 12r0FrD0         [24] 8597 	lcall	_LCD_string_write
      002AD8 D0 05            [24] 8598 	pop	ar5
      002ADA D0 06            [24] 8599 	pop	ar6
                                   8600 ;	.\ecen4350_lcd_v4.c:1905: address++;
      002ADC 0D               [12] 8601 	inc	r5
      002ADD BD 00 01         [24] 8602 	cjne	r5,#0x00,00153$
      002AE0 0E               [12] 8603 	inc	r6
      002AE1                       8604 00153$:
                                   8605 ;	.\ecen4350_lcd_v4.c:1906: d = (unsigned char __xdata*)address;
      002AE1 8D*57            [24] 8606 	mov	_edit_d_65536_622,r5
      002AE3 8E*58            [24] 8607 	mov	(_edit_d_65536_622 + 1),r6
                                   8608 ;	.\ecen4350_lcd_v4.c:1907: setCursor(0, 80);
      002AE5 75*00 50         [24] 8609 	mov	_setCursor_PARM_2,#0x50
      002AE8 75*01 00         [24] 8610 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AEB 90 00 00         [24] 8611 	mov	dptr,#0x0000
      002AEE C0 06            [24] 8612 	push	ar6
      002AF0 C0 05            [24] 8613 	push	ar5
      002AF2 12r04rB6         [24] 8614 	lcall	_setCursor
                                   8615 ;	.\ecen4350_lcd_v4.c:1908: LCD_string_write(" ");
      002AF5 90r06r56         [24] 8616 	mov	dptr,#___str_29
      002AF8 75 F0 80         [24] 8617 	mov	b,#0x80
      002AFB 12r0FrD0         [24] 8618 	lcall	_LCD_string_write
                                   8619 ;	.\ecen4350_lcd_v4.c:1909: setColorHighlight2();
      002AFE 12r15rB6         [24] 8620 	lcall	_setColorHighlight2
                                   8621 ;	.\ecen4350_lcd_v4.c:1910: LCD_string_write("0x");
      002B01 90r05r29         [24] 8622 	mov	dptr,#___str_2
      002B04 75 F0 80         [24] 8623 	mov	b,#0x80
      002B07 12r0FrD0         [24] 8624 	lcall	_LCD_string_write
      002B0A D0 05            [24] 8625 	pop	ar5
      002B0C D0 06            [24] 8626 	pop	ar6
                                   8627 ;	.\ecen4350_lcd_v4.c:1911: print16Hex(address);		// print 16-bit address from stored memory
      002B0E 8D 82            [24] 8628 	mov	dpl,r5
      002B10 8E 83            [24] 8629 	mov	dph,r6
      002B12 C0 06            [24] 8630 	push	ar6
      002B14 C0 05            [24] 8631 	push	ar5
      002B16 12r14rB8         [24] 8632 	lcall	_print16Hex
                                   8633 ;	.\ecen4350_lcd_v4.c:1914: setCursor(0, 110);
      002B19 75*00 6E         [24] 8634 	mov	_setCursor_PARM_2,#0x6e
      002B1C 75*01 00         [24] 8635 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B1F 90 00 00         [24] 8636 	mov	dptr,#0x0000
      002B22 12r04rB6         [24] 8637 	lcall	_setCursor
                                   8638 ;	.\ecen4350_lcd_v4.c:1915: setColorDefault();
      002B25 12r15r94         [24] 8639 	lcall	_setColorDefault
                                   8640 ;	.\ecen4350_lcd_v4.c:1916: LCD_string_write("\n ");
      002B28 90r08r61         [24] 8641 	mov	dptr,#___str_66
      002B2B 75 F0 80         [24] 8642 	mov	b,#0x80
      002B2E 12r0FrD0         [24] 8643 	lcall	_LCD_string_write
                                   8644 ;	.\ecen4350_lcd_v4.c:1917: setColorHighlight2();
      002B31 12r15rB6         [24] 8645 	lcall	_setColorHighlight2
                                   8646 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8647 ;	assignBit
      002B34 C2 B5            [12] 8648 	clr	_P3_5
                                   8649 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002B36 85*57 82         [24] 8650 	mov	dpl,_edit_d_65536_622
      002B39 85*58 83         [24] 8651 	mov	dph,(_edit_d_65536_622 + 1)
      002B3C E0               [24] 8652 	movx	a,@dptr
      002B3D FA               [12] 8653 	mov	r2,a
                                   8654 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8655 ;	assignBit
      002B3E D2 B5            [12] 8656 	setb	_P3_5
                                   8657 ;	.\ecen4350_lcd_v4.c:1918: print8Hex(ramRead8(d));
      002B40 8A 82            [24] 8658 	mov	dpl,r2
      002B42 12r14rA1         [24] 8659 	lcall	_print8Hex
                                   8660 ;	.\ecen4350_lcd_v4.c:1921: setCursor(0, 160);
      002B45 75*00 A0         [24] 8661 	mov	_setCursor_PARM_2,#0xa0
      002B48 75*01 00         [24] 8662 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B4B 90 00 00         [24] 8663 	mov	dptr,#0x0000
      002B4E 12r04rB6         [24] 8664 	lcall	_setCursor
                                   8665 ;	.\ecen4350_lcd_v4.c:1922: setColorSelect();
      002B51 12r15r9F         [24] 8666 	lcall	_setColorSelect
                                   8667 ;	.\ecen4350_lcd_v4.c:1923: LCD_string_write(" Enter New Value:\n ");
      002B54 90r08r64         [24] 8668 	mov	dptr,#___str_67
      002B57 75 F0 80         [24] 8669 	mov	b,#0x80
      002B5A 12r0FrD0         [24] 8670 	lcall	_LCD_string_write
                                   8671 ;	.\ecen4350_lcd_v4.c:1924: setColorHighlight1();
      002B5D 12r15rAA         [24] 8672 	lcall	_setColorHighlight1
                                   8673 ;	.\ecen4350_lcd_v4.c:1925: selection = keyDetect();
      002B60 12r10rEE         [24] 8674 	lcall	_keyDetect
      002B63 AA 82            [24] 8675 	mov	r2,dpl
      002B65 78r00            [12] 8676 	mov	r0,#_selection
      002B67 A6 02            [24] 8677 	mov	@r0,ar2
                                   8678 ;	.\ecen4350_lcd_v4.c:1926: write(selection);
      002B69 8A 82            [24] 8679 	mov	dpl,r2
      002B6B 12r0Fr6A         [24] 8680 	lcall	_write
                                   8681 ;	.\ecen4350_lcd_v4.c:1927: selection = ASCIItoHex(selection);
      002B6E 78r00            [12] 8682 	mov	r0,#_selection
      002B70 86 82            [24] 8683 	mov	dpl,@r0
      002B72 12r13r5C         [24] 8684 	lcall	_ASCIItoHex
      002B75 AA 82            [24] 8685 	mov	r2,dpl
      002B77 78r00            [12] 8686 	mov	r0,#_selection
      002B79 A6 02            [24] 8687 	mov	@r0,ar2
                                   8688 ;	.\ecen4350_lcd_v4.c:1928: value |= selection * 16;
      002B7B EA               [12] 8689 	mov	a,r2
      002B7C C4               [12] 8690 	swap	a
      002B7D 54 F0            [12] 8691 	anl	a,#0xf0
      002B7F FA               [12] 8692 	mov	r2,a
                                   8693 ;	.\ecen4350_lcd_v4.c:1929: selection = keyDetect();
      002B80 C0 02            [24] 8694 	push	ar2
      002B82 12r10rEE         [24] 8695 	lcall	_keyDetect
      002B85 AF 82            [24] 8696 	mov	r7,dpl
      002B87 78r00            [12] 8697 	mov	r0,#_selection
      002B89 A6 07            [24] 8698 	mov	@r0,ar7
                                   8699 ;	.\ecen4350_lcd_v4.c:1930: write(selection);
      002B8B 8F 82            [24] 8700 	mov	dpl,r7
      002B8D 12r0Fr6A         [24] 8701 	lcall	_write
                                   8702 ;	.\ecen4350_lcd_v4.c:1931: selection = ASCIItoHex(selection);
      002B90 78r00            [12] 8703 	mov	r0,#_selection
      002B92 86 82            [24] 8704 	mov	dpl,@r0
      002B94 12r13r5C         [24] 8705 	lcall	_ASCIItoHex
      002B97 AF 82            [24] 8706 	mov	r7,dpl
      002B99 D0 02            [24] 8707 	pop	ar2
      002B9B D0 05            [24] 8708 	pop	ar5
      002B9D D0 06            [24] 8709 	pop	ar6
      002B9F 78r00            [12] 8710 	mov	r0,#_selection
      002BA1 A6 07            [24] 8711 	mov	@r0,ar7
                                   8712 ;	.\ecen4350_lcd_v4.c:1932: value |= selection;
      002BA3 EA               [12] 8713 	mov	a,r2
      002BA4 42 07            [12] 8714 	orl	ar7,a
                                   8715 ;	.\ecen4350_lcd_v4.c:1935: setColorDefault();
      002BA6 C0 07            [24] 8716 	push	ar7
      002BA8 C0 06            [24] 8717 	push	ar6
      002BAA C0 05            [24] 8718 	push	ar5
      002BAC 12r15r94         [24] 8719 	lcall	_setColorDefault
                                   8720 ;	.\ecen4350_lcd_v4.c:1936: setCursor(0, 160);
      002BAF 75*00 A0         [24] 8721 	mov	_setCursor_PARM_2,#0xa0
      002BB2 75*01 00         [24] 8722 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BB5 90 00 00         [24] 8723 	mov	dptr,#0x0000
      002BB8 12r04rB6         [24] 8724 	lcall	_setCursor
                                   8725 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Enter New Value:\n ");
      002BBB 90r08r64         [24] 8726 	mov	dptr,#___str_67
      002BBE 75 F0 80         [24] 8727 	mov	b,#0x80
      002BC1 12r0FrD0         [24] 8728 	lcall	_LCD_string_write
                                   8729 ;	.\ecen4350_lcd_v4.c:1938: setColorHighlight2();
      002BC4 12r15rB6         [24] 8730 	lcall	_setColorHighlight2
      002BC7 D0 05            [24] 8731 	pop	ar5
      002BC9 D0 06            [24] 8732 	pop	ar6
      002BCB D0 07            [24] 8733 	pop	ar7
                                   8734 ;	.\ecen4350_lcd_v4.c:1939: print8Hex(value);
      002BCD 8F 82            [24] 8735 	mov	dpl,r7
      002BCF C0 07            [24] 8736 	push	ar7
      002BD1 C0 06            [24] 8737 	push	ar6
      002BD3 C0 05            [24] 8738 	push	ar5
      002BD5 12r14rA1         [24] 8739 	lcall	_print8Hex
      002BD8 D0 05            [24] 8740 	pop	ar5
      002BDA D0 06            [24] 8741 	pop	ar6
      002BDC D0 07            [24] 8742 	pop	ar7
                                   8743 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8744 ;	assignBit
      002BDE C2 B5            [12] 8745 	clr	_P3_5
                                   8746 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      002BE0 85*57 82         [24] 8747 	mov	dpl,_edit_d_65536_622
      002BE3 85*58 83         [24] 8748 	mov	dph,(_edit_d_65536_622 + 1)
      002BE6 EF               [12] 8749 	mov	a,r7
      002BE7 F0               [24] 8750 	movx	@dptr,a
                                   8751 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8752 ;	assignBit
      002BE8 D2 B5            [12] 8753 	setb	_P3_5
                                   8754 ;	.\ecen4350_lcd_v4.c:1944: setCursor(0, 210);
      002BEA 75*00 D2         [24] 8755 	mov	_setCursor_PARM_2,#0xd2
      002BED 75*01 00         [24] 8756 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BF0 90 00 00         [24] 8757 	mov	dptr,#0x0000
      002BF3 C0 06            [24] 8758 	push	ar6
      002BF5 C0 05            [24] 8759 	push	ar5
      002BF7 12r04rB6         [24] 8760 	lcall	_setCursor
                                   8761 ;	.\ecen4350_lcd_v4.c:1945: setColorSelect();
      002BFA 12r15r9F         [24] 8762 	lcall	_setColorSelect
                                   8763 ;	.\ecen4350_lcd_v4.c:1946: LCD_string_write(" Choose Next Action:\n");
      002BFD 90r08r1A         [24] 8764 	mov	dptr,#___str_63
      002C00 75 F0 80         [24] 8765 	mov	b,#0x80
      002C03 12r0FrD0         [24] 8766 	lcall	_LCD_string_write
                                   8767 ;	.\ecen4350_lcd_v4.c:1947: setColorWhite();
      002C06 12r15rE4         [24] 8768 	lcall	_setColorWhite
                                   8769 ;	.\ecen4350_lcd_v4.c:1948: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002C09 90r08r30         [24] 8770 	mov	dptr,#___str_64
      002C0C 75 F0 80         [24] 8771 	mov	b,#0x80
      002C0F 12r0FrD0         [24] 8772 	lcall	_LCD_string_write
                                   8773 ;	.\ecen4350_lcd_v4.c:1949: LCD_string_write("  <0> Exit");
      002C12 90r08r56         [24] 8774 	mov	dptr,#___str_65
      002C15 75 F0 80         [24] 8775 	mov	b,#0x80
      002C18 12r0FrD0         [24] 8776 	lcall	_LCD_string_write
      002C1B D0 05            [24] 8777 	pop	ar5
      002C1D D0 06            [24] 8778 	pop	ar6
      002C1F                       8779 00102$:
                                   8780 ;	.\ecen4350_lcd_v4.c:1951: if (selection == '2') {			/* Highlight choice and gray out others*/
      002C1F 78r00            [12] 8781 	mov	r0,#_selection
      002C21 B6 32 02         [24] 8782 	cjne	@r0,#0x32,00154$
      002C24 80 03            [24] 8783 	sjmp	00155$
      002C26                       8784 00154$:
      002C26 02r2Er6B         [24] 8785 	ljmp	00104$
      002C29                       8786 00155$:
                                   8787 ;	.\ecen4350_lcd_v4.c:1952: invalid = 0;
      002C29 78r0C            [12] 8788 	mov	r0,#_edit_invalid_65536_622
      002C2B 76 00            [12] 8789 	mov	@r0,#0x00
                                   8790 ;	.\ecen4350_lcd_v4.c:1954: setCursor(0, 210);
      002C2D 75*00 D2         [24] 8791 	mov	_setCursor_PARM_2,#0xd2
      002C30 75*01 00         [24] 8792 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C33 90 00 00         [24] 8793 	mov	dptr,#0x0000
      002C36 12r04rB6         [24] 8794 	lcall	_setCursor
                                   8795 ;	.\ecen4350_lcd_v4.c:1955: setColorDefault();
      002C39 12r15r94         [24] 8796 	lcall	_setColorDefault
                                   8797 ;	.\ecen4350_lcd_v4.c:1956: LCD_string_write(" Choose Next Action:\n  ");
      002C3C 90r08rD2         [24] 8798 	mov	dptr,#___str_72
      002C3F 75 F0 80         [24] 8799 	mov	b,#0x80
      002C42 12r0FrD0         [24] 8800 	lcall	_LCD_string_write
                                   8801 ;	.\ecen4350_lcd_v4.c:1957: setColorGray();
      002C45 12r15rC2         [24] 8802 	lcall	_setColorGray
                                   8803 ;	.\ecen4350_lcd_v4.c:1958: LCD_string_write("\n  ");
      002C48 90r06rA0         [24] 8804 	mov	dptr,#___str_35
      002C4B 75 F0 80         [24] 8805 	mov	b,#0x80
      002C4E 12r0FrD0         [24] 8806 	lcall	_LCD_string_write
                                   8807 ;	.\ecen4350_lcd_v4.c:1959: setColorHighlight2();
      002C51 12r15rB6         [24] 8808 	lcall	_setColorHighlight2
                                   8809 ;	.\ecen4350_lcd_v4.c:1960: LCD_string_write("<2> New Address\n");
      002C54 90r08rEA         [24] 8810 	mov	dptr,#___str_73
      002C57 75 F0 80         [24] 8811 	mov	b,#0x80
      002C5A 12r0FrD0         [24] 8812 	lcall	_LCD_string_write
                                   8813 ;	.\ecen4350_lcd_v4.c:1961: setColorGray();
      002C5D 12r15rC2         [24] 8814 	lcall	_setColorGray
                                   8815 ;	.\ecen4350_lcd_v4.c:1962: LCD_string_write("\n               ");
      002C60 90r08rFB         [24] 8816 	mov	dptr,#___str_74
      002C63 75 F0 80         [24] 8817 	mov	b,#0x80
      002C66 12r0FrD0         [24] 8818 	lcall	_LCD_string_write
                                   8819 ;	.\ecen4350_lcd_v4.c:1963: delay(60);
      002C69 90 00 3C         [24] 8820 	mov	dptr,#0x003c
      002C6C 12r00rE0         [24] 8821 	lcall	_delay
                                   8822 ;	.\ecen4350_lcd_v4.c:1966: setCursor(0, 80);
      002C6F 75*00 50         [24] 8823 	mov	_setCursor_PARM_2,#0x50
      002C72 75*01 00         [24] 8824 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C75 90 00 00         [24] 8825 	mov	dptr,#0x0000
      002C78 12r04rB6         [24] 8826 	lcall	_setCursor
                                   8827 ;	.\ecen4350_lcd_v4.c:1967: setColorGray();
      002C7B 12r15rC2         [24] 8828 	lcall	_setColorGray
                                   8829 ;	.\ecen4350_lcd_v4.c:1968: LCD_string_write(" 0x____");
      002C7E 90r05rF4         [24] 8830 	mov	dptr,#___str_23
      002C81 75 F0 80         [24] 8831 	mov	b,#0x80
      002C84 12r0FrD0         [24] 8832 	lcall	_LCD_string_write
                                   8833 ;	.\ecen4350_lcd_v4.c:1969: setCursor(0, 110);
      002C87 75*00 6E         [24] 8834 	mov	_setCursor_PARM_2,#0x6e
      002C8A 75*01 00         [24] 8835 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C8D 90 00 00         [24] 8836 	mov	dptr,#0x0000
      002C90 12r04rB6         [24] 8837 	lcall	_setCursor
                                   8838 ;	.\ecen4350_lcd_v4.c:1970: LCD_string_write("\n __");
      002C93 90r08r9C         [24] 8839 	mov	dptr,#___str_70
      002C96 75 F0 80         [24] 8840 	mov	b,#0x80
      002C99 12r0FrD0         [24] 8841 	lcall	_LCD_string_write
                                   8842 ;	.\ecen4350_lcd_v4.c:1971: setCursor(0, 160);
      002C9C 75*00 A0         [24] 8843 	mov	_setCursor_PARM_2,#0xa0
      002C9F 75*01 00         [24] 8844 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CA2 90 00 00         [24] 8845 	mov	dptr,#0x0000
      002CA5 12r04rB6         [24] 8846 	lcall	_setCursor
                                   8847 ;	.\ecen4350_lcd_v4.c:1972: LCD_string_write("\n __");
      002CA8 90r08r9C         [24] 8848 	mov	dptr,#___str_70
      002CAB 75 F0 80         [24] 8849 	mov	b,#0x80
      002CAE 12r0FrD0         [24] 8850 	lcall	_LCD_string_write
                                   8851 ;	.\ecen4350_lcd_v4.c:1973: setCursor(0, 210);
      002CB1 75*00 D2         [24] 8852 	mov	_setCursor_PARM_2,#0xd2
      002CB4 75*01 00         [24] 8853 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CB7 90 00 00         [24] 8854 	mov	dptr,#0x0000
      002CBA 12r04rB6         [24] 8855 	lcall	_setCursor
                                   8856 ;	.\ecen4350_lcd_v4.c:1974: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002CBD 90r08rA1         [24] 8857 	mov	dptr,#___str_71
      002CC0 75 F0 80         [24] 8858 	mov	b,#0x80
      002CC3 12r0FrD0         [24] 8859 	lcall	_LCD_string_write
                                   8860 ;	.\ecen4350_lcd_v4.c:1977: setCursor(0, 60);
      002CC6 75*00 3C         [24] 8861 	mov	_setCursor_PARM_2,#0x3c
      002CC9 75*01 00         [24] 8862 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CCC 90 00 00         [24] 8863 	mov	dptr,#0x0000
      002CCF 12r04rB6         [24] 8864 	lcall	_setCursor
                                   8865 ;	.\ecen4350_lcd_v4.c:1978: setColorSelect();
      002CD2 12r15r9F         [24] 8866 	lcall	_setColorSelect
                                   8867 ;	.\ecen4350_lcd_v4.c:1979: LCD_string_write(" Edit Address");
      002CD5 90r09r0C         [24] 8868 	mov	dptr,#___str_75
      002CD8 75 F0 80         [24] 8869 	mov	b,#0x80
      002CDB 12r0FrD0         [24] 8870 	lcall	_LCD_string_write
                                   8871 ;	.\ecen4350_lcd_v4.c:1980: setCursor(0, 80);
      002CDE 75*00 50         [24] 8872 	mov	_setCursor_PARM_2,#0x50
      002CE1 75*01 00         [24] 8873 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CE4 90 00 00         [24] 8874 	mov	dptr,#0x0000
      002CE7 12r04rB6         [24] 8875 	lcall	_setCursor
                                   8876 ;	.\ecen4350_lcd_v4.c:1981: LCD_string_write(" ");
      002CEA 90r06r56         [24] 8877 	mov	dptr,#___str_29
      002CED 75 F0 80         [24] 8878 	mov	b,#0x80
      002CF0 12r0FrD0         [24] 8879 	lcall	_LCD_string_write
                                   8880 ;	.\ecen4350_lcd_v4.c:1982: setColorHighlight1();
      002CF3 12r15rAA         [24] 8881 	lcall	_setColorHighlight1
                                   8882 ;	.\ecen4350_lcd_v4.c:1983: LCD_string_write("0x");
      002CF6 90r05r29         [24] 8883 	mov	dptr,#___str_2
      002CF9 75 F0 80         [24] 8884 	mov	b,#0x80
      002CFC 12r0FrD0         [24] 8885 	lcall	_LCD_string_write
                                   8886 ;	.\ecen4350_lcd_v4.c:1984: address = inputAddress();		// input 16-bit address and store in memory
      002CFF 12r16r05         [24] 8887 	lcall	_inputAddress
      002D02 AD 82            [24] 8888 	mov	r5,dpl
      002D04 AE 83            [24] 8889 	mov	r6,dph
                                   8890 ;	.\ecen4350_lcd_v4.c:1985: d = (unsigned char __xdata*)address;
      002D06 8D 03            [24] 8891 	mov	ar3,r5
      002D08 8E 07            [24] 8892 	mov	ar7,r6
                                   8893 ;	.\ecen4350_lcd_v4.c:1988: setColorDefault();
      002D0A C0 07            [24] 8894 	push	ar7
      002D0C C0 06            [24] 8895 	push	ar6
      002D0E C0 05            [24] 8896 	push	ar5
      002D10 C0 03            [24] 8897 	push	ar3
      002D12 12r15r94         [24] 8898 	lcall	_setColorDefault
                                   8899 ;	.\ecen4350_lcd_v4.c:1989: setCursor(0, 60);
      002D15 75*00 3C         [24] 8900 	mov	_setCursor_PARM_2,#0x3c
      002D18 75*01 00         [24] 8901 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D1B 90 00 00         [24] 8902 	mov	dptr,#0x0000
      002D1E 12r04rB6         [24] 8903 	lcall	_setCursor
                                   8904 ;	.\ecen4350_lcd_v4.c:1990: LCD_string_write(" Edit Address:");
      002D21 90r07rDF         [24] 8905 	mov	dptr,#___str_59
      002D24 75 F0 80         [24] 8906 	mov	b,#0x80
      002D27 12r0FrD0         [24] 8907 	lcall	_LCD_string_write
                                   8908 ;	.\ecen4350_lcd_v4.c:1991: setCursor(0, 80);
      002D2A 75*00 50         [24] 8909 	mov	_setCursor_PARM_2,#0x50
      002D2D 75*01 00         [24] 8910 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D30 90 00 00         [24] 8911 	mov	dptr,#0x0000
      002D33 12r04rB6         [24] 8912 	lcall	_setCursor
                                   8913 ;	.\ecen4350_lcd_v4.c:1992: LCD_string_write(" ");
      002D36 90r06r56         [24] 8914 	mov	dptr,#___str_29
      002D39 75 F0 80         [24] 8915 	mov	b,#0x80
      002D3C 12r0FrD0         [24] 8916 	lcall	_LCD_string_write
                                   8917 ;	.\ecen4350_lcd_v4.c:1993: setColorHighlight2();
      002D3F 12r15rB6         [24] 8918 	lcall	_setColorHighlight2
                                   8919 ;	.\ecen4350_lcd_v4.c:1994: LCD_string_write("0x");
      002D42 90r05r29         [24] 8920 	mov	dptr,#___str_2
      002D45 75 F0 80         [24] 8921 	mov	b,#0x80
      002D48 12r0FrD0         [24] 8922 	lcall	_LCD_string_write
      002D4B D0 03            [24] 8923 	pop	ar3
      002D4D D0 05            [24] 8924 	pop	ar5
      002D4F D0 06            [24] 8925 	pop	ar6
                                   8926 ;	.\ecen4350_lcd_v4.c:1995: print16Hex(address);		// print 16-bit address from stored memory
      002D51 8D 82            [24] 8927 	mov	dpl,r5
      002D53 8E 83            [24] 8928 	mov	dph,r6
      002D55 C0 06            [24] 8929 	push	ar6
      002D57 C0 05            [24] 8930 	push	ar5
      002D59 C0 03            [24] 8931 	push	ar3
      002D5B 12r14rB8         [24] 8932 	lcall	_print16Hex
                                   8933 ;	.\ecen4350_lcd_v4.c:1998: setCursor(0, 110);
      002D5E 75*00 6E         [24] 8934 	mov	_setCursor_PARM_2,#0x6e
      002D61 75*01 00         [24] 8935 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D64 90 00 00         [24] 8936 	mov	dptr,#0x0000
      002D67 12r04rB6         [24] 8937 	lcall	_setCursor
                                   8938 ;	.\ecen4350_lcd_v4.c:1999: setColorDefault();
      002D6A 12r15r94         [24] 8939 	lcall	_setColorDefault
                                   8940 ;	.\ecen4350_lcd_v4.c:2000: LCD_string_write("\n ");
      002D6D 90r08r61         [24] 8941 	mov	dptr,#___str_66
      002D70 75 F0 80         [24] 8942 	mov	b,#0x80
      002D73 12r0FrD0         [24] 8943 	lcall	_LCD_string_write
                                   8944 ;	.\ecen4350_lcd_v4.c:2001: setColorHighlight2();
      002D76 12r15rB6         [24] 8945 	lcall	_setColorHighlight2
      002D79 D0 03            [24] 8946 	pop	ar3
      002D7B D0 05            [24] 8947 	pop	ar5
      002D7D D0 06            [24] 8948 	pop	ar6
      002D7F D0 07            [24] 8949 	pop	ar7
                                   8950 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8951 ;	assignBit
      002D81 C2 B5            [12] 8952 	clr	_P3_5
                                   8953 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002D83 8B 82            [24] 8954 	mov	dpl,r3
      002D85 8F 83            [24] 8955 	mov	dph,r7
      002D87 E0               [24] 8956 	movx	a,@dptr
      002D88 F5 82            [12] 8957 	mov	dpl,a
                                   8958 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8959 ;	assignBit
      002D8A D2 B5            [12] 8960 	setb	_P3_5
                                   8961 ;	.\ecen4350_lcd_v4.c:2002: print8Hex(ramRead8(d));
      002D8C C0 07            [24] 8962 	push	ar7
      002D8E C0 06            [24] 8963 	push	ar6
      002D90 C0 05            [24] 8964 	push	ar5
      002D92 C0 03            [24] 8965 	push	ar3
      002D94 12r14rA1         [24] 8966 	lcall	_print8Hex
                                   8967 ;	.\ecen4350_lcd_v4.c:2005: setCursor(0, 160);
      002D97 75*00 A0         [24] 8968 	mov	_setCursor_PARM_2,#0xa0
      002D9A 75*01 00         [24] 8969 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D9D 90 00 00         [24] 8970 	mov	dptr,#0x0000
      002DA0 12r04rB6         [24] 8971 	lcall	_setCursor
                                   8972 ;	.\ecen4350_lcd_v4.c:2006: setColorSelect();
      002DA3 12r15r9F         [24] 8973 	lcall	_setColorSelect
                                   8974 ;	.\ecen4350_lcd_v4.c:2007: LCD_string_write(" Enter New Value:\n ");
      002DA6 90r08r64         [24] 8975 	mov	dptr,#___str_67
      002DA9 75 F0 80         [24] 8976 	mov	b,#0x80
      002DAC 12r0FrD0         [24] 8977 	lcall	_LCD_string_write
                                   8978 ;	.\ecen4350_lcd_v4.c:2008: setColorHighlight1();
      002DAF 12r15rAA         [24] 8979 	lcall	_setColorHighlight1
                                   8980 ;	.\ecen4350_lcd_v4.c:2009: selection = keyDetect();
      002DB2 12r10rEE         [24] 8981 	lcall	_keyDetect
      002DB5 AA 82            [24] 8982 	mov	r2,dpl
      002DB7 78r00            [12] 8983 	mov	r0,#_selection
      002DB9 A6 02            [24] 8984 	mov	@r0,ar2
                                   8985 ;	.\ecen4350_lcd_v4.c:2010: write(selection);
      002DBB 8A 82            [24] 8986 	mov	dpl,r2
      002DBD 12r0Fr6A         [24] 8987 	lcall	_write
                                   8988 ;	.\ecen4350_lcd_v4.c:2011: selection = ASCIItoHex(selection);
      002DC0 78r00            [12] 8989 	mov	r0,#_selection
      002DC2 86 82            [24] 8990 	mov	dpl,@r0
      002DC4 12r13r5C         [24] 8991 	lcall	_ASCIItoHex
      002DC7 AA 82            [24] 8992 	mov	r2,dpl
      002DC9 78r00            [12] 8993 	mov	r0,#_selection
      002DCB A6 02            [24] 8994 	mov	@r0,ar2
                                   8995 ;	.\ecen4350_lcd_v4.c:2012: value |= selection * 16;
      002DCD EA               [12] 8996 	mov	a,r2
      002DCE C4               [12] 8997 	swap	a
      002DCF 54 F0            [12] 8998 	anl	a,#0xf0
      002DD1 FA               [12] 8999 	mov	r2,a
                                   9000 ;	.\ecen4350_lcd_v4.c:2013: selection = keyDetect();
      002DD2 C0 02            [24] 9001 	push	ar2
      002DD4 12r10rEE         [24] 9002 	lcall	_keyDetect
      002DD7 AC 82            [24] 9003 	mov	r4,dpl
      002DD9 78r00            [12] 9004 	mov	r0,#_selection
      002DDB A6 04            [24] 9005 	mov	@r0,ar4
                                   9006 ;	.\ecen4350_lcd_v4.c:2014: write(selection);
      002DDD 8C 82            [24] 9007 	mov	dpl,r4
      002DDF 12r0Fr6A         [24] 9008 	lcall	_write
                                   9009 ;	.\ecen4350_lcd_v4.c:2015: selection = ASCIItoHex(selection);
      002DE2 78r00            [12] 9010 	mov	r0,#_selection
      002DE4 86 82            [24] 9011 	mov	dpl,@r0
      002DE6 12r13r5C         [24] 9012 	lcall	_ASCIItoHex
      002DE9 AC 82            [24] 9013 	mov	r4,dpl
      002DEB D0 02            [24] 9014 	pop	ar2
      002DED D0 03            [24] 9015 	pop	ar3
      002DEF 78r00            [12] 9016 	mov	r0,#_selection
      002DF1 A6 04            [24] 9017 	mov	@r0,ar4
                                   9018 ;	.\ecen4350_lcd_v4.c:2016: value |= selection;
      002DF3 EA               [12] 9019 	mov	a,r2
      002DF4 42 04            [12] 9020 	orl	ar4,a
                                   9021 ;	.\ecen4350_lcd_v4.c:2019: setColorDefault();
      002DF6 C0 04            [24] 9022 	push	ar4
      002DF8 C0 03            [24] 9023 	push	ar3
      002DFA 12r15r94         [24] 9024 	lcall	_setColorDefault
                                   9025 ;	.\ecen4350_lcd_v4.c:2020: setCursor(0, 160);
      002DFD 75*00 A0         [24] 9026 	mov	_setCursor_PARM_2,#0xa0
      002E00 75*01 00         [24] 9027 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E03 90 00 00         [24] 9028 	mov	dptr,#0x0000
      002E06 12r04rB6         [24] 9029 	lcall	_setCursor
                                   9030 ;	.\ecen4350_lcd_v4.c:2021: LCD_string_write(" Enter New Value:\n ");
      002E09 90r08r64         [24] 9031 	mov	dptr,#___str_67
      002E0C 75 F0 80         [24] 9032 	mov	b,#0x80
      002E0F 12r0FrD0         [24] 9033 	lcall	_LCD_string_write
                                   9034 ;	.\ecen4350_lcd_v4.c:2022: setColorHighlight2();
      002E12 12r15rB6         [24] 9035 	lcall	_setColorHighlight2
      002E15 D0 03            [24] 9036 	pop	ar3
      002E17 D0 04            [24] 9037 	pop	ar4
                                   9038 ;	.\ecen4350_lcd_v4.c:2023: print8Hex(value);
      002E19 8C 82            [24] 9039 	mov	dpl,r4
      002E1B C0 04            [24] 9040 	push	ar4
      002E1D C0 03            [24] 9041 	push	ar3
      002E1F 12r14rA1         [24] 9042 	lcall	_print8Hex
      002E22 D0 03            [24] 9043 	pop	ar3
      002E24 D0 04            [24] 9044 	pop	ar4
      002E26 D0 05            [24] 9045 	pop	ar5
      002E28 D0 06            [24] 9046 	pop	ar6
      002E2A D0 07            [24] 9047 	pop	ar7
                                   9048 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   9049 ;	assignBit
      002E2C C2 B5            [12] 9050 	clr	_P3_5
                                   9051 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      002E2E 8B 82            [24] 9052 	mov	dpl,r3
      002E30 8F 83            [24] 9053 	mov	dph,r7
      002E32 EC               [12] 9054 	mov	a,r4
      002E33 F0               [24] 9055 	movx	@dptr,a
                                   9056 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   9057 ;	assignBit
      002E34 D2 B5            [12] 9058 	setb	_P3_5
                                   9059 ;	.\ecen4350_lcd_v4.c:2028: setCursor(0, 210);
      002E36 75*00 D2         [24] 9060 	mov	_setCursor_PARM_2,#0xd2
      002E39 75*01 00         [24] 9061 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E3C 90 00 00         [24] 9062 	mov	dptr,#0x0000
      002E3F C0 06            [24] 9063 	push	ar6
      002E41 C0 05            [24] 9064 	push	ar5
      002E43 12r04rB6         [24] 9065 	lcall	_setCursor
                                   9066 ;	.\ecen4350_lcd_v4.c:2029: setColorSelect();
      002E46 12r15r9F         [24] 9067 	lcall	_setColorSelect
                                   9068 ;	.\ecen4350_lcd_v4.c:2030: LCD_string_write(" Choose Next Action:\n");
      002E49 90r08r1A         [24] 9069 	mov	dptr,#___str_63
      002E4C 75 F0 80         [24] 9070 	mov	b,#0x80
      002E4F 12r0FrD0         [24] 9071 	lcall	_LCD_string_write
                                   9072 ;	.\ecen4350_lcd_v4.c:2031: setColorWhite();
      002E52 12r15rE4         [24] 9073 	lcall	_setColorWhite
                                   9074 ;	.\ecen4350_lcd_v4.c:2032: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002E55 90r08r30         [24] 9075 	mov	dptr,#___str_64
      002E58 75 F0 80         [24] 9076 	mov	b,#0x80
      002E5B 12r0FrD0         [24] 9077 	lcall	_LCD_string_write
                                   9078 ;	.\ecen4350_lcd_v4.c:2033: LCD_string_write("  <0> Exit");
      002E5E 90r08r56         [24] 9079 	mov	dptr,#___str_65
      002E61 75 F0 80         [24] 9080 	mov	b,#0x80
      002E64 12r0FrD0         [24] 9081 	lcall	_LCD_string_write
      002E67 D0 05            [24] 9082 	pop	ar5
      002E69 D0 06            [24] 9083 	pop	ar6
      002E6B                       9084 00104$:
                                   9085 ;	.\ecen4350_lcd_v4.c:2035: if (selection == '0') {			/* Highlight choice and gray out others */
      002E6B 78r00            [12] 9086 	mov	r0,#_selection
      002E6D B6 30 52         [24] 9087 	cjne	@r0,#0x30,00106$
                                   9088 ;	.\ecen4350_lcd_v4.c:2036: exit = 0;
      002E70 78r0B            [12] 9089 	mov	r0,#_edit_exit_65536_622
      002E72 76 00            [12] 9090 	mov	@r0,#0x00
                                   9091 ;	.\ecen4350_lcd_v4.c:2037: invalid = 0;
      002E74 78r0C            [12] 9092 	mov	r0,#_edit_invalid_65536_622
      002E76 76 00            [12] 9093 	mov	@r0,#0x00
                                   9094 ;	.\ecen4350_lcd_v4.c:2038: setCursor(0, 210);
      002E78 75*00 D2         [24] 9095 	mov	_setCursor_PARM_2,#0xd2
      002E7B 75*01 00         [24] 9096 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E7E 90 00 00         [24] 9097 	mov	dptr,#0x0000
      002E81 C0 06            [24] 9098 	push	ar6
      002E83 C0 05            [24] 9099 	push	ar5
      002E85 12r04rB6         [24] 9100 	lcall	_setCursor
                                   9101 ;	.\ecen4350_lcd_v4.c:2039: setColorDefault();
      002E88 12r15r94         [24] 9102 	lcall	_setColorDefault
                                   9103 ;	.\ecen4350_lcd_v4.c:2040: LCD_string_write("\n");
      002E8B 90r09r1A         [24] 9104 	mov	dptr,#___str_76
      002E8E 75 F0 80         [24] 9105 	mov	b,#0x80
      002E91 12r0FrD0         [24] 9106 	lcall	_LCD_string_write
                                   9107 ;	.\ecen4350_lcd_v4.c:2041: setColorGray();
      002E94 12r15rC2         [24] 9108 	lcall	_setColorGray
                                   9109 ;	.\ecen4350_lcd_v4.c:2042: LCD_string_write("\n\n  ");
      002E97 90r06rD1         [24] 9110 	mov	dptr,#___str_38
      002E9A 75 F0 80         [24] 9111 	mov	b,#0x80
      002E9D 12r0FrD0         [24] 9112 	lcall	_LCD_string_write
                                   9113 ;	.\ecen4350_lcd_v4.c:2043: setColorHighlight2();
      002EA0 12r15rB6         [24] 9114 	lcall	_setColorHighlight2
                                   9115 ;	.\ecen4350_lcd_v4.c:2044: LCD_string_write("<0> Exit");
      002EA3 90r09r1C         [24] 9116 	mov	dptr,#___str_77
      002EA6 75 F0 80         [24] 9117 	mov	b,#0x80
      002EA9 12r0FrD0         [24] 9118 	lcall	_LCD_string_write
                                   9119 ;	.\ecen4350_lcd_v4.c:2045: setColorGray();
      002EAC 12r15rC2         [24] 9120 	lcall	_setColorGray
                                   9121 ;	.\ecen4350_lcd_v4.c:2046: LCD_string_write("\n               ");
      002EAF 90r08rFB         [24] 9122 	mov	dptr,#___str_74
      002EB2 75 F0 80         [24] 9123 	mov	b,#0x80
      002EB5 12r0FrD0         [24] 9124 	lcall	_LCD_string_write
                                   9125 ;	.\ecen4350_lcd_v4.c:2047: delay(60);
      002EB8 90 00 3C         [24] 9126 	mov	dptr,#0x003c
      002EBB 12r00rE0         [24] 9127 	lcall	_delay
      002EBE D0 05            [24] 9128 	pop	ar5
      002EC0 D0 06            [24] 9129 	pop	ar6
      002EC2                       9130 00106$:
                                   9131 ;	.\ecen4350_lcd_v4.c:2049: if (invalid) {
      002EC2 78r0C            [12] 9132 	mov	r0,#_edit_invalid_65536_622
      002EC4 E6               [12] 9133 	mov	a,@r0
      002EC5 70 03            [24] 9134 	jnz	00158$
      002EC7 02r2Ar20         [24] 9135 	ljmp	00109$
      002ECA                       9136 00158$:
                                   9137 ;	.\ecen4350_lcd_v4.c:2050: setCursor(0, 210);
      002ECA 75*00 D2         [24] 9138 	mov	_setCursor_PARM_2,#0xd2
      002ECD 75*01 00         [24] 9139 	mov	(_setCursor_PARM_2 + 1),#0x00
      002ED0 90 00 00         [24] 9140 	mov	dptr,#0x0000
      002ED3 C0 06            [24] 9141 	push	ar6
      002ED5 C0 05            [24] 9142 	push	ar5
      002ED7 12r04rB6         [24] 9143 	lcall	_setCursor
                                   9144 ;	.\ecen4350_lcd_v4.c:2051: setColorRed();
      002EDA 12r15rD9         [24] 9145 	lcall	_setColorRed
                                   9146 ;	.\ecen4350_lcd_v4.c:2052: LCD_string_write("\n\n\n\n Input Error ");
      002EDD 90r09r25         [24] 9147 	mov	dptr,#___str_78
      002EE0 75 F0 80         [24] 9148 	mov	b,#0x80
      002EE3 12r0FrD0         [24] 9149 	lcall	_LCD_string_write
      002EE6 D0 05            [24] 9150 	pop	ar5
      002EE8 D0 06            [24] 9151 	pop	ar6
      002EEA 02r2Ar20         [24] 9152 	ljmp	00109$
                                   9153 ;	.\ecen4350_lcd_v4.c:2055: return;
                                   9154 ;	.\ecen4350_lcd_v4.c:2056: }
      002EED 22               [24] 9155 	ret
                                   9156 ;------------------------------------------------------------
                                   9157 ;Allocation info for local variables in function 'find'
                                   9158 ;------------------------------------------------------------
                                   9159 ;d                         Allocated to registers 
                                   9160 ;i                         Allocated with name '_find_i_262144_659'
                                   9161 ;__3932160169              Allocated to registers 
                                   9162 ;__3932160170              Allocated to registers 
                                   9163 ;map_address               Allocated to registers 
                                   9164 ;d                         Allocated to registers r4 
                                   9165 ;i                         Allocated to registers r4 r6 
                                   9166 ;__3932160172              Allocated to registers 
                                   9167 ;__3932160173              Allocated to registers 
                                   9168 ;map_address               Allocated to registers 
                                   9169 ;d                         Allocated to registers r3 
                                   9170 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9171 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9172 ;address                   Allocated with name '_find_address_65536_646'
                                   9173 ;destination               Allocated to registers 
                                   9174 ;blockSize                 Allocated with name '_find_blockSize_65536_646'
                                   9175 ;value                     Allocated with name '_find_value_65536_646'
                                   9176 ;scan                      Allocated with name '_find_scan_65536_646'
                                   9177 ;page                      Allocated to registers r5 
                                   9178 ;noneFound                 Allocated with name '_find_noneFound_65536_646'
                                   9179 ;invalidInput              Allocated to registers r7 
                                   9180 ;exit                      Allocated with name '_find_exit_65536_646'
                                   9181 ;------------------------------------------------------------
                                   9182 ;	.\ecen4350_lcd_v4.c:2058: void find() {
                                   9183 ;	-----------------------------------------
                                   9184 ;	 function find
                                   9185 ;	-----------------------------------------
      002EEE                       9186 _find:
                                   9187 ;	.\ecen4350_lcd_v4.c:2062: __idata unsigned char blockSize = 0;
      002EEE 78r0F            [12] 9188 	mov	r0,#_find_blockSize_65536_646
      002EF0 76 00            [12] 9189 	mov	@r0,#0x00
                                   9190 ;	.\ecen4350_lcd_v4.c:2064: __idata unsigned char scan = 0;
      002EF2 78r11            [12] 9191 	mov	r0,#_find_scan_65536_646
      002EF4 76 00            [12] 9192 	mov	@r0,#0x00
                                   9193 ;	.\ecen4350_lcd_v4.c:2065: __idata unsigned char page = 0;
      002EF6 7D 00            [12] 9194 	mov	r5,#0x00
                                   9195 ;	.\ecen4350_lcd_v4.c:2066: __idata unsigned char noneFound = 1;
      002EF8 78r12            [12] 9196 	mov	r0,#_find_noneFound_65536_646
      002EFA 76 01            [12] 9197 	mov	@r0,#0x01
                                   9198 ;	.\ecen4350_lcd_v4.c:2067: __idata unsigned char invalidInput = 1;
      002EFC 7B 01            [12] 9199 	mov	r3,#0x01
                                   9200 ;	.\ecen4350_lcd_v4.c:2068: __idata unsigned char exit = 1;
      002EFE 78r13            [12] 9201 	mov	r0,#_find_exit_65536_646
      002F00 76 01            [12] 9202 	mov	@r0,#0x01
                                   9203 ;	.\ecen4350_lcd_v4.c:2070: clearLCD();
      002F02 C0 05            [24] 9204 	push	ar5
      002F04 C0 03            [24] 9205 	push	ar3
      002F06 12r0Dr53         [24] 9206 	lcall	_clearLCD
                                   9207 ;	.\ecen4350_lcd_v4.c:2073: setTextSize(5);
      002F09 75 82 05         [24] 9208 	mov	dpl,#0x05
      002F0C 12r04rD0         [24] 9209 	lcall	_setTextSize
                                   9210 ;	.\ecen4350_lcd_v4.c:2074: fillTop(GRAY);
      002F0F 90 D6 BA         [24] 9211 	mov	dptr,#0xd6ba
      002F12 12r0Br86         [24] 9212 	lcall	_fillTop
                                   9213 ;	.\ecen4350_lcd_v4.c:2075: setColorMenu();
      002F15 12r15rCD         [24] 9214 	lcall	_setColorMenu
                                   9215 ;	.\ecen4350_lcd_v4.c:2076: setCursor(30, 0);
      002F18 E4               [12] 9216 	clr	a
      002F19 F5*00            [12] 9217 	mov	_setCursor_PARM_2,a
      002F1B F5*01            [12] 9218 	mov	(_setCursor_PARM_2 + 1),a
      002F1D 90 00 1E         [24] 9219 	mov	dptr,#0x001e
      002F20 12r04rB6         [24] 9220 	lcall	_setCursor
                                   9221 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write("[FIND]\n");
      002F23 90r09r37         [24] 9222 	mov	dptr,#___str_79
      002F26 75 F0 80         [24] 9223 	mov	b,#0x80
      002F29 12r0FrD0         [24] 9224 	lcall	_LCD_string_write
                                   9225 ;	.\ecen4350_lcd_v4.c:2078: setColorDefault();
      002F2C 12r15r94         [24] 9226 	lcall	_setColorDefault
                                   9227 ;	.\ecen4350_lcd_v4.c:2079: setTextSize(2);
      002F2F 75 82 02         [24] 9228 	mov	dpl,#0x02
      002F32 12r04rD0         [24] 9229 	lcall	_setTextSize
                                   9230 ;	.\ecen4350_lcd_v4.c:2080: setCursor(0, 60);
      002F35 75*00 3C         [24] 9231 	mov	_setCursor_PARM_2,#0x3c
      002F38 75*01 00         [24] 9232 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F3B 90 00 00         [24] 9233 	mov	dptr,#0x0000
      002F3E 12r04rB6         [24] 9234 	lcall	_setCursor
                                   9235 ;	.\ecen4350_lcd_v4.c:2081: LCD_string_write(" Find Value:");
      002F41 90r09r3F         [24] 9236 	mov	dptr,#___str_80
      002F44 75 F0 80         [24] 9237 	mov	b,#0x80
      002F47 12r0FrD0         [24] 9238 	lcall	_LCD_string_write
                                   9239 ;	.\ecen4350_lcd_v4.c:2082: setCursor(0, 80);
      002F4A 75*00 50         [24] 9240 	mov	_setCursor_PARM_2,#0x50
      002F4D 75*01 00         [24] 9241 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F50 90 00 00         [24] 9242 	mov	dptr,#0x0000
      002F53 12r04rB6         [24] 9243 	lcall	_setCursor
                                   9244 ;	.\ecen4350_lcd_v4.c:2083: setColorGray();
      002F56 12r15rC2         [24] 9245 	lcall	_setColorGray
                                   9246 ;	.\ecen4350_lcd_v4.c:2084: LCD_string_write(" __");
      002F59 90r08r03         [24] 9247 	mov	dptr,#___str_61
      002F5C 75 F0 80         [24] 9248 	mov	b,#0x80
      002F5F 12r0FrD0         [24] 9249 	lcall	_LCD_string_write
                                   9250 ;	.\ecen4350_lcd_v4.c:2085: setCursor(0, 110);
      002F62 75*00 6E         [24] 9251 	mov	_setCursor_PARM_2,#0x6e
      002F65 75*01 00         [24] 9252 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F68 90 00 00         [24] 9253 	mov	dptr,#0x0000
      002F6B 12r04rB6         [24] 9254 	lcall	_setCursor
                                   9255 ;	.\ecen4350_lcd_v4.c:2086: setColorDefault();
      002F6E 12r15r94         [24] 9256 	lcall	_setColorDefault
                                   9257 ;	.\ecen4350_lcd_v4.c:2087: LCD_string_write(" Search Address:");
      002F71 90r09r4C         [24] 9258 	mov	dptr,#___str_81
      002F74 75 F0 80         [24] 9259 	mov	b,#0x80
      002F77 12r0FrD0         [24] 9260 	lcall	_LCD_string_write
                                   9261 ;	.\ecen4350_lcd_v4.c:2088: setCursor(0, 130 );
      002F7A 75*00 82         [24] 9262 	mov	_setCursor_PARM_2,#0x82
      002F7D 75*01 00         [24] 9263 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F80 90 00 00         [24] 9264 	mov	dptr,#0x0000
      002F83 12r04rB6         [24] 9265 	lcall	_setCursor
                                   9266 ;	.\ecen4350_lcd_v4.c:2089: setColorGray();
      002F86 12r15rC2         [24] 9267 	lcall	_setColorGray
                                   9268 ;	.\ecen4350_lcd_v4.c:2090: LCD_string_write(" 0x____");
      002F89 90r05rF4         [24] 9269 	mov	dptr,#___str_23
      002F8C 75 F0 80         [24] 9270 	mov	b,#0x80
      002F8F 12r0FrD0         [24] 9271 	lcall	_LCD_string_write
                                   9272 ;	.\ecen4350_lcd_v4.c:2091: setCursor(0, 160);
      002F92 75*00 A0         [24] 9273 	mov	_setCursor_PARM_2,#0xa0
      002F95 75*01 00         [24] 9274 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F98 90 00 00         [24] 9275 	mov	dptr,#0x0000
      002F9B 12r04rB6         [24] 9276 	lcall	_setCursor
                                   9277 ;	.\ecen4350_lcd_v4.c:2092: setColorDefault();
      002F9E 12r15r94         [24] 9278 	lcall	_setColorDefault
                                   9279 ;	.\ecen4350_lcd_v4.c:2093: LCD_string_write(" Input Block Size:\n");
      002FA1 90r09r5D         [24] 9280 	mov	dptr,#___str_82
      002FA4 75 F0 80         [24] 9281 	mov	b,#0x80
      002FA7 12r0FrD0         [24] 9282 	lcall	_LCD_string_write
                                   9283 ;	.\ecen4350_lcd_v4.c:2094: setColorGray();
      002FAA 12r15rC2         [24] 9284 	lcall	_setColorGray
                                   9285 ;	.\ecen4350_lcd_v4.c:2095: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      002FAD 90r09r71         [24] 9286 	mov	dptr,#___str_83
      002FB0 75 F0 80         [24] 9287 	mov	b,#0x80
      002FB3 12r0FrD0         [24] 9288 	lcall	_LCD_string_write
                                   9289 ;	.\ecen4350_lcd_v4.c:2096: LCD_string_write("  <FF> (SCAN)");
      002FB6 90r09r97         [24] 9290 	mov	dptr,#___str_84
      002FB9 75 F0 80         [24] 9291 	mov	b,#0x80
      002FBC 12r0FrD0         [24] 9292 	lcall	_LCD_string_write
                                   9293 ;	.\ecen4350_lcd_v4.c:2098: (0, 250);
      002FBF 75*00 FA         [24] 9294 	mov	_setCursor_PARM_2,#0xfa
      002FC2 75*01 00         [24] 9295 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FC5 90 00 00         [24] 9296 	mov	dptr,#0x0000
      002FC8 12r04rB6         [24] 9297 	lcall	_setCursor
                                   9298 ;	.\ecen4350_lcd_v4.c:2099: setColorGray();
      002FCB 12r15rC2         [24] 9299 	lcall	_setColorGray
                                   9300 ;	.\ecen4350_lcd_v4.c:2100: LCD_string_write("   __");
      002FCE 90r09rA5         [24] 9301 	mov	dptr,#___str_85
      002FD1 75 F0 80         [24] 9302 	mov	b,#0x80
      002FD4 12r0FrD0         [24] 9303 	lcall	_LCD_string_write
                                   9304 ;	.\ecen4350_lcd_v4.c:2107: setColorSelect();
      002FD7 12r15r9F         [24] 9305 	lcall	_setColorSelect
                                   9306 ;	.\ecen4350_lcd_v4.c:2108: setCursor(0, 60);
      002FDA 75*00 3C         [24] 9307 	mov	_setCursor_PARM_2,#0x3c
      002FDD 75*01 00         [24] 9308 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FE0 90 00 00         [24] 9309 	mov	dptr,#0x0000
      002FE3 12r04rB6         [24] 9310 	lcall	_setCursor
                                   9311 ;	.\ecen4350_lcd_v4.c:2109: LCD_string_write(" Find Value:");
      002FE6 90r09r3F         [24] 9312 	mov	dptr,#___str_80
      002FE9 75 F0 80         [24] 9313 	mov	b,#0x80
      002FEC 12r0FrD0         [24] 9314 	lcall	_LCD_string_write
                                   9315 ;	.\ecen4350_lcd_v4.c:2110: setCursor(0, 80);
      002FEF 75*00 50         [24] 9316 	mov	_setCursor_PARM_2,#0x50
      002FF2 75*01 00         [24] 9317 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FF5 90 00 00         [24] 9318 	mov	dptr,#0x0000
      002FF8 12r04rB6         [24] 9319 	lcall	_setCursor
                                   9320 ;	.\ecen4350_lcd_v4.c:2111: setColorWhite();
      002FFB 12r15rE4         [24] 9321 	lcall	_setColorWhite
                                   9322 ;	.\ecen4350_lcd_v4.c:2112: setCursor(0, 80);
      002FFE 75*00 50         [24] 9323 	mov	_setCursor_PARM_2,#0x50
      003001 75*01 00         [24] 9324 	mov	(_setCursor_PARM_2 + 1),#0x00
      003004 90 00 00         [24] 9325 	mov	dptr,#0x0000
      003007 12r04rB6         [24] 9326 	lcall	_setCursor
                                   9327 ;	.\ecen4350_lcd_v4.c:2113: LCD_string_write(" ");
      00300A 90r06r56         [24] 9328 	mov	dptr,#___str_29
      00300D 75 F0 80         [24] 9329 	mov	b,#0x80
      003010 12r0FrD0         [24] 9330 	lcall	_LCD_string_write
                                   9331 ;	.\ecen4350_lcd_v4.c:2114: setColorHighlight1();
      003013 12r15rAA         [24] 9332 	lcall	_setColorHighlight1
                                   9333 ;	.\ecen4350_lcd_v4.c:2115: selection = keyDetect();
      003016 12r10rEE         [24] 9334 	lcall	_keyDetect
      003019 AC 82            [24] 9335 	mov	r4,dpl
      00301B 78r00            [12] 9336 	mov	r0,#_selection
      00301D A6 04            [24] 9337 	mov	@r0,ar4
                                   9338 ;	.\ecen4350_lcd_v4.c:2116: write(selection);
      00301F 8C 82            [24] 9339 	mov	dpl,r4
      003021 12r0Fr6A         [24] 9340 	lcall	_write
                                   9341 ;	.\ecen4350_lcd_v4.c:2117: selection = ASCIItoHex(selection);
      003024 78r00            [12] 9342 	mov	r0,#_selection
      003026 86 82            [24] 9343 	mov	dpl,@r0
      003028 12r13r5C         [24] 9344 	lcall	_ASCIItoHex
      00302B AC 82            [24] 9345 	mov	r4,dpl
      00302D D0 03            [24] 9346 	pop	ar3
      00302F 78r00            [12] 9347 	mov	r0,#_selection
      003031 A6 04            [24] 9348 	mov	@r0,ar4
                                   9349 ;	.\ecen4350_lcd_v4.c:2118: value |= selection * 16;
      003033 EC               [12] 9350 	mov	a,r4
      003034 C4               [12] 9351 	swap	a
      003035 54 F0            [12] 9352 	anl	a,#0xf0
      003037 FC               [12] 9353 	mov	r4,a
                                   9354 ;	.\ecen4350_lcd_v4.c:2119: selection = keyDetect();
      003038 C0 04            [24] 9355 	push	ar4
      00303A C0 03            [24] 9356 	push	ar3
      00303C 12r10rEE         [24] 9357 	lcall	_keyDetect
      00303F AE 82            [24] 9358 	mov	r6,dpl
      003041 78r00            [12] 9359 	mov	r0,#_selection
      003043 A6 06            [24] 9360 	mov	@r0,ar6
                                   9361 ;	.\ecen4350_lcd_v4.c:2120: write(selection);
      003045 8E 82            [24] 9362 	mov	dpl,r6
      003047 12r0Fr6A         [24] 9363 	lcall	_write
                                   9364 ;	.\ecen4350_lcd_v4.c:2121: selection = ASCIItoHex(selection);
      00304A 78r00            [12] 9365 	mov	r0,#_selection
      00304C 86 82            [24] 9366 	mov	dpl,@r0
      00304E 12r13r5C         [24] 9367 	lcall	_ASCIItoHex
      003051 AE 82            [24] 9368 	mov	r6,dpl
      003053 D0 03            [24] 9369 	pop	ar3
      003055 D0 04            [24] 9370 	pop	ar4
      003057 78r00            [12] 9371 	mov	r0,#_selection
      003059 A6 06            [24] 9372 	mov	@r0,ar6
                                   9373 ;	.\ecen4350_lcd_v4.c:2122: value |= selection;
      00305B 78r10            [12] 9374 	mov	r0,#_find_value_65536_646
      00305D EE               [12] 9375 	mov	a,r6
      00305E 4C               [12] 9376 	orl	a,r4
      00305F F6               [12] 9377 	mov	@r0,a
                                   9378 ;	.\ecen4350_lcd_v4.c:2125: setColorDefault();
      003060 C0 03            [24] 9379 	push	ar3
      003062 12r15r94         [24] 9380 	lcall	_setColorDefault
                                   9381 ;	.\ecen4350_lcd_v4.c:2126: setCursor(0, 60);
      003065 75*00 3C         [24] 9382 	mov	_setCursor_PARM_2,#0x3c
      003068 75*01 00         [24] 9383 	mov	(_setCursor_PARM_2 + 1),#0x00
      00306B 90 00 00         [24] 9384 	mov	dptr,#0x0000
      00306E 12r04rB6         [24] 9385 	lcall	_setCursor
                                   9386 ;	.\ecen4350_lcd_v4.c:2127: LCD_string_write(" Find Value:");
      003071 90r09r3F         [24] 9387 	mov	dptr,#___str_80
      003074 75 F0 80         [24] 9388 	mov	b,#0x80
      003077 12r0FrD0         [24] 9389 	lcall	_LCD_string_write
                                   9390 ;	.\ecen4350_lcd_v4.c:2128: setCursor(0, 80);
      00307A 75*00 50         [24] 9391 	mov	_setCursor_PARM_2,#0x50
      00307D 75*01 00         [24] 9392 	mov	(_setCursor_PARM_2 + 1),#0x00
      003080 90 00 00         [24] 9393 	mov	dptr,#0x0000
      003083 12r04rB6         [24] 9394 	lcall	_setCursor
                                   9395 ;	.\ecen4350_lcd_v4.c:2129: setColorWhite();
      003086 12r15rE4         [24] 9396 	lcall	_setColorWhite
                                   9397 ;	.\ecen4350_lcd_v4.c:2130: LCD_string_write(" ");
      003089 90r06r56         [24] 9398 	mov	dptr,#___str_29
      00308C 75 F0 80         [24] 9399 	mov	b,#0x80
      00308F 12r0FrD0         [24] 9400 	lcall	_LCD_string_write
                                   9401 ;	.\ecen4350_lcd_v4.c:2131: setColorHighlight2();
      003092 12r15rB6         [24] 9402 	lcall	_setColorHighlight2
                                   9403 ;	.\ecen4350_lcd_v4.c:2132: print8Hex(value);
      003095 78r10            [12] 9404 	mov	r0,#_find_value_65536_646
      003097 86 82            [24] 9405 	mov	dpl,@r0
      003099 12r14rA1         [24] 9406 	lcall	_print8Hex
                                   9407 ;	.\ecen4350_lcd_v4.c:2135: setColorSelect();
      00309C 12r15r9F         [24] 9408 	lcall	_setColorSelect
                                   9409 ;	.\ecen4350_lcd_v4.c:2136: setCursor(0, 110);
      00309F 75*00 6E         [24] 9410 	mov	_setCursor_PARM_2,#0x6e
      0030A2 75*01 00         [24] 9411 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030A5 90 00 00         [24] 9412 	mov	dptr,#0x0000
      0030A8 12r04rB6         [24] 9413 	lcall	_setCursor
                                   9414 ;	.\ecen4350_lcd_v4.c:2137: LCD_string_write(" Search Address:");
      0030AB 90r09r4C         [24] 9415 	mov	dptr,#___str_81
      0030AE 75 F0 80         [24] 9416 	mov	b,#0x80
      0030B1 12r0FrD0         [24] 9417 	lcall	_LCD_string_write
                                   9418 ;	.\ecen4350_lcd_v4.c:2138: setCursor(0, 130);
      0030B4 75*00 82         [24] 9419 	mov	_setCursor_PARM_2,#0x82
      0030B7 75*01 00         [24] 9420 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030BA 90 00 00         [24] 9421 	mov	dptr,#0x0000
      0030BD 12r04rB6         [24] 9422 	lcall	_setCursor
                                   9423 ;	.\ecen4350_lcd_v4.c:2139: LCD_string_write(" ");
      0030C0 90r06r56         [24] 9424 	mov	dptr,#___str_29
      0030C3 75 F0 80         [24] 9425 	mov	b,#0x80
      0030C6 12r0FrD0         [24] 9426 	lcall	_LCD_string_write
                                   9427 ;	.\ecen4350_lcd_v4.c:2140: setColorHighlight1();
      0030C9 12r15rAA         [24] 9428 	lcall	_setColorHighlight1
                                   9429 ;	.\ecen4350_lcd_v4.c:2141: LCD_string_write("0x");
      0030CC 90r05r29         [24] 9430 	mov	dptr,#___str_2
      0030CF 75 F0 80         [24] 9431 	mov	b,#0x80
      0030D2 12r0FrD0         [24] 9432 	lcall	_LCD_string_write
                                   9433 ;	.\ecen4350_lcd_v4.c:2142: address = inputAddress();
      0030D5 12r16r05         [24] 9434 	lcall	_inputAddress
      0030D8 78r0D            [12] 9435 	mov	r0,#_find_address_65536_646
      0030DA A6 82            [24] 9436 	mov	@r0,dpl
      0030DC 08               [12] 9437 	inc	r0
      0030DD A6 83            [24] 9438 	mov	@r0,dph
                                   9439 ;	.\ecen4350_lcd_v4.c:2145: setColorDefault();
      0030DF 12r15r94         [24] 9440 	lcall	_setColorDefault
                                   9441 ;	.\ecen4350_lcd_v4.c:2146: setCursor(0, 110);
      0030E2 75*00 6E         [24] 9442 	mov	_setCursor_PARM_2,#0x6e
      0030E5 75*01 00         [24] 9443 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030E8 90 00 00         [24] 9444 	mov	dptr,#0x0000
      0030EB 12r04rB6         [24] 9445 	lcall	_setCursor
                                   9446 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write(" Search Address:");
      0030EE 90r09r4C         [24] 9447 	mov	dptr,#___str_81
      0030F1 75 F0 80         [24] 9448 	mov	b,#0x80
      0030F4 12r0FrD0         [24] 9449 	lcall	_LCD_string_write
                                   9450 ;	.\ecen4350_lcd_v4.c:2148: setCursor(0, 130);
      0030F7 75*00 82         [24] 9451 	mov	_setCursor_PARM_2,#0x82
      0030FA 75*01 00         [24] 9452 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030FD 90 00 00         [24] 9453 	mov	dptr,#0x0000
      003100 12r04rB6         [24] 9454 	lcall	_setCursor
                                   9455 ;	.\ecen4350_lcd_v4.c:2149: LCD_string_write(" ");
      003103 90r06r56         [24] 9456 	mov	dptr,#___str_29
      003106 75 F0 80         [24] 9457 	mov	b,#0x80
      003109 12r0FrD0         [24] 9458 	lcall	_LCD_string_write
                                   9459 ;	.\ecen4350_lcd_v4.c:2150: setColorHighlight2();
      00310C 12r15rB6         [24] 9460 	lcall	_setColorHighlight2
                                   9461 ;	.\ecen4350_lcd_v4.c:2151: LCD_string_write("0x");
      00310F 90r05r29         [24] 9462 	mov	dptr,#___str_2
      003112 75 F0 80         [24] 9463 	mov	b,#0x80
      003115 12r0FrD0         [24] 9464 	lcall	_LCD_string_write
                                   9465 ;	.\ecen4350_lcd_v4.c:2152: print16Hex(address);
      003118 78r0D            [12] 9466 	mov	r0,#_find_address_65536_646
      00311A 86 82            [24] 9467 	mov	dpl,@r0
      00311C 08               [12] 9468 	inc	r0
      00311D 86 83            [24] 9469 	mov	dph,@r0
      00311F 12r14rB8         [24] 9470 	lcall	_print16Hex
                                   9471 ;	.\ecen4350_lcd_v4.c:2155: setColorSelect();
      003122 12r15r9F         [24] 9472 	lcall	_setColorSelect
                                   9473 ;	.\ecen4350_lcd_v4.c:2156: setCursor(0, 160);
      003125 75*00 A0         [24] 9474 	mov	_setCursor_PARM_2,#0xa0
      003128 75*01 00         [24] 9475 	mov	(_setCursor_PARM_2 + 1),#0x00
      00312B 90 00 00         [24] 9476 	mov	dptr,#0x0000
      00312E 12r04rB6         [24] 9477 	lcall	_setCursor
                                   9478 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write(" Input Block Size:\n");
      003131 90r09r5D         [24] 9479 	mov	dptr,#___str_82
      003134 75 F0 80         [24] 9480 	mov	b,#0x80
      003137 12r0FrD0         [24] 9481 	lcall	_LCD_string_write
                                   9482 ;	.\ecen4350_lcd_v4.c:2158: setColorWhite();
      00313A 12r15rE4         [24] 9483 	lcall	_setColorWhite
                                   9484 ;	.\ecen4350_lcd_v4.c:2159: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      00313D 90r09r71         [24] 9485 	mov	dptr,#___str_83
      003140 75 F0 80         [24] 9486 	mov	b,#0x80
      003143 12r0FrD0         [24] 9487 	lcall	_LCD_string_write
                                   9488 ;	.\ecen4350_lcd_v4.c:2160: LCD_string_write("  <FF> (SCAN)");
      003146 90r09r97         [24] 9489 	mov	dptr,#___str_84
      003149 75 F0 80         [24] 9490 	mov	b,#0x80
      00314C 12r0FrD0         [24] 9491 	lcall	_LCD_string_write
      00314F D0 03            [24] 9492 	pop	ar3
      003151 D0 05            [24] 9493 	pop	ar5
                                   9494 ;	.\ecen4350_lcd_v4.c:2161: while (invalidInput) {
      003153                       9495 00113$:
      003153 EB               [12] 9496 	mov	a,r3
      003154 70 03            [24] 9497 	jnz	00539$
      003156 02r32r12         [24] 9498 	ljmp	00115$
      003159                       9499 00539$:
                                   9500 ;	.\ecen4350_lcd_v4.c:2162: setCursor(0, 250);
      003159 75*00 FA         [24] 9501 	mov	_setCursor_PARM_2,#0xfa
      00315C 75*01 00         [24] 9502 	mov	(_setCursor_PARM_2 + 1),#0x00
      00315F 90 00 00         [24] 9503 	mov	dptr,#0x0000
      003162 C0 05            [24] 9504 	push	ar5
      003164 C0 03            [24] 9505 	push	ar3
      003166 12r04rB6         [24] 9506 	lcall	_setCursor
                                   9507 ;	.\ecen4350_lcd_v4.c:2163: setColorGray();
      003169 12r15rC2         [24] 9508 	lcall	_setColorGray
                                   9509 ;	.\ecen4350_lcd_v4.c:2164: LCD_string_write("   __");
      00316C 90r09rA5         [24] 9510 	mov	dptr,#___str_85
      00316F 75 F0 80         [24] 9511 	mov	b,#0x80
      003172 12r0FrD0         [24] 9512 	lcall	_LCD_string_write
                                   9513 ;	.\ecen4350_lcd_v4.c:2165: setCursor(0, 250);
      003175 75*00 FA         [24] 9514 	mov	_setCursor_PARM_2,#0xfa
      003178 75*01 00         [24] 9515 	mov	(_setCursor_PARM_2 + 1),#0x00
      00317B 90 00 00         [24] 9516 	mov	dptr,#0x0000
      00317E 12r04rB6         [24] 9517 	lcall	_setCursor
                                   9518 ;	.\ecen4350_lcd_v4.c:2166: LCD_string_write("   ");
      003181 90r09rAB         [24] 9519 	mov	dptr,#___str_86
      003184 75 F0 80         [24] 9520 	mov	b,#0x80
      003187 12r0FrD0         [24] 9521 	lcall	_LCD_string_write
                                   9522 ;	.\ecen4350_lcd_v4.c:2167: setColorHighlight1();
      00318A 12r15rAA         [24] 9523 	lcall	_setColorHighlight1
                                   9524 ;	.\ecen4350_lcd_v4.c:2168: blockSize = inputBlockSize();
      00318D 12r16rB5         [24] 9525 	lcall	_inputBlockSize
      003190 78r0F            [12] 9526 	mov	r0,#_find_blockSize_65536_646
      003192 A6 82            [24] 9527 	mov	@r0,dpl
      003194 D0 03            [24] 9528 	pop	ar3
      003196 D0 05            [24] 9529 	pop	ar5
                                   9530 ;	.\ecen4350_lcd_v4.c:2169: if (blockSize == 0x01) {
      003198 78r0F            [12] 9531 	mov	r0,#_find_blockSize_65536_646
      00319A B6 01 18         [24] 9532 	cjne	@r0,#0x01,00111$
                                   9533 ;	.\ecen4350_lcd_v4.c:2170: invalidInput = 0;
      00319D 7B 00            [12] 9534 	mov	r3,#0x00
                                   9535 ;	.\ecen4350_lcd_v4.c:2171: setColorDefault();
      00319F C0 05            [24] 9536 	push	ar5
      0031A1 C0 03            [24] 9537 	push	ar3
      0031A3 12r15r94         [24] 9538 	lcall	_setColorDefault
                                   9539 ;	.\ecen4350_lcd_v4.c:2172: LCD_string_write("\n                ");
      0031A6 90r09rAF         [24] 9540 	mov	dptr,#___str_87
      0031A9 75 F0 80         [24] 9541 	mov	b,#0x80
      0031AC 12r0FrD0         [24] 9542 	lcall	_LCD_string_write
      0031AF D0 03            [24] 9543 	pop	ar3
      0031B1 D0 05            [24] 9544 	pop	ar5
      0031B3 80 9E            [24] 9545 	sjmp	00113$
      0031B5                       9546 00111$:
                                   9547 ;	.\ecen4350_lcd_v4.c:2173: } else if (blockSize == 0x02) {
      0031B5 78r0F            [12] 9548 	mov	r0,#_find_blockSize_65536_646
      0031B7 B6 02 19         [24] 9549 	cjne	@r0,#0x02,00108$
                                   9550 ;	.\ecen4350_lcd_v4.c:2174: invalidInput = 0;
      0031BA 7B 00            [12] 9551 	mov	r3,#0x00
                                   9552 ;	.\ecen4350_lcd_v4.c:2175: setColorDefault();
      0031BC C0 05            [24] 9553 	push	ar5
      0031BE C0 03            [24] 9554 	push	ar3
      0031C0 12r15r94         [24] 9555 	lcall	_setColorDefault
                                   9556 ;	.\ecen4350_lcd_v4.c:2176: LCD_string_write("\n                ");
      0031C3 90r09rAF         [24] 9557 	mov	dptr,#___str_87
      0031C6 75 F0 80         [24] 9558 	mov	b,#0x80
      0031C9 12r0FrD0         [24] 9559 	lcall	_LCD_string_write
      0031CC D0 03            [24] 9560 	pop	ar3
      0031CE D0 05            [24] 9561 	pop	ar5
      0031D0 02r31r53         [24] 9562 	ljmp	00113$
      0031D3                       9563 00108$:
                                   9564 ;	.\ecen4350_lcd_v4.c:2177: } else if (blockSize == 0x04) {
      0031D3 78r0F            [12] 9565 	mov	r0,#_find_blockSize_65536_646
      0031D5 B6 04 19         [24] 9566 	cjne	@r0,#0x04,00105$
                                   9567 ;	.\ecen4350_lcd_v4.c:2178: invalidInput = 0;
      0031D8 7B 00            [12] 9568 	mov	r3,#0x00
                                   9569 ;	.\ecen4350_lcd_v4.c:2179: setColorDefault();
      0031DA C0 05            [24] 9570 	push	ar5
      0031DC C0 03            [24] 9571 	push	ar3
      0031DE 12r15r94         [24] 9572 	lcall	_setColorDefault
                                   9573 ;	.\ecen4350_lcd_v4.c:2180: LCD_string_write("\n                ");
      0031E1 90r09rAF         [24] 9574 	mov	dptr,#___str_87
      0031E4 75 F0 80         [24] 9575 	mov	b,#0x80
      0031E7 12r0FrD0         [24] 9576 	lcall	_LCD_string_write
      0031EA D0 03            [24] 9577 	pop	ar3
      0031EC D0 05            [24] 9578 	pop	ar5
      0031EE 02r31r53         [24] 9579 	ljmp	00113$
      0031F1                       9580 00105$:
                                   9581 ;	.\ecen4350_lcd_v4.c:2181: } else if (blockSize == 0xFF) {
      0031F1 78r0F            [12] 9582 	mov	r0,#_find_blockSize_65536_646
      0031F3 B6 FF 05         [24] 9583 	cjne	@r0,#0xff,00102$
                                   9584 ;	.\ecen4350_lcd_v4.c:2182: invalidInput = 0;
      0031F6 7B 00            [12] 9585 	mov	r3,#0x00
      0031F8 02r31r53         [24] 9586 	ljmp	00113$
      0031FB                       9587 00102$:
                                   9588 ;	.\ecen4350_lcd_v4.c:2185: setColorRed();
      0031FB C0 05            [24] 9589 	push	ar5
      0031FD C0 03            [24] 9590 	push	ar3
      0031FF 12r15rD9         [24] 9591 	lcall	_setColorRed
                                   9592 ;	.\ecen4350_lcd_v4.c:2186: LCD_string_write("\n Try again");
      003202 90r09rC1         [24] 9593 	mov	dptr,#___str_88
      003205 75 F0 80         [24] 9594 	mov	b,#0x80
      003208 12r0FrD0         [24] 9595 	lcall	_LCD_string_write
      00320B D0 03            [24] 9596 	pop	ar3
      00320D D0 05            [24] 9597 	pop	ar5
      00320F 02r31r53         [24] 9598 	ljmp	00113$
      003212                       9599 00115$:
                                   9600 ;	.\ecen4350_lcd_v4.c:2191: setCursor(0, 160);
      003212 75*00 A0         [24] 9601 	mov	_setCursor_PARM_2,#0xa0
      003215 75*01 00         [24] 9602 	mov	(_setCursor_PARM_2 + 1),#0x00
      003218 90 00 00         [24] 9603 	mov	dptr,#0x0000
      00321B C0 05            [24] 9604 	push	ar5
      00321D 12r04rB6         [24] 9605 	lcall	_setCursor
                                   9606 ;	.\ecen4350_lcd_v4.c:2192: setColorDefault();
      003220 12r15r94         [24] 9607 	lcall	_setColorDefault
                                   9608 ;	.\ecen4350_lcd_v4.c:2193: LCD_string_write(" Input Block Size:\n");
      003223 90r09r5D         [24] 9609 	mov	dptr,#___str_82
      003226 75 F0 80         [24] 9610 	mov	b,#0x80
      003229 12r0FrD0         [24] 9611 	lcall	_LCD_string_write
      00322C D0 05            [24] 9612 	pop	ar5
                                   9613 ;	.\ecen4350_lcd_v4.c:2194: if (blockSize == 0x01){
      00322E 78r0F            [12] 9614 	mov	r0,#_find_blockSize_65536_646
      003230 B6 01 74         [24] 9615 	cjne	@r0,#0x01,00125$
                                   9616 ;	.\ecen4350_lcd_v4.c:2195: LCD_string_write("  ");
      003233 90r06r6F         [24] 9617 	mov	dptr,#___str_32
      003236 75 F0 80         [24] 9618 	mov	b,#0x80
      003239 C0 05            [24] 9619 	push	ar5
      00323B 12r0FrD0         [24] 9620 	lcall	_LCD_string_write
                                   9621 ;	.\ecen4350_lcd_v4.c:2196: setColorHighlight2();
      00323E 12r15rB6         [24] 9622 	lcall	_setColorHighlight2
                                   9623 ;	.\ecen4350_lcd_v4.c:2197: LCD_string_write("<01> BYTE\n");
      003241 90r09rCD         [24] 9624 	mov	dptr,#___str_89
      003244 75 F0 80         [24] 9625 	mov	b,#0x80
      003247 12r0FrD0         [24] 9626 	lcall	_LCD_string_write
                                   9627 ;	.\ecen4350_lcd_v4.c:2198: setColorGray();
      00324A 12r15rC2         [24] 9628 	lcall	_setColorGray
                                   9629 ;	.\ecen4350_lcd_v4.c:2199: LCD_string_write("  <02> WORD\n");
      00324D 90r09rD8         [24] 9630 	mov	dptr,#___str_90
      003250 75 F0 80         [24] 9631 	mov	b,#0x80
      003253 12r0FrD0         [24] 9632 	lcall	_LCD_string_write
                                   9633 ;	.\ecen4350_lcd_v4.c:2200: LCD_string_write("  <04> DWORD\n");
      003256 90r09rE5         [24] 9634 	mov	dptr,#___str_91
      003259 75 F0 80         [24] 9635 	mov	b,#0x80
      00325C 12r0FrD0         [24] 9636 	lcall	_LCD_string_write
                                   9637 ;	.\ecen4350_lcd_v4.c:2201: LCD_string_write("  <FF> (SCAN)");
      00325F 90r09r97         [24] 9638 	mov	dptr,#___str_84
      003262 75 F0 80         [24] 9639 	mov	b,#0x80
      003265 12r0FrD0         [24] 9640 	lcall	_LCD_string_write
                                   9641 ;	.\ecen4350_lcd_v4.c:2202: setColorDefault();
      003268 12r15r94         [24] 9642 	lcall	_setColorDefault
                                   9643 ;	.\ecen4350_lcd_v4.c:2203: setCursor(0, 250);
      00326B 75*00 FA         [24] 9644 	mov	_setCursor_PARM_2,#0xfa
      00326E 75*01 00         [24] 9645 	mov	(_setCursor_PARM_2 + 1),#0x00
      003271 90 00 00         [24] 9646 	mov	dptr,#0x0000
      003274 12r04rB6         [24] 9647 	lcall	_setCursor
                                   9648 ;	.\ecen4350_lcd_v4.c:2204: LCD_string_write("   ");
      003277 90r09rAB         [24] 9649 	mov	dptr,#___str_86
      00327A 75 F0 80         [24] 9650 	mov	b,#0x80
      00327D 12r0FrD0         [24] 9651 	lcall	_LCD_string_write
                                   9652 ;	.\ecen4350_lcd_v4.c:2205: setColorHighlight2();
      003280 12r15rB6         [24] 9653 	lcall	_setColorHighlight2
                                   9654 ;	.\ecen4350_lcd_v4.c:2206: print8Hex(blockSize);
      003283 78r0F            [12] 9655 	mov	r0,#_find_blockSize_65536_646
      003285 86 82            [24] 9656 	mov	dpl,@r0
      003287 12r14rA1         [24] 9657 	lcall	_print8Hex
                                   9658 ;	.\ecen4350_lcd_v4.c:2207: setColorDefault();
      00328A 12r15r94         [24] 9659 	lcall	_setColorDefault
                                   9660 ;	.\ecen4350_lcd_v4.c:2208: LCD_string_write("\n Search Size Limit:");
      00328D 90r09rF3         [24] 9661 	mov	dptr,#___str_92
      003290 75 F0 80         [24] 9662 	mov	b,#0x80
      003293 12r0FrD0         [24] 9663 	lcall	_LCD_string_write
                                   9664 ;	.\ecen4350_lcd_v4.c:2209: setColorWhite();
      003296 12r15rE4         [24] 9665 	lcall	_setColorWhite
                                   9666 ;	.\ecen4350_lcd_v4.c:2210: LCD_string_write("\n BYTE [8 bits]");
      003299 90r0Ar08         [24] 9667 	mov	dptr,#___str_93
      00329C 75 F0 80         [24] 9668 	mov	b,#0x80
      00329F 12r0FrD0         [24] 9669 	lcall	_LCD_string_write
      0032A2 D0 05            [24] 9670 	pop	ar5
      0032A4 02r33rEB         [24] 9671 	ljmp	00126$
      0032A7                       9672 00125$:
                                   9673 ;	.\ecen4350_lcd_v4.c:2211: } else if (blockSize == 0x02) {
      0032A7 78r0F            [12] 9674 	mov	r0,#_find_blockSize_65536_646
      0032A9 B6 02 6E         [24] 9675 	cjne	@r0,#0x02,00122$
                                   9676 ;	.\ecen4350_lcd_v4.c:2212: setColorGray();
      0032AC C0 05            [24] 9677 	push	ar5
      0032AE 12r15rC2         [24] 9678 	lcall	_setColorGray
                                   9679 ;	.\ecen4350_lcd_v4.c:2213: LCD_string_write("  <01> BYTE\n  ");
      0032B1 90r0Ar18         [24] 9680 	mov	dptr,#___str_94
      0032B4 75 F0 80         [24] 9681 	mov	b,#0x80
      0032B7 12r0FrD0         [24] 9682 	lcall	_LCD_string_write
                                   9683 ;	.\ecen4350_lcd_v4.c:2214: setColorHighlight2();
      0032BA 12r15rB6         [24] 9684 	lcall	_setColorHighlight2
                                   9685 ;	.\ecen4350_lcd_v4.c:2215: LCD_string_write("<02> WORD\n");
      0032BD 90r0Ar27         [24] 9686 	mov	dptr,#___str_95
      0032C0 75 F0 80         [24] 9687 	mov	b,#0x80
      0032C3 12r0FrD0         [24] 9688 	lcall	_LCD_string_write
                                   9689 ;	.\ecen4350_lcd_v4.c:2216: setColorGray();
      0032C6 12r15rC2         [24] 9690 	lcall	_setColorGray
                                   9691 ;	.\ecen4350_lcd_v4.c:2217: LCD_string_write("  <04> DWORD\n");
      0032C9 90r09rE5         [24] 9692 	mov	dptr,#___str_91
      0032CC 75 F0 80         [24] 9693 	mov	b,#0x80
      0032CF 12r0FrD0         [24] 9694 	lcall	_LCD_string_write
                                   9695 ;	.\ecen4350_lcd_v4.c:2218: LCD_string_write("  <FF> (SCAN)");
      0032D2 90r09r97         [24] 9696 	mov	dptr,#___str_84
      0032D5 75 F0 80         [24] 9697 	mov	b,#0x80
      0032D8 12r0FrD0         [24] 9698 	lcall	_LCD_string_write
                                   9699 ;	.\ecen4350_lcd_v4.c:2219: setColorDefault();
      0032DB 12r15r94         [24] 9700 	lcall	_setColorDefault
                                   9701 ;	.\ecen4350_lcd_v4.c:2220: setCursor(0, 250);
      0032DE 75*00 FA         [24] 9702 	mov	_setCursor_PARM_2,#0xfa
      0032E1 75*01 00         [24] 9703 	mov	(_setCursor_PARM_2 + 1),#0x00
      0032E4 90 00 00         [24] 9704 	mov	dptr,#0x0000
      0032E7 12r04rB6         [24] 9705 	lcall	_setCursor
                                   9706 ;	.\ecen4350_lcd_v4.c:2221: LCD_string_write("   ");
      0032EA 90r09rAB         [24] 9707 	mov	dptr,#___str_86
      0032ED 75 F0 80         [24] 9708 	mov	b,#0x80
      0032F0 12r0FrD0         [24] 9709 	lcall	_LCD_string_write
                                   9710 ;	.\ecen4350_lcd_v4.c:2222: setColorHighlight2();
      0032F3 12r15rB6         [24] 9711 	lcall	_setColorHighlight2
                                   9712 ;	.\ecen4350_lcd_v4.c:2223: print8Hex(blockSize);
      0032F6 78r0F            [12] 9713 	mov	r0,#_find_blockSize_65536_646
      0032F8 86 82            [24] 9714 	mov	dpl,@r0
      0032FA 12r14rA1         [24] 9715 	lcall	_print8Hex
                                   9716 ;	.\ecen4350_lcd_v4.c:2224: setColorDefault();
      0032FD 12r15r94         [24] 9717 	lcall	_setColorDefault
                                   9718 ;	.\ecen4350_lcd_v4.c:2225: LCD_string_write("\n Search Size Limit:");
      003300 90r09rF3         [24] 9719 	mov	dptr,#___str_92
      003303 75 F0 80         [24] 9720 	mov	b,#0x80
      003306 12r0FrD0         [24] 9721 	lcall	_LCD_string_write
                                   9722 ;	.\ecen4350_lcd_v4.c:2226: setColorWhite();
      003309 12r15rE4         [24] 9723 	lcall	_setColorWhite
                                   9724 ;	.\ecen4350_lcd_v4.c:2227: LCD_string_write("\n WORD [16 bits]");
      00330C 90r0Ar32         [24] 9725 	mov	dptr,#___str_96
      00330F 75 F0 80         [24] 9726 	mov	b,#0x80
      003312 12r0FrD0         [24] 9727 	lcall	_LCD_string_write
      003315 D0 05            [24] 9728 	pop	ar5
      003317 02r33rEB         [24] 9729 	ljmp	00126$
      00331A                       9730 00122$:
                                   9731 ;	.\ecen4350_lcd_v4.c:2228: } else if (blockSize == 0x04) {
      00331A 78r0F            [12] 9732 	mov	r0,#_find_blockSize_65536_646
      00331C B6 04 64         [24] 9733 	cjne	@r0,#0x04,00119$
                                   9734 ;	.\ecen4350_lcd_v4.c:2229: setColorGray();
      00331F C0 05            [24] 9735 	push	ar5
      003321 12r15rC2         [24] 9736 	lcall	_setColorGray
                                   9737 ;	.\ecen4350_lcd_v4.c:2230: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003324 90r0Ar43         [24] 9738 	mov	dptr,#___str_97
      003327 75 F0 80         [24] 9739 	mov	b,#0x80
      00332A 12r0FrD0         [24] 9740 	lcall	_LCD_string_write
                                   9741 ;	.\ecen4350_lcd_v4.c:2231: setColorHighlight2();
      00332D 12r15rB6         [24] 9742 	lcall	_setColorHighlight2
                                   9743 ;	.\ecen4350_lcd_v4.c:2232: LCD_string_write("<04> DWORD\n");
      003330 90r0Ar5E         [24] 9744 	mov	dptr,#___str_98
      003333 75 F0 80         [24] 9745 	mov	b,#0x80
      003336 12r0FrD0         [24] 9746 	lcall	_LCD_string_write
                                   9747 ;	.\ecen4350_lcd_v4.c:2233: setColorGray();
      003339 12r15rC2         [24] 9748 	lcall	_setColorGray
                                   9749 ;	.\ecen4350_lcd_v4.c:2234: LCD_string_write("  <FF> (SCAN)");
      00333C 90r09r97         [24] 9750 	mov	dptr,#___str_84
      00333F 75 F0 80         [24] 9751 	mov	b,#0x80
      003342 12r0FrD0         [24] 9752 	lcall	_LCD_string_write
                                   9753 ;	.\ecen4350_lcd_v4.c:2235: setColorDefault();
      003345 12r15r94         [24] 9754 	lcall	_setColorDefault
                                   9755 ;	.\ecen4350_lcd_v4.c:2236: setCursor(0, 250);
      003348 75*00 FA         [24] 9756 	mov	_setCursor_PARM_2,#0xfa
      00334B 75*01 00         [24] 9757 	mov	(_setCursor_PARM_2 + 1),#0x00
      00334E 90 00 00         [24] 9758 	mov	dptr,#0x0000
      003351 12r04rB6         [24] 9759 	lcall	_setCursor
                                   9760 ;	.\ecen4350_lcd_v4.c:2237: LCD_string_write("   ");
      003354 90r09rAB         [24] 9761 	mov	dptr,#___str_86
      003357 75 F0 80         [24] 9762 	mov	b,#0x80
      00335A 12r0FrD0         [24] 9763 	lcall	_LCD_string_write
                                   9764 ;	.\ecen4350_lcd_v4.c:2238: setColorHighlight2();
      00335D 12r15rB6         [24] 9765 	lcall	_setColorHighlight2
                                   9766 ;	.\ecen4350_lcd_v4.c:2239: print8Hex(blockSize);
      003360 78r0F            [12] 9767 	mov	r0,#_find_blockSize_65536_646
      003362 86 82            [24] 9768 	mov	dpl,@r0
      003364 12r14rA1         [24] 9769 	lcall	_print8Hex
                                   9770 ;	.\ecen4350_lcd_v4.c:2240: setColorDefault();
      003367 12r15r94         [24] 9771 	lcall	_setColorDefault
                                   9772 ;	.\ecen4350_lcd_v4.c:2241: LCD_string_write("\n Search Size Limit:");
      00336A 90r09rF3         [24] 9773 	mov	dptr,#___str_92
      00336D 75 F0 80         [24] 9774 	mov	b,#0x80
      003370 12r0FrD0         [24] 9775 	lcall	_LCD_string_write
                                   9776 ;	.\ecen4350_lcd_v4.c:2242: setColorWhite();
      003373 12r15rE4         [24] 9777 	lcall	_setColorWhite
                                   9778 ;	.\ecen4350_lcd_v4.c:2243: LCD_string_write("\n DWORD [32 bits]");
      003376 90r0Ar6A         [24] 9779 	mov	dptr,#___str_99
      003379 75 F0 80         [24] 9780 	mov	b,#0x80
      00337C 12r0FrD0         [24] 9781 	lcall	_LCD_string_write
      00337F D0 05            [24] 9782 	pop	ar5
      003381 80 68            [24] 9783 	sjmp	00126$
      003383                       9784 00119$:
                                   9785 ;	.\ecen4350_lcd_v4.c:2244: } else if (blockSize == 0xFF) {
      003383 78r0F            [12] 9786 	mov	r0,#_find_blockSize_65536_646
      003385 B6 FF 63         [24] 9787 	cjne	@r0,#0xff,00126$
                                   9788 ;	.\ecen4350_lcd_v4.c:2245: scan = 1;
      003388 78r11            [12] 9789 	mov	r0,#_find_scan_65536_646
      00338A 76 01            [12] 9790 	mov	@r0,#0x01
                                   9791 ;	.\ecen4350_lcd_v4.c:2246: setColorGray();
      00338C C0 05            [24] 9792 	push	ar5
      00338E 12r15rC2         [24] 9793 	lcall	_setColorGray
                                   9794 ;	.\ecen4350_lcd_v4.c:2247: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003391 90r0Ar43         [24] 9795 	mov	dptr,#___str_97
      003394 75 F0 80         [24] 9796 	mov	b,#0x80
      003397 12r0FrD0         [24] 9797 	lcall	_LCD_string_write
                                   9798 ;	.\ecen4350_lcd_v4.c:2248: LCD_string_write("<04> DWORD\n  ");
      00339A 90r0Ar7C         [24] 9799 	mov	dptr,#___str_100
      00339D 75 F0 80         [24] 9800 	mov	b,#0x80
      0033A0 12r0FrD0         [24] 9801 	lcall	_LCD_string_write
                                   9802 ;	.\ecen4350_lcd_v4.c:2249: setColorHighlight2();
      0033A3 12r15rB6         [24] 9803 	lcall	_setColorHighlight2
                                   9804 ;	.\ecen4350_lcd_v4.c:2250: LCD_string_write("<FF> (SCAN)");
      0033A6 90r0Ar8A         [24] 9805 	mov	dptr,#___str_101
      0033A9 75 F0 80         [24] 9806 	mov	b,#0x80
      0033AC 12r0FrD0         [24] 9807 	lcall	_LCD_string_write
                                   9808 ;	.\ecen4350_lcd_v4.c:2251: setColorDefault();
      0033AF 12r15r94         [24] 9809 	lcall	_setColorDefault
                                   9810 ;	.\ecen4350_lcd_v4.c:2252: setCursor(0, 250);
      0033B2 75*00 FA         [24] 9811 	mov	_setCursor_PARM_2,#0xfa
      0033B5 75*01 00         [24] 9812 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033B8 90 00 00         [24] 9813 	mov	dptr,#0x0000
      0033BB 12r04rB6         [24] 9814 	lcall	_setCursor
                                   9815 ;	.\ecen4350_lcd_v4.c:2253: LCD_string_write("   ");
      0033BE 90r09rAB         [24] 9816 	mov	dptr,#___str_86
      0033C1 75 F0 80         [24] 9817 	mov	b,#0x80
      0033C4 12r0FrD0         [24] 9818 	lcall	_LCD_string_write
                                   9819 ;	.\ecen4350_lcd_v4.c:2254: setColorHighlight2();
      0033C7 12r15rB6         [24] 9820 	lcall	_setColorHighlight2
                                   9821 ;	.\ecen4350_lcd_v4.c:2255: print8Hex(blockSize);
      0033CA 78r0F            [12] 9822 	mov	r0,#_find_blockSize_65536_646
      0033CC 86 82            [24] 9823 	mov	dpl,@r0
      0033CE 12r14rA1         [24] 9824 	lcall	_print8Hex
                                   9825 ;	.\ecen4350_lcd_v4.c:2256: setColorDefault();
      0033D1 12r15r94         [24] 9826 	lcall	_setColorDefault
                                   9827 ;	.\ecen4350_lcd_v4.c:2257: LCD_string_write("\n Search Size Limit:");
      0033D4 90r09rF3         [24] 9828 	mov	dptr,#___str_92
      0033D7 75 F0 80         [24] 9829 	mov	b,#0x80
      0033DA 12r0FrD0         [24] 9830 	lcall	_LCD_string_write
                                   9831 ;	.\ecen4350_lcd_v4.c:2258: setColorWhite();
      0033DD 12r15rE4         [24] 9832 	lcall	_setColorWhite
                                   9833 ;	.\ecen4350_lcd_v4.c:2259: LCD_string_write("\n [256 Blocks]");
      0033E0 90r0Ar96         [24] 9834 	mov	dptr,#___str_102
      0033E3 75 F0 80         [24] 9835 	mov	b,#0x80
      0033E6 12r0FrD0         [24] 9836 	lcall	_LCD_string_write
      0033E9 D0 05            [24] 9837 	pop	ar5
      0033EB                       9838 00126$:
                                   9839 ;	.\ecen4350_lcd_v4.c:2263: delay(40);
      0033EB 90 00 28         [24] 9840 	mov	dptr,#0x0028
      0033EE C0 05            [24] 9841 	push	ar5
      0033F0 12r00rE0         [24] 9842 	lcall	_delay
                                   9843 ;	.\ecen4350_lcd_v4.c:2264: clearLCD();
      0033F3 12r0Dr53         [24] 9844 	lcall	_clearLCD
                                   9845 ;	.\ecen4350_lcd_v4.c:2265: fillTop(GRAY);
      0033F6 90 D6 BA         [24] 9846 	mov	dptr,#0xd6ba
      0033F9 12r0Br86         [24] 9847 	lcall	_fillTop
                                   9848 ;	.\ecen4350_lcd_v4.c:2266: setTextSize(5);
      0033FC 75 82 05         [24] 9849 	mov	dpl,#0x05
      0033FF 12r04rD0         [24] 9850 	lcall	_setTextSize
                                   9851 ;	.\ecen4350_lcd_v4.c:2267: setColorMenu();
      003402 12r15rCD         [24] 9852 	lcall	_setColorMenu
                                   9853 ;	.\ecen4350_lcd_v4.c:2268: setCursor(30,0);
      003405 E4               [12] 9854 	clr	a
      003406 F5*00            [12] 9855 	mov	_setCursor_PARM_2,a
      003408 F5*01            [12] 9856 	mov	(_setCursor_PARM_2 + 1),a
      00340A 90 00 1E         [24] 9857 	mov	dptr,#0x001e
      00340D 12r04rB6         [24] 9858 	lcall	_setCursor
                                   9859 ;	.\ecen4350_lcd_v4.c:2269: LCD_string_write("[FIND]\n");
      003410 90r09r37         [24] 9860 	mov	dptr,#___str_79
      003413 75 F0 80         [24] 9861 	mov	b,#0x80
      003416 12r0FrD0         [24] 9862 	lcall	_LCD_string_write
                                   9863 ;	.\ecen4350_lcd_v4.c:2270: setColorDefault();
      003419 12r15r94         [24] 9864 	lcall	_setColorDefault
                                   9865 ;	.\ecen4350_lcd_v4.c:2271: setTextSize(2);
      00341C 75 82 02         [24] 9866 	mov	dpl,#0x02
      00341F 12r04rD0         [24] 9867 	lcall	_setTextSize
      003422 D0 05            [24] 9868 	pop	ar5
                                   9869 ;	.\ecen4350_lcd_v4.c:2277: while (exit) {
      003424                       9870 00205$:
      003424 78r13            [12] 9871 	mov	r0,#_find_exit_65536_646
      003426 E6               [12] 9872 	mov	a,@r0
      003427 70 03            [24] 9873 	jnz	00556$
      003429 02r39rEC         [24] 9874 	ljmp	00207$
      00342C                       9875 00556$:
                                   9876 ;	.\ecen4350_lcd_v4.c:2279: if (scan) {	
      00342C 78r11            [12] 9877 	mov	r0,#_find_scan_65536_646
      00342E E6               [12] 9878 	mov	a,@r0
      00342F 70 03            [24] 9879 	jnz	00557$
      003431 02r35r0B         [24] 9880 	ljmp	00196$
      003434                       9881 00557$:
                                   9882 ;	.\ecen4350_lcd_v4.c:2280: setCursor(0, 60);
      003434 75*00 3C         [24] 9883 	mov	_setCursor_PARM_2,#0x3c
      003437 75*01 00         [24] 9884 	mov	(_setCursor_PARM_2 + 1),#0x00
      00343A 90 00 00         [24] 9885 	mov	dptr,#0x0000
      00343D C0 05            [24] 9886 	push	ar5
      00343F 12r04rB6         [24] 9887 	lcall	_setCursor
                                   9888 ;	.\ecen4350_lcd_v4.c:2281: setColorYellow();
      003442 12r15rFA         [24] 9889 	lcall	_setColorYellow
                                   9890 ;	.\ecen4350_lcd_v4.c:2282: LCD_string_write(" [Non-Interactive]\n");
      003445 90r0ArA5         [24] 9891 	mov	dptr,#___str_103
      003448 75 F0 80         [24] 9892 	mov	b,#0x80
      00344B 12r0FrD0         [24] 9893 	lcall	_LCD_string_write
                                   9894 ;	.\ecen4350_lcd_v4.c:2283: setColorWhite();
      00344E 12r15rE4         [24] 9895 	lcall	_setColorWhite
                                   9896 ;	.\ecen4350_lcd_v4.c:2284: LCD_string_write(" Search Value:\n ");
      003451 90r0ArB9         [24] 9897 	mov	dptr,#___str_104
      003454 75 F0 80         [24] 9898 	mov	b,#0x80
      003457 12r0FrD0         [24] 9899 	lcall	_LCD_string_write
                                   9900 ;	.\ecen4350_lcd_v4.c:2285: setColorDefault();
      00345A 12r15r94         [24] 9901 	lcall	_setColorDefault
                                   9902 ;	.\ecen4350_lcd_v4.c:2286: print8Hex(value);
      00345D 78r10            [12] 9903 	mov	r0,#_find_value_65536_646
      00345F 86 82            [24] 9904 	mov	dpl,@r0
      003461 12r14rA1         [24] 9905 	lcall	_print8Hex
      003464 D0 05            [24] 9906 	pop	ar5
                                   9907 ;	.\ecen4350_lcd_v4.c:2287: for(unsigned int i = 0; i < blockSize; i++) {
      003466 8D 03            [24] 9908 	mov	ar3,r5
      003468 E4               [12] 9909 	clr	a
      003469 F5*59            [12] 9910 	mov	_find_i_262144_659,a
      00346B F5*5A            [12] 9911 	mov	(_find_i_262144_659 + 1),a
      00346D                       9912 00211$:
      00346D 78r0F            [12] 9913 	mov	r0,#_find_blockSize_65536_646
      00346F 86 02            [24] 9914 	mov	ar2,@r0
      003471 7E 00            [12] 9915 	mov	r6,#0x00
      003473 C3               [12] 9916 	clr	c
      003474 E5*59            [12] 9917 	mov	a,_find_i_262144_659
      003476 9A               [12] 9918 	subb	a,r2
      003477 E5*5A            [12] 9919 	mov	a,(_find_i_262144_659 + 1)
      003479 9E               [12] 9920 	subb	a,r6
      00347A 40 03            [24] 9921 	jc	00558$
      00347C 02r35r02         [24] 9922 	ljmp	00271$
      00347F                       9923 00558$:
                                   9924 ;	.\ecen4350_lcd_v4.c:2288: d = (unsigned char __xdata*)(i+address);
      00347F 78r0D            [12] 9925 	mov	r0,#_find_address_65536_646
      003481 E6               [12] 9926 	mov	a,@r0
      003482 25*59            [12] 9927 	add	a,_find_i_262144_659
      003484 FC               [12] 9928 	mov	r4,a
      003485 08               [12] 9929 	inc	r0
      003486 E6               [12] 9930 	mov	a,@r0
      003487 35*5A            [12] 9931 	addc	a,(_find_i_262144_659 + 1)
      003489 FE               [12] 9932 	mov	r6,a
                                   9933 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   9934 ;	assignBit
      00348A C2 B5            [12] 9935 	clr	_P3_5
                                   9936 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00348C 8C 82            [24] 9937 	mov	dpl,r4
      00348E 8E 83            [24] 9938 	mov	dph,r6
      003490 E0               [24] 9939 	movx	a,@dptr
      003491 FC               [12] 9940 	mov	r4,a
                                   9941 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   9942 ;	assignBit
      003492 D2 B5            [12] 9943 	setb	_P3_5
                                   9944 ;	.\ecen4350_lcd_v4.c:2289: if(value == ramRead8(d)){
      003494 78r10            [12] 9945 	mov	r0,#_find_value_65536_646
      003496 E6               [12] 9946 	mov	a,@r0
      003497 B5 04 5D         [24] 9947 	cjne	a,ar4,00212$
                                   9948 ;	.\ecen4350_lcd_v4.c:2290: noneFound = 0;
      00349A 78r12            [12] 9949 	mov	r0,#_find_noneFound_65536_646
      00349C 76 00            [12] 9950 	mov	@r0,#0x00
                                   9951 ;	.\ecen4350_lcd_v4.c:2292: if (page == 0) {		
      00349E EB               [12] 9952 	mov	a,r3
      00349F 70 34            [24] 9953 	jnz	00128$
                                   9954 ;	.\ecen4350_lcd_v4.c:2293: setColorWhite();
      0034A1 C0 03            [24] 9955 	push	ar3
      0034A3 12r15rE4         [24] 9956 	lcall	_setColorWhite
                                   9957 ;	.\ecen4350_lcd_v4.c:2294: setCursor(0, 120);
      0034A6 75*00 78         [24] 9958 	mov	_setCursor_PARM_2,#0x78
      0034A9 75*01 00         [24] 9959 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034AC 90 00 00         [24] 9960 	mov	dptr,#0x0000
      0034AF 12r04rB6         [24] 9961 	lcall	_setCursor
                                   9962 ;	.\ecen4350_lcd_v4.c:2295: LCD_string_write(" Found at Location:\n");
      0034B2 90r0ArCA         [24] 9963 	mov	dptr,#___str_105
      0034B5 75 F0 80         [24] 9964 	mov	b,#0x80
      0034B8 12r0FrD0         [24] 9965 	lcall	_LCD_string_write
                                   9966 ;	.\ecen4350_lcd_v4.c:2296: setColorDefault();
      0034BB 12r15r94         [24] 9967 	lcall	_setColorDefault
                                   9968 ;	.\ecen4350_lcd_v4.c:2297: LCD_string_write(" 0x");
      0034BE 90r07r50         [24] 9969 	mov	dptr,#___str_45
      0034C1 75 F0 80         [24] 9970 	mov	b,#0x80
      0034C4 12r0FrD0         [24] 9971 	lcall	_LCD_string_write
                                   9972 ;	.\ecen4350_lcd_v4.c:2298: print16Hex(i);
      0034C7 85*59 82         [24] 9973 	mov	dpl,_find_i_262144_659
      0034CA 85*5A 83         [24] 9974 	mov	dph,(_find_i_262144_659 + 1)
      0034CD 12r14rB8         [24] 9975 	lcall	_print16Hex
      0034D0 D0 03            [24] 9976 	pop	ar3
                                   9977 ;	.\ecen4350_lcd_v4.c:2299: page++;
      0034D2 0B               [12] 9978 	inc	r3
      0034D3 80 22            [24] 9979 	sjmp	00212$
      0034D5                       9980 00128$:
                                   9981 ;	.\ecen4350_lcd_v4.c:2301: setCursor(0, 120);
      0034D5 75*00 78         [24] 9982 	mov	_setCursor_PARM_2,#0x78
      0034D8 75*01 00         [24] 9983 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034DB 90 00 00         [24] 9984 	mov	dptr,#0x0000
      0034DE C0 03            [24] 9985 	push	ar3
      0034E0 12r04rB6         [24] 9986 	lcall	_setCursor
                                   9987 ;	.\ecen4350_lcd_v4.c:2302: LCD_string_write("\n 0x");
      0034E3 90r0ArDF         [24] 9988 	mov	dptr,#___str_106
      0034E6 75 F0 80         [24] 9989 	mov	b,#0x80
      0034E9 12r0FrD0         [24] 9990 	lcall	_LCD_string_write
                                   9991 ;	.\ecen4350_lcd_v4.c:2303: print16Hex(i);
      0034EC 85*59 82         [24] 9992 	mov	dpl,_find_i_262144_659
      0034EF 85*5A 83         [24] 9993 	mov	dph,(_find_i_262144_659 + 1)
      0034F2 12r14rB8         [24] 9994 	lcall	_print16Hex
      0034F5 D0 03            [24] 9995 	pop	ar3
      0034F7                       9996 00212$:
                                   9997 ;	.\ecen4350_lcd_v4.c:2287: for(unsigned int i = 0; i < blockSize; i++) {
      0034F7 05*59            [12] 9998 	inc	_find_i_262144_659
      0034F9 E4               [12] 9999 	clr	a
      0034FA B5*59 02         [24]10000 	cjne	a,_find_i_262144_659,00562$
      0034FD 05*5A            [12]10001 	inc	(_find_i_262144_659 + 1)
      0034FF                      10002 00562$:
      0034FF 02r34r6D         [24]10003 	ljmp	00211$
      003502                      10004 00271$:
      003502 8B 05            [24]10005 	mov	ar5,r3
                                  10006 ;	.\ecen4350_lcd_v4.c:2307: exit = 0;
      003504 78r13            [12]10007 	mov	r0,#_find_exit_65536_646
      003506 76 00            [12]10008 	mov	@r0,#0x00
      003508 02r39r73         [24]10009 	ljmp	00197$
      00350B                      10010 00196$:
                                  10011 ;	.\ecen4350_lcd_v4.c:2309: setCursor(0, 60);
      00350B 75*00 3C         [24]10012 	mov	_setCursor_PARM_2,#0x3c
      00350E 75*01 00         [24]10013 	mov	(_setCursor_PARM_2 + 1),#0x00
      003511 90 00 00         [24]10014 	mov	dptr,#0x0000
      003514 C0 05            [24]10015 	push	ar5
      003516 12r04rB6         [24]10016 	lcall	_setCursor
                                  10017 ;	.\ecen4350_lcd_v4.c:2310: setColorYellow();
      003519 12r15rFA         [24]10018 	lcall	_setColorYellow
                                  10019 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write(" [Interactive]\n");
      00351C 90r0ArE4         [24]10020 	mov	dptr,#___str_107
      00351F 75 F0 80         [24]10021 	mov	b,#0x80
      003522 12r0FrD0         [24]10022 	lcall	_LCD_string_write
                                  10023 ;	.\ecen4350_lcd_v4.c:2312: setColorWhite();
      003525 12r15rE4         [24]10024 	lcall	_setColorWhite
                                  10025 ;	.\ecen4350_lcd_v4.c:2313: LCD_string_write(" Search Value:\n ");
      003528 90r0ArB9         [24]10026 	mov	dptr,#___str_104
      00352B 75 F0 80         [24]10027 	mov	b,#0x80
      00352E 12r0FrD0         [24]10028 	lcall	_LCD_string_write
                                  10029 ;	.\ecen4350_lcd_v4.c:2314: setColorDefault();
      003531 12r15r94         [24]10030 	lcall	_setColorDefault
                                  10031 ;	.\ecen4350_lcd_v4.c:2315: print8Hex(value);
      003534 78r10            [12]10032 	mov	r0,#_find_value_65536_646
      003536 86 82            [24]10033 	mov	dpl,@r0
      003538 12r14rA1         [24]10034 	lcall	_print8Hex
      00353B D0 05            [24]10035 	pop	ar5
                                  10036 ;	.\ecen4350_lcd_v4.c:2318: for (unsigned int i = 0; i < blockSize; i++) {
      00353D E4               [12]10037 	clr	a
      00353E F5*5C            [12]10038 	mov	_find_sloc1_1_0,a
      003540 F5*5D            [12]10039 	mov	(_find_sloc1_1_0 + 1),a
      003542                      10040 00214$:
      003542 78r0F            [12]10041 	mov	r0,#_find_blockSize_65536_646
      003544 86 02            [24]10042 	mov	ar2,@r0
      003546 7B 00            [12]10043 	mov	r3,#0x00
      003548 C3               [12]10044 	clr	c
      003549 E5*5C            [12]10045 	mov	a,_find_sloc1_1_0
      00354B 9A               [12]10046 	subb	a,r2
      00354C E5*5D            [12]10047 	mov	a,(_find_sloc1_1_0 + 1)
      00354E 9B               [12]10048 	subb	a,r3
      00354F 40 03            [24]10049 	jc	00563$
      003551 02r39r73         [24]10050 	ljmp	00197$
      003554                      10051 00563$:
                                  10052 ;	.\ecen4350_lcd_v4.c:2319: d = (unsigned char __xdata*)(i+address);
      003554 78r0D            [12]10053 	mov	r0,#_find_address_65536_646
      003556 E6               [12]10054 	mov	a,@r0
      003557 25*5C            [12]10055 	add	a,_find_sloc1_1_0
      003559 FA               [12]10056 	mov	r2,a
      00355A 08               [12]10057 	inc	r0
      00355B E6               [12]10058 	mov	a,@r0
      00355C 35*5D            [12]10059 	addc	a,(_find_sloc1_1_0 + 1)
      00355E FB               [12]10060 	mov	r3,a
      00355F 8A 82            [24]10061 	mov	dpl,r2
      003561 8B 83            [24]10062 	mov	dph,r3
                                  10063 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  10064 ;	assignBit
      003563 C2 B5            [12]10065 	clr	_P3_5
                                  10066 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      003565 E0               [24]10067 	movx	a,@dptr
      003566 FB               [12]10068 	mov	r3,a
                                  10069 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  10070 ;	assignBit
      003567 D2 B5            [12]10071 	setb	_P3_5
                                  10072 ;	.\ecen4350_lcd_v4.c:2320: if(value == ramRead8(d)){
      003569 78r10            [12]10073 	mov	r0,#_find_value_65536_646
      00356B E6               [12]10074 	mov	a,@r0
      00356C B5 03 02         [24]10075 	cjne	a,ar3,00564$
      00356F 80 03            [24]10076 	sjmp	00565$
      003571                      10077 00564$:
      003571 02r39r68         [24]10078 	ljmp	00215$
      003574                      10079 00565$:
                                  10080 ;	.\ecen4350_lcd_v4.c:2321: noneFound = 0;		// toggle flag
      003574 78r12            [12]10081 	mov	r0,#_find_noneFound_65536_646
      003576 76 00            [12]10082 	mov	@r0,#0x00
                                  10083 ;	.\ecen4350_lcd_v4.c:2322: setCursor(0, 120);
      003578 75*00 78         [24]10084 	mov	_setCursor_PARM_2,#0x78
      00357B 75*01 00         [24]10085 	mov	(_setCursor_PARM_2 + 1),#0x00
      00357E 90 00 00         [24]10086 	mov	dptr,#0x0000
      003581 C0 05            [24]10087 	push	ar5
      003583 12r04rB6         [24]10088 	lcall	_setCursor
                                  10089 ;	.\ecen4350_lcd_v4.c:2323: setColorWhite();
      003586 12r15rE4         [24]10090 	lcall	_setColorWhite
                                  10091 ;	.\ecen4350_lcd_v4.c:2324: LCD_string_write(" Found at Location \n");
      003589 90r0ArF4         [24]10092 	mov	dptr,#___str_108
      00358C 75 F0 80         [24]10093 	mov	b,#0x80
      00358F 12r0FrD0         [24]10094 	lcall	_LCD_string_write
                                  10095 ;	.\ecen4350_lcd_v4.c:2325: setColorDefault();
      003592 12r15r94         [24]10096 	lcall	_setColorDefault
                                  10097 ;	.\ecen4350_lcd_v4.c:2326: LCD_string_write(" 0x");
      003595 90r07r50         [24]10098 	mov	dptr,#___str_45
      003598 75 F0 80         [24]10099 	mov	b,#0x80
      00359B 12r0FrD0         [24]10100 	lcall	_LCD_string_write
      00359E D0 05            [24]10101 	pop	ar5
                                  10102 ;	.\ecen4350_lcd_v4.c:2327: print16Hex(page+address);
      0035A0 8D 02            [24]10103 	mov	ar2,r5
      0035A2 7B 00            [12]10104 	mov	r3,#0x00
      0035A4 78r0D            [12]10105 	mov	r0,#_find_address_65536_646
      0035A6 E6               [12]10106 	mov	a,@r0
      0035A7 2A               [12]10107 	add	a,r2
      0035A8 F5 82            [12]10108 	mov	dpl,a
      0035AA 08               [12]10109 	inc	r0
      0035AB E6               [12]10110 	mov	a,@r0
      0035AC 3B               [12]10111 	addc	a,r3
      0035AD F5 83            [12]10112 	mov	dph,a
      0035AF C0 05            [24]10113 	push	ar5
      0035B1 12r14rB8         [24]10114 	lcall	_print16Hex
                                  10115 ;	.\ecen4350_lcd_v4.c:2328: setCursor(50, 300);
      0035B4 75*00 2C         [24]10116 	mov	_setCursor_PARM_2,#0x2c
      0035B7 75*01 01         [24]10117 	mov	(_setCursor_PARM_2 + 1),#0x01
      0035BA 90 00 32         [24]10118 	mov	dptr,#0x0032
      0035BD 12r04rB6         [24]10119 	lcall	_setCursor
                                  10120 ;	.\ecen4350_lcd_v4.c:2329: setColorGray();
      0035C0 12r15rC2         [24]10121 	lcall	_setColorGray
                                  10122 ;	.\ecen4350_lcd_v4.c:2330: LCD_string_write("Page: ");
      0035C3 90r0Br09         [24]10123 	mov	dptr,#___str_109
      0035C6 75 F0 80         [24]10124 	mov	b,#0x80
      0035C9 12r0FrD0         [24]10125 	lcall	_LCD_string_write
                                  10126 ;	.\ecen4350_lcd_v4.c:2331: setColorHighlight2();
      0035CC 12r15rB6         [24]10127 	lcall	_setColorHighlight2
      0035CF D0 05            [24]10128 	pop	ar5
                                  10129 ;	.\ecen4350_lcd_v4.c:2332: print8Hex(page+1);
      0035D1 8D 03            [24]10130 	mov	ar3,r5
      0035D3 EB               [12]10131 	mov	a,r3
      0035D4 04               [12]10132 	inc	a
      0035D5 F5 82            [12]10133 	mov	dpl,a
      0035D7 C0 05            [24]10134 	push	ar5
      0035D9 12r14rA1         [24]10135 	lcall	_print8Hex
      0035DC D0 05            [24]10136 	pop	ar5
                                  10137 ;	.\ecen4350_lcd_v4.c:2336: if (i == 0) {					// At beginning, page <0>
      0035DE E5*5C            [12]10138 	mov	a,_find_sloc1_1_0
      0035E0 45*5D            [12]10139 	orl	a,(_find_sloc1_1_0 + 1)
      0035E2 60 03            [24]10140 	jz	00566$
      0035E4 02r37r13         [24]10141 	ljmp	00190$
      0035E7                      10142 00566$:
                                  10143 ;	.\ecen4350_lcd_v4.c:2337: if (i != blockSize - 1) {	// not at the end yet, no previous page
      0035E7 C0 05            [24]10144 	push	ar5
      0035E9 78r0F            [12]10145 	mov	r0,#_find_blockSize_65536_646
      0035EB 86 02            [24]10146 	mov	ar2,@r0
      0035ED 7B 00            [12]10147 	mov	r3,#0x00
      0035EF EA               [12]10148 	mov	a,r2
      0035F0 24 FF            [12]10149 	add	a,#0xff
      0035F2 FD               [12]10150 	mov	r5,a
      0035F3 EB               [12]10151 	mov	a,r3
      0035F4 34 FF            [12]10152 	addc	a,#0xff
      0035F6 FF               [12]10153 	mov	r7,a
      0035F7 ED               [12]10154 	mov	a,r5
      0035F8 B5*5C 09         [24]10155 	cjne	a,_find_sloc1_1_0,00567$
      0035FB EF               [12]10156 	mov	a,r7
      0035FC B5*5D 05         [24]10157 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      0035FF D0 05            [24]10158 	pop	ar5
      003601 02r36r94         [24]10159 	ljmp	00148$
      003604                      10160 00567$:
                                  10161 ;	.\ecen4350_lcd_v4.c:2338: setCursor(0, 180);
      003604 75*00 B4         [24]10162 	mov	_setCursor_PARM_2,#0xb4
      003607 75*01 00         [24]10163 	mov	(_setCursor_PARM_2 + 1),#0x00
      00360A 90 00 00         [24]10164 	mov	dptr,#0x0000
      00360D 12r04rB6         [24]10165 	lcall	_setCursor
                                  10166 ;	.\ecen4350_lcd_v4.c:2339: setColorWhite();
      003610 12r15rE4         [24]10167 	lcall	_setColorWhite
                                  10168 ;	.\ecen4350_lcd_v4.c:2340: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      003613 90r0Br10         [24]10169 	mov	dptr,#___str_110
      003616 75 F0 80         [24]10170 	mov	b,#0x80
      003619 12r0FrD0         [24]10171 	lcall	_LCD_string_write
      00361C D0 05            [24]10172 	pop	ar5
                                  10173 ;	.\ecen4350_lcd_v4.c:2341: invalidInput = 1;
      00361E 7F 01            [12]10174 	mov	r7,#0x01
                                  10175 ;	.\ecen4350_lcd_v4.c:2342: while (invalidInput) {
      003620 8D*5B            [24]10176 	mov	_find_sloc0_1_0,r5
      003622                      10177 00137$:
      003622 EF               [12]10178 	mov	a,r7
      003623 70 03            [24]10179 	jnz	00568$
      003625 02r37r06         [24]10180 	ljmp	00272$
      003628                      10181 00568$:
                                  10182 ;	.\ecen4350_lcd_v4.c:2343: selection = keyDetect();
      003628 C0 07            [24]10183 	push	ar7
      00362A 12r10rEE         [24]10184 	lcall	_keyDetect
      00362D AF 82            [24]10185 	mov	r7,dpl
      00362F 78r00            [12]10186 	mov	r0,#_selection
      003631 A6 07            [24]10187 	mov	@r0,ar7
                                  10188 ;	.\ecen4350_lcd_v4.c:2344: if(selection == '1'){
      003633 BF 31 02         [24]10189 	cjne	r7,#0x31,00569$
      003636 80 04            [24]10190 	sjmp	00570$
      003638                      10191 00569$:
      003638 D0 07            [24]10192 	pop	ar7
      00363A 80 27            [24]10193 	sjmp	00134$
      00363C                      10194 00570$:
      00363C D0 07            [24]10195 	pop	ar7
                                  10196 ;	.\ecen4350_lcd_v4.c:2345: setCursor(0, 180);
      00363E 75*00 B4         [24]10197 	mov	_setCursor_PARM_2,#0xb4
      003641 75*01 00         [24]10198 	mov	(_setCursor_PARM_2 + 1),#0x00
      003644 90 00 00         [24]10199 	mov	dptr,#0x0000
      003647 12r04rB6         [24]10200 	lcall	_setCursor
                                  10201 ;	.\ecen4350_lcd_v4.c:2346: LCD_string_write(" ");
      00364A 90r06r56         [24]10202 	mov	dptr,#___str_29
      00364D 75 F0 80         [24]10203 	mov	b,#0x80
      003650 12r0FrD0         [24]10204 	lcall	_LCD_string_write
                                  10205 ;	.\ecen4350_lcd_v4.c:2347: setColorHighlight2();
      003653 12r15rB6         [24]10206 	lcall	_setColorHighlight2
                                  10207 ;	.\ecen4350_lcd_v4.c:2348: LCD_string_write("<1> Next");
      003656 90r0Br33         [24]10208 	mov	dptr,#___str_111
      003659 75 F0 80         [24]10209 	mov	b,#0x80
      00365C 12r0FrD0         [24]10210 	lcall	_LCD_string_write
                                  10211 ;	.\ecen4350_lcd_v4.c:2349: invalidInput = 0;
      00365F 7F 00            [12]10212 	mov	r7,#0x00
                                  10213 ;	.\ecen4350_lcd_v4.c:2350: page++;
      003661 05*5B            [12]10214 	inc	_find_sloc0_1_0
      003663                      10215 00134$:
                                  10216 ;	.\ecen4350_lcd_v4.c:2351: } if(selection == '0') {
      003663 78r00            [12]10217 	mov	r0,#_selection
      003665 B6 30 BA         [24]10218 	cjne	@r0,#0x30,00137$
                                  10219 ;	.\ecen4350_lcd_v4.c:2352: setColorDefault();
      003668 12r15r94         [24]10220 	lcall	_setColorDefault
                                  10221 ;	.\ecen4350_lcd_v4.c:2353: setCursor(0, 180);
      00366B 75*00 B4         [24]10222 	mov	_setCursor_PARM_2,#0xb4
      00366E 75*01 00         [24]10223 	mov	(_setCursor_PARM_2 + 1),#0x00
      003671 90 00 00         [24]10224 	mov	dptr,#0x0000
      003674 12r04rB6         [24]10225 	lcall	_setCursor
                                  10226 ;	.\ecen4350_lcd_v4.c:2354: LCD_string_write("\n ");
      003677 90r08r61         [24]10227 	mov	dptr,#___str_66
      00367A 75 F0 80         [24]10228 	mov	b,#0x80
      00367D 12r0FrD0         [24]10229 	lcall	_LCD_string_write
                                  10230 ;	.\ecen4350_lcd_v4.c:2355: setColorHighlight2();
      003680 12r15rB6         [24]10231 	lcall	_setColorHighlight2
                                  10232 ;	.\ecen4350_lcd_v4.c:2356: LCD_string_write("<0> Exit");
      003683 90r09r1C         [24]10233 	mov	dptr,#___str_77
      003686 75 F0 80         [24]10234 	mov	b,#0x80
      003689 12r0FrD0         [24]10235 	lcall	_LCD_string_write
                                  10236 ;	.\ecen4350_lcd_v4.c:2357: exit = 0;		// set exit flag
      00368C 78r13            [12]10237 	mov	r0,#_find_exit_65536_646
      00368E 76 00            [12]10238 	mov	@r0,#0x00
                                  10239 ;	.\ecen4350_lcd_v4.c:2358: invalidInput = 0;
      003690 7F 00            [12]10240 	mov	r7,#0x00
      003692 80 8E            [24]10241 	sjmp	00137$
      003694                      10242 00148$:
                                  10243 ;	.\ecen4350_lcd_v4.c:2361: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      003694 1A               [12]10244 	dec	r2
      003695 BA FF 01         [24]10245 	cjne	r2,#0xff,00573$
      003698 1B               [12]10246 	dec	r3
      003699                      10247 00573$:
      003699 EA               [12]10248 	mov	a,r2
      00369A B5*5C 6B         [24]10249 	cjne	a,_find_sloc1_1_0,00149$
      00369D EB               [12]10250 	mov	a,r3
      00369E B5*5D 67         [24]10251 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10252 ;	.\ecen4350_lcd_v4.c:2362: setCursor(0, 180);
      0036A1 75*00 B4         [24]10253 	mov	_setCursor_PARM_2,#0xb4
      0036A4 75*01 00         [24]10254 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036A7 90 00 00         [24]10255 	mov	dptr,#0x0000
      0036AA C0 05            [24]10256 	push	ar5
      0036AC 12r04rB6         [24]10257 	lcall	_setCursor
                                  10258 ;	.\ecen4350_lcd_v4.c:2363: setColorWhite();
      0036AF 12r15rE4         [24]10259 	lcall	_setColorWhite
                                  10260 ;	.\ecen4350_lcd_v4.c:2364: LCD_string_write("          \n <0> Exit\n              ");
      0036B2 90r0Br3C         [24]10261 	mov	dptr,#___str_112
      0036B5 75 F0 80         [24]10262 	mov	b,#0x80
      0036B8 12r0FrD0         [24]10263 	lcall	_LCD_string_write
      0036BB D0 05            [24]10264 	pop	ar5
                                  10265 ;	.\ecen4350_lcd_v4.c:2365: invalidInput = 1;
      0036BD 7F 01            [12]10266 	mov	r7,#0x01
                                  10267 ;	.\ecen4350_lcd_v4.c:2366: while (invalidInput) {
      0036BF                      10268 00142$:
      0036BF EF               [12]10269 	mov	a,r7
      0036C0 60 46            [24]10270 	jz	00149$
                                  10271 ;	.\ecen4350_lcd_v4.c:2367: selection = keyDetect();
      0036C2 C0 07            [24]10272 	push	ar7
      0036C4 C0 05            [24]10273 	push	ar5
      0036C6 12r10rEE         [24]10274 	lcall	_keyDetect
      0036C9 AB 82            [24]10275 	mov	r3,dpl
      0036CB D0 05            [24]10276 	pop	ar5
      0036CD D0 07            [24]10277 	pop	ar7
      0036CF 78r00            [12]10278 	mov	r0,#_selection
      0036D1 A6 03            [24]10279 	mov	@r0,ar3
                                  10280 ;	.\ecen4350_lcd_v4.c:2368: if(selection == '0') {
      0036D3 BB 30 E9         [24]10281 	cjne	r3,#0x30,00142$
                                  10282 ;	.\ecen4350_lcd_v4.c:2369: setColorDefault();
      0036D6 C0 05            [24]10283 	push	ar5
      0036D8 12r15r94         [24]10284 	lcall	_setColorDefault
                                  10285 ;	.\ecen4350_lcd_v4.c:2370: setCursor(0, 180);
      0036DB 75*00 B4         [24]10286 	mov	_setCursor_PARM_2,#0xb4
      0036DE 75*01 00         [24]10287 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036E1 90 00 00         [24]10288 	mov	dptr,#0x0000
      0036E4 12r04rB6         [24]10289 	lcall	_setCursor
                                  10290 ;	.\ecen4350_lcd_v4.c:2371: LCD_string_write("\n ");
      0036E7 90r08r61         [24]10291 	mov	dptr,#___str_66
      0036EA 75 F0 80         [24]10292 	mov	b,#0x80
      0036ED 12r0FrD0         [24]10293 	lcall	_LCD_string_write
                                  10294 ;	.\ecen4350_lcd_v4.c:2372: setColorHighlight2();
      0036F0 12r15rB6         [24]10295 	lcall	_setColorHighlight2
                                  10296 ;	.\ecen4350_lcd_v4.c:2373: LCD_string_write("<0> Exit");
      0036F3 90r09r1C         [24]10297 	mov	dptr,#___str_77
      0036F6 75 F0 80         [24]10298 	mov	b,#0x80
      0036F9 12r0FrD0         [24]10299 	lcall	_LCD_string_write
      0036FC D0 05            [24]10300 	pop	ar5
                                  10301 ;	.\ecen4350_lcd_v4.c:2374: exit = 0;		// set exit flag
      0036FE 78r13            [12]10302 	mov	r0,#_find_exit_65536_646
      003700 76 00            [12]10303 	mov	@r0,#0x00
                                  10304 ;	.\ecen4350_lcd_v4.c:2375: invalidInput = 0;
      003702 7F 00            [12]10305 	mov	r7,#0x00
      003704 80 B9            [24]10306 	sjmp	00142$
      003706                      10307 00272$:
      003706 AD*5B            [24]10308 	mov	r5,_find_sloc0_1_0
      003708                      10309 00149$:
                                  10310 ;	.\ecen4350_lcd_v4.c:2379: if (exit == 0) {	// check exit flag
      003708 78r13            [12]10311 	mov	r0,#_find_exit_65536_646
      00370A E6               [12]10312 	mov	a,@r0
      00370B 60 03            [24]10313 	jz	00579$
      00370D 02r39r68         [24]10314 	ljmp	00215$
      003710                      10315 00579$:
                                  10316 ;	.\ecen4350_lcd_v4.c:2380: break;			// break out of for loop iteration
      003710 02r39r73         [24]10317 	ljmp	00197$
      003713                      10318 00190$:
                                  10319 ;	.\ecen4350_lcd_v4.c:2385: else if (i == blockSize - 1) {		// At Page End 
      003713 C0 05            [24]10320 	push	ar5
      003715 78r0F            [12]10321 	mov	r0,#_find_blockSize_65536_646
      003717 86 03            [24]10322 	mov	ar3,@r0
      003719 7F 00            [12]10323 	mov	r7,#0x00
      00371B EB               [12]10324 	mov	a,r3
      00371C 24 FF            [12]10325 	add	a,#0xff
      00371E FA               [12]10326 	mov	r2,a
      00371F EF               [12]10327 	mov	a,r7
      003720 34 FF            [12]10328 	addc	a,#0xff
      003722 FD               [12]10329 	mov	r5,a
      003723 EA               [12]10330 	mov	a,r2
      003724 B5*5C 06         [24]10331 	cjne	a,_find_sloc1_1_0,00580$
      003727 ED               [12]10332 	mov	a,r5
      003728 B5*5D 02         [24]10333 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      00372B 80 05            [24]10334 	sjmp	00581$
      00372D                      10335 00580$:
      00372D D0 05            [24]10336 	pop	ar5
      00372F 02r38r5F         [24]10337 	ljmp	00187$
      003732                      10338 00581$:
      003732 D0 05            [24]10339 	pop	ar5
                                  10340 ;	.\ecen4350_lcd_v4.c:2386: if (i != 0) {				// not at beginning, no next page
      003734 E5*5C            [12]10341 	mov	a,_find_sloc1_1_0
      003736 45*5D            [12]10342 	orl	a,(_find_sloc1_1_0 + 1)
      003738 70 03            [24]10343 	jnz	00582$
      00373A 02r37rE8         [24]10344 	ljmp	00167$
      00373D                      10345 00582$:
                                  10346 ;	.\ecen4350_lcd_v4.c:2387: setCursor(0, 180);
      00373D 75*00 B4         [24]10347 	mov	_setCursor_PARM_2,#0xb4
      003740 75*01 00         [24]10348 	mov	(_setCursor_PARM_2 + 1),#0x00
      003743 90 00 00         [24]10349 	mov	dptr,#0x0000
      003746 C0 05            [24]10350 	push	ar5
      003748 12r04rB6         [24]10351 	lcall	_setCursor
                                  10352 ;	.\ecen4350_lcd_v4.c:2388: setColorWhite();
      00374B 12r15rE4         [24]10353 	lcall	_setColorWhite
                                  10354 ;	.\ecen4350_lcd_v4.c:2389: LCD_string_write("          \n <0> Exit\n <2> Previous");
      00374E 90r0Br60         [24]10355 	mov	dptr,#___str_113
      003751 75 F0 80         [24]10356 	mov	b,#0x80
      003754 12r0FrD0         [24]10357 	lcall	_LCD_string_write
      003757 D0 05            [24]10358 	pop	ar5
                                  10359 ;	.\ecen4350_lcd_v4.c:2390: invalidInput = 1;
      003759 7F 01            [12]10360 	mov	r7,#0x01
                                  10361 ;	.\ecen4350_lcd_v4.c:2391: while (invalidInput) {
      00375B 8D*5B            [24]10362 	mov	_find_sloc0_1_0,r5
      00375D                      10363 00156$:
      00375D EF               [12]10364 	mov	a,r7
      00375E 70 03            [24]10365 	jnz	00583$
      003760 02r38r52         [24]10366 	ljmp	00273$
      003763                      10367 00583$:
                                  10368 ;	.\ecen4350_lcd_v4.c:2392: selection = keyDetect();
      003763 C0 07            [24]10369 	push	ar7
      003765 C0 07            [24]10370 	push	ar7
      003767 12r10rEE         [24]10371 	lcall	_keyDetect
      00376A AA 82            [24]10372 	mov	r2,dpl
      00376C D0 07            [24]10373 	pop	ar7
      00376E 78r00            [12]10374 	mov	r0,#_selection
      003770 A6 02            [24]10375 	mov	@r0,ar2
                                  10376 ;	.\ecen4350_lcd_v4.c:2393: if(selection == '0'){
      003772 BA 30 02         [24]10377 	cjne	r2,#0x30,00584$
      003775 80 04            [24]10378 	sjmp	00585$
      003777                      10379 00584$:
      003777 D0 07            [24]10380 	pop	ar7
      003779 80 29            [24]10381 	sjmp	00153$
      00377B                      10382 00585$:
      00377B D0 07            [24]10383 	pop	ar7
                                  10384 ;	.\ecen4350_lcd_v4.c:2394: setCursor(0, 180);
      00377D 75*00 B4         [24]10385 	mov	_setCursor_PARM_2,#0xb4
      003780 75*01 00         [24]10386 	mov	(_setCursor_PARM_2 + 1),#0x00
      003783 90 00 00         [24]10387 	mov	dptr,#0x0000
      003786 12r04rB6         [24]10388 	lcall	_setCursor
                                  10389 ;	.\ecen4350_lcd_v4.c:2395: LCD_string_write("\n ");
      003789 90r08r61         [24]10390 	mov	dptr,#___str_66
      00378C 75 F0 80         [24]10391 	mov	b,#0x80
      00378F 12r0FrD0         [24]10392 	lcall	_LCD_string_write
                                  10393 ;	.\ecen4350_lcd_v4.c:2396: setColorHighlight2();
      003792 12r15rB6         [24]10394 	lcall	_setColorHighlight2
                                  10395 ;	.\ecen4350_lcd_v4.c:2397: LCD_string_write("<0> Exit\n");
      003795 90r07r96         [24]10396 	mov	dptr,#___str_53
      003798 75 F0 80         [24]10397 	mov	b,#0x80
      00379B 12r0FrD0         [24]10398 	lcall	_LCD_string_write
                                  10399 ;	.\ecen4350_lcd_v4.c:2398: invalidInput = 0;
      00379E 7F 00            [12]10400 	mov	r7,#0x00
                                  10401 ;	.\ecen4350_lcd_v4.c:2399: exit = 0;
      0037A0 78r13            [12]10402 	mov	r0,#_find_exit_65536_646
      0037A2 76 00            [12]10403 	mov	@r0,#0x00
      0037A4                      10404 00153$:
                                  10405 ;	.\ecen4350_lcd_v4.c:2400: } if (selection == '2') {
      0037A4 78r00            [12]10406 	mov	r0,#_selection
      0037A6 B6 32 B4         [24]10407 	cjne	@r0,#0x32,00156$
                                  10408 ;	.\ecen4350_lcd_v4.c:2401: setCursor(0, 180);
      0037A9 75*00 B4         [24]10409 	mov	_setCursor_PARM_2,#0xb4
      0037AC 75*01 00         [24]10410 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037AF 90 00 00         [24]10411 	mov	dptr,#0x0000
      0037B2 12r04rB6         [24]10412 	lcall	_setCursor
                                  10413 ;	.\ecen4350_lcd_v4.c:2402: setColorWhite();
      0037B5 12r15rE4         [24]10414 	lcall	_setColorWhite
                                  10415 ;	.\ecen4350_lcd_v4.c:2403: LCD_string_write("\n\n ");
      0037B8 90r0Br83         [24]10416 	mov	dptr,#___str_114
      0037BB 75 F0 80         [24]10417 	mov	b,#0x80
      0037BE 12r0FrD0         [24]10418 	lcall	_LCD_string_write
                                  10419 ;	.\ecen4350_lcd_v4.c:2404: setColorHighlight2();
      0037C1 12r15rB6         [24]10420 	lcall	_setColorHighlight2
                                  10421 ;	.\ecen4350_lcd_v4.c:2405: LCD_string_write("<2> Previous");
      0037C4 90r0Br87         [24]10422 	mov	dptr,#___str_115
      0037C7 75 F0 80         [24]10423 	mov	b,#0x80
      0037CA 12r0FrD0         [24]10424 	lcall	_LCD_string_write
                                  10425 ;	.\ecen4350_lcd_v4.c:2406: invalidInput = 0;
      0037CD 7F 00            [12]10426 	mov	r7,#0x00
                                  10427 ;	.\ecen4350_lcd_v4.c:2407: i--;			// two decrements plus next loop increment is equal to one decrement
      0037CF E5*5C            [12]10428 	mov	a,_find_sloc1_1_0
      0037D1 24 FF            [12]10429 	add	a,#0xff
      0037D3 FA               [12]10430 	mov	r2,a
      0037D4 E5*5D            [12]10431 	mov	a,(_find_sloc1_1_0 + 1)
      0037D6 34 FF            [12]10432 	addc	a,#0xff
      0037D8 FE               [12]10433 	mov	r6,a
                                  10434 ;	.\ecen4350_lcd_v4.c:2408: i--;
      0037D9 EA               [12]10435 	mov	a,r2
      0037DA 24 FF            [12]10436 	add	a,#0xff
      0037DC F5*5C            [12]10437 	mov	_find_sloc1_1_0,a
      0037DE EE               [12]10438 	mov	a,r6
      0037DF 34 FF            [12]10439 	addc	a,#0xff
      0037E1 F5*5D            [12]10440 	mov	(_find_sloc1_1_0 + 1),a
                                  10441 ;	.\ecen4350_lcd_v4.c:2409: page--;			// decrement to previous page
      0037E3 15*5B            [12]10442 	dec	_find_sloc0_1_0
      0037E5 02r37r5D         [24]10443 	ljmp	00156$
      0037E8                      10444 00167$:
                                  10445 ;	.\ecen4350_lcd_v4.c:2413: else if (i == 0){				// end at beginning, no next or previous
      0037E8 E5*5C            [12]10446 	mov	a,_find_sloc1_1_0
      0037EA 45*5D            [12]10447 	orl	a,(_find_sloc1_1_0 + 1)
                                  10448 ;	.\ecen4350_lcd_v4.c:2414: setCursor(0, 180);
      0037EC 70 66            [24]10449 	jnz	00168$
      0037EE 75*00 B4         [24]10450 	mov	_setCursor_PARM_2,#0xb4
      0037F1 F5*01            [12]10451 	mov	(_setCursor_PARM_2 + 1),a
      0037F3 90 00 00         [24]10452 	mov	dptr,#0x0000
      0037F6 C0 05            [24]10453 	push	ar5
      0037F8 12r04rB6         [24]10454 	lcall	_setCursor
                                  10455 ;	.\ecen4350_lcd_v4.c:2415: setColorWhite();
      0037FB 12r15rE4         [24]10456 	lcall	_setColorWhite
                                  10457 ;	.\ecen4350_lcd_v4.c:2416: LCD_string_write("          \n <0> Exit\n              ");
      0037FE 90r0Br3C         [24]10458 	mov	dptr,#___str_112
      003801 75 F0 80         [24]10459 	mov	b,#0x80
      003804 12r0FrD0         [24]10460 	lcall	_LCD_string_write
      003807 D0 05            [24]10461 	pop	ar5
                                  10462 ;	.\ecen4350_lcd_v4.c:2417: invalidInput = 1;
      003809 7E 01            [12]10463 	mov	r6,#0x01
                                  10464 ;	.\ecen4350_lcd_v4.c:2418: while (invalidInput) {
      00380B                      10465 00161$:
      00380B EE               [12]10466 	mov	a,r6
      00380C 60 46            [24]10467 	jz	00168$
                                  10468 ;	.\ecen4350_lcd_v4.c:2419: selection = keyDetect();
      00380E C0 06            [24]10469 	push	ar6
      003810 C0 05            [24]10470 	push	ar5
      003812 12r10rEE         [24]10471 	lcall	_keyDetect
      003815 AC 82            [24]10472 	mov	r4,dpl
      003817 D0 05            [24]10473 	pop	ar5
      003819 D0 06            [24]10474 	pop	ar6
      00381B 78r00            [12]10475 	mov	r0,#_selection
      00381D A6 04            [24]10476 	mov	@r0,ar4
                                  10477 ;	.\ecen4350_lcd_v4.c:2420: if(selection == '0') {
      00381F BC 30 E9         [24]10478 	cjne	r4,#0x30,00161$
                                  10479 ;	.\ecen4350_lcd_v4.c:2421: setColorDefault();
      003822 C0 05            [24]10480 	push	ar5
      003824 12r15r94         [24]10481 	lcall	_setColorDefault
                                  10482 ;	.\ecen4350_lcd_v4.c:2422: setCursor(0, 180);
      003827 75*00 B4         [24]10483 	mov	_setCursor_PARM_2,#0xb4
      00382A 75*01 00         [24]10484 	mov	(_setCursor_PARM_2 + 1),#0x00
      00382D 90 00 00         [24]10485 	mov	dptr,#0x0000
      003830 12r04rB6         [24]10486 	lcall	_setCursor
                                  10487 ;	.\ecen4350_lcd_v4.c:2423: LCD_string_write("\n ");
      003833 90r08r61         [24]10488 	mov	dptr,#___str_66
      003836 75 F0 80         [24]10489 	mov	b,#0x80
      003839 12r0FrD0         [24]10490 	lcall	_LCD_string_write
                                  10491 ;	.\ecen4350_lcd_v4.c:2424: setColorHighlight2();
      00383C 12r15rB6         [24]10492 	lcall	_setColorHighlight2
                                  10493 ;	.\ecen4350_lcd_v4.c:2425: LCD_string_write("<0> Exit");
      00383F 90r09r1C         [24]10494 	mov	dptr,#___str_77
      003842 75 F0 80         [24]10495 	mov	b,#0x80
      003845 12r0FrD0         [24]10496 	lcall	_LCD_string_write
      003848 D0 05            [24]10497 	pop	ar5
                                  10498 ;	.\ecen4350_lcd_v4.c:2426: exit = 0;		// set exit flag
      00384A 78r13            [12]10499 	mov	r0,#_find_exit_65536_646
      00384C 76 00            [12]10500 	mov	@r0,#0x00
                                  10501 ;	.\ecen4350_lcd_v4.c:2427: invalidInput = 0;
      00384E 7E 00            [12]10502 	mov	r6,#0x00
      003850 80 B9            [24]10503 	sjmp	00161$
      003852                      10504 00273$:
      003852 AD*5B            [24]10505 	mov	r5,_find_sloc0_1_0
      003854                      10506 00168$:
                                  10507 ;	.\ecen4350_lcd_v4.c:2431: if (exit == 0) {	// check exit flag
      003854 78r13            [12]10508 	mov	r0,#_find_exit_65536_646
      003856 E6               [12]10509 	mov	a,@r0
      003857 60 03            [24]10510 	jz	00592$
      003859 02r39r68         [24]10511 	ljmp	00215$
      00385C                      10512 00592$:
                                  10513 ;	.\ecen4350_lcd_v4.c:2432: break;			// break out of for loop iteration
      00385C 02r39r73         [24]10514 	ljmp	00197$
      00385F                      10515 00187$:
                                  10516 ;	.\ecen4350_lcd_v4.c:2437: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00385F 1B               [12]10517 	dec	r3
      003860 BB FF 01         [24]10518 	cjne	r3,#0xff,00593$
      003863 1F               [12]10519 	dec	r7
      003864                      10520 00593$:
      003864 EB               [12]10521 	mov	a,r3
      003865 B5*5C 07         [24]10522 	cjne	a,_find_sloc1_1_0,00594$
      003868 EF               [12]10523 	mov	a,r7
      003869 B5*5D 03         [24]10524 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      00386C 02r39r68         [24]10525 	ljmp	00215$
      00386F                      10526 00594$:
                                  10527 ;	.\ecen4350_lcd_v4.c:2438: if (i != 0) {
      00386F E5*5C            [12]10528 	mov	a,_find_sloc1_1_0
      003871 45*5D            [12]10529 	orl	a,(_find_sloc1_1_0 + 1)
      003873 70 03            [24]10530 	jnz	00595$
      003875 02r39r63         [24]10531 	ljmp	00181$
      003878                      10532 00595$:
                                  10533 ;	.\ecen4350_lcd_v4.c:2439: setCursor(0, 180);
      003878 75*00 B4         [24]10534 	mov	_setCursor_PARM_2,#0xb4
      00387B 75*01 00         [24]10535 	mov	(_setCursor_PARM_2 + 1),#0x00
      00387E 90 00 00         [24]10536 	mov	dptr,#0x0000
      003881 C0 05            [24]10537 	push	ar5
      003883 12r04rB6         [24]10538 	lcall	_setCursor
                                  10539 ;	.\ecen4350_lcd_v4.c:2440: setColorWhite();
      003886 12r15rE4         [24]10540 	lcall	_setColorWhite
                                  10541 ;	.\ecen4350_lcd_v4.c:2441: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      003889 90r0Br94         [24]10542 	mov	dptr,#___str_116
      00388C 75 F0 80         [24]10543 	mov	b,#0x80
      00388F 12r0FrD0         [24]10544 	lcall	_LCD_string_write
      003892 D0 05            [24]10545 	pop	ar5
                                  10546 ;	.\ecen4350_lcd_v4.c:2442: invalidInput = 1;
      003894 7F 01            [12]10547 	mov	r7,#0x01
                                  10548 ;	.\ecen4350_lcd_v4.c:2443: while (invalidInput) {
      003896                      10549 00177$:
      003896 EF               [12]10550 	mov	a,r7
      003897 70 03            [24]10551 	jnz	00596$
      003899 02r39r63         [24]10552 	ljmp	00181$
      00389C                      10553 00596$:
                                  10554 ;	.\ecen4350_lcd_v4.c:2444: selection = keyDetect();
      00389C C0 07            [24]10555 	push	ar7
      00389E C0 05            [24]10556 	push	ar5
      0038A0 12r10rEE         [24]10557 	lcall	_keyDetect
      0038A3 AE 82            [24]10558 	mov	r6,dpl
      0038A5 D0 05            [24]10559 	pop	ar5
      0038A7 D0 07            [24]10560 	pop	ar7
      0038A9 78r00            [12]10561 	mov	r0,#_selection
      0038AB A6 06            [24]10562 	mov	@r0,ar6
                                  10563 ;	.\ecen4350_lcd_v4.c:2445: if (selection == '1') {
      0038AD BE 31 28         [24]10564 	cjne	r6,#0x31,00172$
                                  10565 ;	.\ecen4350_lcd_v4.c:2446: setCursor(0, 180);
      0038B0 75*00 B4         [24]10566 	mov	_setCursor_PARM_2,#0xb4
      0038B3 75*01 00         [24]10567 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038B6 90 00 00         [24]10568 	mov	dptr,#0x0000
      0038B9 C0 05            [24]10569 	push	ar5
      0038BB 12r04rB6         [24]10570 	lcall	_setCursor
                                  10571 ;	.\ecen4350_lcd_v4.c:2447: LCD_string_write(" ");
      0038BE 90r06r56         [24]10572 	mov	dptr,#___str_29
      0038C1 75 F0 80         [24]10573 	mov	b,#0x80
      0038C4 12r0FrD0         [24]10574 	lcall	_LCD_string_write
                                  10575 ;	.\ecen4350_lcd_v4.c:2448: setColorHighlight2();
      0038C7 12r15rB6         [24]10576 	lcall	_setColorHighlight2
                                  10577 ;	.\ecen4350_lcd_v4.c:2449: LCD_string_write("<1> Next");
      0038CA 90r0Br33         [24]10578 	mov	dptr,#___str_111
      0038CD 75 F0 80         [24]10579 	mov	b,#0x80
      0038D0 12r0FrD0         [24]10580 	lcall	_LCD_string_write
      0038D3 D0 05            [24]10581 	pop	ar5
                                  10582 ;	.\ecen4350_lcd_v4.c:2450: invalidInput = 0;
      0038D5 7F 00            [12]10583 	mov	r7,#0x00
                                  10584 ;	.\ecen4350_lcd_v4.c:2451: page++;
      0038D7 0D               [12]10585 	inc	r5
      0038D8                      10586 00172$:
                                  10587 ;	.\ecen4350_lcd_v4.c:2452: } if (selection == '2') {
      0038D8 78r00            [12]10588 	mov	r0,#_selection
      0038DA B6 32 3F         [24]10589 	cjne	@r0,#0x32,00174$
                                  10590 ;	.\ecen4350_lcd_v4.c:2453: setCursor(0, 180);
      0038DD 75*00 B4         [24]10591 	mov	_setCursor_PARM_2,#0xb4
      0038E0 75*01 00         [24]10592 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038E3 90 00 00         [24]10593 	mov	dptr,#0x0000
      0038E6 C0 05            [24]10594 	push	ar5
      0038E8 12r04rB6         [24]10595 	lcall	_setCursor
                                  10596 ;	.\ecen4350_lcd_v4.c:2454: setColorWhite();
      0038EB 12r15rE4         [24]10597 	lcall	_setColorWhite
                                  10598 ;	.\ecen4350_lcd_v4.c:2455: LCD_string_write("\n\n ");
      0038EE 90r0Br83         [24]10599 	mov	dptr,#___str_114
      0038F1 75 F0 80         [24]10600 	mov	b,#0x80
      0038F4 12r0FrD0         [24]10601 	lcall	_LCD_string_write
                                  10602 ;	.\ecen4350_lcd_v4.c:2456: setColorHighlight2();
      0038F7 12r15rB6         [24]10603 	lcall	_setColorHighlight2
                                  10604 ;	.\ecen4350_lcd_v4.c:2457: LCD_string_write("<2> Previous");
      0038FA 90r0Br87         [24]10605 	mov	dptr,#___str_115
      0038FD 75 F0 80         [24]10606 	mov	b,#0x80
      003900 12r0FrD0         [24]10607 	lcall	_LCD_string_write
      003903 D0 05            [24]10608 	pop	ar5
                                  10609 ;	.\ecen4350_lcd_v4.c:2458: invalidInput = 0;
      003905 7F 00            [12]10610 	mov	r7,#0x00
                                  10611 ;	.\ecen4350_lcd_v4.c:2459: i--;
      003907 E5*5C            [12]10612 	mov	a,_find_sloc1_1_0
      003909 24 FF            [12]10613 	add	a,#0xff
      00390B FC               [12]10614 	mov	r4,a
      00390C E5*5D            [12]10615 	mov	a,(_find_sloc1_1_0 + 1)
      00390E 34 FF            [12]10616 	addc	a,#0xff
      003910 FE               [12]10617 	mov	r6,a
                                  10618 ;	.\ecen4350_lcd_v4.c:2460: i--;		// two decrements plus next loop increment is equal to one decrement
      003911 EC               [12]10619 	mov	a,r4
      003912 24 FF            [12]10620 	add	a,#0xff
      003914 F5*5C            [12]10621 	mov	_find_sloc1_1_0,a
      003916 EE               [12]10622 	mov	a,r6
      003917 34 FF            [12]10623 	addc	a,#0xff
      003919 F5*5D            [12]10624 	mov	(_find_sloc1_1_0 + 1),a
                                  10625 ;	.\ecen4350_lcd_v4.c:2461: page--;		// decrement to previous page
      00391B 1D               [12]10626 	dec	r5
      00391C                      10627 00174$:
                                  10628 ;	.\ecen4350_lcd_v4.c:2462: } if (selection == '0') {
      00391C 78r00            [12]10629 	mov	r0,#_selection
      00391E B6 30 02         [24]10630 	cjne	@r0,#0x30,00601$
      003921 80 03            [24]10631 	sjmp	00602$
      003923                      10632 00601$:
      003923 02r38r96         [24]10633 	ljmp	00177$
      003926                      10634 00602$:
                                  10635 ;	.\ecen4350_lcd_v4.c:2463: setColorWhite();
      003926 C0 05            [24]10636 	push	ar5
      003928 12r15rE4         [24]10637 	lcall	_setColorWhite
                                  10638 ;	.\ecen4350_lcd_v4.c:2464: setCursor(0, 180);
      00392B 75*00 B4         [24]10639 	mov	_setCursor_PARM_2,#0xb4
      00392E 75*01 00         [24]10640 	mov	(_setCursor_PARM_2 + 1),#0x00
      003931 90 00 00         [24]10641 	mov	dptr,#0x0000
      003934 12r04rB6         [24]10642 	lcall	_setCursor
                                  10643 ;	.\ecen4350_lcd_v4.c:2465: LCD_string_write(" <1> Next\n ");
      003937 90r0BrB6         [24]10644 	mov	dptr,#___str_117
      00393A 75 F0 80         [24]10645 	mov	b,#0x80
      00393D 12r0FrD0         [24]10646 	lcall	_LCD_string_write
                                  10647 ;	.\ecen4350_lcd_v4.c:2466: setColorHighlight2();
      003940 12r15rB6         [24]10648 	lcall	_setColorHighlight2
                                  10649 ;	.\ecen4350_lcd_v4.c:2467: LCD_string_write("<0> Exit");
      003943 90r09r1C         [24]10650 	mov	dptr,#___str_77
      003946 75 F0 80         [24]10651 	mov	b,#0x80
      003949 12r0FrD0         [24]10652 	lcall	_LCD_string_write
                                  10653 ;	.\ecen4350_lcd_v4.c:2468: setColorWhite();
      00394C 12r15rE4         [24]10654 	lcall	_setColorWhite
                                  10655 ;	.\ecen4350_lcd_v4.c:2469: LCD_string_write("\n <2> Previous");
      00394F 90r0BrC2         [24]10656 	mov	dptr,#___str_118
      003952 75 F0 80         [24]10657 	mov	b,#0x80
      003955 12r0FrD0         [24]10658 	lcall	_LCD_string_write
      003958 D0 05            [24]10659 	pop	ar5
                                  10660 ;	.\ecen4350_lcd_v4.c:2470: exit = 0;		// set exit flag
      00395A 78r13            [12]10661 	mov	r0,#_find_exit_65536_646
      00395C 76 00            [12]10662 	mov	@r0,#0x00
                                  10663 ;	.\ecen4350_lcd_v4.c:2471: invalidInput = 0;
      00395E 7F 00            [12]10664 	mov	r7,#0x00
      003960 02r38r96         [24]10665 	ljmp	00177$
      003963                      10666 00181$:
                                  10667 ;	.\ecen4350_lcd_v4.c:2475: if (exit == 0) {		// check exit flag
      003963 78r13            [12]10668 	mov	r0,#_find_exit_65536_646
      003965 E6               [12]10669 	mov	a,@r0
      003966 60 0B            [24]10670 	jz	00197$
                                  10671 ;	.\ecen4350_lcd_v4.c:2476: break;			// break out the loop
      003968                      10672 00215$:
                                  10673 ;	.\ecen4350_lcd_v4.c:2318: for (unsigned int i = 0; i < blockSize; i++) {
      003968 05*5C            [12]10674 	inc	_find_sloc1_1_0
      00396A E4               [12]10675 	clr	a
      00396B B5*5C 02         [24]10676 	cjne	a,_find_sloc1_1_0,00604$
      00396E 05*5D            [12]10677 	inc	(_find_sloc1_1_0 + 1)
      003970                      10678 00604$:
      003970 02r35r42         [24]10679 	ljmp	00214$
      003973                      10680 00197$:
                                  10681 ;	.\ecen4350_lcd_v4.c:2482: if(noneFound) {
      003973 78r12            [12]10682 	mov	r0,#_find_noneFound_65536_646
      003975 E6               [12]10683 	mov	a,@r0
      003976 70 03            [24]10684 	jnz	00605$
      003978 02r34r24         [24]10685 	ljmp	00205$
      00397B                      10686 00605$:
                                  10687 ;	.\ecen4350_lcd_v4.c:2483: setColorRed();
      00397B C0 05            [24]10688 	push	ar5
      00397D 12r15rD9         [24]10689 	lcall	_setColorRed
                                  10690 ;	.\ecen4350_lcd_v4.c:2484: setCursor(0, 140);
      003980 75*00 8C         [24]10691 	mov	_setCursor_PARM_2,#0x8c
      003983 75*01 00         [24]10692 	mov	(_setCursor_PARM_2 + 1),#0x00
      003986 90 00 00         [24]10693 	mov	dptr,#0x0000
      003989 12r04rB6         [24]10694 	lcall	_setCursor
                                  10695 ;	.\ecen4350_lcd_v4.c:2485: LCD_string_write(" Value Not Found\n Within Block\n ");
      00398C 90r0BrD1         [24]10696 	mov	dptr,#___str_119
      00398F 75 F0 80         [24]10697 	mov	b,#0x80
      003992 12r0FrD0         [24]10698 	lcall	_LCD_string_write
                                  10699 ;	.\ecen4350_lcd_v4.c:2486: setColorWhite();
      003995 12r15rE4         [24]10700 	lcall	_setColorWhite
                                  10701 ;	.\ecen4350_lcd_v4.c:2487: LCD_string_write("\n <0> Exit");
      003998 90r0BrF2         [24]10702 	mov	dptr,#___str_120
      00399B 75 F0 80         [24]10703 	mov	b,#0x80
      00399E 12r0FrD0         [24]10704 	lcall	_LCD_string_write
      0039A1 D0 05            [24]10705 	pop	ar5
                                  10706 ;	.\ecen4350_lcd_v4.c:2488: invalidInput = 1;
      0039A3 7F 01            [12]10707 	mov	r7,#0x01
                                  10708 ;	.\ecen4350_lcd_v4.c:2490: while (invalidInput) {
      0039A5                      10709 00200$:
      0039A5 EF               [12]10710 	mov	a,r7
      0039A6 70 03            [24]10711 	jnz	00606$
      0039A8 02r34r24         [24]10712 	ljmp	00205$
      0039AB                      10713 00606$:
                                  10714 ;	.\ecen4350_lcd_v4.c:2491: selection = keyDetect();
      0039AB C0 07            [24]10715 	push	ar7
      0039AD C0 05            [24]10716 	push	ar5
      0039AF 12r10rEE         [24]10717 	lcall	_keyDetect
      0039B2 AE 82            [24]10718 	mov	r6,dpl
      0039B4 D0 05            [24]10719 	pop	ar5
      0039B6 D0 07            [24]10720 	pop	ar7
      0039B8 78r00            [12]10721 	mov	r0,#_selection
      0039BA A6 06            [24]10722 	mov	@r0,ar6
                                  10723 ;	.\ecen4350_lcd_v4.c:2492: if (selection == '0'){
      0039BC BE 30 E6         [24]10724 	cjne	r6,#0x30,00200$
                                  10725 ;	.\ecen4350_lcd_v4.c:2493: setCursor(0, 140);
      0039BF 75*00 8C         [24]10726 	mov	_setCursor_PARM_2,#0x8c
      0039C2 75*01 00         [24]10727 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039C5 90 00 00         [24]10728 	mov	dptr,#0x0000
      0039C8 C0 05            [24]10729 	push	ar5
      0039CA 12r04rB6         [24]10730 	lcall	_setCursor
                                  10731 ;	.\ecen4350_lcd_v4.c:2494: LCD_string_write("\n\n\n ");
      0039CD 90r0BrFD         [24]10732 	mov	dptr,#___str_121
      0039D0 75 F0 80         [24]10733 	mov	b,#0x80
      0039D3 12r0FrD0         [24]10734 	lcall	_LCD_string_write
                                  10735 ;	.\ecen4350_lcd_v4.c:2495: setColorHighlight2();
      0039D6 12r15rB6         [24]10736 	lcall	_setColorHighlight2
                                  10737 ;	.\ecen4350_lcd_v4.c:2496: LCD_string_write("<0> Exit");
      0039D9 90r09r1C         [24]10738 	mov	dptr,#___str_77
      0039DC 75 F0 80         [24]10739 	mov	b,#0x80
      0039DF 12r0FrD0         [24]10740 	lcall	_LCD_string_write
      0039E2 D0 05            [24]10741 	pop	ar5
                                  10742 ;	.\ecen4350_lcd_v4.c:2497: invalidInput = 0;
      0039E4 7F 00            [12]10743 	mov	r7,#0x00
                                  10744 ;	.\ecen4350_lcd_v4.c:2498: exit = 0;
      0039E6 78r13            [12]10745 	mov	r0,#_find_exit_65536_646
      0039E8 76 00            [12]10746 	mov	@r0,#0x00
      0039EA 80 B9            [24]10747 	sjmp	00200$
      0039EC                      10748 00207$:
                                  10749 ;	.\ecen4350_lcd_v4.c:2503: delay(80);
      0039EC 90 00 50         [24]10750 	mov	dptr,#0x0050
                                  10751 ;	.\ecen4350_lcd_v4.c:2504: return;
                                  10752 ;	.\ecen4350_lcd_v4.c:2505: }
      0039EF 02r00rE0         [24]10753 	ljmp	_delay
                                  10754 ;------------------------------------------------------------
                                  10755 ;Allocation info for local variables in function 'count'
                                  10756 ;------------------------------------------------------------
                                  10757 ;d                         Allocated to registers 
                                  10758 ;i                         Allocated with name '_count_i_262144_715'
                                  10759 ;__3932160175              Allocated to registers 
                                  10760 ;__3932160176              Allocated to registers 
                                  10761 ;map_address               Allocated to registers 
                                  10762 ;d                         Allocated to registers r4 
                                  10763 ;i                         Allocated to registers r4 r6 
                                  10764 ;__3932160178              Allocated to registers 
                                  10765 ;__3932160179              Allocated to registers 
                                  10766 ;map_address               Allocated to registers 
                                  10767 ;d                         Allocated to registers r3 
                                  10768 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10769 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10770 ;address                   Allocated with name '_count_address_65536_702'
                                  10771 ;destination               Allocated to registers 
                                  10772 ;blockSize                 Allocated with name '_count_blockSize_65536_702'
                                  10773 ;value                     Allocated with name '_count_value_65536_702'
                                  10774 ;scan                      Allocated with name '_count_scan_65536_702'
                                  10775 ;page                      Allocated to registers r5 
                                  10776 ;noneFound                 Allocated with name '_count_noneFound_65536_702'
                                  10777 ;invalidInput              Allocated to registers r7 
                                  10778 ;exit                      Allocated with name '_count_exit_65536_702'
                                  10779 ;------------------------------------------------------------
                                  10780 ;	.\ecen4350_lcd_v4.c:2507: void count() {
                                  10781 ;	-----------------------------------------
                                  10782 ;	 function count
                                  10783 ;	-----------------------------------------
      0039F2                      10784 _count:
                                  10785 ;	.\ecen4350_lcd_v4.c:2511: __idata unsigned char blockSize = 0;
      0039F2 78r16            [12]10786 	mov	r0,#_count_blockSize_65536_702
      0039F4 76 00            [12]10787 	mov	@r0,#0x00
                                  10788 ;	.\ecen4350_lcd_v4.c:2513: __idata unsigned char scan = 0;
      0039F6 78r18            [12]10789 	mov	r0,#_count_scan_65536_702
      0039F8 76 00            [12]10790 	mov	@r0,#0x00
                                  10791 ;	.\ecen4350_lcd_v4.c:2514: __idata unsigned char page = 0;
      0039FA 7D 00            [12]10792 	mov	r5,#0x00
                                  10793 ;	.\ecen4350_lcd_v4.c:2515: __idata unsigned char noneFound = 1;
      0039FC 78r19            [12]10794 	mov	r0,#_count_noneFound_65536_702
      0039FE 76 01            [12]10795 	mov	@r0,#0x01
                                  10796 ;	.\ecen4350_lcd_v4.c:2516: __idata unsigned char invalidInput = 1;
      003A00 7B 01            [12]10797 	mov	r3,#0x01
                                  10798 ;	.\ecen4350_lcd_v4.c:2517: __idata unsigned char exit = 1;
      003A02 78r1A            [12]10799 	mov	r0,#_count_exit_65536_702
      003A04 76 01            [12]10800 	mov	@r0,#0x01
                                  10801 ;	.\ecen4350_lcd_v4.c:2519: clearLCD();
      003A06 C0 05            [24]10802 	push	ar5
      003A08 C0 03            [24]10803 	push	ar3
      003A0A 12r0Dr53         [24]10804 	lcall	_clearLCD
                                  10805 ;	.\ecen4350_lcd_v4.c:2522: setTextSize(5);
      003A0D 75 82 05         [24]10806 	mov	dpl,#0x05
      003A10 12r04rD0         [24]10807 	lcall	_setTextSize
                                  10808 ;	.\ecen4350_lcd_v4.c:2523: fillTop(GRAY);
      003A13 90 D6 BA         [24]10809 	mov	dptr,#0xd6ba
      003A16 12r0Br86         [24]10810 	lcall	_fillTop
                                  10811 ;	.\ecen4350_lcd_v4.c:2524: setColorMenu();
      003A19 12r15rCD         [24]10812 	lcall	_setColorMenu
                                  10813 ;	.\ecen4350_lcd_v4.c:2525: setCursor(15, 0);
      003A1C E4               [12]10814 	clr	a
      003A1D F5*00            [12]10815 	mov	_setCursor_PARM_2,a
      003A1F F5*01            [12]10816 	mov	(_setCursor_PARM_2 + 1),a
      003A21 90 00 0F         [24]10817 	mov	dptr,#0x000f
      003A24 12r04rB6         [24]10818 	lcall	_setCursor
                                  10819 ;	.\ecen4350_lcd_v4.c:2526: LCD_string_write("[COUNT]\n");
      003A27 90r0Cr02         [24]10820 	mov	dptr,#___str_122
      003A2A 75 F0 80         [24]10821 	mov	b,#0x80
      003A2D 12r0FrD0         [24]10822 	lcall	_LCD_string_write
                                  10823 ;	.\ecen4350_lcd_v4.c:2527: setColorDefault();
      003A30 12r15r94         [24]10824 	lcall	_setColorDefault
                                  10825 ;	.\ecen4350_lcd_v4.c:2528: setTextSize(2);
      003A33 75 82 02         [24]10826 	mov	dpl,#0x02
      003A36 12r04rD0         [24]10827 	lcall	_setTextSize
                                  10828 ;	.\ecen4350_lcd_v4.c:2529: setCursor(0, 60);
      003A39 75*00 3C         [24]10829 	mov	_setCursor_PARM_2,#0x3c
      003A3C 75*01 00         [24]10830 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A3F 90 00 00         [24]10831 	mov	dptr,#0x0000
      003A42 12r04rB6         [24]10832 	lcall	_setCursor
                                  10833 ;	.\ecen4350_lcd_v4.c:2530: LCD_string_write(" Search Value:");
      003A45 90r0Cr0B         [24]10834 	mov	dptr,#___str_123
      003A48 75 F0 80         [24]10835 	mov	b,#0x80
      003A4B 12r0FrD0         [24]10836 	lcall	_LCD_string_write
                                  10837 ;	.\ecen4350_lcd_v4.c:2531: setCursor(0, 80);
      003A4E 75*00 50         [24]10838 	mov	_setCursor_PARM_2,#0x50
      003A51 75*01 00         [24]10839 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A54 90 00 00         [24]10840 	mov	dptr,#0x0000
      003A57 12r04rB6         [24]10841 	lcall	_setCursor
                                  10842 ;	.\ecen4350_lcd_v4.c:2532: setColorGray();
      003A5A 12r15rC2         [24]10843 	lcall	_setColorGray
                                  10844 ;	.\ecen4350_lcd_v4.c:2533: LCD_string_write(" __");
      003A5D 90r08r03         [24]10845 	mov	dptr,#___str_61
      003A60 75 F0 80         [24]10846 	mov	b,#0x80
      003A63 12r0FrD0         [24]10847 	lcall	_LCD_string_write
                                  10848 ;	.\ecen4350_lcd_v4.c:2534: setCursor(0, 110);
      003A66 75*00 6E         [24]10849 	mov	_setCursor_PARM_2,#0x6e
      003A69 75*01 00         [24]10850 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A6C 90 00 00         [24]10851 	mov	dptr,#0x0000
      003A6F 12r04rB6         [24]10852 	lcall	_setCursor
                                  10853 ;	.\ecen4350_lcd_v4.c:2535: setColorDefault();
      003A72 12r15r94         [24]10854 	lcall	_setColorDefault
                                  10855 ;	.\ecen4350_lcd_v4.c:2536: LCD_string_write(" Search Address:");
      003A75 90r09r4C         [24]10856 	mov	dptr,#___str_81
      003A78 75 F0 80         [24]10857 	mov	b,#0x80
      003A7B 12r0FrD0         [24]10858 	lcall	_LCD_string_write
                                  10859 ;	.\ecen4350_lcd_v4.c:2537: setCursor(0, 130 );
      003A7E 75*00 82         [24]10860 	mov	_setCursor_PARM_2,#0x82
      003A81 75*01 00         [24]10861 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A84 90 00 00         [24]10862 	mov	dptr,#0x0000
      003A87 12r04rB6         [24]10863 	lcall	_setCursor
                                  10864 ;	.\ecen4350_lcd_v4.c:2538: setColorGray();
      003A8A 12r15rC2         [24]10865 	lcall	_setColorGray
                                  10866 ;	.\ecen4350_lcd_v4.c:2539: LCD_string_write(" 0x____");
      003A8D 90r05rF4         [24]10867 	mov	dptr,#___str_23
      003A90 75 F0 80         [24]10868 	mov	b,#0x80
      003A93 12r0FrD0         [24]10869 	lcall	_LCD_string_write
                                  10870 ;	.\ecen4350_lcd_v4.c:2540: setCursor(0, 160);
      003A96 75*00 A0         [24]10871 	mov	_setCursor_PARM_2,#0xa0
      003A99 75*01 00         [24]10872 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A9C 90 00 00         [24]10873 	mov	dptr,#0x0000
      003A9F 12r04rB6         [24]10874 	lcall	_setCursor
                                  10875 ;	.\ecen4350_lcd_v4.c:2541: setColorDefault();
      003AA2 12r15r94         [24]10876 	lcall	_setColorDefault
                                  10877 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" Input Block Size:\n");
      003AA5 90r09r5D         [24]10878 	mov	dptr,#___str_82
      003AA8 75 F0 80         [24]10879 	mov	b,#0x80
      003AAB 12r0FrD0         [24]10880 	lcall	_LCD_string_write
                                  10881 ;	.\ecen4350_lcd_v4.c:2543: setColorGray();
      003AAE 12r15rC2         [24]10882 	lcall	_setColorGray
                                  10883 ;	.\ecen4350_lcd_v4.c:2544: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003AB1 90r09r71         [24]10884 	mov	dptr,#___str_83
      003AB4 75 F0 80         [24]10885 	mov	b,#0x80
      003AB7 12r0FrD0         [24]10886 	lcall	_LCD_string_write
                                  10887 ;	.\ecen4350_lcd_v4.c:2545: LCD_string_write("  <FF> (SCAN)");
      003ABA 90r09r97         [24]10888 	mov	dptr,#___str_84
      003ABD 75 F0 80         [24]10889 	mov	b,#0x80
      003AC0 12r0FrD0         [24]10890 	lcall	_LCD_string_write
                                  10891 ;	.\ecen4350_lcd_v4.c:2546: setCursor(0, 250);
      003AC3 75*00 FA         [24]10892 	mov	_setCursor_PARM_2,#0xfa
      003AC6 75*01 00         [24]10893 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AC9 90 00 00         [24]10894 	mov	dptr,#0x0000
      003ACC 12r04rB6         [24]10895 	lcall	_setCursor
                                  10896 ;	.\ecen4350_lcd_v4.c:2547: setColorGray();
      003ACF 12r15rC2         [24]10897 	lcall	_setColorGray
                                  10898 ;	.\ecen4350_lcd_v4.c:2548: LCD_string_write("   __");
      003AD2 90r09rA5         [24]10899 	mov	dptr,#___str_85
      003AD5 75 F0 80         [24]10900 	mov	b,#0x80
      003AD8 12r0FrD0         [24]10901 	lcall	_LCD_string_write
                                  10902 ;	.\ecen4350_lcd_v4.c:2555: setColorSelect();
      003ADB 12r15r9F         [24]10903 	lcall	_setColorSelect
                                  10904 ;	.\ecen4350_lcd_v4.c:2556: setCursor(0, 60);
      003ADE 75*00 3C         [24]10905 	mov	_setCursor_PARM_2,#0x3c
      003AE1 75*01 00         [24]10906 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AE4 90 00 00         [24]10907 	mov	dptr,#0x0000
      003AE7 12r04rB6         [24]10908 	lcall	_setCursor
                                  10909 ;	.\ecen4350_lcd_v4.c:2557: LCD_string_write(" Search Value:");
      003AEA 90r0Cr0B         [24]10910 	mov	dptr,#___str_123
      003AED 75 F0 80         [24]10911 	mov	b,#0x80
      003AF0 12r0FrD0         [24]10912 	lcall	_LCD_string_write
                                  10913 ;	.\ecen4350_lcd_v4.c:2558: setCursor(0, 80);
      003AF3 75*00 50         [24]10914 	mov	_setCursor_PARM_2,#0x50
      003AF6 75*01 00         [24]10915 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AF9 90 00 00         [24]10916 	mov	dptr,#0x0000
      003AFC 12r04rB6         [24]10917 	lcall	_setCursor
                                  10918 ;	.\ecen4350_lcd_v4.c:2559: setColorWhite();
      003AFF 12r15rE4         [24]10919 	lcall	_setColorWhite
                                  10920 ;	.\ecen4350_lcd_v4.c:2560: setCursor(0, 80);
      003B02 75*00 50         [24]10921 	mov	_setCursor_PARM_2,#0x50
      003B05 75*01 00         [24]10922 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B08 90 00 00         [24]10923 	mov	dptr,#0x0000
      003B0B 12r04rB6         [24]10924 	lcall	_setCursor
                                  10925 ;	.\ecen4350_lcd_v4.c:2561: LCD_string_write(" ");
      003B0E 90r06r56         [24]10926 	mov	dptr,#___str_29
      003B11 75 F0 80         [24]10927 	mov	b,#0x80
      003B14 12r0FrD0         [24]10928 	lcall	_LCD_string_write
                                  10929 ;	.\ecen4350_lcd_v4.c:2562: setColorHighlight1();
      003B17 12r15rAA         [24]10930 	lcall	_setColorHighlight1
                                  10931 ;	.\ecen4350_lcd_v4.c:2563: selection = keyDetect();
      003B1A 12r10rEE         [24]10932 	lcall	_keyDetect
      003B1D AC 82            [24]10933 	mov	r4,dpl
      003B1F 78r00            [12]10934 	mov	r0,#_selection
      003B21 A6 04            [24]10935 	mov	@r0,ar4
                                  10936 ;	.\ecen4350_lcd_v4.c:2564: write(selection);
      003B23 8C 82            [24]10937 	mov	dpl,r4
      003B25 12r0Fr6A         [24]10938 	lcall	_write
                                  10939 ;	.\ecen4350_lcd_v4.c:2565: selection = ASCIItoHex(selection);
      003B28 78r00            [12]10940 	mov	r0,#_selection
      003B2A 86 82            [24]10941 	mov	dpl,@r0
      003B2C 12r13r5C         [24]10942 	lcall	_ASCIItoHex
      003B2F AC 82            [24]10943 	mov	r4,dpl
      003B31 D0 03            [24]10944 	pop	ar3
      003B33 78r00            [12]10945 	mov	r0,#_selection
      003B35 A6 04            [24]10946 	mov	@r0,ar4
                                  10947 ;	.\ecen4350_lcd_v4.c:2566: value |= selection * 16;
      003B37 EC               [12]10948 	mov	a,r4
      003B38 C4               [12]10949 	swap	a
      003B39 54 F0            [12]10950 	anl	a,#0xf0
      003B3B FC               [12]10951 	mov	r4,a
                                  10952 ;	.\ecen4350_lcd_v4.c:2567: selection = keyDetect();
      003B3C C0 04            [24]10953 	push	ar4
      003B3E C0 03            [24]10954 	push	ar3
      003B40 12r10rEE         [24]10955 	lcall	_keyDetect
      003B43 AE 82            [24]10956 	mov	r6,dpl
      003B45 78r00            [12]10957 	mov	r0,#_selection
      003B47 A6 06            [24]10958 	mov	@r0,ar6
                                  10959 ;	.\ecen4350_lcd_v4.c:2568: write(selection);
      003B49 8E 82            [24]10960 	mov	dpl,r6
      003B4B 12r0Fr6A         [24]10961 	lcall	_write
                                  10962 ;	.\ecen4350_lcd_v4.c:2569: selection = ASCIItoHex(selection);
      003B4E 78r00            [12]10963 	mov	r0,#_selection
      003B50 86 82            [24]10964 	mov	dpl,@r0
      003B52 12r13r5C         [24]10965 	lcall	_ASCIItoHex
      003B55 AE 82            [24]10966 	mov	r6,dpl
      003B57 D0 03            [24]10967 	pop	ar3
      003B59 D0 04            [24]10968 	pop	ar4
      003B5B 78r00            [12]10969 	mov	r0,#_selection
      003B5D A6 06            [24]10970 	mov	@r0,ar6
                                  10971 ;	.\ecen4350_lcd_v4.c:2570: value |= selection;
      003B5F 78r17            [12]10972 	mov	r0,#_count_value_65536_702
      003B61 EE               [12]10973 	mov	a,r6
      003B62 4C               [12]10974 	orl	a,r4
      003B63 F6               [12]10975 	mov	@r0,a
                                  10976 ;	.\ecen4350_lcd_v4.c:2573: setColorDefault();
      003B64 C0 03            [24]10977 	push	ar3
      003B66 12r15r94         [24]10978 	lcall	_setColorDefault
                                  10979 ;	.\ecen4350_lcd_v4.c:2574: setCursor(0, 60);
      003B69 75*00 3C         [24]10980 	mov	_setCursor_PARM_2,#0x3c
      003B6C 75*01 00         [24]10981 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B6F 90 00 00         [24]10982 	mov	dptr,#0x0000
      003B72 12r04rB6         [24]10983 	lcall	_setCursor
                                  10984 ;	.\ecen4350_lcd_v4.c:2575: LCD_string_write(" Search Value:");
      003B75 90r0Cr0B         [24]10985 	mov	dptr,#___str_123
      003B78 75 F0 80         [24]10986 	mov	b,#0x80
      003B7B 12r0FrD0         [24]10987 	lcall	_LCD_string_write
                                  10988 ;	.\ecen4350_lcd_v4.c:2576: setCursor(0, 80);
      003B7E 75*00 50         [24]10989 	mov	_setCursor_PARM_2,#0x50
      003B81 75*01 00         [24]10990 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B84 90 00 00         [24]10991 	mov	dptr,#0x0000
      003B87 12r04rB6         [24]10992 	lcall	_setCursor
                                  10993 ;	.\ecen4350_lcd_v4.c:2577: setColorWhite();
      003B8A 12r15rE4         [24]10994 	lcall	_setColorWhite
                                  10995 ;	.\ecen4350_lcd_v4.c:2578: LCD_string_write(" ");
      003B8D 90r06r56         [24]10996 	mov	dptr,#___str_29
      003B90 75 F0 80         [24]10997 	mov	b,#0x80
      003B93 12r0FrD0         [24]10998 	lcall	_LCD_string_write
                                  10999 ;	.\ecen4350_lcd_v4.c:2579: setColorHighlight2();
      003B96 12r15rB6         [24]11000 	lcall	_setColorHighlight2
                                  11001 ;	.\ecen4350_lcd_v4.c:2580: print8Hex(value);
      003B99 78r17            [12]11002 	mov	r0,#_count_value_65536_702
      003B9B 86 82            [24]11003 	mov	dpl,@r0
      003B9D 12r14rA1         [24]11004 	lcall	_print8Hex
                                  11005 ;	.\ecen4350_lcd_v4.c:2583: setColorSelect();
      003BA0 12r15r9F         [24]11006 	lcall	_setColorSelect
                                  11007 ;	.\ecen4350_lcd_v4.c:2584: setCursor(0, 110);
      003BA3 75*00 6E         [24]11008 	mov	_setCursor_PARM_2,#0x6e
      003BA6 75*01 00         [24]11009 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BA9 90 00 00         [24]11010 	mov	dptr,#0x0000
      003BAC 12r04rB6         [24]11011 	lcall	_setCursor
                                  11012 ;	.\ecen4350_lcd_v4.c:2585: LCD_string_write(" Search Address:");
      003BAF 90r09r4C         [24]11013 	mov	dptr,#___str_81
      003BB2 75 F0 80         [24]11014 	mov	b,#0x80
      003BB5 12r0FrD0         [24]11015 	lcall	_LCD_string_write
                                  11016 ;	.\ecen4350_lcd_v4.c:2586: setCursor(0, 130);
      003BB8 75*00 82         [24]11017 	mov	_setCursor_PARM_2,#0x82
      003BBB 75*01 00         [24]11018 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BBE 90 00 00         [24]11019 	mov	dptr,#0x0000
      003BC1 12r04rB6         [24]11020 	lcall	_setCursor
                                  11021 ;	.\ecen4350_lcd_v4.c:2587: LCD_string_write(" ");
      003BC4 90r06r56         [24]11022 	mov	dptr,#___str_29
      003BC7 75 F0 80         [24]11023 	mov	b,#0x80
      003BCA 12r0FrD0         [24]11024 	lcall	_LCD_string_write
                                  11025 ;	.\ecen4350_lcd_v4.c:2588: setColorHighlight1();
      003BCD 12r15rAA         [24]11026 	lcall	_setColorHighlight1
                                  11027 ;	.\ecen4350_lcd_v4.c:2589: LCD_string_write("0x");
      003BD0 90r05r29         [24]11028 	mov	dptr,#___str_2
      003BD3 75 F0 80         [24]11029 	mov	b,#0x80
      003BD6 12r0FrD0         [24]11030 	lcall	_LCD_string_write
                                  11031 ;	.\ecen4350_lcd_v4.c:2590: address = inputAddress();
      003BD9 12r16r05         [24]11032 	lcall	_inputAddress
      003BDC 78r14            [12]11033 	mov	r0,#_count_address_65536_702
      003BDE A6 82            [24]11034 	mov	@r0,dpl
      003BE0 08               [12]11035 	inc	r0
      003BE1 A6 83            [24]11036 	mov	@r0,dph
                                  11037 ;	.\ecen4350_lcd_v4.c:2593: setColorDefault();
      003BE3 12r15r94         [24]11038 	lcall	_setColorDefault
                                  11039 ;	.\ecen4350_lcd_v4.c:2594: setCursor(0, 110);
      003BE6 75*00 6E         [24]11040 	mov	_setCursor_PARM_2,#0x6e
      003BE9 75*01 00         [24]11041 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BEC 90 00 00         [24]11042 	mov	dptr,#0x0000
      003BEF 12r04rB6         [24]11043 	lcall	_setCursor
                                  11044 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write(" Search Address:");
      003BF2 90r09r4C         [24]11045 	mov	dptr,#___str_81
      003BF5 75 F0 80         [24]11046 	mov	b,#0x80
      003BF8 12r0FrD0         [24]11047 	lcall	_LCD_string_write
                                  11048 ;	.\ecen4350_lcd_v4.c:2596: setCursor(0, 130);
      003BFB 75*00 82         [24]11049 	mov	_setCursor_PARM_2,#0x82
      003BFE 75*01 00         [24]11050 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C01 90 00 00         [24]11051 	mov	dptr,#0x0000
      003C04 12r04rB6         [24]11052 	lcall	_setCursor
                                  11053 ;	.\ecen4350_lcd_v4.c:2597: LCD_string_write(" ");
      003C07 90r06r56         [24]11054 	mov	dptr,#___str_29
      003C0A 75 F0 80         [24]11055 	mov	b,#0x80
      003C0D 12r0FrD0         [24]11056 	lcall	_LCD_string_write
                                  11057 ;	.\ecen4350_lcd_v4.c:2598: setColorHighlight2();
      003C10 12r15rB6         [24]11058 	lcall	_setColorHighlight2
                                  11059 ;	.\ecen4350_lcd_v4.c:2599: LCD_string_write("0x");
      003C13 90r05r29         [24]11060 	mov	dptr,#___str_2
      003C16 75 F0 80         [24]11061 	mov	b,#0x80
      003C19 12r0FrD0         [24]11062 	lcall	_LCD_string_write
                                  11063 ;	.\ecen4350_lcd_v4.c:2600: print16Hex(address);
      003C1C 78r14            [12]11064 	mov	r0,#_count_address_65536_702
      003C1E 86 82            [24]11065 	mov	dpl,@r0
      003C20 08               [12]11066 	inc	r0
      003C21 86 83            [24]11067 	mov	dph,@r0
      003C23 12r14rB8         [24]11068 	lcall	_print16Hex
                                  11069 ;	.\ecen4350_lcd_v4.c:2603: setColorSelect();
      003C26 12r15r9F         [24]11070 	lcall	_setColorSelect
                                  11071 ;	.\ecen4350_lcd_v4.c:2604: setCursor(0, 160);
      003C29 75*00 A0         [24]11072 	mov	_setCursor_PARM_2,#0xa0
      003C2C 75*01 00         [24]11073 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C2F 90 00 00         [24]11074 	mov	dptr,#0x0000
      003C32 12r04rB6         [24]11075 	lcall	_setCursor
                                  11076 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write(" Input Block Size:\n");
      003C35 90r09r5D         [24]11077 	mov	dptr,#___str_82
      003C38 75 F0 80         [24]11078 	mov	b,#0x80
      003C3B 12r0FrD0         [24]11079 	lcall	_LCD_string_write
                                  11080 ;	.\ecen4350_lcd_v4.c:2606: setColorWhite();
      003C3E 12r15rE4         [24]11081 	lcall	_setColorWhite
                                  11082 ;	.\ecen4350_lcd_v4.c:2607: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003C41 90r09r71         [24]11083 	mov	dptr,#___str_83
      003C44 75 F0 80         [24]11084 	mov	b,#0x80
      003C47 12r0FrD0         [24]11085 	lcall	_LCD_string_write
                                  11086 ;	.\ecen4350_lcd_v4.c:2608: LCD_string_write("  <FF> (SCAN)");
      003C4A 90r09r97         [24]11087 	mov	dptr,#___str_84
      003C4D 75 F0 80         [24]11088 	mov	b,#0x80
      003C50 12r0FrD0         [24]11089 	lcall	_LCD_string_write
      003C53 D0 03            [24]11090 	pop	ar3
      003C55 D0 05            [24]11091 	pop	ar5
                                  11092 ;	.\ecen4350_lcd_v4.c:2609: while (invalidInput) {
      003C57                      11093 00113$:
      003C57 EB               [12]11094 	mov	a,r3
      003C58 70 03            [24]11095 	jnz	00530$
      003C5A 02r3Dr16         [24]11096 	ljmp	00115$
      003C5D                      11097 00530$:
                                  11098 ;	.\ecen4350_lcd_v4.c:2610: setCursor(0, 250);
      003C5D 75*00 FA         [24]11099 	mov	_setCursor_PARM_2,#0xfa
      003C60 75*01 00         [24]11100 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C63 90 00 00         [24]11101 	mov	dptr,#0x0000
      003C66 C0 05            [24]11102 	push	ar5
      003C68 C0 03            [24]11103 	push	ar3
      003C6A 12r04rB6         [24]11104 	lcall	_setCursor
                                  11105 ;	.\ecen4350_lcd_v4.c:2611: setColorGray();
      003C6D 12r15rC2         [24]11106 	lcall	_setColorGray
                                  11107 ;	.\ecen4350_lcd_v4.c:2612: LCD_string_write("   __");
      003C70 90r09rA5         [24]11108 	mov	dptr,#___str_85
      003C73 75 F0 80         [24]11109 	mov	b,#0x80
      003C76 12r0FrD0         [24]11110 	lcall	_LCD_string_write
                                  11111 ;	.\ecen4350_lcd_v4.c:2613: setCursor(0, 250);
      003C79 75*00 FA         [24]11112 	mov	_setCursor_PARM_2,#0xfa
      003C7C 75*01 00         [24]11113 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C7F 90 00 00         [24]11114 	mov	dptr,#0x0000
      003C82 12r04rB6         [24]11115 	lcall	_setCursor
                                  11116 ;	.\ecen4350_lcd_v4.c:2614: LCD_string_write("   ");
      003C85 90r09rAB         [24]11117 	mov	dptr,#___str_86
      003C88 75 F0 80         [24]11118 	mov	b,#0x80
      003C8B 12r0FrD0         [24]11119 	lcall	_LCD_string_write
                                  11120 ;	.\ecen4350_lcd_v4.c:2615: setColorHighlight1();
      003C8E 12r15rAA         [24]11121 	lcall	_setColorHighlight1
                                  11122 ;	.\ecen4350_lcd_v4.c:2616: blockSize = inputBlockSize();
      003C91 12r16rB5         [24]11123 	lcall	_inputBlockSize
      003C94 78r16            [12]11124 	mov	r0,#_count_blockSize_65536_702
      003C96 A6 82            [24]11125 	mov	@r0,dpl
      003C98 D0 03            [24]11126 	pop	ar3
      003C9A D0 05            [24]11127 	pop	ar5
                                  11128 ;	.\ecen4350_lcd_v4.c:2617: if (blockSize == 0x01) {
      003C9C 78r16            [12]11129 	mov	r0,#_count_blockSize_65536_702
      003C9E B6 01 18         [24]11130 	cjne	@r0,#0x01,00111$
                                  11131 ;	.\ecen4350_lcd_v4.c:2618: invalidInput = 0;
      003CA1 7B 00            [12]11132 	mov	r3,#0x00
                                  11133 ;	.\ecen4350_lcd_v4.c:2619: setColorDefault();
      003CA3 C0 05            [24]11134 	push	ar5
      003CA5 C0 03            [24]11135 	push	ar3
      003CA7 12r15r94         [24]11136 	lcall	_setColorDefault
                                  11137 ;	.\ecen4350_lcd_v4.c:2620: LCD_string_write("\n                ");
      003CAA 90r09rAF         [24]11138 	mov	dptr,#___str_87
      003CAD 75 F0 80         [24]11139 	mov	b,#0x80
      003CB0 12r0FrD0         [24]11140 	lcall	_LCD_string_write
      003CB3 D0 03            [24]11141 	pop	ar3
      003CB5 D0 05            [24]11142 	pop	ar5
      003CB7 80 9E            [24]11143 	sjmp	00113$
      003CB9                      11144 00111$:
                                  11145 ;	.\ecen4350_lcd_v4.c:2621: } else if (blockSize == 0x02) {
      003CB9 78r16            [12]11146 	mov	r0,#_count_blockSize_65536_702
      003CBB B6 02 19         [24]11147 	cjne	@r0,#0x02,00108$
                                  11148 ;	.\ecen4350_lcd_v4.c:2622: invalidInput = 0;
      003CBE 7B 00            [12]11149 	mov	r3,#0x00
                                  11150 ;	.\ecen4350_lcd_v4.c:2623: setColorDefault();
      003CC0 C0 05            [24]11151 	push	ar5
      003CC2 C0 03            [24]11152 	push	ar3
      003CC4 12r15r94         [24]11153 	lcall	_setColorDefault
                                  11154 ;	.\ecen4350_lcd_v4.c:2624: LCD_string_write("\n                ");
      003CC7 90r09rAF         [24]11155 	mov	dptr,#___str_87
      003CCA 75 F0 80         [24]11156 	mov	b,#0x80
      003CCD 12r0FrD0         [24]11157 	lcall	_LCD_string_write
      003CD0 D0 03            [24]11158 	pop	ar3
      003CD2 D0 05            [24]11159 	pop	ar5
      003CD4 02r3Cr57         [24]11160 	ljmp	00113$
      003CD7                      11161 00108$:
                                  11162 ;	.\ecen4350_lcd_v4.c:2625: } else if (blockSize == 0x04) {
      003CD7 78r16            [12]11163 	mov	r0,#_count_blockSize_65536_702
      003CD9 B6 04 19         [24]11164 	cjne	@r0,#0x04,00105$
                                  11165 ;	.\ecen4350_lcd_v4.c:2626: invalidInput = 0;
      003CDC 7B 00            [12]11166 	mov	r3,#0x00
                                  11167 ;	.\ecen4350_lcd_v4.c:2627: setColorDefault();
      003CDE C0 05            [24]11168 	push	ar5
      003CE0 C0 03            [24]11169 	push	ar3
      003CE2 12r15r94         [24]11170 	lcall	_setColorDefault
                                  11171 ;	.\ecen4350_lcd_v4.c:2628: LCD_string_write("\n                ");
      003CE5 90r09rAF         [24]11172 	mov	dptr,#___str_87
      003CE8 75 F0 80         [24]11173 	mov	b,#0x80
      003CEB 12r0FrD0         [24]11174 	lcall	_LCD_string_write
      003CEE D0 03            [24]11175 	pop	ar3
      003CF0 D0 05            [24]11176 	pop	ar5
      003CF2 02r3Cr57         [24]11177 	ljmp	00113$
      003CF5                      11178 00105$:
                                  11179 ;	.\ecen4350_lcd_v4.c:2629: } else if (blockSize == 0xFF) {
      003CF5 78r16            [12]11180 	mov	r0,#_count_blockSize_65536_702
      003CF7 B6 FF 05         [24]11181 	cjne	@r0,#0xff,00102$
                                  11182 ;	.\ecen4350_lcd_v4.c:2630: invalidInput = 0;
      003CFA 7B 00            [12]11183 	mov	r3,#0x00
      003CFC 02r3Cr57         [24]11184 	ljmp	00113$
      003CFF                      11185 00102$:
                                  11186 ;	.\ecen4350_lcd_v4.c:2633: setColorRed();
      003CFF C0 05            [24]11187 	push	ar5
      003D01 C0 03            [24]11188 	push	ar3
      003D03 12r15rD9         [24]11189 	lcall	_setColorRed
                                  11190 ;	.\ecen4350_lcd_v4.c:2634: LCD_string_write("\n Try again");
      003D06 90r09rC1         [24]11191 	mov	dptr,#___str_88
      003D09 75 F0 80         [24]11192 	mov	b,#0x80
      003D0C 12r0FrD0         [24]11193 	lcall	_LCD_string_write
      003D0F D0 03            [24]11194 	pop	ar3
      003D11 D0 05            [24]11195 	pop	ar5
      003D13 02r3Cr57         [24]11196 	ljmp	00113$
      003D16                      11197 00115$:
                                  11198 ;	.\ecen4350_lcd_v4.c:2639: setCursor(0, 160);
      003D16 75*00 A0         [24]11199 	mov	_setCursor_PARM_2,#0xa0
      003D19 75*01 00         [24]11200 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D1C 90 00 00         [24]11201 	mov	dptr,#0x0000
      003D1F C0 05            [24]11202 	push	ar5
      003D21 12r04rB6         [24]11203 	lcall	_setCursor
                                  11204 ;	.\ecen4350_lcd_v4.c:2640: setColorDefault();
      003D24 12r15r94         [24]11205 	lcall	_setColorDefault
                                  11206 ;	.\ecen4350_lcd_v4.c:2641: LCD_string_write(" Input Block Size:\n");
      003D27 90r09r5D         [24]11207 	mov	dptr,#___str_82
      003D2A 75 F0 80         [24]11208 	mov	b,#0x80
      003D2D 12r0FrD0         [24]11209 	lcall	_LCD_string_write
      003D30 D0 05            [24]11210 	pop	ar5
                                  11211 ;	.\ecen4350_lcd_v4.c:2642: if (blockSize == 0x01){
      003D32 78r16            [12]11212 	mov	r0,#_count_blockSize_65536_702
      003D34 B6 01 74         [24]11213 	cjne	@r0,#0x01,00125$
                                  11214 ;	.\ecen4350_lcd_v4.c:2643: LCD_string_write("  ");
      003D37 90r06r6F         [24]11215 	mov	dptr,#___str_32
      003D3A 75 F0 80         [24]11216 	mov	b,#0x80
      003D3D C0 05            [24]11217 	push	ar5
      003D3F 12r0FrD0         [24]11218 	lcall	_LCD_string_write
                                  11219 ;	.\ecen4350_lcd_v4.c:2644: setColorHighlight2();
      003D42 12r15rB6         [24]11220 	lcall	_setColorHighlight2
                                  11221 ;	.\ecen4350_lcd_v4.c:2645: LCD_string_write("<01> BYTE\n");
      003D45 90r09rCD         [24]11222 	mov	dptr,#___str_89
      003D48 75 F0 80         [24]11223 	mov	b,#0x80
      003D4B 12r0FrD0         [24]11224 	lcall	_LCD_string_write
                                  11225 ;	.\ecen4350_lcd_v4.c:2646: setColorGray();
      003D4E 12r15rC2         [24]11226 	lcall	_setColorGray
                                  11227 ;	.\ecen4350_lcd_v4.c:2647: LCD_string_write("  <02> WORD\n");
      003D51 90r09rD8         [24]11228 	mov	dptr,#___str_90
      003D54 75 F0 80         [24]11229 	mov	b,#0x80
      003D57 12r0FrD0         [24]11230 	lcall	_LCD_string_write
                                  11231 ;	.\ecen4350_lcd_v4.c:2648: LCD_string_write("  <04> DWORD\n");
      003D5A 90r09rE5         [24]11232 	mov	dptr,#___str_91
      003D5D 75 F0 80         [24]11233 	mov	b,#0x80
      003D60 12r0FrD0         [24]11234 	lcall	_LCD_string_write
                                  11235 ;	.\ecen4350_lcd_v4.c:2649: LCD_string_write("  <FF> (SCAN)");
      003D63 90r09r97         [24]11236 	mov	dptr,#___str_84
      003D66 75 F0 80         [24]11237 	mov	b,#0x80
      003D69 12r0FrD0         [24]11238 	lcall	_LCD_string_write
                                  11239 ;	.\ecen4350_lcd_v4.c:2650: setColorDefault();
      003D6C 12r15r94         [24]11240 	lcall	_setColorDefault
                                  11241 ;	.\ecen4350_lcd_v4.c:2651: setCursor(0, 250);
      003D6F 75*00 FA         [24]11242 	mov	_setCursor_PARM_2,#0xfa
      003D72 75*01 00         [24]11243 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D75 90 00 00         [24]11244 	mov	dptr,#0x0000
      003D78 12r04rB6         [24]11245 	lcall	_setCursor
                                  11246 ;	.\ecen4350_lcd_v4.c:2652: LCD_string_write("   ");
      003D7B 90r09rAB         [24]11247 	mov	dptr,#___str_86
      003D7E 75 F0 80         [24]11248 	mov	b,#0x80
      003D81 12r0FrD0         [24]11249 	lcall	_LCD_string_write
                                  11250 ;	.\ecen4350_lcd_v4.c:2653: setColorHighlight2();
      003D84 12r15rB6         [24]11251 	lcall	_setColorHighlight2
                                  11252 ;	.\ecen4350_lcd_v4.c:2654: print8Hex(blockSize);
      003D87 78r16            [12]11253 	mov	r0,#_count_blockSize_65536_702
      003D89 86 82            [24]11254 	mov	dpl,@r0
      003D8B 12r14rA1         [24]11255 	lcall	_print8Hex
                                  11256 ;	.\ecen4350_lcd_v4.c:2655: setColorDefault();
      003D8E 12r15r94         [24]11257 	lcall	_setColorDefault
                                  11258 ;	.\ecen4350_lcd_v4.c:2656: LCD_string_write("\n Search Size Limit:");
      003D91 90r09rF3         [24]11259 	mov	dptr,#___str_92
      003D94 75 F0 80         [24]11260 	mov	b,#0x80
      003D97 12r0FrD0         [24]11261 	lcall	_LCD_string_write
                                  11262 ;	.\ecen4350_lcd_v4.c:2657: setColorWhite();
      003D9A 12r15rE4         [24]11263 	lcall	_setColorWhite
                                  11264 ;	.\ecen4350_lcd_v4.c:2658: LCD_string_write("\n BYTE [8 bits]");
      003D9D 90r0Ar08         [24]11265 	mov	dptr,#___str_93
      003DA0 75 F0 80         [24]11266 	mov	b,#0x80
      003DA3 12r0FrD0         [24]11267 	lcall	_LCD_string_write
      003DA6 D0 05            [24]11268 	pop	ar5
      003DA8 02r3ErEF         [24]11269 	ljmp	00126$
      003DAB                      11270 00125$:
                                  11271 ;	.\ecen4350_lcd_v4.c:2659: } else if (blockSize == 0x02) {
      003DAB 78r16            [12]11272 	mov	r0,#_count_blockSize_65536_702
      003DAD B6 02 6E         [24]11273 	cjne	@r0,#0x02,00122$
                                  11274 ;	.\ecen4350_lcd_v4.c:2660: setColorGray();
      003DB0 C0 05            [24]11275 	push	ar5
      003DB2 12r15rC2         [24]11276 	lcall	_setColorGray
                                  11277 ;	.\ecen4350_lcd_v4.c:2661: LCD_string_write("  <01> BYTE\n  ");
      003DB5 90r0Ar18         [24]11278 	mov	dptr,#___str_94
      003DB8 75 F0 80         [24]11279 	mov	b,#0x80
      003DBB 12r0FrD0         [24]11280 	lcall	_LCD_string_write
                                  11281 ;	.\ecen4350_lcd_v4.c:2662: setColorHighlight2();
      003DBE 12r15rB6         [24]11282 	lcall	_setColorHighlight2
                                  11283 ;	.\ecen4350_lcd_v4.c:2663: LCD_string_write("<02> WORD\n");
      003DC1 90r0Ar27         [24]11284 	mov	dptr,#___str_95
      003DC4 75 F0 80         [24]11285 	mov	b,#0x80
      003DC7 12r0FrD0         [24]11286 	lcall	_LCD_string_write
                                  11287 ;	.\ecen4350_lcd_v4.c:2664: setColorGray();
      003DCA 12r15rC2         [24]11288 	lcall	_setColorGray
                                  11289 ;	.\ecen4350_lcd_v4.c:2665: LCD_string_write("  <04> DWORD\n");
      003DCD 90r09rE5         [24]11290 	mov	dptr,#___str_91
      003DD0 75 F0 80         [24]11291 	mov	b,#0x80
      003DD3 12r0FrD0         [24]11292 	lcall	_LCD_string_write
                                  11293 ;	.\ecen4350_lcd_v4.c:2666: LCD_string_write("  <FF> (SCAN)");
      003DD6 90r09r97         [24]11294 	mov	dptr,#___str_84
      003DD9 75 F0 80         [24]11295 	mov	b,#0x80
      003DDC 12r0FrD0         [24]11296 	lcall	_LCD_string_write
                                  11297 ;	.\ecen4350_lcd_v4.c:2667: setColorDefault();
      003DDF 12r15r94         [24]11298 	lcall	_setColorDefault
                                  11299 ;	.\ecen4350_lcd_v4.c:2668: setCursor(0, 250);
      003DE2 75*00 FA         [24]11300 	mov	_setCursor_PARM_2,#0xfa
      003DE5 75*01 00         [24]11301 	mov	(_setCursor_PARM_2 + 1),#0x00
      003DE8 90 00 00         [24]11302 	mov	dptr,#0x0000
      003DEB 12r04rB6         [24]11303 	lcall	_setCursor
                                  11304 ;	.\ecen4350_lcd_v4.c:2669: LCD_string_write("   ");
      003DEE 90r09rAB         [24]11305 	mov	dptr,#___str_86
      003DF1 75 F0 80         [24]11306 	mov	b,#0x80
      003DF4 12r0FrD0         [24]11307 	lcall	_LCD_string_write
                                  11308 ;	.\ecen4350_lcd_v4.c:2670: setColorHighlight2();
      003DF7 12r15rB6         [24]11309 	lcall	_setColorHighlight2
                                  11310 ;	.\ecen4350_lcd_v4.c:2671: print8Hex(blockSize);
      003DFA 78r16            [12]11311 	mov	r0,#_count_blockSize_65536_702
      003DFC 86 82            [24]11312 	mov	dpl,@r0
      003DFE 12r14rA1         [24]11313 	lcall	_print8Hex
                                  11314 ;	.\ecen4350_lcd_v4.c:2672: setColorDefault();
      003E01 12r15r94         [24]11315 	lcall	_setColorDefault
                                  11316 ;	.\ecen4350_lcd_v4.c:2673: LCD_string_write("\n Search Size Limit:");
      003E04 90r09rF3         [24]11317 	mov	dptr,#___str_92
      003E07 75 F0 80         [24]11318 	mov	b,#0x80
      003E0A 12r0FrD0         [24]11319 	lcall	_LCD_string_write
                                  11320 ;	.\ecen4350_lcd_v4.c:2674: setColorWhite();
      003E0D 12r15rE4         [24]11321 	lcall	_setColorWhite
                                  11322 ;	.\ecen4350_lcd_v4.c:2675: LCD_string_write("\n WORD [16 bits]");
      003E10 90r0Ar32         [24]11323 	mov	dptr,#___str_96
      003E13 75 F0 80         [24]11324 	mov	b,#0x80
      003E16 12r0FrD0         [24]11325 	lcall	_LCD_string_write
      003E19 D0 05            [24]11326 	pop	ar5
      003E1B 02r3ErEF         [24]11327 	ljmp	00126$
      003E1E                      11328 00122$:
                                  11329 ;	.\ecen4350_lcd_v4.c:2676: } else if (blockSize == 0x04) {
      003E1E 78r16            [12]11330 	mov	r0,#_count_blockSize_65536_702
      003E20 B6 04 64         [24]11331 	cjne	@r0,#0x04,00119$
                                  11332 ;	.\ecen4350_lcd_v4.c:2677: setColorGray();
      003E23 C0 05            [24]11333 	push	ar5
      003E25 12r15rC2         [24]11334 	lcall	_setColorGray
                                  11335 ;	.\ecen4350_lcd_v4.c:2678: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003E28 90r0Ar43         [24]11336 	mov	dptr,#___str_97
      003E2B 75 F0 80         [24]11337 	mov	b,#0x80
      003E2E 12r0FrD0         [24]11338 	lcall	_LCD_string_write
                                  11339 ;	.\ecen4350_lcd_v4.c:2679: setColorHighlight2();
      003E31 12r15rB6         [24]11340 	lcall	_setColorHighlight2
                                  11341 ;	.\ecen4350_lcd_v4.c:2680: LCD_string_write("<04> DWORD\n");
      003E34 90r0Ar5E         [24]11342 	mov	dptr,#___str_98
      003E37 75 F0 80         [24]11343 	mov	b,#0x80
      003E3A 12r0FrD0         [24]11344 	lcall	_LCD_string_write
                                  11345 ;	.\ecen4350_lcd_v4.c:2681: setColorGray();
      003E3D 12r15rC2         [24]11346 	lcall	_setColorGray
                                  11347 ;	.\ecen4350_lcd_v4.c:2682: LCD_string_write("  <FF> (SCAN)");
      003E40 90r09r97         [24]11348 	mov	dptr,#___str_84
      003E43 75 F0 80         [24]11349 	mov	b,#0x80
      003E46 12r0FrD0         [24]11350 	lcall	_LCD_string_write
                                  11351 ;	.\ecen4350_lcd_v4.c:2683: setColorDefault();
      003E49 12r15r94         [24]11352 	lcall	_setColorDefault
                                  11353 ;	.\ecen4350_lcd_v4.c:2684: setCursor(0, 250);
      003E4C 75*00 FA         [24]11354 	mov	_setCursor_PARM_2,#0xfa
      003E4F 75*01 00         [24]11355 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E52 90 00 00         [24]11356 	mov	dptr,#0x0000
      003E55 12r04rB6         [24]11357 	lcall	_setCursor
                                  11358 ;	.\ecen4350_lcd_v4.c:2685: LCD_string_write("   ");
      003E58 90r09rAB         [24]11359 	mov	dptr,#___str_86
      003E5B 75 F0 80         [24]11360 	mov	b,#0x80
      003E5E 12r0FrD0         [24]11361 	lcall	_LCD_string_write
                                  11362 ;	.\ecen4350_lcd_v4.c:2686: setColorHighlight2();
      003E61 12r15rB6         [24]11363 	lcall	_setColorHighlight2
                                  11364 ;	.\ecen4350_lcd_v4.c:2687: print8Hex(blockSize);
      003E64 78r16            [12]11365 	mov	r0,#_count_blockSize_65536_702
      003E66 86 82            [24]11366 	mov	dpl,@r0
      003E68 12r14rA1         [24]11367 	lcall	_print8Hex
                                  11368 ;	.\ecen4350_lcd_v4.c:2688: setColorDefault();
      003E6B 12r15r94         [24]11369 	lcall	_setColorDefault
                                  11370 ;	.\ecen4350_lcd_v4.c:2689: LCD_string_write("\n Search Size Limit:");
      003E6E 90r09rF3         [24]11371 	mov	dptr,#___str_92
      003E71 75 F0 80         [24]11372 	mov	b,#0x80
      003E74 12r0FrD0         [24]11373 	lcall	_LCD_string_write
                                  11374 ;	.\ecen4350_lcd_v4.c:2690: setColorWhite();
      003E77 12r15rE4         [24]11375 	lcall	_setColorWhite
                                  11376 ;	.\ecen4350_lcd_v4.c:2691: LCD_string_write("\n DWORD [32 bits]");
      003E7A 90r0Ar6A         [24]11377 	mov	dptr,#___str_99
      003E7D 75 F0 80         [24]11378 	mov	b,#0x80
      003E80 12r0FrD0         [24]11379 	lcall	_LCD_string_write
      003E83 D0 05            [24]11380 	pop	ar5
      003E85 80 68            [24]11381 	sjmp	00126$
      003E87                      11382 00119$:
                                  11383 ;	.\ecen4350_lcd_v4.c:2692: } else if (blockSize == 0xFF) {
      003E87 78r16            [12]11384 	mov	r0,#_count_blockSize_65536_702
      003E89 B6 FF 63         [24]11385 	cjne	@r0,#0xff,00126$
                                  11386 ;	.\ecen4350_lcd_v4.c:2693: scan = 1;
      003E8C 78r18            [12]11387 	mov	r0,#_count_scan_65536_702
      003E8E 76 01            [12]11388 	mov	@r0,#0x01
                                  11389 ;	.\ecen4350_lcd_v4.c:2694: setColorGray();
      003E90 C0 05            [24]11390 	push	ar5
      003E92 12r15rC2         [24]11391 	lcall	_setColorGray
                                  11392 ;	.\ecen4350_lcd_v4.c:2695: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003E95 90r0Ar43         [24]11393 	mov	dptr,#___str_97
      003E98 75 F0 80         [24]11394 	mov	b,#0x80
      003E9B 12r0FrD0         [24]11395 	lcall	_LCD_string_write
                                  11396 ;	.\ecen4350_lcd_v4.c:2696: LCD_string_write("<04> DWORD\n  ");
      003E9E 90r0Ar7C         [24]11397 	mov	dptr,#___str_100
      003EA1 75 F0 80         [24]11398 	mov	b,#0x80
      003EA4 12r0FrD0         [24]11399 	lcall	_LCD_string_write
                                  11400 ;	.\ecen4350_lcd_v4.c:2697: setColorHighlight2();
      003EA7 12r15rB6         [24]11401 	lcall	_setColorHighlight2
                                  11402 ;	.\ecen4350_lcd_v4.c:2698: LCD_string_write("<FF> (SCAN)");
      003EAA 90r0Ar8A         [24]11403 	mov	dptr,#___str_101
      003EAD 75 F0 80         [24]11404 	mov	b,#0x80
      003EB0 12r0FrD0         [24]11405 	lcall	_LCD_string_write
                                  11406 ;	.\ecen4350_lcd_v4.c:2699: setColorDefault();
      003EB3 12r15r94         [24]11407 	lcall	_setColorDefault
                                  11408 ;	.\ecen4350_lcd_v4.c:2700: setCursor(0, 250);
      003EB6 75*00 FA         [24]11409 	mov	_setCursor_PARM_2,#0xfa
      003EB9 75*01 00         [24]11410 	mov	(_setCursor_PARM_2 + 1),#0x00
      003EBC 90 00 00         [24]11411 	mov	dptr,#0x0000
      003EBF 12r04rB6         [24]11412 	lcall	_setCursor
                                  11413 ;	.\ecen4350_lcd_v4.c:2701: LCD_string_write("   ");
      003EC2 90r09rAB         [24]11414 	mov	dptr,#___str_86
      003EC5 75 F0 80         [24]11415 	mov	b,#0x80
      003EC8 12r0FrD0         [24]11416 	lcall	_LCD_string_write
                                  11417 ;	.\ecen4350_lcd_v4.c:2702: setColorHighlight2();
      003ECB 12r15rB6         [24]11418 	lcall	_setColorHighlight2
                                  11419 ;	.\ecen4350_lcd_v4.c:2703: print8Hex(blockSize);
      003ECE 78r16            [12]11420 	mov	r0,#_count_blockSize_65536_702
      003ED0 86 82            [24]11421 	mov	dpl,@r0
      003ED2 12r14rA1         [24]11422 	lcall	_print8Hex
                                  11423 ;	.\ecen4350_lcd_v4.c:2704: setColorDefault();
      003ED5 12r15r94         [24]11424 	lcall	_setColorDefault
                                  11425 ;	.\ecen4350_lcd_v4.c:2705: LCD_string_write("\n Search Size Limit:");
      003ED8 90r09rF3         [24]11426 	mov	dptr,#___str_92
      003EDB 75 F0 80         [24]11427 	mov	b,#0x80
      003EDE 12r0FrD0         [24]11428 	lcall	_LCD_string_write
                                  11429 ;	.\ecen4350_lcd_v4.c:2706: setColorWhite();
      003EE1 12r15rE4         [24]11430 	lcall	_setColorWhite
                                  11431 ;	.\ecen4350_lcd_v4.c:2707: LCD_string_write("\n [256 Blocks]");
      003EE4 90r0Ar96         [24]11432 	mov	dptr,#___str_102
      003EE7 75 F0 80         [24]11433 	mov	b,#0x80
      003EEA 12r0FrD0         [24]11434 	lcall	_LCD_string_write
      003EED D0 05            [24]11435 	pop	ar5
      003EEF                      11436 00126$:
                                  11437 ;	.\ecen4350_lcd_v4.c:2711: delay(40);
      003EEF 90 00 28         [24]11438 	mov	dptr,#0x0028
      003EF2 C0 05            [24]11439 	push	ar5
      003EF4 12r00rE0         [24]11440 	lcall	_delay
                                  11441 ;	.\ecen4350_lcd_v4.c:2712: clearLCD();
      003EF7 12r0Dr53         [24]11442 	lcall	_clearLCD
                                  11443 ;	.\ecen4350_lcd_v4.c:2713: fillTop(GRAY);
      003EFA 90 D6 BA         [24]11444 	mov	dptr,#0xd6ba
      003EFD 12r0Br86         [24]11445 	lcall	_fillTop
                                  11446 ;	.\ecen4350_lcd_v4.c:2714: setTextSize(5);
      003F00 75 82 05         [24]11447 	mov	dpl,#0x05
      003F03 12r04rD0         [24]11448 	lcall	_setTextSize
                                  11449 ;	.\ecen4350_lcd_v4.c:2715: setColorMenu();
      003F06 12r15rCD         [24]11450 	lcall	_setColorMenu
                                  11451 ;	.\ecen4350_lcd_v4.c:2716: setCursor(15,0);
      003F09 E4               [12]11452 	clr	a
      003F0A F5*00            [12]11453 	mov	_setCursor_PARM_2,a
      003F0C F5*01            [12]11454 	mov	(_setCursor_PARM_2 + 1),a
      003F0E 90 00 0F         [24]11455 	mov	dptr,#0x000f
      003F11 12r04rB6         [24]11456 	lcall	_setCursor
                                  11457 ;	.\ecen4350_lcd_v4.c:2717: LCD_string_write("[COUNT]\n");
      003F14 90r0Cr02         [24]11458 	mov	dptr,#___str_122
      003F17 75 F0 80         [24]11459 	mov	b,#0x80
      003F1A 12r0FrD0         [24]11460 	lcall	_LCD_string_write
                                  11461 ;	.\ecen4350_lcd_v4.c:2718: setColorDefault();
      003F1D 12r15r94         [24]11462 	lcall	_setColorDefault
                                  11463 ;	.\ecen4350_lcd_v4.c:2719: setTextSize(2);
      003F20 75 82 02         [24]11464 	mov	dpl,#0x02
      003F23 12r04rD0         [24]11465 	lcall	_setTextSize
      003F26 D0 05            [24]11466 	pop	ar5
                                  11467 ;	.\ecen4350_lcd_v4.c:2725: while (exit) {
      003F28                      11468 00202$:
      003F28 78r1A            [12]11469 	mov	r0,#_count_exit_65536_702
      003F2A E6               [12]11470 	mov	a,@r0
      003F2B 70 03            [24]11471 	jnz	00547$
      003F2D 02r44rC7         [24]11472 	ljmp	00204$
      003F30                      11473 00547$:
                                  11474 ;	.\ecen4350_lcd_v4.c:2727: if (scan) {	
      003F30 78r18            [12]11475 	mov	r0,#_count_scan_65536_702
      003F32 E6               [12]11476 	mov	a,@r0
      003F33 70 03            [24]11477 	jnz	00548$
      003F35 02r3FrED         [24]11478 	ljmp	00193$
      003F38                      11479 00548$:
                                  11480 ;	.\ecen4350_lcd_v4.c:2728: setCursor(0, 60);
      003F38 75*00 3C         [24]11481 	mov	_setCursor_PARM_2,#0x3c
      003F3B 75*01 00         [24]11482 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F3E 90 00 00         [24]11483 	mov	dptr,#0x0000
      003F41 C0 05            [24]11484 	push	ar5
      003F43 12r04rB6         [24]11485 	lcall	_setCursor
                                  11486 ;	.\ecen4350_lcd_v4.c:2729: setColorYellow();
      003F46 12r15rFA         [24]11487 	lcall	_setColorYellow
                                  11488 ;	.\ecen4350_lcd_v4.c:2730: LCD_string_write(" [Non-Interactive]\n");
      003F49 90r0ArA5         [24]11489 	mov	dptr,#___str_103
      003F4C 75 F0 80         [24]11490 	mov	b,#0x80
      003F4F 12r0FrD0         [24]11491 	lcall	_LCD_string_write
                                  11492 ;	.\ecen4350_lcd_v4.c:2731: setColorWhite();
      003F52 12r15rE4         [24]11493 	lcall	_setColorWhite
                                  11494 ;	.\ecen4350_lcd_v4.c:2732: LCD_string_write(" Search Value:\n ");
      003F55 90r0ArB9         [24]11495 	mov	dptr,#___str_104
      003F58 75 F0 80         [24]11496 	mov	b,#0x80
      003F5B 12r0FrD0         [24]11497 	lcall	_LCD_string_write
                                  11498 ;	.\ecen4350_lcd_v4.c:2733: setColorDefault();
      003F5E 12r15r94         [24]11499 	lcall	_setColorDefault
                                  11500 ;	.\ecen4350_lcd_v4.c:2734: print8Hex(value);
      003F61 78r17            [12]11501 	mov	r0,#_count_value_65536_702
      003F63 86 82            [24]11502 	mov	dpl,@r0
      003F65 12r14rA1         [24]11503 	lcall	_print8Hex
      003F68 D0 05            [24]11504 	pop	ar5
                                  11505 ;	.\ecen4350_lcd_v4.c:2735: for(unsigned int i = 0; i < blockSize; i++) {
      003F6A 8D 03            [24]11506 	mov	ar3,r5
      003F6C E4               [12]11507 	clr	a
      003F6D F5*5E            [12]11508 	mov	_count_i_262144_715,a
      003F6F F5*5F            [12]11509 	mov	(_count_i_262144_715 + 1),a
      003F71                      11510 00208$:
      003F71 78r16            [12]11511 	mov	r0,#_count_blockSize_65536_702
      003F73 86 02            [24]11512 	mov	ar2,@r0
      003F75 7E 00            [12]11513 	mov	r6,#0x00
      003F77 C3               [12]11514 	clr	c
      003F78 E5*5E            [12]11515 	mov	a,_count_i_262144_715
      003F7A 9A               [12]11516 	subb	a,r2
      003F7B E5*5F            [12]11517 	mov	a,(_count_i_262144_715 + 1)
      003F7D 9E               [12]11518 	subb	a,r6
      003F7E 50 2A            [24]11519 	jnc	00267$
                                  11520 ;	.\ecen4350_lcd_v4.c:2736: d = (unsigned char __xdata*)(i+address);
      003F80 78r14            [12]11521 	mov	r0,#_count_address_65536_702
      003F82 E6               [12]11522 	mov	a,@r0
      003F83 25*5E            [12]11523 	add	a,_count_i_262144_715
      003F85 FC               [12]11524 	mov	r4,a
      003F86 08               [12]11525 	inc	r0
      003F87 E6               [12]11526 	mov	a,@r0
      003F88 35*5F            [12]11527 	addc	a,(_count_i_262144_715 + 1)
      003F8A FE               [12]11528 	mov	r6,a
                                  11529 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  11530 ;	assignBit
      003F8B C2 B5            [12]11531 	clr	_P3_5
                                  11532 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      003F8D 8C 82            [24]11533 	mov	dpl,r4
      003F8F 8E 83            [24]11534 	mov	dph,r6
      003F91 E0               [24]11535 	movx	a,@dptr
      003F92 FC               [12]11536 	mov	r4,a
                                  11537 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  11538 ;	assignBit
      003F93 D2 B5            [12]11539 	setb	_P3_5
                                  11540 ;	.\ecen4350_lcd_v4.c:2737: if(value == ramRead8(d)){
      003F95 78r17            [12]11541 	mov	r0,#_count_value_65536_702
      003F97 E6               [12]11542 	mov	a,@r0
      003F98 B5 04 05         [24]11543 	cjne	a,ar4,00209$
                                  11544 ;	.\ecen4350_lcd_v4.c:2738: noneFound = 0;
      003F9B 78r19            [12]11545 	mov	r0,#_count_noneFound_65536_702
      003F9D 76 00            [12]11546 	mov	@r0,#0x00
                                  11547 ;	.\ecen4350_lcd_v4.c:2739: page++;
      003F9F 0B               [12]11548 	inc	r3
      003FA0                      11549 00209$:
                                  11550 ;	.\ecen4350_lcd_v4.c:2735: for(unsigned int i = 0; i < blockSize; i++) {
      003FA0 05*5E            [12]11551 	inc	_count_i_262144_715
      003FA2 E4               [12]11552 	clr	a
      003FA3 B5*5E CB         [24]11553 	cjne	a,_count_i_262144_715,00208$
      003FA6 05*5F            [12]11554 	inc	(_count_i_262144_715 + 1)
      003FA8 80 C7            [24]11555 	sjmp	00208$
      003FAA                      11556 00267$:
      003FAA 8B 05            [24]11557 	mov	ar5,r3
                                  11558 ;	.\ecen4350_lcd_v4.c:2742: setCursor(0, 120);
      003FAC 75*00 78         [24]11559 	mov	_setCursor_PARM_2,#0x78
      003FAF 75*01 00         [24]11560 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FB2 90 00 00         [24]11561 	mov	dptr,#0x0000
      003FB5 C0 05            [24]11562 	push	ar5
      003FB7 C0 03            [24]11563 	push	ar3
      003FB9 12r04rB6         [24]11564 	lcall	_setCursor
                                  11565 ;	.\ecen4350_lcd_v4.c:2743: setColorWhite();
      003FBC 12r15rE4         [24]11566 	lcall	_setColorWhite
                                  11567 ;	.\ecen4350_lcd_v4.c:2744: LCD_string_write(" Found in\n ");
      003FBF 90r0Cr1A         [24]11568 	mov	dptr,#___str_124
      003FC2 75 F0 80         [24]11569 	mov	b,#0x80
      003FC5 12r0FrD0         [24]11570 	lcall	_LCD_string_write
                                  11571 ;	.\ecen4350_lcd_v4.c:2745: setColorDefault();
      003FC8 12r15r94         [24]11572 	lcall	_setColorDefault
                                  11573 ;	.\ecen4350_lcd_v4.c:2746: LCD_string_write("0x");
      003FCB 90r05r29         [24]11574 	mov	dptr,#___str_2
      003FCE 75 F0 80         [24]11575 	mov	b,#0x80
      003FD1 12r0FrD0         [24]11576 	lcall	_LCD_string_write
      003FD4 D0 03            [24]11577 	pop	ar3
                                  11578 ;	.\ecen4350_lcd_v4.c:2747: print8Hex(page);
      003FD6 8B 82            [24]11579 	mov	dpl,r3
      003FD8 12r14rA1         [24]11580 	lcall	_print8Hex
                                  11581 ;	.\ecen4350_lcd_v4.c:2748: LCD_string_write(" Bytes (Hex)\n ");
      003FDB 90r0Cr26         [24]11582 	mov	dptr,#___str_125
      003FDE 75 F0 80         [24]11583 	mov	b,#0x80
      003FE1 12r0FrD0         [24]11584 	lcall	_LCD_string_write
      003FE4 D0 05            [24]11585 	pop	ar5
                                  11586 ;	.\ecen4350_lcd_v4.c:2749: exit = 0;
      003FE6 78r1A            [12]11587 	mov	r0,#_count_exit_65536_702
      003FE8 76 00            [12]11588 	mov	@r0,#0x00
      003FEA 02r44r4E         [24]11589 	ljmp	00194$
      003FED                      11590 00193$:
                                  11591 ;	.\ecen4350_lcd_v4.c:2751: setCursor(0, 60);
      003FED 75*00 3C         [24]11592 	mov	_setCursor_PARM_2,#0x3c
      003FF0 75*01 00         [24]11593 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FF3 90 00 00         [24]11594 	mov	dptr,#0x0000
      003FF6 C0 05            [24]11595 	push	ar5
      003FF8 12r04rB6         [24]11596 	lcall	_setCursor
                                  11597 ;	.\ecen4350_lcd_v4.c:2752: setColorYellow();
      003FFB 12r15rFA         [24]11598 	lcall	_setColorYellow
                                  11599 ;	.\ecen4350_lcd_v4.c:2753: LCD_string_write(" [Interactive]\n");
      003FFE 90r0ArE4         [24]11600 	mov	dptr,#___str_107
      004001 75 F0 80         [24]11601 	mov	b,#0x80
      004004 12r0FrD0         [24]11602 	lcall	_LCD_string_write
                                  11603 ;	.\ecen4350_lcd_v4.c:2754: setColorWhite();
      004007 12r15rE4         [24]11604 	lcall	_setColorWhite
                                  11605 ;	.\ecen4350_lcd_v4.c:2755: LCD_string_write(" Search Value:\n ");
      00400A 90r0ArB9         [24]11606 	mov	dptr,#___str_104
      00400D 75 F0 80         [24]11607 	mov	b,#0x80
      004010 12r0FrD0         [24]11608 	lcall	_LCD_string_write
                                  11609 ;	.\ecen4350_lcd_v4.c:2756: setColorDefault();
      004013 12r15r94         [24]11610 	lcall	_setColorDefault
      004016 D0 05            [24]11611 	pop	ar5
                                  11612 ;	.\ecen4350_lcd_v4.c:2759: for (unsigned int i = 0; i < blockSize; i++) {
      004018 E4               [12]11613 	clr	a
      004019 F5*61            [12]11614 	mov	_count_sloc1_1_0,a
      00401B F5*62            [12]11615 	mov	(_count_sloc1_1_0 + 1),a
      00401D                      11616 00211$:
      00401D 78r16            [12]11617 	mov	r0,#_count_blockSize_65536_702
      00401F 86 02            [24]11618 	mov	ar2,@r0
      004021 7B 00            [12]11619 	mov	r3,#0x00
      004023 C3               [12]11620 	clr	c
      004024 E5*61            [12]11621 	mov	a,_count_sloc1_1_0
      004026 9A               [12]11622 	subb	a,r2
      004027 E5*62            [12]11623 	mov	a,(_count_sloc1_1_0 + 1)
      004029 9B               [12]11624 	subb	a,r3
      00402A 40 03            [24]11625 	jc	00553$
      00402C 02r44r4E         [24]11626 	ljmp	00194$
      00402F                      11627 00553$:
                                  11628 ;	.\ecen4350_lcd_v4.c:2760: d = (unsigned char __xdata*)(i+address);
      00402F 78r14            [12]11629 	mov	r0,#_count_address_65536_702
      004031 E6               [12]11630 	mov	a,@r0
      004032 25*61            [12]11631 	add	a,_count_sloc1_1_0
      004034 FA               [12]11632 	mov	r2,a
      004035 08               [12]11633 	inc	r0
      004036 E6               [12]11634 	mov	a,@r0
      004037 35*62            [12]11635 	addc	a,(_count_sloc1_1_0 + 1)
      004039 FB               [12]11636 	mov	r3,a
      00403A 8A 82            [24]11637 	mov	dpl,r2
      00403C 8B 83            [24]11638 	mov	dph,r3
                                  11639 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  11640 ;	assignBit
      00403E C2 B5            [12]11641 	clr	_P3_5
                                  11642 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      004040 E0               [24]11643 	movx	a,@dptr
      004041 FB               [12]11644 	mov	r3,a
                                  11645 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  11646 ;	assignBit
      004042 D2 B5            [12]11647 	setb	_P3_5
                                  11648 ;	.\ecen4350_lcd_v4.c:2761: if(value == ramRead8(d)){
      004044 78r17            [12]11649 	mov	r0,#_count_value_65536_702
      004046 E6               [12]11650 	mov	a,@r0
      004047 B5 03 02         [24]11651 	cjne	a,ar3,00554$
      00404A 80 03            [24]11652 	sjmp	00555$
      00404C                      11653 00554$:
      00404C 02r44r43         [24]11654 	ljmp	00212$
      00404F                      11655 00555$:
                                  11656 ;	.\ecen4350_lcd_v4.c:2762: noneFound = 0;		// toggle flag
      00404F 78r19            [12]11657 	mov	r0,#_count_noneFound_65536_702
      004051 76 00            [12]11658 	mov	@r0,#0x00
                                  11659 ;	.\ecen4350_lcd_v4.c:2763: setCursor(0, 120);
      004053 75*00 78         [24]11660 	mov	_setCursor_PARM_2,#0x78
      004056 75*01 00         [24]11661 	mov	(_setCursor_PARM_2 + 1),#0x00
      004059 90 00 00         [24]11662 	mov	dptr,#0x0000
      00405C C0 05            [24]11663 	push	ar5
      00405E 12r04rB6         [24]11664 	lcall	_setCursor
                                  11665 ;	.\ecen4350_lcd_v4.c:2764: setColorWhite();
      004061 12r15rE4         [24]11666 	lcall	_setColorWhite
                                  11667 ;	.\ecen4350_lcd_v4.c:2765: LCD_string_write(" Found at Location \n");
      004064 90r0ArF4         [24]11668 	mov	dptr,#___str_108
      004067 75 F0 80         [24]11669 	mov	b,#0x80
      00406A 12r0FrD0         [24]11670 	lcall	_LCD_string_write
                                  11671 ;	.\ecen4350_lcd_v4.c:2766: setColorDefault();
      00406D 12r15r94         [24]11672 	lcall	_setColorDefault
                                  11673 ;	.\ecen4350_lcd_v4.c:2767: LCD_string_write(" 0x");
      004070 90r07r50         [24]11674 	mov	dptr,#___str_45
      004073 75 F0 80         [24]11675 	mov	b,#0x80
      004076 12r0FrD0         [24]11676 	lcall	_LCD_string_write
      004079 D0 05            [24]11677 	pop	ar5
                                  11678 ;	.\ecen4350_lcd_v4.c:2768: print16Hex(page+address);
      00407B 8D 02            [24]11679 	mov	ar2,r5
      00407D 7B 00            [12]11680 	mov	r3,#0x00
      00407F 78r14            [12]11681 	mov	r0,#_count_address_65536_702
      004081 E6               [12]11682 	mov	a,@r0
      004082 2A               [12]11683 	add	a,r2
      004083 F5 82            [12]11684 	mov	dpl,a
      004085 08               [12]11685 	inc	r0
      004086 E6               [12]11686 	mov	a,@r0
      004087 3B               [12]11687 	addc	a,r3
      004088 F5 83            [12]11688 	mov	dph,a
      00408A C0 05            [24]11689 	push	ar5
      00408C 12r14rB8         [24]11690 	lcall	_print16Hex
                                  11691 ;	.\ecen4350_lcd_v4.c:2769: setCursor(50, 300);
      00408F 75*00 2C         [24]11692 	mov	_setCursor_PARM_2,#0x2c
      004092 75*01 01         [24]11693 	mov	(_setCursor_PARM_2 + 1),#0x01
      004095 90 00 32         [24]11694 	mov	dptr,#0x0032
      004098 12r04rB6         [24]11695 	lcall	_setCursor
                                  11696 ;	.\ecen4350_lcd_v4.c:2770: setColorGray();
      00409B 12r15rC2         [24]11697 	lcall	_setColorGray
                                  11698 ;	.\ecen4350_lcd_v4.c:2771: LCD_string_write("Count: ");
      00409E 90r0Cr35         [24]11699 	mov	dptr,#___str_126
      0040A1 75 F0 80         [24]11700 	mov	b,#0x80
      0040A4 12r0FrD0         [24]11701 	lcall	_LCD_string_write
                                  11702 ;	.\ecen4350_lcd_v4.c:2772: setColorHighlight2();
      0040A7 12r15rB6         [24]11703 	lcall	_setColorHighlight2
      0040AA D0 05            [24]11704 	pop	ar5
                                  11705 ;	.\ecen4350_lcd_v4.c:2773: print8Hex(page+1);
      0040AC 8D 03            [24]11706 	mov	ar3,r5
      0040AE EB               [12]11707 	mov	a,r3
      0040AF 04               [12]11708 	inc	a
      0040B0 F5 82            [12]11709 	mov	dpl,a
      0040B2 C0 05            [24]11710 	push	ar5
      0040B4 12r14rA1         [24]11711 	lcall	_print8Hex
      0040B7 D0 05            [24]11712 	pop	ar5
                                  11713 ;	.\ecen4350_lcd_v4.c:2777: if (i == 0) {					// At beginning, page <0>
      0040B9 E5*61            [12]11714 	mov	a,_count_sloc1_1_0
      0040BB 45*62            [12]11715 	orl	a,(_count_sloc1_1_0 + 1)
      0040BD 60 03            [24]11716 	jz	00556$
      0040BF 02r41rEE         [24]11717 	ljmp	00187$
      0040C2                      11718 00556$:
                                  11719 ;	.\ecen4350_lcd_v4.c:2778: if (i != blockSize - 1) {	// not at the end yet, no previous page
      0040C2 C0 05            [24]11720 	push	ar5
      0040C4 78r16            [12]11721 	mov	r0,#_count_blockSize_65536_702
      0040C6 86 02            [24]11722 	mov	ar2,@r0
      0040C8 7B 00            [12]11723 	mov	r3,#0x00
      0040CA EA               [12]11724 	mov	a,r2
      0040CB 24 FF            [12]11725 	add	a,#0xff
      0040CD FD               [12]11726 	mov	r5,a
      0040CE EB               [12]11727 	mov	a,r3
      0040CF 34 FF            [12]11728 	addc	a,#0xff
      0040D1 FF               [12]11729 	mov	r7,a
      0040D2 ED               [12]11730 	mov	a,r5
      0040D3 B5*61 09         [24]11731 	cjne	a,_count_sloc1_1_0,00557$
      0040D6 EF               [12]11732 	mov	a,r7
      0040D7 B5*62 05         [24]11733 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      0040DA D0 05            [24]11734 	pop	ar5
      0040DC 02r41r6F         [24]11735 	ljmp	00145$
      0040DF                      11736 00557$:
                                  11737 ;	.\ecen4350_lcd_v4.c:2779: setCursor(0, 180);
      0040DF 75*00 B4         [24]11738 	mov	_setCursor_PARM_2,#0xb4
      0040E2 75*01 00         [24]11739 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040E5 90 00 00         [24]11740 	mov	dptr,#0x0000
      0040E8 12r04rB6         [24]11741 	lcall	_setCursor
                                  11742 ;	.\ecen4350_lcd_v4.c:2780: setColorWhite();
      0040EB 12r15rE4         [24]11743 	lcall	_setColorWhite
                                  11744 ;	.\ecen4350_lcd_v4.c:2781: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      0040EE 90r0Br10         [24]11745 	mov	dptr,#___str_110
      0040F1 75 F0 80         [24]11746 	mov	b,#0x80
      0040F4 12r0FrD0         [24]11747 	lcall	_LCD_string_write
      0040F7 D0 05            [24]11748 	pop	ar5
                                  11749 ;	.\ecen4350_lcd_v4.c:2782: invalidInput = 1;
      0040F9 7F 01            [12]11750 	mov	r7,#0x01
                                  11751 ;	.\ecen4350_lcd_v4.c:2783: while (invalidInput) {
      0040FB 8D*60            [24]11752 	mov	_count_sloc0_1_0,r5
      0040FD                      11753 00134$:
      0040FD EF               [12]11754 	mov	a,r7
      0040FE 70 03            [24]11755 	jnz	00558$
      004100 02r41rE1         [24]11756 	ljmp	00268$
      004103                      11757 00558$:
                                  11758 ;	.\ecen4350_lcd_v4.c:2784: selection = keyDetect();
      004103 C0 07            [24]11759 	push	ar7
      004105 12r10rEE         [24]11760 	lcall	_keyDetect
      004108 AF 82            [24]11761 	mov	r7,dpl
      00410A 78r00            [12]11762 	mov	r0,#_selection
      00410C A6 07            [24]11763 	mov	@r0,ar7
                                  11764 ;	.\ecen4350_lcd_v4.c:2785: if(selection == '1'){
      00410E BF 31 02         [24]11765 	cjne	r7,#0x31,00559$
      004111 80 04            [24]11766 	sjmp	00560$
      004113                      11767 00559$:
      004113 D0 07            [24]11768 	pop	ar7
      004115 80 27            [24]11769 	sjmp	00131$
      004117                      11770 00560$:
      004117 D0 07            [24]11771 	pop	ar7
                                  11772 ;	.\ecen4350_lcd_v4.c:2786: setCursor(0, 180);
      004119 75*00 B4         [24]11773 	mov	_setCursor_PARM_2,#0xb4
      00411C 75*01 00         [24]11774 	mov	(_setCursor_PARM_2 + 1),#0x00
      00411F 90 00 00         [24]11775 	mov	dptr,#0x0000
      004122 12r04rB6         [24]11776 	lcall	_setCursor
                                  11777 ;	.\ecen4350_lcd_v4.c:2787: LCD_string_write(" ");
      004125 90r06r56         [24]11778 	mov	dptr,#___str_29
      004128 75 F0 80         [24]11779 	mov	b,#0x80
      00412B 12r0FrD0         [24]11780 	lcall	_LCD_string_write
                                  11781 ;	.\ecen4350_lcd_v4.c:2788: setColorHighlight2();
      00412E 12r15rB6         [24]11782 	lcall	_setColorHighlight2
                                  11783 ;	.\ecen4350_lcd_v4.c:2789: LCD_string_write("<1> Next");
      004131 90r0Br33         [24]11784 	mov	dptr,#___str_111
      004134 75 F0 80         [24]11785 	mov	b,#0x80
      004137 12r0FrD0         [24]11786 	lcall	_LCD_string_write
                                  11787 ;	.\ecen4350_lcd_v4.c:2790: invalidInput = 0;
      00413A 7F 00            [12]11788 	mov	r7,#0x00
                                  11789 ;	.\ecen4350_lcd_v4.c:2791: page++;
      00413C 05*60            [12]11790 	inc	_count_sloc0_1_0
      00413E                      11791 00131$:
                                  11792 ;	.\ecen4350_lcd_v4.c:2792: } if(selection == '0') {
      00413E 78r00            [12]11793 	mov	r0,#_selection
      004140 B6 30 BA         [24]11794 	cjne	@r0,#0x30,00134$
                                  11795 ;	.\ecen4350_lcd_v4.c:2793: setColorDefault();
      004143 12r15r94         [24]11796 	lcall	_setColorDefault
                                  11797 ;	.\ecen4350_lcd_v4.c:2794: setCursor(0, 180);
      004146 75*00 B4         [24]11798 	mov	_setCursor_PARM_2,#0xb4
      004149 75*01 00         [24]11799 	mov	(_setCursor_PARM_2 + 1),#0x00
      00414C 90 00 00         [24]11800 	mov	dptr,#0x0000
      00414F 12r04rB6         [24]11801 	lcall	_setCursor
                                  11802 ;	.\ecen4350_lcd_v4.c:2795: LCD_string_write("\n ");
      004152 90r08r61         [24]11803 	mov	dptr,#___str_66
      004155 75 F0 80         [24]11804 	mov	b,#0x80
      004158 12r0FrD0         [24]11805 	lcall	_LCD_string_write
                                  11806 ;	.\ecen4350_lcd_v4.c:2796: setColorHighlight2();
      00415B 12r15rB6         [24]11807 	lcall	_setColorHighlight2
                                  11808 ;	.\ecen4350_lcd_v4.c:2797: LCD_string_write("<0> Exit");
      00415E 90r09r1C         [24]11809 	mov	dptr,#___str_77
      004161 75 F0 80         [24]11810 	mov	b,#0x80
      004164 12r0FrD0         [24]11811 	lcall	_LCD_string_write
                                  11812 ;	.\ecen4350_lcd_v4.c:2798: exit = 0;		// set exit flag
      004167 78r1A            [12]11813 	mov	r0,#_count_exit_65536_702
      004169 76 00            [12]11814 	mov	@r0,#0x00
                                  11815 ;	.\ecen4350_lcd_v4.c:2799: invalidInput = 0;
      00416B 7F 00            [12]11816 	mov	r7,#0x00
      00416D 80 8E            [24]11817 	sjmp	00134$
      00416F                      11818 00145$:
                                  11819 ;	.\ecen4350_lcd_v4.c:2802: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      00416F 1A               [12]11820 	dec	r2
      004170 BA FF 01         [24]11821 	cjne	r2,#0xff,00563$
      004173 1B               [12]11822 	dec	r3
      004174                      11823 00563$:
      004174 EA               [12]11824 	mov	a,r2
      004175 B5*61 6B         [24]11825 	cjne	a,_count_sloc1_1_0,00146$
      004178 EB               [12]11826 	mov	a,r3
      004179 B5*62 67         [24]11827 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11828 ;	.\ecen4350_lcd_v4.c:2803: setCursor(0, 180);
      00417C 75*00 B4         [24]11829 	mov	_setCursor_PARM_2,#0xb4
      00417F 75*01 00         [24]11830 	mov	(_setCursor_PARM_2 + 1),#0x00
      004182 90 00 00         [24]11831 	mov	dptr,#0x0000
      004185 C0 05            [24]11832 	push	ar5
      004187 12r04rB6         [24]11833 	lcall	_setCursor
                                  11834 ;	.\ecen4350_lcd_v4.c:2804: setColorWhite();
      00418A 12r15rE4         [24]11835 	lcall	_setColorWhite
                                  11836 ;	.\ecen4350_lcd_v4.c:2805: LCD_string_write("          \n <0> Exit\n              ");
      00418D 90r0Br3C         [24]11837 	mov	dptr,#___str_112
      004190 75 F0 80         [24]11838 	mov	b,#0x80
      004193 12r0FrD0         [24]11839 	lcall	_LCD_string_write
      004196 D0 05            [24]11840 	pop	ar5
                                  11841 ;	.\ecen4350_lcd_v4.c:2806: invalidInput = 1;
      004198 7F 01            [12]11842 	mov	r7,#0x01
                                  11843 ;	.\ecen4350_lcd_v4.c:2807: while (invalidInput) {
      00419A                      11844 00139$:
      00419A EF               [12]11845 	mov	a,r7
      00419B 60 46            [24]11846 	jz	00146$
                                  11847 ;	.\ecen4350_lcd_v4.c:2808: selection = keyDetect();
      00419D C0 07            [24]11848 	push	ar7
      00419F C0 05            [24]11849 	push	ar5
      0041A1 12r10rEE         [24]11850 	lcall	_keyDetect
      0041A4 AB 82            [24]11851 	mov	r3,dpl
      0041A6 D0 05            [24]11852 	pop	ar5
      0041A8 D0 07            [24]11853 	pop	ar7
      0041AA 78r00            [12]11854 	mov	r0,#_selection
      0041AC A6 03            [24]11855 	mov	@r0,ar3
                                  11856 ;	.\ecen4350_lcd_v4.c:2809: if(selection == '0') {
      0041AE BB 30 E9         [24]11857 	cjne	r3,#0x30,00139$
                                  11858 ;	.\ecen4350_lcd_v4.c:2810: setColorDefault();
      0041B1 C0 05            [24]11859 	push	ar5
      0041B3 12r15r94         [24]11860 	lcall	_setColorDefault
                                  11861 ;	.\ecen4350_lcd_v4.c:2811: setCursor(0, 180);
      0041B6 75*00 B4         [24]11862 	mov	_setCursor_PARM_2,#0xb4
      0041B9 75*01 00         [24]11863 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041BC 90 00 00         [24]11864 	mov	dptr,#0x0000
      0041BF 12r04rB6         [24]11865 	lcall	_setCursor
                                  11866 ;	.\ecen4350_lcd_v4.c:2812: LCD_string_write("\n ");
      0041C2 90r08r61         [24]11867 	mov	dptr,#___str_66
      0041C5 75 F0 80         [24]11868 	mov	b,#0x80
      0041C8 12r0FrD0         [24]11869 	lcall	_LCD_string_write
                                  11870 ;	.\ecen4350_lcd_v4.c:2813: setColorHighlight2();
      0041CB 12r15rB6         [24]11871 	lcall	_setColorHighlight2
                                  11872 ;	.\ecen4350_lcd_v4.c:2814: LCD_string_write("<0> Exit");
      0041CE 90r09r1C         [24]11873 	mov	dptr,#___str_77
      0041D1 75 F0 80         [24]11874 	mov	b,#0x80
      0041D4 12r0FrD0         [24]11875 	lcall	_LCD_string_write
      0041D7 D0 05            [24]11876 	pop	ar5
                                  11877 ;	.\ecen4350_lcd_v4.c:2815: exit = 0;		// set exit flag
      0041D9 78r1A            [12]11878 	mov	r0,#_count_exit_65536_702
      0041DB 76 00            [12]11879 	mov	@r0,#0x00
                                  11880 ;	.\ecen4350_lcd_v4.c:2816: invalidInput = 0;
      0041DD 7F 00            [12]11881 	mov	r7,#0x00
      0041DF 80 B9            [24]11882 	sjmp	00139$
      0041E1                      11883 00268$:
      0041E1 AD*60            [24]11884 	mov	r5,_count_sloc0_1_0
      0041E3                      11885 00146$:
                                  11886 ;	.\ecen4350_lcd_v4.c:2820: if (exit == 0) {	// check exit flag
      0041E3 78r1A            [12]11887 	mov	r0,#_count_exit_65536_702
      0041E5 E6               [12]11888 	mov	a,@r0
      0041E6 60 03            [24]11889 	jz	00569$
      0041E8 02r44r43         [24]11890 	ljmp	00212$
      0041EB                      11891 00569$:
                                  11892 ;	.\ecen4350_lcd_v4.c:2821: break;			// break out of for loop iteration
      0041EB 02r44r4E         [24]11893 	ljmp	00194$
      0041EE                      11894 00187$:
                                  11895 ;	.\ecen4350_lcd_v4.c:2826: else if (i == blockSize - 1) {		// At Page End 
      0041EE C0 05            [24]11896 	push	ar5
      0041F0 78r16            [12]11897 	mov	r0,#_count_blockSize_65536_702
      0041F2 86 03            [24]11898 	mov	ar3,@r0
      0041F4 7F 00            [12]11899 	mov	r7,#0x00
      0041F6 EB               [12]11900 	mov	a,r3
      0041F7 24 FF            [12]11901 	add	a,#0xff
      0041F9 FA               [12]11902 	mov	r2,a
      0041FA EF               [12]11903 	mov	a,r7
      0041FB 34 FF            [12]11904 	addc	a,#0xff
      0041FD FD               [12]11905 	mov	r5,a
      0041FE EA               [12]11906 	mov	a,r2
      0041FF B5*61 06         [24]11907 	cjne	a,_count_sloc1_1_0,00570$
      004202 ED               [12]11908 	mov	a,r5
      004203 B5*62 02         [24]11909 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      004206 80 05            [24]11910 	sjmp	00571$
      004208                      11911 00570$:
      004208 D0 05            [24]11912 	pop	ar5
      00420A 02r43r3A         [24]11913 	ljmp	00184$
      00420D                      11914 00571$:
      00420D D0 05            [24]11915 	pop	ar5
                                  11916 ;	.\ecen4350_lcd_v4.c:2827: if (i != 0) {				// not at beginning, no next page
      00420F E5*61            [12]11917 	mov	a,_count_sloc1_1_0
      004211 45*62            [12]11918 	orl	a,(_count_sloc1_1_0 + 1)
      004213 70 03            [24]11919 	jnz	00572$
      004215 02r42rC3         [24]11920 	ljmp	00164$
      004218                      11921 00572$:
                                  11922 ;	.\ecen4350_lcd_v4.c:2828: setCursor(0, 180);
      004218 75*00 B4         [24]11923 	mov	_setCursor_PARM_2,#0xb4
      00421B 75*01 00         [24]11924 	mov	(_setCursor_PARM_2 + 1),#0x00
      00421E 90 00 00         [24]11925 	mov	dptr,#0x0000
      004221 C0 05            [24]11926 	push	ar5
      004223 12r04rB6         [24]11927 	lcall	_setCursor
                                  11928 ;	.\ecen4350_lcd_v4.c:2829: setColorWhite();
      004226 12r15rE4         [24]11929 	lcall	_setColorWhite
                                  11930 ;	.\ecen4350_lcd_v4.c:2830: LCD_string_write("          \n <0> Exit\n <2> Previous");
      004229 90r0Br60         [24]11931 	mov	dptr,#___str_113
      00422C 75 F0 80         [24]11932 	mov	b,#0x80
      00422F 12r0FrD0         [24]11933 	lcall	_LCD_string_write
      004232 D0 05            [24]11934 	pop	ar5
                                  11935 ;	.\ecen4350_lcd_v4.c:2831: invalidInput = 1;
      004234 7F 01            [12]11936 	mov	r7,#0x01
                                  11937 ;	.\ecen4350_lcd_v4.c:2832: while (invalidInput) {
      004236 8D*60            [24]11938 	mov	_count_sloc0_1_0,r5
      004238                      11939 00153$:
      004238 EF               [12]11940 	mov	a,r7
      004239 70 03            [24]11941 	jnz	00573$
      00423B 02r43r2D         [24]11942 	ljmp	00269$
      00423E                      11943 00573$:
                                  11944 ;	.\ecen4350_lcd_v4.c:2833: selection = keyDetect();
      00423E C0 07            [24]11945 	push	ar7
      004240 C0 07            [24]11946 	push	ar7
      004242 12r10rEE         [24]11947 	lcall	_keyDetect
      004245 AA 82            [24]11948 	mov	r2,dpl
      004247 D0 07            [24]11949 	pop	ar7
      004249 78r00            [12]11950 	mov	r0,#_selection
      00424B A6 02            [24]11951 	mov	@r0,ar2
                                  11952 ;	.\ecen4350_lcd_v4.c:2834: if(selection == '0'){
      00424D BA 30 02         [24]11953 	cjne	r2,#0x30,00574$
      004250 80 04            [24]11954 	sjmp	00575$
      004252                      11955 00574$:
      004252 D0 07            [24]11956 	pop	ar7
      004254 80 29            [24]11957 	sjmp	00150$
      004256                      11958 00575$:
      004256 D0 07            [24]11959 	pop	ar7
                                  11960 ;	.\ecen4350_lcd_v4.c:2835: setCursor(0, 180);
      004258 75*00 B4         [24]11961 	mov	_setCursor_PARM_2,#0xb4
      00425B 75*01 00         [24]11962 	mov	(_setCursor_PARM_2 + 1),#0x00
      00425E 90 00 00         [24]11963 	mov	dptr,#0x0000
      004261 12r04rB6         [24]11964 	lcall	_setCursor
                                  11965 ;	.\ecen4350_lcd_v4.c:2836: LCD_string_write("\n ");
      004264 90r08r61         [24]11966 	mov	dptr,#___str_66
      004267 75 F0 80         [24]11967 	mov	b,#0x80
      00426A 12r0FrD0         [24]11968 	lcall	_LCD_string_write
                                  11969 ;	.\ecen4350_lcd_v4.c:2837: setColorHighlight2();
      00426D 12r15rB6         [24]11970 	lcall	_setColorHighlight2
                                  11971 ;	.\ecen4350_lcd_v4.c:2838: LCD_string_write("<0> Exit\n");
      004270 90r07r96         [24]11972 	mov	dptr,#___str_53
      004273 75 F0 80         [24]11973 	mov	b,#0x80
      004276 12r0FrD0         [24]11974 	lcall	_LCD_string_write
                                  11975 ;	.\ecen4350_lcd_v4.c:2839: invalidInput = 0;
      004279 7F 00            [12]11976 	mov	r7,#0x00
                                  11977 ;	.\ecen4350_lcd_v4.c:2840: exit = 0;
      00427B 78r1A            [12]11978 	mov	r0,#_count_exit_65536_702
      00427D 76 00            [12]11979 	mov	@r0,#0x00
      00427F                      11980 00150$:
                                  11981 ;	.\ecen4350_lcd_v4.c:2841: } if (selection == '2') {
      00427F 78r00            [12]11982 	mov	r0,#_selection
      004281 B6 32 B4         [24]11983 	cjne	@r0,#0x32,00153$
                                  11984 ;	.\ecen4350_lcd_v4.c:2842: setCursor(0, 180);
      004284 75*00 B4         [24]11985 	mov	_setCursor_PARM_2,#0xb4
      004287 75*01 00         [24]11986 	mov	(_setCursor_PARM_2 + 1),#0x00
      00428A 90 00 00         [24]11987 	mov	dptr,#0x0000
      00428D 12r04rB6         [24]11988 	lcall	_setCursor
                                  11989 ;	.\ecen4350_lcd_v4.c:2843: setColorWhite();
      004290 12r15rE4         [24]11990 	lcall	_setColorWhite
                                  11991 ;	.\ecen4350_lcd_v4.c:2844: LCD_string_write("\n\n ");
      004293 90r0Br83         [24]11992 	mov	dptr,#___str_114
      004296 75 F0 80         [24]11993 	mov	b,#0x80
      004299 12r0FrD0         [24]11994 	lcall	_LCD_string_write
                                  11995 ;	.\ecen4350_lcd_v4.c:2845: setColorHighlight2();
      00429C 12r15rB6         [24]11996 	lcall	_setColorHighlight2
                                  11997 ;	.\ecen4350_lcd_v4.c:2846: LCD_string_write("<2> Previous");
      00429F 90r0Br87         [24]11998 	mov	dptr,#___str_115
      0042A2 75 F0 80         [24]11999 	mov	b,#0x80
      0042A5 12r0FrD0         [24]12000 	lcall	_LCD_string_write
                                  12001 ;	.\ecen4350_lcd_v4.c:2847: invalidInput = 0;
      0042A8 7F 00            [12]12002 	mov	r7,#0x00
                                  12003 ;	.\ecen4350_lcd_v4.c:2848: i--;			// two decrements plus next loop increment is equal to one decrement
      0042AA E5*61            [12]12004 	mov	a,_count_sloc1_1_0
      0042AC 24 FF            [12]12005 	add	a,#0xff
      0042AE FA               [12]12006 	mov	r2,a
      0042AF E5*62            [12]12007 	mov	a,(_count_sloc1_1_0 + 1)
      0042B1 34 FF            [12]12008 	addc	a,#0xff
      0042B3 FE               [12]12009 	mov	r6,a
                                  12010 ;	.\ecen4350_lcd_v4.c:2849: i--;
      0042B4 EA               [12]12011 	mov	a,r2
      0042B5 24 FF            [12]12012 	add	a,#0xff
      0042B7 F5*61            [12]12013 	mov	_count_sloc1_1_0,a
      0042B9 EE               [12]12014 	mov	a,r6
      0042BA 34 FF            [12]12015 	addc	a,#0xff
      0042BC F5*62            [12]12016 	mov	(_count_sloc1_1_0 + 1),a
                                  12017 ;	.\ecen4350_lcd_v4.c:2850: page--;			// decrement to previous page
      0042BE 15*60            [12]12018 	dec	_count_sloc0_1_0
      0042C0 02r42r38         [24]12019 	ljmp	00153$
      0042C3                      12020 00164$:
                                  12021 ;	.\ecen4350_lcd_v4.c:2854: else if (i == 0){				// end at beginning, no next or previous
      0042C3 E5*61            [12]12022 	mov	a,_count_sloc1_1_0
      0042C5 45*62            [12]12023 	orl	a,(_count_sloc1_1_0 + 1)
                                  12024 ;	.\ecen4350_lcd_v4.c:2855: setCursor(0, 180);
      0042C7 70 66            [24]12025 	jnz	00165$
      0042C9 75*00 B4         [24]12026 	mov	_setCursor_PARM_2,#0xb4
      0042CC F5*01            [12]12027 	mov	(_setCursor_PARM_2 + 1),a
      0042CE 90 00 00         [24]12028 	mov	dptr,#0x0000
      0042D1 C0 05            [24]12029 	push	ar5
      0042D3 12r04rB6         [24]12030 	lcall	_setCursor
                                  12031 ;	.\ecen4350_lcd_v4.c:2856: setColorWhite();
      0042D6 12r15rE4         [24]12032 	lcall	_setColorWhite
                                  12033 ;	.\ecen4350_lcd_v4.c:2857: LCD_string_write("          \n <0> Exit\n              ");
      0042D9 90r0Br3C         [24]12034 	mov	dptr,#___str_112
      0042DC 75 F0 80         [24]12035 	mov	b,#0x80
      0042DF 12r0FrD0         [24]12036 	lcall	_LCD_string_write
      0042E2 D0 05            [24]12037 	pop	ar5
                                  12038 ;	.\ecen4350_lcd_v4.c:2858: invalidInput = 1;
      0042E4 7E 01            [12]12039 	mov	r6,#0x01
                                  12040 ;	.\ecen4350_lcd_v4.c:2859: while (invalidInput) {
      0042E6                      12041 00158$:
      0042E6 EE               [12]12042 	mov	a,r6
      0042E7 60 46            [24]12043 	jz	00165$
                                  12044 ;	.\ecen4350_lcd_v4.c:2860: selection = keyDetect();
      0042E9 C0 06            [24]12045 	push	ar6
      0042EB C0 05            [24]12046 	push	ar5
      0042ED 12r10rEE         [24]12047 	lcall	_keyDetect
      0042F0 AC 82            [24]12048 	mov	r4,dpl
      0042F2 D0 05            [24]12049 	pop	ar5
      0042F4 D0 06            [24]12050 	pop	ar6
      0042F6 78r00            [12]12051 	mov	r0,#_selection
      0042F8 A6 04            [24]12052 	mov	@r0,ar4
                                  12053 ;	.\ecen4350_lcd_v4.c:2861: if(selection == '0') {
      0042FA BC 30 E9         [24]12054 	cjne	r4,#0x30,00158$
                                  12055 ;	.\ecen4350_lcd_v4.c:2862: setColorDefault();
      0042FD C0 05            [24]12056 	push	ar5
      0042FF 12r15r94         [24]12057 	lcall	_setColorDefault
                                  12058 ;	.\ecen4350_lcd_v4.c:2863: setCursor(0, 180);
      004302 75*00 B4         [24]12059 	mov	_setCursor_PARM_2,#0xb4
      004305 75*01 00         [24]12060 	mov	(_setCursor_PARM_2 + 1),#0x00
      004308 90 00 00         [24]12061 	mov	dptr,#0x0000
      00430B 12r04rB6         [24]12062 	lcall	_setCursor
                                  12063 ;	.\ecen4350_lcd_v4.c:2864: LCD_string_write("\n ");
      00430E 90r08r61         [24]12064 	mov	dptr,#___str_66
      004311 75 F0 80         [24]12065 	mov	b,#0x80
      004314 12r0FrD0         [24]12066 	lcall	_LCD_string_write
                                  12067 ;	.\ecen4350_lcd_v4.c:2865: setColorHighlight2();
      004317 12r15rB6         [24]12068 	lcall	_setColorHighlight2
                                  12069 ;	.\ecen4350_lcd_v4.c:2866: LCD_string_write("<0> Exit");
      00431A 90r09r1C         [24]12070 	mov	dptr,#___str_77
      00431D 75 F0 80         [24]12071 	mov	b,#0x80
      004320 12r0FrD0         [24]12072 	lcall	_LCD_string_write
      004323 D0 05            [24]12073 	pop	ar5
                                  12074 ;	.\ecen4350_lcd_v4.c:2867: exit = 0;		// set exit flag
      004325 78r1A            [12]12075 	mov	r0,#_count_exit_65536_702
      004327 76 00            [12]12076 	mov	@r0,#0x00
                                  12077 ;	.\ecen4350_lcd_v4.c:2868: invalidInput = 0;
      004329 7E 00            [12]12078 	mov	r6,#0x00
      00432B 80 B9            [24]12079 	sjmp	00158$
      00432D                      12080 00269$:
      00432D AD*60            [24]12081 	mov	r5,_count_sloc0_1_0
      00432F                      12082 00165$:
                                  12083 ;	.\ecen4350_lcd_v4.c:2872: if (exit == 0) {	// check exit flag
      00432F 78r1A            [12]12084 	mov	r0,#_count_exit_65536_702
      004331 E6               [12]12085 	mov	a,@r0
      004332 60 03            [24]12086 	jz	00582$
      004334 02r44r43         [24]12087 	ljmp	00212$
      004337                      12088 00582$:
                                  12089 ;	.\ecen4350_lcd_v4.c:2873: break;			// break out of for loop iteration
      004337 02r44r4E         [24]12090 	ljmp	00194$
      00433A                      12091 00184$:
                                  12092 ;	.\ecen4350_lcd_v4.c:2878: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00433A 1B               [12]12093 	dec	r3
      00433B BB FF 01         [24]12094 	cjne	r3,#0xff,00583$
      00433E 1F               [12]12095 	dec	r7
      00433F                      12096 00583$:
      00433F EB               [12]12097 	mov	a,r3
      004340 B5*61 07         [24]12098 	cjne	a,_count_sloc1_1_0,00584$
      004343 EF               [12]12099 	mov	a,r7
      004344 B5*62 03         [24]12100 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      004347 02r44r43         [24]12101 	ljmp	00212$
      00434A                      12102 00584$:
                                  12103 ;	.\ecen4350_lcd_v4.c:2879: if (i != 0) {
      00434A E5*61            [12]12104 	mov	a,_count_sloc1_1_0
      00434C 45*62            [12]12105 	orl	a,(_count_sloc1_1_0 + 1)
      00434E 70 03            [24]12106 	jnz	00585$
      004350 02r44r3E         [24]12107 	ljmp	00178$
      004353                      12108 00585$:
                                  12109 ;	.\ecen4350_lcd_v4.c:2880: setCursor(0, 180);
      004353 75*00 B4         [24]12110 	mov	_setCursor_PARM_2,#0xb4
      004356 75*01 00         [24]12111 	mov	(_setCursor_PARM_2 + 1),#0x00
      004359 90 00 00         [24]12112 	mov	dptr,#0x0000
      00435C C0 05            [24]12113 	push	ar5
      00435E 12r04rB6         [24]12114 	lcall	_setCursor
                                  12115 ;	.\ecen4350_lcd_v4.c:2881: setColorWhite();
      004361 12r15rE4         [24]12116 	lcall	_setColorWhite
                                  12117 ;	.\ecen4350_lcd_v4.c:2882: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      004364 90r0Br94         [24]12118 	mov	dptr,#___str_116
      004367 75 F0 80         [24]12119 	mov	b,#0x80
      00436A 12r0FrD0         [24]12120 	lcall	_LCD_string_write
      00436D D0 05            [24]12121 	pop	ar5
                                  12122 ;	.\ecen4350_lcd_v4.c:2883: invalidInput = 1;
      00436F 7F 01            [12]12123 	mov	r7,#0x01
                                  12124 ;	.\ecen4350_lcd_v4.c:2884: while (invalidInput) {
      004371                      12125 00174$:
      004371 EF               [12]12126 	mov	a,r7
      004372 70 03            [24]12127 	jnz	00586$
      004374 02r44r3E         [24]12128 	ljmp	00178$
      004377                      12129 00586$:
                                  12130 ;	.\ecen4350_lcd_v4.c:2885: selection = keyDetect();
      004377 C0 07            [24]12131 	push	ar7
      004379 C0 05            [24]12132 	push	ar5
      00437B 12r10rEE         [24]12133 	lcall	_keyDetect
      00437E AE 82            [24]12134 	mov	r6,dpl
      004380 D0 05            [24]12135 	pop	ar5
      004382 D0 07            [24]12136 	pop	ar7
      004384 78r00            [12]12137 	mov	r0,#_selection
      004386 A6 06            [24]12138 	mov	@r0,ar6
                                  12139 ;	.\ecen4350_lcd_v4.c:2886: if (selection == '1') {
      004388 BE 31 28         [24]12140 	cjne	r6,#0x31,00169$
                                  12141 ;	.\ecen4350_lcd_v4.c:2887: setCursor(0, 180);
      00438B 75*00 B4         [24]12142 	mov	_setCursor_PARM_2,#0xb4
      00438E 75*01 00         [24]12143 	mov	(_setCursor_PARM_2 + 1),#0x00
      004391 90 00 00         [24]12144 	mov	dptr,#0x0000
      004394 C0 05            [24]12145 	push	ar5
      004396 12r04rB6         [24]12146 	lcall	_setCursor
                                  12147 ;	.\ecen4350_lcd_v4.c:2888: LCD_string_write(" ");
      004399 90r06r56         [24]12148 	mov	dptr,#___str_29
      00439C 75 F0 80         [24]12149 	mov	b,#0x80
      00439F 12r0FrD0         [24]12150 	lcall	_LCD_string_write
                                  12151 ;	.\ecen4350_lcd_v4.c:2889: setColorHighlight2();
      0043A2 12r15rB6         [24]12152 	lcall	_setColorHighlight2
                                  12153 ;	.\ecen4350_lcd_v4.c:2890: LCD_string_write("<1> Next");
      0043A5 90r0Br33         [24]12154 	mov	dptr,#___str_111
      0043A8 75 F0 80         [24]12155 	mov	b,#0x80
      0043AB 12r0FrD0         [24]12156 	lcall	_LCD_string_write
      0043AE D0 05            [24]12157 	pop	ar5
                                  12158 ;	.\ecen4350_lcd_v4.c:2891: invalidInput = 0;
      0043B0 7F 00            [12]12159 	mov	r7,#0x00
                                  12160 ;	.\ecen4350_lcd_v4.c:2892: page++;
      0043B2 0D               [12]12161 	inc	r5
      0043B3                      12162 00169$:
                                  12163 ;	.\ecen4350_lcd_v4.c:2893: } if (selection == '2') {
      0043B3 78r00            [12]12164 	mov	r0,#_selection
      0043B5 B6 32 3F         [24]12165 	cjne	@r0,#0x32,00171$
                                  12166 ;	.\ecen4350_lcd_v4.c:2894: setCursor(0, 180);
      0043B8 75*00 B4         [24]12167 	mov	_setCursor_PARM_2,#0xb4
      0043BB 75*01 00         [24]12168 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043BE 90 00 00         [24]12169 	mov	dptr,#0x0000
      0043C1 C0 05            [24]12170 	push	ar5
      0043C3 12r04rB6         [24]12171 	lcall	_setCursor
                                  12172 ;	.\ecen4350_lcd_v4.c:2895: setColorWhite();
      0043C6 12r15rE4         [24]12173 	lcall	_setColorWhite
                                  12174 ;	.\ecen4350_lcd_v4.c:2896: LCD_string_write("\n\n ");
      0043C9 90r0Br83         [24]12175 	mov	dptr,#___str_114
      0043CC 75 F0 80         [24]12176 	mov	b,#0x80
      0043CF 12r0FrD0         [24]12177 	lcall	_LCD_string_write
                                  12178 ;	.\ecen4350_lcd_v4.c:2897: setColorHighlight2();
      0043D2 12r15rB6         [24]12179 	lcall	_setColorHighlight2
                                  12180 ;	.\ecen4350_lcd_v4.c:2898: LCD_string_write("<2> Previous");
      0043D5 90r0Br87         [24]12181 	mov	dptr,#___str_115
      0043D8 75 F0 80         [24]12182 	mov	b,#0x80
      0043DB 12r0FrD0         [24]12183 	lcall	_LCD_string_write
      0043DE D0 05            [24]12184 	pop	ar5
                                  12185 ;	.\ecen4350_lcd_v4.c:2899: invalidInput = 0;
      0043E0 7F 00            [12]12186 	mov	r7,#0x00
                                  12187 ;	.\ecen4350_lcd_v4.c:2900: i--;
      0043E2 E5*61            [12]12188 	mov	a,_count_sloc1_1_0
      0043E4 24 FF            [12]12189 	add	a,#0xff
      0043E6 FC               [12]12190 	mov	r4,a
      0043E7 E5*62            [12]12191 	mov	a,(_count_sloc1_1_0 + 1)
      0043E9 34 FF            [12]12192 	addc	a,#0xff
      0043EB FE               [12]12193 	mov	r6,a
                                  12194 ;	.\ecen4350_lcd_v4.c:2901: i--;		// two decrements plus next loop increment is equal to one decrement
      0043EC EC               [12]12195 	mov	a,r4
      0043ED 24 FF            [12]12196 	add	a,#0xff
      0043EF F5*61            [12]12197 	mov	_count_sloc1_1_0,a
      0043F1 EE               [12]12198 	mov	a,r6
      0043F2 34 FF            [12]12199 	addc	a,#0xff
      0043F4 F5*62            [12]12200 	mov	(_count_sloc1_1_0 + 1),a
                                  12201 ;	.\ecen4350_lcd_v4.c:2902: page--;		// decrement to previous page
      0043F6 1D               [12]12202 	dec	r5
      0043F7                      12203 00171$:
                                  12204 ;	.\ecen4350_lcd_v4.c:2903: } if (selection == '0') {
      0043F7 78r00            [12]12205 	mov	r0,#_selection
      0043F9 B6 30 02         [24]12206 	cjne	@r0,#0x30,00591$
      0043FC 80 03            [24]12207 	sjmp	00592$
      0043FE                      12208 00591$:
      0043FE 02r43r71         [24]12209 	ljmp	00174$
      004401                      12210 00592$:
                                  12211 ;	.\ecen4350_lcd_v4.c:2904: setColorWhite();
      004401 C0 05            [24]12212 	push	ar5
      004403 12r15rE4         [24]12213 	lcall	_setColorWhite
                                  12214 ;	.\ecen4350_lcd_v4.c:2905: setCursor(0, 180);
      004406 75*00 B4         [24]12215 	mov	_setCursor_PARM_2,#0xb4
      004409 75*01 00         [24]12216 	mov	(_setCursor_PARM_2 + 1),#0x00
      00440C 90 00 00         [24]12217 	mov	dptr,#0x0000
      00440F 12r04rB6         [24]12218 	lcall	_setCursor
                                  12219 ;	.\ecen4350_lcd_v4.c:2906: LCD_string_write(" <1> Next\n ");
      004412 90r0BrB6         [24]12220 	mov	dptr,#___str_117
      004415 75 F0 80         [24]12221 	mov	b,#0x80
      004418 12r0FrD0         [24]12222 	lcall	_LCD_string_write
                                  12223 ;	.\ecen4350_lcd_v4.c:2907: setColorHighlight2();
      00441B 12r15rB6         [24]12224 	lcall	_setColorHighlight2
                                  12225 ;	.\ecen4350_lcd_v4.c:2908: LCD_string_write("<0> Exit");
      00441E 90r09r1C         [24]12226 	mov	dptr,#___str_77
      004421 75 F0 80         [24]12227 	mov	b,#0x80
      004424 12r0FrD0         [24]12228 	lcall	_LCD_string_write
                                  12229 ;	.\ecen4350_lcd_v4.c:2909: setColorWhite();
      004427 12r15rE4         [24]12230 	lcall	_setColorWhite
                                  12231 ;	.\ecen4350_lcd_v4.c:2910: LCD_string_write("\n <2> Previous");
      00442A 90r0BrC2         [24]12232 	mov	dptr,#___str_118
      00442D 75 F0 80         [24]12233 	mov	b,#0x80
      004430 12r0FrD0         [24]12234 	lcall	_LCD_string_write
      004433 D0 05            [24]12235 	pop	ar5
                                  12236 ;	.\ecen4350_lcd_v4.c:2911: exit = 0;		// set exit flag
      004435 78r1A            [12]12237 	mov	r0,#_count_exit_65536_702
      004437 76 00            [12]12238 	mov	@r0,#0x00
                                  12239 ;	.\ecen4350_lcd_v4.c:2912: invalidInput = 0;
      004439 7F 00            [12]12240 	mov	r7,#0x00
      00443B 02r43r71         [24]12241 	ljmp	00174$
      00443E                      12242 00178$:
                                  12243 ;	.\ecen4350_lcd_v4.c:2916: if (exit == 0) {		// check exit flag
      00443E 78r1A            [12]12244 	mov	r0,#_count_exit_65536_702
      004440 E6               [12]12245 	mov	a,@r0
      004441 60 0B            [24]12246 	jz	00194$
                                  12247 ;	.\ecen4350_lcd_v4.c:2917: break;			// break out the loop
      004443                      12248 00212$:
                                  12249 ;	.\ecen4350_lcd_v4.c:2759: for (unsigned int i = 0; i < blockSize; i++) {
      004443 05*61            [12]12250 	inc	_count_sloc1_1_0
      004445 E4               [12]12251 	clr	a
      004446 B5*61 02         [24]12252 	cjne	a,_count_sloc1_1_0,00594$
      004449 05*62            [12]12253 	inc	(_count_sloc1_1_0 + 1)
      00444B                      12254 00594$:
      00444B 02r40r1D         [24]12255 	ljmp	00211$
      00444E                      12256 00194$:
                                  12257 ;	.\ecen4350_lcd_v4.c:2923: if(noneFound) {
      00444E 78r19            [12]12258 	mov	r0,#_count_noneFound_65536_702
      004450 E6               [12]12259 	mov	a,@r0
      004451 70 03            [24]12260 	jnz	00595$
      004453 02r3Fr28         [24]12261 	ljmp	00202$
      004456                      12262 00595$:
                                  12263 ;	.\ecen4350_lcd_v4.c:2924: setColorRed();
      004456 C0 05            [24]12264 	push	ar5
      004458 12r15rD9         [24]12265 	lcall	_setColorRed
                                  12266 ;	.\ecen4350_lcd_v4.c:2925: setCursor(0, 160);
      00445B 75*00 A0         [24]12267 	mov	_setCursor_PARM_2,#0xa0
      00445E 75*01 00         [24]12268 	mov	(_setCursor_PARM_2 + 1),#0x00
      004461 90 00 00         [24]12269 	mov	dptr,#0x0000
      004464 12r04rB6         [24]12270 	lcall	_setCursor
                                  12271 ;	.\ecen4350_lcd_v4.c:2926: LCD_string_write(" Value Not Found\n Within Block\n ");
      004467 90r0BrD1         [24]12272 	mov	dptr,#___str_119
      00446A 75 F0 80         [24]12273 	mov	b,#0x80
      00446D 12r0FrD0         [24]12274 	lcall	_LCD_string_write
                                  12275 ;	.\ecen4350_lcd_v4.c:2927: setColorWhite();
      004470 12r15rE4         [24]12276 	lcall	_setColorWhite
                                  12277 ;	.\ecen4350_lcd_v4.c:2928: LCD_string_write("\n <0> Exit");
      004473 90r0BrF2         [24]12278 	mov	dptr,#___str_120
      004476 75 F0 80         [24]12279 	mov	b,#0x80
      004479 12r0FrD0         [24]12280 	lcall	_LCD_string_write
      00447C D0 05            [24]12281 	pop	ar5
                                  12282 ;	.\ecen4350_lcd_v4.c:2929: invalidInput = 1;
      00447E 7F 01            [12]12283 	mov	r7,#0x01
                                  12284 ;	.\ecen4350_lcd_v4.c:2931: while (invalidInput) {
      004480                      12285 00197$:
      004480 EF               [12]12286 	mov	a,r7
      004481 70 03            [24]12287 	jnz	00596$
      004483 02r3Fr28         [24]12288 	ljmp	00202$
      004486                      12289 00596$:
                                  12290 ;	.\ecen4350_lcd_v4.c:2932: selection = keyDetect();
      004486 C0 07            [24]12291 	push	ar7
      004488 C0 05            [24]12292 	push	ar5
      00448A 12r10rEE         [24]12293 	lcall	_keyDetect
      00448D AE 82            [24]12294 	mov	r6,dpl
      00448F D0 05            [24]12295 	pop	ar5
      004491 D0 07            [24]12296 	pop	ar7
      004493 78r00            [12]12297 	mov	r0,#_selection
      004495 A6 06            [24]12298 	mov	@r0,ar6
                                  12299 ;	.\ecen4350_lcd_v4.c:2933: if (selection == '0'){
      004497 BE 30 E6         [24]12300 	cjne	r6,#0x30,00197$
                                  12301 ;	.\ecen4350_lcd_v4.c:2934: setCursor(0, 160);
      00449A 75*00 A0         [24]12302 	mov	_setCursor_PARM_2,#0xa0
      00449D 75*01 00         [24]12303 	mov	(_setCursor_PARM_2 + 1),#0x00
      0044A0 90 00 00         [24]12304 	mov	dptr,#0x0000
      0044A3 C0 05            [24]12305 	push	ar5
      0044A5 12r04rB6         [24]12306 	lcall	_setCursor
                                  12307 ;	.\ecen4350_lcd_v4.c:2935: LCD_string_write("\n\n\n ");
      0044A8 90r0BrFD         [24]12308 	mov	dptr,#___str_121
      0044AB 75 F0 80         [24]12309 	mov	b,#0x80
      0044AE 12r0FrD0         [24]12310 	lcall	_LCD_string_write
                                  12311 ;	.\ecen4350_lcd_v4.c:2936: setColorHighlight2();
      0044B1 12r15rB6         [24]12312 	lcall	_setColorHighlight2
                                  12313 ;	.\ecen4350_lcd_v4.c:2937: LCD_string_write("<0> Exit");
      0044B4 90r09r1C         [24]12314 	mov	dptr,#___str_77
      0044B7 75 F0 80         [24]12315 	mov	b,#0x80
      0044BA 12r0FrD0         [24]12316 	lcall	_LCD_string_write
      0044BD D0 05            [24]12317 	pop	ar5
                                  12318 ;	.\ecen4350_lcd_v4.c:2938: invalidInput = 0;
      0044BF 7F 00            [12]12319 	mov	r7,#0x00
                                  12320 ;	.\ecen4350_lcd_v4.c:2939: exit = 0;
      0044C1 78r1A            [12]12321 	mov	r0,#_count_exit_65536_702
      0044C3 76 00            [12]12322 	mov	@r0,#0x00
      0044C5 80 B9            [24]12323 	sjmp	00197$
      0044C7                      12324 00204$:
                                  12325 ;	.\ecen4350_lcd_v4.c:2944: delay(80);
      0044C7 90 00 50         [24]12326 	mov	dptr,#0x0050
                                  12327 ;	.\ecen4350_lcd_v4.c:2945: return;
                                  12328 ;	.\ecen4350_lcd_v4.c:2946: }
      0044CA 02r00rE0         [24]12329 	ljmp	_delay
                                  12330 ;------------------------------------------------------------
                                  12331 ;Allocation info for local variables in function 'check'
                                  12332 ;------------------------------------------------------------
                                  12333 ;temp                      Allocated to registers r7 
                                  12334 ;------------------------------------------------------------
                                  12335 ;	.\ecen4350_lcd_v4.c:2948: void check() {
                                  12336 ;	-----------------------------------------
                                  12337 ;	 function check
                                  12338 ;	-----------------------------------------
      0044CD                      12339 _check:
                                  12340 ;	.\ecen4350_lcd_v4.c:2950: clearLCD();
      0044CD 12r0Dr53         [24]12341 	lcall	_clearLCD
                                  12342 ;	.\ecen4350_lcd_v4.c:2953: fillTop(GRAY);
      0044D0 90 D6 BA         [24]12343 	mov	dptr,#0xd6ba
      0044D3 12r0Br86         [24]12344 	lcall	_fillTop
                                  12345 ;	.\ecen4350_lcd_v4.c:2954: setTextSize(5);
      0044D6 75 82 05         [24]12346 	mov	dpl,#0x05
      0044D9 12r04rD0         [24]12347 	lcall	_setTextSize
                                  12348 ;	.\ecen4350_lcd_v4.c:2955: setColorMenu();
      0044DC 12r15rCD         [24]12349 	lcall	_setColorMenu
                                  12350 ;	.\ecen4350_lcd_v4.c:2956: setCursor(15, 0);
      0044DF E4               [12]12351 	clr	a
      0044E0 F5*00            [12]12352 	mov	_setCursor_PARM_2,a
      0044E2 F5*01            [12]12353 	mov	(_setCursor_PARM_2 + 1),a
      0044E4 90 00 0F         [24]12354 	mov	dptr,#0x000f
      0044E7 12r04rB6         [24]12355 	lcall	_setCursor
                                  12356 ;	.\ecen4350_lcd_v4.c:2957: LCD_string_write("[CHECK]\n");
      0044EA 90r0Cr3D         [24]12357 	mov	dptr,#___str_127
      0044ED 75 F0 80         [24]12358 	mov	b,#0x80
      0044F0 12r0FrD0         [24]12359 	lcall	_LCD_string_write
                                  12360 ;	.\ecen4350_lcd_v4.c:2958: setColorDefault();
      0044F3 12r15r94         [24]12361 	lcall	_setColorDefault
                                  12362 ;	.\ecen4350_lcd_v4.c:2959: setTextSize(2);
      0044F6 75 82 02         [24]12363 	mov	dpl,#0x02
      0044F9 12r04rD0         [24]12364 	lcall	_setTextSize
                                  12365 ;	.\ecen4350_lcd_v4.c:2960: setCursor(0, 60);
      0044FC 75*00 3C         [24]12366 	mov	_setCursor_PARM_2,#0x3c
      0044FF 75*01 00         [24]12367 	mov	(_setCursor_PARM_2 + 1),#0x00
      004502 90 00 00         [24]12368 	mov	dptr,#0x0000
      004505 12r04rB6         [24]12369 	lcall	_setCursor
                                  12370 ;	.\ecen4350_lcd_v4.c:2961: LCD_string_write(" Enter Value:\n");
      004508 90r0Cr46         [24]12371 	mov	dptr,#___str_128
      00450B 75 F0 80         [24]12372 	mov	b,#0x80
      00450E 12r0FrD0         [24]12373 	lcall	_LCD_string_write
                                  12374 ;	.\ecen4350_lcd_v4.c:2962: setColorGray();
      004511 12r15rC2         [24]12375 	lcall	_setColorGray
                                  12376 ;	.\ecen4350_lcd_v4.c:2963: LCD_string_write(" __");
      004514 90r08r03         [24]12377 	mov	dptr,#___str_61
      004517 75 F0 80         [24]12378 	mov	b,#0x80
      00451A 12r0FrD0         [24]12379 	lcall	_LCD_string_write
                                  12380 ;	.\ecen4350_lcd_v4.c:2965: setCursor(0,60);
      00451D 75*00 3C         [24]12381 	mov	_setCursor_PARM_2,#0x3c
      004520 75*01 00         [24]12382 	mov	(_setCursor_PARM_2 + 1),#0x00
      004523 90 00 00         [24]12383 	mov	dptr,#0x0000
      004526 12r04rB6         [24]12384 	lcall	_setCursor
                                  12385 ;	.\ecen4350_lcd_v4.c:2966: LCD_string_write("\n ");
      004529 90r08r61         [24]12386 	mov	dptr,#___str_66
      00452C 75 F0 80         [24]12387 	mov	b,#0x80
      00452F 12r0FrD0         [24]12388 	lcall	_LCD_string_write
                                  12389 ;	.\ecen4350_lcd_v4.c:2967: setColorHighlight1();
      004532 12r15rAA         [24]12390 	lcall	_setColorHighlight1
                                  12391 ;	.\ecen4350_lcd_v4.c:2968: selection = 0;
      004535 78r00            [12]12392 	mov	r0,#_selection
      004537 76 00            [12]12393 	mov	@r0,#0x00
                                  12394 ;	.\ecen4350_lcd_v4.c:2969: temp = keyDetect();
      004539 12r10rEE         [24]12395 	lcall	_keyDetect
                                  12396 ;	.\ecen4350_lcd_v4.c:2970: write(temp);
      00453C AF 82            [24]12397 	mov  r7,dpl
      00453E C0 07            [24]12398 	push	ar7
      004540 12r0Fr6A         [24]12399 	lcall	_write
      004543 D0 07            [24]12400 	pop	ar7
                                  12401 ;	.\ecen4350_lcd_v4.c:2971: temp = ASCIItoHex(temp);
      004545 8F 82            [24]12402 	mov	dpl,r7
      004547 12r13r5C         [24]12403 	lcall	_ASCIItoHex
                                  12404 ;	.\ecen4350_lcd_v4.c:2972: selection |= temp * 16;
      00454A E5 82            [12]12405 	mov	a,dpl
      00454C C4               [12]12406 	swap	a
      00454D 54 F0            [12]12407 	anl	a,#0xf0
      00454F FF               [12]12408 	mov	r7,a
      004550 78r00            [12]12409 	mov	r0,#_selection
      004552 E6               [12]12410 	mov	a,@r0
      004553 4F               [12]12411 	orl	a,r7
      004554 78r00            [12]12412 	mov	r0,#_selection
      004556 F6               [12]12413 	mov	@r0,a
                                  12414 ;	.\ecen4350_lcd_v4.c:2973: temp = keyDetect();
      004557 12r10rEE         [24]12415 	lcall	_keyDetect
                                  12416 ;	.\ecen4350_lcd_v4.c:2974: write(temp);
      00455A AF 82            [24]12417 	mov  r7,dpl
      00455C C0 07            [24]12418 	push	ar7
      00455E 12r0Fr6A         [24]12419 	lcall	_write
      004561 D0 07            [24]12420 	pop	ar7
                                  12421 ;	.\ecen4350_lcd_v4.c:2975: temp = ASCIItoHex(temp);
      004563 8F 82            [24]12422 	mov	dpl,r7
      004565 12r13r5C         [24]12423 	lcall	_ASCIItoHex
      004568 AF 82            [24]12424 	mov	r7,dpl
                                  12425 ;	.\ecen4350_lcd_v4.c:2976: selection |= temp;
      00456A 78r00            [12]12426 	mov	r0,#_selection
      00456C EF               [12]12427 	mov	a,r7
      00456D 46               [12]12428 	orl	a,@r0
      00456E F6               [12]12429 	mov	@r0,a
                                  12430 ;	.\ecen4350_lcd_v4.c:2977: setColorDefault();
      00456F 12r15r94         [24]12431 	lcall	_setColorDefault
                                  12432 ;	.\ecen4350_lcd_v4.c:2978: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      004572 90r0Cr55         [24]12433 	mov	dptr,#___str_129
      004575 75 F0 80         [24]12434 	mov	b,#0x80
      004578 12r0FrD0         [24]12435 	lcall	_LCD_string_write
                                  12436 ;	.\ecen4350_lcd_v4.c:2979: writeAllRAM(selection);
      00457B 78r00            [12]12437 	mov	r0,#_selection
      00457D 86 82            [24]12438 	mov	dpl,@r0
      00457F 12r00r22         [24]12439 	lcall	_writeAllRAM
                                  12440 ;	.\ecen4350_lcd_v4.c:2980: setColorWhite();
      004582 12r15rE4         [24]12441 	lcall	_setColorWhite
                                  12442 ;	.\ecen4350_lcd_v4.c:2981: LCD_string_write("\n Verifying write...");
      004585 90r0Cr82         [24]12443 	mov	dptr,#___str_130
      004588 75 F0 80         [24]12444 	mov	b,#0x80
      00458B 12r0FrD0         [24]12445 	lcall	_LCD_string_write
                                  12446 ;	.\ecen4350_lcd_v4.c:2982: checkAllRAM(selection);
      00458E 78r00            [12]12447 	mov	r0,#_selection
      004590 86 82            [24]12448 	mov	dpl,@r0
      004592 12r00r51         [24]12449 	lcall	_checkAllRAM
                                  12450 ;	.\ecen4350_lcd_v4.c:2983: LCD_string_write("\n Complete.");
      004595 90r0Cr97         [24]12451 	mov	dptr,#___str_131
      004598 75 F0 80         [24]12452 	mov	b,#0x80
      00459B 12r0FrD0         [24]12453 	lcall	_LCD_string_write
                                  12454 ;	.\ecen4350_lcd_v4.c:2984: setTextColor(BLUE, colorBackground);
      00459E E4               [12]12455 	clr	a
      00459F F5*00            [12]12456 	mov	_setTextColor_PARM_2,a
      0045A1 F5*01            [12]12457 	mov	(_setTextColor_PARM_2 + 1),a
      0045A3 90 00 1F         [24]12458 	mov	dptr,#0x001f
      0045A6 12r04rC3         [24]12459 	lcall	_setTextColor
                                  12460 ;	.\ecen4350_lcd_v4.c:2985: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      0045A9 90r0CrA3         [24]12461 	mov	dptr,#___str_132
      0045AC 75 F0 80         [24]12462 	mov	b,#0x80
      0045AF 12r0FrD0         [24]12463 	lcall	_LCD_string_write
                                  12464 ;	.\ecen4350_lcd_v4.c:2986: selection = ~selection;
      0045B2 78r00            [12]12465 	mov	r0,#_selection
      0045B4 E6               [12]12466 	mov	a,@r0
      0045B5 F4               [12]12467 	cpl	a
      0045B6 F6               [12]12468 	mov	@r0,a
                                  12469 ;	.\ecen4350_lcd_v4.c:2987: setColorSelect();
      0045B7 12r15r9F         [24]12470 	lcall	_setColorSelect
                                  12471 ;	.\ecen4350_lcd_v4.c:2988: LCD_string_write("\n Writing new byte...");
      0045BA 90r0CrC7         [24]12472 	mov	dptr,#___str_133
      0045BD 75 F0 80         [24]12473 	mov	b,#0x80
      0045C0 12r0FrD0         [24]12474 	lcall	_LCD_string_write
                                  12475 ;	.\ecen4350_lcd_v4.c:2989: writeAllRAM(selection);
      0045C3 78r00            [12]12476 	mov	r0,#_selection
      0045C5 86 82            [24]12477 	mov	dpl,@r0
      0045C7 12r00r22         [24]12478 	lcall	_writeAllRAM
                                  12479 ;	.\ecen4350_lcd_v4.c:2990: setColorYellow();
      0045CA 12r15rFA         [24]12480 	lcall	_setColorYellow
                                  12481 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write("\n Verifying write...");
      0045CD 90r0Cr82         [24]12482 	mov	dptr,#___str_130
      0045D0 75 F0 80         [24]12483 	mov	b,#0x80
      0045D3 12r0FrD0         [24]12484 	lcall	_LCD_string_write
                                  12485 ;	.\ecen4350_lcd_v4.c:2992: checkAllRAM(selection);
      0045D6 78r00            [12]12486 	mov	r0,#_selection
      0045D8 86 82            [24]12487 	mov	dpl,@r0
      0045DA 12r00r51         [24]12488 	lcall	_checkAllRAM
                                  12489 ;	.\ecen4350_lcd_v4.c:2993: setColorGreen();
      0045DD 12r15rEF         [24]12490 	lcall	_setColorGreen
                                  12491 ;	.\ecen4350_lcd_v4.c:2994: LCD_string_write("\n\n Check Complete.");
      0045E0 90r0CrDD         [24]12492 	mov	dptr,#___str_134
      0045E3 75 F0 80         [24]12493 	mov	b,#0x80
      0045E6 12r0FrD0         [24]12494 	lcall	_LCD_string_write
                                  12495 ;	.\ecen4350_lcd_v4.c:2995: delay(120);
      0045E9 90 00 78         [24]12496 	mov	dptr,#0x0078
                                  12497 ;	.\ecen4350_lcd_v4.c:2996: return;
                                  12498 ;	.\ecen4350_lcd_v4.c:2997: }
      0045EC 02r00rE0         [24]12499 	ljmp	_delay
                                  12500 ;------------------------------------------------------------
                                  12501 ;Allocation info for local variables in function 'uart'
                                  12502 ;------------------------------------------------------------
                                  12503 ;	.\ecen4350_lcd_v4.c:2999: void uart() {
                                  12504 ;	-----------------------------------------
                                  12505 ;	 function uart
                                  12506 ;	-----------------------------------------
      0045EF                      12507 _uart:
                                  12508 ;	.\ecen4350_lcd_v4.c:3000: clearLCD();
      0045EF 12r0Dr53         [24]12509 	lcall	_clearLCD
                                  12510 ;	.\ecen4350_lcd_v4.c:3001: fillTop(GRAY);
      0045F2 90 D6 BA         [24]12511 	mov	dptr,#0xd6ba
      0045F5 12r0Br86         [24]12512 	lcall	_fillTop
                                  12513 ;	.\ecen4350_lcd_v4.c:3002: setTextSize(5);
      0045F8 75 82 05         [24]12514 	mov	dpl,#0x05
      0045FB 12r04rD0         [24]12515 	lcall	_setTextSize
                                  12516 ;	.\ecen4350_lcd_v4.c:3003: setColorMenu();
      0045FE 12r15rCD         [24]12517 	lcall	_setColorMenu
                                  12518 ;	.\ecen4350_lcd_v4.c:3004: setCursor(30, 0);
      004601 E4               [12]12519 	clr	a
      004602 F5*00            [12]12520 	mov	_setCursor_PARM_2,a
      004604 F5*01            [12]12521 	mov	(_setCursor_PARM_2 + 1),a
      004606 90 00 1E         [24]12522 	mov	dptr,#0x001e
      004609 12r04rB6         [24]12523 	lcall	_setCursor
                                  12524 ;	.\ecen4350_lcd_v4.c:3005: LCD_string_write("[UART]\n");
      00460C 90r0CrF0         [24]12525 	mov	dptr,#___str_135
      00460F 75 F0 80         [24]12526 	mov	b,#0x80
      004612 12r0FrD0         [24]12527 	lcall	_LCD_string_write
                                  12528 ;	.\ecen4350_lcd_v4.c:3009: setTextSize(2);
      004615 75 82 02         [24]12529 	mov	dpl,#0x02
      004618 12r04rD0         [24]12530 	lcall	_setTextSize
                                  12531 ;	.\ecen4350_lcd_v4.c:3010: setColorDefault();
      00461B 12r15r94         [24]12532 	lcall	_setColorDefault
                                  12533 ;	.\ecen4350_lcd_v4.c:3011: setCursor(0, 60);
      00461E 75*00 3C         [24]12534 	mov	_setCursor_PARM_2,#0x3c
      004621 75*01 00         [24]12535 	mov	(_setCursor_PARM_2 + 1),#0x00
      004624 90 00 00         [24]12536 	mov	dptr,#0x0000
      004627 12r04rB6         [24]12537 	lcall	_setCursor
                                  12538 ;	.\ecen4350_lcd_v4.c:3012: LCD_string_write(" <1> Data Rate Set\n");
      00462A 90r0CrF8         [24]12539 	mov	dptr,#___str_136
      00462D 75 F0 80         [24]12540 	mov	b,#0x80
      004630 12r0FrD0         [24]12541 	lcall	_LCD_string_write
                                  12542 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 100);
      004633 75*00 64         [24]12543 	mov	_setCursor_PARM_2,#0x64
      004636 75*01 00         [24]12544 	mov	(_setCursor_PARM_2 + 1),#0x00
      004639 90 00 00         [24]12545 	mov	dptr,#0x0000
      00463C 12r04rB6         [24]12546 	lcall	_setCursor
                                  12547 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <2> Number of Bits\n    (8 or 9 bits)\n");
      00463F 90r0Dr0C         [24]12548 	mov	dptr,#___str_137
      004642 75 F0 80         [24]12549 	mov	b,#0x80
      004645 12r0FrD0         [24]12550 	lcall	_LCD_string_write
                                  12551 ;	.\ecen4350_lcd_v4.c:3015: setCursor(0, 140);
      004648 75*00 8C         [24]12552 	mov	_setCursor_PARM_2,#0x8c
      00464B 75*01 00         [24]12553 	mov	(_setCursor_PARM_2 + 1),#0x00
      00464E 90 00 00         [24]12554 	mov	dptr,#0x0000
      004651 12r04rB6         [24]12555 	lcall	_setCursor
                                  12556 ;	.\ecen4350_lcd_v4.c:3016: LCD_string_write(" <3> Parity\n    (Even/Odd/None)\n");
      004654 90r0Dr33         [24]12557 	mov	dptr,#___str_138
      004657 75 F0 80         [24]12558 	mov	b,#0x80
      00465A 12r0FrD0         [24]12559 	lcall	_LCD_string_write
                                  12560 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 160);
      00465D 75*00 A0         [24]12561 	mov	_setCursor_PARM_2,#0xa0
      004660 75*01 00         [24]12562 	mov	(_setCursor_PARM_2 + 1),#0x00
      004663 90 00 00         [24]12563 	mov	dptr,#0x0000
      004666 12r04rB6         [24]12564 	lcall	_setCursor
                                  12565 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <4> Enable UART\n");
      004669 90r0Dr54         [24]12566 	mov	dptr,#___str_139
      00466C 75 F0 80         [24]12567 	mov	b,#0x80
      00466F 12r0FrD0         [24]12568 	lcall	_LCD_string_write
                                  12569 ;	.\ecen4350_lcd_v4.c:3019: keyInput:
      004672                      12570 00101$:
                                  12571 ;	.\ecen4350_lcd_v4.c:3020: selection = keyDetect();
      004672 12r10rEE         [24]12572 	lcall	_keyDetect
      004675 AF 82            [24]12573 	mov	r7,dpl
      004677 78r00            [12]12574 	mov	r0,#_selection
      004679 A6 07            [24]12575 	mov	@r0,ar7
                                  12576 ;	.\ecen4350_lcd_v4.c:3021: if (selection == '4') {
      00467B BF 34 02         [24]12577 	cjne	r7,#0x34,00234$
      00467E 80 4D            [24]12578 	sjmp	00112$
      004680                      12579 00234$:
                                  12580 ;	.\ecen4350_lcd_v4.c:3024: if (selection == '1') {
      004680 BF 31 30         [24]12581 	cjne	r7,#0x31,00103$
                                  12582 ;	.\ecen4350_lcd_v4.c:3025: setCursor (0, 60);
      004683 75*00 3C         [24]12583 	mov	_setCursor_PARM_2,#0x3c
      004686 75*01 00         [24]12584 	mov	(_setCursor_PARM_2 + 1),#0x00
      004689 90 00 00         [24]12585 	mov	dptr,#0x0000
      00468C 12r04rB6         [24]12586 	lcall	_setCursor
                                  12587 ;	.\ecen4350_lcd_v4.c:3026: LCD_string_write("  {");
      00468F 90r0Dr66         [24]12588 	mov	dptr,#___str_140
      004692 75 F0 80         [24]12589 	mov	b,#0x80
      004695 12r0FrD0         [24]12590 	lcall	_LCD_string_write
                                  12591 ;	.\ecen4350_lcd_v4.c:3027: setColorHighlight1();
      004698 12r15rAA         [24]12592 	lcall	_setColorHighlight1
                                  12593 ;	.\ecen4350_lcd_v4.c:3028: LCD_string_write("<1> ");
      00469B 90r0Dr6A         [24]12594 	mov	dptr,#___str_141
      00469E 75 F0 80         [24]12595 	mov	b,#0x80
      0046A1 12r0FrD0         [24]12596 	lcall	_LCD_string_write
                                  12597 ;	.\ecen4350_lcd_v4.c:3029: setColorHighlight2();
      0046A4 12r15rB6         [24]12598 	lcall	_setColorHighlight2
                                  12599 ;	.\ecen4350_lcd_v4.c:3030: LCD_string_write("Date Rate\n");
      0046A7 90r0Dr6F         [24]12600 	mov	dptr,#___str_142
      0046AA 75 F0 80         [24]12601 	mov	b,#0x80
      0046AD 12r0FrD0         [24]12602 	lcall	_LCD_string_write
                                  12603 ;	.\ecen4350_lcd_v4.c:3031: goto baudInput;	
      0046B0 02r48rD1         [24]12604 	ljmp	00133$
      0046B3                      12605 00103$:
                                  12606 ;	.\ecen4350_lcd_v4.c:3033: if (selection == '2') {
      0046B3 BF 32 01         [24]12607 	cjne	r7,#0x32,00237$
      0046B6 22               [24]12608 	ret
      0046B7                      12609 00237$:
                                  12610 ;	.\ecen4350_lcd_v4.c:3035: } if (selection == '3') {
      0046B7 BF 33 08         [24]12611 	cjne	r7,#0x33,00107$
                                  12612 ;	.\ecen4350_lcd_v4.c:3036: delay(5);
      0046BA 90 00 05         [24]12613 	mov	dptr,#0x0005
      0046BD 12r00rE0         [24]12614 	lcall	_delay
      0046C0 80 0B            [24]12615 	sjmp	00112$
      0046C2                      12616 00107$:
                                  12617 ;	.\ecen4350_lcd_v4.c:3038: LCD_string_write("\n\n Incorrect input\n  Try again.\n");
      0046C2 90r0Dr7A         [24]12618 	mov	dptr,#___str_143
      0046C5 75 F0 80         [24]12619 	mov	b,#0x80
      0046C8 12r0FrD0         [24]12620 	lcall	_LCD_string_write
                                  12621 ;	.\ecen4350_lcd_v4.c:3039: goto keyInput;
                                  12622 ;	.\ecen4350_lcd_v4.c:3043: verifyUART:	
      0046CB 80 A5            [24]12623 	sjmp	00101$
      0046CD                      12624 00112$:
                                  12625 ;	.\ecen4350_lcd_v4.c:3044: if (baudSet == 0) {
      0046CD 78r02            [12]12626 	mov	r0,#_baudSet
      0046CF E6               [12]12627 	mov	a,@r0
      0046D0 70 15            [24]12628 	jnz	00114$
                                  12629 ;	.\ecen4350_lcd_v4.c:3045: LCD_string_write(" ERROR: No Baud Set\n");
      0046D2 90r0Dr9B         [24]12630 	mov	dptr,#___str_144
      0046D5 75 F0 80         [24]12631 	mov	b,#0x80
      0046D8 12r0FrD0         [24]12632 	lcall	_LCD_string_write
                                  12633 ;	.\ecen4350_lcd_v4.c:3046: LCD_string_write(" Please set a baud rate");
      0046DB 90r0DrB0         [24]12634 	mov	dptr,#___str_145
      0046DE 75 F0 80         [24]12635 	mov	b,#0x80
      0046E1 12r0FrD0         [24]12636 	lcall	_LCD_string_write
                                  12637 ;	.\ecen4350_lcd_v4.c:3047: goto keyInput;
      0046E4 02r46r72         [24]12638 	ljmp	00101$
      0046E7                      12639 00114$:
                                  12640 ;	.\ecen4350_lcd_v4.c:3048: } if (paritySet == 0) {
      0046E7 78r03            [12]12641 	mov	r0,#_paritySet
      0046E9 E6               [12]12642 	mov	a,@r0
      0046EA 70 15            [24]12643 	jnz	00116$
                                  12644 ;	.\ecen4350_lcd_v4.c:3049: LCD_string_write(" ERROR: Not Parity Set\n");
      0046EC 90r0DrC8         [24]12645 	mov	dptr,#___str_146
      0046EF 75 F0 80         [24]12646 	mov	b,#0x80
      0046F2 12r0FrD0         [24]12647 	lcall	_LCD_string_write
                                  12648 ;	.\ecen4350_lcd_v4.c:3050: LCD_string_write(" Please set parity");
      0046F5 90r0DrE0         [24]12649 	mov	dptr,#___str_147
      0046F8 75 F0 80         [24]12650 	mov	b,#0x80
      0046FB 12r0FrD0         [24]12651 	lcall	_LCD_string_write
                                  12652 ;	.\ecen4350_lcd_v4.c:3051: goto keyInput;
      0046FE 02r46r72         [24]12653 	ljmp	00101$
      004701                      12654 00116$:
                                  12655 ;	.\ecen4350_lcd_v4.c:3052: } if (baudSet == 0) {
      004701 78r02            [12]12656 	mov	r0,#_baudSet
      004703 E6               [12]12657 	mov	a,@r0
      004704 70 15            [24]12658 	jnz	00122$
                                  12659 ;	.\ecen4350_lcd_v4.c:3053: LCD_string_write(" ERROR: No Baud Set\n");
      004706 90r0Dr9B         [24]12660 	mov	dptr,#___str_144
      004709 75 F0 80         [24]12661 	mov	b,#0x80
      00470C 12r0FrD0         [24]12662 	lcall	_LCD_string_write
                                  12663 ;	.\ecen4350_lcd_v4.c:3054: LCD_string_write(" Please set a baud rate");
      00470F 90r0DrB0         [24]12664 	mov	dptr,#___str_145
      004712 75 F0 80         [24]12665 	mov	b,#0x80
      004715 12r0FrD0         [24]12666 	lcall	_LCD_string_write
                                  12667 ;	.\ecen4350_lcd_v4.c:3055: goto keyInput;
      004718 02r46r72         [24]12668 	ljmp	00101$
      00471B                      12669 00122$:
                                  12670 ;	.\ecen4350_lcd_v4.c:3057: if ((baudSet == 1) && (paritySet == 1) && (baudSet == 1)) {
      00471B 78r02            [12]12671 	mov	r0,#_baudSet
      00471D E4               [12]12672 	clr	a
      00471E B6 01 01         [24]12673 	cjne	@r0,#0x01,00243$
      004721 04               [12]12674 	inc	a
      004722                      12675 00243$:
      004722 FF               [12]12676 	mov	r7,a
      004723 60 15            [24]12677 	jz	00124$
      004725 78r03            [12]12678 	mov	r0,#_paritySet
      004727 B6 01 10         [24]12679 	cjne	@r0,#0x01,00124$
      00472A EF               [12]12680 	mov	a,r7
      00472B 60 0D            [24]12681 	jz	00124$
                                  12682 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write(" Setttings Verified\n Enabling UART...");
      00472D 90r0DrF3         [24]12683 	mov	dptr,#___str_148
      004730 75 F0 80         [24]12684 	mov	b,#0x80
      004733 12r0FrD0         [24]12685 	lcall	_LCD_string_write
                                  12686 ;	.\ecen4350_lcd_v4.c:3060: UART_en = 1;
      004736 78r01            [12]12687 	mov	r0,#_UART_en
      004738 76 01            [12]12688 	mov	@r0,#0x01
                                  12689 ;	.\ecen4350_lcd_v4.c:3065: keyValidation:
      00473A                      12690 00124$:
                                  12691 ;	.\ecen4350_lcd_v4.c:3066: selection = keyDetect();
      00473A 12r10rEE         [24]12692 	lcall	_keyDetect
      00473D AF 82            [24]12693 	mov	r7,dpl
      00473F 78r00            [12]12694 	mov	r0,#_selection
      004741 A6 07            [24]12695 	mov	@r0,ar7
                                  12696 ;	.\ecen4350_lcd_v4.c:3067: if (selection == '1'){
      004743 BF 31 5C         [24]12697 	cjne	r7,#0x31,00126$
                                  12698 ;	.\ecen4350_lcd_v4.c:3068: setCursor(0,60);
      004746 75*00 3C         [24]12699 	mov	_setCursor_PARM_2,#0x3c
      004749 75*01 00         [24]12700 	mov	(_setCursor_PARM_2 + 1),#0x00
      00474C 90 00 00         [24]12701 	mov	dptr,#0x0000
      00474F 12r04rB6         [24]12702 	lcall	_setCursor
                                  12703 ;	.\ecen4350_lcd_v4.c:3069: LCD_string_write(" ");
      004752 90r06r56         [24]12704 	mov	dptr,#___str_29
      004755 75 F0 80         [24]12705 	mov	b,#0x80
      004758 12r0FrD0         [24]12706 	lcall	_LCD_string_write
                                  12707 ;	.\ecen4350_lcd_v4.c:3070: setColorHighlight1();
      00475B 12r15rAA         [24]12708 	lcall	_setColorHighlight1
                                  12709 ;	.\ecen4350_lcd_v4.c:3071: LCD_string_write("<1>");
      00475E 90r0Er19         [24]12710 	mov	dptr,#___str_149
      004761 75 F0 80         [24]12711 	mov	b,#0x80
      004764 12r0FrD0         [24]12712 	lcall	_LCD_string_write
                                  12713 ;	.\ecen4350_lcd_v4.c:3072: setColorHighlight2();
      004767 12r15rB6         [24]12714 	lcall	_setColorHighlight2
                                  12715 ;	.\ecen4350_lcd_v4.c:3073: LCD_string_write(" Data Rate\n");
      00476A 90r0Er1D         [24]12716 	mov	dptr,#___str_150
      00476D 75 F0 80         [24]12717 	mov	b,#0x80
      004770 12r0FrD0         [24]12718 	lcall	_LCD_string_write
                                  12719 ;	.\ecen4350_lcd_v4.c:3074: delay(40);
      004773 90 00 28         [24]12720 	mov	dptr,#0x0028
      004776 12r00rE0         [24]12721 	lcall	_delay
                                  12722 ;	.\ecen4350_lcd_v4.c:3076: clearLCD();
      004779 12r0Dr53         [24]12723 	lcall	_clearLCD
                                  12724 ;	.\ecen4350_lcd_v4.c:3077: fillTop(GRAY);
      00477C 90 D6 BA         [24]12725 	mov	dptr,#0xd6ba
      00477F 12r0Br86         [24]12726 	lcall	_fillTop
                                  12727 ;	.\ecen4350_lcd_v4.c:3078: setTextSize(5);
      004782 75 82 05         [24]12728 	mov	dpl,#0x05
      004785 12r04rD0         [24]12729 	lcall	_setTextSize
                                  12730 ;	.\ecen4350_lcd_v4.c:3079: setColorMenu();
      004788 12r15rCD         [24]12731 	lcall	_setColorMenu
                                  12732 ;	.\ecen4350_lcd_v4.c:3080: setCursor(30, 0);
      00478B E4               [12]12733 	clr	a
      00478C F5*00            [12]12734 	mov	_setCursor_PARM_2,a
      00478E F5*01            [12]12735 	mov	(_setCursor_PARM_2 + 1),a
      004790 90 00 1E         [24]12736 	mov	dptr,#0x001e
      004793 12r04rB6         [24]12737 	lcall	_setCursor
                                  12738 ;	.\ecen4350_lcd_v4.c:3081: LCD_string_write("[UART]\n");
      004796 90r0CrF0         [24]12739 	mov	dptr,#___str_135
      004799 75 F0 80         [24]12740 	mov	b,#0x80
      00479C 12r0FrD0         [24]12741 	lcall	_LCD_string_write
                                  12742 ;	.\ecen4350_lcd_v4.c:3082: goto setRate;
      00479F 02r48r5F         [24]12743 	ljmp	00132$
      0047A2                      12744 00126$:
                                  12745 ;	.\ecen4350_lcd_v4.c:3084: if (selection == '2') {
      0047A2 BF 32 59         [24]12746 	cjne	r7,#0x32,00128$
                                  12747 ;	.\ecen4350_lcd_v4.c:3085: setCursor(0,100);
      0047A5 75*00 64         [24]12748 	mov	_setCursor_PARM_2,#0x64
      0047A8 75*01 00         [24]12749 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047AB 90 00 00         [24]12750 	mov	dptr,#0x0000
      0047AE 12r04rB6         [24]12751 	lcall	_setCursor
                                  12752 ;	.\ecen4350_lcd_v4.c:3086: LCD_string_write(" ");
      0047B1 90r06r56         [24]12753 	mov	dptr,#___str_29
      0047B4 75 F0 80         [24]12754 	mov	b,#0x80
      0047B7 12r0FrD0         [24]12755 	lcall	_LCD_string_write
                                  12756 ;	.\ecen4350_lcd_v4.c:3087: setColorHighlight1();
      0047BA 12r15rAA         [24]12757 	lcall	_setColorHighlight1
                                  12758 ;	.\ecen4350_lcd_v4.c:3088: LCD_string_write("<2>");
      0047BD 90r0Er29         [24]12759 	mov	dptr,#___str_151
      0047C0 75 F0 80         [24]12760 	mov	b,#0x80
      0047C3 12r0FrD0         [24]12761 	lcall	_LCD_string_write
                                  12762 ;	.\ecen4350_lcd_v4.c:3089: setColorHighlight2();
      0047C6 12r15rB6         [24]12763 	lcall	_setColorHighlight2
                                  12764 ;	.\ecen4350_lcd_v4.c:3090: LCD_string_write(" Number of Bits\n    (8 or 9 bits)\n");
      0047C9 90r0Er2D         [24]12765 	mov	dptr,#___str_152
      0047CC 75 F0 80         [24]12766 	mov	b,#0x80
      0047CF 12r0FrD0         [24]12767 	lcall	_LCD_string_write
                                  12768 ;	.\ecen4350_lcd_v4.c:3091: delay(40);
      0047D2 90 00 28         [24]12769 	mov	dptr,#0x0028
      0047D5 12r00rE0         [24]12770 	lcall	_delay
                                  12771 ;	.\ecen4350_lcd_v4.c:3093: clearLCD();
      0047D8 12r0Dr53         [24]12772 	lcall	_clearLCD
                                  12773 ;	.\ecen4350_lcd_v4.c:3094: fillTop(GRAY);
      0047DB 90 D6 BA         [24]12774 	mov	dptr,#0xd6ba
      0047DE 12r0Br86         [24]12775 	lcall	_fillTop
                                  12776 ;	.\ecen4350_lcd_v4.c:3095: setTextSize(5);
      0047E1 75 82 05         [24]12777 	mov	dpl,#0x05
      0047E4 12r04rD0         [24]12778 	lcall	_setTextSize
                                  12779 ;	.\ecen4350_lcd_v4.c:3096: setColorMenu();
      0047E7 12r15rCD         [24]12780 	lcall	_setColorMenu
                                  12781 ;	.\ecen4350_lcd_v4.c:3097: setCursor(30, 0);
      0047EA E4               [12]12782 	clr	a
      0047EB F5*00            [12]12783 	mov	_setCursor_PARM_2,a
      0047ED F5*01            [12]12784 	mov	(_setCursor_PARM_2 + 1),a
      0047EF 90 00 1E         [24]12785 	mov	dptr,#0x001e
      0047F2 12r04rB6         [24]12786 	lcall	_setCursor
                                  12787 ;	.\ecen4350_lcd_v4.c:3098: LCD_string_write("[UART]\n");
      0047F5 90r0CrF0         [24]12788 	mov	dptr,#___str_135
      0047F8 75 F0 80         [24]12789 	mov	b,#0x80
                                  12790 ;	.\ecen4350_lcd_v4.c:3099: goto setBit;
      0047FB 02r0FrD0         [24]12791 	ljmp	_LCD_string_write
      0047FE                      12792 00128$:
                                  12793 ;	.\ecen4350_lcd_v4.c:3101: if (selection == '3') {
      0047FE BF 33 02         [24]12794 	cjne	r7,#0x33,00253$
      004801 80 03            [24]12795 	sjmp	00254$
      004803                      12796 00253$:
      004803 02r47r3A         [24]12797 	ljmp	00124$
      004806                      12798 00254$:
                                  12799 ;	.\ecen4350_lcd_v4.c:3102: setCursor(0,140);
      004806 75*00 8C         [24]12800 	mov	_setCursor_PARM_2,#0x8c
      004809 75*01 00         [24]12801 	mov	(_setCursor_PARM_2 + 1),#0x00
      00480C 90 00 00         [24]12802 	mov	dptr,#0x0000
      00480F 12r04rB6         [24]12803 	lcall	_setCursor
                                  12804 ;	.\ecen4350_lcd_v4.c:3103: LCD_string_write(" ");
      004812 90r06r56         [24]12805 	mov	dptr,#___str_29
      004815 75 F0 80         [24]12806 	mov	b,#0x80
      004818 12r0FrD0         [24]12807 	lcall	_LCD_string_write
                                  12808 ;	.\ecen4350_lcd_v4.c:3104: setColorHighlight1();
      00481B 12r15rAA         [24]12809 	lcall	_setColorHighlight1
                                  12810 ;	.\ecen4350_lcd_v4.c:3105: LCD_string_write("<3>");
      00481E 90r0Er50         [24]12811 	mov	dptr,#___str_153
      004821 75 F0 80         [24]12812 	mov	b,#0x80
      004824 12r0FrD0         [24]12813 	lcall	_LCD_string_write
                                  12814 ;	.\ecen4350_lcd_v4.c:3106: setColorHighlight2();
      004827 12r15rB6         [24]12815 	lcall	_setColorHighlight2
                                  12816 ;	.\ecen4350_lcd_v4.c:3107: LCD_string_write(" Parity\n    (Even/Odd/None)\n");
      00482A 90r0Er54         [24]12817 	mov	dptr,#___str_154
      00482D 75 F0 80         [24]12818 	mov	b,#0x80
      004830 12r0FrD0         [24]12819 	lcall	_LCD_string_write
                                  12820 ;	.\ecen4350_lcd_v4.c:3108: delay(30);
      004833 90 00 1E         [24]12821 	mov	dptr,#0x001e
      004836 12r00rE0         [24]12822 	lcall	_delay
                                  12823 ;	.\ecen4350_lcd_v4.c:3110: clearLCD();
      004839 12r0Dr53         [24]12824 	lcall	_clearLCD
                                  12825 ;	.\ecen4350_lcd_v4.c:3111: fillTop(GRAY);
      00483C 90 D6 BA         [24]12826 	mov	dptr,#0xd6ba
      00483F 12r0Br86         [24]12827 	lcall	_fillTop
                                  12828 ;	.\ecen4350_lcd_v4.c:3112: setTextSize(5);
      004842 75 82 05         [24]12829 	mov	dpl,#0x05
      004845 12r04rD0         [24]12830 	lcall	_setTextSize
                                  12831 ;	.\ecen4350_lcd_v4.c:3113: setColorMenu();
      004848 12r15rCD         [24]12832 	lcall	_setColorMenu
                                  12833 ;	.\ecen4350_lcd_v4.c:3114: setCursor(30, 0);
      00484B E4               [12]12834 	clr	a
      00484C F5*00            [12]12835 	mov	_setCursor_PARM_2,a
      00484E F5*01            [12]12836 	mov	(_setCursor_PARM_2 + 1),a
      004850 90 00 1E         [24]12837 	mov	dptr,#0x001e
      004853 12r04rB6         [24]12838 	lcall	_setCursor
                                  12839 ;	.\ecen4350_lcd_v4.c:3115: LCD_string_write("[UART]\n");
      004856 90r0CrF0         [24]12840 	mov	dptr,#___str_135
      004859 75 F0 80         [24]12841 	mov	b,#0x80
                                  12842 ;	.\ecen4350_lcd_v4.c:3116: goto setParity;
      00485C 02r0FrD0         [24]12843 	ljmp	_LCD_string_write
                                  12844 ;	.\ecen4350_lcd_v4.c:3121: setRate: 
      00485F                      12845 00132$:
                                  12846 ;	.\ecen4350_lcd_v4.c:3122: setTextSize(2);
      00485F 75 82 02         [24]12847 	mov	dpl,#0x02
      004862 12r04rD0         [24]12848 	lcall	_setTextSize
                                  12849 ;	.\ecen4350_lcd_v4.c:3123: setColorDefault();
      004865 12r15r94         [24]12850 	lcall	_setColorDefault
                                  12851 ;	.\ecen4350_lcd_v4.c:3124: setCursor(0, 60);
      004868 75*00 3C         [24]12852 	mov	_setCursor_PARM_2,#0x3c
      00486B 75*01 00         [24]12853 	mov	(_setCursor_PARM_2 + 1),#0x00
      00486E 90 00 00         [24]12854 	mov	dptr,#0x0000
      004871 12r04rB6         [24]12855 	lcall	_setCursor
                                  12856 ;	.\ecen4350_lcd_v4.c:3125: LCD_string_write(" <1> 1200 Baud\n");
      004874 90r0Er71         [24]12857 	mov	dptr,#___str_155
      004877 75 F0 80         [24]12858 	mov	b,#0x80
      00487A 12r0FrD0         [24]12859 	lcall	_LCD_string_write
                                  12860 ;	.\ecen4350_lcd_v4.c:3126: setCursor(0, 100);
      00487D 75*00 64         [24]12861 	mov	_setCursor_PARM_2,#0x64
      004880 75*01 00         [24]12862 	mov	(_setCursor_PARM_2 + 1),#0x00
      004883 90 00 00         [24]12863 	mov	dptr,#0x0000
      004886 12r04rB6         [24]12864 	lcall	_setCursor
                                  12865 ;	.\ecen4350_lcd_v4.c:3127: LCD_string_write(" <2> 2400 Baud\n");
      004889 90r0Er81         [24]12866 	mov	dptr,#___str_156
      00488C 75 F0 80         [24]12867 	mov	b,#0x80
      00488F 12r0FrD0         [24]12868 	lcall	_LCD_string_write
                                  12869 ;	.\ecen4350_lcd_v4.c:3128: setCursor(0, 140);
      004892 75*00 8C         [24]12870 	mov	_setCursor_PARM_2,#0x8c
      004895 75*01 00         [24]12871 	mov	(_setCursor_PARM_2 + 1),#0x00
      004898 90 00 00         [24]12872 	mov	dptr,#0x0000
      00489B 12r04rB6         [24]12873 	lcall	_setCursor
                                  12874 ;	.\ecen4350_lcd_v4.c:3129: LCD_string_write(" <3> 4800 Baud\n");
      00489E 90r0Er91         [24]12875 	mov	dptr,#___str_157
      0048A1 75 F0 80         [24]12876 	mov	b,#0x80
      0048A4 12r0FrD0         [24]12877 	lcall	_LCD_string_write
                                  12878 ;	.\ecen4350_lcd_v4.c:3130: setCursor(0, 180);
      0048A7 75*00 B4         [24]12879 	mov	_setCursor_PARM_2,#0xb4
      0048AA 75*01 00         [24]12880 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048AD 90 00 00         [24]12881 	mov	dptr,#0x0000
      0048B0 12r04rB6         [24]12882 	lcall	_setCursor
                                  12883 ;	.\ecen4350_lcd_v4.c:3131: LCD_string_write(" <4> 9600 Baud\n");
      0048B3 90r0ErA1         [24]12884 	mov	dptr,#___str_158
      0048B6 75 F0 80         [24]12885 	mov	b,#0x80
      0048B9 12r0FrD0         [24]12886 	lcall	_LCD_string_write
                                  12887 ;	.\ecen4350_lcd_v4.c:3132: setCursor(0, 220);
      0048BC 75*00 DC         [24]12888 	mov	_setCursor_PARM_2,#0xdc
      0048BF 75*01 00         [24]12889 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048C2 90 00 00         [24]12890 	mov	dptr,#0x0000
      0048C5 12r04rB6         [24]12891 	lcall	_setCursor
                                  12892 ;	.\ecen4350_lcd_v4.c:3133: LCD_string_write(" <5> 19200 Baud\n");
      0048C8 90r0ErB1         [24]12893 	mov	dptr,#___str_159
      0048CB 75 F0 80         [24]12894 	mov	b,#0x80
      0048CE 12r0FrD0         [24]12895 	lcall	_LCD_string_write
                                  12896 ;	.\ecen4350_lcd_v4.c:3134: baudInput:
      0048D1                      12897 00133$:
                                  12898 ;	.\ecen4350_lcd_v4.c:3135: selection = keyDetect();
      0048D1 12r10rEE         [24]12899 	lcall	_keyDetect
      0048D4 AF 82            [24]12900 	mov	r7,dpl
      0048D6 78r00            [12]12901 	mov	r0,#_selection
      0048D8 A6 07            [24]12902 	mov	@r0,ar7
                                  12903 ;	.\ecen4350_lcd_v4.c:3136: if (selection == '1' ) {
      0048DA BF 31 0A         [24]12904 	cjne	r7,#0x31,00135$
                                  12905 ;	.\ecen4350_lcd_v4.c:3137: TH1 = 0xE6;
      0048DD 75 8D E6         [24]12906 	mov	_TH1,#0xe6
                                  12907 ;	.\ecen4350_lcd_v4.c:3138: PCON = 0x00; //SMOD = 0
      0048E0 75 87 00         [24]12908 	mov	_PCON,#0x00
                                  12909 ;	.\ecen4350_lcd_v4.c:3139: baudSet = 1;
      0048E3 78r02            [12]12910 	mov	r0,#_baudSet
      0048E5 76 01            [12]12911 	mov	@r0,#0x01
      0048E7                      12912 00135$:
                                  12913 ;	.\ecen4350_lcd_v4.c:3141: if (selection == '2' ) {
      0048E7 BF 32 0A         [24]12914 	cjne	r7,#0x32,00137$
                                  12915 ;	.\ecen4350_lcd_v4.c:3142: TH1 = 0xF3;
      0048EA 75 8D F3         [24]12916 	mov	_TH1,#0xf3
                                  12917 ;	.\ecen4350_lcd_v4.c:3143: PCON = 0x00; //SMOD = 0
      0048ED 75 87 00         [24]12918 	mov	_PCON,#0x00
                                  12919 ;	.\ecen4350_lcd_v4.c:3144: baudSet = 1;
      0048F0 78r02            [12]12920 	mov	r0,#_baudSet
      0048F2 76 01            [12]12921 	mov	@r0,#0x01
      0048F4                      12922 00137$:
                                  12923 ;	.\ecen4350_lcd_v4.c:3146: if (selection == '3' ) {
      0048F4 BF 33 0A         [24]12924 	cjne	r7,#0x33,00139$
                                  12925 ;	.\ecen4350_lcd_v4.c:3147: TH1 = 0xF3;
      0048F7 75 8D F3         [24]12926 	mov	_TH1,#0xf3
                                  12927 ;	.\ecen4350_lcd_v4.c:3148: PCON = 0x80; //SMOD 1
      0048FA 75 87 80         [24]12928 	mov	_PCON,#0x80
                                  12929 ;	.\ecen4350_lcd_v4.c:3149: baudSet = 1; 
      0048FD 78r02            [12]12930 	mov	r0,#_baudSet
      0048FF 76 01            [12]12931 	mov	@r0,#0x01
      004901                      12932 00139$:
                                  12933 ;	.\ecen4350_lcd_v4.c:3151: if (selection == '4' ) {
      004901 BF 34 0A         [24]12934 	cjne	r7,#0x34,00141$
                                  12935 ;	.\ecen4350_lcd_v4.c:3152: TH1 = 0xFD;
      004904 75 8D FD         [24]12936 	mov	_TH1,#0xfd
                                  12937 ;	.\ecen4350_lcd_v4.c:3153: PCON = 0x00; //SMOD 0
      004907 75 87 00         [24]12938 	mov	_PCON,#0x00
                                  12939 ;	.\ecen4350_lcd_v4.c:3154: baudSet = 1;
      00490A 78r02            [12]12940 	mov	r0,#_baudSet
      00490C 76 01            [12]12941 	mov	@r0,#0x01
      00490E                      12942 00141$:
                                  12943 ;	.\ecen4350_lcd_v4.c:3156: if (selection == '5' ) {
      00490E BF 35 C0         [24]12944 	cjne	r7,#0x35,00133$
                                  12945 ;	.\ecen4350_lcd_v4.c:3157: TH1 = 0xFD;	
      004911 75 8D FD         [24]12946 	mov	_TH1,#0xfd
                                  12947 ;	.\ecen4350_lcd_v4.c:3158: PCON = 0x80; //SMOD 1
      004914 75 87 80         [24]12948 	mov	_PCON,#0x80
                                  12949 ;	.\ecen4350_lcd_v4.c:3159: baudSet = 1;
      004917 78r02            [12]12950 	mov	r0,#_baudSet
      004919 76 01            [12]12951 	mov	@r0,#0x01
                                  12952 ;	.\ecen4350_lcd_v4.c:3167: finish:
                                  12953 ;	.\ecen4350_lcd_v4.c:3168: return;
                                  12954 ;	.\ecen4350_lcd_v4.c:3169: }
      00491B 22               [24]12955 	ret
                                  12956 ;------------------------------------------------------------
                                  12957 ;Allocation info for local variables in function 'main'
                                  12958 ;------------------------------------------------------------
                                  12959 ;__1310720181              Allocated to registers 
                                  12960 ;__1310720182              Allocated to registers 
                                  12961 ;map_address               Allocated to registers 
                                  12962 ;d                         Allocated to registers 
                                  12963 ;__1310720184              Allocated to registers 
                                  12964 ;__1310720185              Allocated to registers 
                                  12965 ;map_address               Allocated to registers 
                                  12966 ;d                         Allocated to registers 
                                  12967 ;__1310720187              Allocated to registers 
                                  12968 ;__1310720188              Allocated to registers 
                                  12969 ;map_address               Allocated to registers 
                                  12970 ;d                         Allocated to registers 
                                  12971 ;__1310720190              Allocated to registers 
                                  12972 ;__1310720191              Allocated to registers 
                                  12973 ;map_address               Allocated to registers 
                                  12974 ;d                         Allocated to registers 
                                  12975 ;__1966080193              Allocated to registers 
                                  12976 ;__1966080194              Allocated to registers 
                                  12977 ;map_address               Allocated to registers 
                                  12978 ;d                         Allocated to registers 
                                  12979 ;__2621440196              Allocated to registers 
                                  12980 ;__2621440197              Allocated to registers 
                                  12981 ;map_address               Allocated to registers 
                                  12982 ;d                         Allocated to registers 
                                  12983 ;__2621440199              Allocated to registers 
                                  12984 ;__2621440200              Allocated to registers 
                                  12985 ;map_address               Allocated to registers 
                                  12986 ;d                         Allocated to registers 
                                  12987 ;__2621440202              Allocated to registers 
                                  12988 ;__2621440203              Allocated to registers 
                                  12989 ;map_address               Allocated to registers 
                                  12990 ;d                         Allocated to registers 
                                  12991 ;__2621440205              Allocated to registers 
                                  12992 ;__2621440206              Allocated to registers 
                                  12993 ;map_address               Allocated to registers 
                                  12994 ;d                         Allocated to registers 
                                  12995 ;__2621440208              Allocated to registers 
                                  12996 ;__2621440209              Allocated to registers 
                                  12997 ;map_address               Allocated to registers 
                                  12998 ;d                         Allocated to registers 
                                  12999 ;__2621440211              Allocated to registers 
                                  13000 ;__2621440212              Allocated to registers 
                                  13001 ;map_address               Allocated to registers 
                                  13002 ;d                         Allocated to registers 
                                  13003 ;__2621440214              Allocated to registers 
                                  13004 ;__2621440215              Allocated to registers 
                                  13005 ;map_address               Allocated to registers 
                                  13006 ;d                         Allocated to registers 
                                  13007 ;__2621440217              Allocated to registers 
                                  13008 ;__2621440218              Allocated to registers 
                                  13009 ;map_address               Allocated to registers 
                                  13010 ;d                         Allocated to registers 
                                  13011 ;__2621440220              Allocated to registers 
                                  13012 ;__2621440221              Allocated to registers 
                                  13013 ;map_address               Allocated to registers 
                                  13014 ;d                         Allocated to registers 
                                  13015 ;__2621440223              Allocated to registers 
                                  13016 ;__2621440224              Allocated to registers 
                                  13017 ;map_address               Allocated to registers 
                                  13018 ;d                         Allocated to registers 
                                  13019 ;__2621440226              Allocated to registers 
                                  13020 ;__2621440227              Allocated to registers 
                                  13021 ;map_address               Allocated to registers 
                                  13022 ;d                         Allocated to registers 
                                  13023 ;__2621440229              Allocated to registers 
                                  13024 ;__2621440230              Allocated to registers 
                                  13025 ;map_address               Allocated to registers 
                                  13026 ;d                         Allocated to registers 
                                  13027 ;__3276800232              Allocated to registers 
                                  13028 ;__3276800233              Allocated to registers 
                                  13029 ;map_address               Allocated to registers 
                                  13030 ;d                         Allocated to registers 
                                  13031 ;__3276800235              Allocated to registers 
                                  13032 ;__3276800236              Allocated to registers 
                                  13033 ;map_address               Allocated to registers 
                                  13034 ;d                         Allocated to registers 
                                  13035 ;__3276800238              Allocated to registers 
                                  13036 ;__3276800239              Allocated to registers 
                                  13037 ;map_address               Allocated to registers 
                                  13038 ;d                         Allocated to registers 
                                  13039 ;__3276800241              Allocated to registers 
                                  13040 ;__3276800242              Allocated to registers 
                                  13041 ;map_address               Allocated to registers 
                                  13042 ;d                         Allocated to registers 
                                  13043 ;validKey                  Allocated to registers r7 
                                  13044 ;------------------------------------------------------------
                                  13045 ;	.\ecen4350_lcd_v4.c:3173: void main() {
                                  13046 ;	-----------------------------------------
                                  13047 ;	 function main
                                  13048 ;	-----------------------------------------
      00491C                      13049 _main:
                                  13050 ;	.\ecen4350_lcd_v4.c:3174: __idata unsigned char validKey = 1;
      00491C 7F 01            [12]13051 	mov	r7,#0x01
                                  13052 ;	.\ecen4350_lcd_v4.c:3176: delay(10);
      00491E 90 00 0A         [24]13053 	mov	dptr,#0x000a
      004921 C0 07            [24]13054 	push	ar7
      004923 12r00rE0         [24]13055 	lcall	_delay
                                  13056 ;	.\ecen4350_lcd_v4.c:3177: iowrite8(seg7_address, ON);
      004926 85*04 82         [24]13057 	mov	dpl,_seg7_address
      004929 85*05 83         [24]13058 	mov	dph,(_seg7_address + 1)
                                  13059 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13060 ;	assignBit
      00492C D2 B5            [12]13061 	setb	_P3_5
                                  13062 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00492E E4               [12]13063 	clr	a
      00492F F0               [24]13064 	movx	@dptr,a
                                  13065 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13066 ;	assignBit
      004930 C2 B5            [12]13067 	clr	_P3_5
                                  13068 ;	.\ecen4350_lcd_v4.c:3178: delay(5);
      004932 90 00 05         [24]13069 	mov	dptr,#0x0005
      004935 12r00rE0         [24]13070 	lcall	_delay
                                  13071 ;	.\ecen4350_lcd_v4.c:3179: CD = 0;
                                  13072 ;	assignBit
      004938 C2 B4            [12]13073 	clr	_P3_4
                                  13074 ;	.\ecen4350_lcd_v4.c:3180: IOM = 0;
                                  13075 ;	assignBit
      00493A C2 B5            [12]13076 	clr	_P3_5
                                  13077 ;	.\ecen4350_lcd_v4.c:3181: rtcInit();							// RTC init
      00493C 12r02rF5         [24]13078 	lcall	_rtcInit
                                  13079 ;	.\ecen4350_lcd_v4.c:3183: TFT_LCD_INIT();						// LCD init
      00493F 12r05rEE         [24]13080 	lcall	_TFT_LCD_INIT
                                  13081 ;	.\ecen4350_lcd_v4.c:3184: iowrite8(seg7_address, SEG_H);		// [H]
      004942 85*04 82         [24]13082 	mov	dpl,_seg7_address
      004945 85*05 83         [24]13083 	mov	dph,(_seg7_address + 1)
                                  13084 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13085 ;	assignBit
      004948 D2 B5            [12]13086 	setb	_P3_5
                                  13087 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00494A 74 89            [12]13088 	mov	a,#0x89
      00494C F0               [24]13089 	movx	@dptr,a
                                  13090 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13091 ;	assignBit
      00494D C2 B5            [12]13092 	clr	_P3_5
                                  13093 ;	.\ecen4350_lcd_v4.c:3185: delay(40);							
      00494F 90 00 28         [24]13094 	mov	dptr,#0x0028
      004952 12r00rE0         [24]13095 	lcall	_delay
                                  13096 ;	.\ecen4350_lcd_v4.c:3186: iowrite8(seg7_address, 0b01111011); // [i.]
      004955 85*04 82         [24]13097 	mov	dpl,_seg7_address
      004958 85*05 83         [24]13098 	mov	dph,(_seg7_address + 1)
                                  13099 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13100 ;	assignBit
      00495B D2 B5            [12]13101 	setb	_P3_5
                                  13102 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00495D 74 7B            [12]13103 	mov	a,#0x7b
      00495F F0               [24]13104 	movx	@dptr,a
                                  13105 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13106 ;	assignBit
      004960 C2 B5            [12]13107 	clr	_P3_5
                                  13108 ;	.\ecen4350_lcd_v4.c:3187: delay(40);
      004962 90 00 28         [24]13109 	mov	dptr,#0x0028
      004965 12r00rE0         [24]13110 	lcall	_delay
                                  13111 ;	.\ecen4350_lcd_v4.c:3188: iowrite8(seg7_address, OFF);
      004968 85*04 82         [24]13112 	mov	dpl,_seg7_address
      00496B 85*05 83         [24]13113 	mov	dph,(_seg7_address + 1)
                                  13114 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13115 ;	assignBit
      00496E D2 B5            [12]13116 	setb	_P3_5
                                  13117 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004970 74 FF            [12]13118 	mov	a,#0xff
      004972 F0               [24]13119 	movx	@dptr,a
                                  13120 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13121 ;	assignBit
      004973 C2 B5            [12]13122 	clr	_P3_5
                                  13123 ;	.\ecen4350_lcd_v4.c:3189: delay(20);
      004975 90 00 14         [24]13124 	mov	dptr,#0x0014
      004978 12r00rE0         [24]13125 	lcall	_delay
                                  13126 ;	.\ecen4350_lcd_v4.c:3190: seg7Test();
      00497B 12r01r9A         [24]13127 	lcall	_seg7Test
                                  13128 ;	.\ecen4350_lcd_v4.c:3192: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      00497E 12r15r3C         [24]13129 	lcall	_writeSomeLines
                                  13130 ;	.\ecen4350_lcd_v4.c:3194: clearLCD();							// set LCD background
      004981 12r0Dr53         [24]13131 	lcall	_clearLCD
                                  13132 ;	.\ecen4350_lcd_v4.c:3195: setColorDefault();	// set text color
      004984 12r15r94         [24]13133 	lcall	_setColorDefault
                                  13134 ;	.\ecen4350_lcd_v4.c:3196: setCursor(30, 120);				
      004987 75*00 78         [24]13135 	mov	_setCursor_PARM_2,#0x78
      00498A 75*01 00         [24]13136 	mov	(_setCursor_PARM_2 + 1),#0x00
      00498D 90 00 1E         [24]13137 	mov	dptr,#0x001e
      004990 12r04rB6         [24]13138 	lcall	_setCursor
      004993 D0 07            [24]13139 	pop	ar7
                                  13140 ;	.\ecen4350_lcd_v4.c:3202: UART_en = 0;
      004995 78r01            [12]13141 	mov	r0,#_UART_en
      004997 76 00            [12]13142 	mov	@r0,#0x00
                                  13143 ;	.\ecen4350_lcd_v4.c:3205: loop:
      004999                      13144 00101$:
                                  13145 ;	.\ecen4350_lcd_v4.c:3206: iowrite8(seg7_address, OFF);
      004999 85*04 82         [24]13146 	mov	dpl,_seg7_address
      00499C 85*05 83         [24]13147 	mov	dph,(_seg7_address + 1)
                                  13148 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13149 ;	assignBit
      00499F D2 B5            [12]13150 	setb	_P3_5
                                  13151 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0049A1 74 FF            [12]13152 	mov	a,#0xff
      0049A3 F0               [24]13153 	movx	@dptr,a
                                  13154 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13155 ;	assignBit
      0049A4 C2 B5            [12]13156 	clr	_P3_5
                                  13157 ;	.\ecen4350_lcd_v4.c:3207: clearLCD();
      0049A6 C0 07            [24]13158 	push	ar7
      0049A8 12r0Dr53         [24]13159 	lcall	_clearLCD
                                  13160 ;	.\ecen4350_lcd_v4.c:3208: setCursor(30, 120);
      0049AB 75*00 78         [24]13161 	mov	_setCursor_PARM_2,#0x78
      0049AE 75*01 00         [24]13162 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049B1 90 00 1E         [24]13163 	mov	dptr,#0x001e
      0049B4 12r04rB6         [24]13164 	lcall	_setCursor
                                  13165 ;	.\ecen4350_lcd_v4.c:3209: setTextSize(3);
      0049B7 75 82 03         [24]13166 	mov	dpl,#0x03
      0049BA 12r04rD0         [24]13167 	lcall	_setTextSize
                                  13168 ;	.\ecen4350_lcd_v4.c:3210: setColorSelect();
      0049BD 12r15r9F         [24]13169 	lcall	_setColorSelect
                                  13170 ;	.\ecen4350_lcd_v4.c:3211: rtcPrint();
      0049C0 12r03rA6         [24]13171 	lcall	_rtcPrint
                                  13172 ;	.\ecen4350_lcd_v4.c:3212: printMenu();
      0049C3 12r16rF9         [24]13173 	lcall	_printMenu
      0049C6 D0 07            [24]13174 	pop	ar7
                                  13175 ;	.\ecen4350_lcd_v4.c:3213: inputKey:
      0049C8                      13176 00102$:
                                  13177 ;	.\ecen4350_lcd_v4.c:3214: selection = keyDetect();
      0049C8 C0 07            [24]13178 	push	ar7
      0049CA 12r10rEE         [24]13179 	lcall	_keyDetect
      0049CD AE 82            [24]13180 	mov	r6,dpl
      0049CF D0 07            [24]13181 	pop	ar7
      0049D1 78r00            [12]13182 	mov	r0,#_selection
      0049D3 A6 06            [24]13183 	mov	@r0,ar6
                                  13184 ;	.\ecen4350_lcd_v4.c:3215: if (selection == 'D') {
      0049D5 BE 44 70         [24]13185 	cjne	r6,#0x44,00106$
                                  13186 ;	.\ecen4350_lcd_v4.c:3216: iowrite8(seg7_address, ON);
      0049D8 85*04 82         [24]13187 	mov	dpl,_seg7_address
      0049DB 85*05 83         [24]13188 	mov	dph,(_seg7_address + 1)
                                  13189 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13190 ;	assignBit
      0049DE D2 B5            [12]13191 	setb	_P3_5
                                  13192 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0049E0 E4               [12]13193 	clr	a
      0049E1 F0               [24]13194 	movx	@dptr,a
                                  13195 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13196 ;	assignBit
      0049E2 C2 B5            [12]13197 	clr	_P3_5
                                  13198 ;	.\ecen4350_lcd_v4.c:3217: setCursor(10,60);
      0049E4 75*00 3C         [24]13199 	mov	_setCursor_PARM_2,#0x3c
      0049E7 75*01 00         [24]13200 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049EA 90 00 0A         [24]13201 	mov	dptr,#0x000a
      0049ED C0 07            [24]13202 	push	ar7
      0049EF 12r04rB6         [24]13203 	lcall	_setCursor
                                  13204 ;	.\ecen4350_lcd_v4.c:3218: setColorHighlight1();
      0049F2 12r15rAA         [24]13205 	lcall	_setColorHighlight1
                                  13206 ;	.\ecen4350_lcd_v4.c:3219: LCD_string_write("<D>");
      0049F5 90r0ErC2         [24]13207 	mov	dptr,#___str_160
      0049F8 75 F0 80         [24]13208 	mov	b,#0x80
      0049FB 12r0FrD0         [24]13209 	lcall	_LCD_string_write
                                  13210 ;	.\ecen4350_lcd_v4.c:3220: setColorHighlight2();
      0049FE 12r15rB6         [24]13211 	lcall	_setColorHighlight2
                                  13212 ;	.\ecen4350_lcd_v4.c:3221: LCD_string_write(" DUMP\n");
      004A01 90r05r69         [24]13213 	mov	dptr,#___str_7
      004A04 75 F0 80         [24]13214 	mov	b,#0x80
      004A07 12r0FrD0         [24]13215 	lcall	_LCD_string_write
                                  13216 ;	.\ecen4350_lcd_v4.c:3222: delay(20);
      004A0A 90 00 14         [24]13217 	mov	dptr,#0x0014
      004A0D 12r00rE0         [24]13218 	lcall	_delay
      004A10 D0 07            [24]13219 	pop	ar7
                                  13220 ;	.\ecen4350_lcd_v4.c:3223: iowrite8(seg7_address, SEG_D);
      004A12 85*04 82         [24]13221 	mov	dpl,_seg7_address
      004A15 85*05 83         [24]13222 	mov	dph,(_seg7_address + 1)
                                  13223 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13224 ;	assignBit
      004A18 D2 B5            [12]13225 	setb	_P3_5
                                  13226 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A1A 74 A1            [12]13227 	mov	a,#0xa1
      004A1C F0               [24]13228 	movx	@dptr,a
                                  13229 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13230 ;	assignBit
      004A1D C2 B5            [12]13231 	clr	_P3_5
                                  13232 ;	.\ecen4350_lcd_v4.c:3224: if (validKey == 0) {
      004A1F EF               [12]13233 	mov	a,r7
      004A20 70 1C            [24]13234 	jnz	00104$
                                  13235 ;	.\ecen4350_lcd_v4.c:3225: setColorDefault();
      004A22 C0 07            [24]13236 	push	ar7
      004A24 12r15r94         [24]13237 	lcall	_setColorDefault
                                  13238 ;	.\ecen4350_lcd_v4.c:3226: setCursor(60, 280);
      004A27 75*00 18         [24]13239 	mov	_setCursor_PARM_2,#0x18
      004A2A 75*01 01         [24]13240 	mov	(_setCursor_PARM_2 + 1),#0x01
      004A2D 90 00 3C         [24]13241 	mov	dptr,#0x003c
      004A30 12r04rB6         [24]13242 	lcall	_setCursor
                                  13243 ;	.\ecen4350_lcd_v4.c:3227: LCD_string_write("          ");
      004A33 90r0ErC6         [24]13244 	mov	dptr,#___str_161
      004A36 75 F0 80         [24]13245 	mov	b,#0x80
      004A39 12r0FrD0         [24]13246 	lcall	_LCD_string_write
      004A3C D0 07            [24]13247 	pop	ar7
      004A3E                      13248 00104$:
                                  13249 ;	.\ecen4350_lcd_v4.c:3229: dump();
      004A3E C0 07            [24]13250 	push	ar7
      004A40 12r19r68         [24]13251 	lcall	_dump
      004A43 D0 07            [24]13252 	pop	ar7
                                  13253 ;	.\ecen4350_lcd_v4.c:3230: goto loop;
      004A45 02r49r99         [24]13254 	ljmp	00101$
      004A48                      13255 00106$:
                                  13256 ;	.\ecen4350_lcd_v4.c:3231: } if(selection == 'B') {
      004A48 BE 42 70         [24]13257 	cjne	r6,#0x42,00110$
                                  13258 ;	.\ecen4350_lcd_v4.c:3232: iowrite8(seg7_address, ON);
      004A4B 85*04 82         [24]13259 	mov	dpl,_seg7_address
      004A4E 85*05 83         [24]13260 	mov	dph,(_seg7_address + 1)
                                  13261 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13262 ;	assignBit
      004A51 D2 B5            [12]13263 	setb	_P3_5
                                  13264 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A53 E4               [12]13265 	clr	a
      004A54 F0               [24]13266 	movx	@dptr,a
                                  13267 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13268 ;	assignBit
      004A55 C2 B5            [12]13269 	clr	_P3_5
                                  13270 ;	.\ecen4350_lcd_v4.c:3233: setCursor(130, 60);
      004A57 75*00 3C         [24]13271 	mov	_setCursor_PARM_2,#0x3c
      004A5A 75*01 00         [24]13272 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A5D 90 00 82         [24]13273 	mov	dptr,#0x0082
      004A60 C0 07            [24]13274 	push	ar7
      004A62 12r04rB6         [24]13275 	lcall	_setCursor
                                  13276 ;	.\ecen4350_lcd_v4.c:3234: setColorHighlight1();
      004A65 12r15rAA         [24]13277 	lcall	_setColorHighlight1
                                  13278 ;	.\ecen4350_lcd_v4.c:3235: LCD_string_write("<B>");
      004A68 90r0ErD1         [24]13279 	mov	dptr,#___str_162
      004A6B 75 F0 80         [24]13280 	mov	b,#0x80
      004A6E 12r0FrD0         [24]13281 	lcall	_LCD_string_write
                                  13282 ;	.\ecen4350_lcd_v4.c:3236: setColorHighlight2();
      004A71 12r15rB6         [24]13283 	lcall	_setColorHighlight2
                                  13284 ;	.\ecen4350_lcd_v4.c:3237: LCD_string_write(" MOVE\n");
      004A74 90r05r75         [24]13285 	mov	dptr,#___str_9
      004A77 75 F0 80         [24]13286 	mov	b,#0x80
      004A7A 12r0FrD0         [24]13287 	lcall	_LCD_string_write
                                  13288 ;	.\ecen4350_lcd_v4.c:3238: delay(20);
      004A7D 90 00 14         [24]13289 	mov	dptr,#0x0014
      004A80 12r00rE0         [24]13290 	lcall	_delay
      004A83 D0 07            [24]13291 	pop	ar7
                                  13292 ;	.\ecen4350_lcd_v4.c:3239: iowrite8(seg7_address, SEG_B);
      004A85 85*04 82         [24]13293 	mov	dpl,_seg7_address
      004A88 85*05 83         [24]13294 	mov	dph,(_seg7_address + 1)
                                  13295 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13296 ;	assignBit
      004A8B D2 B5            [12]13297 	setb	_P3_5
                                  13298 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A8D 74 83            [12]13299 	mov	a,#0x83
      004A8F F0               [24]13300 	movx	@dptr,a
                                  13301 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13302 ;	assignBit
      004A90 C2 B5            [12]13303 	clr	_P3_5
                                  13304 ;	.\ecen4350_lcd_v4.c:3240: if (validKey == 0) {
      004A92 EF               [12]13305 	mov	a,r7
      004A93 70 1C            [24]13306 	jnz	00108$
                                  13307 ;	.\ecen4350_lcd_v4.c:3241: setColorDefault();
      004A95 C0 07            [24]13308 	push	ar7
      004A97 12r15r94         [24]13309 	lcall	_setColorDefault
                                  13310 ;	.\ecen4350_lcd_v4.c:3242: setCursor(60, 280);
      004A9A 75*00 18         [24]13311 	mov	_setCursor_PARM_2,#0x18
      004A9D 75*01 01         [24]13312 	mov	(_setCursor_PARM_2 + 1),#0x01
      004AA0 90 00 3C         [24]13313 	mov	dptr,#0x003c
      004AA3 12r04rB6         [24]13314 	lcall	_setCursor
                                  13315 ;	.\ecen4350_lcd_v4.c:3243: LCD_string_write("          ");
      004AA6 90r0ErC6         [24]13316 	mov	dptr,#___str_161
      004AA9 75 F0 80         [24]13317 	mov	b,#0x80
      004AAC 12r0FrD0         [24]13318 	lcall	_LCD_string_write
      004AAF D0 07            [24]13319 	pop	ar7
      004AB1                      13320 00108$:
                                  13321 ;	.\ecen4350_lcd_v4.c:3245: move();
      004AB1 C0 07            [24]13322 	push	ar7
      004AB3 12r22r29         [24]13323 	lcall	_move
      004AB6 D0 07            [24]13324 	pop	ar7
                                  13325 ;	.\ecen4350_lcd_v4.c:3246: goto loop;
      004AB8 02r49r99         [24]13326 	ljmp	00101$
      004ABB                      13327 00110$:
                                  13328 ;	.\ecen4350_lcd_v4.c:3247: } if(selection == 'E') {
      004ABB BE 45 70         [24]13329 	cjne	r6,#0x45,00114$
                                  13330 ;	.\ecen4350_lcd_v4.c:3248: iowrite8(seg7_address, ON);
      004ABE 85*04 82         [24]13331 	mov	dpl,_seg7_address
      004AC1 85*05 83         [24]13332 	mov	dph,(_seg7_address + 1)
                                  13333 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13334 ;	assignBit
      004AC4 D2 B5            [12]13335 	setb	_P3_5
                                  13336 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004AC6 E4               [12]13337 	clr	a
      004AC7 F0               [24]13338 	movx	@dptr,a
                                  13339 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13340 ;	assignBit
      004AC8 C2 B5            [12]13341 	clr	_P3_5
                                  13342 ;	.\ecen4350_lcd_v4.c:3249: setCursor(10, 100);
      004ACA 75*00 64         [24]13343 	mov	_setCursor_PARM_2,#0x64
      004ACD 75*01 00         [24]13344 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AD0 90 00 0A         [24]13345 	mov	dptr,#0x000a
      004AD3 C0 07            [24]13346 	push	ar7
      004AD5 12r04rB6         [24]13347 	lcall	_setCursor
                                  13348 ;	.\ecen4350_lcd_v4.c:3250: setColorHighlight1();
      004AD8 12r15rAA         [24]13349 	lcall	_setColorHighlight1
                                  13350 ;	.\ecen4350_lcd_v4.c:3251: LCD_string_write("<E>");
      004ADB 90r0ErD5         [24]13351 	mov	dptr,#___str_163
      004ADE 75 F0 80         [24]13352 	mov	b,#0x80
      004AE1 12r0FrD0         [24]13353 	lcall	_LCD_string_write
                                  13354 ;	.\ecen4350_lcd_v4.c:3252: setColorHighlight2();
      004AE4 12r15rB6         [24]13355 	lcall	_setColorHighlight2
                                  13356 ;	.\ecen4350_lcd_v4.c:3253: LCD_string_write(" EDIT\n");
      004AE7 90r05r81         [24]13357 	mov	dptr,#___str_11
      004AEA 75 F0 80         [24]13358 	mov	b,#0x80
      004AED 12r0FrD0         [24]13359 	lcall	_LCD_string_write
                                  13360 ;	.\ecen4350_lcd_v4.c:3254: delay(20);
      004AF0 90 00 14         [24]13361 	mov	dptr,#0x0014
      004AF3 12r00rE0         [24]13362 	lcall	_delay
      004AF6 D0 07            [24]13363 	pop	ar7
                                  13364 ;	.\ecen4350_lcd_v4.c:3255: iowrite8(seg7_address, SEG_E);
      004AF8 85*04 82         [24]13365 	mov	dpl,_seg7_address
      004AFB 85*05 83         [24]13366 	mov	dph,(_seg7_address + 1)
                                  13367 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13368 ;	assignBit
      004AFE D2 B5            [12]13369 	setb	_P3_5
                                  13370 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004B00 74 86            [12]13371 	mov	a,#0x86
      004B02 F0               [24]13372 	movx	@dptr,a
                                  13373 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13374 ;	assignBit
      004B03 C2 B5            [12]13375 	clr	_P3_5
                                  13376 ;	.\ecen4350_lcd_v4.c:3256: if (validKey == 0) {
      004B05 EF               [12]13377 	mov	a,r7
      004B06 70 1C            [24]13378 	jnz	00112$
                                  13379 ;	.\ecen4350_lcd_v4.c:3257: setColorDefault();
      004B08 C0 07            [24]13380 	push	ar7
      004B0A 12r15r94         [24]13381 	lcall	_setColorDefault
                                  13382 ;	.\ecen4350_lcd_v4.c:3258: setCursor(60, 280);
      004B0D 75*00 18         [24]13383 	mov	_setCursor_PARM_2,#0x18
      004B10 75*01 01         [24]13384 	mov	(_setCursor_PARM_2 + 1),#0x01
      004B13 90 00 3C         [24]13385 	mov	dptr,#0x003c
      004B16 12r04rB6         [24]13386 	lcall	_setCursor
                                  13387 ;	.\ecen4350_lcd_v4.c:3259: LCD_string_write("          ");
      004B19 90r0ErC6         [24]13388 	mov	dptr,#___str_161
      004B1C 75 F0 80         [24]13389 	mov	b,#0x80
      004B1F 12r0FrD0         [24]13390 	lcall	_LCD_string_write
      004B22 D0 07            [24]13391 	pop	ar7
      004B24                      13392 00112$:
                                  13393 ;	.\ecen4350_lcd_v4.c:3261: edit();
      004B24 C0 07            [24]13394 	push	ar7
      004B26 12r27r92         [24]13395 	lcall	_edit
      004B29 D0 07            [24]13396 	pop	ar7
                                  13397 ;	.\ecen4350_lcd_v4.c:3262: goto loop;
      004B2B 02r49r99         [24]13398 	ljmp	00101$
      004B2E                      13399 00114$:
                                  13400 ;	.\ecen4350_lcd_v4.c:3263: } if(selection == 'F') {
      004B2E BE 46 70         [24]13401 	cjne	r6,#0x46,00118$
                                  13402 ;	.\ecen4350_lcd_v4.c:3264: iowrite8(seg7_address, ON);
      004B31 85*04 82         [24]13403 	mov	dpl,_seg7_address
      004B34 85*05 83         [24]13404 	mov	dph,(_seg7_address + 1)
                                  13405 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13406 ;	assignBit
      004B37 D2 B5            [12]13407 	setb	_P3_5
                                  13408 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004B39 E4               [12]13409 	clr	a
      004B3A F0               [24]13410 	movx	@dptr,a
                                  13411 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13412 ;	assignBit
      004B3B C2 B5            [12]13413 	clr	_P3_5
                                  13414 ;	.\ecen4350_lcd_v4.c:3265: setCursor(130, 100);
      004B3D 75*00 64         [24]13415 	mov	_setCursor_PARM_2,#0x64
      004B40 75*01 00         [24]13416 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B43 90 00 82         [24]13417 	mov	dptr,#0x0082
      004B46 C0 07            [24]13418 	push	ar7
      004B48 12r04rB6         [24]13419 	lcall	_setCursor
                                  13420 ;	.\ecen4350_lcd_v4.c:3266: setColorHighlight1();
      004B4B 12r15rAA         [24]13421 	lcall	_setColorHighlight1
                                  13422 ;	.\ecen4350_lcd_v4.c:3267: LCD_string_write("<F>");
      004B4E 90r0ErD9         [24]13423 	mov	dptr,#___str_164
      004B51 75 F0 80         [24]13424 	mov	b,#0x80
      004B54 12r0FrD0         [24]13425 	lcall	_LCD_string_write
                                  13426 ;	.\ecen4350_lcd_v4.c:3268: setColorHighlight2();
      004B57 12r15rB6         [24]13427 	lcall	_setColorHighlight2
                                  13428 ;	.\ecen4350_lcd_v4.c:3269: LCD_string_write(" FIND\n");
      004B5A 90r05r8D         [24]13429 	mov	dptr,#___str_13
      004B5D 75 F0 80         [24]13430 	mov	b,#0x80
      004B60 12r0FrD0         [24]13431 	lcall	_LCD_string_write
                                  13432 ;	.\ecen4350_lcd_v4.c:3270: delay(20);
      004B63 90 00 14         [24]13433 	mov	dptr,#0x0014
      004B66 12r00rE0         [24]13434 	lcall	_delay
      004B69 D0 07            [24]13435 	pop	ar7
                                  13436 ;	.\ecen4350_lcd_v4.c:3271: iowrite8(seg7_address, SEG_F);
      004B6B 85*04 82         [24]13437 	mov	dpl,_seg7_address
      004B6E 85*05 83         [24]13438 	mov	dph,(_seg7_address + 1)
                                  13439 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13440 ;	assignBit
      004B71 D2 B5            [12]13441 	setb	_P3_5
                                  13442 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004B73 74 8E            [12]13443 	mov	a,#0x8e
      004B75 F0               [24]13444 	movx	@dptr,a
                                  13445 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13446 ;	assignBit
      004B76 C2 B5            [12]13447 	clr	_P3_5
                                  13448 ;	.\ecen4350_lcd_v4.c:3272: if (validKey == 0) {
      004B78 EF               [12]13449 	mov	a,r7
      004B79 70 1C            [24]13450 	jnz	00116$
                                  13451 ;	.\ecen4350_lcd_v4.c:3273: setColorDefault();
      004B7B C0 07            [24]13452 	push	ar7
      004B7D 12r15r94         [24]13453 	lcall	_setColorDefault
                                  13454 ;	.\ecen4350_lcd_v4.c:3274: setCursor(60, 280);
      004B80 75*00 18         [24]13455 	mov	_setCursor_PARM_2,#0x18
      004B83 75*01 01         [24]13456 	mov	(_setCursor_PARM_2 + 1),#0x01
      004B86 90 00 3C         [24]13457 	mov	dptr,#0x003c
      004B89 12r04rB6         [24]13458 	lcall	_setCursor
                                  13459 ;	.\ecen4350_lcd_v4.c:3275: LCD_string_write("          ");
      004B8C 90r0ErC6         [24]13460 	mov	dptr,#___str_161
      004B8F 75 F0 80         [24]13461 	mov	b,#0x80
      004B92 12r0FrD0         [24]13462 	lcall	_LCD_string_write
      004B95 D0 07            [24]13463 	pop	ar7
      004B97                      13464 00116$:
                                  13465 ;	.\ecen4350_lcd_v4.c:3277: find();
      004B97 C0 07            [24]13466 	push	ar7
      004B99 12r2ErEE         [24]13467 	lcall	_find
      004B9C D0 07            [24]13468 	pop	ar7
                                  13469 ;	.\ecen4350_lcd_v4.c:3278: goto loop;
      004B9E 02r49r99         [24]13470 	ljmp	00101$
      004BA1                      13471 00118$:
                                  13472 ;	.\ecen4350_lcd_v4.c:3279: } if(selection == 'C') {
      004BA1 BE 43 70         [24]13473 	cjne	r6,#0x43,00122$
                                  13474 ;	.\ecen4350_lcd_v4.c:3280: iowrite8(seg7_address, ON);
      004BA4 85*04 82         [24]13475 	mov	dpl,_seg7_address
      004BA7 85*05 83         [24]13476 	mov	dph,(_seg7_address + 1)
                                  13477 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13478 ;	assignBit
      004BAA D2 B5            [12]13479 	setb	_P3_5
                                  13480 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004BAC E4               [12]13481 	clr	a
      004BAD F0               [24]13482 	movx	@dptr,a
                                  13483 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13484 ;	assignBit
      004BAE C2 B5            [12]13485 	clr	_P3_5
                                  13486 ;	.\ecen4350_lcd_v4.c:3281: setCursor(10, 160);
      004BB0 75*00 A0         [24]13487 	mov	_setCursor_PARM_2,#0xa0
      004BB3 75*01 00         [24]13488 	mov	(_setCursor_PARM_2 + 1),#0x00
      004BB6 90 00 0A         [24]13489 	mov	dptr,#0x000a
      004BB9 C0 07            [24]13490 	push	ar7
      004BBB 12r04rB6         [24]13491 	lcall	_setCursor
                                  13492 ;	.\ecen4350_lcd_v4.c:3282: setColorHighlight1();
      004BBE 12r15rAA         [24]13493 	lcall	_setColorHighlight1
                                  13494 ;	.\ecen4350_lcd_v4.c:3283: LCD_string_write("<C>");
      004BC1 90r0ErDD         [24]13495 	mov	dptr,#___str_165
      004BC4 75 F0 80         [24]13496 	mov	b,#0x80
      004BC7 12r0FrD0         [24]13497 	lcall	_LCD_string_write
                                  13498 ;	.\ecen4350_lcd_v4.c:3284: setColorHighlight2();
      004BCA 12r15rB6         [24]13499 	lcall	_setColorHighlight2
                                  13500 ;	.\ecen4350_lcd_v4.c:3285: LCD_string_write(" COUNT\n");
      004BCD 90r05r99         [24]13501 	mov	dptr,#___str_15
      004BD0 75 F0 80         [24]13502 	mov	b,#0x80
      004BD3 12r0FrD0         [24]13503 	lcall	_LCD_string_write
                                  13504 ;	.\ecen4350_lcd_v4.c:3286: delay(20);
      004BD6 90 00 14         [24]13505 	mov	dptr,#0x0014
      004BD9 12r00rE0         [24]13506 	lcall	_delay
      004BDC D0 07            [24]13507 	pop	ar7
                                  13508 ;	.\ecen4350_lcd_v4.c:3287: iowrite8(seg7_address, SEG_C);
      004BDE 85*04 82         [24]13509 	mov	dpl,_seg7_address
      004BE1 85*05 83         [24]13510 	mov	dph,(_seg7_address + 1)
                                  13511 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13512 ;	assignBit
      004BE4 D2 B5            [12]13513 	setb	_P3_5
                                  13514 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004BE6 74 C6            [12]13515 	mov	a,#0xc6
      004BE8 F0               [24]13516 	movx	@dptr,a
                                  13517 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13518 ;	assignBit
      004BE9 C2 B5            [12]13519 	clr	_P3_5
                                  13520 ;	.\ecen4350_lcd_v4.c:3288: if (validKey == 0) {
      004BEB EF               [12]13521 	mov	a,r7
      004BEC 70 1C            [24]13522 	jnz	00120$
                                  13523 ;	.\ecen4350_lcd_v4.c:3289: setColorDefault();
      004BEE C0 07            [24]13524 	push	ar7
      004BF0 12r15r94         [24]13525 	lcall	_setColorDefault
                                  13526 ;	.\ecen4350_lcd_v4.c:3290: setCursor(60, 280);
      004BF3 75*00 18         [24]13527 	mov	_setCursor_PARM_2,#0x18
      004BF6 75*01 01         [24]13528 	mov	(_setCursor_PARM_2 + 1),#0x01
      004BF9 90 00 3C         [24]13529 	mov	dptr,#0x003c
      004BFC 12r04rB6         [24]13530 	lcall	_setCursor
                                  13531 ;	.\ecen4350_lcd_v4.c:3291: LCD_string_write("          ");
      004BFF 90r0ErC6         [24]13532 	mov	dptr,#___str_161
      004C02 75 F0 80         [24]13533 	mov	b,#0x80
      004C05 12r0FrD0         [24]13534 	lcall	_LCD_string_write
      004C08 D0 07            [24]13535 	pop	ar7
      004C0A                      13536 00120$:
                                  13537 ;	.\ecen4350_lcd_v4.c:3293: count();
      004C0A C0 07            [24]13538 	push	ar7
      004C0C 12r39rF2         [24]13539 	lcall	_count
      004C0F D0 07            [24]13540 	pop	ar7
                                  13541 ;	.\ecen4350_lcd_v4.c:3294: goto loop;
      004C11 02r49r99         [24]13542 	ljmp	00101$
      004C14                      13543 00122$:
                                  13544 ;	.\ecen4350_lcd_v4.c:3295: } if(selection == 'A') {
      004C14 BE 41 70         [24]13545 	cjne	r6,#0x41,00126$
                                  13546 ;	.\ecen4350_lcd_v4.c:3296: iowrite8(seg7_address, ON);
      004C17 85*04 82         [24]13547 	mov	dpl,_seg7_address
      004C1A 85*05 83         [24]13548 	mov	dph,(_seg7_address + 1)
                                  13549 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13550 ;	assignBit
      004C1D D2 B5            [12]13551 	setb	_P3_5
                                  13552 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C1F E4               [12]13553 	clr	a
      004C20 F0               [24]13554 	movx	@dptr,a
                                  13555 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13556 ;	assignBit
      004C21 C2 B5            [12]13557 	clr	_P3_5
                                  13558 ;	.\ecen4350_lcd_v4.c:3297: setCursor(10, 180);
      004C23 75*00 B4         [24]13559 	mov	_setCursor_PARM_2,#0xb4
      004C26 75*01 00         [24]13560 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C29 90 00 0A         [24]13561 	mov	dptr,#0x000a
      004C2C C0 07            [24]13562 	push	ar7
      004C2E 12r04rB6         [24]13563 	lcall	_setCursor
                                  13564 ;	.\ecen4350_lcd_v4.c:3298: setColorHighlight1();
      004C31 12r15rAA         [24]13565 	lcall	_setColorHighlight1
                                  13566 ;	.\ecen4350_lcd_v4.c:3299: LCD_string_write("<A>");
      004C34 90r0ErE1         [24]13567 	mov	dptr,#___str_166
      004C37 75 F0 80         [24]13568 	mov	b,#0x80
      004C3A 12r0FrD0         [24]13569 	lcall	_LCD_string_write
                                  13570 ;	.\ecen4350_lcd_v4.c:3300: setColorHighlight2();
      004C3D 12r15rB6         [24]13571 	lcall	_setColorHighlight2
                                  13572 ;	.\ecen4350_lcd_v4.c:3301: LCD_string_write(" MEM CHECK\n");
      004C40 90r05rA6         [24]13573 	mov	dptr,#___str_17
      004C43 75 F0 80         [24]13574 	mov	b,#0x80
      004C46 12r0FrD0         [24]13575 	lcall	_LCD_string_write
                                  13576 ;	.\ecen4350_lcd_v4.c:3302: delay(20);
      004C49 90 00 14         [24]13577 	mov	dptr,#0x0014
      004C4C 12r00rE0         [24]13578 	lcall	_delay
      004C4F D0 07            [24]13579 	pop	ar7
                                  13580 ;	.\ecen4350_lcd_v4.c:3303: iowrite8(seg7_address, SEG_A);
      004C51 85*04 82         [24]13581 	mov	dpl,_seg7_address
      004C54 85*05 83         [24]13582 	mov	dph,(_seg7_address + 1)
                                  13583 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13584 ;	assignBit
      004C57 D2 B5            [12]13585 	setb	_P3_5
                                  13586 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C59 74 88            [12]13587 	mov	a,#0x88
      004C5B F0               [24]13588 	movx	@dptr,a
                                  13589 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13590 ;	assignBit
      004C5C C2 B5            [12]13591 	clr	_P3_5
                                  13592 ;	.\ecen4350_lcd_v4.c:3304: if (validKey == 0) {
      004C5E EF               [12]13593 	mov	a,r7
      004C5F 70 1C            [24]13594 	jnz	00124$
                                  13595 ;	.\ecen4350_lcd_v4.c:3305: setColorDefault();
      004C61 C0 07            [24]13596 	push	ar7
      004C63 12r15r94         [24]13597 	lcall	_setColorDefault
                                  13598 ;	.\ecen4350_lcd_v4.c:3306: setCursor(60, 280);
      004C66 75*00 18         [24]13599 	mov	_setCursor_PARM_2,#0x18
      004C69 75*01 01         [24]13600 	mov	(_setCursor_PARM_2 + 1),#0x01
      004C6C 90 00 3C         [24]13601 	mov	dptr,#0x003c
      004C6F 12r04rB6         [24]13602 	lcall	_setCursor
                                  13603 ;	.\ecen4350_lcd_v4.c:3307: LCD_string_write("          ");
      004C72 90r0ErC6         [24]13604 	mov	dptr,#___str_161
      004C75 75 F0 80         [24]13605 	mov	b,#0x80
      004C78 12r0FrD0         [24]13606 	lcall	_LCD_string_write
      004C7B D0 07            [24]13607 	pop	ar7
      004C7D                      13608 00124$:
                                  13609 ;	.\ecen4350_lcd_v4.c:3309: check();
      004C7D C0 07            [24]13610 	push	ar7
      004C7F 12r44rCD         [24]13611 	lcall	_check
      004C82 D0 07            [24]13612 	pop	ar7
                                  13613 ;	.\ecen4350_lcd_v4.c:3310: goto loop;
      004C84 02r49r99         [24]13614 	ljmp	00101$
      004C87                      13615 00126$:
                                  13616 ;	.\ecen4350_lcd_v4.c:3311: } if(selection == '1') {
      004C87 BE 31 02         [24]13617 	cjne	r6,#0x31,00253$
      004C8A 80 03            [24]13618 	sjmp	00254$
      004C8C                      13619 00253$:
      004C8C 02r4Dr6F         [24]13620 	ljmp	00135$
      004C8F                      13621 00254$:
                                  13622 ;	.\ecen4350_lcd_v4.c:3312: if (UART_en == 1) {
      004C8F 78r01            [12]13623 	mov	r0,#_UART_en
      004C91 B6 01 6B         [24]13624 	cjne	@r0,#0x01,00132$
                                  13625 ;	.\ecen4350_lcd_v4.c:3313: iowrite8(seg7_address, ON);
      004C94 85*04 82         [24]13626 	mov	dpl,_seg7_address
      004C97 85*05 83         [24]13627 	mov	dph,(_seg7_address + 1)
                                  13628 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13629 ;	assignBit
      004C9A D2 B5            [12]13630 	setb	_P3_5
                                  13631 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C9C E4               [12]13632 	clr	a
      004C9D F0               [24]13633 	movx	@dptr,a
                                  13634 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13635 ;	assignBit
      004C9E C2 B5            [12]13636 	clr	_P3_5
                                  13637 ;	.\ecen4350_lcd_v4.c:3314: setCursor(10, 220);
      004CA0 75*00 DC         [24]13638 	mov	_setCursor_PARM_2,#0xdc
      004CA3 75*01 00         [24]13639 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CA6 90 00 0A         [24]13640 	mov	dptr,#0x000a
      004CA9 C0 07            [24]13641 	push	ar7
      004CAB 12r04rB6         [24]13642 	lcall	_setCursor
                                  13643 ;	.\ecen4350_lcd_v4.c:3315: setColorHighlight1();
      004CAE 12r15rAA         [24]13644 	lcall	_setColorHighlight1
                                  13645 ;	.\ecen4350_lcd_v4.c:3316: LCD_string_write("<1>");
      004CB1 90r0Er19         [24]13646 	mov	dptr,#___str_149
      004CB4 75 F0 80         [24]13647 	mov	b,#0x80
      004CB7 12r0FrD0         [24]13648 	lcall	_LCD_string_write
                                  13649 ;	.\ecen4350_lcd_v4.c:3317: setColorHighlight2();
      004CBA 12r15rB6         [24]13650 	lcall	_setColorHighlight2
                                  13651 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write(" UART [Enabled]\n");
      004CBD 90r0ErE5         [24]13652 	mov	dptr,#___str_167
      004CC0 75 F0 80         [24]13653 	mov	b,#0x80
      004CC3 12r0FrD0         [24]13654 	lcall	_LCD_string_write
                                  13655 ;	.\ecen4350_lcd_v4.c:3319: delay(20);
      004CC6 90 00 14         [24]13656 	mov	dptr,#0x0014
      004CC9 12r00rE0         [24]13657 	lcall	_delay
      004CCC D0 07            [24]13658 	pop	ar7
                                  13659 ;	.\ecen4350_lcd_v4.c:3320: iowrite8(seg7_address, SEG_U);
      004CCE 85*04 82         [24]13660 	mov	dpl,_seg7_address
      004CD1 85*05 83         [24]13661 	mov	dph,(_seg7_address + 1)
                                  13662 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13663 ;	assignBit
      004CD4 D2 B5            [12]13664 	setb	_P3_5
                                  13665 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004CD6 74 C1            [12]13666 	mov	a,#0xc1
      004CD8 F0               [24]13667 	movx	@dptr,a
                                  13668 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13669 ;	assignBit
      004CD9 C2 B5            [12]13670 	clr	_P3_5
                                  13671 ;	.\ecen4350_lcd_v4.c:3321: if (validKey == 0) {
      004CDB EF               [12]13672 	mov	a,r7
      004CDC 60 03            [24]13673 	jz	00257$
      004CDE 02r4Dr65         [24]13674 	ljmp	00133$
      004CE1                      13675 00257$:
                                  13676 ;	.\ecen4350_lcd_v4.c:3322: setColorDefault();
      004CE1 C0 07            [24]13677 	push	ar7
      004CE3 12r15r94         [24]13678 	lcall	_setColorDefault
                                  13679 ;	.\ecen4350_lcd_v4.c:3323: setCursor(60, 280);
      004CE6 75*00 18         [24]13680 	mov	_setCursor_PARM_2,#0x18
      004CE9 75*01 01         [24]13681 	mov	(_setCursor_PARM_2 + 1),#0x01
      004CEC 90 00 3C         [24]13682 	mov	dptr,#0x003c
      004CEF 12r04rB6         [24]13683 	lcall	_setCursor
                                  13684 ;	.\ecen4350_lcd_v4.c:3324: LCD_string_write("          ");
      004CF2 90r0ErC6         [24]13685 	mov	dptr,#___str_161
      004CF5 75 F0 80         [24]13686 	mov	b,#0x80
      004CF8 12r0FrD0         [24]13687 	lcall	_LCD_string_write
      004CFB D0 07            [24]13688 	pop	ar7
      004CFD 80 66            [24]13689 	sjmp	00133$
      004CFF                      13690 00132$:
                                  13691 ;	.\ecen4350_lcd_v4.c:3327: iowrite8(seg7_address, ON);
      004CFF 85*04 82         [24]13692 	mov	dpl,_seg7_address
      004D02 85*05 83         [24]13693 	mov	dph,(_seg7_address + 1)
                                  13694 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13695 ;	assignBit
      004D05 D2 B5            [12]13696 	setb	_P3_5
                                  13697 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004D07 E4               [12]13698 	clr	a
      004D08 F0               [24]13699 	movx	@dptr,a
                                  13700 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13701 ;	assignBit
      004D09 C2 B5            [12]13702 	clr	_P3_5
                                  13703 ;	.\ecen4350_lcd_v4.c:3328: setCursor(10, 220);
      004D0B 75*00 DC         [24]13704 	mov	_setCursor_PARM_2,#0xdc
      004D0E 75*01 00         [24]13705 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D11 90 00 0A         [24]13706 	mov	dptr,#0x000a
      004D14 C0 07            [24]13707 	push	ar7
      004D16 12r04rB6         [24]13708 	lcall	_setCursor
                                  13709 ;	.\ecen4350_lcd_v4.c:3329: setColorHighlight1();
      004D19 12r15rAA         [24]13710 	lcall	_setColorHighlight1
                                  13711 ;	.\ecen4350_lcd_v4.c:3330: LCD_string_write("<1>");
      004D1C 90r0Er19         [24]13712 	mov	dptr,#___str_149
      004D1F 75 F0 80         [24]13713 	mov	b,#0x80
      004D22 12r0FrD0         [24]13714 	lcall	_LCD_string_write
                                  13715 ;	.\ecen4350_lcd_v4.c:3331: setColorHighlight2();
      004D25 12r15rB6         [24]13716 	lcall	_setColorHighlight2
                                  13717 ;	.\ecen4350_lcd_v4.c:3332: LCD_string_write(" UART [Disabled]\n");
      004D28 90r0ErF6         [24]13718 	mov	dptr,#___str_168
      004D2B 75 F0 80         [24]13719 	mov	b,#0x80
      004D2E 12r0FrD0         [24]13720 	lcall	_LCD_string_write
                                  13721 ;	.\ecen4350_lcd_v4.c:3333: delay(20);
      004D31 90 00 14         [24]13722 	mov	dptr,#0x0014
      004D34 12r00rE0         [24]13723 	lcall	_delay
      004D37 D0 07            [24]13724 	pop	ar7
                                  13725 ;	.\ecen4350_lcd_v4.c:3334: iowrite8(seg7_address, SEG_U);
      004D39 85*04 82         [24]13726 	mov	dpl,_seg7_address
      004D3C 85*05 83         [24]13727 	mov	dph,(_seg7_address + 1)
                                  13728 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13729 ;	assignBit
      004D3F D2 B5            [12]13730 	setb	_P3_5
                                  13731 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004D41 74 C1            [12]13732 	mov	a,#0xc1
      004D43 F0               [24]13733 	movx	@dptr,a
                                  13734 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13735 ;	assignBit
      004D44 C2 B5            [12]13736 	clr	_P3_5
                                  13737 ;	.\ecen4350_lcd_v4.c:3335: if (validKey == 0) {
      004D46 EF               [12]13738 	mov	a,r7
      004D47 70 1C            [24]13739 	jnz	00133$
                                  13740 ;	.\ecen4350_lcd_v4.c:3336: setColorDefault();
      004D49 C0 07            [24]13741 	push	ar7
      004D4B 12r15r94         [24]13742 	lcall	_setColorDefault
                                  13743 ;	.\ecen4350_lcd_v4.c:3337: setCursor(60, 280);
      004D4E 75*00 18         [24]13744 	mov	_setCursor_PARM_2,#0x18
      004D51 75*01 01         [24]13745 	mov	(_setCursor_PARM_2 + 1),#0x01
      004D54 90 00 3C         [24]13746 	mov	dptr,#0x003c
      004D57 12r04rB6         [24]13747 	lcall	_setCursor
                                  13748 ;	.\ecen4350_lcd_v4.c:3338: LCD_string_write("          ");
      004D5A 90r0ErC6         [24]13749 	mov	dptr,#___str_161
      004D5D 75 F0 80         [24]13750 	mov	b,#0x80
      004D60 12r0FrD0         [24]13751 	lcall	_LCD_string_write
      004D63 D0 07            [24]13752 	pop	ar7
      004D65                      13753 00133$:
                                  13754 ;	.\ecen4350_lcd_v4.c:3341: uart();
      004D65 C0 07            [24]13755 	push	ar7
      004D67 12r45rEF         [24]13756 	lcall	_uart
      004D6A D0 07            [24]13757 	pop	ar7
                                  13758 ;	.\ecen4350_lcd_v4.c:3342: goto loop;
      004D6C 02r49r99         [24]13759 	ljmp	00101$
      004D6F                      13760 00135$:
                                  13761 ;	.\ecen4350_lcd_v4.c:3344: setCursor(45, 260);
      004D6F 75*00 04         [24]13762 	mov	_setCursor_PARM_2,#0x04
      004D72 75*01 01         [24]13763 	mov	(_setCursor_PARM_2 + 1),#0x01
      004D75 90 00 2D         [24]13764 	mov	dptr,#0x002d
      004D78 12r04rB6         [24]13765 	lcall	_setCursor
                                  13766 ;	.\ecen4350_lcd_v4.c:3345: setColorRed();
      004D7B 12r15rD9         [24]13767 	lcall	_setColorRed
                                  13768 ;	.\ecen4350_lcd_v4.c:3346: LCD_string_write("INVALID INPUT\n");
      004D7E 90r0Fr08         [24]13769 	mov	dptr,#___str_169
      004D81 75 F0 80         [24]13770 	mov	b,#0x80
      004D84 12r0FrD0         [24]13771 	lcall	_LCD_string_write
                                  13772 ;	.\ecen4350_lcd_v4.c:3347: setCursor(60, 280);
      004D87 75*00 18         [24]13773 	mov	_setCursor_PARM_2,#0x18
      004D8A 75*01 01         [24]13774 	mov	(_setCursor_PARM_2 + 1),#0x01
      004D8D 90 00 3C         [24]13775 	mov	dptr,#0x003c
      004D90 12r04rB6         [24]13776 	lcall	_setCursor
                                  13777 ;	.\ecen4350_lcd_v4.c:3348: LCD_string_write("Try again.");
      004D93 90r0Fr17         [24]13778 	mov	dptr,#___str_170
      004D96 75 F0 80         [24]13779 	mov	b,#0x80
      004D99 12r0FrD0         [24]13780 	lcall	_LCD_string_write
                                  13781 ;	.\ecen4350_lcd_v4.c:3349: validKey = 0;
      004D9C 7F 00            [12]13782 	mov	r7,#0x00
                                  13783 ;	.\ecen4350_lcd_v4.c:3350: delay(20);
      004D9E 90 00 14         [24]13784 	mov	dptr,#0x0014
      004DA1 C0 07            [24]13785 	push	ar7
      004DA3 12r00rE0         [24]13786 	lcall	_delay
                                  13787 ;	.\ecen4350_lcd_v4.c:3351: setColorDefault();
      004DA6 12r15r94         [24]13788 	lcall	_setColorDefault
                                  13789 ;	.\ecen4350_lcd_v4.c:3352: setCursor(45, 260);
      004DA9 75*00 04         [24]13790 	mov	_setCursor_PARM_2,#0x04
      004DAC 75*01 01         [24]13791 	mov	(_setCursor_PARM_2 + 1),#0x01
      004DAF 90 00 2D         [24]13792 	mov	dptr,#0x002d
      004DB2 12r04rB6         [24]13793 	lcall	_setCursor
                                  13794 ;	.\ecen4350_lcd_v4.c:3353: LCD_string_write("               \n");
      004DB5 90r0Fr22         [24]13795 	mov	dptr,#___str_171
      004DB8 75 F0 80         [24]13796 	mov	b,#0x80
      004DBB 12r0FrD0         [24]13797 	lcall	_LCD_string_write
      004DBE D0 07            [24]13798 	pop	ar7
                                  13799 ;	.\ecen4350_lcd_v4.c:3354: goto inputKey;
                                  13800 ;	.\ecen4350_lcd_v4.c:3357: }
      004DC0 02r49rC8         [24]13801 	ljmp	00102$
                                  13802 	.area CSEG    (CODE)
                                  13803 	.area CONST   (CODE)
      000000                      13804 _font:
      000000 00                   13805 	.db #0x00	; 0
      000001 00                   13806 	.db #0x00	; 0
      000002 00                   13807 	.db #0x00	; 0
      000003 00                   13808 	.db #0x00	; 0
      000004 00                   13809 	.db #0x00	; 0
      000005 3E                   13810 	.db #0x3e	; 62
      000006 5B                   13811 	.db #0x5b	; 91
      000007 4F                   13812 	.db #0x4f	; 79	'O'
      000008 5B                   13813 	.db #0x5b	; 91
      000009 3E                   13814 	.db #0x3e	; 62
      00000A 3E                   13815 	.db #0x3e	; 62
      00000B 6B                   13816 	.db #0x6b	; 107	'k'
      00000C 4F                   13817 	.db #0x4f	; 79	'O'
      00000D 6B                   13818 	.db #0x6b	; 107	'k'
      00000E 3E                   13819 	.db #0x3e	; 62
      00000F 1C                   13820 	.db #0x1c	; 28
      000010 3E                   13821 	.db #0x3e	; 62
      000011 7C                   13822 	.db #0x7c	; 124
      000012 3E                   13823 	.db #0x3e	; 62
      000013 1C                   13824 	.db #0x1c	; 28
      000014 18                   13825 	.db #0x18	; 24
      000015 3C                   13826 	.db #0x3c	; 60
      000016 7E                   13827 	.db #0x7e	; 126
      000017 3C                   13828 	.db #0x3c	; 60
      000018 18                   13829 	.db #0x18	; 24
      000019 1C                   13830 	.db #0x1c	; 28
      00001A 57                   13831 	.db #0x57	; 87	'W'
      00001B 7D                   13832 	.db #0x7d	; 125
      00001C 57                   13833 	.db #0x57	; 87	'W'
      00001D 1C                   13834 	.db #0x1c	; 28
      00001E 1C                   13835 	.db #0x1c	; 28
      00001F 5E                   13836 	.db #0x5e	; 94
      000020 7F                   13837 	.db #0x7f	; 127
      000021 5E                   13838 	.db #0x5e	; 94
      000022 1C                   13839 	.db #0x1c	; 28
      000023 00                   13840 	.db #0x00	; 0
      000024 18                   13841 	.db #0x18	; 24
      000025 3C                   13842 	.db #0x3c	; 60
      000026 18                   13843 	.db #0x18	; 24
      000027 00                   13844 	.db #0x00	; 0
      000028 FF                   13845 	.db #0xff	; 255
      000029 E7                   13846 	.db #0xe7	; 231
      00002A C3                   13847 	.db #0xc3	; 195
      00002B E7                   13848 	.db #0xe7	; 231
      00002C FF                   13849 	.db #0xff	; 255
      00002D 00                   13850 	.db #0x00	; 0
      00002E 18                   13851 	.db #0x18	; 24
      00002F 24                   13852 	.db #0x24	; 36
      000030 18                   13853 	.db #0x18	; 24
      000031 00                   13854 	.db #0x00	; 0
      000032 FF                   13855 	.db #0xff	; 255
      000033 E7                   13856 	.db #0xe7	; 231
      000034 DB                   13857 	.db #0xdb	; 219
      000035 E7                   13858 	.db #0xe7	; 231
      000036 FF                   13859 	.db #0xff	; 255
      000037 30                   13860 	.db #0x30	; 48	'0'
      000038 48                   13861 	.db #0x48	; 72	'H'
      000039 3A                   13862 	.db #0x3a	; 58
      00003A 06                   13863 	.db #0x06	; 6
      00003B 0E                   13864 	.db #0x0e	; 14
      00003C 26                   13865 	.db #0x26	; 38
      00003D 29                   13866 	.db #0x29	; 41
      00003E 79                   13867 	.db #0x79	; 121	'y'
      00003F 29                   13868 	.db #0x29	; 41
      000040 26                   13869 	.db #0x26	; 38
      000041 40                   13870 	.db #0x40	; 64
      000042 7F                   13871 	.db #0x7f	; 127
      000043 05                   13872 	.db #0x05	; 5
      000044 05                   13873 	.db #0x05	; 5
      000045 07                   13874 	.db #0x07	; 7
      000046 40                   13875 	.db #0x40	; 64
      000047 7F                   13876 	.db #0x7f	; 127
      000048 05                   13877 	.db #0x05	; 5
      000049 25                   13878 	.db #0x25	; 37
      00004A 3F                   13879 	.db #0x3f	; 63
      00004B 5A                   13880 	.db #0x5a	; 90	'Z'
      00004C 3C                   13881 	.db #0x3c	; 60
      00004D E7                   13882 	.db #0xe7	; 231
      00004E 3C                   13883 	.db #0x3c	; 60
      00004F 5A                   13884 	.db #0x5a	; 90	'Z'
      000050 7F                   13885 	.db #0x7f	; 127
      000051 3E                   13886 	.db #0x3e	; 62
      000052 1C                   13887 	.db #0x1c	; 28
      000053 1C                   13888 	.db #0x1c	; 28
      000054 08                   13889 	.db #0x08	; 8
      000055 08                   13890 	.db #0x08	; 8
      000056 1C                   13891 	.db #0x1c	; 28
      000057 1C                   13892 	.db #0x1c	; 28
      000058 3E                   13893 	.db #0x3e	; 62
      000059 7F                   13894 	.db #0x7f	; 127
      00005A 14                   13895 	.db #0x14	; 20
      00005B 22                   13896 	.db #0x22	; 34
      00005C 7F                   13897 	.db #0x7f	; 127
      00005D 22                   13898 	.db #0x22	; 34
      00005E 14                   13899 	.db #0x14	; 20
      00005F 5F                   13900 	.db #0x5f	; 95
      000060 5F                   13901 	.db #0x5f	; 95
      000061 00                   13902 	.db #0x00	; 0
      000062 5F                   13903 	.db #0x5f	; 95
      000063 5F                   13904 	.db #0x5f	; 95
      000064 06                   13905 	.db #0x06	; 6
      000065 09                   13906 	.db #0x09	; 9
      000066 7F                   13907 	.db #0x7f	; 127
      000067 01                   13908 	.db #0x01	; 1
      000068 7F                   13909 	.db #0x7f	; 127
      000069 00                   13910 	.db #0x00	; 0
      00006A 66                   13911 	.db #0x66	; 102	'f'
      00006B 89                   13912 	.db #0x89	; 137
      00006C 95                   13913 	.db #0x95	; 149
      00006D 6A                   13914 	.db #0x6a	; 106	'j'
      00006E 60                   13915 	.db #0x60	; 96
      00006F 60                   13916 	.db #0x60	; 96
      000070 60                   13917 	.db #0x60	; 96
      000071 60                   13918 	.db #0x60	; 96
      000072 60                   13919 	.db #0x60	; 96
      000073 94                   13920 	.db #0x94	; 148
      000074 A2                   13921 	.db #0xa2	; 162
      000075 FF                   13922 	.db #0xff	; 255
      000076 A2                   13923 	.db #0xa2	; 162
      000077 94                   13924 	.db #0x94	; 148
      000078 08                   13925 	.db #0x08	; 8
      000079 04                   13926 	.db #0x04	; 4
      00007A 7E                   13927 	.db #0x7e	; 126
      00007B 04                   13928 	.db #0x04	; 4
      00007C 08                   13929 	.db #0x08	; 8
      00007D 10                   13930 	.db #0x10	; 16
      00007E 20                   13931 	.db #0x20	; 32
      00007F 7E                   13932 	.db #0x7e	; 126
      000080 20                   13933 	.db #0x20	; 32
      000081 10                   13934 	.db #0x10	; 16
      000082 08                   13935 	.db #0x08	; 8
      000083 08                   13936 	.db #0x08	; 8
      000084 2A                   13937 	.db #0x2a	; 42
      000085 1C                   13938 	.db #0x1c	; 28
      000086 08                   13939 	.db #0x08	; 8
      000087 08                   13940 	.db #0x08	; 8
      000088 1C                   13941 	.db #0x1c	; 28
      000089 2A                   13942 	.db #0x2a	; 42
      00008A 08                   13943 	.db #0x08	; 8
      00008B 08                   13944 	.db #0x08	; 8
      00008C 1E                   13945 	.db #0x1e	; 30
      00008D 10                   13946 	.db #0x10	; 16
      00008E 10                   13947 	.db #0x10	; 16
      00008F 10                   13948 	.db #0x10	; 16
      000090 10                   13949 	.db #0x10	; 16
      000091 0C                   13950 	.db #0x0c	; 12
      000092 1E                   13951 	.db #0x1e	; 30
      000093 0C                   13952 	.db #0x0c	; 12
      000094 1E                   13953 	.db #0x1e	; 30
      000095 0C                   13954 	.db #0x0c	; 12
      000096 30                   13955 	.db #0x30	; 48	'0'
      000097 38                   13956 	.db #0x38	; 56	'8'
      000098 3E                   13957 	.db #0x3e	; 62
      000099 38                   13958 	.db #0x38	; 56	'8'
      00009A 30                   13959 	.db #0x30	; 48	'0'
      00009B 06                   13960 	.db #0x06	; 6
      00009C 0E                   13961 	.db #0x0e	; 14
      00009D 3E                   13962 	.db #0x3e	; 62
      00009E 0E                   13963 	.db #0x0e	; 14
      00009F 06                   13964 	.db #0x06	; 6
      0000A0 00                   13965 	.db #0x00	; 0
      0000A1 00                   13966 	.db #0x00	; 0
      0000A2 00                   13967 	.db #0x00	; 0
      0000A3 00                   13968 	.db #0x00	; 0
      0000A4 00                   13969 	.db #0x00	; 0
      0000A5 00                   13970 	.db #0x00	; 0
      0000A6 00                   13971 	.db #0x00	; 0
      0000A7 5F                   13972 	.db #0x5f	; 95
      0000A8 00                   13973 	.db #0x00	; 0
      0000A9 00                   13974 	.db #0x00	; 0
      0000AA 00                   13975 	.db #0x00	; 0
      0000AB 07                   13976 	.db #0x07	; 7
      0000AC 00                   13977 	.db #0x00	; 0
      0000AD 07                   13978 	.db #0x07	; 7
      0000AE 00                   13979 	.db #0x00	; 0
      0000AF 14                   13980 	.db #0x14	; 20
      0000B0 7F                   13981 	.db #0x7f	; 127
      0000B1 14                   13982 	.db #0x14	; 20
      0000B2 7F                   13983 	.db #0x7f	; 127
      0000B3 14                   13984 	.db #0x14	; 20
      0000B4 24                   13985 	.db #0x24	; 36
      0000B5 2A                   13986 	.db #0x2a	; 42
      0000B6 7F                   13987 	.db #0x7f	; 127
      0000B7 2A                   13988 	.db #0x2a	; 42
      0000B8 12                   13989 	.db #0x12	; 18
      0000B9 23                   13990 	.db #0x23	; 35
      0000BA 13                   13991 	.db #0x13	; 19
      0000BB 08                   13992 	.db #0x08	; 8
      0000BC 64                   13993 	.db #0x64	; 100	'd'
      0000BD 62                   13994 	.db #0x62	; 98	'b'
      0000BE 36                   13995 	.db #0x36	; 54	'6'
      0000BF 49                   13996 	.db #0x49	; 73	'I'
      0000C0 56                   13997 	.db #0x56	; 86	'V'
      0000C1 20                   13998 	.db #0x20	; 32
      0000C2 50                   13999 	.db #0x50	; 80	'P'
      0000C3 00                   14000 	.db #0x00	; 0
      0000C4 08                   14001 	.db #0x08	; 8
      0000C5 07                   14002 	.db #0x07	; 7
      0000C6 03                   14003 	.db #0x03	; 3
      0000C7 00                   14004 	.db #0x00	; 0
      0000C8 00                   14005 	.db #0x00	; 0
      0000C9 1C                   14006 	.db #0x1c	; 28
      0000CA 22                   14007 	.db #0x22	; 34
      0000CB 41                   14008 	.db #0x41	; 65	'A'
      0000CC 00                   14009 	.db #0x00	; 0
      0000CD 00                   14010 	.db #0x00	; 0
      0000CE 41                   14011 	.db #0x41	; 65	'A'
      0000CF 22                   14012 	.db #0x22	; 34
      0000D0 1C                   14013 	.db #0x1c	; 28
      0000D1 00                   14014 	.db #0x00	; 0
      0000D2 2A                   14015 	.db #0x2a	; 42
      0000D3 1C                   14016 	.db #0x1c	; 28
      0000D4 7F                   14017 	.db #0x7f	; 127
      0000D5 1C                   14018 	.db #0x1c	; 28
      0000D6 2A                   14019 	.db #0x2a	; 42
      0000D7 08                   14020 	.db #0x08	; 8
      0000D8 08                   14021 	.db #0x08	; 8
      0000D9 3E                   14022 	.db #0x3e	; 62
      0000DA 08                   14023 	.db #0x08	; 8
      0000DB 08                   14024 	.db #0x08	; 8
      0000DC 00                   14025 	.db #0x00	; 0
      0000DD 80                   14026 	.db #0x80	; 128
      0000DE 70                   14027 	.db #0x70	; 112	'p'
      0000DF 30                   14028 	.db #0x30	; 48	'0'
      0000E0 00                   14029 	.db #0x00	; 0
      0000E1 08                   14030 	.db #0x08	; 8
      0000E2 08                   14031 	.db #0x08	; 8
      0000E3 08                   14032 	.db #0x08	; 8
      0000E4 08                   14033 	.db #0x08	; 8
      0000E5 08                   14034 	.db #0x08	; 8
      0000E6 00                   14035 	.db #0x00	; 0
      0000E7 00                   14036 	.db #0x00	; 0
      0000E8 60                   14037 	.db #0x60	; 96
      0000E9 60                   14038 	.db #0x60	; 96
      0000EA 00                   14039 	.db #0x00	; 0
      0000EB 20                   14040 	.db #0x20	; 32
      0000EC 10                   14041 	.db #0x10	; 16
      0000ED 08                   14042 	.db #0x08	; 8
      0000EE 04                   14043 	.db #0x04	; 4
      0000EF 02                   14044 	.db #0x02	; 2
      0000F0 3E                   14045 	.db #0x3e	; 62
      0000F1 51                   14046 	.db #0x51	; 81	'Q'
      0000F2 49                   14047 	.db #0x49	; 73	'I'
      0000F3 45                   14048 	.db #0x45	; 69	'E'
      0000F4 3E                   14049 	.db #0x3e	; 62
      0000F5 00                   14050 	.db #0x00	; 0
      0000F6 42                   14051 	.db #0x42	; 66	'B'
      0000F7 7F                   14052 	.db #0x7f	; 127
      0000F8 40                   14053 	.db #0x40	; 64
      0000F9 00                   14054 	.db #0x00	; 0
      0000FA 72                   14055 	.db #0x72	; 114	'r'
      0000FB 49                   14056 	.db #0x49	; 73	'I'
      0000FC 49                   14057 	.db #0x49	; 73	'I'
      0000FD 49                   14058 	.db #0x49	; 73	'I'
      0000FE 46                   14059 	.db #0x46	; 70	'F'
      0000FF 21                   14060 	.db #0x21	; 33
      000100 41                   14061 	.db #0x41	; 65	'A'
      000101 49                   14062 	.db #0x49	; 73	'I'
      000102 4D                   14063 	.db #0x4d	; 77	'M'
      000103 33                   14064 	.db #0x33	; 51	'3'
      000104 18                   14065 	.db #0x18	; 24
      000105 14                   14066 	.db #0x14	; 20
      000106 12                   14067 	.db #0x12	; 18
      000107 7F                   14068 	.db #0x7f	; 127
      000108 10                   14069 	.db #0x10	; 16
      000109 27                   14070 	.db #0x27	; 39
      00010A 45                   14071 	.db #0x45	; 69	'E'
      00010B 45                   14072 	.db #0x45	; 69	'E'
      00010C 45                   14073 	.db #0x45	; 69	'E'
      00010D 39                   14074 	.db #0x39	; 57	'9'
      00010E 3C                   14075 	.db #0x3c	; 60
      00010F 4A                   14076 	.db #0x4a	; 74	'J'
      000110 49                   14077 	.db #0x49	; 73	'I'
      000111 49                   14078 	.db #0x49	; 73	'I'
      000112 31                   14079 	.db #0x31	; 49	'1'
      000113 41                   14080 	.db #0x41	; 65	'A'
      000114 21                   14081 	.db #0x21	; 33
      000115 11                   14082 	.db #0x11	; 17
      000116 09                   14083 	.db #0x09	; 9
      000117 07                   14084 	.db #0x07	; 7
      000118 36                   14085 	.db #0x36	; 54	'6'
      000119 49                   14086 	.db #0x49	; 73	'I'
      00011A 49                   14087 	.db #0x49	; 73	'I'
      00011B 49                   14088 	.db #0x49	; 73	'I'
      00011C 36                   14089 	.db #0x36	; 54	'6'
      00011D 46                   14090 	.db #0x46	; 70	'F'
      00011E 49                   14091 	.db #0x49	; 73	'I'
      00011F 49                   14092 	.db #0x49	; 73	'I'
      000120 29                   14093 	.db #0x29	; 41
      000121 1E                   14094 	.db #0x1e	; 30
      000122 00                   14095 	.db #0x00	; 0
      000123 00                   14096 	.db #0x00	; 0
      000124 14                   14097 	.db #0x14	; 20
      000125 00                   14098 	.db #0x00	; 0
      000126 00                   14099 	.db #0x00	; 0
      000127 00                   14100 	.db #0x00	; 0
      000128 40                   14101 	.db #0x40	; 64
      000129 34                   14102 	.db #0x34	; 52	'4'
      00012A 00                   14103 	.db #0x00	; 0
      00012B 00                   14104 	.db #0x00	; 0
      00012C 00                   14105 	.db #0x00	; 0
      00012D 08                   14106 	.db #0x08	; 8
      00012E 14                   14107 	.db #0x14	; 20
      00012F 22                   14108 	.db #0x22	; 34
      000130 41                   14109 	.db #0x41	; 65	'A'
      000131 14                   14110 	.db #0x14	; 20
      000132 14                   14111 	.db #0x14	; 20
      000133 14                   14112 	.db #0x14	; 20
      000134 14                   14113 	.db #0x14	; 20
      000135 14                   14114 	.db #0x14	; 20
      000136 00                   14115 	.db #0x00	; 0
      000137 41                   14116 	.db #0x41	; 65	'A'
      000138 22                   14117 	.db #0x22	; 34
      000139 14                   14118 	.db #0x14	; 20
      00013A 08                   14119 	.db #0x08	; 8
      00013B 02                   14120 	.db #0x02	; 2
      00013C 01                   14121 	.db #0x01	; 1
      00013D 59                   14122 	.db #0x59	; 89	'Y'
      00013E 09                   14123 	.db #0x09	; 9
      00013F 06                   14124 	.db #0x06	; 6
      000140 3E                   14125 	.db #0x3e	; 62
      000141 41                   14126 	.db #0x41	; 65	'A'
      000142 5D                   14127 	.db #0x5d	; 93
      000143 59                   14128 	.db #0x59	; 89	'Y'
      000144 4E                   14129 	.db #0x4e	; 78	'N'
      000145 7C                   14130 	.db #0x7c	; 124
      000146 12                   14131 	.db #0x12	; 18
      000147 11                   14132 	.db #0x11	; 17
      000148 12                   14133 	.db #0x12	; 18
      000149 7C                   14134 	.db #0x7c	; 124
      00014A 7F                   14135 	.db #0x7f	; 127
      00014B 49                   14136 	.db #0x49	; 73	'I'
      00014C 49                   14137 	.db #0x49	; 73	'I'
      00014D 49                   14138 	.db #0x49	; 73	'I'
      00014E 36                   14139 	.db #0x36	; 54	'6'
      00014F 3E                   14140 	.db #0x3e	; 62
      000150 41                   14141 	.db #0x41	; 65	'A'
      000151 41                   14142 	.db #0x41	; 65	'A'
      000152 41                   14143 	.db #0x41	; 65	'A'
      000153 22                   14144 	.db #0x22	; 34
      000154 7F                   14145 	.db #0x7f	; 127
      000155 41                   14146 	.db #0x41	; 65	'A'
      000156 41                   14147 	.db #0x41	; 65	'A'
      000157 41                   14148 	.db #0x41	; 65	'A'
      000158 3E                   14149 	.db #0x3e	; 62
      000159 7F                   14150 	.db #0x7f	; 127
      00015A 49                   14151 	.db #0x49	; 73	'I'
      00015B 49                   14152 	.db #0x49	; 73	'I'
      00015C 49                   14153 	.db #0x49	; 73	'I'
      00015D 41                   14154 	.db #0x41	; 65	'A'
      00015E 7F                   14155 	.db #0x7f	; 127
      00015F 09                   14156 	.db #0x09	; 9
      000160 09                   14157 	.db #0x09	; 9
      000161 09                   14158 	.db #0x09	; 9
      000162 01                   14159 	.db #0x01	; 1
      000163 3E                   14160 	.db #0x3e	; 62
      000164 41                   14161 	.db #0x41	; 65	'A'
      000165 41                   14162 	.db #0x41	; 65	'A'
      000166 51                   14163 	.db #0x51	; 81	'Q'
      000167 73                   14164 	.db #0x73	; 115	's'
      000168 7F                   14165 	.db #0x7f	; 127
      000169 08                   14166 	.db #0x08	; 8
      00016A 08                   14167 	.db #0x08	; 8
      00016B 08                   14168 	.db #0x08	; 8
      00016C 7F                   14169 	.db #0x7f	; 127
      00016D 00                   14170 	.db #0x00	; 0
      00016E 41                   14171 	.db #0x41	; 65	'A'
      00016F 7F                   14172 	.db #0x7f	; 127
      000170 41                   14173 	.db #0x41	; 65	'A'
      000171 00                   14174 	.db #0x00	; 0
      000172 20                   14175 	.db #0x20	; 32
      000173 40                   14176 	.db #0x40	; 64
      000174 41                   14177 	.db #0x41	; 65	'A'
      000175 3F                   14178 	.db #0x3f	; 63
      000176 01                   14179 	.db #0x01	; 1
      000177 7F                   14180 	.db #0x7f	; 127
      000178 08                   14181 	.db #0x08	; 8
      000179 14                   14182 	.db #0x14	; 20
      00017A 22                   14183 	.db #0x22	; 34
      00017B 41                   14184 	.db #0x41	; 65	'A'
      00017C 7F                   14185 	.db #0x7f	; 127
      00017D 40                   14186 	.db #0x40	; 64
      00017E 40                   14187 	.db #0x40	; 64
      00017F 40                   14188 	.db #0x40	; 64
      000180 40                   14189 	.db #0x40	; 64
      000181 7F                   14190 	.db #0x7f	; 127
      000182 02                   14191 	.db #0x02	; 2
      000183 1C                   14192 	.db #0x1c	; 28
      000184 02                   14193 	.db #0x02	; 2
      000185 7F                   14194 	.db #0x7f	; 127
      000186 7F                   14195 	.db #0x7f	; 127
      000187 04                   14196 	.db #0x04	; 4
      000188 08                   14197 	.db #0x08	; 8
      000189 10                   14198 	.db #0x10	; 16
      00018A 7F                   14199 	.db #0x7f	; 127
      00018B 3E                   14200 	.db #0x3e	; 62
      00018C 41                   14201 	.db #0x41	; 65	'A'
      00018D 41                   14202 	.db #0x41	; 65	'A'
      00018E 41                   14203 	.db #0x41	; 65	'A'
      00018F 3E                   14204 	.db #0x3e	; 62
      000190 7F                   14205 	.db #0x7f	; 127
      000191 09                   14206 	.db #0x09	; 9
      000192 09                   14207 	.db #0x09	; 9
      000193 09                   14208 	.db #0x09	; 9
      000194 06                   14209 	.db #0x06	; 6
      000195 3E                   14210 	.db #0x3e	; 62
      000196 41                   14211 	.db #0x41	; 65	'A'
      000197 51                   14212 	.db #0x51	; 81	'Q'
      000198 21                   14213 	.db #0x21	; 33
      000199 5E                   14214 	.db #0x5e	; 94
      00019A 7F                   14215 	.db #0x7f	; 127
      00019B 09                   14216 	.db #0x09	; 9
      00019C 19                   14217 	.db #0x19	; 25
      00019D 29                   14218 	.db #0x29	; 41
      00019E 46                   14219 	.db #0x46	; 70	'F'
      00019F 26                   14220 	.db #0x26	; 38
      0001A0 49                   14221 	.db #0x49	; 73	'I'
      0001A1 49                   14222 	.db #0x49	; 73	'I'
      0001A2 49                   14223 	.db #0x49	; 73	'I'
      0001A3 32                   14224 	.db #0x32	; 50	'2'
      0001A4 03                   14225 	.db #0x03	; 3
      0001A5 01                   14226 	.db #0x01	; 1
      0001A6 7F                   14227 	.db #0x7f	; 127
      0001A7 01                   14228 	.db #0x01	; 1
      0001A8 03                   14229 	.db #0x03	; 3
      0001A9 3F                   14230 	.db #0x3f	; 63
      0001AA 40                   14231 	.db #0x40	; 64
      0001AB 40                   14232 	.db #0x40	; 64
      0001AC 40                   14233 	.db #0x40	; 64
      0001AD 3F                   14234 	.db #0x3f	; 63
      0001AE 1F                   14235 	.db #0x1f	; 31
      0001AF 20                   14236 	.db #0x20	; 32
      0001B0 40                   14237 	.db #0x40	; 64
      0001B1 20                   14238 	.db #0x20	; 32
      0001B2 1F                   14239 	.db #0x1f	; 31
      0001B3 3F                   14240 	.db #0x3f	; 63
      0001B4 40                   14241 	.db #0x40	; 64
      0001B5 38                   14242 	.db #0x38	; 56	'8'
      0001B6 40                   14243 	.db #0x40	; 64
      0001B7 3F                   14244 	.db #0x3f	; 63
      0001B8 63                   14245 	.db #0x63	; 99	'c'
      0001B9 14                   14246 	.db #0x14	; 20
      0001BA 08                   14247 	.db #0x08	; 8
      0001BB 14                   14248 	.db #0x14	; 20
      0001BC 63                   14249 	.db #0x63	; 99	'c'
      0001BD 03                   14250 	.db #0x03	; 3
      0001BE 04                   14251 	.db #0x04	; 4
      0001BF 78                   14252 	.db #0x78	; 120	'x'
      0001C0 04                   14253 	.db #0x04	; 4
      0001C1 03                   14254 	.db #0x03	; 3
      0001C2 61                   14255 	.db #0x61	; 97	'a'
      0001C3 59                   14256 	.db #0x59	; 89	'Y'
      0001C4 49                   14257 	.db #0x49	; 73	'I'
      0001C5 4D                   14258 	.db #0x4d	; 77	'M'
      0001C6 43                   14259 	.db #0x43	; 67	'C'
      0001C7 00                   14260 	.db #0x00	; 0
      0001C8 7F                   14261 	.db #0x7f	; 127
      0001C9 41                   14262 	.db #0x41	; 65	'A'
      0001CA 41                   14263 	.db #0x41	; 65	'A'
      0001CB 41                   14264 	.db #0x41	; 65	'A'
      0001CC 02                   14265 	.db #0x02	; 2
      0001CD 04                   14266 	.db #0x04	; 4
      0001CE 08                   14267 	.db #0x08	; 8
      0001CF 10                   14268 	.db #0x10	; 16
      0001D0 20                   14269 	.db #0x20	; 32
      0001D1 00                   14270 	.db #0x00	; 0
      0001D2 41                   14271 	.db #0x41	; 65	'A'
      0001D3 41                   14272 	.db #0x41	; 65	'A'
      0001D4 41                   14273 	.db #0x41	; 65	'A'
      0001D5 7F                   14274 	.db #0x7f	; 127
      0001D6 04                   14275 	.db #0x04	; 4
      0001D7 02                   14276 	.db #0x02	; 2
      0001D8 01                   14277 	.db #0x01	; 1
      0001D9 02                   14278 	.db #0x02	; 2
      0001DA 04                   14279 	.db #0x04	; 4
      0001DB 40                   14280 	.db #0x40	; 64
      0001DC 40                   14281 	.db #0x40	; 64
      0001DD 40                   14282 	.db #0x40	; 64
      0001DE 40                   14283 	.db #0x40	; 64
      0001DF 40                   14284 	.db #0x40	; 64
      0001E0 00                   14285 	.db #0x00	; 0
      0001E1 03                   14286 	.db #0x03	; 3
      0001E2 07                   14287 	.db #0x07	; 7
      0001E3 08                   14288 	.db #0x08	; 8
      0001E4 00                   14289 	.db #0x00	; 0
      0001E5 20                   14290 	.db #0x20	; 32
      0001E6 54                   14291 	.db #0x54	; 84	'T'
      0001E7 54                   14292 	.db #0x54	; 84	'T'
      0001E8 78                   14293 	.db #0x78	; 120	'x'
      0001E9 40                   14294 	.db #0x40	; 64
      0001EA 7F                   14295 	.db #0x7f	; 127
      0001EB 28                   14296 	.db #0x28	; 40
      0001EC 44                   14297 	.db #0x44	; 68	'D'
      0001ED 44                   14298 	.db #0x44	; 68	'D'
      0001EE 38                   14299 	.db #0x38	; 56	'8'
      0001EF 38                   14300 	.db #0x38	; 56	'8'
      0001F0 44                   14301 	.db #0x44	; 68	'D'
      0001F1 44                   14302 	.db #0x44	; 68	'D'
      0001F2 44                   14303 	.db #0x44	; 68	'D'
      0001F3 28                   14304 	.db #0x28	; 40
      0001F4 38                   14305 	.db #0x38	; 56	'8'
      0001F5 44                   14306 	.db #0x44	; 68	'D'
      0001F6 44                   14307 	.db #0x44	; 68	'D'
      0001F7 28                   14308 	.db #0x28	; 40
      0001F8 7F                   14309 	.db #0x7f	; 127
      0001F9 38                   14310 	.db #0x38	; 56	'8'
      0001FA 54                   14311 	.db #0x54	; 84	'T'
      0001FB 54                   14312 	.db #0x54	; 84	'T'
      0001FC 54                   14313 	.db #0x54	; 84	'T'
      0001FD 18                   14314 	.db #0x18	; 24
      0001FE 00                   14315 	.db #0x00	; 0
      0001FF 08                   14316 	.db #0x08	; 8
      000200 7E                   14317 	.db #0x7e	; 126
      000201 09                   14318 	.db #0x09	; 9
      000202 02                   14319 	.db #0x02	; 2
      000203 18                   14320 	.db #0x18	; 24
      000204 A4                   14321 	.db #0xa4	; 164
      000205 A4                   14322 	.db #0xa4	; 164
      000206 9C                   14323 	.db #0x9c	; 156
      000207 78                   14324 	.db #0x78	; 120	'x'
      000208 7F                   14325 	.db #0x7f	; 127
      000209 08                   14326 	.db #0x08	; 8
      00020A 04                   14327 	.db #0x04	; 4
      00020B 04                   14328 	.db #0x04	; 4
      00020C 78                   14329 	.db #0x78	; 120	'x'
      00020D 00                   14330 	.db #0x00	; 0
      00020E 44                   14331 	.db #0x44	; 68	'D'
      00020F 7D                   14332 	.db #0x7d	; 125
      000210 40                   14333 	.db #0x40	; 64
      000211 00                   14334 	.db #0x00	; 0
      000212 20                   14335 	.db #0x20	; 32
      000213 40                   14336 	.db #0x40	; 64
      000214 40                   14337 	.db #0x40	; 64
      000215 3D                   14338 	.db #0x3d	; 61
      000216 00                   14339 	.db #0x00	; 0
      000217 7F                   14340 	.db #0x7f	; 127
      000218 10                   14341 	.db #0x10	; 16
      000219 28                   14342 	.db #0x28	; 40
      00021A 44                   14343 	.db #0x44	; 68	'D'
      00021B 00                   14344 	.db #0x00	; 0
      00021C 00                   14345 	.db #0x00	; 0
      00021D 41                   14346 	.db #0x41	; 65	'A'
      00021E 7F                   14347 	.db #0x7f	; 127
      00021F 40                   14348 	.db #0x40	; 64
      000220 00                   14349 	.db #0x00	; 0
      000221 7C                   14350 	.db #0x7c	; 124
      000222 04                   14351 	.db #0x04	; 4
      000223 78                   14352 	.db #0x78	; 120	'x'
      000224 04                   14353 	.db #0x04	; 4
      000225 78                   14354 	.db #0x78	; 120	'x'
      000226 7C                   14355 	.db #0x7c	; 124
      000227 08                   14356 	.db #0x08	; 8
      000228 04                   14357 	.db #0x04	; 4
      000229 04                   14358 	.db #0x04	; 4
      00022A 78                   14359 	.db #0x78	; 120	'x'
      00022B 38                   14360 	.db #0x38	; 56	'8'
      00022C 44                   14361 	.db #0x44	; 68	'D'
      00022D 44                   14362 	.db #0x44	; 68	'D'
      00022E 44                   14363 	.db #0x44	; 68	'D'
      00022F 38                   14364 	.db #0x38	; 56	'8'
      000230 FC                   14365 	.db #0xfc	; 252
      000231 18                   14366 	.db #0x18	; 24
      000232 24                   14367 	.db #0x24	; 36
      000233 24                   14368 	.db #0x24	; 36
      000234 18                   14369 	.db #0x18	; 24
      000235 18                   14370 	.db #0x18	; 24
      000236 24                   14371 	.db #0x24	; 36
      000237 24                   14372 	.db #0x24	; 36
      000238 18                   14373 	.db #0x18	; 24
      000239 FC                   14374 	.db #0xfc	; 252
      00023A 7C                   14375 	.db #0x7c	; 124
      00023B 08                   14376 	.db #0x08	; 8
      00023C 04                   14377 	.db #0x04	; 4
      00023D 04                   14378 	.db #0x04	; 4
      00023E 08                   14379 	.db #0x08	; 8
      00023F 48                   14380 	.db #0x48	; 72	'H'
      000240 54                   14381 	.db #0x54	; 84	'T'
      000241 54                   14382 	.db #0x54	; 84	'T'
      000242 54                   14383 	.db #0x54	; 84	'T'
      000243 24                   14384 	.db #0x24	; 36
      000244 04                   14385 	.db #0x04	; 4
      000245 04                   14386 	.db #0x04	; 4
      000246 3F                   14387 	.db #0x3f	; 63
      000247 44                   14388 	.db #0x44	; 68	'D'
      000248 24                   14389 	.db #0x24	; 36
      000249 3C                   14390 	.db #0x3c	; 60
      00024A 40                   14391 	.db #0x40	; 64
      00024B 40                   14392 	.db #0x40	; 64
      00024C 20                   14393 	.db #0x20	; 32
      00024D 7C                   14394 	.db #0x7c	; 124
      00024E 1C                   14395 	.db #0x1c	; 28
      00024F 20                   14396 	.db #0x20	; 32
      000250 40                   14397 	.db #0x40	; 64
      000251 20                   14398 	.db #0x20	; 32
      000252 1C                   14399 	.db #0x1c	; 28
      000253 3C                   14400 	.db #0x3c	; 60
      000254 40                   14401 	.db #0x40	; 64
      000255 30                   14402 	.db #0x30	; 48	'0'
      000256 40                   14403 	.db #0x40	; 64
      000257 3C                   14404 	.db #0x3c	; 60
      000258 44                   14405 	.db #0x44	; 68	'D'
      000259 28                   14406 	.db #0x28	; 40
      00025A 10                   14407 	.db #0x10	; 16
      00025B 28                   14408 	.db #0x28	; 40
      00025C 44                   14409 	.db #0x44	; 68	'D'
      00025D 4C                   14410 	.db #0x4c	; 76	'L'
      00025E 90                   14411 	.db #0x90	; 144
      00025F 90                   14412 	.db #0x90	; 144
      000260 90                   14413 	.db #0x90	; 144
      000261 7C                   14414 	.db #0x7c	; 124
      000262 44                   14415 	.db #0x44	; 68	'D'
      000263 64                   14416 	.db #0x64	; 100	'd'
      000264 54                   14417 	.db #0x54	; 84	'T'
      000265 4C                   14418 	.db #0x4c	; 76	'L'
      000266 44                   14419 	.db #0x44	; 68	'D'
      000267 00                   14420 	.db #0x00	; 0
      000268 08                   14421 	.db #0x08	; 8
      000269 36                   14422 	.db #0x36	; 54	'6'
      00026A 41                   14423 	.db #0x41	; 65	'A'
      00026B 00                   14424 	.db #0x00	; 0
      00026C 00                   14425 	.db #0x00	; 0
      00026D 00                   14426 	.db #0x00	; 0
      00026E 77                   14427 	.db #0x77	; 119	'w'
      00026F 00                   14428 	.db #0x00	; 0
      000270 00                   14429 	.db #0x00	; 0
      000271 00                   14430 	.db #0x00	; 0
      000272 41                   14431 	.db #0x41	; 65	'A'
      000273 36                   14432 	.db #0x36	; 54	'6'
      000274 08                   14433 	.db #0x08	; 8
      000275 00                   14434 	.db #0x00	; 0
      000276 02                   14435 	.db #0x02	; 2
      000277 01                   14436 	.db #0x01	; 1
      000278 02                   14437 	.db #0x02	; 2
      000279 04                   14438 	.db #0x04	; 4
      00027A 02                   14439 	.db #0x02	; 2
      00027B 3C                   14440 	.db #0x3c	; 60
      00027C 26                   14441 	.db #0x26	; 38
      00027D 23                   14442 	.db #0x23	; 35
      00027E 26                   14443 	.db #0x26	; 38
      00027F 3C                   14444 	.db #0x3c	; 60
      000280 1E                   14445 	.db #0x1e	; 30
      000281 A1                   14446 	.db #0xa1	; 161
      000282 A1                   14447 	.db #0xa1	; 161
      000283 61                   14448 	.db #0x61	; 97	'a'
      000284 12                   14449 	.db #0x12	; 18
      000285 3A                   14450 	.db #0x3a	; 58
      000286 40                   14451 	.db #0x40	; 64
      000287 40                   14452 	.db #0x40	; 64
      000288 20                   14453 	.db #0x20	; 32
      000289 7A                   14454 	.db #0x7a	; 122	'z'
      00028A 38                   14455 	.db #0x38	; 56	'8'
      00028B 54                   14456 	.db #0x54	; 84	'T'
      00028C 54                   14457 	.db #0x54	; 84	'T'
      00028D 55                   14458 	.db #0x55	; 85	'U'
      00028E 59                   14459 	.db #0x59	; 89	'Y'
      00028F 21                   14460 	.db #0x21	; 33
      000290 55                   14461 	.db #0x55	; 85	'U'
      000291 55                   14462 	.db #0x55	; 85	'U'
      000292 79                   14463 	.db #0x79	; 121	'y'
      000293 41                   14464 	.db #0x41	; 65	'A'
      000294 22                   14465 	.db #0x22	; 34
      000295 54                   14466 	.db #0x54	; 84	'T'
      000296 54                   14467 	.db #0x54	; 84	'T'
      000297 78                   14468 	.db #0x78	; 120	'x'
      000298 42                   14469 	.db #0x42	; 66	'B'
      000299 21                   14470 	.db #0x21	; 33
      00029A 55                   14471 	.db #0x55	; 85	'U'
      00029B 54                   14472 	.db #0x54	; 84	'T'
      00029C 78                   14473 	.db #0x78	; 120	'x'
      00029D 40                   14474 	.db #0x40	; 64
      00029E 20                   14475 	.db #0x20	; 32
      00029F 54                   14476 	.db #0x54	; 84	'T'
      0002A0 55                   14477 	.db #0x55	; 85	'U'
      0002A1 79                   14478 	.db #0x79	; 121	'y'
      0002A2 40                   14479 	.db #0x40	; 64
      0002A3 0C                   14480 	.db #0x0c	; 12
      0002A4 1E                   14481 	.db #0x1e	; 30
      0002A5 52                   14482 	.db #0x52	; 82	'R'
      0002A6 72                   14483 	.db #0x72	; 114	'r'
      0002A7 12                   14484 	.db #0x12	; 18
      0002A8 39                   14485 	.db #0x39	; 57	'9'
      0002A9 55                   14486 	.db #0x55	; 85	'U'
      0002AA 55                   14487 	.db #0x55	; 85	'U'
      0002AB 55                   14488 	.db #0x55	; 85	'U'
      0002AC 59                   14489 	.db #0x59	; 89	'Y'
      0002AD 39                   14490 	.db #0x39	; 57	'9'
      0002AE 54                   14491 	.db #0x54	; 84	'T'
      0002AF 54                   14492 	.db #0x54	; 84	'T'
      0002B0 54                   14493 	.db #0x54	; 84	'T'
      0002B1 59                   14494 	.db #0x59	; 89	'Y'
      0002B2 39                   14495 	.db #0x39	; 57	'9'
      0002B3 55                   14496 	.db #0x55	; 85	'U'
      0002B4 54                   14497 	.db #0x54	; 84	'T'
      0002B5 54                   14498 	.db #0x54	; 84	'T'
      0002B6 58                   14499 	.db #0x58	; 88	'X'
      0002B7 00                   14500 	.db #0x00	; 0
      0002B8 00                   14501 	.db #0x00	; 0
      0002B9 45                   14502 	.db #0x45	; 69	'E'
      0002BA 7C                   14503 	.db #0x7c	; 124
      0002BB 41                   14504 	.db #0x41	; 65	'A'
      0002BC 00                   14505 	.db #0x00	; 0
      0002BD 02                   14506 	.db #0x02	; 2
      0002BE 45                   14507 	.db #0x45	; 69	'E'
      0002BF 7D                   14508 	.db #0x7d	; 125
      0002C0 42                   14509 	.db #0x42	; 66	'B'
      0002C1 00                   14510 	.db #0x00	; 0
      0002C2 01                   14511 	.db #0x01	; 1
      0002C3 45                   14512 	.db #0x45	; 69	'E'
      0002C4 7C                   14513 	.db #0x7c	; 124
      0002C5 40                   14514 	.db #0x40	; 64
      0002C6 7D                   14515 	.db #0x7d	; 125
      0002C7 12                   14516 	.db #0x12	; 18
      0002C8 11                   14517 	.db #0x11	; 17
      0002C9 12                   14518 	.db #0x12	; 18
      0002CA 7D                   14519 	.db #0x7d	; 125
      0002CB F0                   14520 	.db #0xf0	; 240
      0002CC 28                   14521 	.db #0x28	; 40
      0002CD 25                   14522 	.db #0x25	; 37
      0002CE 28                   14523 	.db #0x28	; 40
      0002CF F0                   14524 	.db #0xf0	; 240
      0002D0 7C                   14525 	.db #0x7c	; 124
      0002D1 54                   14526 	.db #0x54	; 84	'T'
      0002D2 55                   14527 	.db #0x55	; 85	'U'
      0002D3 45                   14528 	.db #0x45	; 69	'E'
      0002D4 00                   14529 	.db #0x00	; 0
      0002D5 20                   14530 	.db #0x20	; 32
      0002D6 54                   14531 	.db #0x54	; 84	'T'
      0002D7 54                   14532 	.db #0x54	; 84	'T'
      0002D8 7C                   14533 	.db #0x7c	; 124
      0002D9 54                   14534 	.db #0x54	; 84	'T'
      0002DA 7C                   14535 	.db #0x7c	; 124
      0002DB 0A                   14536 	.db #0x0a	; 10
      0002DC 09                   14537 	.db #0x09	; 9
      0002DD 7F                   14538 	.db #0x7f	; 127
      0002DE 49                   14539 	.db #0x49	; 73	'I'
      0002DF 32                   14540 	.db #0x32	; 50	'2'
      0002E0 49                   14541 	.db #0x49	; 73	'I'
      0002E1 49                   14542 	.db #0x49	; 73	'I'
      0002E2 49                   14543 	.db #0x49	; 73	'I'
      0002E3 32                   14544 	.db #0x32	; 50	'2'
      0002E4 3A                   14545 	.db #0x3a	; 58
      0002E5 44                   14546 	.db #0x44	; 68	'D'
      0002E6 44                   14547 	.db #0x44	; 68	'D'
      0002E7 44                   14548 	.db #0x44	; 68	'D'
      0002E8 3A                   14549 	.db #0x3a	; 58
      0002E9 32                   14550 	.db #0x32	; 50	'2'
      0002EA 4A                   14551 	.db #0x4a	; 74	'J'
      0002EB 48                   14552 	.db #0x48	; 72	'H'
      0002EC 48                   14553 	.db #0x48	; 72	'H'
      0002ED 30                   14554 	.db #0x30	; 48	'0'
      0002EE 3A                   14555 	.db #0x3a	; 58
      0002EF 41                   14556 	.db #0x41	; 65	'A'
      0002F0 41                   14557 	.db #0x41	; 65	'A'
      0002F1 21                   14558 	.db #0x21	; 33
      0002F2 7A                   14559 	.db #0x7a	; 122	'z'
      0002F3 3A                   14560 	.db #0x3a	; 58
      0002F4 42                   14561 	.db #0x42	; 66	'B'
      0002F5 40                   14562 	.db #0x40	; 64
      0002F6 20                   14563 	.db #0x20	; 32
      0002F7 78                   14564 	.db #0x78	; 120	'x'
      0002F8 00                   14565 	.db #0x00	; 0
      0002F9 9D                   14566 	.db #0x9d	; 157
      0002FA A0                   14567 	.db #0xa0	; 160
      0002FB A0                   14568 	.db #0xa0	; 160
      0002FC 7D                   14569 	.db #0x7d	; 125
      0002FD 3D                   14570 	.db #0x3d	; 61
      0002FE 42                   14571 	.db #0x42	; 66	'B'
      0002FF 42                   14572 	.db #0x42	; 66	'B'
      000300 42                   14573 	.db #0x42	; 66	'B'
      000301 3D                   14574 	.db #0x3d	; 61
      000302 3D                   14575 	.db #0x3d	; 61
      000303 40                   14576 	.db #0x40	; 64
      000304 40                   14577 	.db #0x40	; 64
      000305 40                   14578 	.db #0x40	; 64
      000306 3D                   14579 	.db #0x3d	; 61
      000307 3C                   14580 	.db #0x3c	; 60
      000308 24                   14581 	.db #0x24	; 36
      000309 FF                   14582 	.db #0xff	; 255
      00030A 24                   14583 	.db #0x24	; 36
      00030B 24                   14584 	.db #0x24	; 36
      00030C 48                   14585 	.db #0x48	; 72	'H'
      00030D 7E                   14586 	.db #0x7e	; 126
      00030E 49                   14587 	.db #0x49	; 73	'I'
      00030F 43                   14588 	.db #0x43	; 67	'C'
      000310 66                   14589 	.db #0x66	; 102	'f'
      000311 2B                   14590 	.db #0x2b	; 43
      000312 2F                   14591 	.db #0x2f	; 47
      000313 FC                   14592 	.db #0xfc	; 252
      000314 2F                   14593 	.db #0x2f	; 47
      000315 2B                   14594 	.db #0x2b	; 43
      000316 FF                   14595 	.db #0xff	; 255
      000317 09                   14596 	.db #0x09	; 9
      000318 29                   14597 	.db #0x29	; 41
      000319 F6                   14598 	.db #0xf6	; 246
      00031A 20                   14599 	.db #0x20	; 32
      00031B C0                   14600 	.db #0xc0	; 192
      00031C 88                   14601 	.db #0x88	; 136
      00031D 7E                   14602 	.db #0x7e	; 126
      00031E 09                   14603 	.db #0x09	; 9
      00031F 03                   14604 	.db #0x03	; 3
      000320 20                   14605 	.db #0x20	; 32
      000321 54                   14606 	.db #0x54	; 84	'T'
      000322 54                   14607 	.db #0x54	; 84	'T'
      000323 79                   14608 	.db #0x79	; 121	'y'
      000324 41                   14609 	.db #0x41	; 65	'A'
      000325 00                   14610 	.db #0x00	; 0
      000326 00                   14611 	.db #0x00	; 0
      000327 44                   14612 	.db #0x44	; 68	'D'
      000328 7D                   14613 	.db #0x7d	; 125
      000329 41                   14614 	.db #0x41	; 65	'A'
      00032A 30                   14615 	.db #0x30	; 48	'0'
      00032B 48                   14616 	.db #0x48	; 72	'H'
      00032C 48                   14617 	.db #0x48	; 72	'H'
      00032D 4A                   14618 	.db #0x4a	; 74	'J'
      00032E 32                   14619 	.db #0x32	; 50	'2'
      00032F 38                   14620 	.db #0x38	; 56	'8'
      000330 40                   14621 	.db #0x40	; 64
      000331 40                   14622 	.db #0x40	; 64
      000332 22                   14623 	.db #0x22	; 34
      000333 7A                   14624 	.db #0x7a	; 122	'z'
      000334 00                   14625 	.db #0x00	; 0
      000335 7A                   14626 	.db #0x7a	; 122	'z'
      000336 0A                   14627 	.db #0x0a	; 10
      000337 0A                   14628 	.db #0x0a	; 10
      000338 72                   14629 	.db #0x72	; 114	'r'
      000339 7D                   14630 	.db #0x7d	; 125
      00033A 0D                   14631 	.db #0x0d	; 13
      00033B 19                   14632 	.db #0x19	; 25
      00033C 31                   14633 	.db #0x31	; 49	'1'
      00033D 7D                   14634 	.db #0x7d	; 125
      00033E 26                   14635 	.db #0x26	; 38
      00033F 29                   14636 	.db #0x29	; 41
      000340 29                   14637 	.db #0x29	; 41
      000341 2F                   14638 	.db #0x2f	; 47
      000342 28                   14639 	.db #0x28	; 40
      000343 26                   14640 	.db #0x26	; 38
      000344 29                   14641 	.db #0x29	; 41
      000345 29                   14642 	.db #0x29	; 41
      000346 29                   14643 	.db #0x29	; 41
      000347 26                   14644 	.db #0x26	; 38
      000348 30                   14645 	.db #0x30	; 48	'0'
      000349 48                   14646 	.db #0x48	; 72	'H'
      00034A 4D                   14647 	.db #0x4d	; 77	'M'
      00034B 40                   14648 	.db #0x40	; 64
      00034C 20                   14649 	.db #0x20	; 32
      00034D 38                   14650 	.db #0x38	; 56	'8'
      00034E 08                   14651 	.db #0x08	; 8
      00034F 08                   14652 	.db #0x08	; 8
      000350 08                   14653 	.db #0x08	; 8
      000351 08                   14654 	.db #0x08	; 8
      000352 08                   14655 	.db #0x08	; 8
      000353 08                   14656 	.db #0x08	; 8
      000354 08                   14657 	.db #0x08	; 8
      000355 08                   14658 	.db #0x08	; 8
      000356 38                   14659 	.db #0x38	; 56	'8'
      000357 2F                   14660 	.db #0x2f	; 47
      000358 10                   14661 	.db #0x10	; 16
      000359 C8                   14662 	.db #0xc8	; 200
      00035A AC                   14663 	.db #0xac	; 172
      00035B BA                   14664 	.db #0xba	; 186
      00035C 2F                   14665 	.db #0x2f	; 47
      00035D 10                   14666 	.db #0x10	; 16
      00035E 28                   14667 	.db #0x28	; 40
      00035F 34                   14668 	.db #0x34	; 52	'4'
      000360 FA                   14669 	.db #0xfa	; 250
      000361 00                   14670 	.db #0x00	; 0
      000362 00                   14671 	.db #0x00	; 0
      000363 7B                   14672 	.db #0x7b	; 123
      000364 00                   14673 	.db #0x00	; 0
      000365 00                   14674 	.db #0x00	; 0
      000366 08                   14675 	.db #0x08	; 8
      000367 14                   14676 	.db #0x14	; 20
      000368 2A                   14677 	.db #0x2a	; 42
      000369 14                   14678 	.db #0x14	; 20
      00036A 22                   14679 	.db #0x22	; 34
      00036B 22                   14680 	.db #0x22	; 34
      00036C 14                   14681 	.db #0x14	; 20
      00036D 2A                   14682 	.db #0x2a	; 42
      00036E 14                   14683 	.db #0x14	; 20
      00036F 08                   14684 	.db #0x08	; 8
      000370 AA                   14685 	.db #0xaa	; 170
      000371 00                   14686 	.db #0x00	; 0
      000372 55                   14687 	.db #0x55	; 85	'U'
      000373 00                   14688 	.db #0x00	; 0
      000374 AA                   14689 	.db #0xaa	; 170
      000375 AA                   14690 	.db #0xaa	; 170
      000376 55                   14691 	.db #0x55	; 85	'U'
      000377 AA                   14692 	.db #0xaa	; 170
      000378 55                   14693 	.db #0x55	; 85	'U'
      000379 AA                   14694 	.db #0xaa	; 170
      00037A 00                   14695 	.db #0x00	; 0
      00037B 00                   14696 	.db #0x00	; 0
      00037C 00                   14697 	.db #0x00	; 0
      00037D FF                   14698 	.db #0xff	; 255
      00037E 00                   14699 	.db #0x00	; 0
      00037F 10                   14700 	.db #0x10	; 16
      000380 10                   14701 	.db #0x10	; 16
      000381 10                   14702 	.db #0x10	; 16
      000382 FF                   14703 	.db #0xff	; 255
      000383 00                   14704 	.db #0x00	; 0
      000384 14                   14705 	.db #0x14	; 20
      000385 14                   14706 	.db #0x14	; 20
      000386 14                   14707 	.db #0x14	; 20
      000387 FF                   14708 	.db #0xff	; 255
      000388 00                   14709 	.db #0x00	; 0
      000389 10                   14710 	.db #0x10	; 16
      00038A 10                   14711 	.db #0x10	; 16
      00038B FF                   14712 	.db #0xff	; 255
      00038C 00                   14713 	.db #0x00	; 0
      00038D FF                   14714 	.db #0xff	; 255
      00038E 10                   14715 	.db #0x10	; 16
      00038F 10                   14716 	.db #0x10	; 16
      000390 F0                   14717 	.db #0xf0	; 240
      000391 10                   14718 	.db #0x10	; 16
      000392 F0                   14719 	.db #0xf0	; 240
      000393 14                   14720 	.db #0x14	; 20
      000394 14                   14721 	.db #0x14	; 20
      000395 14                   14722 	.db #0x14	; 20
      000396 FC                   14723 	.db #0xfc	; 252
      000397 00                   14724 	.db #0x00	; 0
      000398 14                   14725 	.db #0x14	; 20
      000399 14                   14726 	.db #0x14	; 20
      00039A F7                   14727 	.db #0xf7	; 247
      00039B 00                   14728 	.db #0x00	; 0
      00039C FF                   14729 	.db #0xff	; 255
      00039D 00                   14730 	.db #0x00	; 0
      00039E 00                   14731 	.db #0x00	; 0
      00039F FF                   14732 	.db #0xff	; 255
      0003A0 00                   14733 	.db #0x00	; 0
      0003A1 FF                   14734 	.db #0xff	; 255
      0003A2 14                   14735 	.db #0x14	; 20
      0003A3 14                   14736 	.db #0x14	; 20
      0003A4 F4                   14737 	.db #0xf4	; 244
      0003A5 04                   14738 	.db #0x04	; 4
      0003A6 FC                   14739 	.db #0xfc	; 252
      0003A7 14                   14740 	.db #0x14	; 20
      0003A8 14                   14741 	.db #0x14	; 20
      0003A9 17                   14742 	.db #0x17	; 23
      0003AA 10                   14743 	.db #0x10	; 16
      0003AB 1F                   14744 	.db #0x1f	; 31
      0003AC 10                   14745 	.db #0x10	; 16
      0003AD 10                   14746 	.db #0x10	; 16
      0003AE 1F                   14747 	.db #0x1f	; 31
      0003AF 10                   14748 	.db #0x10	; 16
      0003B0 1F                   14749 	.db #0x1f	; 31
      0003B1 14                   14750 	.db #0x14	; 20
      0003B2 14                   14751 	.db #0x14	; 20
      0003B3 14                   14752 	.db #0x14	; 20
      0003B4 1F                   14753 	.db #0x1f	; 31
      0003B5 00                   14754 	.db #0x00	; 0
      0003B6 10                   14755 	.db #0x10	; 16
      0003B7 10                   14756 	.db #0x10	; 16
      0003B8 10                   14757 	.db #0x10	; 16
      0003B9 F0                   14758 	.db #0xf0	; 240
      0003BA 00                   14759 	.db #0x00	; 0
      0003BB 00                   14760 	.db #0x00	; 0
      0003BC 00                   14761 	.db #0x00	; 0
      0003BD 00                   14762 	.db #0x00	; 0
      0003BE 1F                   14763 	.db #0x1f	; 31
      0003BF 10                   14764 	.db #0x10	; 16
      0003C0 10                   14765 	.db #0x10	; 16
      0003C1 10                   14766 	.db #0x10	; 16
      0003C2 10                   14767 	.db #0x10	; 16
      0003C3 1F                   14768 	.db #0x1f	; 31
      0003C4 10                   14769 	.db #0x10	; 16
      0003C5 10                   14770 	.db #0x10	; 16
      0003C6 10                   14771 	.db #0x10	; 16
      0003C7 10                   14772 	.db #0x10	; 16
      0003C8 F0                   14773 	.db #0xf0	; 240
      0003C9 10                   14774 	.db #0x10	; 16
      0003CA 00                   14775 	.db #0x00	; 0
      0003CB 00                   14776 	.db #0x00	; 0
      0003CC 00                   14777 	.db #0x00	; 0
      0003CD FF                   14778 	.db #0xff	; 255
      0003CE 10                   14779 	.db #0x10	; 16
      0003CF 10                   14780 	.db #0x10	; 16
      0003D0 10                   14781 	.db #0x10	; 16
      0003D1 10                   14782 	.db #0x10	; 16
      0003D2 10                   14783 	.db #0x10	; 16
      0003D3 10                   14784 	.db #0x10	; 16
      0003D4 10                   14785 	.db #0x10	; 16
      0003D5 10                   14786 	.db #0x10	; 16
      0003D6 10                   14787 	.db #0x10	; 16
      0003D7 FF                   14788 	.db #0xff	; 255
      0003D8 10                   14789 	.db #0x10	; 16
      0003D9 00                   14790 	.db #0x00	; 0
      0003DA 00                   14791 	.db #0x00	; 0
      0003DB 00                   14792 	.db #0x00	; 0
      0003DC FF                   14793 	.db #0xff	; 255
      0003DD 14                   14794 	.db #0x14	; 20
      0003DE 00                   14795 	.db #0x00	; 0
      0003DF 00                   14796 	.db #0x00	; 0
      0003E0 FF                   14797 	.db #0xff	; 255
      0003E1 00                   14798 	.db #0x00	; 0
      0003E2 FF                   14799 	.db #0xff	; 255
      0003E3 00                   14800 	.db #0x00	; 0
      0003E4 00                   14801 	.db #0x00	; 0
      0003E5 1F                   14802 	.db #0x1f	; 31
      0003E6 10                   14803 	.db #0x10	; 16
      0003E7 17                   14804 	.db #0x17	; 23
      0003E8 00                   14805 	.db #0x00	; 0
      0003E9 00                   14806 	.db #0x00	; 0
      0003EA FC                   14807 	.db #0xfc	; 252
      0003EB 04                   14808 	.db #0x04	; 4
      0003EC F4                   14809 	.db #0xf4	; 244
      0003ED 14                   14810 	.db #0x14	; 20
      0003EE 14                   14811 	.db #0x14	; 20
      0003EF 17                   14812 	.db #0x17	; 23
      0003F0 10                   14813 	.db #0x10	; 16
      0003F1 17                   14814 	.db #0x17	; 23
      0003F2 14                   14815 	.db #0x14	; 20
      0003F3 14                   14816 	.db #0x14	; 20
      0003F4 F4                   14817 	.db #0xf4	; 244
      0003F5 04                   14818 	.db #0x04	; 4
      0003F6 F4                   14819 	.db #0xf4	; 244
      0003F7 00                   14820 	.db #0x00	; 0
      0003F8 00                   14821 	.db #0x00	; 0
      0003F9 FF                   14822 	.db #0xff	; 255
      0003FA 00                   14823 	.db #0x00	; 0
      0003FB F7                   14824 	.db #0xf7	; 247
      0003FC 14                   14825 	.db #0x14	; 20
      0003FD 14                   14826 	.db #0x14	; 20
      0003FE 14                   14827 	.db #0x14	; 20
      0003FF 14                   14828 	.db #0x14	; 20
      000400 14                   14829 	.db #0x14	; 20
      000401 14                   14830 	.db #0x14	; 20
      000402 14                   14831 	.db #0x14	; 20
      000403 F7                   14832 	.db #0xf7	; 247
      000404 00                   14833 	.db #0x00	; 0
      000405 F7                   14834 	.db #0xf7	; 247
      000406 14                   14835 	.db #0x14	; 20
      000407 14                   14836 	.db #0x14	; 20
      000408 14                   14837 	.db #0x14	; 20
      000409 17                   14838 	.db #0x17	; 23
      00040A 14                   14839 	.db #0x14	; 20
      00040B 10                   14840 	.db #0x10	; 16
      00040C 10                   14841 	.db #0x10	; 16
      00040D 1F                   14842 	.db #0x1f	; 31
      00040E 10                   14843 	.db #0x10	; 16
      00040F 1F                   14844 	.db #0x1f	; 31
      000410 14                   14845 	.db #0x14	; 20
      000411 14                   14846 	.db #0x14	; 20
      000412 14                   14847 	.db #0x14	; 20
      000413 F4                   14848 	.db #0xf4	; 244
      000414 14                   14849 	.db #0x14	; 20
      000415 10                   14850 	.db #0x10	; 16
      000416 10                   14851 	.db #0x10	; 16
      000417 F0                   14852 	.db #0xf0	; 240
      000418 10                   14853 	.db #0x10	; 16
      000419 F0                   14854 	.db #0xf0	; 240
      00041A 00                   14855 	.db #0x00	; 0
      00041B 00                   14856 	.db #0x00	; 0
      00041C 1F                   14857 	.db #0x1f	; 31
      00041D 10                   14858 	.db #0x10	; 16
      00041E 1F                   14859 	.db #0x1f	; 31
      00041F 00                   14860 	.db #0x00	; 0
      000420 00                   14861 	.db #0x00	; 0
      000421 00                   14862 	.db #0x00	; 0
      000422 1F                   14863 	.db #0x1f	; 31
      000423 14                   14864 	.db #0x14	; 20
      000424 00                   14865 	.db #0x00	; 0
      000425 00                   14866 	.db #0x00	; 0
      000426 00                   14867 	.db #0x00	; 0
      000427 FC                   14868 	.db #0xfc	; 252
      000428 14                   14869 	.db #0x14	; 20
      000429 00                   14870 	.db #0x00	; 0
      00042A 00                   14871 	.db #0x00	; 0
      00042B F0                   14872 	.db #0xf0	; 240
      00042C 10                   14873 	.db #0x10	; 16
      00042D F0                   14874 	.db #0xf0	; 240
      00042E 10                   14875 	.db #0x10	; 16
      00042F 10                   14876 	.db #0x10	; 16
      000430 FF                   14877 	.db #0xff	; 255
      000431 10                   14878 	.db #0x10	; 16
      000432 FF                   14879 	.db #0xff	; 255
      000433 14                   14880 	.db #0x14	; 20
      000434 14                   14881 	.db #0x14	; 20
      000435 14                   14882 	.db #0x14	; 20
      000436 FF                   14883 	.db #0xff	; 255
      000437 14                   14884 	.db #0x14	; 20
      000438 10                   14885 	.db #0x10	; 16
      000439 10                   14886 	.db #0x10	; 16
      00043A 10                   14887 	.db #0x10	; 16
      00043B 1F                   14888 	.db #0x1f	; 31
      00043C 00                   14889 	.db #0x00	; 0
      00043D 00                   14890 	.db #0x00	; 0
      00043E 00                   14891 	.db #0x00	; 0
      00043F 00                   14892 	.db #0x00	; 0
      000440 F0                   14893 	.db #0xf0	; 240
      000441 10                   14894 	.db #0x10	; 16
      000442 FF                   14895 	.db #0xff	; 255
      000443 FF                   14896 	.db #0xff	; 255
      000444 FF                   14897 	.db #0xff	; 255
      000445 FF                   14898 	.db #0xff	; 255
      000446 FF                   14899 	.db #0xff	; 255
      000447 F0                   14900 	.db #0xf0	; 240
      000448 F0                   14901 	.db #0xf0	; 240
      000449 F0                   14902 	.db #0xf0	; 240
      00044A F0                   14903 	.db #0xf0	; 240
      00044B F0                   14904 	.db #0xf0	; 240
      00044C FF                   14905 	.db #0xff	; 255
      00044D FF                   14906 	.db #0xff	; 255
      00044E FF                   14907 	.db #0xff	; 255
      00044F 00                   14908 	.db #0x00	; 0
      000450 00                   14909 	.db #0x00	; 0
      000451 00                   14910 	.db #0x00	; 0
      000452 00                   14911 	.db #0x00	; 0
      000453 00                   14912 	.db #0x00	; 0
      000454 FF                   14913 	.db #0xff	; 255
      000455 FF                   14914 	.db #0xff	; 255
      000456 0F                   14915 	.db #0x0f	; 15
      000457 0F                   14916 	.db #0x0f	; 15
      000458 0F                   14917 	.db #0x0f	; 15
      000459 0F                   14918 	.db #0x0f	; 15
      00045A 0F                   14919 	.db #0x0f	; 15
      00045B 38                   14920 	.db #0x38	; 56	'8'
      00045C 44                   14921 	.db #0x44	; 68	'D'
      00045D 44                   14922 	.db #0x44	; 68	'D'
      00045E 38                   14923 	.db #0x38	; 56	'8'
      00045F 44                   14924 	.db #0x44	; 68	'D'
      000460 FC                   14925 	.db #0xfc	; 252
      000461 4A                   14926 	.db #0x4a	; 74	'J'
      000462 4A                   14927 	.db #0x4a	; 74	'J'
      000463 4A                   14928 	.db #0x4a	; 74	'J'
      000464 34                   14929 	.db #0x34	; 52	'4'
      000465 7E                   14930 	.db #0x7e	; 126
      000466 02                   14931 	.db #0x02	; 2
      000467 02                   14932 	.db #0x02	; 2
      000468 06                   14933 	.db #0x06	; 6
      000469 06                   14934 	.db #0x06	; 6
      00046A 02                   14935 	.db #0x02	; 2
      00046B 7E                   14936 	.db #0x7e	; 126
      00046C 02                   14937 	.db #0x02	; 2
      00046D 7E                   14938 	.db #0x7e	; 126
      00046E 02                   14939 	.db #0x02	; 2
      00046F 63                   14940 	.db #0x63	; 99	'c'
      000470 55                   14941 	.db #0x55	; 85	'U'
      000471 49                   14942 	.db #0x49	; 73	'I'
      000472 41                   14943 	.db #0x41	; 65	'A'
      000473 63                   14944 	.db #0x63	; 99	'c'
      000474 38                   14945 	.db #0x38	; 56	'8'
      000475 44                   14946 	.db #0x44	; 68	'D'
      000476 44                   14947 	.db #0x44	; 68	'D'
      000477 3C                   14948 	.db #0x3c	; 60
      000478 04                   14949 	.db #0x04	; 4
      000479 40                   14950 	.db #0x40	; 64
      00047A 7E                   14951 	.db #0x7e	; 126
      00047B 20                   14952 	.db #0x20	; 32
      00047C 1E                   14953 	.db #0x1e	; 30
      00047D 20                   14954 	.db #0x20	; 32
      00047E 06                   14955 	.db #0x06	; 6
      00047F 02                   14956 	.db #0x02	; 2
      000480 7E                   14957 	.db #0x7e	; 126
      000481 02                   14958 	.db #0x02	; 2
      000482 02                   14959 	.db #0x02	; 2
      000483 99                   14960 	.db #0x99	; 153
      000484 A5                   14961 	.db #0xa5	; 165
      000485 E7                   14962 	.db #0xe7	; 231
      000486 A5                   14963 	.db #0xa5	; 165
      000487 99                   14964 	.db #0x99	; 153
      000488 1C                   14965 	.db #0x1c	; 28
      000489 2A                   14966 	.db #0x2a	; 42
      00048A 49                   14967 	.db #0x49	; 73	'I'
      00048B 2A                   14968 	.db #0x2a	; 42
      00048C 1C                   14969 	.db #0x1c	; 28
      00048D 4C                   14970 	.db #0x4c	; 76	'L'
      00048E 72                   14971 	.db #0x72	; 114	'r'
      00048F 01                   14972 	.db #0x01	; 1
      000490 72                   14973 	.db #0x72	; 114	'r'
      000491 4C                   14974 	.db #0x4c	; 76	'L'
      000492 30                   14975 	.db #0x30	; 48	'0'
      000493 4A                   14976 	.db #0x4a	; 74	'J'
      000494 4D                   14977 	.db #0x4d	; 77	'M'
      000495 4D                   14978 	.db #0x4d	; 77	'M'
      000496 30                   14979 	.db #0x30	; 48	'0'
      000497 30                   14980 	.db #0x30	; 48	'0'
      000498 48                   14981 	.db #0x48	; 72	'H'
      000499 78                   14982 	.db #0x78	; 120	'x'
      00049A 48                   14983 	.db #0x48	; 72	'H'
      00049B 30                   14984 	.db #0x30	; 48	'0'
      00049C BC                   14985 	.db #0xbc	; 188
      00049D 62                   14986 	.db #0x62	; 98	'b'
      00049E 5A                   14987 	.db #0x5a	; 90	'Z'
      00049F 46                   14988 	.db #0x46	; 70	'F'
      0004A0 3D                   14989 	.db #0x3d	; 61
      0004A1 3E                   14990 	.db #0x3e	; 62
      0004A2 49                   14991 	.db #0x49	; 73	'I'
      0004A3 49                   14992 	.db #0x49	; 73	'I'
      0004A4 49                   14993 	.db #0x49	; 73	'I'
      0004A5 00                   14994 	.db #0x00	; 0
      0004A6 7E                   14995 	.db #0x7e	; 126
      0004A7 01                   14996 	.db #0x01	; 1
      0004A8 01                   14997 	.db #0x01	; 1
      0004A9 01                   14998 	.db #0x01	; 1
      0004AA 7E                   14999 	.db #0x7e	; 126
      0004AB 2A                   15000 	.db #0x2a	; 42
      0004AC 2A                   15001 	.db #0x2a	; 42
      0004AD 2A                   15002 	.db #0x2a	; 42
      0004AE 2A                   15003 	.db #0x2a	; 42
      0004AF 2A                   15004 	.db #0x2a	; 42
      0004B0 44                   15005 	.db #0x44	; 68	'D'
      0004B1 44                   15006 	.db #0x44	; 68	'D'
      0004B2 5F                   15007 	.db #0x5f	; 95
      0004B3 44                   15008 	.db #0x44	; 68	'D'
      0004B4 44                   15009 	.db #0x44	; 68	'D'
      0004B5 40                   15010 	.db #0x40	; 64
      0004B6 51                   15011 	.db #0x51	; 81	'Q'
      0004B7 4A                   15012 	.db #0x4a	; 74	'J'
      0004B8 44                   15013 	.db #0x44	; 68	'D'
      0004B9 40                   15014 	.db #0x40	; 64
      0004BA 40                   15015 	.db #0x40	; 64
      0004BB 44                   15016 	.db #0x44	; 68	'D'
      0004BC 4A                   15017 	.db #0x4a	; 74	'J'
      0004BD 51                   15018 	.db #0x51	; 81	'Q'
      0004BE 40                   15019 	.db #0x40	; 64
      0004BF 00                   15020 	.db #0x00	; 0
      0004C0 00                   15021 	.db #0x00	; 0
      0004C1 FF                   15022 	.db #0xff	; 255
      0004C2 01                   15023 	.db #0x01	; 1
      0004C3 03                   15024 	.db #0x03	; 3
      0004C4 E0                   15025 	.db #0xe0	; 224
      0004C5 80                   15026 	.db #0x80	; 128
      0004C6 FF                   15027 	.db #0xff	; 255
      0004C7 00                   15028 	.db #0x00	; 0
      0004C8 00                   15029 	.db #0x00	; 0
      0004C9 08                   15030 	.db #0x08	; 8
      0004CA 08                   15031 	.db #0x08	; 8
      0004CB 6B                   15032 	.db #0x6b	; 107	'k'
      0004CC 6B                   15033 	.db #0x6b	; 107	'k'
      0004CD 08                   15034 	.db #0x08	; 8
      0004CE 36                   15035 	.db #0x36	; 54	'6'
      0004CF 12                   15036 	.db #0x12	; 18
      0004D0 36                   15037 	.db #0x36	; 54	'6'
      0004D1 24                   15038 	.db #0x24	; 36
      0004D2 36                   15039 	.db #0x36	; 54	'6'
      0004D3 06                   15040 	.db #0x06	; 6
      0004D4 0F                   15041 	.db #0x0f	; 15
      0004D5 09                   15042 	.db #0x09	; 9
      0004D6 0F                   15043 	.db #0x0f	; 15
      0004D7 06                   15044 	.db #0x06	; 6
      0004D8 00                   15045 	.db #0x00	; 0
      0004D9 00                   15046 	.db #0x00	; 0
      0004DA 18                   15047 	.db #0x18	; 24
      0004DB 18                   15048 	.db #0x18	; 24
      0004DC 00                   15049 	.db #0x00	; 0
      0004DD 00                   15050 	.db #0x00	; 0
      0004DE 00                   15051 	.db #0x00	; 0
      0004DF 10                   15052 	.db #0x10	; 16
      0004E0 10                   15053 	.db #0x10	; 16
      0004E1 00                   15054 	.db #0x00	; 0
      0004E2 30                   15055 	.db #0x30	; 48	'0'
      0004E3 40                   15056 	.db #0x40	; 64
      0004E4 FF                   15057 	.db #0xff	; 255
      0004E5 01                   15058 	.db #0x01	; 1
      0004E6 01                   15059 	.db #0x01	; 1
      0004E7 00                   15060 	.db #0x00	; 0
      0004E8 1F                   15061 	.db #0x1f	; 31
      0004E9 01                   15062 	.db #0x01	; 1
      0004EA 01                   15063 	.db #0x01	; 1
      0004EB 1E                   15064 	.db #0x1e	; 30
      0004EC 00                   15065 	.db #0x00	; 0
      0004ED 19                   15066 	.db #0x19	; 25
      0004EE 1D                   15067 	.db #0x1d	; 29
      0004EF 17                   15068 	.db #0x17	; 23
      0004F0 12                   15069 	.db #0x12	; 18
      0004F1 00                   15070 	.db #0x00	; 0
      0004F2 3C                   15071 	.db #0x3c	; 60
      0004F3 3C                   15072 	.db #0x3c	; 60
      0004F4 3C                   15073 	.db #0x3c	; 60
      0004F5 3C                   15074 	.db #0x3c	; 60
      0004F6 00                   15075 	.db #0x00	; 0
      0004F7 00                   15076 	.db #0x00	; 0
      0004F8 00                   15077 	.db #0x00	; 0
      0004F9 00                   15078 	.db #0x00	; 0
      0004FA 00                   15079 	.db #0x00	; 0
      0004FB                      15080 _keypad:
      0004FB 31                   15081 	.db #0x31	; 49	'1'
      0004FC 34                   15082 	.db #0x34	; 52	'4'
      0004FD 37                   15083 	.db #0x37	; 55	'7'
      0004FE 46                   15084 	.db #0x46	; 70	'F'
      0004FF 32                   15085 	.db #0x32	; 50	'2'
      000500 35                   15086 	.db #0x35	; 53	'5'
      000501 38                   15087 	.db #0x38	; 56	'8'
      000502 30                   15088 	.db #0x30	; 48	'0'
      000503 33                   15089 	.db #0x33	; 51	'3'
      000504 36                   15090 	.db #0x36	; 54	'6'
      000505 39                   15091 	.db #0x39	; 57	'9'
      000506 45                   15092 	.db #0x45	; 69	'E'
      000507 41                   15093 	.db #0x41	; 65	'A'
      000508 42                   15094 	.db #0x42	; 66	'B'
      000509 43                   15095 	.db #0x43	; 67	'C'
      00050A 44                   15096 	.db #0x44	; 68	'D'
                                  15097 	.area CONST   (CODE)
      00050B                      15098 ___str_0:
      00050B 45 52 52 4F 52 20 46 15099 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      00051B 00                   15100 	.db 0x00
                                  15101 	.area CSEG    (CODE)
                                  15102 	.area CONST   (CODE)
      00051C                      15103 ___str_1:
      00051C 46 72 65 65 20 54 79 15104 	.ascii "Free Type: "
             70 65 3A 20
      000527 0A                   15105 	.db 0x0a
      000528 00                   15106 	.db 0x00
                                  15107 	.area CSEG    (CODE)
                                  15108 	.area CONST   (CODE)
      000529                      15109 ___str_2:
      000529 30 78                15110 	.ascii "0x"
      00052B 00                   15111 	.db 0x00
                                  15112 	.area CSEG    (CODE)
                                  15113 	.area CONST   (CODE)
      00052C                      15114 ___str_3:
      00052C 57 65 6C 63 6F 6D 65 15115 	.ascii "Welcome"
      000533 0A                   15116 	.db 0x0a
      000534 00                   15117 	.db 0x00
                                  15118 	.area CSEG    (CODE)
                                  15119 	.area CONST   (CODE)
      000535                      15120 ___str_4:
      000535 0A                   15121 	.db 0x0a
      000536 20 54 79 6C 65 72 20 15122 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      000543 0A                   15123 	.db 0x0a
      000544 20 20 45 43 45 4E 2D 15124 	.ascii "  ECEN-4350"
             34 33 35 30
      00054F 0A                   15125 	.db 0x0a
      000550 20 20 46 61 6C 6C 20 15126 	.ascii "  Fall 2021"
             32 30 32 31
      00055B 00                   15127 	.db 0x00
                                  15128 	.area CSEG    (CODE)
                                  15129 	.area CONST   (CODE)
      00055C                      15130 ___str_5:
      00055C 3C 4D 65 6E 75 3E    15131 	.ascii "<Menu>"
      000562 0A                   15132 	.db 0x0a
      000563 00                   15133 	.db 0x00
                                  15134 	.area CSEG    (CODE)
                                  15135 	.area CONST   (CODE)
      000564                      15136 ___str_6:
      000564 20 3C 44 3E          15137 	.ascii " <D>"
      000568 00                   15138 	.db 0x00
                                  15139 	.area CSEG    (CODE)
                                  15140 	.area CONST   (CODE)
      000569                      15141 ___str_7:
      000569 20 44 55 4D 50       15142 	.ascii " DUMP"
      00056E 0A                   15143 	.db 0x0a
      00056F 00                   15144 	.db 0x00
                                  15145 	.area CSEG    (CODE)
                                  15146 	.area CONST   (CODE)
      000570                      15147 ___str_8:
      000570 20 3C 42 3E          15148 	.ascii " <B>"
      000574 00                   15149 	.db 0x00
                                  15150 	.area CSEG    (CODE)
                                  15151 	.area CONST   (CODE)
      000575                      15152 ___str_9:
      000575 20 4D 4F 56 45       15153 	.ascii " MOVE"
      00057A 0A                   15154 	.db 0x0a
      00057B 00                   15155 	.db 0x00
                                  15156 	.area CSEG    (CODE)
                                  15157 	.area CONST   (CODE)
      00057C                      15158 ___str_10:
      00057C 20 3C 45 3E          15159 	.ascii " <E>"
      000580 00                   15160 	.db 0x00
                                  15161 	.area CSEG    (CODE)
                                  15162 	.area CONST   (CODE)
      000581                      15163 ___str_11:
      000581 20 45 44 49 54       15164 	.ascii " EDIT"
      000586 0A                   15165 	.db 0x0a
      000587 00                   15166 	.db 0x00
                                  15167 	.area CSEG    (CODE)
                                  15168 	.area CONST   (CODE)
      000588                      15169 ___str_12:
      000588 20 3C 46 3E          15170 	.ascii " <F>"
      00058C 00                   15171 	.db 0x00
                                  15172 	.area CSEG    (CODE)
                                  15173 	.area CONST   (CODE)
      00058D                      15174 ___str_13:
      00058D 20 46 49 4E 44       15175 	.ascii " FIND"
      000592 0A                   15176 	.db 0x0a
      000593 00                   15177 	.db 0x00
                                  15178 	.area CSEG    (CODE)
                                  15179 	.area CONST   (CODE)
      000594                      15180 ___str_14:
      000594 20 3C 43 3E          15181 	.ascii " <C>"
      000598 00                   15182 	.db 0x00
                                  15183 	.area CSEG    (CODE)
                                  15184 	.area CONST   (CODE)
      000599                      15185 ___str_15:
      000599 20 43 4F 55 4E 54    15186 	.ascii " COUNT"
      00059F 0A                   15187 	.db 0x0a
      0005A0 00                   15188 	.db 0x00
                                  15189 	.area CSEG    (CODE)
                                  15190 	.area CONST   (CODE)
      0005A1                      15191 ___str_16:
      0005A1 20 3C 41 3E          15192 	.ascii " <A>"
      0005A5 00                   15193 	.db 0x00
                                  15194 	.area CSEG    (CODE)
                                  15195 	.area CONST   (CODE)
      0005A6                      15196 ___str_17:
      0005A6 20 4D 45 4D 20 43 48 15197 	.ascii " MEM CHECK"
             45 43 4B
      0005B0 0A                   15198 	.db 0x0a
      0005B1 00                   15199 	.db 0x00
                                  15200 	.area CSEG    (CODE)
                                  15201 	.area CONST   (CODE)
      0005B2                      15202 ___str_18:
      0005B2 20 3C 31 3E          15203 	.ascii " <1>"
      0005B6 00                   15204 	.db 0x00
                                  15205 	.area CSEG    (CODE)
                                  15206 	.area CONST   (CODE)
      0005B7                      15207 ___str_19:
      0005B7 20 55 41 52 54 20 5B 15208 	.ascii " UART [Disabled]"
             44 69 73 61 62 6C 65
             64 5D
      0005C7 00                   15209 	.db 0x00
                                  15210 	.area CSEG    (CODE)
                                  15211 	.area CONST   (CODE)
      0005C8                      15212 ___str_20:
      0005C8 20 55 41 52 54 20 5B 15213 	.ascii " UART [Enabled]"
             45 6E 61 62 6C 65 64
             5D
      0005D7 00                   15214 	.db 0x00
                                  15215 	.area CSEG    (CODE)
                                  15216 	.area CONST   (CODE)
      0005D8                      15217 ___str_21:
      0005D8 5B 44 55 4D 50 5D    15218 	.ascii "[DUMP]"
      0005DE 0A                   15219 	.db 0x0a
      0005DF 00                   15220 	.db 0x00
                                  15221 	.area CSEG    (CODE)
                                  15222 	.area CONST   (CODE)
      0005E0                      15223 ___str_22:
      0005E0 20 41 64 64 72 65 73 15224 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      0005F2 0A                   15225 	.db 0x0a
      0005F3 00                   15226 	.db 0x00
                                  15227 	.area CSEG    (CODE)
                                  15228 	.area CONST   (CODE)
      0005F4                      15229 ___str_23:
      0005F4 20 30 78 5F 5F 5F 5F 15230 	.ascii " 0x____"
      0005FB 00                   15231 	.db 0x00
                                  15232 	.area CSEG    (CODE)
                                  15233 	.area CONST   (CODE)
      0005FC                      15234 ___str_24:
      0005FC 20 43 68 6F 6F 73 65 15235 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      00060F 0A                   15236 	.db 0x0a
      000610 00                   15237 	.db 0x00
                                  15238 	.area CSEG    (CODE)
                                  15239 	.area CONST   (CODE)
      000611                      15240 ___str_25:
      000611 20 20 3C 31 3E 20 42 15241 	.ascii "  <1> BYTE"
             59 54 45
      00061B 0A                   15242 	.db 0x0a
      00061C 20 20 3C 32 3E 20 57 15243 	.ascii "  <2> WORD"
             4F 52 44
      000626 0A                   15244 	.db 0x0a
      000627 20 20 3C 34 3E 20 44 15245 	.ascii "  <4> DWORD"
             57 4F 52 44
      000632 00                   15246 	.db 0x00
                                  15247 	.area CSEG    (CODE)
                                  15248 	.area CONST   (CODE)
      000633                      15249 ___str_26:
      000633 20 49 6E 70 75 74 20 15250 	.ascii " Input Size:"
             53 69 7A 65 3A
      00063F 00                   15251 	.db 0x00
                                  15252 	.area CSEG    (CODE)
                                  15253 	.area CONST   (CODE)
      000640                      15254 ___str_27:
      000640 20 5F                15255 	.ascii " _"
      000642 00                   15256 	.db 0x00
                                  15257 	.area CSEG    (CODE)
                                  15258 	.area CONST   (CODE)
      000643                      15259 ___str_28:
      000643 20 41 64 64 72 65 73 15260 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      000655 00                   15261 	.db 0x00
                                  15262 	.area CSEG    (CODE)
                                  15263 	.area CONST   (CODE)
      000656                      15264 ___str_29:
      000656 20                   15265 	.ascii " "
      000657 00                   15266 	.db 0x00
                                  15267 	.area CSEG    (CODE)
                                  15268 	.area CONST   (CODE)
      000658                      15269 ___str_30:
      000658 20 43 68 6F 6F 73 65 15270 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      00066B 00                   15271 	.db 0x00
                                  15272 	.area CSEG    (CODE)
                                  15273 	.area CONST   (CODE)
      00066C                      15274 ___str_31:
      00066C 0A                   15275 	.db 0x0a
      00066D 0A                   15276 	.db 0x0a
      00066E 00                   15277 	.db 0x00
                                  15278 	.area CSEG    (CODE)
                                  15279 	.area CONST   (CODE)
      00066F                      15280 ___str_32:
      00066F 20 20                15281 	.ascii "  "
      000671 00                   15282 	.db 0x00
                                  15283 	.area CSEG    (CODE)
                                  15284 	.area CONST   (CODE)
      000672                      15285 ___str_33:
      000672 3C 31 3E 20 42 59 54 15286 	.ascii "<1> BYTE"
             45
      00067A 0A                   15287 	.db 0x0a
      00067B 00                   15288 	.db 0x00
                                  15289 	.area CSEG    (CODE)
                                  15290 	.area CONST   (CODE)
      00067C                      15291 ___str_34:
      00067C 0A                   15292 	.db 0x0a
      00067D 0A                   15293 	.db 0x0a
      00067E 20 20 20 20 20 20 20 15294 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00068E 0A                   15295 	.db 0x0a
      00068F 20 20 20 20 20 20 20 15296 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00069F 00                   15297 	.db 0x00
                                  15298 	.area CSEG    (CODE)
                                  15299 	.area CONST   (CODE)
      0006A0                      15300 ___str_35:
      0006A0 0A                   15301 	.db 0x0a
      0006A1 20 20                15302 	.ascii "  "
      0006A3 00                   15303 	.db 0x00
                                  15304 	.area CSEG    (CODE)
                                  15305 	.area CONST   (CODE)
      0006A4                      15306 ___str_36:
      0006A4 3C 32 3E 20 57 4F 52 15307 	.ascii "<2> WORD"
             44
      0006AC 0A                   15308 	.db 0x0a
      0006AD 00                   15309 	.db 0x00
                                  15310 	.area CSEG    (CODE)
                                  15311 	.area CONST   (CODE)
      0006AE                      15312 ___str_37:
      0006AE 0A                   15313 	.db 0x0a
      0006AF 20 20 20 20 20 20 20 15314 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006BF 0A                   15315 	.db 0x0a
      0006C0 20 20 20 20 20 20 20 15316 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006D0 00                   15317 	.db 0x00
                                  15318 	.area CSEG    (CODE)
                                  15319 	.area CONST   (CODE)
      0006D1                      15320 ___str_38:
      0006D1 0A                   15321 	.db 0x0a
      0006D2 0A                   15322 	.db 0x0a
      0006D3 20 20                15323 	.ascii "  "
      0006D5 00                   15324 	.db 0x00
                                  15325 	.area CSEG    (CODE)
                                  15326 	.area CONST   (CODE)
      0006D6                      15327 ___str_39:
      0006D6 3C 34 3E 20 44 57 4F 15328 	.ascii "<4> DWORD"
             52 44
      0006DF 00                   15329 	.db 0x00
                                  15330 	.area CSEG    (CODE)
                                  15331 	.area CONST   (CODE)
      0006E0                      15332 ___str_40:
      0006E0 0A                   15333 	.db 0x0a
      0006E1 20 20 49 6E 70 75 74 15334 	.ascii "  Input Error"
             20 45 72 72 6F 72
      0006EE 0A                   15335 	.db 0x0a
      0006EF 20 20 54 72 79 20 41 15336 	.ascii "  Try Again"
             67 61 69 6E
      0006FA 00                   15337 	.db 0x00
                                  15338 	.area CSEG    (CODE)
                                  15339 	.area CONST   (CODE)
      0006FB                      15340 ___str_41:
      0006FB 20 49 6E 70 75 74 20 15341 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      000708 00                   15342 	.db 0x00
                                  15343 	.area CSEG    (CODE)
                                  15344 	.area CONST   (CODE)
      000709                      15345 ___str_42:
      000709 20 4D 69 73 6D 61 74 15346 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      000718 0A                   15347 	.db 0x0a
      000719 20 54 72 79 20 41 67 15348 	.ascii " Try Again"
             61 69 6E
      000723 00                   15349 	.db 0x00
                                  15350 	.area CSEG    (CODE)
                                  15351 	.area CONST   (CODE)
      000724                      15352 ___str_43:
      000724 20 4D 61 74 63 68 20 15353 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      000734 0A                   15354 	.db 0x0a
      000735 20 20 20 20 20 20 20 15355 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      000745 00                   15356 	.db 0x00
                                  15357 	.area CSEG    (CODE)
                                  15358 	.area CONST   (CODE)
      000746                      15359 ___str_44:
      000746 20 41 64 64 72 65 73 15360 	.ascii " Address:"
             73 3A
      00074F 00                   15361 	.db 0x00
                                  15362 	.area CSEG    (CODE)
                                  15363 	.area CONST   (CODE)
      000750                      15364 ___str_45:
      000750 20 30 78             15365 	.ascii " 0x"
      000753 00                   15366 	.db 0x00
                                  15367 	.area CSEG    (CODE)
                                  15368 	.area CONST   (CODE)
      000754                      15369 ___str_46:
      000754 20 48 65 78 20 44 61 15370 	.ascii " Hex Data:"
             74 61 3A
      00075E 00                   15371 	.db 0x00
                                  15372 	.area CSEG    (CODE)
                                  15373 	.area CONST   (CODE)
      00075F                      15374 ___str_47:
      00075F 20 41 53 43 49 49 20 15375 	.ascii " ASCII Data:"
             44 61 74 61 3A
      00076B 00                   15376 	.db 0x00
                                  15377 	.area CSEG    (CODE)
                                  15378 	.area CONST   (CODE)
      00076C                      15379 ___str_48:
      00076C 20 44 61 74 61 20 54 15380 	.ascii " Data Type:"
             79 70 65 3A
      000777 00                   15381 	.db 0x00
                                  15382 	.area CSEG    (CODE)
                                  15383 	.area CONST   (CODE)
      000778                      15384 ___str_49:
      000778 20 42 59 54 45       15385 	.ascii " BYTE"
      00077D 00                   15386 	.db 0x00
                                  15387 	.area CSEG    (CODE)
                                  15388 	.area CONST   (CODE)
      00077E                      15389 ___str_50:
      00077E 20 57 4F 52 44       15390 	.ascii " WORD"
      000783 00                   15391 	.db 0x00
                                  15392 	.area CSEG    (CODE)
                                  15393 	.area CONST   (CODE)
      000784                      15394 ___str_51:
      000784 20 44 57 4F 52 44    15395 	.ascii " DWORD"
      00078A 00                   15396 	.db 0x00
                                  15397 	.area CSEG    (CODE)
                                  15398 	.area CONST   (CODE)
      00078B                      15399 ___str_52:
      00078B 20 3C 30 3E 20 45 78 15400 	.ascii " <0> Exit"
             69 74
      000794 0A                   15401 	.db 0x0a
      000795 00                   15402 	.db 0x00
                                  15403 	.area CSEG    (CODE)
                                  15404 	.area CONST   (CODE)
      000796                      15405 ___str_53:
      000796 3C 30 3E 20 45 78 69 15406 	.ascii "<0> Exit"
             74
      00079E 0A                   15407 	.db 0x0a
      00079F 00                   15408 	.db 0x00
                                  15409 	.area CSEG    (CODE)
                                  15410 	.area CONST   (CODE)
      0007A0                      15411 ___str_54:
      0007A0 5B 4D 4F 56 45 5D    15412 	.ascii "[MOVE]"
      0007A6 0A                   15413 	.db 0x0a
      0007A7 00                   15414 	.db 0x00
                                  15415 	.area CSEG    (CODE)
                                  15416 	.area CONST   (CODE)
      0007A8                      15417 ___str_55:
      0007A8 20 53 6F 75 72 63 65 15418 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      0007B8 00                   15419 	.db 0x00
                                  15420 	.area CSEG    (CODE)
                                  15421 	.area CONST   (CODE)
      0007B9                      15422 ___str_56:
      0007B9 20 44 65 73 74 69 6E 15423 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      0007C6 00                   15424 	.db 0x00
                                  15425 	.area CSEG    (CODE)
                                  15426 	.area CONST   (CODE)
      0007C7                      15427 ___str_57:
      0007C7 20 4D 6F 76 65 20 43 15428 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      0007D5 0A                   15429 	.db 0x0a
      0007D6 00                   15430 	.db 0x00
                                  15431 	.area CSEG    (CODE)
                                  15432 	.area CONST   (CODE)
      0007D7                      15433 ___str_58:
      0007D7 5B 45 44 49 54 5D    15434 	.ascii "[EDIT]"
      0007DD 0A                   15435 	.db 0x0a
      0007DE 00                   15436 	.db 0x00
                                  15437 	.area CSEG    (CODE)
                                  15438 	.area CONST   (CODE)
      0007DF                      15439 ___str_59:
      0007DF 20 45 64 69 74 20 41 15440 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      0007ED 00                   15441 	.db 0x00
                                  15442 	.area CSEG    (CODE)
                                  15443 	.area CONST   (CODE)
      0007EE                      15444 ___str_60:
      0007EE 20 4C 6F 63 61 74 69 15445 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      000801 0A                   15446 	.db 0x0a
      000802 00                   15447 	.db 0x00
                                  15448 	.area CSEG    (CODE)
                                  15449 	.area CONST   (CODE)
      000803                      15450 ___str_61:
      000803 20 5F 5F             15451 	.ascii " __"
      000806 00                   15452 	.db 0x00
                                  15453 	.area CSEG    (CODE)
                                  15454 	.area CONST   (CODE)
      000807                      15455 ___str_62:
      000807 20 45 6E 74 65 72 20 15456 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000818 0A                   15457 	.db 0x0a
      000819 00                   15458 	.db 0x00
                                  15459 	.area CSEG    (CODE)
                                  15460 	.area CONST   (CODE)
      00081A                      15461 ___str_63:
      00081A 20 43 68 6F 6F 73 65 15462 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      00082E 0A                   15463 	.db 0x0a
      00082F 00                   15464 	.db 0x00
                                  15465 	.area CSEG    (CODE)
                                  15466 	.area CONST   (CODE)
      000830                      15467 ___str_64:
      000830 20 20 3C 31 3E 20 4E 15468 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      000842 0A                   15469 	.db 0x0a
      000843 20 20 3C 32 3E 20 4E 15470 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      000854 0A                   15471 	.db 0x0a
      000855 00                   15472 	.db 0x00
                                  15473 	.area CSEG    (CODE)
                                  15474 	.area CONST   (CODE)
      000856                      15475 ___str_65:
      000856 20 20 3C 30 3E 20 45 15476 	.ascii "  <0> Exit"
             78 69 74
      000860 00                   15477 	.db 0x00
                                  15478 	.area CSEG    (CODE)
                                  15479 	.area CONST   (CODE)
      000861                      15480 ___str_66:
      000861 0A                   15481 	.db 0x0a
      000862 20                   15482 	.ascii " "
      000863 00                   15483 	.db 0x00
                                  15484 	.area CSEG    (CODE)
                                  15485 	.area CONST   (CODE)
      000864                      15486 ___str_67:
      000864 20 45 6E 74 65 72 20 15487 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000875 0A                   15488 	.db 0x0a
      000876 20                   15489 	.ascii " "
      000877 00                   15490 	.db 0x00
                                  15491 	.area CSEG    (CODE)
                                  15492 	.area CONST   (CODE)
      000878                      15493 ___str_68:
      000878 3C 31 3E 20 4E 65 78 15494 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      000888 0A                   15495 	.db 0x0a
      000889 00                   15496 	.db 0x00
                                  15497 	.area CSEG    (CODE)
                                  15498 	.area CONST   (CODE)
      00088A                      15499 ___str_69:
      00088A 0A                   15500 	.db 0x0a
      00088B 0A                   15501 	.db 0x0a
      00088C 20 20 20 20 20 20 20 15502 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00089B 00                   15503 	.db 0x00
                                  15504 	.area CSEG    (CODE)
                                  15505 	.area CONST   (CODE)
      00089C                      15506 ___str_70:
      00089C 0A                   15507 	.db 0x0a
      00089D 20 5F 5F             15508 	.ascii " __"
      0008A0 00                   15509 	.db 0x00
                                  15510 	.area CSEG    (CODE)
                                  15511 	.area CONST   (CODE)
      0008A1                      15512 ___str_71:
      0008A1 0A                   15513 	.db 0x0a
      0008A2 20 20 3C 31 3E 20 4E 15514 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0008B4 0A                   15515 	.db 0x0a
      0008B5 20 20 3C 32 3E 20 4E 15516 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0008C6 0A                   15517 	.db 0x0a
      0008C7 20 20 3C 30 3E 20 45 15518 	.ascii "  <0> Exit"
             78 69 74
      0008D1 00                   15519 	.db 0x00
                                  15520 	.area CSEG    (CODE)
                                  15521 	.area CONST   (CODE)
      0008D2                      15522 ___str_72:
      0008D2 20 43 68 6F 6F 73 65 15523 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      0008E6 0A                   15524 	.db 0x0a
      0008E7 20 20                15525 	.ascii "  "
      0008E9 00                   15526 	.db 0x00
                                  15527 	.area CSEG    (CODE)
                                  15528 	.area CONST   (CODE)
      0008EA                      15529 ___str_73:
      0008EA 3C 32 3E 20 4E 65 77 15530 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      0008F9 0A                   15531 	.db 0x0a
      0008FA 00                   15532 	.db 0x00
                                  15533 	.area CSEG    (CODE)
                                  15534 	.area CONST   (CODE)
      0008FB                      15535 ___str_74:
      0008FB 0A                   15536 	.db 0x0a
      0008FC 20 20 20 20 20 20 20 15537 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00090B 00                   15538 	.db 0x00
                                  15539 	.area CSEG    (CODE)
                                  15540 	.area CONST   (CODE)
      00090C                      15541 ___str_75:
      00090C 20 45 64 69 74 20 41 15542 	.ascii " Edit Address"
             64 64 72 65 73 73
      000919 00                   15543 	.db 0x00
                                  15544 	.area CSEG    (CODE)
                                  15545 	.area CONST   (CODE)
      00091A                      15546 ___str_76:
      00091A 0A                   15547 	.db 0x0a
      00091B 00                   15548 	.db 0x00
                                  15549 	.area CSEG    (CODE)
                                  15550 	.area CONST   (CODE)
      00091C                      15551 ___str_77:
      00091C 3C 30 3E 20 45 78 69 15552 	.ascii "<0> Exit"
             74
      000924 00                   15553 	.db 0x00
                                  15554 	.area CSEG    (CODE)
                                  15555 	.area CONST   (CODE)
      000925                      15556 ___str_78:
      000925 0A                   15557 	.db 0x0a
      000926 0A                   15558 	.db 0x0a
      000927 0A                   15559 	.db 0x0a
      000928 0A                   15560 	.db 0x0a
      000929 20 49 6E 70 75 74 20 15561 	.ascii " Input Error "
             45 72 72 6F 72 20
      000936 00                   15562 	.db 0x00
                                  15563 	.area CSEG    (CODE)
                                  15564 	.area CONST   (CODE)
      000937                      15565 ___str_79:
      000937 5B 46 49 4E 44 5D    15566 	.ascii "[FIND]"
      00093D 0A                   15567 	.db 0x0a
      00093E 00                   15568 	.db 0x00
                                  15569 	.area CSEG    (CODE)
                                  15570 	.area CONST   (CODE)
      00093F                      15571 ___str_80:
      00093F 20 46 69 6E 64 20 56 15572 	.ascii " Find Value:"
             61 6C 75 65 3A
      00094B 00                   15573 	.db 0x00
                                  15574 	.area CSEG    (CODE)
                                  15575 	.area CONST   (CODE)
      00094C                      15576 ___str_81:
      00094C 20 53 65 61 72 63 68 15577 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      00095C 00                   15578 	.db 0x00
                                  15579 	.area CSEG    (CODE)
                                  15580 	.area CONST   (CODE)
      00095D                      15581 ___str_82:
      00095D 20 49 6E 70 75 74 20 15582 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      00096F 0A                   15583 	.db 0x0a
      000970 00                   15584 	.db 0x00
                                  15585 	.area CSEG    (CODE)
                                  15586 	.area CONST   (CODE)
      000971                      15587 ___str_83:
      000971 20 20 3C 30 31 3E 20 15588 	.ascii "  <01> BYTE"
             42 59 54 45
      00097C 0A                   15589 	.db 0x0a
      00097D 20 20 3C 30 32 3E 20 15590 	.ascii "  <02> WORD"
             57 4F 52 44
      000988 0A                   15591 	.db 0x0a
      000989 20 20 3C 30 34 3E 20 15592 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      000995 0A                   15593 	.db 0x0a
      000996 00                   15594 	.db 0x00
                                  15595 	.area CSEG    (CODE)
                                  15596 	.area CONST   (CODE)
      000997                      15597 ___str_84:
      000997 20 20 3C 46 46 3E 20 15598 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      0009A4 00                   15599 	.db 0x00
                                  15600 	.area CSEG    (CODE)
                                  15601 	.area CONST   (CODE)
      0009A5                      15602 ___str_85:
      0009A5 20 20 20 5F 5F       15603 	.ascii "   __"
      0009AA 00                   15604 	.db 0x00
                                  15605 	.area CSEG    (CODE)
                                  15606 	.area CONST   (CODE)
      0009AB                      15607 ___str_86:
      0009AB 20 20 20             15608 	.ascii "   "
      0009AE 00                   15609 	.db 0x00
                                  15610 	.area CSEG    (CODE)
                                  15611 	.area CONST   (CODE)
      0009AF                      15612 ___str_87:
      0009AF 0A                   15613 	.db 0x0a
      0009B0 20 20 20 20 20 20 20 15614 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0009C0 00                   15615 	.db 0x00
                                  15616 	.area CSEG    (CODE)
                                  15617 	.area CONST   (CODE)
      0009C1                      15618 ___str_88:
      0009C1 0A                   15619 	.db 0x0a
      0009C2 20 54 72 79 20 61 67 15620 	.ascii " Try again"
             61 69 6E
      0009CC 00                   15621 	.db 0x00
                                  15622 	.area CSEG    (CODE)
                                  15623 	.area CONST   (CODE)
      0009CD                      15624 ___str_89:
      0009CD 3C 30 31 3E 20 42 59 15625 	.ascii "<01> BYTE"
             54 45
      0009D6 0A                   15626 	.db 0x0a
      0009D7 00                   15627 	.db 0x00
                                  15628 	.area CSEG    (CODE)
                                  15629 	.area CONST   (CODE)
      0009D8                      15630 ___str_90:
      0009D8 20 20 3C 30 32 3E 20 15631 	.ascii "  <02> WORD"
             57 4F 52 44
      0009E3 0A                   15632 	.db 0x0a
      0009E4 00                   15633 	.db 0x00
                                  15634 	.area CSEG    (CODE)
                                  15635 	.area CONST   (CODE)
      0009E5                      15636 ___str_91:
      0009E5 20 20 3C 30 34 3E 20 15637 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      0009F1 0A                   15638 	.db 0x0a
      0009F2 00                   15639 	.db 0x00
                                  15640 	.area CSEG    (CODE)
                                  15641 	.area CONST   (CODE)
      0009F3                      15642 ___str_92:
      0009F3 0A                   15643 	.db 0x0a
      0009F4 20 53 65 61 72 63 68 15644 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      000A07 00                   15645 	.db 0x00
                                  15646 	.area CSEG    (CODE)
                                  15647 	.area CONST   (CODE)
      000A08                      15648 ___str_93:
      000A08 0A                   15649 	.db 0x0a
      000A09 20 42 59 54 45 20 5B 15650 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      000A17 00                   15651 	.db 0x00
                                  15652 	.area CSEG    (CODE)
                                  15653 	.area CONST   (CODE)
      000A18                      15654 ___str_94:
      000A18 20 20 3C 30 31 3E 20 15655 	.ascii "  <01> BYTE"
             42 59 54 45
      000A23 0A                   15656 	.db 0x0a
      000A24 20 20                15657 	.ascii "  "
      000A26 00                   15658 	.db 0x00
                                  15659 	.area CSEG    (CODE)
                                  15660 	.area CONST   (CODE)
      000A27                      15661 ___str_95:
      000A27 3C 30 32 3E 20 57 4F 15662 	.ascii "<02> WORD"
             52 44
      000A30 0A                   15663 	.db 0x0a
      000A31 00                   15664 	.db 0x00
                                  15665 	.area CSEG    (CODE)
                                  15666 	.area CONST   (CODE)
      000A32                      15667 ___str_96:
      000A32 0A                   15668 	.db 0x0a
      000A33 20 57 4F 52 44 20 5B 15669 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      000A42 00                   15670 	.db 0x00
                                  15671 	.area CSEG    (CODE)
                                  15672 	.area CONST   (CODE)
      000A43                      15673 ___str_97:
      000A43 20 20 3C 30 31 3E 20 15674 	.ascii "  <01> BYTE"
             42 59 54 45
      000A4E 0A                   15675 	.db 0x0a
      000A4F 20 20 3C 30 32 3E 20 15676 	.ascii "  <02> WORD"
             57 4F 52 44
      000A5A 0A                   15677 	.db 0x0a
      000A5B 20 20                15678 	.ascii "  "
      000A5D 00                   15679 	.db 0x00
                                  15680 	.area CSEG    (CODE)
                                  15681 	.area CONST   (CODE)
      000A5E                      15682 ___str_98:
      000A5E 3C 30 34 3E 20 44 57 15683 	.ascii "<04> DWORD"
             4F 52 44
      000A68 0A                   15684 	.db 0x0a
      000A69 00                   15685 	.db 0x00
                                  15686 	.area CSEG    (CODE)
                                  15687 	.area CONST   (CODE)
      000A6A                      15688 ___str_99:
      000A6A 0A                   15689 	.db 0x0a
      000A6B 20 44 57 4F 52 44 20 15690 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      000A7B 00                   15691 	.db 0x00
                                  15692 	.area CSEG    (CODE)
                                  15693 	.area CONST   (CODE)
      000A7C                      15694 ___str_100:
      000A7C 3C 30 34 3E 20 44 57 15695 	.ascii "<04> DWORD"
             4F 52 44
      000A86 0A                   15696 	.db 0x0a
      000A87 20 20                15697 	.ascii "  "
      000A89 00                   15698 	.db 0x00
                                  15699 	.area CSEG    (CODE)
                                  15700 	.area CONST   (CODE)
      000A8A                      15701 ___str_101:
      000A8A 3C 46 46 3E 20 28 53 15702 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      000A95 00                   15703 	.db 0x00
                                  15704 	.area CSEG    (CODE)
                                  15705 	.area CONST   (CODE)
      000A96                      15706 ___str_102:
      000A96 0A                   15707 	.db 0x0a
      000A97 20 5B 32 35 36 20 42 15708 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      000AA4 00                   15709 	.db 0x00
                                  15710 	.area CSEG    (CODE)
                                  15711 	.area CONST   (CODE)
      000AA5                      15712 ___str_103:
      000AA5 20 5B 4E 6F 6E 2D 49 15713 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      000AB7 0A                   15714 	.db 0x0a
      000AB8 00                   15715 	.db 0x00
                                  15716 	.area CSEG    (CODE)
                                  15717 	.area CONST   (CODE)
      000AB9                      15718 ___str_104:
      000AB9 20 53 65 61 72 63 68 15719 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000AC7 0A                   15720 	.db 0x0a
      000AC8 20                   15721 	.ascii " "
      000AC9 00                   15722 	.db 0x00
                                  15723 	.area CSEG    (CODE)
                                  15724 	.area CONST   (CODE)
      000ACA                      15725 ___str_105:
      000ACA 20 46 6F 75 6E 64 20 15726 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      000ADD 0A                   15727 	.db 0x0a
      000ADE 00                   15728 	.db 0x00
                                  15729 	.area CSEG    (CODE)
                                  15730 	.area CONST   (CODE)
      000ADF                      15731 ___str_106:
      000ADF 0A                   15732 	.db 0x0a
      000AE0 20 30 78             15733 	.ascii " 0x"
      000AE3 00                   15734 	.db 0x00
                                  15735 	.area CSEG    (CODE)
                                  15736 	.area CONST   (CODE)
      000AE4                      15737 ___str_107:
      000AE4 20 5B 49 6E 74 65 72 15738 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      000AF2 0A                   15739 	.db 0x0a
      000AF3 00                   15740 	.db 0x00
                                  15741 	.area CSEG    (CODE)
                                  15742 	.area CONST   (CODE)
      000AF4                      15743 ___str_108:
      000AF4 20 46 6F 75 6E 64 20 15744 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      000B07 0A                   15745 	.db 0x0a
      000B08 00                   15746 	.db 0x00
                                  15747 	.area CSEG    (CODE)
                                  15748 	.area CONST   (CODE)
      000B09                      15749 ___str_109:
      000B09 50 61 67 65 3A 20    15750 	.ascii "Page: "
      000B0F 00                   15751 	.db 0x00
                                  15752 	.area CSEG    (CODE)
                                  15753 	.area CONST   (CODE)
      000B10                      15754 ___str_110:
      000B10 20 3C 31 3E 20 4E 65 15755 	.ascii " <1> Next"
             78 74
      000B19 0A                   15756 	.db 0x0a
      000B1A 20 3C 30 3E 20 45 78 15757 	.ascii " <0> Exit"
             69 74
      000B23 0A                   15758 	.db 0x0a
      000B24 20 20 20 20 20 20 20 15759 	.ascii "              "
             20 20 20 20 20 20 20
      000B32 00                   15760 	.db 0x00
                                  15761 	.area CSEG    (CODE)
                                  15762 	.area CONST   (CODE)
      000B33                      15763 ___str_111:
      000B33 3C 31 3E 20 4E 65 78 15764 	.ascii "<1> Next"
             74
      000B3B 00                   15765 	.db 0x00
                                  15766 	.area CSEG    (CODE)
                                  15767 	.area CONST   (CODE)
      000B3C                      15768 ___str_112:
      000B3C 20 20 20 20 20 20 20 15769 	.ascii "          "
             20 20 20
      000B46 0A                   15770 	.db 0x0a
      000B47 20 3C 30 3E 20 45 78 15771 	.ascii " <0> Exit"
             69 74
      000B50 0A                   15772 	.db 0x0a
      000B51 20 20 20 20 20 20 20 15773 	.ascii "              "
             20 20 20 20 20 20 20
      000B5F 00                   15774 	.db 0x00
                                  15775 	.area CSEG    (CODE)
                                  15776 	.area CONST   (CODE)
      000B60                      15777 ___str_113:
      000B60 20 20 20 20 20 20 20 15778 	.ascii "          "
             20 20 20
      000B6A 0A                   15779 	.db 0x0a
      000B6B 20 3C 30 3E 20 45 78 15780 	.ascii " <0> Exit"
             69 74
      000B74 0A                   15781 	.db 0x0a
      000B75 20 3C 32 3E 20 50 72 15782 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000B82 00                   15783 	.db 0x00
                                  15784 	.area CSEG    (CODE)
                                  15785 	.area CONST   (CODE)
      000B83                      15786 ___str_114:
      000B83 0A                   15787 	.db 0x0a
      000B84 0A                   15788 	.db 0x0a
      000B85 20                   15789 	.ascii " "
      000B86 00                   15790 	.db 0x00
                                  15791 	.area CSEG    (CODE)
                                  15792 	.area CONST   (CODE)
      000B87                      15793 ___str_115:
      000B87 3C 32 3E 20 50 72 65 15794 	.ascii "<2> Previous"
             76 69 6F 75 73
      000B93 00                   15795 	.db 0x00
                                  15796 	.area CSEG    (CODE)
                                  15797 	.area CONST   (CODE)
      000B94                      15798 ___str_116:
      000B94 20 3C 31 3E 20 4E 65 15799 	.ascii " <1> Next"
             78 74
      000B9D 0A                   15800 	.db 0x0a
      000B9E 20 3C 30 3E 20 45 78 15801 	.ascii " <0> Exit"
             69 74
      000BA7 0A                   15802 	.db 0x0a
      000BA8 20 3C 32 3E 20 50 72 15803 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BB5 00                   15804 	.db 0x00
                                  15805 	.area CSEG    (CODE)
                                  15806 	.area CONST   (CODE)
      000BB6                      15807 ___str_117:
      000BB6 20 3C 31 3E 20 4E 65 15808 	.ascii " <1> Next"
             78 74
      000BBF 0A                   15809 	.db 0x0a
      000BC0 20                   15810 	.ascii " "
      000BC1 00                   15811 	.db 0x00
                                  15812 	.area CSEG    (CODE)
                                  15813 	.area CONST   (CODE)
      000BC2                      15814 ___str_118:
      000BC2 0A                   15815 	.db 0x0a
      000BC3 20 3C 32 3E 20 50 72 15816 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BD0 00                   15817 	.db 0x00
                                  15818 	.area CSEG    (CODE)
                                  15819 	.area CONST   (CODE)
      000BD1                      15820 ___str_119:
      000BD1 20 56 61 6C 75 65 20 15821 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      000BE1 0A                   15822 	.db 0x0a
      000BE2 20 57 69 74 68 69 6E 15823 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      000BEF 0A                   15824 	.db 0x0a
      000BF0 20                   15825 	.ascii " "
      000BF1 00                   15826 	.db 0x00
                                  15827 	.area CSEG    (CODE)
                                  15828 	.area CONST   (CODE)
      000BF2                      15829 ___str_120:
      000BF2 0A                   15830 	.db 0x0a
      000BF3 20 3C 30 3E 20 45 78 15831 	.ascii " <0> Exit"
             69 74
      000BFC 00                   15832 	.db 0x00
                                  15833 	.area CSEG    (CODE)
                                  15834 	.area CONST   (CODE)
      000BFD                      15835 ___str_121:
      000BFD 0A                   15836 	.db 0x0a
      000BFE 0A                   15837 	.db 0x0a
      000BFF 0A                   15838 	.db 0x0a
      000C00 20                   15839 	.ascii " "
      000C01 00                   15840 	.db 0x00
                                  15841 	.area CSEG    (CODE)
                                  15842 	.area CONST   (CODE)
      000C02                      15843 ___str_122:
      000C02 5B 43 4F 55 4E 54 5D 15844 	.ascii "[COUNT]"
      000C09 0A                   15845 	.db 0x0a
      000C0A 00                   15846 	.db 0x00
                                  15847 	.area CSEG    (CODE)
                                  15848 	.area CONST   (CODE)
      000C0B                      15849 ___str_123:
      000C0B 20 53 65 61 72 63 68 15850 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000C19 00                   15851 	.db 0x00
                                  15852 	.area CSEG    (CODE)
                                  15853 	.area CONST   (CODE)
      000C1A                      15854 ___str_124:
      000C1A 20 46 6F 75 6E 64 20 15855 	.ascii " Found in"
             69 6E
      000C23 0A                   15856 	.db 0x0a
      000C24 20                   15857 	.ascii " "
      000C25 00                   15858 	.db 0x00
                                  15859 	.area CSEG    (CODE)
                                  15860 	.area CONST   (CODE)
      000C26                      15861 ___str_125:
      000C26 20 42 79 74 65 73 20 15862 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      000C32 0A                   15863 	.db 0x0a
      000C33 20                   15864 	.ascii " "
      000C34 00                   15865 	.db 0x00
                                  15866 	.area CSEG    (CODE)
                                  15867 	.area CONST   (CODE)
      000C35                      15868 ___str_126:
      000C35 43 6F 75 6E 74 3A 20 15869 	.ascii "Count: "
      000C3C 00                   15870 	.db 0x00
                                  15871 	.area CSEG    (CODE)
                                  15872 	.area CONST   (CODE)
      000C3D                      15873 ___str_127:
      000C3D 5B 43 48 45 43 4B 5D 15874 	.ascii "[CHECK]"
      000C44 0A                   15875 	.db 0x0a
      000C45 00                   15876 	.db 0x00
                                  15877 	.area CSEG    (CODE)
                                  15878 	.area CONST   (CODE)
      000C46                      15879 ___str_128:
      000C46 20 45 6E 74 65 72 20 15880 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      000C53 0A                   15881 	.db 0x0a
      000C54 00                   15882 	.db 0x00
                                  15883 	.area CSEG    (CODE)
                                  15884 	.area CONST   (CODE)
      000C55                      15885 ___str_129:
      000C55 0A                   15886 	.db 0x0a
      000C56 0A                   15887 	.db 0x0a
      000C57 20 57 72 69 74 69 6E 15888 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      000C67 0A                   15889 	.db 0x0a
      000C68 20 61 6C 6C 20 6D 65 15890 	.ascii " all memory"
             6D 6F 72 79
      000C73 0A                   15891 	.db 0x0a
      000C74 20 6C 6F 63 61 74 69 15892 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      000C81 00                   15893 	.db 0x00
                                  15894 	.area CSEG    (CODE)
                                  15895 	.area CONST   (CODE)
      000C82                      15896 ___str_130:
      000C82 0A                   15897 	.db 0x0a
      000C83 20 56 65 72 69 66 79 15898 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      000C96 00                   15899 	.db 0x00
                                  15900 	.area CSEG    (CODE)
                                  15901 	.area CONST   (CODE)
      000C97                      15902 ___str_131:
      000C97 0A                   15903 	.db 0x0a
      000C98 20 43 6F 6D 70 6C 65 15904 	.ascii " Complete."
             74 65 2E
      000CA2 00                   15905 	.db 0x00
                                  15906 	.area CSEG    (CODE)
                                  15907 	.area CONST   (CODE)
      000CA3                      15908 ___str_132:
      000CA3 0A                   15909 	.db 0x0a
      000CA4 0A                   15910 	.db 0x0a
      000CA5 20 54 6F 67 67 6C 69 15911 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      000CB6 0A                   15912 	.db 0x0a
      000CB7 20 65 61 63 68 20 6E 15913 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      000CC6 00                   15914 	.db 0x00
                                  15915 	.area CSEG    (CODE)
                                  15916 	.area CONST   (CODE)
      000CC7                      15917 ___str_133:
      000CC7 0A                   15918 	.db 0x0a
      000CC8 20 57 72 69 74 69 6E 15919 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      000CDC 00                   15920 	.db 0x00
                                  15921 	.area CSEG    (CODE)
                                  15922 	.area CONST   (CODE)
      000CDD                      15923 ___str_134:
      000CDD 0A                   15924 	.db 0x0a
      000CDE 0A                   15925 	.db 0x0a
      000CDF 20 43 68 65 63 6B 20 15926 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      000CEF 00                   15927 	.db 0x00
                                  15928 	.area CSEG    (CODE)
                                  15929 	.area CONST   (CODE)
      000CF0                      15930 ___str_135:
      000CF0 5B 55 41 52 54 5D    15931 	.ascii "[UART]"
      000CF6 0A                   15932 	.db 0x0a
      000CF7 00                   15933 	.db 0x00
                                  15934 	.area CSEG    (CODE)
                                  15935 	.area CONST   (CODE)
      000CF8                      15936 ___str_136:
      000CF8 20 3C 31 3E 20 44 61 15937 	.ascii " <1> Data Rate Set"
             74 61 20 52 61 74 65
             20 53 65 74
      000D0A 0A                   15938 	.db 0x0a
      000D0B 00                   15939 	.db 0x00
                                  15940 	.area CSEG    (CODE)
                                  15941 	.area CONST   (CODE)
      000D0C                      15942 ___str_137:
      000D0C 20 3C 32 3E 20 4E 75 15943 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      000D1F 0A                   15944 	.db 0x0a
      000D20 20 20 20 20 28 38 20 15945 	.ascii "    (8 or 9 bits)"
             6F 72 20 39 20 62 69
             74 73 29
      000D31 0A                   15946 	.db 0x0a
      000D32 00                   15947 	.db 0x00
                                  15948 	.area CSEG    (CODE)
                                  15949 	.area CONST   (CODE)
      000D33                      15950 ___str_138:
      000D33 20 3C 33 3E 20 50 61 15951 	.ascii " <3> Parity"
             72 69 74 79
      000D3E 0A                   15952 	.db 0x0a
      000D3F 20 20 20 20 28 45 76 15953 	.ascii "    (Even/Odd/None)"
             65 6E 2F 4F 64 64 2F
             4E 6F 6E 65 29
      000D52 0A                   15954 	.db 0x0a
      000D53 00                   15955 	.db 0x00
                                  15956 	.area CSEG    (CODE)
                                  15957 	.area CONST   (CODE)
      000D54                      15958 ___str_139:
      000D54 20 3C 34 3E 20 45 6E 15959 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      000D64 0A                   15960 	.db 0x0a
      000D65 00                   15961 	.db 0x00
                                  15962 	.area CSEG    (CODE)
                                  15963 	.area CONST   (CODE)
      000D66                      15964 ___str_140:
      000D66 20 20 7B             15965 	.ascii "  {"
      000D69 00                   15966 	.db 0x00
                                  15967 	.area CSEG    (CODE)
                                  15968 	.area CONST   (CODE)
      000D6A                      15969 ___str_141:
      000D6A 3C 31 3E 20          15970 	.ascii "<1> "
      000D6E 00                   15971 	.db 0x00
                                  15972 	.area CSEG    (CODE)
                                  15973 	.area CONST   (CODE)
      000D6F                      15974 ___str_142:
      000D6F 44 61 74 65 20 52 61 15975 	.ascii "Date Rate"
             74 65
      000D78 0A                   15976 	.db 0x0a
      000D79 00                   15977 	.db 0x00
                                  15978 	.area CSEG    (CODE)
                                  15979 	.area CONST   (CODE)
      000D7A                      15980 ___str_143:
      000D7A 0A                   15981 	.db 0x0a
      000D7B 0A                   15982 	.db 0x0a
      000D7C 20 49 6E 63 6F 72 72 15983 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      000D8C 0A                   15984 	.db 0x0a
      000D8D 20 20 54 72 79 20 61 15985 	.ascii "  Try again."
             67 61 69 6E 2E
      000D99 0A                   15986 	.db 0x0a
      000D9A 00                   15987 	.db 0x00
                                  15988 	.area CSEG    (CODE)
                                  15989 	.area CONST   (CODE)
      000D9B                      15990 ___str_144:
      000D9B 20 45 52 52 4F 52 3A 15991 	.ascii " ERROR: No Baud Set"
             20 4E 6F 20 42 61 75
             64 20 53 65 74
      000DAE 0A                   15992 	.db 0x0a
      000DAF 00                   15993 	.db 0x00
                                  15994 	.area CSEG    (CODE)
                                  15995 	.area CONST   (CODE)
      000DB0                      15996 ___str_145:
      000DB0 20 50 6C 65 61 73 65 15997 	.ascii " Please set a baud rate"
             20 73 65 74 20 61 20
             62 61 75 64 20 72 61
             74 65
      000DC7 00                   15998 	.db 0x00
                                  15999 	.area CSEG    (CODE)
                                  16000 	.area CONST   (CODE)
      000DC8                      16001 ___str_146:
      000DC8 20 45 52 52 4F 52 3A 16002 	.ascii " ERROR: Not Parity Set"
             20 4E 6F 74 20 50 61
             72 69 74 79 20 53 65
             74
      000DDE 0A                   16003 	.db 0x0a
      000DDF 00                   16004 	.db 0x00
                                  16005 	.area CSEG    (CODE)
                                  16006 	.area CONST   (CODE)
      000DE0                      16007 ___str_147:
      000DE0 20 50 6C 65 61 73 65 16008 	.ascii " Please set parity"
             20 73 65 74 20 70 61
             72 69 74 79
      000DF2 00                   16009 	.db 0x00
                                  16010 	.area CSEG    (CODE)
                                  16011 	.area CONST   (CODE)
      000DF3                      16012 ___str_148:
      000DF3 20 53 65 74 74 74 69 16013 	.ascii " Setttings Verified"
             6E 67 73 20 56 65 72
             69 66 69 65 64
      000E06 0A                   16014 	.db 0x0a
      000E07 20 45 6E 61 62 6C 69 16015 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      000E18 00                   16016 	.db 0x00
                                  16017 	.area CSEG    (CODE)
                                  16018 	.area CONST   (CODE)
      000E19                      16019 ___str_149:
      000E19 3C 31 3E             16020 	.ascii "<1>"
      000E1C 00                   16021 	.db 0x00
                                  16022 	.area CSEG    (CODE)
                                  16023 	.area CONST   (CODE)
      000E1D                      16024 ___str_150:
      000E1D 20 44 61 74 61 20 52 16025 	.ascii " Data Rate"
             61 74 65
      000E27 0A                   16026 	.db 0x0a
      000E28 00                   16027 	.db 0x00
                                  16028 	.area CSEG    (CODE)
                                  16029 	.area CONST   (CODE)
      000E29                      16030 ___str_151:
      000E29 3C 32 3E             16031 	.ascii "<2>"
      000E2C 00                   16032 	.db 0x00
                                  16033 	.area CSEG    (CODE)
                                  16034 	.area CONST   (CODE)
      000E2D                      16035 ___str_152:
      000E2D 20 4E 75 6D 62 65 72 16036 	.ascii " Number of Bits"
             20 6F 66 20 42 69 74
             73
      000E3C 0A                   16037 	.db 0x0a
      000E3D 20 20 20 20 28 38 20 16038 	.ascii "    (8 or 9 bits)"
             6F 72 20 39 20 62 69
             74 73 29
      000E4E 0A                   16039 	.db 0x0a
      000E4F 00                   16040 	.db 0x00
                                  16041 	.area CSEG    (CODE)
                                  16042 	.area CONST   (CODE)
      000E50                      16043 ___str_153:
      000E50 3C 33 3E             16044 	.ascii "<3>"
      000E53 00                   16045 	.db 0x00
                                  16046 	.area CSEG    (CODE)
                                  16047 	.area CONST   (CODE)
      000E54                      16048 ___str_154:
      000E54 20 50 61 72 69 74 79 16049 	.ascii " Parity"
      000E5B 0A                   16050 	.db 0x0a
      000E5C 20 20 20 20 28 45 76 16051 	.ascii "    (Even/Odd/None)"
             65 6E 2F 4F 64 64 2F
             4E 6F 6E 65 29
      000E6F 0A                   16052 	.db 0x0a
      000E70 00                   16053 	.db 0x00
                                  16054 	.area CSEG    (CODE)
                                  16055 	.area CONST   (CODE)
      000E71                      16056 ___str_155:
      000E71 20 3C 31 3E 20 31 32 16057 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      000E7F 0A                   16058 	.db 0x0a
      000E80 00                   16059 	.db 0x00
                                  16060 	.area CSEG    (CODE)
                                  16061 	.area CONST   (CODE)
      000E81                      16062 ___str_156:
      000E81 20 3C 32 3E 20 32 34 16063 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      000E8F 0A                   16064 	.db 0x0a
      000E90 00                   16065 	.db 0x00
                                  16066 	.area CSEG    (CODE)
                                  16067 	.area CONST   (CODE)
      000E91                      16068 ___str_157:
      000E91 20 3C 33 3E 20 34 38 16069 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      000E9F 0A                   16070 	.db 0x0a
      000EA0 00                   16071 	.db 0x00
                                  16072 	.area CSEG    (CODE)
                                  16073 	.area CONST   (CODE)
      000EA1                      16074 ___str_158:
      000EA1 20 3C 34 3E 20 39 36 16075 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      000EAF 0A                   16076 	.db 0x0a
      000EB0 00                   16077 	.db 0x00
                                  16078 	.area CSEG    (CODE)
                                  16079 	.area CONST   (CODE)
      000EB1                      16080 ___str_159:
      000EB1 20 3C 35 3E 20 31 39 16081 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      000EC0 0A                   16082 	.db 0x0a
      000EC1 00                   16083 	.db 0x00
                                  16084 	.area CSEG    (CODE)
                                  16085 	.area CONST   (CODE)
      000EC2                      16086 ___str_160:
      000EC2 3C 44 3E             16087 	.ascii "<D>"
      000EC5 00                   16088 	.db 0x00
                                  16089 	.area CSEG    (CODE)
                                  16090 	.area CONST   (CODE)
      000EC6                      16091 ___str_161:
      000EC6 20 20 20 20 20 20 20 16092 	.ascii "          "
             20 20 20
      000ED0 00                   16093 	.db 0x00
                                  16094 	.area CSEG    (CODE)
                                  16095 	.area CONST   (CODE)
      000ED1                      16096 ___str_162:
      000ED1 3C 42 3E             16097 	.ascii "<B>"
      000ED4 00                   16098 	.db 0x00
                                  16099 	.area CSEG    (CODE)
                                  16100 	.area CONST   (CODE)
      000ED5                      16101 ___str_163:
      000ED5 3C 45 3E             16102 	.ascii "<E>"
      000ED8 00                   16103 	.db 0x00
                                  16104 	.area CSEG    (CODE)
                                  16105 	.area CONST   (CODE)
      000ED9                      16106 ___str_164:
      000ED9 3C 46 3E             16107 	.ascii "<F>"
      000EDC 00                   16108 	.db 0x00
                                  16109 	.area CSEG    (CODE)
                                  16110 	.area CONST   (CODE)
      000EDD                      16111 ___str_165:
      000EDD 3C 43 3E             16112 	.ascii "<C>"
      000EE0 00                   16113 	.db 0x00
                                  16114 	.area CSEG    (CODE)
                                  16115 	.area CONST   (CODE)
      000EE1                      16116 ___str_166:
      000EE1 3C 41 3E             16117 	.ascii "<A>"
      000EE4 00                   16118 	.db 0x00
                                  16119 	.area CSEG    (CODE)
                                  16120 	.area CONST   (CODE)
      000EE5                      16121 ___str_167:
      000EE5 20 55 41 52 54 20 5B 16122 	.ascii " UART [Enabled]"
             45 6E 61 62 6C 65 64
             5D
      000EF4 0A                   16123 	.db 0x0a
      000EF5 00                   16124 	.db 0x00
                                  16125 	.area CSEG    (CODE)
                                  16126 	.area CONST   (CODE)
      000EF6                      16127 ___str_168:
      000EF6 20 55 41 52 54 20 5B 16128 	.ascii " UART [Disabled]"
             44 69 73 61 62 6C 65
             64 5D
      000F06 0A                   16129 	.db 0x0a
      000F07 00                   16130 	.db 0x00
                                  16131 	.area CSEG    (CODE)
                                  16132 	.area CONST   (CODE)
      000F08                      16133 ___str_169:
      000F08 49 4E 56 41 4C 49 44 16134 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      000F15 0A                   16135 	.db 0x0a
      000F16 00                   16136 	.db 0x00
                                  16137 	.area CSEG    (CODE)
                                  16138 	.area CONST   (CODE)
      000F17                      16139 ___str_170:
      000F17 54 72 79 20 61 67 61 16140 	.ascii "Try again."
             69 6E 2E
      000F21 00                   16141 	.db 0x00
                                  16142 	.area CSEG    (CODE)
                                  16143 	.area CONST   (CODE)
      000F22                      16144 ___str_171:
      000F22 20 20 20 20 20 20 20 16145 	.ascii "               "
             20 20 20 20 20 20 20
             20
      000F31 0A                   16146 	.db 0x0a
      000F32 00                   16147 	.db 0x00
                                  16148 	.area CSEG    (CODE)
                                  16149 	.area XINIT   (CODE)
                                  16150 	.area CABS    (ABS,CODE)
