                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_Init
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _FL
                                     36 	.globl _P
                                     37 	.globl _TF2
                                     38 	.globl _EXF2
                                     39 	.globl _RCLK
                                     40 	.globl _TCLK
                                     41 	.globl _EXEN2
                                     42 	.globl _TR2
                                     43 	.globl _C_T2
                                     44 	.globl _CP_RL2
                                     45 	.globl _T2CON_7
                                     46 	.globl _T2CON_6
                                     47 	.globl _T2CON_5
                                     48 	.globl _T2CON_4
                                     49 	.globl _T2CON_3
                                     50 	.globl _T2CON_2
                                     51 	.globl _T2CON_1
                                     52 	.globl _T2CON_0
                                     53 	.globl _PT2
                                     54 	.globl _PS
                                     55 	.globl _PT1
                                     56 	.globl _PX1
                                     57 	.globl _PT0
                                     58 	.globl _PX0
                                     59 	.globl _RD
                                     60 	.globl _WR
                                     61 	.globl _T1
                                     62 	.globl _T0
                                     63 	.globl _INT1
                                     64 	.globl _INT0
                                     65 	.globl _TXD
                                     66 	.globl _RXD
                                     67 	.globl _P3_7
                                     68 	.globl _P3_6
                                     69 	.globl _P3_5
                                     70 	.globl _P3_4
                                     71 	.globl _P3_3
                                     72 	.globl _P3_2
                                     73 	.globl _P3_1
                                     74 	.globl _P3_0
                                     75 	.globl _EA
                                     76 	.globl _ET2
                                     77 	.globl _ES
                                     78 	.globl _ET1
                                     79 	.globl _EX1
                                     80 	.globl _ET0
                                     81 	.globl _EX0
                                     82 	.globl _P2_7
                                     83 	.globl _P2_6
                                     84 	.globl _P2_5
                                     85 	.globl _P2_4
                                     86 	.globl _P2_3
                                     87 	.globl _P2_2
                                     88 	.globl _P2_1
                                     89 	.globl _P2_0
                                     90 	.globl _SM0
                                     91 	.globl _SM1
                                     92 	.globl _SM2
                                     93 	.globl _REN
                                     94 	.globl _TB8
                                     95 	.globl _RB8
                                     96 	.globl _TI
                                     97 	.globl _RI
                                     98 	.globl _T2EX
                                     99 	.globl _T2
                                    100 	.globl _P1_7
                                    101 	.globl _P1_6
                                    102 	.globl _P1_5
                                    103 	.globl _P1_4
                                    104 	.globl _P1_3
                                    105 	.globl _P1_2
                                    106 	.globl _P1_1
                                    107 	.globl _P1_0
                                    108 	.globl _TF1
                                    109 	.globl _TR1
                                    110 	.globl _TF0
                                    111 	.globl _TR0
                                    112 	.globl _IE1
                                    113 	.globl _IT1
                                    114 	.globl _IE0
                                    115 	.globl _IT0
                                    116 	.globl _P0_7
                                    117 	.globl _P0_6
                                    118 	.globl _P0_5
                                    119 	.globl _P0_4
                                    120 	.globl _P0_3
                                    121 	.globl _P0_2
                                    122 	.globl _P0_1
                                    123 	.globl _P0_0
                                    124 	.globl _B
                                    125 	.globl _A
                                    126 	.globl _ACC
                                    127 	.globl _PSW
                                    128 	.globl _TH2
                                    129 	.globl _TL2
                                    130 	.globl _RCAP2H
                                    131 	.globl _RCAP2L
                                    132 	.globl _T2MOD
                                    133 	.globl _T2CON
                                    134 	.globl _IP
                                    135 	.globl _P3
                                    136 	.globl _IE
                                    137 	.globl _P2
                                    138 	.globl _SBUF
                                    139 	.globl _SCON
                                    140 	.globl _P1
                                    141 	.globl _TH1
                                    142 	.globl _TH0
                                    143 	.globl _TL1
                                    144 	.globl _TL0
                                    145 	.globl _TMOD
                                    146 	.globl _TCON
                                    147 	.globl _PCON
                                    148 	.globl _DPH
                                    149 	.globl _DPL
                                    150 	.globl _SP
                                    151 	.globl _P0
                                    152 	.globl _parityBit
                                    153 	.globl _paritySet
                                    154 	.globl _bitMode
                                    155 	.globl _bitSet
                                    156 	.globl _baudRate
                                    157 	.globl _baudSet
                                    158 	.globl _UART_en
                                    159 	.globl _selection
                                    160 	.globl _drawChar_PARM_6
                                    161 	.globl _drawChar_PARM_5
                                    162 	.globl _drawChar_PARM_4
                                    163 	.globl _drawChar_PARM_3
                                    164 	.globl _drawChar_PARM_2
                                    165 	.globl _fillRect_PARM_5
                                    166 	.globl _fillRect_PARM_4
                                    167 	.globl _fillRect_PARM_3
                                    168 	.globl _fillRect_PARM_2
                                    169 	.globl _testCircles_PARM_2
                                    170 	.globl _drawCircle_PARM_4
                                    171 	.globl _drawCircle_PARM_3
                                    172 	.globl _drawCircle_PARM_2
                                    173 	.globl _drawPixel_PARM_3
                                    174 	.globl _drawPixel_PARM_2
                                    175 	.globl _rtcWrite_PARM_2
                                    176 	.globl __height
                                    177 	.globl __width
                                    178 	.globl _textbgcolor
                                    179 	.globl _textcolor
                                    180 	.globl _rotation
                                    181 	.globl _textsize
                                    182 	.globl _cursor_y
                                    183 	.globl _cursor_x
                                    184 	.globl _received_flag
                                    185 	.globl _received_byte
                                    186 	.globl _seg7_address
                                    187 	.globl _lcd_address
                                    188 	.globl _rowloc
                                    189 	.globl _colloc
                                    190 	.globl _iowrite8
                                    191 	.globl _ioread8
                                    192 	.globl _ramWrite8
                                    193 	.globl _ramRead8
                                    194 	.globl _writeAllRAM
                                    195 	.globl _checkAllRAM
                                    196 	.globl _delay
                                    197 	.globl _writeRegister8
                                    198 	.globl _writeRegister16
                                    199 	.globl _seg7Test
                                    200 	.globl _rtcInit
                                    201 	.globl _rtcBusy
                                    202 	.globl _rtcCmd
                                    203 	.globl _rtcWrite
                                    204 	.globl _rtcRead
                                    205 	.globl _rtcPrint
                                    206 	.globl _setCursor
                                    207 	.globl _setTextColor
                                    208 	.globl _setTextSize
                                    209 	.globl _setAddress
                                    210 	.globl _TFT_LCD_INIT
                                    211 	.globl _drawPixel
                                    212 	.globl _drawCircle
                                    213 	.globl _testCircles
                                    214 	.globl _fillRect
                                    215 	.globl _fillTop
                                    216 	.globl _fillScreen
                                    217 	.globl _clearLCD
                                    218 	.globl _LCD_string_write
                                    219 	.globl _writeNewLine
                                    220 	.globl _freeType
                                    221 	.globl _keyDetect
                                    222 	.globl _reverse
                                    223 	.globl _reverse16
                                    224 	.globl _hexToASCII
                                    225 	.globl _ASCIItoHex
                                    226 	.globl _asciiToDec
                                    227 	.globl _asciiToHex
                                    228 	.globl _print4Hex
                                    229 	.globl _print8Hex
                                    230 	.globl _print16Hex
                                    231 	.globl _print16Dec
                                    232 	.globl _print8ASCII
                                    233 	.globl _print16ASCII
                                    234 	.globl _setColorDefault
                                    235 	.globl _setColorSelect
                                    236 	.globl _setColorHighlight1
                                    237 	.globl _setColorHighlight2
                                    238 	.globl _setColorGray
                                    239 	.globl _setColorMenu
                                    240 	.globl _setColorRed
                                    241 	.globl _setColorWhite
                                    242 	.globl _setColorGreen
                                    243 	.globl _setColorYellow
                                    244 	.globl _inputAddress
                                    245 	.globl _inputBlockType
                                    246 	.globl _inputBlockSize
                                    247 	.globl _printMenu
                                    248 	.globl _dump
                                    249 	.globl _move
                                    250 	.globl _edit
                                    251 	.globl _find
                                    252 	.globl _count
                                    253 	.globl _check
                                    254 	.globl _uart
                                    255 	.globl _main
                                    256 ;--------------------------------------------------------
                                    257 ; special function registers
                                    258 ;--------------------------------------------------------
                                    259 	.area RSEG    (ABS,DATA)
      000000                        260 	.org 0x0000
                           000080   261 _P0	=	0x0080
                           000081   262 _SP	=	0x0081
                           000082   263 _DPL	=	0x0082
                           000083   264 _DPH	=	0x0083
                           000087   265 _PCON	=	0x0087
                           000088   266 _TCON	=	0x0088
                           000089   267 _TMOD	=	0x0089
                           00008A   268 _TL0	=	0x008a
                           00008B   269 _TL1	=	0x008b
                           00008C   270 _TH0	=	0x008c
                           00008D   271 _TH1	=	0x008d
                           000090   272 _P1	=	0x0090
                           000098   273 _SCON	=	0x0098
                           000099   274 _SBUF	=	0x0099
                           0000A0   275 _P2	=	0x00a0
                           0000A8   276 _IE	=	0x00a8
                           0000B0   277 _P3	=	0x00b0
                           0000B8   278 _IP	=	0x00b8
                           0000C8   279 _T2CON	=	0x00c8
                           0000C9   280 _T2MOD	=	0x00c9
                           0000CA   281 _RCAP2L	=	0x00ca
                           0000CB   282 _RCAP2H	=	0x00cb
                           0000CC   283 _TL2	=	0x00cc
                           0000CD   284 _TH2	=	0x00cd
                           0000D0   285 _PSW	=	0x00d0
                           0000E0   286 _ACC	=	0x00e0
                           0000E0   287 _A	=	0x00e0
                           0000F0   288 _B	=	0x00f0
                                    289 ;--------------------------------------------------------
                                    290 ; special function bits
                                    291 ;--------------------------------------------------------
                                    292 	.area RSEG    (ABS,DATA)
      000000                        293 	.org 0x0000
                           000080   294 _P0_0	=	0x0080
                           000081   295 _P0_1	=	0x0081
                           000082   296 _P0_2	=	0x0082
                           000083   297 _P0_3	=	0x0083
                           000084   298 _P0_4	=	0x0084
                           000085   299 _P0_5	=	0x0085
                           000086   300 _P0_6	=	0x0086
                           000087   301 _P0_7	=	0x0087
                           000088   302 _IT0	=	0x0088
                           000089   303 _IE0	=	0x0089
                           00008A   304 _IT1	=	0x008a
                           00008B   305 _IE1	=	0x008b
                           00008C   306 _TR0	=	0x008c
                           00008D   307 _TF0	=	0x008d
                           00008E   308 _TR1	=	0x008e
                           00008F   309 _TF1	=	0x008f
                           000090   310 _P1_0	=	0x0090
                           000091   311 _P1_1	=	0x0091
                           000092   312 _P1_2	=	0x0092
                           000093   313 _P1_3	=	0x0093
                           000094   314 _P1_4	=	0x0094
                           000095   315 _P1_5	=	0x0095
                           000096   316 _P1_6	=	0x0096
                           000097   317 _P1_7	=	0x0097
                           000090   318 _T2	=	0x0090
                           000091   319 _T2EX	=	0x0091
                           000098   320 _RI	=	0x0098
                           000099   321 _TI	=	0x0099
                           00009A   322 _RB8	=	0x009a
                           00009B   323 _TB8	=	0x009b
                           00009C   324 _REN	=	0x009c
                           00009D   325 _SM2	=	0x009d
                           00009E   326 _SM1	=	0x009e
                           00009F   327 _SM0	=	0x009f
                           0000A0   328 _P2_0	=	0x00a0
                           0000A1   329 _P2_1	=	0x00a1
                           0000A2   330 _P2_2	=	0x00a2
                           0000A3   331 _P2_3	=	0x00a3
                           0000A4   332 _P2_4	=	0x00a4
                           0000A5   333 _P2_5	=	0x00a5
                           0000A6   334 _P2_6	=	0x00a6
                           0000A7   335 _P2_7	=	0x00a7
                           0000A8   336 _EX0	=	0x00a8
                           0000A9   337 _ET0	=	0x00a9
                           0000AA   338 _EX1	=	0x00aa
                           0000AB   339 _ET1	=	0x00ab
                           0000AC   340 _ES	=	0x00ac
                           0000AD   341 _ET2	=	0x00ad
                           0000AF   342 _EA	=	0x00af
                           0000B0   343 _P3_0	=	0x00b0
                           0000B1   344 _P3_1	=	0x00b1
                           0000B2   345 _P3_2	=	0x00b2
                           0000B3   346 _P3_3	=	0x00b3
                           0000B4   347 _P3_4	=	0x00b4
                           0000B5   348 _P3_5	=	0x00b5
                           0000B6   349 _P3_6	=	0x00b6
                           0000B7   350 _P3_7	=	0x00b7
                           0000B0   351 _RXD	=	0x00b0
                           0000B1   352 _TXD	=	0x00b1
                           0000B2   353 _INT0	=	0x00b2
                           0000B3   354 _INT1	=	0x00b3
                           0000B4   355 _T0	=	0x00b4
                           0000B5   356 _T1	=	0x00b5
                           0000B6   357 _WR	=	0x00b6
                           0000B7   358 _RD	=	0x00b7
                           0000B8   359 _PX0	=	0x00b8
                           0000B9   360 _PT0	=	0x00b9
                           0000BA   361 _PX1	=	0x00ba
                           0000BB   362 _PT1	=	0x00bb
                           0000BC   363 _PS	=	0x00bc
                           0000BD   364 _PT2	=	0x00bd
                           0000C8   365 _T2CON_0	=	0x00c8
                           0000C9   366 _T2CON_1	=	0x00c9
                           0000CA   367 _T2CON_2	=	0x00ca
                           0000CB   368 _T2CON_3	=	0x00cb
                           0000CC   369 _T2CON_4	=	0x00cc
                           0000CD   370 _T2CON_5	=	0x00cd
                           0000CE   371 _T2CON_6	=	0x00ce
                           0000CF   372 _T2CON_7	=	0x00cf
                           0000C8   373 _CP_RL2	=	0x00c8
                           0000C9   374 _C_T2	=	0x00c9
                           0000CA   375 _TR2	=	0x00ca
                           0000CB   376 _EXEN2	=	0x00cb
                           0000CC   377 _TCLK	=	0x00cc
                           0000CD   378 _RCLK	=	0x00cd
                           0000CE   379 _EXF2	=	0x00ce
                           0000CF   380 _TF2	=	0x00cf
                           0000D0   381 _P	=	0x00d0
                           0000D1   382 _FL	=	0x00d1
                           0000D2   383 _OV	=	0x00d2
                           0000D3   384 _RS0	=	0x00d3
                           0000D4   385 _RS1	=	0x00d4
                           0000D5   386 _F0	=	0x00d5
                           0000D6   387 _AC	=	0x00d6
                           0000D7   388 _CY	=	0x00d7
                                    389 ;--------------------------------------------------------
                                    390 ; overlayable register banks
                                    391 ;--------------------------------------------------------
                                    392 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        393 	.ds 8
                                    394 ;--------------------------------------------------------
                                    395 ; internal ram data
                                    396 ;--------------------------------------------------------
                                    397 	.area DSEG    (DATA)
      000000                        398 _colloc::
      000000                        399 	.ds 1
      000001                        400 _rowloc::
      000001                        401 	.ds 1
      000002                        402 _lcd_address::
      000002                        403 	.ds 2
      000004                        404 _seg7_address::
      000004                        405 	.ds 2
      000006                        406 _received_byte::
      000006                        407 	.ds 1
      000007                        408 _received_flag::
      000007                        409 	.ds 1
      000008                        410 _cursor_x::
      000008                        411 	.ds 2
      00000A                        412 _cursor_y::
      00000A                        413 	.ds 2
      00000C                        414 _textsize::
      00000C                        415 	.ds 1
      00000D                        416 _rotation::
      00000D                        417 	.ds 1
      00000E                        418 _textcolor::
      00000E                        419 	.ds 2
      000010                        420 _textbgcolor::
      000010                        421 	.ds 2
      000012                        422 __width::
      000012                        423 	.ds 2
      000014                        424 __height::
      000014                        425 	.ds 2
      000016                        426 _rtcWrite_PARM_2:
      000016                        427 	.ds 1
      000017                        428 _rtcPrint_printval_65536_226:
      000017                        429 	.ds 9
      000020                        430 _drawPixel_PARM_2:
      000020                        431 	.ds 2
      000022                        432 _drawPixel_PARM_3:
      000022                        433 	.ds 2
      000024                        434 _drawCircle_PARM_2:
      000024                        435 	.ds 2
      000026                        436 _drawCircle_PARM_3:
      000026                        437 	.ds 2
      000028                        438 _drawCircle_PARM_4:
      000028                        439 	.ds 2
      00002A                        440 _drawCircle_x0_65536_393:
      00002A                        441 	.ds 2
      00002C                        442 _drawCircle_f_65536_394:
      00002C                        443 	.ds 2
      00002E                        444 _drawCircle_ddF_x_65536_394:
      00002E                        445 	.ds 2
      000030                        446 _drawCircle_x_65536_394:
      000030                        447 	.ds 2
      000032                        448 _testCircles_PARM_2:
      000032                        449 	.ds 2
      000034                        450 _testCircles_w_65536_398:
      000034                        451 	.ds 2
      000036                        452 _testCircles_h_65536_398:
      000036                        453 	.ds 2
      000038                        454 _fillRect_PARM_2:
      000038                        455 	.ds 2
      00003A                        456 _fillRect_PARM_3:
      00003A                        457 	.ds 2
      00003C                        458 _fillRect_PARM_4:
      00003C                        459 	.ds 2
      00003E                        460 _fillRect_PARM_5:
      00003E                        461 	.ds 2
      000040                        462 _drawChar_PARM_2:
      000040                        463 	.ds 2
      000042                        464 _drawChar_PARM_3:
      000042                        465 	.ds 1
      000043                        466 _drawChar_PARM_4:
      000043                        467 	.ds 2
      000045                        468 _drawChar_PARM_5:
      000045                        469 	.ds 2
      000047                        470 _drawChar_PARM_6:
      000047                        471 	.ds 1
      000048                        472 _drawChar_x_65536_458:
      000048                        473 	.ds 2
      00004A                        474 _drawChar_i_131072_461:
      00004A                        475 	.ds 1
      00004B                        476 _drawChar_line_196608_462:
      00004B                        477 	.ds 1
      00004C                        478 _drawChar_sloc0_1_0:
      00004C                        479 	.ds 2
      00004E                        480 _asciiToHex_store_65536_519:
      00004E                        481 	.ds 2
      000050                        482 _dump_d_65536_553:
      000050                        483 	.ds 2
      000052                        484 _dump_sloc0_1_0:
      000052                        485 	.ds 1
      000053                        486 _move_d_65536_609:
      000053                        487 	.ds 2
      000055                        488 _move_i_131072_618:
      000055                        489 	.ds 2
      000057                        490 _edit_d_65536_628:
      000057                        491 	.ds 2
      000059                        492 _find_i_262144_665:
      000059                        493 	.ds 2
      00005B                        494 _find_sloc0_1_0:
      00005B                        495 	.ds 1
      00005C                        496 _find_sloc1_1_0:
      00005C                        497 	.ds 2
      00005E                        498 _count_i_262144_721:
      00005E                        499 	.ds 2
      000060                        500 _count_sloc0_1_0:
      000060                        501 	.ds 1
      000061                        502 _count_sloc1_1_0:
      000061                        503 	.ds 2
                                    504 ;--------------------------------------------------------
                                    505 ; overlayable items in internal ram 
                                    506 ;--------------------------------------------------------
                                    507 	.area	OSEG    (OVR,DATA)
      000000                        508 _iowrite8_PARM_2:
      000000                        509 	.ds 1
                                    510 	.area	OSEG    (OVR,DATA)
                                    511 	.area	OSEG    (OVR,DATA)
      000000                        512 _ramWrite8_PARM_2:
      000000                        513 	.ds 1
                                    514 	.area	OSEG    (OVR,DATA)
                                    515 	.area	OSEG    (OVR,DATA)
                                    516 	.area	OSEG    (OVR,DATA)
                                    517 	.area	OSEG    (OVR,DATA)
                                    518 	.area	OSEG    (OVR,DATA)
      000000                        519 _writeRegister8_PARM_2:
      000000                        520 	.ds 1
                                    521 	.area	OSEG    (OVR,DATA)
      000000                        522 _writeRegister16_PARM_2:
      000000                        523 	.ds 2
                                    524 	.area	OSEG    (OVR,DATA)
                                    525 	.area	OSEG    (OVR,DATA)
      000000                        526 _rtcCmd_PARM_2:
      000000                        527 	.ds 1
                                    528 	.area	OSEG    (OVR,DATA)
      000000                        529 _setCursor_PARM_2:
      000000                        530 	.ds 2
                                    531 	.area	OSEG    (OVR,DATA)
      000000                        532 _setTextColor_PARM_2:
      000000                        533 	.ds 2
                                    534 	.area	OSEG    (OVR,DATA)
                                    535 	.area	OSEG    (OVR,DATA)
      000000                        536 _setAddress_PARM_2:
      000000                        537 	.ds 2
      000002                        538 _setAddress_PARM_3:
      000002                        539 	.ds 2
      000004                        540 _setAddress_PARM_4:
      000004                        541 	.ds 2
                                    542 	.area	OSEG    (OVR,DATA)
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 ;--------------------------------------------------------
                                    545 ; Stack segment in internal ram 
                                    546 ;--------------------------------------------------------
                                    547 	.area	SSEG
      000000                        548 __start__stack:
      000000                        549 	.ds	1
                                    550 
                                    551 ;--------------------------------------------------------
                                    552 ; indirectly addressable internal ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area ISEG    (DATA)
      000000                        555 _selection::
      000000                        556 	.ds 1
      000001                        557 _UART_en::
      000001                        558 	.ds 1
      000002                        559 _baudSet::
      000002                        560 	.ds 1
      000003                        561 _baudRate::
      000003                        562 	.ds 2
      000005                        563 _bitSet::
      000005                        564 	.ds 1
      000006                        565 _bitMode::
      000006                        566 	.ds 1
      000007                        567 _paritySet::
      000007                        568 	.ds 1
      000008                        569 _parityBit::
      000008                        570 	.ds 1
      000009                        571 _dump_address_65536_553:
      000009                        572 	.ds 2
      00000B                        573 _dump_exit_65536_553:
      00000B                        574 	.ds 1
      00000C                        575 _move_sourceAddress_65536_609:
      00000C                        576 	.ds 2
      00000E                        577 _move_invalidSize_65536_609:
      00000E                        578 	.ds 1
      00000F                        579 _edit_exit_65536_628:
      00000F                        580 	.ds 1
      000010                        581 _edit_invalid_65536_628:
      000010                        582 	.ds 1
      000011                        583 _find_address_65536_652:
      000011                        584 	.ds 2
      000013                        585 _find_blockSize_65536_652:
      000013                        586 	.ds 1
      000014                        587 _find_value_65536_652:
      000014                        588 	.ds 1
      000015                        589 _find_scan_65536_652:
      000015                        590 	.ds 1
      000016                        591 _find_noneFound_65536_652:
      000016                        592 	.ds 1
      000017                        593 _find_exit_65536_652:
      000017                        594 	.ds 1
      000018                        595 _count_address_65536_708:
      000018                        596 	.ds 2
      00001A                        597 _count_blockSize_65536_708:
      00001A                        598 	.ds 1
      00001B                        599 _count_value_65536_708:
      00001B                        600 	.ds 1
      00001C                        601 _count_scan_65536_708:
      00001C                        602 	.ds 1
      00001D                        603 _count_noneFound_65536_708:
      00001D                        604 	.ds 1
      00001E                        605 _count_exit_65536_708:
      00001E                        606 	.ds 1
      00001F                        607 _uart_baudType_65536_763:
      00001F                        608 	.ds 1
                                    609 ;--------------------------------------------------------
                                    610 ; absolute internal ram data
                                    611 ;--------------------------------------------------------
                                    612 	.area IABS    (ABS,DATA)
                                    613 	.area IABS    (ABS,DATA)
                                    614 ;--------------------------------------------------------
                                    615 ; bit data
                                    616 ;--------------------------------------------------------
                                    617 	.area BSEG    (BIT)
                                    618 ;--------------------------------------------------------
                                    619 ; paged external ram data
                                    620 ;--------------------------------------------------------
                                    621 	.area PSEG    (PAG,XDATA)
                                    622 ;--------------------------------------------------------
                                    623 ; external ram data
                                    624 ;--------------------------------------------------------
                                    625 	.area XSEG    (XDATA)
                                    626 ;--------------------------------------------------------
                                    627 ; absolute external ram data
                                    628 ;--------------------------------------------------------
                                    629 	.area XABS    (ABS,XDATA)
                                    630 ;--------------------------------------------------------
                                    631 ; external initialized ram data
                                    632 ;--------------------------------------------------------
                                    633 	.area XISEG   (XDATA)
                                    634 	.area HOME    (CODE)
                                    635 	.area GSINIT0 (CODE)
                                    636 	.area GSINIT1 (CODE)
                                    637 	.area GSINIT2 (CODE)
                                    638 	.area GSINIT3 (CODE)
                                    639 	.area GSINIT4 (CODE)
                                    640 	.area GSINIT5 (CODE)
                                    641 	.area GSINIT  (CODE)
                                    642 	.area GSFINAL (CODE)
                                    643 	.area CSEG    (CODE)
                                    644 ;--------------------------------------------------------
                                    645 ; interrupt vector 
                                    646 ;--------------------------------------------------------
                                    647 	.area HOME    (CODE)
      000000                        648 __interrupt_vect:
      000000 02r00r00         [24]  649 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  650 	reti
      000004                        651 	.ds	7
      00000B 32               [24]  652 	reti
      00000C                        653 	.ds	7
      000013 32               [24]  654 	reti
      000014                        655 	.ds	7
      00001B 32               [24]  656 	reti
      00001C                        657 	.ds	7
      000023 02r01r1D         [24]  658 	ljmp	_ISR_receive
                                    659 ;--------------------------------------------------------
                                    660 ; global & static initialisations
                                    661 ;--------------------------------------------------------
                                    662 	.area HOME    (CODE)
                                    663 	.area GSINIT  (CODE)
                                    664 	.area GSFINAL (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.globl __sdcc_gsinit_startup
                                    667 	.globl __sdcc_program_startup
                                    668 	.globl __start__stack
                                    669 	.globl __mcs51_genXINIT
                                    670 	.globl __mcs51_genXRAMCLEAR
                                    671 	.globl __mcs51_genRAMCLEAR
                                    672 ;	.\ecen4350_lcd_v4.c:41: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000000 75*02 00         [24]  673 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  674 	mov	(_lcd_address + 1),#0x40
                                    675 ;	.\ecen4350_lcd_v4.c:42: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000006 75*04 00         [24]  676 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  677 	mov	(_seg7_address + 1),#0x80
                                    678 ;	.\ecen4350_lcd_v4.c:44: volatile unsigned char received_byte = 0;
      00000C 75*06 00         [24]  679 	mov	_received_byte,#0x00
                                    680 ;	.\ecen4350_lcd_v4.c:45: volatile unsigned char received_flag = 0;
      00000F 75*07 00         [24]  681 	mov	_received_flag,#0x00
                                    682 ;	.\ecen4350_lcd_v4.c:48: __idata unsigned char UART_en = 0;
      000012 78r01            [12]  683 	mov	r0,#_UART_en
      000014 76 00            [12]  684 	mov	@r0,#0x00
                                    685 ;	.\ecen4350_lcd_v4.c:49: __idata unsigned char baudSet = 0;
      000016 78r02            [12]  686 	mov	r0,#_baudSet
      000018 76 00            [12]  687 	mov	@r0,#0x00
                                    688 ;	.\ecen4350_lcd_v4.c:51: __idata unsigned char bitSet = 0;
      00001A 78r05            [12]  689 	mov	r0,#_bitSet
      00001C 76 00            [12]  690 	mov	@r0,#0x00
                                    691 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char paritySet = 0;
      00001E 78r07            [12]  692 	mov	r0,#_paritySet
      000020 76 00            [12]  693 	mov	@r0,#0x00
                                    694 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  695 	ljmp	__sdcc_program_startup
                                    696 ;--------------------------------------------------------
                                    697 ; Home
                                    698 ;--------------------------------------------------------
                                    699 	.area HOME    (CODE)
                                    700 	.area HOME    (CODE)
      000026                        701 __sdcc_program_startup:
      000026 02r52r80         [24]  702 	ljmp	_main
                                    703 ;	return from main will return to caller
                                    704 ;--------------------------------------------------------
                                    705 ; code
                                    706 ;--------------------------------------------------------
                                    707 	.area CSEG    (CODE)
                                    708 ;------------------------------------------------------------
                                    709 ;Allocation info for local variables in function 'iowrite8'
                                    710 ;------------------------------------------------------------
                                    711 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    712 ;map_address               Allocated to registers 
                                    713 ;------------------------------------------------------------
                                    714 ;	.\ecen4350_lcd_v4.c:90: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    715 ;	-----------------------------------------
                                    716 ;	 function iowrite8
                                    717 ;	-----------------------------------------
      000000                        718 _iowrite8:
                           000007   719 	ar7 = 0x07
                           000006   720 	ar6 = 0x06
                           000005   721 	ar5 = 0x05
                           000004   722 	ar4 = 0x04
                           000003   723 	ar3 = 0x03
                           000002   724 	ar2 = 0x02
                           000001   725 	ar1 = 0x01
                           000000   726 	ar0 = 0x00
                                    727 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    728 ;	assignBit
      000000 D2 B5            [12]  729 	setb	_P3_5
                                    730 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000002 E5*00            [12]  731 	mov	a,_iowrite8_PARM_2
      000004 F0               [24]  732 	movx	@dptr,a
                                    733 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    734 ;	assignBit
      000005 C2 B5            [12]  735 	clr	_P3_5
                                    736 ;	.\ecen4350_lcd_v4.c:94: }
      000007 22               [24]  737 	ret
                                    738 ;------------------------------------------------------------
                                    739 ;Allocation info for local variables in function 'ioread8'
                                    740 ;------------------------------------------------------------
                                    741 ;map_address               Allocated to registers 
                                    742 ;d                         Allocated to registers r7 
                                    743 ;------------------------------------------------------------
                                    744 ;	.\ecen4350_lcd_v4.c:96: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    745 ;	-----------------------------------------
                                    746 ;	 function ioread8
                                    747 ;	-----------------------------------------
      000008                        748 _ioread8:
                                    749 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                    750 ;	assignBit
      000008 D2 B5            [12]  751 	setb	_P3_5
                                    752 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      00000A E0               [24]  753 	movx	a,@dptr
      00000B FF               [12]  754 	mov	r7,a
                                    755 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                    756 ;	assignBit
      00000C C2 B5            [12]  757 	clr	_P3_5
                                    758 ;	.\ecen4350_lcd_v4.c:102: return d;
      00000E 8F 82            [24]  759 	mov	dpl,r7
                                    760 ;	.\ecen4350_lcd_v4.c:103: }
      000010 22               [24]  761 	ret
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'ramWrite8'
                                    764 ;------------------------------------------------------------
                                    765 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    766 ;map_address               Allocated to registers 
                                    767 ;------------------------------------------------------------
                                    768 ;	.\ecen4350_lcd_v4.c:105: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    769 ;	-----------------------------------------
                                    770 ;	 function ramWrite8
                                    771 ;	-----------------------------------------
      000011                        772 _ramWrite8:
                                    773 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    774 ;	assignBit
      000011 C2 B5            [12]  775 	clr	_P3_5
                                    776 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      000013 E5*00            [12]  777 	mov	a,_ramWrite8_PARM_2
      000015 F0               [24]  778 	movx	@dptr,a
                                    779 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                    780 ;	assignBit
      000016 D2 B5            [12]  781 	setb	_P3_5
                                    782 ;	.\ecen4350_lcd_v4.c:110: }
      000018 22               [24]  783 	ret
                                    784 ;------------------------------------------------------------
                                    785 ;Allocation info for local variables in function 'ramRead8'
                                    786 ;------------------------------------------------------------
                                    787 ;map_address               Allocated to registers 
                                    788 ;d                         Allocated to registers r7 
                                    789 ;------------------------------------------------------------
                                    790 ;	.\ecen4350_lcd_v4.c:112: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    791 ;	-----------------------------------------
                                    792 ;	 function ramRead8
                                    793 ;	-----------------------------------------
      000019                        794 _ramRead8:
                                    795 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                    796 ;	assignBit
      000019 C2 B5            [12]  797 	clr	_P3_5
                                    798 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      00001B E0               [24]  799 	movx	a,@dptr
      00001C FF               [12]  800 	mov	r7,a
                                    801 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                    802 ;	assignBit
      00001D D2 B5            [12]  803 	setb	_P3_5
                                    804 ;	.\ecen4350_lcd_v4.c:118: return d;
      00001F 8F 82            [24]  805 	mov	dpl,r7
                                    806 ;	.\ecen4350_lcd_v4.c:119: }
      000021 22               [24]  807 	ret
                                    808 ;------------------------------------------------------------
                                    809 ;Allocation info for local variables in function 'writeAllRAM'
                                    810 ;------------------------------------------------------------
                                    811 ;d                         Allocated to registers r7 
                                    812 ;i                         Allocated to registers r3 r4 r5 r6 
                                    813 ;ram_address               Allocated to registers 
                                    814 ;------------------------------------------------------------
                                    815 ;	.\ecen4350_lcd_v4.c:121: void writeAllRAM(unsigned char d)
                                    816 ;	-----------------------------------------
                                    817 ;	 function writeAllRAM
                                    818 ;	-----------------------------------------
      000022                        819 _writeAllRAM:
      000022 AF 82            [24]  820 	mov	r7,dpl
                                    821 ;	.\ecen4350_lcd_v4.c:126: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000024 7B 00            [12]  822 	mov	r3,#0x00
      000026 7C 00            [12]  823 	mov	r4,#0x00
      000028 7D 00            [12]  824 	mov	r5,#0x00
      00002A 7E 00            [12]  825 	mov	r6,#0x00
      00002C                        826 00102$:
                                    827 ;	.\ecen4350_lcd_v4.c:128: IOM = 0;
                                    828 ;	assignBit
      00002C C2 B5            [12]  829 	clr	_P3_5
                                    830 ;	.\ecen4350_lcd_v4.c:129: ram_address = (unsigned char __xdata *)(i);
      00002E 8B 82            [24]  831 	mov	dpl,r3
      000030 8C 83            [24]  832 	mov	dph,r4
                                    833 ;	.\ecen4350_lcd_v4.c:130: *ram_address = d;
      000032 EF               [12]  834 	mov	a,r7
      000033 F0               [24]  835 	movx	@dptr,a
                                    836 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                    837 ;	assignBit
      000034 D2 B5            [12]  838 	setb	_P3_5
                                    839 ;	.\ecen4350_lcd_v4.c:126: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      000036 0B               [12]  840 	inc	r3
      000037 BB 00 09         [24]  841 	cjne	r3,#0x00,00111$
      00003A 0C               [12]  842 	inc	r4
      00003B BC 00 05         [24]  843 	cjne	r4,#0x00,00111$
      00003E 0D               [12]  844 	inc	r5
      00003F BD 00 01         [24]  845 	cjne	r5,#0x00,00111$
      000042 0E               [12]  846 	inc	r6
      000043                        847 00111$:
      000043 C3               [12]  848 	clr	c
      000044 74 FF            [12]  849 	mov	a,#0xff
      000046 9B               [12]  850 	subb	a,r3
      000047 74 FF            [12]  851 	mov	a,#0xff
      000049 9C               [12]  852 	subb	a,r4
      00004A E4               [12]  853 	clr	a
      00004B 9D               [12]  854 	subb	a,r5
      00004C E4               [12]  855 	clr	a
      00004D 9E               [12]  856 	subb	a,r6
      00004E 50 DC            [24]  857 	jnc	00102$
                                    858 ;	.\ecen4350_lcd_v4.c:133: }
      000050 22               [24]  859 	ret
                                    860 ;------------------------------------------------------------
                                    861 ;Allocation info for local variables in function 'checkAllRAM'
                                    862 ;------------------------------------------------------------
                                    863 ;d                         Allocated to registers r7 
                                    864 ;ram_address               Allocated to registers 
                                    865 ;i                         Allocated to registers r3 r4 r5 r6 
                                    866 ;__3276800001              Allocated to registers 
                                    867 ;__3276800002              Allocated to registers 
                                    868 ;map_address               Allocated to registers 
                                    869 ;d                         Allocated to registers 
                                    870 ;__2621440004              Allocated to registers 
                                    871 ;__2621440005              Allocated to registers 
                                    872 ;map_address               Allocated to registers 
                                    873 ;d                         Allocated to registers 
                                    874 ;------------------------------------------------------------
                                    875 ;	.\ecen4350_lcd_v4.c:135: void checkAllRAM(unsigned char d)
                                    876 ;	-----------------------------------------
                                    877 ;	 function checkAllRAM
                                    878 ;	-----------------------------------------
      000051                        879 _checkAllRAM:
      000051 AF 82            [24]  880 	mov	r7,dpl
                                    881 ;	.\ecen4350_lcd_v4.c:138: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000053 7B 00            [12]  882 	mov	r3,#0x00
      000055 7C 00            [12]  883 	mov	r4,#0x00
      000057 7D 00            [12]  884 	mov	r5,#0x00
      000059 7E 00            [12]  885 	mov	r6,#0x00
      00005B                        886 00107$:
      00005B C3               [12]  887 	clr	c
      00005C 74 FF            [12]  888 	mov	a,#0xff
      00005E 9B               [12]  889 	subb	a,r3
      00005F 74 FF            [12]  890 	mov	a,#0xff
      000061 9C               [12]  891 	subb	a,r4
      000062 E4               [12]  892 	clr	a
      000063 9D               [12]  893 	subb	a,r5
      000064 E4               [12]  894 	clr	a
      000065 9E               [12]  895 	subb	a,r6
      000066 50 01            [24]  896 	jnc	00124$
      000068 22               [24]  897 	ret
      000069                        898 00124$:
                                    899 ;	.\ecen4350_lcd_v4.c:139: IOM = 0;
                                    900 ;	assignBit
      000069 C2 B5            [12]  901 	clr	_P3_5
                                    902 ;	.\ecen4350_lcd_v4.c:140: ram_address = (unsigned char __xdata *)(i);
      00006B 8B 82            [24]  903 	mov	dpl,r3
      00006D 8C 83            [24]  904 	mov	dph,r4
                                    905 ;	.\ecen4350_lcd_v4.c:142: if(d != *ram_address) {
      00006F E0               [24]  906 	movx	a,@dptr
      000070 FA               [12]  907 	mov	r2,a
      000071 EF               [12]  908 	mov	a,r7
      000072 B5 02 02         [24]  909 	cjne	a,ar2,00125$
      000075 80 4A            [24]  910 	sjmp	00102$
      000077                        911 00125$:
                                    912 ;	.\ecen4350_lcd_v4.c:143: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      000077 85*04 82         [24]  913 	mov	dpl,_seg7_address
      00007A 85*05 83         [24]  914 	mov	dph,(_seg7_address + 1)
                                    915 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    916 ;	assignBit
      00007D D2 B5            [12]  917 	setb	_P3_5
                                    918 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00007F 74 8E            [12]  919 	mov	a,#0x8e
      000081 F0               [24]  920 	movx	@dptr,a
                                    921 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    922 ;	assignBit
      000082 C2 B5            [12]  923 	clr	_P3_5
                                    924 ;	.\ecen4350_lcd_v4.c:144: setCursor(0,0);
      000084 E4               [12]  925 	clr	a
      000085 F5*00            [12]  926 	mov	_setCursor_PARM_2,a
      000087 F5*01            [12]  927 	mov	(_setCursor_PARM_2 + 1),a
      000089 90 00 00         [24]  928 	mov	dptr,#0x0000
      00008C C0 07            [24]  929 	push	ar7
      00008E C0 06            [24]  930 	push	ar6
      000090 C0 05            [24]  931 	push	ar5
      000092 C0 04            [24]  932 	push	ar4
      000094 C0 03            [24]  933 	push	ar3
      000096 12r04rAA         [24]  934 	lcall	_setCursor
                                    935 ;	.\ecen4350_lcd_v4.c:145: LCD_string_write("ERROR FOUND At: ");
      000099 90r05r0B         [24]  936 	mov	dptr,#___str_0
      00009C 75 F0 80         [24]  937 	mov	b,#0x80
      00009F 12r0FrC4         [24]  938 	lcall	_LCD_string_write
      0000A2 D0 03            [24]  939 	pop	ar3
      0000A4 D0 04            [24]  940 	pop	ar4
                                    941 ;	.\ecen4350_lcd_v4.c:146: print16Hex(i);
      0000A6 8B 82            [24]  942 	mov	dpl,r3
      0000A8 8C 83            [24]  943 	mov	dph,r4
      0000AA C0 04            [24]  944 	push	ar4
      0000AC C0 03            [24]  945 	push	ar3
      0000AE 12r14rAC         [24]  946 	lcall	_print16Hex
                                    947 ;	.\ecen4350_lcd_v4.c:147: delay(40);
      0000B1 90 00 28         [24]  948 	mov	dptr,#0x0028
      0000B4 12r00rE0         [24]  949 	lcall	_delay
      0000B7 D0 03            [24]  950 	pop	ar3
      0000B9 D0 04            [24]  951 	pop	ar4
      0000BB D0 05            [24]  952 	pop	ar5
      0000BD D0 06            [24]  953 	pop	ar6
      0000BF D0 07            [24]  954 	pop	ar7
      0000C1                        955 00102$:
                                    956 ;	.\ecen4350_lcd_v4.c:149: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      0000C1 85*04 82         [24]  957 	mov	dpl,_seg7_address
      0000C4 85*05 83         [24]  958 	mov	dph,(_seg7_address + 1)
                                    959 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    960 ;	assignBit
      0000C7 D2 B5            [12]  961 	setb	_P3_5
                                    962 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0000C9 74 8C            [12]  963 	mov	a,#0x8c
      0000CB F0               [24]  964 	movx	@dptr,a
                                    965 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    966 ;	assignBit
      0000CC C2 B5            [12]  967 	clr	_P3_5
                                    968 ;	.\ecen4350_lcd_v4.c:150: IOM = 1;
                                    969 ;	assignBit
      0000CE D2 B5            [12]  970 	setb	_P3_5
                                    971 ;	.\ecen4350_lcd_v4.c:138: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      0000D0 0B               [12]  972 	inc	r3
      0000D1 BB 00 09         [24]  973 	cjne	r3,#0x00,00126$
      0000D4 0C               [12]  974 	inc	r4
      0000D5 BC 00 05         [24]  975 	cjne	r4,#0x00,00126$
      0000D8 0D               [12]  976 	inc	r5
      0000D9 BD 00 01         [24]  977 	cjne	r5,#0x00,00126$
      0000DC 0E               [12]  978 	inc	r6
      0000DD                        979 00126$:
                                    980 ;	.\ecen4350_lcd_v4.c:152: }
      0000DD 02r00r5B         [24]  981 	ljmp	00107$
                                    982 ;------------------------------------------------------------
                                    983 ;Allocation info for local variables in function 'delay'
                                    984 ;------------------------------------------------------------
                                    985 ;d                         Allocated to registers r6 r7 
                                    986 ;i                         Allocated to registers r4 r5 
                                    987 ;j                         Allocated to registers r2 r3 
                                    988 ;------------------------------------------------------------
                                    989 ;	.\ecen4350_lcd_v4.c:154: void delay(int d) /// x 1ms
                                    990 ;	-----------------------------------------
                                    991 ;	 function delay
                                    992 ;	-----------------------------------------
      0000E0                        993 _delay:
      0000E0 AE 82            [24]  994 	mov	r6,dpl
      0000E2 AF 83            [24]  995 	mov	r7,dph
                                    996 ;	.\ecen4350_lcd_v4.c:157: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0000E4 7C 00            [12]  997 	mov	r4,#0x00
      0000E6 7D 00            [12]  998 	mov	r5,#0x00
      0000E8                        999 00107$:
      0000E8 C3               [12] 1000 	clr	c
      0000E9 EC               [12] 1001 	mov	a,r4
      0000EA 9E               [12] 1002 	subb	a,r6
      0000EB ED               [12] 1003 	mov	a,r5
      0000EC 64 80            [12] 1004 	xrl	a,#0x80
      0000EE 8F F0            [24] 1005 	mov	b,r7
      0000F0 63 F0 80         [24] 1006 	xrl	b,#0x80
      0000F3 95 F0            [12] 1007 	subb	a,b
      0000F5 50 1B            [24] 1008 	jnc	00109$
                                   1009 ;	.\ecen4350_lcd_v4.c:159: for (j = 0; j < 1000; j++);
      0000F7 7A E8            [12] 1010 	mov	r2,#0xe8
      0000F9 7B 03            [12] 1011 	mov	r3,#0x03
      0000FB                       1012 00105$:
      0000FB EA               [12] 1013 	mov	a,r2
      0000FC 24 FF            [12] 1014 	add	a,#0xff
      0000FE F8               [12] 1015 	mov	r0,a
      0000FF EB               [12] 1016 	mov	a,r3
      000100 34 FF            [12] 1017 	addc	a,#0xff
      000102 F9               [12] 1018 	mov	r1,a
      000103 88 02            [24] 1019 	mov	ar2,r0
      000105 89 03            [24] 1020 	mov	ar3,r1
      000107 E8               [12] 1021 	mov	a,r0
      000108 49               [12] 1022 	orl	a,r1
      000109 70 F0            [24] 1023 	jnz	00105$
                                   1024 ;	.\ecen4350_lcd_v4.c:157: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      00010B 0C               [12] 1025 	inc	r4
      00010C BC 00 D9         [24] 1026 	cjne	r4,#0x00,00107$
      00010F 0D               [12] 1027 	inc	r5
      000110 80 D6            [24] 1028 	sjmp	00107$
      000112                       1029 00109$:
                                   1030 ;	.\ecen4350_lcd_v4.c:161: }
      000112 22               [24] 1031 	ret
                                   1032 ;------------------------------------------------------------
                                   1033 ;Allocation info for local variables in function 'UART_Init'
                                   1034 ;------------------------------------------------------------
                                   1035 ;	.\ecen4350_lcd_v4.c:163: void UART_Init(){
                                   1036 ;	-----------------------------------------
                                   1037 ;	 function UART_Init
                                   1038 ;	-----------------------------------------
      000113                       1039 _UART_Init:
                                   1040 ;	.\ecen4350_lcd_v4.c:169: }
      000113 22               [24] 1041 	ret
                                   1042 ;------------------------------------------------------------
                                   1043 ;Allocation info for local variables in function 'UART_transmit'
                                   1044 ;------------------------------------------------------------
                                   1045 ;byte                      Allocated to registers 
                                   1046 ;------------------------------------------------------------
                                   1047 ;	.\ecen4350_lcd_v4.c:172: void UART_transmit(unsigned char byte){
                                   1048 ;	-----------------------------------------
                                   1049 ;	 function UART_transmit
                                   1050 ;	-----------------------------------------
      000114                       1051 _UART_transmit:
      000114 85 82 99         [24] 1052 	mov	_SBUF,dpl
                                   1053 ;	.\ecen4350_lcd_v4.c:174: while(TI == 1);
      000117                       1054 00101$:
      000117 20 99 FD         [24] 1055 	jb	_TI,00101$
                                   1056 ;	.\ecen4350_lcd_v4.c:175: TI = 0;
                                   1057 ;	assignBit
      00011A C2 99            [12] 1058 	clr	_TI
                                   1059 ;	.\ecen4350_lcd_v4.c:176: }
      00011C 22               [24] 1060 	ret
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'ISR_receive'
                                   1063 ;------------------------------------------------------------
                                   1064 ;	.\ecen4350_lcd_v4.c:178: void ISR_receive() __interrupt (4) {
                                   1065 ;	-----------------------------------------
                                   1066 ;	 function ISR_receive
                                   1067 ;	-----------------------------------------
      00011D                       1068 _ISR_receive:
                                   1069 ;	.\ecen4350_lcd_v4.c:179: if (RI == 1){
      00011D 30 98 08         [24] 1070 	jnb	_RI,00103$
                                   1071 ;	.\ecen4350_lcd_v4.c:180: received_byte = SBUF;
      000120 85 99*06         [24] 1072 	mov	_received_byte,_SBUF
                                   1073 ;	.\ecen4350_lcd_v4.c:181: RI = 0;
                                   1074 ;	assignBit
      000123 C2 98            [12] 1075 	clr	_RI
                                   1076 ;	.\ecen4350_lcd_v4.c:182: received_flag= 1;
      000125 75*07 01         [24] 1077 	mov	_received_flag,#0x01
      000128                       1078 00103$:
                                   1079 ;	.\ecen4350_lcd_v4.c:184: }
      000128 32               [24] 1080 	reti
                                   1081 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1082 ;	eliminated unneeded push/pop psw
                                   1083 ;	eliminated unneeded push/pop dpl
                                   1084 ;	eliminated unneeded push/pop dph
                                   1085 ;	eliminated unneeded push/pop b
                                   1086 ;	eliminated unneeded push/pop acc
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'writeRegister8'
                                   1089 ;------------------------------------------------------------
                                   1090 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1091 ;address                   Allocated to registers r7 
                                   1092 ;------------------------------------------------------------
                                   1093 ;	.\ecen4350_lcd_v4.c:186: void writeRegister8(u8 address, u8 d)
                                   1094 ;	-----------------------------------------
                                   1095 ;	 function writeRegister8
                                   1096 ;	-----------------------------------------
      000129                       1097 _writeRegister8:
      000129 AF 82            [24] 1098 	mov	r7,dpl
                                   1099 ;	.\ecen4350_lcd_v4.c:189: CD = __CMD__;
                                   1100 ;	assignBit
      00012B C2 B4            [12] 1101 	clr	_P3_4
                                   1102 ;	.\ecen4350_lcd_v4.c:190: write8(address);
                                   1103 ;	assignBit
      00012D D2 B5            [12] 1104 	setb	_P3_5
      00012F 85*02 82         [24] 1105 	mov	dpl,_lcd_address
      000132 85*03 83         [24] 1106 	mov	dph,(_lcd_address + 1)
      000135 EF               [12] 1107 	mov	a,r7
      000136 F0               [24] 1108 	movx	@dptr,a
                                   1109 ;	assignBit
      000137 C2 B5            [12] 1110 	clr	_P3_5
                                   1111 ;	.\ecen4350_lcd_v4.c:191: CD = __DATA__;
                                   1112 ;	assignBit
      000139 D2 B4            [12] 1113 	setb	_P3_4
                                   1114 ;	.\ecen4350_lcd_v4.c:192: write8(d);
                                   1115 ;	assignBit
      00013B D2 B5            [12] 1116 	setb	_P3_5
      00013D 85*02 82         [24] 1117 	mov	dpl,_lcd_address
      000140 85*03 83         [24] 1118 	mov	dph,(_lcd_address + 1)
      000143 E5*00            [12] 1119 	mov	a,_writeRegister8_PARM_2
      000145 F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	assignBit
      000146 C2 B5            [12] 1122 	clr	_P3_5
                                   1123 ;	.\ecen4350_lcd_v4.c:194: }
      000148 22               [24] 1124 	ret
                                   1125 ;------------------------------------------------------------
                                   1126 ;Allocation info for local variables in function 'writeRegister16'
                                   1127 ;------------------------------------------------------------
                                   1128 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1129 ;address                   Allocated to registers r6 r7 
                                   1130 ;hi                        Allocated to registers r6 r7 
                                   1131 ;lo                        Allocated to registers r4 r5 
                                   1132 ;------------------------------------------------------------
                                   1133 ;	.\ecen4350_lcd_v4.c:196: void writeRegister16(u16 address, u16 d)
                                   1134 ;	-----------------------------------------
                                   1135 ;	 function writeRegister16
                                   1136 ;	-----------------------------------------
      000149                       1137 _writeRegister16:
      000149 AE 82            [24] 1138 	mov	r6,dpl
      00014B AF 83            [24] 1139 	mov	r7,dph
                                   1140 ;	.\ecen4350_lcd_v4.c:199: hi = (address) >> 8;
      00014D 8F 04            [24] 1141 	mov	ar4,r7
                                   1142 ;	.\ecen4350_lcd_v4.c:200: lo = (address);
                                   1143 ;	.\ecen4350_lcd_v4.c:203: write8Reg(hi);
                                   1144 ;	assignBit
      00014F C2 B4            [12] 1145 	clr	_P3_4
                                   1146 ;	assignBit
      000151 D2 B5            [12] 1147 	setb	_P3_5
      000153 85*02 82         [24] 1148 	mov	dpl,_lcd_address
      000156 85*03 83         [24] 1149 	mov	dph,(_lcd_address + 1)
      000159 EC               [12] 1150 	mov	a,r4
      00015A F0               [24] 1151 	movx	@dptr,a
                                   1152 ;	assignBit
      00015B C2 B5            [12] 1153 	clr	_P3_5
                                   1154 ;	.\ecen4350_lcd_v4.c:204: write8Reg(lo);
                                   1155 ;	assignBit
      00015D C2 B4            [12] 1156 	clr	_P3_4
                                   1157 ;	assignBit
      00015F D2 B5            [12] 1158 	setb	_P3_5
      000161 85*02 82         [24] 1159 	mov	dpl,_lcd_address
      000164 85*03 83         [24] 1160 	mov	dph,(_lcd_address + 1)
      000167 EE               [12] 1161 	mov	a,r6
      000168 F0               [24] 1162 	movx	@dptr,a
                                   1163 ;	assignBit
      000169 C2 B5            [12] 1164 	clr	_P3_5
                                   1165 ;	.\ecen4350_lcd_v4.c:205: hi = (d) >> 8;
      00016B AE*01            [24] 1166 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1167 ;	.\ecen4350_lcd_v4.c:206: lo = (d);
      00016D AC*00            [24] 1168 	mov	r4,_writeRegister16_PARM_2
                                   1169 ;	.\ecen4350_lcd_v4.c:207: CD = 1;
                                   1170 ;	assignBit
      00016F D2 B4            [12] 1171 	setb	_P3_4
                                   1172 ;	.\ecen4350_lcd_v4.c:208: write8Data(hi);
                                   1173 ;	assignBit
      000171 D2 B4            [12] 1174 	setb	_P3_4
                                   1175 ;	assignBit
      000173 D2 B5            [12] 1176 	setb	_P3_5
      000175 85*02 82         [24] 1177 	mov	dpl,_lcd_address
      000178 85*03 83         [24] 1178 	mov	dph,(_lcd_address + 1)
      00017B EE               [12] 1179 	mov	a,r6
      00017C F0               [24] 1180 	movx	@dptr,a
                                   1181 ;	assignBit
      00017D C2 B5            [12] 1182 	clr	_P3_5
                                   1183 ;	.\ecen4350_lcd_v4.c:209: write8Data(lo);
                                   1184 ;	assignBit
      00017F D2 B4            [12] 1185 	setb	_P3_4
                                   1186 ;	assignBit
      000181 D2 B5            [12] 1187 	setb	_P3_5
      000183 85*02 82         [24] 1188 	mov	dpl,_lcd_address
      000186 85*03 83         [24] 1189 	mov	dph,(_lcd_address + 1)
      000189 EC               [12] 1190 	mov	a,r4
      00018A F0               [24] 1191 	movx	@dptr,a
                                   1192 ;	assignBit
      00018B C2 B5            [12] 1193 	clr	_P3_5
                                   1194 ;	.\ecen4350_lcd_v4.c:211: }
      00018D 22               [24] 1195 	ret
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function 'seg7Test'
                                   1198 ;------------------------------------------------------------
                                   1199 ;__1310720007              Allocated to registers 
                                   1200 ;__1310720008              Allocated to registers 
                                   1201 ;map_address               Allocated to registers 
                                   1202 ;d                         Allocated to registers 
                                   1203 ;__1310720010              Allocated to registers 
                                   1204 ;__1310720011              Allocated to registers 
                                   1205 ;map_address               Allocated to registers 
                                   1206 ;d                         Allocated to registers 
                                   1207 ;__1310720013              Allocated to registers 
                                   1208 ;__1310720014              Allocated to registers 
                                   1209 ;map_address               Allocated to registers 
                                   1210 ;d                         Allocated to registers 
                                   1211 ;__1310720016              Allocated to registers 
                                   1212 ;__1310720017              Allocated to registers 
                                   1213 ;map_address               Allocated to registers 
                                   1214 ;d                         Allocated to registers 
                                   1215 ;__1310720019              Allocated to registers 
                                   1216 ;__1310720020              Allocated to registers 
                                   1217 ;map_address               Allocated to registers 
                                   1218 ;d                         Allocated to registers 
                                   1219 ;__1310720022              Allocated to registers 
                                   1220 ;__1310720023              Allocated to registers 
                                   1221 ;map_address               Allocated to registers 
                                   1222 ;d                         Allocated to registers 
                                   1223 ;__1310720025              Allocated to registers 
                                   1224 ;__1310720026              Allocated to registers 
                                   1225 ;map_address               Allocated to registers 
                                   1226 ;d                         Allocated to registers 
                                   1227 ;__1310720028              Allocated to registers 
                                   1228 ;__1310720029              Allocated to registers 
                                   1229 ;map_address               Allocated to registers 
                                   1230 ;d                         Allocated to registers 
                                   1231 ;__1310720031              Allocated to registers 
                                   1232 ;__1310720032              Allocated to registers 
                                   1233 ;map_address               Allocated to registers 
                                   1234 ;d                         Allocated to registers 
                                   1235 ;__1310720034              Allocated to registers 
                                   1236 ;__1310720035              Allocated to registers 
                                   1237 ;map_address               Allocated to registers 
                                   1238 ;d                         Allocated to registers 
                                   1239 ;__1310720037              Allocated to registers 
                                   1240 ;__1310720038              Allocated to registers 
                                   1241 ;map_address               Allocated to registers 
                                   1242 ;d                         Allocated to registers 
                                   1243 ;__1310720040              Allocated to registers 
                                   1244 ;__1310720041              Allocated to registers 
                                   1245 ;map_address               Allocated to registers 
                                   1246 ;d                         Allocated to registers 
                                   1247 ;__1310720043              Allocated to registers 
                                   1248 ;__1310720044              Allocated to registers 
                                   1249 ;map_address               Allocated to registers 
                                   1250 ;d                         Allocated to registers 
                                   1251 ;__1310720046              Allocated to registers 
                                   1252 ;__1310720047              Allocated to registers 
                                   1253 ;map_address               Allocated to registers 
                                   1254 ;d                         Allocated to registers 
                                   1255 ;__1310720049              Allocated to registers 
                                   1256 ;__1310720050              Allocated to registers 
                                   1257 ;map_address               Allocated to registers 
                                   1258 ;d                         Allocated to registers 
                                   1259 ;__1310720052              Allocated to registers 
                                   1260 ;__1310720053              Allocated to registers 
                                   1261 ;map_address               Allocated to registers 
                                   1262 ;d                         Allocated to registers 
                                   1263 ;__1310720055              Allocated to registers 
                                   1264 ;__1310720056              Allocated to registers 
                                   1265 ;map_address               Allocated to registers 
                                   1266 ;d                         Allocated to registers 
                                   1267 ;__1310720058              Allocated to registers 
                                   1268 ;__1310720059              Allocated to registers 
                                   1269 ;map_address               Allocated to registers 
                                   1270 ;d                         Allocated to registers 
                                   1271 ;------------------------------------------------------------
                                   1272 ;	.\ecen4350_lcd_v4.c:213: void seg7Test(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function seg7Test
                                   1275 ;	-----------------------------------------
      00018E                       1276 _seg7Test:
                                   1277 ;	.\ecen4350_lcd_v4.c:215: delay(4);
      00018E 90 00 04         [24] 1278 	mov	dptr,#0x0004
      000191 12r00rE0         [24] 1279 	lcall	_delay
                                   1280 ;	.\ecen4350_lcd_v4.c:216: iowrite8(seg7_address, ON);
      000194 85*04 82         [24] 1281 	mov	dpl,_seg7_address
      000197 85*05 83         [24] 1282 	mov	dph,(_seg7_address + 1)
                                   1283 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1284 ;	assignBit
      00019A D2 B5            [12] 1285 	setb	_P3_5
                                   1286 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00019C E4               [12] 1287 	clr	a
      00019D F0               [24] 1288 	movx	@dptr,a
                                   1289 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1290 ;	assignBit
      00019E C2 B5            [12] 1291 	clr	_P3_5
                                   1292 ;	.\ecen4350_lcd_v4.c:217: delay(4);
      0001A0 90 00 04         [24] 1293 	mov	dptr,#0x0004
      0001A3 12r00rE0         [24] 1294 	lcall	_delay
                                   1295 ;	.\ecen4350_lcd_v4.c:218: iowrite8(seg7_address, ZERO);
      0001A6 85*04 82         [24] 1296 	mov	dpl,_seg7_address
      0001A9 85*05 83         [24] 1297 	mov	dph,(_seg7_address + 1)
                                   1298 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1299 ;	assignBit
      0001AC D2 B5            [12] 1300 	setb	_P3_5
                                   1301 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0001AE 74 C0            [12] 1302 	mov	a,#0xc0
      0001B0 F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1305 ;	assignBit
      0001B1 C2 B5            [12] 1306 	clr	_P3_5
                                   1307 ;	.\ecen4350_lcd_v4.c:219: delay(4);
      0001B3 90 00 04         [24] 1308 	mov	dptr,#0x0004
      0001B6 12r00rE0         [24] 1309 	lcall	_delay
                                   1310 ;	.\ecen4350_lcd_v4.c:220: iowrite8(seg7_address, ONE);
      0001B9 85*04 82         [24] 1311 	mov	dpl,_seg7_address
      0001BC 85*05 83         [24] 1312 	mov	dph,(_seg7_address + 1)
                                   1313 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1314 ;	assignBit
      0001BF D2 B5            [12] 1315 	setb	_P3_5
                                   1316 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0001C1 74 F9            [12] 1317 	mov	a,#0xf9
      0001C3 F0               [24] 1318 	movx	@dptr,a
                                   1319 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1320 ;	assignBit
      0001C4 C2 B5            [12] 1321 	clr	_P3_5
                                   1322 ;	.\ecen4350_lcd_v4.c:221: delay(4);
      0001C6 90 00 04         [24] 1323 	mov	dptr,#0x0004
      0001C9 12r00rE0         [24] 1324 	lcall	_delay
                                   1325 ;	.\ecen4350_lcd_v4.c:222: iowrite8(seg7_address, TWO);
      0001CC 85*04 82         [24] 1326 	mov	dpl,_seg7_address
      0001CF 85*05 83         [24] 1327 	mov	dph,(_seg7_address + 1)
                                   1328 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1329 ;	assignBit
      0001D2 D2 B5            [12] 1330 	setb	_P3_5
                                   1331 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0001D4 74 A4            [12] 1332 	mov	a,#0xa4
      0001D6 F0               [24] 1333 	movx	@dptr,a
                                   1334 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1335 ;	assignBit
      0001D7 C2 B5            [12] 1336 	clr	_P3_5
                                   1337 ;	.\ecen4350_lcd_v4.c:223: delay(4);
      0001D9 90 00 04         [24] 1338 	mov	dptr,#0x0004
      0001DC 12r00rE0         [24] 1339 	lcall	_delay
                                   1340 ;	.\ecen4350_lcd_v4.c:224: iowrite8(seg7_address, THREE);
      0001DF 85*04 82         [24] 1341 	mov	dpl,_seg7_address
      0001E2 85*05 83         [24] 1342 	mov	dph,(_seg7_address + 1)
                                   1343 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1344 ;	assignBit
      0001E5 D2 B5            [12] 1345 	setb	_P3_5
                                   1346 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0001E7 74 B0            [12] 1347 	mov	a,#0xb0
      0001E9 F0               [24] 1348 	movx	@dptr,a
                                   1349 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1350 ;	assignBit
      0001EA C2 B5            [12] 1351 	clr	_P3_5
                                   1352 ;	.\ecen4350_lcd_v4.c:225: delay(4);
      0001EC 90 00 04         [24] 1353 	mov	dptr,#0x0004
      0001EF 12r00rE0         [24] 1354 	lcall	_delay
                                   1355 ;	.\ecen4350_lcd_v4.c:226: iowrite8(seg7_address, FOUR);
      0001F2 85*04 82         [24] 1356 	mov	dpl,_seg7_address
      0001F5 85*05 83         [24] 1357 	mov	dph,(_seg7_address + 1)
                                   1358 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1359 ;	assignBit
      0001F8 D2 B5            [12] 1360 	setb	_P3_5
                                   1361 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0001FA 74 99            [12] 1362 	mov	a,#0x99
      0001FC F0               [24] 1363 	movx	@dptr,a
                                   1364 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1365 ;	assignBit
      0001FD C2 B5            [12] 1366 	clr	_P3_5
                                   1367 ;	.\ecen4350_lcd_v4.c:227: delay(4);
      0001FF 90 00 04         [24] 1368 	mov	dptr,#0x0004
      000202 12r00rE0         [24] 1369 	lcall	_delay
                                   1370 ;	.\ecen4350_lcd_v4.c:228: iowrite8(seg7_address, FIVE);
      000205 85*04 82         [24] 1371 	mov	dpl,_seg7_address
      000208 85*05 83         [24] 1372 	mov	dph,(_seg7_address + 1)
                                   1373 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1374 ;	assignBit
      00020B D2 B5            [12] 1375 	setb	_P3_5
                                   1376 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00020D 74 92            [12] 1377 	mov	a,#0x92
      00020F F0               [24] 1378 	movx	@dptr,a
                                   1379 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1380 ;	assignBit
      000210 C2 B5            [12] 1381 	clr	_P3_5
                                   1382 ;	.\ecen4350_lcd_v4.c:229: delay(4);
      000212 90 00 04         [24] 1383 	mov	dptr,#0x0004
      000215 12r00rE0         [24] 1384 	lcall	_delay
                                   1385 ;	.\ecen4350_lcd_v4.c:230: iowrite8(seg7_address, SIX);
      000218 85*04 82         [24] 1386 	mov	dpl,_seg7_address
      00021B 85*05 83         [24] 1387 	mov	dph,(_seg7_address + 1)
                                   1388 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1389 ;	assignBit
      00021E D2 B5            [12] 1390 	setb	_P3_5
                                   1391 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000220 74 82            [12] 1392 	mov	a,#0x82
      000222 F0               [24] 1393 	movx	@dptr,a
                                   1394 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1395 ;	assignBit
      000223 C2 B5            [12] 1396 	clr	_P3_5
                                   1397 ;	.\ecen4350_lcd_v4.c:231: delay(4);
      000225 90 00 04         [24] 1398 	mov	dptr,#0x0004
      000228 12r00rE0         [24] 1399 	lcall	_delay
                                   1400 ;	.\ecen4350_lcd_v4.c:232: iowrite8(seg7_address, SEVEN);
      00022B 85*04 82         [24] 1401 	mov	dpl,_seg7_address
      00022E 85*05 83         [24] 1402 	mov	dph,(_seg7_address + 1)
                                   1403 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1404 ;	assignBit
      000231 D2 B5            [12] 1405 	setb	_P3_5
                                   1406 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000233 74 F8            [12] 1407 	mov	a,#0xf8
      000235 F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1410 ;	assignBit
      000236 C2 B5            [12] 1411 	clr	_P3_5
                                   1412 ;	.\ecen4350_lcd_v4.c:233: delay(4);
      000238 90 00 04         [24] 1413 	mov	dptr,#0x0004
      00023B 12r00rE0         [24] 1414 	lcall	_delay
                                   1415 ;	.\ecen4350_lcd_v4.c:234: iowrite8(seg7_address, EIGHT);
      00023E 85*04 82         [24] 1416 	mov	dpl,_seg7_address
      000241 85*05 83         [24] 1417 	mov	dph,(_seg7_address + 1)
                                   1418 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1419 ;	assignBit
      000244 D2 B5            [12] 1420 	setb	_P3_5
                                   1421 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000246 74 80            [12] 1422 	mov	a,#0x80
      000248 F0               [24] 1423 	movx	@dptr,a
                                   1424 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1425 ;	assignBit
      000249 C2 B5            [12] 1426 	clr	_P3_5
                                   1427 ;	.\ecen4350_lcd_v4.c:235: delay(4);
      00024B 90 00 04         [24] 1428 	mov	dptr,#0x0004
      00024E 12r00rE0         [24] 1429 	lcall	_delay
                                   1430 ;	.\ecen4350_lcd_v4.c:236: iowrite8(seg7_address, NINE);
      000251 85*04 82         [24] 1431 	mov	dpl,_seg7_address
      000254 85*05 83         [24] 1432 	mov	dph,(_seg7_address + 1)
                                   1433 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1434 ;	assignBit
      000257 D2 B5            [12] 1435 	setb	_P3_5
                                   1436 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000259 74 98            [12] 1437 	mov	a,#0x98
      00025B F0               [24] 1438 	movx	@dptr,a
                                   1439 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1440 ;	assignBit
      00025C C2 B5            [12] 1441 	clr	_P3_5
                                   1442 ;	.\ecen4350_lcd_v4.c:237: delay(4);
      00025E 90 00 04         [24] 1443 	mov	dptr,#0x0004
      000261 12r00rE0         [24] 1444 	lcall	_delay
                                   1445 ;	.\ecen4350_lcd_v4.c:238: iowrite8(seg7_address, SEG_A);
      000264 85*04 82         [24] 1446 	mov	dpl,_seg7_address
      000267 85*05 83         [24] 1447 	mov	dph,(_seg7_address + 1)
                                   1448 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1449 ;	assignBit
      00026A D2 B5            [12] 1450 	setb	_P3_5
                                   1451 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00026C 74 88            [12] 1452 	mov	a,#0x88
      00026E F0               [24] 1453 	movx	@dptr,a
                                   1454 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1455 ;	assignBit
      00026F C2 B5            [12] 1456 	clr	_P3_5
                                   1457 ;	.\ecen4350_lcd_v4.c:239: delay(4);
      000271 90 00 04         [24] 1458 	mov	dptr,#0x0004
      000274 12r00rE0         [24] 1459 	lcall	_delay
                                   1460 ;	.\ecen4350_lcd_v4.c:240: iowrite8(seg7_address, SEG_B);
      000277 85*04 82         [24] 1461 	mov	dpl,_seg7_address
      00027A 85*05 83         [24] 1462 	mov	dph,(_seg7_address + 1)
                                   1463 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1464 ;	assignBit
      00027D D2 B5            [12] 1465 	setb	_P3_5
                                   1466 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00027F 74 83            [12] 1467 	mov	a,#0x83
      000281 F0               [24] 1468 	movx	@dptr,a
                                   1469 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1470 ;	assignBit
      000282 C2 B5            [12] 1471 	clr	_P3_5
                                   1472 ;	.\ecen4350_lcd_v4.c:241: delay(4);
      000284 90 00 04         [24] 1473 	mov	dptr,#0x0004
      000287 12r00rE0         [24] 1474 	lcall	_delay
                                   1475 ;	.\ecen4350_lcd_v4.c:242: iowrite8(seg7_address, SEG_C);
      00028A 85*04 82         [24] 1476 	mov	dpl,_seg7_address
      00028D 85*05 83         [24] 1477 	mov	dph,(_seg7_address + 1)
                                   1478 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1479 ;	assignBit
      000290 D2 B5            [12] 1480 	setb	_P3_5
                                   1481 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000292 74 C6            [12] 1482 	mov	a,#0xc6
      000294 F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1485 ;	assignBit
      000295 C2 B5            [12] 1486 	clr	_P3_5
                                   1487 ;	.\ecen4350_lcd_v4.c:243: delay(4);
      000297 90 00 04         [24] 1488 	mov	dptr,#0x0004
      00029A 12r00rE0         [24] 1489 	lcall	_delay
                                   1490 ;	.\ecen4350_lcd_v4.c:244: iowrite8(seg7_address, SEG_D);
      00029D 85*04 82         [24] 1491 	mov	dpl,_seg7_address
      0002A0 85*05 83         [24] 1492 	mov	dph,(_seg7_address + 1)
                                   1493 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1494 ;	assignBit
      0002A3 D2 B5            [12] 1495 	setb	_P3_5
                                   1496 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002A5 74 A1            [12] 1497 	mov	a,#0xa1
      0002A7 F0               [24] 1498 	movx	@dptr,a
                                   1499 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1500 ;	assignBit
      0002A8 C2 B5            [12] 1501 	clr	_P3_5
                                   1502 ;	.\ecen4350_lcd_v4.c:245: delay(4);
      0002AA 90 00 04         [24] 1503 	mov	dptr,#0x0004
      0002AD 12r00rE0         [24] 1504 	lcall	_delay
                                   1505 ;	.\ecen4350_lcd_v4.c:246: iowrite8(seg7_address, SEG_E);
      0002B0 85*04 82         [24] 1506 	mov	dpl,_seg7_address
      0002B3 85*05 83         [24] 1507 	mov	dph,(_seg7_address + 1)
                                   1508 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1509 ;	assignBit
      0002B6 D2 B5            [12] 1510 	setb	_P3_5
                                   1511 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002B8 74 86            [12] 1512 	mov	a,#0x86
      0002BA F0               [24] 1513 	movx	@dptr,a
                                   1514 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1515 ;	assignBit
      0002BB C2 B5            [12] 1516 	clr	_P3_5
                                   1517 ;	.\ecen4350_lcd_v4.c:247: delay(4);
      0002BD 90 00 04         [24] 1518 	mov	dptr,#0x0004
      0002C0 12r00rE0         [24] 1519 	lcall	_delay
                                   1520 ;	.\ecen4350_lcd_v4.c:248: iowrite8(seg7_address, SEG_F);
      0002C3 85*04 82         [24] 1521 	mov	dpl,_seg7_address
      0002C6 85*05 83         [24] 1522 	mov	dph,(_seg7_address + 1)
                                   1523 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1524 ;	assignBit
      0002C9 D2 B5            [12] 1525 	setb	_P3_5
                                   1526 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002CB 74 8E            [12] 1527 	mov	a,#0x8e
      0002CD F0               [24] 1528 	movx	@dptr,a
                                   1529 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1530 ;	assignBit
      0002CE C2 B5            [12] 1531 	clr	_P3_5
                                   1532 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      0002D0 90 00 04         [24] 1533 	mov	dptr,#0x0004
      0002D3 12r00rE0         [24] 1534 	lcall	_delay
                                   1535 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, OFF);
      0002D6 85*04 82         [24] 1536 	mov	dpl,_seg7_address
      0002D9 85*05 83         [24] 1537 	mov	dph,(_seg7_address + 1)
                                   1538 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1539 ;	assignBit
      0002DC D2 B5            [12] 1540 	setb	_P3_5
                                   1541 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002DE 74 FF            [12] 1542 	mov	a,#0xff
      0002E0 F0               [24] 1543 	movx	@dptr,a
                                   1544 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1545 ;	assignBit
      0002E1 C2 B5            [12] 1546 	clr	_P3_5
                                   1547 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      0002E3 90 00 04         [24] 1548 	mov	dptr,#0x0004
                                   1549 ;	.\ecen4350_lcd_v4.c:252: }
      0002E6 02r00rE0         [24] 1550 	ljmp	_delay
                                   1551 ;------------------------------------------------------------
                                   1552 ;Allocation info for local variables in function 'rtcInit'
                                   1553 ;------------------------------------------------------------
                                   1554 ;i                         Allocated to registers r6 r7 
                                   1555 ;------------------------------------------------------------
                                   1556 ;	.\ecen4350_lcd_v4.c:255: void rtcInit(void)
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function rtcInit
                                   1559 ;	-----------------------------------------
      0002E9                       1560 _rtcInit:
                                   1561 ;	.\ecen4350_lcd_v4.c:259: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      0002E9 75*00 07         [24] 1562 	mov	_rtcCmd_PARM_2,#0x07
      0002EC 90 00 0F         [24] 1563 	mov	dptr,#0x000f
      0002EF 12r03r2D         [24] 1564 	lcall	_rtcCmd
                                   1565 ;	.\ecen4350_lcd_v4.c:262: for (i = __S1_REG__; i < __REG_D__; i++)
      0002F2 7E 00            [12] 1566 	mov	r6,#0x00
      0002F4 7F 00            [12] 1567 	mov	r7,#0x00
      0002F6                       1568 00102$:
                                   1569 ;	.\ecen4350_lcd_v4.c:264: rtcWrite(i, 0x00);
      0002F6 75*16 00         [24] 1570 	mov	_rtcWrite_PARM_2,#0x00
      0002F9 8E 82            [24] 1571 	mov	dpl,r6
      0002FB 8F 83            [24] 1572 	mov	dph,r7
      0002FD C0 07            [24] 1573 	push	ar7
      0002FF C0 06            [24] 1574 	push	ar6
      000301 12r03r36         [24] 1575 	lcall	_rtcWrite
      000304 D0 06            [24] 1576 	pop	ar6
      000306 D0 07            [24] 1577 	pop	ar7
                                   1578 ;	.\ecen4350_lcd_v4.c:262: for (i = __S1_REG__; i < __REG_D__; i++)
      000308 0E               [12] 1579 	inc	r6
      000309 BE 00 01         [24] 1580 	cjne	r6,#0x00,00115$
      00030C 0F               [12] 1581 	inc	r7
      00030D                       1582 00115$:
      00030D C3               [12] 1583 	clr	c
      00030E EE               [12] 1584 	mov	a,r6
      00030F 94 0D            [12] 1585 	subb	a,#0x0d
      000311 EF               [12] 1586 	mov	a,r7
      000312 94 00            [12] 1587 	subb	a,#0x00
      000314 40 E0            [24] 1588 	jc	00102$
                                   1589 ;	.\ecen4350_lcd_v4.c:267: rtcCmd(__REG_F__, __HR_24__);
      000316 75*00 04         [24] 1590 	mov	_rtcCmd_PARM_2,#0x04
      000319 90 00 0F         [24] 1591 	mov	dptr,#0x000f
                                   1592 ;	.\ecen4350_lcd_v4.c:268: }
      00031C 02r03r2D         [24] 1593 	ljmp	_rtcCmd
                                   1594 ;------------------------------------------------------------
                                   1595 ;Allocation info for local variables in function 'rtcBusy'
                                   1596 ;------------------------------------------------------------
                                   1597 ;__1310720061              Allocated to registers 
                                   1598 ;map_address               Allocated to registers 
                                   1599 ;__1310720062              Allocated to registers 
                                   1600 ;map_address               Allocated to registers 
                                   1601 ;d                         Allocated to registers r7 
                                   1602 ;------------------------------------------------------------
                                   1603 ;	.\ecen4350_lcd_v4.c:270: void rtcBusy(void)
                                   1604 ;	-----------------------------------------
                                   1605 ;	 function rtcBusy
                                   1606 ;	-----------------------------------------
      00031F                       1607 _rtcBusy:
                                   1608 ;	.\ecen4350_lcd_v4.c:273: while ((ioread8(map_address) & 0x02))		;
      00031F                       1609 00101$:
                                   1610 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   1611 ;	assignBit
      00031F D2 B5            [12] 1612 	setb	_P3_5
                                   1613 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000321 90 00 0D         [24] 1614 	mov	dptr,#0x000d
      000324 E0               [24] 1615 	movx	a,@dptr
      000325 FF               [12] 1616 	mov	r7,a
                                   1617 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   1618 ;	assignBit
      000326 C2 B5            [12] 1619 	clr	_P3_5
                                   1620 ;	.\ecen4350_lcd_v4.c:273: while ((ioread8(map_address) & 0x02))		;
      000328 EF               [12] 1621 	mov	a,r7
      000329 20 E1 F3         [24] 1622 	jb	acc.1,00101$
                                   1623 ;	.\ecen4350_lcd_v4.c:274: }
      00032C 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'rtcCmd'
                                   1627 ;------------------------------------------------------------
                                   1628 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1629 ;addr                      Allocated to registers r6 r7 
                                   1630 ;map_address               Allocated to registers 
                                   1631 ;__1310720064              Allocated to registers 
                                   1632 ;__1310720065              Allocated to registers r7 
                                   1633 ;map_address               Allocated to registers 
                                   1634 ;d                         Allocated to registers 
                                   1635 ;------------------------------------------------------------
                                   1636 ;	.\ecen4350_lcd_v4.c:276: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1637 ;	-----------------------------------------
                                   1638 ;	 function rtcCmd
                                   1639 ;	-----------------------------------------
      00032D                       1640 _rtcCmd:
                                   1641 ;	.\ecen4350_lcd_v4.c:278: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1642 ;	.\ecen4350_lcd_v4.c:279: iowrite8(map_address, d);
      00032D AF*00            [24] 1643 	mov	r7,_rtcCmd_PARM_2
                                   1644 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1645 ;	assignBit
      00032F D2 B5            [12] 1646 	setb	_P3_5
                                   1647 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000331 EF               [12] 1648 	mov	a,r7
      000332 F0               [24] 1649 	movx	@dptr,a
                                   1650 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1651 ;	assignBit
      000333 C2 B5            [12] 1652 	clr	_P3_5
                                   1653 ;	.\ecen4350_lcd_v4.c:279: iowrite8(map_address, d);
                                   1654 ;	.\ecen4350_lcd_v4.c:280: }
      000335 22               [24] 1655 	ret
                                   1656 ;------------------------------------------------------------
                                   1657 ;Allocation info for local variables in function 'rtcWrite'
                                   1658 ;------------------------------------------------------------
                                   1659 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1660 ;addr                      Allocated to registers r6 r7 
                                   1661 ;map_address               Allocated to registers r6 r7 
                                   1662 ;__1310720067              Allocated to registers 
                                   1663 ;__1310720068              Allocated to registers 
                                   1664 ;addr                      Allocated to registers 
                                   1665 ;d                         Allocated to registers 
                                   1666 ;map_address               Allocated to registers 
                                   1667 ;__1310720064              Allocated to registers 
                                   1668 ;__1310720065              Allocated to registers 
                                   1669 ;map_address               Allocated to registers 
                                   1670 ;d                         Allocated to registers 
                                   1671 ;__1310720070              Allocated to registers 
                                   1672 ;__1310720071              Allocated to registers 
                                   1673 ;map_address               Allocated to registers 
                                   1674 ;d                         Allocated to registers 
                                   1675 ;__1310720073              Allocated to registers 
                                   1676 ;__1310720074              Allocated to registers r7 
                                   1677 ;addr                      Allocated to registers 
                                   1678 ;d                         Allocated to registers 
                                   1679 ;map_address               Allocated to registers 
                                   1680 ;__1310720064              Allocated to registers 
                                   1681 ;__1310720065              Allocated to registers 
                                   1682 ;map_address               Allocated to registers 
                                   1683 ;d                         Allocated to registers 
                                   1684 ;------------------------------------------------------------
                                   1685 ;	.\ecen4350_lcd_v4.c:282: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1686 ;	-----------------------------------------
                                   1687 ;	 function rtcWrite
                                   1688 ;	-----------------------------------------
      000336                       1689 _rtcWrite:
      000336 AE 82            [24] 1690 	mov	r6,dpl
      000338 AF 83            [24] 1691 	mov	r7,dph
                                   1692 ;	.\ecen4350_lcd_v4.c:284: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1693 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1694 ;	assignBit
      00033A D2 B5            [12] 1695 	setb	_P3_5
                                   1696 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00033C 90 00 0D         [24] 1697 	mov	dptr,#0x000d
      00033F 74 01            [12] 1698 	mov	a,#0x01
      000341 F0               [24] 1699 	movx	@dptr,a
                                   1700 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1701 ;	assignBit
      000342 C2 B5            [12] 1702 	clr	_P3_5
                                   1703 ;	.\ecen4350_lcd_v4.c:286: rtcBusy();
      000344 C0 07            [24] 1704 	push	ar7
      000346 C0 06            [24] 1705 	push	ar6
      000348 12r03r1F         [24] 1706 	lcall	_rtcBusy
      00034B D0 06            [24] 1707 	pop	ar6
      00034D D0 07            [24] 1708 	pop	ar7
                                   1709 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1710 ;	assignBit
      00034F D2 B5            [12] 1711 	setb	_P3_5
                                   1712 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000351 8E 82            [24] 1713 	mov	dpl,r6
      000353 8F 83            [24] 1714 	mov	dph,r7
      000355 E4               [12] 1715 	clr	a
      000356 F0               [24] 1716 	movx	@dptr,a
                                   1717 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1718 ;	assignBit
      000357 C2 B5            [12] 1719 	clr	_P3_5
                                   1720 ;	.\ecen4350_lcd_v4.c:288: rtcCmd(__REG_D__, d);
      000359 AF*16            [24] 1721 	mov	r7,_rtcWrite_PARM_2
                                   1722 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1723 ;	assignBit
      00035B D2 B5            [12] 1724 	setb	_P3_5
                                   1725 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00035D 90 00 0D         [24] 1726 	mov	dptr,#0x000d
      000360 EF               [12] 1727 	mov	a,r7
      000361 F0               [24] 1728 	movx	@dptr,a
                                   1729 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1730 ;	assignBit
      000362 C2 B5            [12] 1731 	clr	_P3_5
                                   1732 ;	.\ecen4350_lcd_v4.c:288: rtcCmd(__REG_D__, d);
                                   1733 ;	.\ecen4350_lcd_v4.c:289: }
      000364 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'rtcRead'
                                   1737 ;------------------------------------------------------------
                                   1738 ;addr                      Allocated to registers r6 r7 
                                   1739 ;__1310720079              Allocated to registers 
                                   1740 ;d                         Allocated to registers r7 
                                   1741 ;map_address               Allocated to registers r6 r7 
                                   1742 ;__1310720076              Allocated to registers 
                                   1743 ;__1310720077              Allocated to registers 
                                   1744 ;addr                      Allocated to registers 
                                   1745 ;d                         Allocated to registers 
                                   1746 ;map_address               Allocated to registers 
                                   1747 ;__1310720064              Allocated to registers 
                                   1748 ;__1310720065              Allocated to registers 
                                   1749 ;map_address               Allocated to registers 
                                   1750 ;d                         Allocated to registers 
                                   1751 ;__1310720080              Allocated to registers 
                                   1752 ;map_address               Allocated to registers 
                                   1753 ;d                         Allocated to registers r6 
                                   1754 ;__1310720082              Allocated to registers 
                                   1755 ;__1310720083              Allocated to registers 
                                   1756 ;addr                      Allocated to registers 
                                   1757 ;d                         Allocated to registers 
                                   1758 ;map_address               Allocated to registers 
                                   1759 ;__1310720064              Allocated to registers 
                                   1760 ;__1310720065              Allocated to registers 
                                   1761 ;map_address               Allocated to registers 
                                   1762 ;d                         Allocated to registers 
                                   1763 ;------------------------------------------------------------
                                   1764 ;	.\ecen4350_lcd_v4.c:291: inline unsigned char rtcRead(unsigned int addr)
                                   1765 ;	-----------------------------------------
                                   1766 ;	 function rtcRead
                                   1767 ;	-----------------------------------------
      000365                       1768 _rtcRead:
      000365 AE 82            [24] 1769 	mov	r6,dpl
      000367 AF 83            [24] 1770 	mov	r7,dph
                                   1771 ;	.\ecen4350_lcd_v4.c:294: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1772 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1773 ;	assignBit
      000369 D2 B5            [12] 1774 	setb	_P3_5
                                   1775 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00036B 90 00 0D         [24] 1776 	mov	dptr,#0x000d
      00036E 74 01            [12] 1777 	mov	a,#0x01
      000370 F0               [24] 1778 	movx	@dptr,a
                                   1779 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1780 ;	assignBit
      000371 C2 B5            [12] 1781 	clr	_P3_5
                                   1782 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000373 C0 07            [24] 1783 	push	ar7
      000375 C0 06            [24] 1784 	push	ar6
      000377 12r03r1F         [24] 1785 	lcall	_rtcBusy
      00037A D0 06            [24] 1786 	pop	ar6
      00037C D0 07            [24] 1787 	pop	ar7
                                   1788 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   1789 ;	assignBit
      00037E D2 B5            [12] 1790 	setb	_P3_5
                                   1791 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000380 8E 82            [24] 1792 	mov	dpl,r6
      000382 8F 83            [24] 1793 	mov	dph,r7
      000384 E0               [24] 1794 	movx	a,@dptr
      000385 FE               [12] 1795 	mov	r6,a
                                   1796 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   1797 ;	assignBit
      000386 C2 B5            [12] 1798 	clr	_P3_5
                                   1799 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000388 74 0F            [12] 1800 	mov	a,#0x0f
      00038A 5E               [12] 1801 	anl	a,r6
      00038B 44 30            [12] 1802 	orl	a,#0x30
      00038D FF               [12] 1803 	mov	r7,a
                                   1804 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1805 ;	assignBit
      00038E D2 B5            [12] 1806 	setb	_P3_5
                                   1807 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000390 90 00 0D         [24] 1808 	mov	dptr,#0x000d
      000393 E4               [12] 1809 	clr	a
      000394 F0               [24] 1810 	movx	@dptr,a
                                   1811 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1812 ;	assignBit
      000395 C2 B5            [12] 1813 	clr	_P3_5
                                   1814 ;	.\ecen4350_lcd_v4.c:301: return d;
      000397 8F 82            [24] 1815 	mov	dpl,r7
                                   1816 ;	.\ecen4350_lcd_v4.c:302: }
      000399 22               [24] 1817 	ret
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'rtcPrint'
                                   1820 ;------------------------------------------------------------
                                   1821 ;__1310720100              Allocated to registers 
                                   1822 ;__1310720097              Allocated to registers 
                                   1823 ;__1310720094              Allocated to registers 
                                   1824 ;__1310720091              Allocated to registers 
                                   1825 ;__1310720088              Allocated to registers 
                                   1826 ;__1310720085              Allocated to registers 
                                   1827 ;mi1                       Allocated to registers 
                                   1828 ;mi10                      Allocated to registers 
                                   1829 ;s1                        Allocated to registers 
                                   1830 ;s10                       Allocated to registers 
                                   1831 ;h1                        Allocated to registers 
                                   1832 ;h10                       Allocated to registers 
                                   1833 ;printval                  Allocated with name '_rtcPrint_printval_65536_226'
                                   1834 ;__1310720086              Allocated to registers 
                                   1835 ;addr                      Allocated to registers 
                                   1836 ;__1310720079              Allocated to registers 
                                   1837 ;d                         Allocated to registers r7 
                                   1838 ;map_address               Allocated to registers 
                                   1839 ;__1310720076              Allocated to registers 
                                   1840 ;__1310720077              Allocated to registers 
                                   1841 ;addr                      Allocated to registers 
                                   1842 ;d                         Allocated to registers 
                                   1843 ;map_address               Allocated to registers 
                                   1844 ;__1310720064              Allocated to registers 
                                   1845 ;__1310720065              Allocated to registers 
                                   1846 ;map_address               Allocated to registers 
                                   1847 ;d                         Allocated to registers 
                                   1848 ;__1310720080              Allocated to registers 
                                   1849 ;map_address               Allocated to registers 
                                   1850 ;d                         Allocated to registers r7 
                                   1851 ;__1310720082              Allocated to registers 
                                   1852 ;__1310720083              Allocated to registers 
                                   1853 ;addr                      Allocated to registers 
                                   1854 ;d                         Allocated to registers 
                                   1855 ;map_address               Allocated to registers 
                                   1856 ;__1310720064              Allocated to registers 
                                   1857 ;__1310720065              Allocated to registers 
                                   1858 ;map_address               Allocated to registers 
                                   1859 ;d                         Allocated to registers 
                                   1860 ;__1310720089              Allocated to registers 
                                   1861 ;addr                      Allocated to registers 
                                   1862 ;__1310720079              Allocated to registers 
                                   1863 ;d                         Allocated to registers r6 
                                   1864 ;map_address               Allocated to registers 
                                   1865 ;__1310720076              Allocated to registers 
                                   1866 ;__1310720077              Allocated to registers 
                                   1867 ;addr                      Allocated to registers 
                                   1868 ;d                         Allocated to registers 
                                   1869 ;map_address               Allocated to registers 
                                   1870 ;__1310720064              Allocated to registers 
                                   1871 ;__1310720065              Allocated to registers 
                                   1872 ;map_address               Allocated to registers 
                                   1873 ;d                         Allocated to registers 
                                   1874 ;__1310720080              Allocated to registers 
                                   1875 ;map_address               Allocated to registers 
                                   1876 ;d                         Allocated to registers r6 
                                   1877 ;__1310720082              Allocated to registers 
                                   1878 ;__1310720083              Allocated to registers 
                                   1879 ;addr                      Allocated to registers 
                                   1880 ;d                         Allocated to registers 
                                   1881 ;map_address               Allocated to registers 
                                   1882 ;__1310720064              Allocated to registers 
                                   1883 ;__1310720065              Allocated to registers 
                                   1884 ;map_address               Allocated to registers 
                                   1885 ;d                         Allocated to registers 
                                   1886 ;__1310720092              Allocated to registers 
                                   1887 ;addr                      Allocated to registers 
                                   1888 ;__1310720079              Allocated to registers 
                                   1889 ;d                         Allocated to registers r5 
                                   1890 ;map_address               Allocated to registers 
                                   1891 ;__1310720076              Allocated to registers 
                                   1892 ;__1310720077              Allocated to registers 
                                   1893 ;addr                      Allocated to registers 
                                   1894 ;d                         Allocated to registers 
                                   1895 ;map_address               Allocated to registers 
                                   1896 ;__1310720064              Allocated to registers 
                                   1897 ;__1310720065              Allocated to registers 
                                   1898 ;map_address               Allocated to registers 
                                   1899 ;d                         Allocated to registers 
                                   1900 ;__1310720080              Allocated to registers 
                                   1901 ;map_address               Allocated to registers 
                                   1902 ;d                         Allocated to registers r5 
                                   1903 ;__1310720082              Allocated to registers 
                                   1904 ;__1310720083              Allocated to registers 
                                   1905 ;addr                      Allocated to registers 
                                   1906 ;d                         Allocated to registers 
                                   1907 ;map_address               Allocated to registers 
                                   1908 ;__1310720064              Allocated to registers 
                                   1909 ;__1310720065              Allocated to registers 
                                   1910 ;map_address               Allocated to registers 
                                   1911 ;d                         Allocated to registers 
                                   1912 ;__1310720095              Allocated to registers 
                                   1913 ;addr                      Allocated to registers 
                                   1914 ;__1310720079              Allocated to registers 
                                   1915 ;d                         Allocated to registers r4 
                                   1916 ;map_address               Allocated to registers 
                                   1917 ;__1310720076              Allocated to registers 
                                   1918 ;__1310720077              Allocated to registers 
                                   1919 ;addr                      Allocated to registers 
                                   1920 ;d                         Allocated to registers 
                                   1921 ;map_address               Allocated to registers 
                                   1922 ;__1310720064              Allocated to registers 
                                   1923 ;__1310720065              Allocated to registers 
                                   1924 ;map_address               Allocated to registers 
                                   1925 ;d                         Allocated to registers 
                                   1926 ;__1310720080              Allocated to registers 
                                   1927 ;map_address               Allocated to registers 
                                   1928 ;d                         Allocated to registers r4 
                                   1929 ;__1310720082              Allocated to registers 
                                   1930 ;__1310720083              Allocated to registers 
                                   1931 ;addr                      Allocated to registers 
                                   1932 ;d                         Allocated to registers 
                                   1933 ;map_address               Allocated to registers 
                                   1934 ;__1310720064              Allocated to registers 
                                   1935 ;__1310720065              Allocated to registers 
                                   1936 ;map_address               Allocated to registers 
                                   1937 ;d                         Allocated to registers 
                                   1938 ;__1310720098              Allocated to registers 
                                   1939 ;addr                      Allocated to registers 
                                   1940 ;__1310720079              Allocated to registers 
                                   1941 ;d                         Allocated to registers r3 
                                   1942 ;map_address               Allocated to registers 
                                   1943 ;__1310720076              Allocated to registers 
                                   1944 ;__1310720077              Allocated to registers 
                                   1945 ;addr                      Allocated to registers 
                                   1946 ;d                         Allocated to registers 
                                   1947 ;map_address               Allocated to registers 
                                   1948 ;__1310720064              Allocated to registers 
                                   1949 ;__1310720065              Allocated to registers 
                                   1950 ;map_address               Allocated to registers 
                                   1951 ;d                         Allocated to registers 
                                   1952 ;__1310720080              Allocated to registers 
                                   1953 ;map_address               Allocated to registers 
                                   1954 ;d                         Allocated to registers r3 
                                   1955 ;__1310720082              Allocated to registers 
                                   1956 ;__1310720083              Allocated to registers 
                                   1957 ;addr                      Allocated to registers 
                                   1958 ;d                         Allocated to registers 
                                   1959 ;map_address               Allocated to registers 
                                   1960 ;__1310720064              Allocated to registers 
                                   1961 ;__1310720065              Allocated to registers 
                                   1962 ;map_address               Allocated to registers 
                                   1963 ;d                         Allocated to registers 
                                   1964 ;__1310720101              Allocated to registers 
                                   1965 ;addr                      Allocated to registers 
                                   1966 ;__1310720079              Allocated to registers 
                                   1967 ;d                         Allocated to registers r2 
                                   1968 ;map_address               Allocated to registers 
                                   1969 ;__1310720076              Allocated to registers 
                                   1970 ;__1310720077              Allocated to registers 
                                   1971 ;addr                      Allocated to registers 
                                   1972 ;d                         Allocated to registers 
                                   1973 ;map_address               Allocated to registers 
                                   1974 ;__1310720064              Allocated to registers 
                                   1975 ;__1310720065              Allocated to registers 
                                   1976 ;map_address               Allocated to registers 
                                   1977 ;d                         Allocated to registers 
                                   1978 ;__1310720080              Allocated to registers 
                                   1979 ;map_address               Allocated to registers 
                                   1980 ;d                         Allocated to registers r2 
                                   1981 ;__1310720082              Allocated to registers 
                                   1982 ;__1310720083              Allocated to registers 
                                   1983 ;addr                      Allocated to registers 
                                   1984 ;d                         Allocated to registers 
                                   1985 ;map_address               Allocated to registers 
                                   1986 ;__1310720064              Allocated to registers 
                                   1987 ;__1310720065              Allocated to registers 
                                   1988 ;map_address               Allocated to registers 
                                   1989 ;d                         Allocated to registers 
                                   1990 ;------------------------------------------------------------
                                   1991 ;	.\ecen4350_lcd_v4.c:304: void rtcPrint(void)
                                   1992 ;	-----------------------------------------
                                   1993 ;	 function rtcPrint
                                   1994 ;	-----------------------------------------
      00039A                       1995 _rtcPrint:
                                   1996 ;	.\ecen4350_lcd_v4.c:308: printval[8] = '\0'; // end with address null character for string
      00039A 75*1F 00         [24] 1997 	mov	(_rtcPrint_printval_65536_226 + 0x0008),#0x00
                                   1998 ;	.\ecen4350_lcd_v4.c:309: printval[2] = ':';
      00039D 75*19 3A         [24] 1999 	mov	(_rtcPrint_printval_65536_226 + 0x0002),#0x3a
                                   2000 ;	.\ecen4350_lcd_v4.c:310: printval[5] = ':';
      0003A0 75*1C 3A         [24] 2001 	mov	(_rtcPrint_printval_65536_226 + 0x0005),#0x3a
                                   2002 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2003 ;	assignBit
      0003A3 D2 B5            [12] 2004 	setb	_P3_5
                                   2005 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003A5 90 00 0D         [24] 2006 	mov	dptr,#0x000d
      0003A8 74 01            [12] 2007 	mov	a,#0x01
      0003AA F0               [24] 2008 	movx	@dptr,a
                                   2009 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2010 ;	assignBit
      0003AB C2 B5            [12] 2011 	clr	_P3_5
                                   2012 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0003AD 12r03r1F         [24] 2013 	lcall	_rtcBusy
                                   2014 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2015 ;	assignBit
      0003B0 D2 B5            [12] 2016 	setb	_P3_5
                                   2017 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0003B2 90 00 02         [24] 2018 	mov	dptr,#0x0002
      0003B5 E0               [24] 2019 	movx	a,@dptr
      0003B6 FF               [12] 2020 	mov	r7,a
                                   2021 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2022 ;	assignBit
      0003B7 C2 B5            [12] 2023 	clr	_P3_5
                                   2024 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0003B9 74 0F            [12] 2025 	mov	a,#0x0f
      0003BB 5F               [12] 2026 	anl	a,r7
      0003BC 44 30            [12] 2027 	orl	a,#0x30
      0003BE FF               [12] 2028 	mov	r7,a
                                   2029 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2030 ;	assignBit
      0003BF D2 B5            [12] 2031 	setb	_P3_5
                                   2032 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003C1 90 00 0D         [24] 2033 	mov	dptr,#0x000d
      0003C4 E4               [12] 2034 	clr	a
      0003C5 F0               [24] 2035 	movx	@dptr,a
                                   2036 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2037 ;	assignBit
      0003C6 C2 B5            [12] 2038 	clr	_P3_5
                                   2039 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2040 ;	assignBit
      0003C8 D2 B5            [12] 2041 	setb	_P3_5
                                   2042 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003CA 90 00 0D         [24] 2043 	mov	dptr,#0x000d
      0003CD 74 01            [12] 2044 	mov	a,#0x01
      0003CF F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2047 ;	assignBit
      0003D0 C2 B5            [12] 2048 	clr	_P3_5
                                   2049 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0003D2 C0 07            [24] 2050 	push	ar7
      0003D4 12r03r1F         [24] 2051 	lcall	_rtcBusy
                                   2052 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2053 ;	assignBit
      0003D7 D2 B5            [12] 2054 	setb	_P3_5
                                   2055 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0003D9 90 00 03         [24] 2056 	mov	dptr,#0x0003
      0003DC E0               [24] 2057 	movx	a,@dptr
      0003DD FE               [12] 2058 	mov	r6,a
                                   2059 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2060 ;	assignBit
      0003DE C2 B5            [12] 2061 	clr	_P3_5
                                   2062 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0003E0 74 0F            [12] 2063 	mov	a,#0x0f
      0003E2 5E               [12] 2064 	anl	a,r6
      0003E3 44 30            [12] 2065 	orl	a,#0x30
      0003E5 FE               [12] 2066 	mov	r6,a
                                   2067 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2068 ;	assignBit
      0003E6 D2 B5            [12] 2069 	setb	_P3_5
                                   2070 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003E8 90 00 0D         [24] 2071 	mov	dptr,#0x000d
      0003EB E4               [12] 2072 	clr	a
      0003EC F0               [24] 2073 	movx	@dptr,a
                                   2074 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2075 ;	assignBit
      0003ED C2 B5            [12] 2076 	clr	_P3_5
                                   2077 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2078 ;	assignBit
      0003EF D2 B5            [12] 2079 	setb	_P3_5
                                   2080 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003F1 90 00 0D         [24] 2081 	mov	dptr,#0x000d
      0003F4 74 01            [12] 2082 	mov	a,#0x01
      0003F6 F0               [24] 2083 	movx	@dptr,a
                                   2084 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2085 ;	assignBit
      0003F7 C2 B5            [12] 2086 	clr	_P3_5
                                   2087 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0003F9 C0 06            [24] 2088 	push	ar6
      0003FB 12r03r1F         [24] 2089 	lcall	_rtcBusy
                                   2090 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2091 ;	assignBit
      0003FE D2 B5            [12] 2092 	setb	_P3_5
                                   2093 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000400 90 00 04         [24] 2094 	mov	dptr,#0x0004
      000403 E0               [24] 2095 	movx	a,@dptr
      000404 FD               [12] 2096 	mov	r5,a
                                   2097 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2098 ;	assignBit
      000405 C2 B5            [12] 2099 	clr	_P3_5
                                   2100 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000407 74 0F            [12] 2101 	mov	a,#0x0f
      000409 5D               [12] 2102 	anl	a,r5
      00040A 44 30            [12] 2103 	orl	a,#0x30
      00040C FD               [12] 2104 	mov	r5,a
                                   2105 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2106 ;	assignBit
      00040D D2 B5            [12] 2107 	setb	_P3_5
                                   2108 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00040F 90 00 0D         [24] 2109 	mov	dptr,#0x000d
      000412 E4               [12] 2110 	clr	a
      000413 F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2113 ;	assignBit
      000414 C2 B5            [12] 2114 	clr	_P3_5
                                   2115 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2116 ;	assignBit
      000416 D2 B5            [12] 2117 	setb	_P3_5
                                   2118 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000418 90 00 0D         [24] 2119 	mov	dptr,#0x000d
      00041B 74 01            [12] 2120 	mov	a,#0x01
      00041D F0               [24] 2121 	movx	@dptr,a
                                   2122 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2123 ;	assignBit
      00041E C2 B5            [12] 2124 	clr	_P3_5
                                   2125 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000420 C0 05            [24] 2126 	push	ar5
      000422 12r03r1F         [24] 2127 	lcall	_rtcBusy
                                   2128 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2129 ;	assignBit
      000425 D2 B5            [12] 2130 	setb	_P3_5
                                   2131 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000427 90 00 05         [24] 2132 	mov	dptr,#0x0005
      00042A E0               [24] 2133 	movx	a,@dptr
      00042B FC               [12] 2134 	mov	r4,a
                                   2135 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2136 ;	assignBit
      00042C C2 B5            [12] 2137 	clr	_P3_5
                                   2138 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00042E 74 0F            [12] 2139 	mov	a,#0x0f
      000430 5C               [12] 2140 	anl	a,r4
      000431 44 30            [12] 2141 	orl	a,#0x30
      000433 FC               [12] 2142 	mov	r4,a
                                   2143 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2144 ;	assignBit
      000434 D2 B5            [12] 2145 	setb	_P3_5
                                   2146 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000436 90 00 0D         [24] 2147 	mov	dptr,#0x000d
      000439 E4               [12] 2148 	clr	a
      00043A F0               [24] 2149 	movx	@dptr,a
                                   2150 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2151 ;	assignBit
      00043B C2 B5            [12] 2152 	clr	_P3_5
                                   2153 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2154 ;	assignBit
      00043D D2 B5            [12] 2155 	setb	_P3_5
                                   2156 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00043F 90 00 0D         [24] 2157 	mov	dptr,#0x000d
      000442 74 01            [12] 2158 	mov	a,#0x01
      000444 F0               [24] 2159 	movx	@dptr,a
                                   2160 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2161 ;	assignBit
      000445 C2 B5            [12] 2162 	clr	_P3_5
                                   2163 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000447 C0 04            [24] 2164 	push	ar4
      000449 12r03r1F         [24] 2165 	lcall	_rtcBusy
                                   2166 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2167 ;	assignBit
      00044C D2 B5            [12] 2168 	setb	_P3_5
                                   2169 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      00044E 90 00 00         [24] 2170 	mov	dptr,#0x0000
      000451 E0               [24] 2171 	movx	a,@dptr
      000452 FB               [12] 2172 	mov	r3,a
                                   2173 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2174 ;	assignBit
      000453 C2 B5            [12] 2175 	clr	_P3_5
                                   2176 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000455 74 0F            [12] 2177 	mov	a,#0x0f
      000457 5B               [12] 2178 	anl	a,r3
      000458 44 30            [12] 2179 	orl	a,#0x30
      00045A FB               [12] 2180 	mov	r3,a
                                   2181 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2182 ;	assignBit
      00045B D2 B5            [12] 2183 	setb	_P3_5
                                   2184 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00045D 90 00 0D         [24] 2185 	mov	dptr,#0x000d
      000460 E4               [12] 2186 	clr	a
      000461 F0               [24] 2187 	movx	@dptr,a
                                   2188 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2189 ;	assignBit
      000462 C2 B5            [12] 2190 	clr	_P3_5
                                   2191 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2192 ;	assignBit
      000464 D2 B5            [12] 2193 	setb	_P3_5
                                   2194 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000466 90 00 0D         [24] 2195 	mov	dptr,#0x000d
      000469 74 01            [12] 2196 	mov	a,#0x01
      00046B F0               [24] 2197 	movx	@dptr,a
                                   2198 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2199 ;	assignBit
      00046C C2 B5            [12] 2200 	clr	_P3_5
                                   2201 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      00046E C0 03            [24] 2202 	push	ar3
      000470 12r03r1F         [24] 2203 	lcall	_rtcBusy
      000473 D0 03            [24] 2204 	pop	ar3
      000475 D0 04            [24] 2205 	pop	ar4
      000477 D0 05            [24] 2206 	pop	ar5
      000479 D0 06            [24] 2207 	pop	ar6
      00047B D0 07            [24] 2208 	pop	ar7
                                   2209 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2210 ;	assignBit
      00047D D2 B5            [12] 2211 	setb	_P3_5
                                   2212 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      00047F 90 00 01         [24] 2213 	mov	dptr,#0x0001
      000482 E0               [24] 2214 	movx	a,@dptr
      000483 FA               [12] 2215 	mov	r2,a
                                   2216 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2217 ;	assignBit
      000484 C2 B5            [12] 2218 	clr	_P3_5
                                   2219 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000486 74 0F            [12] 2220 	mov	a,#0x0f
      000488 5A               [12] 2221 	anl	a,r2
      000489 44 30            [12] 2222 	orl	a,#0x30
      00048B FA               [12] 2223 	mov	r2,a
                                   2224 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2225 ;	assignBit
      00048C D2 B5            [12] 2226 	setb	_P3_5
                                   2227 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00048E 90 00 0D         [24] 2228 	mov	dptr,#0x000d
      000491 E4               [12] 2229 	clr	a
      000492 F0               [24] 2230 	movx	@dptr,a
                                   2231 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2232 ;	assignBit
      000493 C2 B5            [12] 2233 	clr	_P3_5
                                   2234 ;	.\ecen4350_lcd_v4.c:324: printval[0] = h10;
      000495 8C*17            [24] 2235 	mov	_rtcPrint_printval_65536_226,r4
                                   2236 ;	.\ecen4350_lcd_v4.c:325: printval[1] = h1;
      000497 8D*18            [24] 2237 	mov	(_rtcPrint_printval_65536_226 + 0x0001),r5
                                   2238 ;	.\ecen4350_lcd_v4.c:326: printval[3] = mi10;
      000499 8E*1A            [24] 2239 	mov	(_rtcPrint_printval_65536_226 + 0x0003),r6
                                   2240 ;	.\ecen4350_lcd_v4.c:327: printval[4] = mi1;
      00049B 8F*1B            [24] 2241 	mov	(_rtcPrint_printval_65536_226 + 0x0004),r7
                                   2242 ;	.\ecen4350_lcd_v4.c:328: printval[6] = s10;
      00049D 8A*1D            [24] 2243 	mov	(_rtcPrint_printval_65536_226 + 0x0006),r2
                                   2244 ;	.\ecen4350_lcd_v4.c:329: printval[7] = s1;
      00049F 8B*1E            [24] 2245 	mov	(_rtcPrint_printval_65536_226 + 0x0007),r3
                                   2246 ;	.\ecen4350_lcd_v4.c:330: LCD_string_write(printval);
      0004A1 90r00r17         [24] 2247 	mov	dptr,#_rtcPrint_printval_65536_226
      0004A4 75 F0 40         [24] 2248 	mov	b,#0x40
                                   2249 ;	.\ecen4350_lcd_v4.c:331: }
      0004A7 02r0FrC4         [24] 2250 	ljmp	_LCD_string_write
                                   2251 ;------------------------------------------------------------
                                   2252 ;Allocation info for local variables in function 'setCursor'
                                   2253 ;------------------------------------------------------------
                                   2254 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2255 ;x                         Allocated to registers 
                                   2256 ;------------------------------------------------------------
                                   2257 ;	.\ecen4350_lcd_v4.c:333: void setCursor(u16 x, u16 y)
                                   2258 ;	-----------------------------------------
                                   2259 ;	 function setCursor
                                   2260 ;	-----------------------------------------
      0004AA                       2261 _setCursor:
      0004AA 85 82*08         [24] 2262 	mov	_cursor_x,dpl
      0004AD 85 83*09         [24] 2263 	mov	(_cursor_x + 1),dph
                                   2264 ;	.\ecen4350_lcd_v4.c:336: cursor_y = y;
      0004B0 85*00*0A         [24] 2265 	mov	_cursor_y,_setCursor_PARM_2
      0004B3 85*01*0B         [24] 2266 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2267 ;	.\ecen4350_lcd_v4.c:337: }
      0004B6 22               [24] 2268 	ret
                                   2269 ;------------------------------------------------------------
                                   2270 ;Allocation info for local variables in function 'setTextColor'
                                   2271 ;------------------------------------------------------------
                                   2272 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2273 ;x                         Allocated to registers 
                                   2274 ;------------------------------------------------------------
                                   2275 ;	.\ecen4350_lcd_v4.c:339: void setTextColor(u16 x, u16 y)
                                   2276 ;	-----------------------------------------
                                   2277 ;	 function setTextColor
                                   2278 ;	-----------------------------------------
      0004B7                       2279 _setTextColor:
      0004B7 85 82*0E         [24] 2280 	mov	_textcolor,dpl
      0004BA 85 83*0F         [24] 2281 	mov	(_textcolor + 1),dph
                                   2282 ;	.\ecen4350_lcd_v4.c:342: textbgcolor = y;
      0004BD 85*00*10         [24] 2283 	mov	_textbgcolor,_setTextColor_PARM_2
      0004C0 85*01*11         [24] 2284 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2285 ;	.\ecen4350_lcd_v4.c:343: }
      0004C3 22               [24] 2286 	ret
                                   2287 ;------------------------------------------------------------
                                   2288 ;Allocation info for local variables in function 'setTextSize'
                                   2289 ;------------------------------------------------------------
                                   2290 ;s                         Allocated to registers r7 
                                   2291 ;------------------------------------------------------------
                                   2292 ;	.\ecen4350_lcd_v4.c:346: void setTextSize(u8 s)
                                   2293 ;	-----------------------------------------
                                   2294 ;	 function setTextSize
                                   2295 ;	-----------------------------------------
      0004C4                       2296 _setTextSize:
                                   2297 ;	.\ecen4350_lcd_v4.c:348: if (s > 8)
      0004C4 E5 82            [12] 2298 	mov	a,dpl
      0004C6 FF               [12] 2299 	mov	r7,a
      0004C7 24 F7            [12] 2300 	add	a,#0xff - 0x08
      0004C9 50 01            [24] 2301 	jnc	00102$
                                   2302 ;	.\ecen4350_lcd_v4.c:349: return;
      0004CB 22               [24] 2303 	ret
      0004CC                       2304 00102$:
                                   2305 ;	.\ecen4350_lcd_v4.c:350: textsize = (s > 0) ? s : 1;
      0004CC EF               [12] 2306 	mov	a,r7
      0004CD 60 06            [24] 2307 	jz	00105$
      0004CF 8F 06            [24] 2308 	mov	ar6,r7
      0004D1 7F 00            [12] 2309 	mov	r7,#0x00
      0004D3 80 04            [24] 2310 	sjmp	00106$
      0004D5                       2311 00105$:
      0004D5 7E 01            [12] 2312 	mov	r6,#0x01
      0004D7 7F 00            [12] 2313 	mov	r7,#0x00
      0004D9                       2314 00106$:
      0004D9 8E*0C            [24] 2315 	mov	_textsize,r6
                                   2316 ;	.\ecen4350_lcd_v4.c:351: }
      0004DB 22               [24] 2317 	ret
                                   2318 ;------------------------------------------------------------
                                   2319 ;Allocation info for local variables in function 'setRotation'
                                   2320 ;------------------------------------------------------------
                                   2321 ;flag                      Allocated to registers r7 
                                   2322 ;------------------------------------------------------------
                                   2323 ;	.\ecen4350_lcd_v4.c:353: void setRotation(u8 flag)
                                   2324 ;	-----------------------------------------
                                   2325 ;	 function setRotation
                                   2326 ;	-----------------------------------------
      0004DC                       2327 _setRotation:
                                   2328 ;	.\ecen4350_lcd_v4.c:355: switch (flag)
      0004DC E5 82            [12] 2329 	mov	a,dpl
      0004DE FF               [12] 2330 	mov	r7,a
      0004DF 24 FC            [12] 2331 	add	a,#0xff - 0x03
      0004E1 40 4E            [24] 2332 	jc	00105$
      0004E3 EF               [12] 2333 	mov	a,r7
      0004E4 2F               [12] 2334 	add	a,r7
                                   2335 ;	.\ecen4350_lcd_v4.c:357: case 0:
      0004E5 90r04rE9         [24] 2336 	mov	dptr,#00115$
      0004E8 73               [24] 2337 	jmp	@a+dptr
      0004E9                       2338 00115$:
      0004E9 80 06            [24] 2339 	sjmp	00101$
      0004EB 80 14            [24] 2340 	sjmp	00102$
      0004ED 80 22            [24] 2341 	sjmp	00103$
      0004EF 80 30            [24] 2342 	sjmp	00104$
      0004F1                       2343 00101$:
                                   2344 ;	.\ecen4350_lcd_v4.c:358: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0004F1 7F 48            [12] 2345 	mov	r7,#0x48
                                   2346 ;	.\ecen4350_lcd_v4.c:359: _width = TFTWIDTH;
      0004F3 75*12 F0         [24] 2347 	mov	__width,#0xf0
      0004F6 75*13 00         [24] 2348 	mov	(__width + 1),#0x00
                                   2349 ;	.\ecen4350_lcd_v4.c:360: _height = TFTHEIGHT;
      0004F9 75*14 40         [24] 2350 	mov	__height,#0x40
      0004FC 75*15 01         [24] 2351 	mov	(__height + 1),#0x01
                                   2352 ;	.\ecen4350_lcd_v4.c:361: break;
                                   2353 ;	.\ecen4350_lcd_v4.c:362: case 1:
      0004FF 80 3E            [24] 2354 	sjmp	00106$
      000501                       2355 00102$:
                                   2356 ;	.\ecen4350_lcd_v4.c:363: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000501 7F 28            [12] 2357 	mov	r7,#0x28
                                   2358 ;	.\ecen4350_lcd_v4.c:364: _width = TFTHEIGHT;
      000503 75*12 40         [24] 2359 	mov	__width,#0x40
      000506 75*13 01         [24] 2360 	mov	(__width + 1),#0x01
                                   2361 ;	.\ecen4350_lcd_v4.c:365: _height = TFTWIDTH;
      000509 75*14 F0         [24] 2362 	mov	__height,#0xf0
      00050C 75*15 00         [24] 2363 	mov	(__height + 1),#0x00
                                   2364 ;	.\ecen4350_lcd_v4.c:366: break;
                                   2365 ;	.\ecen4350_lcd_v4.c:367: case 2:
      00050F 80 2E            [24] 2366 	sjmp	00106$
      000511                       2367 00103$:
                                   2368 ;	.\ecen4350_lcd_v4.c:368: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000511 7F 88            [12] 2369 	mov	r7,#0x88
                                   2370 ;	.\ecen4350_lcd_v4.c:369: _width = TFTWIDTH;
      000513 75*12 F0         [24] 2371 	mov	__width,#0xf0
      000516 75*13 00         [24] 2372 	mov	(__width + 1),#0x00
                                   2373 ;	.\ecen4350_lcd_v4.c:370: _height = TFTHEIGHT;
      000519 75*14 40         [24] 2374 	mov	__height,#0x40
      00051C 75*15 01         [24] 2375 	mov	(__height + 1),#0x01
                                   2376 ;	.\ecen4350_lcd_v4.c:371: break;
                                   2377 ;	.\ecen4350_lcd_v4.c:372: case 3:
      00051F 80 1E            [24] 2378 	sjmp	00106$
      000521                       2379 00104$:
                                   2380 ;	.\ecen4350_lcd_v4.c:373: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000521 7F E8            [12] 2381 	mov	r7,#0xe8
                                   2382 ;	.\ecen4350_lcd_v4.c:374: _width = TFTHEIGHT;
      000523 75*12 40         [24] 2383 	mov	__width,#0x40
      000526 75*13 01         [24] 2384 	mov	(__width + 1),#0x01
                                   2385 ;	.\ecen4350_lcd_v4.c:375: _height = TFTWIDTH;
      000529 75*14 F0         [24] 2386 	mov	__height,#0xf0
      00052C 75*15 00         [24] 2387 	mov	(__height + 1),#0x00
                                   2388 ;	.\ecen4350_lcd_v4.c:376: break;
                                   2389 ;	.\ecen4350_lcd_v4.c:377: default:
      00052F 80 0E            [24] 2390 	sjmp	00106$
      000531                       2391 00105$:
                                   2392 ;	.\ecen4350_lcd_v4.c:378: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000531 7F 48            [12] 2393 	mov	r7,#0x48
                                   2394 ;	.\ecen4350_lcd_v4.c:379: _width = TFTWIDTH;
      000533 75*12 F0         [24] 2395 	mov	__width,#0xf0
      000536 75*13 00         [24] 2396 	mov	(__width + 1),#0x00
                                   2397 ;	.\ecen4350_lcd_v4.c:380: _height = TFTHEIGHT;
      000539 75*14 40         [24] 2398 	mov	__height,#0x40
      00053C 75*15 01         [24] 2399 	mov	(__height + 1),#0x01
                                   2400 ;	.\ecen4350_lcd_v4.c:382: }
      00053F                       2401 00106$:
                                   2402 ;	.\ecen4350_lcd_v4.c:383: writeRegister8(ILI9341_MEMCONTROL, flag);
      00053F 8F*00            [24] 2403 	mov	_writeRegister8_PARM_2,r7
      000541 75 82 36         [24] 2404 	mov	dpl,#0x36
                                   2405 ;	.\ecen4350_lcd_v4.c:384: }
      000544 02r01r29         [24] 2406 	ljmp	_writeRegister8
                                   2407 ;------------------------------------------------------------
                                   2408 ;Allocation info for local variables in function 'setAddress'
                                   2409 ;------------------------------------------------------------
                                   2410 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2411 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2412 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2413 ;x1                        Allocated to registers r6 r7 
                                   2414 ;------------------------------------------------------------
                                   2415 ;	.\ecen4350_lcd_v4.c:387: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function setAddress
                                   2418 ;	-----------------------------------------
      000547                       2419 _setAddress:
      000547 AE 82            [24] 2420 	mov	r6,dpl
      000549 AF 83            [24] 2421 	mov	r7,dph
                                   2422 ;	.\ecen4350_lcd_v4.c:390: write8Reg(0x2A);
                                   2423 ;	assignBit
      00054B C2 B4            [12] 2424 	clr	_P3_4
                                   2425 ;	assignBit
      00054D D2 B5            [12] 2426 	setb	_P3_5
      00054F 85*02 82         [24] 2427 	mov	dpl,_lcd_address
      000552 85*03 83         [24] 2428 	mov	dph,(_lcd_address + 1)
      000555 74 2A            [12] 2429 	mov	a,#0x2a
      000557 F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	assignBit
      000558 C2 B5            [12] 2432 	clr	_P3_5
                                   2433 ;	.\ecen4350_lcd_v4.c:391: write8Data(x1 >> 8);
                                   2434 ;	assignBit
      00055A D2 B4            [12] 2435 	setb	_P3_4
                                   2436 ;	assignBit
      00055C D2 B5            [12] 2437 	setb	_P3_5
      00055E 85*02 82         [24] 2438 	mov	dpl,_lcd_address
      000561 85*03 83         [24] 2439 	mov	dph,(_lcd_address + 1)
      000564 8F 05            [24] 2440 	mov	ar5,r7
      000566 ED               [12] 2441 	mov	a,r5
      000567 F0               [24] 2442 	movx	@dptr,a
                                   2443 ;	assignBit
      000568 C2 B5            [12] 2444 	clr	_P3_5
                                   2445 ;	.\ecen4350_lcd_v4.c:392: write8Data(x1);
                                   2446 ;	assignBit
      00056A D2 B4            [12] 2447 	setb	_P3_4
                                   2448 ;	assignBit
      00056C D2 B5            [12] 2449 	setb	_P3_5
      00056E 85*02 82         [24] 2450 	mov	dpl,_lcd_address
      000571 85*03 83         [24] 2451 	mov	dph,(_lcd_address + 1)
      000574 EE               [12] 2452 	mov	a,r6
      000575 F0               [24] 2453 	movx	@dptr,a
                                   2454 ;	assignBit
      000576 C2 B5            [12] 2455 	clr	_P3_5
                                   2456 ;	.\ecen4350_lcd_v4.c:393: write8Data(x2 >> 8);
                                   2457 ;	assignBit
      000578 D2 B4            [12] 2458 	setb	_P3_4
                                   2459 ;	assignBit
      00057A D2 B5            [12] 2460 	setb	_P3_5
      00057C 85*02 82         [24] 2461 	mov	dpl,_lcd_address
      00057F 85*03 83         [24] 2462 	mov	dph,(_lcd_address + 1)
      000582 E5*03            [12] 2463 	mov	a,(_setAddress_PARM_3 + 1)
      000584 F0               [24] 2464 	movx	@dptr,a
                                   2465 ;	assignBit
      000585 C2 B5            [12] 2466 	clr	_P3_5
                                   2467 ;	.\ecen4350_lcd_v4.c:394: write8Data(x2);
                                   2468 ;	assignBit
      000587 D2 B4            [12] 2469 	setb	_P3_4
                                   2470 ;	assignBit
      000589 D2 B5            [12] 2471 	setb	_P3_5
      00058B 85*02 82         [24] 2472 	mov	dpl,_lcd_address
      00058E 85*03 83         [24] 2473 	mov	dph,(_lcd_address + 1)
      000591 E5*02            [12] 2474 	mov	a,_setAddress_PARM_3
      000593 F0               [24] 2475 	movx	@dptr,a
                                   2476 ;	assignBit
      000594 C2 B5            [12] 2477 	clr	_P3_5
                                   2478 ;	.\ecen4350_lcd_v4.c:396: write8Reg(0x2B);
                                   2479 ;	assignBit
      000596 C2 B4            [12] 2480 	clr	_P3_4
                                   2481 ;	assignBit
      000598 D2 B5            [12] 2482 	setb	_P3_5
      00059A 85*02 82         [24] 2483 	mov	dpl,_lcd_address
      00059D 85*03 83         [24] 2484 	mov	dph,(_lcd_address + 1)
      0005A0 74 2B            [12] 2485 	mov	a,#0x2b
      0005A2 F0               [24] 2486 	movx	@dptr,a
                                   2487 ;	assignBit
      0005A3 C2 B5            [12] 2488 	clr	_P3_5
                                   2489 ;	.\ecen4350_lcd_v4.c:397: write8Data(y1 >> 8);
                                   2490 ;	assignBit
      0005A5 D2 B4            [12] 2491 	setb	_P3_4
                                   2492 ;	assignBit
      0005A7 D2 B5            [12] 2493 	setb	_P3_5
      0005A9 85*02 82         [24] 2494 	mov	dpl,_lcd_address
      0005AC 85*03 83         [24] 2495 	mov	dph,(_lcd_address + 1)
      0005AF E5*01            [12] 2496 	mov	a,(_setAddress_PARM_2 + 1)
      0005B1 F0               [24] 2497 	movx	@dptr,a
                                   2498 ;	assignBit
      0005B2 C2 B5            [12] 2499 	clr	_P3_5
                                   2500 ;	.\ecen4350_lcd_v4.c:398: write8Data(y1);
                                   2501 ;	assignBit
      0005B4 D2 B4            [12] 2502 	setb	_P3_4
                                   2503 ;	assignBit
      0005B6 D2 B5            [12] 2504 	setb	_P3_5
      0005B8 85*02 82         [24] 2505 	mov	dpl,_lcd_address
      0005BB 85*03 83         [24] 2506 	mov	dph,(_lcd_address + 1)
      0005BE E5*00            [12] 2507 	mov	a,_setAddress_PARM_2
      0005C0 F0               [24] 2508 	movx	@dptr,a
                                   2509 ;	assignBit
      0005C1 C2 B5            [12] 2510 	clr	_P3_5
                                   2511 ;	.\ecen4350_lcd_v4.c:399: write8Data(y2 >> 8);
                                   2512 ;	assignBit
      0005C3 D2 B4            [12] 2513 	setb	_P3_4
                                   2514 ;	assignBit
      0005C5 D2 B5            [12] 2515 	setb	_P3_5
      0005C7 85*02 82         [24] 2516 	mov	dpl,_lcd_address
      0005CA 85*03 83         [24] 2517 	mov	dph,(_lcd_address + 1)
      0005CD E5*05            [12] 2518 	mov	a,(_setAddress_PARM_4 + 1)
      0005CF F0               [24] 2519 	movx	@dptr,a
                                   2520 ;	assignBit
      0005D0 C2 B5            [12] 2521 	clr	_P3_5
                                   2522 ;	.\ecen4350_lcd_v4.c:400: write8Data(y2);
                                   2523 ;	assignBit
      0005D2 D2 B4            [12] 2524 	setb	_P3_4
                                   2525 ;	assignBit
      0005D4 D2 B5            [12] 2526 	setb	_P3_5
      0005D6 85*02 82         [24] 2527 	mov	dpl,_lcd_address
      0005D9 85*03 83         [24] 2528 	mov	dph,(_lcd_address + 1)
      0005DC E5*04            [12] 2529 	mov	a,_setAddress_PARM_4
      0005DE F0               [24] 2530 	movx	@dptr,a
                                   2531 ;	assignBit
      0005DF C2 B5            [12] 2532 	clr	_P3_5
                                   2533 ;	.\ecen4350_lcd_v4.c:403: }
      0005E1 22               [24] 2534 	ret
                                   2535 ;------------------------------------------------------------
                                   2536 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2537 ;------------------------------------------------------------
                                   2538 ;	.\ecen4350_lcd_v4.c:405: void TFT_LCD_INIT(void)
                                   2539 ;	-----------------------------------------
                                   2540 ;	 function TFT_LCD_INIT
                                   2541 ;	-----------------------------------------
      0005E2                       2542 _TFT_LCD_INIT:
                                   2543 ;	.\ecen4350_lcd_v4.c:409: _width = TFTWIDTH;
      0005E2 75*12 F0         [24] 2544 	mov	__width,#0xf0
      0005E5 75*13 00         [24] 2545 	mov	(__width + 1),#0x00
                                   2546 ;	.\ecen4350_lcd_v4.c:410: _height = TFTHEIGHT;
      0005E8 75*14 40         [24] 2547 	mov	__height,#0x40
      0005EB 75*15 01         [24] 2548 	mov	(__height + 1),#0x01
                                   2549 ;	.\ecen4350_lcd_v4.c:413: IOM = 0;
                                   2550 ;	assignBit
      0005EE C2 B5            [12] 2551 	clr	_P3_5
                                   2552 ;	.\ecen4350_lcd_v4.c:415: CD = 1;
                                   2553 ;	assignBit
      0005F0 D2 B4            [12] 2554 	setb	_P3_4
                                   2555 ;	.\ecen4350_lcd_v4.c:417: write8Reg(0x00);
                                   2556 ;	assignBit
      0005F2 C2 B4            [12] 2557 	clr	_P3_4
                                   2558 ;	assignBit
      0005F4 D2 B5            [12] 2559 	setb	_P3_5
      0005F6 85*02 82         [24] 2560 	mov	dpl,_lcd_address
      0005F9 85*03 83         [24] 2561 	mov	dph,(_lcd_address + 1)
      0005FC E4               [12] 2562 	clr	a
      0005FD F0               [24] 2563 	movx	@dptr,a
                                   2564 ;	assignBit
      0005FE C2 B5            [12] 2565 	clr	_P3_5
                                   2566 ;	.\ecen4350_lcd_v4.c:418: write8Data(0x00);
                                   2567 ;	assignBit
      000600 D2 B4            [12] 2568 	setb	_P3_4
                                   2569 ;	assignBit
      000602 D2 B5            [12] 2570 	setb	_P3_5
      000604 85*02 82         [24] 2571 	mov	dpl,_lcd_address
      000607 85*03 83         [24] 2572 	mov	dph,(_lcd_address + 1)
      00060A E4               [12] 2573 	clr	a
      00060B F0               [24] 2574 	movx	@dptr,a
                                   2575 ;	assignBit
      00060C C2 B5            [12] 2576 	clr	_P3_5
                                   2577 ;	.\ecen4350_lcd_v4.c:419: write8Data(0x00);
                                   2578 ;	assignBit
      00060E D2 B4            [12] 2579 	setb	_P3_4
                                   2580 ;	assignBit
      000610 D2 B5            [12] 2581 	setb	_P3_5
      000612 85*02 82         [24] 2582 	mov	dpl,_lcd_address
      000615 85*03 83         [24] 2583 	mov	dph,(_lcd_address + 1)
      000618 E4               [12] 2584 	clr	a
      000619 F0               [24] 2585 	movx	@dptr,a
                                   2586 ;	assignBit
      00061A C2 B5            [12] 2587 	clr	_P3_5
                                   2588 ;	.\ecen4350_lcd_v4.c:420: write8Data(0x00);
                                   2589 ;	assignBit
      00061C D2 B4            [12] 2590 	setb	_P3_4
                                   2591 ;	assignBit
      00061E D2 B5            [12] 2592 	setb	_P3_5
      000620 85*02 82         [24] 2593 	mov	dpl,_lcd_address
      000623 85*03 83         [24] 2594 	mov	dph,(_lcd_address + 1)
      000626 E4               [12] 2595 	clr	a
      000627 F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	assignBit
      000628 C2 B5            [12] 2598 	clr	_P3_5
                                   2599 ;	.\ecen4350_lcd_v4.c:422: delay(100);						// changed from 200 to 100
      00062A 90 00 64         [24] 2600 	mov	dptr,#0x0064
      00062D 12r00rE0         [24] 2601 	lcall	_delay
                                   2602 ;	.\ecen4350_lcd_v4.c:426: writeRegister8(ILI9341_SOFTRESET, 0);
      000630 75*00 00         [24] 2603 	mov	_writeRegister8_PARM_2,#0x00
      000633 75 82 01         [24] 2604 	mov	dpl,#0x01
      000636 12r01r29         [24] 2605 	lcall	_writeRegister8
                                   2606 ;	.\ecen4350_lcd_v4.c:427: delay(50);
      000639 90 00 32         [24] 2607 	mov	dptr,#0x0032
      00063C 12r00rE0         [24] 2608 	lcall	_delay
                                   2609 ;	.\ecen4350_lcd_v4.c:428: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00063F 75*00 00         [24] 2610 	mov	_writeRegister8_PARM_2,#0x00
      000642 75 82 28         [24] 2611 	mov	dpl,#0x28
      000645 12r01r29         [24] 2612 	lcall	_writeRegister8
                                   2613 ;	.\ecen4350_lcd_v4.c:429: delay(10);
      000648 90 00 0A         [24] 2614 	mov	dptr,#0x000a
      00064B 12r00rE0         [24] 2615 	lcall	_delay
                                   2616 ;	.\ecen4350_lcd_v4.c:431: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      00064E 75*00 23         [24] 2617 	mov	_writeRegister8_PARM_2,#0x23
      000651 75 82 C0         [24] 2618 	mov	dpl,#0xc0
      000654 12r01r29         [24] 2619 	lcall	_writeRegister8
                                   2620 ;	.\ecen4350_lcd_v4.c:432: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000657 75*00 11         [24] 2621 	mov	_writeRegister8_PARM_2,#0x11
      00065A 75 82 C1         [24] 2622 	mov	dpl,#0xc1
      00065D 12r01r29         [24] 2623 	lcall	_writeRegister8
                                   2624 ;	.\ecen4350_lcd_v4.c:433: write8Reg(ILI9341_VCOMCONTROL1);
                                   2625 ;	assignBit
      000660 C2 B4            [12] 2626 	clr	_P3_4
                                   2627 ;	assignBit
      000662 D2 B5            [12] 2628 	setb	_P3_5
      000664 85*02 82         [24] 2629 	mov	dpl,_lcd_address
      000667 85*03 83         [24] 2630 	mov	dph,(_lcd_address + 1)
      00066A 74 C5            [12] 2631 	mov	a,#0xc5
      00066C F0               [24] 2632 	movx	@dptr,a
                                   2633 ;	assignBit
      00066D C2 B5            [12] 2634 	clr	_P3_5
                                   2635 ;	.\ecen4350_lcd_v4.c:434: write8Data(0x3d);
                                   2636 ;	assignBit
      00066F D2 B4            [12] 2637 	setb	_P3_4
                                   2638 ;	assignBit
      000671 D2 B5            [12] 2639 	setb	_P3_5
      000673 85*02 82         [24] 2640 	mov	dpl,_lcd_address
      000676 85*03 83         [24] 2641 	mov	dph,(_lcd_address + 1)
      000679 74 3D            [12] 2642 	mov	a,#0x3d
      00067B F0               [24] 2643 	movx	@dptr,a
                                   2644 ;	assignBit
      00067C C2 B5            [12] 2645 	clr	_P3_5
                                   2646 ;	.\ecen4350_lcd_v4.c:435: write8Data(0x30);
                                   2647 ;	assignBit
      00067E D2 B4            [12] 2648 	setb	_P3_4
                                   2649 ;	assignBit
      000680 D2 B5            [12] 2650 	setb	_P3_5
      000682 85*02 82         [24] 2651 	mov	dpl,_lcd_address
      000685 85*03 83         [24] 2652 	mov	dph,(_lcd_address + 1)
      000688 74 30            [12] 2653 	mov	a,#0x30
      00068A F0               [24] 2654 	movx	@dptr,a
                                   2655 ;	assignBit
      00068B C2 B5            [12] 2656 	clr	_P3_5
                                   2657 ;	.\ecen4350_lcd_v4.c:436: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      00068D 75*00 AA         [24] 2658 	mov	_writeRegister8_PARM_2,#0xaa
      000690 75 82 C7         [24] 2659 	mov	dpl,#0xc7
      000693 12r01r29         [24] 2660 	lcall	_writeRegister8
                                   2661 ;	.\ecen4350_lcd_v4.c:437: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000696 75*00 88         [24] 2662 	mov	_writeRegister8_PARM_2,#0x88
      000699 75 82 36         [24] 2663 	mov	dpl,#0x36
      00069C 12r01r29         [24] 2664 	lcall	_writeRegister8
                                   2665 ;	.\ecen4350_lcd_v4.c:438: write8Reg(ILI9341_PIXELFORMAT);
                                   2666 ;	assignBit
      00069F C2 B4            [12] 2667 	clr	_P3_4
                                   2668 ;	assignBit
      0006A1 D2 B5            [12] 2669 	setb	_P3_5
      0006A3 85*02 82         [24] 2670 	mov	dpl,_lcd_address
      0006A6 85*03 83         [24] 2671 	mov	dph,(_lcd_address + 1)
      0006A9 74 3A            [12] 2672 	mov	a,#0x3a
      0006AB F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	assignBit
      0006AC C2 B5            [12] 2675 	clr	_P3_5
                                   2676 ;	.\ecen4350_lcd_v4.c:439: write8Data(0x55);
                                   2677 ;	assignBit
      0006AE D2 B4            [12] 2678 	setb	_P3_4
                                   2679 ;	assignBit
      0006B0 D2 B5            [12] 2680 	setb	_P3_5
      0006B2 85*02 82         [24] 2681 	mov	dpl,_lcd_address
      0006B5 85*03 83         [24] 2682 	mov	dph,(_lcd_address + 1)
      0006B8 74 55            [12] 2683 	mov	a,#0x55
      0006BA F0               [24] 2684 	movx	@dptr,a
                                   2685 ;	assignBit
      0006BB C2 B5            [12] 2686 	clr	_P3_5
                                   2687 ;	.\ecen4350_lcd_v4.c:440: write8Data(0x00);
                                   2688 ;	assignBit
      0006BD D2 B4            [12] 2689 	setb	_P3_4
                                   2690 ;	assignBit
      0006BF D2 B5            [12] 2691 	setb	_P3_5
      0006C1 85*02 82         [24] 2692 	mov	dpl,_lcd_address
      0006C4 85*03 83         [24] 2693 	mov	dph,(_lcd_address + 1)
      0006C7 E4               [12] 2694 	clr	a
      0006C8 F0               [24] 2695 	movx	@dptr,a
                                   2696 ;	assignBit
      0006C9 C2 B5            [12] 2697 	clr	_P3_5
                                   2698 ;	.\ecen4350_lcd_v4.c:441: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0006CB 75*00 1B         [24] 2699 	mov	_writeRegister16_PARM_2,#0x1b
      0006CE 75*01 00         [24] 2700 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0006D1 90 00 B1         [24] 2701 	mov	dptr,#0x00b1
      0006D4 12r01r49         [24] 2702 	lcall	_writeRegister16
                                   2703 ;	.\ecen4350_lcd_v4.c:443: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0006D7 75*00 07         [24] 2704 	mov	_writeRegister8_PARM_2,#0x07
      0006DA 75 82 B7         [24] 2705 	mov	dpl,#0xb7
      0006DD 12r01r29         [24] 2706 	lcall	_writeRegister8
                                   2707 ;	.\ecen4350_lcd_v4.c:446: writeRegister8(ILI9341_SLEEPOUT, 0);
      0006E0 75*00 00         [24] 2708 	mov	_writeRegister8_PARM_2,#0x00
      0006E3 75 82 11         [24] 2709 	mov	dpl,#0x11
      0006E6 12r01r29         [24] 2710 	lcall	_writeRegister8
                                   2711 ;	.\ecen4350_lcd_v4.c:447: delay(100);								// changed from 150 to 100
      0006E9 90 00 64         [24] 2712 	mov	dptr,#0x0064
      0006EC 12r00rE0         [24] 2713 	lcall	_delay
                                   2714 ;	.\ecen4350_lcd_v4.c:448: writeRegister8(ILI9341_DISPLAYON, 0);
      0006EF 75*00 00         [24] 2715 	mov	_writeRegister8_PARM_2,#0x00
      0006F2 75 82 29         [24] 2716 	mov	dpl,#0x29
      0006F5 12r01r29         [24] 2717 	lcall	_writeRegister8
                                   2718 ;	.\ecen4350_lcd_v4.c:449: delay(150);								// changed from 200 to 150
      0006F8 90 00 96         [24] 2719 	mov	dptr,#0x0096
      0006FB 12r00rE0         [24] 2720 	lcall	_delay
                                   2721 ;	.\ecen4350_lcd_v4.c:450: setAddress(0, 0, _width - 1, _height - 1);
      0006FE E5*12            [12] 2722 	mov	a,__width
      000700 24 FF            [12] 2723 	add	a,#0xff
      000702 F5*02            [12] 2724 	mov	_setAddress_PARM_3,a
      000704 E5*13            [12] 2725 	mov	a,(__width + 1)
      000706 34 FF            [12] 2726 	addc	a,#0xff
      000708 F5*03            [12] 2727 	mov	(_setAddress_PARM_3 + 1),a
      00070A E5*14            [12] 2728 	mov	a,__height
      00070C 24 FF            [12] 2729 	add	a,#0xff
      00070E F5*04            [12] 2730 	mov	_setAddress_PARM_4,a
      000710 E5*15            [12] 2731 	mov	a,(__height + 1)
      000712 34 FF            [12] 2732 	addc	a,#0xff
      000714 F5*05            [12] 2733 	mov	(_setAddress_PARM_4 + 1),a
      000716 E4               [12] 2734 	clr	a
      000717 F5*00            [12] 2735 	mov	_setAddress_PARM_2,a
      000719 F5*01            [12] 2736 	mov	(_setAddress_PARM_2 + 1),a
      00071B 90 00 00         [24] 2737 	mov	dptr,#0x0000
                                   2738 ;	.\ecen4350_lcd_v4.c:454: }
      00071E 02r05r47         [24] 2739 	ljmp	_setAddress
                                   2740 ;------------------------------------------------------------
                                   2741 ;Allocation info for local variables in function 'drawPixel'
                                   2742 ;------------------------------------------------------------
                                   2743 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2744 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2745 ;x3                        Allocated to registers r6 r7 
                                   2746 ;------------------------------------------------------------
                                   2747 ;	.\ecen4350_lcd_v4.c:455: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2748 ;	-----------------------------------------
                                   2749 ;	 function drawPixel
                                   2750 ;	-----------------------------------------
      000721                       2751 _drawPixel:
      000721 AE 82            [24] 2752 	mov	r6,dpl
      000723 AF 83            [24] 2753 	mov	r7,dph
                                   2754 ;	.\ecen4350_lcd_v4.c:463: setAddress(x3, y3, x3 + 1, y3 + 1);
      000725 74 01            [12] 2755 	mov	a,#0x01
      000727 2E               [12] 2756 	add	a,r6
      000728 F5*02            [12] 2757 	mov	_setAddress_PARM_3,a
      00072A E4               [12] 2758 	clr	a
      00072B 3F               [12] 2759 	addc	a,r7
      00072C F5*03            [12] 2760 	mov	(_setAddress_PARM_3 + 1),a
      00072E 74 01            [12] 2761 	mov	a,#0x01
      000730 25*20            [12] 2762 	add	a,_drawPixel_PARM_2
      000732 F5*04            [12] 2763 	mov	_setAddress_PARM_4,a
      000734 E4               [12] 2764 	clr	a
      000735 35*21            [12] 2765 	addc	a,(_drawPixel_PARM_2 + 1)
      000737 F5*05            [12] 2766 	mov	(_setAddress_PARM_4 + 1),a
      000739 85*20*00         [24] 2767 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00073C 85*21*01         [24] 2768 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      00073F 8E 82            [24] 2769 	mov	dpl,r6
      000741 8F 83            [24] 2770 	mov	dph,r7
      000743 12r05r47         [24] 2771 	lcall	_setAddress
                                   2772 ;	.\ecen4350_lcd_v4.c:467: CD = 0;
                                   2773 ;	assignBit
      000746 C2 B4            [12] 2774 	clr	_P3_4
                                   2775 ;	.\ecen4350_lcd_v4.c:468: write8(0x2C);
                                   2776 ;	assignBit
      000748 D2 B5            [12] 2777 	setb	_P3_5
      00074A 85*02 82         [24] 2778 	mov	dpl,_lcd_address
      00074D 85*03 83         [24] 2779 	mov	dph,(_lcd_address + 1)
      000750 74 2C            [12] 2780 	mov	a,#0x2c
      000752 F0               [24] 2781 	movx	@dptr,a
                                   2782 ;	assignBit
      000753 C2 B5            [12] 2783 	clr	_P3_5
                                   2784 ;	.\ecen4350_lcd_v4.c:470: CD = 1;
                                   2785 ;	assignBit
      000755 D2 B4            [12] 2786 	setb	_P3_4
                                   2787 ;	.\ecen4350_lcd_v4.c:471: write8(color1 >> 8);
                                   2788 ;	assignBit
      000757 D2 B5            [12] 2789 	setb	_P3_5
      000759 85*02 82         [24] 2790 	mov	dpl,_lcd_address
      00075C 85*03 83         [24] 2791 	mov	dph,(_lcd_address + 1)
      00075F E5*23            [12] 2792 	mov	a,(_drawPixel_PARM_3 + 1)
      000761 F0               [24] 2793 	movx	@dptr,a
                                   2794 ;	assignBit
      000762 C2 B5            [12] 2795 	clr	_P3_5
                                   2796 ;	.\ecen4350_lcd_v4.c:472: write8(color1);
                                   2797 ;	assignBit
      000764 D2 B5            [12] 2798 	setb	_P3_5
      000766 85*02 82         [24] 2799 	mov	dpl,_lcd_address
      000769 85*03 83         [24] 2800 	mov	dph,(_lcd_address + 1)
      00076C E5*22            [12] 2801 	mov	a,_drawPixel_PARM_3
      00076E F0               [24] 2802 	movx	@dptr,a
                                   2803 ;	assignBit
      00076F C2 B5            [12] 2804 	clr	_P3_5
                                   2805 ;	.\ecen4350_lcd_v4.c:474: }
      000771 22               [24] 2806 	ret
                                   2807 ;------------------------------------------------------------
                                   2808 ;Allocation info for local variables in function 'drawCircle'
                                   2809 ;------------------------------------------------------------
                                   2810 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2811 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2812 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2813 ;x0                        Allocated with name '_drawCircle_x0_65536_393'
                                   2814 ;f                         Allocated with name '_drawCircle_f_65536_394'
                                   2815 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_394'
                                   2816 ;ddF_y                     Allocated to registers r2 r3 
                                   2817 ;x                         Allocated with name '_drawCircle_x_65536_394'
                                   2818 ;y                         Allocated to registers r0 r1 
                                   2819 ;------------------------------------------------------------
                                   2820 ;	.\ecen4350_lcd_v4.c:478: void drawCircle(int x0, int y0, int r, u16 color)
                                   2821 ;	-----------------------------------------
                                   2822 ;	 function drawCircle
                                   2823 ;	-----------------------------------------
      000772                       2824 _drawCircle:
      000772 85 82*2A         [24] 2825 	mov	_drawCircle_x0_65536_393,dpl
      000775 85 83*2B         [24] 2826 	mov	(_drawCircle_x0_65536_393 + 1),dph
                                   2827 ;	.\ecen4350_lcd_v4.c:480: int f = 1 - r;
      000778 74 01            [12] 2828 	mov	a,#0x01
      00077A C3               [12] 2829 	clr	c
      00077B 95*26            [12] 2830 	subb	a,_drawCircle_PARM_3
      00077D F5*2C            [12] 2831 	mov	_drawCircle_f_65536_394,a
      00077F E4               [12] 2832 	clr	a
      000780 95*27            [12] 2833 	subb	a,(_drawCircle_PARM_3 + 1)
      000782 F5*2D            [12] 2834 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2835 ;	.\ecen4350_lcd_v4.c:482: int ddF_y = -2 * r;
      000784 85*26*00         [24] 2836 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      000787 85*27*01         [24] 2837 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00078A 90 FF FE         [24] 2838 	mov	dptr,#0xfffe
      00078D 12r00r00         [24] 2839 	lcall	__mulint
      000790 AA 82            [24] 2840 	mov	r2,dpl
      000792 AB 83            [24] 2841 	mov	r3,dph
                                   2842 ;	.\ecen4350_lcd_v4.c:484: int y = r;
      000794 A8*26            [24] 2843 	mov	r0,_drawCircle_PARM_3
      000796 A9*27            [24] 2844 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2845 ;	.\ecen4350_lcd_v4.c:486: drawPixel(x0, y0 + r, color);
      000798 E8               [12] 2846 	mov	a,r0
      000799 25*24            [12] 2847 	add	a,_drawCircle_PARM_2
      00079B F5*20            [12] 2848 	mov	_drawPixel_PARM_2,a
      00079D E9               [12] 2849 	mov	a,r1
      00079E 35*25            [12] 2850 	addc	a,(_drawCircle_PARM_2 + 1)
      0007A0 F5*21            [12] 2851 	mov	(_drawPixel_PARM_2 + 1),a
      0007A2 85*28*22         [24] 2852 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007A5 85*29*23         [24] 2853 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007A8 85*2A 82         [24] 2854 	mov	dpl,_drawCircle_x0_65536_393
      0007AB 85*2B 83         [24] 2855 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      0007AE C0 03            [24] 2856 	push	ar3
      0007B0 C0 02            [24] 2857 	push	ar2
      0007B2 C0 01            [24] 2858 	push	ar1
      0007B4 C0 00            [24] 2859 	push	ar0
      0007B6 12r07r21         [24] 2860 	lcall	_drawPixel
      0007B9 D0 00            [24] 2861 	pop	ar0
      0007BB D0 01            [24] 2862 	pop	ar1
                                   2863 ;	.\ecen4350_lcd_v4.c:487: drawPixel(x0, y0 - r, color);
      0007BD E5*24            [12] 2864 	mov	a,_drawCircle_PARM_2
      0007BF C3               [12] 2865 	clr	c
      0007C0 98               [12] 2866 	subb	a,r0
      0007C1 F5*20            [12] 2867 	mov	_drawPixel_PARM_2,a
      0007C3 E5*25            [12] 2868 	mov	a,(_drawCircle_PARM_2 + 1)
      0007C5 99               [12] 2869 	subb	a,r1
      0007C6 F5*21            [12] 2870 	mov	(_drawPixel_PARM_2 + 1),a
      0007C8 85*28*22         [24] 2871 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007CB 85*29*23         [24] 2872 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007CE 85*2A 82         [24] 2873 	mov	dpl,_drawCircle_x0_65536_393
      0007D1 85*2B 83         [24] 2874 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      0007D4 C0 01            [24] 2875 	push	ar1
      0007D6 C0 00            [24] 2876 	push	ar0
      0007D8 12r07r21         [24] 2877 	lcall	_drawPixel
      0007DB D0 00            [24] 2878 	pop	ar0
      0007DD D0 01            [24] 2879 	pop	ar1
                                   2880 ;	.\ecen4350_lcd_v4.c:488: drawPixel(x0 + r, y0, color);
      0007DF E8               [12] 2881 	mov	a,r0
      0007E0 25*2A            [12] 2882 	add	a,_drawCircle_x0_65536_393
      0007E2 F5 82            [12] 2883 	mov	dpl,a
      0007E4 E9               [12] 2884 	mov	a,r1
      0007E5 35*2B            [12] 2885 	addc	a,(_drawCircle_x0_65536_393 + 1)
      0007E7 F5 83            [12] 2886 	mov	dph,a
      0007E9 85*24*20         [24] 2887 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0007EC 85*25*21         [24] 2888 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0007EF 85*28*22         [24] 2889 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0007F2 85*29*23         [24] 2890 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0007F5 C0 01            [24] 2891 	push	ar1
      0007F7 C0 00            [24] 2892 	push	ar0
      0007F9 12r07r21         [24] 2893 	lcall	_drawPixel
      0007FC D0 00            [24] 2894 	pop	ar0
      0007FE D0 01            [24] 2895 	pop	ar1
                                   2896 ;	.\ecen4350_lcd_v4.c:489: drawPixel(x0 - r, y0, color);
      000800 E5*2A            [12] 2897 	mov	a,_drawCircle_x0_65536_393
      000802 C3               [12] 2898 	clr	c
      000803 98               [12] 2899 	subb	a,r0
      000804 F5 82            [12] 2900 	mov	dpl,a
      000806 E5*2B            [12] 2901 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000808 99               [12] 2902 	subb	a,r1
      000809 F5 83            [12] 2903 	mov	dph,a
      00080B 85*24*20         [24] 2904 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00080E 85*25*21         [24] 2905 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000811 85*28*22         [24] 2906 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000814 85*29*23         [24] 2907 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000817 C0 01            [24] 2908 	push	ar1
      000819 C0 00            [24] 2909 	push	ar0
      00081B 12r07r21         [24] 2910 	lcall	_drawPixel
      00081E D0 00            [24] 2911 	pop	ar0
      000820 D0 01            [24] 2912 	pop	ar1
      000822 D0 02            [24] 2913 	pop	ar2
      000824 D0 03            [24] 2914 	pop	ar3
                                   2915 ;	.\ecen4350_lcd_v4.c:491: while (x < y)
      000826 E4               [12] 2916 	clr	a
      000827 F5*30            [12] 2917 	mov	_drawCircle_x_65536_394,a
      000829 F5*31            [12] 2918 	mov	(_drawCircle_x_65536_394 + 1),a
      00082B 75*2E 01         [24] 2919 	mov	_drawCircle_ddF_x_65536_394,#0x01
                                   2920 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_394 + 1),#0x00
      00082E F5*2F            [12] 2921 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
      000830                       2922 00103$:
      000830 C3               [12] 2923 	clr	c
      000831 E5*30            [12] 2924 	mov	a,_drawCircle_x_65536_394
      000833 98               [12] 2925 	subb	a,r0
      000834 E5*31            [12] 2926 	mov	a,(_drawCircle_x_65536_394 + 1)
      000836 64 80            [12] 2927 	xrl	a,#0x80
      000838 89 F0            [24] 2928 	mov	b,r1
      00083A 63 F0 80         [24] 2929 	xrl	b,#0x80
      00083D 95 F0            [12] 2930 	subb	a,b
      00083F 40 01            [24] 2931 	jc	00121$
      000841 22               [24] 2932 	ret
      000842                       2933 00121$:
                                   2934 ;	.\ecen4350_lcd_v4.c:493: if (f >= 0)
      000842 E5*2D            [12] 2935 	mov	a,(_drawCircle_f_65536_394 + 1)
      000844 20 E7 16         [24] 2936 	jb	acc.7,00102$
                                   2937 ;	.\ecen4350_lcd_v4.c:495: y--;
      000847 18               [12] 2938 	dec	r0
      000848 B8 FF 01         [24] 2939 	cjne	r0,#0xff,00123$
      00084B 19               [12] 2940 	dec	r1
      00084C                       2941 00123$:
                                   2942 ;	.\ecen4350_lcd_v4.c:496: ddF_y += 2;
      00084C 74 02            [12] 2943 	mov	a,#0x02
      00084E 2A               [12] 2944 	add	a,r2
      00084F FA               [12] 2945 	mov	r2,a
      000850 E4               [12] 2946 	clr	a
      000851 3B               [12] 2947 	addc	a,r3
      000852 FB               [12] 2948 	mov	r3,a
                                   2949 ;	.\ecen4350_lcd_v4.c:497: f += ddF_y;
      000853 EA               [12] 2950 	mov	a,r2
      000854 25*2C            [12] 2951 	add	a,_drawCircle_f_65536_394
      000856 F5*2C            [12] 2952 	mov	_drawCircle_f_65536_394,a
      000858 EB               [12] 2953 	mov	a,r3
      000859 35*2D            [12] 2954 	addc	a,(_drawCircle_f_65536_394 + 1)
      00085B F5*2D            [12] 2955 	mov	(_drawCircle_f_65536_394 + 1),a
      00085D                       2956 00102$:
                                   2957 ;	.\ecen4350_lcd_v4.c:499: x++;
      00085D C0 02            [24] 2958 	push	ar2
      00085F C0 03            [24] 2959 	push	ar3
      000861 05*30            [12] 2960 	inc	_drawCircle_x_65536_394
      000863 E4               [12] 2961 	clr	a
      000864 B5*30 02         [24] 2962 	cjne	a,_drawCircle_x_65536_394,00124$
      000867 05*31            [12] 2963 	inc	(_drawCircle_x_65536_394 + 1)
      000869                       2964 00124$:
                                   2965 ;	.\ecen4350_lcd_v4.c:500: ddF_x += 2;
      000869 74 02            [12] 2966 	mov	a,#0x02
      00086B 25*2E            [12] 2967 	add	a,_drawCircle_ddF_x_65536_394
      00086D F5*2E            [12] 2968 	mov	_drawCircle_ddF_x_65536_394,a
      00086F E4               [12] 2969 	clr	a
      000870 35*2F            [12] 2970 	addc	a,(_drawCircle_ddF_x_65536_394 + 1)
      000872 F5*2F            [12] 2971 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
                                   2972 ;	.\ecen4350_lcd_v4.c:501: f += ddF_x;
      000874 E5*2E            [12] 2973 	mov	a,_drawCircle_ddF_x_65536_394
      000876 25*2C            [12] 2974 	add	a,_drawCircle_f_65536_394
      000878 F5*2C            [12] 2975 	mov	_drawCircle_f_65536_394,a
      00087A E5*2F            [12] 2976 	mov	a,(_drawCircle_ddF_x_65536_394 + 1)
      00087C 35*2D            [12] 2977 	addc	a,(_drawCircle_f_65536_394 + 1)
      00087E F5*2D            [12] 2978 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2979 ;	.\ecen4350_lcd_v4.c:503: drawPixel(x0 + x, y0 + y, color);
      000880 E5*30            [12] 2980 	mov	a,_drawCircle_x_65536_394
      000882 25*2A            [12] 2981 	add	a,_drawCircle_x0_65536_393
      000884 FE               [12] 2982 	mov	r6,a
      000885 E5*31            [12] 2983 	mov	a,(_drawCircle_x_65536_394 + 1)
      000887 35*2B            [12] 2984 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000889 FF               [12] 2985 	mov	r7,a
      00088A E8               [12] 2986 	mov	a,r0
      00088B 25*24            [12] 2987 	add	a,_drawCircle_PARM_2
      00088D FC               [12] 2988 	mov	r4,a
      00088E E9               [12] 2989 	mov	a,r1
      00088F 35*25            [12] 2990 	addc	a,(_drawCircle_PARM_2 + 1)
      000891 FD               [12] 2991 	mov	r5,a
      000892 8C*20            [24] 2992 	mov	_drawPixel_PARM_2,r4
      000894 8D*21            [24] 2993 	mov	(_drawPixel_PARM_2 + 1),r5
      000896 85*28*22         [24] 2994 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000899 85*29*23         [24] 2995 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00089C 8E 82            [24] 2996 	mov	dpl,r6
      00089E 8F 83            [24] 2997 	mov	dph,r7
      0008A0 C0 07            [24] 2998 	push	ar7
      0008A2 C0 06            [24] 2999 	push	ar6
      0008A4 C0 05            [24] 3000 	push	ar5
      0008A6 C0 04            [24] 3001 	push	ar4
      0008A8 C0 03            [24] 3002 	push	ar3
      0008AA C0 02            [24] 3003 	push	ar2
      0008AC C0 01            [24] 3004 	push	ar1
      0008AE C0 00            [24] 3005 	push	ar0
      0008B0 12r07r21         [24] 3006 	lcall	_drawPixel
      0008B3 D0 00            [24] 3007 	pop	ar0
      0008B5 D0 01            [24] 3008 	pop	ar1
      0008B7 D0 02            [24] 3009 	pop	ar2
      0008B9 D0 03            [24] 3010 	pop	ar3
      0008BB D0 04            [24] 3011 	pop	ar4
      0008BD D0 05            [24] 3012 	pop	ar5
                                   3013 ;	.\ecen4350_lcd_v4.c:504: drawPixel(x0 - x, y0 + y, color);
      0008BF E5*2A            [12] 3014 	mov	a,_drawCircle_x0_65536_393
      0008C1 C3               [12] 3015 	clr	c
      0008C2 95*30            [12] 3016 	subb	a,_drawCircle_x_65536_394
      0008C4 FA               [12] 3017 	mov	r2,a
      0008C5 E5*2B            [12] 3018 	mov	a,(_drawCircle_x0_65536_393 + 1)
      0008C7 95*31            [12] 3019 	subb	a,(_drawCircle_x_65536_394 + 1)
      0008C9 FB               [12] 3020 	mov	r3,a
      0008CA 8C*20            [24] 3021 	mov	_drawPixel_PARM_2,r4
      0008CC 8D*21            [24] 3022 	mov	(_drawPixel_PARM_2 + 1),r5
      0008CE 85*28*22         [24] 3023 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008D1 85*29*23         [24] 3024 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008D4 8A 82            [24] 3025 	mov	dpl,r2
      0008D6 8B 83            [24] 3026 	mov	dph,r3
      0008D8 C0 03            [24] 3027 	push	ar3
      0008DA C0 02            [24] 3028 	push	ar2
      0008DC C0 01            [24] 3029 	push	ar1
      0008DE C0 00            [24] 3030 	push	ar0
      0008E0 12r07r21         [24] 3031 	lcall	_drawPixel
      0008E3 D0 00            [24] 3032 	pop	ar0
      0008E5 D0 01            [24] 3033 	pop	ar1
      0008E7 D0 02            [24] 3034 	pop	ar2
      0008E9 D0 03            [24] 3035 	pop	ar3
      0008EB D0 06            [24] 3036 	pop	ar6
      0008ED D0 07            [24] 3037 	pop	ar7
                                   3038 ;	.\ecen4350_lcd_v4.c:505: drawPixel(x0 + x, y0 - y, color);
      0008EF E5*24            [12] 3039 	mov	a,_drawCircle_PARM_2
      0008F1 C3               [12] 3040 	clr	c
      0008F2 98               [12] 3041 	subb	a,r0
      0008F3 FC               [12] 3042 	mov	r4,a
      0008F4 E5*25            [12] 3043 	mov	a,(_drawCircle_PARM_2 + 1)
      0008F6 99               [12] 3044 	subb	a,r1
      0008F7 FD               [12] 3045 	mov	r5,a
      0008F8 8C*20            [24] 3046 	mov	_drawPixel_PARM_2,r4
      0008FA 8D*21            [24] 3047 	mov	(_drawPixel_PARM_2 + 1),r5
      0008FC 85*28*22         [24] 3048 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008FF 85*29*23         [24] 3049 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000902 8E 82            [24] 3050 	mov	dpl,r6
      000904 8F 83            [24] 3051 	mov	dph,r7
      000906 C0 05            [24] 3052 	push	ar5
      000908 C0 04            [24] 3053 	push	ar4
      00090A C0 03            [24] 3054 	push	ar3
      00090C C0 02            [24] 3055 	push	ar2
      00090E C0 01            [24] 3056 	push	ar1
      000910 C0 00            [24] 3057 	push	ar0
      000912 12r07r21         [24] 3058 	lcall	_drawPixel
      000915 D0 00            [24] 3059 	pop	ar0
      000917 D0 01            [24] 3060 	pop	ar1
      000919 D0 02            [24] 3061 	pop	ar2
      00091B D0 03            [24] 3062 	pop	ar3
      00091D D0 04            [24] 3063 	pop	ar4
      00091F D0 05            [24] 3064 	pop	ar5
                                   3065 ;	.\ecen4350_lcd_v4.c:506: drawPixel(x0 - x, y0 - y, color);
      000921 8C*20            [24] 3066 	mov	_drawPixel_PARM_2,r4
      000923 8D*21            [24] 3067 	mov	(_drawPixel_PARM_2 + 1),r5
      000925 85*28*22         [24] 3068 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000928 85*29*23         [24] 3069 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00092B 8A 82            [24] 3070 	mov	dpl,r2
      00092D 8B 83            [24] 3071 	mov	dph,r3
      00092F C0 03            [24] 3072 	push	ar3
      000931 C0 02            [24] 3073 	push	ar2
      000933 C0 01            [24] 3074 	push	ar1
      000935 C0 00            [24] 3075 	push	ar0
      000937 12r07r21         [24] 3076 	lcall	_drawPixel
      00093A D0 00            [24] 3077 	pop	ar0
      00093C D0 01            [24] 3078 	pop	ar1
      00093E D0 02            [24] 3079 	pop	ar2
      000940 D0 03            [24] 3080 	pop	ar3
                                   3081 ;	.\ecen4350_lcd_v4.c:507: drawPixel(x0 + y, y0 + x, color);
      000942 E8               [12] 3082 	mov	a,r0
      000943 25*2A            [12] 3083 	add	a,_drawCircle_x0_65536_393
      000945 FE               [12] 3084 	mov	r6,a
      000946 E9               [12] 3085 	mov	a,r1
      000947 35*2B            [12] 3086 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000949 FF               [12] 3087 	mov	r7,a
      00094A E5*30            [12] 3088 	mov	a,_drawCircle_x_65536_394
      00094C 25*24            [12] 3089 	add	a,_drawCircle_PARM_2
      00094E FC               [12] 3090 	mov	r4,a
      00094F E5*31            [12] 3091 	mov	a,(_drawCircle_x_65536_394 + 1)
      000951 35*25            [12] 3092 	addc	a,(_drawCircle_PARM_2 + 1)
      000953 FD               [12] 3093 	mov	r5,a
      000954 8C*20            [24] 3094 	mov	_drawPixel_PARM_2,r4
      000956 8D*21            [24] 3095 	mov	(_drawPixel_PARM_2 + 1),r5
      000958 85*28*22         [24] 3096 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00095B 85*29*23         [24] 3097 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00095E 8E 82            [24] 3098 	mov	dpl,r6
      000960 8F 83            [24] 3099 	mov	dph,r7
      000962 C0 07            [24] 3100 	push	ar7
      000964 C0 06            [24] 3101 	push	ar6
      000966 C0 05            [24] 3102 	push	ar5
      000968 C0 04            [24] 3103 	push	ar4
      00096A C0 03            [24] 3104 	push	ar3
      00096C C0 02            [24] 3105 	push	ar2
      00096E C0 01            [24] 3106 	push	ar1
      000970 C0 00            [24] 3107 	push	ar0
      000972 12r07r21         [24] 3108 	lcall	_drawPixel
      000975 D0 00            [24] 3109 	pop	ar0
      000977 D0 01            [24] 3110 	pop	ar1
      000979 D0 02            [24] 3111 	pop	ar2
      00097B D0 03            [24] 3112 	pop	ar3
      00097D D0 04            [24] 3113 	pop	ar4
      00097F D0 05            [24] 3114 	pop	ar5
                                   3115 ;	.\ecen4350_lcd_v4.c:508: drawPixel(x0 - y, y0 + x, color);
      000981 E5*2A            [12] 3116 	mov	a,_drawCircle_x0_65536_393
      000983 C3               [12] 3117 	clr	c
      000984 98               [12] 3118 	subb	a,r0
      000985 FA               [12] 3119 	mov	r2,a
      000986 E5*2B            [12] 3120 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000988 99               [12] 3121 	subb	a,r1
      000989 FB               [12] 3122 	mov	r3,a
      00098A 8C*20            [24] 3123 	mov	_drawPixel_PARM_2,r4
      00098C 8D*21            [24] 3124 	mov	(_drawPixel_PARM_2 + 1),r5
      00098E 85*28*22         [24] 3125 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000991 85*29*23         [24] 3126 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000994 8A 82            [24] 3127 	mov	dpl,r2
      000996 8B 83            [24] 3128 	mov	dph,r3
      000998 C0 03            [24] 3129 	push	ar3
      00099A C0 02            [24] 3130 	push	ar2
      00099C C0 01            [24] 3131 	push	ar1
      00099E C0 00            [24] 3132 	push	ar0
      0009A0 12r07r21         [24] 3133 	lcall	_drawPixel
      0009A3 D0 00            [24] 3134 	pop	ar0
      0009A5 D0 01            [24] 3135 	pop	ar1
      0009A7 D0 02            [24] 3136 	pop	ar2
      0009A9 D0 03            [24] 3137 	pop	ar3
      0009AB D0 06            [24] 3138 	pop	ar6
      0009AD D0 07            [24] 3139 	pop	ar7
                                   3140 ;	.\ecen4350_lcd_v4.c:509: drawPixel(x0 + y, y0 - x, color);
      0009AF E5*24            [12] 3141 	mov	a,_drawCircle_PARM_2
      0009B1 C3               [12] 3142 	clr	c
      0009B2 95*30            [12] 3143 	subb	a,_drawCircle_x_65536_394
      0009B4 FC               [12] 3144 	mov	r4,a
      0009B5 E5*25            [12] 3145 	mov	a,(_drawCircle_PARM_2 + 1)
      0009B7 95*31            [12] 3146 	subb	a,(_drawCircle_x_65536_394 + 1)
      0009B9 FD               [12] 3147 	mov	r5,a
      0009BA 8C*20            [24] 3148 	mov	_drawPixel_PARM_2,r4
      0009BC 8D*21            [24] 3149 	mov	(_drawPixel_PARM_2 + 1),r5
      0009BE 85*28*22         [24] 3150 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009C1 85*29*23         [24] 3151 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009C4 8E 82            [24] 3152 	mov	dpl,r6
      0009C6 8F 83            [24] 3153 	mov	dph,r7
      0009C8 C0 05            [24] 3154 	push	ar5
      0009CA C0 04            [24] 3155 	push	ar4
      0009CC C0 03            [24] 3156 	push	ar3
      0009CE C0 02            [24] 3157 	push	ar2
      0009D0 C0 01            [24] 3158 	push	ar1
      0009D2 C0 00            [24] 3159 	push	ar0
      0009D4 12r07r21         [24] 3160 	lcall	_drawPixel
      0009D7 D0 00            [24] 3161 	pop	ar0
      0009D9 D0 01            [24] 3162 	pop	ar1
      0009DB D0 02            [24] 3163 	pop	ar2
      0009DD D0 03            [24] 3164 	pop	ar3
      0009DF D0 04            [24] 3165 	pop	ar4
      0009E1 D0 05            [24] 3166 	pop	ar5
                                   3167 ;	.\ecen4350_lcd_v4.c:510: drawPixel(x0 - y, y0 - x, color);
      0009E3 8C*20            [24] 3168 	mov	_drawPixel_PARM_2,r4
      0009E5 8D*21            [24] 3169 	mov	(_drawPixel_PARM_2 + 1),r5
      0009E7 85*28*22         [24] 3170 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009EA 85*29*23         [24] 3171 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009ED 8A 82            [24] 3172 	mov	dpl,r2
      0009EF 8B 83            [24] 3173 	mov	dph,r3
      0009F1 C0 03            [24] 3174 	push	ar3
      0009F3 C0 02            [24] 3175 	push	ar2
      0009F5 C0 01            [24] 3176 	push	ar1
      0009F7 C0 00            [24] 3177 	push	ar0
      0009F9 12r07r21         [24] 3178 	lcall	_drawPixel
      0009FC D0 00            [24] 3179 	pop	ar0
      0009FE D0 01            [24] 3180 	pop	ar1
      000A00 D0 02            [24] 3181 	pop	ar2
      000A02 D0 03            [24] 3182 	pop	ar3
      000A04 D0 03            [24] 3183 	pop	ar3
      000A06 D0 02            [24] 3184 	pop	ar2
                                   3185 ;	.\ecen4350_lcd_v4.c:512: }
      000A08 02r08r30         [24] 3186 	ljmp	00103$
                                   3187 ;------------------------------------------------------------
                                   3188 ;Allocation info for local variables in function 'testCircles'
                                   3189 ;------------------------------------------------------------
                                   3190 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3191 ;radius                    Allocated to registers r7 
                                   3192 ;x                         Allocated to registers r0 r1 
                                   3193 ;y                         Allocated to registers r2 r3 
                                   3194 ;r2                        Allocated to registers r4 r5 
                                   3195 ;w                         Allocated with name '_testCircles_w_65536_398'
                                   3196 ;h                         Allocated with name '_testCircles_h_65536_398'
                                   3197 ;------------------------------------------------------------
                                   3198 ;	.\ecen4350_lcd_v4.c:514: void testCircles(u8 radius, u16 color)
                                   3199 ;	-----------------------------------------
                                   3200 ;	 function testCircles
                                   3201 ;	-----------------------------------------
      000A0B                       3202 _testCircles:
                                   3203 ;	.\ecen4350_lcd_v4.c:517: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000A0B AE 82            [24] 3204 	mov	r6,dpl
      000A0D 7F 00            [12] 3205 	mov	r7,#0x00
      000A0F EE               [12] 3206 	mov	a,r6
      000A10 2E               [12] 3207 	add	a,r6
      000A11 FC               [12] 3208 	mov	r4,a
      000A12 EF               [12] 3209 	mov	a,r7
      000A13 33               [12] 3210 	rlc	a
      000A14 FD               [12] 3211 	mov	r5,a
      000A15 8E 02            [24] 3212 	mov	ar2,r6
      000A17 8F 03            [24] 3213 	mov	ar3,r7
      000A19 EA               [12] 3214 	mov	a,r2
      000A1A 25*12            [12] 3215 	add	a,__width
      000A1C F5*34            [12] 3216 	mov	_testCircles_w_65536_398,a
      000A1E EB               [12] 3217 	mov	a,r3
      000A1F 35*13            [12] 3218 	addc	a,(__width + 1)
      000A21 F5*35            [12] 3219 	mov	(_testCircles_w_65536_398 + 1),a
      000A23 EA               [12] 3220 	mov	a,r2
      000A24 25*14            [12] 3221 	add	a,__height
      000A26 F5*36            [12] 3222 	mov	_testCircles_h_65536_398,a
      000A28 EB               [12] 3223 	mov	a,r3
      000A29 35*15            [12] 3224 	addc	a,(__height + 1)
      000A2B F5*37            [12] 3225 	mov	(_testCircles_h_65536_398 + 1),a
                                   3226 ;	.\ecen4350_lcd_v4.c:519: for (x = 0; x < w; x += r2)
      000A2D 78 00            [12] 3227 	mov	r0,#0x00
      000A2F 79 00            [12] 3228 	mov	r1,#0x00
      000A31                       3229 00107$:
      000A31 C3               [12] 3230 	clr	c
      000A32 E8               [12] 3231 	mov	a,r0
      000A33 95*34            [12] 3232 	subb	a,_testCircles_w_65536_398
      000A35 E9               [12] 3233 	mov	a,r1
      000A36 64 80            [12] 3234 	xrl	a,#0x80
      000A38 85*35 F0         [24] 3235 	mov	b,(_testCircles_w_65536_398 + 1)
      000A3B 63 F0 80         [24] 3236 	xrl	b,#0x80
      000A3E 95 F0            [12] 3237 	subb	a,b
      000A40 50 5A            [24] 3238 	jnc	00109$
                                   3239 ;	.\ecen4350_lcd_v4.c:521: for (y = 0; y < h; y += r2)
      000A42 7A 00            [12] 3240 	mov	r2,#0x00
      000A44 7B 00            [12] 3241 	mov	r3,#0x00
      000A46                       3242 00104$:
      000A46 C3               [12] 3243 	clr	c
      000A47 EA               [12] 3244 	mov	a,r2
      000A48 95*36            [12] 3245 	subb	a,_testCircles_h_65536_398
      000A4A EB               [12] 3246 	mov	a,r3
      000A4B 64 80            [12] 3247 	xrl	a,#0x80
      000A4D 85*37 F0         [24] 3248 	mov	b,(_testCircles_h_65536_398 + 1)
      000A50 63 F0 80         [24] 3249 	xrl	b,#0x80
      000A53 95 F0            [12] 3250 	subb	a,b
      000A55 50 3D            [24] 3251 	jnc	00108$
                                   3252 ;	.\ecen4350_lcd_v4.c:523: drawCircle(x, y, radius, color);
      000A57 8A*24            [24] 3253 	mov	_drawCircle_PARM_2,r2
      000A59 8B*25            [24] 3254 	mov	(_drawCircle_PARM_2 + 1),r3
      000A5B 8E*26            [24] 3255 	mov	_drawCircle_PARM_3,r6
      000A5D 8F*27            [24] 3256 	mov	(_drawCircle_PARM_3 + 1),r7
      000A5F 85*32*28         [24] 3257 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000A62 85*33*29         [24] 3258 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000A65 88 82            [24] 3259 	mov	dpl,r0
      000A67 89 83            [24] 3260 	mov	dph,r1
      000A69 C0 07            [24] 3261 	push	ar7
      000A6B C0 06            [24] 3262 	push	ar6
      000A6D C0 05            [24] 3263 	push	ar5
      000A6F C0 04            [24] 3264 	push	ar4
      000A71 C0 03            [24] 3265 	push	ar3
      000A73 C0 02            [24] 3266 	push	ar2
      000A75 C0 01            [24] 3267 	push	ar1
      000A77 C0 00            [24] 3268 	push	ar0
      000A79 12r07r72         [24] 3269 	lcall	_drawCircle
      000A7C D0 00            [24] 3270 	pop	ar0
      000A7E D0 01            [24] 3271 	pop	ar1
      000A80 D0 02            [24] 3272 	pop	ar2
      000A82 D0 03            [24] 3273 	pop	ar3
      000A84 D0 04            [24] 3274 	pop	ar4
      000A86 D0 05            [24] 3275 	pop	ar5
      000A88 D0 06            [24] 3276 	pop	ar6
      000A8A D0 07            [24] 3277 	pop	ar7
                                   3278 ;	.\ecen4350_lcd_v4.c:521: for (y = 0; y < h; y += r2)
      000A8C EC               [12] 3279 	mov	a,r4
      000A8D 2A               [12] 3280 	add	a,r2
      000A8E FA               [12] 3281 	mov	r2,a
      000A8F ED               [12] 3282 	mov	a,r5
      000A90 3B               [12] 3283 	addc	a,r3
      000A91 FB               [12] 3284 	mov	r3,a
      000A92 80 B2            [24] 3285 	sjmp	00104$
      000A94                       3286 00108$:
                                   3287 ;	.\ecen4350_lcd_v4.c:519: for (x = 0; x < w; x += r2)
      000A94 EC               [12] 3288 	mov	a,r4
      000A95 28               [12] 3289 	add	a,r0
      000A96 F8               [12] 3290 	mov	r0,a
      000A97 ED               [12] 3291 	mov	a,r5
      000A98 39               [12] 3292 	addc	a,r1
      000A99 F9               [12] 3293 	mov	r1,a
      000A9A 80 95            [24] 3294 	sjmp	00107$
      000A9C                       3295 00109$:
                                   3296 ;	.\ecen4350_lcd_v4.c:526: }
      000A9C 22               [24] 3297 	ret
                                   3298 ;------------------------------------------------------------
                                   3299 ;Allocation info for local variables in function 'fillRect'
                                   3300 ;------------------------------------------------------------
                                   3301 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3302 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3303 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3304 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3305 ;x                         Allocated to registers 
                                   3306 ;------------------------------------------------------------
                                   3307 ;	.\ecen4350_lcd_v4.c:527: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3308 ;	-----------------------------------------
                                   3309 ;	 function fillRect
                                   3310 ;	-----------------------------------------
      000A9D                       3311 _fillRect:
      000A9D AE 82            [24] 3312 	mov	r6,dpl
      000A9F AF 83            [24] 3313 	mov	r7,dph
                                   3314 ;	.\ecen4350_lcd_v4.c:529: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000AA1 C3               [12] 3315 	clr	c
      000AA2 EE               [12] 3316 	mov	a,r6
      000AA3 94 F0            [12] 3317 	subb	a,#0xf0
      000AA5 EF               [12] 3318 	mov	a,r7
      000AA6 94 00            [12] 3319 	subb	a,#0x00
      000AA8 50 0B            [24] 3320 	jnc	00101$
      000AAA C3               [12] 3321 	clr	c
      000AAB E5*38            [12] 3322 	mov	a,_fillRect_PARM_2
      000AAD 94 40            [12] 3323 	subb	a,#0x40
      000AAF E5*39            [12] 3324 	mov	a,(_fillRect_PARM_2 + 1)
      000AB1 94 01            [12] 3325 	subb	a,#0x01
      000AB3 40 01            [24] 3326 	jc	00102$
      000AB5                       3327 00101$:
                                   3328 ;	.\ecen4350_lcd_v4.c:531: return;
      000AB5 22               [24] 3329 	ret
      000AB6                       3330 00102$:
                                   3331 ;	.\ecen4350_lcd_v4.c:534: if ((x + w - 1) >= TFTWIDTH)
      000AB6 E5*3A            [12] 3332 	mov	a,_fillRect_PARM_3
      000AB8 2E               [12] 3333 	add	a,r6
      000AB9 FC               [12] 3334 	mov	r4,a
      000ABA E5*3B            [12] 3335 	mov	a,(_fillRect_PARM_3 + 1)
      000ABC 3F               [12] 3336 	addc	a,r7
      000ABD FD               [12] 3337 	mov	r5,a
      000ABE 1C               [12] 3338 	dec	r4
      000ABF BC FF 01         [24] 3339 	cjne	r4,#0xff,00161$
      000AC2 1D               [12] 3340 	dec	r5
      000AC3                       3341 00161$:
      000AC3 C3               [12] 3342 	clr	c
      000AC4 EC               [12] 3343 	mov	a,r4
      000AC5 94 F0            [12] 3344 	subb	a,#0xf0
      000AC7 ED               [12] 3345 	mov	a,r5
      000AC8 94 00            [12] 3346 	subb	a,#0x00
      000ACA 40 0A            [24] 3347 	jc	00105$
                                   3348 ;	.\ecen4350_lcd_v4.c:536: w = TFTWIDTH - x;
      000ACC 74 F0            [12] 3349 	mov	a,#0xf0
      000ACE C3               [12] 3350 	clr	c
      000ACF 9E               [12] 3351 	subb	a,r6
      000AD0 F5*3A            [12] 3352 	mov	_fillRect_PARM_3,a
      000AD2 E4               [12] 3353 	clr	a
      000AD3 9F               [12] 3354 	subb	a,r7
      000AD4 F5*3B            [12] 3355 	mov	(_fillRect_PARM_3 + 1),a
      000AD6                       3356 00105$:
                                   3357 ;	.\ecen4350_lcd_v4.c:539: if ((y + h - 1) >= TFTHEIGHT)
      000AD6 E5*3C            [12] 3358 	mov	a,_fillRect_PARM_4
      000AD8 25*38            [12] 3359 	add	a,_fillRect_PARM_2
      000ADA FC               [12] 3360 	mov	r4,a
      000ADB E5*3D            [12] 3361 	mov	a,(_fillRect_PARM_4 + 1)
      000ADD 35*39            [12] 3362 	addc	a,(_fillRect_PARM_2 + 1)
      000ADF FD               [12] 3363 	mov	r5,a
      000AE0 1C               [12] 3364 	dec	r4
      000AE1 BC FF 01         [24] 3365 	cjne	r4,#0xff,00163$
      000AE4 1D               [12] 3366 	dec	r5
      000AE5                       3367 00163$:
      000AE5 C3               [12] 3368 	clr	c
      000AE6 EC               [12] 3369 	mov	a,r4
      000AE7 94 40            [12] 3370 	subb	a,#0x40
      000AE9 ED               [12] 3371 	mov	a,r5
      000AEA 94 01            [12] 3372 	subb	a,#0x01
      000AEC 40 0D            [24] 3373 	jc	00107$
                                   3374 ;	.\ecen4350_lcd_v4.c:541: h = TFTHEIGHT - y;
      000AEE 74 40            [12] 3375 	mov	a,#0x40
      000AF0 C3               [12] 3376 	clr	c
      000AF1 95*38            [12] 3377 	subb	a,_fillRect_PARM_2
      000AF3 F5*3C            [12] 3378 	mov	_fillRect_PARM_4,a
      000AF5 74 01            [12] 3379 	mov	a,#0x01
      000AF7 95*39            [12] 3380 	subb	a,(_fillRect_PARM_2 + 1)
      000AF9 F5*3D            [12] 3381 	mov	(_fillRect_PARM_4 + 1),a
      000AFB                       3382 00107$:
                                   3383 ;	.\ecen4350_lcd_v4.c:544: setAddress(x, y, x + w - 1, y + h - 1);
      000AFB E5*3A            [12] 3384 	mov	a,_fillRect_PARM_3
      000AFD 2E               [12] 3385 	add	a,r6
      000AFE FC               [12] 3386 	mov	r4,a
      000AFF E5*3B            [12] 3387 	mov	a,(_fillRect_PARM_3 + 1)
      000B01 3F               [12] 3388 	addc	a,r7
      000B02 FD               [12] 3389 	mov	r5,a
      000B03 EC               [12] 3390 	mov	a,r4
      000B04 24 FF            [12] 3391 	add	a,#0xff
      000B06 F5*02            [12] 3392 	mov	_setAddress_PARM_3,a
      000B08 ED               [12] 3393 	mov	a,r5
      000B09 34 FF            [12] 3394 	addc	a,#0xff
      000B0B F5*03            [12] 3395 	mov	(_setAddress_PARM_3 + 1),a
      000B0D E5*3C            [12] 3396 	mov	a,_fillRect_PARM_4
      000B0F 25*38            [12] 3397 	add	a,_fillRect_PARM_2
      000B11 FC               [12] 3398 	mov	r4,a
      000B12 E5*3D            [12] 3399 	mov	a,(_fillRect_PARM_4 + 1)
      000B14 35*39            [12] 3400 	addc	a,(_fillRect_PARM_2 + 1)
      000B16 FD               [12] 3401 	mov	r5,a
      000B17 EC               [12] 3402 	mov	a,r4
      000B18 24 FF            [12] 3403 	add	a,#0xff
      000B1A F5*04            [12] 3404 	mov	_setAddress_PARM_4,a
      000B1C ED               [12] 3405 	mov	a,r5
      000B1D 34 FF            [12] 3406 	addc	a,#0xff
      000B1F F5*05            [12] 3407 	mov	(_setAddress_PARM_4 + 1),a
      000B21 85*38*00         [24] 3408 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000B24 85*39*01         [24] 3409 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000B27 8E 82            [24] 3410 	mov	dpl,r6
      000B29 8F 83            [24] 3411 	mov	dph,r7
      000B2B 12r05r47         [24] 3412 	lcall	_setAddress
                                   3413 ;	.\ecen4350_lcd_v4.c:547: write8Reg(0x2C);
                                   3414 ;	assignBit
      000B2E C2 B4            [12] 3415 	clr	_P3_4
                                   3416 ;	assignBit
      000B30 D2 B5            [12] 3417 	setb	_P3_5
      000B32 85*02 82         [24] 3418 	mov	dpl,_lcd_address
      000B35 85*03 83         [24] 3419 	mov	dph,(_lcd_address + 1)
      000B38 74 2C            [12] 3420 	mov	a,#0x2c
      000B3A F0               [24] 3421 	movx	@dptr,a
                                   3422 ;	assignBit
      000B3B C2 B5            [12] 3423 	clr	_P3_5
                                   3424 ;	.\ecen4350_lcd_v4.c:549: CD = 1;
                                   3425 ;	assignBit
      000B3D D2 B4            [12] 3426 	setb	_P3_4
                                   3427 ;	.\ecen4350_lcd_v4.c:550: for (y = h; y > 0; y--)
      000B3F AF*3F            [24] 3428 	mov	r7,(_fillRect_PARM_5 + 1)
      000B41 AD*3C            [24] 3429 	mov	r5,_fillRect_PARM_4
      000B43 AE*3D            [24] 3430 	mov	r6,(_fillRect_PARM_4 + 1)
      000B45                       3431 00114$:
      000B45 ED               [12] 3432 	mov	a,r5
      000B46 4E               [12] 3433 	orl	a,r6
      000B47 60 30            [24] 3434 	jz	00116$
                                   3435 ;	.\ecen4350_lcd_v4.c:552: for (x = w; x > 0; x--)
      000B49 AB*3A            [24] 3436 	mov	r3,_fillRect_PARM_3
      000B4B AC*3B            [24] 3437 	mov	r4,(_fillRect_PARM_3 + 1)
      000B4D                       3438 00111$:
      000B4D EB               [12] 3439 	mov	a,r3
      000B4E 4C               [12] 3440 	orl	a,r4
      000B4F 60 21            [24] 3441 	jz	00115$
                                   3442 ;	.\ecen4350_lcd_v4.c:555: write8(color >> 8);
                                   3443 ;	assignBit
      000B51 D2 B5            [12] 3444 	setb	_P3_5
      000B53 85*02 82         [24] 3445 	mov	dpl,_lcd_address
      000B56 85*03 83         [24] 3446 	mov	dph,(_lcd_address + 1)
      000B59 EF               [12] 3447 	mov	a,r7
      000B5A F0               [24] 3448 	movx	@dptr,a
                                   3449 ;	assignBit
      000B5B C2 B5            [12] 3450 	clr	_P3_5
                                   3451 ;	.\ecen4350_lcd_v4.c:556: write8(color);
                                   3452 ;	assignBit
      000B5D D2 B5            [12] 3453 	setb	_P3_5
      000B5F 85*02 82         [24] 3454 	mov	dpl,_lcd_address
      000B62 85*03 83         [24] 3455 	mov	dph,(_lcd_address + 1)
      000B65 E5*3E            [12] 3456 	mov	a,_fillRect_PARM_5
      000B67 FA               [12] 3457 	mov	r2,a
      000B68 F0               [24] 3458 	movx	@dptr,a
                                   3459 ;	assignBit
      000B69 C2 B5            [12] 3460 	clr	_P3_5
                                   3461 ;	.\ecen4350_lcd_v4.c:552: for (x = w; x > 0; x--)
      000B6B 1B               [12] 3462 	dec	r3
      000B6C BB FF 01         [24] 3463 	cjne	r3,#0xff,00167$
      000B6F 1C               [12] 3464 	dec	r4
      000B70                       3465 00167$:
      000B70 80 DB            [24] 3466 	sjmp	00111$
      000B72                       3467 00115$:
                                   3468 ;	.\ecen4350_lcd_v4.c:550: for (y = h; y > 0; y--)
      000B72 1D               [12] 3469 	dec	r5
      000B73 BD FF 01         [24] 3470 	cjne	r5,#0xff,00168$
      000B76 1E               [12] 3471 	dec	r6
      000B77                       3472 00168$:
      000B77 80 CC            [24] 3473 	sjmp	00114$
      000B79                       3474 00116$:
                                   3475 ;	.\ecen4350_lcd_v4.c:560: }
      000B79 22               [24] 3476 	ret
                                   3477 ;------------------------------------------------------------
                                   3478 ;Allocation info for local variables in function 'fillTop'
                                   3479 ;------------------------------------------------------------
                                   3480 ;Color                     Allocated to registers r6 r7 
                                   3481 ;len                       Allocated to registers 
                                   3482 ;blocks                    Allocated to registers r4 r7 
                                   3483 ;i                         Allocated to registers r3 
                                   3484 ;hi                        Allocated to registers r5 
                                   3485 ;lo                        Allocated to registers r6 
                                   3486 ;------------------------------------------------------------
                                   3487 ;	.\ecen4350_lcd_v4.c:562: void fillTop(unsigned int Color) {
                                   3488 ;	-----------------------------------------
                                   3489 ;	 function fillTop
                                   3490 ;	-----------------------------------------
      000B7A                       3491 _fillTop:
      000B7A AE 82            [24] 3492 	mov	r6,dpl
      000B7C AF 83            [24] 3493 	mov	r7,dph
                                   3494 ;	.\ecen4350_lcd_v4.c:566: unsigned char i, hi = Color >> 8, 
      000B7E 8F 05            [24] 3495 	mov	ar5,r7
                                   3496 ;	.\ecen4350_lcd_v4.c:567: lo = Color;
                                   3497 ;	.\ecen4350_lcd_v4.c:570: setAddress(0, 0, TFTWIDTH - 1, 39);
      000B80 E4               [12] 3498 	clr	a
      000B81 F5*00            [12] 3499 	mov	_setAddress_PARM_2,a
      000B83 F5*01            [12] 3500 	mov	(_setAddress_PARM_2 + 1),a
      000B85 75*02 EF         [24] 3501 	mov	_setAddress_PARM_3,#0xef
                                   3502 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000B88 F5*03            [12] 3503 	mov	(_setAddress_PARM_3 + 1),a
      000B8A 75*04 27         [24] 3504 	mov	_setAddress_PARM_4,#0x27
                                   3505 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000B8D F5*05            [12] 3506 	mov	(_setAddress_PARM_4 + 1),a
      000B8F 90 00 00         [24] 3507 	mov	dptr,#0x0000
      000B92 C0 06            [24] 3508 	push	ar6
      000B94 C0 05            [24] 3509 	push	ar5
      000B96 12r05r47         [24] 3510 	lcall	_setAddress
      000B99 D0 05            [24] 3511 	pop	ar5
      000B9B D0 06            [24] 3512 	pop	ar6
                                   3513 ;	.\ecen4350_lcd_v4.c:572: write8Reg(0x2C);
                                   3514 ;	assignBit
      000B9D C2 B4            [12] 3515 	clr	_P3_4
                                   3516 ;	assignBit
      000B9F D2 B5            [12] 3517 	setb	_P3_5
      000BA1 85*02 82         [24] 3518 	mov	dpl,_lcd_address
      000BA4 85*03 83         [24] 3519 	mov	dph,(_lcd_address + 1)
      000BA7 74 2C            [12] 3520 	mov	a,#0x2c
      000BA9 F0               [24] 3521 	movx	@dptr,a
                                   3522 ;	assignBit
      000BAA C2 B5            [12] 3523 	clr	_P3_5
                                   3524 ;	.\ecen4350_lcd_v4.c:574: CD = 1;
                                   3525 ;	assignBit
      000BAC D2 B4            [12] 3526 	setb	_P3_4
                                   3527 ;	.\ecen4350_lcd_v4.c:575: write8(hi);
                                   3528 ;	assignBit
      000BAE D2 B5            [12] 3529 	setb	_P3_5
      000BB0 85*02 82         [24] 3530 	mov	dpl,_lcd_address
      000BB3 85*03 83         [24] 3531 	mov	dph,(_lcd_address + 1)
      000BB6 ED               [12] 3532 	mov	a,r5
      000BB7 F0               [24] 3533 	movx	@dptr,a
                                   3534 ;	assignBit
      000BB8 C2 B5            [12] 3535 	clr	_P3_5
                                   3536 ;	.\ecen4350_lcd_v4.c:576: write8(lo);
                                   3537 ;	assignBit
      000BBA D2 B5            [12] 3538 	setb	_P3_5
      000BBC 85*02 82         [24] 3539 	mov	dpl,_lcd_address
      000BBF 85*03 83         [24] 3540 	mov	dph,(_lcd_address + 1)
      000BC2 EE               [12] 3541 	mov	a,r6
      000BC3 F0               [24] 3542 	movx	@dptr,a
                                   3543 ;	assignBit
      000BC4 C2 B5            [12] 3544 	clr	_P3_5
                                   3545 ;	.\ecen4350_lcd_v4.c:579: while (blocks--)
      000BC6 7C 96            [12] 3546 	mov	r4,#0x96
      000BC8 7F 00            [12] 3547 	mov	r7,#0x00
      000BCA                       3548 00104$:
      000BCA 8C 02            [24] 3549 	mov	ar2,r4
      000BCC 8F 03            [24] 3550 	mov	ar3,r7
      000BCE 1C               [12] 3551 	dec	r4
      000BCF BC FF 01         [24] 3552 	cjne	r4,#0xff,00140$
      000BD2 1F               [12] 3553 	dec	r7
      000BD3                       3554 00140$:
      000BD3 EA               [12] 3555 	mov	a,r2
      000BD4 4B               [12] 3556 	orl	a,r3
      000BD5 60 66            [24] 3557 	jz	00106$
                                   3558 ;	.\ecen4350_lcd_v4.c:582: do
      000BD7 7B 10            [12] 3559 	mov	r3,#0x10
      000BD9                       3560 00101$:
                                   3561 ;	.\ecen4350_lcd_v4.c:585: write8(hi);
                                   3562 ;	assignBit
      000BD9 D2 B5            [12] 3563 	setb	_P3_5
      000BDB 85*02 82         [24] 3564 	mov	dpl,_lcd_address
      000BDE 85*03 83         [24] 3565 	mov	dph,(_lcd_address + 1)
      000BE1 ED               [12] 3566 	mov	a,r5
      000BE2 F0               [24] 3567 	movx	@dptr,a
                                   3568 ;	assignBit
      000BE3 C2 B5            [12] 3569 	clr	_P3_5
                                   3570 ;	.\ecen4350_lcd_v4.c:586: write8(lo);
                                   3571 ;	assignBit
      000BE5 D2 B5            [12] 3572 	setb	_P3_5
      000BE7 85*02 82         [24] 3573 	mov	dpl,_lcd_address
      000BEA 85*03 83         [24] 3574 	mov	dph,(_lcd_address + 1)
      000BED EE               [12] 3575 	mov	a,r6
      000BEE F0               [24] 3576 	movx	@dptr,a
                                   3577 ;	assignBit
      000BEF C2 B5            [12] 3578 	clr	_P3_5
                                   3579 ;	.\ecen4350_lcd_v4.c:587: write8(hi);
                                   3580 ;	assignBit
      000BF1 D2 B5            [12] 3581 	setb	_P3_5
      000BF3 85*02 82         [24] 3582 	mov	dpl,_lcd_address
      000BF6 85*03 83         [24] 3583 	mov	dph,(_lcd_address + 1)
      000BF9 ED               [12] 3584 	mov	a,r5
      000BFA F0               [24] 3585 	movx	@dptr,a
                                   3586 ;	assignBit
      000BFB C2 B5            [12] 3587 	clr	_P3_5
                                   3588 ;	.\ecen4350_lcd_v4.c:588: write8(lo);
                                   3589 ;	assignBit
      000BFD D2 B5            [12] 3590 	setb	_P3_5
      000BFF 85*02 82         [24] 3591 	mov	dpl,_lcd_address
      000C02 85*03 83         [24] 3592 	mov	dph,(_lcd_address + 1)
      000C05 EE               [12] 3593 	mov	a,r6
      000C06 F0               [24] 3594 	movx	@dptr,a
                                   3595 ;	assignBit
      000C07 C2 B5            [12] 3596 	clr	_P3_5
                                   3597 ;	.\ecen4350_lcd_v4.c:589: write8(hi);
                                   3598 ;	assignBit
      000C09 D2 B5            [12] 3599 	setb	_P3_5
      000C0B 85*02 82         [24] 3600 	mov	dpl,_lcd_address
      000C0E 85*03 83         [24] 3601 	mov	dph,(_lcd_address + 1)
      000C11 ED               [12] 3602 	mov	a,r5
      000C12 F0               [24] 3603 	movx	@dptr,a
                                   3604 ;	assignBit
      000C13 C2 B5            [12] 3605 	clr	_P3_5
                                   3606 ;	.\ecen4350_lcd_v4.c:590: write8(lo);
                                   3607 ;	assignBit
      000C15 D2 B5            [12] 3608 	setb	_P3_5
      000C17 85*02 82         [24] 3609 	mov	dpl,_lcd_address
      000C1A 85*03 83         [24] 3610 	mov	dph,(_lcd_address + 1)
      000C1D EE               [12] 3611 	mov	a,r6
      000C1E F0               [24] 3612 	movx	@dptr,a
                                   3613 ;	assignBit
      000C1F C2 B5            [12] 3614 	clr	_P3_5
                                   3615 ;	.\ecen4350_lcd_v4.c:591: write8(hi);
                                   3616 ;	assignBit
      000C21 D2 B5            [12] 3617 	setb	_P3_5
      000C23 85*02 82         [24] 3618 	mov	dpl,_lcd_address
      000C26 85*03 83         [24] 3619 	mov	dph,(_lcd_address + 1)
      000C29 ED               [12] 3620 	mov	a,r5
      000C2A F0               [24] 3621 	movx	@dptr,a
                                   3622 ;	assignBit
      000C2B C2 B5            [12] 3623 	clr	_P3_5
                                   3624 ;	.\ecen4350_lcd_v4.c:592: write8(lo);
                                   3625 ;	assignBit
      000C2D D2 B5            [12] 3626 	setb	_P3_5
      000C2F 85*02 82         [24] 3627 	mov	dpl,_lcd_address
      000C32 85*03 83         [24] 3628 	mov	dph,(_lcd_address + 1)
      000C35 EE               [12] 3629 	mov	a,r6
      000C36 F0               [24] 3630 	movx	@dptr,a
                                   3631 ;	assignBit
      000C37 C2 B5            [12] 3632 	clr	_P3_5
                                   3633 ;	.\ecen4350_lcd_v4.c:593: } while (--i);
      000C39 DB 9E            [24] 3634 	djnz	r3,00101$
      000C3B 80 8D            [24] 3635 	sjmp	00104$
      000C3D                       3636 00106$:
                                   3637 ;	.\ecen4350_lcd_v4.c:595: for (i = (char)len & 63; i--;)
      000C3D 7F 3F            [12] 3638 	mov	r7,#0x3f
      000C3F                       3639 00109$:
      000C3F 8F 04            [24] 3640 	mov	ar4,r7
      000C41 1F               [12] 3641 	dec	r7
      000C42 EC               [12] 3642 	mov	a,r4
      000C43 60 1A            [24] 3643 	jz	00111$
                                   3644 ;	.\ecen4350_lcd_v4.c:598: write8(hi);
                                   3645 ;	assignBit
      000C45 D2 B5            [12] 3646 	setb	_P3_5
      000C47 85*02 82         [24] 3647 	mov	dpl,_lcd_address
      000C4A 85*03 83         [24] 3648 	mov	dph,(_lcd_address + 1)
      000C4D ED               [12] 3649 	mov	a,r5
      000C4E F0               [24] 3650 	movx	@dptr,a
                                   3651 ;	assignBit
      000C4F C2 B5            [12] 3652 	clr	_P3_5
                                   3653 ;	.\ecen4350_lcd_v4.c:599: write8(lo);
                                   3654 ;	assignBit
      000C51 D2 B5            [12] 3655 	setb	_P3_5
      000C53 85*02 82         [24] 3656 	mov	dpl,_lcd_address
      000C56 85*03 83         [24] 3657 	mov	dph,(_lcd_address + 1)
      000C59 EE               [12] 3658 	mov	a,r6
      000C5A F0               [24] 3659 	movx	@dptr,a
                                   3660 ;	assignBit
      000C5B C2 B5            [12] 3661 	clr	_P3_5
      000C5D 80 E0            [24] 3662 	sjmp	00109$
      000C5F                       3663 00111$:
                                   3664 ;	.\ecen4350_lcd_v4.c:603: }
      000C5F 22               [24] 3665 	ret
                                   3666 ;------------------------------------------------------------
                                   3667 ;Allocation info for local variables in function 'fillScreen'
                                   3668 ;------------------------------------------------------------
                                   3669 ;Color                     Allocated to registers r6 r7 
                                   3670 ;len                       Allocated to registers 
                                   3671 ;blocks                    Allocated to registers r4 r7 
                                   3672 ;i                         Allocated to registers r3 
                                   3673 ;hi                        Allocated to registers r5 
                                   3674 ;lo                        Allocated to registers r6 
                                   3675 ;------------------------------------------------------------
                                   3676 ;	.\ecen4350_lcd_v4.c:605: void fillScreen(unsigned int Color)
                                   3677 ;	-----------------------------------------
                                   3678 ;	 function fillScreen
                                   3679 ;	-----------------------------------------
      000C60                       3680 _fillScreen:
      000C60 AE 82            [24] 3681 	mov	r6,dpl
      000C62 AF 83            [24] 3682 	mov	r7,dph
                                   3683 ;	.\ecen4350_lcd_v4.c:612: unsigned char i, hi = Color >> 8,
      000C64 8F 05            [24] 3684 	mov	ar5,r7
                                   3685 ;	.\ecen4350_lcd_v4.c:613: lo = Color;
                                   3686 ;	.\ecen4350_lcd_v4.c:616: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000C66 E4               [12] 3687 	clr	a
      000C67 F5*00            [12] 3688 	mov	_setAddress_PARM_2,a
      000C69 F5*01            [12] 3689 	mov	(_setAddress_PARM_2 + 1),a
      000C6B 75*02 EF         [24] 3690 	mov	_setAddress_PARM_3,#0xef
                                   3691 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000C6E F5*03            [12] 3692 	mov	(_setAddress_PARM_3 + 1),a
      000C70 75*04 3F         [24] 3693 	mov	_setAddress_PARM_4,#0x3f
      000C73 75*05 01         [24] 3694 	mov	(_setAddress_PARM_4 + 1),#0x01
      000C76 90 00 00         [24] 3695 	mov	dptr,#0x0000
      000C79 C0 06            [24] 3696 	push	ar6
      000C7B C0 05            [24] 3697 	push	ar5
      000C7D 12r05r47         [24] 3698 	lcall	_setAddress
      000C80 D0 05            [24] 3699 	pop	ar5
      000C82 D0 06            [24] 3700 	pop	ar6
                                   3701 ;	.\ecen4350_lcd_v4.c:620: write8Reg(0x2C);
                                   3702 ;	assignBit
      000C84 C2 B4            [12] 3703 	clr	_P3_4
                                   3704 ;	assignBit
      000C86 D2 B5            [12] 3705 	setb	_P3_5
      000C88 85*02 82         [24] 3706 	mov	dpl,_lcd_address
      000C8B 85*03 83         [24] 3707 	mov	dph,(_lcd_address + 1)
      000C8E 74 2C            [12] 3708 	mov	a,#0x2c
      000C90 F0               [24] 3709 	movx	@dptr,a
                                   3710 ;	assignBit
      000C91 C2 B5            [12] 3711 	clr	_P3_5
                                   3712 ;	.\ecen4350_lcd_v4.c:622: CD = 1;
                                   3713 ;	assignBit
      000C93 D2 B4            [12] 3714 	setb	_P3_4
                                   3715 ;	.\ecen4350_lcd_v4.c:623: write8(hi);
                                   3716 ;	assignBit
      000C95 D2 B5            [12] 3717 	setb	_P3_5
      000C97 85*02 82         [24] 3718 	mov	dpl,_lcd_address
      000C9A 85*03 83         [24] 3719 	mov	dph,(_lcd_address + 1)
      000C9D ED               [12] 3720 	mov	a,r5
      000C9E F0               [24] 3721 	movx	@dptr,a
                                   3722 ;	assignBit
      000C9F C2 B5            [12] 3723 	clr	_P3_5
                                   3724 ;	.\ecen4350_lcd_v4.c:624: write8(lo);
                                   3725 ;	assignBit
      000CA1 D2 B5            [12] 3726 	setb	_P3_5
      000CA3 85*02 82         [24] 3727 	mov	dpl,_lcd_address
      000CA6 85*03 83         [24] 3728 	mov	dph,(_lcd_address + 1)
      000CA9 EE               [12] 3729 	mov	a,r6
      000CAA F0               [24] 3730 	movx	@dptr,a
                                   3731 ;	assignBit
      000CAB C2 B5            [12] 3732 	clr	_P3_5
                                   3733 ;	.\ecen4350_lcd_v4.c:627: while (blocks--)
      000CAD 7C B0            [12] 3734 	mov	r4,#0xb0
      000CAF 7F 04            [12] 3735 	mov	r7,#0x04
      000CB1                       3736 00104$:
      000CB1 8C 02            [24] 3737 	mov	ar2,r4
      000CB3 8F 03            [24] 3738 	mov	ar3,r7
      000CB5 1C               [12] 3739 	dec	r4
      000CB6 BC FF 01         [24] 3740 	cjne	r4,#0xff,00140$
      000CB9 1F               [12] 3741 	dec	r7
      000CBA                       3742 00140$:
      000CBA EA               [12] 3743 	mov	a,r2
      000CBB 4B               [12] 3744 	orl	a,r3
      000CBC 60 66            [24] 3745 	jz	00106$
                                   3746 ;	.\ecen4350_lcd_v4.c:630: do
      000CBE 7B 10            [12] 3747 	mov	r3,#0x10
      000CC0                       3748 00101$:
                                   3749 ;	.\ecen4350_lcd_v4.c:633: write8(hi);
                                   3750 ;	assignBit
      000CC0 D2 B5            [12] 3751 	setb	_P3_5
      000CC2 85*02 82         [24] 3752 	mov	dpl,_lcd_address
      000CC5 85*03 83         [24] 3753 	mov	dph,(_lcd_address + 1)
      000CC8 ED               [12] 3754 	mov	a,r5
      000CC9 F0               [24] 3755 	movx	@dptr,a
                                   3756 ;	assignBit
      000CCA C2 B5            [12] 3757 	clr	_P3_5
                                   3758 ;	.\ecen4350_lcd_v4.c:634: write8(lo);
                                   3759 ;	assignBit
      000CCC D2 B5            [12] 3760 	setb	_P3_5
      000CCE 85*02 82         [24] 3761 	mov	dpl,_lcd_address
      000CD1 85*03 83         [24] 3762 	mov	dph,(_lcd_address + 1)
      000CD4 EE               [12] 3763 	mov	a,r6
      000CD5 F0               [24] 3764 	movx	@dptr,a
                                   3765 ;	assignBit
      000CD6 C2 B5            [12] 3766 	clr	_P3_5
                                   3767 ;	.\ecen4350_lcd_v4.c:635: write8(hi);
                                   3768 ;	assignBit
      000CD8 D2 B5            [12] 3769 	setb	_P3_5
      000CDA 85*02 82         [24] 3770 	mov	dpl,_lcd_address
      000CDD 85*03 83         [24] 3771 	mov	dph,(_lcd_address + 1)
      000CE0 ED               [12] 3772 	mov	a,r5
      000CE1 F0               [24] 3773 	movx	@dptr,a
                                   3774 ;	assignBit
      000CE2 C2 B5            [12] 3775 	clr	_P3_5
                                   3776 ;	.\ecen4350_lcd_v4.c:636: write8(lo);
                                   3777 ;	assignBit
      000CE4 D2 B5            [12] 3778 	setb	_P3_5
      000CE6 85*02 82         [24] 3779 	mov	dpl,_lcd_address
      000CE9 85*03 83         [24] 3780 	mov	dph,(_lcd_address + 1)
      000CEC EE               [12] 3781 	mov	a,r6
      000CED F0               [24] 3782 	movx	@dptr,a
                                   3783 ;	assignBit
      000CEE C2 B5            [12] 3784 	clr	_P3_5
                                   3785 ;	.\ecen4350_lcd_v4.c:637: write8(hi);
                                   3786 ;	assignBit
      000CF0 D2 B5            [12] 3787 	setb	_P3_5
      000CF2 85*02 82         [24] 3788 	mov	dpl,_lcd_address
      000CF5 85*03 83         [24] 3789 	mov	dph,(_lcd_address + 1)
      000CF8 ED               [12] 3790 	mov	a,r5
      000CF9 F0               [24] 3791 	movx	@dptr,a
                                   3792 ;	assignBit
      000CFA C2 B5            [12] 3793 	clr	_P3_5
                                   3794 ;	.\ecen4350_lcd_v4.c:638: write8(lo);
                                   3795 ;	assignBit
      000CFC D2 B5            [12] 3796 	setb	_P3_5
      000CFE 85*02 82         [24] 3797 	mov	dpl,_lcd_address
      000D01 85*03 83         [24] 3798 	mov	dph,(_lcd_address + 1)
      000D04 EE               [12] 3799 	mov	a,r6
      000D05 F0               [24] 3800 	movx	@dptr,a
                                   3801 ;	assignBit
      000D06 C2 B5            [12] 3802 	clr	_P3_5
                                   3803 ;	.\ecen4350_lcd_v4.c:639: write8(hi);
                                   3804 ;	assignBit
      000D08 D2 B5            [12] 3805 	setb	_P3_5
      000D0A 85*02 82         [24] 3806 	mov	dpl,_lcd_address
      000D0D 85*03 83         [24] 3807 	mov	dph,(_lcd_address + 1)
      000D10 ED               [12] 3808 	mov	a,r5
      000D11 F0               [24] 3809 	movx	@dptr,a
                                   3810 ;	assignBit
      000D12 C2 B5            [12] 3811 	clr	_P3_5
                                   3812 ;	.\ecen4350_lcd_v4.c:640: write8(lo);
                                   3813 ;	assignBit
      000D14 D2 B5            [12] 3814 	setb	_P3_5
      000D16 85*02 82         [24] 3815 	mov	dpl,_lcd_address
      000D19 85*03 83         [24] 3816 	mov	dph,(_lcd_address + 1)
      000D1C EE               [12] 3817 	mov	a,r6
      000D1D F0               [24] 3818 	movx	@dptr,a
                                   3819 ;	assignBit
      000D1E C2 B5            [12] 3820 	clr	_P3_5
                                   3821 ;	.\ecen4350_lcd_v4.c:641: } while (--i);
      000D20 DB 9E            [24] 3822 	djnz	r3,00101$
      000D22 80 8D            [24] 3823 	sjmp	00104$
      000D24                       3824 00106$:
                                   3825 ;	.\ecen4350_lcd_v4.c:643: for (i = (char)len & 63; i--;)
      000D24 7F 3F            [12] 3826 	mov	r7,#0x3f
      000D26                       3827 00109$:
      000D26 8F 04            [24] 3828 	mov	ar4,r7
      000D28 1F               [12] 3829 	dec	r7
      000D29 EC               [12] 3830 	mov	a,r4
      000D2A 60 1A            [24] 3831 	jz	00111$
                                   3832 ;	.\ecen4350_lcd_v4.c:646: write8(hi);
                                   3833 ;	assignBit
      000D2C D2 B5            [12] 3834 	setb	_P3_5
      000D2E 85*02 82         [24] 3835 	mov	dpl,_lcd_address
      000D31 85*03 83         [24] 3836 	mov	dph,(_lcd_address + 1)
      000D34 ED               [12] 3837 	mov	a,r5
      000D35 F0               [24] 3838 	movx	@dptr,a
                                   3839 ;	assignBit
      000D36 C2 B5            [12] 3840 	clr	_P3_5
                                   3841 ;	.\ecen4350_lcd_v4.c:647: write8(lo);
                                   3842 ;	assignBit
      000D38 D2 B5            [12] 3843 	setb	_P3_5
      000D3A 85*02 82         [24] 3844 	mov	dpl,_lcd_address
      000D3D 85*03 83         [24] 3845 	mov	dph,(_lcd_address + 1)
      000D40 EE               [12] 3846 	mov	a,r6
      000D41 F0               [24] 3847 	movx	@dptr,a
                                   3848 ;	assignBit
      000D42 C2 B5            [12] 3849 	clr	_P3_5
      000D44 80 E0            [24] 3850 	sjmp	00109$
      000D46                       3851 00111$:
                                   3852 ;	.\ecen4350_lcd_v4.c:651: }
      000D46 22               [24] 3853 	ret
                                   3854 ;------------------------------------------------------------
                                   3855 ;Allocation info for local variables in function 'clearLCD'
                                   3856 ;------------------------------------------------------------
                                   3857 ;	.\ecen4350_lcd_v4.c:653: void clearLCD (void)
                                   3858 ;	-----------------------------------------
                                   3859 ;	 function clearLCD
                                   3860 ;	-----------------------------------------
      000D47                       3861 _clearLCD:
                                   3862 ;	.\ecen4350_lcd_v4.c:655: fillScreen(colorBackground);
      000D47 90 00 00         [24] 3863 	mov	dptr,#0x0000
                                   3864 ;	.\ecen4350_lcd_v4.c:656: }
      000D4A 02r0Cr60         [24] 3865 	ljmp	_fillScreen
                                   3866 ;------------------------------------------------------------
                                   3867 ;Allocation info for local variables in function 'drawChar'
                                   3868 ;------------------------------------------------------------
                                   3869 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3870 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3871 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3872 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3873 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3874 ;x                         Allocated with name '_drawChar_x_65536_458'
                                   3875 ;i                         Allocated with name '_drawChar_i_131072_461'
                                   3876 ;line                      Allocated with name '_drawChar_line_196608_462'
                                   3877 ;j                         Allocated to registers r0 
                                   3878 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3879 ;------------------------------------------------------------
                                   3880 ;	.\ecen4350_lcd_v4.c:657: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3881 ;	-----------------------------------------
                                   3882 ;	 function drawChar
                                   3883 ;	-----------------------------------------
      000D4D                       3884 _drawChar:
      000D4D 85 82*48         [24] 3885 	mov	_drawChar_x_65536_458,dpl
      000D50 85 83*49         [24] 3886 	mov	(_drawChar_x_65536_458 + 1),dph
                                   3887 ;	.\ecen4350_lcd_v4.c:659: if ((x >= TFTWIDTH) ||			// Clip right
      000D53 C3               [12] 3888 	clr	c
      000D54 E5*48            [12] 3889 	mov	a,_drawChar_x_65536_458
      000D56 94 F0            [12] 3890 	subb	a,#0xf0
      000D58 E5*49            [12] 3891 	mov	a,(_drawChar_x_65536_458 + 1)
      000D5A 64 80            [12] 3892 	xrl	a,#0x80
      000D5C 94 80            [12] 3893 	subb	a,#0x80
      000D5E 50 59            [24] 3894 	jnc	00101$
                                   3895 ;	.\ecen4350_lcd_v4.c:660: (y >= TFTHEIGHT) ||			// Clip bottom
      000D60 C3               [12] 3896 	clr	c
      000D61 E5*40            [12] 3897 	mov	a,_drawChar_PARM_2
      000D63 94 40            [12] 3898 	subb	a,#0x40
      000D65 E5*41            [12] 3899 	mov	a,(_drawChar_PARM_2 + 1)
      000D67 64 80            [12] 3900 	xrl	a,#0x80
      000D69 94 81            [12] 3901 	subb	a,#0x81
      000D6B 50 4C            [24] 3902 	jnc	00101$
                                   3903 ;	.\ecen4350_lcd_v4.c:661: ((x + 6 * size - 1) < 0) || // Clip left
      000D6D AC*47            [24] 3904 	mov	r4,_drawChar_PARM_6
      000D6F 7D 00            [12] 3905 	mov	r5,#0x00
      000D71 8C*00            [24] 3906 	mov	__mulint_PARM_2,r4
      000D73 8D*01            [24] 3907 	mov	(__mulint_PARM_2 + 1),r5
      000D75 90 00 06         [24] 3908 	mov	dptr,#0x0006
      000D78 C0 05            [24] 3909 	push	ar5
      000D7A C0 04            [24] 3910 	push	ar4
      000D7C 12r00r00         [24] 3911 	lcall	__mulint
      000D7F AA 82            [24] 3912 	mov	r2,dpl
      000D81 AB 83            [24] 3913 	mov	r3,dph
      000D83 D0 04            [24] 3914 	pop	ar4
      000D85 D0 05            [24] 3915 	pop	ar5
      000D87 EA               [12] 3916 	mov	a,r2
      000D88 25*48            [12] 3917 	add	a,_drawChar_x_65536_458
      000D8A FA               [12] 3918 	mov	r2,a
      000D8B EB               [12] 3919 	mov	a,r3
      000D8C 35*49            [12] 3920 	addc	a,(_drawChar_x_65536_458 + 1)
      000D8E FB               [12] 3921 	mov	r3,a
      000D8F 1A               [12] 3922 	dec	r2
      000D90 BA FF 01         [24] 3923 	cjne	r2,#0xff,00182$
      000D93 1B               [12] 3924 	dec	r3
      000D94                       3925 00182$:
      000D94 EB               [12] 3926 	mov	a,r3
      000D95 20 E7 21         [24] 3927 	jb	acc.7,00101$
                                   3928 ;	.\ecen4350_lcd_v4.c:662: ((y + 8 * size - 1) < 0))	// Clip top
      000D98 ED               [12] 3929 	mov	a,r5
      000D99 C4               [12] 3930 	swap	a
      000D9A 03               [12] 3931 	rr	a
      000D9B 54 F8            [12] 3932 	anl	a,#0xf8
      000D9D CC               [12] 3933 	xch	a,r4
      000D9E C4               [12] 3934 	swap	a
      000D9F 03               [12] 3935 	rr	a
      000DA0 CC               [12] 3936 	xch	a,r4
      000DA1 6C               [12] 3937 	xrl	a,r4
      000DA2 CC               [12] 3938 	xch	a,r4
      000DA3 54 F8            [12] 3939 	anl	a,#0xf8
      000DA5 CC               [12] 3940 	xch	a,r4
      000DA6 6C               [12] 3941 	xrl	a,r4
      000DA7 FD               [12] 3942 	mov	r5,a
      000DA8 EC               [12] 3943 	mov	a,r4
      000DA9 25*40            [12] 3944 	add	a,_drawChar_PARM_2
      000DAB FC               [12] 3945 	mov	r4,a
      000DAC ED               [12] 3946 	mov	a,r5
      000DAD 35*41            [12] 3947 	addc	a,(_drawChar_PARM_2 + 1)
      000DAF FD               [12] 3948 	mov	r5,a
      000DB0 1C               [12] 3949 	dec	r4
      000DB1 BC FF 01         [24] 3950 	cjne	r4,#0xff,00184$
      000DB4 1D               [12] 3951 	dec	r5
      000DB5                       3952 00184$:
      000DB5 ED               [12] 3953 	mov	a,r5
      000DB6 30 E7 01         [24] 3954 	jnb	acc.7,00141$
      000DB9                       3955 00101$:
                                   3956 ;	.\ecen4350_lcd_v4.c:664: return;
      000DB9 22               [24] 3957 	ret
                                   3958 ;	.\ecen4350_lcd_v4.c:667: for (char i = 0; i < 6; i++)
      000DBA                       3959 00141$:
      000DBA 74 01            [12] 3960 	mov	a,#0x01
      000DBC B5*47 04         [24] 3961 	cjne	a,_drawChar_PARM_6,00186$
      000DBF 74 01            [12] 3962 	mov	a,#0x01
      000DC1 80 01            [24] 3963 	sjmp	00187$
      000DC3                       3964 00186$:
      000DC3 E4               [12] 3965 	clr	a
      000DC4                       3966 00187$:
      000DC4 FD               [12] 3967 	mov	r5,a
      000DC5 FC               [12] 3968 	mov	r4,a
      000DC6 E5*43            [12] 3969 	mov	a,_drawChar_PARM_4
      000DC8 B5*45 09         [24] 3970 	cjne	a,_drawChar_PARM_5,00188$
      000DCB E5*44            [12] 3971 	mov	a,(_drawChar_PARM_4 + 1)
      000DCD B5*46 04         [24] 3972 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000DD0 74 01            [12] 3973 	mov	a,#0x01
      000DD2 80 01            [24] 3974 	sjmp	00189$
      000DD4                       3975 00188$:
      000DD4 E4               [12] 3976 	clr	a
      000DD5                       3977 00189$:
      000DD5 FB               [12] 3978 	mov	r3,a
      000DD6 75*4A 00         [24] 3979 	mov	_drawChar_i_131072_461,#0x00
      000DD9                       3980 00126$:
      000DD9 74 FA            [12] 3981 	mov	a,#0x100 - 0x06
      000DDB 25*4A            [12] 3982 	add	a,_drawChar_i_131072_461
      000DDD 50 01            [24] 3983 	jnc	00190$
      000DDF 22               [24] 3984 	ret
      000DE0                       3985 00190$:
                                   3986 ;	.\ecen4350_lcd_v4.c:671: if (i == 5)
      000DE0 74 05            [12] 3987 	mov	a,#0x05
      000DE2 B5*4A 05         [24] 3988 	cjne	a,_drawChar_i_131072_461,00107$
                                   3989 ;	.\ecen4350_lcd_v4.c:673: line = 0x0;
      000DE5 75*4B 00         [24] 3990 	mov	_drawChar_line_196608_462,#0x00
      000DE8 80 31            [24] 3991 	sjmp	00140$
      000DEA                       3992 00107$:
                                   3993 ;	.\ecen4350_lcd_v4.c:677: line = pgm_read_byte(font + (c * 5) + i);
      000DEA 85*42*00         [24] 3994 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000DED 75*01 00         [24] 3995 	mov	(__mulint_PARM_2 + 1),#0x00
      000DF0 90 00 05         [24] 3996 	mov	dptr,#0x0005
      000DF3 C0 05            [24] 3997 	push	ar5
      000DF5 C0 04            [24] 3998 	push	ar4
      000DF7 C0 03            [24] 3999 	push	ar3
      000DF9 12r00r00         [24] 4000 	lcall	__mulint
      000DFC A8 82            [24] 4001 	mov	r0,dpl
      000DFE AF 83            [24] 4002 	mov	r7,dph
      000E00 D0 03            [24] 4003 	pop	ar3
      000E02 D0 04            [24] 4004 	pop	ar4
      000E04 D0 05            [24] 4005 	pop	ar5
      000E06 E8               [12] 4006 	mov	a,r0
      000E07 24r00            [12] 4007 	add	a,#_font
      000E09 F8               [12] 4008 	mov	r0,a
      000E0A EF               [12] 4009 	mov	a,r7
      000E0B 34s00            [12] 4010 	addc	a,#(_font >> 8)
      000E0D FF               [12] 4011 	mov	r7,a
      000E0E E5*4A            [12] 4012 	mov	a,_drawChar_i_131072_461
      000E10 28               [12] 4013 	add	a,r0
      000E11 F5 82            [12] 4014 	mov	dpl,a
      000E13 E4               [12] 4015 	clr	a
      000E14 3F               [12] 4016 	addc	a,r7
      000E15 F5 83            [12] 4017 	mov	dph,a
      000E17 E4               [12] 4018 	clr	a
      000E18 93               [24] 4019 	movc	a,@a+dptr
      000E19 F5*4B            [12] 4020 	mov	_drawChar_line_196608_462,a
                                   4021 ;	.\ecen4350_lcd_v4.c:680: for (char j = 0; j < 8; j++)
      000E1B                       4022 00140$:
      000E1B 85*4A F0         [24] 4023 	mov	b,_drawChar_i_131072_461
      000E1E E5*47            [12] 4024 	mov	a,_drawChar_PARM_6
      000E20 A4               [48] 4025 	mul	ab
      000E21 25*48            [12] 4026 	add	a,_drawChar_x_65536_458
      000E23 FE               [12] 4027 	mov	r6,a
      000E24 E5*49            [12] 4028 	mov	a,(_drawChar_x_65536_458 + 1)
      000E26 35 F0            [12] 4029 	addc	a,b
      000E28 FF               [12] 4030 	mov	r7,a
      000E29 8E*4C            [24] 4031 	mov	_drawChar_sloc0_1_0,r6
      000E2B 8F*4D            [24] 4032 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000E2D 78 00            [12] 4033 	mov	r0,#0x00
      000E2F                       4034 00123$:
      000E2F B8 08 00         [24] 4035 	cjne	r0,#0x08,00193$
      000E32                       4036 00193$:
      000E32 40 03            [24] 4037 	jc	00194$
      000E34 02r0Fr59         [24] 4038 	ljmp	00127$
      000E37                       4039 00194$:
                                   4040 ;	.\ecen4350_lcd_v4.c:682: if (line & 0x1)
      000E37 E5*4B            [12] 4041 	mov	a,_drawChar_line_196608_462
      000E39 20 E0 03         [24] 4042 	jb	acc.0,00195$
      000E3C 02r0ErC7         [24] 4043 	ljmp	00118$
      000E3F                       4044 00195$:
                                   4045 ;	.\ecen4350_lcd_v4.c:684: if (size == 1) // default size
      000E3F ED               [12] 4046 	mov	a,r5
      000E40 60 40            [24] 4047 	jz	00110$
                                   4048 ;	.\ecen4350_lcd_v4.c:686: drawPixel(x + i, y + j, color);
      000E42 A9*4A            [24] 4049 	mov	r1,_drawChar_i_131072_461
      000E44 7A 00            [12] 4050 	mov	r2,#0x00
      000E46 E9               [12] 4051 	mov	a,r1
      000E47 25*48            [12] 4052 	add	a,_drawChar_x_65536_458
      000E49 F5 82            [12] 4053 	mov	dpl,a
      000E4B EA               [12] 4054 	mov	a,r2
      000E4C 35*49            [12] 4055 	addc	a,(_drawChar_x_65536_458 + 1)
      000E4E F5 83            [12] 4056 	mov	dph,a
      000E50 88 01            [24] 4057 	mov	ar1,r0
      000E52 7A 00            [12] 4058 	mov	r2,#0x00
      000E54 E9               [12] 4059 	mov	a,r1
      000E55 25*40            [12] 4060 	add	a,_drawChar_PARM_2
      000E57 F5*20            [12] 4061 	mov	_drawPixel_PARM_2,a
      000E59 EA               [12] 4062 	mov	a,r2
      000E5A 35*41            [12] 4063 	addc	a,(_drawChar_PARM_2 + 1)
      000E5C F5*21            [12] 4064 	mov	(_drawPixel_PARM_2 + 1),a
      000E5E 85*43*22         [24] 4065 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000E61 85*44*23         [24] 4066 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000E64 C0 07            [24] 4067 	push	ar7
      000E66 C0 06            [24] 4068 	push	ar6
      000E68 C0 05            [24] 4069 	push	ar5
      000E6A C0 04            [24] 4070 	push	ar4
      000E6C C0 03            [24] 4071 	push	ar3
      000E6E C0 00            [24] 4072 	push	ar0
      000E70 12r07r21         [24] 4073 	lcall	_drawPixel
      000E73 D0 00            [24] 4074 	pop	ar0
      000E75 D0 03            [24] 4075 	pop	ar3
      000E77 D0 04            [24] 4076 	pop	ar4
      000E79 D0 05            [24] 4077 	pop	ar5
      000E7B D0 06            [24] 4078 	pop	ar6
      000E7D D0 07            [24] 4079 	pop	ar7
      000E7F 02r0Fr4F         [24] 4080 	ljmp	00119$
      000E82                       4081 00110$:
                                   4082 ;	.\ecen4350_lcd_v4.c:690: fillRect(x + (i * size), y + (j * size), size, size, color);
      000E82 88 F0            [24] 4083 	mov	b,r0
      000E84 E5*47            [12] 4084 	mov	a,_drawChar_PARM_6
      000E86 A4               [48] 4085 	mul	ab
      000E87 25*40            [12] 4086 	add	a,_drawChar_PARM_2
      000E89 F5*38            [12] 4087 	mov	_fillRect_PARM_2,a
      000E8B E5*41            [12] 4088 	mov	a,(_drawChar_PARM_2 + 1)
      000E8D 35 F0            [12] 4089 	addc	a,b
      000E8F F5*39            [12] 4090 	mov	(_fillRect_PARM_2 + 1),a
      000E91 A9*47            [24] 4091 	mov	r1,_drawChar_PARM_6
      000E93 7A 00            [12] 4092 	mov	r2,#0x00
      000E95 89*3A            [24] 4093 	mov	_fillRect_PARM_3,r1
      000E97 8A*3B            [24] 4094 	mov	(_fillRect_PARM_3 + 1),r2
      000E99 89*3C            [24] 4095 	mov	_fillRect_PARM_4,r1
      000E9B 8A*3D            [24] 4096 	mov	(_fillRect_PARM_4 + 1),r2
      000E9D 85*43*3E         [24] 4097 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000EA0 85*44*3F         [24] 4098 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000EA3 85*4C 82         [24] 4099 	mov	dpl,_drawChar_sloc0_1_0
      000EA6 85*4D 83         [24] 4100 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000EA9 C0 07            [24] 4101 	push	ar7
      000EAB C0 06            [24] 4102 	push	ar6
      000EAD C0 05            [24] 4103 	push	ar5
      000EAF C0 04            [24] 4104 	push	ar4
      000EB1 C0 03            [24] 4105 	push	ar3
      000EB3 C0 00            [24] 4106 	push	ar0
      000EB5 12r0Ar9D         [24] 4107 	lcall	_fillRect
      000EB8 D0 00            [24] 4108 	pop	ar0
      000EBA D0 03            [24] 4109 	pop	ar3
      000EBC D0 04            [24] 4110 	pop	ar4
      000EBE D0 05            [24] 4111 	pop	ar5
      000EC0 D0 06            [24] 4112 	pop	ar6
      000EC2 D0 07            [24] 4113 	pop	ar7
      000EC4 02r0Fr4F         [24] 4114 	ljmp	00119$
      000EC7                       4115 00118$:
                                   4116 ;	.\ecen4350_lcd_v4.c:693: else if (bg != color)
      000EC7 EB               [12] 4117 	mov	a,r3
      000EC8 60 03            [24] 4118 	jz	00197$
      000ECA 02r0Fr4F         [24] 4119 	ljmp	00119$
      000ECD                       4120 00197$:
                                   4121 ;	.\ecen4350_lcd_v4.c:695: if (size == 1) // default size
      000ECD EC               [12] 4122 	mov	a,r4
      000ECE 60 3F            [24] 4123 	jz	00113$
                                   4124 ;	.\ecen4350_lcd_v4.c:697: drawPixel(x + i, y + j, bg);
      000ED0 A9*4A            [24] 4125 	mov	r1,_drawChar_i_131072_461
      000ED2 7A 00            [12] 4126 	mov	r2,#0x00
      000ED4 E9               [12] 4127 	mov	a,r1
      000ED5 25*48            [12] 4128 	add	a,_drawChar_x_65536_458
      000ED7 F5 82            [12] 4129 	mov	dpl,a
      000ED9 EA               [12] 4130 	mov	a,r2
      000EDA 35*49            [12] 4131 	addc	a,(_drawChar_x_65536_458 + 1)
      000EDC F5 83            [12] 4132 	mov	dph,a
      000EDE 88 01            [24] 4133 	mov	ar1,r0
      000EE0 7A 00            [12] 4134 	mov	r2,#0x00
      000EE2 E9               [12] 4135 	mov	a,r1
      000EE3 25*40            [12] 4136 	add	a,_drawChar_PARM_2
      000EE5 F5*20            [12] 4137 	mov	_drawPixel_PARM_2,a
      000EE7 EA               [12] 4138 	mov	a,r2
      000EE8 35*41            [12] 4139 	addc	a,(_drawChar_PARM_2 + 1)
      000EEA F5*21            [12] 4140 	mov	(_drawPixel_PARM_2 + 1),a
      000EEC 85*45*22         [24] 4141 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000EEF 85*46*23         [24] 4142 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000EF2 C0 07            [24] 4143 	push	ar7
      000EF4 C0 06            [24] 4144 	push	ar6
      000EF6 C0 05            [24] 4145 	push	ar5
      000EF8 C0 04            [24] 4146 	push	ar4
      000EFA C0 03            [24] 4147 	push	ar3
      000EFC C0 00            [24] 4148 	push	ar0
      000EFE 12r07r21         [24] 4149 	lcall	_drawPixel
      000F01 D0 00            [24] 4150 	pop	ar0
      000F03 D0 03            [24] 4151 	pop	ar3
      000F05 D0 04            [24] 4152 	pop	ar4
      000F07 D0 05            [24] 4153 	pop	ar5
      000F09 D0 06            [24] 4154 	pop	ar6
      000F0B D0 07            [24] 4155 	pop	ar7
      000F0D 80 40            [24] 4156 	sjmp	00119$
      000F0F                       4157 00113$:
                                   4158 ;	.\ecen4350_lcd_v4.c:701: fillRect(x + i * size, y + j * size, size, size, bg);
      000F0F 88 F0            [24] 4159 	mov	b,r0
      000F11 E5*47            [12] 4160 	mov	a,_drawChar_PARM_6
      000F13 A4               [48] 4161 	mul	ab
      000F14 25*40            [12] 4162 	add	a,_drawChar_PARM_2
      000F16 F5*38            [12] 4163 	mov	_fillRect_PARM_2,a
      000F18 E5*41            [12] 4164 	mov	a,(_drawChar_PARM_2 + 1)
      000F1A 35 F0            [12] 4165 	addc	a,b
      000F1C F5*39            [12] 4166 	mov	(_fillRect_PARM_2 + 1),a
      000F1E A9*47            [24] 4167 	mov	r1,_drawChar_PARM_6
      000F20 7A 00            [12] 4168 	mov	r2,#0x00
      000F22 89*3A            [24] 4169 	mov	_fillRect_PARM_3,r1
      000F24 8A*3B            [24] 4170 	mov	(_fillRect_PARM_3 + 1),r2
      000F26 89*3C            [24] 4171 	mov	_fillRect_PARM_4,r1
      000F28 8A*3D            [24] 4172 	mov	(_fillRect_PARM_4 + 1),r2
      000F2A 85*45*3E         [24] 4173 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000F2D 85*46*3F         [24] 4174 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000F30 8E 82            [24] 4175 	mov	dpl,r6
      000F32 8F 83            [24] 4176 	mov	dph,r7
      000F34 C0 07            [24] 4177 	push	ar7
      000F36 C0 06            [24] 4178 	push	ar6
      000F38 C0 05            [24] 4179 	push	ar5
      000F3A C0 04            [24] 4180 	push	ar4
      000F3C C0 03            [24] 4181 	push	ar3
      000F3E C0 00            [24] 4182 	push	ar0
      000F40 12r0Ar9D         [24] 4183 	lcall	_fillRect
      000F43 D0 00            [24] 4184 	pop	ar0
      000F45 D0 03            [24] 4185 	pop	ar3
      000F47 D0 04            [24] 4186 	pop	ar4
      000F49 D0 05            [24] 4187 	pop	ar5
      000F4B D0 06            [24] 4188 	pop	ar6
      000F4D D0 07            [24] 4189 	pop	ar7
      000F4F                       4190 00119$:
                                   4191 ;	.\ecen4350_lcd_v4.c:705: line >>= 1;
      000F4F E5*4B            [12] 4192 	mov	a,_drawChar_line_196608_462
      000F51 C3               [12] 4193 	clr	c
      000F52 13               [12] 4194 	rrc	a
      000F53 F5*4B            [12] 4195 	mov	_drawChar_line_196608_462,a
                                   4196 ;	.\ecen4350_lcd_v4.c:680: for (char j = 0; j < 8; j++)
      000F55 08               [12] 4197 	inc	r0
      000F56 02r0Er2F         [24] 4198 	ljmp	00123$
      000F59                       4199 00127$:
                                   4200 ;	.\ecen4350_lcd_v4.c:667: for (char i = 0; i < 6; i++)
      000F59 05*4A            [12] 4201 	inc	_drawChar_i_131072_461
                                   4202 ;	.\ecen4350_lcd_v4.c:708: }
      000F5B 02r0DrD9         [24] 4203 	ljmp	00126$
                                   4204 ;------------------------------------------------------------
                                   4205 ;Allocation info for local variables in function 'write'
                                   4206 ;------------------------------------------------------------
                                   4207 ;c                         Allocated to registers r7 
                                   4208 ;------------------------------------------------------------
                                   4209 ;	.\ecen4350_lcd_v4.c:710: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4210 ;	-----------------------------------------
                                   4211 ;	 function write
                                   4212 ;	-----------------------------------------
      000F5E                       4213 _write:
      000F5E AF 82            [24] 4214 	mov	r7,dpl
                                   4215 ;	.\ecen4350_lcd_v4.c:712: if (c == '\n')
      000F60 BF 0A 22         [24] 4216 	cjne	r7,#0x0a,00105$
                                   4217 ;	.\ecen4350_lcd_v4.c:714: cursor_y += textsize * 8;
      000F63 AD*0C            [24] 4218 	mov	r5,_textsize
      000F65 E4               [12] 4219 	clr	a
      000F66 C4               [12] 4220 	swap	a
      000F67 03               [12] 4221 	rr	a
      000F68 54 F8            [12] 4222 	anl	a,#0xf8
      000F6A CD               [12] 4223 	xch	a,r5
      000F6B C4               [12] 4224 	swap	a
      000F6C 03               [12] 4225 	rr	a
      000F6D CD               [12] 4226 	xch	a,r5
      000F6E 6D               [12] 4227 	xrl	a,r5
      000F6F CD               [12] 4228 	xch	a,r5
      000F70 54 F8            [12] 4229 	anl	a,#0xf8
      000F72 CD               [12] 4230 	xch	a,r5
      000F73 6D               [12] 4231 	xrl	a,r5
      000F74 FE               [12] 4232 	mov	r6,a
      000F75 ED               [12] 4233 	mov	a,r5
      000F76 25*0A            [12] 4234 	add	a,_cursor_y
      000F78 F5*0A            [12] 4235 	mov	_cursor_y,a
      000F7A EE               [12] 4236 	mov	a,r6
      000F7B 35*0B            [12] 4237 	addc	a,(_cursor_y + 1)
      000F7D F5*0B            [12] 4238 	mov	(_cursor_y + 1),a
                                   4239 ;	.\ecen4350_lcd_v4.c:715: cursor_x = 0;
      000F7F E4               [12] 4240 	clr	a
      000F80 F5*08            [12] 4241 	mov	_cursor_x,a
      000F82 F5*09            [12] 4242 	mov	(_cursor_x + 1),a
      000F84 22               [24] 4243 	ret
      000F85                       4244 00105$:
                                   4245 ;	.\ecen4350_lcd_v4.c:717: else if (c == '\r')
      000F85 BF 0D 01         [24] 4246 	cjne	r7,#0x0d,00119$
      000F88 22               [24] 4247 	ret
      000F89                       4248 00119$:
                                   4249 ;	.\ecen4350_lcd_v4.c:723: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000F89 85*0A*40         [24] 4250 	mov	_drawChar_PARM_2,_cursor_y
      000F8C 85*0B*41         [24] 4251 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000F8F 8F*42            [24] 4252 	mov	_drawChar_PARM_3,r7
      000F91 85*0E*43         [24] 4253 	mov	_drawChar_PARM_4,_textcolor
      000F94 85*0F*44         [24] 4254 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000F97 85*10*45         [24] 4255 	mov	_drawChar_PARM_5,_textbgcolor
      000F9A 85*11*46         [24] 4256 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000F9D 85*0C*47         [24] 4257 	mov	_drawChar_PARM_6,_textsize
      000FA0 85*08 82         [24] 4258 	mov	dpl,_cursor_x
      000FA3 85*09 83         [24] 4259 	mov	dph,(_cursor_x + 1)
      000FA6 12r0Dr4D         [24] 4260 	lcall	_drawChar
                                   4261 ;	.\ecen4350_lcd_v4.c:724: cursor_x += textsize * 6;
      000FA9 85*0C*00         [24] 4262 	mov	__mulint_PARM_2,_textsize
      000FAC 75*01 00         [24] 4263 	mov	(__mulint_PARM_2 + 1),#0x00
      000FAF 90 00 06         [24] 4264 	mov	dptr,#0x0006
      000FB2 12r00r00         [24] 4265 	lcall	__mulint
      000FB5 AE 82            [24] 4266 	mov	r6,dpl
      000FB7 AF 83            [24] 4267 	mov	r7,dph
      000FB9 EE               [12] 4268 	mov	a,r6
      000FBA 25*08            [12] 4269 	add	a,_cursor_x
      000FBC F5*08            [12] 4270 	mov	_cursor_x,a
      000FBE EF               [12] 4271 	mov	a,r7
      000FBF 35*09            [12] 4272 	addc	a,(_cursor_x + 1)
      000FC1 F5*09            [12] 4273 	mov	(_cursor_x + 1),a
                                   4274 ;	.\ecen4350_lcd_v4.c:726: }
      000FC3 22               [24] 4275 	ret
                                   4276 ;------------------------------------------------------------
                                   4277 ;Allocation info for local variables in function 'LCD_string_write'
                                   4278 ;------------------------------------------------------------
                                   4279 ;str                       Allocated to registers r5 r6 r7 
                                   4280 ;i                         Allocated to registers r3 r4 
                                   4281 ;------------------------------------------------------------
                                   4282 ;	.\ecen4350_lcd_v4.c:727: void LCD_string_write(char *str)
                                   4283 ;	-----------------------------------------
                                   4284 ;	 function LCD_string_write
                                   4285 ;	-----------------------------------------
      000FC4                       4286 _LCD_string_write:
      000FC4 AD 82            [24] 4287 	mov	r5,dpl
      000FC6 AE 83            [24] 4288 	mov	r6,dph
      000FC8 AF F0            [24] 4289 	mov	r7,b
                                   4290 ;	.\ecen4350_lcd_v4.c:730: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      000FCA 7B 00            [12] 4291 	mov	r3,#0x00
      000FCC 7C 00            [12] 4292 	mov	r4,#0x00
      000FCE                       4293 00103$:
      000FCE EB               [12] 4294 	mov	a,r3
      000FCF 2D               [12] 4295 	add	a,r5
      000FD0 F8               [12] 4296 	mov	r0,a
      000FD1 EC               [12] 4297 	mov	a,r4
      000FD2 3E               [12] 4298 	addc	a,r6
      000FD3 F9               [12] 4299 	mov	r1,a
      000FD4 8F 02            [24] 4300 	mov	ar2,r7
      000FD6 88 82            [24] 4301 	mov	dpl,r0
      000FD8 89 83            [24] 4302 	mov	dph,r1
      000FDA 8A F0            [24] 4303 	mov	b,r2
      000FDC 12r00r00         [24] 4304 	lcall	__gptrget
      000FDF FA               [12] 4305 	mov	r2,a
      000FE0 60 20            [24] 4306 	jz	00105$
                                   4307 ;	.\ecen4350_lcd_v4.c:732: write(str[i]); /* Call transmit data function */
      000FE2 8A 82            [24] 4308 	mov	dpl,r2
      000FE4 C0 07            [24] 4309 	push	ar7
      000FE6 C0 06            [24] 4310 	push	ar6
      000FE8 C0 05            [24] 4311 	push	ar5
      000FEA C0 04            [24] 4312 	push	ar4
      000FEC C0 03            [24] 4313 	push	ar3
      000FEE 12r0Fr5E         [24] 4314 	lcall	_write
      000FF1 D0 03            [24] 4315 	pop	ar3
      000FF3 D0 04            [24] 4316 	pop	ar4
      000FF5 D0 05            [24] 4317 	pop	ar5
      000FF7 D0 06            [24] 4318 	pop	ar6
      000FF9 D0 07            [24] 4319 	pop	ar7
                                   4320 ;	.\ecen4350_lcd_v4.c:730: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      000FFB 0B               [12] 4321 	inc	r3
      000FFC BB 00 CF         [24] 4322 	cjne	r3,#0x00,00103$
      000FFF 0C               [12] 4323 	inc	r4
      001000 80 CC            [24] 4324 	sjmp	00103$
      001002                       4325 00105$:
                                   4326 ;	.\ecen4350_lcd_v4.c:734: }
      001002 22               [24] 4327 	ret
                                   4328 ;------------------------------------------------------------
                                   4329 ;Allocation info for local variables in function 'writeNewLine'
                                   4330 ;------------------------------------------------------------
                                   4331 ;	.\ecen4350_lcd_v4.c:736: void writeNewLine(void)
                                   4332 ;	-----------------------------------------
                                   4333 ;	 function writeNewLine
                                   4334 ;	-----------------------------------------
      001003                       4335 _writeNewLine:
                                   4336 ;	.\ecen4350_lcd_v4.c:738: write('\n');
      001003 75 82 0A         [24] 4337 	mov	dpl,#0x0a
                                   4338 ;	.\ecen4350_lcd_v4.c:739: }
      001006 02r0Fr5E         [24] 4339 	ljmp	_write
                                   4340 ;------------------------------------------------------------
                                   4341 ;Allocation info for local variables in function 'freeType'
                                   4342 ;------------------------------------------------------------
                                   4343 ;count                     Allocated to registers r7 
                                   4344 ;d                         Allocated to registers 
                                   4345 ;row                       Allocated to registers r6 
                                   4346 ;------------------------------------------------------------
                                   4347 ;	.\ecen4350_lcd_v4.c:741: void freeType()
                                   4348 ;	-----------------------------------------
                                   4349 ;	 function freeType
                                   4350 ;	-----------------------------------------
      001009                       4351 _freeType:
                                   4352 ;	.\ecen4350_lcd_v4.c:743: unsigned char count = 0;
      001009 7F 00            [12] 4353 	mov	r7,#0x00
                                   4354 ;	.\ecen4350_lcd_v4.c:745: u8 row = 1;
      00100B 7E 01            [12] 4355 	mov	r6,#0x01
                                   4356 ;	.\ecen4350_lcd_v4.c:747: clearLCD();
      00100D C0 07            [24] 4357 	push	ar7
      00100F C0 06            [24] 4358 	push	ar6
      001011 12r0Dr47         [24] 4359 	lcall	_clearLCD
                                   4360 ;	.\ecen4350_lcd_v4.c:748: setCursor(0,0);
      001014 E4               [12] 4361 	clr	a
      001015 F5*00            [12] 4362 	mov	_setCursor_PARM_2,a
      001017 F5*01            [12] 4363 	mov	(_setCursor_PARM_2 + 1),a
      001019 90 00 00         [24] 4364 	mov	dptr,#0x0000
      00101C 12r04rAA         [24] 4365 	lcall	_setCursor
                                   4366 ;	.\ecen4350_lcd_v4.c:749: setTextColor(colorSelect, colorBackground);
      00101F E4               [12] 4367 	clr	a
      001020 F5*00            [12] 4368 	mov	_setTextColor_PARM_2,a
      001022 F5*01            [12] 4369 	mov	(_setTextColor_PARM_2 + 1),a
      001024 90 F8 1F         [24] 4370 	mov	dptr,#0xf81f
      001027 12r04rB7         [24] 4371 	lcall	_setTextColor
                                   4372 ;	.\ecen4350_lcd_v4.c:750: LCD_string_write("Free Type: \n");
      00102A 90r05r1C         [24] 4373 	mov	dptr,#___str_1
      00102D 75 F0 80         [24] 4374 	mov	b,#0x80
      001030 12r0FrC4         [24] 4375 	lcall	_LCD_string_write
                                   4376 ;	.\ecen4350_lcd_v4.c:751: setTextColor(colorText, colorBackground);
      001033 E4               [12] 4377 	clr	a
      001034 F5*00            [12] 4378 	mov	_setTextColor_PARM_2,a
      001036 F5*01            [12] 4379 	mov	(_setTextColor_PARM_2 + 1),a
      001038 90 07 FF         [24] 4380 	mov	dptr,#0x07ff
      00103B 12r04rB7         [24] 4381 	lcall	_setTextColor
                                   4382 ;	.\ecen4350_lcd_v4.c:752: LCD_string_write("0x");
      00103E 90r05r29         [24] 4383 	mov	dptr,#___str_2
      001041 75 F0 80         [24] 4384 	mov	b,#0x80
      001044 12r0FrC4         [24] 4385 	lcall	_LCD_string_write
      001047 D0 06            [24] 4386 	pop	ar6
      001049 D0 07            [24] 4387 	pop	ar7
                                   4388 ;	.\ecen4350_lcd_v4.c:753: while (1)
      00104B                       4389 00108$:
                                   4390 ;	.\ecen4350_lcd_v4.c:756: if (count == 8)
      00104B BF 08 02         [24] 4391 	cjne	r7,#0x08,00124$
      00104E 80 03            [24] 4392 	sjmp	00125$
      001050                       4393 00124$:
      001050 02r10rD0         [24] 4394 	ljmp	00105$
      001053                       4395 00125$:
                                   4396 ;	.\ecen4350_lcd_v4.c:759: count = 0;
      001053 7F 00            [12] 4397 	mov	r7,#0x00
                                   4398 ;	.\ecen4350_lcd_v4.c:760: write(d);
      001055 75 82 0A         [24] 4399 	mov	dpl,#0x0a
      001058 C0 07            [24] 4400 	push	ar7
      00105A C0 06            [24] 4401 	push	ar6
      00105C 12r0Fr5E         [24] 4402 	lcall	_write
      00105F D0 06            [24] 4403 	pop	ar6
      001061 D0 07            [24] 4404 	pop	ar7
                                   4405 ;	.\ecen4350_lcd_v4.c:761: if (row == 4)
      001063 BE 04 55         [24] 4406 	cjne	r6,#0x04,00102$
                                   4407 ;	.\ecen4350_lcd_v4.c:763: delay(5);
      001066 90 00 05         [24] 4408 	mov	dptr,#0x0005
      001069 C0 07            [24] 4409 	push	ar7
      00106B 12r00rE0         [24] 4410 	lcall	_delay
                                   4411 ;	.\ecen4350_lcd_v4.c:764: clearLCD();
      00106E 12r0Dr47         [24] 4412 	lcall	_clearLCD
                                   4413 ;	.\ecen4350_lcd_v4.c:765: setTextColor(colorSelect, colorBackground);
      001071 E4               [12] 4414 	clr	a
      001072 F5*00            [12] 4415 	mov	_setTextColor_PARM_2,a
      001074 F5*01            [12] 4416 	mov	(_setTextColor_PARM_2 + 1),a
      001076 90 F8 1F         [24] 4417 	mov	dptr,#0xf81f
      001079 12r04rB7         [24] 4418 	lcall	_setTextColor
                                   4419 ;	.\ecen4350_lcd_v4.c:766: rtcPrint();
      00107C 12r03r9A         [24] 4420 	lcall	_rtcPrint
                                   4421 ;	.\ecen4350_lcd_v4.c:767: clearLCD();
      00107F 12r0Dr47         [24] 4422 	lcall	_clearLCD
                                   4423 ;	.\ecen4350_lcd_v4.c:768: setCursor(0,0);
      001082 E4               [12] 4424 	clr	a
      001083 F5*00            [12] 4425 	mov	_setCursor_PARM_2,a
      001085 F5*01            [12] 4426 	mov	(_setCursor_PARM_2 + 1),a
      001087 90 00 00         [24] 4427 	mov	dptr,#0x0000
      00108A 12r04rAA         [24] 4428 	lcall	_setCursor
                                   4429 ;	.\ecen4350_lcd_v4.c:769: setTextColor(colorSelect, colorBackground);
      00108D E4               [12] 4430 	clr	a
      00108E F5*00            [12] 4431 	mov	_setTextColor_PARM_2,a
      001090 F5*01            [12] 4432 	mov	(_setTextColor_PARM_2 + 1),a
      001092 90 F8 1F         [24] 4433 	mov	dptr,#0xf81f
      001095 12r04rB7         [24] 4434 	lcall	_setTextColor
                                   4435 ;	.\ecen4350_lcd_v4.c:770: LCD_string_write("Free Type: \n");
      001098 90r05r1C         [24] 4436 	mov	dptr,#___str_1
      00109B 75 F0 80         [24] 4437 	mov	b,#0x80
      00109E 12r0FrC4         [24] 4438 	lcall	_LCD_string_write
                                   4439 ;	.\ecen4350_lcd_v4.c:771: setTextColor(colorText, colorBackground);
      0010A1 E4               [12] 4440 	clr	a
      0010A2 F5*00            [12] 4441 	mov	_setTextColor_PARM_2,a
      0010A4 F5*01            [12] 4442 	mov	(_setTextColor_PARM_2 + 1),a
      0010A6 90 07 FF         [24] 4443 	mov	dptr,#0x07ff
      0010A9 12r04rB7         [24] 4444 	lcall	_setTextColor
                                   4445 ;	.\ecen4350_lcd_v4.c:772: LCD_string_write("0x");
      0010AC 90r05r29         [24] 4446 	mov	dptr,#___str_2
      0010AF 75 F0 80         [24] 4447 	mov	b,#0x80
      0010B2 12r0FrC4         [24] 4448 	lcall	_LCD_string_write
      0010B5 D0 07            [24] 4449 	pop	ar7
                                   4450 ;	.\ecen4350_lcd_v4.c:774: row = 1;
      0010B7 7E 01            [12] 4451 	mov	r6,#0x01
      0010B9 80 90            [24] 4452 	sjmp	00108$
      0010BB                       4453 00102$:
                                   4454 ;	.\ecen4350_lcd_v4.c:777: LCD_string_write("0x");
      0010BB 90r05r29         [24] 4455 	mov	dptr,#___str_2
      0010BE 75 F0 80         [24] 4456 	mov	b,#0x80
      0010C1 C0 07            [24] 4457 	push	ar7
      0010C3 C0 06            [24] 4458 	push	ar6
      0010C5 12r0FrC4         [24] 4459 	lcall	_LCD_string_write
      0010C8 D0 06            [24] 4460 	pop	ar6
      0010CA D0 07            [24] 4461 	pop	ar7
                                   4462 ;	.\ecen4350_lcd_v4.c:778: row++;
      0010CC 0E               [12] 4463 	inc	r6
      0010CD 02r10r4B         [24] 4464 	ljmp	00108$
      0010D0                       4465 00105$:
                                   4466 ;	.\ecen4350_lcd_v4.c:783: d = keyDetect();
      0010D0 C0 07            [24] 4467 	push	ar7
      0010D2 C0 06            [24] 4468 	push	ar6
      0010D4 12r10rE2         [24] 4469 	lcall	_keyDetect
                                   4470 ;	.\ecen4350_lcd_v4.c:784: write(d);
      0010D7 12r0Fr5E         [24] 4471 	lcall	_write
      0010DA D0 06            [24] 4472 	pop	ar6
      0010DC D0 07            [24] 4473 	pop	ar7
                                   4474 ;	.\ecen4350_lcd_v4.c:785: count++;
      0010DE 0F               [12] 4475 	inc	r7
                                   4476 ;	.\ecen4350_lcd_v4.c:790: }
      0010DF 02r10r4B         [24] 4477 	ljmp	00108$
                                   4478 ;------------------------------------------------------------
                                   4479 ;Allocation info for local variables in function 'keyDetect'
                                   4480 ;------------------------------------------------------------
                                   4481 ;portdata                  Allocated to registers r7 
                                   4482 ;------------------------------------------------------------
                                   4483 ;	.\ecen4350_lcd_v4.c:793: unsigned char keyDetect()
                                   4484 ;	-----------------------------------------
                                   4485 ;	 function keyDetect
                                   4486 ;	-----------------------------------------
      0010E2                       4487 _keyDetect:
                                   4488 ;	.\ecen4350_lcd_v4.c:796: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      0010E2 75 90 F0         [24] 4489 	mov	_P1,#0xf0
                                   4490 ;	.\ecen4350_lcd_v4.c:797: do 
      0010E5                       4491 00101$:
                                   4492 ;	.\ecen4350_lcd_v4.c:799: portdata = (__KEYPAD_PORT__ & 0xF0);
      0010E5 E5 90            [12] 4493 	mov	a,_P1
      0010E7 54 F0            [12] 4494 	anl	a,#0xf0
      0010E9 FF               [12] 4495 	mov	r7,a
                                   4496 ;	.\ecen4350_lcd_v4.c:800: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      0010EA BF F0 F8         [24] 4497 	cjne	r7,#0xf0,00101$
                                   4498 ;	.\ecen4350_lcd_v4.c:804: do
      0010ED                       4499 00105$:
                                   4500 ;	.\ecen4350_lcd_v4.c:807: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      0010ED 85 90*00         [24] 4501 	mov	_colloc,_P1
                                   4502 ;	.\ecen4350_lcd_v4.c:808: colloc &= 0xF0;		  									/* mask port for column read only */
      0010F0 53*00 F0         [24] 4503 	anl	_colloc,#0xf0
                                   4504 ;	.\ecen4350_lcd_v4.c:809: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      0010F3 74 F0            [12] 4505 	mov	a,#0xf0
      0010F5 B5*00 04         [24] 4506 	cjne	a,_colloc,00107$
      0010F8 E5*07            [12] 4507 	mov	a,_received_flag
      0010FA 60 F1            [24] 4508 	jz	00105$
      0010FC                       4509 00107$:
                                   4510 ;	.\ecen4350_lcd_v4.c:810: delay(10);													/* 15ms key debounce time */
      0010FC 90 00 0A         [24] 4511 	mov	dptr,#0x000a
      0010FF 12r00rE0         [24] 4512 	lcall	_delay
                                   4513 ;	.\ecen4350_lcd_v4.c:811: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      001102 E5 90            [12] 4514 	mov	a,_P1
      001104 54 F0            [12] 4515 	anl	a,#0xf0
                                   4516 ;	.\ecen4350_lcd_v4.c:812: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      001106 FF               [12] 4517 	mov	r7,a
      001107 B5*00 02         [24] 4518 	cjne	a,_colloc,00214$
      00110A 80 04            [24] 4519 	sjmp	00123$
      00110C                       4520 00214$:
      00110C E5*07            [12] 4521 	mov	a,_received_flag
      00110E 60 DD            [24] 4522 	jz	00105$
                                   4523 ;	.\ecen4350_lcd_v4.c:814: while (1)
      001110                       4524 00123$:
                                   4525 ;	.\ecen4350_lcd_v4.c:816: if (received_flag == 1)											/* check for key input via serial interrupt */
      001110 74 01            [12] 4526 	mov	a,#0x01
      001112 B5*07 09         [24] 4527 	cjne	a,_received_flag,00113$
                                   4528 ;	.\ecen4350_lcd_v4.c:818: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      001115 E5*06            [12] 4529 	mov	a,_received_byte
      001117 FF               [12] 4530 	mov	r7,a
      001118 24 C0            [12] 4531 	add	a,#0xc0
      00111A F5*06            [12] 4532 	mov	_received_byte,a
                                   4533 ;	.\ecen4350_lcd_v4.c:819: break;														/* break outside while() */
      00111C 80 52            [24] 4534 	sjmp	00124$
      00111E                       4535 00113$:
                                   4536 ;	.\ecen4350_lcd_v4.c:822: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      00111E 75 90 FE         [24] 4537 	mov	_P1,#0xfe
                                   4538 ;	.\ecen4350_lcd_v4.c:823: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      001121 E5 90            [12] 4539 	mov	a,_P1
      001123 54 F0            [12] 4540 	anl	a,#0xf0
      001125 F5*00            [12] 4541 	mov	_colloc,a
                                   4542 ;	.\ecen4350_lcd_v4.c:824: if (colloc != 0xF0)
      001127 74 F0            [12] 4543 	mov	a,#0xf0
      001129 B5*00 02         [24] 4544 	cjne	a,_colloc,00218$
      00112C 80 05            [24] 4545 	sjmp	00115$
      00112E                       4546 00218$:
                                   4547 ;	.\ecen4350_lcd_v4.c:826: rowloc = 0;
      00112E 75*01 00         [24] 4548 	mov	_rowloc,#0x00
                                   4549 ;	.\ecen4350_lcd_v4.c:827: break;
      001131 80 3D            [24] 4550 	sjmp	00124$
      001133                       4551 00115$:
                                   4552 ;	.\ecen4350_lcd_v4.c:830: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      001133 75 90 FD         [24] 4553 	mov	_P1,#0xfd
                                   4554 ;	.\ecen4350_lcd_v4.c:831: colloc = (__KEYPAD_PORT__ & 0xF0);
      001136 E5 90            [12] 4555 	mov	a,_P1
      001138 54 F0            [12] 4556 	anl	a,#0xf0
      00113A F5*00            [12] 4557 	mov	_colloc,a
                                   4558 ;	.\ecen4350_lcd_v4.c:832: if (colloc != 0xF0)
      00113C 74 F0            [12] 4559 	mov	a,#0xf0
      00113E B5*00 02         [24] 4560 	cjne	a,_colloc,00219$
      001141 80 05            [24] 4561 	sjmp	00117$
      001143                       4562 00219$:
                                   4563 ;	.\ecen4350_lcd_v4.c:834: rowloc = 1;
      001143 75*01 01         [24] 4564 	mov	_rowloc,#0x01
                                   4565 ;	.\ecen4350_lcd_v4.c:835: break;
      001146 80 28            [24] 4566 	sjmp	00124$
      001148                       4567 00117$:
                                   4568 ;	.\ecen4350_lcd_v4.c:838: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      001148 75 90 FB         [24] 4569 	mov	_P1,#0xfb
                                   4570 ;	.\ecen4350_lcd_v4.c:839: colloc = (__KEYPAD_PORT__ & 0xF0);
      00114B E5 90            [12] 4571 	mov	a,_P1
      00114D 54 F0            [12] 4572 	anl	a,#0xf0
      00114F F5*00            [12] 4573 	mov	_colloc,a
                                   4574 ;	.\ecen4350_lcd_v4.c:840: if (colloc != 0xF0)
      001151 74 F0            [12] 4575 	mov	a,#0xf0
      001153 B5*00 02         [24] 4576 	cjne	a,_colloc,00220$
      001156 80 05            [24] 4577 	sjmp	00119$
      001158                       4578 00220$:
                                   4579 ;	.\ecen4350_lcd_v4.c:842: rowloc = 2;
      001158 75*01 02         [24] 4580 	mov	_rowloc,#0x02
                                   4581 ;	.\ecen4350_lcd_v4.c:843: break;
      00115B 80 13            [24] 4582 	sjmp	00124$
      00115D                       4583 00119$:
                                   4584 ;	.\ecen4350_lcd_v4.c:846: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      00115D 75 90 F7         [24] 4585 	mov	_P1,#0xf7
                                   4586 ;	.\ecen4350_lcd_v4.c:847: colloc = (__KEYPAD_PORT__ & 0xF0);
      001160 E5 90            [12] 4587 	mov	a,_P1
      001162 54 F0            [12] 4588 	anl	a,#0xf0
      001164 F5*00            [12] 4589 	mov	_colloc,a
                                   4590 ;	.\ecen4350_lcd_v4.c:848: if (colloc != 0xF0)
      001166 74 F0            [12] 4591 	mov	a,#0xf0
      001168 B5*00 02         [24] 4592 	cjne	a,_colloc,00221$
      00116B 80 A3            [24] 4593 	sjmp	00123$
      00116D                       4594 00221$:
                                   4595 ;	.\ecen4350_lcd_v4.c:850: rowloc = 3;
      00116D 75*01 03         [24] 4596 	mov	_rowloc,#0x03
                                   4597 ;	.\ecen4350_lcd_v4.c:851: break;
      001170                       4598 00124$:
                                   4599 ;	.\ecen4350_lcd_v4.c:855: if (received_flag == 1)
      001170 74 01            [12] 4600 	mov	a,#0x01
      001172 B5*07 07         [24] 4601 	cjne	a,_received_flag,00135$
                                   4602 ;	.\ecen4350_lcd_v4.c:857: received_flag = 0;
      001175 75*07 00         [24] 4603 	mov	_received_flag,#0x00
                                   4604 ;	.\ecen4350_lcd_v4.c:858: return received_byte;
      001178 85*06 82         [24] 4605 	mov	dpl,_received_byte
      00117B 22               [24] 4606 	ret
      00117C                       4607 00135$:
                                   4608 ;	.\ecen4350_lcd_v4.c:860: else if (colloc == 0xE0)
      00117C 74 E0            [12] 4609 	mov	a,#0xe0
      00117E B5*00 15         [24] 4610 	cjne	a,_colloc,00132$
                                   4611 ;	.\ecen4350_lcd_v4.c:862: return (keypad[rowloc][0]);
      001181 E5*01            [12] 4612 	mov	a,_rowloc
      001183 75 F0 04         [24] 4613 	mov	b,#0x04
      001186 A4               [48] 4614 	mul	ab
      001187 24rFB            [12] 4615 	add	a,#_keypad
      001189 F5 82            [12] 4616 	mov	dpl,a
      00118B 74s04            [12] 4617 	mov	a,#(_keypad >> 8)
      00118D 35 F0            [12] 4618 	addc	a,b
      00118F F5 83            [12] 4619 	mov	dph,a
      001191 E4               [12] 4620 	clr	a
      001192 93               [24] 4621 	movc	a,@a+dptr
      001193 F5 82            [12] 4622 	mov	dpl,a
      001195 22               [24] 4623 	ret
      001196                       4624 00132$:
                                   4625 ;	.\ecen4350_lcd_v4.c:864: else if (colloc == 0xD0)
      001196 74 D0            [12] 4626 	mov	a,#0xd0
      001198 B5*00 18         [24] 4627 	cjne	a,_colloc,00129$
                                   4628 ;	.\ecen4350_lcd_v4.c:866: return (keypad[rowloc][1]);
      00119B E5*01            [12] 4629 	mov	a,_rowloc
      00119D 75 F0 04         [24] 4630 	mov	b,#0x04
      0011A0 A4               [48] 4631 	mul	ab
      0011A1 24rFB            [12] 4632 	add	a,#_keypad
      0011A3 FE               [12] 4633 	mov	r6,a
      0011A4 74s04            [12] 4634 	mov	a,#(_keypad >> 8)
      0011A6 35 F0            [12] 4635 	addc	a,b
      0011A8 FF               [12] 4636 	mov	r7,a
      0011A9 8E 82            [24] 4637 	mov	dpl,r6
      0011AB 8F 83            [24] 4638 	mov	dph,r7
      0011AD A3               [24] 4639 	inc	dptr
      0011AE E4               [12] 4640 	clr	a
      0011AF 93               [24] 4641 	movc	a,@a+dptr
      0011B0 F5 82            [12] 4642 	mov	dpl,a
      0011B2 22               [24] 4643 	ret
      0011B3                       4644 00129$:
                                   4645 ;	.\ecen4350_lcd_v4.c:868: else if (colloc == 0xB0)
      0011B3 74 B0            [12] 4646 	mov	a,#0xb0
      0011B5 B5*00 19         [24] 4647 	cjne	a,_colloc,00126$
                                   4648 ;	.\ecen4350_lcd_v4.c:870: return (keypad[rowloc][2]);
      0011B8 E5*01            [12] 4649 	mov	a,_rowloc
      0011BA 75 F0 04         [24] 4650 	mov	b,#0x04
      0011BD A4               [48] 4651 	mul	ab
      0011BE 24rFB            [12] 4652 	add	a,#_keypad
      0011C0 FE               [12] 4653 	mov	r6,a
      0011C1 74s04            [12] 4654 	mov	a,#(_keypad >> 8)
      0011C3 35 F0            [12] 4655 	addc	a,b
      0011C5 FF               [12] 4656 	mov	r7,a
      0011C6 8E 82            [24] 4657 	mov	dpl,r6
      0011C8 8F 83            [24] 4658 	mov	dph,r7
      0011CA A3               [24] 4659 	inc	dptr
      0011CB A3               [24] 4660 	inc	dptr
      0011CC E4               [12] 4661 	clr	a
      0011CD 93               [24] 4662 	movc	a,@a+dptr
      0011CE F5 82            [12] 4663 	mov	dpl,a
      0011D0 22               [24] 4664 	ret
      0011D1                       4665 00126$:
                                   4666 ;	.\ecen4350_lcd_v4.c:874: return (keypad[rowloc][3]);
      0011D1 E5*01            [12] 4667 	mov	a,_rowloc
      0011D3 75 F0 04         [24] 4668 	mov	b,#0x04
      0011D6 A4               [48] 4669 	mul	ab
      0011D7 24rFB            [12] 4670 	add	a,#_keypad
      0011D9 FE               [12] 4671 	mov	r6,a
      0011DA 74s04            [12] 4672 	mov	a,#(_keypad >> 8)
      0011DC 35 F0            [12] 4673 	addc	a,b
      0011DE FF               [12] 4674 	mov	r7,a
      0011DF 8E 82            [24] 4675 	mov	dpl,r6
      0011E1 8F 83            [24] 4676 	mov	dph,r7
      0011E3 A3               [24] 4677 	inc	dptr
      0011E4 A3               [24] 4678 	inc	dptr
      0011E5 A3               [24] 4679 	inc	dptr
      0011E6 E4               [12] 4680 	clr	a
      0011E7 93               [24] 4681 	movc	a,@a+dptr
                                   4682 ;	.\ecen4350_lcd_v4.c:876: }
      0011E8 F5 82            [12] 4683 	mov	dpl,a
      0011EA 22               [24] 4684 	ret
                                   4685 ;------------------------------------------------------------
                                   4686 ;Allocation info for local variables in function 'reverse'
                                   4687 ;------------------------------------------------------------
                                   4688 ;d                         Allocated to registers r7 
                                   4689 ;rev                       Allocated to registers r5 r6 
                                   4690 ;val                       Allocated to registers r1 r2 
                                   4691 ;------------------------------------------------------------
                                   4692 ;	.\ecen4350_lcd_v4.c:878: unsigned int reverse(unsigned char d)
                                   4693 ;	-----------------------------------------
                                   4694 ;	 function reverse
                                   4695 ;	-----------------------------------------
      0011EB                       4696 _reverse:
      0011EB AF 82            [24] 4697 	mov	r7,dpl
                                   4698 ;	.\ecen4350_lcd_v4.c:880: unsigned int rev = 0;
      0011ED 7D 00            [12] 4699 	mov	r5,#0x00
      0011EF 7E 00            [12] 4700 	mov	r6,#0x00
                                   4701 ;	.\ecen4350_lcd_v4.c:882: while (d >= 1)
      0011F1                       4702 00101$:
      0011F1 BF 01 00         [24] 4703 	cjne	r7,#0x01,00114$
      0011F4                       4704 00114$:
      0011F4 40 60            [24] 4705 	jc	00103$
                                   4706 ;	.\ecen4350_lcd_v4.c:885: val = d % 10;
      0011F6 8F 03            [24] 4707 	mov	ar3,r7
      0011F8 7C 00            [12] 4708 	mov	r4,#0x00
      0011FA 75*00 0A         [24] 4709 	mov	__modsint_PARM_2,#0x0a
                                   4710 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0011FD 8C*01            [24] 4711 	mov	(__modsint_PARM_2 + 1),r4
      0011FF 8B 82            [24] 4712 	mov	dpl,r3
      001201 8C 83            [24] 4713 	mov	dph,r4
      001203 C0 06            [24] 4714 	push	ar6
      001205 C0 05            [24] 4715 	push	ar5
      001207 C0 04            [24] 4716 	push	ar4
      001209 C0 03            [24] 4717 	push	ar3
      00120B 12r00r00         [24] 4718 	lcall	__modsint
      00120E A9 82            [24] 4719 	mov	r1,dpl
      001210 AA 83            [24] 4720 	mov	r2,dph
      001212 D0 03            [24] 4721 	pop	ar3
      001214 D0 04            [24] 4722 	pop	ar4
                                   4723 ;	.\ecen4350_lcd_v4.c:886: d = d / 10;
      001216 75*00 0A         [24] 4724 	mov	__divsint_PARM_2,#0x0a
      001219 75*01 00         [24] 4725 	mov	(__divsint_PARM_2 + 1),#0x00
      00121C 8B 82            [24] 4726 	mov	dpl,r3
      00121E 8C 83            [24] 4727 	mov	dph,r4
      001220 C0 02            [24] 4728 	push	ar2
      001222 C0 01            [24] 4729 	push	ar1
      001224 12r00r00         [24] 4730 	lcall	__divsint
      001227 AB 82            [24] 4731 	mov	r3,dpl
      001229 D0 01            [24] 4732 	pop	ar1
      00122B D0 02            [24] 4733 	pop	ar2
      00122D D0 05            [24] 4734 	pop	ar5
      00122F D0 06            [24] 4735 	pop	ar6
      001231 8B 07            [24] 4736 	mov	ar7,r3
                                   4737 ;	.\ecen4350_lcd_v4.c:887: rev = rev * 10 + val;
      001233 8D*00            [24] 4738 	mov	__mulint_PARM_2,r5
      001235 8E*01            [24] 4739 	mov	(__mulint_PARM_2 + 1),r6
      001237 90 00 0A         [24] 4740 	mov	dptr,#0x000a
      00123A C0 07            [24] 4741 	push	ar7
      00123C C0 02            [24] 4742 	push	ar2
      00123E C0 01            [24] 4743 	push	ar1
      001240 12r00r00         [24] 4744 	lcall	__mulint
      001243 E5 82            [12] 4745 	mov	a,dpl
      001245 85 83 F0         [24] 4746 	mov	b,dph
      001248 D0 01            [24] 4747 	pop	ar1
      00124A D0 02            [24] 4748 	pop	ar2
      00124C D0 07            [24] 4749 	pop	ar7
      00124E 29               [12] 4750 	add	a,r1
      00124F FD               [12] 4751 	mov	r5,a
      001250 EA               [12] 4752 	mov	a,r2
      001251 35 F0            [12] 4753 	addc	a,b
      001253 FE               [12] 4754 	mov	r6,a
      001254 80 9B            [24] 4755 	sjmp	00101$
      001256                       4756 00103$:
                                   4757 ;	.\ecen4350_lcd_v4.c:889: return rev;
      001256 8D 82            [24] 4758 	mov	dpl,r5
      001258 8E 83            [24] 4759 	mov	dph,r6
                                   4760 ;	.\ecen4350_lcd_v4.c:890: }
      00125A 22               [24] 4761 	ret
                                   4762 ;------------------------------------------------------------
                                   4763 ;Allocation info for local variables in function 'reverse16'
                                   4764 ;------------------------------------------------------------
                                   4765 ;d                         Allocated to registers r6 r7 
                                   4766 ;rev                       Allocated to registers r4 r5 
                                   4767 ;val                       Allocated to registers r2 r3 
                                   4768 ;------------------------------------------------------------
                                   4769 ;	.\ecen4350_lcd_v4.c:892: unsigned int reverse16(unsigned int d)
                                   4770 ;	-----------------------------------------
                                   4771 ;	 function reverse16
                                   4772 ;	-----------------------------------------
      00125B                       4773 _reverse16:
      00125B AE 82            [24] 4774 	mov	r6,dpl
      00125D AF 83            [24] 4775 	mov	r7,dph
                                   4776 ;	.\ecen4350_lcd_v4.c:894: unsigned int rev = 0;
      00125F 7C 00            [12] 4777 	mov	r4,#0x00
      001261 7D 00            [12] 4778 	mov	r5,#0x00
                                   4779 ;	.\ecen4350_lcd_v4.c:896: while (d >= 1)
      001263                       4780 00101$:
      001263 C3               [12] 4781 	clr	c
      001264 EE               [12] 4782 	mov	a,r6
      001265 94 01            [12] 4783 	subb	a,#0x01
      001267 EF               [12] 4784 	mov	a,r7
      001268 94 00            [12] 4785 	subb	a,#0x00
      00126A 40 69            [24] 4786 	jc	00103$
                                   4787 ;	.\ecen4350_lcd_v4.c:899: val = d % 10;
      00126C 75*00 0A         [24] 4788 	mov	__moduint_PARM_2,#0x0a
      00126F 75*01 00         [24] 4789 	mov	(__moduint_PARM_2 + 1),#0x00
      001272 8E 82            [24] 4790 	mov	dpl,r6
      001274 8F 83            [24] 4791 	mov	dph,r7
      001276 C0 07            [24] 4792 	push	ar7
      001278 C0 06            [24] 4793 	push	ar6
      00127A C0 05            [24] 4794 	push	ar5
      00127C C0 04            [24] 4795 	push	ar4
      00127E 12r00r00         [24] 4796 	lcall	__moduint
      001281 AA 82            [24] 4797 	mov	r2,dpl
      001283 AB 83            [24] 4798 	mov	r3,dph
      001285 D0 04            [24] 4799 	pop	ar4
      001287 D0 05            [24] 4800 	pop	ar5
      001289 D0 06            [24] 4801 	pop	ar6
      00128B D0 07            [24] 4802 	pop	ar7
                                   4803 ;	.\ecen4350_lcd_v4.c:900: d = d / 10;
      00128D 75*00 0A         [24] 4804 	mov	__divuint_PARM_2,#0x0a
      001290 75*01 00         [24] 4805 	mov	(__divuint_PARM_2 + 1),#0x00
      001293 8E 82            [24] 4806 	mov	dpl,r6
      001295 8F 83            [24] 4807 	mov	dph,r7
      001297 C0 05            [24] 4808 	push	ar5
      001299 C0 04            [24] 4809 	push	ar4
      00129B C0 03            [24] 4810 	push	ar3
      00129D C0 02            [24] 4811 	push	ar2
      00129F 12r00r00         [24] 4812 	lcall	__divuint
      0012A2 AE 82            [24] 4813 	mov	r6,dpl
      0012A4 AF 83            [24] 4814 	mov	r7,dph
      0012A6 D0 02            [24] 4815 	pop	ar2
      0012A8 D0 03            [24] 4816 	pop	ar3
      0012AA D0 04            [24] 4817 	pop	ar4
      0012AC D0 05            [24] 4818 	pop	ar5
                                   4819 ;	.\ecen4350_lcd_v4.c:901: rev = rev * 10 + val;
      0012AE 8C*00            [24] 4820 	mov	__mulint_PARM_2,r4
      0012B0 8D*01            [24] 4821 	mov	(__mulint_PARM_2 + 1),r5
      0012B2 90 00 0A         [24] 4822 	mov	dptr,#0x000a
      0012B5 C0 07            [24] 4823 	push	ar7
      0012B7 C0 06            [24] 4824 	push	ar6
      0012B9 C0 03            [24] 4825 	push	ar3
      0012BB C0 02            [24] 4826 	push	ar2
      0012BD 12r00r00         [24] 4827 	lcall	__mulint
      0012C0 E5 82            [12] 4828 	mov	a,dpl
      0012C2 85 83 F0         [24] 4829 	mov	b,dph
      0012C5 D0 02            [24] 4830 	pop	ar2
      0012C7 D0 03            [24] 4831 	pop	ar3
      0012C9 D0 06            [24] 4832 	pop	ar6
      0012CB D0 07            [24] 4833 	pop	ar7
      0012CD 2A               [12] 4834 	add	a,r2
      0012CE FC               [12] 4835 	mov	r4,a
      0012CF EB               [12] 4836 	mov	a,r3
      0012D0 35 F0            [12] 4837 	addc	a,b
      0012D2 FD               [12] 4838 	mov	r5,a
      0012D3 80 8E            [24] 4839 	sjmp	00101$
      0012D5                       4840 00103$:
                                   4841 ;	.\ecen4350_lcd_v4.c:903: return rev;
      0012D5 8C 82            [24] 4842 	mov	dpl,r4
      0012D7 8D 83            [24] 4843 	mov	dph,r5
                                   4844 ;	.\ecen4350_lcd_v4.c:904: }
      0012D9 22               [24] 4845 	ret
                                   4846 ;------------------------------------------------------------
                                   4847 ;Allocation info for local variables in function 'hexToASCII'
                                   4848 ;------------------------------------------------------------
                                   4849 ;key                       Allocated to registers r7 
                                   4850 ;------------------------------------------------------------
                                   4851 ;	.\ecen4350_lcd_v4.c:906: unsigned char hexToASCII(unsigned char key) {
                                   4852 ;	-----------------------------------------
                                   4853 ;	 function hexToASCII
                                   4854 ;	-----------------------------------------
      0012DA                       4855 _hexToASCII:
                                   4856 ;	.\ecen4350_lcd_v4.c:907: if(key == 0x0) return '0';
      0012DA E5 82            [12] 4857 	mov	a,dpl
      0012DC FF               [12] 4858 	mov	r7,a
      0012DD 70 04            [24] 4859 	jnz	00102$
      0012DF 75 82 30         [24] 4860 	mov	dpl,#0x30
      0012E2 22               [24] 4861 	ret
      0012E3                       4862 00102$:
                                   4863 ;	.\ecen4350_lcd_v4.c:908: if(key == 0x1) return '1';
      0012E3 BF 01 04         [24] 4864 	cjne	r7,#0x01,00104$
      0012E6 75 82 31         [24] 4865 	mov	dpl,#0x31
      0012E9 22               [24] 4866 	ret
      0012EA                       4867 00104$:
                                   4868 ;	.\ecen4350_lcd_v4.c:909: if(key == 0x2) return '2';
      0012EA BF 02 04         [24] 4869 	cjne	r7,#0x02,00106$
      0012ED 75 82 32         [24] 4870 	mov	dpl,#0x32
      0012F0 22               [24] 4871 	ret
      0012F1                       4872 00106$:
                                   4873 ;	.\ecen4350_lcd_v4.c:910: if(key == 0x3) return '3';
      0012F1 BF 03 04         [24] 4874 	cjne	r7,#0x03,00108$
      0012F4 75 82 33         [24] 4875 	mov	dpl,#0x33
      0012F7 22               [24] 4876 	ret
      0012F8                       4877 00108$:
                                   4878 ;	.\ecen4350_lcd_v4.c:911: if(key == 0x4) return '4';
      0012F8 BF 04 04         [24] 4879 	cjne	r7,#0x04,00110$
      0012FB 75 82 34         [24] 4880 	mov	dpl,#0x34
      0012FE 22               [24] 4881 	ret
      0012FF                       4882 00110$:
                                   4883 ;	.\ecen4350_lcd_v4.c:912: if(key == 0x5) return '5';
      0012FF BF 05 04         [24] 4884 	cjne	r7,#0x05,00112$
      001302 75 82 35         [24] 4885 	mov	dpl,#0x35
      001305 22               [24] 4886 	ret
      001306                       4887 00112$:
                                   4888 ;	.\ecen4350_lcd_v4.c:913: if(key == 0x6) return '6';
      001306 BF 06 04         [24] 4889 	cjne	r7,#0x06,00114$
      001309 75 82 36         [24] 4890 	mov	dpl,#0x36
      00130C 22               [24] 4891 	ret
      00130D                       4892 00114$:
                                   4893 ;	.\ecen4350_lcd_v4.c:914: if(key == 0x7) return '7';
      00130D BF 07 04         [24] 4894 	cjne	r7,#0x07,00116$
      001310 75 82 37         [24] 4895 	mov	dpl,#0x37
      001313 22               [24] 4896 	ret
      001314                       4897 00116$:
                                   4898 ;	.\ecen4350_lcd_v4.c:915: if(key == 0x8) return '8';
      001314 BF 08 04         [24] 4899 	cjne	r7,#0x08,00118$
      001317 75 82 38         [24] 4900 	mov	dpl,#0x38
      00131A 22               [24] 4901 	ret
      00131B                       4902 00118$:
                                   4903 ;	.\ecen4350_lcd_v4.c:916: if(key == 0x9) return '9';
      00131B BF 09 04         [24] 4904 	cjne	r7,#0x09,00120$
      00131E 75 82 39         [24] 4905 	mov	dpl,#0x39
      001321 22               [24] 4906 	ret
      001322                       4907 00120$:
                                   4908 ;	.\ecen4350_lcd_v4.c:917: if(key == 0xA) return 'A';
      001322 BF 0A 04         [24] 4909 	cjne	r7,#0x0a,00122$
      001325 75 82 41         [24] 4910 	mov	dpl,#0x41
      001328 22               [24] 4911 	ret
      001329                       4912 00122$:
                                   4913 ;	.\ecen4350_lcd_v4.c:918: if(key == 0xB) return 'B';
      001329 BF 0B 04         [24] 4914 	cjne	r7,#0x0b,00124$
      00132C 75 82 42         [24] 4915 	mov	dpl,#0x42
      00132F 22               [24] 4916 	ret
      001330                       4917 00124$:
                                   4918 ;	.\ecen4350_lcd_v4.c:919: if(key == 0xC) return 'C';
      001330 BF 0C 04         [24] 4919 	cjne	r7,#0x0c,00126$
      001333 75 82 43         [24] 4920 	mov	dpl,#0x43
      001336 22               [24] 4921 	ret
      001337                       4922 00126$:
                                   4923 ;	.\ecen4350_lcd_v4.c:920: if(key == 0xD) return 'D';
      001337 BF 0D 04         [24] 4924 	cjne	r7,#0x0d,00128$
      00133A 75 82 44         [24] 4925 	mov	dpl,#0x44
      00133D 22               [24] 4926 	ret
      00133E                       4927 00128$:
                                   4928 ;	.\ecen4350_lcd_v4.c:921: if(key == 0xE) return 'E';
      00133E BF 0E 04         [24] 4929 	cjne	r7,#0x0e,00130$
      001341 75 82 45         [24] 4930 	mov	dpl,#0x45
      001344 22               [24] 4931 	ret
      001345                       4932 00130$:
                                   4933 ;	.\ecen4350_lcd_v4.c:922: if(key == 0xF) return 'F';
      001345 BF 0F 04         [24] 4934 	cjne	r7,#0x0f,00132$
      001348 75 82 46         [24] 4935 	mov	dpl,#0x46
      00134B 22               [24] 4936 	ret
      00134C                       4937 00132$:
                                   4938 ;	.\ecen4350_lcd_v4.c:924: return 0xff;
      00134C 75 82 FF         [24] 4939 	mov	dpl,#0xff
                                   4940 ;	.\ecen4350_lcd_v4.c:925: }
      00134F 22               [24] 4941 	ret
                                   4942 ;------------------------------------------------------------
                                   4943 ;Allocation info for local variables in function 'ASCIItoHex'
                                   4944 ;------------------------------------------------------------
                                   4945 ;key                       Allocated to registers r7 
                                   4946 ;------------------------------------------------------------
                                   4947 ;	.\ecen4350_lcd_v4.c:927: unsigned char ASCIItoHex(unsigned char key) {
                                   4948 ;	-----------------------------------------
                                   4949 ;	 function ASCIItoHex
                                   4950 ;	-----------------------------------------
      001350                       4951 _ASCIItoHex:
      001350 AF 82            [24] 4952 	mov	r7,dpl
                                   4953 ;	.\ecen4350_lcd_v4.c:928: if(key == '0') return 0x0;
      001352 BF 30 04         [24] 4954 	cjne	r7,#0x30,00102$
      001355 75 82 00         [24] 4955 	mov	dpl,#0x00
      001358 22               [24] 4956 	ret
      001359                       4957 00102$:
                                   4958 ;	.\ecen4350_lcd_v4.c:929: if(key == '1') return 0x1;
      001359 BF 31 04         [24] 4959 	cjne	r7,#0x31,00104$
      00135C 75 82 01         [24] 4960 	mov	dpl,#0x01
      00135F 22               [24] 4961 	ret
      001360                       4962 00104$:
                                   4963 ;	.\ecen4350_lcd_v4.c:930: if(key == '2') return 0x2;
      001360 BF 32 04         [24] 4964 	cjne	r7,#0x32,00106$
      001363 75 82 02         [24] 4965 	mov	dpl,#0x02
      001366 22               [24] 4966 	ret
      001367                       4967 00106$:
                                   4968 ;	.\ecen4350_lcd_v4.c:931: if(key == '3') return 0x3;
      001367 BF 33 04         [24] 4969 	cjne	r7,#0x33,00108$
      00136A 75 82 03         [24] 4970 	mov	dpl,#0x03
      00136D 22               [24] 4971 	ret
      00136E                       4972 00108$:
                                   4973 ;	.\ecen4350_lcd_v4.c:932: if(key == '4') return 0x4;
      00136E BF 34 04         [24] 4974 	cjne	r7,#0x34,00110$
      001371 75 82 04         [24] 4975 	mov	dpl,#0x04
      001374 22               [24] 4976 	ret
      001375                       4977 00110$:
                                   4978 ;	.\ecen4350_lcd_v4.c:933: if(key == '5') return 0x5;
      001375 BF 35 04         [24] 4979 	cjne	r7,#0x35,00112$
      001378 75 82 05         [24] 4980 	mov	dpl,#0x05
      00137B 22               [24] 4981 	ret
      00137C                       4982 00112$:
                                   4983 ;	.\ecen4350_lcd_v4.c:934: if(key == '6') return 0x6;
      00137C BF 36 04         [24] 4984 	cjne	r7,#0x36,00114$
      00137F 75 82 06         [24] 4985 	mov	dpl,#0x06
      001382 22               [24] 4986 	ret
      001383                       4987 00114$:
                                   4988 ;	.\ecen4350_lcd_v4.c:935: if(key == '7') return 0x7;
      001383 BF 37 04         [24] 4989 	cjne	r7,#0x37,00116$
      001386 75 82 07         [24] 4990 	mov	dpl,#0x07
      001389 22               [24] 4991 	ret
      00138A                       4992 00116$:
                                   4993 ;	.\ecen4350_lcd_v4.c:936: if(key == '8') return 0x8;
      00138A BF 38 04         [24] 4994 	cjne	r7,#0x38,00118$
      00138D 75 82 08         [24] 4995 	mov	dpl,#0x08
      001390 22               [24] 4996 	ret
      001391                       4997 00118$:
                                   4998 ;	.\ecen4350_lcd_v4.c:937: if(key == '9') return 0x9;
      001391 BF 39 04         [24] 4999 	cjne	r7,#0x39,00120$
      001394 75 82 09         [24] 5000 	mov	dpl,#0x09
      001397 22               [24] 5001 	ret
      001398                       5002 00120$:
                                   5003 ;	.\ecen4350_lcd_v4.c:938: if(key == 'A') return 0xA;
      001398 BF 41 04         [24] 5004 	cjne	r7,#0x41,00122$
      00139B 75 82 0A         [24] 5005 	mov	dpl,#0x0a
      00139E 22               [24] 5006 	ret
      00139F                       5007 00122$:
                                   5008 ;	.\ecen4350_lcd_v4.c:939: if(key == 'B') return 0xB;
      00139F BF 42 04         [24] 5009 	cjne	r7,#0x42,00124$
      0013A2 75 82 0B         [24] 5010 	mov	dpl,#0x0b
      0013A5 22               [24] 5011 	ret
      0013A6                       5012 00124$:
                                   5013 ;	.\ecen4350_lcd_v4.c:940: if(key == 'C') return 0xC;
      0013A6 BF 43 04         [24] 5014 	cjne	r7,#0x43,00126$
      0013A9 75 82 0C         [24] 5015 	mov	dpl,#0x0c
      0013AC 22               [24] 5016 	ret
      0013AD                       5017 00126$:
                                   5018 ;	.\ecen4350_lcd_v4.c:941: if(key == 'D') return 0xD;
      0013AD BF 44 04         [24] 5019 	cjne	r7,#0x44,00128$
      0013B0 75 82 0D         [24] 5020 	mov	dpl,#0x0d
      0013B3 22               [24] 5021 	ret
      0013B4                       5022 00128$:
                                   5023 ;	.\ecen4350_lcd_v4.c:942: if(key == 'E') return 0xE;
      0013B4 BF 45 04         [24] 5024 	cjne	r7,#0x45,00130$
      0013B7 75 82 0E         [24] 5025 	mov	dpl,#0x0e
      0013BA 22               [24] 5026 	ret
      0013BB                       5027 00130$:
                                   5028 ;	.\ecen4350_lcd_v4.c:943: if(key == 'F') return 0xF;
      0013BB BF 46 04         [24] 5029 	cjne	r7,#0x46,00132$
      0013BE 75 82 0F         [24] 5030 	mov	dpl,#0x0f
      0013C1 22               [24] 5031 	ret
      0013C2                       5032 00132$:
                                   5033 ;	.\ecen4350_lcd_v4.c:945: return 0xff;
      0013C2 75 82 FF         [24] 5034 	mov	dpl,#0xff
                                   5035 ;	.\ecen4350_lcd_v4.c:946: }
      0013C5 22               [24] 5036 	ret
                                   5037 ;------------------------------------------------------------
                                   5038 ;Allocation info for local variables in function 'asciiToDec'
                                   5039 ;------------------------------------------------------------
                                   5040 ;d                         Allocated to registers 
                                   5041 ;val                       Allocated to registers r4 
                                   5042 ;id                        Allocated to registers r6 r7 
                                   5043 ;------------------------------------------------------------
                                   5044 ;	.\ecen4350_lcd_v4.c:948: void asciiToDec(unsigned char d)
                                   5045 ;	-----------------------------------------
                                   5046 ;	 function asciiToDec
                                   5047 ;	-----------------------------------------
      0013C6                       5048 _asciiToDec:
                                   5049 ;	.\ecen4350_lcd_v4.c:952: id = reverse(d);
      0013C6 12r11rEB         [24] 5050 	lcall	_reverse
      0013C9 AE 82            [24] 5051 	mov	r6,dpl
      0013CB AF 83            [24] 5052 	mov	r7,dph
                                   5053 ;	.\ecen4350_lcd_v4.c:953: while (id >= 1)
      0013CD                       5054 00101$:
      0013CD C3               [12] 5055 	clr	c
      0013CE EE               [12] 5056 	mov	a,r6
      0013CF 94 01            [12] 5057 	subb	a,#0x01
      0013D1 EF               [12] 5058 	mov	a,r7
      0013D2 94 00            [12] 5059 	subb	a,#0x00
      0013D4 40 3E            [24] 5060 	jc	00103$
                                   5061 ;	.\ecen4350_lcd_v4.c:956: val = id % 10;
      0013D6 75*00 0A         [24] 5062 	mov	__moduint_PARM_2,#0x0a
      0013D9 75*01 00         [24] 5063 	mov	(__moduint_PARM_2 + 1),#0x00
      0013DC 8E 82            [24] 5064 	mov	dpl,r6
      0013DE 8F 83            [24] 5065 	mov	dph,r7
      0013E0 C0 07            [24] 5066 	push	ar7
      0013E2 C0 06            [24] 5067 	push	ar6
      0013E4 12r00r00         [24] 5068 	lcall	__moduint
      0013E7 AC 82            [24] 5069 	mov	r4,dpl
      0013E9 D0 06            [24] 5070 	pop	ar6
      0013EB D0 07            [24] 5071 	pop	ar7
                                   5072 ;	.\ecen4350_lcd_v4.c:957: id = id / 10;
      0013ED 75*00 0A         [24] 5073 	mov	__divuint_PARM_2,#0x0a
      0013F0 75*01 00         [24] 5074 	mov	(__divuint_PARM_2 + 1),#0x00
      0013F3 8E 82            [24] 5075 	mov	dpl,r6
      0013F5 8F 83            [24] 5076 	mov	dph,r7
      0013F7 C0 04            [24] 5077 	push	ar4
      0013F9 12r00r00         [24] 5078 	lcall	__divuint
      0013FC AE 82            [24] 5079 	mov	r6,dpl
      0013FE AF 83            [24] 5080 	mov	r7,dph
      001400 D0 04            [24] 5081 	pop	ar4
                                   5082 ;	.\ecen4350_lcd_v4.c:958: write(val + '0');
      001402 74 30            [12] 5083 	mov	a,#0x30
      001404 2C               [12] 5084 	add	a,r4
      001405 F5 82            [12] 5085 	mov	dpl,a
      001407 C0 07            [24] 5086 	push	ar7
      001409 C0 06            [24] 5087 	push	ar6
      00140B 12r0Fr5E         [24] 5088 	lcall	_write
      00140E D0 06            [24] 5089 	pop	ar6
      001410 D0 07            [24] 5090 	pop	ar7
      001412 80 B9            [24] 5091 	sjmp	00101$
      001414                       5092 00103$:
                                   5093 ;	.\ecen4350_lcd_v4.c:960: write('\n');
      001414 75 82 0A         [24] 5094 	mov	dpl,#0x0a
                                   5095 ;	.\ecen4350_lcd_v4.c:961: }
      001417 02r0Fr5E         [24] 5096 	ljmp	_write
                                   5097 ;------------------------------------------------------------
                                   5098 ;Allocation info for local variables in function 'asciiToHex'
                                   5099 ;------------------------------------------------------------
                                   5100 ;d                         Allocated to registers r7 
                                   5101 ;val                       Allocated to registers r2 
                                   5102 ;store                     Allocated with name '_asciiToHex_store_65536_519'
                                   5103 ;i                         Allocated to registers r6 
                                   5104 ;------------------------------------------------------------
                                   5105 ;	.\ecen4350_lcd_v4.c:963: void asciiToHex(unsigned char d)
                                   5106 ;	-----------------------------------------
                                   5107 ;	 function asciiToHex
                                   5108 ;	-----------------------------------------
      00141A                       5109 _asciiToHex:
      00141A AF 82            [24] 5110 	mov	r7,dpl
                                   5111 ;	.\ecen4350_lcd_v4.c:968: store[0] = 0;
      00141C 75*4E 00         [24] 5112 	mov	_asciiToHex_store_65536_519,#0x00
                                   5113 ;	.\ecen4350_lcd_v4.c:969: store[1] = 0;
      00141F 75*4F 00         [24] 5114 	mov	(_asciiToHex_store_65536_519 + 0x0001),#0x00
                                   5115 ;	.\ecen4350_lcd_v4.c:970: while (d >= 1)
      001422 7E 00            [12] 5116 	mov	r6,#0x00
      001424                       5117 00104$:
      001424 BF 01 00         [24] 5118 	cjne	r7,#0x01,00122$
      001427                       5119 00122$:
      001427 40 5A            [24] 5120 	jc	00106$
                                   5121 ;	.\ecen4350_lcd_v4.c:973: val = d % 16;
      001429 8F 04            [24] 5122 	mov	ar4,r7
      00142B 7D 00            [12] 5123 	mov	r5,#0x00
      00142D 74 0F            [12] 5124 	mov	a,#0x0f
      00142F 5C               [12] 5125 	anl	a,r4
      001430 FA               [12] 5126 	mov	r2,a
                                   5127 ;	.\ecen4350_lcd_v4.c:974: d = d / 16;
      001431 75*00 10         [24] 5128 	mov	__divsint_PARM_2,#0x10
                                   5129 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001434 8D*01            [24] 5130 	mov	(__divsint_PARM_2 + 1),r5
      001436 8C 82            [24] 5131 	mov	dpl,r4
      001438 8D 83            [24] 5132 	mov	dph,r5
      00143A C0 06            [24] 5133 	push	ar6
      00143C C0 02            [24] 5134 	push	ar2
      00143E 12r00r00         [24] 5135 	lcall	__divsint
      001441 AC 82            [24] 5136 	mov	r4,dpl
      001443 D0 02            [24] 5137 	pop	ar2
      001445 D0 06            [24] 5138 	pop	ar6
      001447 8C 07            [24] 5139 	mov	ar7,r4
                                   5140 ;	.\ecen4350_lcd_v4.c:975: if (val <= 9)
      001449 EA               [12] 5141 	mov	a,r2
      00144A 24 F6            [12] 5142 	add	a,#0xff - 0x09
      00144C 40 0C            [24] 5143 	jc	00102$
                                   5144 ;	.\ecen4350_lcd_v4.c:978: store[i] = val + '0';
      00144E EE               [12] 5145 	mov	a,r6
      00144F 24r4E            [12] 5146 	add	a,#_asciiToHex_store_65536_519
      001451 F9               [12] 5147 	mov	r1,a
      001452 8A 05            [24] 5148 	mov	ar5,r2
      001454 74 30            [12] 5149 	mov	a,#0x30
      001456 2D               [12] 5150 	add	a,r5
      001457 F7               [12] 5151 	mov	@r1,a
      001458 80 26            [24] 5152 	sjmp	00103$
      00145A                       5153 00102$:
                                   5154 ;	.\ecen4350_lcd_v4.c:982: store[i] = (val % 10) + 'A';
      00145A EE               [12] 5155 	mov	a,r6
      00145B 24r4E            [12] 5156 	add	a,#_asciiToHex_store_65536_519
      00145D F9               [12] 5157 	mov	r1,a
      00145E 7D 00            [12] 5158 	mov	r5,#0x00
      001460 75*00 0A         [24] 5159 	mov	__modsint_PARM_2,#0x0a
                                   5160 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001463 8D*01            [24] 5161 	mov	(__modsint_PARM_2 + 1),r5
      001465 8A 82            [24] 5162 	mov	dpl,r2
      001467 8D 83            [24] 5163 	mov	dph,r5
      001469 C0 07            [24] 5164 	push	ar7
      00146B C0 06            [24] 5165 	push	ar6
      00146D C0 01            [24] 5166 	push	ar1
      00146F 12r00r00         [24] 5167 	lcall	__modsint
      001472 AC 82            [24] 5168 	mov	r4,dpl
      001474 AD 83            [24] 5169 	mov	r5,dph
      001476 D0 01            [24] 5170 	pop	ar1
      001478 D0 06            [24] 5171 	pop	ar6
      00147A D0 07            [24] 5172 	pop	ar7
      00147C 74 41            [12] 5173 	mov	a,#0x41
      00147E 2C               [12] 5174 	add	a,r4
      00147F F7               [12] 5175 	mov	@r1,a
      001480                       5176 00103$:
                                   5177 ;	.\ecen4350_lcd_v4.c:984: i++;
      001480 0E               [12] 5178 	inc	r6
      001481 80 A1            [24] 5179 	sjmp	00104$
      001483                       5180 00106$:
                                   5181 ;	.\ecen4350_lcd_v4.c:986: write(store[1]);
      001483 85*4F 82         [24] 5182 	mov	dpl,(_asciiToHex_store_65536_519 + 0x0001)
      001486 12r0Fr5E         [24] 5183 	lcall	_write
                                   5184 ;	.\ecen4350_lcd_v4.c:987: write(store[0]);
      001489 85*4E 82         [24] 5185 	mov	dpl,_asciiToHex_store_65536_519
                                   5186 ;	.\ecen4350_lcd_v4.c:989: }
      00148C 02r0Fr5E         [24] 5187 	ljmp	_write
                                   5188 ;------------------------------------------------------------
                                   5189 ;Allocation info for local variables in function 'print4Hex'
                                   5190 ;------------------------------------------------------------
                                   5191 ;num                       Allocated to registers 
                                   5192 ;------------------------------------------------------------
                                   5193 ;	.\ecen4350_lcd_v4.c:992: void print4Hex(unsigned char num) {
                                   5194 ;	-----------------------------------------
                                   5195 ;	 function print4Hex
                                   5196 ;	-----------------------------------------
      00148F                       5197 _print4Hex:
                                   5198 ;	.\ecen4350_lcd_v4.c:993: write((u8) hexToASCII(num));
      00148F 12r12rDA         [24] 5199 	lcall	_hexToASCII
                                   5200 ;	.\ecen4350_lcd_v4.c:994: }
      001492 02r0Fr5E         [24] 5201 	ljmp	_write
                                   5202 ;------------------------------------------------------------
                                   5203 ;Allocation info for local variables in function 'print8Hex'
                                   5204 ;------------------------------------------------------------
                                   5205 ;num                       Allocated to registers r7 
                                   5206 ;------------------------------------------------------------
                                   5207 ;	.\ecen4350_lcd_v4.c:996: void print8Hex(unsigned char num) {
                                   5208 ;	-----------------------------------------
                                   5209 ;	 function print8Hex
                                   5210 ;	-----------------------------------------
      001495                       5211 _print8Hex:
                                   5212 ;	.\ecen4350_lcd_v4.c:997: print4Hex(num >> 4);
      001495 E5 82            [12] 5213 	mov	a,dpl
      001497 FF               [12] 5214 	mov	r7,a
      001498 C4               [12] 5215 	swap	a
      001499 54 0F            [12] 5216 	anl	a,#0x0f
      00149B F5 82            [12] 5217 	mov	dpl,a
      00149D C0 07            [24] 5218 	push	ar7
      00149F 12r14r8F         [24] 5219 	lcall	_print4Hex
      0014A2 D0 07            [24] 5220 	pop	ar7
                                   5221 ;	.\ecen4350_lcd_v4.c:998: print4Hex(num & 0x0F);
      0014A4 74 0F            [12] 5222 	mov	a,#0x0f
      0014A6 5F               [12] 5223 	anl	a,r7
      0014A7 F5 82            [12] 5224 	mov	dpl,a
                                   5225 ;	.\ecen4350_lcd_v4.c:999: }
      0014A9 02r14r8F         [24] 5226 	ljmp	_print4Hex
                                   5227 ;------------------------------------------------------------
                                   5228 ;Allocation info for local variables in function 'print16Hex'
                                   5229 ;------------------------------------------------------------
                                   5230 ;num                       Allocated to registers r6 r7 
                                   5231 ;------------------------------------------------------------
                                   5232 ;	.\ecen4350_lcd_v4.c:1001: void print16Hex(unsigned int num) {
                                   5233 ;	-----------------------------------------
                                   5234 ;	 function print16Hex
                                   5235 ;	-----------------------------------------
      0014AC                       5236 _print16Hex:
      0014AC AE 82            [24] 5237 	mov	r6,dpl
      0014AE AF 83            [24] 5238 	mov	r7,dph
                                   5239 ;	.\ecen4350_lcd_v4.c:1002: print8Hex((unsigned char)(num >> 8));
      0014B0 8F 82            [24] 5240 	mov	dpl,r7
      0014B2 C0 07            [24] 5241 	push	ar7
      0014B4 C0 06            [24] 5242 	push	ar6
      0014B6 12r14r95         [24] 5243 	lcall	_print8Hex
      0014B9 D0 06            [24] 5244 	pop	ar6
      0014BB D0 07            [24] 5245 	pop	ar7
                                   5246 ;	.\ecen4350_lcd_v4.c:1003: print8Hex((unsigned char)num);
      0014BD 8E 82            [24] 5247 	mov	dpl,r6
                                   5248 ;	.\ecen4350_lcd_v4.c:1004: }
      0014BF 02r14r95         [24] 5249 	ljmp	_print8Hex
                                   5250 ;------------------------------------------------------------
                                   5251 ;Allocation info for local variables in function 'print16Dec'
                                   5252 ;------------------------------------------------------------
                                   5253 ;num                       Allocated to registers 
                                   5254 ;val                       Allocated to registers r4 r5 
                                   5255 ;id                        Allocated to registers r6 r7 
                                   5256 ;------------------------------------------------------------
                                   5257 ;	.\ecen4350_lcd_v4.c:1006: void print16Dec(unsigned int num) {
                                   5258 ;	-----------------------------------------
                                   5259 ;	 function print16Dec
                                   5260 ;	-----------------------------------------
      0014C2                       5261 _print16Dec:
                                   5262 ;	.\ecen4350_lcd_v4.c:1009: id = reverse16(num);
      0014C2 12r12r5B         [24] 5263 	lcall	_reverse16
      0014C5 AE 82            [24] 5264 	mov	r6,dpl
      0014C7 AF 83            [24] 5265 	mov	r7,dph
                                   5266 ;	.\ecen4350_lcd_v4.c:1010: while (id >= 1) {
      0014C9                       5267 00101$:
      0014C9 C3               [12] 5268 	clr	c
      0014CA EE               [12] 5269 	mov	a,r6
      0014CB 94 01            [12] 5270 	subb	a,#0x01
      0014CD EF               [12] 5271 	mov	a,r7
      0014CE 94 00            [12] 5272 	subb	a,#0x00
      0014D0 40 44            [24] 5273 	jc	00104$
                                   5274 ;	.\ecen4350_lcd_v4.c:1011: val = id % 10;
      0014D2 75*00 0A         [24] 5275 	mov	__moduint_PARM_2,#0x0a
      0014D5 75*01 00         [24] 5276 	mov	(__moduint_PARM_2 + 1),#0x00
      0014D8 8E 82            [24] 5277 	mov	dpl,r6
      0014DA 8F 83            [24] 5278 	mov	dph,r7
      0014DC C0 07            [24] 5279 	push	ar7
      0014DE C0 06            [24] 5280 	push	ar6
      0014E0 12r00r00         [24] 5281 	lcall	__moduint
      0014E3 AC 82            [24] 5282 	mov	r4,dpl
      0014E5 AD 83            [24] 5283 	mov	r5,dph
      0014E7 D0 06            [24] 5284 	pop	ar6
      0014E9 D0 07            [24] 5285 	pop	ar7
                                   5286 ;	.\ecen4350_lcd_v4.c:1012: id = id/10;
      0014EB 75*00 0A         [24] 5287 	mov	__divuint_PARM_2,#0x0a
      0014EE 75*01 00         [24] 5288 	mov	(__divuint_PARM_2 + 1),#0x00
      0014F1 8E 82            [24] 5289 	mov	dpl,r6
      0014F3 8F 83            [24] 5290 	mov	dph,r7
      0014F5 C0 05            [24] 5291 	push	ar5
      0014F7 C0 04            [24] 5292 	push	ar4
      0014F9 12r00r00         [24] 5293 	lcall	__divuint
      0014FC AE 82            [24] 5294 	mov	r6,dpl
      0014FE AF 83            [24] 5295 	mov	r7,dph
      001500 D0 04            [24] 5296 	pop	ar4
      001502 D0 05            [24] 5297 	pop	ar5
                                   5298 ;	.\ecen4350_lcd_v4.c:1013: write(val + '0');
      001504 74 30            [12] 5299 	mov	a,#0x30
      001506 2C               [12] 5300 	add	a,r4
      001507 F5 82            [12] 5301 	mov	dpl,a
      001509 C0 07            [24] 5302 	push	ar7
      00150B C0 06            [24] 5303 	push	ar6
      00150D 12r0Fr5E         [24] 5304 	lcall	_write
      001510 D0 06            [24] 5305 	pop	ar6
      001512 D0 07            [24] 5306 	pop	ar7
      001514 80 B3            [24] 5307 	sjmp	00101$
      001516                       5308 00104$:
                                   5309 ;	.\ecen4350_lcd_v4.c:1015: }
      001516 22               [24] 5310 	ret
                                   5311 ;------------------------------------------------------------
                                   5312 ;Allocation info for local variables in function 'print8ASCII'
                                   5313 ;------------------------------------------------------------
                                   5314 ;num                       Allocated to registers 
                                   5315 ;------------------------------------------------------------
                                   5316 ;	.\ecen4350_lcd_v4.c:1017: void print8ASCII(unsigned char num) {
                                   5317 ;	-----------------------------------------
                                   5318 ;	 function print8ASCII
                                   5319 ;	-----------------------------------------
      001517                       5320 _print8ASCII:
                                   5321 ;	.\ecen4350_lcd_v4.c:1018: write((u8)num);
                                   5322 ;	.\ecen4350_lcd_v4.c:1019: }
      001517 02r0Fr5E         [24] 5323 	ljmp	_write
                                   5324 ;------------------------------------------------------------
                                   5325 ;Allocation info for local variables in function 'print16ASCII'
                                   5326 ;------------------------------------------------------------
                                   5327 ;num                       Allocated to registers r6 r7 
                                   5328 ;------------------------------------------------------------
                                   5329 ;	.\ecen4350_lcd_v4.c:1021: void print16ASCII(unsigned int num) {
                                   5330 ;	-----------------------------------------
                                   5331 ;	 function print16ASCII
                                   5332 ;	-----------------------------------------
      00151A                       5333 _print16ASCII:
      00151A AE 82            [24] 5334 	mov	r6,dpl
      00151C AF 83            [24] 5335 	mov	r7,dph
                                   5336 ;	.\ecen4350_lcd_v4.c:1022: print8ASCII((unsigned char)(num >> 8));
      00151E 8F 82            [24] 5337 	mov	dpl,r7
      001520 C0 07            [24] 5338 	push	ar7
      001522 C0 06            [24] 5339 	push	ar6
      001524 12r15r17         [24] 5340 	lcall	_print8ASCII
      001527 D0 06            [24] 5341 	pop	ar6
      001529 D0 07            [24] 5342 	pop	ar7
                                   5343 ;	.\ecen4350_lcd_v4.c:1023: print8ASCII((unsigned char)num);
      00152B 8E 82            [24] 5344 	mov	dpl,r6
                                   5345 ;	.\ecen4350_lcd_v4.c:1024: }
      00152D 02r15r17         [24] 5346 	ljmp	_print8ASCII
                                   5347 ;------------------------------------------------------------
                                   5348 ;Allocation info for local variables in function 'writeSomeLines'
                                   5349 ;------------------------------------------------------------
                                   5350 ;	.\ecen4350_lcd_v4.c:1027: void writeSomeLines()
                                   5351 ;	-----------------------------------------
                                   5352 ;	 function writeSomeLines
                                   5353 ;	-----------------------------------------
      001530                       5354 _writeSomeLines:
                                   5355 ;	.\ecen4350_lcd_v4.c:1029: setRotation(0);		//rotation 0 is for flat/flush LCD
      001530 75 82 00         [24] 5356 	mov	dpl,#0x00
      001533 12r04rDC         [24] 5357 	lcall	_setRotation
                                   5358 ;	.\ecen4350_lcd_v4.c:1031: fillScreen(CYAN);
      001536 90 07 FF         [24] 5359 	mov	dptr,#0x07ff
      001539 12r0Cr60         [24] 5360 	lcall	_fillScreen
                                   5361 ;	.\ecen4350_lcd_v4.c:1032: fillTop(BLACK);
      00153C 90 00 00         [24] 5362 	mov	dptr,#0x0000
      00153F 12r0Br7A         [24] 5363 	lcall	_fillTop
                                   5364 ;	.\ecen4350_lcd_v4.c:1033: setTextSize(5);
      001542 75 82 05         [24] 5365 	mov	dpl,#0x05
      001545 12r04rC4         [24] 5366 	lcall	_setTextSize
                                   5367 ;	.\ecen4350_lcd_v4.c:1034: setTextColor(CYAN, BLACK);
      001548 E4               [12] 5368 	clr	a
      001549 F5*00            [12] 5369 	mov	_setTextColor_PARM_2,a
      00154B F5*01            [12] 5370 	mov	(_setTextColor_PARM_2 + 1),a
      00154D 90 07 FF         [24] 5371 	mov	dptr,#0x07ff
      001550 12r04rB7         [24] 5372 	lcall	_setTextColor
                                   5373 ;	.\ecen4350_lcd_v4.c:1035: setCursor(10,0);
      001553 E4               [12] 5374 	clr	a
      001554 F5*00            [12] 5375 	mov	_setCursor_PARM_2,a
      001556 F5*01            [12] 5376 	mov	(_setCursor_PARM_2 + 1),a
      001558 90 00 0A         [24] 5377 	mov	dptr,#0x000a
      00155B 12r04rAA         [24] 5378 	lcall	_setCursor
                                   5379 ;	.\ecen4350_lcd_v4.c:1036: LCD_string_write("Welcome\n");
      00155E 90r05r2C         [24] 5380 	mov	dptr,#___str_3
      001561 75 F0 80         [24] 5381 	mov	b,#0x80
      001564 12r0FrC4         [24] 5382 	lcall	_LCD_string_write
                                   5383 ;	.\ecen4350_lcd_v4.c:1037: setTextSize(2);
      001567 75 82 02         [24] 5384 	mov	dpl,#0x02
      00156A 12r04rC4         [24] 5385 	lcall	_setTextSize
                                   5386 ;	.\ecen4350_lcd_v4.c:1038: setTextColor(BLACK, CYAN);
      00156D 75*00 FF         [24] 5387 	mov	_setTextColor_PARM_2,#0xff
      001570 75*01 07         [24] 5388 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001573 90 00 00         [24] 5389 	mov	dptr,#0x0000
      001576 12r04rB7         [24] 5390 	lcall	_setTextColor
                                   5391 ;	.\ecen4350_lcd_v4.c:1039: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      001579 90r05r35         [24] 5392 	mov	dptr,#___str_4
      00157C 75 F0 80         [24] 5393 	mov	b,#0x80
      00157F 12r0FrC4         [24] 5394 	lcall	_LCD_string_write
                                   5395 ;	.\ecen4350_lcd_v4.c:1040: delay(40);
      001582 90 00 28         [24] 5396 	mov	dptr,#0x0028
                                   5397 ;	.\ecen4350_lcd_v4.c:1041: }
      001585 02r00rE0         [24] 5398 	ljmp	_delay
                                   5399 ;------------------------------------------------------------
                                   5400 ;Allocation info for local variables in function 'setColorDefault'
                                   5401 ;------------------------------------------------------------
                                   5402 ;	.\ecen4350_lcd_v4.c:1044: void setColorDefault() {
                                   5403 ;	-----------------------------------------
                                   5404 ;	 function setColorDefault
                                   5405 ;	-----------------------------------------
      001588                       5406 _setColorDefault:
                                   5407 ;	.\ecen4350_lcd_v4.c:1045: setTextColor(colorText, colorBackground);
      001588 E4               [12] 5408 	clr	a
      001589 F5*00            [12] 5409 	mov	_setTextColor_PARM_2,a
      00158B F5*01            [12] 5410 	mov	(_setTextColor_PARM_2 + 1),a
      00158D 90 07 FF         [24] 5411 	mov	dptr,#0x07ff
                                   5412 ;	.\ecen4350_lcd_v4.c:1046: } 
      001590 02r04rB7         [24] 5413 	ljmp	_setTextColor
                                   5414 ;------------------------------------------------------------
                                   5415 ;Allocation info for local variables in function 'setColorSelect'
                                   5416 ;------------------------------------------------------------
                                   5417 ;	.\ecen4350_lcd_v4.c:1048: void setColorSelect() {
                                   5418 ;	-----------------------------------------
                                   5419 ;	 function setColorSelect
                                   5420 ;	-----------------------------------------
      001593                       5421 _setColorSelect:
                                   5422 ;	.\ecen4350_lcd_v4.c:1049: setTextColor(colorSelect, colorBackground);
      001593 E4               [12] 5423 	clr	a
      001594 F5*00            [12] 5424 	mov	_setTextColor_PARM_2,a
      001596 F5*01            [12] 5425 	mov	(_setTextColor_PARM_2 + 1),a
      001598 90 F8 1F         [24] 5426 	mov	dptr,#0xf81f
                                   5427 ;	.\ecen4350_lcd_v4.c:1050: }
      00159B 02r04rB7         [24] 5428 	ljmp	_setTextColor
                                   5429 ;------------------------------------------------------------
                                   5430 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5431 ;------------------------------------------------------------
                                   5432 ;	.\ecen4350_lcd_v4.c:1052: void setColorHighlight1() {
                                   5433 ;	-----------------------------------------
                                   5434 ;	 function setColorHighlight1
                                   5435 ;	-----------------------------------------
      00159E                       5436 _setColorHighlight1:
                                   5437 ;	.\ecen4350_lcd_v4.c:1053: setTextColor(colorSelect, CYAN);
      00159E 75*00 FF         [24] 5438 	mov	_setTextColor_PARM_2,#0xff
      0015A1 75*01 07         [24] 5439 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015A4 90 F8 1F         [24] 5440 	mov	dptr,#0xf81f
                                   5441 ;	.\ecen4350_lcd_v4.c:1054: }
      0015A7 02r04rB7         [24] 5442 	ljmp	_setTextColor
                                   5443 ;------------------------------------------------------------
                                   5444 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5445 ;------------------------------------------------------------
                                   5446 ;	.\ecen4350_lcd_v4.c:1056: void setColorHighlight2() {
                                   5447 ;	-----------------------------------------
                                   5448 ;	 function setColorHighlight2
                                   5449 ;	-----------------------------------------
      0015AA                       5450 _setColorHighlight2:
                                   5451 ;	.\ecen4350_lcd_v4.c:1057: setTextColor(BLACK, CYAN);
      0015AA 75*00 FF         [24] 5452 	mov	_setTextColor_PARM_2,#0xff
      0015AD 75*01 07         [24] 5453 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0015B0 90 00 00         [24] 5454 	mov	dptr,#0x0000
                                   5455 ;	.\ecen4350_lcd_v4.c:1058: }
      0015B3 02r04rB7         [24] 5456 	ljmp	_setTextColor
                                   5457 ;------------------------------------------------------------
                                   5458 ;Allocation info for local variables in function 'setColorGray'
                                   5459 ;------------------------------------------------------------
                                   5460 ;	.\ecen4350_lcd_v4.c:1060: void setColorGray() {
                                   5461 ;	-----------------------------------------
                                   5462 ;	 function setColorGray
                                   5463 ;	-----------------------------------------
      0015B6                       5464 _setColorGray:
                                   5465 ;	.\ecen4350_lcd_v4.c:1061: setTextColor(GRAY, colorBackground);
      0015B6 E4               [12] 5466 	clr	a
      0015B7 F5*00            [12] 5467 	mov	_setTextColor_PARM_2,a
      0015B9 F5*01            [12] 5468 	mov	(_setTextColor_PARM_2 + 1),a
      0015BB 90 D6 BA         [24] 5469 	mov	dptr,#0xd6ba
                                   5470 ;	.\ecen4350_lcd_v4.c:1062: }
      0015BE 02r04rB7         [24] 5471 	ljmp	_setTextColor
                                   5472 ;------------------------------------------------------------
                                   5473 ;Allocation info for local variables in function 'setColorMenu'
                                   5474 ;------------------------------------------------------------
                                   5475 ;	.\ecen4350_lcd_v4.c:1064: void setColorMenu() {
                                   5476 ;	-----------------------------------------
                                   5477 ;	 function setColorMenu
                                   5478 ;	-----------------------------------------
      0015C1                       5479 _setColorMenu:
                                   5480 ;	.\ecen4350_lcd_v4.c:1065: setTextColor(BLACK, GRAY);
      0015C1 75*00 BA         [24] 5481 	mov	_setTextColor_PARM_2,#0xba
      0015C4 75*01 D6         [24] 5482 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      0015C7 90 00 00         [24] 5483 	mov	dptr,#0x0000
                                   5484 ;	.\ecen4350_lcd_v4.c:1066: }
      0015CA 02r04rB7         [24] 5485 	ljmp	_setTextColor
                                   5486 ;------------------------------------------------------------
                                   5487 ;Allocation info for local variables in function 'setColorRed'
                                   5488 ;------------------------------------------------------------
                                   5489 ;	.\ecen4350_lcd_v4.c:1068: void setColorRed() {
                                   5490 ;	-----------------------------------------
                                   5491 ;	 function setColorRed
                                   5492 ;	-----------------------------------------
      0015CD                       5493 _setColorRed:
                                   5494 ;	.\ecen4350_lcd_v4.c:1069: setTextColor(RED, colorBackground);
      0015CD E4               [12] 5495 	clr	a
      0015CE F5*00            [12] 5496 	mov	_setTextColor_PARM_2,a
      0015D0 F5*01            [12] 5497 	mov	(_setTextColor_PARM_2 + 1),a
      0015D2 90 F8 00         [24] 5498 	mov	dptr,#0xf800
                                   5499 ;	.\ecen4350_lcd_v4.c:1070: }
      0015D5 02r04rB7         [24] 5500 	ljmp	_setTextColor
                                   5501 ;------------------------------------------------------------
                                   5502 ;Allocation info for local variables in function 'setColorWhite'
                                   5503 ;------------------------------------------------------------
                                   5504 ;	.\ecen4350_lcd_v4.c:1072: void setColorWhite() {
                                   5505 ;	-----------------------------------------
                                   5506 ;	 function setColorWhite
                                   5507 ;	-----------------------------------------
      0015D8                       5508 _setColorWhite:
                                   5509 ;	.\ecen4350_lcd_v4.c:1073: setTextColor(WHITE, colorBackground);
      0015D8 E4               [12] 5510 	clr	a
      0015D9 F5*00            [12] 5511 	mov	_setTextColor_PARM_2,a
      0015DB F5*01            [12] 5512 	mov	(_setTextColor_PARM_2 + 1),a
      0015DD 90 FF FF         [24] 5513 	mov	dptr,#0xffff
                                   5514 ;	.\ecen4350_lcd_v4.c:1074: }
      0015E0 02r04rB7         [24] 5515 	ljmp	_setTextColor
                                   5516 ;------------------------------------------------------------
                                   5517 ;Allocation info for local variables in function 'setColorGreen'
                                   5518 ;------------------------------------------------------------
                                   5519 ;	.\ecen4350_lcd_v4.c:1076: void setColorGreen() {
                                   5520 ;	-----------------------------------------
                                   5521 ;	 function setColorGreen
                                   5522 ;	-----------------------------------------
      0015E3                       5523 _setColorGreen:
                                   5524 ;	.\ecen4350_lcd_v4.c:1077: setTextColor(GREEN, colorBackground);
      0015E3 E4               [12] 5525 	clr	a
      0015E4 F5*00            [12] 5526 	mov	_setTextColor_PARM_2,a
      0015E6 F5*01            [12] 5527 	mov	(_setTextColor_PARM_2 + 1),a
      0015E8 90 07 E0         [24] 5528 	mov	dptr,#0x07e0
                                   5529 ;	.\ecen4350_lcd_v4.c:1078: }
      0015EB 02r04rB7         [24] 5530 	ljmp	_setTextColor
                                   5531 ;------------------------------------------------------------
                                   5532 ;Allocation info for local variables in function 'setColorYellow'
                                   5533 ;------------------------------------------------------------
                                   5534 ;	.\ecen4350_lcd_v4.c:1080: void setColorYellow() {
                                   5535 ;	-----------------------------------------
                                   5536 ;	 function setColorYellow
                                   5537 ;	-----------------------------------------
      0015EE                       5538 _setColorYellow:
                                   5539 ;	.\ecen4350_lcd_v4.c:1081: setTextColor(YELLOW, colorBackground);
      0015EE E4               [12] 5540 	clr	a
      0015EF F5*00            [12] 5541 	mov	_setTextColor_PARM_2,a
      0015F1 F5*01            [12] 5542 	mov	(_setTextColor_PARM_2 + 1),a
      0015F3 90 FF E0         [24] 5543 	mov	dptr,#0xffe0
                                   5544 ;	.\ecen4350_lcd_v4.c:1082: }
      0015F6 02r04rB7         [24] 5545 	ljmp	_setTextColor
                                   5546 ;------------------------------------------------------------
                                   5547 ;Allocation info for local variables in function 'inputAddress'
                                   5548 ;------------------------------------------------------------
                                   5549 ;address                   Allocated to registers r7 r6 
                                   5550 ;input                     Allocated to registers r7 
                                   5551 ;------------------------------------------------------------
                                   5552 ;	.\ecen4350_lcd_v4.c:1084: unsigned int inputAddress()
                                   5553 ;	-----------------------------------------
                                   5554 ;	 function inputAddress
                                   5555 ;	-----------------------------------------
      0015F9                       5556 _inputAddress:
                                   5557 ;	.\ecen4350_lcd_v4.c:1089: input = keyDetect();					
      0015F9 12r10rE2         [24] 5558 	lcall	_keyDetect
                                   5559 ;	.\ecen4350_lcd_v4.c:1092: write(input);									// Print to screen
      0015FC AF 82            [24] 5560 	mov  r7,dpl
      0015FE C0 07            [24] 5561 	push	ar7
      001600 12r0Fr5E         [24] 5562 	lcall	_write
      001603 D0 07            [24] 5563 	pop	ar7
                                   5564 ;	.\ecen4350_lcd_v4.c:1093: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      001605 8F 82            [24] 5565 	mov	dpl,r7
      001607 12r13r50         [24] 5566 	lcall	_ASCIItoHex
                                   5567 ;	.\ecen4350_lcd_v4.c:1094: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      00160A E5 82            [12] 5568 	mov	a,dpl
      00160C C4               [12] 5569 	swap	a
      00160D 54 F0            [12] 5570 	anl	a,#0xf0
      00160F FE               [12] 5571 	mov	r6,a
      001610 7F 00            [12] 5572 	mov	r7,#0x00
                                   5573 ;	.\ecen4350_lcd_v4.c:1096: input = keyDetect();							// second highest address nibble
      001612 C0 07            [24] 5574 	push	ar7
      001614 C0 06            [24] 5575 	push	ar6
      001616 12r10rE2         [24] 5576 	lcall	_keyDetect
                                   5577 ;	.\ecen4350_lcd_v4.c:1099: write(input);									// Print to screen
      001619 AD 82            [24] 5578 	mov  r5,dpl
      00161B C0 05            [24] 5579 	push	ar5
      00161D 12r0Fr5E         [24] 5580 	lcall	_write
      001620 D0 05            [24] 5581 	pop	ar5
                                   5582 ;	.\ecen4350_lcd_v4.c:1100: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      001622 8D 82            [24] 5583 	mov	dpl,r5
      001624 12r13r50         [24] 5584 	lcall	_ASCIItoHex
      001627 AD 82            [24] 5585 	mov	r5,dpl
      001629 D0 06            [24] 5586 	pop	ar6
      00162B D0 07            [24] 5587 	pop	ar7
                                   5588 ;	.\ecen4350_lcd_v4.c:1101: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      00162D 8D 04            [24] 5589 	mov	ar4,r5
      00162F 7D 00            [12] 5590 	mov	r5,#0x00
      001631 EF               [12] 5591 	mov	a,r7
      001632 42 05            [12] 5592 	orl	ar5,a
      001634 EE               [12] 5593 	mov	a,r6
      001635 42 04            [12] 5594 	orl	ar4,a
                                   5595 ;	.\ecen4350_lcd_v4.c:1103: input = keyDetect();
      001637 C0 05            [24] 5596 	push	ar5
      001639 C0 04            [24] 5597 	push	ar4
      00163B 12r10rE2         [24] 5598 	lcall	_keyDetect
      00163E AF 82            [24] 5599 	mov	r7,dpl
      001640 D0 04            [24] 5600 	pop	ar4
      001642 D0 05            [24] 5601 	pop	ar5
                                   5602 ;	.\ecen4350_lcd_v4.c:1106: write(input);
      001644 8F 82            [24] 5603 	mov	dpl,r7
      001646 C0 07            [24] 5604 	push	ar7
      001648 C0 05            [24] 5605 	push	ar5
      00164A C0 04            [24] 5606 	push	ar4
      00164C 12r0Fr5E         [24] 5607 	lcall	_write
      00164F D0 04            [24] 5608 	pop	ar4
      001651 D0 05            [24] 5609 	pop	ar5
      001653 D0 07            [24] 5610 	pop	ar7
                                   5611 ;	.\ecen4350_lcd_v4.c:1107: input = ASCIItoHex(input);
      001655 8F 82            [24] 5612 	mov	dpl,r7
      001657 C0 05            [24] 5613 	push	ar5
      001659 C0 04            [24] 5614 	push	ar4
      00165B 12r13r50         [24] 5615 	lcall	_ASCIItoHex
      00165E AF 82            [24] 5616 	mov	r7,dpl
      001660 D0 04            [24] 5617 	pop	ar4
      001662 D0 05            [24] 5618 	pop	ar5
                                   5619 ;	.\ecen4350_lcd_v4.c:1108: address |= (int) input * 16;					// *0x0010
      001664 E4               [12] 5620 	clr	a
      001665 CF               [12] 5621 	xch	a,r7
      001666 C4               [12] 5622 	swap	a
      001667 CF               [12] 5623 	xch	a,r7
      001668 6F               [12] 5624 	xrl	a,r7
      001669 CF               [12] 5625 	xch	a,r7
      00166A 54 F0            [12] 5626 	anl	a,#0xf0
      00166C CF               [12] 5627 	xch	a,r7
      00166D 6F               [12] 5628 	xrl	a,r7
      00166E FE               [12] 5629 	mov	r6,a
      00166F ED               [12] 5630 	mov	a,r5
      001670 42 07            [12] 5631 	orl	ar7,a
      001672 EC               [12] 5632 	mov	a,r4
      001673 42 06            [12] 5633 	orl	ar6,a
                                   5634 ;	.\ecen4350_lcd_v4.c:1110: input = keyDetect();
      001675 C0 07            [24] 5635 	push	ar7
      001677 C0 06            [24] 5636 	push	ar6
      001679 12r10rE2         [24] 5637 	lcall	_keyDetect
                                   5638 ;	.\ecen4350_lcd_v4.c:1113: write(input);
      00167C AD 82            [24] 5639 	mov  r5,dpl
      00167E C0 05            [24] 5640 	push	ar5
      001680 12r0Fr5E         [24] 5641 	lcall	_write
      001683 D0 05            [24] 5642 	pop	ar5
                                   5643 ;	.\ecen4350_lcd_v4.c:1114: input = ASCIItoHex(input);
      001685 8D 82            [24] 5644 	mov	dpl,r5
      001687 12r13r50         [24] 5645 	lcall	_ASCIItoHex
      00168A AD 82            [24] 5646 	mov	r5,dpl
      00168C D0 06            [24] 5647 	pop	ar6
      00168E D0 07            [24] 5648 	pop	ar7
                                   5649 ;	.\ecen4350_lcd_v4.c:1115: address |= (int) input;							// *0x0001
      001690 7C 00            [12] 5650 	mov	r4,#0x00
      001692 ED               [12] 5651 	mov	a,r5
      001693 4F               [12] 5652 	orl	a,r7
      001694 F5 82            [12] 5653 	mov	dpl,a
      001696 EC               [12] 5654 	mov	a,r4
      001697 4E               [12] 5655 	orl	a,r6
      001698 F5 83            [12] 5656 	mov	dph,a
                                   5657 ;	.\ecen4350_lcd_v4.c:1118: return address;									// yeet
                                   5658 ;	.\ecen4350_lcd_v4.c:1119: }
      00169A 22               [24] 5659 	ret
                                   5660 ;------------------------------------------------------------
                                   5661 ;Allocation info for local variables in function 'inputBlockType'
                                   5662 ;------------------------------------------------------------
                                   5663 ;blockType                 Allocated to registers 
                                   5664 ;invalidType               Allocated to registers 
                                   5665 ;------------------------------------------------------------
                                   5666 ;	.\ecen4350_lcd_v4.c:1121: unsigned char inputBlockType() {
                                   5667 ;	-----------------------------------------
                                   5668 ;	 function inputBlockType
                                   5669 ;	-----------------------------------------
      00169B                       5670 _inputBlockType:
                                   5671 ;	.\ecen4350_lcd_v4.c:1127: selection = keyDetect();
      00169B 12r10rE2         [24] 5672 	lcall	_keyDetect
      00169E AF 82            [24] 5673 	mov	r7,dpl
      0016A0 78r00            [12] 5674 	mov	r0,#_selection
      0016A2 A6 07            [24] 5675 	mov	@r0,ar7
                                   5676 ;	.\ecen4350_lcd_v4.c:1128: blockType = ASCIItoHex(selection);
      0016A4 8F 82            [24] 5677 	mov	dpl,r7
                                   5678 ;	.\ecen4350_lcd_v4.c:1143: return blockType;
                                   5679 ;	.\ecen4350_lcd_v4.c:1144: }
      0016A6 02r13r50         [24] 5680 	ljmp	_ASCIItoHex
                                   5681 ;------------------------------------------------------------
                                   5682 ;Allocation info for local variables in function 'inputBlockSize'
                                   5683 ;------------------------------------------------------------
                                   5684 ;blockSize                 Allocated to registers 
                                   5685 ;------------------------------------------------------------
                                   5686 ;	.\ecen4350_lcd_v4.c:1146: unsigned char inputBlockSize() {
                                   5687 ;	-----------------------------------------
                                   5688 ;	 function inputBlockSize
                                   5689 ;	-----------------------------------------
      0016A9                       5690 _inputBlockSize:
                                   5691 ;	.\ecen4350_lcd_v4.c:1149: selection = keyDetect();
      0016A9 12r10rE2         [24] 5692 	lcall	_keyDetect
      0016AC AF 82            [24] 5693 	mov	r7,dpl
      0016AE 78r00            [12] 5694 	mov	r0,#_selection
      0016B0 A6 07            [24] 5695 	mov	@r0,ar7
                                   5696 ;	.\ecen4350_lcd_v4.c:1150: write(selection);
      0016B2 8F 82            [24] 5697 	mov	dpl,r7
      0016B4 12r0Fr5E         [24] 5698 	lcall	_write
                                   5699 ;	.\ecen4350_lcd_v4.c:1151: selection = ASCIItoHex(selection);
      0016B7 78r00            [12] 5700 	mov	r0,#_selection
      0016B9 86 82            [24] 5701 	mov	dpl,@r0
      0016BB 12r13r50         [24] 5702 	lcall	_ASCIItoHex
      0016BE AF 82            [24] 5703 	mov	r7,dpl
      0016C0 78r00            [12] 5704 	mov	r0,#_selection
      0016C2 A6 07            [24] 5705 	mov	@r0,ar7
                                   5706 ;	.\ecen4350_lcd_v4.c:1152: blockSize |= selection * 16;
      0016C4 EF               [12] 5707 	mov	a,r7
      0016C5 C4               [12] 5708 	swap	a
      0016C6 54 F0            [12] 5709 	anl	a,#0xf0
      0016C8 FF               [12] 5710 	mov	r7,a
                                   5711 ;	.\ecen4350_lcd_v4.c:1153: selection = keyDetect();
      0016C9 C0 07            [24] 5712 	push	ar7
      0016CB 12r10rE2         [24] 5713 	lcall	_keyDetect
      0016CE AE 82            [24] 5714 	mov	r6,dpl
      0016D0 78r00            [12] 5715 	mov	r0,#_selection
      0016D2 A6 06            [24] 5716 	mov	@r0,ar6
                                   5717 ;	.\ecen4350_lcd_v4.c:1154: write(selection);
      0016D4 8E 82            [24] 5718 	mov	dpl,r6
      0016D6 12r0Fr5E         [24] 5719 	lcall	_write
                                   5720 ;	.\ecen4350_lcd_v4.c:1155: selection = ASCIItoHex(selection);
      0016D9 78r00            [12] 5721 	mov	r0,#_selection
      0016DB 86 82            [24] 5722 	mov	dpl,@r0
      0016DD 12r13r50         [24] 5723 	lcall	_ASCIItoHex
      0016E0 AE 82            [24] 5724 	mov	r6,dpl
      0016E2 D0 07            [24] 5725 	pop	ar7
      0016E4 78r00            [12] 5726 	mov	r0,#_selection
      0016E6 A6 06            [24] 5727 	mov	@r0,ar6
                                   5728 ;	.\ecen4350_lcd_v4.c:1156: blockSize |= selection;
      0016E8 EE               [12] 5729 	mov	a,r6
      0016E9 4F               [12] 5730 	orl	a,r7
      0016EA F5 82            [12] 5731 	mov	dpl,a
                                   5732 ;	.\ecen4350_lcd_v4.c:1157: return blockSize;
                                   5733 ;	.\ecen4350_lcd_v4.c:1158: }
      0016EC 22               [24] 5734 	ret
                                   5735 ;------------------------------------------------------------
                                   5736 ;Allocation info for local variables in function 'printMenu'
                                   5737 ;------------------------------------------------------------
                                   5738 ;	.\ecen4350_lcd_v4.c:1161: void printMenu() {
                                   5739 ;	-----------------------------------------
                                   5740 ;	 function printMenu
                                   5741 ;	-----------------------------------------
      0016ED                       5742 _printMenu:
                                   5743 ;	.\ecen4350_lcd_v4.c:1163: setCursor(0,0);
      0016ED E4               [12] 5744 	clr	a
      0016EE F5*00            [12] 5745 	mov	_setCursor_PARM_2,a
      0016F0 F5*01            [12] 5746 	mov	(_setCursor_PARM_2 + 1),a
      0016F2 90 00 00         [24] 5747 	mov	dptr,#0x0000
      0016F5 12r04rAA         [24] 5748 	lcall	_setCursor
                                   5749 ;	.\ecen4350_lcd_v4.c:1164: clearLCD();
      0016F8 12r0Dr47         [24] 5750 	lcall	_clearLCD
                                   5751 ;	.\ecen4350_lcd_v4.c:1167: fillTop(GRAY);
      0016FB 90 D6 BA         [24] 5752 	mov	dptr,#0xd6ba
      0016FE 12r0Br7A         [24] 5753 	lcall	_fillTop
                                   5754 ;	.\ecen4350_lcd_v4.c:1168: setTextSize(5);
      001701 75 82 05         [24] 5755 	mov	dpl,#0x05
      001704 12r04rC4         [24] 5756 	lcall	_setTextSize
                                   5757 ;	.\ecen4350_lcd_v4.c:1169: setColorMenu();
      001707 12r15rC1         [24] 5758 	lcall	_setColorMenu
                                   5759 ;	.\ecen4350_lcd_v4.c:1170: setCursor(30, 0);
      00170A E4               [12] 5760 	clr	a
      00170B F5*00            [12] 5761 	mov	_setCursor_PARM_2,a
      00170D F5*01            [12] 5762 	mov	(_setCursor_PARM_2 + 1),a
      00170F 90 00 1E         [24] 5763 	mov	dptr,#0x001e
      001712 12r04rAA         [24] 5764 	lcall	_setCursor
                                   5765 ;	.\ecen4350_lcd_v4.c:1171: LCD_string_write("<Menu>\n");
      001715 90r05r5C         [24] 5766 	mov	dptr,#___str_5
      001718 75 F0 80         [24] 5767 	mov	b,#0x80
      00171B 12r0FrC4         [24] 5768 	lcall	_LCD_string_write
                                   5769 ;	.\ecen4350_lcd_v4.c:1173: setTextSize(2);
      00171E 75 82 02         [24] 5770 	mov	dpl,#0x02
      001721 12r04rC4         [24] 5771 	lcall	_setTextSize
                                   5772 ;	.\ecen4350_lcd_v4.c:1175: setCursor(0, 60);
      001724 75*00 3C         [24] 5773 	mov	_setCursor_PARM_2,#0x3c
      001727 75*01 00         [24] 5774 	mov	(_setCursor_PARM_2 + 1),#0x00
      00172A 90 00 00         [24] 5775 	mov	dptr,#0x0000
      00172D 12r04rAA         [24] 5776 	lcall	_setCursor
                                   5777 ;	.\ecen4350_lcd_v4.c:1176: setColorWhite();
      001730 12r15rD8         [24] 5778 	lcall	_setColorWhite
                                   5779 ;	.\ecen4350_lcd_v4.c:1177: LCD_string_write(" <D>");
      001733 90r05r64         [24] 5780 	mov	dptr,#___str_6
      001736 75 F0 80         [24] 5781 	mov	b,#0x80
      001739 12r0FrC4         [24] 5782 	lcall	_LCD_string_write
                                   5783 ;	.\ecen4350_lcd_v4.c:1178: setColorDefault();
      00173C 12r15r88         [24] 5784 	lcall	_setColorDefault
                                   5785 ;	.\ecen4350_lcd_v4.c:1179: LCD_string_write(" DUMP\n");
      00173F 90r05r69         [24] 5786 	mov	dptr,#___str_7
      001742 75 F0 80         [24] 5787 	mov	b,#0x80
      001745 12r0FrC4         [24] 5788 	lcall	_LCD_string_write
                                   5789 ;	.\ecen4350_lcd_v4.c:1181: setCursor(120, 60);
      001748 75*00 3C         [24] 5790 	mov	_setCursor_PARM_2,#0x3c
      00174B 75*01 00         [24] 5791 	mov	(_setCursor_PARM_2 + 1),#0x00
      00174E 90 00 78         [24] 5792 	mov	dptr,#0x0078
      001751 12r04rAA         [24] 5793 	lcall	_setCursor
                                   5794 ;	.\ecen4350_lcd_v4.c:1182: setColorWhite();
      001754 12r15rD8         [24] 5795 	lcall	_setColorWhite
                                   5796 ;	.\ecen4350_lcd_v4.c:1183: LCD_string_write(" <B>");
      001757 90r05r70         [24] 5797 	mov	dptr,#___str_8
      00175A 75 F0 80         [24] 5798 	mov	b,#0x80
      00175D 12r0FrC4         [24] 5799 	lcall	_LCD_string_write
                                   5800 ;	.\ecen4350_lcd_v4.c:1184: setColorDefault();
      001760 12r15r88         [24] 5801 	lcall	_setColorDefault
                                   5802 ;	.\ecen4350_lcd_v4.c:1185: LCD_string_write(" MOVE\n");
      001763 90r05r75         [24] 5803 	mov	dptr,#___str_9
      001766 75 F0 80         [24] 5804 	mov	b,#0x80
      001769 12r0FrC4         [24] 5805 	lcall	_LCD_string_write
                                   5806 ;	.\ecen4350_lcd_v4.c:1187: setCursor(0, 100);
      00176C 75*00 64         [24] 5807 	mov	_setCursor_PARM_2,#0x64
      00176F 75*01 00         [24] 5808 	mov	(_setCursor_PARM_2 + 1),#0x00
      001772 90 00 00         [24] 5809 	mov	dptr,#0x0000
      001775 12r04rAA         [24] 5810 	lcall	_setCursor
                                   5811 ;	.\ecen4350_lcd_v4.c:1188: setColorWhite();
      001778 12r15rD8         [24] 5812 	lcall	_setColorWhite
                                   5813 ;	.\ecen4350_lcd_v4.c:1189: LCD_string_write(" <E>");
      00177B 90r05r7C         [24] 5814 	mov	dptr,#___str_10
      00177E 75 F0 80         [24] 5815 	mov	b,#0x80
      001781 12r0FrC4         [24] 5816 	lcall	_LCD_string_write
                                   5817 ;	.\ecen4350_lcd_v4.c:1190: setColorDefault();
      001784 12r15r88         [24] 5818 	lcall	_setColorDefault
                                   5819 ;	.\ecen4350_lcd_v4.c:1191: LCD_string_write(" EDIT\n");
      001787 90r05r81         [24] 5820 	mov	dptr,#___str_11
      00178A 75 F0 80         [24] 5821 	mov	b,#0x80
      00178D 12r0FrC4         [24] 5822 	lcall	_LCD_string_write
                                   5823 ;	.\ecen4350_lcd_v4.c:1193: setCursor(120, 100);
      001790 75*00 64         [24] 5824 	mov	_setCursor_PARM_2,#0x64
      001793 75*01 00         [24] 5825 	mov	(_setCursor_PARM_2 + 1),#0x00
      001796 90 00 78         [24] 5826 	mov	dptr,#0x0078
      001799 12r04rAA         [24] 5827 	lcall	_setCursor
                                   5828 ;	.\ecen4350_lcd_v4.c:1194: setColorWhite();
      00179C 12r15rD8         [24] 5829 	lcall	_setColorWhite
                                   5830 ;	.\ecen4350_lcd_v4.c:1195: LCD_string_write(" <F>");
      00179F 90r05r88         [24] 5831 	mov	dptr,#___str_12
      0017A2 75 F0 80         [24] 5832 	mov	b,#0x80
      0017A5 12r0FrC4         [24] 5833 	lcall	_LCD_string_write
                                   5834 ;	.\ecen4350_lcd_v4.c:1196: setColorDefault();
      0017A8 12r15r88         [24] 5835 	lcall	_setColorDefault
                                   5836 ;	.\ecen4350_lcd_v4.c:1197: LCD_string_write(" FIND\n");
      0017AB 90r05r8D         [24] 5837 	mov	dptr,#___str_13
      0017AE 75 F0 80         [24] 5838 	mov	b,#0x80
      0017B1 12r0FrC4         [24] 5839 	lcall	_LCD_string_write
                                   5840 ;	.\ecen4350_lcd_v4.c:1199: setCursor(0, 140);
      0017B4 75*00 8C         [24] 5841 	mov	_setCursor_PARM_2,#0x8c
      0017B7 75*01 00         [24] 5842 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017BA 90 00 00         [24] 5843 	mov	dptr,#0x0000
      0017BD 12r04rAA         [24] 5844 	lcall	_setCursor
                                   5845 ;	.\ecen4350_lcd_v4.c:1200: setColorWhite();
      0017C0 12r15rD8         [24] 5846 	lcall	_setColorWhite
                                   5847 ;	.\ecen4350_lcd_v4.c:1201: LCD_string_write(" <C>");
      0017C3 90r05r94         [24] 5848 	mov	dptr,#___str_14
      0017C6 75 F0 80         [24] 5849 	mov	b,#0x80
      0017C9 12r0FrC4         [24] 5850 	lcall	_LCD_string_write
                                   5851 ;	.\ecen4350_lcd_v4.c:1202: setColorDefault();
      0017CC 12r15r88         [24] 5852 	lcall	_setColorDefault
                                   5853 ;	.\ecen4350_lcd_v4.c:1203: LCD_string_write(" COUNT\n");
      0017CF 90r05r99         [24] 5854 	mov	dptr,#___str_15
      0017D2 75 F0 80         [24] 5855 	mov	b,#0x80
      0017D5 12r0FrC4         [24] 5856 	lcall	_LCD_string_write
                                   5857 ;	.\ecen4350_lcd_v4.c:1205: setCursor(0, 180);
      0017D8 75*00 B4         [24] 5858 	mov	_setCursor_PARM_2,#0xb4
      0017DB 75*01 00         [24] 5859 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017DE 90 00 00         [24] 5860 	mov	dptr,#0x0000
      0017E1 12r04rAA         [24] 5861 	lcall	_setCursor
                                   5862 ;	.\ecen4350_lcd_v4.c:1206: setColorWhite();
      0017E4 12r15rD8         [24] 5863 	lcall	_setColorWhite
                                   5864 ;	.\ecen4350_lcd_v4.c:1207: LCD_string_write(" <A>");
      0017E7 90r05rA1         [24] 5865 	mov	dptr,#___str_16
      0017EA 75 F0 80         [24] 5866 	mov	b,#0x80
      0017ED 12r0FrC4         [24] 5867 	lcall	_LCD_string_write
                                   5868 ;	.\ecen4350_lcd_v4.c:1208: setColorDefault();
      0017F0 12r15r88         [24] 5869 	lcall	_setColorDefault
                                   5870 ;	.\ecen4350_lcd_v4.c:1209: LCD_string_write(" MEM CHECK\n");
      0017F3 90r05rA6         [24] 5871 	mov	dptr,#___str_17
      0017F6 75 F0 80         [24] 5872 	mov	b,#0x80
      0017F9 12r0FrC4         [24] 5873 	lcall	_LCD_string_write
                                   5874 ;	.\ecen4350_lcd_v4.c:1211: setCursor(0, 220);
      0017FC 75*00 DC         [24] 5875 	mov	_setCursor_PARM_2,#0xdc
      0017FF 75*01 00         [24] 5876 	mov	(_setCursor_PARM_2 + 1),#0x00
      001802 90 00 00         [24] 5877 	mov	dptr,#0x0000
      001805 12r04rAA         [24] 5878 	lcall	_setCursor
                                   5879 ;	.\ecen4350_lcd_v4.c:1212: setColorWhite();
      001808 12r15rD8         [24] 5880 	lcall	_setColorWhite
                                   5881 ;	.\ecen4350_lcd_v4.c:1213: LCD_string_write(" <1>");
      00180B 90r05rB2         [24] 5882 	mov	dptr,#___str_18
      00180E 75 F0 80         [24] 5883 	mov	b,#0x80
      001811 12r0FrC4         [24] 5884 	lcall	_LCD_string_write
                                   5885 ;	.\ecen4350_lcd_v4.c:1214: setColorDefault();
      001814 12r15r88         [24] 5886 	lcall	_setColorDefault
                                   5887 ;	.\ecen4350_lcd_v4.c:1215: LCD_string_write(" UART");
      001817 90r05rB7         [24] 5888 	mov	dptr,#___str_19
      00181A 75 F0 80         [24] 5889 	mov	b,#0x80
      00181D 12r0FrC4         [24] 5890 	lcall	_LCD_string_write
                                   5891 ;	.\ecen4350_lcd_v4.c:1216: setTextSize(1);
      001820 75 82 01         [24] 5892 	mov	dpl,#0x01
      001823 12r04rC4         [24] 5893 	lcall	_setTextSize
                                   5894 ;	.\ecen4350_lcd_v4.c:1217: if (UART_en == 0) {
      001826 78r01            [12] 5895 	mov	r0,#_UART_en
      001828 E6               [12] 5896 	mov	a,@r0
      001829 70 09            [24] 5897 	jnz	00102$
                                   5898 ;	.\ecen4350_lcd_v4.c:1218: LCD_string_write(" [Disabled]\n");
      00182B 90r05rBD         [24] 5899 	mov	dptr,#___str_20
      00182E 75 F0 80         [24] 5900 	mov	b,#0x80
      001831 12r0FrC4         [24] 5901 	lcall	_LCD_string_write
      001834                       5902 00102$:
                                   5903 ;	.\ecen4350_lcd_v4.c:1219: } if (UART_en == 1) {
      001834 78r01            [12] 5904 	mov	r0,#_UART_en
      001836 B6 01 09         [24] 5905 	cjne	@r0,#0x01,00104$
                                   5906 ;	.\ecen4350_lcd_v4.c:1220: LCD_string_write(" [Enabled]\n");
      001839 90r05rCA         [24] 5907 	mov	dptr,#___str_21
      00183C 75 F0 80         [24] 5908 	mov	b,#0x80
      00183F 12r0FrC4         [24] 5909 	lcall	_LCD_string_write
      001842                       5910 00104$:
                                   5911 ;	.\ecen4350_lcd_v4.c:1222: setTextSize(2);
      001842 75 82 02         [24] 5912 	mov	dpl,#0x02
                                   5913 ;	.\ecen4350_lcd_v4.c:1223: return;
                                   5914 ;	.\ecen4350_lcd_v4.c:1224: }
      001845 02r04rC4         [24] 5915 	ljmp	_setTextSize
                                   5916 ;------------------------------------------------------------
                                   5917 ;Allocation info for local variables in function 'dump'
                                   5918 ;------------------------------------------------------------
                                   5919 ;d                         Allocated with name '_dump_d_65536_553'
                                   5920 ;__2621440106              Allocated to registers 
                                   5921 ;__2621440103              Allocated to registers 
                                   5922 ;__2621440104              Allocated to registers 
                                   5923 ;map_address               Allocated to registers 
                                   5924 ;d                         Allocated to registers 
                                   5925 ;__2621440107              Allocated to registers 
                                   5926 ;map_address               Allocated to registers 
                                   5927 ;d                         Allocated to registers 
                                   5928 ;__2621440118              Allocated to registers 
                                   5929 ;__2621440115              Allocated to registers 
                                   5930 ;__2621440112              Allocated to registers 
                                   5931 ;__2621440109              Allocated to registers 
                                   5932 ;__2621440110              Allocated to registers 
                                   5933 ;map_address               Allocated to registers 
                                   5934 ;d                         Allocated to registers 
                                   5935 ;__2621440113              Allocated to registers 
                                   5936 ;map_address               Allocated to registers 
                                   5937 ;d                         Allocated to registers 
                                   5938 ;__2621440116              Allocated to registers 
                                   5939 ;map_address               Allocated to registers 
                                   5940 ;d                         Allocated to registers 
                                   5941 ;__2621440119              Allocated to registers 
                                   5942 ;map_address               Allocated to registers 
                                   5943 ;d                         Allocated to registers 
                                   5944 ;__2621440142              Allocated to registers 
                                   5945 ;__2621440139              Allocated to registers 
                                   5946 ;__2621440136              Allocated to registers 
                                   5947 ;__2621440133              Allocated to registers 
                                   5948 ;__2621440130              Allocated to registers 
                                   5949 ;__2621440127              Allocated to registers 
                                   5950 ;__2621440124              Allocated to registers 
                                   5951 ;__2621440121              Allocated to registers 
                                   5952 ;__2621440122              Allocated to registers 
                                   5953 ;map_address               Allocated to registers 
                                   5954 ;d                         Allocated to registers 
                                   5955 ;__2621440125              Allocated to registers 
                                   5956 ;map_address               Allocated to registers 
                                   5957 ;d                         Allocated to registers 
                                   5958 ;__2621440128              Allocated to registers 
                                   5959 ;map_address               Allocated to registers 
                                   5960 ;d                         Allocated to registers 
                                   5961 ;__2621440131              Allocated to registers 
                                   5962 ;map_address               Allocated to registers 
                                   5963 ;d                         Allocated to registers r3 
                                   5964 ;__2621440134              Allocated to registers 
                                   5965 ;map_address               Allocated to registers 
                                   5966 ;d                         Allocated to registers 
                                   5967 ;__2621440137              Allocated to registers 
                                   5968 ;map_address               Allocated to registers 
                                   5969 ;d                         Allocated to registers 
                                   5970 ;__2621440140              Allocated to registers 
                                   5971 ;map_address               Allocated to registers 
                                   5972 ;d                         Allocated to registers 
                                   5973 ;__2621440143              Allocated to registers 
                                   5974 ;map_address               Allocated to registers 
                                   5975 ;d                         Allocated to registers 
                                   5976 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   5977 ;address                   Allocated with name '_dump_address_65536_553'
                                   5978 ;blockSize                 Allocated to registers r5 
                                   5979 ;blockType                 Allocated to registers r7 
                                   5980 ;exit                      Allocated with name '_dump_exit_65536_553'
                                   5981 ;invalidType               Allocated to registers r5 
                                   5982 ;invalidSize               Allocated to registers r3 
                                   5983 ;------------------------------------------------------------
                                   5984 ;	.\ecen4350_lcd_v4.c:1226: void dump()
                                   5985 ;	-----------------------------------------
                                   5986 ;	 function dump
                                   5987 ;	-----------------------------------------
      001848                       5988 _dump:
                                   5989 ;	.\ecen4350_lcd_v4.c:1231: __idata unsigned char blockType = 0;
      001848 7F 00            [12] 5990 	mov	r7,#0x00
                                   5991 ;	.\ecen4350_lcd_v4.c:1232: __idata unsigned char exit = 1;
      00184A 78r0B            [12] 5992 	mov	r0,#_dump_exit_65536_553
      00184C 76 01            [12] 5993 	mov	@r0,#0x01
                                   5994 ;	.\ecen4350_lcd_v4.c:1233: __idata unsigned char invalidType = 1;
      00184E 7D 01            [12] 5995 	mov	r5,#0x01
                                   5996 ;	.\ecen4350_lcd_v4.c:1234: __idata unsigned char invalidSize = 1;
      001850 7B 01            [12] 5997 	mov	r3,#0x01
                                   5998 ;	.\ecen4350_lcd_v4.c:1236: clearLCD();
      001852 C0 07            [24] 5999 	push	ar7
      001854 C0 05            [24] 6000 	push	ar5
      001856 C0 03            [24] 6001 	push	ar3
      001858 12r0Dr47         [24] 6002 	lcall	_clearLCD
                                   6003 ;	.\ecen4350_lcd_v4.c:1239: fillTop(GRAY);
      00185B 90 D6 BA         [24] 6004 	mov	dptr,#0xd6ba
      00185E 12r0Br7A         [24] 6005 	lcall	_fillTop
                                   6006 ;	.\ecen4350_lcd_v4.c:1240: setTextSize(5);
      001861 75 82 05         [24] 6007 	mov	dpl,#0x05
      001864 12r04rC4         [24] 6008 	lcall	_setTextSize
                                   6009 ;	.\ecen4350_lcd_v4.c:1241: setColorMenu();
      001867 12r15rC1         [24] 6010 	lcall	_setColorMenu
                                   6011 ;	.\ecen4350_lcd_v4.c:1242: setCursor(30, 0);
      00186A E4               [12] 6012 	clr	a
      00186B F5*00            [12] 6013 	mov	_setCursor_PARM_2,a
      00186D F5*01            [12] 6014 	mov	(_setCursor_PARM_2 + 1),a
      00186F 90 00 1E         [24] 6015 	mov	dptr,#0x001e
      001872 12r04rAA         [24] 6016 	lcall	_setCursor
                                   6017 ;	.\ecen4350_lcd_v4.c:1243: LCD_string_write("[DUMP]\n");
      001875 90r05rD6         [24] 6018 	mov	dptr,#___str_22
      001878 75 F0 80         [24] 6019 	mov	b,#0x80
      00187B 12r0FrC4         [24] 6020 	lcall	_LCD_string_write
                                   6021 ;	.\ecen4350_lcd_v4.c:1244: setColorDefault();
      00187E 12r15r88         [24] 6022 	lcall	_setColorDefault
                                   6023 ;	.\ecen4350_lcd_v4.c:1245: setTextSize(2);
      001881 75 82 02         [24] 6024 	mov	dpl,#0x02
      001884 12r04rC4         [24] 6025 	lcall	_setTextSize
                                   6026 ;	.\ecen4350_lcd_v4.c:1246: setCursor(0, 60);
      001887 75*00 3C         [24] 6027 	mov	_setCursor_PARM_2,#0x3c
      00188A 75*01 00         [24] 6028 	mov	(_setCursor_PARM_2 + 1),#0x00
      00188D 90 00 00         [24] 6029 	mov	dptr,#0x0000
      001890 12r04rAA         [24] 6030 	lcall	_setCursor
                                   6031 ;	.\ecen4350_lcd_v4.c:1247: LCD_string_write(" Address Location:\n");
      001893 90r05rDE         [24] 6032 	mov	dptr,#___str_23
      001896 75 F0 80         [24] 6033 	mov	b,#0x80
      001899 12r0FrC4         [24] 6034 	lcall	_LCD_string_write
                                   6035 ;	.\ecen4350_lcd_v4.c:1248: setCursor(0, 80);
      00189C 75*00 50         [24] 6036 	mov	_setCursor_PARM_2,#0x50
      00189F 75*01 00         [24] 6037 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018A2 90 00 00         [24] 6038 	mov	dptr,#0x0000
      0018A5 12r04rAA         [24] 6039 	lcall	_setCursor
                                   6040 ;	.\ecen4350_lcd_v4.c:1249: setColorGray();
      0018A8 12r15rB6         [24] 6041 	lcall	_setColorGray
                                   6042 ;	.\ecen4350_lcd_v4.c:1250: LCD_string_write(" 0x____");
      0018AB 90r05rF2         [24] 6043 	mov	dptr,#___str_24
      0018AE 75 F0 80         [24] 6044 	mov	b,#0x80
      0018B1 12r0FrC4         [24] 6045 	lcall	_LCD_string_write
                                   6046 ;	.\ecen4350_lcd_v4.c:1251: setColorDefault();
      0018B4 12r15r88         [24] 6047 	lcall	_setColorDefault
                                   6048 ;	.\ecen4350_lcd_v4.c:1252: setCursor(0, 140);
      0018B7 75*00 8C         [24] 6049 	mov	_setCursor_PARM_2,#0x8c
      0018BA 75*01 00         [24] 6050 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018BD 90 00 00         [24] 6051 	mov	dptr,#0x0000
      0018C0 12r04rAA         [24] 6052 	lcall	_setCursor
                                   6053 ;	.\ecen4350_lcd_v4.c:1253: LCD_string_write(" Choose Block Type:\n");
      0018C3 90r05rFA         [24] 6054 	mov	dptr,#___str_25
      0018C6 75 F0 80         [24] 6055 	mov	b,#0x80
      0018C9 12r0FrC4         [24] 6056 	lcall	_LCD_string_write
                                   6057 ;	.\ecen4350_lcd_v4.c:1254: setCursor(0, 160); 
      0018CC 75*00 A0         [24] 6058 	mov	_setCursor_PARM_2,#0xa0
      0018CF 75*01 00         [24] 6059 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018D2 90 00 00         [24] 6060 	mov	dptr,#0x0000
      0018D5 12r04rAA         [24] 6061 	lcall	_setCursor
                                   6062 ;	.\ecen4350_lcd_v4.c:1255: setColorGray();
      0018D8 12r15rB6         [24] 6063 	lcall	_setColorGray
                                   6064 ;	.\ecen4350_lcd_v4.c:1256: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0018DB 90r06r0F         [24] 6065 	mov	dptr,#___str_26
      0018DE 75 F0 80         [24] 6066 	mov	b,#0x80
      0018E1 12r0FrC4         [24] 6067 	lcall	_LCD_string_write
                                   6068 ;	.\ecen4350_lcd_v4.c:1257: setCursor(0, 240);
      0018E4 75*00 F0         [24] 6069 	mov	_setCursor_PARM_2,#0xf0
      0018E7 75*01 00         [24] 6070 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018EA 90 00 00         [24] 6071 	mov	dptr,#0x0000
      0018ED 12r04rAA         [24] 6072 	lcall	_setCursor
                                   6073 ;	.\ecen4350_lcd_v4.c:1258: LCD_string_write(" Input Size:");
      0018F0 90r06r31         [24] 6074 	mov	dptr,#___str_27
      0018F3 75 F0 80         [24] 6075 	mov	b,#0x80
      0018F6 12r0FrC4         [24] 6076 	lcall	_LCD_string_write
                                   6077 ;	.\ecen4350_lcd_v4.c:1259: setColorGray();
      0018F9 12r15rB6         [24] 6078 	lcall	_setColorGray
                                   6079 ;	.\ecen4350_lcd_v4.c:1260: LCD_string_write(" _");
      0018FC 90r06r3E         [24] 6080 	mov	dptr,#___str_28
      0018FF 75 F0 80         [24] 6081 	mov	b,#0x80
      001902 12r0FrC4         [24] 6082 	lcall	_LCD_string_write
                                   6083 ;	.\ecen4350_lcd_v4.c:1267: setColorSelect();
      001905 12r15r93         [24] 6084 	lcall	_setColorSelect
                                   6085 ;	.\ecen4350_lcd_v4.c:1268: setCursor(0, 60);
      001908 75*00 3C         [24] 6086 	mov	_setCursor_PARM_2,#0x3c
      00190B 75*01 00         [24] 6087 	mov	(_setCursor_PARM_2 + 1),#0x00
      00190E 90 00 00         [24] 6088 	mov	dptr,#0x0000
      001911 12r04rAA         [24] 6089 	lcall	_setCursor
                                   6090 ;	.\ecen4350_lcd_v4.c:1269: LCD_string_write(" Address Location:");
      001914 90r06r41         [24] 6091 	mov	dptr,#___str_29
      001917 75 F0 80         [24] 6092 	mov	b,#0x80
      00191A 12r0FrC4         [24] 6093 	lcall	_LCD_string_write
                                   6094 ;	.\ecen4350_lcd_v4.c:1270: setCursor(0, 80);
      00191D 75*00 50         [24] 6095 	mov	_setCursor_PARM_2,#0x50
      001920 75*01 00         [24] 6096 	mov	(_setCursor_PARM_2 + 1),#0x00
      001923 90 00 00         [24] 6097 	mov	dptr,#0x0000
      001926 12r04rAA         [24] 6098 	lcall	_setCursor
                                   6099 ;	.\ecen4350_lcd_v4.c:1271: LCD_string_write(" ");
      001929 90r06r54         [24] 6100 	mov	dptr,#___str_30
      00192C 75 F0 80         [24] 6101 	mov	b,#0x80
      00192F 12r0FrC4         [24] 6102 	lcall	_LCD_string_write
                                   6103 ;	.\ecen4350_lcd_v4.c:1272: setColorHighlight1();
      001932 12r15r9E         [24] 6104 	lcall	_setColorHighlight1
                                   6105 ;	.\ecen4350_lcd_v4.c:1273: LCD_string_write("0x");
      001935 90r05r29         [24] 6106 	mov	dptr,#___str_2
      001938 75 F0 80         [24] 6107 	mov	b,#0x80
      00193B 12r0FrC4         [24] 6108 	lcall	_LCD_string_write
                                   6109 ;	.\ecen4350_lcd_v4.c:1274: address = inputAddress();				// input 16-bit address and store in memory
      00193E 12r15rF9         [24] 6110 	lcall	_inputAddress
      001941 78r09            [12] 6111 	mov	r0,#_dump_address_65536_553
      001943 A6 82            [24] 6112 	mov	@r0,dpl
      001945 08               [12] 6113 	inc	r0
      001946 A6 83            [24] 6114 	mov	@r0,dph
      001948 D0 03            [24] 6115 	pop	ar3
      00194A D0 05            [24] 6116 	pop	ar5
                                   6117 ;	.\ecen4350_lcd_v4.c:1275: d = (unsigned char __xdata *)(address);
      00194C 78r09            [12] 6118 	mov	r0,#_dump_address_65536_553
      00194E 86 04            [24] 6119 	mov	ar4,@r0
      001950 08               [12] 6120 	inc	r0
      001951 86 06            [24] 6121 	mov	ar6,@r0
                                   6122 ;	.\ecen4350_lcd_v4.c:1278: setColorDefault();
      001953 C0 06            [24] 6123 	push	ar6
      001955 C0 05            [24] 6124 	push	ar5
      001957 C0 04            [24] 6125 	push	ar4
      001959 C0 03            [24] 6126 	push	ar3
      00195B 12r15r88         [24] 6127 	lcall	_setColorDefault
                                   6128 ;	.\ecen4350_lcd_v4.c:1279: setCursor(0, 60);
      00195E 75*00 3C         [24] 6129 	mov	_setCursor_PARM_2,#0x3c
      001961 75*01 00         [24] 6130 	mov	(_setCursor_PARM_2 + 1),#0x00
      001964 90 00 00         [24] 6131 	mov	dptr,#0x0000
      001967 12r04rAA         [24] 6132 	lcall	_setCursor
                                   6133 ;	.\ecen4350_lcd_v4.c:1280: LCD_string_write(" Address Location:");
      00196A 90r06r41         [24] 6134 	mov	dptr,#___str_29
      00196D 75 F0 80         [24] 6135 	mov	b,#0x80
      001970 12r0FrC4         [24] 6136 	lcall	_LCD_string_write
                                   6137 ;	.\ecen4350_lcd_v4.c:1281: setCursor(0, 80);
      001973 75*00 50         [24] 6138 	mov	_setCursor_PARM_2,#0x50
      001976 75*01 00         [24] 6139 	mov	(_setCursor_PARM_2 + 1),#0x00
      001979 90 00 00         [24] 6140 	mov	dptr,#0x0000
      00197C 12r04rAA         [24] 6141 	lcall	_setCursor
                                   6142 ;	.\ecen4350_lcd_v4.c:1282: LCD_string_write(" ");
      00197F 90r06r54         [24] 6143 	mov	dptr,#___str_30
      001982 75 F0 80         [24] 6144 	mov	b,#0x80
      001985 12r0FrC4         [24] 6145 	lcall	_LCD_string_write
                                   6146 ;	.\ecen4350_lcd_v4.c:1283: setColorHighlight2();
      001988 12r15rAA         [24] 6147 	lcall	_setColorHighlight2
                                   6148 ;	.\ecen4350_lcd_v4.c:1284: LCD_string_write("0x");
      00198B 90r05r29         [24] 6149 	mov	dptr,#___str_2
      00198E 75 F0 80         [24] 6150 	mov	b,#0x80
      001991 12r0FrC4         [24] 6151 	lcall	_LCD_string_write
                                   6152 ;	.\ecen4350_lcd_v4.c:1285: print16Hex(address);					// print 16-bit address from stored memory
      001994 78r09            [12] 6153 	mov	r0,#_dump_address_65536_553
      001996 86 82            [24] 6154 	mov	dpl,@r0
      001998 08               [12] 6155 	inc	r0
      001999 86 83            [24] 6156 	mov	dph,@r0
      00199B 12r14rAC         [24] 6157 	lcall	_print16Hex
                                   6158 ;	.\ecen4350_lcd_v4.c:1288: setColorSelect();
      00199E 12r15r93         [24] 6159 	lcall	_setColorSelect
                                   6160 ;	.\ecen4350_lcd_v4.c:1289: setCursor(0, 140);
      0019A1 75*00 8C         [24] 6161 	mov	_setCursor_PARM_2,#0x8c
      0019A4 75*01 00         [24] 6162 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019A7 90 00 00         [24] 6163 	mov	dptr,#0x0000
      0019AA 12r04rAA         [24] 6164 	lcall	_setCursor
                                   6165 ;	.\ecen4350_lcd_v4.c:1290: LCD_string_write(" Choose Block Type:");
      0019AD 90r06r56         [24] 6166 	mov	dptr,#___str_31
      0019B0 75 F0 80         [24] 6167 	mov	b,#0x80
      0019B3 12r0FrC4         [24] 6168 	lcall	_LCD_string_write
                                   6169 ;	.\ecen4350_lcd_v4.c:1291: setCursor(0, 160); 
      0019B6 75*00 A0         [24] 6170 	mov	_setCursor_PARM_2,#0xa0
      0019B9 75*01 00         [24] 6171 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019BC 90 00 00         [24] 6172 	mov	dptr,#0x0000
      0019BF 12r04rAA         [24] 6173 	lcall	_setCursor
                                   6174 ;	.\ecen4350_lcd_v4.c:1292: setColorWhite();
      0019C2 12r15rD8         [24] 6175 	lcall	_setColorWhite
                                   6176 ;	.\ecen4350_lcd_v4.c:1293: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0019C5 90r06r0F         [24] 6177 	mov	dptr,#___str_26
      0019C8 75 F0 80         [24] 6178 	mov	b,#0x80
      0019CB 12r0FrC4         [24] 6179 	lcall	_LCD_string_write
      0019CE D0 03            [24] 6180 	pop	ar3
      0019D0 D0 04            [24] 6181 	pop	ar4
      0019D2 D0 05            [24] 6182 	pop	ar5
      0019D4 D0 06            [24] 6183 	pop	ar6
      0019D6 D0 07            [24] 6184 	pop	ar7
                                   6185 ;	.\ecen4350_lcd_v4.c:1296: while (invalidType) {
      0019D8                       6186 00109$:
      0019D8 ED               [12] 6187 	mov	a,r5
      0019D9 70 03            [24] 6188 	jnz	00235$
      0019DB 02r1Br54         [24] 6189 	ljmp	00153$
      0019DE                       6190 00235$:
                                   6191 ;	.\ecen4350_lcd_v4.c:1297: setCursor(0, 160);
      0019DE 75*00 A0         [24] 6192 	mov	_setCursor_PARM_2,#0xa0
      0019E1 75*01 00         [24] 6193 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019E4 90 00 00         [24] 6194 	mov	dptr,#0x0000
      0019E7 C0 06            [24] 6195 	push	ar6
      0019E9 C0 05            [24] 6196 	push	ar5
      0019EB C0 04            [24] 6197 	push	ar4
      0019ED C0 03            [24] 6198 	push	ar3
      0019EF 12r04rAA         [24] 6199 	lcall	_setCursor
                                   6200 ;	.\ecen4350_lcd_v4.c:1298: setColorWhite();
      0019F2 12r15rD8         [24] 6201 	lcall	_setColorWhite
                                   6202 ;	.\ecen4350_lcd_v4.c:1299: LCD_string_write("\n\n");
      0019F5 90r06r6A         [24] 6203 	mov	dptr,#___str_32
      0019F8 75 F0 80         [24] 6204 	mov	b,#0x80
      0019FB 12r0FrC4         [24] 6205 	lcall	_LCD_string_write
                                   6206 ;	.\ecen4350_lcd_v4.c:1301: blockType = inputBlockType();
      0019FE 12r16r9B         [24] 6207 	lcall	_inputBlockType
      001A01 AF 82            [24] 6208 	mov	r7,dpl
      001A03 D0 03            [24] 6209 	pop	ar3
      001A05 D0 04            [24] 6210 	pop	ar4
      001A07 D0 05            [24] 6211 	pop	ar5
      001A09 D0 06            [24] 6212 	pop	ar6
                                   6213 ;	.\ecen4350_lcd_v4.c:1303: if (blockType == 0x1) {
      001A0B BF 01 5B         [24] 6214 	cjne	r7,#0x01,00102$
                                   6215 ;	.\ecen4350_lcd_v4.c:1304: invalidType = 0;
      001A0E 7D 00            [12] 6216 	mov	r5,#0x00
                                   6217 ;	.\ecen4350_lcd_v4.c:1306: setColorDefault();
      001A10 C0 07            [24] 6218 	push	ar7
      001A12 C0 06            [24] 6219 	push	ar6
      001A14 C0 05            [24] 6220 	push	ar5
      001A16 C0 04            [24] 6221 	push	ar4
      001A18 C0 03            [24] 6222 	push	ar3
      001A1A 12r15r88         [24] 6223 	lcall	_setColorDefault
                                   6224 ;	.\ecen4350_lcd_v4.c:1307: setCursor(0, 140);
      001A1D 75*00 8C         [24] 6225 	mov	_setCursor_PARM_2,#0x8c
      001A20 75*01 00         [24] 6226 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A23 90 00 00         [24] 6227 	mov	dptr,#0x0000
      001A26 12r04rAA         [24] 6228 	lcall	_setCursor
                                   6229 ;	.\ecen4350_lcd_v4.c:1308: LCD_string_write(" Choose Block Type:");
      001A29 90r06r56         [24] 6230 	mov	dptr,#___str_31
      001A2C 75 F0 80         [24] 6231 	mov	b,#0x80
      001A2F 12r0FrC4         [24] 6232 	lcall	_LCD_string_write
                                   6233 ;	.\ecen4350_lcd_v4.c:1309: setCursor(0, 160);
      001A32 75*00 A0         [24] 6234 	mov	_setCursor_PARM_2,#0xa0
      001A35 75*01 00         [24] 6235 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A38 90 00 00         [24] 6236 	mov	dptr,#0x0000
      001A3B 12r04rAA         [24] 6237 	lcall	_setCursor
                                   6238 ;	.\ecen4350_lcd_v4.c:1310: LCD_string_write("  ");
      001A3E 90r06r6D         [24] 6239 	mov	dptr,#___str_33
      001A41 75 F0 80         [24] 6240 	mov	b,#0x80
      001A44 12r0FrC4         [24] 6241 	lcall	_LCD_string_write
                                   6242 ;	.\ecen4350_lcd_v4.c:1311: setColorHighlight2();
      001A47 12r15rAA         [24] 6243 	lcall	_setColorHighlight2
                                   6244 ;	.\ecen4350_lcd_v4.c:1312: LCD_string_write("<1> BYTE\n");
      001A4A 90r06r70         [24] 6245 	mov	dptr,#___str_34
      001A4D 75 F0 80         [24] 6246 	mov	b,#0x80
      001A50 12r0FrC4         [24] 6247 	lcall	_LCD_string_write
                                   6248 ;	.\ecen4350_lcd_v4.c:1313: setColorGray();
      001A53 12r15rB6         [24] 6249 	lcall	_setColorGray
                                   6250 ;	.\ecen4350_lcd_v4.c:1314: LCD_string_write("\n\n                \n                ");
      001A56 90r06r7A         [24] 6251 	mov	dptr,#___str_35
      001A59 75 F0 80         [24] 6252 	mov	b,#0x80
      001A5C 12r0FrC4         [24] 6253 	lcall	_LCD_string_write
      001A5F D0 03            [24] 6254 	pop	ar3
      001A61 D0 04            [24] 6255 	pop	ar4
      001A63 D0 05            [24] 6256 	pop	ar5
      001A65 D0 06            [24] 6257 	pop	ar6
      001A67 D0 07            [24] 6258 	pop	ar7
      001A69                       6259 00102$:
                                   6260 ;	.\ecen4350_lcd_v4.c:1315: } if (blockType == 0x2) {
      001A69 BF 02 5E         [24] 6261 	cjne	r7,#0x02,00104$
                                   6262 ;	.\ecen4350_lcd_v4.c:1316: invalidType = 0;
      001A6C 7D 00            [12] 6263 	mov	r5,#0x00
                                   6264 ;	.\ecen4350_lcd_v4.c:1318: setColorDefault();
      001A6E C0 07            [24] 6265 	push	ar7
      001A70 C0 06            [24] 6266 	push	ar6
      001A72 C0 05            [24] 6267 	push	ar5
      001A74 C0 04            [24] 6268 	push	ar4
      001A76 C0 03            [24] 6269 	push	ar3
      001A78 12r15r88         [24] 6270 	lcall	_setColorDefault
                                   6271 ;	.\ecen4350_lcd_v4.c:1319: setCursor(0, 140);
      001A7B 75*00 8C         [24] 6272 	mov	_setCursor_PARM_2,#0x8c
      001A7E 75*01 00         [24] 6273 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A81 90 00 00         [24] 6274 	mov	dptr,#0x0000
      001A84 12r04rAA         [24] 6275 	lcall	_setCursor
                                   6276 ;	.\ecen4350_lcd_v4.c:1320: LCD_string_write(" Choose Block Type:");
      001A87 90r06r56         [24] 6277 	mov	dptr,#___str_31
      001A8A 75 F0 80         [24] 6278 	mov	b,#0x80
      001A8D 12r0FrC4         [24] 6279 	lcall	_LCD_string_write
                                   6280 ;	.\ecen4350_lcd_v4.c:1321: setCursor(0, 160);
      001A90 75*00 A0         [24] 6281 	mov	_setCursor_PARM_2,#0xa0
      001A93 75*01 00         [24] 6282 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A96 90 00 00         [24] 6283 	mov	dptr,#0x0000
      001A99 12r04rAA         [24] 6284 	lcall	_setCursor
                                   6285 ;	.\ecen4350_lcd_v4.c:1322: setColorGray();
      001A9C 12r15rB6         [24] 6286 	lcall	_setColorGray
                                   6287 ;	.\ecen4350_lcd_v4.c:1323: LCD_string_write("\n  ");
      001A9F 90r06r9E         [24] 6288 	mov	dptr,#___str_36
      001AA2 75 F0 80         [24] 6289 	mov	b,#0x80
      001AA5 12r0FrC4         [24] 6290 	lcall	_LCD_string_write
                                   6291 ;	.\ecen4350_lcd_v4.c:1324: setColorHighlight2();
      001AA8 12r15rAA         [24] 6292 	lcall	_setColorHighlight2
                                   6293 ;	.\ecen4350_lcd_v4.c:1325: LCD_string_write("<2> WORD\n");
      001AAB 90r06rA2         [24] 6294 	mov	dptr,#___str_37
      001AAE 75 F0 80         [24] 6295 	mov	b,#0x80
      001AB1 12r0FrC4         [24] 6296 	lcall	_LCD_string_write
                                   6297 ;	.\ecen4350_lcd_v4.c:1326: setColorGray();
      001AB4 12r15rB6         [24] 6298 	lcall	_setColorGray
                                   6299 ;	.\ecen4350_lcd_v4.c:1327: LCD_string_write("\n                \n                ");
      001AB7 90r06rAC         [24] 6300 	mov	dptr,#___str_38
      001ABA 75 F0 80         [24] 6301 	mov	b,#0x80
      001ABD 12r0FrC4         [24] 6302 	lcall	_LCD_string_write
      001AC0 D0 03            [24] 6303 	pop	ar3
      001AC2 D0 04            [24] 6304 	pop	ar4
      001AC4 D0 05            [24] 6305 	pop	ar5
      001AC6 D0 06            [24] 6306 	pop	ar6
      001AC8 D0 07            [24] 6307 	pop	ar7
      001ACA                       6308 00104$:
                                   6309 ;	.\ecen4350_lcd_v4.c:1328: } if (blockType == 0x4) {
      001ACA BF 04 5E         [24] 6310 	cjne	r7,#0x04,00106$
                                   6311 ;	.\ecen4350_lcd_v4.c:1329: invalidType = 0;
      001ACD 7D 00            [12] 6312 	mov	r5,#0x00
                                   6313 ;	.\ecen4350_lcd_v4.c:1331: setColorDefault();
      001ACF C0 07            [24] 6314 	push	ar7
      001AD1 C0 06            [24] 6315 	push	ar6
      001AD3 C0 05            [24] 6316 	push	ar5
      001AD5 C0 04            [24] 6317 	push	ar4
      001AD7 C0 03            [24] 6318 	push	ar3
      001AD9 12r15r88         [24] 6319 	lcall	_setColorDefault
                                   6320 ;	.\ecen4350_lcd_v4.c:1332: setCursor(0, 140);
      001ADC 75*00 8C         [24] 6321 	mov	_setCursor_PARM_2,#0x8c
      001ADF 75*01 00         [24] 6322 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AE2 90 00 00         [24] 6323 	mov	dptr,#0x0000
      001AE5 12r04rAA         [24] 6324 	lcall	_setCursor
                                   6325 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write(" Choose Block Type:");
      001AE8 90r06r56         [24] 6326 	mov	dptr,#___str_31
      001AEB 75 F0 80         [24] 6327 	mov	b,#0x80
      001AEE 12r0FrC4         [24] 6328 	lcall	_LCD_string_write
                                   6329 ;	.\ecen4350_lcd_v4.c:1334: setCursor(0, 160);
      001AF1 75*00 A0         [24] 6330 	mov	_setCursor_PARM_2,#0xa0
      001AF4 75*01 00         [24] 6331 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AF7 90 00 00         [24] 6332 	mov	dptr,#0x0000
      001AFA 12r04rAA         [24] 6333 	lcall	_setCursor
                                   6334 ;	.\ecen4350_lcd_v4.c:1335: setColorGray();
      001AFD 12r15rB6         [24] 6335 	lcall	_setColorGray
                                   6336 ;	.\ecen4350_lcd_v4.c:1336: LCD_string_write("\n\n  ");
      001B00 90r06rCF         [24] 6337 	mov	dptr,#___str_39
      001B03 75 F0 80         [24] 6338 	mov	b,#0x80
      001B06 12r0FrC4         [24] 6339 	lcall	_LCD_string_write
                                   6340 ;	.\ecen4350_lcd_v4.c:1337: setColorHighlight2();
      001B09 12r15rAA         [24] 6341 	lcall	_setColorHighlight2
                                   6342 ;	.\ecen4350_lcd_v4.c:1338: LCD_string_write("<4> DWORD");
      001B0C 90r06rD4         [24] 6343 	mov	dptr,#___str_40
      001B0F 75 F0 80         [24] 6344 	mov	b,#0x80
      001B12 12r0FrC4         [24] 6345 	lcall	_LCD_string_write
                                   6346 ;	.\ecen4350_lcd_v4.c:1339: setColorGray();
      001B15 12r15rB6         [24] 6347 	lcall	_setColorGray
                                   6348 ;	.\ecen4350_lcd_v4.c:1340: LCD_string_write("\n                \n                ");
      001B18 90r06rAC         [24] 6349 	mov	dptr,#___str_38
      001B1B 75 F0 80         [24] 6350 	mov	b,#0x80
      001B1E 12r0FrC4         [24] 6351 	lcall	_LCD_string_write
      001B21 D0 03            [24] 6352 	pop	ar3
      001B23 D0 04            [24] 6353 	pop	ar4
      001B25 D0 05            [24] 6354 	pop	ar5
      001B27 D0 06            [24] 6355 	pop	ar6
      001B29 D0 07            [24] 6356 	pop	ar7
      001B2B                       6357 00106$:
                                   6358 ;	.\ecen4350_lcd_v4.c:1342: if (invalidType) {
      001B2B ED               [12] 6359 	mov	a,r5
      001B2C 70 03            [24] 6360 	jnz	00242$
      001B2E 02r19rD8         [24] 6361 	ljmp	00109$
      001B31                       6362 00242$:
                                   6363 ;	.\ecen4350_lcd_v4.c:1343: setColorRed();
      001B31 C0 07            [24] 6364 	push	ar7
      001B33 C0 06            [24] 6365 	push	ar6
      001B35 C0 05            [24] 6366 	push	ar5
      001B37 C0 04            [24] 6367 	push	ar4
      001B39 C0 03            [24] 6368 	push	ar3
      001B3B 12r15rCD         [24] 6369 	lcall	_setColorRed
                                   6370 ;	.\ecen4350_lcd_v4.c:1344: LCD_string_write("\n  Input Error\n  Try Again");
      001B3E 90r06rDE         [24] 6371 	mov	dptr,#___str_41
      001B41 75 F0 80         [24] 6372 	mov	b,#0x80
      001B44 12r0FrC4         [24] 6373 	lcall	_LCD_string_write
      001B47 D0 03            [24] 6374 	pop	ar3
      001B49 D0 04            [24] 6375 	pop	ar4
      001B4B D0 05            [24] 6376 	pop	ar5
      001B4D D0 06            [24] 6377 	pop	ar6
      001B4F D0 07            [24] 6378 	pop	ar7
      001B51 02r19rD8         [24] 6379 	ljmp	00109$
                                   6380 ;	.\ecen4350_lcd_v4.c:1350: while (invalidSize)
      001B54                       6381 00153$:
      001B54                       6382 00115$:
      001B54 EB               [12] 6383 	mov	a,r3
      001B55 70 03            [24] 6384 	jnz	00243$
      001B57 02r1Cr4F         [24] 6385 	ljmp	00117$
      001B5A                       6386 00243$:
                                   6387 ;	.\ecen4350_lcd_v4.c:1353: setCursor(0, 240);
      001B5A 75*00 F0         [24] 6388 	mov	_setCursor_PARM_2,#0xf0
      001B5D 75*01 00         [24] 6389 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B60 90 00 00         [24] 6390 	mov	dptr,#0x0000
      001B63 C0 07            [24] 6391 	push	ar7
      001B65 C0 06            [24] 6392 	push	ar6
      001B67 C0 04            [24] 6393 	push	ar4
      001B69 C0 03            [24] 6394 	push	ar3
      001B6B 12r04rAA         [24] 6395 	lcall	_setCursor
                                   6396 ;	.\ecen4350_lcd_v4.c:1354: setColorSelect();
      001B6E 12r15r93         [24] 6397 	lcall	_setColorSelect
                                   6398 ;	.\ecen4350_lcd_v4.c:1355: LCD_string_write(" Input Size: ");
      001B71 90r06rF9         [24] 6399 	mov	dptr,#___str_42
      001B74 75 F0 80         [24] 6400 	mov	b,#0x80
      001B77 12r0FrC4         [24] 6401 	lcall	_LCD_string_write
                                   6402 ;	.\ecen4350_lcd_v4.c:1356: setColorHighlight1();
      001B7A 12r15r9E         [24] 6403 	lcall	_setColorHighlight1
                                   6404 ;	.\ecen4350_lcd_v4.c:1357: selection = keyDetect();
      001B7D 12r10rE2         [24] 6405 	lcall	_keyDetect
      001B80 AD 82            [24] 6406 	mov	r5,dpl
      001B82 78r00            [12] 6407 	mov	r0,#_selection
      001B84 A6 05            [24] 6408 	mov	@r0,ar5
                                   6409 ;	.\ecen4350_lcd_v4.c:1358: write(selection);
      001B86 8D 82            [24] 6410 	mov	dpl,r5
      001B88 12r0Fr5E         [24] 6411 	lcall	_write
                                   6412 ;	.\ecen4350_lcd_v4.c:1359: blockSize = ASCIItoHex(selection);
      001B8B 78r00            [12] 6413 	mov	r0,#_selection
      001B8D 86 82            [24] 6414 	mov	dpl,@r0
      001B8F 12r13r50         [24] 6415 	lcall	_ASCIItoHex
      001B92 AD 82            [24] 6416 	mov	r5,dpl
      001B94 D0 03            [24] 6417 	pop	ar3
      001B96 D0 04            [24] 6418 	pop	ar4
                                   6419 ;	.\ecen4350_lcd_v4.c:1360: setColorDefault();
      001B98 C0 05            [24] 6420 	push	ar5
      001B9A C0 04            [24] 6421 	push	ar4
      001B9C C0 03            [24] 6422 	push	ar3
      001B9E 12r15r88         [24] 6423 	lcall	_setColorDefault
      001BA1 D0 03            [24] 6424 	pop	ar3
      001BA3 D0 04            [24] 6425 	pop	ar4
      001BA5 D0 05            [24] 6426 	pop	ar5
      001BA7 D0 06            [24] 6427 	pop	ar6
      001BA9 D0 07            [24] 6428 	pop	ar7
                                   6429 ;	.\ecen4350_lcd_v4.c:1362: if (blockSize != blockType) {
      001BAB ED               [12] 6430 	mov	a,r5
      001BAC B5 07 02         [24] 6431 	cjne	a,ar7,00244$
      001BAF 80 4F            [24] 6432 	sjmp	00113$
      001BB1                       6433 00244$:
                                   6434 ;	.\ecen4350_lcd_v4.c:1363: setColorSelect();
      001BB1 C0 07            [24] 6435 	push	ar7
      001BB3 C0 06            [24] 6436 	push	ar6
      001BB5 C0 04            [24] 6437 	push	ar4
      001BB7 C0 03            [24] 6438 	push	ar3
      001BB9 12r15r93         [24] 6439 	lcall	_setColorSelect
                                   6440 ;	.\ecen4350_lcd_v4.c:1364: LCD_string_write(" Input Size:");
      001BBC 90r06r31         [24] 6441 	mov	dptr,#___str_27
      001BBF 75 F0 80         [24] 6442 	mov	b,#0x80
      001BC2 12r0FrC4         [24] 6443 	lcall	_LCD_string_write
                                   6444 ;	.\ecen4350_lcd_v4.c:1365: setColorGray();
      001BC5 12r15rB6         [24] 6445 	lcall	_setColorGray
                                   6446 ;	.\ecen4350_lcd_v4.c:1366: LCD_string_write(" _");
      001BC8 90r06r3E         [24] 6447 	mov	dptr,#___str_28
      001BCB 75 F0 80         [24] 6448 	mov	b,#0x80
      001BCE 12r0FrC4         [24] 6449 	lcall	_LCD_string_write
                                   6450 ;	.\ecen4350_lcd_v4.c:1367: setCursor(0,260);
      001BD1 75*00 04         [24] 6451 	mov	_setCursor_PARM_2,#0x04
      001BD4 75*01 01         [24] 6452 	mov	(_setCursor_PARM_2 + 1),#0x01
      001BD7 90 00 00         [24] 6453 	mov	dptr,#0x0000
      001BDA 12r04rAA         [24] 6454 	lcall	_setCursor
                                   6455 ;	.\ecen4350_lcd_v4.c:1368: setColorRed();
      001BDD 12r15rCD         [24] 6456 	lcall	_setColorRed
                                   6457 ;	.\ecen4350_lcd_v4.c:1369: LCD_string_write(" Mismatch Error\n Try Again");
      001BE0 90r07r07         [24] 6458 	mov	dptr,#___str_43
      001BE3 75 F0 80         [24] 6459 	mov	b,#0x80
      001BE6 12r0FrC4         [24] 6460 	lcall	_LCD_string_write
                                   6461 ;	.\ecen4350_lcd_v4.c:1370: setCursor(0, 240);
      001BE9 75*00 F0         [24] 6462 	mov	_setCursor_PARM_2,#0xf0
      001BEC 75*01 00         [24] 6463 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BEF 90 00 00         [24] 6464 	mov	dptr,#0x0000
      001BF2 12r04rAA         [24] 6465 	lcall	_setCursor
      001BF5 D0 03            [24] 6466 	pop	ar3
      001BF7 D0 04            [24] 6467 	pop	ar4
      001BF9 D0 06            [24] 6468 	pop	ar6
      001BFB D0 07            [24] 6469 	pop	ar7
      001BFD 02r1Br54         [24] 6470 	ljmp	00115$
      001C00                       6471 00113$:
                                   6472 ;	.\ecen4350_lcd_v4.c:1372: setCursor(0, 240);
      001C00 75*00 F0         [24] 6473 	mov	_setCursor_PARM_2,#0xf0
      001C03 75*01 00         [24] 6474 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C06 90 00 00         [24] 6475 	mov	dptr,#0x0000
      001C09 C0 07            [24] 6476 	push	ar7
      001C0B C0 06            [24] 6477 	push	ar6
      001C0D C0 04            [24] 6478 	push	ar4
      001C0F 12r04rAA         [24] 6479 	lcall	_setCursor
                                   6480 ;	.\ecen4350_lcd_v4.c:1373: setColorDefault();
      001C12 12r15r88         [24] 6481 	lcall	_setColorDefault
                                   6482 ;	.\ecen4350_lcd_v4.c:1374: LCD_string_write(" Input Size: ");
      001C15 90r06rF9         [24] 6483 	mov	dptr,#___str_42
      001C18 75 F0 80         [24] 6484 	mov	b,#0x80
      001C1B 12r0FrC4         [24] 6485 	lcall	_LCD_string_write
                                   6486 ;	.\ecen4350_lcd_v4.c:1375: setColorHighlight2();
      001C1E 12r15rAA         [24] 6487 	lcall	_setColorHighlight2
                                   6488 ;	.\ecen4350_lcd_v4.c:1376: write(selection);
      001C21 78r00            [12] 6489 	mov	r0,#_selection
      001C23 86 82            [24] 6490 	mov	dpl,@r0
      001C25 12r0Fr5E         [24] 6491 	lcall	_write
                                   6492 ;	.\ecen4350_lcd_v4.c:1377: invalidSize = 0;
      001C28 7B 00            [12] 6493 	mov	r3,#0x00
                                   6494 ;	.\ecen4350_lcd_v4.c:1378: setCursor(0,260);
      001C2A 75*00 04         [24] 6495 	mov	_setCursor_PARM_2,#0x04
      001C2D 75*01 01         [24] 6496 	mov	(_setCursor_PARM_2 + 1),#0x01
      001C30 90 00 00         [24] 6497 	mov	dptr,#0x0000
      001C33 C0 03            [24] 6498 	push	ar3
      001C35 12r04rAA         [24] 6499 	lcall	_setCursor
                                   6500 ;	.\ecen4350_lcd_v4.c:1379: setColorGreen();
      001C38 12r15rE3         [24] 6501 	lcall	_setColorGreen
                                   6502 ;	.\ecen4350_lcd_v4.c:1380: LCD_string_write(" Match Confirmed\n                ");
      001C3B 90r07r22         [24] 6503 	mov	dptr,#___str_44
      001C3E 75 F0 80         [24] 6504 	mov	b,#0x80
      001C41 12r0FrC4         [24] 6505 	lcall	_LCD_string_write
      001C44 D0 03            [24] 6506 	pop	ar3
      001C46 D0 04            [24] 6507 	pop	ar4
      001C48 D0 06            [24] 6508 	pop	ar6
      001C4A D0 07            [24] 6509 	pop	ar7
      001C4C 02r1Br54         [24] 6510 	ljmp	00115$
      001C4F                       6511 00117$:
                                   6512 ;	.\ecen4350_lcd_v4.c:1384: delay(40);
      001C4F 90 00 28         [24] 6513 	mov	dptr,#0x0028
      001C52 C0 07            [24] 6514 	push	ar7
      001C54 C0 06            [24] 6515 	push	ar6
      001C56 C0 04            [24] 6516 	push	ar4
      001C58 12r00rE0         [24] 6517 	lcall	_delay
                                   6518 ;	.\ecen4350_lcd_v4.c:1385: clearLCD();
      001C5B 12r0Dr47         [24] 6519 	lcall	_clearLCD
                                   6520 ;	.\ecen4350_lcd_v4.c:1386: fillTop(GRAY);
      001C5E 90 D6 BA         [24] 6521 	mov	dptr,#0xd6ba
      001C61 12r0Br7A         [24] 6522 	lcall	_fillTop
                                   6523 ;	.\ecen4350_lcd_v4.c:1393: setTextSize(5);
      001C64 75 82 05         [24] 6524 	mov	dpl,#0x05
      001C67 12r04rC4         [24] 6525 	lcall	_setTextSize
                                   6526 ;	.\ecen4350_lcd_v4.c:1394: setColorMenu();
      001C6A 12r15rC1         [24] 6527 	lcall	_setColorMenu
                                   6528 ;	.\ecen4350_lcd_v4.c:1395: setCursor(30, 0);
      001C6D E4               [12] 6529 	clr	a
      001C6E F5*00            [12] 6530 	mov	_setCursor_PARM_2,a
      001C70 F5*01            [12] 6531 	mov	(_setCursor_PARM_2 + 1),a
      001C72 90 00 1E         [24] 6532 	mov	dptr,#0x001e
      001C75 12r04rAA         [24] 6533 	lcall	_setCursor
                                   6534 ;	.\ecen4350_lcd_v4.c:1396: LCD_string_write("[DUMP]\n");
      001C78 90r05rD6         [24] 6535 	mov	dptr,#___str_22
      001C7B 75 F0 80         [24] 6536 	mov	b,#0x80
      001C7E 12r0FrC4         [24] 6537 	lcall	_LCD_string_write
                                   6538 ;	.\ecen4350_lcd_v4.c:1397: setColorDefault();
      001C81 12r15r88         [24] 6539 	lcall	_setColorDefault
      001C84 D0 04            [24] 6540 	pop	ar4
      001C86 D0 06            [24] 6541 	pop	ar6
      001C88 D0 07            [24] 6542 	pop	ar7
                                   6543 ;	.\ecen4350_lcd_v4.c:1399: while (exit) {
      001C8A BF 01 03         [24] 6544 	cjne	r7,#0x01,00245$
      001C8D EF               [12] 6545 	mov	a,r7
      001C8E 80 01            [24] 6546 	sjmp	00246$
      001C90                       6547 00245$:
      001C90 E4               [12] 6548 	clr	a
      001C91                       6549 00246$:
      001C91 FD               [12] 6550 	mov	r5,a
      001C92 E4               [12] 6551 	clr	a
      001C93 BF 02 01         [24] 6552 	cjne	r7,#0x02,00247$
      001C96 04               [12] 6553 	inc	a
      001C97                       6554 00247$:
      001C97 F5*52            [12] 6555 	mov	_dump_sloc0_1_0,a
      001C99 E4               [12] 6556 	clr	a
      001C9A BF 04 01         [24] 6557 	cjne	r7,#0x04,00249$
      001C9D 04               [12] 6558 	inc	a
      001C9E                       6559 00249$:
      001C9E FF               [12] 6560 	mov	r7,a
      001C9F                       6561 00126$:
      001C9F 78r0B            [12] 6562 	mov	r0,#_dump_exit_65536_553
      001CA1 E6               [12] 6563 	mov	a,@r0
      001CA2 70 01            [24] 6564 	jnz	00251$
      001CA4 22               [24] 6565 	ret
      001CA5                       6566 00251$:
                                   6567 ;	.\ecen4350_lcd_v4.c:1400: setTextSize(2);
      001CA5 75 82 02         [24] 6568 	mov	dpl,#0x02
      001CA8 C0 07            [24] 6569 	push	ar7
      001CAA C0 06            [24] 6570 	push	ar6
      001CAC C0 05            [24] 6571 	push	ar5
      001CAE C0 04            [24] 6572 	push	ar4
      001CB0 12r04rC4         [24] 6573 	lcall	_setTextSize
                                   6574 ;	.\ecen4350_lcd_v4.c:1401: setColorWhite();
      001CB3 12r15rD8         [24] 6575 	lcall	_setColorWhite
                                   6576 ;	.\ecen4350_lcd_v4.c:1402: setCursor(0, 60);
      001CB6 75*00 3C         [24] 6577 	mov	_setCursor_PARM_2,#0x3c
      001CB9 75*01 00         [24] 6578 	mov	(_setCursor_PARM_2 + 1),#0x00
      001CBC 90 00 00         [24] 6579 	mov	dptr,#0x0000
      001CBF 12r04rAA         [24] 6580 	lcall	_setCursor
                                   6581 ;	.\ecen4350_lcd_v4.c:1403: LCD_string_write(" Address:");
      001CC2 90r07r44         [24] 6582 	mov	dptr,#___str_45
      001CC5 75 F0 80         [24] 6583 	mov	b,#0x80
      001CC8 12r0FrC4         [24] 6584 	lcall	_LCD_string_write
                                   6585 ;	.\ecen4350_lcd_v4.c:1404: setColorDefault();
      001CCB 12r15r88         [24] 6586 	lcall	_setColorDefault
                                   6587 ;	.\ecen4350_lcd_v4.c:1405: setCursor(0, 80);
      001CCE 75*00 50         [24] 6588 	mov	_setCursor_PARM_2,#0x50
      001CD1 75*01 00         [24] 6589 	mov	(_setCursor_PARM_2 + 1),#0x00
      001CD4 90 00 00         [24] 6590 	mov	dptr,#0x0000
      001CD7 12r04rAA         [24] 6591 	lcall	_setCursor
                                   6592 ;	.\ecen4350_lcd_v4.c:1406: LCD_string_write(" 0x");
      001CDA 90r07r4E         [24] 6593 	mov	dptr,#___str_46
      001CDD 75 F0 80         [24] 6594 	mov	b,#0x80
      001CE0 12r0FrC4         [24] 6595 	lcall	_LCD_string_write
                                   6596 ;	.\ecen4350_lcd_v4.c:1407: print16Hex(address);
      001CE3 78r09            [12] 6597 	mov	r0,#_dump_address_65536_553
      001CE5 86 82            [24] 6598 	mov	dpl,@r0
      001CE7 08               [12] 6599 	inc	r0
      001CE8 86 83            [24] 6600 	mov	dph,@r0
      001CEA 12r14rAC         [24] 6601 	lcall	_print16Hex
      001CED D0 04            [24] 6602 	pop	ar4
      001CEF D0 05            [24] 6603 	pop	ar5
      001CF1 D0 06            [24] 6604 	pop	ar6
      001CF3 D0 07            [24] 6605 	pop	ar7
                                   6606 ;	.\ecen4350_lcd_v4.c:1408: if (blockType == 0x1)
      001CF5 ED               [12] 6607 	mov	a,r5
      001CF6 70 03            [24] 6608 	jnz	00252$
      001CF8 02r1DrBD         [24] 6609 	ljmp	00119$
      001CFB                       6610 00252$:
                                   6611 ;	.\ecen4350_lcd_v4.c:1410: setCursor(0, 120);
      001CFB 75*00 78         [24] 6612 	mov	_setCursor_PARM_2,#0x78
      001CFE 75*01 00         [24] 6613 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D01 90 00 00         [24] 6614 	mov	dptr,#0x0000
      001D04 C0 07            [24] 6615 	push	ar7
      001D06 C0 06            [24] 6616 	push	ar6
      001D08 C0 05            [24] 6617 	push	ar5
      001D0A C0 04            [24] 6618 	push	ar4
      001D0C 12r04rAA         [24] 6619 	lcall	_setCursor
                                   6620 ;	.\ecen4350_lcd_v4.c:1411: setColorWhite();
      001D0F 12r15rD8         [24] 6621 	lcall	_setColorWhite
                                   6622 ;	.\ecen4350_lcd_v4.c:1412: LCD_string_write(" Hex Data:");
      001D12 90r07r52         [24] 6623 	mov	dptr,#___str_47
      001D15 75 F0 80         [24] 6624 	mov	b,#0x80
      001D18 12r0FrC4         [24] 6625 	lcall	_LCD_string_write
                                   6626 ;	.\ecen4350_lcd_v4.c:1413: setColorDefault();
      001D1B 12r15r88         [24] 6627 	lcall	_setColorDefault
                                   6628 ;	.\ecen4350_lcd_v4.c:1414: setCursor(10, 140);
      001D1E 75*00 8C         [24] 6629 	mov	_setCursor_PARM_2,#0x8c
      001D21 75*01 00         [24] 6630 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D24 90 00 0A         [24] 6631 	mov	dptr,#0x000a
      001D27 12r04rAA         [24] 6632 	lcall	_setCursor
      001D2A D0 04            [24] 6633 	pop	ar4
      001D2C D0 05            [24] 6634 	pop	ar5
      001D2E D0 06            [24] 6635 	pop	ar6
                                   6636 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6637 ;	assignBit
      001D30 C2 B5            [12] 6638 	clr	_P3_5
                                   6639 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001D32 8C 82            [24] 6640 	mov	dpl,r4
      001D34 8E 83            [24] 6641 	mov	dph,r6
      001D36 E0               [24] 6642 	movx	a,@dptr
      001D37 F5 82            [12] 6643 	mov	dpl,a
                                   6644 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6645 ;	assignBit
      001D39 D2 B5            [12] 6646 	setb	_P3_5
                                   6647 ;	.\ecen4350_lcd_v4.c:1415: print8Hex(ramRead8(d));
      001D3B C0 06            [24] 6648 	push	ar6
      001D3D C0 05            [24] 6649 	push	ar5
      001D3F C0 04            [24] 6650 	push	ar4
      001D41 12r14r95         [24] 6651 	lcall	_print8Hex
                                   6652 ;	.\ecen4350_lcd_v4.c:1417: setCursor(0, 180);
      001D44 75*00 B4         [24] 6653 	mov	_setCursor_PARM_2,#0xb4
      001D47 75*01 00         [24] 6654 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D4A 90 00 00         [24] 6655 	mov	dptr,#0x0000
      001D4D 12r04rAA         [24] 6656 	lcall	_setCursor
                                   6657 ;	.\ecen4350_lcd_v4.c:1418: setColorWhite();
      001D50 12r15rD8         [24] 6658 	lcall	_setColorWhite
                                   6659 ;	.\ecen4350_lcd_v4.c:1419: LCD_string_write(" ASCII Data:");
      001D53 90r07r5D         [24] 6660 	mov	dptr,#___str_48
      001D56 75 F0 80         [24] 6661 	mov	b,#0x80
      001D59 12r0FrC4         [24] 6662 	lcall	_LCD_string_write
                                   6663 ;	.\ecen4350_lcd_v4.c:1420: setColorDefault();
      001D5C 12r15r88         [24] 6664 	lcall	_setColorDefault
                                   6665 ;	.\ecen4350_lcd_v4.c:1421: setCursor(10, 200);
      001D5F 75*00 C8         [24] 6666 	mov	_setCursor_PARM_2,#0xc8
      001D62 75*01 00         [24] 6667 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D65 90 00 0A         [24] 6668 	mov	dptr,#0x000a
      001D68 12r04rAA         [24] 6669 	lcall	_setCursor
      001D6B D0 04            [24] 6670 	pop	ar4
      001D6D D0 05            [24] 6671 	pop	ar5
      001D6F D0 06            [24] 6672 	pop	ar6
                                   6673 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6674 ;	assignBit
      001D71 C2 B5            [12] 6675 	clr	_P3_5
                                   6676 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001D73 8C 82            [24] 6677 	mov	dpl,r4
      001D75 8E 83            [24] 6678 	mov	dph,r6
      001D77 E0               [24] 6679 	movx	a,@dptr
      001D78 F5 82            [12] 6680 	mov	dpl,a
                                   6681 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6682 ;	assignBit
      001D7A D2 B5            [12] 6683 	setb	_P3_5
                                   6684 ;	.\ecen4350_lcd_v4.c:1422: print8ASCII(ramRead8(d));
      001D7C C0 06            [24] 6685 	push	ar6
      001D7E C0 05            [24] 6686 	push	ar5
      001D80 C0 04            [24] 6687 	push	ar4
      001D82 12r15r17         [24] 6688 	lcall	_print8ASCII
                                   6689 ;	.\ecen4350_lcd_v4.c:1424: setCursor(0, 240);
      001D85 75*00 F0         [24] 6690 	mov	_setCursor_PARM_2,#0xf0
      001D88 75*01 00         [24] 6691 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D8B 90 00 00         [24] 6692 	mov	dptr,#0x0000
      001D8E 12r04rAA         [24] 6693 	lcall	_setCursor
                                   6694 ;	.\ecen4350_lcd_v4.c:1425: setColorWhite();
      001D91 12r15rD8         [24] 6695 	lcall	_setColorWhite
                                   6696 ;	.\ecen4350_lcd_v4.c:1426: LCD_string_write(" Data Type:");
      001D94 90r07r6A         [24] 6697 	mov	dptr,#___str_49
      001D97 75 F0 80         [24] 6698 	mov	b,#0x80
      001D9A 12r0FrC4         [24] 6699 	lcall	_LCD_string_write
                                   6700 ;	.\ecen4350_lcd_v4.c:1427: setCursor(0, 260);
      001D9D 75*00 04         [24] 6701 	mov	_setCursor_PARM_2,#0x04
      001DA0 75*01 01         [24] 6702 	mov	(_setCursor_PARM_2 + 1),#0x01
      001DA3 90 00 00         [24] 6703 	mov	dptr,#0x0000
      001DA6 12r04rAA         [24] 6704 	lcall	_setCursor
                                   6705 ;	.\ecen4350_lcd_v4.c:1428: setColorDefault();
      001DA9 12r15r88         [24] 6706 	lcall	_setColorDefault
                                   6707 ;	.\ecen4350_lcd_v4.c:1429: LCD_string_write(" BYTE");
      001DAC 90r07r76         [24] 6708 	mov	dptr,#___str_50
      001DAF 75 F0 80         [24] 6709 	mov	b,#0x80
      001DB2 12r0FrC4         [24] 6710 	lcall	_LCD_string_write
      001DB5 D0 04            [24] 6711 	pop	ar4
      001DB7 D0 05            [24] 6712 	pop	ar5
      001DB9 D0 06            [24] 6713 	pop	ar6
      001DBB D0 07            [24] 6714 	pop	ar7
      001DBD                       6715 00119$:
                                   6716 ;	.\ecen4350_lcd_v4.c:1431: if (blockType == 0x2)
      001DBD E5*52            [12] 6717 	mov	a,_dump_sloc0_1_0
      001DBF 70 03            [24] 6718 	jnz	00253$
      001DC1 02r1ErE1         [24] 6719 	ljmp	00121$
      001DC4                       6720 00253$:
                                   6721 ;	.\ecen4350_lcd_v4.c:1433: setCursor(0, 120);
      001DC4 C0 07            [24] 6722 	push	ar7
      001DC6 75*00 78         [24] 6723 	mov	_setCursor_PARM_2,#0x78
      001DC9 75*01 00         [24] 6724 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DCC 90 00 00         [24] 6725 	mov	dptr,#0x0000
      001DCF C0 07            [24] 6726 	push	ar7
      001DD1 C0 06            [24] 6727 	push	ar6
      001DD3 C0 05            [24] 6728 	push	ar5
      001DD5 C0 04            [24] 6729 	push	ar4
      001DD7 12r04rAA         [24] 6730 	lcall	_setCursor
                                   6731 ;	.\ecen4350_lcd_v4.c:1434: setColorWhite();
      001DDA 12r15rD8         [24] 6732 	lcall	_setColorWhite
                                   6733 ;	.\ecen4350_lcd_v4.c:1435: LCD_string_write(" Hex Data:");
      001DDD 90r07r52         [24] 6734 	mov	dptr,#___str_47
      001DE0 75 F0 80         [24] 6735 	mov	b,#0x80
      001DE3 12r0FrC4         [24] 6736 	lcall	_LCD_string_write
                                   6737 ;	.\ecen4350_lcd_v4.c:1436: setColorDefault();
      001DE6 12r15r88         [24] 6738 	lcall	_setColorDefault
                                   6739 ;	.\ecen4350_lcd_v4.c:1437: setCursor(10, 140);
      001DE9 75*00 8C         [24] 6740 	mov	_setCursor_PARM_2,#0x8c
      001DEC 75*01 00         [24] 6741 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DEF 90 00 0A         [24] 6742 	mov	dptr,#0x000a
      001DF2 12r04rAA         [24] 6743 	lcall	_setCursor
      001DF5 D0 04            [24] 6744 	pop	ar4
      001DF7 D0 05            [24] 6745 	pop	ar5
      001DF9 D0 06            [24] 6746 	pop	ar6
                                   6747 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6748 ;	assignBit
      001DFB C2 B5            [12] 6749 	clr	_P3_5
                                   6750 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001DFD 8C 82            [24] 6751 	mov	dpl,r4
      001DFF 8E 83            [24] 6752 	mov	dph,r6
      001E01 E0               [24] 6753 	movx	a,@dptr
      001E02 F5 82            [12] 6754 	mov	dpl,a
                                   6755 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6756 ;	assignBit
      001E04 D2 B5            [12] 6757 	setb	_P3_5
                                   6758 ;	.\ecen4350_lcd_v4.c:1438: print8Hex(ramRead8(d));
      001E06 C0 06            [24] 6759 	push	ar6
      001E08 C0 05            [24] 6760 	push	ar5
      001E0A C0 04            [24] 6761 	push	ar4
      001E0C 12r14r95         [24] 6762 	lcall	_print8Hex
      001E0F D0 04            [24] 6763 	pop	ar4
      001E11 D0 05            [24] 6764 	pop	ar5
      001E13 D0 06            [24] 6765 	pop	ar6
      001E15 D0 07            [24] 6766 	pop	ar7
                                   6767 ;	.\ecen4350_lcd_v4.c:1439: d++;
      001E17 74 01            [12] 6768 	mov	a,#0x01
      001E19 2C               [12] 6769 	add	a,r4
      001E1A FB               [12] 6770 	mov	r3,a
      001E1B E4               [12] 6771 	clr	a
      001E1C 3E               [12] 6772 	addc	a,r6
      001E1D FF               [12] 6773 	mov	r7,a
                                   6774 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6775 ;	assignBit
      001E1E C2 B5            [12] 6776 	clr	_P3_5
                                   6777 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001E20 8B 82            [24] 6778 	mov	dpl,r3
      001E22 8F 83            [24] 6779 	mov	dph,r7
      001E24 E0               [24] 6780 	movx	a,@dptr
      001E25 F5 82            [12] 6781 	mov	dpl,a
                                   6782 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6783 ;	assignBit
      001E27 D2 B5            [12] 6784 	setb	_P3_5
                                   6785 ;	.\ecen4350_lcd_v4.c:1440: print8Hex(ramRead8(d));
      001E29 C0 07            [24] 6786 	push	ar7
      001E2B C0 05            [24] 6787 	push	ar5
      001E2D C0 03            [24] 6788 	push	ar3
      001E2F 12r14r95         [24] 6789 	lcall	_print8Hex
      001E32 D0 03            [24] 6790 	pop	ar3
      001E34 D0 05            [24] 6791 	pop	ar5
      001E36 D0 07            [24] 6792 	pop	ar7
                                   6793 ;	.\ecen4350_lcd_v4.c:1441: d--;
      001E38 1B               [12] 6794 	dec	r3
      001E39 BB FF 01         [24] 6795 	cjne	r3,#0xff,00254$
      001E3C 1F               [12] 6796 	dec	r7
      001E3D                       6797 00254$:
                                   6798 ;	.\ecen4350_lcd_v4.c:1443: setCursor(0, 180);
      001E3D 75*00 B4         [24] 6799 	mov	_setCursor_PARM_2,#0xb4
      001E40 75*01 00         [24] 6800 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E43 90 00 00         [24] 6801 	mov	dptr,#0x0000
      001E46 C0 07            [24] 6802 	push	ar7
      001E48 C0 05            [24] 6803 	push	ar5
      001E4A C0 03            [24] 6804 	push	ar3
      001E4C 12r04rAA         [24] 6805 	lcall	_setCursor
                                   6806 ;	.\ecen4350_lcd_v4.c:1444: setColorWhite();
      001E4F 12r15rD8         [24] 6807 	lcall	_setColorWhite
                                   6808 ;	.\ecen4350_lcd_v4.c:1445: LCD_string_write(" ASCII Data:");
      001E52 90r07r5D         [24] 6809 	mov	dptr,#___str_48
      001E55 75 F0 80         [24] 6810 	mov	b,#0x80
      001E58 12r0FrC4         [24] 6811 	lcall	_LCD_string_write
                                   6812 ;	.\ecen4350_lcd_v4.c:1446: setColorDefault();
      001E5B 12r15r88         [24] 6813 	lcall	_setColorDefault
                                   6814 ;	.\ecen4350_lcd_v4.c:1447: setCursor(10, 200);
      001E5E 75*00 C8         [24] 6815 	mov	_setCursor_PARM_2,#0xc8
      001E61 75*01 00         [24] 6816 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E64 90 00 0A         [24] 6817 	mov	dptr,#0x000a
      001E67 12r04rAA         [24] 6818 	lcall	_setCursor
      001E6A D0 03            [24] 6819 	pop	ar3
      001E6C D0 05            [24] 6820 	pop	ar5
      001E6E D0 07            [24] 6821 	pop	ar7
                                   6822 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6823 ;	assignBit
      001E70 C2 B5            [12] 6824 	clr	_P3_5
                                   6825 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001E72 8B 82            [24] 6826 	mov	dpl,r3
      001E74 8F 83            [24] 6827 	mov	dph,r7
      001E76 E0               [24] 6828 	movx	a,@dptr
      001E77 F5 82            [12] 6829 	mov	dpl,a
                                   6830 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6831 ;	assignBit
      001E79 D2 B5            [12] 6832 	setb	_P3_5
                                   6833 ;	.\ecen4350_lcd_v4.c:1448: print8ASCII(ramRead8(d));
      001E7B C0 07            [24] 6834 	push	ar7
      001E7D C0 05            [24] 6835 	push	ar5
      001E7F C0 03            [24] 6836 	push	ar3
      001E81 12r15r17         [24] 6837 	lcall	_print8ASCII
      001E84 D0 03            [24] 6838 	pop	ar3
      001E86 D0 05            [24] 6839 	pop	ar5
      001E88 D0 07            [24] 6840 	pop	ar7
                                   6841 ;	.\ecen4350_lcd_v4.c:1449: d++;
      001E8A 74 01            [12] 6842 	mov	a,#0x01
      001E8C 2B               [12] 6843 	add	a,r3
      001E8D FC               [12] 6844 	mov	r4,a
      001E8E E4               [12] 6845 	clr	a
      001E8F 3F               [12] 6846 	addc	a,r7
      001E90 FE               [12] 6847 	mov	r6,a
                                   6848 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6849 ;	assignBit
      001E91 C2 B5            [12] 6850 	clr	_P3_5
                                   6851 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001E93 8C 82            [24] 6852 	mov	dpl,r4
      001E95 8E 83            [24] 6853 	mov	dph,r6
      001E97 E0               [24] 6854 	movx	a,@dptr
      001E98 F5 82            [12] 6855 	mov	dpl,a
                                   6856 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6857 ;	assignBit
      001E9A D2 B5            [12] 6858 	setb	_P3_5
                                   6859 ;	.\ecen4350_lcd_v4.c:1450: print8ASCII(ramRead8(d));
      001E9C C0 07            [24] 6860 	push	ar7
      001E9E C0 06            [24] 6861 	push	ar6
      001EA0 C0 05            [24] 6862 	push	ar5
      001EA2 C0 04            [24] 6863 	push	ar4
      001EA4 12r15r17         [24] 6864 	lcall	_print8ASCII
                                   6865 ;	.\ecen4350_lcd_v4.c:1452: setCursor(0, 240);
      001EA7 75*00 F0         [24] 6866 	mov	_setCursor_PARM_2,#0xf0
      001EAA 75*01 00         [24] 6867 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EAD 90 00 00         [24] 6868 	mov	dptr,#0x0000
      001EB0 12r04rAA         [24] 6869 	lcall	_setCursor
                                   6870 ;	.\ecen4350_lcd_v4.c:1453: setColorWhite();
      001EB3 12r15rD8         [24] 6871 	lcall	_setColorWhite
                                   6872 ;	.\ecen4350_lcd_v4.c:1454: LCD_string_write(" Data Type:");
      001EB6 90r07r6A         [24] 6873 	mov	dptr,#___str_49
      001EB9 75 F0 80         [24] 6874 	mov	b,#0x80
      001EBC 12r0FrC4         [24] 6875 	lcall	_LCD_string_write
                                   6876 ;	.\ecen4350_lcd_v4.c:1455: setColorDefault();
      001EBF 12r15r88         [24] 6877 	lcall	_setColorDefault
                                   6878 ;	.\ecen4350_lcd_v4.c:1456: setCursor(0, 260);
      001EC2 75*00 04         [24] 6879 	mov	_setCursor_PARM_2,#0x04
      001EC5 75*01 01         [24] 6880 	mov	(_setCursor_PARM_2 + 1),#0x01
      001EC8 90 00 00         [24] 6881 	mov	dptr,#0x0000
      001ECB 12r04rAA         [24] 6882 	lcall	_setCursor
                                   6883 ;	.\ecen4350_lcd_v4.c:1457: LCD_string_write(" WORD");
      001ECE 90r07r7C         [24] 6884 	mov	dptr,#___str_51
      001ED1 75 F0 80         [24] 6885 	mov	b,#0x80
      001ED4 12r0FrC4         [24] 6886 	lcall	_LCD_string_write
      001ED7 D0 04            [24] 6887 	pop	ar4
      001ED9 D0 05            [24] 6888 	pop	ar5
      001EDB D0 06            [24] 6889 	pop	ar6
      001EDD D0 07            [24] 6890 	pop	ar7
                                   6891 ;	.\ecen4350_lcd_v4.c:1513: return;
      001EDF D0 07            [24] 6892 	pop	ar7
                                   6893 ;	.\ecen4350_lcd_v4.c:1457: LCD_string_write(" WORD");
      001EE1                       6894 00121$:
                                   6895 ;	.\ecen4350_lcd_v4.c:1459: if (blockType == 0x4)
      001EE1 EF               [12] 6896 	mov	a,r7
      001EE2 70 03            [24] 6897 	jnz	00255$
      001EE4 02r20r8E         [24] 6898 	ljmp	00123$
      001EE7                       6899 00255$:
                                   6900 ;	.\ecen4350_lcd_v4.c:1461: setCursor(0, 120);
      001EE7 75*00 78         [24] 6901 	mov	_setCursor_PARM_2,#0x78
      001EEA 75*01 00         [24] 6902 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EED 90 00 00         [24] 6903 	mov	dptr,#0x0000
      001EF0 C0 07            [24] 6904 	push	ar7
      001EF2 C0 06            [24] 6905 	push	ar6
      001EF4 C0 05            [24] 6906 	push	ar5
      001EF6 C0 04            [24] 6907 	push	ar4
      001EF8 12r04rAA         [24] 6908 	lcall	_setCursor
                                   6909 ;	.\ecen4350_lcd_v4.c:1462: setColorWhite();
      001EFB 12r15rD8         [24] 6910 	lcall	_setColorWhite
                                   6911 ;	.\ecen4350_lcd_v4.c:1463: LCD_string_write(" Hex Data:");
      001EFE 90r07r52         [24] 6912 	mov	dptr,#___str_47
      001F01 75 F0 80         [24] 6913 	mov	b,#0x80
      001F04 12r0FrC4         [24] 6914 	lcall	_LCD_string_write
                                   6915 ;	.\ecen4350_lcd_v4.c:1464: setColorDefault();
      001F07 12r15r88         [24] 6916 	lcall	_setColorDefault
                                   6917 ;	.\ecen4350_lcd_v4.c:1465: setCursor(10, 140);
      001F0A 75*00 8C         [24] 6918 	mov	_setCursor_PARM_2,#0x8c
      001F0D 75*01 00         [24] 6919 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F10 90 00 0A         [24] 6920 	mov	dptr,#0x000a
      001F13 12r04rAA         [24] 6921 	lcall	_setCursor
      001F16 D0 04            [24] 6922 	pop	ar4
      001F18 D0 05            [24] 6923 	pop	ar5
      001F1A D0 06            [24] 6924 	pop	ar6
                                   6925 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6926 ;	assignBit
      001F1C C2 B5            [12] 6927 	clr	_P3_5
                                   6928 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F1E 8C 82            [24] 6929 	mov	dpl,r4
      001F20 8E 83            [24] 6930 	mov	dph,r6
      001F22 E0               [24] 6931 	movx	a,@dptr
      001F23 F5 82            [12] 6932 	mov	dpl,a
                                   6933 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6934 ;	assignBit
      001F25 D2 B5            [12] 6935 	setb	_P3_5
                                   6936 ;	.\ecen4350_lcd_v4.c:1466: print8Hex(ramRead8(d));
      001F27 C0 06            [24] 6937 	push	ar6
      001F29 C0 05            [24] 6938 	push	ar5
      001F2B C0 04            [24] 6939 	push	ar4
      001F2D 12r14r95         [24] 6940 	lcall	_print8Hex
      001F30 D0 04            [24] 6941 	pop	ar4
      001F32 D0 05            [24] 6942 	pop	ar5
      001F34 D0 06            [24] 6943 	pop	ar6
                                   6944 ;	.\ecen4350_lcd_v4.c:1467: d++;
      001F36 74 01            [12] 6945 	mov	a,#0x01
      001F38 2C               [12] 6946 	add	a,r4
      001F39 FA               [12] 6947 	mov	r2,a
      001F3A E4               [12] 6948 	clr	a
      001F3B 3E               [12] 6949 	addc	a,r6
      001F3C FB               [12] 6950 	mov	r3,a
                                   6951 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6952 ;	assignBit
      001F3D C2 B5            [12] 6953 	clr	_P3_5
                                   6954 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F3F 8A 82            [24] 6955 	mov	dpl,r2
      001F41 8B 83            [24] 6956 	mov	dph,r3
      001F43 E0               [24] 6957 	movx	a,@dptr
      001F44 F5 82            [12] 6958 	mov	dpl,a
                                   6959 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6960 ;	assignBit
      001F46 D2 B5            [12] 6961 	setb	_P3_5
                                   6962 ;	.\ecen4350_lcd_v4.c:1468: print8Hex(ramRead8(d));
      001F48 C0 05            [24] 6963 	push	ar5
      001F4A C0 03            [24] 6964 	push	ar3
      001F4C C0 02            [24] 6965 	push	ar2
      001F4E 12r14r95         [24] 6966 	lcall	_print8Hex
      001F51 D0 02            [24] 6967 	pop	ar2
      001F53 D0 03            [24] 6968 	pop	ar3
      001F55 D0 05            [24] 6969 	pop	ar5
      001F57 D0 07            [24] 6970 	pop	ar7
                                   6971 ;	.\ecen4350_lcd_v4.c:1469: d++;
      001F59 0A               [12] 6972 	inc	r2
      001F5A BA 00 01         [24] 6973 	cjne	r2,#0x00,00256$
      001F5D 0B               [12] 6974 	inc	r3
      001F5E                       6975 00256$:
                                   6976 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6977 ;	assignBit
      001F5E C2 B5            [12] 6978 	clr	_P3_5
                                   6979 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F60 8A 82            [24] 6980 	mov	dpl,r2
      001F62 8B 83            [24] 6981 	mov	dph,r3
      001F64 E0               [24] 6982 	movx	a,@dptr
      001F65 F5 82            [12] 6983 	mov	dpl,a
                                   6984 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6985 ;	assignBit
      001F67 D2 B5            [12] 6986 	setb	_P3_5
                                   6987 ;	.\ecen4350_lcd_v4.c:1470: print8Hex(ramRead8(d));
      001F69 C0 07            [24] 6988 	push	ar7
      001F6B C0 05            [24] 6989 	push	ar5
      001F6D C0 03            [24] 6990 	push	ar3
      001F6F C0 02            [24] 6991 	push	ar2
      001F71 12r14r95         [24] 6992 	lcall	_print8Hex
      001F74 D0 02            [24] 6993 	pop	ar2
      001F76 D0 03            [24] 6994 	pop	ar3
                                   6995 ;	.\ecen4350_lcd_v4.c:1471: d++;
      001F78 74 01            [12] 6996 	mov	a,#0x01
      001F7A 2A               [12] 6997 	add	a,r2
      001F7B F5*50            [12] 6998 	mov	_dump_d_65536_553,a
      001F7D E4               [12] 6999 	clr	a
      001F7E 3B               [12] 7000 	addc	a,r3
      001F7F F5*51            [12] 7001 	mov	(_dump_d_65536_553 + 1),a
                                   7002 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7003 ;	assignBit
      001F81 C2 B5            [12] 7004 	clr	_P3_5
                                   7005 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F83 85*50 82         [24] 7006 	mov	dpl,_dump_d_65536_553
      001F86 85*51 83         [24] 7007 	mov	dph,(_dump_d_65536_553 + 1)
      001F89 E0               [24] 7008 	movx	a,@dptr
      001F8A FB               [12] 7009 	mov	r3,a
                                   7010 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7011 ;	assignBit
      001F8B D2 B5            [12] 7012 	setb	_P3_5
                                   7013 ;	.\ecen4350_lcd_v4.c:1472: print8Hex(ramRead8(d));
      001F8D 8B 82            [24] 7014 	mov	dpl,r3
      001F8F 12r14r95         [24] 7015 	lcall	_print8Hex
      001F92 D0 05            [24] 7016 	pop	ar5
      001F94 D0 07            [24] 7017 	pop	ar7
                                   7018 ;	.\ecen4350_lcd_v4.c:1473: d--;
      001F96 E5*50            [12] 7019 	mov	a,_dump_d_65536_553
      001F98 24 FF            [12] 7020 	add	a,#0xff
      001F9A FA               [12] 7021 	mov	r2,a
      001F9B E5*51            [12] 7022 	mov	a,(_dump_d_65536_553 + 1)
      001F9D 34 FF            [12] 7023 	addc	a,#0xff
      001F9F FB               [12] 7024 	mov	r3,a
                                   7025 ;	.\ecen4350_lcd_v4.c:1474: d--;
      001FA0 1A               [12] 7026 	dec	r2
      001FA1 BA FF 01         [24] 7027 	cjne	r2,#0xff,00257$
      001FA4 1B               [12] 7028 	dec	r3
      001FA5                       7029 00257$:
                                   7030 ;	.\ecen4350_lcd_v4.c:1475: d--;
      001FA5 1A               [12] 7031 	dec	r2
      001FA6 BA FF 01         [24] 7032 	cjne	r2,#0xff,00258$
      001FA9 1B               [12] 7033 	dec	r3
      001FAA                       7034 00258$:
                                   7035 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 180);
      001FAA 75*00 B4         [24] 7036 	mov	_setCursor_PARM_2,#0xb4
      001FAD 75*01 00         [24] 7037 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FB0 90 00 00         [24] 7038 	mov	dptr,#0x0000
      001FB3 C0 07            [24] 7039 	push	ar7
      001FB5 C0 05            [24] 7040 	push	ar5
      001FB7 C0 03            [24] 7041 	push	ar3
      001FB9 C0 02            [24] 7042 	push	ar2
      001FBB 12r04rAA         [24] 7043 	lcall	_setCursor
                                   7044 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      001FBE 12r15rD8         [24] 7045 	lcall	_setColorWhite
                                   7046 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" ASCII Data:");
      001FC1 90r07r5D         [24] 7047 	mov	dptr,#___str_48
      001FC4 75 F0 80         [24] 7048 	mov	b,#0x80
      001FC7 12r0FrC4         [24] 7049 	lcall	_LCD_string_write
                                   7050 ;	.\ecen4350_lcd_v4.c:1480: setColorDefault();
      001FCA 12r15r88         [24] 7051 	lcall	_setColorDefault
                                   7052 ;	.\ecen4350_lcd_v4.c:1481: setCursor(10, 200);
      001FCD 75*00 C8         [24] 7053 	mov	_setCursor_PARM_2,#0xc8
      001FD0 75*01 00         [24] 7054 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FD3 90 00 0A         [24] 7055 	mov	dptr,#0x000a
      001FD6 12r04rAA         [24] 7056 	lcall	_setCursor
      001FD9 D0 02            [24] 7057 	pop	ar2
      001FDB D0 03            [24] 7058 	pop	ar3
                                   7059 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7060 ;	assignBit
      001FDD C2 B5            [12] 7061 	clr	_P3_5
                                   7062 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001FDF 8A 82            [24] 7063 	mov	dpl,r2
      001FE1 8B 83            [24] 7064 	mov	dph,r3
      001FE3 E0               [24] 7065 	movx	a,@dptr
      001FE4 F5 82            [12] 7066 	mov	dpl,a
                                   7067 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7068 ;	assignBit
      001FE6 D2 B5            [12] 7069 	setb	_P3_5
                                   7070 ;	.\ecen4350_lcd_v4.c:1482: print8ASCII(ramRead8(d));
      001FE8 C0 03            [24] 7071 	push	ar3
      001FEA C0 02            [24] 7072 	push	ar2
      001FEC 12r15r17         [24] 7073 	lcall	_print8ASCII
      001FEF D0 02            [24] 7074 	pop	ar2
      001FF1 D0 03            [24] 7075 	pop	ar3
      001FF3 D0 05            [24] 7076 	pop	ar5
      001FF5 D0 07            [24] 7077 	pop	ar7
                                   7078 ;	.\ecen4350_lcd_v4.c:1483: d++;
      001FF7 0A               [12] 7079 	inc	r2
      001FF8 BA 00 01         [24] 7080 	cjne	r2,#0x00,00259$
      001FFB 0B               [12] 7081 	inc	r3
      001FFC                       7082 00259$:
                                   7083 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7084 ;	assignBit
      001FFC C2 B5            [12] 7085 	clr	_P3_5
                                   7086 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001FFE 8A 82            [24] 7087 	mov	dpl,r2
      002000 8B 83            [24] 7088 	mov	dph,r3
      002002 E0               [24] 7089 	movx	a,@dptr
      002003 F5 82            [12] 7090 	mov	dpl,a
                                   7091 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7092 ;	assignBit
      002005 D2 B5            [12] 7093 	setb	_P3_5
                                   7094 ;	.\ecen4350_lcd_v4.c:1484: print8ASCII(ramRead8(d));
      002007 C0 07            [24] 7095 	push	ar7
      002009 C0 05            [24] 7096 	push	ar5
      00200B C0 03            [24] 7097 	push	ar3
      00200D C0 02            [24] 7098 	push	ar2
      00200F 12r15r17         [24] 7099 	lcall	_print8ASCII
      002012 D0 02            [24] 7100 	pop	ar2
      002014 D0 03            [24] 7101 	pop	ar3
      002016 D0 05            [24] 7102 	pop	ar5
      002018 D0 07            [24] 7103 	pop	ar7
                                   7104 ;	.\ecen4350_lcd_v4.c:1485: d++;
      00201A 0A               [12] 7105 	inc	r2
      00201B BA 00 01         [24] 7106 	cjne	r2,#0x00,00260$
      00201E 0B               [12] 7107 	inc	r3
      00201F                       7108 00260$:
                                   7109 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7110 ;	assignBit
      00201F C2 B5            [12] 7111 	clr	_P3_5
                                   7112 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002021 8A 82            [24] 7113 	mov	dpl,r2
      002023 8B 83            [24] 7114 	mov	dph,r3
      002025 E0               [24] 7115 	movx	a,@dptr
      002026 F5 82            [12] 7116 	mov	dpl,a
                                   7117 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7118 ;	assignBit
      002028 D2 B5            [12] 7119 	setb	_P3_5
                                   7120 ;	.\ecen4350_lcd_v4.c:1486: print8ASCII(ramRead8(d));
      00202A C0 07            [24] 7121 	push	ar7
      00202C C0 05            [24] 7122 	push	ar5
      00202E C0 03            [24] 7123 	push	ar3
      002030 C0 02            [24] 7124 	push	ar2
      002032 12r15r17         [24] 7125 	lcall	_print8ASCII
      002035 D0 02            [24] 7126 	pop	ar2
      002037 D0 03            [24] 7127 	pop	ar3
      002039 D0 05            [24] 7128 	pop	ar5
                                   7129 ;	.\ecen4350_lcd_v4.c:1487: d++;
      00203B 74 01            [12] 7130 	mov	a,#0x01
      00203D 2A               [12] 7131 	add	a,r2
      00203E FC               [12] 7132 	mov	r4,a
      00203F E4               [12] 7133 	clr	a
      002040 3B               [12] 7134 	addc	a,r3
      002041 FE               [12] 7135 	mov	r6,a
                                   7136 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7137 ;	assignBit
      002042 C2 B5            [12] 7138 	clr	_P3_5
                                   7139 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002044 8C 82            [24] 7140 	mov	dpl,r4
      002046 8E 83            [24] 7141 	mov	dph,r6
      002048 E0               [24] 7142 	movx	a,@dptr
      002049 F5 82            [12] 7143 	mov	dpl,a
                                   7144 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7145 ;	assignBit
      00204B D2 B5            [12] 7146 	setb	_P3_5
                                   7147 ;	.\ecen4350_lcd_v4.c:1488: print8ASCII(ramRead8(d));
      00204D C0 06            [24] 7148 	push	ar6
      00204F C0 05            [24] 7149 	push	ar5
      002051 C0 04            [24] 7150 	push	ar4
      002053 12r15r17         [24] 7151 	lcall	_print8ASCII
                                   7152 ;	.\ecen4350_lcd_v4.c:1490: setCursor(0, 240);
      002056 75*00 F0         [24] 7153 	mov	_setCursor_PARM_2,#0xf0
      002059 75*01 00         [24] 7154 	mov	(_setCursor_PARM_2 + 1),#0x00
      00205C 90 00 00         [24] 7155 	mov	dptr,#0x0000
      00205F 12r04rAA         [24] 7156 	lcall	_setCursor
                                   7157 ;	.\ecen4350_lcd_v4.c:1491: setColorWhite();
      002062 12r15rD8         [24] 7158 	lcall	_setColorWhite
                                   7159 ;	.\ecen4350_lcd_v4.c:1492: LCD_string_write(" Data Type:");
      002065 90r07r6A         [24] 7160 	mov	dptr,#___str_49
      002068 75 F0 80         [24] 7161 	mov	b,#0x80
      00206B 12r0FrC4         [24] 7162 	lcall	_LCD_string_write
                                   7163 ;	.\ecen4350_lcd_v4.c:1493: setColorDefault();
      00206E 12r15r88         [24] 7164 	lcall	_setColorDefault
                                   7165 ;	.\ecen4350_lcd_v4.c:1494: setCursor(0, 260);
      002071 75*00 04         [24] 7166 	mov	_setCursor_PARM_2,#0x04
      002074 75*01 01         [24] 7167 	mov	(_setCursor_PARM_2 + 1),#0x01
      002077 90 00 00         [24] 7168 	mov	dptr,#0x0000
      00207A 12r04rAA         [24] 7169 	lcall	_setCursor
                                   7170 ;	.\ecen4350_lcd_v4.c:1495: LCD_string_write(" DWORD");
      00207D 90r07r82         [24] 7171 	mov	dptr,#___str_52
      002080 75 F0 80         [24] 7172 	mov	b,#0x80
      002083 12r0FrC4         [24] 7173 	lcall	_LCD_string_write
      002086 D0 04            [24] 7174 	pop	ar4
      002088 D0 05            [24] 7175 	pop	ar5
      00208A D0 06            [24] 7176 	pop	ar6
      00208C D0 07            [24] 7177 	pop	ar7
      00208E                       7178 00123$:
                                   7179 ;	.\ecen4350_lcd_v4.c:1497: setCursor(50, 300);
      00208E 75*00 2C         [24] 7180 	mov	_setCursor_PARM_2,#0x2c
      002091 75*01 01         [24] 7181 	mov	(_setCursor_PARM_2 + 1),#0x01
      002094 90 00 32         [24] 7182 	mov	dptr,#0x0032
      002097 C0 07            [24] 7183 	push	ar7
      002099 C0 06            [24] 7184 	push	ar6
      00209B C0 05            [24] 7185 	push	ar5
      00209D C0 04            [24] 7186 	push	ar4
      00209F 12r04rAA         [24] 7187 	lcall	_setCursor
                                   7188 ;	.\ecen4350_lcd_v4.c:1498: setColorWhite();
      0020A2 12r15rD8         [24] 7189 	lcall	_setColorWhite
                                   7190 ;	.\ecen4350_lcd_v4.c:1499: LCD_string_write(" <0> Exit\n");
      0020A5 90r07r89         [24] 7191 	mov	dptr,#___str_53
      0020A8 75 F0 80         [24] 7192 	mov	b,#0x80
      0020AB 12r0FrC4         [24] 7193 	lcall	_LCD_string_write
                                   7194 ;	.\ecen4350_lcd_v4.c:1501: selection = keyDetect();
      0020AE 12r10rE2         [24] 7195 	lcall	_keyDetect
      0020B1 AB 82            [24] 7196 	mov	r3,dpl
      0020B3 D0 04            [24] 7197 	pop	ar4
      0020B5 D0 05            [24] 7198 	pop	ar5
      0020B7 D0 06            [24] 7199 	pop	ar6
      0020B9 D0 07            [24] 7200 	pop	ar7
      0020BB 78r00            [12] 7201 	mov	r0,#_selection
      0020BD A6 03            [24] 7202 	mov	@r0,ar3
                                   7203 ;	.\ecen4350_lcd_v4.c:1503: if (selection == '0' ) {
      0020BF BB 30 02         [24] 7204 	cjne	r3,#0x30,00261$
      0020C2 80 03            [24] 7205 	sjmp	00262$
      0020C4                       7206 00261$:
      0020C4 02r1Cr9F         [24] 7207 	ljmp	00126$
      0020C7                       7208 00262$:
                                   7209 ;	.\ecen4350_lcd_v4.c:1504: exit = 0;
      0020C7 78r0B            [12] 7210 	mov	r0,#_dump_exit_65536_553
      0020C9 76 00            [12] 7211 	mov	@r0,#0x00
                                   7212 ;	.\ecen4350_lcd_v4.c:1505: setCursor(50, 300);
      0020CB 75*00 2C         [24] 7213 	mov	_setCursor_PARM_2,#0x2c
      0020CE 75*01 01         [24] 7214 	mov	(_setCursor_PARM_2 + 1),#0x01
      0020D1 90 00 32         [24] 7215 	mov	dptr,#0x0032
      0020D4 C0 07            [24] 7216 	push	ar7
      0020D6 C0 06            [24] 7217 	push	ar6
      0020D8 C0 05            [24] 7218 	push	ar5
      0020DA C0 04            [24] 7219 	push	ar4
      0020DC 12r04rAA         [24] 7220 	lcall	_setCursor
                                   7221 ;	.\ecen4350_lcd_v4.c:1506: setColorSelect();
      0020DF 12r15r93         [24] 7222 	lcall	_setColorSelect
                                   7223 ;	.\ecen4350_lcd_v4.c:1507: LCD_string_write(" ");
      0020E2 90r06r54         [24] 7224 	mov	dptr,#___str_30
      0020E5 75 F0 80         [24] 7225 	mov	b,#0x80
      0020E8 12r0FrC4         [24] 7226 	lcall	_LCD_string_write
                                   7227 ;	.\ecen4350_lcd_v4.c:1508: setColorHighlight2();
      0020EB 12r15rAA         [24] 7228 	lcall	_setColorHighlight2
                                   7229 ;	.\ecen4350_lcd_v4.c:1509: LCD_string_write("<0> Exit\n");
      0020EE 90r07r94         [24] 7230 	mov	dptr,#___str_54
      0020F1 75 F0 80         [24] 7231 	mov	b,#0x80
      0020F4 12r0FrC4         [24] 7232 	lcall	_LCD_string_write
                                   7233 ;	.\ecen4350_lcd_v4.c:1510: delay(40);
      0020F7 90 00 28         [24] 7234 	mov	dptr,#0x0028
      0020FA 12r00rE0         [24] 7235 	lcall	_delay
      0020FD D0 04            [24] 7236 	pop	ar4
      0020FF D0 05            [24] 7237 	pop	ar5
      002101 D0 06            [24] 7238 	pop	ar6
      002103 D0 07            [24] 7239 	pop	ar7
      002105 02r1Cr9F         [24] 7240 	ljmp	00126$
                                   7241 ;	.\ecen4350_lcd_v4.c:1513: return;
                                   7242 ;	.\ecen4350_lcd_v4.c:1514: }
      002108 22               [24] 7243 	ret
                                   7244 ;------------------------------------------------------------
                                   7245 ;Allocation info for local variables in function 'move'
                                   7246 ;------------------------------------------------------------
                                   7247 ;d                         Allocated with name '_move_d_65536_609'
                                   7248 ;i                         Allocated with name '_move_i_131072_618'
                                   7249 ;__2621440148              Allocated to registers 
                                   7250 ;__2621440145              Allocated to registers 
                                   7251 ;__2621440146              Allocated to registers 
                                   7252 ;__3276800149              Allocated to registers 
                                   7253 ;map_address               Allocated to registers 
                                   7254 ;d                         Allocated to registers r5 
                                   7255 ;map_address               Allocated to registers 
                                   7256 ;d                         Allocated to registers 
                                   7257 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_609'
                                   7258 ;destAddress               Allocated to registers r2 r3 
                                   7259 ;blockSize                 Allocated to registers r6 r7 
                                   7260 ;blockType                 Allocated to registers r5 
                                   7261 ;invalidType               Allocated to registers r4 
                                   7262 ;invalidSize               Allocated with name '_move_invalidSize_65536_609'
                                   7263 ;------------------------------------------------------------
                                   7264 ;	.\ecen4350_lcd_v4.c:1516: void move() {
                                   7265 ;	-----------------------------------------
                                   7266 ;	 function move
                                   7267 ;	-----------------------------------------
      002109                       7268 _move:
                                   7269 ;	.\ecen4350_lcd_v4.c:1520: __idata unsigned int blockSize = 0;
      002109 7E 00            [12] 7270 	mov	r6,#0x00
      00210B 7F 00            [12] 7271 	mov	r7,#0x00
                                   7272 ;	.\ecen4350_lcd_v4.c:1521: __idata unsigned char blockType = 0;
      00210D 7D 00            [12] 7273 	mov	r5,#0x00
                                   7274 ;	.\ecen4350_lcd_v4.c:1522: __idata unsigned char invalidType = 1;
      00210F 7C 01            [12] 7275 	mov	r4,#0x01
                                   7276 ;	.\ecen4350_lcd_v4.c:1523: __idata unsigned char invalidSize = 1;
      002111 78r0E            [12] 7277 	mov	r0,#_move_invalidSize_65536_609
      002113 76 01            [12] 7278 	mov	@r0,#0x01
                                   7279 ;	.\ecen4350_lcd_v4.c:1525: clearLCD();
      002115 C0 07            [24] 7280 	push	ar7
      002117 C0 06            [24] 7281 	push	ar6
      002119 C0 05            [24] 7282 	push	ar5
      00211B C0 04            [24] 7283 	push	ar4
      00211D 12r0Dr47         [24] 7284 	lcall	_clearLCD
                                   7285 ;	.\ecen4350_lcd_v4.c:1528: fillTop(GRAY);
      002120 90 D6 BA         [24] 7286 	mov	dptr,#0xd6ba
      002123 12r0Br7A         [24] 7287 	lcall	_fillTop
                                   7288 ;	.\ecen4350_lcd_v4.c:1529: setTextSize(5);
      002126 75 82 05         [24] 7289 	mov	dpl,#0x05
      002129 12r04rC4         [24] 7290 	lcall	_setTextSize
                                   7291 ;	.\ecen4350_lcd_v4.c:1530: setColorMenu();
      00212C 12r15rC1         [24] 7292 	lcall	_setColorMenu
                                   7293 ;	.\ecen4350_lcd_v4.c:1531: setCursor(30, 0);
      00212F E4               [12] 7294 	clr	a
      002130 F5*00            [12] 7295 	mov	_setCursor_PARM_2,a
      002132 F5*01            [12] 7296 	mov	(_setCursor_PARM_2 + 1),a
      002134 90 00 1E         [24] 7297 	mov	dptr,#0x001e
      002137 12r04rAA         [24] 7298 	lcall	_setCursor
                                   7299 ;	.\ecen4350_lcd_v4.c:1532: LCD_string_write("[MOVE]\n");
      00213A 90r07r9E         [24] 7300 	mov	dptr,#___str_55
      00213D 75 F0 80         [24] 7301 	mov	b,#0x80
      002140 12r0FrC4         [24] 7302 	lcall	_LCD_string_write
                                   7303 ;	.\ecen4350_lcd_v4.c:1533: setColorDefault();
      002143 12r15r88         [24] 7304 	lcall	_setColorDefault
                                   7305 ;	.\ecen4350_lcd_v4.c:1534: setTextSize(2);
      002146 75 82 02         [24] 7306 	mov	dpl,#0x02
      002149 12r04rC4         [24] 7307 	lcall	_setTextSize
                                   7308 ;	.\ecen4350_lcd_v4.c:1535: setCursor(0, 60);
      00214C 75*00 3C         [24] 7309 	mov	_setCursor_PARM_2,#0x3c
      00214F 75*01 00         [24] 7310 	mov	(_setCursor_PARM_2 + 1),#0x00
      002152 90 00 00         [24] 7311 	mov	dptr,#0x0000
      002155 12r04rAA         [24] 7312 	lcall	_setCursor
                                   7313 ;	.\ecen4350_lcd_v4.c:1536: LCD_string_write(" Source Address:");
      002158 90r07rA6         [24] 7314 	mov	dptr,#___str_56
      00215B 75 F0 80         [24] 7315 	mov	b,#0x80
      00215E 12r0FrC4         [24] 7316 	lcall	_LCD_string_write
                                   7317 ;	.\ecen4350_lcd_v4.c:1537: setCursor(0, 80);
      002161 75*00 50         [24] 7318 	mov	_setCursor_PARM_2,#0x50
      002164 75*01 00         [24] 7319 	mov	(_setCursor_PARM_2 + 1),#0x00
      002167 90 00 00         [24] 7320 	mov	dptr,#0x0000
      00216A 12r04rAA         [24] 7321 	lcall	_setCursor
                                   7322 ;	.\ecen4350_lcd_v4.c:1538: setColorGray();
      00216D 12r15rB6         [24] 7323 	lcall	_setColorGray
                                   7324 ;	.\ecen4350_lcd_v4.c:1539: LCD_string_write(" 0x____");
      002170 90r05rF2         [24] 7325 	mov	dptr,#___str_24
      002173 75 F0 80         [24] 7326 	mov	b,#0x80
      002176 12r0FrC4         [24] 7327 	lcall	_LCD_string_write
                                   7328 ;	.\ecen4350_lcd_v4.c:1540: setCursor(0, 110);
      002179 75*00 6E         [24] 7329 	mov	_setCursor_PARM_2,#0x6e
      00217C 75*01 00         [24] 7330 	mov	(_setCursor_PARM_2 + 1),#0x00
      00217F 90 00 00         [24] 7331 	mov	dptr,#0x0000
      002182 12r04rAA         [24] 7332 	lcall	_setCursor
                                   7333 ;	.\ecen4350_lcd_v4.c:1541: setColorDefault();
      002185 12r15r88         [24] 7334 	lcall	_setColorDefault
                                   7335 ;	.\ecen4350_lcd_v4.c:1542: LCD_string_write(" Destination:");
      002188 90r07rB7         [24] 7336 	mov	dptr,#___str_57
      00218B 75 F0 80         [24] 7337 	mov	b,#0x80
      00218E 12r0FrC4         [24] 7338 	lcall	_LCD_string_write
                                   7339 ;	.\ecen4350_lcd_v4.c:1543: setCursor(0, 130);
      002191 75*00 82         [24] 7340 	mov	_setCursor_PARM_2,#0x82
      002194 75*01 00         [24] 7341 	mov	(_setCursor_PARM_2 + 1),#0x00
      002197 90 00 00         [24] 7342 	mov	dptr,#0x0000
      00219A 12r04rAA         [24] 7343 	lcall	_setCursor
                                   7344 ;	.\ecen4350_lcd_v4.c:1544: setColorGray();
      00219D 12r15rB6         [24] 7345 	lcall	_setColorGray
                                   7346 ;	.\ecen4350_lcd_v4.c:1545: LCD_string_write(" 0x____");
      0021A0 90r05rF2         [24] 7347 	mov	dptr,#___str_24
      0021A3 75 F0 80         [24] 7348 	mov	b,#0x80
      0021A6 12r0FrC4         [24] 7349 	lcall	_LCD_string_write
                                   7350 ;	.\ecen4350_lcd_v4.c:1546: setCursor(0, 160);
      0021A9 75*00 A0         [24] 7351 	mov	_setCursor_PARM_2,#0xa0
      0021AC 75*01 00         [24] 7352 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021AF 90 00 00         [24] 7353 	mov	dptr,#0x0000
      0021B2 12r04rAA         [24] 7354 	lcall	_setCursor
                                   7355 ;	.\ecen4350_lcd_v4.c:1547: setColorDefault();
      0021B5 12r15r88         [24] 7356 	lcall	_setColorDefault
                                   7357 ;	.\ecen4350_lcd_v4.c:1548: LCD_string_write(" Choose Block Type:");
      0021B8 90r06r56         [24] 7358 	mov	dptr,#___str_31
      0021BB 75 F0 80         [24] 7359 	mov	b,#0x80
      0021BE 12r0FrC4         [24] 7360 	lcall	_LCD_string_write
                                   7361 ;	.\ecen4350_lcd_v4.c:1549: setCursor(0, 180);
      0021C1 75*00 B4         [24] 7362 	mov	_setCursor_PARM_2,#0xb4
      0021C4 75*01 00         [24] 7363 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021C7 90 00 00         [24] 7364 	mov	dptr,#0x0000
      0021CA 12r04rAA         [24] 7365 	lcall	_setCursor
                                   7366 ;	.\ecen4350_lcd_v4.c:1550: setColorGray();
      0021CD 12r15rB6         [24] 7367 	lcall	_setColorGray
                                   7368 ;	.\ecen4350_lcd_v4.c:1551: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0021D0 90r06r0F         [24] 7369 	mov	dptr,#___str_26
      0021D3 75 F0 80         [24] 7370 	mov	b,#0x80
      0021D6 12r0FrC4         [24] 7371 	lcall	_LCD_string_write
                                   7372 ;	.\ecen4350_lcd_v4.c:1552: setCursor(0, 260);
      0021D9 75*00 04         [24] 7373 	mov	_setCursor_PARM_2,#0x04
      0021DC 75*01 01         [24] 7374 	mov	(_setCursor_PARM_2 + 1),#0x01
      0021DF 90 00 00         [24] 7375 	mov	dptr,#0x0000
      0021E2 12r04rAA         [24] 7376 	lcall	_setCursor
                                   7377 ;	.\ecen4350_lcd_v4.c:1553: setColorDefault();
      0021E5 12r15r88         [24] 7378 	lcall	_setColorDefault
                                   7379 ;	.\ecen4350_lcd_v4.c:1554: LCD_string_write(" Input Size:");
      0021E8 90r06r31         [24] 7380 	mov	dptr,#___str_27
      0021EB 75 F0 80         [24] 7381 	mov	b,#0x80
      0021EE 12r0FrC4         [24] 7382 	lcall	_LCD_string_write
                                   7383 ;	.\ecen4350_lcd_v4.c:1555: setColorGray();
      0021F1 12r15rB6         [24] 7384 	lcall	_setColorGray
                                   7385 ;	.\ecen4350_lcd_v4.c:1556: LCD_string_write(" _");
      0021F4 90r06r3E         [24] 7386 	mov	dptr,#___str_28
      0021F7 75 F0 80         [24] 7387 	mov	b,#0x80
      0021FA 12r0FrC4         [24] 7388 	lcall	_LCD_string_write
                                   7389 ;	.\ecen4350_lcd_v4.c:1563: setCursor(0, 60);
      0021FD 75*00 3C         [24] 7390 	mov	_setCursor_PARM_2,#0x3c
      002200 75*01 00         [24] 7391 	mov	(_setCursor_PARM_2 + 1),#0x00
      002203 90 00 00         [24] 7392 	mov	dptr,#0x0000
      002206 12r04rAA         [24] 7393 	lcall	_setCursor
                                   7394 ;	.\ecen4350_lcd_v4.c:1564: setColorSelect();
      002209 12r15r93         [24] 7395 	lcall	_setColorSelect
                                   7396 ;	.\ecen4350_lcd_v4.c:1565: LCD_string_write(" Source Address:");
      00220C 90r07rA6         [24] 7397 	mov	dptr,#___str_56
      00220F 75 F0 80         [24] 7398 	mov	b,#0x80
      002212 12r0FrC4         [24] 7399 	lcall	_LCD_string_write
                                   7400 ;	.\ecen4350_lcd_v4.c:1566: setCursor(0, 80);
      002215 75*00 50         [24] 7401 	mov	_setCursor_PARM_2,#0x50
      002218 75*01 00         [24] 7402 	mov	(_setCursor_PARM_2 + 1),#0x00
      00221B 90 00 00         [24] 7403 	mov	dptr,#0x0000
      00221E 12r04rAA         [24] 7404 	lcall	_setCursor
                                   7405 ;	.\ecen4350_lcd_v4.c:1567: LCD_string_write(" ");
      002221 90r06r54         [24] 7406 	mov	dptr,#___str_30
      002224 75 F0 80         [24] 7407 	mov	b,#0x80
      002227 12r0FrC4         [24] 7408 	lcall	_LCD_string_write
                                   7409 ;	.\ecen4350_lcd_v4.c:1568: setColorHighlight1();
      00222A 12r15r9E         [24] 7410 	lcall	_setColorHighlight1
                                   7411 ;	.\ecen4350_lcd_v4.c:1569: LCD_string_write("0x");
      00222D 90r05r29         [24] 7412 	mov	dptr,#___str_2
      002230 75 F0 80         [24] 7413 	mov	b,#0x80
      002233 12r0FrC4         [24] 7414 	lcall	_LCD_string_write
                                   7415 ;	.\ecen4350_lcd_v4.c:1570: sourceAddress = inputAddress();
      002236 12r15rF9         [24] 7416 	lcall	_inputAddress
      002239 78r0C            [12] 7417 	mov	r0,#_move_sourceAddress_65536_609
      00223B A6 82            [24] 7418 	mov	@r0,dpl
      00223D 08               [12] 7419 	inc	r0
      00223E A6 83            [24] 7420 	mov	@r0,dph
                                   7421 ;	.\ecen4350_lcd_v4.c:1573: setColorDefault();
      002240 12r15r88         [24] 7422 	lcall	_setColorDefault
                                   7423 ;	.\ecen4350_lcd_v4.c:1574: setCursor(0, 60);
      002243 75*00 3C         [24] 7424 	mov	_setCursor_PARM_2,#0x3c
      002246 75*01 00         [24] 7425 	mov	(_setCursor_PARM_2 + 1),#0x00
      002249 90 00 00         [24] 7426 	mov	dptr,#0x0000
      00224C 12r04rAA         [24] 7427 	lcall	_setCursor
                                   7428 ;	.\ecen4350_lcd_v4.c:1575: LCD_string_write(" Source Address:");
      00224F 90r07rA6         [24] 7429 	mov	dptr,#___str_56
      002252 75 F0 80         [24] 7430 	mov	b,#0x80
      002255 12r0FrC4         [24] 7431 	lcall	_LCD_string_write
                                   7432 ;	.\ecen4350_lcd_v4.c:1576: setCursor(0, 80);
      002258 75*00 50         [24] 7433 	mov	_setCursor_PARM_2,#0x50
      00225B 75*01 00         [24] 7434 	mov	(_setCursor_PARM_2 + 1),#0x00
      00225E 90 00 00         [24] 7435 	mov	dptr,#0x0000
      002261 12r04rAA         [24] 7436 	lcall	_setCursor
                                   7437 ;	.\ecen4350_lcd_v4.c:1577: LCD_string_write(" ");
      002264 90r06r54         [24] 7438 	mov	dptr,#___str_30
      002267 75 F0 80         [24] 7439 	mov	b,#0x80
      00226A 12r0FrC4         [24] 7440 	lcall	_LCD_string_write
                                   7441 ;	.\ecen4350_lcd_v4.c:1578: setColorHighlight2();
      00226D 12r15rAA         [24] 7442 	lcall	_setColorHighlight2
                                   7443 ;	.\ecen4350_lcd_v4.c:1579: LCD_string_write("0x");
      002270 90r05r29         [24] 7444 	mov	dptr,#___str_2
      002273 75 F0 80         [24] 7445 	mov	b,#0x80
      002276 12r0FrC4         [24] 7446 	lcall	_LCD_string_write
                                   7447 ;	.\ecen4350_lcd_v4.c:1580: print16Hex(sourceAddress);
      002279 78r0C            [12] 7448 	mov	r0,#_move_sourceAddress_65536_609
      00227B 86 82            [24] 7449 	mov	dpl,@r0
      00227D 08               [12] 7450 	inc	r0
      00227E 86 83            [24] 7451 	mov	dph,@r0
      002280 12r14rAC         [24] 7452 	lcall	_print16Hex
                                   7453 ;	.\ecen4350_lcd_v4.c:1583: setCursor(0, 110);
      002283 75*00 6E         [24] 7454 	mov	_setCursor_PARM_2,#0x6e
      002286 75*01 00         [24] 7455 	mov	(_setCursor_PARM_2 + 1),#0x00
      002289 90 00 00         [24] 7456 	mov	dptr,#0x0000
      00228C 12r04rAA         [24] 7457 	lcall	_setCursor
                                   7458 ;	.\ecen4350_lcd_v4.c:1584: setColorSelect();
      00228F 12r15r93         [24] 7459 	lcall	_setColorSelect
                                   7460 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write(" Destination:");
      002292 90r07rB7         [24] 7461 	mov	dptr,#___str_57
      002295 75 F0 80         [24] 7462 	mov	b,#0x80
      002298 12r0FrC4         [24] 7463 	lcall	_LCD_string_write
                                   7464 ;	.\ecen4350_lcd_v4.c:1586: setCursor(0, 130);
      00229B 75*00 82         [24] 7465 	mov	_setCursor_PARM_2,#0x82
      00229E 75*01 00         [24] 7466 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022A1 90 00 00         [24] 7467 	mov	dptr,#0x0000
      0022A4 12r04rAA         [24] 7468 	lcall	_setCursor
                                   7469 ;	.\ecen4350_lcd_v4.c:1587: LCD_string_write(" ");
      0022A7 90r06r54         [24] 7470 	mov	dptr,#___str_30
      0022AA 75 F0 80         [24] 7471 	mov	b,#0x80
      0022AD 12r0FrC4         [24] 7472 	lcall	_LCD_string_write
                                   7473 ;	.\ecen4350_lcd_v4.c:1588: setColorHighlight1();
      0022B0 12r15r9E         [24] 7474 	lcall	_setColorHighlight1
                                   7475 ;	.\ecen4350_lcd_v4.c:1589: LCD_string_write("0x");
      0022B3 90r05r29         [24] 7476 	mov	dptr,#___str_2
      0022B6 75 F0 80         [24] 7477 	mov	b,#0x80
      0022B9 12r0FrC4         [24] 7478 	lcall	_LCD_string_write
                                   7479 ;	.\ecen4350_lcd_v4.c:1590: destAddress = inputAddress();
      0022BC 12r15rF9         [24] 7480 	lcall	_inputAddress
      0022BF AA 82            [24] 7481 	mov	r2,dpl
      0022C1 AB 83            [24] 7482 	mov	r3,dph
                                   7483 ;	.\ecen4350_lcd_v4.c:1593: setColorDefault();
      0022C3 C0 03            [24] 7484 	push	ar3
      0022C5 C0 02            [24] 7485 	push	ar2
      0022C7 12r15r88         [24] 7486 	lcall	_setColorDefault
                                   7487 ;	.\ecen4350_lcd_v4.c:1594: setCursor(0, 110);
      0022CA 75*00 6E         [24] 7488 	mov	_setCursor_PARM_2,#0x6e
      0022CD 75*01 00         [24] 7489 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022D0 90 00 00         [24] 7490 	mov	dptr,#0x0000
      0022D3 12r04rAA         [24] 7491 	lcall	_setCursor
                                   7492 ;	.\ecen4350_lcd_v4.c:1595: LCD_string_write( " Destination:");
      0022D6 90r07rB7         [24] 7493 	mov	dptr,#___str_57
      0022D9 75 F0 80         [24] 7494 	mov	b,#0x80
      0022DC 12r0FrC4         [24] 7495 	lcall	_LCD_string_write
                                   7496 ;	.\ecen4350_lcd_v4.c:1596: setCursor(0, 130);
      0022DF 75*00 82         [24] 7497 	mov	_setCursor_PARM_2,#0x82
      0022E2 75*01 00         [24] 7498 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022E5 90 00 00         [24] 7499 	mov	dptr,#0x0000
      0022E8 12r04rAA         [24] 7500 	lcall	_setCursor
                                   7501 ;	.\ecen4350_lcd_v4.c:1597: LCD_string_write(" ");
      0022EB 90r06r54         [24] 7502 	mov	dptr,#___str_30
      0022EE 75 F0 80         [24] 7503 	mov	b,#0x80
      0022F1 12r0FrC4         [24] 7504 	lcall	_LCD_string_write
                                   7505 ;	.\ecen4350_lcd_v4.c:1598: setColorHighlight2();
      0022F4 12r15rAA         [24] 7506 	lcall	_setColorHighlight2
                                   7507 ;	.\ecen4350_lcd_v4.c:1599: LCD_string_write("0x");
      0022F7 90r05r29         [24] 7508 	mov	dptr,#___str_2
      0022FA 75 F0 80         [24] 7509 	mov	b,#0x80
      0022FD 12r0FrC4         [24] 7510 	lcall	_LCD_string_write
      002300 D0 02            [24] 7511 	pop	ar2
      002302 D0 03            [24] 7512 	pop	ar3
                                   7513 ;	.\ecen4350_lcd_v4.c:1600: print16Hex(destAddress);
      002304 8A 82            [24] 7514 	mov	dpl,r2
      002306 8B 83            [24] 7515 	mov	dph,r3
      002308 C0 03            [24] 7516 	push	ar3
      00230A C0 02            [24] 7517 	push	ar2
      00230C 12r14rAC         [24] 7518 	lcall	_print16Hex
                                   7519 ;	.\ecen4350_lcd_v4.c:1603: setCursor(0, 160);
      00230F 75*00 A0         [24] 7520 	mov	_setCursor_PARM_2,#0xa0
      002312 75*01 00         [24] 7521 	mov	(_setCursor_PARM_2 + 1),#0x00
      002315 90 00 00         [24] 7522 	mov	dptr,#0x0000
      002318 12r04rAA         [24] 7523 	lcall	_setCursor
                                   7524 ;	.\ecen4350_lcd_v4.c:1604: setColorSelect();
      00231B 12r15r93         [24] 7525 	lcall	_setColorSelect
                                   7526 ;	.\ecen4350_lcd_v4.c:1605: LCD_string_write(" Choose Block Type:");
      00231E 90r06r56         [24] 7527 	mov	dptr,#___str_31
      002321 75 F0 80         [24] 7528 	mov	b,#0x80
      002324 12r0FrC4         [24] 7529 	lcall	_LCD_string_write
                                   7530 ;	.\ecen4350_lcd_v4.c:1606: setCursor(0, 180);
      002327 75*00 B4         [24] 7531 	mov	_setCursor_PARM_2,#0xb4
      00232A 75*01 00         [24] 7532 	mov	(_setCursor_PARM_2 + 1),#0x00
      00232D 90 00 00         [24] 7533 	mov	dptr,#0x0000
      002330 12r04rAA         [24] 7534 	lcall	_setCursor
                                   7535 ;	.\ecen4350_lcd_v4.c:1607: setColorWhite();
      002333 12r15rD8         [24] 7536 	lcall	_setColorWhite
                                   7537 ;	.\ecen4350_lcd_v4.c:1608: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      002336 90r06r0F         [24] 7538 	mov	dptr,#___str_26
      002339 75 F0 80         [24] 7539 	mov	b,#0x80
      00233C 12r0FrC4         [24] 7540 	lcall	_LCD_string_write
      00233F D0 02            [24] 7541 	pop	ar2
      002341 D0 03            [24] 7542 	pop	ar3
      002343 D0 04            [24] 7543 	pop	ar4
      002345 D0 05            [24] 7544 	pop	ar5
      002347 D0 06            [24] 7545 	pop	ar6
      002349 D0 07            [24] 7546 	pop	ar7
                                   7547 ;	.\ecen4350_lcd_v4.c:1610: while (invalidType) {
      00234B                       7548 00109$:
      00234B EC               [12] 7549 	mov	a,r4
      00234C 70 03            [24] 7550 	jnz	00178$
      00234E 02r24rDB         [24] 7551 	ljmp	00137$
      002351                       7552 00178$:
                                   7553 ;	.\ecen4350_lcd_v4.c:1611: setCursor(0, 180);
      002351 75*00 B4         [24] 7554 	mov	_setCursor_PARM_2,#0xb4
      002354 75*01 00         [24] 7555 	mov	(_setCursor_PARM_2 + 1),#0x00
      002357 90 00 00         [24] 7556 	mov	dptr,#0x0000
      00235A C0 07            [24] 7557 	push	ar7
      00235C C0 06            [24] 7558 	push	ar6
      00235E C0 04            [24] 7559 	push	ar4
      002360 C0 03            [24] 7560 	push	ar3
      002362 C0 02            [24] 7561 	push	ar2
      002364 12r04rAA         [24] 7562 	lcall	_setCursor
                                   7563 ;	.\ecen4350_lcd_v4.c:1612: setColorWhite();
      002367 12r15rD8         [24] 7564 	lcall	_setColorWhite
                                   7565 ;	.\ecen4350_lcd_v4.c:1613: LCD_string_write("\n\n");
      00236A 90r06r6A         [24] 7566 	mov	dptr,#___str_32
      00236D 75 F0 80         [24] 7567 	mov	b,#0x80
      002370 12r0FrC4         [24] 7568 	lcall	_LCD_string_write
                                   7569 ;	.\ecen4350_lcd_v4.c:1615: blockType = inputBlockType();
      002373 12r16r9B         [24] 7570 	lcall	_inputBlockType
      002376 AD 82            [24] 7571 	mov	r5,dpl
      002378 D0 02            [24] 7572 	pop	ar2
      00237A D0 03            [24] 7573 	pop	ar3
      00237C D0 04            [24] 7574 	pop	ar4
      00237E D0 06            [24] 7575 	pop	ar6
      002380 D0 07            [24] 7576 	pop	ar7
                                   7577 ;	.\ecen4350_lcd_v4.c:1617: if (blockType == 0x1) {
      002382 BD 01 5F         [24] 7578 	cjne	r5,#0x01,00102$
                                   7579 ;	.\ecen4350_lcd_v4.c:1618: invalidType = 0;
      002385 7C 00            [12] 7580 	mov	r4,#0x00
                                   7581 ;	.\ecen4350_lcd_v4.c:1620: setColorDefault();
      002387 C0 07            [24] 7582 	push	ar7
      002389 C0 06            [24] 7583 	push	ar6
      00238B C0 05            [24] 7584 	push	ar5
      00238D C0 04            [24] 7585 	push	ar4
      00238F C0 03            [24] 7586 	push	ar3
      002391 C0 02            [24] 7587 	push	ar2
      002393 12r15r88         [24] 7588 	lcall	_setColorDefault
                                   7589 ;	.\ecen4350_lcd_v4.c:1621: setCursor(0, 160);
      002396 75*00 A0         [24] 7590 	mov	_setCursor_PARM_2,#0xa0
      002399 75*01 00         [24] 7591 	mov	(_setCursor_PARM_2 + 1),#0x00
      00239C 90 00 00         [24] 7592 	mov	dptr,#0x0000
      00239F 12r04rAA         [24] 7593 	lcall	_setCursor
                                   7594 ;	.\ecen4350_lcd_v4.c:1622: LCD_string_write(" Choose Block Type:");
      0023A2 90r06r56         [24] 7595 	mov	dptr,#___str_31
      0023A5 75 F0 80         [24] 7596 	mov	b,#0x80
      0023A8 12r0FrC4         [24] 7597 	lcall	_LCD_string_write
                                   7598 ;	.\ecen4350_lcd_v4.c:1623: setCursor(0, 180);
      0023AB 75*00 B4         [24] 7599 	mov	_setCursor_PARM_2,#0xb4
      0023AE 75*01 00         [24] 7600 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023B1 90 00 00         [24] 7601 	mov	dptr,#0x0000
      0023B4 12r04rAA         [24] 7602 	lcall	_setCursor
                                   7603 ;	.\ecen4350_lcd_v4.c:1624: LCD_string_write("  ");
      0023B7 90r06r6D         [24] 7604 	mov	dptr,#___str_33
      0023BA 75 F0 80         [24] 7605 	mov	b,#0x80
      0023BD 12r0FrC4         [24] 7606 	lcall	_LCD_string_write
                                   7607 ;	.\ecen4350_lcd_v4.c:1625: setColorHighlight2();
      0023C0 12r15rAA         [24] 7608 	lcall	_setColorHighlight2
                                   7609 ;	.\ecen4350_lcd_v4.c:1626: LCD_string_write("<1> BYTE\n");
      0023C3 90r06r70         [24] 7610 	mov	dptr,#___str_34
      0023C6 75 F0 80         [24] 7611 	mov	b,#0x80
      0023C9 12r0FrC4         [24] 7612 	lcall	_LCD_string_write
                                   7613 ;	.\ecen4350_lcd_v4.c:1627: setColorGray();
      0023CC 12r15rB6         [24] 7614 	lcall	_setColorGray
                                   7615 ;	.\ecen4350_lcd_v4.c:1628: LCD_string_write("\n\n                \n                ");
      0023CF 90r06r7A         [24] 7616 	mov	dptr,#___str_35
      0023D2 75 F0 80         [24] 7617 	mov	b,#0x80
      0023D5 12r0FrC4         [24] 7618 	lcall	_LCD_string_write
      0023D8 D0 02            [24] 7619 	pop	ar2
      0023DA D0 03            [24] 7620 	pop	ar3
      0023DC D0 04            [24] 7621 	pop	ar4
      0023DE D0 05            [24] 7622 	pop	ar5
      0023E0 D0 06            [24] 7623 	pop	ar6
      0023E2 D0 07            [24] 7624 	pop	ar7
      0023E4                       7625 00102$:
                                   7626 ;	.\ecen4350_lcd_v4.c:1630: } if (blockType == 0x2) {
      0023E4 BD 02 62         [24] 7627 	cjne	r5,#0x02,00104$
                                   7628 ;	.\ecen4350_lcd_v4.c:1631: invalidType = 0;
      0023E7 7C 00            [12] 7629 	mov	r4,#0x00
                                   7630 ;	.\ecen4350_lcd_v4.c:1633: setColorDefault();
      0023E9 C0 07            [24] 7631 	push	ar7
      0023EB C0 06            [24] 7632 	push	ar6
      0023ED C0 05            [24] 7633 	push	ar5
      0023EF C0 04            [24] 7634 	push	ar4
      0023F1 C0 03            [24] 7635 	push	ar3
      0023F3 C0 02            [24] 7636 	push	ar2
      0023F5 12r15r88         [24] 7637 	lcall	_setColorDefault
                                   7638 ;	.\ecen4350_lcd_v4.c:1634: setCursor(0, 160);
      0023F8 75*00 A0         [24] 7639 	mov	_setCursor_PARM_2,#0xa0
      0023FB 75*01 00         [24] 7640 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023FE 90 00 00         [24] 7641 	mov	dptr,#0x0000
      002401 12r04rAA         [24] 7642 	lcall	_setCursor
                                   7643 ;	.\ecen4350_lcd_v4.c:1635: LCD_string_write(" Choose Block Type:");
      002404 90r06r56         [24] 7644 	mov	dptr,#___str_31
      002407 75 F0 80         [24] 7645 	mov	b,#0x80
      00240A 12r0FrC4         [24] 7646 	lcall	_LCD_string_write
                                   7647 ;	.\ecen4350_lcd_v4.c:1636: setCursor(0, 180);
      00240D 75*00 B4         [24] 7648 	mov	_setCursor_PARM_2,#0xb4
      002410 75*01 00         [24] 7649 	mov	(_setCursor_PARM_2 + 1),#0x00
      002413 90 00 00         [24] 7650 	mov	dptr,#0x0000
      002416 12r04rAA         [24] 7651 	lcall	_setCursor
                                   7652 ;	.\ecen4350_lcd_v4.c:1637: setColorGray();
      002419 12r15rB6         [24] 7653 	lcall	_setColorGray
                                   7654 ;	.\ecen4350_lcd_v4.c:1638: LCD_string_write("\n  ");
      00241C 90r06r9E         [24] 7655 	mov	dptr,#___str_36
      00241F 75 F0 80         [24] 7656 	mov	b,#0x80
      002422 12r0FrC4         [24] 7657 	lcall	_LCD_string_write
                                   7658 ;	.\ecen4350_lcd_v4.c:1639: setColorHighlight2();
      002425 12r15rAA         [24] 7659 	lcall	_setColorHighlight2
                                   7660 ;	.\ecen4350_lcd_v4.c:1640: LCD_string_write("<2> WORD\n");
      002428 90r06rA2         [24] 7661 	mov	dptr,#___str_37
      00242B 75 F0 80         [24] 7662 	mov	b,#0x80
      00242E 12r0FrC4         [24] 7663 	lcall	_LCD_string_write
                                   7664 ;	.\ecen4350_lcd_v4.c:1641: setColorGray();
      002431 12r15rB6         [24] 7665 	lcall	_setColorGray
                                   7666 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("\n                \n                ");
      002434 90r06rAC         [24] 7667 	mov	dptr,#___str_38
      002437 75 F0 80         [24] 7668 	mov	b,#0x80
      00243A 12r0FrC4         [24] 7669 	lcall	_LCD_string_write
      00243D D0 02            [24] 7670 	pop	ar2
      00243F D0 03            [24] 7671 	pop	ar3
      002441 D0 04            [24] 7672 	pop	ar4
      002443 D0 05            [24] 7673 	pop	ar5
      002445 D0 06            [24] 7674 	pop	ar6
      002447 D0 07            [24] 7675 	pop	ar7
      002449                       7676 00104$:
                                   7677 ;	.\ecen4350_lcd_v4.c:1643: } if (blockType == 0x4) {
      002449 BD 04 62         [24] 7678 	cjne	r5,#0x04,00106$
                                   7679 ;	.\ecen4350_lcd_v4.c:1644: invalidType = 0;
      00244C 7C 00            [12] 7680 	mov	r4,#0x00
                                   7681 ;	.\ecen4350_lcd_v4.c:1646: setColorDefault();
      00244E C0 07            [24] 7682 	push	ar7
      002450 C0 06            [24] 7683 	push	ar6
      002452 C0 05            [24] 7684 	push	ar5
      002454 C0 04            [24] 7685 	push	ar4
      002456 C0 03            [24] 7686 	push	ar3
      002458 C0 02            [24] 7687 	push	ar2
      00245A 12r15r88         [24] 7688 	lcall	_setColorDefault
                                   7689 ;	.\ecen4350_lcd_v4.c:1647: setCursor(0, 160);
      00245D 75*00 A0         [24] 7690 	mov	_setCursor_PARM_2,#0xa0
      002460 75*01 00         [24] 7691 	mov	(_setCursor_PARM_2 + 1),#0x00
      002463 90 00 00         [24] 7692 	mov	dptr,#0x0000
      002466 12r04rAA         [24] 7693 	lcall	_setCursor
                                   7694 ;	.\ecen4350_lcd_v4.c:1648: LCD_string_write(" Choose Block Type:");
      002469 90r06r56         [24] 7695 	mov	dptr,#___str_31
      00246C 75 F0 80         [24] 7696 	mov	b,#0x80
      00246F 12r0FrC4         [24] 7697 	lcall	_LCD_string_write
                                   7698 ;	.\ecen4350_lcd_v4.c:1649: setColorGray();
      002472 12r15rB6         [24] 7699 	lcall	_setColorGray
                                   7700 ;	.\ecen4350_lcd_v4.c:1650: setCursor(0, 180);
      002475 75*00 B4         [24] 7701 	mov	_setCursor_PARM_2,#0xb4
      002478 75*01 00         [24] 7702 	mov	(_setCursor_PARM_2 + 1),#0x00
      00247B 90 00 00         [24] 7703 	mov	dptr,#0x0000
      00247E 12r04rAA         [24] 7704 	lcall	_setCursor
                                   7705 ;	.\ecen4350_lcd_v4.c:1651: LCD_string_write("\n\n  ");
      002481 90r06rCF         [24] 7706 	mov	dptr,#___str_39
      002484 75 F0 80         [24] 7707 	mov	b,#0x80
      002487 12r0FrC4         [24] 7708 	lcall	_LCD_string_write
                                   7709 ;	.\ecen4350_lcd_v4.c:1652: setColorHighlight2();
      00248A 12r15rAA         [24] 7710 	lcall	_setColorHighlight2
                                   7711 ;	.\ecen4350_lcd_v4.c:1653: LCD_string_write("<4> DWORD");
      00248D 90r06rD4         [24] 7712 	mov	dptr,#___str_40
      002490 75 F0 80         [24] 7713 	mov	b,#0x80
      002493 12r0FrC4         [24] 7714 	lcall	_LCD_string_write
                                   7715 ;	.\ecen4350_lcd_v4.c:1654: setColorGray();
      002496 12r15rB6         [24] 7716 	lcall	_setColorGray
                                   7717 ;	.\ecen4350_lcd_v4.c:1655: LCD_string_write("\n                \n                ");
      002499 90r06rAC         [24] 7718 	mov	dptr,#___str_38
      00249C 75 F0 80         [24] 7719 	mov	b,#0x80
      00249F 12r0FrC4         [24] 7720 	lcall	_LCD_string_write
      0024A2 D0 02            [24] 7721 	pop	ar2
      0024A4 D0 03            [24] 7722 	pop	ar3
      0024A6 D0 04            [24] 7723 	pop	ar4
      0024A8 D0 05            [24] 7724 	pop	ar5
      0024AA D0 06            [24] 7725 	pop	ar6
      0024AC D0 07            [24] 7726 	pop	ar7
      0024AE                       7727 00106$:
                                   7728 ;	.\ecen4350_lcd_v4.c:1657: if (invalidType) {
      0024AE EC               [12] 7729 	mov	a,r4
      0024AF 70 03            [24] 7730 	jnz	00185$
      0024B1 02r23r4B         [24] 7731 	ljmp	00109$
      0024B4                       7732 00185$:
                                   7733 ;	.\ecen4350_lcd_v4.c:1658: setColorRed();
      0024B4 C0 07            [24] 7734 	push	ar7
      0024B6 C0 06            [24] 7735 	push	ar6
      0024B8 C0 05            [24] 7736 	push	ar5
      0024BA C0 04            [24] 7737 	push	ar4
      0024BC C0 03            [24] 7738 	push	ar3
      0024BE C0 02            [24] 7739 	push	ar2
      0024C0 12r15rCD         [24] 7740 	lcall	_setColorRed
                                   7741 ;	.\ecen4350_lcd_v4.c:1659: LCD_string_write("\n  Input Error\n  Try Again");
      0024C3 90r06rDE         [24] 7742 	mov	dptr,#___str_41
      0024C6 75 F0 80         [24] 7743 	mov	b,#0x80
      0024C9 12r0FrC4         [24] 7744 	lcall	_LCD_string_write
      0024CC D0 02            [24] 7745 	pop	ar2
      0024CE D0 03            [24] 7746 	pop	ar3
      0024D0 D0 04            [24] 7747 	pop	ar4
      0024D2 D0 05            [24] 7748 	pop	ar5
      0024D4 D0 06            [24] 7749 	pop	ar6
      0024D6 D0 07            [24] 7750 	pop	ar7
      0024D8 02r23r4B         [24] 7751 	ljmp	00109$
                                   7752 ;	.\ecen4350_lcd_v4.c:1665: while (invalidSize)
      0024DB                       7753 00137$:
      0024DB                       7754 00115$:
      0024DB 78r0E            [12] 7755 	mov	r0,#_move_invalidSize_65536_609
      0024DD E6               [12] 7756 	mov	a,@r0
      0024DE 70 03            [24] 7757 	jnz	00186$
      0024E0 02r25rFF         [24] 7758 	ljmp	00140$
      0024E3                       7759 00186$:
                                   7760 ;	.\ecen4350_lcd_v4.c:1668: setCursor(0, 260);
      0024E3 C0 02            [24] 7761 	push	ar2
      0024E5 C0 03            [24] 7762 	push	ar3
      0024E7 75*00 04         [24] 7763 	mov	_setCursor_PARM_2,#0x04
      0024EA 75*01 01         [24] 7764 	mov	(_setCursor_PARM_2 + 1),#0x01
      0024ED 90 00 00         [24] 7765 	mov	dptr,#0x0000
      0024F0 C0 05            [24] 7766 	push	ar5
      0024F2 C0 03            [24] 7767 	push	ar3
      0024F4 C0 02            [24] 7768 	push	ar2
      0024F6 12r04rAA         [24] 7769 	lcall	_setCursor
                                   7770 ;	.\ecen4350_lcd_v4.c:1669: setColorSelect();
      0024F9 12r15r93         [24] 7771 	lcall	_setColorSelect
                                   7772 ;	.\ecen4350_lcd_v4.c:1670: LCD_string_write(" Input Size: ");
      0024FC 90r06rF9         [24] 7773 	mov	dptr,#___str_42
      0024FF 75 F0 80         [24] 7774 	mov	b,#0x80
      002502 12r0FrC4         [24] 7775 	lcall	_LCD_string_write
                                   7776 ;	.\ecen4350_lcd_v4.c:1671: selection = keyDetect();
      002505 12r10rE2         [24] 7777 	lcall	_keyDetect
      002508 E5 82            [12] 7778 	mov	a,dpl
      00250A 78r00            [12] 7779 	mov	r0,#_selection
      00250C F6               [12] 7780 	mov	@r0,a
                                   7781 ;	.\ecen4350_lcd_v4.c:1672: setColorHighlight1();
      00250D 12r15r9E         [24] 7782 	lcall	_setColorHighlight1
                                   7783 ;	.\ecen4350_lcd_v4.c:1673: write(selection);
      002510 78r00            [12] 7784 	mov	r0,#_selection
      002512 86 82            [24] 7785 	mov	dpl,@r0
      002514 12r0Fr5E         [24] 7786 	lcall	_write
                                   7787 ;	.\ecen4350_lcd_v4.c:1674: blockSize = ASCIItoHex(selection);
      002517 78r00            [12] 7788 	mov	r0,#_selection
      002519 86 82            [24] 7789 	mov	dpl,@r0
      00251B 12r13r50         [24] 7790 	lcall	_ASCIItoHex
      00251E AC 82            [24] 7791 	mov	r4,dpl
      002520 D0 02            [24] 7792 	pop	ar2
      002522 D0 03            [24] 7793 	pop	ar3
      002524 D0 05            [24] 7794 	pop	ar5
      002526 8C 06            [24] 7795 	mov	ar6,r4
      002528 7F 00            [12] 7796 	mov	r7,#0x00
                                   7797 ;	.\ecen4350_lcd_v4.c:1675: setColorDefault();
      00252A C0 07            [24] 7798 	push	ar7
      00252C C0 06            [24] 7799 	push	ar6
      00252E C0 05            [24] 7800 	push	ar5
      002530 C0 03            [24] 7801 	push	ar3
      002532 C0 02            [24] 7802 	push	ar2
      002534 12r15r88         [24] 7803 	lcall	_setColorDefault
      002537 D0 02            [24] 7804 	pop	ar2
      002539 D0 03            [24] 7805 	pop	ar3
      00253B D0 05            [24] 7806 	pop	ar5
      00253D D0 06            [24] 7807 	pop	ar6
      00253F D0 07            [24] 7808 	pop	ar7
                                   7809 ;	.\ecen4350_lcd_v4.c:1677: if (blockSize != blockType) {
      002541 8D 03            [24] 7810 	mov	ar3,r5
      002543 7C 00            [12] 7811 	mov	r4,#0x00
      002545 EE               [12] 7812 	mov	a,r6
      002546 B5 03 0A         [24] 7813 	cjne	a,ar3,00187$
      002549 EF               [12] 7814 	mov	a,r7
      00254A B5 04 06         [24] 7815 	cjne	a,ar4,00187$
      00254D D0 03            [24] 7816 	pop	ar3
      00254F D0 02            [24] 7817 	pop	ar2
      002551 80 57            [24] 7818 	sjmp	00113$
      002553                       7819 00187$:
      002553 D0 03            [24] 7820 	pop	ar3
      002555 D0 02            [24] 7821 	pop	ar2
                                   7822 ;	.\ecen4350_lcd_v4.c:1678: setCursor(0,280);
      002557 75*00 18         [24] 7823 	mov	_setCursor_PARM_2,#0x18
      00255A 75*01 01         [24] 7824 	mov	(_setCursor_PARM_2 + 1),#0x01
      00255D 90 00 00         [24] 7825 	mov	dptr,#0x0000
      002560 C0 07            [24] 7826 	push	ar7
      002562 C0 06            [24] 7827 	push	ar6
      002564 C0 05            [24] 7828 	push	ar5
      002566 C0 03            [24] 7829 	push	ar3
      002568 C0 02            [24] 7830 	push	ar2
      00256A 12r04rAA         [24] 7831 	lcall	_setCursor
                                   7832 ;	.\ecen4350_lcd_v4.c:1679: setColorRed();
      00256D 12r15rCD         [24] 7833 	lcall	_setColorRed
                                   7834 ;	.\ecen4350_lcd_v4.c:1680: LCD_string_write(" Mismatch Error\n Try Again");
      002570 90r07r07         [24] 7835 	mov	dptr,#___str_43
      002573 75 F0 80         [24] 7836 	mov	b,#0x80
      002576 12r0FrC4         [24] 7837 	lcall	_LCD_string_write
                                   7838 ;	.\ecen4350_lcd_v4.c:1681: setCursor(0, 260);
      002579 75*00 04         [24] 7839 	mov	_setCursor_PARM_2,#0x04
      00257C 75*01 01         [24] 7840 	mov	(_setCursor_PARM_2 + 1),#0x01
      00257F 90 00 00         [24] 7841 	mov	dptr,#0x0000
      002582 12r04rAA         [24] 7842 	lcall	_setCursor
                                   7843 ;	.\ecen4350_lcd_v4.c:1682: setColorSelect();
      002585 12r15r93         [24] 7844 	lcall	_setColorSelect
                                   7845 ;	.\ecen4350_lcd_v4.c:1683: LCD_string_write(" Input Size:");
      002588 90r06r31         [24] 7846 	mov	dptr,#___str_27
      00258B 75 F0 80         [24] 7847 	mov	b,#0x80
      00258E 12r0FrC4         [24] 7848 	lcall	_LCD_string_write
                                   7849 ;	.\ecen4350_lcd_v4.c:1684: setColorGray();
      002591 12r15rB6         [24] 7850 	lcall	_setColorGray
                                   7851 ;	.\ecen4350_lcd_v4.c:1685: LCD_string_write(" _");
      002594 90r06r3E         [24] 7852 	mov	dptr,#___str_28
      002597 75 F0 80         [24] 7853 	mov	b,#0x80
      00259A 12r0FrC4         [24] 7854 	lcall	_LCD_string_write
      00259D D0 02            [24] 7855 	pop	ar2
      00259F D0 03            [24] 7856 	pop	ar3
      0025A1 D0 05            [24] 7857 	pop	ar5
      0025A3 D0 06            [24] 7858 	pop	ar6
      0025A5 D0 07            [24] 7859 	pop	ar7
      0025A7 02r24rDB         [24] 7860 	ljmp	00115$
      0025AA                       7861 00113$:
                                   7862 ;	.\ecen4350_lcd_v4.c:1687: setCursor(0, 260);
      0025AA 75*00 04         [24] 7863 	mov	_setCursor_PARM_2,#0x04
      0025AD 75*01 01         [24] 7864 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025B0 90 00 00         [24] 7865 	mov	dptr,#0x0000
      0025B3 C0 07            [24] 7866 	push	ar7
      0025B5 C0 06            [24] 7867 	push	ar6
      0025B7 C0 05            [24] 7868 	push	ar5
      0025B9 C0 03            [24] 7869 	push	ar3
      0025BB C0 02            [24] 7870 	push	ar2
      0025BD 12r04rAA         [24] 7871 	lcall	_setCursor
                                   7872 ;	.\ecen4350_lcd_v4.c:1688: setColorDefault();
      0025C0 12r15r88         [24] 7873 	lcall	_setColorDefault
                                   7874 ;	.\ecen4350_lcd_v4.c:1689: LCD_string_write(" Input Size: ");
      0025C3 90r06rF9         [24] 7875 	mov	dptr,#___str_42
      0025C6 75 F0 80         [24] 7876 	mov	b,#0x80
      0025C9 12r0FrC4         [24] 7877 	lcall	_LCD_string_write
                                   7878 ;	.\ecen4350_lcd_v4.c:1690: setColorHighlight2();
      0025CC 12r15rAA         [24] 7879 	lcall	_setColorHighlight2
                                   7880 ;	.\ecen4350_lcd_v4.c:1691: write(selection);
      0025CF 78r00            [12] 7881 	mov	r0,#_selection
      0025D1 86 82            [24] 7882 	mov	dpl,@r0
      0025D3 12r0Fr5E         [24] 7883 	lcall	_write
                                   7884 ;	.\ecen4350_lcd_v4.c:1692: invalidSize = 0;
      0025D6 78r0E            [12] 7885 	mov	r0,#_move_invalidSize_65536_609
      0025D8 76 00            [12] 7886 	mov	@r0,#0x00
                                   7887 ;	.\ecen4350_lcd_v4.c:1693: setCursor(0,280);
      0025DA 75*00 18         [24] 7888 	mov	_setCursor_PARM_2,#0x18
      0025DD 75*01 01         [24] 7889 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025E0 90 00 00         [24] 7890 	mov	dptr,#0x0000
      0025E3 12r04rAA         [24] 7891 	lcall	_setCursor
                                   7892 ;	.\ecen4350_lcd_v4.c:1694: setColorGreen();
      0025E6 12r15rE3         [24] 7893 	lcall	_setColorGreen
                                   7894 ;	.\ecen4350_lcd_v4.c:1695: LCD_string_write(" Match Confirmed\n                ");
      0025E9 90r07r22         [24] 7895 	mov	dptr,#___str_44
      0025EC 75 F0 80         [24] 7896 	mov	b,#0x80
      0025EF 12r0FrC4         [24] 7897 	lcall	_LCD_string_write
      0025F2 D0 02            [24] 7898 	pop	ar2
      0025F4 D0 03            [24] 7899 	pop	ar3
      0025F6 D0 05            [24] 7900 	pop	ar5
      0025F8 D0 06            [24] 7901 	pop	ar6
      0025FA D0 07            [24] 7902 	pop	ar7
      0025FC 02r24rDB         [24] 7903 	ljmp	00115$
                                   7904 ;	.\ecen4350_lcd_v4.c:1701: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      0025FF                       7905 00140$:
      0025FF 78r0C            [12] 7906 	mov	r0,#_move_sourceAddress_65536_609
      002601 EE               [12] 7907 	mov	a,r6
      002602 26               [12] 7908 	add	a,@r0
      002603 FE               [12] 7909 	mov	r6,a
      002604 EF               [12] 7910 	mov	a,r7
      002605 08               [12] 7911 	inc	r0
      002606 36               [12] 7912 	addc	a,@r0
      002607 FF               [12] 7913 	mov	r7,a
      002608 78r0C            [12] 7914 	mov	r0,#_move_sourceAddress_65536_609
      00260A 86*55            [24] 7915 	mov	_move_i_131072_618,@r0
      00260C 08               [12] 7916 	inc	r0
      00260D 86*56            [24] 7917 	mov	(_move_i_131072_618 + 1),@r0
      00260F                       7918 00125$:
      00260F C3               [12] 7919 	clr	c
      002610 E5*55            [12] 7920 	mov	a,_move_i_131072_618
      002612 9E               [12] 7921 	subb	a,r6
      002613 E5*56            [12] 7922 	mov	a,(_move_i_131072_618 + 1)
      002615 9F               [12] 7923 	subb	a,r7
      002616 50 37            [24] 7924 	jnc	00121$
                                   7925 ;	.\ecen4350_lcd_v4.c:1702: d = (unsigned char __xdata*)(destAddress);
      002618 8A*53            [24] 7926 	mov	_move_d_65536_609,r2
      00261A 8B*54            [24] 7927 	mov	(_move_d_65536_609 + 1),r3
                                   7928 ;	.\ecen4350_lcd_v4.c:1703: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      00261C 85*55 82         [24] 7929 	mov	dpl,_move_i_131072_618
      00261F 85*56 83         [24] 7930 	mov	dph,(_move_i_131072_618 + 1)
                                   7931 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7932 ;	assignBit
      002622 C2 B5            [12] 7933 	clr	_P3_5
                                   7934 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002624 E0               [24] 7935 	movx	a,@dptr
      002625 FD               [12] 7936 	mov	r5,a
                                   7937 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7938 ;	assignBit
      002626 D2 B5            [12] 7939 	setb	_P3_5
                                   7940 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   7941 ;	assignBit
      002628 C2 B5            [12] 7942 	clr	_P3_5
                                   7943 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      00262A 85*53 82         [24] 7944 	mov	dpl,_move_d_65536_609
      00262D 85*54 83         [24] 7945 	mov	dph,(_move_d_65536_609 + 1)
      002630 ED               [12] 7946 	mov	a,r5
      002631 F0               [24] 7947 	movx	@dptr,a
                                   7948 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   7949 ;	assignBit
      002632 D2 B5            [12] 7950 	setb	_P3_5
                                   7951 ;	.\ecen4350_lcd_v4.c:1704: if (destAddress == 0xFFFF) {						// check end of RAM
      002634 BA FF 09         [24] 7952 	cjne	r2,#0xff,00119$
      002637 BB FF 06         [24] 7953 	cjne	r3,#0xff,00119$
                                   7954 ;	.\ecen4350_lcd_v4.c:1705: destAddress = 0x0000;
      00263A 7A 00            [12] 7955 	mov	r2,#0x00
      00263C 7B 00            [12] 7956 	mov	r3,#0x00
      00263E 80 05            [24] 7957 	sjmp	00126$
      002640                       7958 00119$:
                                   7959 ;	.\ecen4350_lcd_v4.c:1707: destAddress++;
      002640 0A               [12] 7960 	inc	r2
      002641 BA 00 01         [24] 7961 	cjne	r2,#0x00,00191$
      002644 0B               [12] 7962 	inc	r3
      002645                       7963 00191$:
      002645                       7964 00126$:
                                   7965 ;	.\ecen4350_lcd_v4.c:1701: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      002645 05*55            [12] 7966 	inc	_move_i_131072_618
      002647 E4               [12] 7967 	clr	a
      002648 B5*55 C4         [24] 7968 	cjne	a,_move_i_131072_618,00125$
      00264B 05*56            [12] 7969 	inc	(_move_i_131072_618 + 1)
      00264D 80 C0            [24] 7970 	sjmp	00125$
      00264F                       7971 00121$:
                                   7972 ;	.\ecen4350_lcd_v4.c:1711: setCursor(0, 300);
      00264F 75*00 2C         [24] 7973 	mov	_setCursor_PARM_2,#0x2c
      002652 75*01 01         [24] 7974 	mov	(_setCursor_PARM_2 + 1),#0x01
      002655 90 00 00         [24] 7975 	mov	dptr,#0x0000
      002658 12r04rAA         [24] 7976 	lcall	_setCursor
                                   7977 ;	.\ecen4350_lcd_v4.c:1712: setColorGreen();
      00265B 12r15rE3         [24] 7978 	lcall	_setColorGreen
                                   7979 ;	.\ecen4350_lcd_v4.c:1713: LCD_string_write(" Move Complete\n");
      00265E 90r07rC5         [24] 7980 	mov	dptr,#___str_58
      002661 75 F0 80         [24] 7981 	mov	b,#0x80
      002664 12r0FrC4         [24] 7982 	lcall	_LCD_string_write
                                   7983 ;	.\ecen4350_lcd_v4.c:1714: delay(60);
      002667 90 00 3C         [24] 7984 	mov	dptr,#0x003c
      00266A 12r00rE0         [24] 7985 	lcall	_delay
                                   7986 ;	.\ecen4350_lcd_v4.c:1715: selection = 'null';
      00266D 78r00            [12] 7987 	mov	r0,#_selection
      00266F 76 6E            [12] 7988 	mov	@r0,#0x6e
                                   7989 ;	.\ecen4350_lcd_v4.c:1716: return;
                                   7990 ;	.\ecen4350_lcd_v4.c:1717: }
      002671 22               [24] 7991 	ret
                                   7992 ;------------------------------------------------------------
                                   7993 ;Allocation info for local variables in function 'edit'
                                   7994 ;------------------------------------------------------------
                                   7995 ;__1310720151              Allocated to registers 
                                   7996 ;d                         Allocated with name '_edit_d_65536_628'
                                   7997 ;__1310720152              Allocated to registers 
                                   7998 ;map_address               Allocated to registers 
                                   7999 ;d                         Allocated to registers 
                                   8000 ;__1310720154              Allocated to registers 
                                   8001 ;__1310720155              Allocated to registers 
                                   8002 ;map_address               Allocated to registers 
                                   8003 ;d                         Allocated to registers 
                                   8004 ;__2621440157              Allocated to registers 
                                   8005 ;__2621440158              Allocated to registers 
                                   8006 ;map_address               Allocated to registers 
                                   8007 ;d                         Allocated to registers r2 
                                   8008 ;__2621440160              Allocated to registers 
                                   8009 ;__2621440161              Allocated to registers 
                                   8010 ;map_address               Allocated to registers 
                                   8011 ;d                         Allocated to registers 
                                   8012 ;__2621440163              Allocated to registers 
                                   8013 ;__2621440164              Allocated to registers 
                                   8014 ;map_address               Allocated to registers 
                                   8015 ;d                         Allocated to registers 
                                   8016 ;__2621440166              Allocated to registers 
                                   8017 ;__2621440167              Allocated to registers 
                                   8018 ;map_address               Allocated to registers 
                                   8019 ;d                         Allocated to registers 
                                   8020 ;address                   Allocated to registers r5 r6 
                                   8021 ;value                     Allocated to registers r7 
                                   8022 ;exit                      Allocated with name '_edit_exit_65536_628'
                                   8023 ;invalid                   Allocated with name '_edit_invalid_65536_628'
                                   8024 ;------------------------------------------------------------
                                   8025 ;	.\ecen4350_lcd_v4.c:1719: void edit(){
                                   8026 ;	-----------------------------------------
                                   8027 ;	 function edit
                                   8028 ;	-----------------------------------------
      002672                       8029 _edit:
                                   8030 ;	.\ecen4350_lcd_v4.c:1723: __idata unsigned char exit = 1;
      002672 78r0F            [12] 8031 	mov	r0,#_edit_exit_65536_628
      002674 76 01            [12] 8032 	mov	@r0,#0x01
                                   8033 ;	.\ecen4350_lcd_v4.c:1726: clearLCD();
      002676 12r0Dr47         [24] 8034 	lcall	_clearLCD
                                   8035 ;	.\ecen4350_lcd_v4.c:1729: fillTop(GRAY);
      002679 90 D6 BA         [24] 8036 	mov	dptr,#0xd6ba
      00267C 12r0Br7A         [24] 8037 	lcall	_fillTop
                                   8038 ;	.\ecen4350_lcd_v4.c:1730: setTextSize(5);
      00267F 75 82 05         [24] 8039 	mov	dpl,#0x05
      002682 12r04rC4         [24] 8040 	lcall	_setTextSize
                                   8041 ;	.\ecen4350_lcd_v4.c:1731: setColorMenu();
      002685 12r15rC1         [24] 8042 	lcall	_setColorMenu
                                   8043 ;	.\ecen4350_lcd_v4.c:1732: setCursor(30, 0);
      002688 E4               [12] 8044 	clr	a
      002689 F5*00            [12] 8045 	mov	_setCursor_PARM_2,a
      00268B F5*01            [12] 8046 	mov	(_setCursor_PARM_2 + 1),a
      00268D 90 00 1E         [24] 8047 	mov	dptr,#0x001e
      002690 12r04rAA         [24] 8048 	lcall	_setCursor
                                   8049 ;	.\ecen4350_lcd_v4.c:1733: LCD_string_write("[EDIT]\n");
      002693 90r07rD5         [24] 8050 	mov	dptr,#___str_59
      002696 75 F0 80         [24] 8051 	mov	b,#0x80
      002699 12r0FrC4         [24] 8052 	lcall	_LCD_string_write
                                   8053 ;	.\ecen4350_lcd_v4.c:1734: setTextSize(2);
      00269C 75 82 02         [24] 8054 	mov	dpl,#0x02
      00269F 12r04rC4         [24] 8055 	lcall	_setTextSize
                                   8056 ;	.\ecen4350_lcd_v4.c:1735: setColorDefault();
      0026A2 12r15r88         [24] 8057 	lcall	_setColorDefault
                                   8058 ;	.\ecen4350_lcd_v4.c:1736: setCursor(0, 60);
      0026A5 75*00 3C         [24] 8059 	mov	_setCursor_PARM_2,#0x3c
      0026A8 75*01 00         [24] 8060 	mov	(_setCursor_PARM_2 + 1),#0x00
      0026AB 90 00 00         [24] 8061 	mov	dptr,#0x0000
      0026AE 12r04rAA         [24] 8062 	lcall	_setCursor
                                   8063 ;	.\ecen4350_lcd_v4.c:1737: LCD_string_write(" Edit Address:");
      0026B1 90r07rDD         [24] 8064 	mov	dptr,#___str_60
      0026B4 75 F0 80         [24] 8065 	mov	b,#0x80
      0026B7 12r0FrC4         [24] 8066 	lcall	_LCD_string_write
                                   8067 ;	.\ecen4350_lcd_v4.c:1738: setCursor(0, 80);
      0026BA 75*00 50         [24] 8068 	mov	_setCursor_PARM_2,#0x50
      0026BD 75*01 00         [24] 8069 	mov	(_setCursor_PARM_2 + 1),#0x00
      0026C0 90 00 00         [24] 8070 	mov	dptr,#0x0000
      0026C3 12r04rAA         [24] 8071 	lcall	_setCursor
                                   8072 ;	.\ecen4350_lcd_v4.c:1739: setColorGray();
      0026C6 12r15rB6         [24] 8073 	lcall	_setColorGray
                                   8074 ;	.\ecen4350_lcd_v4.c:1740: LCD_string_write(" 0x____");
      0026C9 90r05rF2         [24] 8075 	mov	dptr,#___str_24
      0026CC 75 F0 80         [24] 8076 	mov	b,#0x80
      0026CF 12r0FrC4         [24] 8077 	lcall	_LCD_string_write
                                   8078 ;	.\ecen4350_lcd_v4.c:1741: setCursor(0, 110);
      0026D2 75*00 6E         [24] 8079 	mov	_setCursor_PARM_2,#0x6e
      0026D5 75*01 00         [24] 8080 	mov	(_setCursor_PARM_2 + 1),#0x00
      0026D8 90 00 00         [24] 8081 	mov	dptr,#0x0000
      0026DB 12r04rAA         [24] 8082 	lcall	_setCursor
                                   8083 ;	.\ecen4350_lcd_v4.c:1742: setColorDefault();
      0026DE 12r15r88         [24] 8084 	lcall	_setColorDefault
                                   8085 ;	.\ecen4350_lcd_v4.c:1743: LCD_string_write(" Location Contents:\n");
      0026E1 90r07rEC         [24] 8086 	mov	dptr,#___str_61
      0026E4 75 F0 80         [24] 8087 	mov	b,#0x80
      0026E7 12r0FrC4         [24] 8088 	lcall	_LCD_string_write
                                   8089 ;	.\ecen4350_lcd_v4.c:1744: setColorGray();
      0026EA 12r15rB6         [24] 8090 	lcall	_setColorGray
                                   8091 ;	.\ecen4350_lcd_v4.c:1745: LCD_string_write(" __");
      0026ED 90r08r01         [24] 8092 	mov	dptr,#___str_62
      0026F0 75 F0 80         [24] 8093 	mov	b,#0x80
      0026F3 12r0FrC4         [24] 8094 	lcall	_LCD_string_write
                                   8095 ;	.\ecen4350_lcd_v4.c:1746: setCursor(0, 160);
      0026F6 75*00 A0         [24] 8096 	mov	_setCursor_PARM_2,#0xa0
      0026F9 75*01 00         [24] 8097 	mov	(_setCursor_PARM_2 + 1),#0x00
      0026FC 90 00 00         [24] 8098 	mov	dptr,#0x0000
      0026FF 12r04rAA         [24] 8099 	lcall	_setCursor
                                   8100 ;	.\ecen4350_lcd_v4.c:1747: setColorDefault();
      002702 12r15r88         [24] 8101 	lcall	_setColorDefault
                                   8102 ;	.\ecen4350_lcd_v4.c:1748: LCD_string_write(" Enter New Value:\n");
      002705 90r08r05         [24] 8103 	mov	dptr,#___str_63
      002708 75 F0 80         [24] 8104 	mov	b,#0x80
      00270B 12r0FrC4         [24] 8105 	lcall	_LCD_string_write
                                   8106 ;	.\ecen4350_lcd_v4.c:1749: setColorGray();
      00270E 12r15rB6         [24] 8107 	lcall	_setColorGray
                                   8108 ;	.\ecen4350_lcd_v4.c:1750: LCD_string_write(" __");
      002711 90r08r01         [24] 8109 	mov	dptr,#___str_62
      002714 75 F0 80         [24] 8110 	mov	b,#0x80
      002717 12r0FrC4         [24] 8111 	lcall	_LCD_string_write
                                   8112 ;	.\ecen4350_lcd_v4.c:1751: setCursor(0,210);
      00271A 75*00 D2         [24] 8113 	mov	_setCursor_PARM_2,#0xd2
      00271D 75*01 00         [24] 8114 	mov	(_setCursor_PARM_2 + 1),#0x00
      002720 90 00 00         [24] 8115 	mov	dptr,#0x0000
      002723 12r04rAA         [24] 8116 	lcall	_setCursor
                                   8117 ;	.\ecen4350_lcd_v4.c:1752: setColorDefault();
      002726 12r15r88         [24] 8118 	lcall	_setColorDefault
                                   8119 ;	.\ecen4350_lcd_v4.c:1753: LCD_string_write(" Choose Next Action:\n");
      002729 90r08r18         [24] 8120 	mov	dptr,#___str_64
      00272C 75 F0 80         [24] 8121 	mov	b,#0x80
      00272F 12r0FrC4         [24] 8122 	lcall	_LCD_string_write
                                   8123 ;	.\ecen4350_lcd_v4.c:1754: setColorGray();
      002732 12r15rB6         [24] 8124 	lcall	_setColorGray
                                   8125 ;	.\ecen4350_lcd_v4.c:1755: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002735 90r08r2E         [24] 8126 	mov	dptr,#___str_65
      002738 75 F0 80         [24] 8127 	mov	b,#0x80
      00273B 12r0FrC4         [24] 8128 	lcall	_LCD_string_write
                                   8129 ;	.\ecen4350_lcd_v4.c:1756: LCD_string_write("  <0> Exit");
      00273E 90r08r54         [24] 8130 	mov	dptr,#___str_66
      002741 75 F0 80         [24] 8131 	mov	b,#0x80
      002744 12r0FrC4         [24] 8132 	lcall	_LCD_string_write
                                   8133 ;	.\ecen4350_lcd_v4.c:1763: setColorSelect();
      002747 12r15r93         [24] 8134 	lcall	_setColorSelect
                                   8135 ;	.\ecen4350_lcd_v4.c:1764: setCursor(0, 60);
      00274A 75*00 3C         [24] 8136 	mov	_setCursor_PARM_2,#0x3c
      00274D 75*01 00         [24] 8137 	mov	(_setCursor_PARM_2 + 1),#0x00
      002750 90 00 00         [24] 8138 	mov	dptr,#0x0000
      002753 12r04rAA         [24] 8139 	lcall	_setCursor
                                   8140 ;	.\ecen4350_lcd_v4.c:1765: LCD_string_write(" Edit Address:");
      002756 90r07rDD         [24] 8141 	mov	dptr,#___str_60
      002759 75 F0 80         [24] 8142 	mov	b,#0x80
      00275C 12r0FrC4         [24] 8143 	lcall	_LCD_string_write
                                   8144 ;	.\ecen4350_lcd_v4.c:1766: setCursor(0, 80);
      00275F 75*00 50         [24] 8145 	mov	_setCursor_PARM_2,#0x50
      002762 75*01 00         [24] 8146 	mov	(_setCursor_PARM_2 + 1),#0x00
      002765 90 00 00         [24] 8147 	mov	dptr,#0x0000
      002768 12r04rAA         [24] 8148 	lcall	_setCursor
                                   8149 ;	.\ecen4350_lcd_v4.c:1767: LCD_string_write(" ");
      00276B 90r06r54         [24] 8150 	mov	dptr,#___str_30
      00276E 75 F0 80         [24] 8151 	mov	b,#0x80
      002771 12r0FrC4         [24] 8152 	lcall	_LCD_string_write
                                   8153 ;	.\ecen4350_lcd_v4.c:1768: setColorHighlight1();
      002774 12r15r9E         [24] 8154 	lcall	_setColorHighlight1
                                   8155 ;	.\ecen4350_lcd_v4.c:1769: LCD_string_write("0x");
      002777 90r05r29         [24] 8156 	mov	dptr,#___str_2
      00277A 75 F0 80         [24] 8157 	mov	b,#0x80
      00277D 12r0FrC4         [24] 8158 	lcall	_LCD_string_write
                                   8159 ;	.\ecen4350_lcd_v4.c:1770: address = inputAddress();		// input 16-bit address and store in memory
      002780 12r15rF9         [24] 8160 	lcall	_inputAddress
      002783 AD 82            [24] 8161 	mov	r5,dpl
      002785 AE 83            [24] 8162 	mov	r6,dph
                                   8163 ;	.\ecen4350_lcd_v4.c:1771: d = (unsigned char __xdata*)address;
      002787 8D 03            [24] 8164 	mov	ar3,r5
      002789 8E 04            [24] 8165 	mov	ar4,r6
                                   8166 ;	.\ecen4350_lcd_v4.c:1774: setColorDefault();
      00278B C0 06            [24] 8167 	push	ar6
      00278D C0 05            [24] 8168 	push	ar5
      00278F C0 04            [24] 8169 	push	ar4
      002791 C0 03            [24] 8170 	push	ar3
      002793 12r15r88         [24] 8171 	lcall	_setColorDefault
                                   8172 ;	.\ecen4350_lcd_v4.c:1775: setCursor(0, 60);
      002796 75*00 3C         [24] 8173 	mov	_setCursor_PARM_2,#0x3c
      002799 75*01 00         [24] 8174 	mov	(_setCursor_PARM_2 + 1),#0x00
      00279C 90 00 00         [24] 8175 	mov	dptr,#0x0000
      00279F 12r04rAA         [24] 8176 	lcall	_setCursor
                                   8177 ;	.\ecen4350_lcd_v4.c:1776: LCD_string_write(" Edit Address:");
      0027A2 90r07rDD         [24] 8178 	mov	dptr,#___str_60
      0027A5 75 F0 80         [24] 8179 	mov	b,#0x80
      0027A8 12r0FrC4         [24] 8180 	lcall	_LCD_string_write
                                   8181 ;	.\ecen4350_lcd_v4.c:1777: setCursor(0, 80);
      0027AB 75*00 50         [24] 8182 	mov	_setCursor_PARM_2,#0x50
      0027AE 75*01 00         [24] 8183 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027B1 90 00 00         [24] 8184 	mov	dptr,#0x0000
      0027B4 12r04rAA         [24] 8185 	lcall	_setCursor
                                   8186 ;	.\ecen4350_lcd_v4.c:1778: LCD_string_write(" ");
      0027B7 90r06r54         [24] 8187 	mov	dptr,#___str_30
      0027BA 75 F0 80         [24] 8188 	mov	b,#0x80
      0027BD 12r0FrC4         [24] 8189 	lcall	_LCD_string_write
                                   8190 ;	.\ecen4350_lcd_v4.c:1779: setColorHighlight2();
      0027C0 12r15rAA         [24] 8191 	lcall	_setColorHighlight2
                                   8192 ;	.\ecen4350_lcd_v4.c:1780: LCD_string_write("0x");
      0027C3 90r05r29         [24] 8193 	mov	dptr,#___str_2
      0027C6 75 F0 80         [24] 8194 	mov	b,#0x80
      0027C9 12r0FrC4         [24] 8195 	lcall	_LCD_string_write
      0027CC D0 03            [24] 8196 	pop	ar3
      0027CE D0 04            [24] 8197 	pop	ar4
      0027D0 D0 05            [24] 8198 	pop	ar5
      0027D2 D0 06            [24] 8199 	pop	ar6
                                   8200 ;	.\ecen4350_lcd_v4.c:1781: print16Hex(address);		// print 16-bit address from stored memory
      0027D4 8D 82            [24] 8201 	mov	dpl,r5
      0027D6 8E 83            [24] 8202 	mov	dph,r6
      0027D8 C0 06            [24] 8203 	push	ar6
      0027DA C0 05            [24] 8204 	push	ar5
      0027DC C0 04            [24] 8205 	push	ar4
      0027DE C0 03            [24] 8206 	push	ar3
      0027E0 12r14rAC         [24] 8207 	lcall	_print16Hex
                                   8208 ;	.\ecen4350_lcd_v4.c:1784: setCursor(0, 110);
      0027E3 75*00 6E         [24] 8209 	mov	_setCursor_PARM_2,#0x6e
      0027E6 75*01 00         [24] 8210 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027E9 90 00 00         [24] 8211 	mov	dptr,#0x0000
      0027EC 12r04rAA         [24] 8212 	lcall	_setCursor
                                   8213 ;	.\ecen4350_lcd_v4.c:1785: setColorDefault();
      0027EF 12r15r88         [24] 8214 	lcall	_setColorDefault
                                   8215 ;	.\ecen4350_lcd_v4.c:1786: LCD_string_write("\n ");
      0027F2 90r08r5F         [24] 8216 	mov	dptr,#___str_67
      0027F5 75 F0 80         [24] 8217 	mov	b,#0x80
      0027F8 12r0FrC4         [24] 8218 	lcall	_LCD_string_write
                                   8219 ;	.\ecen4350_lcd_v4.c:1787: setColorHighlight2();
      0027FB 12r15rAA         [24] 8220 	lcall	_setColorHighlight2
      0027FE D0 03            [24] 8221 	pop	ar3
      002800 D0 04            [24] 8222 	pop	ar4
                                   8223 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8224 ;	assignBit
      002802 C2 B5            [12] 8225 	clr	_P3_5
                                   8226 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002804 8B 82            [24] 8227 	mov	dpl,r3
      002806 8C 83            [24] 8228 	mov	dph,r4
      002808 E0               [24] 8229 	movx	a,@dptr
      002809 F5 82            [12] 8230 	mov	dpl,a
                                   8231 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8232 ;	assignBit
      00280B D2 B5            [12] 8233 	setb	_P3_5
                                   8234 ;	.\ecen4350_lcd_v4.c:1788: print8Hex(ramRead8(d));
      00280D C0 04            [24] 8235 	push	ar4
      00280F C0 03            [24] 8236 	push	ar3
      002811 12r14r95         [24] 8237 	lcall	_print8Hex
                                   8238 ;	.\ecen4350_lcd_v4.c:1791: setCursor(0, 160);
      002814 75*00 A0         [24] 8239 	mov	_setCursor_PARM_2,#0xa0
      002817 75*01 00         [24] 8240 	mov	(_setCursor_PARM_2 + 1),#0x00
      00281A 90 00 00         [24] 8241 	mov	dptr,#0x0000
      00281D 12r04rAA         [24] 8242 	lcall	_setCursor
                                   8243 ;	.\ecen4350_lcd_v4.c:1792: setColorSelect();
      002820 12r15r93         [24] 8244 	lcall	_setColorSelect
                                   8245 ;	.\ecen4350_lcd_v4.c:1793: LCD_string_write(" Enter New Value:\n ");
      002823 90r08r62         [24] 8246 	mov	dptr,#___str_68
      002826 75 F0 80         [24] 8247 	mov	b,#0x80
      002829 12r0FrC4         [24] 8248 	lcall	_LCD_string_write
                                   8249 ;	.\ecen4350_lcd_v4.c:1794: setColorHighlight1();
      00282C 12r15r9E         [24] 8250 	lcall	_setColorHighlight1
                                   8251 ;	.\ecen4350_lcd_v4.c:1795: selection = keyDetect();
      00282F 12r10rE2         [24] 8252 	lcall	_keyDetect
      002832 AA 82            [24] 8253 	mov	r2,dpl
      002834 78r00            [12] 8254 	mov	r0,#_selection
      002836 A6 02            [24] 8255 	mov	@r0,ar2
                                   8256 ;	.\ecen4350_lcd_v4.c:1796: write(selection);
      002838 8A 82            [24] 8257 	mov	dpl,r2
      00283A 12r0Fr5E         [24] 8258 	lcall	_write
                                   8259 ;	.\ecen4350_lcd_v4.c:1797: selection = ASCIItoHex(selection);
      00283D 78r00            [12] 8260 	mov	r0,#_selection
      00283F 86 82            [24] 8261 	mov	dpl,@r0
      002841 12r13r50         [24] 8262 	lcall	_ASCIItoHex
      002844 AA 82            [24] 8263 	mov	r2,dpl
      002846 78r00            [12] 8264 	mov	r0,#_selection
      002848 A6 02            [24] 8265 	mov	@r0,ar2
                                   8266 ;	.\ecen4350_lcd_v4.c:1798: value |= selection * 16;
      00284A EA               [12] 8267 	mov	a,r2
      00284B C4               [12] 8268 	swap	a
      00284C 54 F0            [12] 8269 	anl	a,#0xf0
      00284E FA               [12] 8270 	mov	r2,a
                                   8271 ;	.\ecen4350_lcd_v4.c:1799: selection = keyDetect();
      00284F C0 02            [24] 8272 	push	ar2
      002851 12r10rE2         [24] 8273 	lcall	_keyDetect
      002854 AF 82            [24] 8274 	mov	r7,dpl
      002856 78r00            [12] 8275 	mov	r0,#_selection
      002858 A6 07            [24] 8276 	mov	@r0,ar7
                                   8277 ;	.\ecen4350_lcd_v4.c:1800: write(selection);
      00285A 8F 82            [24] 8278 	mov	dpl,r7
      00285C 12r0Fr5E         [24] 8279 	lcall	_write
                                   8280 ;	.\ecen4350_lcd_v4.c:1801: selection = ASCIItoHex(selection);
      00285F 78r00            [12] 8281 	mov	r0,#_selection
      002861 86 82            [24] 8282 	mov	dpl,@r0
      002863 12r13r50         [24] 8283 	lcall	_ASCIItoHex
      002866 AF 82            [24] 8284 	mov	r7,dpl
      002868 D0 02            [24] 8285 	pop	ar2
      00286A D0 03            [24] 8286 	pop	ar3
      00286C D0 04            [24] 8287 	pop	ar4
      00286E D0 05            [24] 8288 	pop	ar5
      002870 D0 06            [24] 8289 	pop	ar6
      002872 78r00            [12] 8290 	mov	r0,#_selection
      002874 A6 07            [24] 8291 	mov	@r0,ar7
                                   8292 ;	.\ecen4350_lcd_v4.c:1802: value |= selection;
      002876 EA               [12] 8293 	mov	a,r2
      002877 42 07            [12] 8294 	orl	ar7,a
                                   8295 ;	.\ecen4350_lcd_v4.c:1805: setColorDefault();
      002879 C0 07            [24] 8296 	push	ar7
      00287B C0 06            [24] 8297 	push	ar6
      00287D C0 05            [24] 8298 	push	ar5
      00287F C0 04            [24] 8299 	push	ar4
      002881 C0 03            [24] 8300 	push	ar3
      002883 12r15r88         [24] 8301 	lcall	_setColorDefault
                                   8302 ;	.\ecen4350_lcd_v4.c:1806: setCursor(0, 160);
      002886 75*00 A0         [24] 8303 	mov	_setCursor_PARM_2,#0xa0
      002889 75*01 00         [24] 8304 	mov	(_setCursor_PARM_2 + 1),#0x00
      00288C 90 00 00         [24] 8305 	mov	dptr,#0x0000
      00288F 12r04rAA         [24] 8306 	lcall	_setCursor
                                   8307 ;	.\ecen4350_lcd_v4.c:1807: LCD_string_write(" Enter New Value:\n ");
      002892 90r08r62         [24] 8308 	mov	dptr,#___str_68
      002895 75 F0 80         [24] 8309 	mov	b,#0x80
      002898 12r0FrC4         [24] 8310 	lcall	_LCD_string_write
                                   8311 ;	.\ecen4350_lcd_v4.c:1808: setColorHighlight2();
      00289B 12r15rAA         [24] 8312 	lcall	_setColorHighlight2
      00289E D0 03            [24] 8313 	pop	ar3
      0028A0 D0 04            [24] 8314 	pop	ar4
      0028A2 D0 05            [24] 8315 	pop	ar5
      0028A4 D0 06            [24] 8316 	pop	ar6
      0028A6 D0 07            [24] 8317 	pop	ar7
                                   8318 ;	.\ecen4350_lcd_v4.c:1809: print8Hex(value);
      0028A8 8F 82            [24] 8319 	mov	dpl,r7
      0028AA C0 07            [24] 8320 	push	ar7
      0028AC C0 06            [24] 8321 	push	ar6
      0028AE C0 05            [24] 8322 	push	ar5
      0028B0 C0 04            [24] 8323 	push	ar4
      0028B2 C0 03            [24] 8324 	push	ar3
      0028B4 12r14r95         [24] 8325 	lcall	_print8Hex
      0028B7 D0 03            [24] 8326 	pop	ar3
      0028B9 D0 04            [24] 8327 	pop	ar4
      0028BB D0 05            [24] 8328 	pop	ar5
      0028BD D0 06            [24] 8329 	pop	ar6
      0028BF D0 07            [24] 8330 	pop	ar7
                                   8331 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8332 ;	assignBit
      0028C1 C2 B5            [12] 8333 	clr	_P3_5
                                   8334 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      0028C3 8B 82            [24] 8335 	mov	dpl,r3
      0028C5 8C 83            [24] 8336 	mov	dph,r4
      0028C7 EF               [12] 8337 	mov	a,r7
      0028C8 F0               [24] 8338 	movx	@dptr,a
                                   8339 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8340 ;	assignBit
      0028C9 D2 B5            [12] 8341 	setb	_P3_5
                                   8342 ;	.\ecen4350_lcd_v4.c:1814: setCursor(0, 210);
      0028CB 75*00 D2         [24] 8343 	mov	_setCursor_PARM_2,#0xd2
      0028CE 75*01 00         [24] 8344 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028D1 90 00 00         [24] 8345 	mov	dptr,#0x0000
      0028D4 C0 06            [24] 8346 	push	ar6
      0028D6 C0 05            [24] 8347 	push	ar5
      0028D8 12r04rAA         [24] 8348 	lcall	_setCursor
                                   8349 ;	.\ecen4350_lcd_v4.c:1815: setColorSelect();
      0028DB 12r15r93         [24] 8350 	lcall	_setColorSelect
                                   8351 ;	.\ecen4350_lcd_v4.c:1816: LCD_string_write(" Choose Next Action:\n");
      0028DE 90r08r18         [24] 8352 	mov	dptr,#___str_64
      0028E1 75 F0 80         [24] 8353 	mov	b,#0x80
      0028E4 12r0FrC4         [24] 8354 	lcall	_LCD_string_write
                                   8355 ;	.\ecen4350_lcd_v4.c:1817: setColorWhite();
      0028E7 12r15rD8         [24] 8356 	lcall	_setColorWhite
                                   8357 ;	.\ecen4350_lcd_v4.c:1818: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      0028EA 90r08r2E         [24] 8358 	mov	dptr,#___str_65
      0028ED 75 F0 80         [24] 8359 	mov	b,#0x80
      0028F0 12r0FrC4         [24] 8360 	lcall	_LCD_string_write
                                   8361 ;	.\ecen4350_lcd_v4.c:1819: LCD_string_write("  <0> Exit");
      0028F3 90r08r54         [24] 8362 	mov	dptr,#___str_66
      0028F6 75 F0 80         [24] 8363 	mov	b,#0x80
      0028F9 12r0FrC4         [24] 8364 	lcall	_LCD_string_write
      0028FC D0 05            [24] 8365 	pop	ar5
      0028FE D0 06            [24] 8366 	pop	ar6
                                   8367 ;	.\ecen4350_lcd_v4.c:1825: while(exit){
      002900                       8368 00109$:
      002900 78r0F            [12] 8369 	mov	r0,#_edit_exit_65536_628
      002902 E6               [12] 8370 	mov	a,@r0
      002903 70 01            [24] 8371 	jnz	00150$
      002905 22               [24] 8372 	ret
      002906                       8373 00150$:
                                   8374 ;	.\ecen4350_lcd_v4.c:1826: selection = keyDetect();
      002906 C0 06            [24] 8375 	push	ar6
      002908 C0 05            [24] 8376 	push	ar5
      00290A 12r10rE2         [24] 8377 	lcall	_keyDetect
      00290D AF 82            [24] 8378 	mov	r7,dpl
      00290F D0 05            [24] 8379 	pop	ar5
      002911 D0 06            [24] 8380 	pop	ar6
      002913 78r00            [12] 8381 	mov	r0,#_selection
      002915 A6 07            [24] 8382 	mov	@r0,ar7
                                   8383 ;	.\ecen4350_lcd_v4.c:1827: invalid = 1;
      002917 78r10            [12] 8384 	mov	r0,#_edit_invalid_65536_628
      002919 76 01            [12] 8385 	mov	@r0,#0x01
                                   8386 ;	.\ecen4350_lcd_v4.c:1828: if (selection == '1') {		/* Highlight choice and gray out others */
      00291B BF 31 02         [24] 8387 	cjne	r7,#0x31,00151$
      00291E 80 03            [24] 8388 	sjmp	00152$
      002920                       8389 00151$:
      002920 02r2ArFF         [24] 8390 	ljmp	00102$
      002923                       8391 00152$:
                                   8392 ;	.\ecen4350_lcd_v4.c:1829: invalid = 0;
      002923 78r10            [12] 8393 	mov	r0,#_edit_invalid_65536_628
      002925 76 00            [12] 8394 	mov	@r0,#0x00
                                   8395 ;	.\ecen4350_lcd_v4.c:1831: setCursor(0, 210);
      002927 75*00 D2         [24] 8396 	mov	_setCursor_PARM_2,#0xd2
      00292A 75*01 00         [24] 8397 	mov	(_setCursor_PARM_2 + 1),#0x00
      00292D 90 00 00         [24] 8398 	mov	dptr,#0x0000
      002930 C0 06            [24] 8399 	push	ar6
      002932 C0 05            [24] 8400 	push	ar5
      002934 12r04rAA         [24] 8401 	lcall	_setCursor
                                   8402 ;	.\ecen4350_lcd_v4.c:1832: setColorDefault();
      002937 12r15r88         [24] 8403 	lcall	_setColorDefault
                                   8404 ;	.\ecen4350_lcd_v4.c:1833: LCD_string_write("\n  ");
      00293A 90r06r9E         [24] 8405 	mov	dptr,#___str_36
      00293D 75 F0 80         [24] 8406 	mov	b,#0x80
      002940 12r0FrC4         [24] 8407 	lcall	_LCD_string_write
                                   8408 ;	.\ecen4350_lcd_v4.c:1834: setColorHighlight2();
      002943 12r15rAA         [24] 8409 	lcall	_setColorHighlight2
                                   8410 ;	.\ecen4350_lcd_v4.c:1835: LCD_string_write("<1> Next Address\n");
      002946 90r08r76         [24] 8411 	mov	dptr,#___str_69
      002949 75 F0 80         [24] 8412 	mov	b,#0x80
      00294C 12r0FrC4         [24] 8413 	lcall	_LCD_string_write
                                   8414 ;	.\ecen4350_lcd_v4.c:1836: setColorGray();
      00294F 12r15rB6         [24] 8415 	lcall	_setColorGray
                                   8416 ;	.\ecen4350_lcd_v4.c:1837: LCD_string_write("\n\n               ");
      002952 90r08r88         [24] 8417 	mov	dptr,#___str_70
      002955 75 F0 80         [24] 8418 	mov	b,#0x80
      002958 12r0FrC4         [24] 8419 	lcall	_LCD_string_write
                                   8420 ;	.\ecen4350_lcd_v4.c:1838: delay(60);
      00295B 90 00 3C         [24] 8421 	mov	dptr,#0x003c
      00295E 12r00rE0         [24] 8422 	lcall	_delay
                                   8423 ;	.\ecen4350_lcd_v4.c:1841: setCursor(0, 80);
      002961 75*00 50         [24] 8424 	mov	_setCursor_PARM_2,#0x50
      002964 75*01 00         [24] 8425 	mov	(_setCursor_PARM_2 + 1),#0x00
      002967 90 00 00         [24] 8426 	mov	dptr,#0x0000
      00296A 12r04rAA         [24] 8427 	lcall	_setCursor
                                   8428 ;	.\ecen4350_lcd_v4.c:1842: setColorGray();
      00296D 12r15rB6         [24] 8429 	lcall	_setColorGray
                                   8430 ;	.\ecen4350_lcd_v4.c:1843: LCD_string_write(" 0x____");
      002970 90r05rF2         [24] 8431 	mov	dptr,#___str_24
      002973 75 F0 80         [24] 8432 	mov	b,#0x80
      002976 12r0FrC4         [24] 8433 	lcall	_LCD_string_write
                                   8434 ;	.\ecen4350_lcd_v4.c:1844: setCursor(0, 110);
      002979 75*00 6E         [24] 8435 	mov	_setCursor_PARM_2,#0x6e
      00297C 75*01 00         [24] 8436 	mov	(_setCursor_PARM_2 + 1),#0x00
      00297F 90 00 00         [24] 8437 	mov	dptr,#0x0000
      002982 12r04rAA         [24] 8438 	lcall	_setCursor
                                   8439 ;	.\ecen4350_lcd_v4.c:1845: LCD_string_write("\n __");
      002985 90r08r9A         [24] 8440 	mov	dptr,#___str_71
      002988 75 F0 80         [24] 8441 	mov	b,#0x80
      00298B 12r0FrC4         [24] 8442 	lcall	_LCD_string_write
                                   8443 ;	.\ecen4350_lcd_v4.c:1846: setCursor(0, 160);
      00298E 75*00 A0         [24] 8444 	mov	_setCursor_PARM_2,#0xa0
      002991 75*01 00         [24] 8445 	mov	(_setCursor_PARM_2 + 1),#0x00
      002994 90 00 00         [24] 8446 	mov	dptr,#0x0000
      002997 12r04rAA         [24] 8447 	lcall	_setCursor
                                   8448 ;	.\ecen4350_lcd_v4.c:1847: LCD_string_write("\n __");
      00299A 90r08r9A         [24] 8449 	mov	dptr,#___str_71
      00299D 75 F0 80         [24] 8450 	mov	b,#0x80
      0029A0 12r0FrC4         [24] 8451 	lcall	_LCD_string_write
                                   8452 ;	.\ecen4350_lcd_v4.c:1848: setCursor(0, 210);
      0029A3 75*00 D2         [24] 8453 	mov	_setCursor_PARM_2,#0xd2
      0029A6 75*01 00         [24] 8454 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029A9 90 00 00         [24] 8455 	mov	dptr,#0x0000
      0029AC 12r04rAA         [24] 8456 	lcall	_setCursor
                                   8457 ;	.\ecen4350_lcd_v4.c:1849: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      0029AF 90r08r9F         [24] 8458 	mov	dptr,#___str_72
      0029B2 75 F0 80         [24] 8459 	mov	b,#0x80
      0029B5 12r0FrC4         [24] 8460 	lcall	_LCD_string_write
      0029B8 D0 05            [24] 8461 	pop	ar5
      0029BA D0 06            [24] 8462 	pop	ar6
                                   8463 ;	.\ecen4350_lcd_v4.c:1852: address++;
      0029BC 0D               [12] 8464 	inc	r5
      0029BD BD 00 01         [24] 8465 	cjne	r5,#0x00,00153$
      0029C0 0E               [12] 8466 	inc	r6
      0029C1                       8467 00153$:
                                   8468 ;	.\ecen4350_lcd_v4.c:1853: d = (unsigned char __xdata*)address;
      0029C1 8D*57            [24] 8469 	mov	_edit_d_65536_628,r5
      0029C3 8E*58            [24] 8470 	mov	(_edit_d_65536_628 + 1),r6
                                   8471 ;	.\ecen4350_lcd_v4.c:1854: setCursor(0, 80);
      0029C5 75*00 50         [24] 8472 	mov	_setCursor_PARM_2,#0x50
      0029C8 75*01 00         [24] 8473 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029CB 90 00 00         [24] 8474 	mov	dptr,#0x0000
      0029CE C0 06            [24] 8475 	push	ar6
      0029D0 C0 05            [24] 8476 	push	ar5
      0029D2 12r04rAA         [24] 8477 	lcall	_setCursor
                                   8478 ;	.\ecen4350_lcd_v4.c:1855: LCD_string_write(" ");
      0029D5 90r06r54         [24] 8479 	mov	dptr,#___str_30
      0029D8 75 F0 80         [24] 8480 	mov	b,#0x80
      0029DB 12r0FrC4         [24] 8481 	lcall	_LCD_string_write
                                   8482 ;	.\ecen4350_lcd_v4.c:1856: setColorHighlight2();
      0029DE 12r15rAA         [24] 8483 	lcall	_setColorHighlight2
                                   8484 ;	.\ecen4350_lcd_v4.c:1857: LCD_string_write("0x");
      0029E1 90r05r29         [24] 8485 	mov	dptr,#___str_2
      0029E4 75 F0 80         [24] 8486 	mov	b,#0x80
      0029E7 12r0FrC4         [24] 8487 	lcall	_LCD_string_write
      0029EA D0 05            [24] 8488 	pop	ar5
      0029EC D0 06            [24] 8489 	pop	ar6
                                   8490 ;	.\ecen4350_lcd_v4.c:1858: print16Hex(address);		// print 16-bit address from stored memory
      0029EE 8D 82            [24] 8491 	mov	dpl,r5
      0029F0 8E 83            [24] 8492 	mov	dph,r6
      0029F2 C0 06            [24] 8493 	push	ar6
      0029F4 C0 05            [24] 8494 	push	ar5
      0029F6 12r14rAC         [24] 8495 	lcall	_print16Hex
                                   8496 ;	.\ecen4350_lcd_v4.c:1861: setCursor(0, 110);
      0029F9 75*00 6E         [24] 8497 	mov	_setCursor_PARM_2,#0x6e
      0029FC 75*01 00         [24] 8498 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029FF 90 00 00         [24] 8499 	mov	dptr,#0x0000
      002A02 12r04rAA         [24] 8500 	lcall	_setCursor
                                   8501 ;	.\ecen4350_lcd_v4.c:1862: setColorDefault();
      002A05 12r15r88         [24] 8502 	lcall	_setColorDefault
                                   8503 ;	.\ecen4350_lcd_v4.c:1863: LCD_string_write("\n ");
      002A08 90r08r5F         [24] 8504 	mov	dptr,#___str_67
      002A0B 75 F0 80         [24] 8505 	mov	b,#0x80
      002A0E 12r0FrC4         [24] 8506 	lcall	_LCD_string_write
                                   8507 ;	.\ecen4350_lcd_v4.c:1864: setColorHighlight2();
      002A11 12r15rAA         [24] 8508 	lcall	_setColorHighlight2
                                   8509 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8510 ;	assignBit
      002A14 C2 B5            [12] 8511 	clr	_P3_5
                                   8512 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002A16 85*57 82         [24] 8513 	mov	dpl,_edit_d_65536_628
      002A19 85*58 83         [24] 8514 	mov	dph,(_edit_d_65536_628 + 1)
      002A1C E0               [24] 8515 	movx	a,@dptr
      002A1D FA               [12] 8516 	mov	r2,a
                                   8517 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8518 ;	assignBit
      002A1E D2 B5            [12] 8519 	setb	_P3_5
                                   8520 ;	.\ecen4350_lcd_v4.c:1865: print8Hex(ramRead8(d));
      002A20 8A 82            [24] 8521 	mov	dpl,r2
      002A22 12r14r95         [24] 8522 	lcall	_print8Hex
                                   8523 ;	.\ecen4350_lcd_v4.c:1868: setCursor(0, 160);
      002A25 75*00 A0         [24] 8524 	mov	_setCursor_PARM_2,#0xa0
      002A28 75*01 00         [24] 8525 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A2B 90 00 00         [24] 8526 	mov	dptr,#0x0000
      002A2E 12r04rAA         [24] 8527 	lcall	_setCursor
                                   8528 ;	.\ecen4350_lcd_v4.c:1869: setColorSelect();
      002A31 12r15r93         [24] 8529 	lcall	_setColorSelect
                                   8530 ;	.\ecen4350_lcd_v4.c:1870: LCD_string_write(" Enter New Value:\n ");
      002A34 90r08r62         [24] 8531 	mov	dptr,#___str_68
      002A37 75 F0 80         [24] 8532 	mov	b,#0x80
      002A3A 12r0FrC4         [24] 8533 	lcall	_LCD_string_write
                                   8534 ;	.\ecen4350_lcd_v4.c:1871: setColorHighlight1();
      002A3D 12r15r9E         [24] 8535 	lcall	_setColorHighlight1
                                   8536 ;	.\ecen4350_lcd_v4.c:1872: selection = keyDetect();
      002A40 12r10rE2         [24] 8537 	lcall	_keyDetect
      002A43 AA 82            [24] 8538 	mov	r2,dpl
      002A45 78r00            [12] 8539 	mov	r0,#_selection
      002A47 A6 02            [24] 8540 	mov	@r0,ar2
                                   8541 ;	.\ecen4350_lcd_v4.c:1873: write(selection);
      002A49 8A 82            [24] 8542 	mov	dpl,r2
      002A4B 12r0Fr5E         [24] 8543 	lcall	_write
                                   8544 ;	.\ecen4350_lcd_v4.c:1874: selection = ASCIItoHex(selection);
      002A4E 78r00            [12] 8545 	mov	r0,#_selection
      002A50 86 82            [24] 8546 	mov	dpl,@r0
      002A52 12r13r50         [24] 8547 	lcall	_ASCIItoHex
      002A55 AA 82            [24] 8548 	mov	r2,dpl
      002A57 78r00            [12] 8549 	mov	r0,#_selection
      002A59 A6 02            [24] 8550 	mov	@r0,ar2
                                   8551 ;	.\ecen4350_lcd_v4.c:1875: value |= selection * 16;
      002A5B EA               [12] 8552 	mov	a,r2
      002A5C C4               [12] 8553 	swap	a
      002A5D 54 F0            [12] 8554 	anl	a,#0xf0
      002A5F FA               [12] 8555 	mov	r2,a
                                   8556 ;	.\ecen4350_lcd_v4.c:1876: selection = keyDetect();
      002A60 C0 02            [24] 8557 	push	ar2
      002A62 12r10rE2         [24] 8558 	lcall	_keyDetect
      002A65 AF 82            [24] 8559 	mov	r7,dpl
      002A67 78r00            [12] 8560 	mov	r0,#_selection
      002A69 A6 07            [24] 8561 	mov	@r0,ar7
                                   8562 ;	.\ecen4350_lcd_v4.c:1877: write(selection);
      002A6B 8F 82            [24] 8563 	mov	dpl,r7
      002A6D 12r0Fr5E         [24] 8564 	lcall	_write
                                   8565 ;	.\ecen4350_lcd_v4.c:1878: selection = ASCIItoHex(selection);
      002A70 78r00            [12] 8566 	mov	r0,#_selection
      002A72 86 82            [24] 8567 	mov	dpl,@r0
      002A74 12r13r50         [24] 8568 	lcall	_ASCIItoHex
      002A77 AF 82            [24] 8569 	mov	r7,dpl
      002A79 D0 02            [24] 8570 	pop	ar2
      002A7B D0 05            [24] 8571 	pop	ar5
      002A7D D0 06            [24] 8572 	pop	ar6
      002A7F 78r00            [12] 8573 	mov	r0,#_selection
      002A81 A6 07            [24] 8574 	mov	@r0,ar7
                                   8575 ;	.\ecen4350_lcd_v4.c:1879: value |= selection;
      002A83 EA               [12] 8576 	mov	a,r2
      002A84 42 07            [12] 8577 	orl	ar7,a
                                   8578 ;	.\ecen4350_lcd_v4.c:1882: setColorDefault();
      002A86 C0 07            [24] 8579 	push	ar7
      002A88 C0 06            [24] 8580 	push	ar6
      002A8A C0 05            [24] 8581 	push	ar5
      002A8C 12r15r88         [24] 8582 	lcall	_setColorDefault
                                   8583 ;	.\ecen4350_lcd_v4.c:1883: setCursor(0, 160);
      002A8F 75*00 A0         [24] 8584 	mov	_setCursor_PARM_2,#0xa0
      002A92 75*01 00         [24] 8585 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A95 90 00 00         [24] 8586 	mov	dptr,#0x0000
      002A98 12r04rAA         [24] 8587 	lcall	_setCursor
                                   8588 ;	.\ecen4350_lcd_v4.c:1884: LCD_string_write(" Enter New Value:\n ");
      002A9B 90r08r62         [24] 8589 	mov	dptr,#___str_68
      002A9E 75 F0 80         [24] 8590 	mov	b,#0x80
      002AA1 12r0FrC4         [24] 8591 	lcall	_LCD_string_write
                                   8592 ;	.\ecen4350_lcd_v4.c:1885: setColorHighlight2();
      002AA4 12r15rAA         [24] 8593 	lcall	_setColorHighlight2
      002AA7 D0 05            [24] 8594 	pop	ar5
      002AA9 D0 06            [24] 8595 	pop	ar6
      002AAB D0 07            [24] 8596 	pop	ar7
                                   8597 ;	.\ecen4350_lcd_v4.c:1886: print8Hex(value);
      002AAD 8F 82            [24] 8598 	mov	dpl,r7
      002AAF C0 07            [24] 8599 	push	ar7
      002AB1 C0 06            [24] 8600 	push	ar6
      002AB3 C0 05            [24] 8601 	push	ar5
      002AB5 12r14r95         [24] 8602 	lcall	_print8Hex
      002AB8 D0 05            [24] 8603 	pop	ar5
      002ABA D0 06            [24] 8604 	pop	ar6
      002ABC D0 07            [24] 8605 	pop	ar7
                                   8606 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8607 ;	assignBit
      002ABE C2 B5            [12] 8608 	clr	_P3_5
                                   8609 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      002AC0 85*57 82         [24] 8610 	mov	dpl,_edit_d_65536_628
      002AC3 85*58 83         [24] 8611 	mov	dph,(_edit_d_65536_628 + 1)
      002AC6 EF               [12] 8612 	mov	a,r7
      002AC7 F0               [24] 8613 	movx	@dptr,a
                                   8614 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8615 ;	assignBit
      002AC8 D2 B5            [12] 8616 	setb	_P3_5
                                   8617 ;	.\ecen4350_lcd_v4.c:1891: setCursor(0, 210);
      002ACA 75*00 D2         [24] 8618 	mov	_setCursor_PARM_2,#0xd2
      002ACD 75*01 00         [24] 8619 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AD0 90 00 00         [24] 8620 	mov	dptr,#0x0000
      002AD3 C0 06            [24] 8621 	push	ar6
      002AD5 C0 05            [24] 8622 	push	ar5
      002AD7 12r04rAA         [24] 8623 	lcall	_setCursor
                                   8624 ;	.\ecen4350_lcd_v4.c:1892: setColorSelect();
      002ADA 12r15r93         [24] 8625 	lcall	_setColorSelect
                                   8626 ;	.\ecen4350_lcd_v4.c:1893: LCD_string_write(" Choose Next Action:\n");
      002ADD 90r08r18         [24] 8627 	mov	dptr,#___str_64
      002AE0 75 F0 80         [24] 8628 	mov	b,#0x80
      002AE3 12r0FrC4         [24] 8629 	lcall	_LCD_string_write
                                   8630 ;	.\ecen4350_lcd_v4.c:1894: setColorWhite();
      002AE6 12r15rD8         [24] 8631 	lcall	_setColorWhite
                                   8632 ;	.\ecen4350_lcd_v4.c:1895: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002AE9 90r08r2E         [24] 8633 	mov	dptr,#___str_65
      002AEC 75 F0 80         [24] 8634 	mov	b,#0x80
      002AEF 12r0FrC4         [24] 8635 	lcall	_LCD_string_write
                                   8636 ;	.\ecen4350_lcd_v4.c:1896: LCD_string_write("  <0> Exit");
      002AF2 90r08r54         [24] 8637 	mov	dptr,#___str_66
      002AF5 75 F0 80         [24] 8638 	mov	b,#0x80
      002AF8 12r0FrC4         [24] 8639 	lcall	_LCD_string_write
      002AFB D0 05            [24] 8640 	pop	ar5
      002AFD D0 06            [24] 8641 	pop	ar6
      002AFF                       8642 00102$:
                                   8643 ;	.\ecen4350_lcd_v4.c:1898: if (selection == '2') {			/* Highlight choice and gray out others*/
      002AFF 78r00            [12] 8644 	mov	r0,#_selection
      002B01 B6 32 02         [24] 8645 	cjne	@r0,#0x32,00154$
      002B04 80 03            [24] 8646 	sjmp	00155$
      002B06                       8647 00154$:
      002B06 02r2Dr4B         [24] 8648 	ljmp	00104$
      002B09                       8649 00155$:
                                   8650 ;	.\ecen4350_lcd_v4.c:1899: invalid = 0;
      002B09 78r10            [12] 8651 	mov	r0,#_edit_invalid_65536_628
      002B0B 76 00            [12] 8652 	mov	@r0,#0x00
                                   8653 ;	.\ecen4350_lcd_v4.c:1901: setCursor(0, 210);
      002B0D 75*00 D2         [24] 8654 	mov	_setCursor_PARM_2,#0xd2
      002B10 75*01 00         [24] 8655 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B13 90 00 00         [24] 8656 	mov	dptr,#0x0000
      002B16 12r04rAA         [24] 8657 	lcall	_setCursor
                                   8658 ;	.\ecen4350_lcd_v4.c:1902: setColorDefault();
      002B19 12r15r88         [24] 8659 	lcall	_setColorDefault
                                   8660 ;	.\ecen4350_lcd_v4.c:1903: LCD_string_write(" Choose Next Action:\n  ");
      002B1C 90r08rD0         [24] 8661 	mov	dptr,#___str_73
      002B1F 75 F0 80         [24] 8662 	mov	b,#0x80
      002B22 12r0FrC4         [24] 8663 	lcall	_LCD_string_write
                                   8664 ;	.\ecen4350_lcd_v4.c:1904: setColorGray();
      002B25 12r15rB6         [24] 8665 	lcall	_setColorGray
                                   8666 ;	.\ecen4350_lcd_v4.c:1905: LCD_string_write("\n  ");
      002B28 90r06r9E         [24] 8667 	mov	dptr,#___str_36
      002B2B 75 F0 80         [24] 8668 	mov	b,#0x80
      002B2E 12r0FrC4         [24] 8669 	lcall	_LCD_string_write
                                   8670 ;	.\ecen4350_lcd_v4.c:1906: setColorHighlight2();
      002B31 12r15rAA         [24] 8671 	lcall	_setColorHighlight2
                                   8672 ;	.\ecen4350_lcd_v4.c:1907: LCD_string_write("<2> New Address\n");
      002B34 90r08rE8         [24] 8673 	mov	dptr,#___str_74
      002B37 75 F0 80         [24] 8674 	mov	b,#0x80
      002B3A 12r0FrC4         [24] 8675 	lcall	_LCD_string_write
                                   8676 ;	.\ecen4350_lcd_v4.c:1908: setColorGray();
      002B3D 12r15rB6         [24] 8677 	lcall	_setColorGray
                                   8678 ;	.\ecen4350_lcd_v4.c:1909: LCD_string_write("\n               ");
      002B40 90r08rF9         [24] 8679 	mov	dptr,#___str_75
      002B43 75 F0 80         [24] 8680 	mov	b,#0x80
      002B46 12r0FrC4         [24] 8681 	lcall	_LCD_string_write
                                   8682 ;	.\ecen4350_lcd_v4.c:1910: delay(60);
      002B49 90 00 3C         [24] 8683 	mov	dptr,#0x003c
      002B4C 12r00rE0         [24] 8684 	lcall	_delay
                                   8685 ;	.\ecen4350_lcd_v4.c:1913: setCursor(0, 80);
      002B4F 75*00 50         [24] 8686 	mov	_setCursor_PARM_2,#0x50
      002B52 75*01 00         [24] 8687 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B55 90 00 00         [24] 8688 	mov	dptr,#0x0000
      002B58 12r04rAA         [24] 8689 	lcall	_setCursor
                                   8690 ;	.\ecen4350_lcd_v4.c:1914: setColorGray();
      002B5B 12r15rB6         [24] 8691 	lcall	_setColorGray
                                   8692 ;	.\ecen4350_lcd_v4.c:1915: LCD_string_write(" 0x____");
      002B5E 90r05rF2         [24] 8693 	mov	dptr,#___str_24
      002B61 75 F0 80         [24] 8694 	mov	b,#0x80
      002B64 12r0FrC4         [24] 8695 	lcall	_LCD_string_write
                                   8696 ;	.\ecen4350_lcd_v4.c:1916: setCursor(0, 110);
      002B67 75*00 6E         [24] 8697 	mov	_setCursor_PARM_2,#0x6e
      002B6A 75*01 00         [24] 8698 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B6D 90 00 00         [24] 8699 	mov	dptr,#0x0000
      002B70 12r04rAA         [24] 8700 	lcall	_setCursor
                                   8701 ;	.\ecen4350_lcd_v4.c:1917: LCD_string_write("\n __");
      002B73 90r08r9A         [24] 8702 	mov	dptr,#___str_71
      002B76 75 F0 80         [24] 8703 	mov	b,#0x80
      002B79 12r0FrC4         [24] 8704 	lcall	_LCD_string_write
                                   8705 ;	.\ecen4350_lcd_v4.c:1918: setCursor(0, 160);
      002B7C 75*00 A0         [24] 8706 	mov	_setCursor_PARM_2,#0xa0
      002B7F 75*01 00         [24] 8707 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B82 90 00 00         [24] 8708 	mov	dptr,#0x0000
      002B85 12r04rAA         [24] 8709 	lcall	_setCursor
                                   8710 ;	.\ecen4350_lcd_v4.c:1919: LCD_string_write("\n __");
      002B88 90r08r9A         [24] 8711 	mov	dptr,#___str_71
      002B8B 75 F0 80         [24] 8712 	mov	b,#0x80
      002B8E 12r0FrC4         [24] 8713 	lcall	_LCD_string_write
                                   8714 ;	.\ecen4350_lcd_v4.c:1920: setCursor(0, 210);
      002B91 75*00 D2         [24] 8715 	mov	_setCursor_PARM_2,#0xd2
      002B94 75*01 00         [24] 8716 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B97 90 00 00         [24] 8717 	mov	dptr,#0x0000
      002B9A 12r04rAA         [24] 8718 	lcall	_setCursor
                                   8719 ;	.\ecen4350_lcd_v4.c:1921: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002B9D 90r08r9F         [24] 8720 	mov	dptr,#___str_72
      002BA0 75 F0 80         [24] 8721 	mov	b,#0x80
      002BA3 12r0FrC4         [24] 8722 	lcall	_LCD_string_write
                                   8723 ;	.\ecen4350_lcd_v4.c:1924: setCursor(0, 60);
      002BA6 75*00 3C         [24] 8724 	mov	_setCursor_PARM_2,#0x3c
      002BA9 75*01 00         [24] 8725 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BAC 90 00 00         [24] 8726 	mov	dptr,#0x0000
      002BAF 12r04rAA         [24] 8727 	lcall	_setCursor
                                   8728 ;	.\ecen4350_lcd_v4.c:1925: setColorSelect();
      002BB2 12r15r93         [24] 8729 	lcall	_setColorSelect
                                   8730 ;	.\ecen4350_lcd_v4.c:1926: LCD_string_write(" Edit Address");
      002BB5 90r09r0A         [24] 8731 	mov	dptr,#___str_76
      002BB8 75 F0 80         [24] 8732 	mov	b,#0x80
      002BBB 12r0FrC4         [24] 8733 	lcall	_LCD_string_write
                                   8734 ;	.\ecen4350_lcd_v4.c:1927: setCursor(0, 80);
      002BBE 75*00 50         [24] 8735 	mov	_setCursor_PARM_2,#0x50
      002BC1 75*01 00         [24] 8736 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BC4 90 00 00         [24] 8737 	mov	dptr,#0x0000
      002BC7 12r04rAA         [24] 8738 	lcall	_setCursor
                                   8739 ;	.\ecen4350_lcd_v4.c:1928: LCD_string_write(" ");
      002BCA 90r06r54         [24] 8740 	mov	dptr,#___str_30
      002BCD 75 F0 80         [24] 8741 	mov	b,#0x80
      002BD0 12r0FrC4         [24] 8742 	lcall	_LCD_string_write
                                   8743 ;	.\ecen4350_lcd_v4.c:1929: setColorHighlight1();
      002BD3 12r15r9E         [24] 8744 	lcall	_setColorHighlight1
                                   8745 ;	.\ecen4350_lcd_v4.c:1930: LCD_string_write("0x");
      002BD6 90r05r29         [24] 8746 	mov	dptr,#___str_2
      002BD9 75 F0 80         [24] 8747 	mov	b,#0x80
      002BDC 12r0FrC4         [24] 8748 	lcall	_LCD_string_write
                                   8749 ;	.\ecen4350_lcd_v4.c:1931: address = inputAddress();		// input 16-bit address and store in memory
      002BDF 12r15rF9         [24] 8750 	lcall	_inputAddress
      002BE2 AD 82            [24] 8751 	mov	r5,dpl
      002BE4 AE 83            [24] 8752 	mov	r6,dph
                                   8753 ;	.\ecen4350_lcd_v4.c:1932: d = (unsigned char __xdata*)address;
      002BE6 8D 03            [24] 8754 	mov	ar3,r5
      002BE8 8E 07            [24] 8755 	mov	ar7,r6
                                   8756 ;	.\ecen4350_lcd_v4.c:1935: setColorDefault();
      002BEA C0 07            [24] 8757 	push	ar7
      002BEC C0 06            [24] 8758 	push	ar6
      002BEE C0 05            [24] 8759 	push	ar5
      002BF0 C0 03            [24] 8760 	push	ar3
      002BF2 12r15r88         [24] 8761 	lcall	_setColorDefault
                                   8762 ;	.\ecen4350_lcd_v4.c:1936: setCursor(0, 60);
      002BF5 75*00 3C         [24] 8763 	mov	_setCursor_PARM_2,#0x3c
      002BF8 75*01 00         [24] 8764 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BFB 90 00 00         [24] 8765 	mov	dptr,#0x0000
      002BFE 12r04rAA         [24] 8766 	lcall	_setCursor
                                   8767 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Edit Address:");
      002C01 90r07rDD         [24] 8768 	mov	dptr,#___str_60
      002C04 75 F0 80         [24] 8769 	mov	b,#0x80
      002C07 12r0FrC4         [24] 8770 	lcall	_LCD_string_write
                                   8771 ;	.\ecen4350_lcd_v4.c:1938: setCursor(0, 80);
      002C0A 75*00 50         [24] 8772 	mov	_setCursor_PARM_2,#0x50
      002C0D 75*01 00         [24] 8773 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C10 90 00 00         [24] 8774 	mov	dptr,#0x0000
      002C13 12r04rAA         [24] 8775 	lcall	_setCursor
                                   8776 ;	.\ecen4350_lcd_v4.c:1939: LCD_string_write(" ");
      002C16 90r06r54         [24] 8777 	mov	dptr,#___str_30
      002C19 75 F0 80         [24] 8778 	mov	b,#0x80
      002C1C 12r0FrC4         [24] 8779 	lcall	_LCD_string_write
                                   8780 ;	.\ecen4350_lcd_v4.c:1940: setColorHighlight2();
      002C1F 12r15rAA         [24] 8781 	lcall	_setColorHighlight2
                                   8782 ;	.\ecen4350_lcd_v4.c:1941: LCD_string_write("0x");
      002C22 90r05r29         [24] 8783 	mov	dptr,#___str_2
      002C25 75 F0 80         [24] 8784 	mov	b,#0x80
      002C28 12r0FrC4         [24] 8785 	lcall	_LCD_string_write
      002C2B D0 03            [24] 8786 	pop	ar3
      002C2D D0 05            [24] 8787 	pop	ar5
      002C2F D0 06            [24] 8788 	pop	ar6
                                   8789 ;	.\ecen4350_lcd_v4.c:1942: print16Hex(address);		// print 16-bit address from stored memory
      002C31 8D 82            [24] 8790 	mov	dpl,r5
      002C33 8E 83            [24] 8791 	mov	dph,r6
      002C35 C0 06            [24] 8792 	push	ar6
      002C37 C0 05            [24] 8793 	push	ar5
      002C39 C0 03            [24] 8794 	push	ar3
      002C3B 12r14rAC         [24] 8795 	lcall	_print16Hex
                                   8796 ;	.\ecen4350_lcd_v4.c:1945: setCursor(0, 110);
      002C3E 75*00 6E         [24] 8797 	mov	_setCursor_PARM_2,#0x6e
      002C41 75*01 00         [24] 8798 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C44 90 00 00         [24] 8799 	mov	dptr,#0x0000
      002C47 12r04rAA         [24] 8800 	lcall	_setCursor
                                   8801 ;	.\ecen4350_lcd_v4.c:1946: setColorDefault();
      002C4A 12r15r88         [24] 8802 	lcall	_setColorDefault
                                   8803 ;	.\ecen4350_lcd_v4.c:1947: LCD_string_write("\n ");
      002C4D 90r08r5F         [24] 8804 	mov	dptr,#___str_67
      002C50 75 F0 80         [24] 8805 	mov	b,#0x80
      002C53 12r0FrC4         [24] 8806 	lcall	_LCD_string_write
                                   8807 ;	.\ecen4350_lcd_v4.c:1948: setColorHighlight2();
      002C56 12r15rAA         [24] 8808 	lcall	_setColorHighlight2
      002C59 D0 03            [24] 8809 	pop	ar3
      002C5B D0 05            [24] 8810 	pop	ar5
      002C5D D0 06            [24] 8811 	pop	ar6
      002C5F D0 07            [24] 8812 	pop	ar7
                                   8813 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8814 ;	assignBit
      002C61 C2 B5            [12] 8815 	clr	_P3_5
                                   8816 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002C63 8B 82            [24] 8817 	mov	dpl,r3
      002C65 8F 83            [24] 8818 	mov	dph,r7
      002C67 E0               [24] 8819 	movx	a,@dptr
      002C68 F5 82            [12] 8820 	mov	dpl,a
                                   8821 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8822 ;	assignBit
      002C6A D2 B5            [12] 8823 	setb	_P3_5
                                   8824 ;	.\ecen4350_lcd_v4.c:1949: print8Hex(ramRead8(d));
      002C6C C0 07            [24] 8825 	push	ar7
      002C6E C0 06            [24] 8826 	push	ar6
      002C70 C0 05            [24] 8827 	push	ar5
      002C72 C0 03            [24] 8828 	push	ar3
      002C74 12r14r95         [24] 8829 	lcall	_print8Hex
                                   8830 ;	.\ecen4350_lcd_v4.c:1952: setCursor(0, 160);
      002C77 75*00 A0         [24] 8831 	mov	_setCursor_PARM_2,#0xa0
      002C7A 75*01 00         [24] 8832 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C7D 90 00 00         [24] 8833 	mov	dptr,#0x0000
      002C80 12r04rAA         [24] 8834 	lcall	_setCursor
                                   8835 ;	.\ecen4350_lcd_v4.c:1953: setColorSelect();
      002C83 12r15r93         [24] 8836 	lcall	_setColorSelect
                                   8837 ;	.\ecen4350_lcd_v4.c:1954: LCD_string_write(" Enter New Value:\n ");
      002C86 90r08r62         [24] 8838 	mov	dptr,#___str_68
      002C89 75 F0 80         [24] 8839 	mov	b,#0x80
      002C8C 12r0FrC4         [24] 8840 	lcall	_LCD_string_write
                                   8841 ;	.\ecen4350_lcd_v4.c:1955: setColorHighlight1();
      002C8F 12r15r9E         [24] 8842 	lcall	_setColorHighlight1
                                   8843 ;	.\ecen4350_lcd_v4.c:1956: selection = keyDetect();
      002C92 12r10rE2         [24] 8844 	lcall	_keyDetect
      002C95 AA 82            [24] 8845 	mov	r2,dpl
      002C97 78r00            [12] 8846 	mov	r0,#_selection
      002C99 A6 02            [24] 8847 	mov	@r0,ar2
                                   8848 ;	.\ecen4350_lcd_v4.c:1957: write(selection);
      002C9B 8A 82            [24] 8849 	mov	dpl,r2
      002C9D 12r0Fr5E         [24] 8850 	lcall	_write
                                   8851 ;	.\ecen4350_lcd_v4.c:1958: selection = ASCIItoHex(selection);
      002CA0 78r00            [12] 8852 	mov	r0,#_selection
      002CA2 86 82            [24] 8853 	mov	dpl,@r0
      002CA4 12r13r50         [24] 8854 	lcall	_ASCIItoHex
      002CA7 AA 82            [24] 8855 	mov	r2,dpl
      002CA9 78r00            [12] 8856 	mov	r0,#_selection
      002CAB A6 02            [24] 8857 	mov	@r0,ar2
                                   8858 ;	.\ecen4350_lcd_v4.c:1959: value |= selection * 16;
      002CAD EA               [12] 8859 	mov	a,r2
      002CAE C4               [12] 8860 	swap	a
      002CAF 54 F0            [12] 8861 	anl	a,#0xf0
      002CB1 FA               [12] 8862 	mov	r2,a
                                   8863 ;	.\ecen4350_lcd_v4.c:1960: selection = keyDetect();
      002CB2 C0 02            [24] 8864 	push	ar2
      002CB4 12r10rE2         [24] 8865 	lcall	_keyDetect
      002CB7 AC 82            [24] 8866 	mov	r4,dpl
      002CB9 78r00            [12] 8867 	mov	r0,#_selection
      002CBB A6 04            [24] 8868 	mov	@r0,ar4
                                   8869 ;	.\ecen4350_lcd_v4.c:1961: write(selection);
      002CBD 8C 82            [24] 8870 	mov	dpl,r4
      002CBF 12r0Fr5E         [24] 8871 	lcall	_write
                                   8872 ;	.\ecen4350_lcd_v4.c:1962: selection = ASCIItoHex(selection);
      002CC2 78r00            [12] 8873 	mov	r0,#_selection
      002CC4 86 82            [24] 8874 	mov	dpl,@r0
      002CC6 12r13r50         [24] 8875 	lcall	_ASCIItoHex
      002CC9 AC 82            [24] 8876 	mov	r4,dpl
      002CCB D0 02            [24] 8877 	pop	ar2
      002CCD D0 03            [24] 8878 	pop	ar3
      002CCF 78r00            [12] 8879 	mov	r0,#_selection
      002CD1 A6 04            [24] 8880 	mov	@r0,ar4
                                   8881 ;	.\ecen4350_lcd_v4.c:1963: value |= selection;
      002CD3 EA               [12] 8882 	mov	a,r2
      002CD4 42 04            [12] 8883 	orl	ar4,a
                                   8884 ;	.\ecen4350_lcd_v4.c:1966: setColorDefault();
      002CD6 C0 04            [24] 8885 	push	ar4
      002CD8 C0 03            [24] 8886 	push	ar3
      002CDA 12r15r88         [24] 8887 	lcall	_setColorDefault
                                   8888 ;	.\ecen4350_lcd_v4.c:1967: setCursor(0, 160);
      002CDD 75*00 A0         [24] 8889 	mov	_setCursor_PARM_2,#0xa0
      002CE0 75*01 00         [24] 8890 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CE3 90 00 00         [24] 8891 	mov	dptr,#0x0000
      002CE6 12r04rAA         [24] 8892 	lcall	_setCursor
                                   8893 ;	.\ecen4350_lcd_v4.c:1968: LCD_string_write(" Enter New Value:\n ");
      002CE9 90r08r62         [24] 8894 	mov	dptr,#___str_68
      002CEC 75 F0 80         [24] 8895 	mov	b,#0x80
      002CEF 12r0FrC4         [24] 8896 	lcall	_LCD_string_write
                                   8897 ;	.\ecen4350_lcd_v4.c:1969: setColorHighlight2();
      002CF2 12r15rAA         [24] 8898 	lcall	_setColorHighlight2
      002CF5 D0 03            [24] 8899 	pop	ar3
      002CF7 D0 04            [24] 8900 	pop	ar4
                                   8901 ;	.\ecen4350_lcd_v4.c:1970: print8Hex(value);
      002CF9 8C 82            [24] 8902 	mov	dpl,r4
      002CFB C0 04            [24] 8903 	push	ar4
      002CFD C0 03            [24] 8904 	push	ar3
      002CFF 12r14r95         [24] 8905 	lcall	_print8Hex
      002D02 D0 03            [24] 8906 	pop	ar3
      002D04 D0 04            [24] 8907 	pop	ar4
      002D06 D0 05            [24] 8908 	pop	ar5
      002D08 D0 06            [24] 8909 	pop	ar6
      002D0A D0 07            [24] 8910 	pop	ar7
                                   8911 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8912 ;	assignBit
      002D0C C2 B5            [12] 8913 	clr	_P3_5
                                   8914 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      002D0E 8B 82            [24] 8915 	mov	dpl,r3
      002D10 8F 83            [24] 8916 	mov	dph,r7
      002D12 EC               [12] 8917 	mov	a,r4
      002D13 F0               [24] 8918 	movx	@dptr,a
                                   8919 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8920 ;	assignBit
      002D14 D2 B5            [12] 8921 	setb	_P3_5
                                   8922 ;	.\ecen4350_lcd_v4.c:1975: setCursor(0, 210);
      002D16 75*00 D2         [24] 8923 	mov	_setCursor_PARM_2,#0xd2
      002D19 75*01 00         [24] 8924 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D1C 90 00 00         [24] 8925 	mov	dptr,#0x0000
      002D1F C0 06            [24] 8926 	push	ar6
      002D21 C0 05            [24] 8927 	push	ar5
      002D23 12r04rAA         [24] 8928 	lcall	_setCursor
                                   8929 ;	.\ecen4350_lcd_v4.c:1976: setColorSelect();
      002D26 12r15r93         [24] 8930 	lcall	_setColorSelect
                                   8931 ;	.\ecen4350_lcd_v4.c:1977: LCD_string_write(" Choose Next Action:\n");
      002D29 90r08r18         [24] 8932 	mov	dptr,#___str_64
      002D2C 75 F0 80         [24] 8933 	mov	b,#0x80
      002D2F 12r0FrC4         [24] 8934 	lcall	_LCD_string_write
                                   8935 ;	.\ecen4350_lcd_v4.c:1978: setColorWhite();
      002D32 12r15rD8         [24] 8936 	lcall	_setColorWhite
                                   8937 ;	.\ecen4350_lcd_v4.c:1979: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002D35 90r08r2E         [24] 8938 	mov	dptr,#___str_65
      002D38 75 F0 80         [24] 8939 	mov	b,#0x80
      002D3B 12r0FrC4         [24] 8940 	lcall	_LCD_string_write
                                   8941 ;	.\ecen4350_lcd_v4.c:1980: LCD_string_write("  <0> Exit");
      002D3E 90r08r54         [24] 8942 	mov	dptr,#___str_66
      002D41 75 F0 80         [24] 8943 	mov	b,#0x80
      002D44 12r0FrC4         [24] 8944 	lcall	_LCD_string_write
      002D47 D0 05            [24] 8945 	pop	ar5
      002D49 D0 06            [24] 8946 	pop	ar6
      002D4B                       8947 00104$:
                                   8948 ;	.\ecen4350_lcd_v4.c:1982: if (selection == '0') {			/* Highlight choice and gray out others */
      002D4B 78r00            [12] 8949 	mov	r0,#_selection
      002D4D B6 30 52         [24] 8950 	cjne	@r0,#0x30,00106$
                                   8951 ;	.\ecen4350_lcd_v4.c:1983: exit = 0;
      002D50 78r0F            [12] 8952 	mov	r0,#_edit_exit_65536_628
      002D52 76 00            [12] 8953 	mov	@r0,#0x00
                                   8954 ;	.\ecen4350_lcd_v4.c:1984: invalid = 0;
      002D54 78r10            [12] 8955 	mov	r0,#_edit_invalid_65536_628
      002D56 76 00            [12] 8956 	mov	@r0,#0x00
                                   8957 ;	.\ecen4350_lcd_v4.c:1985: setCursor(0, 210);
      002D58 75*00 D2         [24] 8958 	mov	_setCursor_PARM_2,#0xd2
      002D5B 75*01 00         [24] 8959 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D5E 90 00 00         [24] 8960 	mov	dptr,#0x0000
      002D61 C0 06            [24] 8961 	push	ar6
      002D63 C0 05            [24] 8962 	push	ar5
      002D65 12r04rAA         [24] 8963 	lcall	_setCursor
                                   8964 ;	.\ecen4350_lcd_v4.c:1986: setColorDefault();
      002D68 12r15r88         [24] 8965 	lcall	_setColorDefault
                                   8966 ;	.\ecen4350_lcd_v4.c:1987: LCD_string_write("\n");
      002D6B 90r09r18         [24] 8967 	mov	dptr,#___str_77
      002D6E 75 F0 80         [24] 8968 	mov	b,#0x80
      002D71 12r0FrC4         [24] 8969 	lcall	_LCD_string_write
                                   8970 ;	.\ecen4350_lcd_v4.c:1988: setColorGray();
      002D74 12r15rB6         [24] 8971 	lcall	_setColorGray
                                   8972 ;	.\ecen4350_lcd_v4.c:1989: LCD_string_write("\n\n  ");
      002D77 90r06rCF         [24] 8973 	mov	dptr,#___str_39
      002D7A 75 F0 80         [24] 8974 	mov	b,#0x80
      002D7D 12r0FrC4         [24] 8975 	lcall	_LCD_string_write
                                   8976 ;	.\ecen4350_lcd_v4.c:1990: setColorHighlight2();
      002D80 12r15rAA         [24] 8977 	lcall	_setColorHighlight2
                                   8978 ;	.\ecen4350_lcd_v4.c:1991: LCD_string_write("<0> Exit");
      002D83 90r09r1A         [24] 8979 	mov	dptr,#___str_78
      002D86 75 F0 80         [24] 8980 	mov	b,#0x80
      002D89 12r0FrC4         [24] 8981 	lcall	_LCD_string_write
                                   8982 ;	.\ecen4350_lcd_v4.c:1992: setColorGray();
      002D8C 12r15rB6         [24] 8983 	lcall	_setColorGray
                                   8984 ;	.\ecen4350_lcd_v4.c:1993: LCD_string_write("\n               ");
      002D8F 90r08rF9         [24] 8985 	mov	dptr,#___str_75
      002D92 75 F0 80         [24] 8986 	mov	b,#0x80
      002D95 12r0FrC4         [24] 8987 	lcall	_LCD_string_write
                                   8988 ;	.\ecen4350_lcd_v4.c:1994: delay(60);
      002D98 90 00 3C         [24] 8989 	mov	dptr,#0x003c
      002D9B 12r00rE0         [24] 8990 	lcall	_delay
      002D9E D0 05            [24] 8991 	pop	ar5
      002DA0 D0 06            [24] 8992 	pop	ar6
      002DA2                       8993 00106$:
                                   8994 ;	.\ecen4350_lcd_v4.c:1996: if (invalid) {
      002DA2 78r10            [12] 8995 	mov	r0,#_edit_invalid_65536_628
      002DA4 E6               [12] 8996 	mov	a,@r0
      002DA5 70 03            [24] 8997 	jnz	00158$
      002DA7 02r29r00         [24] 8998 	ljmp	00109$
      002DAA                       8999 00158$:
                                   9000 ;	.\ecen4350_lcd_v4.c:1997: setCursor(0, 210);
      002DAA 75*00 D2         [24] 9001 	mov	_setCursor_PARM_2,#0xd2
      002DAD 75*01 00         [24] 9002 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DB0 90 00 00         [24] 9003 	mov	dptr,#0x0000
      002DB3 C0 06            [24] 9004 	push	ar6
      002DB5 C0 05            [24] 9005 	push	ar5
      002DB7 12r04rAA         [24] 9006 	lcall	_setCursor
                                   9007 ;	.\ecen4350_lcd_v4.c:1998: setColorRed();
      002DBA 12r15rCD         [24] 9008 	lcall	_setColorRed
                                   9009 ;	.\ecen4350_lcd_v4.c:1999: LCD_string_write("\n\n\n\n Input Error ");
      002DBD 90r09r23         [24] 9010 	mov	dptr,#___str_79
      002DC0 75 F0 80         [24] 9011 	mov	b,#0x80
      002DC3 12r0FrC4         [24] 9012 	lcall	_LCD_string_write
      002DC6 D0 05            [24] 9013 	pop	ar5
      002DC8 D0 06            [24] 9014 	pop	ar6
      002DCA 02r29r00         [24] 9015 	ljmp	00109$
                                   9016 ;	.\ecen4350_lcd_v4.c:2002: return;
                                   9017 ;	.\ecen4350_lcd_v4.c:2003: }
      002DCD 22               [24] 9018 	ret
                                   9019 ;------------------------------------------------------------
                                   9020 ;Allocation info for local variables in function 'find'
                                   9021 ;------------------------------------------------------------
                                   9022 ;d                         Allocated to registers 
                                   9023 ;i                         Allocated with name '_find_i_262144_665'
                                   9024 ;__3932160169              Allocated to registers 
                                   9025 ;__3932160170              Allocated to registers 
                                   9026 ;map_address               Allocated to registers 
                                   9027 ;d                         Allocated to registers r4 
                                   9028 ;i                         Allocated to registers r4 r6 
                                   9029 ;__3932160172              Allocated to registers 
                                   9030 ;__3932160173              Allocated to registers 
                                   9031 ;map_address               Allocated to registers 
                                   9032 ;d                         Allocated to registers r3 
                                   9033 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9034 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9035 ;address                   Allocated with name '_find_address_65536_652'
                                   9036 ;destination               Allocated to registers 
                                   9037 ;blockSize                 Allocated with name '_find_blockSize_65536_652'
                                   9038 ;value                     Allocated with name '_find_value_65536_652'
                                   9039 ;scan                      Allocated with name '_find_scan_65536_652'
                                   9040 ;page                      Allocated to registers r5 
                                   9041 ;noneFound                 Allocated with name '_find_noneFound_65536_652'
                                   9042 ;invalidInput              Allocated to registers r7 
                                   9043 ;exit                      Allocated with name '_find_exit_65536_652'
                                   9044 ;------------------------------------------------------------
                                   9045 ;	.\ecen4350_lcd_v4.c:2005: void find() {
                                   9046 ;	-----------------------------------------
                                   9047 ;	 function find
                                   9048 ;	-----------------------------------------
      002DCE                       9049 _find:
                                   9050 ;	.\ecen4350_lcd_v4.c:2009: __idata unsigned char blockSize = 0;
      002DCE 78r13            [12] 9051 	mov	r0,#_find_blockSize_65536_652
      002DD0 76 00            [12] 9052 	mov	@r0,#0x00
                                   9053 ;	.\ecen4350_lcd_v4.c:2011: __idata unsigned char scan = 0;
      002DD2 78r15            [12] 9054 	mov	r0,#_find_scan_65536_652
      002DD4 76 00            [12] 9055 	mov	@r0,#0x00
                                   9056 ;	.\ecen4350_lcd_v4.c:2012: __idata unsigned char page = 0;
      002DD6 7D 00            [12] 9057 	mov	r5,#0x00
                                   9058 ;	.\ecen4350_lcd_v4.c:2013: __idata unsigned char noneFound = 1;
      002DD8 78r16            [12] 9059 	mov	r0,#_find_noneFound_65536_652
      002DDA 76 01            [12] 9060 	mov	@r0,#0x01
                                   9061 ;	.\ecen4350_lcd_v4.c:2014: __idata unsigned char invalidInput = 1;
      002DDC 7B 01            [12] 9062 	mov	r3,#0x01
                                   9063 ;	.\ecen4350_lcd_v4.c:2015: __idata unsigned char exit = 1;
      002DDE 78r17            [12] 9064 	mov	r0,#_find_exit_65536_652
      002DE0 76 01            [12] 9065 	mov	@r0,#0x01
                                   9066 ;	.\ecen4350_lcd_v4.c:2017: clearLCD();
      002DE2 C0 05            [24] 9067 	push	ar5
      002DE4 C0 03            [24] 9068 	push	ar3
      002DE6 12r0Dr47         [24] 9069 	lcall	_clearLCD
                                   9070 ;	.\ecen4350_lcd_v4.c:2020: setTextSize(5);
      002DE9 75 82 05         [24] 9071 	mov	dpl,#0x05
      002DEC 12r04rC4         [24] 9072 	lcall	_setTextSize
                                   9073 ;	.\ecen4350_lcd_v4.c:2021: fillTop(GRAY);
      002DEF 90 D6 BA         [24] 9074 	mov	dptr,#0xd6ba
      002DF2 12r0Br7A         [24] 9075 	lcall	_fillTop
                                   9076 ;	.\ecen4350_lcd_v4.c:2022: setColorMenu();
      002DF5 12r15rC1         [24] 9077 	lcall	_setColorMenu
                                   9078 ;	.\ecen4350_lcd_v4.c:2023: setCursor(30, 0);
      002DF8 E4               [12] 9079 	clr	a
      002DF9 F5*00            [12] 9080 	mov	_setCursor_PARM_2,a
      002DFB F5*01            [12] 9081 	mov	(_setCursor_PARM_2 + 1),a
      002DFD 90 00 1E         [24] 9082 	mov	dptr,#0x001e
      002E00 12r04rAA         [24] 9083 	lcall	_setCursor
                                   9084 ;	.\ecen4350_lcd_v4.c:2024: LCD_string_write("[FIND]\n");
      002E03 90r09r35         [24] 9085 	mov	dptr,#___str_80
      002E06 75 F0 80         [24] 9086 	mov	b,#0x80
      002E09 12r0FrC4         [24] 9087 	lcall	_LCD_string_write
                                   9088 ;	.\ecen4350_lcd_v4.c:2025: setColorDefault();
      002E0C 12r15r88         [24] 9089 	lcall	_setColorDefault
                                   9090 ;	.\ecen4350_lcd_v4.c:2026: setTextSize(2);
      002E0F 75 82 02         [24] 9091 	mov	dpl,#0x02
      002E12 12r04rC4         [24] 9092 	lcall	_setTextSize
                                   9093 ;	.\ecen4350_lcd_v4.c:2027: setCursor(0, 60);
      002E15 75*00 3C         [24] 9094 	mov	_setCursor_PARM_2,#0x3c
      002E18 75*01 00         [24] 9095 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E1B 90 00 00         [24] 9096 	mov	dptr,#0x0000
      002E1E 12r04rAA         [24] 9097 	lcall	_setCursor
                                   9098 ;	.\ecen4350_lcd_v4.c:2028: LCD_string_write(" Find Value:");
      002E21 90r09r3D         [24] 9099 	mov	dptr,#___str_81
      002E24 75 F0 80         [24] 9100 	mov	b,#0x80
      002E27 12r0FrC4         [24] 9101 	lcall	_LCD_string_write
                                   9102 ;	.\ecen4350_lcd_v4.c:2029: setCursor(0, 80);
      002E2A 75*00 50         [24] 9103 	mov	_setCursor_PARM_2,#0x50
      002E2D 75*01 00         [24] 9104 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E30 90 00 00         [24] 9105 	mov	dptr,#0x0000
      002E33 12r04rAA         [24] 9106 	lcall	_setCursor
                                   9107 ;	.\ecen4350_lcd_v4.c:2030: setColorGray();
      002E36 12r15rB6         [24] 9108 	lcall	_setColorGray
                                   9109 ;	.\ecen4350_lcd_v4.c:2031: LCD_string_write(" __");
      002E39 90r08r01         [24] 9110 	mov	dptr,#___str_62
      002E3C 75 F0 80         [24] 9111 	mov	b,#0x80
      002E3F 12r0FrC4         [24] 9112 	lcall	_LCD_string_write
                                   9113 ;	.\ecen4350_lcd_v4.c:2032: setCursor(0, 110);
      002E42 75*00 6E         [24] 9114 	mov	_setCursor_PARM_2,#0x6e
      002E45 75*01 00         [24] 9115 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E48 90 00 00         [24] 9116 	mov	dptr,#0x0000
      002E4B 12r04rAA         [24] 9117 	lcall	_setCursor
                                   9118 ;	.\ecen4350_lcd_v4.c:2033: setColorDefault();
      002E4E 12r15r88         [24] 9119 	lcall	_setColorDefault
                                   9120 ;	.\ecen4350_lcd_v4.c:2034: LCD_string_write(" Search Address:");
      002E51 90r09r4A         [24] 9121 	mov	dptr,#___str_82
      002E54 75 F0 80         [24] 9122 	mov	b,#0x80
      002E57 12r0FrC4         [24] 9123 	lcall	_LCD_string_write
                                   9124 ;	.\ecen4350_lcd_v4.c:2035: setCursor(0, 130 );
      002E5A 75*00 82         [24] 9125 	mov	_setCursor_PARM_2,#0x82
      002E5D 75*01 00         [24] 9126 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E60 90 00 00         [24] 9127 	mov	dptr,#0x0000
      002E63 12r04rAA         [24] 9128 	lcall	_setCursor
                                   9129 ;	.\ecen4350_lcd_v4.c:2036: setColorGray();
      002E66 12r15rB6         [24] 9130 	lcall	_setColorGray
                                   9131 ;	.\ecen4350_lcd_v4.c:2037: LCD_string_write(" 0x____");
      002E69 90r05rF2         [24] 9132 	mov	dptr,#___str_24
      002E6C 75 F0 80         [24] 9133 	mov	b,#0x80
      002E6F 12r0FrC4         [24] 9134 	lcall	_LCD_string_write
                                   9135 ;	.\ecen4350_lcd_v4.c:2038: setCursor(0, 160);
      002E72 75*00 A0         [24] 9136 	mov	_setCursor_PARM_2,#0xa0
      002E75 75*01 00         [24] 9137 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E78 90 00 00         [24] 9138 	mov	dptr,#0x0000
      002E7B 12r04rAA         [24] 9139 	lcall	_setCursor
                                   9140 ;	.\ecen4350_lcd_v4.c:2039: setColorDefault();
      002E7E 12r15r88         [24] 9141 	lcall	_setColorDefault
                                   9142 ;	.\ecen4350_lcd_v4.c:2040: LCD_string_write(" Input Block Size:\n");
      002E81 90r09r5B         [24] 9143 	mov	dptr,#___str_83
      002E84 75 F0 80         [24] 9144 	mov	b,#0x80
      002E87 12r0FrC4         [24] 9145 	lcall	_LCD_string_write
                                   9146 ;	.\ecen4350_lcd_v4.c:2041: setColorGray();
      002E8A 12r15rB6         [24] 9147 	lcall	_setColorGray
                                   9148 ;	.\ecen4350_lcd_v4.c:2042: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      002E8D 90r09r6F         [24] 9149 	mov	dptr,#___str_84
      002E90 75 F0 80         [24] 9150 	mov	b,#0x80
      002E93 12r0FrC4         [24] 9151 	lcall	_LCD_string_write
                                   9152 ;	.\ecen4350_lcd_v4.c:2043: LCD_string_write("  <FF> (SCAN)");
      002E96 90r09r95         [24] 9153 	mov	dptr,#___str_85
      002E99 75 F0 80         [24] 9154 	mov	b,#0x80
      002E9C 12r0FrC4         [24] 9155 	lcall	_LCD_string_write
                                   9156 ;	.\ecen4350_lcd_v4.c:2045: (0, 250);
      002E9F 75*00 FA         [24] 9157 	mov	_setCursor_PARM_2,#0xfa
      002EA2 75*01 00         [24] 9158 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EA5 90 00 00         [24] 9159 	mov	dptr,#0x0000
      002EA8 12r04rAA         [24] 9160 	lcall	_setCursor
                                   9161 ;	.\ecen4350_lcd_v4.c:2046: setColorGray();
      002EAB 12r15rB6         [24] 9162 	lcall	_setColorGray
                                   9163 ;	.\ecen4350_lcd_v4.c:2047: LCD_string_write("   __");
      002EAE 90r09rA3         [24] 9164 	mov	dptr,#___str_86
      002EB1 75 F0 80         [24] 9165 	mov	b,#0x80
      002EB4 12r0FrC4         [24] 9166 	lcall	_LCD_string_write
                                   9167 ;	.\ecen4350_lcd_v4.c:2054: setColorSelect();
      002EB7 12r15r93         [24] 9168 	lcall	_setColorSelect
                                   9169 ;	.\ecen4350_lcd_v4.c:2055: setCursor(0, 60);
      002EBA 75*00 3C         [24] 9170 	mov	_setCursor_PARM_2,#0x3c
      002EBD 75*01 00         [24] 9171 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EC0 90 00 00         [24] 9172 	mov	dptr,#0x0000
      002EC3 12r04rAA         [24] 9173 	lcall	_setCursor
                                   9174 ;	.\ecen4350_lcd_v4.c:2056: LCD_string_write(" Find Value:");
      002EC6 90r09r3D         [24] 9175 	mov	dptr,#___str_81
      002EC9 75 F0 80         [24] 9176 	mov	b,#0x80
      002ECC 12r0FrC4         [24] 9177 	lcall	_LCD_string_write
                                   9178 ;	.\ecen4350_lcd_v4.c:2057: setCursor(0, 80);
      002ECF 75*00 50         [24] 9179 	mov	_setCursor_PARM_2,#0x50
      002ED2 75*01 00         [24] 9180 	mov	(_setCursor_PARM_2 + 1),#0x00
      002ED5 90 00 00         [24] 9181 	mov	dptr,#0x0000
      002ED8 12r04rAA         [24] 9182 	lcall	_setCursor
                                   9183 ;	.\ecen4350_lcd_v4.c:2058: setColorWhite();
      002EDB 12r15rD8         [24] 9184 	lcall	_setColorWhite
                                   9185 ;	.\ecen4350_lcd_v4.c:2059: setCursor(0, 80);
      002EDE 75*00 50         [24] 9186 	mov	_setCursor_PARM_2,#0x50
      002EE1 75*01 00         [24] 9187 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EE4 90 00 00         [24] 9188 	mov	dptr,#0x0000
      002EE7 12r04rAA         [24] 9189 	lcall	_setCursor
                                   9190 ;	.\ecen4350_lcd_v4.c:2060: LCD_string_write(" ");
      002EEA 90r06r54         [24] 9191 	mov	dptr,#___str_30
      002EED 75 F0 80         [24] 9192 	mov	b,#0x80
      002EF0 12r0FrC4         [24] 9193 	lcall	_LCD_string_write
                                   9194 ;	.\ecen4350_lcd_v4.c:2061: setColorHighlight1();
      002EF3 12r15r9E         [24] 9195 	lcall	_setColorHighlight1
                                   9196 ;	.\ecen4350_lcd_v4.c:2062: selection = keyDetect();
      002EF6 12r10rE2         [24] 9197 	lcall	_keyDetect
      002EF9 AC 82            [24] 9198 	mov	r4,dpl
      002EFB 78r00            [12] 9199 	mov	r0,#_selection
      002EFD A6 04            [24] 9200 	mov	@r0,ar4
                                   9201 ;	.\ecen4350_lcd_v4.c:2063: write(selection);
      002EFF 8C 82            [24] 9202 	mov	dpl,r4
      002F01 12r0Fr5E         [24] 9203 	lcall	_write
                                   9204 ;	.\ecen4350_lcd_v4.c:2064: selection = ASCIItoHex(selection);
      002F04 78r00            [12] 9205 	mov	r0,#_selection
      002F06 86 82            [24] 9206 	mov	dpl,@r0
      002F08 12r13r50         [24] 9207 	lcall	_ASCIItoHex
      002F0B AC 82            [24] 9208 	mov	r4,dpl
      002F0D D0 03            [24] 9209 	pop	ar3
      002F0F 78r00            [12] 9210 	mov	r0,#_selection
      002F11 A6 04            [24] 9211 	mov	@r0,ar4
                                   9212 ;	.\ecen4350_lcd_v4.c:2065: value |= selection * 16;
      002F13 EC               [12] 9213 	mov	a,r4
      002F14 C4               [12] 9214 	swap	a
      002F15 54 F0            [12] 9215 	anl	a,#0xf0
      002F17 FC               [12] 9216 	mov	r4,a
                                   9217 ;	.\ecen4350_lcd_v4.c:2066: selection = keyDetect();
      002F18 C0 04            [24] 9218 	push	ar4
      002F1A C0 03            [24] 9219 	push	ar3
      002F1C 12r10rE2         [24] 9220 	lcall	_keyDetect
      002F1F AE 82            [24] 9221 	mov	r6,dpl
      002F21 78r00            [12] 9222 	mov	r0,#_selection
      002F23 A6 06            [24] 9223 	mov	@r0,ar6
                                   9224 ;	.\ecen4350_lcd_v4.c:2067: write(selection);
      002F25 8E 82            [24] 9225 	mov	dpl,r6
      002F27 12r0Fr5E         [24] 9226 	lcall	_write
                                   9227 ;	.\ecen4350_lcd_v4.c:2068: selection = ASCIItoHex(selection);
      002F2A 78r00            [12] 9228 	mov	r0,#_selection
      002F2C 86 82            [24] 9229 	mov	dpl,@r0
      002F2E 12r13r50         [24] 9230 	lcall	_ASCIItoHex
      002F31 AE 82            [24] 9231 	mov	r6,dpl
      002F33 D0 03            [24] 9232 	pop	ar3
      002F35 D0 04            [24] 9233 	pop	ar4
      002F37 78r00            [12] 9234 	mov	r0,#_selection
      002F39 A6 06            [24] 9235 	mov	@r0,ar6
                                   9236 ;	.\ecen4350_lcd_v4.c:2069: value |= selection;
      002F3B 78r14            [12] 9237 	mov	r0,#_find_value_65536_652
      002F3D EE               [12] 9238 	mov	a,r6
      002F3E 4C               [12] 9239 	orl	a,r4
      002F3F F6               [12] 9240 	mov	@r0,a
                                   9241 ;	.\ecen4350_lcd_v4.c:2072: setColorDefault();
      002F40 C0 03            [24] 9242 	push	ar3
      002F42 12r15r88         [24] 9243 	lcall	_setColorDefault
                                   9244 ;	.\ecen4350_lcd_v4.c:2073: setCursor(0, 60);
      002F45 75*00 3C         [24] 9245 	mov	_setCursor_PARM_2,#0x3c
      002F48 75*01 00         [24] 9246 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F4B 90 00 00         [24] 9247 	mov	dptr,#0x0000
      002F4E 12r04rAA         [24] 9248 	lcall	_setCursor
                                   9249 ;	.\ecen4350_lcd_v4.c:2074: LCD_string_write(" Find Value:");
      002F51 90r09r3D         [24] 9250 	mov	dptr,#___str_81
      002F54 75 F0 80         [24] 9251 	mov	b,#0x80
      002F57 12r0FrC4         [24] 9252 	lcall	_LCD_string_write
                                   9253 ;	.\ecen4350_lcd_v4.c:2075: setCursor(0, 80);
      002F5A 75*00 50         [24] 9254 	mov	_setCursor_PARM_2,#0x50
      002F5D 75*01 00         [24] 9255 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F60 90 00 00         [24] 9256 	mov	dptr,#0x0000
      002F63 12r04rAA         [24] 9257 	lcall	_setCursor
                                   9258 ;	.\ecen4350_lcd_v4.c:2076: setColorWhite();
      002F66 12r15rD8         [24] 9259 	lcall	_setColorWhite
                                   9260 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write(" ");
      002F69 90r06r54         [24] 9261 	mov	dptr,#___str_30
      002F6C 75 F0 80         [24] 9262 	mov	b,#0x80
      002F6F 12r0FrC4         [24] 9263 	lcall	_LCD_string_write
                                   9264 ;	.\ecen4350_lcd_v4.c:2078: setColorHighlight2();
      002F72 12r15rAA         [24] 9265 	lcall	_setColorHighlight2
                                   9266 ;	.\ecen4350_lcd_v4.c:2079: print8Hex(value);
      002F75 78r14            [12] 9267 	mov	r0,#_find_value_65536_652
      002F77 86 82            [24] 9268 	mov	dpl,@r0
      002F79 12r14r95         [24] 9269 	lcall	_print8Hex
                                   9270 ;	.\ecen4350_lcd_v4.c:2082: setColorSelect();
      002F7C 12r15r93         [24] 9271 	lcall	_setColorSelect
                                   9272 ;	.\ecen4350_lcd_v4.c:2083: setCursor(0, 110);
      002F7F 75*00 6E         [24] 9273 	mov	_setCursor_PARM_2,#0x6e
      002F82 75*01 00         [24] 9274 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F85 90 00 00         [24] 9275 	mov	dptr,#0x0000
      002F88 12r04rAA         [24] 9276 	lcall	_setCursor
                                   9277 ;	.\ecen4350_lcd_v4.c:2084: LCD_string_write(" Search Address:");
      002F8B 90r09r4A         [24] 9278 	mov	dptr,#___str_82
      002F8E 75 F0 80         [24] 9279 	mov	b,#0x80
      002F91 12r0FrC4         [24] 9280 	lcall	_LCD_string_write
                                   9281 ;	.\ecen4350_lcd_v4.c:2085: setCursor(0, 130);
      002F94 75*00 82         [24] 9282 	mov	_setCursor_PARM_2,#0x82
      002F97 75*01 00         [24] 9283 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F9A 90 00 00         [24] 9284 	mov	dptr,#0x0000
      002F9D 12r04rAA         [24] 9285 	lcall	_setCursor
                                   9286 ;	.\ecen4350_lcd_v4.c:2086: LCD_string_write(" ");
      002FA0 90r06r54         [24] 9287 	mov	dptr,#___str_30
      002FA3 75 F0 80         [24] 9288 	mov	b,#0x80
      002FA6 12r0FrC4         [24] 9289 	lcall	_LCD_string_write
                                   9290 ;	.\ecen4350_lcd_v4.c:2087: setColorHighlight1();
      002FA9 12r15r9E         [24] 9291 	lcall	_setColorHighlight1
                                   9292 ;	.\ecen4350_lcd_v4.c:2088: LCD_string_write("0x");
      002FAC 90r05r29         [24] 9293 	mov	dptr,#___str_2
      002FAF 75 F0 80         [24] 9294 	mov	b,#0x80
      002FB2 12r0FrC4         [24] 9295 	lcall	_LCD_string_write
                                   9296 ;	.\ecen4350_lcd_v4.c:2089: address = inputAddress();
      002FB5 12r15rF9         [24] 9297 	lcall	_inputAddress
      002FB8 78r11            [12] 9298 	mov	r0,#_find_address_65536_652
      002FBA A6 82            [24] 9299 	mov	@r0,dpl
      002FBC 08               [12] 9300 	inc	r0
      002FBD A6 83            [24] 9301 	mov	@r0,dph
                                   9302 ;	.\ecen4350_lcd_v4.c:2092: setColorDefault();
      002FBF 12r15r88         [24] 9303 	lcall	_setColorDefault
                                   9304 ;	.\ecen4350_lcd_v4.c:2093: setCursor(0, 110);
      002FC2 75*00 6E         [24] 9305 	mov	_setCursor_PARM_2,#0x6e
      002FC5 75*01 00         [24] 9306 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FC8 90 00 00         [24] 9307 	mov	dptr,#0x0000
      002FCB 12r04rAA         [24] 9308 	lcall	_setCursor
                                   9309 ;	.\ecen4350_lcd_v4.c:2094: LCD_string_write(" Search Address:");
      002FCE 90r09r4A         [24] 9310 	mov	dptr,#___str_82
      002FD1 75 F0 80         [24] 9311 	mov	b,#0x80
      002FD4 12r0FrC4         [24] 9312 	lcall	_LCD_string_write
                                   9313 ;	.\ecen4350_lcd_v4.c:2095: setCursor(0, 130);
      002FD7 75*00 82         [24] 9314 	mov	_setCursor_PARM_2,#0x82
      002FDA 75*01 00         [24] 9315 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FDD 90 00 00         [24] 9316 	mov	dptr,#0x0000
      002FE0 12r04rAA         [24] 9317 	lcall	_setCursor
                                   9318 ;	.\ecen4350_lcd_v4.c:2096: LCD_string_write(" ");
      002FE3 90r06r54         [24] 9319 	mov	dptr,#___str_30
      002FE6 75 F0 80         [24] 9320 	mov	b,#0x80
      002FE9 12r0FrC4         [24] 9321 	lcall	_LCD_string_write
                                   9322 ;	.\ecen4350_lcd_v4.c:2097: setColorHighlight2();
      002FEC 12r15rAA         [24] 9323 	lcall	_setColorHighlight2
                                   9324 ;	.\ecen4350_lcd_v4.c:2098: LCD_string_write("0x");
      002FEF 90r05r29         [24] 9325 	mov	dptr,#___str_2
      002FF2 75 F0 80         [24] 9326 	mov	b,#0x80
      002FF5 12r0FrC4         [24] 9327 	lcall	_LCD_string_write
                                   9328 ;	.\ecen4350_lcd_v4.c:2099: print16Hex(address);
      002FF8 78r11            [12] 9329 	mov	r0,#_find_address_65536_652
      002FFA 86 82            [24] 9330 	mov	dpl,@r0
      002FFC 08               [12] 9331 	inc	r0
      002FFD 86 83            [24] 9332 	mov	dph,@r0
      002FFF 12r14rAC         [24] 9333 	lcall	_print16Hex
                                   9334 ;	.\ecen4350_lcd_v4.c:2102: setColorSelect();
      003002 12r15r93         [24] 9335 	lcall	_setColorSelect
                                   9336 ;	.\ecen4350_lcd_v4.c:2103: setCursor(0, 160);
      003005 75*00 A0         [24] 9337 	mov	_setCursor_PARM_2,#0xa0
      003008 75*01 00         [24] 9338 	mov	(_setCursor_PARM_2 + 1),#0x00
      00300B 90 00 00         [24] 9339 	mov	dptr,#0x0000
      00300E 12r04rAA         [24] 9340 	lcall	_setCursor
                                   9341 ;	.\ecen4350_lcd_v4.c:2104: LCD_string_write(" Input Block Size:\n");
      003011 90r09r5B         [24] 9342 	mov	dptr,#___str_83
      003014 75 F0 80         [24] 9343 	mov	b,#0x80
      003017 12r0FrC4         [24] 9344 	lcall	_LCD_string_write
                                   9345 ;	.\ecen4350_lcd_v4.c:2105: setColorWhite();
      00301A 12r15rD8         [24] 9346 	lcall	_setColorWhite
                                   9347 ;	.\ecen4350_lcd_v4.c:2106: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      00301D 90r09r6F         [24] 9348 	mov	dptr,#___str_84
      003020 75 F0 80         [24] 9349 	mov	b,#0x80
      003023 12r0FrC4         [24] 9350 	lcall	_LCD_string_write
                                   9351 ;	.\ecen4350_lcd_v4.c:2107: LCD_string_write("  <FF> (SCAN)");
      003026 90r09r95         [24] 9352 	mov	dptr,#___str_85
      003029 75 F0 80         [24] 9353 	mov	b,#0x80
      00302C 12r0FrC4         [24] 9354 	lcall	_LCD_string_write
      00302F D0 03            [24] 9355 	pop	ar3
      003031 D0 05            [24] 9356 	pop	ar5
                                   9357 ;	.\ecen4350_lcd_v4.c:2108: while (invalidInput) {
      003033                       9358 00113$:
      003033 EB               [12] 9359 	mov	a,r3
      003034 70 03            [24] 9360 	jnz	00539$
      003036 02r30rF2         [24] 9361 	ljmp	00115$
      003039                       9362 00539$:
                                   9363 ;	.\ecen4350_lcd_v4.c:2109: setCursor(0, 250);
      003039 75*00 FA         [24] 9364 	mov	_setCursor_PARM_2,#0xfa
      00303C 75*01 00         [24] 9365 	mov	(_setCursor_PARM_2 + 1),#0x00
      00303F 90 00 00         [24] 9366 	mov	dptr,#0x0000
      003042 C0 05            [24] 9367 	push	ar5
      003044 C0 03            [24] 9368 	push	ar3
      003046 12r04rAA         [24] 9369 	lcall	_setCursor
                                   9370 ;	.\ecen4350_lcd_v4.c:2110: setColorGray();
      003049 12r15rB6         [24] 9371 	lcall	_setColorGray
                                   9372 ;	.\ecen4350_lcd_v4.c:2111: LCD_string_write("   __");
      00304C 90r09rA3         [24] 9373 	mov	dptr,#___str_86
      00304F 75 F0 80         [24] 9374 	mov	b,#0x80
      003052 12r0FrC4         [24] 9375 	lcall	_LCD_string_write
                                   9376 ;	.\ecen4350_lcd_v4.c:2112: setCursor(0, 250);
      003055 75*00 FA         [24] 9377 	mov	_setCursor_PARM_2,#0xfa
      003058 75*01 00         [24] 9378 	mov	(_setCursor_PARM_2 + 1),#0x00
      00305B 90 00 00         [24] 9379 	mov	dptr,#0x0000
      00305E 12r04rAA         [24] 9380 	lcall	_setCursor
                                   9381 ;	.\ecen4350_lcd_v4.c:2113: LCD_string_write("   ");
      003061 90r09rA9         [24] 9382 	mov	dptr,#___str_87
      003064 75 F0 80         [24] 9383 	mov	b,#0x80
      003067 12r0FrC4         [24] 9384 	lcall	_LCD_string_write
                                   9385 ;	.\ecen4350_lcd_v4.c:2114: setColorHighlight1();
      00306A 12r15r9E         [24] 9386 	lcall	_setColorHighlight1
                                   9387 ;	.\ecen4350_lcd_v4.c:2115: blockSize = inputBlockSize();
      00306D 12r16rA9         [24] 9388 	lcall	_inputBlockSize
      003070 78r13            [12] 9389 	mov	r0,#_find_blockSize_65536_652
      003072 A6 82            [24] 9390 	mov	@r0,dpl
      003074 D0 03            [24] 9391 	pop	ar3
      003076 D0 05            [24] 9392 	pop	ar5
                                   9393 ;	.\ecen4350_lcd_v4.c:2116: if (blockSize == 0x01) {
      003078 78r13            [12] 9394 	mov	r0,#_find_blockSize_65536_652
      00307A B6 01 18         [24] 9395 	cjne	@r0,#0x01,00111$
                                   9396 ;	.\ecen4350_lcd_v4.c:2117: invalidInput = 0;
      00307D 7B 00            [12] 9397 	mov	r3,#0x00
                                   9398 ;	.\ecen4350_lcd_v4.c:2118: setColorDefault();
      00307F C0 05            [24] 9399 	push	ar5
      003081 C0 03            [24] 9400 	push	ar3
      003083 12r15r88         [24] 9401 	lcall	_setColorDefault
                                   9402 ;	.\ecen4350_lcd_v4.c:2119: LCD_string_write("\n                ");
      003086 90r09rAD         [24] 9403 	mov	dptr,#___str_88
      003089 75 F0 80         [24] 9404 	mov	b,#0x80
      00308C 12r0FrC4         [24] 9405 	lcall	_LCD_string_write
      00308F D0 03            [24] 9406 	pop	ar3
      003091 D0 05            [24] 9407 	pop	ar5
      003093 80 9E            [24] 9408 	sjmp	00113$
      003095                       9409 00111$:
                                   9410 ;	.\ecen4350_lcd_v4.c:2120: } else if (blockSize == 0x02) {
      003095 78r13            [12] 9411 	mov	r0,#_find_blockSize_65536_652
      003097 B6 02 19         [24] 9412 	cjne	@r0,#0x02,00108$
                                   9413 ;	.\ecen4350_lcd_v4.c:2121: invalidInput = 0;
      00309A 7B 00            [12] 9414 	mov	r3,#0x00
                                   9415 ;	.\ecen4350_lcd_v4.c:2122: setColorDefault();
      00309C C0 05            [24] 9416 	push	ar5
      00309E C0 03            [24] 9417 	push	ar3
      0030A0 12r15r88         [24] 9418 	lcall	_setColorDefault
                                   9419 ;	.\ecen4350_lcd_v4.c:2123: LCD_string_write("\n                ");
      0030A3 90r09rAD         [24] 9420 	mov	dptr,#___str_88
      0030A6 75 F0 80         [24] 9421 	mov	b,#0x80
      0030A9 12r0FrC4         [24] 9422 	lcall	_LCD_string_write
      0030AC D0 03            [24] 9423 	pop	ar3
      0030AE D0 05            [24] 9424 	pop	ar5
      0030B0 02r30r33         [24] 9425 	ljmp	00113$
      0030B3                       9426 00108$:
                                   9427 ;	.\ecen4350_lcd_v4.c:2124: } else if (blockSize == 0x04) {
      0030B3 78r13            [12] 9428 	mov	r0,#_find_blockSize_65536_652
      0030B5 B6 04 19         [24] 9429 	cjne	@r0,#0x04,00105$
                                   9430 ;	.\ecen4350_lcd_v4.c:2125: invalidInput = 0;
      0030B8 7B 00            [12] 9431 	mov	r3,#0x00
                                   9432 ;	.\ecen4350_lcd_v4.c:2126: setColorDefault();
      0030BA C0 05            [24] 9433 	push	ar5
      0030BC C0 03            [24] 9434 	push	ar3
      0030BE 12r15r88         [24] 9435 	lcall	_setColorDefault
                                   9436 ;	.\ecen4350_lcd_v4.c:2127: LCD_string_write("\n                ");
      0030C1 90r09rAD         [24] 9437 	mov	dptr,#___str_88
      0030C4 75 F0 80         [24] 9438 	mov	b,#0x80
      0030C7 12r0FrC4         [24] 9439 	lcall	_LCD_string_write
      0030CA D0 03            [24] 9440 	pop	ar3
      0030CC D0 05            [24] 9441 	pop	ar5
      0030CE 02r30r33         [24] 9442 	ljmp	00113$
      0030D1                       9443 00105$:
                                   9444 ;	.\ecen4350_lcd_v4.c:2128: } else if (blockSize == 0xFF) {
      0030D1 78r13            [12] 9445 	mov	r0,#_find_blockSize_65536_652
      0030D3 B6 FF 05         [24] 9446 	cjne	@r0,#0xff,00102$
                                   9447 ;	.\ecen4350_lcd_v4.c:2129: invalidInput = 0;
      0030D6 7B 00            [12] 9448 	mov	r3,#0x00
      0030D8 02r30r33         [24] 9449 	ljmp	00113$
      0030DB                       9450 00102$:
                                   9451 ;	.\ecen4350_lcd_v4.c:2132: setColorRed();
      0030DB C0 05            [24] 9452 	push	ar5
      0030DD C0 03            [24] 9453 	push	ar3
      0030DF 12r15rCD         [24] 9454 	lcall	_setColorRed
                                   9455 ;	.\ecen4350_lcd_v4.c:2133: LCD_string_write("\n Try again");
      0030E2 90r09rBF         [24] 9456 	mov	dptr,#___str_89
      0030E5 75 F0 80         [24] 9457 	mov	b,#0x80
      0030E8 12r0FrC4         [24] 9458 	lcall	_LCD_string_write
      0030EB D0 03            [24] 9459 	pop	ar3
      0030ED D0 05            [24] 9460 	pop	ar5
      0030EF 02r30r33         [24] 9461 	ljmp	00113$
      0030F2                       9462 00115$:
                                   9463 ;	.\ecen4350_lcd_v4.c:2138: setCursor(0, 160);
      0030F2 75*00 A0         [24] 9464 	mov	_setCursor_PARM_2,#0xa0
      0030F5 75*01 00         [24] 9465 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030F8 90 00 00         [24] 9466 	mov	dptr,#0x0000
      0030FB C0 05            [24] 9467 	push	ar5
      0030FD 12r04rAA         [24] 9468 	lcall	_setCursor
                                   9469 ;	.\ecen4350_lcd_v4.c:2139: setColorDefault();
      003100 12r15r88         [24] 9470 	lcall	_setColorDefault
                                   9471 ;	.\ecen4350_lcd_v4.c:2140: LCD_string_write(" Input Block Size:\n");
      003103 90r09r5B         [24] 9472 	mov	dptr,#___str_83
      003106 75 F0 80         [24] 9473 	mov	b,#0x80
      003109 12r0FrC4         [24] 9474 	lcall	_LCD_string_write
      00310C D0 05            [24] 9475 	pop	ar5
                                   9476 ;	.\ecen4350_lcd_v4.c:2141: if (blockSize == 0x01){
      00310E 78r13            [12] 9477 	mov	r0,#_find_blockSize_65536_652
      003110 B6 01 74         [24] 9478 	cjne	@r0,#0x01,00125$
                                   9479 ;	.\ecen4350_lcd_v4.c:2142: LCD_string_write("  ");
      003113 90r06r6D         [24] 9480 	mov	dptr,#___str_33
      003116 75 F0 80         [24] 9481 	mov	b,#0x80
      003119 C0 05            [24] 9482 	push	ar5
      00311B 12r0FrC4         [24] 9483 	lcall	_LCD_string_write
                                   9484 ;	.\ecen4350_lcd_v4.c:2143: setColorHighlight2();
      00311E 12r15rAA         [24] 9485 	lcall	_setColorHighlight2
                                   9486 ;	.\ecen4350_lcd_v4.c:2144: LCD_string_write("<01> BYTE\n");
      003121 90r09rCB         [24] 9487 	mov	dptr,#___str_90
      003124 75 F0 80         [24] 9488 	mov	b,#0x80
      003127 12r0FrC4         [24] 9489 	lcall	_LCD_string_write
                                   9490 ;	.\ecen4350_lcd_v4.c:2145: setColorGray();
      00312A 12r15rB6         [24] 9491 	lcall	_setColorGray
                                   9492 ;	.\ecen4350_lcd_v4.c:2146: LCD_string_write("  <02> WORD\n");
      00312D 90r09rD6         [24] 9493 	mov	dptr,#___str_91
      003130 75 F0 80         [24] 9494 	mov	b,#0x80
      003133 12r0FrC4         [24] 9495 	lcall	_LCD_string_write
                                   9496 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write("  <04> DWORD\n");
      003136 90r09rE3         [24] 9497 	mov	dptr,#___str_92
      003139 75 F0 80         [24] 9498 	mov	b,#0x80
      00313C 12r0FrC4         [24] 9499 	lcall	_LCD_string_write
                                   9500 ;	.\ecen4350_lcd_v4.c:2148: LCD_string_write("  <FF> (SCAN)");
      00313F 90r09r95         [24] 9501 	mov	dptr,#___str_85
      003142 75 F0 80         [24] 9502 	mov	b,#0x80
      003145 12r0FrC4         [24] 9503 	lcall	_LCD_string_write
                                   9504 ;	.\ecen4350_lcd_v4.c:2149: setColorDefault();
      003148 12r15r88         [24] 9505 	lcall	_setColorDefault
                                   9506 ;	.\ecen4350_lcd_v4.c:2150: setCursor(0, 250);
      00314B 75*00 FA         [24] 9507 	mov	_setCursor_PARM_2,#0xfa
      00314E 75*01 00         [24] 9508 	mov	(_setCursor_PARM_2 + 1),#0x00
      003151 90 00 00         [24] 9509 	mov	dptr,#0x0000
      003154 12r04rAA         [24] 9510 	lcall	_setCursor
                                   9511 ;	.\ecen4350_lcd_v4.c:2151: LCD_string_write("   ");
      003157 90r09rA9         [24] 9512 	mov	dptr,#___str_87
      00315A 75 F0 80         [24] 9513 	mov	b,#0x80
      00315D 12r0FrC4         [24] 9514 	lcall	_LCD_string_write
                                   9515 ;	.\ecen4350_lcd_v4.c:2152: setColorHighlight2();
      003160 12r15rAA         [24] 9516 	lcall	_setColorHighlight2
                                   9517 ;	.\ecen4350_lcd_v4.c:2153: print8Hex(blockSize);
      003163 78r13            [12] 9518 	mov	r0,#_find_blockSize_65536_652
      003165 86 82            [24] 9519 	mov	dpl,@r0
      003167 12r14r95         [24] 9520 	lcall	_print8Hex
                                   9521 ;	.\ecen4350_lcd_v4.c:2154: setColorDefault();
      00316A 12r15r88         [24] 9522 	lcall	_setColorDefault
                                   9523 ;	.\ecen4350_lcd_v4.c:2155: LCD_string_write("\n Search Size Limit:");
      00316D 90r09rF1         [24] 9524 	mov	dptr,#___str_93
      003170 75 F0 80         [24] 9525 	mov	b,#0x80
      003173 12r0FrC4         [24] 9526 	lcall	_LCD_string_write
                                   9527 ;	.\ecen4350_lcd_v4.c:2156: setColorWhite();
      003176 12r15rD8         [24] 9528 	lcall	_setColorWhite
                                   9529 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write("\n BYTE [8 bits]");
      003179 90r0Ar06         [24] 9530 	mov	dptr,#___str_94
      00317C 75 F0 80         [24] 9531 	mov	b,#0x80
      00317F 12r0FrC4         [24] 9532 	lcall	_LCD_string_write
      003182 D0 05            [24] 9533 	pop	ar5
      003184 02r32rCB         [24] 9534 	ljmp	00126$
      003187                       9535 00125$:
                                   9536 ;	.\ecen4350_lcd_v4.c:2158: } else if (blockSize == 0x02) {
      003187 78r13            [12] 9537 	mov	r0,#_find_blockSize_65536_652
      003189 B6 02 6E         [24] 9538 	cjne	@r0,#0x02,00122$
                                   9539 ;	.\ecen4350_lcd_v4.c:2159: setColorGray();
      00318C C0 05            [24] 9540 	push	ar5
      00318E 12r15rB6         [24] 9541 	lcall	_setColorGray
                                   9542 ;	.\ecen4350_lcd_v4.c:2160: LCD_string_write("  <01> BYTE\n  ");
      003191 90r0Ar16         [24] 9543 	mov	dptr,#___str_95
      003194 75 F0 80         [24] 9544 	mov	b,#0x80
      003197 12r0FrC4         [24] 9545 	lcall	_LCD_string_write
                                   9546 ;	.\ecen4350_lcd_v4.c:2161: setColorHighlight2();
      00319A 12r15rAA         [24] 9547 	lcall	_setColorHighlight2
                                   9548 ;	.\ecen4350_lcd_v4.c:2162: LCD_string_write("<02> WORD\n");
      00319D 90r0Ar25         [24] 9549 	mov	dptr,#___str_96
      0031A0 75 F0 80         [24] 9550 	mov	b,#0x80
      0031A3 12r0FrC4         [24] 9551 	lcall	_LCD_string_write
                                   9552 ;	.\ecen4350_lcd_v4.c:2163: setColorGray();
      0031A6 12r15rB6         [24] 9553 	lcall	_setColorGray
                                   9554 ;	.\ecen4350_lcd_v4.c:2164: LCD_string_write("  <04> DWORD\n");
      0031A9 90r09rE3         [24] 9555 	mov	dptr,#___str_92
      0031AC 75 F0 80         [24] 9556 	mov	b,#0x80
      0031AF 12r0FrC4         [24] 9557 	lcall	_LCD_string_write
                                   9558 ;	.\ecen4350_lcd_v4.c:2165: LCD_string_write("  <FF> (SCAN)");
      0031B2 90r09r95         [24] 9559 	mov	dptr,#___str_85
      0031B5 75 F0 80         [24] 9560 	mov	b,#0x80
      0031B8 12r0FrC4         [24] 9561 	lcall	_LCD_string_write
                                   9562 ;	.\ecen4350_lcd_v4.c:2166: setColorDefault();
      0031BB 12r15r88         [24] 9563 	lcall	_setColorDefault
                                   9564 ;	.\ecen4350_lcd_v4.c:2167: setCursor(0, 250);
      0031BE 75*00 FA         [24] 9565 	mov	_setCursor_PARM_2,#0xfa
      0031C1 75*01 00         [24] 9566 	mov	(_setCursor_PARM_2 + 1),#0x00
      0031C4 90 00 00         [24] 9567 	mov	dptr,#0x0000
      0031C7 12r04rAA         [24] 9568 	lcall	_setCursor
                                   9569 ;	.\ecen4350_lcd_v4.c:2168: LCD_string_write("   ");
      0031CA 90r09rA9         [24] 9570 	mov	dptr,#___str_87
      0031CD 75 F0 80         [24] 9571 	mov	b,#0x80
      0031D0 12r0FrC4         [24] 9572 	lcall	_LCD_string_write
                                   9573 ;	.\ecen4350_lcd_v4.c:2169: setColorHighlight2();
      0031D3 12r15rAA         [24] 9574 	lcall	_setColorHighlight2
                                   9575 ;	.\ecen4350_lcd_v4.c:2170: print8Hex(blockSize);
      0031D6 78r13            [12] 9576 	mov	r0,#_find_blockSize_65536_652
      0031D8 86 82            [24] 9577 	mov	dpl,@r0
      0031DA 12r14r95         [24] 9578 	lcall	_print8Hex
                                   9579 ;	.\ecen4350_lcd_v4.c:2171: setColorDefault();
      0031DD 12r15r88         [24] 9580 	lcall	_setColorDefault
                                   9581 ;	.\ecen4350_lcd_v4.c:2172: LCD_string_write("\n Search Size Limit:");
      0031E0 90r09rF1         [24] 9582 	mov	dptr,#___str_93
      0031E3 75 F0 80         [24] 9583 	mov	b,#0x80
      0031E6 12r0FrC4         [24] 9584 	lcall	_LCD_string_write
                                   9585 ;	.\ecen4350_lcd_v4.c:2173: setColorWhite();
      0031E9 12r15rD8         [24] 9586 	lcall	_setColorWhite
                                   9587 ;	.\ecen4350_lcd_v4.c:2174: LCD_string_write("\n WORD [16 bits]");
      0031EC 90r0Ar30         [24] 9588 	mov	dptr,#___str_97
      0031EF 75 F0 80         [24] 9589 	mov	b,#0x80
      0031F2 12r0FrC4         [24] 9590 	lcall	_LCD_string_write
      0031F5 D0 05            [24] 9591 	pop	ar5
      0031F7 02r32rCB         [24] 9592 	ljmp	00126$
      0031FA                       9593 00122$:
                                   9594 ;	.\ecen4350_lcd_v4.c:2175: } else if (blockSize == 0x04) {
      0031FA 78r13            [12] 9595 	mov	r0,#_find_blockSize_65536_652
      0031FC B6 04 64         [24] 9596 	cjne	@r0,#0x04,00119$
                                   9597 ;	.\ecen4350_lcd_v4.c:2176: setColorGray();
      0031FF C0 05            [24] 9598 	push	ar5
      003201 12r15rB6         [24] 9599 	lcall	_setColorGray
                                   9600 ;	.\ecen4350_lcd_v4.c:2177: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003204 90r0Ar41         [24] 9601 	mov	dptr,#___str_98
      003207 75 F0 80         [24] 9602 	mov	b,#0x80
      00320A 12r0FrC4         [24] 9603 	lcall	_LCD_string_write
                                   9604 ;	.\ecen4350_lcd_v4.c:2178: setColorHighlight2();
      00320D 12r15rAA         [24] 9605 	lcall	_setColorHighlight2
                                   9606 ;	.\ecen4350_lcd_v4.c:2179: LCD_string_write("<04> DWORD\n");
      003210 90r0Ar5C         [24] 9607 	mov	dptr,#___str_99
      003213 75 F0 80         [24] 9608 	mov	b,#0x80
      003216 12r0FrC4         [24] 9609 	lcall	_LCD_string_write
                                   9610 ;	.\ecen4350_lcd_v4.c:2180: setColorGray();
      003219 12r15rB6         [24] 9611 	lcall	_setColorGray
                                   9612 ;	.\ecen4350_lcd_v4.c:2181: LCD_string_write("  <FF> (SCAN)");
      00321C 90r09r95         [24] 9613 	mov	dptr,#___str_85
      00321F 75 F0 80         [24] 9614 	mov	b,#0x80
      003222 12r0FrC4         [24] 9615 	lcall	_LCD_string_write
                                   9616 ;	.\ecen4350_lcd_v4.c:2182: setColorDefault();
      003225 12r15r88         [24] 9617 	lcall	_setColorDefault
                                   9618 ;	.\ecen4350_lcd_v4.c:2183: setCursor(0, 250);
      003228 75*00 FA         [24] 9619 	mov	_setCursor_PARM_2,#0xfa
      00322B 75*01 00         [24] 9620 	mov	(_setCursor_PARM_2 + 1),#0x00
      00322E 90 00 00         [24] 9621 	mov	dptr,#0x0000
      003231 12r04rAA         [24] 9622 	lcall	_setCursor
                                   9623 ;	.\ecen4350_lcd_v4.c:2184: LCD_string_write("   ");
      003234 90r09rA9         [24] 9624 	mov	dptr,#___str_87
      003237 75 F0 80         [24] 9625 	mov	b,#0x80
      00323A 12r0FrC4         [24] 9626 	lcall	_LCD_string_write
                                   9627 ;	.\ecen4350_lcd_v4.c:2185: setColorHighlight2();
      00323D 12r15rAA         [24] 9628 	lcall	_setColorHighlight2
                                   9629 ;	.\ecen4350_lcd_v4.c:2186: print8Hex(blockSize);
      003240 78r13            [12] 9630 	mov	r0,#_find_blockSize_65536_652
      003242 86 82            [24] 9631 	mov	dpl,@r0
      003244 12r14r95         [24] 9632 	lcall	_print8Hex
                                   9633 ;	.\ecen4350_lcd_v4.c:2187: setColorDefault();
      003247 12r15r88         [24] 9634 	lcall	_setColorDefault
                                   9635 ;	.\ecen4350_lcd_v4.c:2188: LCD_string_write("\n Search Size Limit:");
      00324A 90r09rF1         [24] 9636 	mov	dptr,#___str_93
      00324D 75 F0 80         [24] 9637 	mov	b,#0x80
      003250 12r0FrC4         [24] 9638 	lcall	_LCD_string_write
                                   9639 ;	.\ecen4350_lcd_v4.c:2189: setColorWhite();
      003253 12r15rD8         [24] 9640 	lcall	_setColorWhite
                                   9641 ;	.\ecen4350_lcd_v4.c:2190: LCD_string_write("\n DWORD [32 bits]");
      003256 90r0Ar68         [24] 9642 	mov	dptr,#___str_100
      003259 75 F0 80         [24] 9643 	mov	b,#0x80
      00325C 12r0FrC4         [24] 9644 	lcall	_LCD_string_write
      00325F D0 05            [24] 9645 	pop	ar5
      003261 80 68            [24] 9646 	sjmp	00126$
      003263                       9647 00119$:
                                   9648 ;	.\ecen4350_lcd_v4.c:2191: } else if (blockSize == 0xFF) {
      003263 78r13            [12] 9649 	mov	r0,#_find_blockSize_65536_652
      003265 B6 FF 63         [24] 9650 	cjne	@r0,#0xff,00126$
                                   9651 ;	.\ecen4350_lcd_v4.c:2192: scan = 1;
      003268 78r15            [12] 9652 	mov	r0,#_find_scan_65536_652
      00326A 76 01            [12] 9653 	mov	@r0,#0x01
                                   9654 ;	.\ecen4350_lcd_v4.c:2193: setColorGray();
      00326C C0 05            [24] 9655 	push	ar5
      00326E 12r15rB6         [24] 9656 	lcall	_setColorGray
                                   9657 ;	.\ecen4350_lcd_v4.c:2194: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003271 90r0Ar41         [24] 9658 	mov	dptr,#___str_98
      003274 75 F0 80         [24] 9659 	mov	b,#0x80
      003277 12r0FrC4         [24] 9660 	lcall	_LCD_string_write
                                   9661 ;	.\ecen4350_lcd_v4.c:2195: LCD_string_write("<04> DWORD\n  ");
      00327A 90r0Ar7A         [24] 9662 	mov	dptr,#___str_101
      00327D 75 F0 80         [24] 9663 	mov	b,#0x80
      003280 12r0FrC4         [24] 9664 	lcall	_LCD_string_write
                                   9665 ;	.\ecen4350_lcd_v4.c:2196: setColorHighlight2();
      003283 12r15rAA         [24] 9666 	lcall	_setColorHighlight2
                                   9667 ;	.\ecen4350_lcd_v4.c:2197: LCD_string_write("<FF> (SCAN)");
      003286 90r0Ar88         [24] 9668 	mov	dptr,#___str_102
      003289 75 F0 80         [24] 9669 	mov	b,#0x80
      00328C 12r0FrC4         [24] 9670 	lcall	_LCD_string_write
                                   9671 ;	.\ecen4350_lcd_v4.c:2198: setColorDefault();
      00328F 12r15r88         [24] 9672 	lcall	_setColorDefault
                                   9673 ;	.\ecen4350_lcd_v4.c:2199: setCursor(0, 250);
      003292 75*00 FA         [24] 9674 	mov	_setCursor_PARM_2,#0xfa
      003295 75*01 00         [24] 9675 	mov	(_setCursor_PARM_2 + 1),#0x00
      003298 90 00 00         [24] 9676 	mov	dptr,#0x0000
      00329B 12r04rAA         [24] 9677 	lcall	_setCursor
                                   9678 ;	.\ecen4350_lcd_v4.c:2200: LCD_string_write("   ");
      00329E 90r09rA9         [24] 9679 	mov	dptr,#___str_87
      0032A1 75 F0 80         [24] 9680 	mov	b,#0x80
      0032A4 12r0FrC4         [24] 9681 	lcall	_LCD_string_write
                                   9682 ;	.\ecen4350_lcd_v4.c:2201: setColorHighlight2();
      0032A7 12r15rAA         [24] 9683 	lcall	_setColorHighlight2
                                   9684 ;	.\ecen4350_lcd_v4.c:2202: print8Hex(blockSize);
      0032AA 78r13            [12] 9685 	mov	r0,#_find_blockSize_65536_652
      0032AC 86 82            [24] 9686 	mov	dpl,@r0
      0032AE 12r14r95         [24] 9687 	lcall	_print8Hex
                                   9688 ;	.\ecen4350_lcd_v4.c:2203: setColorDefault();
      0032B1 12r15r88         [24] 9689 	lcall	_setColorDefault
                                   9690 ;	.\ecen4350_lcd_v4.c:2204: LCD_string_write("\n Search Size Limit:");
      0032B4 90r09rF1         [24] 9691 	mov	dptr,#___str_93
      0032B7 75 F0 80         [24] 9692 	mov	b,#0x80
      0032BA 12r0FrC4         [24] 9693 	lcall	_LCD_string_write
                                   9694 ;	.\ecen4350_lcd_v4.c:2205: setColorWhite();
      0032BD 12r15rD8         [24] 9695 	lcall	_setColorWhite
                                   9696 ;	.\ecen4350_lcd_v4.c:2206: LCD_string_write("\n [256 Blocks]");
      0032C0 90r0Ar94         [24] 9697 	mov	dptr,#___str_103
      0032C3 75 F0 80         [24] 9698 	mov	b,#0x80
      0032C6 12r0FrC4         [24] 9699 	lcall	_LCD_string_write
      0032C9 D0 05            [24] 9700 	pop	ar5
      0032CB                       9701 00126$:
                                   9702 ;	.\ecen4350_lcd_v4.c:2210: delay(40);
      0032CB 90 00 28         [24] 9703 	mov	dptr,#0x0028
      0032CE C0 05            [24] 9704 	push	ar5
      0032D0 12r00rE0         [24] 9705 	lcall	_delay
                                   9706 ;	.\ecen4350_lcd_v4.c:2211: clearLCD();
      0032D3 12r0Dr47         [24] 9707 	lcall	_clearLCD
                                   9708 ;	.\ecen4350_lcd_v4.c:2212: fillTop(GRAY);
      0032D6 90 D6 BA         [24] 9709 	mov	dptr,#0xd6ba
      0032D9 12r0Br7A         [24] 9710 	lcall	_fillTop
                                   9711 ;	.\ecen4350_lcd_v4.c:2213: setTextSize(5);
      0032DC 75 82 05         [24] 9712 	mov	dpl,#0x05
      0032DF 12r04rC4         [24] 9713 	lcall	_setTextSize
                                   9714 ;	.\ecen4350_lcd_v4.c:2214: setColorMenu();
      0032E2 12r15rC1         [24] 9715 	lcall	_setColorMenu
                                   9716 ;	.\ecen4350_lcd_v4.c:2215: setCursor(30,0);
      0032E5 E4               [12] 9717 	clr	a
      0032E6 F5*00            [12] 9718 	mov	_setCursor_PARM_2,a
      0032E8 F5*01            [12] 9719 	mov	(_setCursor_PARM_2 + 1),a
      0032EA 90 00 1E         [24] 9720 	mov	dptr,#0x001e
      0032ED 12r04rAA         [24] 9721 	lcall	_setCursor
                                   9722 ;	.\ecen4350_lcd_v4.c:2216: LCD_string_write("[FIND]\n");
      0032F0 90r09r35         [24] 9723 	mov	dptr,#___str_80
      0032F3 75 F0 80         [24] 9724 	mov	b,#0x80
      0032F6 12r0FrC4         [24] 9725 	lcall	_LCD_string_write
                                   9726 ;	.\ecen4350_lcd_v4.c:2217: setColorDefault();
      0032F9 12r15r88         [24] 9727 	lcall	_setColorDefault
                                   9728 ;	.\ecen4350_lcd_v4.c:2218: setTextSize(2);
      0032FC 75 82 02         [24] 9729 	mov	dpl,#0x02
      0032FF 12r04rC4         [24] 9730 	lcall	_setTextSize
      003302 D0 05            [24] 9731 	pop	ar5
                                   9732 ;	.\ecen4350_lcd_v4.c:2224: while (exit) {
      003304                       9733 00205$:
      003304 78r17            [12] 9734 	mov	r0,#_find_exit_65536_652
      003306 E6               [12] 9735 	mov	a,@r0
      003307 70 03            [24] 9736 	jnz	00556$
      003309 02r38rCC         [24] 9737 	ljmp	00207$
      00330C                       9738 00556$:
                                   9739 ;	.\ecen4350_lcd_v4.c:2226: if (scan) {	
      00330C 78r15            [12] 9740 	mov	r0,#_find_scan_65536_652
      00330E E6               [12] 9741 	mov	a,@r0
      00330F 70 03            [24] 9742 	jnz	00557$
      003311 02r33rEB         [24] 9743 	ljmp	00196$
      003314                       9744 00557$:
                                   9745 ;	.\ecen4350_lcd_v4.c:2227: setCursor(0, 60);
      003314 75*00 3C         [24] 9746 	mov	_setCursor_PARM_2,#0x3c
      003317 75*01 00         [24] 9747 	mov	(_setCursor_PARM_2 + 1),#0x00
      00331A 90 00 00         [24] 9748 	mov	dptr,#0x0000
      00331D C0 05            [24] 9749 	push	ar5
      00331F 12r04rAA         [24] 9750 	lcall	_setCursor
                                   9751 ;	.\ecen4350_lcd_v4.c:2228: setColorYellow();
      003322 12r15rEE         [24] 9752 	lcall	_setColorYellow
                                   9753 ;	.\ecen4350_lcd_v4.c:2229: LCD_string_write(" [Non-Interactive]\n");
      003325 90r0ArA3         [24] 9754 	mov	dptr,#___str_104
      003328 75 F0 80         [24] 9755 	mov	b,#0x80
      00332B 12r0FrC4         [24] 9756 	lcall	_LCD_string_write
                                   9757 ;	.\ecen4350_lcd_v4.c:2230: setColorWhite();
      00332E 12r15rD8         [24] 9758 	lcall	_setColorWhite
                                   9759 ;	.\ecen4350_lcd_v4.c:2231: LCD_string_write(" Search Value:\n ");
      003331 90r0ArB7         [24] 9760 	mov	dptr,#___str_105
      003334 75 F0 80         [24] 9761 	mov	b,#0x80
      003337 12r0FrC4         [24] 9762 	lcall	_LCD_string_write
                                   9763 ;	.\ecen4350_lcd_v4.c:2232: setColorDefault();
      00333A 12r15r88         [24] 9764 	lcall	_setColorDefault
                                   9765 ;	.\ecen4350_lcd_v4.c:2233: print8Hex(value);
      00333D 78r14            [12] 9766 	mov	r0,#_find_value_65536_652
      00333F 86 82            [24] 9767 	mov	dpl,@r0
      003341 12r14r95         [24] 9768 	lcall	_print8Hex
      003344 D0 05            [24] 9769 	pop	ar5
                                   9770 ;	.\ecen4350_lcd_v4.c:2234: for(unsigned int i = 0; i < blockSize; i++) {
      003346 8D 03            [24] 9771 	mov	ar3,r5
      003348 E4               [12] 9772 	clr	a
      003349 F5*59            [12] 9773 	mov	_find_i_262144_665,a
      00334B F5*5A            [12] 9774 	mov	(_find_i_262144_665 + 1),a
      00334D                       9775 00211$:
      00334D 78r13            [12] 9776 	mov	r0,#_find_blockSize_65536_652
      00334F 86 02            [24] 9777 	mov	ar2,@r0
      003351 7E 00            [12] 9778 	mov	r6,#0x00
      003353 C3               [12] 9779 	clr	c
      003354 E5*59            [12] 9780 	mov	a,_find_i_262144_665
      003356 9A               [12] 9781 	subb	a,r2
      003357 E5*5A            [12] 9782 	mov	a,(_find_i_262144_665 + 1)
      003359 9E               [12] 9783 	subb	a,r6
      00335A 40 03            [24] 9784 	jc	00558$
      00335C 02r33rE2         [24] 9785 	ljmp	00271$
      00335F                       9786 00558$:
                                   9787 ;	.\ecen4350_lcd_v4.c:2235: d = (unsigned char __xdata*)(i+address);
      00335F 78r11            [12] 9788 	mov	r0,#_find_address_65536_652
      003361 E6               [12] 9789 	mov	a,@r0
      003362 25*59            [12] 9790 	add	a,_find_i_262144_665
      003364 FC               [12] 9791 	mov	r4,a
      003365 08               [12] 9792 	inc	r0
      003366 E6               [12] 9793 	mov	a,@r0
      003367 35*5A            [12] 9794 	addc	a,(_find_i_262144_665 + 1)
      003369 FE               [12] 9795 	mov	r6,a
                                   9796 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   9797 ;	assignBit
      00336A C2 B5            [12] 9798 	clr	_P3_5
                                   9799 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      00336C 8C 82            [24] 9800 	mov	dpl,r4
      00336E 8E 83            [24] 9801 	mov	dph,r6
      003370 E0               [24] 9802 	movx	a,@dptr
      003371 FC               [12] 9803 	mov	r4,a
                                   9804 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   9805 ;	assignBit
      003372 D2 B5            [12] 9806 	setb	_P3_5
                                   9807 ;	.\ecen4350_lcd_v4.c:2236: if(value == ramRead8(d)){
      003374 78r14            [12] 9808 	mov	r0,#_find_value_65536_652
      003376 E6               [12] 9809 	mov	a,@r0
      003377 B5 04 5D         [24] 9810 	cjne	a,ar4,00212$
                                   9811 ;	.\ecen4350_lcd_v4.c:2237: noneFound = 0;
      00337A 78r16            [12] 9812 	mov	r0,#_find_noneFound_65536_652
      00337C 76 00            [12] 9813 	mov	@r0,#0x00
                                   9814 ;	.\ecen4350_lcd_v4.c:2239: if (page == 0) {		
      00337E EB               [12] 9815 	mov	a,r3
      00337F 70 34            [24] 9816 	jnz	00128$
                                   9817 ;	.\ecen4350_lcd_v4.c:2240: setColorWhite();
      003381 C0 03            [24] 9818 	push	ar3
      003383 12r15rD8         [24] 9819 	lcall	_setColorWhite
                                   9820 ;	.\ecen4350_lcd_v4.c:2241: setCursor(0, 120);
      003386 75*00 78         [24] 9821 	mov	_setCursor_PARM_2,#0x78
      003389 75*01 00         [24] 9822 	mov	(_setCursor_PARM_2 + 1),#0x00
      00338C 90 00 00         [24] 9823 	mov	dptr,#0x0000
      00338F 12r04rAA         [24] 9824 	lcall	_setCursor
                                   9825 ;	.\ecen4350_lcd_v4.c:2242: LCD_string_write(" Found at Location:\n");
      003392 90r0ArC8         [24] 9826 	mov	dptr,#___str_106
      003395 75 F0 80         [24] 9827 	mov	b,#0x80
      003398 12r0FrC4         [24] 9828 	lcall	_LCD_string_write
                                   9829 ;	.\ecen4350_lcd_v4.c:2243: setColorDefault();
      00339B 12r15r88         [24] 9830 	lcall	_setColorDefault
                                   9831 ;	.\ecen4350_lcd_v4.c:2244: LCD_string_write(" 0x");
      00339E 90r07r4E         [24] 9832 	mov	dptr,#___str_46
      0033A1 75 F0 80         [24] 9833 	mov	b,#0x80
      0033A4 12r0FrC4         [24] 9834 	lcall	_LCD_string_write
                                   9835 ;	.\ecen4350_lcd_v4.c:2245: print16Hex(i);
      0033A7 85*59 82         [24] 9836 	mov	dpl,_find_i_262144_665
      0033AA 85*5A 83         [24] 9837 	mov	dph,(_find_i_262144_665 + 1)
      0033AD 12r14rAC         [24] 9838 	lcall	_print16Hex
      0033B0 D0 03            [24] 9839 	pop	ar3
                                   9840 ;	.\ecen4350_lcd_v4.c:2246: page++;
      0033B2 0B               [12] 9841 	inc	r3
      0033B3 80 22            [24] 9842 	sjmp	00212$
      0033B5                       9843 00128$:
                                   9844 ;	.\ecen4350_lcd_v4.c:2248: setCursor(0, 120);
      0033B5 75*00 78         [24] 9845 	mov	_setCursor_PARM_2,#0x78
      0033B8 75*01 00         [24] 9846 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033BB 90 00 00         [24] 9847 	mov	dptr,#0x0000
      0033BE C0 03            [24] 9848 	push	ar3
      0033C0 12r04rAA         [24] 9849 	lcall	_setCursor
                                   9850 ;	.\ecen4350_lcd_v4.c:2249: LCD_string_write("\n 0x");
      0033C3 90r0ArDD         [24] 9851 	mov	dptr,#___str_107
      0033C6 75 F0 80         [24] 9852 	mov	b,#0x80
      0033C9 12r0FrC4         [24] 9853 	lcall	_LCD_string_write
                                   9854 ;	.\ecen4350_lcd_v4.c:2250: print16Hex(i);
      0033CC 85*59 82         [24] 9855 	mov	dpl,_find_i_262144_665
      0033CF 85*5A 83         [24] 9856 	mov	dph,(_find_i_262144_665 + 1)
      0033D2 12r14rAC         [24] 9857 	lcall	_print16Hex
      0033D5 D0 03            [24] 9858 	pop	ar3
      0033D7                       9859 00212$:
                                   9860 ;	.\ecen4350_lcd_v4.c:2234: for(unsigned int i = 0; i < blockSize; i++) {
      0033D7 05*59            [12] 9861 	inc	_find_i_262144_665
      0033D9 E4               [12] 9862 	clr	a
      0033DA B5*59 02         [24] 9863 	cjne	a,_find_i_262144_665,00562$
      0033DD 05*5A            [12] 9864 	inc	(_find_i_262144_665 + 1)
      0033DF                       9865 00562$:
      0033DF 02r33r4D         [24] 9866 	ljmp	00211$
      0033E2                       9867 00271$:
      0033E2 8B 05            [24] 9868 	mov	ar5,r3
                                   9869 ;	.\ecen4350_lcd_v4.c:2254: exit = 0;
      0033E4 78r17            [12] 9870 	mov	r0,#_find_exit_65536_652
      0033E6 76 00            [12] 9871 	mov	@r0,#0x00
      0033E8 02r38r53         [24] 9872 	ljmp	00197$
      0033EB                       9873 00196$:
                                   9874 ;	.\ecen4350_lcd_v4.c:2256: setCursor(0, 60);
      0033EB 75*00 3C         [24] 9875 	mov	_setCursor_PARM_2,#0x3c
      0033EE 75*01 00         [24] 9876 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033F1 90 00 00         [24] 9877 	mov	dptr,#0x0000
      0033F4 C0 05            [24] 9878 	push	ar5
      0033F6 12r04rAA         [24] 9879 	lcall	_setCursor
                                   9880 ;	.\ecen4350_lcd_v4.c:2257: setColorYellow();
      0033F9 12r15rEE         [24] 9881 	lcall	_setColorYellow
                                   9882 ;	.\ecen4350_lcd_v4.c:2258: LCD_string_write(" [Interactive]\n");
      0033FC 90r0ArE2         [24] 9883 	mov	dptr,#___str_108
      0033FF 75 F0 80         [24] 9884 	mov	b,#0x80
      003402 12r0FrC4         [24] 9885 	lcall	_LCD_string_write
                                   9886 ;	.\ecen4350_lcd_v4.c:2259: setColorWhite();
      003405 12r15rD8         [24] 9887 	lcall	_setColorWhite
                                   9888 ;	.\ecen4350_lcd_v4.c:2260: LCD_string_write(" Search Value:\n ");
      003408 90r0ArB7         [24] 9889 	mov	dptr,#___str_105
      00340B 75 F0 80         [24] 9890 	mov	b,#0x80
      00340E 12r0FrC4         [24] 9891 	lcall	_LCD_string_write
                                   9892 ;	.\ecen4350_lcd_v4.c:2261: setColorDefault();
      003411 12r15r88         [24] 9893 	lcall	_setColorDefault
                                   9894 ;	.\ecen4350_lcd_v4.c:2262: print8Hex(value);
      003414 78r14            [12] 9895 	mov	r0,#_find_value_65536_652
      003416 86 82            [24] 9896 	mov	dpl,@r0
      003418 12r14r95         [24] 9897 	lcall	_print8Hex
      00341B D0 05            [24] 9898 	pop	ar5
                                   9899 ;	.\ecen4350_lcd_v4.c:2265: for (unsigned int i = 0; i < blockSize; i++) {
      00341D E4               [12] 9900 	clr	a
      00341E F5*5C            [12] 9901 	mov	_find_sloc1_1_0,a
      003420 F5*5D            [12] 9902 	mov	(_find_sloc1_1_0 + 1),a
      003422                       9903 00214$:
      003422 78r13            [12] 9904 	mov	r0,#_find_blockSize_65536_652
      003424 86 02            [24] 9905 	mov	ar2,@r0
      003426 7B 00            [12] 9906 	mov	r3,#0x00
      003428 C3               [12] 9907 	clr	c
      003429 E5*5C            [12] 9908 	mov	a,_find_sloc1_1_0
      00342B 9A               [12] 9909 	subb	a,r2
      00342C E5*5D            [12] 9910 	mov	a,(_find_sloc1_1_0 + 1)
      00342E 9B               [12] 9911 	subb	a,r3
      00342F 40 03            [24] 9912 	jc	00563$
      003431 02r38r53         [24] 9913 	ljmp	00197$
      003434                       9914 00563$:
                                   9915 ;	.\ecen4350_lcd_v4.c:2266: d = (unsigned char __xdata*)(i+address);
      003434 78r11            [12] 9916 	mov	r0,#_find_address_65536_652
      003436 E6               [12] 9917 	mov	a,@r0
      003437 25*5C            [12] 9918 	add	a,_find_sloc1_1_0
      003439 FA               [12] 9919 	mov	r2,a
      00343A 08               [12] 9920 	inc	r0
      00343B E6               [12] 9921 	mov	a,@r0
      00343C 35*5D            [12] 9922 	addc	a,(_find_sloc1_1_0 + 1)
      00343E FB               [12] 9923 	mov	r3,a
      00343F 8A 82            [24] 9924 	mov	dpl,r2
      003441 8B 83            [24] 9925 	mov	dph,r3
                                   9926 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   9927 ;	assignBit
      003443 C2 B5            [12] 9928 	clr	_P3_5
                                   9929 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003445 E0               [24] 9930 	movx	a,@dptr
      003446 FB               [12] 9931 	mov	r3,a
                                   9932 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   9933 ;	assignBit
      003447 D2 B5            [12] 9934 	setb	_P3_5
                                   9935 ;	.\ecen4350_lcd_v4.c:2267: if(value == ramRead8(d)){
      003449 78r14            [12] 9936 	mov	r0,#_find_value_65536_652
      00344B E6               [12] 9937 	mov	a,@r0
      00344C B5 03 02         [24] 9938 	cjne	a,ar3,00564$
      00344F 80 03            [24] 9939 	sjmp	00565$
      003451                       9940 00564$:
      003451 02r38r48         [24] 9941 	ljmp	00215$
      003454                       9942 00565$:
                                   9943 ;	.\ecen4350_lcd_v4.c:2268: noneFound = 0;		// toggle flag
      003454 78r16            [12] 9944 	mov	r0,#_find_noneFound_65536_652
      003456 76 00            [12] 9945 	mov	@r0,#0x00
                                   9946 ;	.\ecen4350_lcd_v4.c:2269: setCursor(0, 120);
      003458 75*00 78         [24] 9947 	mov	_setCursor_PARM_2,#0x78
      00345B 75*01 00         [24] 9948 	mov	(_setCursor_PARM_2 + 1),#0x00
      00345E 90 00 00         [24] 9949 	mov	dptr,#0x0000
      003461 C0 05            [24] 9950 	push	ar5
      003463 12r04rAA         [24] 9951 	lcall	_setCursor
                                   9952 ;	.\ecen4350_lcd_v4.c:2270: setColorWhite();
      003466 12r15rD8         [24] 9953 	lcall	_setColorWhite
                                   9954 ;	.\ecen4350_lcd_v4.c:2271: LCD_string_write(" Found at Location \n");
      003469 90r0ArF2         [24] 9955 	mov	dptr,#___str_109
      00346C 75 F0 80         [24] 9956 	mov	b,#0x80
      00346F 12r0FrC4         [24] 9957 	lcall	_LCD_string_write
                                   9958 ;	.\ecen4350_lcd_v4.c:2272: setColorDefault();
      003472 12r15r88         [24] 9959 	lcall	_setColorDefault
                                   9960 ;	.\ecen4350_lcd_v4.c:2273: LCD_string_write(" 0x");
      003475 90r07r4E         [24] 9961 	mov	dptr,#___str_46
      003478 75 F0 80         [24] 9962 	mov	b,#0x80
      00347B 12r0FrC4         [24] 9963 	lcall	_LCD_string_write
      00347E D0 05            [24] 9964 	pop	ar5
                                   9965 ;	.\ecen4350_lcd_v4.c:2274: print16Hex(page+address);
      003480 8D 02            [24] 9966 	mov	ar2,r5
      003482 7B 00            [12] 9967 	mov	r3,#0x00
      003484 78r11            [12] 9968 	mov	r0,#_find_address_65536_652
      003486 E6               [12] 9969 	mov	a,@r0
      003487 2A               [12] 9970 	add	a,r2
      003488 F5 82            [12] 9971 	mov	dpl,a
      00348A 08               [12] 9972 	inc	r0
      00348B E6               [12] 9973 	mov	a,@r0
      00348C 3B               [12] 9974 	addc	a,r3
      00348D F5 83            [12] 9975 	mov	dph,a
      00348F C0 05            [24] 9976 	push	ar5
      003491 12r14rAC         [24] 9977 	lcall	_print16Hex
                                   9978 ;	.\ecen4350_lcd_v4.c:2275: setCursor(50, 300);
      003494 75*00 2C         [24] 9979 	mov	_setCursor_PARM_2,#0x2c
      003497 75*01 01         [24] 9980 	mov	(_setCursor_PARM_2 + 1),#0x01
      00349A 90 00 32         [24] 9981 	mov	dptr,#0x0032
      00349D 12r04rAA         [24] 9982 	lcall	_setCursor
                                   9983 ;	.\ecen4350_lcd_v4.c:2276: setColorGray();
      0034A0 12r15rB6         [24] 9984 	lcall	_setColorGray
                                   9985 ;	.\ecen4350_lcd_v4.c:2277: LCD_string_write("Page: ");
      0034A3 90r0Br07         [24] 9986 	mov	dptr,#___str_110
      0034A6 75 F0 80         [24] 9987 	mov	b,#0x80
      0034A9 12r0FrC4         [24] 9988 	lcall	_LCD_string_write
                                   9989 ;	.\ecen4350_lcd_v4.c:2278: setColorHighlight2();
      0034AC 12r15rAA         [24] 9990 	lcall	_setColorHighlight2
      0034AF D0 05            [24] 9991 	pop	ar5
                                   9992 ;	.\ecen4350_lcd_v4.c:2279: print8Hex(page+1);
      0034B1 8D 03            [24] 9993 	mov	ar3,r5
      0034B3 EB               [12] 9994 	mov	a,r3
      0034B4 04               [12] 9995 	inc	a
      0034B5 F5 82            [12] 9996 	mov	dpl,a
      0034B7 C0 05            [24] 9997 	push	ar5
      0034B9 12r14r95         [24] 9998 	lcall	_print8Hex
      0034BC D0 05            [24] 9999 	pop	ar5
                                  10000 ;	.\ecen4350_lcd_v4.c:2283: if (i == 0) {					// At beginning, page <0>
      0034BE E5*5C            [12]10001 	mov	a,_find_sloc1_1_0
      0034C0 45*5D            [12]10002 	orl	a,(_find_sloc1_1_0 + 1)
      0034C2 60 03            [24]10003 	jz	00566$
      0034C4 02r35rF3         [24]10004 	ljmp	00190$
      0034C7                      10005 00566$:
                                  10006 ;	.\ecen4350_lcd_v4.c:2284: if (i != blockSize - 1) {	// not at the end yet, no previous page
      0034C7 C0 05            [24]10007 	push	ar5
      0034C9 78r13            [12]10008 	mov	r0,#_find_blockSize_65536_652
      0034CB 86 02            [24]10009 	mov	ar2,@r0
      0034CD 7B 00            [12]10010 	mov	r3,#0x00
      0034CF EA               [12]10011 	mov	a,r2
      0034D0 24 FF            [12]10012 	add	a,#0xff
      0034D2 FD               [12]10013 	mov	r5,a
      0034D3 EB               [12]10014 	mov	a,r3
      0034D4 34 FF            [12]10015 	addc	a,#0xff
      0034D6 FF               [12]10016 	mov	r7,a
      0034D7 ED               [12]10017 	mov	a,r5
      0034D8 B5*5C 09         [24]10018 	cjne	a,_find_sloc1_1_0,00567$
      0034DB EF               [12]10019 	mov	a,r7
      0034DC B5*5D 05         [24]10020 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      0034DF D0 05            [24]10021 	pop	ar5
      0034E1 02r35r74         [24]10022 	ljmp	00148$
      0034E4                      10023 00567$:
                                  10024 ;	.\ecen4350_lcd_v4.c:2285: setCursor(0, 180);
      0034E4 75*00 B4         [24]10025 	mov	_setCursor_PARM_2,#0xb4
      0034E7 75*01 00         [24]10026 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034EA 90 00 00         [24]10027 	mov	dptr,#0x0000
      0034ED 12r04rAA         [24]10028 	lcall	_setCursor
                                  10029 ;	.\ecen4350_lcd_v4.c:2286: setColorWhite();
      0034F0 12r15rD8         [24]10030 	lcall	_setColorWhite
                                  10031 ;	.\ecen4350_lcd_v4.c:2287: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      0034F3 90r0Br0E         [24]10032 	mov	dptr,#___str_111
      0034F6 75 F0 80         [24]10033 	mov	b,#0x80
      0034F9 12r0FrC4         [24]10034 	lcall	_LCD_string_write
      0034FC D0 05            [24]10035 	pop	ar5
                                  10036 ;	.\ecen4350_lcd_v4.c:2288: invalidInput = 1;
      0034FE 7F 01            [12]10037 	mov	r7,#0x01
                                  10038 ;	.\ecen4350_lcd_v4.c:2289: while (invalidInput) {
      003500 8D*5B            [24]10039 	mov	_find_sloc0_1_0,r5
      003502                      10040 00137$:
      003502 EF               [12]10041 	mov	a,r7
      003503 70 03            [24]10042 	jnz	00568$
      003505 02r35rE6         [24]10043 	ljmp	00272$
      003508                      10044 00568$:
                                  10045 ;	.\ecen4350_lcd_v4.c:2290: selection = keyDetect();
      003508 C0 07            [24]10046 	push	ar7
      00350A 12r10rE2         [24]10047 	lcall	_keyDetect
      00350D AF 82            [24]10048 	mov	r7,dpl
      00350F 78r00            [12]10049 	mov	r0,#_selection
      003511 A6 07            [24]10050 	mov	@r0,ar7
                                  10051 ;	.\ecen4350_lcd_v4.c:2291: if(selection == '1'){
      003513 BF 31 02         [24]10052 	cjne	r7,#0x31,00569$
      003516 80 04            [24]10053 	sjmp	00570$
      003518                      10054 00569$:
      003518 D0 07            [24]10055 	pop	ar7
      00351A 80 27            [24]10056 	sjmp	00134$
      00351C                      10057 00570$:
      00351C D0 07            [24]10058 	pop	ar7
                                  10059 ;	.\ecen4350_lcd_v4.c:2292: setCursor(0, 180);
      00351E 75*00 B4         [24]10060 	mov	_setCursor_PARM_2,#0xb4
      003521 75*01 00         [24]10061 	mov	(_setCursor_PARM_2 + 1),#0x00
      003524 90 00 00         [24]10062 	mov	dptr,#0x0000
      003527 12r04rAA         [24]10063 	lcall	_setCursor
                                  10064 ;	.\ecen4350_lcd_v4.c:2293: LCD_string_write(" ");
      00352A 90r06r54         [24]10065 	mov	dptr,#___str_30
      00352D 75 F0 80         [24]10066 	mov	b,#0x80
      003530 12r0FrC4         [24]10067 	lcall	_LCD_string_write
                                  10068 ;	.\ecen4350_lcd_v4.c:2294: setColorHighlight2();
      003533 12r15rAA         [24]10069 	lcall	_setColorHighlight2
                                  10070 ;	.\ecen4350_lcd_v4.c:2295: LCD_string_write("<1> Next");
      003536 90r0Br31         [24]10071 	mov	dptr,#___str_112
      003539 75 F0 80         [24]10072 	mov	b,#0x80
      00353C 12r0FrC4         [24]10073 	lcall	_LCD_string_write
                                  10074 ;	.\ecen4350_lcd_v4.c:2296: invalidInput = 0;
      00353F 7F 00            [12]10075 	mov	r7,#0x00
                                  10076 ;	.\ecen4350_lcd_v4.c:2297: page++;
      003541 05*5B            [12]10077 	inc	_find_sloc0_1_0
      003543                      10078 00134$:
                                  10079 ;	.\ecen4350_lcd_v4.c:2298: } if(selection == '0') {
      003543 78r00            [12]10080 	mov	r0,#_selection
      003545 B6 30 BA         [24]10081 	cjne	@r0,#0x30,00137$
                                  10082 ;	.\ecen4350_lcd_v4.c:2299: setColorDefault();
      003548 12r15r88         [24]10083 	lcall	_setColorDefault
                                  10084 ;	.\ecen4350_lcd_v4.c:2300: setCursor(0, 180);
      00354B 75*00 B4         [24]10085 	mov	_setCursor_PARM_2,#0xb4
      00354E 75*01 00         [24]10086 	mov	(_setCursor_PARM_2 + 1),#0x00
      003551 90 00 00         [24]10087 	mov	dptr,#0x0000
      003554 12r04rAA         [24]10088 	lcall	_setCursor
                                  10089 ;	.\ecen4350_lcd_v4.c:2301: LCD_string_write("\n ");
      003557 90r08r5F         [24]10090 	mov	dptr,#___str_67
      00355A 75 F0 80         [24]10091 	mov	b,#0x80
      00355D 12r0FrC4         [24]10092 	lcall	_LCD_string_write
                                  10093 ;	.\ecen4350_lcd_v4.c:2302: setColorHighlight2();
      003560 12r15rAA         [24]10094 	lcall	_setColorHighlight2
                                  10095 ;	.\ecen4350_lcd_v4.c:2303: LCD_string_write("<0> Exit");
      003563 90r09r1A         [24]10096 	mov	dptr,#___str_78
      003566 75 F0 80         [24]10097 	mov	b,#0x80
      003569 12r0FrC4         [24]10098 	lcall	_LCD_string_write
                                  10099 ;	.\ecen4350_lcd_v4.c:2304: exit = 0;		// set exit flag
      00356C 78r17            [12]10100 	mov	r0,#_find_exit_65536_652
      00356E 76 00            [12]10101 	mov	@r0,#0x00
                                  10102 ;	.\ecen4350_lcd_v4.c:2305: invalidInput = 0;
      003570 7F 00            [12]10103 	mov	r7,#0x00
      003572 80 8E            [24]10104 	sjmp	00137$
      003574                      10105 00148$:
                                  10106 ;	.\ecen4350_lcd_v4.c:2308: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      003574 1A               [12]10107 	dec	r2
      003575 BA FF 01         [24]10108 	cjne	r2,#0xff,00573$
      003578 1B               [12]10109 	dec	r3
      003579                      10110 00573$:
      003579 EA               [12]10111 	mov	a,r2
      00357A B5*5C 6B         [24]10112 	cjne	a,_find_sloc1_1_0,00149$
      00357D EB               [12]10113 	mov	a,r3
      00357E B5*5D 67         [24]10114 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10115 ;	.\ecen4350_lcd_v4.c:2309: setCursor(0, 180);
      003581 75*00 B4         [24]10116 	mov	_setCursor_PARM_2,#0xb4
      003584 75*01 00         [24]10117 	mov	(_setCursor_PARM_2 + 1),#0x00
      003587 90 00 00         [24]10118 	mov	dptr,#0x0000
      00358A C0 05            [24]10119 	push	ar5
      00358C 12r04rAA         [24]10120 	lcall	_setCursor
                                  10121 ;	.\ecen4350_lcd_v4.c:2310: setColorWhite();
      00358F 12r15rD8         [24]10122 	lcall	_setColorWhite
                                  10123 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write("          \n <0> Exit\n              ");
      003592 90r0Br3A         [24]10124 	mov	dptr,#___str_113
      003595 75 F0 80         [24]10125 	mov	b,#0x80
      003598 12r0FrC4         [24]10126 	lcall	_LCD_string_write
      00359B D0 05            [24]10127 	pop	ar5
                                  10128 ;	.\ecen4350_lcd_v4.c:2312: invalidInput = 1;
      00359D 7F 01            [12]10129 	mov	r7,#0x01
                                  10130 ;	.\ecen4350_lcd_v4.c:2313: while (invalidInput) {
      00359F                      10131 00142$:
      00359F EF               [12]10132 	mov	a,r7
      0035A0 60 46            [24]10133 	jz	00149$
                                  10134 ;	.\ecen4350_lcd_v4.c:2314: selection = keyDetect();
      0035A2 C0 07            [24]10135 	push	ar7
      0035A4 C0 05            [24]10136 	push	ar5
      0035A6 12r10rE2         [24]10137 	lcall	_keyDetect
      0035A9 AB 82            [24]10138 	mov	r3,dpl
      0035AB D0 05            [24]10139 	pop	ar5
      0035AD D0 07            [24]10140 	pop	ar7
      0035AF 78r00            [12]10141 	mov	r0,#_selection
      0035B1 A6 03            [24]10142 	mov	@r0,ar3
                                  10143 ;	.\ecen4350_lcd_v4.c:2315: if(selection == '0') {
      0035B3 BB 30 E9         [24]10144 	cjne	r3,#0x30,00142$
                                  10145 ;	.\ecen4350_lcd_v4.c:2316: setColorDefault();
      0035B6 C0 05            [24]10146 	push	ar5
      0035B8 12r15r88         [24]10147 	lcall	_setColorDefault
                                  10148 ;	.\ecen4350_lcd_v4.c:2317: setCursor(0, 180);
      0035BB 75*00 B4         [24]10149 	mov	_setCursor_PARM_2,#0xb4
      0035BE 75*01 00         [24]10150 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035C1 90 00 00         [24]10151 	mov	dptr,#0x0000
      0035C4 12r04rAA         [24]10152 	lcall	_setCursor
                                  10153 ;	.\ecen4350_lcd_v4.c:2318: LCD_string_write("\n ");
      0035C7 90r08r5F         [24]10154 	mov	dptr,#___str_67
      0035CA 75 F0 80         [24]10155 	mov	b,#0x80
      0035CD 12r0FrC4         [24]10156 	lcall	_LCD_string_write
                                  10157 ;	.\ecen4350_lcd_v4.c:2319: setColorHighlight2();
      0035D0 12r15rAA         [24]10158 	lcall	_setColorHighlight2
                                  10159 ;	.\ecen4350_lcd_v4.c:2320: LCD_string_write("<0> Exit");
      0035D3 90r09r1A         [24]10160 	mov	dptr,#___str_78
      0035D6 75 F0 80         [24]10161 	mov	b,#0x80
      0035D9 12r0FrC4         [24]10162 	lcall	_LCD_string_write
      0035DC D0 05            [24]10163 	pop	ar5
                                  10164 ;	.\ecen4350_lcd_v4.c:2321: exit = 0;		// set exit flag
      0035DE 78r17            [12]10165 	mov	r0,#_find_exit_65536_652
      0035E0 76 00            [12]10166 	mov	@r0,#0x00
                                  10167 ;	.\ecen4350_lcd_v4.c:2322: invalidInput = 0;
      0035E2 7F 00            [12]10168 	mov	r7,#0x00
      0035E4 80 B9            [24]10169 	sjmp	00142$
      0035E6                      10170 00272$:
      0035E6 AD*5B            [24]10171 	mov	r5,_find_sloc0_1_0
      0035E8                      10172 00149$:
                                  10173 ;	.\ecen4350_lcd_v4.c:2326: if (exit == 0) {	// check exit flag
      0035E8 78r17            [12]10174 	mov	r0,#_find_exit_65536_652
      0035EA E6               [12]10175 	mov	a,@r0
      0035EB 60 03            [24]10176 	jz	00579$
      0035ED 02r38r48         [24]10177 	ljmp	00215$
      0035F0                      10178 00579$:
                                  10179 ;	.\ecen4350_lcd_v4.c:2327: break;			// break out of for loop iteration
      0035F0 02r38r53         [24]10180 	ljmp	00197$
      0035F3                      10181 00190$:
                                  10182 ;	.\ecen4350_lcd_v4.c:2332: else if (i == blockSize - 1) {		// At Page End 
      0035F3 C0 05            [24]10183 	push	ar5
      0035F5 78r13            [12]10184 	mov	r0,#_find_blockSize_65536_652
      0035F7 86 03            [24]10185 	mov	ar3,@r0
      0035F9 7F 00            [12]10186 	mov	r7,#0x00
      0035FB EB               [12]10187 	mov	a,r3
      0035FC 24 FF            [12]10188 	add	a,#0xff
      0035FE FA               [12]10189 	mov	r2,a
      0035FF EF               [12]10190 	mov	a,r7
      003600 34 FF            [12]10191 	addc	a,#0xff
      003602 FD               [12]10192 	mov	r5,a
      003603 EA               [12]10193 	mov	a,r2
      003604 B5*5C 06         [24]10194 	cjne	a,_find_sloc1_1_0,00580$
      003607 ED               [12]10195 	mov	a,r5
      003608 B5*5D 02         [24]10196 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      00360B 80 05            [24]10197 	sjmp	00581$
      00360D                      10198 00580$:
      00360D D0 05            [24]10199 	pop	ar5
      00360F 02r37r3F         [24]10200 	ljmp	00187$
      003612                      10201 00581$:
      003612 D0 05            [24]10202 	pop	ar5
                                  10203 ;	.\ecen4350_lcd_v4.c:2333: if (i != 0) {				// not at beginning, no next page
      003614 E5*5C            [12]10204 	mov	a,_find_sloc1_1_0
      003616 45*5D            [12]10205 	orl	a,(_find_sloc1_1_0 + 1)
      003618 70 03            [24]10206 	jnz	00582$
      00361A 02r36rC8         [24]10207 	ljmp	00167$
      00361D                      10208 00582$:
                                  10209 ;	.\ecen4350_lcd_v4.c:2334: setCursor(0, 180);
      00361D 75*00 B4         [24]10210 	mov	_setCursor_PARM_2,#0xb4
      003620 75*01 00         [24]10211 	mov	(_setCursor_PARM_2 + 1),#0x00
      003623 90 00 00         [24]10212 	mov	dptr,#0x0000
      003626 C0 05            [24]10213 	push	ar5
      003628 12r04rAA         [24]10214 	lcall	_setCursor
                                  10215 ;	.\ecen4350_lcd_v4.c:2335: setColorWhite();
      00362B 12r15rD8         [24]10216 	lcall	_setColorWhite
                                  10217 ;	.\ecen4350_lcd_v4.c:2336: LCD_string_write("          \n <0> Exit\n <2> Previous");
      00362E 90r0Br5E         [24]10218 	mov	dptr,#___str_114
      003631 75 F0 80         [24]10219 	mov	b,#0x80
      003634 12r0FrC4         [24]10220 	lcall	_LCD_string_write
      003637 D0 05            [24]10221 	pop	ar5
                                  10222 ;	.\ecen4350_lcd_v4.c:2337: invalidInput = 1;
      003639 7F 01            [12]10223 	mov	r7,#0x01
                                  10224 ;	.\ecen4350_lcd_v4.c:2338: while (invalidInput) {
      00363B 8D*5B            [24]10225 	mov	_find_sloc0_1_0,r5
      00363D                      10226 00156$:
      00363D EF               [12]10227 	mov	a,r7
      00363E 70 03            [24]10228 	jnz	00583$
      003640 02r37r32         [24]10229 	ljmp	00273$
      003643                      10230 00583$:
                                  10231 ;	.\ecen4350_lcd_v4.c:2339: selection = keyDetect();
      003643 C0 07            [24]10232 	push	ar7
      003645 C0 07            [24]10233 	push	ar7
      003647 12r10rE2         [24]10234 	lcall	_keyDetect
      00364A AA 82            [24]10235 	mov	r2,dpl
      00364C D0 07            [24]10236 	pop	ar7
      00364E 78r00            [12]10237 	mov	r0,#_selection
      003650 A6 02            [24]10238 	mov	@r0,ar2
                                  10239 ;	.\ecen4350_lcd_v4.c:2340: if(selection == '0'){
      003652 BA 30 02         [24]10240 	cjne	r2,#0x30,00584$
      003655 80 04            [24]10241 	sjmp	00585$
      003657                      10242 00584$:
      003657 D0 07            [24]10243 	pop	ar7
      003659 80 29            [24]10244 	sjmp	00153$
      00365B                      10245 00585$:
      00365B D0 07            [24]10246 	pop	ar7
                                  10247 ;	.\ecen4350_lcd_v4.c:2341: setCursor(0, 180);
      00365D 75*00 B4         [24]10248 	mov	_setCursor_PARM_2,#0xb4
      003660 75*01 00         [24]10249 	mov	(_setCursor_PARM_2 + 1),#0x00
      003663 90 00 00         [24]10250 	mov	dptr,#0x0000
      003666 12r04rAA         [24]10251 	lcall	_setCursor
                                  10252 ;	.\ecen4350_lcd_v4.c:2342: LCD_string_write("\n ");
      003669 90r08r5F         [24]10253 	mov	dptr,#___str_67
      00366C 75 F0 80         [24]10254 	mov	b,#0x80
      00366F 12r0FrC4         [24]10255 	lcall	_LCD_string_write
                                  10256 ;	.\ecen4350_lcd_v4.c:2343: setColorHighlight2();
      003672 12r15rAA         [24]10257 	lcall	_setColorHighlight2
                                  10258 ;	.\ecen4350_lcd_v4.c:2344: LCD_string_write("<0> Exit\n");
      003675 90r07r94         [24]10259 	mov	dptr,#___str_54
      003678 75 F0 80         [24]10260 	mov	b,#0x80
      00367B 12r0FrC4         [24]10261 	lcall	_LCD_string_write
                                  10262 ;	.\ecen4350_lcd_v4.c:2345: invalidInput = 0;
      00367E 7F 00            [12]10263 	mov	r7,#0x00
                                  10264 ;	.\ecen4350_lcd_v4.c:2346: exit = 0;
      003680 78r17            [12]10265 	mov	r0,#_find_exit_65536_652
      003682 76 00            [12]10266 	mov	@r0,#0x00
      003684                      10267 00153$:
                                  10268 ;	.\ecen4350_lcd_v4.c:2347: } if (selection == '2') {
      003684 78r00            [12]10269 	mov	r0,#_selection
      003686 B6 32 B4         [24]10270 	cjne	@r0,#0x32,00156$
                                  10271 ;	.\ecen4350_lcd_v4.c:2348: setCursor(0, 180);
      003689 75*00 B4         [24]10272 	mov	_setCursor_PARM_2,#0xb4
      00368C 75*01 00         [24]10273 	mov	(_setCursor_PARM_2 + 1),#0x00
      00368F 90 00 00         [24]10274 	mov	dptr,#0x0000
      003692 12r04rAA         [24]10275 	lcall	_setCursor
                                  10276 ;	.\ecen4350_lcd_v4.c:2349: setColorWhite();
      003695 12r15rD8         [24]10277 	lcall	_setColorWhite
                                  10278 ;	.\ecen4350_lcd_v4.c:2350: LCD_string_write("\n\n ");
      003698 90r0Br81         [24]10279 	mov	dptr,#___str_115
      00369B 75 F0 80         [24]10280 	mov	b,#0x80
      00369E 12r0FrC4         [24]10281 	lcall	_LCD_string_write
                                  10282 ;	.\ecen4350_lcd_v4.c:2351: setColorHighlight2();
      0036A1 12r15rAA         [24]10283 	lcall	_setColorHighlight2
                                  10284 ;	.\ecen4350_lcd_v4.c:2352: LCD_string_write("<2> Previous");
      0036A4 90r0Br85         [24]10285 	mov	dptr,#___str_116
      0036A7 75 F0 80         [24]10286 	mov	b,#0x80
      0036AA 12r0FrC4         [24]10287 	lcall	_LCD_string_write
                                  10288 ;	.\ecen4350_lcd_v4.c:2353: invalidInput = 0;
      0036AD 7F 00            [12]10289 	mov	r7,#0x00
                                  10290 ;	.\ecen4350_lcd_v4.c:2354: i--;			// two decrements plus next loop increment is equal to one decrement
      0036AF E5*5C            [12]10291 	mov	a,_find_sloc1_1_0
      0036B1 24 FF            [12]10292 	add	a,#0xff
      0036B3 FA               [12]10293 	mov	r2,a
      0036B4 E5*5D            [12]10294 	mov	a,(_find_sloc1_1_0 + 1)
      0036B6 34 FF            [12]10295 	addc	a,#0xff
      0036B8 FE               [12]10296 	mov	r6,a
                                  10297 ;	.\ecen4350_lcd_v4.c:2355: i--;
      0036B9 EA               [12]10298 	mov	a,r2
      0036BA 24 FF            [12]10299 	add	a,#0xff
      0036BC F5*5C            [12]10300 	mov	_find_sloc1_1_0,a
      0036BE EE               [12]10301 	mov	a,r6
      0036BF 34 FF            [12]10302 	addc	a,#0xff
      0036C1 F5*5D            [12]10303 	mov	(_find_sloc1_1_0 + 1),a
                                  10304 ;	.\ecen4350_lcd_v4.c:2356: page--;			// decrement to previous page
      0036C3 15*5B            [12]10305 	dec	_find_sloc0_1_0
      0036C5 02r36r3D         [24]10306 	ljmp	00156$
      0036C8                      10307 00167$:
                                  10308 ;	.\ecen4350_lcd_v4.c:2360: else if (i == 0){				// end at beginning, no next or previous
      0036C8 E5*5C            [12]10309 	mov	a,_find_sloc1_1_0
      0036CA 45*5D            [12]10310 	orl	a,(_find_sloc1_1_0 + 1)
                                  10311 ;	.\ecen4350_lcd_v4.c:2361: setCursor(0, 180);
      0036CC 70 66            [24]10312 	jnz	00168$
      0036CE 75*00 B4         [24]10313 	mov	_setCursor_PARM_2,#0xb4
      0036D1 F5*01            [12]10314 	mov	(_setCursor_PARM_2 + 1),a
      0036D3 90 00 00         [24]10315 	mov	dptr,#0x0000
      0036D6 C0 05            [24]10316 	push	ar5
      0036D8 12r04rAA         [24]10317 	lcall	_setCursor
                                  10318 ;	.\ecen4350_lcd_v4.c:2362: setColorWhite();
      0036DB 12r15rD8         [24]10319 	lcall	_setColorWhite
                                  10320 ;	.\ecen4350_lcd_v4.c:2363: LCD_string_write("          \n <0> Exit\n              ");
      0036DE 90r0Br3A         [24]10321 	mov	dptr,#___str_113
      0036E1 75 F0 80         [24]10322 	mov	b,#0x80
      0036E4 12r0FrC4         [24]10323 	lcall	_LCD_string_write
      0036E7 D0 05            [24]10324 	pop	ar5
                                  10325 ;	.\ecen4350_lcd_v4.c:2364: invalidInput = 1;
      0036E9 7E 01            [12]10326 	mov	r6,#0x01
                                  10327 ;	.\ecen4350_lcd_v4.c:2365: while (invalidInput) {
      0036EB                      10328 00161$:
      0036EB EE               [12]10329 	mov	a,r6
      0036EC 60 46            [24]10330 	jz	00168$
                                  10331 ;	.\ecen4350_lcd_v4.c:2366: selection = keyDetect();
      0036EE C0 06            [24]10332 	push	ar6
      0036F0 C0 05            [24]10333 	push	ar5
      0036F2 12r10rE2         [24]10334 	lcall	_keyDetect
      0036F5 AC 82            [24]10335 	mov	r4,dpl
      0036F7 D0 05            [24]10336 	pop	ar5
      0036F9 D0 06            [24]10337 	pop	ar6
      0036FB 78r00            [12]10338 	mov	r0,#_selection
      0036FD A6 04            [24]10339 	mov	@r0,ar4
                                  10340 ;	.\ecen4350_lcd_v4.c:2367: if(selection == '0') {
      0036FF BC 30 E9         [24]10341 	cjne	r4,#0x30,00161$
                                  10342 ;	.\ecen4350_lcd_v4.c:2368: setColorDefault();
      003702 C0 05            [24]10343 	push	ar5
      003704 12r15r88         [24]10344 	lcall	_setColorDefault
                                  10345 ;	.\ecen4350_lcd_v4.c:2369: setCursor(0, 180);
      003707 75*00 B4         [24]10346 	mov	_setCursor_PARM_2,#0xb4
      00370A 75*01 00         [24]10347 	mov	(_setCursor_PARM_2 + 1),#0x00
      00370D 90 00 00         [24]10348 	mov	dptr,#0x0000
      003710 12r04rAA         [24]10349 	lcall	_setCursor
                                  10350 ;	.\ecen4350_lcd_v4.c:2370: LCD_string_write("\n ");
      003713 90r08r5F         [24]10351 	mov	dptr,#___str_67
      003716 75 F0 80         [24]10352 	mov	b,#0x80
      003719 12r0FrC4         [24]10353 	lcall	_LCD_string_write
                                  10354 ;	.\ecen4350_lcd_v4.c:2371: setColorHighlight2();
      00371C 12r15rAA         [24]10355 	lcall	_setColorHighlight2
                                  10356 ;	.\ecen4350_lcd_v4.c:2372: LCD_string_write("<0> Exit");
      00371F 90r09r1A         [24]10357 	mov	dptr,#___str_78
      003722 75 F0 80         [24]10358 	mov	b,#0x80
      003725 12r0FrC4         [24]10359 	lcall	_LCD_string_write
      003728 D0 05            [24]10360 	pop	ar5
                                  10361 ;	.\ecen4350_lcd_v4.c:2373: exit = 0;		// set exit flag
      00372A 78r17            [12]10362 	mov	r0,#_find_exit_65536_652
      00372C 76 00            [12]10363 	mov	@r0,#0x00
                                  10364 ;	.\ecen4350_lcd_v4.c:2374: invalidInput = 0;
      00372E 7E 00            [12]10365 	mov	r6,#0x00
      003730 80 B9            [24]10366 	sjmp	00161$
      003732                      10367 00273$:
      003732 AD*5B            [24]10368 	mov	r5,_find_sloc0_1_0
      003734                      10369 00168$:
                                  10370 ;	.\ecen4350_lcd_v4.c:2378: if (exit == 0) {	// check exit flag
      003734 78r17            [12]10371 	mov	r0,#_find_exit_65536_652
      003736 E6               [12]10372 	mov	a,@r0
      003737 60 03            [24]10373 	jz	00592$
      003739 02r38r48         [24]10374 	ljmp	00215$
      00373C                      10375 00592$:
                                  10376 ;	.\ecen4350_lcd_v4.c:2379: break;			// break out of for loop iteration
      00373C 02r38r53         [24]10377 	ljmp	00197$
      00373F                      10378 00187$:
                                  10379 ;	.\ecen4350_lcd_v4.c:2384: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00373F 1B               [12]10380 	dec	r3
      003740 BB FF 01         [24]10381 	cjne	r3,#0xff,00593$
      003743 1F               [12]10382 	dec	r7
      003744                      10383 00593$:
      003744 EB               [12]10384 	mov	a,r3
      003745 B5*5C 07         [24]10385 	cjne	a,_find_sloc1_1_0,00594$
      003748 EF               [12]10386 	mov	a,r7
      003749 B5*5D 03         [24]10387 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      00374C 02r38r48         [24]10388 	ljmp	00215$
      00374F                      10389 00594$:
                                  10390 ;	.\ecen4350_lcd_v4.c:2385: if (i != 0) {
      00374F E5*5C            [12]10391 	mov	a,_find_sloc1_1_0
      003751 45*5D            [12]10392 	orl	a,(_find_sloc1_1_0 + 1)
      003753 70 03            [24]10393 	jnz	00595$
      003755 02r38r43         [24]10394 	ljmp	00181$
      003758                      10395 00595$:
                                  10396 ;	.\ecen4350_lcd_v4.c:2386: setCursor(0, 180);
      003758 75*00 B4         [24]10397 	mov	_setCursor_PARM_2,#0xb4
      00375B 75*01 00         [24]10398 	mov	(_setCursor_PARM_2 + 1),#0x00
      00375E 90 00 00         [24]10399 	mov	dptr,#0x0000
      003761 C0 05            [24]10400 	push	ar5
      003763 12r04rAA         [24]10401 	lcall	_setCursor
                                  10402 ;	.\ecen4350_lcd_v4.c:2387: setColorWhite();
      003766 12r15rD8         [24]10403 	lcall	_setColorWhite
                                  10404 ;	.\ecen4350_lcd_v4.c:2388: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      003769 90r0Br92         [24]10405 	mov	dptr,#___str_117
      00376C 75 F0 80         [24]10406 	mov	b,#0x80
      00376F 12r0FrC4         [24]10407 	lcall	_LCD_string_write
      003772 D0 05            [24]10408 	pop	ar5
                                  10409 ;	.\ecen4350_lcd_v4.c:2389: invalidInput = 1;
      003774 7F 01            [12]10410 	mov	r7,#0x01
                                  10411 ;	.\ecen4350_lcd_v4.c:2390: while (invalidInput) {
      003776                      10412 00177$:
      003776 EF               [12]10413 	mov	a,r7
      003777 70 03            [24]10414 	jnz	00596$
      003779 02r38r43         [24]10415 	ljmp	00181$
      00377C                      10416 00596$:
                                  10417 ;	.\ecen4350_lcd_v4.c:2391: selection = keyDetect();
      00377C C0 07            [24]10418 	push	ar7
      00377E C0 05            [24]10419 	push	ar5
      003780 12r10rE2         [24]10420 	lcall	_keyDetect
      003783 AE 82            [24]10421 	mov	r6,dpl
      003785 D0 05            [24]10422 	pop	ar5
      003787 D0 07            [24]10423 	pop	ar7
      003789 78r00            [12]10424 	mov	r0,#_selection
      00378B A6 06            [24]10425 	mov	@r0,ar6
                                  10426 ;	.\ecen4350_lcd_v4.c:2392: if (selection == '1') {
      00378D BE 31 28         [24]10427 	cjne	r6,#0x31,00172$
                                  10428 ;	.\ecen4350_lcd_v4.c:2393: setCursor(0, 180);
      003790 75*00 B4         [24]10429 	mov	_setCursor_PARM_2,#0xb4
      003793 75*01 00         [24]10430 	mov	(_setCursor_PARM_2 + 1),#0x00
      003796 90 00 00         [24]10431 	mov	dptr,#0x0000
      003799 C0 05            [24]10432 	push	ar5
      00379B 12r04rAA         [24]10433 	lcall	_setCursor
                                  10434 ;	.\ecen4350_lcd_v4.c:2394: LCD_string_write(" ");
      00379E 90r06r54         [24]10435 	mov	dptr,#___str_30
      0037A1 75 F0 80         [24]10436 	mov	b,#0x80
      0037A4 12r0FrC4         [24]10437 	lcall	_LCD_string_write
                                  10438 ;	.\ecen4350_lcd_v4.c:2395: setColorHighlight2();
      0037A7 12r15rAA         [24]10439 	lcall	_setColorHighlight2
                                  10440 ;	.\ecen4350_lcd_v4.c:2396: LCD_string_write("<1> Next");
      0037AA 90r0Br31         [24]10441 	mov	dptr,#___str_112
      0037AD 75 F0 80         [24]10442 	mov	b,#0x80
      0037B0 12r0FrC4         [24]10443 	lcall	_LCD_string_write
      0037B3 D0 05            [24]10444 	pop	ar5
                                  10445 ;	.\ecen4350_lcd_v4.c:2397: invalidInput = 0;
      0037B5 7F 00            [12]10446 	mov	r7,#0x00
                                  10447 ;	.\ecen4350_lcd_v4.c:2398: page++;
      0037B7 0D               [12]10448 	inc	r5
      0037B8                      10449 00172$:
                                  10450 ;	.\ecen4350_lcd_v4.c:2399: } if (selection == '2') {
      0037B8 78r00            [12]10451 	mov	r0,#_selection
      0037BA B6 32 3F         [24]10452 	cjne	@r0,#0x32,00174$
                                  10453 ;	.\ecen4350_lcd_v4.c:2400: setCursor(0, 180);
      0037BD 75*00 B4         [24]10454 	mov	_setCursor_PARM_2,#0xb4
      0037C0 75*01 00         [24]10455 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037C3 90 00 00         [24]10456 	mov	dptr,#0x0000
      0037C6 C0 05            [24]10457 	push	ar5
      0037C8 12r04rAA         [24]10458 	lcall	_setCursor
                                  10459 ;	.\ecen4350_lcd_v4.c:2401: setColorWhite();
      0037CB 12r15rD8         [24]10460 	lcall	_setColorWhite
                                  10461 ;	.\ecen4350_lcd_v4.c:2402: LCD_string_write("\n\n ");
      0037CE 90r0Br81         [24]10462 	mov	dptr,#___str_115
      0037D1 75 F0 80         [24]10463 	mov	b,#0x80
      0037D4 12r0FrC4         [24]10464 	lcall	_LCD_string_write
                                  10465 ;	.\ecen4350_lcd_v4.c:2403: setColorHighlight2();
      0037D7 12r15rAA         [24]10466 	lcall	_setColorHighlight2
                                  10467 ;	.\ecen4350_lcd_v4.c:2404: LCD_string_write("<2> Previous");
      0037DA 90r0Br85         [24]10468 	mov	dptr,#___str_116
      0037DD 75 F0 80         [24]10469 	mov	b,#0x80
      0037E0 12r0FrC4         [24]10470 	lcall	_LCD_string_write
      0037E3 D0 05            [24]10471 	pop	ar5
                                  10472 ;	.\ecen4350_lcd_v4.c:2405: invalidInput = 0;
      0037E5 7F 00            [12]10473 	mov	r7,#0x00
                                  10474 ;	.\ecen4350_lcd_v4.c:2406: i--;
      0037E7 E5*5C            [12]10475 	mov	a,_find_sloc1_1_0
      0037E9 24 FF            [12]10476 	add	a,#0xff
      0037EB FC               [12]10477 	mov	r4,a
      0037EC E5*5D            [12]10478 	mov	a,(_find_sloc1_1_0 + 1)
      0037EE 34 FF            [12]10479 	addc	a,#0xff
      0037F0 FE               [12]10480 	mov	r6,a
                                  10481 ;	.\ecen4350_lcd_v4.c:2407: i--;		// two decrements plus next loop increment is equal to one decrement
      0037F1 EC               [12]10482 	mov	a,r4
      0037F2 24 FF            [12]10483 	add	a,#0xff
      0037F4 F5*5C            [12]10484 	mov	_find_sloc1_1_0,a
      0037F6 EE               [12]10485 	mov	a,r6
      0037F7 34 FF            [12]10486 	addc	a,#0xff
      0037F9 F5*5D            [12]10487 	mov	(_find_sloc1_1_0 + 1),a
                                  10488 ;	.\ecen4350_lcd_v4.c:2408: page--;		// decrement to previous page
      0037FB 1D               [12]10489 	dec	r5
      0037FC                      10490 00174$:
                                  10491 ;	.\ecen4350_lcd_v4.c:2409: } if (selection == '0') {
      0037FC 78r00            [12]10492 	mov	r0,#_selection
      0037FE B6 30 02         [24]10493 	cjne	@r0,#0x30,00601$
      003801 80 03            [24]10494 	sjmp	00602$
      003803                      10495 00601$:
      003803 02r37r76         [24]10496 	ljmp	00177$
      003806                      10497 00602$:
                                  10498 ;	.\ecen4350_lcd_v4.c:2410: setColorWhite();
      003806 C0 05            [24]10499 	push	ar5
      003808 12r15rD8         [24]10500 	lcall	_setColorWhite
                                  10501 ;	.\ecen4350_lcd_v4.c:2411: setCursor(0, 180);
      00380B 75*00 B4         [24]10502 	mov	_setCursor_PARM_2,#0xb4
      00380E 75*01 00         [24]10503 	mov	(_setCursor_PARM_2 + 1),#0x00
      003811 90 00 00         [24]10504 	mov	dptr,#0x0000
      003814 12r04rAA         [24]10505 	lcall	_setCursor
                                  10506 ;	.\ecen4350_lcd_v4.c:2412: LCD_string_write(" <1> Next\n ");
      003817 90r0BrB4         [24]10507 	mov	dptr,#___str_118
      00381A 75 F0 80         [24]10508 	mov	b,#0x80
      00381D 12r0FrC4         [24]10509 	lcall	_LCD_string_write
                                  10510 ;	.\ecen4350_lcd_v4.c:2413: setColorHighlight2();
      003820 12r15rAA         [24]10511 	lcall	_setColorHighlight2
                                  10512 ;	.\ecen4350_lcd_v4.c:2414: LCD_string_write("<0> Exit");
      003823 90r09r1A         [24]10513 	mov	dptr,#___str_78
      003826 75 F0 80         [24]10514 	mov	b,#0x80
      003829 12r0FrC4         [24]10515 	lcall	_LCD_string_write
                                  10516 ;	.\ecen4350_lcd_v4.c:2415: setColorWhite();
      00382C 12r15rD8         [24]10517 	lcall	_setColorWhite
                                  10518 ;	.\ecen4350_lcd_v4.c:2416: LCD_string_write("\n <2> Previous");
      00382F 90r0BrC0         [24]10519 	mov	dptr,#___str_119
      003832 75 F0 80         [24]10520 	mov	b,#0x80
      003835 12r0FrC4         [24]10521 	lcall	_LCD_string_write
      003838 D0 05            [24]10522 	pop	ar5
                                  10523 ;	.\ecen4350_lcd_v4.c:2417: exit = 0;		// set exit flag
      00383A 78r17            [12]10524 	mov	r0,#_find_exit_65536_652
      00383C 76 00            [12]10525 	mov	@r0,#0x00
                                  10526 ;	.\ecen4350_lcd_v4.c:2418: invalidInput = 0;
      00383E 7F 00            [12]10527 	mov	r7,#0x00
      003840 02r37r76         [24]10528 	ljmp	00177$
      003843                      10529 00181$:
                                  10530 ;	.\ecen4350_lcd_v4.c:2422: if (exit == 0) {		// check exit flag
      003843 78r17            [12]10531 	mov	r0,#_find_exit_65536_652
      003845 E6               [12]10532 	mov	a,@r0
      003846 60 0B            [24]10533 	jz	00197$
                                  10534 ;	.\ecen4350_lcd_v4.c:2423: break;			// break out the loop
      003848                      10535 00215$:
                                  10536 ;	.\ecen4350_lcd_v4.c:2265: for (unsigned int i = 0; i < blockSize; i++) {
      003848 05*5C            [12]10537 	inc	_find_sloc1_1_0
      00384A E4               [12]10538 	clr	a
      00384B B5*5C 02         [24]10539 	cjne	a,_find_sloc1_1_0,00604$
      00384E 05*5D            [12]10540 	inc	(_find_sloc1_1_0 + 1)
      003850                      10541 00604$:
      003850 02r34r22         [24]10542 	ljmp	00214$
      003853                      10543 00197$:
                                  10544 ;	.\ecen4350_lcd_v4.c:2429: if(noneFound) {
      003853 78r16            [12]10545 	mov	r0,#_find_noneFound_65536_652
      003855 E6               [12]10546 	mov	a,@r0
      003856 70 03            [24]10547 	jnz	00605$
      003858 02r33r04         [24]10548 	ljmp	00205$
      00385B                      10549 00605$:
                                  10550 ;	.\ecen4350_lcd_v4.c:2430: setColorRed();
      00385B C0 05            [24]10551 	push	ar5
      00385D 12r15rCD         [24]10552 	lcall	_setColorRed
                                  10553 ;	.\ecen4350_lcd_v4.c:2431: setCursor(0, 140);
      003860 75*00 8C         [24]10554 	mov	_setCursor_PARM_2,#0x8c
      003863 75*01 00         [24]10555 	mov	(_setCursor_PARM_2 + 1),#0x00
      003866 90 00 00         [24]10556 	mov	dptr,#0x0000
      003869 12r04rAA         [24]10557 	lcall	_setCursor
                                  10558 ;	.\ecen4350_lcd_v4.c:2432: LCD_string_write(" Value Not Found\n Within Block\n ");
      00386C 90r0BrCF         [24]10559 	mov	dptr,#___str_120
      00386F 75 F0 80         [24]10560 	mov	b,#0x80
      003872 12r0FrC4         [24]10561 	lcall	_LCD_string_write
                                  10562 ;	.\ecen4350_lcd_v4.c:2433: setColorWhite();
      003875 12r15rD8         [24]10563 	lcall	_setColorWhite
                                  10564 ;	.\ecen4350_lcd_v4.c:2434: LCD_string_write("\n <0> Exit");
      003878 90r0BrF0         [24]10565 	mov	dptr,#___str_121
      00387B 75 F0 80         [24]10566 	mov	b,#0x80
      00387E 12r0FrC4         [24]10567 	lcall	_LCD_string_write
      003881 D0 05            [24]10568 	pop	ar5
                                  10569 ;	.\ecen4350_lcd_v4.c:2435: invalidInput = 1;
      003883 7F 01            [12]10570 	mov	r7,#0x01
                                  10571 ;	.\ecen4350_lcd_v4.c:2437: while (invalidInput) {
      003885                      10572 00200$:
      003885 EF               [12]10573 	mov	a,r7
      003886 70 03            [24]10574 	jnz	00606$
      003888 02r33r04         [24]10575 	ljmp	00205$
      00388B                      10576 00606$:
                                  10577 ;	.\ecen4350_lcd_v4.c:2438: selection = keyDetect();
      00388B C0 07            [24]10578 	push	ar7
      00388D C0 05            [24]10579 	push	ar5
      00388F 12r10rE2         [24]10580 	lcall	_keyDetect
      003892 AE 82            [24]10581 	mov	r6,dpl
      003894 D0 05            [24]10582 	pop	ar5
      003896 D0 07            [24]10583 	pop	ar7
      003898 78r00            [12]10584 	mov	r0,#_selection
      00389A A6 06            [24]10585 	mov	@r0,ar6
                                  10586 ;	.\ecen4350_lcd_v4.c:2439: if (selection == '0'){
      00389C BE 30 E6         [24]10587 	cjne	r6,#0x30,00200$
                                  10588 ;	.\ecen4350_lcd_v4.c:2440: setCursor(0, 140);
      00389F 75*00 8C         [24]10589 	mov	_setCursor_PARM_2,#0x8c
      0038A2 75*01 00         [24]10590 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038A5 90 00 00         [24]10591 	mov	dptr,#0x0000
      0038A8 C0 05            [24]10592 	push	ar5
      0038AA 12r04rAA         [24]10593 	lcall	_setCursor
                                  10594 ;	.\ecen4350_lcd_v4.c:2441: LCD_string_write("\n\n\n ");
      0038AD 90r0BrFB         [24]10595 	mov	dptr,#___str_122
      0038B0 75 F0 80         [24]10596 	mov	b,#0x80
      0038B3 12r0FrC4         [24]10597 	lcall	_LCD_string_write
                                  10598 ;	.\ecen4350_lcd_v4.c:2442: setColorHighlight2();
      0038B6 12r15rAA         [24]10599 	lcall	_setColorHighlight2
                                  10600 ;	.\ecen4350_lcd_v4.c:2443: LCD_string_write("<0> Exit");
      0038B9 90r09r1A         [24]10601 	mov	dptr,#___str_78
      0038BC 75 F0 80         [24]10602 	mov	b,#0x80
      0038BF 12r0FrC4         [24]10603 	lcall	_LCD_string_write
      0038C2 D0 05            [24]10604 	pop	ar5
                                  10605 ;	.\ecen4350_lcd_v4.c:2444: invalidInput = 0;
      0038C4 7F 00            [12]10606 	mov	r7,#0x00
                                  10607 ;	.\ecen4350_lcd_v4.c:2445: exit = 0;
      0038C6 78r17            [12]10608 	mov	r0,#_find_exit_65536_652
      0038C8 76 00            [12]10609 	mov	@r0,#0x00
      0038CA 80 B9            [24]10610 	sjmp	00200$
      0038CC                      10611 00207$:
                                  10612 ;	.\ecen4350_lcd_v4.c:2450: delay(80);
      0038CC 90 00 50         [24]10613 	mov	dptr,#0x0050
                                  10614 ;	.\ecen4350_lcd_v4.c:2451: return;
                                  10615 ;	.\ecen4350_lcd_v4.c:2452: }
      0038CF 02r00rE0         [24]10616 	ljmp	_delay
                                  10617 ;------------------------------------------------------------
                                  10618 ;Allocation info for local variables in function 'count'
                                  10619 ;------------------------------------------------------------
                                  10620 ;d                         Allocated to registers 
                                  10621 ;i                         Allocated with name '_count_i_262144_721'
                                  10622 ;__3932160175              Allocated to registers 
                                  10623 ;__3932160176              Allocated to registers 
                                  10624 ;map_address               Allocated to registers 
                                  10625 ;d                         Allocated to registers r4 
                                  10626 ;i                         Allocated to registers r4 r6 
                                  10627 ;__3932160178              Allocated to registers 
                                  10628 ;__3932160179              Allocated to registers 
                                  10629 ;map_address               Allocated to registers 
                                  10630 ;d                         Allocated to registers r3 
                                  10631 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10632 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10633 ;address                   Allocated with name '_count_address_65536_708'
                                  10634 ;destination               Allocated to registers 
                                  10635 ;blockSize                 Allocated with name '_count_blockSize_65536_708'
                                  10636 ;value                     Allocated with name '_count_value_65536_708'
                                  10637 ;scan                      Allocated with name '_count_scan_65536_708'
                                  10638 ;page                      Allocated to registers r5 
                                  10639 ;noneFound                 Allocated with name '_count_noneFound_65536_708'
                                  10640 ;invalidInput              Allocated to registers r7 
                                  10641 ;exit                      Allocated with name '_count_exit_65536_708'
                                  10642 ;------------------------------------------------------------
                                  10643 ;	.\ecen4350_lcd_v4.c:2454: void count() {
                                  10644 ;	-----------------------------------------
                                  10645 ;	 function count
                                  10646 ;	-----------------------------------------
      0038D2                      10647 _count:
                                  10648 ;	.\ecen4350_lcd_v4.c:2458: __idata unsigned char blockSize = 0;
      0038D2 78r1A            [12]10649 	mov	r0,#_count_blockSize_65536_708
      0038D4 76 00            [12]10650 	mov	@r0,#0x00
                                  10651 ;	.\ecen4350_lcd_v4.c:2460: __idata unsigned char scan = 0;
      0038D6 78r1C            [12]10652 	mov	r0,#_count_scan_65536_708
      0038D8 76 00            [12]10653 	mov	@r0,#0x00
                                  10654 ;	.\ecen4350_lcd_v4.c:2461: __idata unsigned char page = 0;
      0038DA 7D 00            [12]10655 	mov	r5,#0x00
                                  10656 ;	.\ecen4350_lcd_v4.c:2462: __idata unsigned char noneFound = 1;
      0038DC 78r1D            [12]10657 	mov	r0,#_count_noneFound_65536_708
      0038DE 76 01            [12]10658 	mov	@r0,#0x01
                                  10659 ;	.\ecen4350_lcd_v4.c:2463: __idata unsigned char invalidInput = 1;
      0038E0 7B 01            [12]10660 	mov	r3,#0x01
                                  10661 ;	.\ecen4350_lcd_v4.c:2464: __idata unsigned char exit = 1;
      0038E2 78r1E            [12]10662 	mov	r0,#_count_exit_65536_708
      0038E4 76 01            [12]10663 	mov	@r0,#0x01
                                  10664 ;	.\ecen4350_lcd_v4.c:2466: clearLCD();
      0038E6 C0 05            [24]10665 	push	ar5
      0038E8 C0 03            [24]10666 	push	ar3
      0038EA 12r0Dr47         [24]10667 	lcall	_clearLCD
                                  10668 ;	.\ecen4350_lcd_v4.c:2469: setTextSize(5);
      0038ED 75 82 05         [24]10669 	mov	dpl,#0x05
      0038F0 12r04rC4         [24]10670 	lcall	_setTextSize
                                  10671 ;	.\ecen4350_lcd_v4.c:2470: fillTop(GRAY);
      0038F3 90 D6 BA         [24]10672 	mov	dptr,#0xd6ba
      0038F6 12r0Br7A         [24]10673 	lcall	_fillTop
                                  10674 ;	.\ecen4350_lcd_v4.c:2471: setColorMenu();
      0038F9 12r15rC1         [24]10675 	lcall	_setColorMenu
                                  10676 ;	.\ecen4350_lcd_v4.c:2472: setCursor(15, 0);
      0038FC E4               [12]10677 	clr	a
      0038FD F5*00            [12]10678 	mov	_setCursor_PARM_2,a
      0038FF F5*01            [12]10679 	mov	(_setCursor_PARM_2 + 1),a
      003901 90 00 0F         [24]10680 	mov	dptr,#0x000f
      003904 12r04rAA         [24]10681 	lcall	_setCursor
                                  10682 ;	.\ecen4350_lcd_v4.c:2473: LCD_string_write("[COUNT]\n");
      003907 90r0Cr00         [24]10683 	mov	dptr,#___str_123
      00390A 75 F0 80         [24]10684 	mov	b,#0x80
      00390D 12r0FrC4         [24]10685 	lcall	_LCD_string_write
                                  10686 ;	.\ecen4350_lcd_v4.c:2474: setColorDefault();
      003910 12r15r88         [24]10687 	lcall	_setColorDefault
                                  10688 ;	.\ecen4350_lcd_v4.c:2475: setTextSize(2);
      003913 75 82 02         [24]10689 	mov	dpl,#0x02
      003916 12r04rC4         [24]10690 	lcall	_setTextSize
                                  10691 ;	.\ecen4350_lcd_v4.c:2476: setCursor(0, 60);
      003919 75*00 3C         [24]10692 	mov	_setCursor_PARM_2,#0x3c
      00391C 75*01 00         [24]10693 	mov	(_setCursor_PARM_2 + 1),#0x00
      00391F 90 00 00         [24]10694 	mov	dptr,#0x0000
      003922 12r04rAA         [24]10695 	lcall	_setCursor
                                  10696 ;	.\ecen4350_lcd_v4.c:2477: LCD_string_write(" Search Value:");
      003925 90r0Cr09         [24]10697 	mov	dptr,#___str_124
      003928 75 F0 80         [24]10698 	mov	b,#0x80
      00392B 12r0FrC4         [24]10699 	lcall	_LCD_string_write
                                  10700 ;	.\ecen4350_lcd_v4.c:2478: setCursor(0, 80);
      00392E 75*00 50         [24]10701 	mov	_setCursor_PARM_2,#0x50
      003931 75*01 00         [24]10702 	mov	(_setCursor_PARM_2 + 1),#0x00
      003934 90 00 00         [24]10703 	mov	dptr,#0x0000
      003937 12r04rAA         [24]10704 	lcall	_setCursor
                                  10705 ;	.\ecen4350_lcd_v4.c:2479: setColorGray();
      00393A 12r15rB6         [24]10706 	lcall	_setColorGray
                                  10707 ;	.\ecen4350_lcd_v4.c:2480: LCD_string_write(" __");
      00393D 90r08r01         [24]10708 	mov	dptr,#___str_62
      003940 75 F0 80         [24]10709 	mov	b,#0x80
      003943 12r0FrC4         [24]10710 	lcall	_LCD_string_write
                                  10711 ;	.\ecen4350_lcd_v4.c:2481: setCursor(0, 110);
      003946 75*00 6E         [24]10712 	mov	_setCursor_PARM_2,#0x6e
      003949 75*01 00         [24]10713 	mov	(_setCursor_PARM_2 + 1),#0x00
      00394C 90 00 00         [24]10714 	mov	dptr,#0x0000
      00394F 12r04rAA         [24]10715 	lcall	_setCursor
                                  10716 ;	.\ecen4350_lcd_v4.c:2482: setColorDefault();
      003952 12r15r88         [24]10717 	lcall	_setColorDefault
                                  10718 ;	.\ecen4350_lcd_v4.c:2483: LCD_string_write(" Search Address:");
      003955 90r09r4A         [24]10719 	mov	dptr,#___str_82
      003958 75 F0 80         [24]10720 	mov	b,#0x80
      00395B 12r0FrC4         [24]10721 	lcall	_LCD_string_write
                                  10722 ;	.\ecen4350_lcd_v4.c:2484: setCursor(0, 130 );
      00395E 75*00 82         [24]10723 	mov	_setCursor_PARM_2,#0x82
      003961 75*01 00         [24]10724 	mov	(_setCursor_PARM_2 + 1),#0x00
      003964 90 00 00         [24]10725 	mov	dptr,#0x0000
      003967 12r04rAA         [24]10726 	lcall	_setCursor
                                  10727 ;	.\ecen4350_lcd_v4.c:2485: setColorGray();
      00396A 12r15rB6         [24]10728 	lcall	_setColorGray
                                  10729 ;	.\ecen4350_lcd_v4.c:2486: LCD_string_write(" 0x____");
      00396D 90r05rF2         [24]10730 	mov	dptr,#___str_24
      003970 75 F0 80         [24]10731 	mov	b,#0x80
      003973 12r0FrC4         [24]10732 	lcall	_LCD_string_write
                                  10733 ;	.\ecen4350_lcd_v4.c:2487: setCursor(0, 160);
      003976 75*00 A0         [24]10734 	mov	_setCursor_PARM_2,#0xa0
      003979 75*01 00         [24]10735 	mov	(_setCursor_PARM_2 + 1),#0x00
      00397C 90 00 00         [24]10736 	mov	dptr,#0x0000
      00397F 12r04rAA         [24]10737 	lcall	_setCursor
                                  10738 ;	.\ecen4350_lcd_v4.c:2488: setColorDefault();
      003982 12r15r88         [24]10739 	lcall	_setColorDefault
                                  10740 ;	.\ecen4350_lcd_v4.c:2489: LCD_string_write(" Input Block Size:\n");
      003985 90r09r5B         [24]10741 	mov	dptr,#___str_83
      003988 75 F0 80         [24]10742 	mov	b,#0x80
      00398B 12r0FrC4         [24]10743 	lcall	_LCD_string_write
                                  10744 ;	.\ecen4350_lcd_v4.c:2490: setColorGray();
      00398E 12r15rB6         [24]10745 	lcall	_setColorGray
                                  10746 ;	.\ecen4350_lcd_v4.c:2491: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003991 90r09r6F         [24]10747 	mov	dptr,#___str_84
      003994 75 F0 80         [24]10748 	mov	b,#0x80
      003997 12r0FrC4         [24]10749 	lcall	_LCD_string_write
                                  10750 ;	.\ecen4350_lcd_v4.c:2492: LCD_string_write("  <FF> (SCAN)");
      00399A 90r09r95         [24]10751 	mov	dptr,#___str_85
      00399D 75 F0 80         [24]10752 	mov	b,#0x80
      0039A0 12r0FrC4         [24]10753 	lcall	_LCD_string_write
                                  10754 ;	.\ecen4350_lcd_v4.c:2493: setCursor(0, 250);
      0039A3 75*00 FA         [24]10755 	mov	_setCursor_PARM_2,#0xfa
      0039A6 75*01 00         [24]10756 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039A9 90 00 00         [24]10757 	mov	dptr,#0x0000
      0039AC 12r04rAA         [24]10758 	lcall	_setCursor
                                  10759 ;	.\ecen4350_lcd_v4.c:2494: setColorGray();
      0039AF 12r15rB6         [24]10760 	lcall	_setColorGray
                                  10761 ;	.\ecen4350_lcd_v4.c:2495: LCD_string_write("   __");
      0039B2 90r09rA3         [24]10762 	mov	dptr,#___str_86
      0039B5 75 F0 80         [24]10763 	mov	b,#0x80
      0039B8 12r0FrC4         [24]10764 	lcall	_LCD_string_write
                                  10765 ;	.\ecen4350_lcd_v4.c:2502: setColorSelect();
      0039BB 12r15r93         [24]10766 	lcall	_setColorSelect
                                  10767 ;	.\ecen4350_lcd_v4.c:2503: setCursor(0, 60);
      0039BE 75*00 3C         [24]10768 	mov	_setCursor_PARM_2,#0x3c
      0039C1 75*01 00         [24]10769 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039C4 90 00 00         [24]10770 	mov	dptr,#0x0000
      0039C7 12r04rAA         [24]10771 	lcall	_setCursor
                                  10772 ;	.\ecen4350_lcd_v4.c:2504: LCD_string_write(" Search Value:");
      0039CA 90r0Cr09         [24]10773 	mov	dptr,#___str_124
      0039CD 75 F0 80         [24]10774 	mov	b,#0x80
      0039D0 12r0FrC4         [24]10775 	lcall	_LCD_string_write
                                  10776 ;	.\ecen4350_lcd_v4.c:2505: setCursor(0, 80);
      0039D3 75*00 50         [24]10777 	mov	_setCursor_PARM_2,#0x50
      0039D6 75*01 00         [24]10778 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039D9 90 00 00         [24]10779 	mov	dptr,#0x0000
      0039DC 12r04rAA         [24]10780 	lcall	_setCursor
                                  10781 ;	.\ecen4350_lcd_v4.c:2506: setColorWhite();
      0039DF 12r15rD8         [24]10782 	lcall	_setColorWhite
                                  10783 ;	.\ecen4350_lcd_v4.c:2507: setCursor(0, 80);
      0039E2 75*00 50         [24]10784 	mov	_setCursor_PARM_2,#0x50
      0039E5 75*01 00         [24]10785 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039E8 90 00 00         [24]10786 	mov	dptr,#0x0000
      0039EB 12r04rAA         [24]10787 	lcall	_setCursor
                                  10788 ;	.\ecen4350_lcd_v4.c:2508: LCD_string_write(" ");
      0039EE 90r06r54         [24]10789 	mov	dptr,#___str_30
      0039F1 75 F0 80         [24]10790 	mov	b,#0x80
      0039F4 12r0FrC4         [24]10791 	lcall	_LCD_string_write
                                  10792 ;	.\ecen4350_lcd_v4.c:2509: setColorHighlight1();
      0039F7 12r15r9E         [24]10793 	lcall	_setColorHighlight1
                                  10794 ;	.\ecen4350_lcd_v4.c:2510: selection = keyDetect();
      0039FA 12r10rE2         [24]10795 	lcall	_keyDetect
      0039FD AC 82            [24]10796 	mov	r4,dpl
      0039FF 78r00            [12]10797 	mov	r0,#_selection
      003A01 A6 04            [24]10798 	mov	@r0,ar4
                                  10799 ;	.\ecen4350_lcd_v4.c:2511: write(selection);
      003A03 8C 82            [24]10800 	mov	dpl,r4
      003A05 12r0Fr5E         [24]10801 	lcall	_write
                                  10802 ;	.\ecen4350_lcd_v4.c:2512: selection = ASCIItoHex(selection);
      003A08 78r00            [12]10803 	mov	r0,#_selection
      003A0A 86 82            [24]10804 	mov	dpl,@r0
      003A0C 12r13r50         [24]10805 	lcall	_ASCIItoHex
      003A0F AC 82            [24]10806 	mov	r4,dpl
      003A11 D0 03            [24]10807 	pop	ar3
      003A13 78r00            [12]10808 	mov	r0,#_selection
      003A15 A6 04            [24]10809 	mov	@r0,ar4
                                  10810 ;	.\ecen4350_lcd_v4.c:2513: value |= selection * 16;
      003A17 EC               [12]10811 	mov	a,r4
      003A18 C4               [12]10812 	swap	a
      003A19 54 F0            [12]10813 	anl	a,#0xf0
      003A1B FC               [12]10814 	mov	r4,a
                                  10815 ;	.\ecen4350_lcd_v4.c:2514: selection = keyDetect();
      003A1C C0 04            [24]10816 	push	ar4
      003A1E C0 03            [24]10817 	push	ar3
      003A20 12r10rE2         [24]10818 	lcall	_keyDetect
      003A23 AE 82            [24]10819 	mov	r6,dpl
      003A25 78r00            [12]10820 	mov	r0,#_selection
      003A27 A6 06            [24]10821 	mov	@r0,ar6
                                  10822 ;	.\ecen4350_lcd_v4.c:2515: write(selection);
      003A29 8E 82            [24]10823 	mov	dpl,r6
      003A2B 12r0Fr5E         [24]10824 	lcall	_write
                                  10825 ;	.\ecen4350_lcd_v4.c:2516: selection = ASCIItoHex(selection);
      003A2E 78r00            [12]10826 	mov	r0,#_selection
      003A30 86 82            [24]10827 	mov	dpl,@r0
      003A32 12r13r50         [24]10828 	lcall	_ASCIItoHex
      003A35 AE 82            [24]10829 	mov	r6,dpl
      003A37 D0 03            [24]10830 	pop	ar3
      003A39 D0 04            [24]10831 	pop	ar4
      003A3B 78r00            [12]10832 	mov	r0,#_selection
      003A3D A6 06            [24]10833 	mov	@r0,ar6
                                  10834 ;	.\ecen4350_lcd_v4.c:2517: value |= selection;
      003A3F 78r1B            [12]10835 	mov	r0,#_count_value_65536_708
      003A41 EE               [12]10836 	mov	a,r6
      003A42 4C               [12]10837 	orl	a,r4
      003A43 F6               [12]10838 	mov	@r0,a
                                  10839 ;	.\ecen4350_lcd_v4.c:2520: setColorDefault();
      003A44 C0 03            [24]10840 	push	ar3
      003A46 12r15r88         [24]10841 	lcall	_setColorDefault
                                  10842 ;	.\ecen4350_lcd_v4.c:2521: setCursor(0, 60);
      003A49 75*00 3C         [24]10843 	mov	_setCursor_PARM_2,#0x3c
      003A4C 75*01 00         [24]10844 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A4F 90 00 00         [24]10845 	mov	dptr,#0x0000
      003A52 12r04rAA         [24]10846 	lcall	_setCursor
                                  10847 ;	.\ecen4350_lcd_v4.c:2522: LCD_string_write(" Search Value:");
      003A55 90r0Cr09         [24]10848 	mov	dptr,#___str_124
      003A58 75 F0 80         [24]10849 	mov	b,#0x80
      003A5B 12r0FrC4         [24]10850 	lcall	_LCD_string_write
                                  10851 ;	.\ecen4350_lcd_v4.c:2523: setCursor(0, 80);
      003A5E 75*00 50         [24]10852 	mov	_setCursor_PARM_2,#0x50
      003A61 75*01 00         [24]10853 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A64 90 00 00         [24]10854 	mov	dptr,#0x0000
      003A67 12r04rAA         [24]10855 	lcall	_setCursor
                                  10856 ;	.\ecen4350_lcd_v4.c:2524: setColorWhite();
      003A6A 12r15rD8         [24]10857 	lcall	_setColorWhite
                                  10858 ;	.\ecen4350_lcd_v4.c:2525: LCD_string_write(" ");
      003A6D 90r06r54         [24]10859 	mov	dptr,#___str_30
      003A70 75 F0 80         [24]10860 	mov	b,#0x80
      003A73 12r0FrC4         [24]10861 	lcall	_LCD_string_write
                                  10862 ;	.\ecen4350_lcd_v4.c:2526: setColorHighlight2();
      003A76 12r15rAA         [24]10863 	lcall	_setColorHighlight2
                                  10864 ;	.\ecen4350_lcd_v4.c:2527: print8Hex(value);
      003A79 78r1B            [12]10865 	mov	r0,#_count_value_65536_708
      003A7B 86 82            [24]10866 	mov	dpl,@r0
      003A7D 12r14r95         [24]10867 	lcall	_print8Hex
                                  10868 ;	.\ecen4350_lcd_v4.c:2530: setColorSelect();
      003A80 12r15r93         [24]10869 	lcall	_setColorSelect
                                  10870 ;	.\ecen4350_lcd_v4.c:2531: setCursor(0, 110);
      003A83 75*00 6E         [24]10871 	mov	_setCursor_PARM_2,#0x6e
      003A86 75*01 00         [24]10872 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A89 90 00 00         [24]10873 	mov	dptr,#0x0000
      003A8C 12r04rAA         [24]10874 	lcall	_setCursor
                                  10875 ;	.\ecen4350_lcd_v4.c:2532: LCD_string_write(" Search Address:");
      003A8F 90r09r4A         [24]10876 	mov	dptr,#___str_82
      003A92 75 F0 80         [24]10877 	mov	b,#0x80
      003A95 12r0FrC4         [24]10878 	lcall	_LCD_string_write
                                  10879 ;	.\ecen4350_lcd_v4.c:2533: setCursor(0, 130);
      003A98 75*00 82         [24]10880 	mov	_setCursor_PARM_2,#0x82
      003A9B 75*01 00         [24]10881 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A9E 90 00 00         [24]10882 	mov	dptr,#0x0000
      003AA1 12r04rAA         [24]10883 	lcall	_setCursor
                                  10884 ;	.\ecen4350_lcd_v4.c:2534: LCD_string_write(" ");
      003AA4 90r06r54         [24]10885 	mov	dptr,#___str_30
      003AA7 75 F0 80         [24]10886 	mov	b,#0x80
      003AAA 12r0FrC4         [24]10887 	lcall	_LCD_string_write
                                  10888 ;	.\ecen4350_lcd_v4.c:2535: setColorHighlight1();
      003AAD 12r15r9E         [24]10889 	lcall	_setColorHighlight1
                                  10890 ;	.\ecen4350_lcd_v4.c:2536: LCD_string_write("0x");
      003AB0 90r05r29         [24]10891 	mov	dptr,#___str_2
      003AB3 75 F0 80         [24]10892 	mov	b,#0x80
      003AB6 12r0FrC4         [24]10893 	lcall	_LCD_string_write
                                  10894 ;	.\ecen4350_lcd_v4.c:2537: address = inputAddress();
      003AB9 12r15rF9         [24]10895 	lcall	_inputAddress
      003ABC 78r18            [12]10896 	mov	r0,#_count_address_65536_708
      003ABE A6 82            [24]10897 	mov	@r0,dpl
      003AC0 08               [12]10898 	inc	r0
      003AC1 A6 83            [24]10899 	mov	@r0,dph
                                  10900 ;	.\ecen4350_lcd_v4.c:2540: setColorDefault();
      003AC3 12r15r88         [24]10901 	lcall	_setColorDefault
                                  10902 ;	.\ecen4350_lcd_v4.c:2541: setCursor(0, 110);
      003AC6 75*00 6E         [24]10903 	mov	_setCursor_PARM_2,#0x6e
      003AC9 75*01 00         [24]10904 	mov	(_setCursor_PARM_2 + 1),#0x00
      003ACC 90 00 00         [24]10905 	mov	dptr,#0x0000
      003ACF 12r04rAA         [24]10906 	lcall	_setCursor
                                  10907 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" Search Address:");
      003AD2 90r09r4A         [24]10908 	mov	dptr,#___str_82
      003AD5 75 F0 80         [24]10909 	mov	b,#0x80
      003AD8 12r0FrC4         [24]10910 	lcall	_LCD_string_write
                                  10911 ;	.\ecen4350_lcd_v4.c:2543: setCursor(0, 130);
      003ADB 75*00 82         [24]10912 	mov	_setCursor_PARM_2,#0x82
      003ADE 75*01 00         [24]10913 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AE1 90 00 00         [24]10914 	mov	dptr,#0x0000
      003AE4 12r04rAA         [24]10915 	lcall	_setCursor
                                  10916 ;	.\ecen4350_lcd_v4.c:2544: LCD_string_write(" ");
      003AE7 90r06r54         [24]10917 	mov	dptr,#___str_30
      003AEA 75 F0 80         [24]10918 	mov	b,#0x80
      003AED 12r0FrC4         [24]10919 	lcall	_LCD_string_write
                                  10920 ;	.\ecen4350_lcd_v4.c:2545: setColorHighlight2();
      003AF0 12r15rAA         [24]10921 	lcall	_setColorHighlight2
                                  10922 ;	.\ecen4350_lcd_v4.c:2546: LCD_string_write("0x");
      003AF3 90r05r29         [24]10923 	mov	dptr,#___str_2
      003AF6 75 F0 80         [24]10924 	mov	b,#0x80
      003AF9 12r0FrC4         [24]10925 	lcall	_LCD_string_write
                                  10926 ;	.\ecen4350_lcd_v4.c:2547: print16Hex(address);
      003AFC 78r18            [12]10927 	mov	r0,#_count_address_65536_708
      003AFE 86 82            [24]10928 	mov	dpl,@r0
      003B00 08               [12]10929 	inc	r0
      003B01 86 83            [24]10930 	mov	dph,@r0
      003B03 12r14rAC         [24]10931 	lcall	_print16Hex
                                  10932 ;	.\ecen4350_lcd_v4.c:2550: setColorSelect();
      003B06 12r15r93         [24]10933 	lcall	_setColorSelect
                                  10934 ;	.\ecen4350_lcd_v4.c:2551: setCursor(0, 160);
      003B09 75*00 A0         [24]10935 	mov	_setCursor_PARM_2,#0xa0
      003B0C 75*01 00         [24]10936 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B0F 90 00 00         [24]10937 	mov	dptr,#0x0000
      003B12 12r04rAA         [24]10938 	lcall	_setCursor
                                  10939 ;	.\ecen4350_lcd_v4.c:2552: LCD_string_write(" Input Block Size:\n");
      003B15 90r09r5B         [24]10940 	mov	dptr,#___str_83
      003B18 75 F0 80         [24]10941 	mov	b,#0x80
      003B1B 12r0FrC4         [24]10942 	lcall	_LCD_string_write
                                  10943 ;	.\ecen4350_lcd_v4.c:2553: setColorWhite();
      003B1E 12r15rD8         [24]10944 	lcall	_setColorWhite
                                  10945 ;	.\ecen4350_lcd_v4.c:2554: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003B21 90r09r6F         [24]10946 	mov	dptr,#___str_84
      003B24 75 F0 80         [24]10947 	mov	b,#0x80
      003B27 12r0FrC4         [24]10948 	lcall	_LCD_string_write
                                  10949 ;	.\ecen4350_lcd_v4.c:2555: LCD_string_write("  <FF> (SCAN)");
      003B2A 90r09r95         [24]10950 	mov	dptr,#___str_85
      003B2D 75 F0 80         [24]10951 	mov	b,#0x80
      003B30 12r0FrC4         [24]10952 	lcall	_LCD_string_write
      003B33 D0 03            [24]10953 	pop	ar3
      003B35 D0 05            [24]10954 	pop	ar5
                                  10955 ;	.\ecen4350_lcd_v4.c:2556: while (invalidInput) {
      003B37                      10956 00113$:
      003B37 EB               [12]10957 	mov	a,r3
      003B38 70 03            [24]10958 	jnz	00530$
      003B3A 02r3BrF6         [24]10959 	ljmp	00115$
      003B3D                      10960 00530$:
                                  10961 ;	.\ecen4350_lcd_v4.c:2557: setCursor(0, 250);
      003B3D 75*00 FA         [24]10962 	mov	_setCursor_PARM_2,#0xfa
      003B40 75*01 00         [24]10963 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B43 90 00 00         [24]10964 	mov	dptr,#0x0000
      003B46 C0 05            [24]10965 	push	ar5
      003B48 C0 03            [24]10966 	push	ar3
      003B4A 12r04rAA         [24]10967 	lcall	_setCursor
                                  10968 ;	.\ecen4350_lcd_v4.c:2558: setColorGray();
      003B4D 12r15rB6         [24]10969 	lcall	_setColorGray
                                  10970 ;	.\ecen4350_lcd_v4.c:2559: LCD_string_write("   __");
      003B50 90r09rA3         [24]10971 	mov	dptr,#___str_86
      003B53 75 F0 80         [24]10972 	mov	b,#0x80
      003B56 12r0FrC4         [24]10973 	lcall	_LCD_string_write
                                  10974 ;	.\ecen4350_lcd_v4.c:2560: setCursor(0, 250);
      003B59 75*00 FA         [24]10975 	mov	_setCursor_PARM_2,#0xfa
      003B5C 75*01 00         [24]10976 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B5F 90 00 00         [24]10977 	mov	dptr,#0x0000
      003B62 12r04rAA         [24]10978 	lcall	_setCursor
                                  10979 ;	.\ecen4350_lcd_v4.c:2561: LCD_string_write("   ");
      003B65 90r09rA9         [24]10980 	mov	dptr,#___str_87
      003B68 75 F0 80         [24]10981 	mov	b,#0x80
      003B6B 12r0FrC4         [24]10982 	lcall	_LCD_string_write
                                  10983 ;	.\ecen4350_lcd_v4.c:2562: setColorHighlight1();
      003B6E 12r15r9E         [24]10984 	lcall	_setColorHighlight1
                                  10985 ;	.\ecen4350_lcd_v4.c:2563: blockSize = inputBlockSize();
      003B71 12r16rA9         [24]10986 	lcall	_inputBlockSize
      003B74 78r1A            [12]10987 	mov	r0,#_count_blockSize_65536_708
      003B76 A6 82            [24]10988 	mov	@r0,dpl
      003B78 D0 03            [24]10989 	pop	ar3
      003B7A D0 05            [24]10990 	pop	ar5
                                  10991 ;	.\ecen4350_lcd_v4.c:2564: if (blockSize == 0x01) {
      003B7C 78r1A            [12]10992 	mov	r0,#_count_blockSize_65536_708
      003B7E B6 01 18         [24]10993 	cjne	@r0,#0x01,00111$
                                  10994 ;	.\ecen4350_lcd_v4.c:2565: invalidInput = 0;
      003B81 7B 00            [12]10995 	mov	r3,#0x00
                                  10996 ;	.\ecen4350_lcd_v4.c:2566: setColorDefault();
      003B83 C0 05            [24]10997 	push	ar5
      003B85 C0 03            [24]10998 	push	ar3
      003B87 12r15r88         [24]10999 	lcall	_setColorDefault
                                  11000 ;	.\ecen4350_lcd_v4.c:2567: LCD_string_write("\n                ");
      003B8A 90r09rAD         [24]11001 	mov	dptr,#___str_88
      003B8D 75 F0 80         [24]11002 	mov	b,#0x80
      003B90 12r0FrC4         [24]11003 	lcall	_LCD_string_write
      003B93 D0 03            [24]11004 	pop	ar3
      003B95 D0 05            [24]11005 	pop	ar5
      003B97 80 9E            [24]11006 	sjmp	00113$
      003B99                      11007 00111$:
                                  11008 ;	.\ecen4350_lcd_v4.c:2568: } else if (blockSize == 0x02) {
      003B99 78r1A            [12]11009 	mov	r0,#_count_blockSize_65536_708
      003B9B B6 02 19         [24]11010 	cjne	@r0,#0x02,00108$
                                  11011 ;	.\ecen4350_lcd_v4.c:2569: invalidInput = 0;
      003B9E 7B 00            [12]11012 	mov	r3,#0x00
                                  11013 ;	.\ecen4350_lcd_v4.c:2570: setColorDefault();
      003BA0 C0 05            [24]11014 	push	ar5
      003BA2 C0 03            [24]11015 	push	ar3
      003BA4 12r15r88         [24]11016 	lcall	_setColorDefault
                                  11017 ;	.\ecen4350_lcd_v4.c:2571: LCD_string_write("\n                ");
      003BA7 90r09rAD         [24]11018 	mov	dptr,#___str_88
      003BAA 75 F0 80         [24]11019 	mov	b,#0x80
      003BAD 12r0FrC4         [24]11020 	lcall	_LCD_string_write
      003BB0 D0 03            [24]11021 	pop	ar3
      003BB2 D0 05            [24]11022 	pop	ar5
      003BB4 02r3Br37         [24]11023 	ljmp	00113$
      003BB7                      11024 00108$:
                                  11025 ;	.\ecen4350_lcd_v4.c:2572: } else if (blockSize == 0x04) {
      003BB7 78r1A            [12]11026 	mov	r0,#_count_blockSize_65536_708
      003BB9 B6 04 19         [24]11027 	cjne	@r0,#0x04,00105$
                                  11028 ;	.\ecen4350_lcd_v4.c:2573: invalidInput = 0;
      003BBC 7B 00            [12]11029 	mov	r3,#0x00
                                  11030 ;	.\ecen4350_lcd_v4.c:2574: setColorDefault();
      003BBE C0 05            [24]11031 	push	ar5
      003BC0 C0 03            [24]11032 	push	ar3
      003BC2 12r15r88         [24]11033 	lcall	_setColorDefault
                                  11034 ;	.\ecen4350_lcd_v4.c:2575: LCD_string_write("\n                ");
      003BC5 90r09rAD         [24]11035 	mov	dptr,#___str_88
      003BC8 75 F0 80         [24]11036 	mov	b,#0x80
      003BCB 12r0FrC4         [24]11037 	lcall	_LCD_string_write
      003BCE D0 03            [24]11038 	pop	ar3
      003BD0 D0 05            [24]11039 	pop	ar5
      003BD2 02r3Br37         [24]11040 	ljmp	00113$
      003BD5                      11041 00105$:
                                  11042 ;	.\ecen4350_lcd_v4.c:2576: } else if (blockSize == 0xFF) {
      003BD5 78r1A            [12]11043 	mov	r0,#_count_blockSize_65536_708
      003BD7 B6 FF 05         [24]11044 	cjne	@r0,#0xff,00102$
                                  11045 ;	.\ecen4350_lcd_v4.c:2577: invalidInput = 0;
      003BDA 7B 00            [12]11046 	mov	r3,#0x00
      003BDC 02r3Br37         [24]11047 	ljmp	00113$
      003BDF                      11048 00102$:
                                  11049 ;	.\ecen4350_lcd_v4.c:2580: setColorRed();
      003BDF C0 05            [24]11050 	push	ar5
      003BE1 C0 03            [24]11051 	push	ar3
      003BE3 12r15rCD         [24]11052 	lcall	_setColorRed
                                  11053 ;	.\ecen4350_lcd_v4.c:2581: LCD_string_write("\n Try again");
      003BE6 90r09rBF         [24]11054 	mov	dptr,#___str_89
      003BE9 75 F0 80         [24]11055 	mov	b,#0x80
      003BEC 12r0FrC4         [24]11056 	lcall	_LCD_string_write
      003BEF D0 03            [24]11057 	pop	ar3
      003BF1 D0 05            [24]11058 	pop	ar5
      003BF3 02r3Br37         [24]11059 	ljmp	00113$
      003BF6                      11060 00115$:
                                  11061 ;	.\ecen4350_lcd_v4.c:2586: setCursor(0, 160);
      003BF6 75*00 A0         [24]11062 	mov	_setCursor_PARM_2,#0xa0
      003BF9 75*01 00         [24]11063 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BFC 90 00 00         [24]11064 	mov	dptr,#0x0000
      003BFF C0 05            [24]11065 	push	ar5
      003C01 12r04rAA         [24]11066 	lcall	_setCursor
                                  11067 ;	.\ecen4350_lcd_v4.c:2587: setColorDefault();
      003C04 12r15r88         [24]11068 	lcall	_setColorDefault
                                  11069 ;	.\ecen4350_lcd_v4.c:2588: LCD_string_write(" Input Block Size:\n");
      003C07 90r09r5B         [24]11070 	mov	dptr,#___str_83
      003C0A 75 F0 80         [24]11071 	mov	b,#0x80
      003C0D 12r0FrC4         [24]11072 	lcall	_LCD_string_write
      003C10 D0 05            [24]11073 	pop	ar5
                                  11074 ;	.\ecen4350_lcd_v4.c:2589: if (blockSize == 0x01){
      003C12 78r1A            [12]11075 	mov	r0,#_count_blockSize_65536_708
      003C14 B6 01 74         [24]11076 	cjne	@r0,#0x01,00125$
                                  11077 ;	.\ecen4350_lcd_v4.c:2590: LCD_string_write("  ");
      003C17 90r06r6D         [24]11078 	mov	dptr,#___str_33
      003C1A 75 F0 80         [24]11079 	mov	b,#0x80
      003C1D C0 05            [24]11080 	push	ar5
      003C1F 12r0FrC4         [24]11081 	lcall	_LCD_string_write
                                  11082 ;	.\ecen4350_lcd_v4.c:2591: setColorHighlight2();
      003C22 12r15rAA         [24]11083 	lcall	_setColorHighlight2
                                  11084 ;	.\ecen4350_lcd_v4.c:2592: LCD_string_write("<01> BYTE\n");
      003C25 90r09rCB         [24]11085 	mov	dptr,#___str_90
      003C28 75 F0 80         [24]11086 	mov	b,#0x80
      003C2B 12r0FrC4         [24]11087 	lcall	_LCD_string_write
                                  11088 ;	.\ecen4350_lcd_v4.c:2593: setColorGray();
      003C2E 12r15rB6         [24]11089 	lcall	_setColorGray
                                  11090 ;	.\ecen4350_lcd_v4.c:2594: LCD_string_write("  <02> WORD\n");
      003C31 90r09rD6         [24]11091 	mov	dptr,#___str_91
      003C34 75 F0 80         [24]11092 	mov	b,#0x80
      003C37 12r0FrC4         [24]11093 	lcall	_LCD_string_write
                                  11094 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write("  <04> DWORD\n");
      003C3A 90r09rE3         [24]11095 	mov	dptr,#___str_92
      003C3D 75 F0 80         [24]11096 	mov	b,#0x80
      003C40 12r0FrC4         [24]11097 	lcall	_LCD_string_write
                                  11098 ;	.\ecen4350_lcd_v4.c:2596: LCD_string_write("  <FF> (SCAN)");
      003C43 90r09r95         [24]11099 	mov	dptr,#___str_85
      003C46 75 F0 80         [24]11100 	mov	b,#0x80
      003C49 12r0FrC4         [24]11101 	lcall	_LCD_string_write
                                  11102 ;	.\ecen4350_lcd_v4.c:2597: setColorDefault();
      003C4C 12r15r88         [24]11103 	lcall	_setColorDefault
                                  11104 ;	.\ecen4350_lcd_v4.c:2598: setCursor(0, 250);
      003C4F 75*00 FA         [24]11105 	mov	_setCursor_PARM_2,#0xfa
      003C52 75*01 00         [24]11106 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C55 90 00 00         [24]11107 	mov	dptr,#0x0000
      003C58 12r04rAA         [24]11108 	lcall	_setCursor
                                  11109 ;	.\ecen4350_lcd_v4.c:2599: LCD_string_write("   ");
      003C5B 90r09rA9         [24]11110 	mov	dptr,#___str_87
      003C5E 75 F0 80         [24]11111 	mov	b,#0x80
      003C61 12r0FrC4         [24]11112 	lcall	_LCD_string_write
                                  11113 ;	.\ecen4350_lcd_v4.c:2600: setColorHighlight2();
      003C64 12r15rAA         [24]11114 	lcall	_setColorHighlight2
                                  11115 ;	.\ecen4350_lcd_v4.c:2601: print8Hex(blockSize);
      003C67 78r1A            [12]11116 	mov	r0,#_count_blockSize_65536_708
      003C69 86 82            [24]11117 	mov	dpl,@r0
      003C6B 12r14r95         [24]11118 	lcall	_print8Hex
                                  11119 ;	.\ecen4350_lcd_v4.c:2602: setColorDefault();
      003C6E 12r15r88         [24]11120 	lcall	_setColorDefault
                                  11121 ;	.\ecen4350_lcd_v4.c:2603: LCD_string_write("\n Search Size Limit:");
      003C71 90r09rF1         [24]11122 	mov	dptr,#___str_93
      003C74 75 F0 80         [24]11123 	mov	b,#0x80
      003C77 12r0FrC4         [24]11124 	lcall	_LCD_string_write
                                  11125 ;	.\ecen4350_lcd_v4.c:2604: setColorWhite();
      003C7A 12r15rD8         [24]11126 	lcall	_setColorWhite
                                  11127 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write("\n BYTE [8 bits]");
      003C7D 90r0Ar06         [24]11128 	mov	dptr,#___str_94
      003C80 75 F0 80         [24]11129 	mov	b,#0x80
      003C83 12r0FrC4         [24]11130 	lcall	_LCD_string_write
      003C86 D0 05            [24]11131 	pop	ar5
      003C88 02r3DrCF         [24]11132 	ljmp	00126$
      003C8B                      11133 00125$:
                                  11134 ;	.\ecen4350_lcd_v4.c:2606: } else if (blockSize == 0x02) {
      003C8B 78r1A            [12]11135 	mov	r0,#_count_blockSize_65536_708
      003C8D B6 02 6E         [24]11136 	cjne	@r0,#0x02,00122$
                                  11137 ;	.\ecen4350_lcd_v4.c:2607: setColorGray();
      003C90 C0 05            [24]11138 	push	ar5
      003C92 12r15rB6         [24]11139 	lcall	_setColorGray
                                  11140 ;	.\ecen4350_lcd_v4.c:2608: LCD_string_write("  <01> BYTE\n  ");
      003C95 90r0Ar16         [24]11141 	mov	dptr,#___str_95
      003C98 75 F0 80         [24]11142 	mov	b,#0x80
      003C9B 12r0FrC4         [24]11143 	lcall	_LCD_string_write
                                  11144 ;	.\ecen4350_lcd_v4.c:2609: setColorHighlight2();
      003C9E 12r15rAA         [24]11145 	lcall	_setColorHighlight2
                                  11146 ;	.\ecen4350_lcd_v4.c:2610: LCD_string_write("<02> WORD\n");
      003CA1 90r0Ar25         [24]11147 	mov	dptr,#___str_96
      003CA4 75 F0 80         [24]11148 	mov	b,#0x80
      003CA7 12r0FrC4         [24]11149 	lcall	_LCD_string_write
                                  11150 ;	.\ecen4350_lcd_v4.c:2611: setColorGray();
      003CAA 12r15rB6         [24]11151 	lcall	_setColorGray
                                  11152 ;	.\ecen4350_lcd_v4.c:2612: LCD_string_write("  <04> DWORD\n");
      003CAD 90r09rE3         [24]11153 	mov	dptr,#___str_92
      003CB0 75 F0 80         [24]11154 	mov	b,#0x80
      003CB3 12r0FrC4         [24]11155 	lcall	_LCD_string_write
                                  11156 ;	.\ecen4350_lcd_v4.c:2613: LCD_string_write("  <FF> (SCAN)");
      003CB6 90r09r95         [24]11157 	mov	dptr,#___str_85
      003CB9 75 F0 80         [24]11158 	mov	b,#0x80
      003CBC 12r0FrC4         [24]11159 	lcall	_LCD_string_write
                                  11160 ;	.\ecen4350_lcd_v4.c:2614: setColorDefault();
      003CBF 12r15r88         [24]11161 	lcall	_setColorDefault
                                  11162 ;	.\ecen4350_lcd_v4.c:2615: setCursor(0, 250);
      003CC2 75*00 FA         [24]11163 	mov	_setCursor_PARM_2,#0xfa
      003CC5 75*01 00         [24]11164 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CC8 90 00 00         [24]11165 	mov	dptr,#0x0000
      003CCB 12r04rAA         [24]11166 	lcall	_setCursor
                                  11167 ;	.\ecen4350_lcd_v4.c:2616: LCD_string_write("   ");
      003CCE 90r09rA9         [24]11168 	mov	dptr,#___str_87
      003CD1 75 F0 80         [24]11169 	mov	b,#0x80
      003CD4 12r0FrC4         [24]11170 	lcall	_LCD_string_write
                                  11171 ;	.\ecen4350_lcd_v4.c:2617: setColorHighlight2();
      003CD7 12r15rAA         [24]11172 	lcall	_setColorHighlight2
                                  11173 ;	.\ecen4350_lcd_v4.c:2618: print8Hex(blockSize);
      003CDA 78r1A            [12]11174 	mov	r0,#_count_blockSize_65536_708
      003CDC 86 82            [24]11175 	mov	dpl,@r0
      003CDE 12r14r95         [24]11176 	lcall	_print8Hex
                                  11177 ;	.\ecen4350_lcd_v4.c:2619: setColorDefault();
      003CE1 12r15r88         [24]11178 	lcall	_setColorDefault
                                  11179 ;	.\ecen4350_lcd_v4.c:2620: LCD_string_write("\n Search Size Limit:");
      003CE4 90r09rF1         [24]11180 	mov	dptr,#___str_93
      003CE7 75 F0 80         [24]11181 	mov	b,#0x80
      003CEA 12r0FrC4         [24]11182 	lcall	_LCD_string_write
                                  11183 ;	.\ecen4350_lcd_v4.c:2621: setColorWhite();
      003CED 12r15rD8         [24]11184 	lcall	_setColorWhite
                                  11185 ;	.\ecen4350_lcd_v4.c:2622: LCD_string_write("\n WORD [16 bits]");
      003CF0 90r0Ar30         [24]11186 	mov	dptr,#___str_97
      003CF3 75 F0 80         [24]11187 	mov	b,#0x80
      003CF6 12r0FrC4         [24]11188 	lcall	_LCD_string_write
      003CF9 D0 05            [24]11189 	pop	ar5
      003CFB 02r3DrCF         [24]11190 	ljmp	00126$
      003CFE                      11191 00122$:
                                  11192 ;	.\ecen4350_lcd_v4.c:2623: } else if (blockSize == 0x04) {
      003CFE 78r1A            [12]11193 	mov	r0,#_count_blockSize_65536_708
      003D00 B6 04 64         [24]11194 	cjne	@r0,#0x04,00119$
                                  11195 ;	.\ecen4350_lcd_v4.c:2624: setColorGray();
      003D03 C0 05            [24]11196 	push	ar5
      003D05 12r15rB6         [24]11197 	lcall	_setColorGray
                                  11198 ;	.\ecen4350_lcd_v4.c:2625: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003D08 90r0Ar41         [24]11199 	mov	dptr,#___str_98
      003D0B 75 F0 80         [24]11200 	mov	b,#0x80
      003D0E 12r0FrC4         [24]11201 	lcall	_LCD_string_write
                                  11202 ;	.\ecen4350_lcd_v4.c:2626: setColorHighlight2();
      003D11 12r15rAA         [24]11203 	lcall	_setColorHighlight2
                                  11204 ;	.\ecen4350_lcd_v4.c:2627: LCD_string_write("<04> DWORD\n");
      003D14 90r0Ar5C         [24]11205 	mov	dptr,#___str_99
      003D17 75 F0 80         [24]11206 	mov	b,#0x80
      003D1A 12r0FrC4         [24]11207 	lcall	_LCD_string_write
                                  11208 ;	.\ecen4350_lcd_v4.c:2628: setColorGray();
      003D1D 12r15rB6         [24]11209 	lcall	_setColorGray
                                  11210 ;	.\ecen4350_lcd_v4.c:2629: LCD_string_write("  <FF> (SCAN)");
      003D20 90r09r95         [24]11211 	mov	dptr,#___str_85
      003D23 75 F0 80         [24]11212 	mov	b,#0x80
      003D26 12r0FrC4         [24]11213 	lcall	_LCD_string_write
                                  11214 ;	.\ecen4350_lcd_v4.c:2630: setColorDefault();
      003D29 12r15r88         [24]11215 	lcall	_setColorDefault
                                  11216 ;	.\ecen4350_lcd_v4.c:2631: setCursor(0, 250);
      003D2C 75*00 FA         [24]11217 	mov	_setCursor_PARM_2,#0xfa
      003D2F 75*01 00         [24]11218 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D32 90 00 00         [24]11219 	mov	dptr,#0x0000
      003D35 12r04rAA         [24]11220 	lcall	_setCursor
                                  11221 ;	.\ecen4350_lcd_v4.c:2632: LCD_string_write("   ");
      003D38 90r09rA9         [24]11222 	mov	dptr,#___str_87
      003D3B 75 F0 80         [24]11223 	mov	b,#0x80
      003D3E 12r0FrC4         [24]11224 	lcall	_LCD_string_write
                                  11225 ;	.\ecen4350_lcd_v4.c:2633: setColorHighlight2();
      003D41 12r15rAA         [24]11226 	lcall	_setColorHighlight2
                                  11227 ;	.\ecen4350_lcd_v4.c:2634: print8Hex(blockSize);
      003D44 78r1A            [12]11228 	mov	r0,#_count_blockSize_65536_708
      003D46 86 82            [24]11229 	mov	dpl,@r0
      003D48 12r14r95         [24]11230 	lcall	_print8Hex
                                  11231 ;	.\ecen4350_lcd_v4.c:2635: setColorDefault();
      003D4B 12r15r88         [24]11232 	lcall	_setColorDefault
                                  11233 ;	.\ecen4350_lcd_v4.c:2636: LCD_string_write("\n Search Size Limit:");
      003D4E 90r09rF1         [24]11234 	mov	dptr,#___str_93
      003D51 75 F0 80         [24]11235 	mov	b,#0x80
      003D54 12r0FrC4         [24]11236 	lcall	_LCD_string_write
                                  11237 ;	.\ecen4350_lcd_v4.c:2637: setColorWhite();
      003D57 12r15rD8         [24]11238 	lcall	_setColorWhite
                                  11239 ;	.\ecen4350_lcd_v4.c:2638: LCD_string_write("\n DWORD [32 bits]");
      003D5A 90r0Ar68         [24]11240 	mov	dptr,#___str_100
      003D5D 75 F0 80         [24]11241 	mov	b,#0x80
      003D60 12r0FrC4         [24]11242 	lcall	_LCD_string_write
      003D63 D0 05            [24]11243 	pop	ar5
      003D65 80 68            [24]11244 	sjmp	00126$
      003D67                      11245 00119$:
                                  11246 ;	.\ecen4350_lcd_v4.c:2639: } else if (blockSize == 0xFF) {
      003D67 78r1A            [12]11247 	mov	r0,#_count_blockSize_65536_708
      003D69 B6 FF 63         [24]11248 	cjne	@r0,#0xff,00126$
                                  11249 ;	.\ecen4350_lcd_v4.c:2640: scan = 1;
      003D6C 78r1C            [12]11250 	mov	r0,#_count_scan_65536_708
      003D6E 76 01            [12]11251 	mov	@r0,#0x01
                                  11252 ;	.\ecen4350_lcd_v4.c:2641: setColorGray();
      003D70 C0 05            [24]11253 	push	ar5
      003D72 12r15rB6         [24]11254 	lcall	_setColorGray
                                  11255 ;	.\ecen4350_lcd_v4.c:2642: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003D75 90r0Ar41         [24]11256 	mov	dptr,#___str_98
      003D78 75 F0 80         [24]11257 	mov	b,#0x80
      003D7B 12r0FrC4         [24]11258 	lcall	_LCD_string_write
                                  11259 ;	.\ecen4350_lcd_v4.c:2643: LCD_string_write("<04> DWORD\n  ");
      003D7E 90r0Ar7A         [24]11260 	mov	dptr,#___str_101
      003D81 75 F0 80         [24]11261 	mov	b,#0x80
      003D84 12r0FrC4         [24]11262 	lcall	_LCD_string_write
                                  11263 ;	.\ecen4350_lcd_v4.c:2644: setColorHighlight2();
      003D87 12r15rAA         [24]11264 	lcall	_setColorHighlight2
                                  11265 ;	.\ecen4350_lcd_v4.c:2645: LCD_string_write("<FF> (SCAN)");
      003D8A 90r0Ar88         [24]11266 	mov	dptr,#___str_102
      003D8D 75 F0 80         [24]11267 	mov	b,#0x80
      003D90 12r0FrC4         [24]11268 	lcall	_LCD_string_write
                                  11269 ;	.\ecen4350_lcd_v4.c:2646: setColorDefault();
      003D93 12r15r88         [24]11270 	lcall	_setColorDefault
                                  11271 ;	.\ecen4350_lcd_v4.c:2647: setCursor(0, 250);
      003D96 75*00 FA         [24]11272 	mov	_setCursor_PARM_2,#0xfa
      003D99 75*01 00         [24]11273 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D9C 90 00 00         [24]11274 	mov	dptr,#0x0000
      003D9F 12r04rAA         [24]11275 	lcall	_setCursor
                                  11276 ;	.\ecen4350_lcd_v4.c:2648: LCD_string_write("   ");
      003DA2 90r09rA9         [24]11277 	mov	dptr,#___str_87
      003DA5 75 F0 80         [24]11278 	mov	b,#0x80
      003DA8 12r0FrC4         [24]11279 	lcall	_LCD_string_write
                                  11280 ;	.\ecen4350_lcd_v4.c:2649: setColorHighlight2();
      003DAB 12r15rAA         [24]11281 	lcall	_setColorHighlight2
                                  11282 ;	.\ecen4350_lcd_v4.c:2650: print8Hex(blockSize);
      003DAE 78r1A            [12]11283 	mov	r0,#_count_blockSize_65536_708
      003DB0 86 82            [24]11284 	mov	dpl,@r0
      003DB2 12r14r95         [24]11285 	lcall	_print8Hex
                                  11286 ;	.\ecen4350_lcd_v4.c:2651: setColorDefault();
      003DB5 12r15r88         [24]11287 	lcall	_setColorDefault
                                  11288 ;	.\ecen4350_lcd_v4.c:2652: LCD_string_write("\n Search Size Limit:");
      003DB8 90r09rF1         [24]11289 	mov	dptr,#___str_93
      003DBB 75 F0 80         [24]11290 	mov	b,#0x80
      003DBE 12r0FrC4         [24]11291 	lcall	_LCD_string_write
                                  11292 ;	.\ecen4350_lcd_v4.c:2653: setColorWhite();
      003DC1 12r15rD8         [24]11293 	lcall	_setColorWhite
                                  11294 ;	.\ecen4350_lcd_v4.c:2654: LCD_string_write("\n [256 Blocks]");
      003DC4 90r0Ar94         [24]11295 	mov	dptr,#___str_103
      003DC7 75 F0 80         [24]11296 	mov	b,#0x80
      003DCA 12r0FrC4         [24]11297 	lcall	_LCD_string_write
      003DCD D0 05            [24]11298 	pop	ar5
      003DCF                      11299 00126$:
                                  11300 ;	.\ecen4350_lcd_v4.c:2658: delay(40);
      003DCF 90 00 28         [24]11301 	mov	dptr,#0x0028
      003DD2 C0 05            [24]11302 	push	ar5
      003DD4 12r00rE0         [24]11303 	lcall	_delay
                                  11304 ;	.\ecen4350_lcd_v4.c:2659: clearLCD();
      003DD7 12r0Dr47         [24]11305 	lcall	_clearLCD
                                  11306 ;	.\ecen4350_lcd_v4.c:2660: fillTop(GRAY);
      003DDA 90 D6 BA         [24]11307 	mov	dptr,#0xd6ba
      003DDD 12r0Br7A         [24]11308 	lcall	_fillTop
                                  11309 ;	.\ecen4350_lcd_v4.c:2661: setTextSize(5);
      003DE0 75 82 05         [24]11310 	mov	dpl,#0x05
      003DE3 12r04rC4         [24]11311 	lcall	_setTextSize
                                  11312 ;	.\ecen4350_lcd_v4.c:2662: setColorMenu();
      003DE6 12r15rC1         [24]11313 	lcall	_setColorMenu
                                  11314 ;	.\ecen4350_lcd_v4.c:2663: setCursor(15,0);
      003DE9 E4               [12]11315 	clr	a
      003DEA F5*00            [12]11316 	mov	_setCursor_PARM_2,a
      003DEC F5*01            [12]11317 	mov	(_setCursor_PARM_2 + 1),a
      003DEE 90 00 0F         [24]11318 	mov	dptr,#0x000f
      003DF1 12r04rAA         [24]11319 	lcall	_setCursor
                                  11320 ;	.\ecen4350_lcd_v4.c:2664: LCD_string_write("[COUNT]\n");
      003DF4 90r0Cr00         [24]11321 	mov	dptr,#___str_123
      003DF7 75 F0 80         [24]11322 	mov	b,#0x80
      003DFA 12r0FrC4         [24]11323 	lcall	_LCD_string_write
                                  11324 ;	.\ecen4350_lcd_v4.c:2665: setColorDefault();
      003DFD 12r15r88         [24]11325 	lcall	_setColorDefault
                                  11326 ;	.\ecen4350_lcd_v4.c:2666: setTextSize(2);
      003E00 75 82 02         [24]11327 	mov	dpl,#0x02
      003E03 12r04rC4         [24]11328 	lcall	_setTextSize
      003E06 D0 05            [24]11329 	pop	ar5
                                  11330 ;	.\ecen4350_lcd_v4.c:2672: while (exit) {
      003E08                      11331 00202$:
      003E08 78r1E            [12]11332 	mov	r0,#_count_exit_65536_708
      003E0A E6               [12]11333 	mov	a,@r0
      003E0B 70 03            [24]11334 	jnz	00547$
      003E0D 02r43rA7         [24]11335 	ljmp	00204$
      003E10                      11336 00547$:
                                  11337 ;	.\ecen4350_lcd_v4.c:2674: if (scan) {	
      003E10 78r1C            [12]11338 	mov	r0,#_count_scan_65536_708
      003E12 E6               [12]11339 	mov	a,@r0
      003E13 70 03            [24]11340 	jnz	00548$
      003E15 02r3ErCD         [24]11341 	ljmp	00193$
      003E18                      11342 00548$:
                                  11343 ;	.\ecen4350_lcd_v4.c:2675: setCursor(0, 60);
      003E18 75*00 3C         [24]11344 	mov	_setCursor_PARM_2,#0x3c
      003E1B 75*01 00         [24]11345 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E1E 90 00 00         [24]11346 	mov	dptr,#0x0000
      003E21 C0 05            [24]11347 	push	ar5
      003E23 12r04rAA         [24]11348 	lcall	_setCursor
                                  11349 ;	.\ecen4350_lcd_v4.c:2676: setColorYellow();
      003E26 12r15rEE         [24]11350 	lcall	_setColorYellow
                                  11351 ;	.\ecen4350_lcd_v4.c:2677: LCD_string_write(" [Non-Interactive]\n");
      003E29 90r0ArA3         [24]11352 	mov	dptr,#___str_104
      003E2C 75 F0 80         [24]11353 	mov	b,#0x80
      003E2F 12r0FrC4         [24]11354 	lcall	_LCD_string_write
                                  11355 ;	.\ecen4350_lcd_v4.c:2678: setColorWhite();
      003E32 12r15rD8         [24]11356 	lcall	_setColorWhite
                                  11357 ;	.\ecen4350_lcd_v4.c:2679: LCD_string_write(" Search Value:\n ");
      003E35 90r0ArB7         [24]11358 	mov	dptr,#___str_105
      003E38 75 F0 80         [24]11359 	mov	b,#0x80
      003E3B 12r0FrC4         [24]11360 	lcall	_LCD_string_write
                                  11361 ;	.\ecen4350_lcd_v4.c:2680: setColorDefault();
      003E3E 12r15r88         [24]11362 	lcall	_setColorDefault
                                  11363 ;	.\ecen4350_lcd_v4.c:2681: print8Hex(value);
      003E41 78r1B            [12]11364 	mov	r0,#_count_value_65536_708
      003E43 86 82            [24]11365 	mov	dpl,@r0
      003E45 12r14r95         [24]11366 	lcall	_print8Hex
      003E48 D0 05            [24]11367 	pop	ar5
                                  11368 ;	.\ecen4350_lcd_v4.c:2682: for(unsigned int i = 0; i < blockSize; i++) {
      003E4A 8D 03            [24]11369 	mov	ar3,r5
      003E4C E4               [12]11370 	clr	a
      003E4D F5*5E            [12]11371 	mov	_count_i_262144_721,a
      003E4F F5*5F            [12]11372 	mov	(_count_i_262144_721 + 1),a
      003E51                      11373 00208$:
      003E51 78r1A            [12]11374 	mov	r0,#_count_blockSize_65536_708
      003E53 86 02            [24]11375 	mov	ar2,@r0
      003E55 7E 00            [12]11376 	mov	r6,#0x00
      003E57 C3               [12]11377 	clr	c
      003E58 E5*5E            [12]11378 	mov	a,_count_i_262144_721
      003E5A 9A               [12]11379 	subb	a,r2
      003E5B E5*5F            [12]11380 	mov	a,(_count_i_262144_721 + 1)
      003E5D 9E               [12]11381 	subb	a,r6
      003E5E 50 2A            [24]11382 	jnc	00267$
                                  11383 ;	.\ecen4350_lcd_v4.c:2683: d = (unsigned char __xdata*)(i+address);
      003E60 78r18            [12]11384 	mov	r0,#_count_address_65536_708
      003E62 E6               [12]11385 	mov	a,@r0
      003E63 25*5E            [12]11386 	add	a,_count_i_262144_721
      003E65 FC               [12]11387 	mov	r4,a
      003E66 08               [12]11388 	inc	r0
      003E67 E6               [12]11389 	mov	a,@r0
      003E68 35*5F            [12]11390 	addc	a,(_count_i_262144_721 + 1)
      003E6A FE               [12]11391 	mov	r6,a
                                  11392 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                  11393 ;	assignBit
      003E6B C2 B5            [12]11394 	clr	_P3_5
                                  11395 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003E6D 8C 82            [24]11396 	mov	dpl,r4
      003E6F 8E 83            [24]11397 	mov	dph,r6
      003E71 E0               [24]11398 	movx	a,@dptr
      003E72 FC               [12]11399 	mov	r4,a
                                  11400 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                  11401 ;	assignBit
      003E73 D2 B5            [12]11402 	setb	_P3_5
                                  11403 ;	.\ecen4350_lcd_v4.c:2684: if(value == ramRead8(d)){
      003E75 78r1B            [12]11404 	mov	r0,#_count_value_65536_708
      003E77 E6               [12]11405 	mov	a,@r0
      003E78 B5 04 05         [24]11406 	cjne	a,ar4,00209$
                                  11407 ;	.\ecen4350_lcd_v4.c:2685: noneFound = 0;
      003E7B 78r1D            [12]11408 	mov	r0,#_count_noneFound_65536_708
      003E7D 76 00            [12]11409 	mov	@r0,#0x00
                                  11410 ;	.\ecen4350_lcd_v4.c:2686: page++;
      003E7F 0B               [12]11411 	inc	r3
      003E80                      11412 00209$:
                                  11413 ;	.\ecen4350_lcd_v4.c:2682: for(unsigned int i = 0; i < blockSize; i++) {
      003E80 05*5E            [12]11414 	inc	_count_i_262144_721
      003E82 E4               [12]11415 	clr	a
      003E83 B5*5E CB         [24]11416 	cjne	a,_count_i_262144_721,00208$
      003E86 05*5F            [12]11417 	inc	(_count_i_262144_721 + 1)
      003E88 80 C7            [24]11418 	sjmp	00208$
      003E8A                      11419 00267$:
      003E8A 8B 05            [24]11420 	mov	ar5,r3
                                  11421 ;	.\ecen4350_lcd_v4.c:2689: setCursor(0, 120);
      003E8C 75*00 78         [24]11422 	mov	_setCursor_PARM_2,#0x78
      003E8F 75*01 00         [24]11423 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E92 90 00 00         [24]11424 	mov	dptr,#0x0000
      003E95 C0 05            [24]11425 	push	ar5
      003E97 C0 03            [24]11426 	push	ar3
      003E99 12r04rAA         [24]11427 	lcall	_setCursor
                                  11428 ;	.\ecen4350_lcd_v4.c:2690: setColorWhite();
      003E9C 12r15rD8         [24]11429 	lcall	_setColorWhite
                                  11430 ;	.\ecen4350_lcd_v4.c:2691: LCD_string_write(" Found in\n ");
      003E9F 90r0Cr18         [24]11431 	mov	dptr,#___str_125
      003EA2 75 F0 80         [24]11432 	mov	b,#0x80
      003EA5 12r0FrC4         [24]11433 	lcall	_LCD_string_write
                                  11434 ;	.\ecen4350_lcd_v4.c:2692: setColorDefault();
      003EA8 12r15r88         [24]11435 	lcall	_setColorDefault
                                  11436 ;	.\ecen4350_lcd_v4.c:2693: LCD_string_write("0x");
      003EAB 90r05r29         [24]11437 	mov	dptr,#___str_2
      003EAE 75 F0 80         [24]11438 	mov	b,#0x80
      003EB1 12r0FrC4         [24]11439 	lcall	_LCD_string_write
      003EB4 D0 03            [24]11440 	pop	ar3
                                  11441 ;	.\ecen4350_lcd_v4.c:2694: print8Hex(page);
      003EB6 8B 82            [24]11442 	mov	dpl,r3
      003EB8 12r14r95         [24]11443 	lcall	_print8Hex
                                  11444 ;	.\ecen4350_lcd_v4.c:2695: LCD_string_write(" Bytes (Hex)\n ");
      003EBB 90r0Cr24         [24]11445 	mov	dptr,#___str_126
      003EBE 75 F0 80         [24]11446 	mov	b,#0x80
      003EC1 12r0FrC4         [24]11447 	lcall	_LCD_string_write
      003EC4 D0 05            [24]11448 	pop	ar5
                                  11449 ;	.\ecen4350_lcd_v4.c:2696: exit = 0;
      003EC6 78r1E            [12]11450 	mov	r0,#_count_exit_65536_708
      003EC8 76 00            [12]11451 	mov	@r0,#0x00
      003ECA 02r43r2E         [24]11452 	ljmp	00194$
      003ECD                      11453 00193$:
                                  11454 ;	.\ecen4350_lcd_v4.c:2698: setCursor(0, 60);
      003ECD 75*00 3C         [24]11455 	mov	_setCursor_PARM_2,#0x3c
      003ED0 75*01 00         [24]11456 	mov	(_setCursor_PARM_2 + 1),#0x00
      003ED3 90 00 00         [24]11457 	mov	dptr,#0x0000
      003ED6 C0 05            [24]11458 	push	ar5
      003ED8 12r04rAA         [24]11459 	lcall	_setCursor
                                  11460 ;	.\ecen4350_lcd_v4.c:2699: setColorYellow();
      003EDB 12r15rEE         [24]11461 	lcall	_setColorYellow
                                  11462 ;	.\ecen4350_lcd_v4.c:2700: LCD_string_write(" [Interactive]\n");
      003EDE 90r0ArE2         [24]11463 	mov	dptr,#___str_108
      003EE1 75 F0 80         [24]11464 	mov	b,#0x80
      003EE4 12r0FrC4         [24]11465 	lcall	_LCD_string_write
                                  11466 ;	.\ecen4350_lcd_v4.c:2701: setColorWhite();
      003EE7 12r15rD8         [24]11467 	lcall	_setColorWhite
                                  11468 ;	.\ecen4350_lcd_v4.c:2702: LCD_string_write(" Search Value:\n ");
      003EEA 90r0ArB7         [24]11469 	mov	dptr,#___str_105
      003EED 75 F0 80         [24]11470 	mov	b,#0x80
      003EF0 12r0FrC4         [24]11471 	lcall	_LCD_string_write
                                  11472 ;	.\ecen4350_lcd_v4.c:2703: setColorDefault();
      003EF3 12r15r88         [24]11473 	lcall	_setColorDefault
      003EF6 D0 05            [24]11474 	pop	ar5
                                  11475 ;	.\ecen4350_lcd_v4.c:2706: for (unsigned int i = 0; i < blockSize; i++) {
      003EF8 E4               [12]11476 	clr	a
      003EF9 F5*61            [12]11477 	mov	_count_sloc1_1_0,a
      003EFB F5*62            [12]11478 	mov	(_count_sloc1_1_0 + 1),a
      003EFD                      11479 00211$:
      003EFD 78r1A            [12]11480 	mov	r0,#_count_blockSize_65536_708
      003EFF 86 02            [24]11481 	mov	ar2,@r0
      003F01 7B 00            [12]11482 	mov	r3,#0x00
      003F03 C3               [12]11483 	clr	c
      003F04 E5*61            [12]11484 	mov	a,_count_sloc1_1_0
      003F06 9A               [12]11485 	subb	a,r2
      003F07 E5*62            [12]11486 	mov	a,(_count_sloc1_1_0 + 1)
      003F09 9B               [12]11487 	subb	a,r3
      003F0A 40 03            [24]11488 	jc	00553$
      003F0C 02r43r2E         [24]11489 	ljmp	00194$
      003F0F                      11490 00553$:
                                  11491 ;	.\ecen4350_lcd_v4.c:2707: d = (unsigned char __xdata*)(i+address);
      003F0F 78r18            [12]11492 	mov	r0,#_count_address_65536_708
      003F11 E6               [12]11493 	mov	a,@r0
      003F12 25*61            [12]11494 	add	a,_count_sloc1_1_0
      003F14 FA               [12]11495 	mov	r2,a
      003F15 08               [12]11496 	inc	r0
      003F16 E6               [12]11497 	mov	a,@r0
      003F17 35*62            [12]11498 	addc	a,(_count_sloc1_1_0 + 1)
      003F19 FB               [12]11499 	mov	r3,a
      003F1A 8A 82            [24]11500 	mov	dpl,r2
      003F1C 8B 83            [24]11501 	mov	dph,r3
                                  11502 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                  11503 ;	assignBit
      003F1E C2 B5            [12]11504 	clr	_P3_5
                                  11505 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003F20 E0               [24]11506 	movx	a,@dptr
      003F21 FB               [12]11507 	mov	r3,a
                                  11508 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                  11509 ;	assignBit
      003F22 D2 B5            [12]11510 	setb	_P3_5
                                  11511 ;	.\ecen4350_lcd_v4.c:2708: if(value == ramRead8(d)){
      003F24 78r1B            [12]11512 	mov	r0,#_count_value_65536_708
      003F26 E6               [12]11513 	mov	a,@r0
      003F27 B5 03 02         [24]11514 	cjne	a,ar3,00554$
      003F2A 80 03            [24]11515 	sjmp	00555$
      003F2C                      11516 00554$:
      003F2C 02r43r23         [24]11517 	ljmp	00212$
      003F2F                      11518 00555$:
                                  11519 ;	.\ecen4350_lcd_v4.c:2709: noneFound = 0;		// toggle flag
      003F2F 78r1D            [12]11520 	mov	r0,#_count_noneFound_65536_708
      003F31 76 00            [12]11521 	mov	@r0,#0x00
                                  11522 ;	.\ecen4350_lcd_v4.c:2710: setCursor(0, 120);
      003F33 75*00 78         [24]11523 	mov	_setCursor_PARM_2,#0x78
      003F36 75*01 00         [24]11524 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F39 90 00 00         [24]11525 	mov	dptr,#0x0000
      003F3C C0 05            [24]11526 	push	ar5
      003F3E 12r04rAA         [24]11527 	lcall	_setCursor
                                  11528 ;	.\ecen4350_lcd_v4.c:2711: setColorWhite();
      003F41 12r15rD8         [24]11529 	lcall	_setColorWhite
                                  11530 ;	.\ecen4350_lcd_v4.c:2712: LCD_string_write(" Found at Location \n");
      003F44 90r0ArF2         [24]11531 	mov	dptr,#___str_109
      003F47 75 F0 80         [24]11532 	mov	b,#0x80
      003F4A 12r0FrC4         [24]11533 	lcall	_LCD_string_write
                                  11534 ;	.\ecen4350_lcd_v4.c:2713: setColorDefault();
      003F4D 12r15r88         [24]11535 	lcall	_setColorDefault
                                  11536 ;	.\ecen4350_lcd_v4.c:2714: LCD_string_write(" 0x");
      003F50 90r07r4E         [24]11537 	mov	dptr,#___str_46
      003F53 75 F0 80         [24]11538 	mov	b,#0x80
      003F56 12r0FrC4         [24]11539 	lcall	_LCD_string_write
      003F59 D0 05            [24]11540 	pop	ar5
                                  11541 ;	.\ecen4350_lcd_v4.c:2715: print16Hex(page+address);
      003F5B 8D 02            [24]11542 	mov	ar2,r5
      003F5D 7B 00            [12]11543 	mov	r3,#0x00
      003F5F 78r18            [12]11544 	mov	r0,#_count_address_65536_708
      003F61 E6               [12]11545 	mov	a,@r0
      003F62 2A               [12]11546 	add	a,r2
      003F63 F5 82            [12]11547 	mov	dpl,a
      003F65 08               [12]11548 	inc	r0
      003F66 E6               [12]11549 	mov	a,@r0
      003F67 3B               [12]11550 	addc	a,r3
      003F68 F5 83            [12]11551 	mov	dph,a
      003F6A C0 05            [24]11552 	push	ar5
      003F6C 12r14rAC         [24]11553 	lcall	_print16Hex
                                  11554 ;	.\ecen4350_lcd_v4.c:2716: setCursor(50, 300);
      003F6F 75*00 2C         [24]11555 	mov	_setCursor_PARM_2,#0x2c
      003F72 75*01 01         [24]11556 	mov	(_setCursor_PARM_2 + 1),#0x01
      003F75 90 00 32         [24]11557 	mov	dptr,#0x0032
      003F78 12r04rAA         [24]11558 	lcall	_setCursor
                                  11559 ;	.\ecen4350_lcd_v4.c:2717: setColorGray();
      003F7B 12r15rB6         [24]11560 	lcall	_setColorGray
                                  11561 ;	.\ecen4350_lcd_v4.c:2718: LCD_string_write("Count: ");
      003F7E 90r0Cr33         [24]11562 	mov	dptr,#___str_127
      003F81 75 F0 80         [24]11563 	mov	b,#0x80
      003F84 12r0FrC4         [24]11564 	lcall	_LCD_string_write
                                  11565 ;	.\ecen4350_lcd_v4.c:2719: setColorHighlight2();
      003F87 12r15rAA         [24]11566 	lcall	_setColorHighlight2
      003F8A D0 05            [24]11567 	pop	ar5
                                  11568 ;	.\ecen4350_lcd_v4.c:2720: print8Hex(page+1);
      003F8C 8D 03            [24]11569 	mov	ar3,r5
      003F8E EB               [12]11570 	mov	a,r3
      003F8F 04               [12]11571 	inc	a
      003F90 F5 82            [12]11572 	mov	dpl,a
      003F92 C0 05            [24]11573 	push	ar5
      003F94 12r14r95         [24]11574 	lcall	_print8Hex
      003F97 D0 05            [24]11575 	pop	ar5
                                  11576 ;	.\ecen4350_lcd_v4.c:2724: if (i == 0) {					// At beginning, page <0>
      003F99 E5*61            [12]11577 	mov	a,_count_sloc1_1_0
      003F9B 45*62            [12]11578 	orl	a,(_count_sloc1_1_0 + 1)
      003F9D 60 03            [24]11579 	jz	00556$
      003F9F 02r40rCE         [24]11580 	ljmp	00187$
      003FA2                      11581 00556$:
                                  11582 ;	.\ecen4350_lcd_v4.c:2725: if (i != blockSize - 1) {	// not at the end yet, no previous page
      003FA2 C0 05            [24]11583 	push	ar5
      003FA4 78r1A            [12]11584 	mov	r0,#_count_blockSize_65536_708
      003FA6 86 02            [24]11585 	mov	ar2,@r0
      003FA8 7B 00            [12]11586 	mov	r3,#0x00
      003FAA EA               [12]11587 	mov	a,r2
      003FAB 24 FF            [12]11588 	add	a,#0xff
      003FAD FD               [12]11589 	mov	r5,a
      003FAE EB               [12]11590 	mov	a,r3
      003FAF 34 FF            [12]11591 	addc	a,#0xff
      003FB1 FF               [12]11592 	mov	r7,a
      003FB2 ED               [12]11593 	mov	a,r5
      003FB3 B5*61 09         [24]11594 	cjne	a,_count_sloc1_1_0,00557$
      003FB6 EF               [12]11595 	mov	a,r7
      003FB7 B5*62 05         [24]11596 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      003FBA D0 05            [24]11597 	pop	ar5
      003FBC 02r40r4F         [24]11598 	ljmp	00145$
      003FBF                      11599 00557$:
                                  11600 ;	.\ecen4350_lcd_v4.c:2726: setCursor(0, 180);
      003FBF 75*00 B4         [24]11601 	mov	_setCursor_PARM_2,#0xb4
      003FC2 75*01 00         [24]11602 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FC5 90 00 00         [24]11603 	mov	dptr,#0x0000
      003FC8 12r04rAA         [24]11604 	lcall	_setCursor
                                  11605 ;	.\ecen4350_lcd_v4.c:2727: setColorWhite();
      003FCB 12r15rD8         [24]11606 	lcall	_setColorWhite
                                  11607 ;	.\ecen4350_lcd_v4.c:2728: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      003FCE 90r0Br0E         [24]11608 	mov	dptr,#___str_111
      003FD1 75 F0 80         [24]11609 	mov	b,#0x80
      003FD4 12r0FrC4         [24]11610 	lcall	_LCD_string_write
      003FD7 D0 05            [24]11611 	pop	ar5
                                  11612 ;	.\ecen4350_lcd_v4.c:2729: invalidInput = 1;
      003FD9 7F 01            [12]11613 	mov	r7,#0x01
                                  11614 ;	.\ecen4350_lcd_v4.c:2730: while (invalidInput) {
      003FDB 8D*60            [24]11615 	mov	_count_sloc0_1_0,r5
      003FDD                      11616 00134$:
      003FDD EF               [12]11617 	mov	a,r7
      003FDE 70 03            [24]11618 	jnz	00558$
      003FE0 02r40rC1         [24]11619 	ljmp	00268$
      003FE3                      11620 00558$:
                                  11621 ;	.\ecen4350_lcd_v4.c:2731: selection = keyDetect();
      003FE3 C0 07            [24]11622 	push	ar7
      003FE5 12r10rE2         [24]11623 	lcall	_keyDetect
      003FE8 AF 82            [24]11624 	mov	r7,dpl
      003FEA 78r00            [12]11625 	mov	r0,#_selection
      003FEC A6 07            [24]11626 	mov	@r0,ar7
                                  11627 ;	.\ecen4350_lcd_v4.c:2732: if(selection == '1'){
      003FEE BF 31 02         [24]11628 	cjne	r7,#0x31,00559$
      003FF1 80 04            [24]11629 	sjmp	00560$
      003FF3                      11630 00559$:
      003FF3 D0 07            [24]11631 	pop	ar7
      003FF5 80 27            [24]11632 	sjmp	00131$
      003FF7                      11633 00560$:
      003FF7 D0 07            [24]11634 	pop	ar7
                                  11635 ;	.\ecen4350_lcd_v4.c:2733: setCursor(0, 180);
      003FF9 75*00 B4         [24]11636 	mov	_setCursor_PARM_2,#0xb4
      003FFC 75*01 00         [24]11637 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FFF 90 00 00         [24]11638 	mov	dptr,#0x0000
      004002 12r04rAA         [24]11639 	lcall	_setCursor
                                  11640 ;	.\ecen4350_lcd_v4.c:2734: LCD_string_write(" ");
      004005 90r06r54         [24]11641 	mov	dptr,#___str_30
      004008 75 F0 80         [24]11642 	mov	b,#0x80
      00400B 12r0FrC4         [24]11643 	lcall	_LCD_string_write
                                  11644 ;	.\ecen4350_lcd_v4.c:2735: setColorHighlight2();
      00400E 12r15rAA         [24]11645 	lcall	_setColorHighlight2
                                  11646 ;	.\ecen4350_lcd_v4.c:2736: LCD_string_write("<1> Next");
      004011 90r0Br31         [24]11647 	mov	dptr,#___str_112
      004014 75 F0 80         [24]11648 	mov	b,#0x80
      004017 12r0FrC4         [24]11649 	lcall	_LCD_string_write
                                  11650 ;	.\ecen4350_lcd_v4.c:2737: invalidInput = 0;
      00401A 7F 00            [12]11651 	mov	r7,#0x00
                                  11652 ;	.\ecen4350_lcd_v4.c:2738: page++;
      00401C 05*60            [12]11653 	inc	_count_sloc0_1_0
      00401E                      11654 00131$:
                                  11655 ;	.\ecen4350_lcd_v4.c:2739: } if(selection == '0') {
      00401E 78r00            [12]11656 	mov	r0,#_selection
      004020 B6 30 BA         [24]11657 	cjne	@r0,#0x30,00134$
                                  11658 ;	.\ecen4350_lcd_v4.c:2740: setColorDefault();
      004023 12r15r88         [24]11659 	lcall	_setColorDefault
                                  11660 ;	.\ecen4350_lcd_v4.c:2741: setCursor(0, 180);
      004026 75*00 B4         [24]11661 	mov	_setCursor_PARM_2,#0xb4
      004029 75*01 00         [24]11662 	mov	(_setCursor_PARM_2 + 1),#0x00
      00402C 90 00 00         [24]11663 	mov	dptr,#0x0000
      00402F 12r04rAA         [24]11664 	lcall	_setCursor
                                  11665 ;	.\ecen4350_lcd_v4.c:2742: LCD_string_write("\n ");
      004032 90r08r5F         [24]11666 	mov	dptr,#___str_67
      004035 75 F0 80         [24]11667 	mov	b,#0x80
      004038 12r0FrC4         [24]11668 	lcall	_LCD_string_write
                                  11669 ;	.\ecen4350_lcd_v4.c:2743: setColorHighlight2();
      00403B 12r15rAA         [24]11670 	lcall	_setColorHighlight2
                                  11671 ;	.\ecen4350_lcd_v4.c:2744: LCD_string_write("<0> Exit");
      00403E 90r09r1A         [24]11672 	mov	dptr,#___str_78
      004041 75 F0 80         [24]11673 	mov	b,#0x80
      004044 12r0FrC4         [24]11674 	lcall	_LCD_string_write
                                  11675 ;	.\ecen4350_lcd_v4.c:2745: exit = 0;		// set exit flag
      004047 78r1E            [12]11676 	mov	r0,#_count_exit_65536_708
      004049 76 00            [12]11677 	mov	@r0,#0x00
                                  11678 ;	.\ecen4350_lcd_v4.c:2746: invalidInput = 0;
      00404B 7F 00            [12]11679 	mov	r7,#0x00
      00404D 80 8E            [24]11680 	sjmp	00134$
      00404F                      11681 00145$:
                                  11682 ;	.\ecen4350_lcd_v4.c:2749: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      00404F 1A               [12]11683 	dec	r2
      004050 BA FF 01         [24]11684 	cjne	r2,#0xff,00563$
      004053 1B               [12]11685 	dec	r3
      004054                      11686 00563$:
      004054 EA               [12]11687 	mov	a,r2
      004055 B5*61 6B         [24]11688 	cjne	a,_count_sloc1_1_0,00146$
      004058 EB               [12]11689 	mov	a,r3
      004059 B5*62 67         [24]11690 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11691 ;	.\ecen4350_lcd_v4.c:2750: setCursor(0, 180);
      00405C 75*00 B4         [24]11692 	mov	_setCursor_PARM_2,#0xb4
      00405F 75*01 00         [24]11693 	mov	(_setCursor_PARM_2 + 1),#0x00
      004062 90 00 00         [24]11694 	mov	dptr,#0x0000
      004065 C0 05            [24]11695 	push	ar5
      004067 12r04rAA         [24]11696 	lcall	_setCursor
                                  11697 ;	.\ecen4350_lcd_v4.c:2751: setColorWhite();
      00406A 12r15rD8         [24]11698 	lcall	_setColorWhite
                                  11699 ;	.\ecen4350_lcd_v4.c:2752: LCD_string_write("          \n <0> Exit\n              ");
      00406D 90r0Br3A         [24]11700 	mov	dptr,#___str_113
      004070 75 F0 80         [24]11701 	mov	b,#0x80
      004073 12r0FrC4         [24]11702 	lcall	_LCD_string_write
      004076 D0 05            [24]11703 	pop	ar5
                                  11704 ;	.\ecen4350_lcd_v4.c:2753: invalidInput = 1;
      004078 7F 01            [12]11705 	mov	r7,#0x01
                                  11706 ;	.\ecen4350_lcd_v4.c:2754: while (invalidInput) {
      00407A                      11707 00139$:
      00407A EF               [12]11708 	mov	a,r7
      00407B 60 46            [24]11709 	jz	00146$
                                  11710 ;	.\ecen4350_lcd_v4.c:2755: selection = keyDetect();
      00407D C0 07            [24]11711 	push	ar7
      00407F C0 05            [24]11712 	push	ar5
      004081 12r10rE2         [24]11713 	lcall	_keyDetect
      004084 AB 82            [24]11714 	mov	r3,dpl
      004086 D0 05            [24]11715 	pop	ar5
      004088 D0 07            [24]11716 	pop	ar7
      00408A 78r00            [12]11717 	mov	r0,#_selection
      00408C A6 03            [24]11718 	mov	@r0,ar3
                                  11719 ;	.\ecen4350_lcd_v4.c:2756: if(selection == '0') {
      00408E BB 30 E9         [24]11720 	cjne	r3,#0x30,00139$
                                  11721 ;	.\ecen4350_lcd_v4.c:2757: setColorDefault();
      004091 C0 05            [24]11722 	push	ar5
      004093 12r15r88         [24]11723 	lcall	_setColorDefault
                                  11724 ;	.\ecen4350_lcd_v4.c:2758: setCursor(0, 180);
      004096 75*00 B4         [24]11725 	mov	_setCursor_PARM_2,#0xb4
      004099 75*01 00         [24]11726 	mov	(_setCursor_PARM_2 + 1),#0x00
      00409C 90 00 00         [24]11727 	mov	dptr,#0x0000
      00409F 12r04rAA         [24]11728 	lcall	_setCursor
                                  11729 ;	.\ecen4350_lcd_v4.c:2759: LCD_string_write("\n ");
      0040A2 90r08r5F         [24]11730 	mov	dptr,#___str_67
      0040A5 75 F0 80         [24]11731 	mov	b,#0x80
      0040A8 12r0FrC4         [24]11732 	lcall	_LCD_string_write
                                  11733 ;	.\ecen4350_lcd_v4.c:2760: setColorHighlight2();
      0040AB 12r15rAA         [24]11734 	lcall	_setColorHighlight2
                                  11735 ;	.\ecen4350_lcd_v4.c:2761: LCD_string_write("<0> Exit");
      0040AE 90r09r1A         [24]11736 	mov	dptr,#___str_78
      0040B1 75 F0 80         [24]11737 	mov	b,#0x80
      0040B4 12r0FrC4         [24]11738 	lcall	_LCD_string_write
      0040B7 D0 05            [24]11739 	pop	ar5
                                  11740 ;	.\ecen4350_lcd_v4.c:2762: exit = 0;		// set exit flag
      0040B9 78r1E            [12]11741 	mov	r0,#_count_exit_65536_708
      0040BB 76 00            [12]11742 	mov	@r0,#0x00
                                  11743 ;	.\ecen4350_lcd_v4.c:2763: invalidInput = 0;
      0040BD 7F 00            [12]11744 	mov	r7,#0x00
      0040BF 80 B9            [24]11745 	sjmp	00139$
      0040C1                      11746 00268$:
      0040C1 AD*60            [24]11747 	mov	r5,_count_sloc0_1_0
      0040C3                      11748 00146$:
                                  11749 ;	.\ecen4350_lcd_v4.c:2767: if (exit == 0) {	// check exit flag
      0040C3 78r1E            [12]11750 	mov	r0,#_count_exit_65536_708
      0040C5 E6               [12]11751 	mov	a,@r0
      0040C6 60 03            [24]11752 	jz	00569$
      0040C8 02r43r23         [24]11753 	ljmp	00212$
      0040CB                      11754 00569$:
                                  11755 ;	.\ecen4350_lcd_v4.c:2768: break;			// break out of for loop iteration
      0040CB 02r43r2E         [24]11756 	ljmp	00194$
      0040CE                      11757 00187$:
                                  11758 ;	.\ecen4350_lcd_v4.c:2773: else if (i == blockSize - 1) {		// At Page End 
      0040CE C0 05            [24]11759 	push	ar5
      0040D0 78r1A            [12]11760 	mov	r0,#_count_blockSize_65536_708
      0040D2 86 03            [24]11761 	mov	ar3,@r0
      0040D4 7F 00            [12]11762 	mov	r7,#0x00
      0040D6 EB               [12]11763 	mov	a,r3
      0040D7 24 FF            [12]11764 	add	a,#0xff
      0040D9 FA               [12]11765 	mov	r2,a
      0040DA EF               [12]11766 	mov	a,r7
      0040DB 34 FF            [12]11767 	addc	a,#0xff
      0040DD FD               [12]11768 	mov	r5,a
      0040DE EA               [12]11769 	mov	a,r2
      0040DF B5*61 06         [24]11770 	cjne	a,_count_sloc1_1_0,00570$
      0040E2 ED               [12]11771 	mov	a,r5
      0040E3 B5*62 02         [24]11772 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      0040E6 80 05            [24]11773 	sjmp	00571$
      0040E8                      11774 00570$:
      0040E8 D0 05            [24]11775 	pop	ar5
      0040EA 02r42r1A         [24]11776 	ljmp	00184$
      0040ED                      11777 00571$:
      0040ED D0 05            [24]11778 	pop	ar5
                                  11779 ;	.\ecen4350_lcd_v4.c:2774: if (i != 0) {				// not at beginning, no next page
      0040EF E5*61            [12]11780 	mov	a,_count_sloc1_1_0
      0040F1 45*62            [12]11781 	orl	a,(_count_sloc1_1_0 + 1)
      0040F3 70 03            [24]11782 	jnz	00572$
      0040F5 02r41rA3         [24]11783 	ljmp	00164$
      0040F8                      11784 00572$:
                                  11785 ;	.\ecen4350_lcd_v4.c:2775: setCursor(0, 180);
      0040F8 75*00 B4         [24]11786 	mov	_setCursor_PARM_2,#0xb4
      0040FB 75*01 00         [24]11787 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040FE 90 00 00         [24]11788 	mov	dptr,#0x0000
      004101 C0 05            [24]11789 	push	ar5
      004103 12r04rAA         [24]11790 	lcall	_setCursor
                                  11791 ;	.\ecen4350_lcd_v4.c:2776: setColorWhite();
      004106 12r15rD8         [24]11792 	lcall	_setColorWhite
                                  11793 ;	.\ecen4350_lcd_v4.c:2777: LCD_string_write("          \n <0> Exit\n <2> Previous");
      004109 90r0Br5E         [24]11794 	mov	dptr,#___str_114
      00410C 75 F0 80         [24]11795 	mov	b,#0x80
      00410F 12r0FrC4         [24]11796 	lcall	_LCD_string_write
      004112 D0 05            [24]11797 	pop	ar5
                                  11798 ;	.\ecen4350_lcd_v4.c:2778: invalidInput = 1;
      004114 7F 01            [12]11799 	mov	r7,#0x01
                                  11800 ;	.\ecen4350_lcd_v4.c:2779: while (invalidInput) {
      004116 8D*60            [24]11801 	mov	_count_sloc0_1_0,r5
      004118                      11802 00153$:
      004118 EF               [12]11803 	mov	a,r7
      004119 70 03            [24]11804 	jnz	00573$
      00411B 02r42r0D         [24]11805 	ljmp	00269$
      00411E                      11806 00573$:
                                  11807 ;	.\ecen4350_lcd_v4.c:2780: selection = keyDetect();
      00411E C0 07            [24]11808 	push	ar7
      004120 C0 07            [24]11809 	push	ar7
      004122 12r10rE2         [24]11810 	lcall	_keyDetect
      004125 AA 82            [24]11811 	mov	r2,dpl
      004127 D0 07            [24]11812 	pop	ar7
      004129 78r00            [12]11813 	mov	r0,#_selection
      00412B A6 02            [24]11814 	mov	@r0,ar2
                                  11815 ;	.\ecen4350_lcd_v4.c:2781: if(selection == '0'){
      00412D BA 30 02         [24]11816 	cjne	r2,#0x30,00574$
      004130 80 04            [24]11817 	sjmp	00575$
      004132                      11818 00574$:
      004132 D0 07            [24]11819 	pop	ar7
      004134 80 29            [24]11820 	sjmp	00150$
      004136                      11821 00575$:
      004136 D0 07            [24]11822 	pop	ar7
                                  11823 ;	.\ecen4350_lcd_v4.c:2782: setCursor(0, 180);
      004138 75*00 B4         [24]11824 	mov	_setCursor_PARM_2,#0xb4
      00413B 75*01 00         [24]11825 	mov	(_setCursor_PARM_2 + 1),#0x00
      00413E 90 00 00         [24]11826 	mov	dptr,#0x0000
      004141 12r04rAA         [24]11827 	lcall	_setCursor
                                  11828 ;	.\ecen4350_lcd_v4.c:2783: LCD_string_write("\n ");
      004144 90r08r5F         [24]11829 	mov	dptr,#___str_67
      004147 75 F0 80         [24]11830 	mov	b,#0x80
      00414A 12r0FrC4         [24]11831 	lcall	_LCD_string_write
                                  11832 ;	.\ecen4350_lcd_v4.c:2784: setColorHighlight2();
      00414D 12r15rAA         [24]11833 	lcall	_setColorHighlight2
                                  11834 ;	.\ecen4350_lcd_v4.c:2785: LCD_string_write("<0> Exit\n");
      004150 90r07r94         [24]11835 	mov	dptr,#___str_54
      004153 75 F0 80         [24]11836 	mov	b,#0x80
      004156 12r0FrC4         [24]11837 	lcall	_LCD_string_write
                                  11838 ;	.\ecen4350_lcd_v4.c:2786: invalidInput = 0;
      004159 7F 00            [12]11839 	mov	r7,#0x00
                                  11840 ;	.\ecen4350_lcd_v4.c:2787: exit = 0;
      00415B 78r1E            [12]11841 	mov	r0,#_count_exit_65536_708
      00415D 76 00            [12]11842 	mov	@r0,#0x00
      00415F                      11843 00150$:
                                  11844 ;	.\ecen4350_lcd_v4.c:2788: } if (selection == '2') {
      00415F 78r00            [12]11845 	mov	r0,#_selection
      004161 B6 32 B4         [24]11846 	cjne	@r0,#0x32,00153$
                                  11847 ;	.\ecen4350_lcd_v4.c:2789: setCursor(0, 180);
      004164 75*00 B4         [24]11848 	mov	_setCursor_PARM_2,#0xb4
      004167 75*01 00         [24]11849 	mov	(_setCursor_PARM_2 + 1),#0x00
      00416A 90 00 00         [24]11850 	mov	dptr,#0x0000
      00416D 12r04rAA         [24]11851 	lcall	_setCursor
                                  11852 ;	.\ecen4350_lcd_v4.c:2790: setColorWhite();
      004170 12r15rD8         [24]11853 	lcall	_setColorWhite
                                  11854 ;	.\ecen4350_lcd_v4.c:2791: LCD_string_write("\n\n ");
      004173 90r0Br81         [24]11855 	mov	dptr,#___str_115
      004176 75 F0 80         [24]11856 	mov	b,#0x80
      004179 12r0FrC4         [24]11857 	lcall	_LCD_string_write
                                  11858 ;	.\ecen4350_lcd_v4.c:2792: setColorHighlight2();
      00417C 12r15rAA         [24]11859 	lcall	_setColorHighlight2
                                  11860 ;	.\ecen4350_lcd_v4.c:2793: LCD_string_write("<2> Previous");
      00417F 90r0Br85         [24]11861 	mov	dptr,#___str_116
      004182 75 F0 80         [24]11862 	mov	b,#0x80
      004185 12r0FrC4         [24]11863 	lcall	_LCD_string_write
                                  11864 ;	.\ecen4350_lcd_v4.c:2794: invalidInput = 0;
      004188 7F 00            [12]11865 	mov	r7,#0x00
                                  11866 ;	.\ecen4350_lcd_v4.c:2795: i--;			// two decrements plus next loop increment is equal to one decrement
      00418A E5*61            [12]11867 	mov	a,_count_sloc1_1_0
      00418C 24 FF            [12]11868 	add	a,#0xff
      00418E FA               [12]11869 	mov	r2,a
      00418F E5*62            [12]11870 	mov	a,(_count_sloc1_1_0 + 1)
      004191 34 FF            [12]11871 	addc	a,#0xff
      004193 FE               [12]11872 	mov	r6,a
                                  11873 ;	.\ecen4350_lcd_v4.c:2796: i--;
      004194 EA               [12]11874 	mov	a,r2
      004195 24 FF            [12]11875 	add	a,#0xff
      004197 F5*61            [12]11876 	mov	_count_sloc1_1_0,a
      004199 EE               [12]11877 	mov	a,r6
      00419A 34 FF            [12]11878 	addc	a,#0xff
      00419C F5*62            [12]11879 	mov	(_count_sloc1_1_0 + 1),a
                                  11880 ;	.\ecen4350_lcd_v4.c:2797: page--;			// decrement to previous page
      00419E 15*60            [12]11881 	dec	_count_sloc0_1_0
      0041A0 02r41r18         [24]11882 	ljmp	00153$
      0041A3                      11883 00164$:
                                  11884 ;	.\ecen4350_lcd_v4.c:2801: else if (i == 0){				// end at beginning, no next or previous
      0041A3 E5*61            [12]11885 	mov	a,_count_sloc1_1_0
      0041A5 45*62            [12]11886 	orl	a,(_count_sloc1_1_0 + 1)
                                  11887 ;	.\ecen4350_lcd_v4.c:2802: setCursor(0, 180);
      0041A7 70 66            [24]11888 	jnz	00165$
      0041A9 75*00 B4         [24]11889 	mov	_setCursor_PARM_2,#0xb4
      0041AC F5*01            [12]11890 	mov	(_setCursor_PARM_2 + 1),a
      0041AE 90 00 00         [24]11891 	mov	dptr,#0x0000
      0041B1 C0 05            [24]11892 	push	ar5
      0041B3 12r04rAA         [24]11893 	lcall	_setCursor
                                  11894 ;	.\ecen4350_lcd_v4.c:2803: setColorWhite();
      0041B6 12r15rD8         [24]11895 	lcall	_setColorWhite
                                  11896 ;	.\ecen4350_lcd_v4.c:2804: LCD_string_write("          \n <0> Exit\n              ");
      0041B9 90r0Br3A         [24]11897 	mov	dptr,#___str_113
      0041BC 75 F0 80         [24]11898 	mov	b,#0x80
      0041BF 12r0FrC4         [24]11899 	lcall	_LCD_string_write
      0041C2 D0 05            [24]11900 	pop	ar5
                                  11901 ;	.\ecen4350_lcd_v4.c:2805: invalidInput = 1;
      0041C4 7E 01            [12]11902 	mov	r6,#0x01
                                  11903 ;	.\ecen4350_lcd_v4.c:2806: while (invalidInput) {
      0041C6                      11904 00158$:
      0041C6 EE               [12]11905 	mov	a,r6
      0041C7 60 46            [24]11906 	jz	00165$
                                  11907 ;	.\ecen4350_lcd_v4.c:2807: selection = keyDetect();
      0041C9 C0 06            [24]11908 	push	ar6
      0041CB C0 05            [24]11909 	push	ar5
      0041CD 12r10rE2         [24]11910 	lcall	_keyDetect
      0041D0 AC 82            [24]11911 	mov	r4,dpl
      0041D2 D0 05            [24]11912 	pop	ar5
      0041D4 D0 06            [24]11913 	pop	ar6
      0041D6 78r00            [12]11914 	mov	r0,#_selection
      0041D8 A6 04            [24]11915 	mov	@r0,ar4
                                  11916 ;	.\ecen4350_lcd_v4.c:2808: if(selection == '0') {
      0041DA BC 30 E9         [24]11917 	cjne	r4,#0x30,00158$
                                  11918 ;	.\ecen4350_lcd_v4.c:2809: setColorDefault();
      0041DD C0 05            [24]11919 	push	ar5
      0041DF 12r15r88         [24]11920 	lcall	_setColorDefault
                                  11921 ;	.\ecen4350_lcd_v4.c:2810: setCursor(0, 180);
      0041E2 75*00 B4         [24]11922 	mov	_setCursor_PARM_2,#0xb4
      0041E5 75*01 00         [24]11923 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041E8 90 00 00         [24]11924 	mov	dptr,#0x0000
      0041EB 12r04rAA         [24]11925 	lcall	_setCursor
                                  11926 ;	.\ecen4350_lcd_v4.c:2811: LCD_string_write("\n ");
      0041EE 90r08r5F         [24]11927 	mov	dptr,#___str_67
      0041F1 75 F0 80         [24]11928 	mov	b,#0x80
      0041F4 12r0FrC4         [24]11929 	lcall	_LCD_string_write
                                  11930 ;	.\ecen4350_lcd_v4.c:2812: setColorHighlight2();
      0041F7 12r15rAA         [24]11931 	lcall	_setColorHighlight2
                                  11932 ;	.\ecen4350_lcd_v4.c:2813: LCD_string_write("<0> Exit");
      0041FA 90r09r1A         [24]11933 	mov	dptr,#___str_78
      0041FD 75 F0 80         [24]11934 	mov	b,#0x80
      004200 12r0FrC4         [24]11935 	lcall	_LCD_string_write
      004203 D0 05            [24]11936 	pop	ar5
                                  11937 ;	.\ecen4350_lcd_v4.c:2814: exit = 0;		// set exit flag
      004205 78r1E            [12]11938 	mov	r0,#_count_exit_65536_708
      004207 76 00            [12]11939 	mov	@r0,#0x00
                                  11940 ;	.\ecen4350_lcd_v4.c:2815: invalidInput = 0;
      004209 7E 00            [12]11941 	mov	r6,#0x00
      00420B 80 B9            [24]11942 	sjmp	00158$
      00420D                      11943 00269$:
      00420D AD*60            [24]11944 	mov	r5,_count_sloc0_1_0
      00420F                      11945 00165$:
                                  11946 ;	.\ecen4350_lcd_v4.c:2819: if (exit == 0) {	// check exit flag
      00420F 78r1E            [12]11947 	mov	r0,#_count_exit_65536_708
      004211 E6               [12]11948 	mov	a,@r0
      004212 60 03            [24]11949 	jz	00582$
      004214 02r43r23         [24]11950 	ljmp	00212$
      004217                      11951 00582$:
                                  11952 ;	.\ecen4350_lcd_v4.c:2820: break;			// break out of for loop iteration
      004217 02r43r2E         [24]11953 	ljmp	00194$
      00421A                      11954 00184$:
                                  11955 ;	.\ecen4350_lcd_v4.c:2825: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00421A 1B               [12]11956 	dec	r3
      00421B BB FF 01         [24]11957 	cjne	r3,#0xff,00583$
      00421E 1F               [12]11958 	dec	r7
      00421F                      11959 00583$:
      00421F EB               [12]11960 	mov	a,r3
      004220 B5*61 07         [24]11961 	cjne	a,_count_sloc1_1_0,00584$
      004223 EF               [12]11962 	mov	a,r7
      004224 B5*62 03         [24]11963 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      004227 02r43r23         [24]11964 	ljmp	00212$
      00422A                      11965 00584$:
                                  11966 ;	.\ecen4350_lcd_v4.c:2826: if (i != 0) {
      00422A E5*61            [12]11967 	mov	a,_count_sloc1_1_0
      00422C 45*62            [12]11968 	orl	a,(_count_sloc1_1_0 + 1)
      00422E 70 03            [24]11969 	jnz	00585$
      004230 02r43r1E         [24]11970 	ljmp	00178$
      004233                      11971 00585$:
                                  11972 ;	.\ecen4350_lcd_v4.c:2827: setCursor(0, 180);
      004233 75*00 B4         [24]11973 	mov	_setCursor_PARM_2,#0xb4
      004236 75*01 00         [24]11974 	mov	(_setCursor_PARM_2 + 1),#0x00
      004239 90 00 00         [24]11975 	mov	dptr,#0x0000
      00423C C0 05            [24]11976 	push	ar5
      00423E 12r04rAA         [24]11977 	lcall	_setCursor
                                  11978 ;	.\ecen4350_lcd_v4.c:2828: setColorWhite();
      004241 12r15rD8         [24]11979 	lcall	_setColorWhite
                                  11980 ;	.\ecen4350_lcd_v4.c:2829: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      004244 90r0Br92         [24]11981 	mov	dptr,#___str_117
      004247 75 F0 80         [24]11982 	mov	b,#0x80
      00424A 12r0FrC4         [24]11983 	lcall	_LCD_string_write
      00424D D0 05            [24]11984 	pop	ar5
                                  11985 ;	.\ecen4350_lcd_v4.c:2830: invalidInput = 1;
      00424F 7F 01            [12]11986 	mov	r7,#0x01
                                  11987 ;	.\ecen4350_lcd_v4.c:2831: while (invalidInput) {
      004251                      11988 00174$:
      004251 EF               [12]11989 	mov	a,r7
      004252 70 03            [24]11990 	jnz	00586$
      004254 02r43r1E         [24]11991 	ljmp	00178$
      004257                      11992 00586$:
                                  11993 ;	.\ecen4350_lcd_v4.c:2832: selection = keyDetect();
      004257 C0 07            [24]11994 	push	ar7
      004259 C0 05            [24]11995 	push	ar5
      00425B 12r10rE2         [24]11996 	lcall	_keyDetect
      00425E AE 82            [24]11997 	mov	r6,dpl
      004260 D0 05            [24]11998 	pop	ar5
      004262 D0 07            [24]11999 	pop	ar7
      004264 78r00            [12]12000 	mov	r0,#_selection
      004266 A6 06            [24]12001 	mov	@r0,ar6
                                  12002 ;	.\ecen4350_lcd_v4.c:2833: if (selection == '1') {
      004268 BE 31 28         [24]12003 	cjne	r6,#0x31,00169$
                                  12004 ;	.\ecen4350_lcd_v4.c:2834: setCursor(0, 180);
      00426B 75*00 B4         [24]12005 	mov	_setCursor_PARM_2,#0xb4
      00426E 75*01 00         [24]12006 	mov	(_setCursor_PARM_2 + 1),#0x00
      004271 90 00 00         [24]12007 	mov	dptr,#0x0000
      004274 C0 05            [24]12008 	push	ar5
      004276 12r04rAA         [24]12009 	lcall	_setCursor
                                  12010 ;	.\ecen4350_lcd_v4.c:2835: LCD_string_write(" ");
      004279 90r06r54         [24]12011 	mov	dptr,#___str_30
      00427C 75 F0 80         [24]12012 	mov	b,#0x80
      00427F 12r0FrC4         [24]12013 	lcall	_LCD_string_write
                                  12014 ;	.\ecen4350_lcd_v4.c:2836: setColorHighlight2();
      004282 12r15rAA         [24]12015 	lcall	_setColorHighlight2
                                  12016 ;	.\ecen4350_lcd_v4.c:2837: LCD_string_write("<1> Next");
      004285 90r0Br31         [24]12017 	mov	dptr,#___str_112
      004288 75 F0 80         [24]12018 	mov	b,#0x80
      00428B 12r0FrC4         [24]12019 	lcall	_LCD_string_write
      00428E D0 05            [24]12020 	pop	ar5
                                  12021 ;	.\ecen4350_lcd_v4.c:2838: invalidInput = 0;
      004290 7F 00            [12]12022 	mov	r7,#0x00
                                  12023 ;	.\ecen4350_lcd_v4.c:2839: page++;
      004292 0D               [12]12024 	inc	r5
      004293                      12025 00169$:
                                  12026 ;	.\ecen4350_lcd_v4.c:2840: } if (selection == '2') {
      004293 78r00            [12]12027 	mov	r0,#_selection
      004295 B6 32 3F         [24]12028 	cjne	@r0,#0x32,00171$
                                  12029 ;	.\ecen4350_lcd_v4.c:2841: setCursor(0, 180);
      004298 75*00 B4         [24]12030 	mov	_setCursor_PARM_2,#0xb4
      00429B 75*01 00         [24]12031 	mov	(_setCursor_PARM_2 + 1),#0x00
      00429E 90 00 00         [24]12032 	mov	dptr,#0x0000
      0042A1 C0 05            [24]12033 	push	ar5
      0042A3 12r04rAA         [24]12034 	lcall	_setCursor
                                  12035 ;	.\ecen4350_lcd_v4.c:2842: setColorWhite();
      0042A6 12r15rD8         [24]12036 	lcall	_setColorWhite
                                  12037 ;	.\ecen4350_lcd_v4.c:2843: LCD_string_write("\n\n ");
      0042A9 90r0Br81         [24]12038 	mov	dptr,#___str_115
      0042AC 75 F0 80         [24]12039 	mov	b,#0x80
      0042AF 12r0FrC4         [24]12040 	lcall	_LCD_string_write
                                  12041 ;	.\ecen4350_lcd_v4.c:2844: setColorHighlight2();
      0042B2 12r15rAA         [24]12042 	lcall	_setColorHighlight2
                                  12043 ;	.\ecen4350_lcd_v4.c:2845: LCD_string_write("<2> Previous");
      0042B5 90r0Br85         [24]12044 	mov	dptr,#___str_116
      0042B8 75 F0 80         [24]12045 	mov	b,#0x80
      0042BB 12r0FrC4         [24]12046 	lcall	_LCD_string_write
      0042BE D0 05            [24]12047 	pop	ar5
                                  12048 ;	.\ecen4350_lcd_v4.c:2846: invalidInput = 0;
      0042C0 7F 00            [12]12049 	mov	r7,#0x00
                                  12050 ;	.\ecen4350_lcd_v4.c:2847: i--;
      0042C2 E5*61            [12]12051 	mov	a,_count_sloc1_1_0
      0042C4 24 FF            [12]12052 	add	a,#0xff
      0042C6 FC               [12]12053 	mov	r4,a
      0042C7 E5*62            [12]12054 	mov	a,(_count_sloc1_1_0 + 1)
      0042C9 34 FF            [12]12055 	addc	a,#0xff
      0042CB FE               [12]12056 	mov	r6,a
                                  12057 ;	.\ecen4350_lcd_v4.c:2848: i--;		// two decrements plus next loop increment is equal to one decrement
      0042CC EC               [12]12058 	mov	a,r4
      0042CD 24 FF            [12]12059 	add	a,#0xff
      0042CF F5*61            [12]12060 	mov	_count_sloc1_1_0,a
      0042D1 EE               [12]12061 	mov	a,r6
      0042D2 34 FF            [12]12062 	addc	a,#0xff
      0042D4 F5*62            [12]12063 	mov	(_count_sloc1_1_0 + 1),a
                                  12064 ;	.\ecen4350_lcd_v4.c:2849: page--;		// decrement to previous page
      0042D6 1D               [12]12065 	dec	r5
      0042D7                      12066 00171$:
                                  12067 ;	.\ecen4350_lcd_v4.c:2850: } if (selection == '0') {
      0042D7 78r00            [12]12068 	mov	r0,#_selection
      0042D9 B6 30 02         [24]12069 	cjne	@r0,#0x30,00591$
      0042DC 80 03            [24]12070 	sjmp	00592$
      0042DE                      12071 00591$:
      0042DE 02r42r51         [24]12072 	ljmp	00174$
      0042E1                      12073 00592$:
                                  12074 ;	.\ecen4350_lcd_v4.c:2851: setColorWhite();
      0042E1 C0 05            [24]12075 	push	ar5
      0042E3 12r15rD8         [24]12076 	lcall	_setColorWhite
                                  12077 ;	.\ecen4350_lcd_v4.c:2852: setCursor(0, 180);
      0042E6 75*00 B4         [24]12078 	mov	_setCursor_PARM_2,#0xb4
      0042E9 75*01 00         [24]12079 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042EC 90 00 00         [24]12080 	mov	dptr,#0x0000
      0042EF 12r04rAA         [24]12081 	lcall	_setCursor
                                  12082 ;	.\ecen4350_lcd_v4.c:2853: LCD_string_write(" <1> Next\n ");
      0042F2 90r0BrB4         [24]12083 	mov	dptr,#___str_118
      0042F5 75 F0 80         [24]12084 	mov	b,#0x80
      0042F8 12r0FrC4         [24]12085 	lcall	_LCD_string_write
                                  12086 ;	.\ecen4350_lcd_v4.c:2854: setColorHighlight2();
      0042FB 12r15rAA         [24]12087 	lcall	_setColorHighlight2
                                  12088 ;	.\ecen4350_lcd_v4.c:2855: LCD_string_write("<0> Exit");
      0042FE 90r09r1A         [24]12089 	mov	dptr,#___str_78
      004301 75 F0 80         [24]12090 	mov	b,#0x80
      004304 12r0FrC4         [24]12091 	lcall	_LCD_string_write
                                  12092 ;	.\ecen4350_lcd_v4.c:2856: setColorWhite();
      004307 12r15rD8         [24]12093 	lcall	_setColorWhite
                                  12094 ;	.\ecen4350_lcd_v4.c:2857: LCD_string_write("\n <2> Previous");
      00430A 90r0BrC0         [24]12095 	mov	dptr,#___str_119
      00430D 75 F0 80         [24]12096 	mov	b,#0x80
      004310 12r0FrC4         [24]12097 	lcall	_LCD_string_write
      004313 D0 05            [24]12098 	pop	ar5
                                  12099 ;	.\ecen4350_lcd_v4.c:2858: exit = 0;		// set exit flag
      004315 78r1E            [12]12100 	mov	r0,#_count_exit_65536_708
      004317 76 00            [12]12101 	mov	@r0,#0x00
                                  12102 ;	.\ecen4350_lcd_v4.c:2859: invalidInput = 0;
      004319 7F 00            [12]12103 	mov	r7,#0x00
      00431B 02r42r51         [24]12104 	ljmp	00174$
      00431E                      12105 00178$:
                                  12106 ;	.\ecen4350_lcd_v4.c:2863: if (exit == 0) {		// check exit flag
      00431E 78r1E            [12]12107 	mov	r0,#_count_exit_65536_708
      004320 E6               [12]12108 	mov	a,@r0
      004321 60 0B            [24]12109 	jz	00194$
                                  12110 ;	.\ecen4350_lcd_v4.c:2864: break;			// break out the loop
      004323                      12111 00212$:
                                  12112 ;	.\ecen4350_lcd_v4.c:2706: for (unsigned int i = 0; i < blockSize; i++) {
      004323 05*61            [12]12113 	inc	_count_sloc1_1_0
      004325 E4               [12]12114 	clr	a
      004326 B5*61 02         [24]12115 	cjne	a,_count_sloc1_1_0,00594$
      004329 05*62            [12]12116 	inc	(_count_sloc1_1_0 + 1)
      00432B                      12117 00594$:
      00432B 02r3ErFD         [24]12118 	ljmp	00211$
      00432E                      12119 00194$:
                                  12120 ;	.\ecen4350_lcd_v4.c:2870: if(noneFound) {
      00432E 78r1D            [12]12121 	mov	r0,#_count_noneFound_65536_708
      004330 E6               [12]12122 	mov	a,@r0
      004331 70 03            [24]12123 	jnz	00595$
      004333 02r3Er08         [24]12124 	ljmp	00202$
      004336                      12125 00595$:
                                  12126 ;	.\ecen4350_lcd_v4.c:2871: setColorRed();
      004336 C0 05            [24]12127 	push	ar5
      004338 12r15rCD         [24]12128 	lcall	_setColorRed
                                  12129 ;	.\ecen4350_lcd_v4.c:2872: setCursor(0, 160);
      00433B 75*00 A0         [24]12130 	mov	_setCursor_PARM_2,#0xa0
      00433E 75*01 00         [24]12131 	mov	(_setCursor_PARM_2 + 1),#0x00
      004341 90 00 00         [24]12132 	mov	dptr,#0x0000
      004344 12r04rAA         [24]12133 	lcall	_setCursor
                                  12134 ;	.\ecen4350_lcd_v4.c:2873: LCD_string_write(" Value Not Found\n Within Block\n ");
      004347 90r0BrCF         [24]12135 	mov	dptr,#___str_120
      00434A 75 F0 80         [24]12136 	mov	b,#0x80
      00434D 12r0FrC4         [24]12137 	lcall	_LCD_string_write
                                  12138 ;	.\ecen4350_lcd_v4.c:2874: setColorWhite();
      004350 12r15rD8         [24]12139 	lcall	_setColorWhite
                                  12140 ;	.\ecen4350_lcd_v4.c:2875: LCD_string_write("\n <0> Exit");
      004353 90r0BrF0         [24]12141 	mov	dptr,#___str_121
      004356 75 F0 80         [24]12142 	mov	b,#0x80
      004359 12r0FrC4         [24]12143 	lcall	_LCD_string_write
      00435C D0 05            [24]12144 	pop	ar5
                                  12145 ;	.\ecen4350_lcd_v4.c:2876: invalidInput = 1;
      00435E 7F 01            [12]12146 	mov	r7,#0x01
                                  12147 ;	.\ecen4350_lcd_v4.c:2878: while (invalidInput) {
      004360                      12148 00197$:
      004360 EF               [12]12149 	mov	a,r7
      004361 70 03            [24]12150 	jnz	00596$
      004363 02r3Er08         [24]12151 	ljmp	00202$
      004366                      12152 00596$:
                                  12153 ;	.\ecen4350_lcd_v4.c:2879: selection = keyDetect();
      004366 C0 07            [24]12154 	push	ar7
      004368 C0 05            [24]12155 	push	ar5
      00436A 12r10rE2         [24]12156 	lcall	_keyDetect
      00436D AE 82            [24]12157 	mov	r6,dpl
      00436F D0 05            [24]12158 	pop	ar5
      004371 D0 07            [24]12159 	pop	ar7
      004373 78r00            [12]12160 	mov	r0,#_selection
      004375 A6 06            [24]12161 	mov	@r0,ar6
                                  12162 ;	.\ecen4350_lcd_v4.c:2880: if (selection == '0'){
      004377 BE 30 E6         [24]12163 	cjne	r6,#0x30,00197$
                                  12164 ;	.\ecen4350_lcd_v4.c:2881: setCursor(0, 160);
      00437A 75*00 A0         [24]12165 	mov	_setCursor_PARM_2,#0xa0
      00437D 75*01 00         [24]12166 	mov	(_setCursor_PARM_2 + 1),#0x00
      004380 90 00 00         [24]12167 	mov	dptr,#0x0000
      004383 C0 05            [24]12168 	push	ar5
      004385 12r04rAA         [24]12169 	lcall	_setCursor
                                  12170 ;	.\ecen4350_lcd_v4.c:2882: LCD_string_write("\n\n\n ");
      004388 90r0BrFB         [24]12171 	mov	dptr,#___str_122
      00438B 75 F0 80         [24]12172 	mov	b,#0x80
      00438E 12r0FrC4         [24]12173 	lcall	_LCD_string_write
                                  12174 ;	.\ecen4350_lcd_v4.c:2883: setColorHighlight2();
      004391 12r15rAA         [24]12175 	lcall	_setColorHighlight2
                                  12176 ;	.\ecen4350_lcd_v4.c:2884: LCD_string_write("<0> Exit");
      004394 90r09r1A         [24]12177 	mov	dptr,#___str_78
      004397 75 F0 80         [24]12178 	mov	b,#0x80
      00439A 12r0FrC4         [24]12179 	lcall	_LCD_string_write
      00439D D0 05            [24]12180 	pop	ar5
                                  12181 ;	.\ecen4350_lcd_v4.c:2885: invalidInput = 0;
      00439F 7F 00            [12]12182 	mov	r7,#0x00
                                  12183 ;	.\ecen4350_lcd_v4.c:2886: exit = 0;
      0043A1 78r1E            [12]12184 	mov	r0,#_count_exit_65536_708
      0043A3 76 00            [12]12185 	mov	@r0,#0x00
      0043A5 80 B9            [24]12186 	sjmp	00197$
      0043A7                      12187 00204$:
                                  12188 ;	.\ecen4350_lcd_v4.c:2891: delay(80);
      0043A7 90 00 50         [24]12189 	mov	dptr,#0x0050
                                  12190 ;	.\ecen4350_lcd_v4.c:2892: return;
                                  12191 ;	.\ecen4350_lcd_v4.c:2893: }
      0043AA 02r00rE0         [24]12192 	ljmp	_delay
                                  12193 ;------------------------------------------------------------
                                  12194 ;Allocation info for local variables in function 'check'
                                  12195 ;------------------------------------------------------------
                                  12196 ;temp                      Allocated to registers r7 
                                  12197 ;------------------------------------------------------------
                                  12198 ;	.\ecen4350_lcd_v4.c:2895: void check() {
                                  12199 ;	-----------------------------------------
                                  12200 ;	 function check
                                  12201 ;	-----------------------------------------
      0043AD                      12202 _check:
                                  12203 ;	.\ecen4350_lcd_v4.c:2897: clearLCD();
      0043AD 12r0Dr47         [24]12204 	lcall	_clearLCD
                                  12205 ;	.\ecen4350_lcd_v4.c:2900: fillTop(GRAY);
      0043B0 90 D6 BA         [24]12206 	mov	dptr,#0xd6ba
      0043B3 12r0Br7A         [24]12207 	lcall	_fillTop
                                  12208 ;	.\ecen4350_lcd_v4.c:2901: setTextSize(5);
      0043B6 75 82 05         [24]12209 	mov	dpl,#0x05
      0043B9 12r04rC4         [24]12210 	lcall	_setTextSize
                                  12211 ;	.\ecen4350_lcd_v4.c:2902: setColorMenu();
      0043BC 12r15rC1         [24]12212 	lcall	_setColorMenu
                                  12213 ;	.\ecen4350_lcd_v4.c:2903: setCursor(15, 0);
      0043BF E4               [12]12214 	clr	a
      0043C0 F5*00            [12]12215 	mov	_setCursor_PARM_2,a
      0043C2 F5*01            [12]12216 	mov	(_setCursor_PARM_2 + 1),a
      0043C4 90 00 0F         [24]12217 	mov	dptr,#0x000f
      0043C7 12r04rAA         [24]12218 	lcall	_setCursor
                                  12219 ;	.\ecen4350_lcd_v4.c:2904: LCD_string_write("[CHECK]\n");
      0043CA 90r0Cr3B         [24]12220 	mov	dptr,#___str_128
      0043CD 75 F0 80         [24]12221 	mov	b,#0x80
      0043D0 12r0FrC4         [24]12222 	lcall	_LCD_string_write
                                  12223 ;	.\ecen4350_lcd_v4.c:2905: setColorDefault();
      0043D3 12r15r88         [24]12224 	lcall	_setColorDefault
                                  12225 ;	.\ecen4350_lcd_v4.c:2906: setTextSize(2);
      0043D6 75 82 02         [24]12226 	mov	dpl,#0x02
      0043D9 12r04rC4         [24]12227 	lcall	_setTextSize
                                  12228 ;	.\ecen4350_lcd_v4.c:2907: setCursor(0, 60);
      0043DC 75*00 3C         [24]12229 	mov	_setCursor_PARM_2,#0x3c
      0043DF 75*01 00         [24]12230 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043E2 90 00 00         [24]12231 	mov	dptr,#0x0000
      0043E5 12r04rAA         [24]12232 	lcall	_setCursor
                                  12233 ;	.\ecen4350_lcd_v4.c:2908: LCD_string_write(" Enter Value:\n");
      0043E8 90r0Cr44         [24]12234 	mov	dptr,#___str_129
      0043EB 75 F0 80         [24]12235 	mov	b,#0x80
      0043EE 12r0FrC4         [24]12236 	lcall	_LCD_string_write
                                  12237 ;	.\ecen4350_lcd_v4.c:2909: setColorGray();
      0043F1 12r15rB6         [24]12238 	lcall	_setColorGray
                                  12239 ;	.\ecen4350_lcd_v4.c:2910: LCD_string_write(" __");
      0043F4 90r08r01         [24]12240 	mov	dptr,#___str_62
      0043F7 75 F0 80         [24]12241 	mov	b,#0x80
      0043FA 12r0FrC4         [24]12242 	lcall	_LCD_string_write
                                  12243 ;	.\ecen4350_lcd_v4.c:2912: setCursor(0,60);
      0043FD 75*00 3C         [24]12244 	mov	_setCursor_PARM_2,#0x3c
      004400 75*01 00         [24]12245 	mov	(_setCursor_PARM_2 + 1),#0x00
      004403 90 00 00         [24]12246 	mov	dptr,#0x0000
      004406 12r04rAA         [24]12247 	lcall	_setCursor
                                  12248 ;	.\ecen4350_lcd_v4.c:2913: LCD_string_write("\n ");
      004409 90r08r5F         [24]12249 	mov	dptr,#___str_67
      00440C 75 F0 80         [24]12250 	mov	b,#0x80
      00440F 12r0FrC4         [24]12251 	lcall	_LCD_string_write
                                  12252 ;	.\ecen4350_lcd_v4.c:2914: setColorHighlight1();
      004412 12r15r9E         [24]12253 	lcall	_setColorHighlight1
                                  12254 ;	.\ecen4350_lcd_v4.c:2915: selection = 0;
      004415 78r00            [12]12255 	mov	r0,#_selection
      004417 76 00            [12]12256 	mov	@r0,#0x00
                                  12257 ;	.\ecen4350_lcd_v4.c:2916: temp = keyDetect();
      004419 12r10rE2         [24]12258 	lcall	_keyDetect
                                  12259 ;	.\ecen4350_lcd_v4.c:2917: write(temp);
      00441C AF 82            [24]12260 	mov  r7,dpl
      00441E C0 07            [24]12261 	push	ar7
      004420 12r0Fr5E         [24]12262 	lcall	_write
      004423 D0 07            [24]12263 	pop	ar7
                                  12264 ;	.\ecen4350_lcd_v4.c:2918: temp = ASCIItoHex(temp);
      004425 8F 82            [24]12265 	mov	dpl,r7
      004427 12r13r50         [24]12266 	lcall	_ASCIItoHex
                                  12267 ;	.\ecen4350_lcd_v4.c:2919: selection |= temp * 16;
      00442A E5 82            [12]12268 	mov	a,dpl
      00442C C4               [12]12269 	swap	a
      00442D 54 F0            [12]12270 	anl	a,#0xf0
      00442F FF               [12]12271 	mov	r7,a
      004430 78r00            [12]12272 	mov	r0,#_selection
      004432 E6               [12]12273 	mov	a,@r0
      004433 4F               [12]12274 	orl	a,r7
      004434 78r00            [12]12275 	mov	r0,#_selection
      004436 F6               [12]12276 	mov	@r0,a
                                  12277 ;	.\ecen4350_lcd_v4.c:2920: temp = keyDetect();
      004437 12r10rE2         [24]12278 	lcall	_keyDetect
                                  12279 ;	.\ecen4350_lcd_v4.c:2921: write(temp);
      00443A AF 82            [24]12280 	mov  r7,dpl
      00443C C0 07            [24]12281 	push	ar7
      00443E 12r0Fr5E         [24]12282 	lcall	_write
      004441 D0 07            [24]12283 	pop	ar7
                                  12284 ;	.\ecen4350_lcd_v4.c:2922: temp = ASCIItoHex(temp);
      004443 8F 82            [24]12285 	mov	dpl,r7
      004445 12r13r50         [24]12286 	lcall	_ASCIItoHex
      004448 AF 82            [24]12287 	mov	r7,dpl
                                  12288 ;	.\ecen4350_lcd_v4.c:2923: selection |= temp;
      00444A 78r00            [12]12289 	mov	r0,#_selection
      00444C EF               [12]12290 	mov	a,r7
      00444D 46               [12]12291 	orl	a,@r0
      00444E F6               [12]12292 	mov	@r0,a
                                  12293 ;	.\ecen4350_lcd_v4.c:2924: setColorDefault();
      00444F 12r15r88         [24]12294 	lcall	_setColorDefault
                                  12295 ;	.\ecen4350_lcd_v4.c:2925: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      004452 90r0Cr53         [24]12296 	mov	dptr,#___str_130
      004455 75 F0 80         [24]12297 	mov	b,#0x80
      004458 12r0FrC4         [24]12298 	lcall	_LCD_string_write
                                  12299 ;	.\ecen4350_lcd_v4.c:2926: writeAllRAM(selection);
      00445B 78r00            [12]12300 	mov	r0,#_selection
      00445D 86 82            [24]12301 	mov	dpl,@r0
      00445F 12r00r22         [24]12302 	lcall	_writeAllRAM
                                  12303 ;	.\ecen4350_lcd_v4.c:2927: setColorWhite();
      004462 12r15rD8         [24]12304 	lcall	_setColorWhite
                                  12305 ;	.\ecen4350_lcd_v4.c:2928: LCD_string_write("\n Verifying write...");
      004465 90r0Cr80         [24]12306 	mov	dptr,#___str_131
      004468 75 F0 80         [24]12307 	mov	b,#0x80
      00446B 12r0FrC4         [24]12308 	lcall	_LCD_string_write
                                  12309 ;	.\ecen4350_lcd_v4.c:2929: checkAllRAM(selection);
      00446E 78r00            [12]12310 	mov	r0,#_selection
      004470 86 82            [24]12311 	mov	dpl,@r0
      004472 12r00r51         [24]12312 	lcall	_checkAllRAM
                                  12313 ;	.\ecen4350_lcd_v4.c:2930: LCD_string_write("\n Complete.");
      004475 90r0Cr95         [24]12314 	mov	dptr,#___str_132
      004478 75 F0 80         [24]12315 	mov	b,#0x80
      00447B 12r0FrC4         [24]12316 	lcall	_LCD_string_write
                                  12317 ;	.\ecen4350_lcd_v4.c:2931: setTextColor(BLUE, colorBackground);
      00447E E4               [12]12318 	clr	a
      00447F F5*00            [12]12319 	mov	_setTextColor_PARM_2,a
      004481 F5*01            [12]12320 	mov	(_setTextColor_PARM_2 + 1),a
      004483 90 00 1F         [24]12321 	mov	dptr,#0x001f
      004486 12r04rB7         [24]12322 	lcall	_setTextColor
                                  12323 ;	.\ecen4350_lcd_v4.c:2932: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      004489 90r0CrA1         [24]12324 	mov	dptr,#___str_133
      00448C 75 F0 80         [24]12325 	mov	b,#0x80
      00448F 12r0FrC4         [24]12326 	lcall	_LCD_string_write
                                  12327 ;	.\ecen4350_lcd_v4.c:2933: selection = ~selection;
      004492 78r00            [12]12328 	mov	r0,#_selection
      004494 E6               [12]12329 	mov	a,@r0
      004495 F4               [12]12330 	cpl	a
      004496 F6               [12]12331 	mov	@r0,a
                                  12332 ;	.\ecen4350_lcd_v4.c:2934: setColorSelect();
      004497 12r15r93         [24]12333 	lcall	_setColorSelect
                                  12334 ;	.\ecen4350_lcd_v4.c:2935: LCD_string_write("\n Writing new byte...");
      00449A 90r0CrC5         [24]12335 	mov	dptr,#___str_134
      00449D 75 F0 80         [24]12336 	mov	b,#0x80
      0044A0 12r0FrC4         [24]12337 	lcall	_LCD_string_write
                                  12338 ;	.\ecen4350_lcd_v4.c:2936: writeAllRAM(selection);
      0044A3 78r00            [12]12339 	mov	r0,#_selection
      0044A5 86 82            [24]12340 	mov	dpl,@r0
      0044A7 12r00r22         [24]12341 	lcall	_writeAllRAM
                                  12342 ;	.\ecen4350_lcd_v4.c:2937: setColorYellow();
      0044AA 12r15rEE         [24]12343 	lcall	_setColorYellow
                                  12344 ;	.\ecen4350_lcd_v4.c:2938: LCD_string_write("\n Verifying write...");
      0044AD 90r0Cr80         [24]12345 	mov	dptr,#___str_131
      0044B0 75 F0 80         [24]12346 	mov	b,#0x80
      0044B3 12r0FrC4         [24]12347 	lcall	_LCD_string_write
                                  12348 ;	.\ecen4350_lcd_v4.c:2939: checkAllRAM(selection);
      0044B6 78r00            [12]12349 	mov	r0,#_selection
      0044B8 86 82            [24]12350 	mov	dpl,@r0
      0044BA 12r00r51         [24]12351 	lcall	_checkAllRAM
                                  12352 ;	.\ecen4350_lcd_v4.c:2940: setColorGreen();
      0044BD 12r15rE3         [24]12353 	lcall	_setColorGreen
                                  12354 ;	.\ecen4350_lcd_v4.c:2941: LCD_string_write("\n\n Check Complete.");
      0044C0 90r0CrDB         [24]12355 	mov	dptr,#___str_135
      0044C3 75 F0 80         [24]12356 	mov	b,#0x80
      0044C6 12r0FrC4         [24]12357 	lcall	_LCD_string_write
                                  12358 ;	.\ecen4350_lcd_v4.c:2942: delay(120);
      0044C9 90 00 78         [24]12359 	mov	dptr,#0x0078
                                  12360 ;	.\ecen4350_lcd_v4.c:2943: return;
                                  12361 ;	.\ecen4350_lcd_v4.c:2944: }
      0044CC 02r00rE0         [24]12362 	ljmp	_delay
                                  12363 ;------------------------------------------------------------
                                  12364 ;Allocation info for local variables in function 'uart'
                                  12365 ;------------------------------------------------------------
                                  12366 ;initLock                  Allocated to registers r2 
                                  12367 ;temp                      Allocated to registers r7 
                                  12368 ;baudType                  Allocated with name '_uart_baudType_65536_763'
                                  12369 ;_8b                       Allocated to registers r5 
                                  12370 ;frame_NES                 Allocated to registers r3 r4 
                                  12371 ;------------------------------------------------------------
                                  12372 ;	.\ecen4350_lcd_v4.c:2946: void uart() {
                                  12373 ;	-----------------------------------------
                                  12374 ;	 function uart
                                  12375 ;	-----------------------------------------
      0044CF                      12376 _uart:
                                  12377 ;	.\ecen4350_lcd_v4.c:2948: __idata u8 temp = 0;
      0044CF 7F 00            [12]12378 	mov	r7,#0x00
                                  12379 ;	.\ecen4350_lcd_v4.c:2949: __idata u8 baudType = 0;
      0044D1 78r1F            [12]12380 	mov	r0,#_uart_baudType_65536_763
      0044D3 76 00            [12]12381 	mov	@r0,#0x00
                                  12382 ;	.\ecen4350_lcd_v4.c:2950: __idata u8 _8b = 0;
      0044D5 7D 00            [12]12383 	mov	r5,#0x00
                                  12384 ;	.\ecen4350_lcd_v4.c:2951: __idata u16 frame_NES = 0;		//	bitMode | Even/odd | Set/not
      0044D7 7B 00            [12]12385 	mov	r3,#0x00
      0044D9 7C 00            [12]12386 	mov	r4,#0x00
                                  12387 ;	.\ecen4350_lcd_v4.c:2962: uartMenu:
      0044DB                      12388 00101$:
                                  12389 ;	.\ecen4350_lcd_v4.c:2963: clearLCD();
      0044DB C0 07            [24]12390 	push	ar7
      0044DD C0 05            [24]12391 	push	ar5
      0044DF C0 04            [24]12392 	push	ar4
      0044E1 C0 03            [24]12393 	push	ar3
      0044E3 12r0Dr47         [24]12394 	lcall	_clearLCD
                                  12395 ;	.\ecen4350_lcd_v4.c:2964: fillTop(GRAY);
      0044E6 90 D6 BA         [24]12396 	mov	dptr,#0xd6ba
      0044E9 12r0Br7A         [24]12397 	lcall	_fillTop
                                  12398 ;	.\ecen4350_lcd_v4.c:2965: setTextSize(5);
      0044EC 75 82 05         [24]12399 	mov	dpl,#0x05
      0044EF 12r04rC4         [24]12400 	lcall	_setTextSize
                                  12401 ;	.\ecen4350_lcd_v4.c:2966: setColorMenu();
      0044F2 12r15rC1         [24]12402 	lcall	_setColorMenu
                                  12403 ;	.\ecen4350_lcd_v4.c:2967: setCursor(30, 0);
      0044F5 E4               [12]12404 	clr	a
      0044F6 F5*00            [12]12405 	mov	_setCursor_PARM_2,a
      0044F8 F5*01            [12]12406 	mov	(_setCursor_PARM_2 + 1),a
      0044FA 90 00 1E         [24]12407 	mov	dptr,#0x001e
      0044FD 12r04rAA         [24]12408 	lcall	_setCursor
                                  12409 ;	.\ecen4350_lcd_v4.c:2968: LCD_string_write("[UART]\n");
      004500 90r0CrEE         [24]12410 	mov	dptr,#___str_136
      004503 75 F0 80         [24]12411 	mov	b,#0x80
      004506 12r0FrC4         [24]12412 	lcall	_LCD_string_write
      004509 D0 03            [24]12413 	pop	ar3
      00450B D0 04            [24]12414 	pop	ar4
      00450D D0 05            [24]12415 	pop	ar5
      00450F D0 07            [24]12416 	pop	ar7
                                  12417 ;	.\ecen4350_lcd_v4.c:2971: initLock = 0;
      004511 7A 00            [12]12418 	mov	r2,#0x00
                                  12419 ;	.\ecen4350_lcd_v4.c:2972: if (UART_en == 1){
      004513 78r01            [12]12420 	mov	r0,#_UART_en
      004515 B6 01 02         [24]12421 	cjne	@r0,#0x01,00513$
      004518 80 03            [24]12422 	sjmp	00514$
      00451A                      12423 00513$:
      00451A 02r46rC4         [24]12424 	ljmp	00118$
      00451D                      12425 00514$:
                                  12426 ;	.\ecen4350_lcd_v4.c:2973: setTextSize(2);
      00451D 75 82 02         [24]12427 	mov	dpl,#0x02
      004520 C0 07            [24]12428 	push	ar7
      004522 C0 05            [24]12429 	push	ar5
      004524 C0 04            [24]12430 	push	ar4
      004526 C0 03            [24]12431 	push	ar3
      004528 C0 02            [24]12432 	push	ar2
      00452A 12r04rC4         [24]12433 	lcall	_setTextSize
                                  12434 ;	.\ecen4350_lcd_v4.c:2974: setColorDefault();
      00452D 12r15r88         [24]12435 	lcall	_setColorDefault
                                  12436 ;	.\ecen4350_lcd_v4.c:2975: setCursor(0, 60);
      004530 75*00 3C         [24]12437 	mov	_setCursor_PARM_2,#0x3c
      004533 75*01 00         [24]12438 	mov	(_setCursor_PARM_2 + 1),#0x00
      004536 90 00 00         [24]12439 	mov	dptr,#0x0000
      004539 12r04rAA         [24]12440 	lcall	_setCursor
                                  12441 ;	.\ecen4350_lcd_v4.c:2976: LCD_string_write(" <1> ");
      00453C 90r0CrF6         [24]12442 	mov	dptr,#___str_137
      00453F 75 F0 80         [24]12443 	mov	b,#0x80
      004542 12r0FrC4         [24]12444 	lcall	_LCD_string_write
      004545 D0 02            [24]12445 	pop	ar2
      004547 D0 03            [24]12446 	pop	ar3
      004549 D0 04            [24]12447 	pop	ar4
      00454B D0 05            [24]12448 	pop	ar5
      00454D D0 07            [24]12449 	pop	ar7
                                  12450 ;	.\ecen4350_lcd_v4.c:2977: if (baudType == 0x1) {
      00454F 78r1F            [12]12451 	mov	r0,#_uart_baudType_65536_763
      004551 B6 01 1D         [24]12452 	cjne	@r0,#0x01,00104$
                                  12453 ;	.\ecen4350_lcd_v4.c:2978: LCD_string_write("1200");
      004554 90r0CrFC         [24]12454 	mov	dptr,#___str_138
      004557 75 F0 80         [24]12455 	mov	b,#0x80
      00455A C0 07            [24]12456 	push	ar7
      00455C C0 05            [24]12457 	push	ar5
      00455E C0 04            [24]12458 	push	ar4
      004560 C0 03            [24]12459 	push	ar3
      004562 C0 02            [24]12460 	push	ar2
      004564 12r0FrC4         [24]12461 	lcall	_LCD_string_write
      004567 D0 02            [24]12462 	pop	ar2
      004569 D0 03            [24]12463 	pop	ar3
      00456B D0 04            [24]12464 	pop	ar4
      00456D D0 05            [24]12465 	pop	ar5
      00456F D0 07            [24]12466 	pop	ar7
      004571                      12467 00104$:
                                  12468 ;	.\ecen4350_lcd_v4.c:2980: if (baudType == 0x2) {
      004571 78r1F            [12]12469 	mov	r0,#_uart_baudType_65536_763
      004573 B6 02 1D         [24]12470 	cjne	@r0,#0x02,00106$
                                  12471 ;	.\ecen4350_lcd_v4.c:2981: LCD_string_write("2400");
      004576 90r0Dr01         [24]12472 	mov	dptr,#___str_139
      004579 75 F0 80         [24]12473 	mov	b,#0x80
      00457C C0 07            [24]12474 	push	ar7
      00457E C0 05            [24]12475 	push	ar5
      004580 C0 04            [24]12476 	push	ar4
      004582 C0 03            [24]12477 	push	ar3
      004584 C0 02            [24]12478 	push	ar2
      004586 12r0FrC4         [24]12479 	lcall	_LCD_string_write
      004589 D0 02            [24]12480 	pop	ar2
      00458B D0 03            [24]12481 	pop	ar3
      00458D D0 04            [24]12482 	pop	ar4
      00458F D0 05            [24]12483 	pop	ar5
      004591 D0 07            [24]12484 	pop	ar7
      004593                      12485 00106$:
                                  12486 ;	.\ecen4350_lcd_v4.c:2982: } if (baudType == 0x3){
      004593 78r1F            [12]12487 	mov	r0,#_uart_baudType_65536_763
      004595 B6 03 1D         [24]12488 	cjne	@r0,#0x03,00108$
                                  12489 ;	.\ecen4350_lcd_v4.c:2983: LCD_string_write("4800");
      004598 90r0Dr06         [24]12490 	mov	dptr,#___str_140
      00459B 75 F0 80         [24]12491 	mov	b,#0x80
      00459E C0 07            [24]12492 	push	ar7
      0045A0 C0 05            [24]12493 	push	ar5
      0045A2 C0 04            [24]12494 	push	ar4
      0045A4 C0 03            [24]12495 	push	ar3
      0045A6 C0 02            [24]12496 	push	ar2
      0045A8 12r0FrC4         [24]12497 	lcall	_LCD_string_write
      0045AB D0 02            [24]12498 	pop	ar2
      0045AD D0 03            [24]12499 	pop	ar3
      0045AF D0 04            [24]12500 	pop	ar4
      0045B1 D0 05            [24]12501 	pop	ar5
      0045B3 D0 07            [24]12502 	pop	ar7
      0045B5                      12503 00108$:
                                  12504 ;	.\ecen4350_lcd_v4.c:2984: } if (baudType == 0x4){
      0045B5 78r1F            [12]12505 	mov	r0,#_uart_baudType_65536_763
      0045B7 B6 04 1D         [24]12506 	cjne	@r0,#0x04,00110$
                                  12507 ;	.\ecen4350_lcd_v4.c:2985: LCD_string_write("9600");
      0045BA 90r0Dr0B         [24]12508 	mov	dptr,#___str_141
      0045BD 75 F0 80         [24]12509 	mov	b,#0x80
      0045C0 C0 07            [24]12510 	push	ar7
      0045C2 C0 05            [24]12511 	push	ar5
      0045C4 C0 04            [24]12512 	push	ar4
      0045C6 C0 03            [24]12513 	push	ar3
      0045C8 C0 02            [24]12514 	push	ar2
      0045CA 12r0FrC4         [24]12515 	lcall	_LCD_string_write
      0045CD D0 02            [24]12516 	pop	ar2
      0045CF D0 03            [24]12517 	pop	ar3
      0045D1 D0 04            [24]12518 	pop	ar4
      0045D3 D0 05            [24]12519 	pop	ar5
      0045D5 D0 07            [24]12520 	pop	ar7
      0045D7                      12521 00110$:
                                  12522 ;	.\ecen4350_lcd_v4.c:2986: } if (baudType == 0x5) {
      0045D7 78r1F            [12]12523 	mov	r0,#_uart_baudType_65536_763
      0045D9 B6 05 1D         [24]12524 	cjne	@r0,#0x05,00112$
                                  12525 ;	.\ecen4350_lcd_v4.c:2987: LCD_string_write("19200");
      0045DC 90r0Dr10         [24]12526 	mov	dptr,#___str_142
      0045DF 75 F0 80         [24]12527 	mov	b,#0x80
      0045E2 C0 07            [24]12528 	push	ar7
      0045E4 C0 05            [24]12529 	push	ar5
      0045E6 C0 04            [24]12530 	push	ar4
      0045E8 C0 03            [24]12531 	push	ar3
      0045EA C0 02            [24]12532 	push	ar2
      0045EC 12r0FrC4         [24]12533 	lcall	_LCD_string_write
      0045EF D0 02            [24]12534 	pop	ar2
      0045F1 D0 03            [24]12535 	pop	ar3
      0045F3 D0 04            [24]12536 	pop	ar4
      0045F5 D0 05            [24]12537 	pop	ar5
      0045F7 D0 07            [24]12538 	pop	ar7
      0045F9                      12539 00112$:
                                  12540 ;	.\ecen4350_lcd_v4.c:2989: LCD_string_write(" baud\n");
      0045F9 90r0Dr16         [24]12541 	mov	dptr,#___str_143
      0045FC 75 F0 80         [24]12542 	mov	b,#0x80
      0045FF C0 07            [24]12543 	push	ar7
      004601 C0 05            [24]12544 	push	ar5
      004603 C0 04            [24]12545 	push	ar4
      004605 C0 03            [24]12546 	push	ar3
      004607 C0 02            [24]12547 	push	ar2
      004609 12r0FrC4         [24]12548 	lcall	_LCD_string_write
                                  12549 ;	.\ecen4350_lcd_v4.c:2990: setCursor(0, 100);
      00460C 75*00 64         [24]12550 	mov	_setCursor_PARM_2,#0x64
      00460F 75*01 00         [24]12551 	mov	(_setCursor_PARM_2 + 1),#0x00
      004612 90 00 00         [24]12552 	mov	dptr,#0x0000
      004615 12r04rAA         [24]12553 	lcall	_setCursor
                                  12554 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write(" <2> ");
      004618 90r0Dr1D         [24]12555 	mov	dptr,#___str_144
      00461B 75 F0 80         [24]12556 	mov	b,#0x80
      00461E 12r0FrC4         [24]12557 	lcall	_LCD_string_write
      004621 D0 02            [24]12558 	pop	ar2
      004623 D0 03            [24]12559 	pop	ar3
      004625 D0 04            [24]12560 	pop	ar4
      004627 D0 05            [24]12561 	pop	ar5
      004629 D0 07            [24]12562 	pop	ar7
                                  12563 ;	.\ecen4350_lcd_v4.c:2992: if (_8b == 1) {
      00462B BD 01 1D         [24]12564 	cjne	r5,#0x01,00114$
                                  12565 ;	.\ecen4350_lcd_v4.c:2993: LCD_string_write("8");
      00462E 90r0Dr23         [24]12566 	mov	dptr,#___str_145
      004631 75 F0 80         [24]12567 	mov	b,#0x80
      004634 C0 07            [24]12568 	push	ar7
      004636 C0 05            [24]12569 	push	ar5
      004638 C0 04            [24]12570 	push	ar4
      00463A C0 03            [24]12571 	push	ar3
      00463C C0 02            [24]12572 	push	ar2
      00463E 12r0FrC4         [24]12573 	lcall	_LCD_string_write
      004641 D0 02            [24]12574 	pop	ar2
      004643 D0 03            [24]12575 	pop	ar3
      004645 D0 04            [24]12576 	pop	ar4
      004647 D0 05            [24]12577 	pop	ar5
      004649 D0 07            [24]12578 	pop	ar7
      00464B                      12579 00114$:
                                  12580 ;	.\ecen4350_lcd_v4.c:2994: } if (_8b == 0) {
      00464B ED               [12]12581 	mov	a,r5
      00464C 70 1D            [24]12582 	jnz	00116$
                                  12583 ;	.\ecen4350_lcd_v4.c:2995: LCD_string_write("9");
      00464E 90r0Dr25         [24]12584 	mov	dptr,#___str_146
      004651 75 F0 80         [24]12585 	mov	b,#0x80
      004654 C0 07            [24]12586 	push	ar7
      004656 C0 05            [24]12587 	push	ar5
      004658 C0 04            [24]12588 	push	ar4
      00465A C0 03            [24]12589 	push	ar3
      00465C C0 02            [24]12590 	push	ar2
      00465E 12r0FrC4         [24]12591 	lcall	_LCD_string_write
      004661 D0 02            [24]12592 	pop	ar2
      004663 D0 03            [24]12593 	pop	ar3
      004665 D0 04            [24]12594 	pop	ar4
      004667 D0 05            [24]12595 	pop	ar5
      004669 D0 07            [24]12596 	pop	ar7
      00466B                      12597 00116$:
                                  12598 ;	.\ecen4350_lcd_v4.c:2997: LCD_string_write("-bit Mode\n");
      00466B 90r0Dr27         [24]12599 	mov	dptr,#___str_147
      00466E 75 F0 80         [24]12600 	mov	b,#0x80
      004671 C0 07            [24]12601 	push	ar7
      004673 C0 05            [24]12602 	push	ar5
      004675 C0 04            [24]12603 	push	ar4
      004677 C0 03            [24]12604 	push	ar3
      004679 C0 02            [24]12605 	push	ar2
      00467B 12r0FrC4         [24]12606 	lcall	_LCD_string_write
                                  12607 ;	.\ecen4350_lcd_v4.c:2998: setCursor(0, 140);
      00467E 75*00 8C         [24]12608 	mov	_setCursor_PARM_2,#0x8c
      004681 75*01 00         [24]12609 	mov	(_setCursor_PARM_2 + 1),#0x00
      004684 90 00 00         [24]12610 	mov	dptr,#0x0000
      004687 12r04rAA         [24]12611 	lcall	_setCursor
                                  12612 ;	.\ecen4350_lcd_v4.c:2999: LCD_string_write(" <3> ");
      00468A 90r0Dr32         [24]12613 	mov	dptr,#___str_148
      00468D 75 F0 80         [24]12614 	mov	b,#0x80
      004690 12r0FrC4         [24]12615 	lcall	_LCD_string_write
                                  12616 ;	.\ecen4350_lcd_v4.c:3000: LCD_string_write(" Parity");
      004693 90r0Dr38         [24]12617 	mov	dptr,#___str_149
      004696 75 F0 80         [24]12618 	mov	b,#0x80
      004699 12r0FrC4         [24]12619 	lcall	_LCD_string_write
                                  12620 ;	.\ecen4350_lcd_v4.c:3001: setCursor(0, 180);
      00469C 75*00 B4         [24]12621 	mov	_setCursor_PARM_2,#0xb4
      00469F 75*01 00         [24]12622 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046A2 90 00 00         [24]12623 	mov	dptr,#0x0000
      0046A5 12r04rAA         [24]12624 	lcall	_setCursor
                                  12625 ;	.\ecen4350_lcd_v4.c:3002: LCD_string_write(" <4> Disable UART\n");
      0046A8 90r0Dr40         [24]12626 	mov	dptr,#___str_150
      0046AB 75 F0 80         [24]12627 	mov	b,#0x80
      0046AE 12r0FrC4         [24]12628 	lcall	_LCD_string_write
                                  12629 ;	.\ecen4350_lcd_v4.c:3003: LCD_string_write("     (Enabled)\n");
      0046B1 90r0Dr53         [24]12630 	mov	dptr,#___str_151
      0046B4 75 F0 80         [24]12631 	mov	b,#0x80
      0046B7 12r0FrC4         [24]12632 	lcall	_LCD_string_write
      0046BA D0 02            [24]12633 	pop	ar2
      0046BC D0 03            [24]12634 	pop	ar3
      0046BE D0 04            [24]12635 	pop	ar4
      0046C0 D0 05            [24]12636 	pop	ar5
      0046C2 D0 07            [24]12637 	pop	ar7
      0046C4                      12638 00118$:
                                  12639 ;	.\ecen4350_lcd_v4.c:3004: } if (UART_en == 0) {
      0046C4 78r01            [12]12640 	mov	r0,#_UART_en
      0046C6 E6               [12]12641 	mov	a,@r0
      0046C7 70 7A            [24]12642 	jnz	00120$
                                  12643 ;	.\ecen4350_lcd_v4.c:3005: setTextSize(2);
      0046C9 75 82 02         [24]12644 	mov	dpl,#0x02
      0046CC C0 07            [24]12645 	push	ar7
      0046CE C0 05            [24]12646 	push	ar5
      0046D0 C0 04            [24]12647 	push	ar4
      0046D2 C0 03            [24]12648 	push	ar3
      0046D4 C0 02            [24]12649 	push	ar2
      0046D6 12r04rC4         [24]12650 	lcall	_setTextSize
                                  12651 ;	.\ecen4350_lcd_v4.c:3006: setColorDefault();
      0046D9 12r15r88         [24]12652 	lcall	_setColorDefault
                                  12653 ;	.\ecen4350_lcd_v4.c:3007: setCursor(0, 60);
      0046DC 75*00 3C         [24]12654 	mov	_setCursor_PARM_2,#0x3c
      0046DF 75*01 00         [24]12655 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046E2 90 00 00         [24]12656 	mov	dptr,#0x0000
      0046E5 12r04rAA         [24]12657 	lcall	_setCursor
                                  12658 ;	.\ecen4350_lcd_v4.c:3008: LCD_string_write(" <1> Set Data Rate\n");
      0046E8 90r0Dr63         [24]12659 	mov	dptr,#___str_152
      0046EB 75 F0 80         [24]12660 	mov	b,#0x80
      0046EE 12r0FrC4         [24]12661 	lcall	_LCD_string_write
                                  12662 ;	.\ecen4350_lcd_v4.c:3009: setCursor(0, 100);
      0046F1 75*00 64         [24]12663 	mov	_setCursor_PARM_2,#0x64
      0046F4 75*01 00         [24]12664 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046F7 90 00 00         [24]12665 	mov	dptr,#0x0000
      0046FA 12r04rAA         [24]12666 	lcall	_setCursor
                                  12667 ;	.\ecen4350_lcd_v4.c:3010: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      0046FD 90r0Dr77         [24]12668 	mov	dptr,#___str_153
      004700 75 F0 80         [24]12669 	mov	b,#0x80
      004703 12r0FrC4         [24]12670 	lcall	_LCD_string_write
                                  12671 ;	.\ecen4350_lcd_v4.c:3011: setCursor(0, 140);
      004706 75*00 8C         [24]12672 	mov	_setCursor_PARM_2,#0x8c
      004709 75*01 00         [24]12673 	mov	(_setCursor_PARM_2 + 1),#0x00
      00470C 90 00 00         [24]12674 	mov	dptr,#0x0000
      00470F 12r04rAA         [24]12675 	lcall	_setCursor
                                  12676 ;	.\ecen4350_lcd_v4.c:3012: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004712 90r0Dr9F         [24]12677 	mov	dptr,#___str_154
      004715 75 F0 80         [24]12678 	mov	b,#0x80
      004718 12r0FrC4         [24]12679 	lcall	_LCD_string_write
                                  12680 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 180);
      00471B 75*00 B4         [24]12681 	mov	_setCursor_PARM_2,#0xb4
      00471E 75*01 00         [24]12682 	mov	(_setCursor_PARM_2 + 1),#0x00
      004721 90 00 00         [24]12683 	mov	dptr,#0x0000
      004724 12r04rAA         [24]12684 	lcall	_setCursor
                                  12685 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <4> Enable UART\n");
      004727 90r0DrC3         [24]12686 	mov	dptr,#___str_155
      00472A 75 F0 80         [24]12687 	mov	b,#0x80
      00472D 12r0FrC4         [24]12688 	lcall	_LCD_string_write
                                  12689 ;	.\ecen4350_lcd_v4.c:3015: LCD_string_write("     (Disabled)\n");
      004730 90r0DrD5         [24]12690 	mov	dptr,#___str_156
      004733 75 F0 80         [24]12691 	mov	b,#0x80
      004736 12r0FrC4         [24]12692 	lcall	_LCD_string_write
      004739 D0 02            [24]12693 	pop	ar2
      00473B D0 03            [24]12694 	pop	ar3
      00473D D0 04            [24]12695 	pop	ar4
      00473F D0 05            [24]12696 	pop	ar5
      004741 D0 07            [24]12697 	pop	ar7
      004743                      12698 00120$:
                                  12699 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 240);
      004743 75*00 F0         [24]12700 	mov	_setCursor_PARM_2,#0xf0
      004746 75*01 00         [24]12701 	mov	(_setCursor_PARM_2 + 1),#0x00
      004749 90 00 00         [24]12702 	mov	dptr,#0x0000
      00474C C0 07            [24]12703 	push	ar7
      00474E C0 05            [24]12704 	push	ar5
      004750 C0 04            [24]12705 	push	ar4
      004752 C0 03            [24]12706 	push	ar3
      004754 C0 02            [24]12707 	push	ar2
      004756 12r04rAA         [24]12708 	lcall	_setCursor
                                  12709 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <0> Exit \n");
      004759 90r0DrE6         [24]12710 	mov	dptr,#___str_157
      00475C 75 F0 80         [24]12711 	mov	b,#0x80
      00475F 12r0FrC4         [24]12712 	lcall	_LCD_string_write
      004762 D0 02            [24]12713 	pop	ar2
      004764 D0 03            [24]12714 	pop	ar3
      004766 D0 04            [24]12715 	pop	ar4
      004768 D0 05            [24]12716 	pop	ar5
      00476A D0 07            [24]12717 	pop	ar7
                                  12718 ;	.\ecen4350_lcd_v4.c:3020: mainInput:
      00476C                      12719 00121$:
                                  12720 ;	.\ecen4350_lcd_v4.c:3021: selection = keyDetect();
      00476C C0 07            [24]12721 	push	ar7
      00476E C0 05            [24]12722 	push	ar5
      004770 C0 04            [24]12723 	push	ar4
      004772 C0 03            [24]12724 	push	ar3
      004774 C0 02            [24]12725 	push	ar2
      004776 12r10rE2         [24]12726 	lcall	_keyDetect
      004779 AE 82            [24]12727 	mov	r6,dpl
      00477B D0 02            [24]12728 	pop	ar2
      00477D D0 03            [24]12729 	pop	ar3
      00477F D0 04            [24]12730 	pop	ar4
      004781 D0 05            [24]12731 	pop	ar5
      004783 D0 07            [24]12732 	pop	ar7
      004785 78r00            [12]12733 	mov	r0,#_selection
      004787 A6 06            [24]12734 	mov	@r0,ar6
                                  12735 ;	.\ecen4350_lcd_v4.c:3022: if (selection =='0') {
      004789 BE 30 33         [24]12736 	cjne	r6,#0x30,00123$
                                  12737 ;	.\ecen4350_lcd_v4.c:3023: setCursor (0, 240);
      00478C 75*00 F0         [24]12738 	mov	_setCursor_PARM_2,#0xf0
      00478F 75*01 00         [24]12739 	mov	(_setCursor_PARM_2 + 1),#0x00
      004792 90 00 00         [24]12740 	mov	dptr,#0x0000
      004795 12r04rAA         [24]12741 	lcall	_setCursor
                                  12742 ;	.\ecen4350_lcd_v4.c:3024: LCD_string_write(" ");
      004798 90r06r54         [24]12743 	mov	dptr,#___str_30
      00479B 75 F0 80         [24]12744 	mov	b,#0x80
      00479E 12r0FrC4         [24]12745 	lcall	_LCD_string_write
                                  12746 ;	.\ecen4350_lcd_v4.c:3025: setColorHighlight1();
      0047A1 12r15r9E         [24]12747 	lcall	_setColorHighlight1
                                  12748 ;	.\ecen4350_lcd_v4.c:3026: LCD_string_write("<0> ");
      0047A4 90r0DrF2         [24]12749 	mov	dptr,#___str_158
      0047A7 75 F0 80         [24]12750 	mov	b,#0x80
      0047AA 12r0FrC4         [24]12751 	lcall	_LCD_string_write
                                  12752 ;	.\ecen4350_lcd_v4.c:3027: setColorHighlight2();
      0047AD 12r15rAA         [24]12753 	lcall	_setColorHighlight2
                                  12754 ;	.\ecen4350_lcd_v4.c:3028: LCD_string_write("Exit\n");
      0047B0 90r0DrF7         [24]12755 	mov	dptr,#___str_159
      0047B3 75 F0 80         [24]12756 	mov	b,#0x80
      0047B6 12r0FrC4         [24]12757 	lcall	_LCD_string_write
                                  12758 ;	.\ecen4350_lcd_v4.c:3029: delay(20);
      0047B9 90 00 14         [24]12759 	mov	dptr,#0x0014
                                  12760 ;	.\ecen4350_lcd_v4.c:3030: goto finish;
      0047BC 02r00rE0         [24]12761 	ljmp	_delay
      0047BF                      12762 00123$:
                                  12763 ;	.\ecen4350_lcd_v4.c:3032: if (selection == '4') {
      0047BF BE 34 02         [24]12764 	cjne	r6,#0x34,00531$
      0047C2 80 03            [24]12765 	sjmp	00532$
      0047C4                      12766 00531$:
      0047C4 02r48r95         [24]12767 	ljmp	00129$
      0047C7                      12768 00532$:
                                  12769 ;	.\ecen4350_lcd_v4.c:3033: setCursor (0, 180);
      0047C7 75*00 B4         [24]12770 	mov	_setCursor_PARM_2,#0xb4
      0047CA 75*01 00         [24]12771 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047CD 90 00 00         [24]12772 	mov	dptr,#0x0000
      0047D0 C0 07            [24]12773 	push	ar7
      0047D2 C0 05            [24]12774 	push	ar5
      0047D4 C0 04            [24]12775 	push	ar4
      0047D6 C0 03            [24]12776 	push	ar3
      0047D8 12r04rAA         [24]12777 	lcall	_setCursor
                                  12778 ;	.\ecen4350_lcd_v4.c:3034: LCD_string_write(" ");
      0047DB 90r06r54         [24]12779 	mov	dptr,#___str_30
      0047DE 75 F0 80         [24]12780 	mov	b,#0x80
      0047E1 12r0FrC4         [24]12781 	lcall	_LCD_string_write
                                  12782 ;	.\ecen4350_lcd_v4.c:3035: setColorHighlight1();
      0047E4 12r15r9E         [24]12783 	lcall	_setColorHighlight1
                                  12784 ;	.\ecen4350_lcd_v4.c:3036: LCD_string_write("<4> ");
      0047E7 90r0DrFD         [24]12785 	mov	dptr,#___str_160
      0047EA 75 F0 80         [24]12786 	mov	b,#0x80
      0047ED 12r0FrC4         [24]12787 	lcall	_LCD_string_write
                                  12788 ;	.\ecen4350_lcd_v4.c:3037: setColorHighlight2();
      0047F0 12r15rAA         [24]12789 	lcall	_setColorHighlight2
      0047F3 D0 03            [24]12790 	pop	ar3
      0047F5 D0 04            [24]12791 	pop	ar4
      0047F7 D0 05            [24]12792 	pop	ar5
      0047F9 D0 07            [24]12793 	pop	ar7
                                  12794 ;	.\ecen4350_lcd_v4.c:3038: if (UART_en == 1) {
      0047FB 78r01            [12]12795 	mov	r0,#_UART_en
      0047FD B6 01 41         [24]12796 	cjne	@r0,#0x01,00125$
                                  12797 ;	.\ecen4350_lcd_v4.c:3039: LCD_string_write("Disable UART\n");
      004800 90r0Er02         [24]12798 	mov	dptr,#___str_161
      004803 75 F0 80         [24]12799 	mov	b,#0x80
      004806 12r0FrC4         [24]12800 	lcall	_LCD_string_write
                                  12801 ;	.\ecen4350_lcd_v4.c:3040: setColorDefault();
      004809 12r15r88         [24]12802 	lcall	_setColorDefault
                                  12803 ;	.\ecen4350_lcd_v4.c:3041: LCD_string_write("     ");
      00480C 90r0Er10         [24]12804 	mov	dptr,#___str_162
      00480F 75 F0 80         [24]12805 	mov	b,#0x80
      004812 12r0FrC4         [24]12806 	lcall	_LCD_string_write
                                  12807 ;	.\ecen4350_lcd_v4.c:3042: setColorHighlight1();
      004815 12r15r9E         [24]12808 	lcall	_setColorHighlight1
                                  12809 ;	.\ecen4350_lcd_v4.c:3043: LCD_string_write("(Enabled)");
      004818 90r0Er16         [24]12810 	mov	dptr,#___str_163
      00481B 75 F0 80         [24]12811 	mov	b,#0x80
      00481E 12r0FrC4         [24]12812 	lcall	_LCD_string_write
                                  12813 ;	.\ecen4350_lcd_v4.c:3044: setColorDefault();
      004821 12r15r88         [24]12814 	lcall	_setColorDefault
                                  12815 ;	.\ecen4350_lcd_v4.c:3045: initLock = 0;
      004824 7A 00            [12]12816 	mov	r2,#0x00
                                  12817 ;	.\ecen4350_lcd_v4.c:3047: _8b = 'null';
      004826 7D 6E            [12]12818 	mov	r5,#0x6e
                                  12819 ;	.\ecen4350_lcd_v4.c:3048: frame_NES = 0;
      004828 7B 00            [12]12820 	mov	r3,#0x00
      00482A 7C 00            [12]12821 	mov	r4,#0x00
                                  12822 ;	.\ecen4350_lcd_v4.c:3049: temp = 0;
      00482C 7F 00            [12]12823 	mov	r7,#0x00
                                  12824 ;	.\ecen4350_lcd_v4.c:3050: UART_en = 0;
      00482E 78r01            [12]12825 	mov	r0,#_UART_en
      004830 76 00            [12]12826 	mov	@r0,#0x00
                                  12827 ;	.\ecen4350_lcd_v4.c:3051: baudSet = 0;
      004832 78r02            [12]12828 	mov	r0,#_baudSet
      004834 76 00            [12]12829 	mov	@r0,#0x00
                                  12830 ;	.\ecen4350_lcd_v4.c:3052: bitSet = 0;
      004836 78r05            [12]12831 	mov	r0,#_bitSet
      004838 76 00            [12]12832 	mov	@r0,#0x00
                                  12833 ;	.\ecen4350_lcd_v4.c:3053: paritySet = 0;
      00483A 78r07            [12]12834 	mov	r0,#_paritySet
      00483C 76 00            [12]12835 	mov	@r0,#0x00
                                  12836 ;	.\ecen4350_lcd_v4.c:3054: goto mainInput;
      00483E 02r47r6C         [24]12837 	ljmp	00121$
      004841                      12838 00125$:
                                  12839 ;	.\ecen4350_lcd_v4.c:3055: } if (UART_en == 0 ){
      004841 78r01            [12]12840 	mov	r0,#_UART_en
      004843 E6               [12]12841 	mov	a,@r0
      004844 70 34            [24]12842 	jnz	00127$
                                  12843 ;	.\ecen4350_lcd_v4.c:3056: LCD_string_write("Enable UART\n");
      004846 90r0Er20         [24]12844 	mov	dptr,#___str_164
      004849 75 F0 80         [24]12845 	mov	b,#0x80
      00484C C0 07            [24]12846 	push	ar7
      00484E C0 05            [24]12847 	push	ar5
      004850 C0 04            [24]12848 	push	ar4
      004852 C0 03            [24]12849 	push	ar3
      004854 12r0FrC4         [24]12850 	lcall	_LCD_string_write
                                  12851 ;	.\ecen4350_lcd_v4.c:3057: setColorDefault();
      004857 12r15r88         [24]12852 	lcall	_setColorDefault
                                  12853 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write("     ");
      00485A 90r0Er10         [24]12854 	mov	dptr,#___str_162
      00485D 75 F0 80         [24]12855 	mov	b,#0x80
      004860 12r0FrC4         [24]12856 	lcall	_LCD_string_write
                                  12857 ;	.\ecen4350_lcd_v4.c:3059: setColorHighlight1();
      004863 12r15r9E         [24]12858 	lcall	_setColorHighlight1
                                  12859 ;	.\ecen4350_lcd_v4.c:3060: LCD_string_write("(Disabled)");
      004866 90r0Er2D         [24]12860 	mov	dptr,#___str_165
      004869 75 F0 80         [24]12861 	mov	b,#0x80
      00486C 12r0FrC4         [24]12862 	lcall	_LCD_string_write
                                  12863 ;	.\ecen4350_lcd_v4.c:3061: setColorDefault();
      00486F 12r15r88         [24]12864 	lcall	_setColorDefault
      004872 D0 03            [24]12865 	pop	ar3
      004874 D0 04            [24]12866 	pop	ar4
      004876 D0 05            [24]12867 	pop	ar5
      004878 D0 07            [24]12868 	pop	ar7
      00487A                      12869 00127$:
                                  12870 ;	.\ecen4350_lcd_v4.c:3063: delay(40);
      00487A 90 00 28         [24]12871 	mov	dptr,#0x0028
      00487D C0 07            [24]12872 	push	ar7
      00487F C0 05            [24]12873 	push	ar5
      004881 C0 04            [24]12874 	push	ar4
      004883 C0 03            [24]12875 	push	ar3
      004885 12r00rE0         [24]12876 	lcall	_delay
      004888 D0 03            [24]12877 	pop	ar3
      00488A D0 04            [24]12878 	pop	ar4
      00488C D0 05            [24]12879 	pop	ar5
      00488E D0 07            [24]12880 	pop	ar7
                                  12881 ;	.\ecen4350_lcd_v4.c:3064: initLock = 1;
      004890 7A 01            [12]12882 	mov	r2,#0x01
                                  12883 ;	.\ecen4350_lcd_v4.c:3065: goto verifyUART;
      004892 02r4ArE4         [24]12884 	ljmp	00149$
      004895                      12885 00129$:
                                  12886 ;	.\ecen4350_lcd_v4.c:3066: } if (selection == '1') {
      004895 BE 31 02         [24]12887 	cjne	r6,#0x31,00536$
      004898 80 03            [24]12888 	sjmp	00537$
      00489A                      12889 00536$:
      00489A 02r49r38         [24]12890 	ljmp	00135$
      00489D                      12891 00537$:
                                  12892 ;	.\ecen4350_lcd_v4.c:3067: setCursor (0, 60);
      00489D 75*00 3C         [24]12893 	mov	_setCursor_PARM_2,#0x3c
      0048A0 75*01 00         [24]12894 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048A3 90 00 00         [24]12895 	mov	dptr,#0x0000
      0048A6 C0 07            [24]12896 	push	ar7
      0048A8 C0 05            [24]12897 	push	ar5
      0048AA C0 04            [24]12898 	push	ar4
      0048AC C0 03            [24]12899 	push	ar3
      0048AE C0 02            [24]12900 	push	ar2
      0048B0 12r04rAA         [24]12901 	lcall	_setCursor
                                  12902 ;	.\ecen4350_lcd_v4.c:3068: LCD_string_write(" ");
      0048B3 90r06r54         [24]12903 	mov	dptr,#___str_30
      0048B6 75 F0 80         [24]12904 	mov	b,#0x80
      0048B9 12r0FrC4         [24]12905 	lcall	_LCD_string_write
                                  12906 ;	.\ecen4350_lcd_v4.c:3069: setColorHighlight1();
      0048BC 12r15r9E         [24]12907 	lcall	_setColorHighlight1
                                  12908 ;	.\ecen4350_lcd_v4.c:3070: LCD_string_write("<1> ");
      0048BF 90r0Er38         [24]12909 	mov	dptr,#___str_166
      0048C2 75 F0 80         [24]12910 	mov	b,#0x80
      0048C5 12r0FrC4         [24]12911 	lcall	_LCD_string_write
                                  12912 ;	.\ecen4350_lcd_v4.c:3071: setColorHighlight2();
      0048C8 12r15rAA         [24]12913 	lcall	_setColorHighlight2
                                  12914 ;	.\ecen4350_lcd_v4.c:3072: LCD_string_write("Set Data Rate\n");
      0048CB 90r0Er3D         [24]12915 	mov	dptr,#___str_167
      0048CE 75 F0 80         [24]12916 	mov	b,#0x80
      0048D1 12r0FrC4         [24]12917 	lcall	_LCD_string_write
                                  12918 ;	.\ecen4350_lcd_v4.c:3073: delay(20);
      0048D4 90 00 14         [24]12919 	mov	dptr,#0x0014
      0048D7 12r00rE0         [24]12920 	lcall	_delay
      0048DA D0 02            [24]12921 	pop	ar2
      0048DC D0 03            [24]12922 	pop	ar3
      0048DE D0 04            [24]12923 	pop	ar4
      0048E0 D0 05            [24]12924 	pop	ar5
      0048E2 D0 07            [24]12925 	pop	ar7
                                  12926 ;	.\ecen4350_lcd_v4.c:3074: if (UART_en == 1) {
      0048E4 78r01            [12]12927 	mov	r0,#_UART_en
      0048E6 B6 01 47         [24]12928 	cjne	@r0,#0x01,00131$
                                  12929 ;	.\ecen4350_lcd_v4.c:3075: setCursor(0, 200);
      0048E9 75*00 C8         [24]12930 	mov	_setCursor_PARM_2,#0xc8
      0048EC 75*01 00         [24]12931 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048EF 90 00 00         [24]12932 	mov	dptr,#0x0000
      0048F2 C0 07            [24]12933 	push	ar7
      0048F4 C0 05            [24]12934 	push	ar5
      0048F6 C0 04            [24]12935 	push	ar4
      0048F8 C0 03            [24]12936 	push	ar3
      0048FA C0 02            [24]12937 	push	ar2
      0048FC 12r04rAA         [24]12938 	lcall	_setCursor
                                  12939 ;	.\ecen4350_lcd_v4.c:3076: setColorRed();
      0048FF 12r15rCD         [24]12940 	lcall	_setColorRed
                                  12941 ;	.\ecen4350_lcd_v4.c:3077: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004902 90r0Er4C         [24]12942 	mov	dptr,#___str_168
      004905 75 F0 80         [24]12943 	mov	b,#0x80
      004908 12r0FrC4         [24]12944 	lcall	_LCD_string_write
                                  12945 ;	.\ecen4350_lcd_v4.c:3078: setColorDefault();
      00490B 12r15r88         [24]12946 	lcall	_setColorDefault
                                  12947 ;	.\ecen4350_lcd_v4.c:3079: setCursor(0, 60);
      00490E 75*00 3C         [24]12948 	mov	_setCursor_PARM_2,#0x3c
      004911 75*01 00         [24]12949 	mov	(_setCursor_PARM_2 + 1),#0x00
      004914 90 00 00         [24]12950 	mov	dptr,#0x0000
      004917 12r04rAA         [24]12951 	lcall	_setCursor
                                  12952 ;	.\ecen4350_lcd_v4.c:3080: LCD_string_write(" <1> Set Data Rate\n");
      00491A 90r0Dr63         [24]12953 	mov	dptr,#___str_152
      00491D 75 F0 80         [24]12954 	mov	b,#0x80
      004920 12r0FrC4         [24]12955 	lcall	_LCD_string_write
      004923 D0 02            [24]12956 	pop	ar2
      004925 D0 03            [24]12957 	pop	ar3
      004927 D0 04            [24]12958 	pop	ar4
      004929 D0 05            [24]12959 	pop	ar5
      00492B D0 07            [24]12960 	pop	ar7
                                  12961 ;	.\ecen4350_lcd_v4.c:3081: goto mainInput;
      00492D 02r47r6C         [24]12962 	ljmp	00121$
      004930                      12963 00131$:
                                  12964 ;	.\ecen4350_lcd_v4.c:3082: } if (UART_en == 0) {
      004930 78r01            [12]12965 	mov	r0,#_UART_en
      004932 E6               [12]12966 	mov	a,@r0
      004933 70 03            [24]12967 	jnz	00540$
      004935 02r4Cr40         [24]12968 	ljmp	00168$
      004938                      12969 00540$:
                                  12970 ;	.\ecen4350_lcd_v4.c:3083: goto setRate;
      004938                      12971 00135$:
                                  12972 ;	.\ecen4350_lcd_v4.c:3086: if (selection == '2') {
      004938 78r00            [12]12973 	mov	r0,#_selection
      00493A B6 32 02         [24]12974 	cjne	@r0,#0x32,00541$
      00493D 80 03            [24]12975 	sjmp	00542$
      00493F                      12976 00541$:
      00493F 02r49rEF         [24]12977 	ljmp	00141$
      004942                      12978 00542$:
                                  12979 ;	.\ecen4350_lcd_v4.c:3087: setCursor (0, 100);
      004942 75*00 64         [24]12980 	mov	_setCursor_PARM_2,#0x64
      004945 75*01 00         [24]12981 	mov	(_setCursor_PARM_2 + 1),#0x00
      004948 90 00 00         [24]12982 	mov	dptr,#0x0000
      00494B C0 07            [24]12983 	push	ar7
      00494D C0 05            [24]12984 	push	ar5
      00494F C0 04            [24]12985 	push	ar4
      004951 C0 03            [24]12986 	push	ar3
      004953 C0 02            [24]12987 	push	ar2
      004955 12r04rAA         [24]12988 	lcall	_setCursor
                                  12989 ;	.\ecen4350_lcd_v4.c:3088: LCD_string_write(" ");
      004958 90r06r54         [24]12990 	mov	dptr,#___str_30
      00495B 75 F0 80         [24]12991 	mov	b,#0x80
      00495E 12r0FrC4         [24]12992 	lcall	_LCD_string_write
                                  12993 ;	.\ecen4350_lcd_v4.c:3089: setColorHighlight1();
      004961 12r15r9E         [24]12994 	lcall	_setColorHighlight1
                                  12995 ;	.\ecen4350_lcd_v4.c:3090: LCD_string_write("<2> ");
      004964 90r0Er6E         [24]12996 	mov	dptr,#___str_169
      004967 75 F0 80         [24]12997 	mov	b,#0x80
      00496A 12r0FrC4         [24]12998 	lcall	_LCD_string_write
                                  12999 ;	.\ecen4350_lcd_v4.c:3091: setColorHighlight2();
      00496D 12r15rAA         [24]13000 	lcall	_setColorHighlight2
                                  13001 ;	.\ecen4350_lcd_v4.c:3092: LCD_string_write("Number of Bits\n");
      004970 90r0Er73         [24]13002 	mov	dptr,#___str_170
      004973 75 F0 80         [24]13003 	mov	b,#0x80
      004976 12r0FrC4         [24]13004 	lcall	_LCD_string_write
                                  13005 ;	.\ecen4350_lcd_v4.c:3093: setColorDefault();
      004979 12r15r88         [24]13006 	lcall	_setColorDefault
                                  13007 ;	.\ecen4350_lcd_v4.c:3094: LCD_string_write("     ");
      00497C 90r0Er10         [24]13008 	mov	dptr,#___str_162
      00497F 75 F0 80         [24]13009 	mov	b,#0x80
      004982 12r0FrC4         [24]13010 	lcall	_LCD_string_write
                                  13011 ;	.\ecen4350_lcd_v4.c:3095: setColorHighlight1();
      004985 12r15r9E         [24]13012 	lcall	_setColorHighlight1
                                  13013 ;	.\ecen4350_lcd_v4.c:3096: LCD_string_write("(8 or 9 bits)\n");
      004988 90r0Er83         [24]13014 	mov	dptr,#___str_171
      00498B 75 F0 80         [24]13015 	mov	b,#0x80
      00498E 12r0FrC4         [24]13016 	lcall	_LCD_string_write
      004991 D0 02            [24]13017 	pop	ar2
      004993 D0 03            [24]13018 	pop	ar3
      004995 D0 04            [24]13019 	pop	ar4
      004997 D0 05            [24]13020 	pop	ar5
      004999 D0 07            [24]13021 	pop	ar7
                                  13022 ;	.\ecen4350_lcd_v4.c:3097: if (UART_en == 1) {
      00499B 78r01            [12]13023 	mov	r0,#_UART_en
      00499D B6 01 47         [24]13024 	cjne	@r0,#0x01,00137$
                                  13025 ;	.\ecen4350_lcd_v4.c:3098: setCursor(0, 200);
      0049A0 75*00 C8         [24]13026 	mov	_setCursor_PARM_2,#0xc8
      0049A3 75*01 00         [24]13027 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049A6 90 00 00         [24]13028 	mov	dptr,#0x0000
      0049A9 C0 07            [24]13029 	push	ar7
      0049AB C0 05            [24]13030 	push	ar5
      0049AD C0 04            [24]13031 	push	ar4
      0049AF C0 03            [24]13032 	push	ar3
      0049B1 C0 02            [24]13033 	push	ar2
      0049B3 12r04rAA         [24]13034 	lcall	_setCursor
                                  13035 ;	.\ecen4350_lcd_v4.c:3099: setColorRed();
      0049B6 12r15rCD         [24]13036 	lcall	_setColorRed
                                  13037 ;	.\ecen4350_lcd_v4.c:3100: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      0049B9 90r0Er4C         [24]13038 	mov	dptr,#___str_168
      0049BC 75 F0 80         [24]13039 	mov	b,#0x80
      0049BF 12r0FrC4         [24]13040 	lcall	_LCD_string_write
                                  13041 ;	.\ecen4350_lcd_v4.c:3101: setColorDefault();
      0049C2 12r15r88         [24]13042 	lcall	_setColorDefault
                                  13043 ;	.\ecen4350_lcd_v4.c:3102: setCursor(0, 100);		
      0049C5 75*00 64         [24]13044 	mov	_setCursor_PARM_2,#0x64
      0049C8 75*01 00         [24]13045 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049CB 90 00 00         [24]13046 	mov	dptr,#0x0000
      0049CE 12r04rAA         [24]13047 	lcall	_setCursor
                                  13048 ;	.\ecen4350_lcd_v4.c:3103: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      0049D1 90r0Dr77         [24]13049 	mov	dptr,#___str_153
      0049D4 75 F0 80         [24]13050 	mov	b,#0x80
      0049D7 12r0FrC4         [24]13051 	lcall	_LCD_string_write
      0049DA D0 02            [24]13052 	pop	ar2
      0049DC D0 03            [24]13053 	pop	ar3
      0049DE D0 04            [24]13054 	pop	ar4
      0049E0 D0 05            [24]13055 	pop	ar5
      0049E2 D0 07            [24]13056 	pop	ar7
                                  13057 ;	.\ecen4350_lcd_v4.c:3104: goto mainInput;
      0049E4 02r47r6C         [24]13058 	ljmp	00121$
      0049E7                      13059 00137$:
                                  13060 ;	.\ecen4350_lcd_v4.c:3105: } if (UART_en == 0) goto setBit;
      0049E7 78r01            [12]13061 	mov	r0,#_UART_en
      0049E9 E6               [12]13062 	mov	a,@r0
      0049EA 70 03            [24]13063 	jnz	00545$
      0049EC 02r4ErF3         [24]13064 	ljmp	00195$
      0049EF                      13065 00545$:
      0049EF                      13066 00141$:
                                  13067 ;	.\ecen4350_lcd_v4.c:3106: } if (selection == '3') {
      0049EF 78r00            [12]13068 	mov	r0,#_selection
      0049F1 B6 33 02         [24]13069 	cjne	@r0,#0x33,00546$
      0049F4 80 03            [24]13070 	sjmp	00547$
      0049F6                      13071 00546$:
      0049F6 02r4ArB2         [24]13072 	ljmp	00147$
      0049F9                      13073 00547$:
                                  13074 ;	.\ecen4350_lcd_v4.c:3107: setCursor (0, 140);
      0049F9 75*00 8C         [24]13075 	mov	_setCursor_PARM_2,#0x8c
      0049FC 75*01 00         [24]13076 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049FF 90 00 00         [24]13077 	mov	dptr,#0x0000
      004A02 C0 07            [24]13078 	push	ar7
      004A04 C0 05            [24]13079 	push	ar5
      004A06 C0 04            [24]13080 	push	ar4
      004A08 C0 03            [24]13081 	push	ar3
      004A0A C0 02            [24]13082 	push	ar2
      004A0C 12r04rAA         [24]13083 	lcall	_setCursor
                                  13084 ;	.\ecen4350_lcd_v4.c:3108: LCD_string_write(" ");
      004A0F 90r06r54         [24]13085 	mov	dptr,#___str_30
      004A12 75 F0 80         [24]13086 	mov	b,#0x80
      004A15 12r0FrC4         [24]13087 	lcall	_LCD_string_write
                                  13088 ;	.\ecen4350_lcd_v4.c:3109: setColorHighlight1();
      004A18 12r15r9E         [24]13089 	lcall	_setColorHighlight1
                                  13090 ;	.\ecen4350_lcd_v4.c:3110: LCD_string_write("<3> ");
      004A1B 90r0Er92         [24]13091 	mov	dptr,#___str_172
      004A1E 75 F0 80         [24]13092 	mov	b,#0x80
      004A21 12r0FrC4         [24]13093 	lcall	_LCD_string_write
                                  13094 ;	.\ecen4350_lcd_v4.c:3111: setColorHighlight2();
      004A24 12r15rAA         [24]13095 	lcall	_setColorHighlight2
                                  13096 ;	.\ecen4350_lcd_v4.c:3112: LCD_string_write("Parity ");
      004A27 90r0Er97         [24]13097 	mov	dptr,#___str_173
      004A2A 75 F0 80         [24]13098 	mov	b,#0x80
      004A2D 12r0FrC4         [24]13099 	lcall	_LCD_string_write
                                  13100 ;	.\ecen4350_lcd_v4.c:3113: setColorHighlight1();
      004A30 12r15r9E         [24]13101 	lcall	_setColorHighlight1
                                  13102 ;	.\ecen4350_lcd_v4.c:3114: LCD_string_write("(Even/\n");
      004A33 90r0Er9F         [24]13103 	mov	dptr,#___str_174
      004A36 75 F0 80         [24]13104 	mov	b,#0x80
      004A39 12r0FrC4         [24]13105 	lcall	_LCD_string_write
                                  13106 ;	.\ecen4350_lcd_v4.c:3115: setColorDefault();
      004A3C 12r15r88         [24]13107 	lcall	_setColorDefault
                                  13108 ;	.\ecen4350_lcd_v4.c:3116: LCD_string_write("     ");
      004A3F 90r0Er10         [24]13109 	mov	dptr,#___str_162
      004A42 75 F0 80         [24]13110 	mov	b,#0x80
      004A45 12r0FrC4         [24]13111 	lcall	_LCD_string_write
                                  13112 ;	.\ecen4350_lcd_v4.c:3117: setColorHighlight1();
      004A48 12r15r9E         [24]13113 	lcall	_setColorHighlight1
                                  13114 ;	.\ecen4350_lcd_v4.c:3118: LCD_string_write("(Odd/None)\n");
      004A4B 90r0ErA7         [24]13115 	mov	dptr,#___str_175
      004A4E 75 F0 80         [24]13116 	mov	b,#0x80
      004A51 12r0FrC4         [24]13117 	lcall	_LCD_string_write
      004A54 D0 02            [24]13118 	pop	ar2
      004A56 D0 03            [24]13119 	pop	ar3
      004A58 D0 04            [24]13120 	pop	ar4
      004A5A D0 05            [24]13121 	pop	ar5
      004A5C D0 07            [24]13122 	pop	ar7
                                  13123 ;	.\ecen4350_lcd_v4.c:3119: if (UART_en == 1) {
      004A5E 78r01            [12]13124 	mov	r0,#_UART_en
      004A60 B6 01 47         [24]13125 	cjne	@r0,#0x01,00143$
                                  13126 ;	.\ecen4350_lcd_v4.c:3120: setCursor(0, 200);
      004A63 75*00 C8         [24]13127 	mov	_setCursor_PARM_2,#0xc8
      004A66 75*01 00         [24]13128 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A69 90 00 00         [24]13129 	mov	dptr,#0x0000
      004A6C C0 07            [24]13130 	push	ar7
      004A6E C0 05            [24]13131 	push	ar5
      004A70 C0 04            [24]13132 	push	ar4
      004A72 C0 03            [24]13133 	push	ar3
      004A74 C0 02            [24]13134 	push	ar2
      004A76 12r04rAA         [24]13135 	lcall	_setCursor
                                  13136 ;	.\ecen4350_lcd_v4.c:3121: setColorRed();
      004A79 12r15rCD         [24]13137 	lcall	_setColorRed
                                  13138 ;	.\ecen4350_lcd_v4.c:3122: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004A7C 90r0Er4C         [24]13139 	mov	dptr,#___str_168
      004A7F 75 F0 80         [24]13140 	mov	b,#0x80
      004A82 12r0FrC4         [24]13141 	lcall	_LCD_string_write
                                  13142 ;	.\ecen4350_lcd_v4.c:3123: setColorDefault();
      004A85 12r15r88         [24]13143 	lcall	_setColorDefault
                                  13144 ;	.\ecen4350_lcd_v4.c:3124: setCursor(0, 140);
      004A88 75*00 8C         [24]13145 	mov	_setCursor_PARM_2,#0x8c
      004A8B 75*01 00         [24]13146 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A8E 90 00 00         [24]13147 	mov	dptr,#0x0000
      004A91 12r04rAA         [24]13148 	lcall	_setCursor
                                  13149 ;	.\ecen4350_lcd_v4.c:3125: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004A94 90r0Dr9F         [24]13150 	mov	dptr,#___str_154
      004A97 75 F0 80         [24]13151 	mov	b,#0x80
      004A9A 12r0FrC4         [24]13152 	lcall	_LCD_string_write
      004A9D D0 02            [24]13153 	pop	ar2
      004A9F D0 03            [24]13154 	pop	ar3
      004AA1 D0 04            [24]13155 	pop	ar4
      004AA3 D0 05            [24]13156 	pop	ar5
      004AA5 D0 07            [24]13157 	pop	ar7
                                  13158 ;	.\ecen4350_lcd_v4.c:3126: goto mainInput;
      004AA7 02r47r6C         [24]13159 	ljmp	00121$
      004AAA                      13160 00143$:
                                  13161 ;	.\ecen4350_lcd_v4.c:3127: } if (UART_en == 0) goto setParity;
      004AAA 78r01            [12]13162 	mov	r0,#_UART_en
      004AAC E6               [12]13163 	mov	a,@r0
      004AAD 70 35            [24]13164 	jnz	00149$
      004AAF 02r50r02         [24]13165 	ljmp	00202$
      004AB2                      13166 00147$:
                                  13167 ;	.\ecen4350_lcd_v4.c:3129: setColorRed();
      004AB2 C0 07            [24]13168 	push	ar7
      004AB4 C0 05            [24]13169 	push	ar5
      004AB6 C0 04            [24]13170 	push	ar4
      004AB8 C0 03            [24]13171 	push	ar3
      004ABA C0 02            [24]13172 	push	ar2
      004ABC 12r15rCD         [24]13173 	lcall	_setColorRed
                                  13174 ;	.\ecen4350_lcd_v4.c:3130: setCursor(0, 200);
      004ABF 75*00 C8         [24]13175 	mov	_setCursor_PARM_2,#0xc8
      004AC2 75*01 00         [24]13176 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AC5 90 00 00         [24]13177 	mov	dptr,#0x0000
      004AC8 12r04rAA         [24]13178 	lcall	_setCursor
                                  13179 ;	.\ecen4350_lcd_v4.c:3131: LCD_string_write("\n\n\n\n Incorrect input\n  Try again.\n");
      004ACB 90r0ErB3         [24]13180 	mov	dptr,#___str_176
      004ACE 75 F0 80         [24]13181 	mov	b,#0x80
      004AD1 12r0FrC4         [24]13182 	lcall	_LCD_string_write
                                  13183 ;	.\ecen4350_lcd_v4.c:3132: setColorDefault();
      004AD4 12r15r88         [24]13184 	lcall	_setColorDefault
      004AD7 D0 02            [24]13185 	pop	ar2
      004AD9 D0 03            [24]13186 	pop	ar3
      004ADB D0 04            [24]13187 	pop	ar4
      004ADD D0 05            [24]13188 	pop	ar5
      004ADF D0 07            [24]13189 	pop	ar7
                                  13190 ;	.\ecen4350_lcd_v4.c:3133: goto mainInput;
      004AE1 02r47r6C         [24]13191 	ljmp	00121$
                                  13192 ;	.\ecen4350_lcd_v4.c:3136: verifyUART:
      004AE4                      13193 00149$:
                                  13194 ;	.\ecen4350_lcd_v4.c:3137: clearLCD();
      004AE4 C0 07            [24]13195 	push	ar7
      004AE6 C0 05            [24]13196 	push	ar5
      004AE8 C0 04            [24]13197 	push	ar4
      004AEA C0 03            [24]13198 	push	ar3
      004AEC C0 02            [24]13199 	push	ar2
      004AEE 12r0Dr47         [24]13200 	lcall	_clearLCD
                                  13201 ;	.\ecen4350_lcd_v4.c:3138: setCursor(0, 120);
      004AF1 75*00 78         [24]13202 	mov	_setCursor_PARM_2,#0x78
      004AF4 75*01 00         [24]13203 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AF7 90 00 00         [24]13204 	mov	dptr,#0x0000
      004AFA 12r04rAA         [24]13205 	lcall	_setCursor
      004AFD D0 02            [24]13206 	pop	ar2
      004AFF D0 03            [24]13207 	pop	ar3
      004B01 D0 04            [24]13208 	pop	ar4
      004B03 D0 05            [24]13209 	pop	ar5
      004B05 D0 07            [24]13210 	pop	ar7
                                  13211 ;	.\ecen4350_lcd_v4.c:3139: if (initLock == 1) {
      004B07 BA 01 02         [24]13212 	cjne	r2,#0x01,00551$
      004B0A 80 03            [24]13213 	sjmp	00552$
      004B0C                      13214 00551$:
      004B0C 02r44rDB         [24]13215 	ljmp	00101$
      004B0F                      13216 00552$:
                                  13217 ;	.\ecen4350_lcd_v4.c:3140: if (UART_en == 1) {
      004B0F 78r01            [12]13218 	mov	r0,#_UART_en
      004B11 B6 01 3B         [24]13219 	cjne	@r0,#0x01,00151$
                                  13220 ;	.\ecen4350_lcd_v4.c:3141: setColorGreen();
      004B14 C0 07            [24]13221 	push	ar7
      004B16 C0 05            [24]13222 	push	ar5
      004B18 C0 04            [24]13223 	push	ar4
      004B1A C0 03            [24]13224 	push	ar3
      004B1C 12r15rE3         [24]13225 	lcall	_setColorGreen
                                  13226 ;	.\ecen4350_lcd_v4.c:3142: LCD_string_write("\n Disabling UART...\n");
      004B1F 90r0ErD6         [24]13227 	mov	dptr,#___str_177
      004B22 75 F0 80         [24]13228 	mov	b,#0x80
      004B25 12r0FrC4         [24]13229 	lcall	_LCD_string_write
                                  13230 ;	.\ecen4350_lcd_v4.c:3143: setColorDefault();
      004B28 12r15r88         [24]13231 	lcall	_setColorDefault
                                  13232 ;	.\ecen4350_lcd_v4.c:3144: delay(40);
      004B2B 90 00 28         [24]13233 	mov	dptr,#0x0028
      004B2E 12r00rE0         [24]13234 	lcall	_delay
                                  13235 ;	.\ecen4350_lcd_v4.c:3145: UART_en = 0;
      004B31 78r01            [12]13236 	mov	r0,#_UART_en
      004B33 76 00            [12]13237 	mov	@r0,#0x00
                                  13238 ;	.\ecen4350_lcd_v4.c:3146: bitSet = 0;
      004B35 78r05            [12]13239 	mov	r0,#_bitSet
      004B37 76 00            [12]13240 	mov	@r0,#0x00
                                  13241 ;	.\ecen4350_lcd_v4.c:3147: paritySet = 0;
      004B39 78r07            [12]13242 	mov	r0,#_paritySet
      004B3B 76 00            [12]13243 	mov	@r0,#0x00
                                  13244 ;	.\ecen4350_lcd_v4.c:3148: baudSet = 0;
      004B3D 78r02            [12]13245 	mov	r0,#_baudSet
      004B3F 76 00            [12]13246 	mov	@r0,#0x00
                                  13247 ;	.\ecen4350_lcd_v4.c:3149: setColorDefault();
      004B41 12r15r88         [24]13248 	lcall	_setColorDefault
      004B44 D0 03            [24]13249 	pop	ar3
      004B46 D0 04            [24]13250 	pop	ar4
      004B48 D0 05            [24]13251 	pop	ar5
      004B4A D0 07            [24]13252 	pop	ar7
                                  13253 ;	.\ecen4350_lcd_v4.c:3150: goto uartMenu;
      004B4C 02r44rDB         [24]13254 	ljmp	00101$
      004B4F                      13255 00151$:
                                  13256 ;	.\ecen4350_lcd_v4.c:3151: } if (UART_en == 0) {
      004B4F 78r01            [12]13257 	mov	r0,#_UART_en
      004B51 E6               [12]13258 	mov	a,@r0
      004B52 60 03            [24]13259 	jz	00555$
      004B54 02r4Cr40         [24]13260 	ljmp	00168$
      004B57                      13261 00555$:
                                  13262 ;	.\ecen4350_lcd_v4.c:3152: if ((baudSet == 1) && (paritySet == 1) && (bitSet == 1)) {
      004B57 78r02            [12]13263 	mov	r0,#_baudSet
      004B59 B6 01 3F         [24]13264 	cjne	@r0,#0x01,00159$
      004B5C 78r07            [12]13265 	mov	r0,#_paritySet
      004B5E B6 01 3A         [24]13266 	cjne	@r0,#0x01,00159$
      004B61 78r05            [12]13267 	mov	r0,#_bitSet
      004B63 B6 01 35         [24]13268 	cjne	@r0,#0x01,00159$
                                  13269 ;	.\ecen4350_lcd_v4.c:3153: setColorSelect();
      004B66 C0 07            [24]13270 	push	ar7
      004B68 C0 05            [24]13271 	push	ar5
      004B6A C0 04            [24]13272 	push	ar4
      004B6C C0 03            [24]13273 	push	ar3
      004B6E 12r15r93         [24]13274 	lcall	_setColorSelect
                                  13275 ;	.\ecen4350_lcd_v4.c:3154: LCD_string_write("\n Settings Verified:\n");
      004B71 90r0ErEB         [24]13276 	mov	dptr,#___str_178
      004B74 75 F0 80         [24]13277 	mov	b,#0x80
      004B77 12r0FrC4         [24]13278 	lcall	_LCD_string_write
                                  13279 ;	.\ecen4350_lcd_v4.c:3155: setColorDefault();
      004B7A 12r15r88         [24]13280 	lcall	_setColorDefault
                                  13281 ;	.\ecen4350_lcd_v4.c:3156: LCD_string_write(" Enabling UART...");
      004B7D 90r0Fr01         [24]13282 	mov	dptr,#___str_179
      004B80 75 F0 80         [24]13283 	mov	b,#0x80
      004B83 12r0FrC4         [24]13284 	lcall	_LCD_string_write
                                  13285 ;	.\ecen4350_lcd_v4.c:3158: UART_en = 1;
      004B86 78r01            [12]13286 	mov	r0,#_UART_en
      004B88 76 01            [12]13287 	mov	@r0,#0x01
                                  13288 ;	.\ecen4350_lcd_v4.c:3160: delay(40);
      004B8A 90 00 28         [24]13289 	mov	dptr,#0x0028
      004B8D 12r00rE0         [24]13290 	lcall	_delay
      004B90 D0 03            [24]13291 	pop	ar3
      004B92 D0 04            [24]13292 	pop	ar4
      004B94 D0 05            [24]13293 	pop	ar5
      004B96 D0 07            [24]13294 	pop	ar7
                                  13295 ;	.\ecen4350_lcd_v4.c:3161: goto uartMenu;
      004B98 02r44rDB         [24]13296 	ljmp	00101$
      004B9B                      13297 00159$:
                                  13298 ;	.\ecen4350_lcd_v4.c:3163: if (baudSet == 0) {
      004B9B 78r02            [12]13299 	mov	r0,#_baudSet
      004B9D E6               [12]13300 	mov	a,@r0
      004B9E 70 34            [24]13301 	jnz	00153$
                                  13302 ;	.\ecen4350_lcd_v4.c:3164: setColorRed();
      004BA0 C0 07            [24]13303 	push	ar7
      004BA2 C0 05            [24]13304 	push	ar5
      004BA4 C0 04            [24]13305 	push	ar4
      004BA6 C0 03            [24]13306 	push	ar3
      004BA8 C0 02            [24]13307 	push	ar2
      004BAA 12r15rCD         [24]13308 	lcall	_setColorRed
                                  13309 ;	.\ecen4350_lcd_v4.c:3165: LCD_string_write(" BAUD ERROR\n");
      004BAD 90r0Fr13         [24]13310 	mov	dptr,#___str_180
      004BB0 75 F0 80         [24]13311 	mov	b,#0x80
      004BB3 12r0FrC4         [24]13312 	lcall	_LCD_string_write
                                  13313 ;	.\ecen4350_lcd_v4.c:3166: setColorDefault();
      004BB6 12r15r88         [24]13314 	lcall	_setColorDefault
                                  13315 ;	.\ecen4350_lcd_v4.c:3167: LCD_string_write(" Entering Baud...\n");
      004BB9 90r0Fr20         [24]13316 	mov	dptr,#___str_181
      004BBC 75 F0 80         [24]13317 	mov	b,#0x80
      004BBF 12r0FrC4         [24]13318 	lcall	_LCD_string_write
                                  13319 ;	.\ecen4350_lcd_v4.c:3168: delay(40);
      004BC2 90 00 28         [24]13320 	mov	dptr,#0x0028
      004BC5 12r00rE0         [24]13321 	lcall	_delay
      004BC8 D0 02            [24]13322 	pop	ar2
      004BCA D0 03            [24]13323 	pop	ar3
      004BCC D0 04            [24]13324 	pop	ar4
      004BCE D0 05            [24]13325 	pop	ar5
      004BD0 D0 07            [24]13326 	pop	ar7
                                  13327 ;	.\ecen4350_lcd_v4.c:3169: goto setRate;
      004BD2 80 6C            [24]13328 	sjmp	00168$
      004BD4                      13329 00153$:
                                  13330 ;	.\ecen4350_lcd_v4.c:3170: } if (bitSet == 0) {
      004BD4 78r05            [12]13331 	mov	r0,#_bitSet
      004BD6 E6               [12]13332 	mov	a,@r0
      004BD7 70 2D            [24]13333 	jnz	00155$
                                  13334 ;	.\ecen4350_lcd_v4.c:3171: setColorRed();
      004BD9 C0 04            [24]13335 	push	ar4
      004BDB C0 03            [24]13336 	push	ar3
      004BDD C0 02            [24]13337 	push	ar2
      004BDF 12r15rCD         [24]13338 	lcall	_setColorRed
                                  13339 ;	.\ecen4350_lcd_v4.c:3172: LCD_string_write(" BIT ERROR\n");
      004BE2 90r0Fr33         [24]13340 	mov	dptr,#___str_182
      004BE5 75 F0 80         [24]13341 	mov	b,#0x80
      004BE8 12r0FrC4         [24]13342 	lcall	_LCD_string_write
                                  13343 ;	.\ecen4350_lcd_v4.c:3173: setColorDefault();
      004BEB 12r15r88         [24]13344 	lcall	_setColorDefault
                                  13345 ;	.\ecen4350_lcd_v4.c:3174: LCD_string_write(" Entering Bits...\n");
      004BEE 90r0Fr3F         [24]13346 	mov	dptr,#___str_183
      004BF1 75 F0 80         [24]13347 	mov	b,#0x80
      004BF4 12r0FrC4         [24]13348 	lcall	_LCD_string_write
                                  13349 ;	.\ecen4350_lcd_v4.c:3175: delay(40);
      004BF7 90 00 28         [24]13350 	mov	dptr,#0x0028
      004BFA 12r00rE0         [24]13351 	lcall	_delay
      004BFD D0 02            [24]13352 	pop	ar2
      004BFF D0 03            [24]13353 	pop	ar3
      004C01 D0 04            [24]13354 	pop	ar4
                                  13355 ;	.\ecen4350_lcd_v4.c:3176: goto setBit;
      004C03 02r4ErF3         [24]13356 	ljmp	00195$
      004C06                      13357 00155$:
                                  13358 ;	.\ecen4350_lcd_v4.c:3177: } if (paritySet == 0) {
      004C06 78r07            [12]13359 	mov	r0,#_paritySet
      004C08 E6               [12]13360 	mov	a,@r0
      004C09 70 35            [24]13361 	jnz	00168$
                                  13362 ;	.\ecen4350_lcd_v4.c:3178: setColorRed();
      004C0B C0 07            [24]13363 	push	ar7
      004C0D C0 05            [24]13364 	push	ar5
      004C0F C0 04            [24]13365 	push	ar4
      004C11 C0 03            [24]13366 	push	ar3
      004C13 C0 02            [24]13367 	push	ar2
      004C15 12r15rCD         [24]13368 	lcall	_setColorRed
                                  13369 ;	.\ecen4350_lcd_v4.c:3179: LCD_string_write(" PARITY ERROR\n");
      004C18 90r0Fr52         [24]13370 	mov	dptr,#___str_184
      004C1B 75 F0 80         [24]13371 	mov	b,#0x80
      004C1E 12r0FrC4         [24]13372 	lcall	_LCD_string_write
                                  13373 ;	.\ecen4350_lcd_v4.c:3180: setColorDefault();
      004C21 12r15r88         [24]13374 	lcall	_setColorDefault
                                  13375 ;	.\ecen4350_lcd_v4.c:3181: LCD_string_write(" Entering Parity...\n");
      004C24 90r0Fr61         [24]13376 	mov	dptr,#___str_185
      004C27 75 F0 80         [24]13377 	mov	b,#0x80
      004C2A 12r0FrC4         [24]13378 	lcall	_LCD_string_write
                                  13379 ;	.\ecen4350_lcd_v4.c:3182: delay(40);
      004C2D 90 00 28         [24]13380 	mov	dptr,#0x0028
      004C30 12r00rE0         [24]13381 	lcall	_delay
      004C33 D0 02            [24]13382 	pop	ar2
      004C35 D0 03            [24]13383 	pop	ar3
      004C37 D0 04            [24]13384 	pop	ar4
      004C39 D0 05            [24]13385 	pop	ar5
      004C3B D0 07            [24]13386 	pop	ar7
                                  13387 ;	.\ecen4350_lcd_v4.c:3183: goto setParity;
      004C3D 02r50r02         [24]13388 	ljmp	00202$
                                  13389 ;	.\ecen4350_lcd_v4.c:3189: setRate: 
      004C40                      13390 00168$:
                                  13391 ;	.\ecen4350_lcd_v4.c:3190: clearLCD();
      004C40 C0 07            [24]13392 	push	ar7
      004C42 C0 05            [24]13393 	push	ar5
      004C44 C0 04            [24]13394 	push	ar4
      004C46 C0 03            [24]13395 	push	ar3
      004C48 C0 02            [24]13396 	push	ar2
      004C4A 12r0Dr47         [24]13397 	lcall	_clearLCD
                                  13398 ;	.\ecen4350_lcd_v4.c:3191: fillTop(GRAY);
      004C4D 90 D6 BA         [24]13399 	mov	dptr,#0xd6ba
      004C50 12r0Br7A         [24]13400 	lcall	_fillTop
                                  13401 ;	.\ecen4350_lcd_v4.c:3192: setTextSize(5);
      004C53 75 82 05         [24]13402 	mov	dpl,#0x05
      004C56 12r04rC4         [24]13403 	lcall	_setTextSize
                                  13404 ;	.\ecen4350_lcd_v4.c:3193: setColorMenu();
      004C59 12r15rC1         [24]13405 	lcall	_setColorMenu
                                  13406 ;	.\ecen4350_lcd_v4.c:3194: setCursor(30, 0);
      004C5C E4               [12]13407 	clr	a
      004C5D F5*00            [12]13408 	mov	_setCursor_PARM_2,a
      004C5F F5*01            [12]13409 	mov	(_setCursor_PARM_2 + 1),a
      004C61 90 00 1E         [24]13410 	mov	dptr,#0x001e
      004C64 12r04rAA         [24]13411 	lcall	_setCursor
                                  13412 ;	.\ecen4350_lcd_v4.c:3195: LCD_string_write("[UART]\n");
      004C67 90r0CrEE         [24]13413 	mov	dptr,#___str_136
      004C6A 75 F0 80         [24]13414 	mov	b,#0x80
      004C6D 12r0FrC4         [24]13415 	lcall	_LCD_string_write
                                  13416 ;	.\ecen4350_lcd_v4.c:3196: setTextSize(2);
      004C70 75 82 02         [24]13417 	mov	dpl,#0x02
      004C73 12r04rC4         [24]13418 	lcall	_setTextSize
                                  13419 ;	.\ecen4350_lcd_v4.c:3197: setColorDefault();
      004C76 12r15r88         [24]13420 	lcall	_setColorDefault
                                  13421 ;	.\ecen4350_lcd_v4.c:3198: setCursor(0, 60);
      004C79 75*00 3C         [24]13422 	mov	_setCursor_PARM_2,#0x3c
      004C7C 75*01 00         [24]13423 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C7F 90 00 00         [24]13424 	mov	dptr,#0x0000
      004C82 12r04rAA         [24]13425 	lcall	_setCursor
                                  13426 ;	.\ecen4350_lcd_v4.c:3199: LCD_string_write(" <1> 1200 Baud\n");
      004C85 90r0Fr76         [24]13427 	mov	dptr,#___str_186
      004C88 75 F0 80         [24]13428 	mov	b,#0x80
      004C8B 12r0FrC4         [24]13429 	lcall	_LCD_string_write
                                  13430 ;	.\ecen4350_lcd_v4.c:3200: setCursor(0, 100);
      004C8E 75*00 64         [24]13431 	mov	_setCursor_PARM_2,#0x64
      004C91 75*01 00         [24]13432 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C94 90 00 00         [24]13433 	mov	dptr,#0x0000
      004C97 12r04rAA         [24]13434 	lcall	_setCursor
                                  13435 ;	.\ecen4350_lcd_v4.c:3201: LCD_string_write(" <2> 2400 Baud\n");
      004C9A 90r0Fr86         [24]13436 	mov	dptr,#___str_187
      004C9D 75 F0 80         [24]13437 	mov	b,#0x80
      004CA0 12r0FrC4         [24]13438 	lcall	_LCD_string_write
                                  13439 ;	.\ecen4350_lcd_v4.c:3202: setCursor(0, 140);
      004CA3 75*00 8C         [24]13440 	mov	_setCursor_PARM_2,#0x8c
      004CA6 75*01 00         [24]13441 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CA9 90 00 00         [24]13442 	mov	dptr,#0x0000
      004CAC 12r04rAA         [24]13443 	lcall	_setCursor
                                  13444 ;	.\ecen4350_lcd_v4.c:3203: LCD_string_write(" <3> 4800 Baud\n");
      004CAF 90r0Fr96         [24]13445 	mov	dptr,#___str_188
      004CB2 75 F0 80         [24]13446 	mov	b,#0x80
      004CB5 12r0FrC4         [24]13447 	lcall	_LCD_string_write
                                  13448 ;	.\ecen4350_lcd_v4.c:3204: setCursor(0, 180);
      004CB8 75*00 B4         [24]13449 	mov	_setCursor_PARM_2,#0xb4
      004CBB 75*01 00         [24]13450 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CBE 90 00 00         [24]13451 	mov	dptr,#0x0000
      004CC1 12r04rAA         [24]13452 	lcall	_setCursor
                                  13453 ;	.\ecen4350_lcd_v4.c:3205: LCD_string_write(" <4> 9600 Baud\n");
      004CC4 90r0FrA6         [24]13454 	mov	dptr,#___str_189
      004CC7 75 F0 80         [24]13455 	mov	b,#0x80
      004CCA 12r0FrC4         [24]13456 	lcall	_LCD_string_write
                                  13457 ;	.\ecen4350_lcd_v4.c:3206: setCursor(0, 220);
      004CCD 75*00 DC         [24]13458 	mov	_setCursor_PARM_2,#0xdc
      004CD0 75*01 00         [24]13459 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CD3 90 00 00         [24]13460 	mov	dptr,#0x0000
      004CD6 12r04rAA         [24]13461 	lcall	_setCursor
                                  13462 ;	.\ecen4350_lcd_v4.c:3207: LCD_string_write(" <5> 19200 Baud\n");
      004CD9 90r0FrB6         [24]13463 	mov	dptr,#___str_190
      004CDC 75 F0 80         [24]13464 	mov	b,#0x80
      004CDF 12r0FrC4         [24]13465 	lcall	_LCD_string_write
                                  13466 ;	.\ecen4350_lcd_v4.c:3209: selection = keyDetect();
      004CE2 12r10rE2         [24]13467 	lcall	_keyDetect
      004CE5 AE 82            [24]13468 	mov	r6,dpl
      004CE7 D0 02            [24]13469 	pop	ar2
      004CE9 D0 03            [24]13470 	pop	ar3
      004CEB D0 04            [24]13471 	pop	ar4
      004CED D0 05            [24]13472 	pop	ar5
      004CEF D0 07            [24]13473 	pop	ar7
      004CF1 78r00            [12]13474 	mov	r0,#_selection
      004CF3 A6 06            [24]13475 	mov	@r0,ar6
                                  13476 ;	.\ecen4350_lcd_v4.c:3210: if (selection == '1' ) {
      004CF5 BE 31 5A         [24]13477 	cjne	r6,#0x31,00174$
                                  13478 ;	.\ecen4350_lcd_v4.c:3211: setCursor(0, 60);
      004CF8 75*00 3C         [24]13479 	mov	_setCursor_PARM_2,#0x3c
      004CFB 75*01 00         [24]13480 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CFE 90 00 00         [24]13481 	mov	dptr,#0x0000
      004D01 C0 07            [24]13482 	push	ar7
      004D03 C0 05            [24]13483 	push	ar5
      004D05 C0 04            [24]13484 	push	ar4
      004D07 C0 03            [24]13485 	push	ar3
      004D09 C0 02            [24]13486 	push	ar2
      004D0B 12r04rAA         [24]13487 	lcall	_setCursor
                                  13488 ;	.\ecen4350_lcd_v4.c:3212: LCD_string_write(" ");
      004D0E 90r06r54         [24]13489 	mov	dptr,#___str_30
      004D11 75 F0 80         [24]13490 	mov	b,#0x80
      004D14 12r0FrC4         [24]13491 	lcall	_LCD_string_write
                                  13492 ;	.\ecen4350_lcd_v4.c:3213: setColorHighlight1();
      004D17 12r15r9E         [24]13493 	lcall	_setColorHighlight1
                                  13494 ;	.\ecen4350_lcd_v4.c:3214: LCD_string_write("<1> ");
      004D1A 90r0Er38         [24]13495 	mov	dptr,#___str_166
      004D1D 75 F0 80         [24]13496 	mov	b,#0x80
      004D20 12r0FrC4         [24]13497 	lcall	_LCD_string_write
                                  13498 ;	.\ecen4350_lcd_v4.c:3215: setColorHighlight2();
      004D23 12r15rAA         [24]13499 	lcall	_setColorHighlight2
                                  13500 ;	.\ecen4350_lcd_v4.c:3216: LCD_string_write("1200 Baud\n");
      004D26 90r0FrC7         [24]13501 	mov	dptr,#___str_191
      004D29 75 F0 80         [24]13502 	mov	b,#0x80
      004D2C 12r0FrC4         [24]13503 	lcall	_LCD_string_write
      004D2F D0 02            [24]13504 	pop	ar2
      004D31 D0 03            [24]13505 	pop	ar3
      004D33 D0 04            [24]13506 	pop	ar4
      004D35 D0 05            [24]13507 	pop	ar5
      004D37 D0 07            [24]13508 	pop	ar7
                                  13509 ;	.\ecen4350_lcd_v4.c:3217: TH1 = 0xE6;	// 1200 baud
      004D39 75 8D E6         [24]13510 	mov	_TH1,#0xe6
                                  13511 ;	.\ecen4350_lcd_v4.c:3218: PCON = 0x00; //SMOD = 0
      004D3C 75 87 00         [24]13512 	mov	_PCON,#0x00
                                  13513 ;	.\ecen4350_lcd_v4.c:3219: baudSet = 1;
      004D3F 78r02            [12]13514 	mov	r0,#_baudSet
      004D41 76 01            [12]13515 	mov	@r0,#0x01
                                  13516 ;	.\ecen4350_lcd_v4.c:3220: baudType = 0x1;
      004D43 78r1F            [12]13517 	mov	r0,#_uart_baudType_65536_763
      004D45 76 01            [12]13518 	mov	@r0,#0x01
                                  13519 ;	.\ecen4350_lcd_v4.c:3221: if (initLock == 1) goto verifyUART;
      004D47 BA 01 02         [24]13520 	cjne	r2,#0x01,00567$
      004D4A 80 03            [24]13521 	sjmp	00568$
      004D4C                      13522 00567$:
      004D4C 02r44rDB         [24]13523 	ljmp	00101$
      004D4F                      13524 00568$:
      004D4F 02r4ArE4         [24]13525 	ljmp	00149$
                                  13526 ;	.\ecen4350_lcd_v4.c:3222: else goto uartMenu;
      004D52                      13527 00174$:
                                  13528 ;	.\ecen4350_lcd_v4.c:3224: if (selection == '2' ) {
      004D52 BE 32 5A         [24]13529 	cjne	r6,#0x32,00179$
                                  13530 ;	.\ecen4350_lcd_v4.c:3225: setCursor(0, 100);
      004D55 75*00 64         [24]13531 	mov	_setCursor_PARM_2,#0x64
      004D58 75*01 00         [24]13532 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D5B 90 00 00         [24]13533 	mov	dptr,#0x0000
      004D5E C0 07            [24]13534 	push	ar7
      004D60 C0 05            [24]13535 	push	ar5
      004D62 C0 04            [24]13536 	push	ar4
      004D64 C0 03            [24]13537 	push	ar3
      004D66 C0 02            [24]13538 	push	ar2
      004D68 12r04rAA         [24]13539 	lcall	_setCursor
                                  13540 ;	.\ecen4350_lcd_v4.c:3226: LCD_string_write(" ");
      004D6B 90r06r54         [24]13541 	mov	dptr,#___str_30
      004D6E 75 F0 80         [24]13542 	mov	b,#0x80
      004D71 12r0FrC4         [24]13543 	lcall	_LCD_string_write
                                  13544 ;	.\ecen4350_lcd_v4.c:3227: setColorHighlight1();
      004D74 12r15r9E         [24]13545 	lcall	_setColorHighlight1
                                  13546 ;	.\ecen4350_lcd_v4.c:3228: LCD_string_write("<2> ");
      004D77 90r0Er6E         [24]13547 	mov	dptr,#___str_169
      004D7A 75 F0 80         [24]13548 	mov	b,#0x80
      004D7D 12r0FrC4         [24]13549 	lcall	_LCD_string_write
                                  13550 ;	.\ecen4350_lcd_v4.c:3229: setColorHighlight2();
      004D80 12r15rAA         [24]13551 	lcall	_setColorHighlight2
                                  13552 ;	.\ecen4350_lcd_v4.c:3230: LCD_string_write("2400 Baud\n");
      004D83 90r0FrD2         [24]13553 	mov	dptr,#___str_192
      004D86 75 F0 80         [24]13554 	mov	b,#0x80
      004D89 12r0FrC4         [24]13555 	lcall	_LCD_string_write
      004D8C D0 02            [24]13556 	pop	ar2
      004D8E D0 03            [24]13557 	pop	ar3
      004D90 D0 04            [24]13558 	pop	ar4
      004D92 D0 05            [24]13559 	pop	ar5
      004D94 D0 07            [24]13560 	pop	ar7
                                  13561 ;	.\ecen4350_lcd_v4.c:3231: TH1 = 0xF3; // 2400 baud
      004D96 75 8D F3         [24]13562 	mov	_TH1,#0xf3
                                  13563 ;	.\ecen4350_lcd_v4.c:3232: PCON = 0x00; //SMOD = 0
      004D99 75 87 00         [24]13564 	mov	_PCON,#0x00
                                  13565 ;	.\ecen4350_lcd_v4.c:3233: baudSet = 1;
      004D9C 78r02            [12]13566 	mov	r0,#_baudSet
      004D9E 76 01            [12]13567 	mov	@r0,#0x01
                                  13568 ;	.\ecen4350_lcd_v4.c:3234: baudType = 0x2;
      004DA0 78r1F            [12]13569 	mov	r0,#_uart_baudType_65536_763
      004DA2 76 02            [12]13570 	mov	@r0,#0x02
                                  13571 ;	.\ecen4350_lcd_v4.c:3235: if (initLock == 1) goto verifyUART;
      004DA4 BA 01 02         [24]13572 	cjne	r2,#0x01,00571$
      004DA7 80 03            [24]13573 	sjmp	00572$
      004DA9                      13574 00571$:
      004DA9 02r44rDB         [24]13575 	ljmp	00101$
      004DAC                      13576 00572$:
      004DAC 02r4ArE4         [24]13577 	ljmp	00149$
                                  13578 ;	.\ecen4350_lcd_v4.c:3236: else goto uartMenu;
      004DAF                      13579 00179$:
                                  13580 ;	.\ecen4350_lcd_v4.c:3238: if (selection == '3' ) {
      004DAF BE 33 5A         [24]13581 	cjne	r6,#0x33,00184$
                                  13582 ;	.\ecen4350_lcd_v4.c:3239: setCursor(0, 140);
      004DB2 75*00 8C         [24]13583 	mov	_setCursor_PARM_2,#0x8c
      004DB5 75*01 00         [24]13584 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DB8 90 00 00         [24]13585 	mov	dptr,#0x0000
      004DBB C0 07            [24]13586 	push	ar7
      004DBD C0 05            [24]13587 	push	ar5
      004DBF C0 04            [24]13588 	push	ar4
      004DC1 C0 03            [24]13589 	push	ar3
      004DC3 C0 02            [24]13590 	push	ar2
      004DC5 12r04rAA         [24]13591 	lcall	_setCursor
                                  13592 ;	.\ecen4350_lcd_v4.c:3240: LCD_string_write(" ");
      004DC8 90r06r54         [24]13593 	mov	dptr,#___str_30
      004DCB 75 F0 80         [24]13594 	mov	b,#0x80
      004DCE 12r0FrC4         [24]13595 	lcall	_LCD_string_write
                                  13596 ;	.\ecen4350_lcd_v4.c:3241: setColorHighlight1();
      004DD1 12r15r9E         [24]13597 	lcall	_setColorHighlight1
                                  13598 ;	.\ecen4350_lcd_v4.c:3242: LCD_string_write("<3> ");
      004DD4 90r0Er92         [24]13599 	mov	dptr,#___str_172
      004DD7 75 F0 80         [24]13600 	mov	b,#0x80
      004DDA 12r0FrC4         [24]13601 	lcall	_LCD_string_write
                                  13602 ;	.\ecen4350_lcd_v4.c:3243: setColorHighlight2();
      004DDD 12r15rAA         [24]13603 	lcall	_setColorHighlight2
                                  13604 ;	.\ecen4350_lcd_v4.c:3244: LCD_string_write("4800 Baud\n");
      004DE0 90r0FrDD         [24]13605 	mov	dptr,#___str_193
      004DE3 75 F0 80         [24]13606 	mov	b,#0x80
      004DE6 12r0FrC4         [24]13607 	lcall	_LCD_string_write
      004DE9 D0 02            [24]13608 	pop	ar2
      004DEB D0 03            [24]13609 	pop	ar3
      004DED D0 04            [24]13610 	pop	ar4
      004DEF D0 05            [24]13611 	pop	ar5
      004DF1 D0 07            [24]13612 	pop	ar7
                                  13613 ;	.\ecen4350_lcd_v4.c:3245: TH1 = 0xF3; //4800 baud
      004DF3 75 8D F3         [24]13614 	mov	_TH1,#0xf3
                                  13615 ;	.\ecen4350_lcd_v4.c:3246: PCON = 0x80; //SMOD 1
      004DF6 75 87 80         [24]13616 	mov	_PCON,#0x80
                                  13617 ;	.\ecen4350_lcd_v4.c:3247: baudSet = 1; 
      004DF9 78r02            [12]13618 	mov	r0,#_baudSet
      004DFB 76 01            [12]13619 	mov	@r0,#0x01
                                  13620 ;	.\ecen4350_lcd_v4.c:3248: baudType = 0x3;
      004DFD 78r1F            [12]13621 	mov	r0,#_uart_baudType_65536_763
      004DFF 76 03            [12]13622 	mov	@r0,#0x03
                                  13623 ;	.\ecen4350_lcd_v4.c:3249: if (initLock == 1) goto verifyUART;
      004E01 BA 01 02         [24]13624 	cjne	r2,#0x01,00575$
      004E04 80 03            [24]13625 	sjmp	00576$
      004E06                      13626 00575$:
      004E06 02r44rDB         [24]13627 	ljmp	00101$
      004E09                      13628 00576$:
      004E09 02r4ArE4         [24]13629 	ljmp	00149$
                                  13630 ;	.\ecen4350_lcd_v4.c:3250: else goto uartMenu;
      004E0C                      13631 00184$:
                                  13632 ;	.\ecen4350_lcd_v4.c:3252: if (selection == '4' ) {
      004E0C BE 34 5A         [24]13633 	cjne	r6,#0x34,00189$
                                  13634 ;	.\ecen4350_lcd_v4.c:3253: setCursor(0, 180);
      004E0F 75*00 B4         [24]13635 	mov	_setCursor_PARM_2,#0xb4
      004E12 75*01 00         [24]13636 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E15 90 00 00         [24]13637 	mov	dptr,#0x0000
      004E18 C0 07            [24]13638 	push	ar7
      004E1A C0 05            [24]13639 	push	ar5
      004E1C C0 04            [24]13640 	push	ar4
      004E1E C0 03            [24]13641 	push	ar3
      004E20 C0 02            [24]13642 	push	ar2
      004E22 12r04rAA         [24]13643 	lcall	_setCursor
                                  13644 ;	.\ecen4350_lcd_v4.c:3254: LCD_string_write(" ");
      004E25 90r06r54         [24]13645 	mov	dptr,#___str_30
      004E28 75 F0 80         [24]13646 	mov	b,#0x80
      004E2B 12r0FrC4         [24]13647 	lcall	_LCD_string_write
                                  13648 ;	.\ecen4350_lcd_v4.c:3255: setColorHighlight1();
      004E2E 12r15r9E         [24]13649 	lcall	_setColorHighlight1
                                  13650 ;	.\ecen4350_lcd_v4.c:3256: LCD_string_write("<4> ");
      004E31 90r0DrFD         [24]13651 	mov	dptr,#___str_160
      004E34 75 F0 80         [24]13652 	mov	b,#0x80
      004E37 12r0FrC4         [24]13653 	lcall	_LCD_string_write
                                  13654 ;	.\ecen4350_lcd_v4.c:3257: setColorHighlight2();
      004E3A 12r15rAA         [24]13655 	lcall	_setColorHighlight2
                                  13656 ;	.\ecen4350_lcd_v4.c:3258: LCD_string_write("9600 Baud\n");
      004E3D 90r0FrE8         [24]13657 	mov	dptr,#___str_194
      004E40 75 F0 80         [24]13658 	mov	b,#0x80
      004E43 12r0FrC4         [24]13659 	lcall	_LCD_string_write
      004E46 D0 02            [24]13660 	pop	ar2
      004E48 D0 03            [24]13661 	pop	ar3
      004E4A D0 04            [24]13662 	pop	ar4
      004E4C D0 05            [24]13663 	pop	ar5
      004E4E D0 07            [24]13664 	pop	ar7
                                  13665 ;	.\ecen4350_lcd_v4.c:3259: TH1 = 0xFD; //9600 baud
      004E50 75 8D FD         [24]13666 	mov	_TH1,#0xfd
                                  13667 ;	.\ecen4350_lcd_v4.c:3260: PCON = 0x00; //SMOD 0
      004E53 75 87 00         [24]13668 	mov	_PCON,#0x00
                                  13669 ;	.\ecen4350_lcd_v4.c:3261: baudSet = 1;
      004E56 78r02            [12]13670 	mov	r0,#_baudSet
      004E58 76 01            [12]13671 	mov	@r0,#0x01
                                  13672 ;	.\ecen4350_lcd_v4.c:3262: baudType = 0x4;
      004E5A 78r1F            [12]13673 	mov	r0,#_uart_baudType_65536_763
      004E5C 76 04            [12]13674 	mov	@r0,#0x04
                                  13675 ;	.\ecen4350_lcd_v4.c:3263: if (initLock == 1) goto verifyUART;
      004E5E BA 01 02         [24]13676 	cjne	r2,#0x01,00579$
      004E61 80 03            [24]13677 	sjmp	00580$
      004E63                      13678 00579$:
      004E63 02r44rDB         [24]13679 	ljmp	00101$
      004E66                      13680 00580$:
      004E66 02r4ArE4         [24]13681 	ljmp	00149$
                                  13682 ;	.\ecen4350_lcd_v4.c:3264: else goto uartMenu;
      004E69                      13683 00189$:
                                  13684 ;	.\ecen4350_lcd_v4.c:3266: if (selection == '5' ) {
      004E69 BE 35 55         [24]13685 	cjne	r6,#0x35,00193$
                                  13686 ;	.\ecen4350_lcd_v4.c:3267: setCursor(0, 220);
      004E6C 75*00 DC         [24]13687 	mov	_setCursor_PARM_2,#0xdc
      004E6F 75*01 00         [24]13688 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E72 90 00 00         [24]13689 	mov	dptr,#0x0000
      004E75 C0 07            [24]13690 	push	ar7
      004E77 C0 05            [24]13691 	push	ar5
      004E79 C0 04            [24]13692 	push	ar4
      004E7B C0 03            [24]13693 	push	ar3
      004E7D C0 02            [24]13694 	push	ar2
      004E7F 12r04rAA         [24]13695 	lcall	_setCursor
                                  13696 ;	.\ecen4350_lcd_v4.c:3268: LCD_string_write(" ");
      004E82 90r06r54         [24]13697 	mov	dptr,#___str_30
      004E85 75 F0 80         [24]13698 	mov	b,#0x80
      004E88 12r0FrC4         [24]13699 	lcall	_LCD_string_write
                                  13700 ;	.\ecen4350_lcd_v4.c:3269: setColorHighlight1();
      004E8B 12r15r9E         [24]13701 	lcall	_setColorHighlight1
                                  13702 ;	.\ecen4350_lcd_v4.c:3270: LCD_string_write("<5> ");
      004E8E 90r0FrF3         [24]13703 	mov	dptr,#___str_195
      004E91 75 F0 80         [24]13704 	mov	b,#0x80
      004E94 12r0FrC4         [24]13705 	lcall	_LCD_string_write
                                  13706 ;	.\ecen4350_lcd_v4.c:3271: setColorHighlight2();
      004E97 12r15rAA         [24]13707 	lcall	_setColorHighlight2
                                  13708 ;	.\ecen4350_lcd_v4.c:3272: LCD_string_write("19200 Baud\n");
      004E9A 90r0FrF8         [24]13709 	mov	dptr,#___str_196
      004E9D 75 F0 80         [24]13710 	mov	b,#0x80
      004EA0 12r0FrC4         [24]13711 	lcall	_LCD_string_write
      004EA3 D0 02            [24]13712 	pop	ar2
      004EA5 D0 03            [24]13713 	pop	ar3
      004EA7 D0 04            [24]13714 	pop	ar4
      004EA9 D0 05            [24]13715 	pop	ar5
      004EAB D0 07            [24]13716 	pop	ar7
                                  13717 ;	.\ecen4350_lcd_v4.c:3273: TH1 = 0xFD;	//19200 baud
      004EAD 75 8D FD         [24]13718 	mov	_TH1,#0xfd
                                  13719 ;	.\ecen4350_lcd_v4.c:3274: PCON = 0x80; //SMOD 1
      004EB0 75 87 80         [24]13720 	mov	_PCON,#0x80
                                  13721 ;	.\ecen4350_lcd_v4.c:3275: baudSet = 1;
      004EB3 78r02            [12]13722 	mov	r0,#_baudSet
      004EB5 76 01            [12]13723 	mov	@r0,#0x01
                                  13724 ;	.\ecen4350_lcd_v4.c:3276: baudType = 0x5;
      004EB7 78r1F            [12]13725 	mov	r0,#_uart_baudType_65536_763
      004EB9 76 05            [12]13726 	mov	@r0,#0x05
                                  13727 ;	.\ecen4350_lcd_v4.c:3277: if (initLock == 1) goto verifyUART;
      004EBB BA 01 35         [24]13728 	cjne	r2,#0x01,00195$
      004EBE 02r4ArE4         [24]13729 	ljmp	00149$
      004EC1                      13730 00193$:
                                  13731 ;	.\ecen4350_lcd_v4.c:3279: setColorRed();
      004EC1 C0 07            [24]13732 	push	ar7
      004EC3 C0 05            [24]13733 	push	ar5
      004EC5 C0 04            [24]13734 	push	ar4
      004EC7 C0 03            [24]13735 	push	ar3
      004EC9 C0 02            [24]13736 	push	ar2
      004ECB 12r15rCD         [24]13737 	lcall	_setColorRed
                                  13738 ;	.\ecen4350_lcd_v4.c:3280: setCursor(0, 240);
      004ECE 75*00 F0         [24]13739 	mov	_setCursor_PARM_2,#0xf0
      004ED1 75*01 00         [24]13740 	mov	(_setCursor_PARM_2 + 1),#0x00
      004ED4 90 00 00         [24]13741 	mov	dptr,#0x0000
      004ED7 12r04rAA         [24]13742 	lcall	_setCursor
                                  13743 ;	.\ecen4350_lcd_v4.c:3281: LCD_string_write(" INPUT ERROR");
      004EDA 90r10r04         [24]13744 	mov	dptr,#___str_197
      004EDD 75 F0 80         [24]13745 	mov	b,#0x80
      004EE0 12r0FrC4         [24]13746 	lcall	_LCD_string_write
                                  13747 ;	.\ecen4350_lcd_v4.c:3282: setColorDefault();
      004EE3 12r15r88         [24]13748 	lcall	_setColorDefault
      004EE6 D0 02            [24]13749 	pop	ar2
      004EE8 D0 03            [24]13750 	pop	ar3
      004EEA D0 04            [24]13751 	pop	ar4
      004EEC D0 05            [24]13752 	pop	ar5
      004EEE D0 07            [24]13753 	pop	ar7
                                  13754 ;	.\ecen4350_lcd_v4.c:3283: goto mainInput;
      004EF0 02r47r6C         [24]13755 	ljmp	00121$
                                  13756 ;	.\ecen4350_lcd_v4.c:3286: setBit:
      004EF3                      13757 00195$:
                                  13758 ;	.\ecen4350_lcd_v4.c:3287: clearLCD();
      004EF3 C0 04            [24]13759 	push	ar4
      004EF5 C0 03            [24]13760 	push	ar3
      004EF7 C0 02            [24]13761 	push	ar2
      004EF9 12r0Dr47         [24]13762 	lcall	_clearLCD
                                  13763 ;	.\ecen4350_lcd_v4.c:3288: fillTop(GRAY);
      004EFC 90 D6 BA         [24]13764 	mov	dptr,#0xd6ba
      004EFF 12r0Br7A         [24]13765 	lcall	_fillTop
                                  13766 ;	.\ecen4350_lcd_v4.c:3289: setTextSize(5);
      004F02 75 82 05         [24]13767 	mov	dpl,#0x05
      004F05 12r04rC4         [24]13768 	lcall	_setTextSize
                                  13769 ;	.\ecen4350_lcd_v4.c:3290: setColorMenu();
      004F08 12r15rC1         [24]13770 	lcall	_setColorMenu
                                  13771 ;	.\ecen4350_lcd_v4.c:3291: setCursor(30, 0);
      004F0B E4               [12]13772 	clr	a
      004F0C F5*00            [12]13773 	mov	_setCursor_PARM_2,a
      004F0E F5*01            [12]13774 	mov	(_setCursor_PARM_2 + 1),a
      004F10 90 00 1E         [24]13775 	mov	dptr,#0x001e
      004F13 12r04rAA         [24]13776 	lcall	_setCursor
                                  13777 ;	.\ecen4350_lcd_v4.c:3292: LCD_string_write("[UART]\n");
      004F16 90r0CrEE         [24]13778 	mov	dptr,#___str_136
      004F19 75 F0 80         [24]13779 	mov	b,#0x80
      004F1C 12r0FrC4         [24]13780 	lcall	_LCD_string_write
                                  13781 ;	.\ecen4350_lcd_v4.c:3293: setTextSize(2);
      004F1F 75 82 02         [24]13782 	mov	dpl,#0x02
      004F22 12r04rC4         [24]13783 	lcall	_setTextSize
                                  13784 ;	.\ecen4350_lcd_v4.c:3294: setColorDefault();
      004F25 12r15r88         [24]13785 	lcall	_setColorDefault
                                  13786 ;	.\ecen4350_lcd_v4.c:3295: setCursor(0, 60);
      004F28 75*00 3C         [24]13787 	mov	_setCursor_PARM_2,#0x3c
      004F2B 75*01 00         [24]13788 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F2E 90 00 00         [24]13789 	mov	dptr,#0x0000
      004F31 12r04rAA         [24]13790 	lcall	_setCursor
                                  13791 ;	.\ecen4350_lcd_v4.c:3296: LCD_string_write(" <1> 8-bit Mode\n");
      004F34 90r10r11         [24]13792 	mov	dptr,#___str_198
      004F37 75 F0 80         [24]13793 	mov	b,#0x80
      004F3A 12r0FrC4         [24]13794 	lcall	_LCD_string_write
                                  13795 ;	.\ecen4350_lcd_v4.c:3297: setCursor(0, 100);
      004F3D 75*00 64         [24]13796 	mov	_setCursor_PARM_2,#0x64
      004F40 75*01 00         [24]13797 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F43 90 00 00         [24]13798 	mov	dptr,#0x0000
      004F46 12r04rAA         [24]13799 	lcall	_setCursor
                                  13800 ;	.\ecen4350_lcd_v4.c:3298: LCD_string_write(" <2> 9-bit Mode\n");
      004F49 90r10r22         [24]13801 	mov	dptr,#___str_199
      004F4C 75 F0 80         [24]13802 	mov	b,#0x80
      004F4F 12r0FrC4         [24]13803 	lcall	_LCD_string_write
      004F52 D0 02            [24]13804 	pop	ar2
      004F54 D0 03            [24]13805 	pop	ar3
      004F56 D0 04            [24]13806 	pop	ar4
                                  13807 ;	.\ecen4350_lcd_v4.c:3299: sel:
      004F58                      13808 00196$:
                                  13809 ;	.\ecen4350_lcd_v4.c:3300: selection = keyDetect();
      004F58 C0 04            [24]13810 	push	ar4
      004F5A C0 03            [24]13811 	push	ar3
      004F5C C0 02            [24]13812 	push	ar2
      004F5E 12r10rE2         [24]13813 	lcall	_keyDetect
      004F61 AE 82            [24]13814 	mov	r6,dpl
      004F63 D0 02            [24]13815 	pop	ar2
      004F65 D0 03            [24]13816 	pop	ar3
      004F67 D0 04            [24]13817 	pop	ar4
      004F69 78r00            [12]13818 	mov	r0,#_selection
      004F6B A6 06            [24]13819 	mov	@r0,ar6
                                  13820 ;	.\ecen4350_lcd_v4.c:3301: if (selection == '1') {
      004F6D BE 31 44         [24]13821 	cjne	r6,#0x31,00198$
                                  13822 ;	.\ecen4350_lcd_v4.c:3302: setCursor(0, 60);
      004F70 75*00 3C         [24]13823 	mov	_setCursor_PARM_2,#0x3c
      004F73 75*01 00         [24]13824 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F76 90 00 00         [24]13825 	mov	dptr,#0x0000
      004F79 C0 04            [24]13826 	push	ar4
      004F7B C0 03            [24]13827 	push	ar3
      004F7D C0 02            [24]13828 	push	ar2
      004F7F 12r04rAA         [24]13829 	lcall	_setCursor
                                  13830 ;	.\ecen4350_lcd_v4.c:3303: LCD_string_write(" ");
      004F82 90r06r54         [24]13831 	mov	dptr,#___str_30
      004F85 75 F0 80         [24]13832 	mov	b,#0x80
      004F88 12r0FrC4         [24]13833 	lcall	_LCD_string_write
                                  13834 ;	.\ecen4350_lcd_v4.c:3304: setColorHighlight1();
      004F8B 12r15r9E         [24]13835 	lcall	_setColorHighlight1
                                  13836 ;	.\ecen4350_lcd_v4.c:3305: LCD_string_write("<1> ");
      004F8E 90r0Er38         [24]13837 	mov	dptr,#___str_166
      004F91 75 F0 80         [24]13838 	mov	b,#0x80
      004F94 12r0FrC4         [24]13839 	lcall	_LCD_string_write
                                  13840 ;	.\ecen4350_lcd_v4.c:3306: setColorHighlight2();
      004F97 12r15rAA         [24]13841 	lcall	_setColorHighlight2
                                  13842 ;	.\ecen4350_lcd_v4.c:3307: LCD_string_write("8-bit Mode\n");
      004F9A 90r10r33         [24]13843 	mov	dptr,#___str_200
      004F9D 75 F0 80         [24]13844 	mov	b,#0x80
      004FA0 12r0FrC4         [24]13845 	lcall	_LCD_string_write
      004FA3 D0 02            [24]13846 	pop	ar2
      004FA5 D0 03            [24]13847 	pop	ar3
      004FA7 D0 04            [24]13848 	pop	ar4
                                  13849 ;	.\ecen4350_lcd_v4.c:3308: bitSet = 1;
      004FA9 78r05            [12]13850 	mov	r0,#_bitSet
      004FAB 76 01            [12]13851 	mov	@r0,#0x01
                                  13852 ;	.\ecen4350_lcd_v4.c:3309: _8b = 1;
      004FAD 7D 01            [12]13853 	mov	r5,#0x01
                                  13854 ;	.\ecen4350_lcd_v4.c:3310: temp = 1;
      004FAF 7F 01            [12]13855 	mov	r7,#0x01
                                  13856 ;	.\ecen4350_lcd_v4.c:3311: goto cont;
      004FB1 02r52r74         [24]13857 	ljmp	00242$
      004FB4                      13858 00198$:
                                  13859 ;	.\ecen4350_lcd_v4.c:3312: } if (selection == '2') {
      004FB4 BE 32 44         [24]13860 	cjne	r6,#0x32,00200$
                                  13861 ;	.\ecen4350_lcd_v4.c:3313: setCursor(0, 100);
      004FB7 75*00 64         [24]13862 	mov	_setCursor_PARM_2,#0x64
      004FBA 75*01 00         [24]13863 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FBD 90 00 00         [24]13864 	mov	dptr,#0x0000
      004FC0 C0 04            [24]13865 	push	ar4
      004FC2 C0 03            [24]13866 	push	ar3
      004FC4 C0 02            [24]13867 	push	ar2
      004FC6 12r04rAA         [24]13868 	lcall	_setCursor
                                  13869 ;	.\ecen4350_lcd_v4.c:3314: LCD_string_write(" ");
      004FC9 90r06r54         [24]13870 	mov	dptr,#___str_30
      004FCC 75 F0 80         [24]13871 	mov	b,#0x80
      004FCF 12r0FrC4         [24]13872 	lcall	_LCD_string_write
                                  13873 ;	.\ecen4350_lcd_v4.c:3315: setColorHighlight1();
      004FD2 12r15r9E         [24]13874 	lcall	_setColorHighlight1
                                  13875 ;	.\ecen4350_lcd_v4.c:3316: LCD_string_write("<2> ");
      004FD5 90r0Er6E         [24]13876 	mov	dptr,#___str_169
      004FD8 75 F0 80         [24]13877 	mov	b,#0x80
      004FDB 12r0FrC4         [24]13878 	lcall	_LCD_string_write
                                  13879 ;	.\ecen4350_lcd_v4.c:3317: setColorHighlight2();
      004FDE 12r15rAA         [24]13880 	lcall	_setColorHighlight2
                                  13881 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write("9-bit Mode\n");
      004FE1 90r10r3F         [24]13882 	mov	dptr,#___str_201
      004FE4 75 F0 80         [24]13883 	mov	b,#0x80
      004FE7 12r0FrC4         [24]13884 	lcall	_LCD_string_write
      004FEA D0 02            [24]13885 	pop	ar2
      004FEC D0 03            [24]13886 	pop	ar3
      004FEE D0 04            [24]13887 	pop	ar4
                                  13888 ;	.\ecen4350_lcd_v4.c:3319: bitSet = 1;
      004FF0 78r05            [12]13889 	mov	r0,#_bitSet
      004FF2 76 01            [12]13890 	mov	@r0,#0x01
                                  13891 ;	.\ecen4350_lcd_v4.c:3320: _8b = 0;
      004FF4 7D 00            [12]13892 	mov	r5,#0x00
                                  13893 ;	.\ecen4350_lcd_v4.c:3321: temp = 2;
      004FF6 7F 02            [12]13894 	mov	r7,#0x02
                                  13895 ;	.\ecen4350_lcd_v4.c:3322: goto cont;
      004FF8 02r52r74         [24]13896 	ljmp	00242$
      004FFB                      13897 00200$:
                                  13898 ;	.\ecen4350_lcd_v4.c:3324: bitSet = 0;
      004FFB 78r05            [12]13899 	mov	r0,#_bitSet
      004FFD 76 00            [12]13900 	mov	@r0,#0x00
                                  13901 ;	.\ecen4350_lcd_v4.c:3325: goto sel;
      004FFF 02r4Fr58         [24]13902 	ljmp	00196$
                                  13903 ;	.\ecen4350_lcd_v4.c:3328: setParity:
      005002                      13904 00202$:
                                  13905 ;	.\ecen4350_lcd_v4.c:3329: if (temp == 0) {
      005002 EF               [12]13906 	mov	a,r7
                                  13907 ;	.\ecen4350_lcd_v4.c:3330: setCursor(0, 240);
      005003 70 49            [24]13908 	jnz	00204$
      005005 75*00 F0         [24]13909 	mov	_setCursor_PARM_2,#0xf0
      005008 F5*01            [12]13910 	mov	(_setCursor_PARM_2 + 1),a
      00500A 90 00 00         [24]13911 	mov	dptr,#0x0000
      00500D C0 07            [24]13912 	push	ar7
      00500F C0 05            [24]13913 	push	ar5
      005011 C0 04            [24]13914 	push	ar4
      005013 C0 03            [24]13915 	push	ar3
      005015 C0 02            [24]13916 	push	ar2
      005017 12r04rAA         [24]13917 	lcall	_setCursor
                                  13918 ;	.\ecen4350_lcd_v4.c:3331: setColorRed();
      00501A 12r15rCD         [24]13919 	lcall	_setColorRed
                                  13920 ;	.\ecen4350_lcd_v4.c:3332: writeNewLine();
      00501D 12r10r03         [24]13921 	lcall	_writeNewLine
                                  13922 ;	.\ecen4350_lcd_v4.c:3333: LCD_string_write("\n Please set the\n  bit mode first.\n");
      005020 90r10r4B         [24]13923 	mov	dptr,#___str_202
      005023 75 F0 80         [24]13924 	mov	b,#0x80
      005026 12r0FrC4         [24]13925 	lcall	_LCD_string_write
                                  13926 ;	.\ecen4350_lcd_v4.c:3334: setColorDefault();
      005029 12r15r88         [24]13927 	lcall	_setColorDefault
                                  13928 ;	.\ecen4350_lcd_v4.c:3335: setCursor(0, 140);
      00502C 75*00 8C         [24]13929 	mov	_setCursor_PARM_2,#0x8c
      00502F 75*01 00         [24]13930 	mov	(_setCursor_PARM_2 + 1),#0x00
      005032 90 00 00         [24]13931 	mov	dptr,#0x0000
      005035 12r04rAA         [24]13932 	lcall	_setCursor
                                  13933 ;	.\ecen4350_lcd_v4.c:3336: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      005038 90r0Dr9F         [24]13934 	mov	dptr,#___str_154
      00503B 75 F0 80         [24]13935 	mov	b,#0x80
      00503E 12r0FrC4         [24]13936 	lcall	_LCD_string_write
      005041 D0 02            [24]13937 	pop	ar2
      005043 D0 03            [24]13938 	pop	ar3
      005045 D0 04            [24]13939 	pop	ar4
      005047 D0 05            [24]13940 	pop	ar5
      005049 D0 07            [24]13941 	pop	ar7
                                  13942 ;	.\ecen4350_lcd_v4.c:3337: goto mainInput;
      00504B 02r47r6C         [24]13943 	ljmp	00121$
      00504E                      13944 00204$:
                                  13945 ;	.\ecen4350_lcd_v4.c:3338: } if (temp == 1) {
      00504E BF 01 02         [24]13946 	cjne	r7,#0x01,00206$
                                  13947 ;	.\ecen4350_lcd_v4.c:3339: _8b = 1;
      005051 7D 01            [12]13948 	mov	r5,#0x01
      005053                      13949 00206$:
                                  13950 ;	.\ecen4350_lcd_v4.c:3340: } if (temp == 2) {
      005053 BF 02 02         [24]13951 	cjne	r7,#0x02,00208$
                                  13952 ;	.\ecen4350_lcd_v4.c:3341: _8b = 0;
      005056 7D 00            [12]13953 	mov	r5,#0x00
      005058                      13954 00208$:
                                  13955 ;	.\ecen4350_lcd_v4.c:3343: clearLCD();
      005058 C0 07            [24]13956 	push	ar7
      00505A C0 05            [24]13957 	push	ar5
      00505C C0 04            [24]13958 	push	ar4
      00505E C0 03            [24]13959 	push	ar3
      005060 C0 02            [24]13960 	push	ar2
      005062 12r0Dr47         [24]13961 	lcall	_clearLCD
                                  13962 ;	.\ecen4350_lcd_v4.c:3344: fillTop(GRAY);
      005065 90 D6 BA         [24]13963 	mov	dptr,#0xd6ba
      005068 12r0Br7A         [24]13964 	lcall	_fillTop
                                  13965 ;	.\ecen4350_lcd_v4.c:3345: setTextSize(5);
      00506B 75 82 05         [24]13966 	mov	dpl,#0x05
      00506E 12r04rC4         [24]13967 	lcall	_setTextSize
                                  13968 ;	.\ecen4350_lcd_v4.c:3346: setColorMenu();
      005071 12r15rC1         [24]13969 	lcall	_setColorMenu
                                  13970 ;	.\ecen4350_lcd_v4.c:3347: setCursor(30, 0);
      005074 E4               [12]13971 	clr	a
      005075 F5*00            [12]13972 	mov	_setCursor_PARM_2,a
      005077 F5*01            [12]13973 	mov	(_setCursor_PARM_2 + 1),a
      005079 90 00 1E         [24]13974 	mov	dptr,#0x001e
      00507C 12r04rAA         [24]13975 	lcall	_setCursor
                                  13976 ;	.\ecen4350_lcd_v4.c:3348: LCD_string_write("[UART]\n");
      00507F 90r0CrEE         [24]13977 	mov	dptr,#___str_136
      005082 75 F0 80         [24]13978 	mov	b,#0x80
      005085 12r0FrC4         [24]13979 	lcall	_LCD_string_write
                                  13980 ;	.\ecen4350_lcd_v4.c:3349: setTextSize(2);
      005088 75 82 02         [24]13981 	mov	dpl,#0x02
      00508B 12r04rC4         [24]13982 	lcall	_setTextSize
                                  13983 ;	.\ecen4350_lcd_v4.c:3350: setColorDefault();
      00508E 12r15r88         [24]13984 	lcall	_setColorDefault
                                  13985 ;	.\ecen4350_lcd_v4.c:3351: setCursor(0, 60);
      005091 75*00 3C         [24]13986 	mov	_setCursor_PARM_2,#0x3c
      005094 75*01 00         [24]13987 	mov	(_setCursor_PARM_2 + 1),#0x00
      005097 90 00 00         [24]13988 	mov	dptr,#0x0000
      00509A 12r04rAA         [24]13989 	lcall	_setCursor
                                  13990 ;	.\ecen4350_lcd_v4.c:3352: LCD_string_write(" <1> Even Parity\n");
      00509D 90r10r6F         [24]13991 	mov	dptr,#___str_203
      0050A0 75 F0 80         [24]13992 	mov	b,#0x80
      0050A3 12r0FrC4         [24]13993 	lcall	_LCD_string_write
                                  13994 ;	.\ecen4350_lcd_v4.c:3353: setCursor(0, 100);
      0050A6 75*00 64         [24]13995 	mov	_setCursor_PARM_2,#0x64
      0050A9 75*01 00         [24]13996 	mov	(_setCursor_PARM_2 + 1),#0x00
      0050AC 90 00 00         [24]13997 	mov	dptr,#0x0000
      0050AF 12r04rAA         [24]13998 	lcall	_setCursor
                                  13999 ;	.\ecen4350_lcd_v4.c:3354: LCD_string_write(" <2> Odd Parity\n");
      0050B2 90r10r81         [24]14000 	mov	dptr,#___str_204
      0050B5 75 F0 80         [24]14001 	mov	b,#0x80
      0050B8 12r0FrC4         [24]14002 	lcall	_LCD_string_write
                                  14003 ;	.\ecen4350_lcd_v4.c:3355: setCursor(0, 140);
      0050BB 75*00 8C         [24]14004 	mov	_setCursor_PARM_2,#0x8c
      0050BE 75*01 00         [24]14005 	mov	(_setCursor_PARM_2 + 1),#0x00
      0050C1 90 00 00         [24]14006 	mov	dptr,#0x0000
      0050C4 12r04rAA         [24]14007 	lcall	_setCursor
                                  14008 ;	.\ecen4350_lcd_v4.c:3356: LCD_string_write(" <3> No Parity");
      0050C7 90r10r92         [24]14009 	mov	dptr,#___str_205
      0050CA 75 F0 80         [24]14010 	mov	b,#0x80
      0050CD 12r0FrC4         [24]14011 	lcall	_LCD_string_write
      0050D0 D0 02            [24]14012 	pop	ar2
      0050D2 D0 03            [24]14013 	pop	ar3
      0050D4 D0 04            [24]14014 	pop	ar4
      0050D6 D0 05            [24]14015 	pop	ar5
      0050D8 D0 07            [24]14016 	pop	ar7
                                  14017 ;	.\ecen4350_lcd_v4.c:3358: boop: 
      0050DA                      14018 00209$:
                                  14019 ;	.\ecen4350_lcd_v4.c:3359: selection = keyDetect();
      0050DA C0 07            [24]14020 	push	ar7
      0050DC C0 05            [24]14021 	push	ar5
      0050DE C0 04            [24]14022 	push	ar4
      0050E0 C0 03            [24]14023 	push	ar3
      0050E2 C0 02            [24]14024 	push	ar2
      0050E4 12r10rE2         [24]14025 	lcall	_keyDetect
      0050E7 AE 82            [24]14026 	mov	r6,dpl
      0050E9 D0 02            [24]14027 	pop	ar2
      0050EB D0 03            [24]14028 	pop	ar3
      0050ED D0 04            [24]14029 	pop	ar4
      0050EF D0 05            [24]14030 	pop	ar5
      0050F1 D0 07            [24]14031 	pop	ar7
      0050F3 78r00            [12]14032 	mov	r0,#_selection
      0050F5 A6 06            [24]14033 	mov	@r0,ar6
                                  14034 ;	.\ecen4350_lcd_v4.c:3360: if (selection == '1') {
      0050F7 BE 31 58         [24]14035 	cjne	r6,#0x31,00216$
                                  14036 ;	.\ecen4350_lcd_v4.c:3361: setCursor(0, 60);
      0050FA 75*00 3C         [24]14037 	mov	_setCursor_PARM_2,#0x3c
      0050FD 75*01 00         [24]14038 	mov	(_setCursor_PARM_2 + 1),#0x00
      005100 90 00 00         [24]14039 	mov	dptr,#0x0000
      005103 C0 07            [24]14040 	push	ar7
      005105 C0 05            [24]14041 	push	ar5
      005107 C0 02            [24]14042 	push	ar2
      005109 12r04rAA         [24]14043 	lcall	_setCursor
                                  14044 ;	.\ecen4350_lcd_v4.c:3362: LCD_string_write(" ");
      00510C 90r06r54         [24]14045 	mov	dptr,#___str_30
      00510F 75 F0 80         [24]14046 	mov	b,#0x80
      005112 12r0FrC4         [24]14047 	lcall	_LCD_string_write
                                  14048 ;	.\ecen4350_lcd_v4.c:3363: setColorHighlight1();
      005115 12r15r9E         [24]14049 	lcall	_setColorHighlight1
                                  14050 ;	.\ecen4350_lcd_v4.c:3364: LCD_string_write("<1> ");
      005118 90r0Er38         [24]14051 	mov	dptr,#___str_166
      00511B 75 F0 80         [24]14052 	mov	b,#0x80
      00511E 12r0FrC4         [24]14053 	lcall	_LCD_string_write
                                  14054 ;	.\ecen4350_lcd_v4.c:3365: setColorHighlight2();
      005121 12r15rAA         [24]14055 	lcall	_setColorHighlight2
                                  14056 ;	.\ecen4350_lcd_v4.c:3366: LCD_string_write("Even Parity\n");
      005124 90r10rA1         [24]14057 	mov	dptr,#___str_206
      005127 75 F0 80         [24]14058 	mov	b,#0x80
      00512A 12r0FrC4         [24]14059 	lcall	_LCD_string_write
      00512D D0 02            [24]14060 	pop	ar2
      00512F D0 05            [24]14061 	pop	ar5
      005131 D0 07            [24]14062 	pop	ar7
                                  14063 ;	.\ecen4350_lcd_v4.c:3367: if(_8b == 0) {
      005133 ED               [12]14064 	mov	a,r5
      005134 70 0B            [24]14065 	jnz	00211$
                                  14066 ;	.\ecen4350_lcd_v4.c:3368: frame_NES = 0x111;	//9 bit, Even, Parity Set
      005136 7B 11            [12]14067 	mov	r3,#0x11
      005138 7C 01            [12]14068 	mov	r4,#0x01
                                  14069 ;	.\ecen4350_lcd_v4.c:3369: bitSet = 1;
      00513A 78r05            [12]14070 	mov	r0,#_bitSet
      00513C 76 01            [12]14071 	mov	@r0,#0x01
                                  14072 ;	.\ecen4350_lcd_v4.c:3370: goto setFrame;
      00513E 02r52r0B         [24]14073 	ljmp	00231$
      005141                      14074 00211$:
                                  14075 ;	.\ecen4350_lcd_v4.c:3371: } if (_8b == 1){
      005141 BD 01 02         [24]14076 	cjne	r5,#0x01,00597$
      005144 80 01            [24]14077 	sjmp	00598$
      005146                      14078 00597$:
      005146 22               [24]14079 	ret
      005147                      14080 00598$:
                                  14081 ;	.\ecen4350_lcd_v4.c:3372: frame_NES = 0x011;	//8 bit, even, Parity Set
      005147 7B 11            [12]14082 	mov	r3,#0x11
      005149 7C 00            [12]14083 	mov	r4,#0x00
                                  14084 ;	.\ecen4350_lcd_v4.c:3373: bitSet = 1;
      00514B 78r05            [12]14085 	mov	r0,#_bitSet
      00514D 76 01            [12]14086 	mov	@r0,#0x01
                                  14087 ;	.\ecen4350_lcd_v4.c:3374: goto setFrame;
      00514F 02r52r0B         [24]14088 	ljmp	00231$
                                  14089 ;	.\ecen4350_lcd_v4.c:3377: goto finish;
      005152                      14090 00216$:
                                  14091 ;	.\ecen4350_lcd_v4.c:3379: } if (selection == '2') {
      005152 BE 32 56         [24]14092 	cjne	r6,#0x32,00223$
                                  14093 ;	.\ecen4350_lcd_v4.c:3380: setCursor(0, 100);
      005155 75*00 64         [24]14094 	mov	_setCursor_PARM_2,#0x64
      005158 75*01 00         [24]14095 	mov	(_setCursor_PARM_2 + 1),#0x00
      00515B 90 00 00         [24]14096 	mov	dptr,#0x0000
      00515E C0 07            [24]14097 	push	ar7
      005160 C0 05            [24]14098 	push	ar5
      005162 C0 02            [24]14099 	push	ar2
      005164 12r04rAA         [24]14100 	lcall	_setCursor
                                  14101 ;	.\ecen4350_lcd_v4.c:3381: LCD_string_write(" ");
      005167 90r06r54         [24]14102 	mov	dptr,#___str_30
      00516A 75 F0 80         [24]14103 	mov	b,#0x80
      00516D 12r0FrC4         [24]14104 	lcall	_LCD_string_write
                                  14105 ;	.\ecen4350_lcd_v4.c:3382: setColorHighlight1();
      005170 12r15r9E         [24]14106 	lcall	_setColorHighlight1
                                  14107 ;	.\ecen4350_lcd_v4.c:3383: LCD_string_write("<2> ");
      005173 90r0Er6E         [24]14108 	mov	dptr,#___str_169
      005176 75 F0 80         [24]14109 	mov	b,#0x80
      005179 12r0FrC4         [24]14110 	lcall	_LCD_string_write
                                  14111 ;	.\ecen4350_lcd_v4.c:3384: setColorHighlight2();
      00517C 12r15rAA         [24]14112 	lcall	_setColorHighlight2
                                  14113 ;	.\ecen4350_lcd_v4.c:3385: LCD_string_write("Odd Parity\n");
      00517F 90r10rAE         [24]14114 	mov	dptr,#___str_207
      005182 75 F0 80         [24]14115 	mov	b,#0x80
      005185 12r0FrC4         [24]14116 	lcall	_LCD_string_write
      005188 D0 02            [24]14117 	pop	ar2
      00518A D0 05            [24]14118 	pop	ar5
      00518C D0 07            [24]14119 	pop	ar7
                                  14120 ;	.\ecen4350_lcd_v4.c:3387: if (_8b == 0) {
      00518E ED               [12]14121 	mov	a,r5
      00518F 70 0A            [24]14122 	jnz	00218$
                                  14123 ;	.\ecen4350_lcd_v4.c:3388: frame_NES = 0x101;		//9 bit, odd, parity set
      005191 7B 01            [12]14124 	mov	r3,#0x01
      005193 7C 01            [12]14125 	mov	r4,#0x01
                                  14126 ;	.\ecen4350_lcd_v4.c:3389: bitSet = 1;
      005195 78r05            [12]14127 	mov	r0,#_bitSet
      005197 76 01            [12]14128 	mov	@r0,#0x01
                                  14129 ;	.\ecen4350_lcd_v4.c:3390: goto setFrame;
      005199 80 70            [24]14130 	sjmp	00231$
      00519B                      14131 00218$:
                                  14132 ;	.\ecen4350_lcd_v4.c:3391: } if (_8b == 1) {
      00519B BD 01 02         [24]14133 	cjne	r5,#0x01,00602$
      00519E 80 01            [24]14134 	sjmp	00603$
      0051A0                      14135 00602$:
      0051A0 22               [24]14136 	ret
      0051A1                      14137 00603$:
                                  14138 ;	.\ecen4350_lcd_v4.c:3392: frame_NES = 0x001;		//8 bit, odd, parity set
      0051A1 7B 01            [12]14139 	mov	r3,#0x01
      0051A3 7C 00            [12]14140 	mov	r4,#0x00
                                  14141 ;	.\ecen4350_lcd_v4.c:3393: bitSet = 1;
      0051A5 78r05            [12]14142 	mov	r0,#_bitSet
      0051A7 76 01            [12]14143 	mov	@r0,#0x01
                                  14144 ;	.\ecen4350_lcd_v4.c:3394: goto setFrame;
                                  14145 ;	.\ecen4350_lcd_v4.c:3397: goto finish;
      0051A9 80 60            [24]14146 	sjmp	00231$
      0051AB                      14147 00223$:
                                  14148 ;	.\ecen4350_lcd_v4.c:3399: } if (selection == '3') {
      0051AB BE 33 02         [24]14149 	cjne	r6,#0x33,00604$
      0051AE 80 03            [24]14150 	sjmp	00605$
      0051B0                      14151 00604$:
      0051B0 02r50rDA         [24]14152 	ljmp	00209$
      0051B3                      14153 00605$:
                                  14154 ;	.\ecen4350_lcd_v4.c:3400: setCursor(0, 140);
      0051B3 75*00 8C         [24]14155 	mov	_setCursor_PARM_2,#0x8c
      0051B6 75*01 00         [24]14156 	mov	(_setCursor_PARM_2 + 1),#0x00
      0051B9 90 00 00         [24]14157 	mov	dptr,#0x0000
      0051BC C0 07            [24]14158 	push	ar7
      0051BE C0 05            [24]14159 	push	ar5
      0051C0 C0 04            [24]14160 	push	ar4
      0051C2 C0 03            [24]14161 	push	ar3
      0051C4 C0 02            [24]14162 	push	ar2
      0051C6 12r04rAA         [24]14163 	lcall	_setCursor
                                  14164 ;	.\ecen4350_lcd_v4.c:3401: LCD_string_write(" ");
      0051C9 90r06r54         [24]14165 	mov	dptr,#___str_30
      0051CC 75 F0 80         [24]14166 	mov	b,#0x80
      0051CF 12r0FrC4         [24]14167 	lcall	_LCD_string_write
                                  14168 ;	.\ecen4350_lcd_v4.c:3402: setColorHighlight1();
      0051D2 12r15r9E         [24]14169 	lcall	_setColorHighlight1
                                  14170 ;	.\ecen4350_lcd_v4.c:3403: LCD_string_write("<3> ");
      0051D5 90r0Er92         [24]14171 	mov	dptr,#___str_172
      0051D8 75 F0 80         [24]14172 	mov	b,#0x80
      0051DB 12r0FrC4         [24]14173 	lcall	_LCD_string_write
                                  14174 ;	.\ecen4350_lcd_v4.c:3404: setColorHighlight2();
      0051DE 12r15rAA         [24]14175 	lcall	_setColorHighlight2
                                  14176 ;	.\ecen4350_lcd_v4.c:3405: LCD_string_write("No Parity\n");
      0051E1 90r10rBA         [24]14177 	mov	dptr,#___str_208
      0051E4 75 F0 80         [24]14178 	mov	b,#0x80
      0051E7 12r0FrC4         [24]14179 	lcall	_LCD_string_write
      0051EA D0 02            [24]14180 	pop	ar2
      0051EC D0 03            [24]14181 	pop	ar3
      0051EE D0 04            [24]14182 	pop	ar4
      0051F0 D0 05            [24]14183 	pop	ar5
      0051F2 D0 07            [24]14184 	pop	ar7
                                  14185 ;	.\ecen4350_lcd_v4.c:3407: if (_8b == 0) {
      0051F4 ED               [12]14186 	mov	a,r5
                                  14187 ;	.\ecen4350_lcd_v4.c:3408: frame_NES = 0x100; 			//9 bit, odd, no parity
      0051F5 70 09            [24]14188 	jnz	00225$
      0051F7 FB               [12]14189 	mov	r3,a
      0051F8 7C 01            [12]14190 	mov	r4,#0x01
                                  14191 ;	.\ecen4350_lcd_v4.c:3409: bitSet = 1;
      0051FA 78r05            [12]14192 	mov	r0,#_bitSet
      0051FC 76 01            [12]14193 	mov	@r0,#0x01
                                  14194 ;	.\ecen4350_lcd_v4.c:3410: goto setFrame;
      0051FE 80 0B            [24]14195 	sjmp	00231$
      005200                      14196 00225$:
                                  14197 ;	.\ecen4350_lcd_v4.c:3411: } if (_8b == 1) {
      005200 BD 01 08         [24]14198 	cjne	r5,#0x01,00231$
                                  14199 ;	.\ecen4350_lcd_v4.c:3412: frame_NES = 0x000;		 	//8 bit, odd, no parity
      005203 7B 00            [12]14200 	mov	r3,#0x00
      005205 7C 00            [12]14201 	mov	r4,#0x00
                                  14202 ;	.\ecen4350_lcd_v4.c:3413: bitSet = 1;
      005207 78r05            [12]14203 	mov	r0,#_bitSet
      005209 76 01            [12]14204 	mov	@r0,#0x01
                                  14205 ;	.\ecen4350_lcd_v4.c:3418: setFrame:	
      00520B                      14206 00231$:
                                  14207 ;	.\ecen4350_lcd_v4.c:3419: if ((frame_NES == 0x000) || 	//8 bit, odd, no parity
      00520B EB               [12]14208 	mov	a,r3
      00520C 4C               [12]14209 	orl	a,r4
      00520D 60 36            [24]14210 	jz	00232$
                                  14211 ;	.\ecen4350_lcd_v4.c:3420: (frame_NES == 0x001) ||		//8 bit, odd, parity set
      00520F BB 01 05         [24]14212 	cjne	r3,#0x01,00610$
      005212 BC 00 02         [24]14213 	cjne	r4,#0x00,00610$
      005215 80 2E            [24]14214 	sjmp	00232$
      005217                      14215 00610$:
                                  14216 ;	.\ecen4350_lcd_v4.c:3421: (frame_NES == 0x010) ||
      005217 BB 10 05         [24]14217 	cjne	r3,#0x10,00611$
      00521A BC 00 02         [24]14218 	cjne	r4,#0x00,00611$
      00521D 80 26            [24]14219 	sjmp	00232$
      00521F                      14220 00611$:
                                  14221 ;	.\ecen4350_lcd_v4.c:3422: (frame_NES == 0x011) ||
      00521F BB 11 05         [24]14222 	cjne	r3,#0x11,00612$
      005222 BC 00 02         [24]14223 	cjne	r4,#0x00,00612$
      005225 80 1E            [24]14224 	sjmp	00232$
      005227                      14225 00612$:
                                  14226 ;	.\ecen4350_lcd_v4.c:3423: (frame_NES == 0x100) ||
      005227 BB 00 05         [24]14227 	cjne	r3,#0x00,00613$
      00522A BC 01 02         [24]14228 	cjne	r4,#0x01,00613$
      00522D 80 16            [24]14229 	sjmp	00232$
      00522F                      14230 00613$:
                                  14231 ;	.\ecen4350_lcd_v4.c:3424: (frame_NES == 0x101) ||
      00522F BB 01 05         [24]14232 	cjne	r3,#0x01,00614$
      005232 BC 01 02         [24]14233 	cjne	r4,#0x01,00614$
      005235 80 0E            [24]14234 	sjmp	00232$
      005237                      14235 00614$:
                                  14236 ;	.\ecen4350_lcd_v4.c:3425: (frame_NES == 0x110) ||
      005237 BB 10 05         [24]14237 	cjne	r3,#0x10,00615$
      00523A BC 01 02         [24]14238 	cjne	r4,#0x01,00615$
      00523D 80 06            [24]14239 	sjmp	00232$
      00523F                      14240 00615$:
                                  14241 ;	.\ecen4350_lcd_v4.c:3426: (frame_NES == 0x111)) {
      00523F BB 11 09         [24]14242 	cjne	r3,#0x11,00233$
      005242 BC 01 06         [24]14243 	cjne	r4,#0x01,00233$
      005245                      14244 00232$:
                                  14245 ;	.\ecen4350_lcd_v4.c:3427: paritySet = 1;
      005245 78r07            [12]14246 	mov	r0,#_paritySet
      005247 76 01            [12]14247 	mov	@r0,#0x01
                                  14248 ;	.\ecen4350_lcd_v4.c:3428: goto cont;
      005249 80 29            [24]14249 	sjmp	00242$
      00524B                      14250 00233$:
                                  14251 ;	.\ecen4350_lcd_v4.c:3431: writeNewLine();
      00524B C0 07            [24]14252 	push	ar7
      00524D C0 05            [24]14253 	push	ar5
      00524F C0 04            [24]14254 	push	ar4
      005251 C0 03            [24]14255 	push	ar3
      005253 12r10r03         [24]14256 	lcall	_writeNewLine
                                  14257 ;	.\ecen4350_lcd_v4.c:3432: LCD_string_write(" Something is wrong.");
      005256 90r10rC5         [24]14258 	mov	dptr,#___str_209
      005259 75 F0 80         [24]14259 	mov	b,#0x80
      00525C 12r0FrC4         [24]14260 	lcall	_LCD_string_write
                                  14261 ;	.\ecen4350_lcd_v4.c:3433: delay(80);
      00525F 90 00 50         [24]14262 	mov	dptr,#0x0050
      005262 12r00rE0         [24]14263 	lcall	_delay
      005265 D0 03            [24]14264 	pop	ar3
      005267 D0 04            [24]14265 	pop	ar4
      005269 D0 05            [24]14266 	pop	ar5
      00526B D0 07            [24]14267 	pop	ar7
                                  14268 ;	.\ecen4350_lcd_v4.c:3434: bitSet = 0;
      00526D 78r05            [12]14269 	mov	r0,#_bitSet
      00526F 76 00            [12]14270 	mov	@r0,#0x00
                                  14271 ;	.\ecen4350_lcd_v4.c:3435: goto uartMenu;
      005271 02r44rDB         [24]14272 	ljmp	00101$
                                  14273 ;	.\ecen4350_lcd_v4.c:3437: cont:
      005274                      14274 00242$:
                                  14275 ;	.\ecen4350_lcd_v4.c:3438: if (initLock == 1) goto verifyUART;
      005274 BA 01 02         [24]14276 	cjne	r2,#0x01,00618$
      005277 80 03            [24]14277 	sjmp	00619$
      005279                      14278 00618$:
      005279 02r44rDB         [24]14279 	ljmp	00101$
      00527C                      14280 00619$:
      00527C 02r4ArE4         [24]14281 	ljmp	00149$
                                  14282 ;	.\ecen4350_lcd_v4.c:3440: finish:
                                  14283 ;	.\ecen4350_lcd_v4.c:3441: return;
                                  14284 ;	.\ecen4350_lcd_v4.c:3443: }
      00527F 22               [24]14285 	ret
                                  14286 ;------------------------------------------------------------
                                  14287 ;Allocation info for local variables in function 'main'
                                  14288 ;------------------------------------------------------------
                                  14289 ;__1310720181              Allocated to registers 
                                  14290 ;__1310720182              Allocated to registers 
                                  14291 ;map_address               Allocated to registers 
                                  14292 ;d                         Allocated to registers 
                                  14293 ;__1310720184              Allocated to registers 
                                  14294 ;__1310720185              Allocated to registers 
                                  14295 ;map_address               Allocated to registers 
                                  14296 ;d                         Allocated to registers 
                                  14297 ;__1310720187              Allocated to registers 
                                  14298 ;__1310720188              Allocated to registers 
                                  14299 ;map_address               Allocated to registers 
                                  14300 ;d                         Allocated to registers 
                                  14301 ;__1310720190              Allocated to registers 
                                  14302 ;__1310720191              Allocated to registers 
                                  14303 ;map_address               Allocated to registers 
                                  14304 ;d                         Allocated to registers 
                                  14305 ;__1966080193              Allocated to registers 
                                  14306 ;__1966080194              Allocated to registers 
                                  14307 ;map_address               Allocated to registers 
                                  14308 ;d                         Allocated to registers 
                                  14309 ;__2621440196              Allocated to registers 
                                  14310 ;__2621440197              Allocated to registers 
                                  14311 ;map_address               Allocated to registers 
                                  14312 ;d                         Allocated to registers 
                                  14313 ;__2621440199              Allocated to registers 
                                  14314 ;__2621440200              Allocated to registers 
                                  14315 ;map_address               Allocated to registers 
                                  14316 ;d                         Allocated to registers 
                                  14317 ;__2621440202              Allocated to registers 
                                  14318 ;__2621440203              Allocated to registers 
                                  14319 ;map_address               Allocated to registers 
                                  14320 ;d                         Allocated to registers 
                                  14321 ;__2621440205              Allocated to registers 
                                  14322 ;__2621440206              Allocated to registers 
                                  14323 ;map_address               Allocated to registers 
                                  14324 ;d                         Allocated to registers 
                                  14325 ;__2621440208              Allocated to registers 
                                  14326 ;__2621440209              Allocated to registers 
                                  14327 ;map_address               Allocated to registers 
                                  14328 ;d                         Allocated to registers 
                                  14329 ;__2621440211              Allocated to registers 
                                  14330 ;__2621440212              Allocated to registers 
                                  14331 ;map_address               Allocated to registers 
                                  14332 ;d                         Allocated to registers 
                                  14333 ;__2621440214              Allocated to registers 
                                  14334 ;__2621440215              Allocated to registers 
                                  14335 ;map_address               Allocated to registers 
                                  14336 ;d                         Allocated to registers 
                                  14337 ;__2621440217              Allocated to registers 
                                  14338 ;__2621440218              Allocated to registers 
                                  14339 ;map_address               Allocated to registers 
                                  14340 ;d                         Allocated to registers 
                                  14341 ;__2621440220              Allocated to registers 
                                  14342 ;__2621440221              Allocated to registers 
                                  14343 ;map_address               Allocated to registers 
                                  14344 ;d                         Allocated to registers 
                                  14345 ;__2621440223              Allocated to registers 
                                  14346 ;__2621440224              Allocated to registers 
                                  14347 ;map_address               Allocated to registers 
                                  14348 ;d                         Allocated to registers 
                                  14349 ;__2621440226              Allocated to registers 
                                  14350 ;__2621440227              Allocated to registers 
                                  14351 ;map_address               Allocated to registers 
                                  14352 ;d                         Allocated to registers 
                                  14353 ;__2621440229              Allocated to registers 
                                  14354 ;__2621440230              Allocated to registers 
                                  14355 ;map_address               Allocated to registers 
                                  14356 ;d                         Allocated to registers 
                                  14357 ;__2621440232              Allocated to registers 
                                  14358 ;__2621440233              Allocated to registers 
                                  14359 ;map_address               Allocated to registers 
                                  14360 ;d                         Allocated to registers 
                                  14361 ;__2621440235              Allocated to registers 
                                  14362 ;__2621440236              Allocated to registers 
                                  14363 ;map_address               Allocated to registers 
                                  14364 ;d                         Allocated to registers 
                                  14365 ;validKey                  Allocated to registers r7 
                                  14366 ;------------------------------------------------------------
                                  14367 ;	.\ecen4350_lcd_v4.c:3446: void main() {
                                  14368 ;	-----------------------------------------
                                  14369 ;	 function main
                                  14370 ;	-----------------------------------------
      005280                      14371 _main:
                                  14372 ;	.\ecen4350_lcd_v4.c:3450: delay(10);
      005280 90 00 0A         [24]14373 	mov	dptr,#0x000a
      005283 12r00rE0         [24]14374 	lcall	_delay
                                  14375 ;	.\ecen4350_lcd_v4.c:3451: iowrite8(seg7_address, ON);
      005286 85*04 82         [24]14376 	mov	dpl,_seg7_address
      005289 85*05 83         [24]14377 	mov	dph,(_seg7_address + 1)
                                  14378 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14379 ;	assignBit
      00528C D2 B5            [12]14380 	setb	_P3_5
                                  14381 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00528E E4               [12]14382 	clr	a
      00528F F0               [24]14383 	movx	@dptr,a
                                  14384 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14385 ;	assignBit
      005290 C2 B5            [12]14386 	clr	_P3_5
                                  14387 ;	.\ecen4350_lcd_v4.c:3452: delay(5);
      005292 90 00 05         [24]14388 	mov	dptr,#0x0005
      005295 12r00rE0         [24]14389 	lcall	_delay
                                  14390 ;	.\ecen4350_lcd_v4.c:3453: CD = 0;
                                  14391 ;	assignBit
      005298 C2 B4            [12]14392 	clr	_P3_4
                                  14393 ;	.\ecen4350_lcd_v4.c:3454: IOM = 0;
                                  14394 ;	assignBit
      00529A C2 B5            [12]14395 	clr	_P3_5
                                  14396 ;	.\ecen4350_lcd_v4.c:3455: rtcInit();							// RTC init
      00529C 12r02rE9         [24]14397 	lcall	_rtcInit
                                  14398 ;	.\ecen4350_lcd_v4.c:3457: TFT_LCD_INIT();						// LCD init
      00529F 12r05rE2         [24]14399 	lcall	_TFT_LCD_INIT
                                  14400 ;	.\ecen4350_lcd_v4.c:3458: iowrite8(seg7_address, SEG_H);		// [H]
      0052A2 85*04 82         [24]14401 	mov	dpl,_seg7_address
      0052A5 85*05 83         [24]14402 	mov	dph,(_seg7_address + 1)
                                  14403 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14404 ;	assignBit
      0052A8 D2 B5            [12]14405 	setb	_P3_5
                                  14406 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0052AA 74 89            [12]14407 	mov	a,#0x89
      0052AC F0               [24]14408 	movx	@dptr,a
                                  14409 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14410 ;	assignBit
      0052AD C2 B5            [12]14411 	clr	_P3_5
                                  14412 ;	.\ecen4350_lcd_v4.c:3459: delay(40);							
      0052AF 90 00 28         [24]14413 	mov	dptr,#0x0028
      0052B2 12r00rE0         [24]14414 	lcall	_delay
                                  14415 ;	.\ecen4350_lcd_v4.c:3460: iowrite8(seg7_address, 0b01111011); // [i.]
      0052B5 85*04 82         [24]14416 	mov	dpl,_seg7_address
      0052B8 85*05 83         [24]14417 	mov	dph,(_seg7_address + 1)
                                  14418 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14419 ;	assignBit
      0052BB D2 B5            [12]14420 	setb	_P3_5
                                  14421 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0052BD 74 7B            [12]14422 	mov	a,#0x7b
      0052BF F0               [24]14423 	movx	@dptr,a
                                  14424 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14425 ;	assignBit
      0052C0 C2 B5            [12]14426 	clr	_P3_5
                                  14427 ;	.\ecen4350_lcd_v4.c:3461: delay(40);
      0052C2 90 00 28         [24]14428 	mov	dptr,#0x0028
      0052C5 12r00rE0         [24]14429 	lcall	_delay
                                  14430 ;	.\ecen4350_lcd_v4.c:3462: iowrite8(seg7_address, OFF);
      0052C8 85*04 82         [24]14431 	mov	dpl,_seg7_address
      0052CB 85*05 83         [24]14432 	mov	dph,(_seg7_address + 1)
                                  14433 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14434 ;	assignBit
      0052CE D2 B5            [12]14435 	setb	_P3_5
                                  14436 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0052D0 74 FF            [12]14437 	mov	a,#0xff
      0052D2 F0               [24]14438 	movx	@dptr,a
                                  14439 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14440 ;	assignBit
      0052D3 C2 B5            [12]14441 	clr	_P3_5
                                  14442 ;	.\ecen4350_lcd_v4.c:3463: delay(20);
      0052D5 90 00 14         [24]14443 	mov	dptr,#0x0014
      0052D8 12r00rE0         [24]14444 	lcall	_delay
                                  14445 ;	.\ecen4350_lcd_v4.c:3466: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      0052DB 12r15r30         [24]14446 	lcall	_writeSomeLines
                                  14447 ;	.\ecen4350_lcd_v4.c:3468: clearLCD();							// set LCD background
      0052DE 12r0Dr47         [24]14448 	lcall	_clearLCD
                                  14449 ;	.\ecen4350_lcd_v4.c:3469: setColorDefault();	// set text color
      0052E1 12r15r88         [24]14450 	lcall	_setColorDefault
                                  14451 ;	.\ecen4350_lcd_v4.c:3479: loop:
      0052E4                      14452 00101$:
                                  14453 ;	.\ecen4350_lcd_v4.c:3480: validKey = 1;
      0052E4 7F 01            [12]14454 	mov	r7,#0x01
                                  14455 ;	.\ecen4350_lcd_v4.c:3481: iowrite8(seg7_address, OFF);
      0052E6 85*04 82         [24]14456 	mov	dpl,_seg7_address
      0052E9 85*05 83         [24]14457 	mov	dph,(_seg7_address + 1)
                                  14458 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14459 ;	assignBit
      0052EC D2 B5            [12]14460 	setb	_P3_5
                                  14461 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0052EE 74 FF            [12]14462 	mov	a,#0xff
      0052F0 F0               [24]14463 	movx	@dptr,a
                                  14464 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14465 ;	assignBit
      0052F1 C2 B5            [12]14466 	clr	_P3_5
                                  14467 ;	.\ecen4350_lcd_v4.c:3482: clearLCD();
      0052F3 C0 07            [24]14468 	push	ar7
      0052F5 12r0Dr47         [24]14469 	lcall	_clearLCD
                                  14470 ;	.\ecen4350_lcd_v4.c:3483: setCursor(30, 120);
      0052F8 75*00 78         [24]14471 	mov	_setCursor_PARM_2,#0x78
      0052FB 75*01 00         [24]14472 	mov	(_setCursor_PARM_2 + 1),#0x00
      0052FE 90 00 1E         [24]14473 	mov	dptr,#0x001e
      005301 12r04rAA         [24]14474 	lcall	_setCursor
                                  14475 ;	.\ecen4350_lcd_v4.c:3484: setTextSize(3);
      005304 75 82 03         [24]14476 	mov	dpl,#0x03
      005307 12r04rC4         [24]14477 	lcall	_setTextSize
                                  14478 ;	.\ecen4350_lcd_v4.c:3485: setColorSelect();
      00530A 12r15r93         [24]14479 	lcall	_setColorSelect
                                  14480 ;	.\ecen4350_lcd_v4.c:3486: rtcPrint();
      00530D 12r03r9A         [24]14481 	lcall	_rtcPrint
                                  14482 ;	.\ecen4350_lcd_v4.c:3487: printMenu();
      005310 12r16rED         [24]14483 	lcall	_printMenu
      005313 D0 07            [24]14484 	pop	ar7
                                  14485 ;	.\ecen4350_lcd_v4.c:3488: inputKey:
      005315                      14486 00102$:
                                  14487 ;	.\ecen4350_lcd_v4.c:3489: selection = keyDetect();
      005315 C0 07            [24]14488 	push	ar7
      005317 12r10rE2         [24]14489 	lcall	_keyDetect
      00531A AE 82            [24]14490 	mov	r6,dpl
      00531C D0 07            [24]14491 	pop	ar7
      00531E 78r00            [12]14492 	mov	r0,#_selection
      005320 A6 06            [24]14493 	mov	@r0,ar6
                                  14494 ;	.\ecen4350_lcd_v4.c:3490: if (selection == 'D') {
      005322 BE 44 68         [24]14495 	cjne	r6,#0x44,00106$
                                  14496 ;	.\ecen4350_lcd_v4.c:3491: iowrite8(seg7_address, ON);
      005325 85*04 82         [24]14497 	mov	dpl,_seg7_address
      005328 85*05 83         [24]14498 	mov	dph,(_seg7_address + 1)
                                  14499 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14500 ;	assignBit
      00532B D2 B5            [12]14501 	setb	_P3_5
                                  14502 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00532D E4               [12]14503 	clr	a
      00532E F0               [24]14504 	movx	@dptr,a
                                  14505 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14506 ;	assignBit
      00532F C2 B5            [12]14507 	clr	_P3_5
                                  14508 ;	.\ecen4350_lcd_v4.c:3492: setCursor(10, 60);
      005331 75*00 3C         [24]14509 	mov	_setCursor_PARM_2,#0x3c
      005334 75*01 00         [24]14510 	mov	(_setCursor_PARM_2 + 1),#0x00
      005337 90 00 0A         [24]14511 	mov	dptr,#0x000a
      00533A C0 07            [24]14512 	push	ar7
      00533C 12r04rAA         [24]14513 	lcall	_setCursor
                                  14514 ;	.\ecen4350_lcd_v4.c:3493: setColorHighlight1();
      00533F 12r15r9E         [24]14515 	lcall	_setColorHighlight1
                                  14516 ;	.\ecen4350_lcd_v4.c:3494: LCD_string_write("<D>");
      005342 90r10rDA         [24]14517 	mov	dptr,#___str_210
      005345 75 F0 80         [24]14518 	mov	b,#0x80
      005348 12r0FrC4         [24]14519 	lcall	_LCD_string_write
                                  14520 ;	.\ecen4350_lcd_v4.c:3495: setColorHighlight2();
      00534B 12r15rAA         [24]14521 	lcall	_setColorHighlight2
                                  14522 ;	.\ecen4350_lcd_v4.c:3496: LCD_string_write(" DUMP\n");
      00534E 90r05r69         [24]14523 	mov	dptr,#___str_7
      005351 75 F0 80         [24]14524 	mov	b,#0x80
      005354 12r0FrC4         [24]14525 	lcall	_LCD_string_write
                                  14526 ;	.\ecen4350_lcd_v4.c:3497: delay(20);
      005357 90 00 14         [24]14527 	mov	dptr,#0x0014
      00535A 12r00rE0         [24]14528 	lcall	_delay
      00535D D0 07            [24]14529 	pop	ar7
                                  14530 ;	.\ecen4350_lcd_v4.c:3498: iowrite8(seg7_address, SEG_D);
      00535F 85*04 82         [24]14531 	mov	dpl,_seg7_address
      005362 85*05 83         [24]14532 	mov	dph,(_seg7_address + 1)
                                  14533 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14534 ;	assignBit
      005365 D2 B5            [12]14535 	setb	_P3_5
                                  14536 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005367 74 A1            [12]14537 	mov	a,#0xa1
      005369 F0               [24]14538 	movx	@dptr,a
                                  14539 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14540 ;	assignBit
      00536A C2 B5            [12]14541 	clr	_P3_5
                                  14542 ;	.\ecen4350_lcd_v4.c:3499: if (validKey == 0) {
      00536C EF               [12]14543 	mov	a,r7
      00536D 70 18            [24]14544 	jnz	00104$
                                  14545 ;	.\ecen4350_lcd_v4.c:3500: setColorDefault();
      00536F 12r15r88         [24]14546 	lcall	_setColorDefault
                                  14547 ;	.\ecen4350_lcd_v4.c:3501: setCursor(60, 280);
      005372 75*00 18         [24]14548 	mov	_setCursor_PARM_2,#0x18
      005375 75*01 01         [24]14549 	mov	(_setCursor_PARM_2 + 1),#0x01
      005378 90 00 3C         [24]14550 	mov	dptr,#0x003c
      00537B 12r04rAA         [24]14551 	lcall	_setCursor
                                  14552 ;	.\ecen4350_lcd_v4.c:3502: LCD_string_write("          ");
      00537E 90r10rDE         [24]14553 	mov	dptr,#___str_211
      005381 75 F0 80         [24]14554 	mov	b,#0x80
      005384 12r0FrC4         [24]14555 	lcall	_LCD_string_write
      005387                      14556 00104$:
                                  14557 ;	.\ecen4350_lcd_v4.c:3504: dump();
      005387 12r18r48         [24]14558 	lcall	_dump
                                  14559 ;	.\ecen4350_lcd_v4.c:3505: goto loop;
      00538A 02r52rE4         [24]14560 	ljmp	00101$
      00538D                      14561 00106$:
                                  14562 ;	.\ecen4350_lcd_v4.c:3506: } if(selection == 'B') {
      00538D BE 42 68         [24]14563 	cjne	r6,#0x42,00110$
                                  14564 ;	.\ecen4350_lcd_v4.c:3507: iowrite8(seg7_address, ON);
      005390 85*04 82         [24]14565 	mov	dpl,_seg7_address
      005393 85*05 83         [24]14566 	mov	dph,(_seg7_address + 1)
                                  14567 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14568 ;	assignBit
      005396 D2 B5            [12]14569 	setb	_P3_5
                                  14570 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005398 E4               [12]14571 	clr	a
      005399 F0               [24]14572 	movx	@dptr,a
                                  14573 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14574 ;	assignBit
      00539A C2 B5            [12]14575 	clr	_P3_5
                                  14576 ;	.\ecen4350_lcd_v4.c:3508: setCursor(130, 60);
      00539C 75*00 3C         [24]14577 	mov	_setCursor_PARM_2,#0x3c
      00539F 75*01 00         [24]14578 	mov	(_setCursor_PARM_2 + 1),#0x00
      0053A2 90 00 82         [24]14579 	mov	dptr,#0x0082
      0053A5 C0 07            [24]14580 	push	ar7
      0053A7 12r04rAA         [24]14581 	lcall	_setCursor
                                  14582 ;	.\ecen4350_lcd_v4.c:3509: setColorHighlight1();
      0053AA 12r15r9E         [24]14583 	lcall	_setColorHighlight1
                                  14584 ;	.\ecen4350_lcd_v4.c:3510: LCD_string_write("<B>");
      0053AD 90r10rE9         [24]14585 	mov	dptr,#___str_212
      0053B0 75 F0 80         [24]14586 	mov	b,#0x80
      0053B3 12r0FrC4         [24]14587 	lcall	_LCD_string_write
                                  14588 ;	.\ecen4350_lcd_v4.c:3511: setColorHighlight2();
      0053B6 12r15rAA         [24]14589 	lcall	_setColorHighlight2
                                  14590 ;	.\ecen4350_lcd_v4.c:3512: LCD_string_write(" MOVE\n");
      0053B9 90r05r75         [24]14591 	mov	dptr,#___str_9
      0053BC 75 F0 80         [24]14592 	mov	b,#0x80
      0053BF 12r0FrC4         [24]14593 	lcall	_LCD_string_write
                                  14594 ;	.\ecen4350_lcd_v4.c:3513: delay(20);
      0053C2 90 00 14         [24]14595 	mov	dptr,#0x0014
      0053C5 12r00rE0         [24]14596 	lcall	_delay
      0053C8 D0 07            [24]14597 	pop	ar7
                                  14598 ;	.\ecen4350_lcd_v4.c:3514: iowrite8(seg7_address, SEG_B);
      0053CA 85*04 82         [24]14599 	mov	dpl,_seg7_address
      0053CD 85*05 83         [24]14600 	mov	dph,(_seg7_address + 1)
                                  14601 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14602 ;	assignBit
      0053D0 D2 B5            [12]14603 	setb	_P3_5
                                  14604 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0053D2 74 83            [12]14605 	mov	a,#0x83
      0053D4 F0               [24]14606 	movx	@dptr,a
                                  14607 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14608 ;	assignBit
      0053D5 C2 B5            [12]14609 	clr	_P3_5
                                  14610 ;	.\ecen4350_lcd_v4.c:3515: if (validKey == 0) {
      0053D7 EF               [12]14611 	mov	a,r7
      0053D8 70 18            [24]14612 	jnz	00108$
                                  14613 ;	.\ecen4350_lcd_v4.c:3516: setColorDefault();
      0053DA 12r15r88         [24]14614 	lcall	_setColorDefault
                                  14615 ;	.\ecen4350_lcd_v4.c:3517: setCursor(60, 280);
      0053DD 75*00 18         [24]14616 	mov	_setCursor_PARM_2,#0x18
      0053E0 75*01 01         [24]14617 	mov	(_setCursor_PARM_2 + 1),#0x01
      0053E3 90 00 3C         [24]14618 	mov	dptr,#0x003c
      0053E6 12r04rAA         [24]14619 	lcall	_setCursor
                                  14620 ;	.\ecen4350_lcd_v4.c:3518: LCD_string_write("          ");
      0053E9 90r10rDE         [24]14621 	mov	dptr,#___str_211
      0053EC 75 F0 80         [24]14622 	mov	b,#0x80
      0053EF 12r0FrC4         [24]14623 	lcall	_LCD_string_write
      0053F2                      14624 00108$:
                                  14625 ;	.\ecen4350_lcd_v4.c:3520: move();
      0053F2 12r21r09         [24]14626 	lcall	_move
                                  14627 ;	.\ecen4350_lcd_v4.c:3521: goto loop;
      0053F5 02r52rE4         [24]14628 	ljmp	00101$
      0053F8                      14629 00110$:
                                  14630 ;	.\ecen4350_lcd_v4.c:3522: } if(selection == 'E') {
      0053F8 BE 45 68         [24]14631 	cjne	r6,#0x45,00114$
                                  14632 ;	.\ecen4350_lcd_v4.c:3523: iowrite8(seg7_address, ON);
      0053FB 85*04 82         [24]14633 	mov	dpl,_seg7_address
      0053FE 85*05 83         [24]14634 	mov	dph,(_seg7_address + 1)
                                  14635 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14636 ;	assignBit
      005401 D2 B5            [12]14637 	setb	_P3_5
                                  14638 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005403 E4               [12]14639 	clr	a
      005404 F0               [24]14640 	movx	@dptr,a
                                  14641 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14642 ;	assignBit
      005405 C2 B5            [12]14643 	clr	_P3_5
                                  14644 ;	.\ecen4350_lcd_v4.c:3524: setCursor(10, 100);
      005407 75*00 64         [24]14645 	mov	_setCursor_PARM_2,#0x64
      00540A 75*01 00         [24]14646 	mov	(_setCursor_PARM_2 + 1),#0x00
      00540D 90 00 0A         [24]14647 	mov	dptr,#0x000a
      005410 C0 07            [24]14648 	push	ar7
      005412 12r04rAA         [24]14649 	lcall	_setCursor
                                  14650 ;	.\ecen4350_lcd_v4.c:3525: setColorHighlight1();
      005415 12r15r9E         [24]14651 	lcall	_setColorHighlight1
                                  14652 ;	.\ecen4350_lcd_v4.c:3526: LCD_string_write("<E>");
      005418 90r10rED         [24]14653 	mov	dptr,#___str_213
      00541B 75 F0 80         [24]14654 	mov	b,#0x80
      00541E 12r0FrC4         [24]14655 	lcall	_LCD_string_write
                                  14656 ;	.\ecen4350_lcd_v4.c:3527: setColorHighlight2();
      005421 12r15rAA         [24]14657 	lcall	_setColorHighlight2
                                  14658 ;	.\ecen4350_lcd_v4.c:3528: LCD_string_write(" EDIT\n");
      005424 90r05r81         [24]14659 	mov	dptr,#___str_11
      005427 75 F0 80         [24]14660 	mov	b,#0x80
      00542A 12r0FrC4         [24]14661 	lcall	_LCD_string_write
                                  14662 ;	.\ecen4350_lcd_v4.c:3529: delay(20);
      00542D 90 00 14         [24]14663 	mov	dptr,#0x0014
      005430 12r00rE0         [24]14664 	lcall	_delay
      005433 D0 07            [24]14665 	pop	ar7
                                  14666 ;	.\ecen4350_lcd_v4.c:3530: iowrite8(seg7_address, SEG_E);
      005435 85*04 82         [24]14667 	mov	dpl,_seg7_address
      005438 85*05 83         [24]14668 	mov	dph,(_seg7_address + 1)
                                  14669 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14670 ;	assignBit
      00543B D2 B5            [12]14671 	setb	_P3_5
                                  14672 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00543D 74 86            [12]14673 	mov	a,#0x86
      00543F F0               [24]14674 	movx	@dptr,a
                                  14675 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14676 ;	assignBit
      005440 C2 B5            [12]14677 	clr	_P3_5
                                  14678 ;	.\ecen4350_lcd_v4.c:3531: if (validKey == 0) {
      005442 EF               [12]14679 	mov	a,r7
      005443 70 18            [24]14680 	jnz	00112$
                                  14681 ;	.\ecen4350_lcd_v4.c:3532: setColorDefault();
      005445 12r15r88         [24]14682 	lcall	_setColorDefault
                                  14683 ;	.\ecen4350_lcd_v4.c:3533: setCursor(60, 280);
      005448 75*00 18         [24]14684 	mov	_setCursor_PARM_2,#0x18
      00544B 75*01 01         [24]14685 	mov	(_setCursor_PARM_2 + 1),#0x01
      00544E 90 00 3C         [24]14686 	mov	dptr,#0x003c
      005451 12r04rAA         [24]14687 	lcall	_setCursor
                                  14688 ;	.\ecen4350_lcd_v4.c:3534: LCD_string_write("          ");
      005454 90r10rDE         [24]14689 	mov	dptr,#___str_211
      005457 75 F0 80         [24]14690 	mov	b,#0x80
      00545A 12r0FrC4         [24]14691 	lcall	_LCD_string_write
      00545D                      14692 00112$:
                                  14693 ;	.\ecen4350_lcd_v4.c:3536: edit();
      00545D 12r26r72         [24]14694 	lcall	_edit
                                  14695 ;	.\ecen4350_lcd_v4.c:3537: goto loop;
      005460 02r52rE4         [24]14696 	ljmp	00101$
      005463                      14697 00114$:
                                  14698 ;	.\ecen4350_lcd_v4.c:3538: } if(selection == 'F') {
      005463 BE 46 68         [24]14699 	cjne	r6,#0x46,00118$
                                  14700 ;	.\ecen4350_lcd_v4.c:3539: iowrite8(seg7_address, ON);
      005466 85*04 82         [24]14701 	mov	dpl,_seg7_address
      005469 85*05 83         [24]14702 	mov	dph,(_seg7_address + 1)
                                  14703 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14704 ;	assignBit
      00546C D2 B5            [12]14705 	setb	_P3_5
                                  14706 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00546E E4               [12]14707 	clr	a
      00546F F0               [24]14708 	movx	@dptr,a
                                  14709 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14710 ;	assignBit
      005470 C2 B5            [12]14711 	clr	_P3_5
                                  14712 ;	.\ecen4350_lcd_v4.c:3540: setCursor(130, 100);
      005472 75*00 64         [24]14713 	mov	_setCursor_PARM_2,#0x64
      005475 75*01 00         [24]14714 	mov	(_setCursor_PARM_2 + 1),#0x00
      005478 90 00 82         [24]14715 	mov	dptr,#0x0082
      00547B C0 07            [24]14716 	push	ar7
      00547D 12r04rAA         [24]14717 	lcall	_setCursor
                                  14718 ;	.\ecen4350_lcd_v4.c:3541: setColorHighlight1();
      005480 12r15r9E         [24]14719 	lcall	_setColorHighlight1
                                  14720 ;	.\ecen4350_lcd_v4.c:3542: LCD_string_write("<F>");
      005483 90r10rF1         [24]14721 	mov	dptr,#___str_214
      005486 75 F0 80         [24]14722 	mov	b,#0x80
      005489 12r0FrC4         [24]14723 	lcall	_LCD_string_write
                                  14724 ;	.\ecen4350_lcd_v4.c:3543: setColorHighlight2();
      00548C 12r15rAA         [24]14725 	lcall	_setColorHighlight2
                                  14726 ;	.\ecen4350_lcd_v4.c:3544: LCD_string_write(" FIND\n");
      00548F 90r05r8D         [24]14727 	mov	dptr,#___str_13
      005492 75 F0 80         [24]14728 	mov	b,#0x80
      005495 12r0FrC4         [24]14729 	lcall	_LCD_string_write
                                  14730 ;	.\ecen4350_lcd_v4.c:3545: delay(20);
      005498 90 00 14         [24]14731 	mov	dptr,#0x0014
      00549B 12r00rE0         [24]14732 	lcall	_delay
      00549E D0 07            [24]14733 	pop	ar7
                                  14734 ;	.\ecen4350_lcd_v4.c:3546: iowrite8(seg7_address, SEG_F);
      0054A0 85*04 82         [24]14735 	mov	dpl,_seg7_address
      0054A3 85*05 83         [24]14736 	mov	dph,(_seg7_address + 1)
                                  14737 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14738 ;	assignBit
      0054A6 D2 B5            [12]14739 	setb	_P3_5
                                  14740 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0054A8 74 8E            [12]14741 	mov	a,#0x8e
      0054AA F0               [24]14742 	movx	@dptr,a
                                  14743 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14744 ;	assignBit
      0054AB C2 B5            [12]14745 	clr	_P3_5
                                  14746 ;	.\ecen4350_lcd_v4.c:3547: if (validKey == 0) {
      0054AD EF               [12]14747 	mov	a,r7
      0054AE 70 18            [24]14748 	jnz	00116$
                                  14749 ;	.\ecen4350_lcd_v4.c:3548: setColorDefault();
      0054B0 12r15r88         [24]14750 	lcall	_setColorDefault
                                  14751 ;	.\ecen4350_lcd_v4.c:3549: setCursor(60, 280);
      0054B3 75*00 18         [24]14752 	mov	_setCursor_PARM_2,#0x18
      0054B6 75*01 01         [24]14753 	mov	(_setCursor_PARM_2 + 1),#0x01
      0054B9 90 00 3C         [24]14754 	mov	dptr,#0x003c
      0054BC 12r04rAA         [24]14755 	lcall	_setCursor
                                  14756 ;	.\ecen4350_lcd_v4.c:3550: LCD_string_write("          ");
      0054BF 90r10rDE         [24]14757 	mov	dptr,#___str_211
      0054C2 75 F0 80         [24]14758 	mov	b,#0x80
      0054C5 12r0FrC4         [24]14759 	lcall	_LCD_string_write
      0054C8                      14760 00116$:
                                  14761 ;	.\ecen4350_lcd_v4.c:3552: find();
      0054C8 12r2DrCE         [24]14762 	lcall	_find
                                  14763 ;	.\ecen4350_lcd_v4.c:3553: goto loop;
      0054CB 02r52rE4         [24]14764 	ljmp	00101$
      0054CE                      14765 00118$:
                                  14766 ;	.\ecen4350_lcd_v4.c:3554: } if(selection == 'C') {
      0054CE BE 43 68         [24]14767 	cjne	r6,#0x43,00122$
                                  14768 ;	.\ecen4350_lcd_v4.c:3555: iowrite8(seg7_address, ON);
      0054D1 85*04 82         [24]14769 	mov	dpl,_seg7_address
      0054D4 85*05 83         [24]14770 	mov	dph,(_seg7_address + 1)
                                  14771 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14772 ;	assignBit
      0054D7 D2 B5            [12]14773 	setb	_P3_5
                                  14774 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0054D9 E4               [12]14775 	clr	a
      0054DA F0               [24]14776 	movx	@dptr,a
                                  14777 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14778 ;	assignBit
      0054DB C2 B5            [12]14779 	clr	_P3_5
                                  14780 ;	.\ecen4350_lcd_v4.c:3556: setCursor(10, 160);
      0054DD 75*00 A0         [24]14781 	mov	_setCursor_PARM_2,#0xa0
      0054E0 75*01 00         [24]14782 	mov	(_setCursor_PARM_2 + 1),#0x00
      0054E3 90 00 0A         [24]14783 	mov	dptr,#0x000a
      0054E6 C0 07            [24]14784 	push	ar7
      0054E8 12r04rAA         [24]14785 	lcall	_setCursor
                                  14786 ;	.\ecen4350_lcd_v4.c:3557: setColorHighlight1();
      0054EB 12r15r9E         [24]14787 	lcall	_setColorHighlight1
                                  14788 ;	.\ecen4350_lcd_v4.c:3558: LCD_string_write("<C>");
      0054EE 90r10rF5         [24]14789 	mov	dptr,#___str_215
      0054F1 75 F0 80         [24]14790 	mov	b,#0x80
      0054F4 12r0FrC4         [24]14791 	lcall	_LCD_string_write
                                  14792 ;	.\ecen4350_lcd_v4.c:3559: setColorHighlight2();
      0054F7 12r15rAA         [24]14793 	lcall	_setColorHighlight2
                                  14794 ;	.\ecen4350_lcd_v4.c:3560: LCD_string_write(" COUNT\n");
      0054FA 90r05r99         [24]14795 	mov	dptr,#___str_15
      0054FD 75 F0 80         [24]14796 	mov	b,#0x80
      005500 12r0FrC4         [24]14797 	lcall	_LCD_string_write
                                  14798 ;	.\ecen4350_lcd_v4.c:3561: delay(20);
      005503 90 00 14         [24]14799 	mov	dptr,#0x0014
      005506 12r00rE0         [24]14800 	lcall	_delay
      005509 D0 07            [24]14801 	pop	ar7
                                  14802 ;	.\ecen4350_lcd_v4.c:3562: iowrite8(seg7_address, SEG_C);
      00550B 85*04 82         [24]14803 	mov	dpl,_seg7_address
      00550E 85*05 83         [24]14804 	mov	dph,(_seg7_address + 1)
                                  14805 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14806 ;	assignBit
      005511 D2 B5            [12]14807 	setb	_P3_5
                                  14808 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005513 74 C6            [12]14809 	mov	a,#0xc6
      005515 F0               [24]14810 	movx	@dptr,a
                                  14811 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14812 ;	assignBit
      005516 C2 B5            [12]14813 	clr	_P3_5
                                  14814 ;	.\ecen4350_lcd_v4.c:3563: if (validKey == 0) {
      005518 EF               [12]14815 	mov	a,r7
      005519 70 18            [24]14816 	jnz	00120$
                                  14817 ;	.\ecen4350_lcd_v4.c:3564: setColorDefault();
      00551B 12r15r88         [24]14818 	lcall	_setColorDefault
                                  14819 ;	.\ecen4350_lcd_v4.c:3565: setCursor(60, 280);
      00551E 75*00 18         [24]14820 	mov	_setCursor_PARM_2,#0x18
      005521 75*01 01         [24]14821 	mov	(_setCursor_PARM_2 + 1),#0x01
      005524 90 00 3C         [24]14822 	mov	dptr,#0x003c
      005527 12r04rAA         [24]14823 	lcall	_setCursor
                                  14824 ;	.\ecen4350_lcd_v4.c:3566: LCD_string_write("          ");
      00552A 90r10rDE         [24]14825 	mov	dptr,#___str_211
      00552D 75 F0 80         [24]14826 	mov	b,#0x80
      005530 12r0FrC4         [24]14827 	lcall	_LCD_string_write
      005533                      14828 00120$:
                                  14829 ;	.\ecen4350_lcd_v4.c:3568: count();
      005533 12r38rD2         [24]14830 	lcall	_count
                                  14831 ;	.\ecen4350_lcd_v4.c:3569: goto loop;
      005536 02r52rE4         [24]14832 	ljmp	00101$
      005539                      14833 00122$:
                                  14834 ;	.\ecen4350_lcd_v4.c:3570: } if(selection == 'A') {
      005539 BE 41 68         [24]14835 	cjne	r6,#0x41,00126$
                                  14836 ;	.\ecen4350_lcd_v4.c:3571: iowrite8(seg7_address, ON);
      00553C 85*04 82         [24]14837 	mov	dpl,_seg7_address
      00553F 85*05 83         [24]14838 	mov	dph,(_seg7_address + 1)
                                  14839 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14840 ;	assignBit
      005542 D2 B5            [12]14841 	setb	_P3_5
                                  14842 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005544 E4               [12]14843 	clr	a
      005545 F0               [24]14844 	movx	@dptr,a
                                  14845 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14846 ;	assignBit
      005546 C2 B5            [12]14847 	clr	_P3_5
                                  14848 ;	.\ecen4350_lcd_v4.c:3572: setCursor(10, 180);
      005548 75*00 B4         [24]14849 	mov	_setCursor_PARM_2,#0xb4
      00554B 75*01 00         [24]14850 	mov	(_setCursor_PARM_2 + 1),#0x00
      00554E 90 00 0A         [24]14851 	mov	dptr,#0x000a
      005551 C0 07            [24]14852 	push	ar7
      005553 12r04rAA         [24]14853 	lcall	_setCursor
                                  14854 ;	.\ecen4350_lcd_v4.c:3573: setColorHighlight1();
      005556 12r15r9E         [24]14855 	lcall	_setColorHighlight1
                                  14856 ;	.\ecen4350_lcd_v4.c:3574: LCD_string_write("<A>");
      005559 90r10rF9         [24]14857 	mov	dptr,#___str_216
      00555C 75 F0 80         [24]14858 	mov	b,#0x80
      00555F 12r0FrC4         [24]14859 	lcall	_LCD_string_write
                                  14860 ;	.\ecen4350_lcd_v4.c:3575: setColorHighlight2();
      005562 12r15rAA         [24]14861 	lcall	_setColorHighlight2
                                  14862 ;	.\ecen4350_lcd_v4.c:3576: LCD_string_write(" MEM CHECK\n");
      005565 90r05rA6         [24]14863 	mov	dptr,#___str_17
      005568 75 F0 80         [24]14864 	mov	b,#0x80
      00556B 12r0FrC4         [24]14865 	lcall	_LCD_string_write
                                  14866 ;	.\ecen4350_lcd_v4.c:3577: delay(20);
      00556E 90 00 14         [24]14867 	mov	dptr,#0x0014
      005571 12r00rE0         [24]14868 	lcall	_delay
      005574 D0 07            [24]14869 	pop	ar7
                                  14870 ;	.\ecen4350_lcd_v4.c:3578: iowrite8(seg7_address, SEG_A);
      005576 85*04 82         [24]14871 	mov	dpl,_seg7_address
      005579 85*05 83         [24]14872 	mov	dph,(_seg7_address + 1)
                                  14873 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14874 ;	assignBit
      00557C D2 B5            [12]14875 	setb	_P3_5
                                  14876 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00557E 74 88            [12]14877 	mov	a,#0x88
      005580 F0               [24]14878 	movx	@dptr,a
                                  14879 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14880 ;	assignBit
      005581 C2 B5            [12]14881 	clr	_P3_5
                                  14882 ;	.\ecen4350_lcd_v4.c:3579: if (validKey == 0) {
      005583 EF               [12]14883 	mov	a,r7
      005584 70 18            [24]14884 	jnz	00124$
                                  14885 ;	.\ecen4350_lcd_v4.c:3580: setColorDefault();
      005586 12r15r88         [24]14886 	lcall	_setColorDefault
                                  14887 ;	.\ecen4350_lcd_v4.c:3581: setCursor(60, 280);
      005589 75*00 18         [24]14888 	mov	_setCursor_PARM_2,#0x18
      00558C 75*01 01         [24]14889 	mov	(_setCursor_PARM_2 + 1),#0x01
      00558F 90 00 3C         [24]14890 	mov	dptr,#0x003c
      005592 12r04rAA         [24]14891 	lcall	_setCursor
                                  14892 ;	.\ecen4350_lcd_v4.c:3582: LCD_string_write("          ");
      005595 90r10rDE         [24]14893 	mov	dptr,#___str_211
      005598 75 F0 80         [24]14894 	mov	b,#0x80
      00559B 12r0FrC4         [24]14895 	lcall	_LCD_string_write
      00559E                      14896 00124$:
                                  14897 ;	.\ecen4350_lcd_v4.c:3584: check();
      00559E 12r43rAD         [24]14898 	lcall	_check
                                  14899 ;	.\ecen4350_lcd_v4.c:3585: goto loop;
      0055A1 02r52rE4         [24]14900 	ljmp	00101$
      0055A4                      14901 00126$:
                                  14902 ;	.\ecen4350_lcd_v4.c:3586: } if(selection == '1') {
      0055A4 BE 31 02         [24]14903 	cjne	r6,#0x31,00250$
      0055A7 80 03            [24]14904 	sjmp	00251$
      0055A9                      14905 00250$:
      0055A9 02r56r48         [24]14906 	ljmp	00134$
      0055AC                      14907 00251$:
                                  14908 ;	.\ecen4350_lcd_v4.c:3587: iowrite8(seg7_address, ON);
      0055AC 85*04 82         [24]14909 	mov	dpl,_seg7_address
      0055AF 85*05 83         [24]14910 	mov	dph,(_seg7_address + 1)
                                  14911 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14912 ;	assignBit
      0055B2 D2 B5            [12]14913 	setb	_P3_5
                                  14914 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0055B4 E4               [12]14915 	clr	a
      0055B5 F0               [24]14916 	movx	@dptr,a
                                  14917 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14918 ;	assignBit
      0055B6 C2 B5            [12]14919 	clr	_P3_5
                                  14920 ;	.\ecen4350_lcd_v4.c:3588: setCursor(10, 220);
      0055B8 75*00 DC         [24]14921 	mov	_setCursor_PARM_2,#0xdc
      0055BB 75*01 00         [24]14922 	mov	(_setCursor_PARM_2 + 1),#0x00
      0055BE 90 00 0A         [24]14923 	mov	dptr,#0x000a
      0055C1 C0 07            [24]14924 	push	ar7
      0055C3 12r04rAA         [24]14925 	lcall	_setCursor
                                  14926 ;	.\ecen4350_lcd_v4.c:3589: setColorHighlight1();
      0055C6 12r15r9E         [24]14927 	lcall	_setColorHighlight1
                                  14928 ;	.\ecen4350_lcd_v4.c:3590: LCD_string_write("<1>");
      0055C9 90r10rFD         [24]14929 	mov	dptr,#___str_217
      0055CC 75 F0 80         [24]14930 	mov	b,#0x80
      0055CF 12r0FrC4         [24]14931 	lcall	_LCD_string_write
                                  14932 ;	.\ecen4350_lcd_v4.c:3591: setColorHighlight2();
      0055D2 12r15rAA         [24]14933 	lcall	_setColorHighlight2
                                  14934 ;	.\ecen4350_lcd_v4.c:3592: LCD_string_write(" UART");
      0055D5 90r05rB7         [24]14935 	mov	dptr,#___str_19
      0055D8 75 F0 80         [24]14936 	mov	b,#0x80
      0055DB 12r0FrC4         [24]14937 	lcall	_LCD_string_write
                                  14938 ;	.\ecen4350_lcd_v4.c:3593: setTextSize(1);
      0055DE 75 82 01         [24]14939 	mov	dpl,#0x01
      0055E1 12r04rC4         [24]14940 	lcall	_setTextSize
      0055E4 D0 07            [24]14941 	pop	ar7
                                  14942 ;	.\ecen4350_lcd_v4.c:3594: if (UART_en == 1) {
      0055E6 78r01            [12]14943 	mov	r0,#_UART_en
      0055E8 B6 01 0D         [24]14944 	cjne	@r0,#0x01,00128$
                                  14945 ;	.\ecen4350_lcd_v4.c:3595: LCD_string_write(" [Enabled]\n");
      0055EB 90r05rCA         [24]14946 	mov	dptr,#___str_21
      0055EE 75 F0 80         [24]14947 	mov	b,#0x80
      0055F1 C0 07            [24]14948 	push	ar7
      0055F3 12r0FrC4         [24]14949 	lcall	_LCD_string_write
      0055F6 D0 07            [24]14950 	pop	ar7
      0055F8                      14951 00128$:
                                  14952 ;	.\ecen4350_lcd_v4.c:3596: } if (UART_en == 0) {
      0055F8 78r01            [12]14953 	mov	r0,#_UART_en
      0055FA E6               [12]14954 	mov	a,@r0
      0055FB 70 0D            [24]14955 	jnz	00130$
                                  14956 ;	.\ecen4350_lcd_v4.c:3597: LCD_string_write(" [Disabled]\n");
      0055FD 90r05rBD         [24]14957 	mov	dptr,#___str_20
      005600 75 F0 80         [24]14958 	mov	b,#0x80
      005603 C0 07            [24]14959 	push	ar7
      005605 12r0FrC4         [24]14960 	lcall	_LCD_string_write
      005608 D0 07            [24]14961 	pop	ar7
      00560A                      14962 00130$:
                                  14963 ;	.\ecen4350_lcd_v4.c:3599: setTextSize(2);
      00560A 75 82 02         [24]14964 	mov	dpl,#0x02
      00560D C0 07            [24]14965 	push	ar7
      00560F 12r04rC4         [24]14966 	lcall	_setTextSize
                                  14967 ;	.\ecen4350_lcd_v4.c:3600: delay(20);
      005612 90 00 14         [24]14968 	mov	dptr,#0x0014
      005615 12r00rE0         [24]14969 	lcall	_delay
      005618 D0 07            [24]14970 	pop	ar7
                                  14971 ;	.\ecen4350_lcd_v4.c:3601: iowrite8(seg7_address, SEG_U);
      00561A 85*04 82         [24]14972 	mov	dpl,_seg7_address
      00561D 85*05 83         [24]14973 	mov	dph,(_seg7_address + 1)
                                  14974 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14975 ;	assignBit
      005620 D2 B5            [12]14976 	setb	_P3_5
                                  14977 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005622 74 C1            [12]14978 	mov	a,#0xc1
      005624 F0               [24]14979 	movx	@dptr,a
                                  14980 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14981 ;	assignBit
      005625 C2 B5            [12]14982 	clr	_P3_5
                                  14983 ;	.\ecen4350_lcd_v4.c:3602: if (validKey == 0) {
      005627 EF               [12]14984 	mov	a,r7
      005628 70 18            [24]14985 	jnz	00132$
                                  14986 ;	.\ecen4350_lcd_v4.c:3603: setColorDefault();
      00562A 12r15r88         [24]14987 	lcall	_setColorDefault
                                  14988 ;	.\ecen4350_lcd_v4.c:3604: setCursor(60, 280);
      00562D 75*00 18         [24]14989 	mov	_setCursor_PARM_2,#0x18
      005630 75*01 01         [24]14990 	mov	(_setCursor_PARM_2 + 1),#0x01
      005633 90 00 3C         [24]14991 	mov	dptr,#0x003c
      005636 12r04rAA         [24]14992 	lcall	_setCursor
                                  14993 ;	.\ecen4350_lcd_v4.c:3605: LCD_string_write("          ");
      005639 90r10rDE         [24]14994 	mov	dptr,#___str_211
      00563C 75 F0 80         [24]14995 	mov	b,#0x80
      00563F 12r0FrC4         [24]14996 	lcall	_LCD_string_write
      005642                      14997 00132$:
                                  14998 ;	.\ecen4350_lcd_v4.c:3608: uart();
      005642 12r44rCF         [24]14999 	lcall	_uart
                                  15000 ;	.\ecen4350_lcd_v4.c:3609: goto loop;
      005645 02r52rE4         [24]15001 	ljmp	00101$
      005648                      15002 00134$:
                                  15003 ;	.\ecen4350_lcd_v4.c:3611: setCursor(45, 260);
      005648 75*00 04         [24]15004 	mov	_setCursor_PARM_2,#0x04
      00564B 75*01 01         [24]15005 	mov	(_setCursor_PARM_2 + 1),#0x01
      00564E 90 00 2D         [24]15006 	mov	dptr,#0x002d
      005651 12r04rAA         [24]15007 	lcall	_setCursor
                                  15008 ;	.\ecen4350_lcd_v4.c:3612: setColorRed();
      005654 12r15rCD         [24]15009 	lcall	_setColorRed
                                  15010 ;	.\ecen4350_lcd_v4.c:3613: LCD_string_write("INVALID INPUT\n");
      005657 90r11r01         [24]15011 	mov	dptr,#___str_218
      00565A 75 F0 80         [24]15012 	mov	b,#0x80
      00565D 12r0FrC4         [24]15013 	lcall	_LCD_string_write
                                  15014 ;	.\ecen4350_lcd_v4.c:3614: setCursor(60, 280);
      005660 75*00 18         [24]15015 	mov	_setCursor_PARM_2,#0x18
      005663 75*01 01         [24]15016 	mov	(_setCursor_PARM_2 + 1),#0x01
      005666 90 00 3C         [24]15017 	mov	dptr,#0x003c
      005669 12r04rAA         [24]15018 	lcall	_setCursor
                                  15019 ;	.\ecen4350_lcd_v4.c:3615: LCD_string_write("Try again.");
      00566C 90r11r10         [24]15020 	mov	dptr,#___str_219
      00566F 75 F0 80         [24]15021 	mov	b,#0x80
      005672 12r0FrC4         [24]15022 	lcall	_LCD_string_write
                                  15023 ;	.\ecen4350_lcd_v4.c:3616: validKey = 0;
      005675 7F 00            [12]15024 	mov	r7,#0x00
                                  15025 ;	.\ecen4350_lcd_v4.c:3617: delay(20);
      005677 90 00 14         [24]15026 	mov	dptr,#0x0014
      00567A C0 07            [24]15027 	push	ar7
      00567C 12r00rE0         [24]15028 	lcall	_delay
                                  15029 ;	.\ecen4350_lcd_v4.c:3618: setColorDefault();
      00567F 12r15r88         [24]15030 	lcall	_setColorDefault
                                  15031 ;	.\ecen4350_lcd_v4.c:3619: setCursor(45, 260);
      005682 75*00 04         [24]15032 	mov	_setCursor_PARM_2,#0x04
      005685 75*01 01         [24]15033 	mov	(_setCursor_PARM_2 + 1),#0x01
      005688 90 00 2D         [24]15034 	mov	dptr,#0x002d
      00568B 12r04rAA         [24]15035 	lcall	_setCursor
                                  15036 ;	.\ecen4350_lcd_v4.c:3620: LCD_string_write("               \n");
      00568E 90r11r1B         [24]15037 	mov	dptr,#___str_220
      005691 75 F0 80         [24]15038 	mov	b,#0x80
      005694 12r0FrC4         [24]15039 	lcall	_LCD_string_write
      005697 D0 07            [24]15040 	pop	ar7
                                  15041 ;	.\ecen4350_lcd_v4.c:3621: goto inputKey;
                                  15042 ;	.\ecen4350_lcd_v4.c:3625: }
      005699 02r53r15         [24]15043 	ljmp	00102$
                                  15044 	.area CSEG    (CODE)
                                  15045 	.area CONST   (CODE)
      000000                      15046 _font:
      000000 00                   15047 	.db #0x00	; 0
      000001 00                   15048 	.db #0x00	; 0
      000002 00                   15049 	.db #0x00	; 0
      000003 00                   15050 	.db #0x00	; 0
      000004 00                   15051 	.db #0x00	; 0
      000005 3E                   15052 	.db #0x3e	; 62
      000006 5B                   15053 	.db #0x5b	; 91
      000007 4F                   15054 	.db #0x4f	; 79	'O'
      000008 5B                   15055 	.db #0x5b	; 91
      000009 3E                   15056 	.db #0x3e	; 62
      00000A 3E                   15057 	.db #0x3e	; 62
      00000B 6B                   15058 	.db #0x6b	; 107	'k'
      00000C 4F                   15059 	.db #0x4f	; 79	'O'
      00000D 6B                   15060 	.db #0x6b	; 107	'k'
      00000E 3E                   15061 	.db #0x3e	; 62
      00000F 1C                   15062 	.db #0x1c	; 28
      000010 3E                   15063 	.db #0x3e	; 62
      000011 7C                   15064 	.db #0x7c	; 124
      000012 3E                   15065 	.db #0x3e	; 62
      000013 1C                   15066 	.db #0x1c	; 28
      000014 18                   15067 	.db #0x18	; 24
      000015 3C                   15068 	.db #0x3c	; 60
      000016 7E                   15069 	.db #0x7e	; 126
      000017 3C                   15070 	.db #0x3c	; 60
      000018 18                   15071 	.db #0x18	; 24
      000019 1C                   15072 	.db #0x1c	; 28
      00001A 57                   15073 	.db #0x57	; 87	'W'
      00001B 7D                   15074 	.db #0x7d	; 125
      00001C 57                   15075 	.db #0x57	; 87	'W'
      00001D 1C                   15076 	.db #0x1c	; 28
      00001E 1C                   15077 	.db #0x1c	; 28
      00001F 5E                   15078 	.db #0x5e	; 94
      000020 7F                   15079 	.db #0x7f	; 127
      000021 5E                   15080 	.db #0x5e	; 94
      000022 1C                   15081 	.db #0x1c	; 28
      000023 00                   15082 	.db #0x00	; 0
      000024 18                   15083 	.db #0x18	; 24
      000025 3C                   15084 	.db #0x3c	; 60
      000026 18                   15085 	.db #0x18	; 24
      000027 00                   15086 	.db #0x00	; 0
      000028 FF                   15087 	.db #0xff	; 255
      000029 E7                   15088 	.db #0xe7	; 231
      00002A C3                   15089 	.db #0xc3	; 195
      00002B E7                   15090 	.db #0xe7	; 231
      00002C FF                   15091 	.db #0xff	; 255
      00002D 00                   15092 	.db #0x00	; 0
      00002E 18                   15093 	.db #0x18	; 24
      00002F 24                   15094 	.db #0x24	; 36
      000030 18                   15095 	.db #0x18	; 24
      000031 00                   15096 	.db #0x00	; 0
      000032 FF                   15097 	.db #0xff	; 255
      000033 E7                   15098 	.db #0xe7	; 231
      000034 DB                   15099 	.db #0xdb	; 219
      000035 E7                   15100 	.db #0xe7	; 231
      000036 FF                   15101 	.db #0xff	; 255
      000037 30                   15102 	.db #0x30	; 48	'0'
      000038 48                   15103 	.db #0x48	; 72	'H'
      000039 3A                   15104 	.db #0x3a	; 58
      00003A 06                   15105 	.db #0x06	; 6
      00003B 0E                   15106 	.db #0x0e	; 14
      00003C 26                   15107 	.db #0x26	; 38
      00003D 29                   15108 	.db #0x29	; 41
      00003E 79                   15109 	.db #0x79	; 121	'y'
      00003F 29                   15110 	.db #0x29	; 41
      000040 26                   15111 	.db #0x26	; 38
      000041 40                   15112 	.db #0x40	; 64
      000042 7F                   15113 	.db #0x7f	; 127
      000043 05                   15114 	.db #0x05	; 5
      000044 05                   15115 	.db #0x05	; 5
      000045 07                   15116 	.db #0x07	; 7
      000046 40                   15117 	.db #0x40	; 64
      000047 7F                   15118 	.db #0x7f	; 127
      000048 05                   15119 	.db #0x05	; 5
      000049 25                   15120 	.db #0x25	; 37
      00004A 3F                   15121 	.db #0x3f	; 63
      00004B 5A                   15122 	.db #0x5a	; 90	'Z'
      00004C 3C                   15123 	.db #0x3c	; 60
      00004D E7                   15124 	.db #0xe7	; 231
      00004E 3C                   15125 	.db #0x3c	; 60
      00004F 5A                   15126 	.db #0x5a	; 90	'Z'
      000050 7F                   15127 	.db #0x7f	; 127
      000051 3E                   15128 	.db #0x3e	; 62
      000052 1C                   15129 	.db #0x1c	; 28
      000053 1C                   15130 	.db #0x1c	; 28
      000054 08                   15131 	.db #0x08	; 8
      000055 08                   15132 	.db #0x08	; 8
      000056 1C                   15133 	.db #0x1c	; 28
      000057 1C                   15134 	.db #0x1c	; 28
      000058 3E                   15135 	.db #0x3e	; 62
      000059 7F                   15136 	.db #0x7f	; 127
      00005A 14                   15137 	.db #0x14	; 20
      00005B 22                   15138 	.db #0x22	; 34
      00005C 7F                   15139 	.db #0x7f	; 127
      00005D 22                   15140 	.db #0x22	; 34
      00005E 14                   15141 	.db #0x14	; 20
      00005F 5F                   15142 	.db #0x5f	; 95
      000060 5F                   15143 	.db #0x5f	; 95
      000061 00                   15144 	.db #0x00	; 0
      000062 5F                   15145 	.db #0x5f	; 95
      000063 5F                   15146 	.db #0x5f	; 95
      000064 06                   15147 	.db #0x06	; 6
      000065 09                   15148 	.db #0x09	; 9
      000066 7F                   15149 	.db #0x7f	; 127
      000067 01                   15150 	.db #0x01	; 1
      000068 7F                   15151 	.db #0x7f	; 127
      000069 00                   15152 	.db #0x00	; 0
      00006A 66                   15153 	.db #0x66	; 102	'f'
      00006B 89                   15154 	.db #0x89	; 137
      00006C 95                   15155 	.db #0x95	; 149
      00006D 6A                   15156 	.db #0x6a	; 106	'j'
      00006E 60                   15157 	.db #0x60	; 96
      00006F 60                   15158 	.db #0x60	; 96
      000070 60                   15159 	.db #0x60	; 96
      000071 60                   15160 	.db #0x60	; 96
      000072 60                   15161 	.db #0x60	; 96
      000073 94                   15162 	.db #0x94	; 148
      000074 A2                   15163 	.db #0xa2	; 162
      000075 FF                   15164 	.db #0xff	; 255
      000076 A2                   15165 	.db #0xa2	; 162
      000077 94                   15166 	.db #0x94	; 148
      000078 08                   15167 	.db #0x08	; 8
      000079 04                   15168 	.db #0x04	; 4
      00007A 7E                   15169 	.db #0x7e	; 126
      00007B 04                   15170 	.db #0x04	; 4
      00007C 08                   15171 	.db #0x08	; 8
      00007D 10                   15172 	.db #0x10	; 16
      00007E 20                   15173 	.db #0x20	; 32
      00007F 7E                   15174 	.db #0x7e	; 126
      000080 20                   15175 	.db #0x20	; 32
      000081 10                   15176 	.db #0x10	; 16
      000082 08                   15177 	.db #0x08	; 8
      000083 08                   15178 	.db #0x08	; 8
      000084 2A                   15179 	.db #0x2a	; 42
      000085 1C                   15180 	.db #0x1c	; 28
      000086 08                   15181 	.db #0x08	; 8
      000087 08                   15182 	.db #0x08	; 8
      000088 1C                   15183 	.db #0x1c	; 28
      000089 2A                   15184 	.db #0x2a	; 42
      00008A 08                   15185 	.db #0x08	; 8
      00008B 08                   15186 	.db #0x08	; 8
      00008C 1E                   15187 	.db #0x1e	; 30
      00008D 10                   15188 	.db #0x10	; 16
      00008E 10                   15189 	.db #0x10	; 16
      00008F 10                   15190 	.db #0x10	; 16
      000090 10                   15191 	.db #0x10	; 16
      000091 0C                   15192 	.db #0x0c	; 12
      000092 1E                   15193 	.db #0x1e	; 30
      000093 0C                   15194 	.db #0x0c	; 12
      000094 1E                   15195 	.db #0x1e	; 30
      000095 0C                   15196 	.db #0x0c	; 12
      000096 30                   15197 	.db #0x30	; 48	'0'
      000097 38                   15198 	.db #0x38	; 56	'8'
      000098 3E                   15199 	.db #0x3e	; 62
      000099 38                   15200 	.db #0x38	; 56	'8'
      00009A 30                   15201 	.db #0x30	; 48	'0'
      00009B 06                   15202 	.db #0x06	; 6
      00009C 0E                   15203 	.db #0x0e	; 14
      00009D 3E                   15204 	.db #0x3e	; 62
      00009E 0E                   15205 	.db #0x0e	; 14
      00009F 06                   15206 	.db #0x06	; 6
      0000A0 00                   15207 	.db #0x00	; 0
      0000A1 00                   15208 	.db #0x00	; 0
      0000A2 00                   15209 	.db #0x00	; 0
      0000A3 00                   15210 	.db #0x00	; 0
      0000A4 00                   15211 	.db #0x00	; 0
      0000A5 00                   15212 	.db #0x00	; 0
      0000A6 00                   15213 	.db #0x00	; 0
      0000A7 5F                   15214 	.db #0x5f	; 95
      0000A8 00                   15215 	.db #0x00	; 0
      0000A9 00                   15216 	.db #0x00	; 0
      0000AA 00                   15217 	.db #0x00	; 0
      0000AB 07                   15218 	.db #0x07	; 7
      0000AC 00                   15219 	.db #0x00	; 0
      0000AD 07                   15220 	.db #0x07	; 7
      0000AE 00                   15221 	.db #0x00	; 0
      0000AF 14                   15222 	.db #0x14	; 20
      0000B0 7F                   15223 	.db #0x7f	; 127
      0000B1 14                   15224 	.db #0x14	; 20
      0000B2 7F                   15225 	.db #0x7f	; 127
      0000B3 14                   15226 	.db #0x14	; 20
      0000B4 24                   15227 	.db #0x24	; 36
      0000B5 2A                   15228 	.db #0x2a	; 42
      0000B6 7F                   15229 	.db #0x7f	; 127
      0000B7 2A                   15230 	.db #0x2a	; 42
      0000B8 12                   15231 	.db #0x12	; 18
      0000B9 23                   15232 	.db #0x23	; 35
      0000BA 13                   15233 	.db #0x13	; 19
      0000BB 08                   15234 	.db #0x08	; 8
      0000BC 64                   15235 	.db #0x64	; 100	'd'
      0000BD 62                   15236 	.db #0x62	; 98	'b'
      0000BE 36                   15237 	.db #0x36	; 54	'6'
      0000BF 49                   15238 	.db #0x49	; 73	'I'
      0000C0 56                   15239 	.db #0x56	; 86	'V'
      0000C1 20                   15240 	.db #0x20	; 32
      0000C2 50                   15241 	.db #0x50	; 80	'P'
      0000C3 00                   15242 	.db #0x00	; 0
      0000C4 08                   15243 	.db #0x08	; 8
      0000C5 07                   15244 	.db #0x07	; 7
      0000C6 03                   15245 	.db #0x03	; 3
      0000C7 00                   15246 	.db #0x00	; 0
      0000C8 00                   15247 	.db #0x00	; 0
      0000C9 1C                   15248 	.db #0x1c	; 28
      0000CA 22                   15249 	.db #0x22	; 34
      0000CB 41                   15250 	.db #0x41	; 65	'A'
      0000CC 00                   15251 	.db #0x00	; 0
      0000CD 00                   15252 	.db #0x00	; 0
      0000CE 41                   15253 	.db #0x41	; 65	'A'
      0000CF 22                   15254 	.db #0x22	; 34
      0000D0 1C                   15255 	.db #0x1c	; 28
      0000D1 00                   15256 	.db #0x00	; 0
      0000D2 2A                   15257 	.db #0x2a	; 42
      0000D3 1C                   15258 	.db #0x1c	; 28
      0000D4 7F                   15259 	.db #0x7f	; 127
      0000D5 1C                   15260 	.db #0x1c	; 28
      0000D6 2A                   15261 	.db #0x2a	; 42
      0000D7 08                   15262 	.db #0x08	; 8
      0000D8 08                   15263 	.db #0x08	; 8
      0000D9 3E                   15264 	.db #0x3e	; 62
      0000DA 08                   15265 	.db #0x08	; 8
      0000DB 08                   15266 	.db #0x08	; 8
      0000DC 00                   15267 	.db #0x00	; 0
      0000DD 80                   15268 	.db #0x80	; 128
      0000DE 70                   15269 	.db #0x70	; 112	'p'
      0000DF 30                   15270 	.db #0x30	; 48	'0'
      0000E0 00                   15271 	.db #0x00	; 0
      0000E1 08                   15272 	.db #0x08	; 8
      0000E2 08                   15273 	.db #0x08	; 8
      0000E3 08                   15274 	.db #0x08	; 8
      0000E4 08                   15275 	.db #0x08	; 8
      0000E5 08                   15276 	.db #0x08	; 8
      0000E6 00                   15277 	.db #0x00	; 0
      0000E7 00                   15278 	.db #0x00	; 0
      0000E8 60                   15279 	.db #0x60	; 96
      0000E9 60                   15280 	.db #0x60	; 96
      0000EA 00                   15281 	.db #0x00	; 0
      0000EB 20                   15282 	.db #0x20	; 32
      0000EC 10                   15283 	.db #0x10	; 16
      0000ED 08                   15284 	.db #0x08	; 8
      0000EE 04                   15285 	.db #0x04	; 4
      0000EF 02                   15286 	.db #0x02	; 2
      0000F0 3E                   15287 	.db #0x3e	; 62
      0000F1 51                   15288 	.db #0x51	; 81	'Q'
      0000F2 49                   15289 	.db #0x49	; 73	'I'
      0000F3 45                   15290 	.db #0x45	; 69	'E'
      0000F4 3E                   15291 	.db #0x3e	; 62
      0000F5 00                   15292 	.db #0x00	; 0
      0000F6 42                   15293 	.db #0x42	; 66	'B'
      0000F7 7F                   15294 	.db #0x7f	; 127
      0000F8 40                   15295 	.db #0x40	; 64
      0000F9 00                   15296 	.db #0x00	; 0
      0000FA 72                   15297 	.db #0x72	; 114	'r'
      0000FB 49                   15298 	.db #0x49	; 73	'I'
      0000FC 49                   15299 	.db #0x49	; 73	'I'
      0000FD 49                   15300 	.db #0x49	; 73	'I'
      0000FE 46                   15301 	.db #0x46	; 70	'F'
      0000FF 21                   15302 	.db #0x21	; 33
      000100 41                   15303 	.db #0x41	; 65	'A'
      000101 49                   15304 	.db #0x49	; 73	'I'
      000102 4D                   15305 	.db #0x4d	; 77	'M'
      000103 33                   15306 	.db #0x33	; 51	'3'
      000104 18                   15307 	.db #0x18	; 24
      000105 14                   15308 	.db #0x14	; 20
      000106 12                   15309 	.db #0x12	; 18
      000107 7F                   15310 	.db #0x7f	; 127
      000108 10                   15311 	.db #0x10	; 16
      000109 27                   15312 	.db #0x27	; 39
      00010A 45                   15313 	.db #0x45	; 69	'E'
      00010B 45                   15314 	.db #0x45	; 69	'E'
      00010C 45                   15315 	.db #0x45	; 69	'E'
      00010D 39                   15316 	.db #0x39	; 57	'9'
      00010E 3C                   15317 	.db #0x3c	; 60
      00010F 4A                   15318 	.db #0x4a	; 74	'J'
      000110 49                   15319 	.db #0x49	; 73	'I'
      000111 49                   15320 	.db #0x49	; 73	'I'
      000112 31                   15321 	.db #0x31	; 49	'1'
      000113 41                   15322 	.db #0x41	; 65	'A'
      000114 21                   15323 	.db #0x21	; 33
      000115 11                   15324 	.db #0x11	; 17
      000116 09                   15325 	.db #0x09	; 9
      000117 07                   15326 	.db #0x07	; 7
      000118 36                   15327 	.db #0x36	; 54	'6'
      000119 49                   15328 	.db #0x49	; 73	'I'
      00011A 49                   15329 	.db #0x49	; 73	'I'
      00011B 49                   15330 	.db #0x49	; 73	'I'
      00011C 36                   15331 	.db #0x36	; 54	'6'
      00011D 46                   15332 	.db #0x46	; 70	'F'
      00011E 49                   15333 	.db #0x49	; 73	'I'
      00011F 49                   15334 	.db #0x49	; 73	'I'
      000120 29                   15335 	.db #0x29	; 41
      000121 1E                   15336 	.db #0x1e	; 30
      000122 00                   15337 	.db #0x00	; 0
      000123 00                   15338 	.db #0x00	; 0
      000124 14                   15339 	.db #0x14	; 20
      000125 00                   15340 	.db #0x00	; 0
      000126 00                   15341 	.db #0x00	; 0
      000127 00                   15342 	.db #0x00	; 0
      000128 40                   15343 	.db #0x40	; 64
      000129 34                   15344 	.db #0x34	; 52	'4'
      00012A 00                   15345 	.db #0x00	; 0
      00012B 00                   15346 	.db #0x00	; 0
      00012C 00                   15347 	.db #0x00	; 0
      00012D 08                   15348 	.db #0x08	; 8
      00012E 14                   15349 	.db #0x14	; 20
      00012F 22                   15350 	.db #0x22	; 34
      000130 41                   15351 	.db #0x41	; 65	'A'
      000131 14                   15352 	.db #0x14	; 20
      000132 14                   15353 	.db #0x14	; 20
      000133 14                   15354 	.db #0x14	; 20
      000134 14                   15355 	.db #0x14	; 20
      000135 14                   15356 	.db #0x14	; 20
      000136 00                   15357 	.db #0x00	; 0
      000137 41                   15358 	.db #0x41	; 65	'A'
      000138 22                   15359 	.db #0x22	; 34
      000139 14                   15360 	.db #0x14	; 20
      00013A 08                   15361 	.db #0x08	; 8
      00013B 02                   15362 	.db #0x02	; 2
      00013C 01                   15363 	.db #0x01	; 1
      00013D 59                   15364 	.db #0x59	; 89	'Y'
      00013E 09                   15365 	.db #0x09	; 9
      00013F 06                   15366 	.db #0x06	; 6
      000140 3E                   15367 	.db #0x3e	; 62
      000141 41                   15368 	.db #0x41	; 65	'A'
      000142 5D                   15369 	.db #0x5d	; 93
      000143 59                   15370 	.db #0x59	; 89	'Y'
      000144 4E                   15371 	.db #0x4e	; 78	'N'
      000145 7C                   15372 	.db #0x7c	; 124
      000146 12                   15373 	.db #0x12	; 18
      000147 11                   15374 	.db #0x11	; 17
      000148 12                   15375 	.db #0x12	; 18
      000149 7C                   15376 	.db #0x7c	; 124
      00014A 7F                   15377 	.db #0x7f	; 127
      00014B 49                   15378 	.db #0x49	; 73	'I'
      00014C 49                   15379 	.db #0x49	; 73	'I'
      00014D 49                   15380 	.db #0x49	; 73	'I'
      00014E 36                   15381 	.db #0x36	; 54	'6'
      00014F 3E                   15382 	.db #0x3e	; 62
      000150 41                   15383 	.db #0x41	; 65	'A'
      000151 41                   15384 	.db #0x41	; 65	'A'
      000152 41                   15385 	.db #0x41	; 65	'A'
      000153 22                   15386 	.db #0x22	; 34
      000154 7F                   15387 	.db #0x7f	; 127
      000155 41                   15388 	.db #0x41	; 65	'A'
      000156 41                   15389 	.db #0x41	; 65	'A'
      000157 41                   15390 	.db #0x41	; 65	'A'
      000158 3E                   15391 	.db #0x3e	; 62
      000159 7F                   15392 	.db #0x7f	; 127
      00015A 49                   15393 	.db #0x49	; 73	'I'
      00015B 49                   15394 	.db #0x49	; 73	'I'
      00015C 49                   15395 	.db #0x49	; 73	'I'
      00015D 41                   15396 	.db #0x41	; 65	'A'
      00015E 7F                   15397 	.db #0x7f	; 127
      00015F 09                   15398 	.db #0x09	; 9
      000160 09                   15399 	.db #0x09	; 9
      000161 09                   15400 	.db #0x09	; 9
      000162 01                   15401 	.db #0x01	; 1
      000163 3E                   15402 	.db #0x3e	; 62
      000164 41                   15403 	.db #0x41	; 65	'A'
      000165 41                   15404 	.db #0x41	; 65	'A'
      000166 51                   15405 	.db #0x51	; 81	'Q'
      000167 73                   15406 	.db #0x73	; 115	's'
      000168 7F                   15407 	.db #0x7f	; 127
      000169 08                   15408 	.db #0x08	; 8
      00016A 08                   15409 	.db #0x08	; 8
      00016B 08                   15410 	.db #0x08	; 8
      00016C 7F                   15411 	.db #0x7f	; 127
      00016D 00                   15412 	.db #0x00	; 0
      00016E 41                   15413 	.db #0x41	; 65	'A'
      00016F 7F                   15414 	.db #0x7f	; 127
      000170 41                   15415 	.db #0x41	; 65	'A'
      000171 00                   15416 	.db #0x00	; 0
      000172 20                   15417 	.db #0x20	; 32
      000173 40                   15418 	.db #0x40	; 64
      000174 41                   15419 	.db #0x41	; 65	'A'
      000175 3F                   15420 	.db #0x3f	; 63
      000176 01                   15421 	.db #0x01	; 1
      000177 7F                   15422 	.db #0x7f	; 127
      000178 08                   15423 	.db #0x08	; 8
      000179 14                   15424 	.db #0x14	; 20
      00017A 22                   15425 	.db #0x22	; 34
      00017B 41                   15426 	.db #0x41	; 65	'A'
      00017C 7F                   15427 	.db #0x7f	; 127
      00017D 40                   15428 	.db #0x40	; 64
      00017E 40                   15429 	.db #0x40	; 64
      00017F 40                   15430 	.db #0x40	; 64
      000180 40                   15431 	.db #0x40	; 64
      000181 7F                   15432 	.db #0x7f	; 127
      000182 02                   15433 	.db #0x02	; 2
      000183 1C                   15434 	.db #0x1c	; 28
      000184 02                   15435 	.db #0x02	; 2
      000185 7F                   15436 	.db #0x7f	; 127
      000186 7F                   15437 	.db #0x7f	; 127
      000187 04                   15438 	.db #0x04	; 4
      000188 08                   15439 	.db #0x08	; 8
      000189 10                   15440 	.db #0x10	; 16
      00018A 7F                   15441 	.db #0x7f	; 127
      00018B 3E                   15442 	.db #0x3e	; 62
      00018C 41                   15443 	.db #0x41	; 65	'A'
      00018D 41                   15444 	.db #0x41	; 65	'A'
      00018E 41                   15445 	.db #0x41	; 65	'A'
      00018F 3E                   15446 	.db #0x3e	; 62
      000190 7F                   15447 	.db #0x7f	; 127
      000191 09                   15448 	.db #0x09	; 9
      000192 09                   15449 	.db #0x09	; 9
      000193 09                   15450 	.db #0x09	; 9
      000194 06                   15451 	.db #0x06	; 6
      000195 3E                   15452 	.db #0x3e	; 62
      000196 41                   15453 	.db #0x41	; 65	'A'
      000197 51                   15454 	.db #0x51	; 81	'Q'
      000198 21                   15455 	.db #0x21	; 33
      000199 5E                   15456 	.db #0x5e	; 94
      00019A 7F                   15457 	.db #0x7f	; 127
      00019B 09                   15458 	.db #0x09	; 9
      00019C 19                   15459 	.db #0x19	; 25
      00019D 29                   15460 	.db #0x29	; 41
      00019E 46                   15461 	.db #0x46	; 70	'F'
      00019F 26                   15462 	.db #0x26	; 38
      0001A0 49                   15463 	.db #0x49	; 73	'I'
      0001A1 49                   15464 	.db #0x49	; 73	'I'
      0001A2 49                   15465 	.db #0x49	; 73	'I'
      0001A3 32                   15466 	.db #0x32	; 50	'2'
      0001A4 03                   15467 	.db #0x03	; 3
      0001A5 01                   15468 	.db #0x01	; 1
      0001A6 7F                   15469 	.db #0x7f	; 127
      0001A7 01                   15470 	.db #0x01	; 1
      0001A8 03                   15471 	.db #0x03	; 3
      0001A9 3F                   15472 	.db #0x3f	; 63
      0001AA 40                   15473 	.db #0x40	; 64
      0001AB 40                   15474 	.db #0x40	; 64
      0001AC 40                   15475 	.db #0x40	; 64
      0001AD 3F                   15476 	.db #0x3f	; 63
      0001AE 1F                   15477 	.db #0x1f	; 31
      0001AF 20                   15478 	.db #0x20	; 32
      0001B0 40                   15479 	.db #0x40	; 64
      0001B1 20                   15480 	.db #0x20	; 32
      0001B2 1F                   15481 	.db #0x1f	; 31
      0001B3 3F                   15482 	.db #0x3f	; 63
      0001B4 40                   15483 	.db #0x40	; 64
      0001B5 38                   15484 	.db #0x38	; 56	'8'
      0001B6 40                   15485 	.db #0x40	; 64
      0001B7 3F                   15486 	.db #0x3f	; 63
      0001B8 63                   15487 	.db #0x63	; 99	'c'
      0001B9 14                   15488 	.db #0x14	; 20
      0001BA 08                   15489 	.db #0x08	; 8
      0001BB 14                   15490 	.db #0x14	; 20
      0001BC 63                   15491 	.db #0x63	; 99	'c'
      0001BD 03                   15492 	.db #0x03	; 3
      0001BE 04                   15493 	.db #0x04	; 4
      0001BF 78                   15494 	.db #0x78	; 120	'x'
      0001C0 04                   15495 	.db #0x04	; 4
      0001C1 03                   15496 	.db #0x03	; 3
      0001C2 61                   15497 	.db #0x61	; 97	'a'
      0001C3 59                   15498 	.db #0x59	; 89	'Y'
      0001C4 49                   15499 	.db #0x49	; 73	'I'
      0001C5 4D                   15500 	.db #0x4d	; 77	'M'
      0001C6 43                   15501 	.db #0x43	; 67	'C'
      0001C7 00                   15502 	.db #0x00	; 0
      0001C8 7F                   15503 	.db #0x7f	; 127
      0001C9 41                   15504 	.db #0x41	; 65	'A'
      0001CA 41                   15505 	.db #0x41	; 65	'A'
      0001CB 41                   15506 	.db #0x41	; 65	'A'
      0001CC 02                   15507 	.db #0x02	; 2
      0001CD 04                   15508 	.db #0x04	; 4
      0001CE 08                   15509 	.db #0x08	; 8
      0001CF 10                   15510 	.db #0x10	; 16
      0001D0 20                   15511 	.db #0x20	; 32
      0001D1 00                   15512 	.db #0x00	; 0
      0001D2 41                   15513 	.db #0x41	; 65	'A'
      0001D3 41                   15514 	.db #0x41	; 65	'A'
      0001D4 41                   15515 	.db #0x41	; 65	'A'
      0001D5 7F                   15516 	.db #0x7f	; 127
      0001D6 04                   15517 	.db #0x04	; 4
      0001D7 02                   15518 	.db #0x02	; 2
      0001D8 01                   15519 	.db #0x01	; 1
      0001D9 02                   15520 	.db #0x02	; 2
      0001DA 04                   15521 	.db #0x04	; 4
      0001DB 40                   15522 	.db #0x40	; 64
      0001DC 40                   15523 	.db #0x40	; 64
      0001DD 40                   15524 	.db #0x40	; 64
      0001DE 40                   15525 	.db #0x40	; 64
      0001DF 40                   15526 	.db #0x40	; 64
      0001E0 00                   15527 	.db #0x00	; 0
      0001E1 03                   15528 	.db #0x03	; 3
      0001E2 07                   15529 	.db #0x07	; 7
      0001E3 08                   15530 	.db #0x08	; 8
      0001E4 00                   15531 	.db #0x00	; 0
      0001E5 20                   15532 	.db #0x20	; 32
      0001E6 54                   15533 	.db #0x54	; 84	'T'
      0001E7 54                   15534 	.db #0x54	; 84	'T'
      0001E8 78                   15535 	.db #0x78	; 120	'x'
      0001E9 40                   15536 	.db #0x40	; 64
      0001EA 7F                   15537 	.db #0x7f	; 127
      0001EB 28                   15538 	.db #0x28	; 40
      0001EC 44                   15539 	.db #0x44	; 68	'D'
      0001ED 44                   15540 	.db #0x44	; 68	'D'
      0001EE 38                   15541 	.db #0x38	; 56	'8'
      0001EF 38                   15542 	.db #0x38	; 56	'8'
      0001F0 44                   15543 	.db #0x44	; 68	'D'
      0001F1 44                   15544 	.db #0x44	; 68	'D'
      0001F2 44                   15545 	.db #0x44	; 68	'D'
      0001F3 28                   15546 	.db #0x28	; 40
      0001F4 38                   15547 	.db #0x38	; 56	'8'
      0001F5 44                   15548 	.db #0x44	; 68	'D'
      0001F6 44                   15549 	.db #0x44	; 68	'D'
      0001F7 28                   15550 	.db #0x28	; 40
      0001F8 7F                   15551 	.db #0x7f	; 127
      0001F9 38                   15552 	.db #0x38	; 56	'8'
      0001FA 54                   15553 	.db #0x54	; 84	'T'
      0001FB 54                   15554 	.db #0x54	; 84	'T'
      0001FC 54                   15555 	.db #0x54	; 84	'T'
      0001FD 18                   15556 	.db #0x18	; 24
      0001FE 00                   15557 	.db #0x00	; 0
      0001FF 08                   15558 	.db #0x08	; 8
      000200 7E                   15559 	.db #0x7e	; 126
      000201 09                   15560 	.db #0x09	; 9
      000202 02                   15561 	.db #0x02	; 2
      000203 18                   15562 	.db #0x18	; 24
      000204 A4                   15563 	.db #0xa4	; 164
      000205 A4                   15564 	.db #0xa4	; 164
      000206 9C                   15565 	.db #0x9c	; 156
      000207 78                   15566 	.db #0x78	; 120	'x'
      000208 7F                   15567 	.db #0x7f	; 127
      000209 08                   15568 	.db #0x08	; 8
      00020A 04                   15569 	.db #0x04	; 4
      00020B 04                   15570 	.db #0x04	; 4
      00020C 78                   15571 	.db #0x78	; 120	'x'
      00020D 00                   15572 	.db #0x00	; 0
      00020E 44                   15573 	.db #0x44	; 68	'D'
      00020F 7D                   15574 	.db #0x7d	; 125
      000210 40                   15575 	.db #0x40	; 64
      000211 00                   15576 	.db #0x00	; 0
      000212 20                   15577 	.db #0x20	; 32
      000213 40                   15578 	.db #0x40	; 64
      000214 40                   15579 	.db #0x40	; 64
      000215 3D                   15580 	.db #0x3d	; 61
      000216 00                   15581 	.db #0x00	; 0
      000217 7F                   15582 	.db #0x7f	; 127
      000218 10                   15583 	.db #0x10	; 16
      000219 28                   15584 	.db #0x28	; 40
      00021A 44                   15585 	.db #0x44	; 68	'D'
      00021B 00                   15586 	.db #0x00	; 0
      00021C 00                   15587 	.db #0x00	; 0
      00021D 41                   15588 	.db #0x41	; 65	'A'
      00021E 7F                   15589 	.db #0x7f	; 127
      00021F 40                   15590 	.db #0x40	; 64
      000220 00                   15591 	.db #0x00	; 0
      000221 7C                   15592 	.db #0x7c	; 124
      000222 04                   15593 	.db #0x04	; 4
      000223 78                   15594 	.db #0x78	; 120	'x'
      000224 04                   15595 	.db #0x04	; 4
      000225 78                   15596 	.db #0x78	; 120	'x'
      000226 7C                   15597 	.db #0x7c	; 124
      000227 08                   15598 	.db #0x08	; 8
      000228 04                   15599 	.db #0x04	; 4
      000229 04                   15600 	.db #0x04	; 4
      00022A 78                   15601 	.db #0x78	; 120	'x'
      00022B 38                   15602 	.db #0x38	; 56	'8'
      00022C 44                   15603 	.db #0x44	; 68	'D'
      00022D 44                   15604 	.db #0x44	; 68	'D'
      00022E 44                   15605 	.db #0x44	; 68	'D'
      00022F 38                   15606 	.db #0x38	; 56	'8'
      000230 FC                   15607 	.db #0xfc	; 252
      000231 18                   15608 	.db #0x18	; 24
      000232 24                   15609 	.db #0x24	; 36
      000233 24                   15610 	.db #0x24	; 36
      000234 18                   15611 	.db #0x18	; 24
      000235 18                   15612 	.db #0x18	; 24
      000236 24                   15613 	.db #0x24	; 36
      000237 24                   15614 	.db #0x24	; 36
      000238 18                   15615 	.db #0x18	; 24
      000239 FC                   15616 	.db #0xfc	; 252
      00023A 7C                   15617 	.db #0x7c	; 124
      00023B 08                   15618 	.db #0x08	; 8
      00023C 04                   15619 	.db #0x04	; 4
      00023D 04                   15620 	.db #0x04	; 4
      00023E 08                   15621 	.db #0x08	; 8
      00023F 48                   15622 	.db #0x48	; 72	'H'
      000240 54                   15623 	.db #0x54	; 84	'T'
      000241 54                   15624 	.db #0x54	; 84	'T'
      000242 54                   15625 	.db #0x54	; 84	'T'
      000243 24                   15626 	.db #0x24	; 36
      000244 04                   15627 	.db #0x04	; 4
      000245 04                   15628 	.db #0x04	; 4
      000246 3F                   15629 	.db #0x3f	; 63
      000247 44                   15630 	.db #0x44	; 68	'D'
      000248 24                   15631 	.db #0x24	; 36
      000249 3C                   15632 	.db #0x3c	; 60
      00024A 40                   15633 	.db #0x40	; 64
      00024B 40                   15634 	.db #0x40	; 64
      00024C 20                   15635 	.db #0x20	; 32
      00024D 7C                   15636 	.db #0x7c	; 124
      00024E 1C                   15637 	.db #0x1c	; 28
      00024F 20                   15638 	.db #0x20	; 32
      000250 40                   15639 	.db #0x40	; 64
      000251 20                   15640 	.db #0x20	; 32
      000252 1C                   15641 	.db #0x1c	; 28
      000253 3C                   15642 	.db #0x3c	; 60
      000254 40                   15643 	.db #0x40	; 64
      000255 30                   15644 	.db #0x30	; 48	'0'
      000256 40                   15645 	.db #0x40	; 64
      000257 3C                   15646 	.db #0x3c	; 60
      000258 44                   15647 	.db #0x44	; 68	'D'
      000259 28                   15648 	.db #0x28	; 40
      00025A 10                   15649 	.db #0x10	; 16
      00025B 28                   15650 	.db #0x28	; 40
      00025C 44                   15651 	.db #0x44	; 68	'D'
      00025D 4C                   15652 	.db #0x4c	; 76	'L'
      00025E 90                   15653 	.db #0x90	; 144
      00025F 90                   15654 	.db #0x90	; 144
      000260 90                   15655 	.db #0x90	; 144
      000261 7C                   15656 	.db #0x7c	; 124
      000262 44                   15657 	.db #0x44	; 68	'D'
      000263 64                   15658 	.db #0x64	; 100	'd'
      000264 54                   15659 	.db #0x54	; 84	'T'
      000265 4C                   15660 	.db #0x4c	; 76	'L'
      000266 44                   15661 	.db #0x44	; 68	'D'
      000267 00                   15662 	.db #0x00	; 0
      000268 08                   15663 	.db #0x08	; 8
      000269 36                   15664 	.db #0x36	; 54	'6'
      00026A 41                   15665 	.db #0x41	; 65	'A'
      00026B 00                   15666 	.db #0x00	; 0
      00026C 00                   15667 	.db #0x00	; 0
      00026D 00                   15668 	.db #0x00	; 0
      00026E 77                   15669 	.db #0x77	; 119	'w'
      00026F 00                   15670 	.db #0x00	; 0
      000270 00                   15671 	.db #0x00	; 0
      000271 00                   15672 	.db #0x00	; 0
      000272 41                   15673 	.db #0x41	; 65	'A'
      000273 36                   15674 	.db #0x36	; 54	'6'
      000274 08                   15675 	.db #0x08	; 8
      000275 00                   15676 	.db #0x00	; 0
      000276 02                   15677 	.db #0x02	; 2
      000277 01                   15678 	.db #0x01	; 1
      000278 02                   15679 	.db #0x02	; 2
      000279 04                   15680 	.db #0x04	; 4
      00027A 02                   15681 	.db #0x02	; 2
      00027B 3C                   15682 	.db #0x3c	; 60
      00027C 26                   15683 	.db #0x26	; 38
      00027D 23                   15684 	.db #0x23	; 35
      00027E 26                   15685 	.db #0x26	; 38
      00027F 3C                   15686 	.db #0x3c	; 60
      000280 1E                   15687 	.db #0x1e	; 30
      000281 A1                   15688 	.db #0xa1	; 161
      000282 A1                   15689 	.db #0xa1	; 161
      000283 61                   15690 	.db #0x61	; 97	'a'
      000284 12                   15691 	.db #0x12	; 18
      000285 3A                   15692 	.db #0x3a	; 58
      000286 40                   15693 	.db #0x40	; 64
      000287 40                   15694 	.db #0x40	; 64
      000288 20                   15695 	.db #0x20	; 32
      000289 7A                   15696 	.db #0x7a	; 122	'z'
      00028A 38                   15697 	.db #0x38	; 56	'8'
      00028B 54                   15698 	.db #0x54	; 84	'T'
      00028C 54                   15699 	.db #0x54	; 84	'T'
      00028D 55                   15700 	.db #0x55	; 85	'U'
      00028E 59                   15701 	.db #0x59	; 89	'Y'
      00028F 21                   15702 	.db #0x21	; 33
      000290 55                   15703 	.db #0x55	; 85	'U'
      000291 55                   15704 	.db #0x55	; 85	'U'
      000292 79                   15705 	.db #0x79	; 121	'y'
      000293 41                   15706 	.db #0x41	; 65	'A'
      000294 22                   15707 	.db #0x22	; 34
      000295 54                   15708 	.db #0x54	; 84	'T'
      000296 54                   15709 	.db #0x54	; 84	'T'
      000297 78                   15710 	.db #0x78	; 120	'x'
      000298 42                   15711 	.db #0x42	; 66	'B'
      000299 21                   15712 	.db #0x21	; 33
      00029A 55                   15713 	.db #0x55	; 85	'U'
      00029B 54                   15714 	.db #0x54	; 84	'T'
      00029C 78                   15715 	.db #0x78	; 120	'x'
      00029D 40                   15716 	.db #0x40	; 64
      00029E 20                   15717 	.db #0x20	; 32
      00029F 54                   15718 	.db #0x54	; 84	'T'
      0002A0 55                   15719 	.db #0x55	; 85	'U'
      0002A1 79                   15720 	.db #0x79	; 121	'y'
      0002A2 40                   15721 	.db #0x40	; 64
      0002A3 0C                   15722 	.db #0x0c	; 12
      0002A4 1E                   15723 	.db #0x1e	; 30
      0002A5 52                   15724 	.db #0x52	; 82	'R'
      0002A6 72                   15725 	.db #0x72	; 114	'r'
      0002A7 12                   15726 	.db #0x12	; 18
      0002A8 39                   15727 	.db #0x39	; 57	'9'
      0002A9 55                   15728 	.db #0x55	; 85	'U'
      0002AA 55                   15729 	.db #0x55	; 85	'U'
      0002AB 55                   15730 	.db #0x55	; 85	'U'
      0002AC 59                   15731 	.db #0x59	; 89	'Y'
      0002AD 39                   15732 	.db #0x39	; 57	'9'
      0002AE 54                   15733 	.db #0x54	; 84	'T'
      0002AF 54                   15734 	.db #0x54	; 84	'T'
      0002B0 54                   15735 	.db #0x54	; 84	'T'
      0002B1 59                   15736 	.db #0x59	; 89	'Y'
      0002B2 39                   15737 	.db #0x39	; 57	'9'
      0002B3 55                   15738 	.db #0x55	; 85	'U'
      0002B4 54                   15739 	.db #0x54	; 84	'T'
      0002B5 54                   15740 	.db #0x54	; 84	'T'
      0002B6 58                   15741 	.db #0x58	; 88	'X'
      0002B7 00                   15742 	.db #0x00	; 0
      0002B8 00                   15743 	.db #0x00	; 0
      0002B9 45                   15744 	.db #0x45	; 69	'E'
      0002BA 7C                   15745 	.db #0x7c	; 124
      0002BB 41                   15746 	.db #0x41	; 65	'A'
      0002BC 00                   15747 	.db #0x00	; 0
      0002BD 02                   15748 	.db #0x02	; 2
      0002BE 45                   15749 	.db #0x45	; 69	'E'
      0002BF 7D                   15750 	.db #0x7d	; 125
      0002C0 42                   15751 	.db #0x42	; 66	'B'
      0002C1 00                   15752 	.db #0x00	; 0
      0002C2 01                   15753 	.db #0x01	; 1
      0002C3 45                   15754 	.db #0x45	; 69	'E'
      0002C4 7C                   15755 	.db #0x7c	; 124
      0002C5 40                   15756 	.db #0x40	; 64
      0002C6 7D                   15757 	.db #0x7d	; 125
      0002C7 12                   15758 	.db #0x12	; 18
      0002C8 11                   15759 	.db #0x11	; 17
      0002C9 12                   15760 	.db #0x12	; 18
      0002CA 7D                   15761 	.db #0x7d	; 125
      0002CB F0                   15762 	.db #0xf0	; 240
      0002CC 28                   15763 	.db #0x28	; 40
      0002CD 25                   15764 	.db #0x25	; 37
      0002CE 28                   15765 	.db #0x28	; 40
      0002CF F0                   15766 	.db #0xf0	; 240
      0002D0 7C                   15767 	.db #0x7c	; 124
      0002D1 54                   15768 	.db #0x54	; 84	'T'
      0002D2 55                   15769 	.db #0x55	; 85	'U'
      0002D3 45                   15770 	.db #0x45	; 69	'E'
      0002D4 00                   15771 	.db #0x00	; 0
      0002D5 20                   15772 	.db #0x20	; 32
      0002D6 54                   15773 	.db #0x54	; 84	'T'
      0002D7 54                   15774 	.db #0x54	; 84	'T'
      0002D8 7C                   15775 	.db #0x7c	; 124
      0002D9 54                   15776 	.db #0x54	; 84	'T'
      0002DA 7C                   15777 	.db #0x7c	; 124
      0002DB 0A                   15778 	.db #0x0a	; 10
      0002DC 09                   15779 	.db #0x09	; 9
      0002DD 7F                   15780 	.db #0x7f	; 127
      0002DE 49                   15781 	.db #0x49	; 73	'I'
      0002DF 32                   15782 	.db #0x32	; 50	'2'
      0002E0 49                   15783 	.db #0x49	; 73	'I'
      0002E1 49                   15784 	.db #0x49	; 73	'I'
      0002E2 49                   15785 	.db #0x49	; 73	'I'
      0002E3 32                   15786 	.db #0x32	; 50	'2'
      0002E4 3A                   15787 	.db #0x3a	; 58
      0002E5 44                   15788 	.db #0x44	; 68	'D'
      0002E6 44                   15789 	.db #0x44	; 68	'D'
      0002E7 44                   15790 	.db #0x44	; 68	'D'
      0002E8 3A                   15791 	.db #0x3a	; 58
      0002E9 32                   15792 	.db #0x32	; 50	'2'
      0002EA 4A                   15793 	.db #0x4a	; 74	'J'
      0002EB 48                   15794 	.db #0x48	; 72	'H'
      0002EC 48                   15795 	.db #0x48	; 72	'H'
      0002ED 30                   15796 	.db #0x30	; 48	'0'
      0002EE 3A                   15797 	.db #0x3a	; 58
      0002EF 41                   15798 	.db #0x41	; 65	'A'
      0002F0 41                   15799 	.db #0x41	; 65	'A'
      0002F1 21                   15800 	.db #0x21	; 33
      0002F2 7A                   15801 	.db #0x7a	; 122	'z'
      0002F3 3A                   15802 	.db #0x3a	; 58
      0002F4 42                   15803 	.db #0x42	; 66	'B'
      0002F5 40                   15804 	.db #0x40	; 64
      0002F6 20                   15805 	.db #0x20	; 32
      0002F7 78                   15806 	.db #0x78	; 120	'x'
      0002F8 00                   15807 	.db #0x00	; 0
      0002F9 9D                   15808 	.db #0x9d	; 157
      0002FA A0                   15809 	.db #0xa0	; 160
      0002FB A0                   15810 	.db #0xa0	; 160
      0002FC 7D                   15811 	.db #0x7d	; 125
      0002FD 3D                   15812 	.db #0x3d	; 61
      0002FE 42                   15813 	.db #0x42	; 66	'B'
      0002FF 42                   15814 	.db #0x42	; 66	'B'
      000300 42                   15815 	.db #0x42	; 66	'B'
      000301 3D                   15816 	.db #0x3d	; 61
      000302 3D                   15817 	.db #0x3d	; 61
      000303 40                   15818 	.db #0x40	; 64
      000304 40                   15819 	.db #0x40	; 64
      000305 40                   15820 	.db #0x40	; 64
      000306 3D                   15821 	.db #0x3d	; 61
      000307 3C                   15822 	.db #0x3c	; 60
      000308 24                   15823 	.db #0x24	; 36
      000309 FF                   15824 	.db #0xff	; 255
      00030A 24                   15825 	.db #0x24	; 36
      00030B 24                   15826 	.db #0x24	; 36
      00030C 48                   15827 	.db #0x48	; 72	'H'
      00030D 7E                   15828 	.db #0x7e	; 126
      00030E 49                   15829 	.db #0x49	; 73	'I'
      00030F 43                   15830 	.db #0x43	; 67	'C'
      000310 66                   15831 	.db #0x66	; 102	'f'
      000311 2B                   15832 	.db #0x2b	; 43
      000312 2F                   15833 	.db #0x2f	; 47
      000313 FC                   15834 	.db #0xfc	; 252
      000314 2F                   15835 	.db #0x2f	; 47
      000315 2B                   15836 	.db #0x2b	; 43
      000316 FF                   15837 	.db #0xff	; 255
      000317 09                   15838 	.db #0x09	; 9
      000318 29                   15839 	.db #0x29	; 41
      000319 F6                   15840 	.db #0xf6	; 246
      00031A 20                   15841 	.db #0x20	; 32
      00031B C0                   15842 	.db #0xc0	; 192
      00031C 88                   15843 	.db #0x88	; 136
      00031D 7E                   15844 	.db #0x7e	; 126
      00031E 09                   15845 	.db #0x09	; 9
      00031F 03                   15846 	.db #0x03	; 3
      000320 20                   15847 	.db #0x20	; 32
      000321 54                   15848 	.db #0x54	; 84	'T'
      000322 54                   15849 	.db #0x54	; 84	'T'
      000323 79                   15850 	.db #0x79	; 121	'y'
      000324 41                   15851 	.db #0x41	; 65	'A'
      000325 00                   15852 	.db #0x00	; 0
      000326 00                   15853 	.db #0x00	; 0
      000327 44                   15854 	.db #0x44	; 68	'D'
      000328 7D                   15855 	.db #0x7d	; 125
      000329 41                   15856 	.db #0x41	; 65	'A'
      00032A 30                   15857 	.db #0x30	; 48	'0'
      00032B 48                   15858 	.db #0x48	; 72	'H'
      00032C 48                   15859 	.db #0x48	; 72	'H'
      00032D 4A                   15860 	.db #0x4a	; 74	'J'
      00032E 32                   15861 	.db #0x32	; 50	'2'
      00032F 38                   15862 	.db #0x38	; 56	'8'
      000330 40                   15863 	.db #0x40	; 64
      000331 40                   15864 	.db #0x40	; 64
      000332 22                   15865 	.db #0x22	; 34
      000333 7A                   15866 	.db #0x7a	; 122	'z'
      000334 00                   15867 	.db #0x00	; 0
      000335 7A                   15868 	.db #0x7a	; 122	'z'
      000336 0A                   15869 	.db #0x0a	; 10
      000337 0A                   15870 	.db #0x0a	; 10
      000338 72                   15871 	.db #0x72	; 114	'r'
      000339 7D                   15872 	.db #0x7d	; 125
      00033A 0D                   15873 	.db #0x0d	; 13
      00033B 19                   15874 	.db #0x19	; 25
      00033C 31                   15875 	.db #0x31	; 49	'1'
      00033D 7D                   15876 	.db #0x7d	; 125
      00033E 26                   15877 	.db #0x26	; 38
      00033F 29                   15878 	.db #0x29	; 41
      000340 29                   15879 	.db #0x29	; 41
      000341 2F                   15880 	.db #0x2f	; 47
      000342 28                   15881 	.db #0x28	; 40
      000343 26                   15882 	.db #0x26	; 38
      000344 29                   15883 	.db #0x29	; 41
      000345 29                   15884 	.db #0x29	; 41
      000346 29                   15885 	.db #0x29	; 41
      000347 26                   15886 	.db #0x26	; 38
      000348 30                   15887 	.db #0x30	; 48	'0'
      000349 48                   15888 	.db #0x48	; 72	'H'
      00034A 4D                   15889 	.db #0x4d	; 77	'M'
      00034B 40                   15890 	.db #0x40	; 64
      00034C 20                   15891 	.db #0x20	; 32
      00034D 38                   15892 	.db #0x38	; 56	'8'
      00034E 08                   15893 	.db #0x08	; 8
      00034F 08                   15894 	.db #0x08	; 8
      000350 08                   15895 	.db #0x08	; 8
      000351 08                   15896 	.db #0x08	; 8
      000352 08                   15897 	.db #0x08	; 8
      000353 08                   15898 	.db #0x08	; 8
      000354 08                   15899 	.db #0x08	; 8
      000355 08                   15900 	.db #0x08	; 8
      000356 38                   15901 	.db #0x38	; 56	'8'
      000357 2F                   15902 	.db #0x2f	; 47
      000358 10                   15903 	.db #0x10	; 16
      000359 C8                   15904 	.db #0xc8	; 200
      00035A AC                   15905 	.db #0xac	; 172
      00035B BA                   15906 	.db #0xba	; 186
      00035C 2F                   15907 	.db #0x2f	; 47
      00035D 10                   15908 	.db #0x10	; 16
      00035E 28                   15909 	.db #0x28	; 40
      00035F 34                   15910 	.db #0x34	; 52	'4'
      000360 FA                   15911 	.db #0xfa	; 250
      000361 00                   15912 	.db #0x00	; 0
      000362 00                   15913 	.db #0x00	; 0
      000363 7B                   15914 	.db #0x7b	; 123
      000364 00                   15915 	.db #0x00	; 0
      000365 00                   15916 	.db #0x00	; 0
      000366 08                   15917 	.db #0x08	; 8
      000367 14                   15918 	.db #0x14	; 20
      000368 2A                   15919 	.db #0x2a	; 42
      000369 14                   15920 	.db #0x14	; 20
      00036A 22                   15921 	.db #0x22	; 34
      00036B 22                   15922 	.db #0x22	; 34
      00036C 14                   15923 	.db #0x14	; 20
      00036D 2A                   15924 	.db #0x2a	; 42
      00036E 14                   15925 	.db #0x14	; 20
      00036F 08                   15926 	.db #0x08	; 8
      000370 AA                   15927 	.db #0xaa	; 170
      000371 00                   15928 	.db #0x00	; 0
      000372 55                   15929 	.db #0x55	; 85	'U'
      000373 00                   15930 	.db #0x00	; 0
      000374 AA                   15931 	.db #0xaa	; 170
      000375 AA                   15932 	.db #0xaa	; 170
      000376 55                   15933 	.db #0x55	; 85	'U'
      000377 AA                   15934 	.db #0xaa	; 170
      000378 55                   15935 	.db #0x55	; 85	'U'
      000379 AA                   15936 	.db #0xaa	; 170
      00037A 00                   15937 	.db #0x00	; 0
      00037B 00                   15938 	.db #0x00	; 0
      00037C 00                   15939 	.db #0x00	; 0
      00037D FF                   15940 	.db #0xff	; 255
      00037E 00                   15941 	.db #0x00	; 0
      00037F 10                   15942 	.db #0x10	; 16
      000380 10                   15943 	.db #0x10	; 16
      000381 10                   15944 	.db #0x10	; 16
      000382 FF                   15945 	.db #0xff	; 255
      000383 00                   15946 	.db #0x00	; 0
      000384 14                   15947 	.db #0x14	; 20
      000385 14                   15948 	.db #0x14	; 20
      000386 14                   15949 	.db #0x14	; 20
      000387 FF                   15950 	.db #0xff	; 255
      000388 00                   15951 	.db #0x00	; 0
      000389 10                   15952 	.db #0x10	; 16
      00038A 10                   15953 	.db #0x10	; 16
      00038B FF                   15954 	.db #0xff	; 255
      00038C 00                   15955 	.db #0x00	; 0
      00038D FF                   15956 	.db #0xff	; 255
      00038E 10                   15957 	.db #0x10	; 16
      00038F 10                   15958 	.db #0x10	; 16
      000390 F0                   15959 	.db #0xf0	; 240
      000391 10                   15960 	.db #0x10	; 16
      000392 F0                   15961 	.db #0xf0	; 240
      000393 14                   15962 	.db #0x14	; 20
      000394 14                   15963 	.db #0x14	; 20
      000395 14                   15964 	.db #0x14	; 20
      000396 FC                   15965 	.db #0xfc	; 252
      000397 00                   15966 	.db #0x00	; 0
      000398 14                   15967 	.db #0x14	; 20
      000399 14                   15968 	.db #0x14	; 20
      00039A F7                   15969 	.db #0xf7	; 247
      00039B 00                   15970 	.db #0x00	; 0
      00039C FF                   15971 	.db #0xff	; 255
      00039D 00                   15972 	.db #0x00	; 0
      00039E 00                   15973 	.db #0x00	; 0
      00039F FF                   15974 	.db #0xff	; 255
      0003A0 00                   15975 	.db #0x00	; 0
      0003A1 FF                   15976 	.db #0xff	; 255
      0003A2 14                   15977 	.db #0x14	; 20
      0003A3 14                   15978 	.db #0x14	; 20
      0003A4 F4                   15979 	.db #0xf4	; 244
      0003A5 04                   15980 	.db #0x04	; 4
      0003A6 FC                   15981 	.db #0xfc	; 252
      0003A7 14                   15982 	.db #0x14	; 20
      0003A8 14                   15983 	.db #0x14	; 20
      0003A9 17                   15984 	.db #0x17	; 23
      0003AA 10                   15985 	.db #0x10	; 16
      0003AB 1F                   15986 	.db #0x1f	; 31
      0003AC 10                   15987 	.db #0x10	; 16
      0003AD 10                   15988 	.db #0x10	; 16
      0003AE 1F                   15989 	.db #0x1f	; 31
      0003AF 10                   15990 	.db #0x10	; 16
      0003B0 1F                   15991 	.db #0x1f	; 31
      0003B1 14                   15992 	.db #0x14	; 20
      0003B2 14                   15993 	.db #0x14	; 20
      0003B3 14                   15994 	.db #0x14	; 20
      0003B4 1F                   15995 	.db #0x1f	; 31
      0003B5 00                   15996 	.db #0x00	; 0
      0003B6 10                   15997 	.db #0x10	; 16
      0003B7 10                   15998 	.db #0x10	; 16
      0003B8 10                   15999 	.db #0x10	; 16
      0003B9 F0                   16000 	.db #0xf0	; 240
      0003BA 00                   16001 	.db #0x00	; 0
      0003BB 00                   16002 	.db #0x00	; 0
      0003BC 00                   16003 	.db #0x00	; 0
      0003BD 00                   16004 	.db #0x00	; 0
      0003BE 1F                   16005 	.db #0x1f	; 31
      0003BF 10                   16006 	.db #0x10	; 16
      0003C0 10                   16007 	.db #0x10	; 16
      0003C1 10                   16008 	.db #0x10	; 16
      0003C2 10                   16009 	.db #0x10	; 16
      0003C3 1F                   16010 	.db #0x1f	; 31
      0003C4 10                   16011 	.db #0x10	; 16
      0003C5 10                   16012 	.db #0x10	; 16
      0003C6 10                   16013 	.db #0x10	; 16
      0003C7 10                   16014 	.db #0x10	; 16
      0003C8 F0                   16015 	.db #0xf0	; 240
      0003C9 10                   16016 	.db #0x10	; 16
      0003CA 00                   16017 	.db #0x00	; 0
      0003CB 00                   16018 	.db #0x00	; 0
      0003CC 00                   16019 	.db #0x00	; 0
      0003CD FF                   16020 	.db #0xff	; 255
      0003CE 10                   16021 	.db #0x10	; 16
      0003CF 10                   16022 	.db #0x10	; 16
      0003D0 10                   16023 	.db #0x10	; 16
      0003D1 10                   16024 	.db #0x10	; 16
      0003D2 10                   16025 	.db #0x10	; 16
      0003D3 10                   16026 	.db #0x10	; 16
      0003D4 10                   16027 	.db #0x10	; 16
      0003D5 10                   16028 	.db #0x10	; 16
      0003D6 10                   16029 	.db #0x10	; 16
      0003D7 FF                   16030 	.db #0xff	; 255
      0003D8 10                   16031 	.db #0x10	; 16
      0003D9 00                   16032 	.db #0x00	; 0
      0003DA 00                   16033 	.db #0x00	; 0
      0003DB 00                   16034 	.db #0x00	; 0
      0003DC FF                   16035 	.db #0xff	; 255
      0003DD 14                   16036 	.db #0x14	; 20
      0003DE 00                   16037 	.db #0x00	; 0
      0003DF 00                   16038 	.db #0x00	; 0
      0003E0 FF                   16039 	.db #0xff	; 255
      0003E1 00                   16040 	.db #0x00	; 0
      0003E2 FF                   16041 	.db #0xff	; 255
      0003E3 00                   16042 	.db #0x00	; 0
      0003E4 00                   16043 	.db #0x00	; 0
      0003E5 1F                   16044 	.db #0x1f	; 31
      0003E6 10                   16045 	.db #0x10	; 16
      0003E7 17                   16046 	.db #0x17	; 23
      0003E8 00                   16047 	.db #0x00	; 0
      0003E9 00                   16048 	.db #0x00	; 0
      0003EA FC                   16049 	.db #0xfc	; 252
      0003EB 04                   16050 	.db #0x04	; 4
      0003EC F4                   16051 	.db #0xf4	; 244
      0003ED 14                   16052 	.db #0x14	; 20
      0003EE 14                   16053 	.db #0x14	; 20
      0003EF 17                   16054 	.db #0x17	; 23
      0003F0 10                   16055 	.db #0x10	; 16
      0003F1 17                   16056 	.db #0x17	; 23
      0003F2 14                   16057 	.db #0x14	; 20
      0003F3 14                   16058 	.db #0x14	; 20
      0003F4 F4                   16059 	.db #0xf4	; 244
      0003F5 04                   16060 	.db #0x04	; 4
      0003F6 F4                   16061 	.db #0xf4	; 244
      0003F7 00                   16062 	.db #0x00	; 0
      0003F8 00                   16063 	.db #0x00	; 0
      0003F9 FF                   16064 	.db #0xff	; 255
      0003FA 00                   16065 	.db #0x00	; 0
      0003FB F7                   16066 	.db #0xf7	; 247
      0003FC 14                   16067 	.db #0x14	; 20
      0003FD 14                   16068 	.db #0x14	; 20
      0003FE 14                   16069 	.db #0x14	; 20
      0003FF 14                   16070 	.db #0x14	; 20
      000400 14                   16071 	.db #0x14	; 20
      000401 14                   16072 	.db #0x14	; 20
      000402 14                   16073 	.db #0x14	; 20
      000403 F7                   16074 	.db #0xf7	; 247
      000404 00                   16075 	.db #0x00	; 0
      000405 F7                   16076 	.db #0xf7	; 247
      000406 14                   16077 	.db #0x14	; 20
      000407 14                   16078 	.db #0x14	; 20
      000408 14                   16079 	.db #0x14	; 20
      000409 17                   16080 	.db #0x17	; 23
      00040A 14                   16081 	.db #0x14	; 20
      00040B 10                   16082 	.db #0x10	; 16
      00040C 10                   16083 	.db #0x10	; 16
      00040D 1F                   16084 	.db #0x1f	; 31
      00040E 10                   16085 	.db #0x10	; 16
      00040F 1F                   16086 	.db #0x1f	; 31
      000410 14                   16087 	.db #0x14	; 20
      000411 14                   16088 	.db #0x14	; 20
      000412 14                   16089 	.db #0x14	; 20
      000413 F4                   16090 	.db #0xf4	; 244
      000414 14                   16091 	.db #0x14	; 20
      000415 10                   16092 	.db #0x10	; 16
      000416 10                   16093 	.db #0x10	; 16
      000417 F0                   16094 	.db #0xf0	; 240
      000418 10                   16095 	.db #0x10	; 16
      000419 F0                   16096 	.db #0xf0	; 240
      00041A 00                   16097 	.db #0x00	; 0
      00041B 00                   16098 	.db #0x00	; 0
      00041C 1F                   16099 	.db #0x1f	; 31
      00041D 10                   16100 	.db #0x10	; 16
      00041E 1F                   16101 	.db #0x1f	; 31
      00041F 00                   16102 	.db #0x00	; 0
      000420 00                   16103 	.db #0x00	; 0
      000421 00                   16104 	.db #0x00	; 0
      000422 1F                   16105 	.db #0x1f	; 31
      000423 14                   16106 	.db #0x14	; 20
      000424 00                   16107 	.db #0x00	; 0
      000425 00                   16108 	.db #0x00	; 0
      000426 00                   16109 	.db #0x00	; 0
      000427 FC                   16110 	.db #0xfc	; 252
      000428 14                   16111 	.db #0x14	; 20
      000429 00                   16112 	.db #0x00	; 0
      00042A 00                   16113 	.db #0x00	; 0
      00042B F0                   16114 	.db #0xf0	; 240
      00042C 10                   16115 	.db #0x10	; 16
      00042D F0                   16116 	.db #0xf0	; 240
      00042E 10                   16117 	.db #0x10	; 16
      00042F 10                   16118 	.db #0x10	; 16
      000430 FF                   16119 	.db #0xff	; 255
      000431 10                   16120 	.db #0x10	; 16
      000432 FF                   16121 	.db #0xff	; 255
      000433 14                   16122 	.db #0x14	; 20
      000434 14                   16123 	.db #0x14	; 20
      000435 14                   16124 	.db #0x14	; 20
      000436 FF                   16125 	.db #0xff	; 255
      000437 14                   16126 	.db #0x14	; 20
      000438 10                   16127 	.db #0x10	; 16
      000439 10                   16128 	.db #0x10	; 16
      00043A 10                   16129 	.db #0x10	; 16
      00043B 1F                   16130 	.db #0x1f	; 31
      00043C 00                   16131 	.db #0x00	; 0
      00043D 00                   16132 	.db #0x00	; 0
      00043E 00                   16133 	.db #0x00	; 0
      00043F 00                   16134 	.db #0x00	; 0
      000440 F0                   16135 	.db #0xf0	; 240
      000441 10                   16136 	.db #0x10	; 16
      000442 FF                   16137 	.db #0xff	; 255
      000443 FF                   16138 	.db #0xff	; 255
      000444 FF                   16139 	.db #0xff	; 255
      000445 FF                   16140 	.db #0xff	; 255
      000446 FF                   16141 	.db #0xff	; 255
      000447 F0                   16142 	.db #0xf0	; 240
      000448 F0                   16143 	.db #0xf0	; 240
      000449 F0                   16144 	.db #0xf0	; 240
      00044A F0                   16145 	.db #0xf0	; 240
      00044B F0                   16146 	.db #0xf0	; 240
      00044C FF                   16147 	.db #0xff	; 255
      00044D FF                   16148 	.db #0xff	; 255
      00044E FF                   16149 	.db #0xff	; 255
      00044F 00                   16150 	.db #0x00	; 0
      000450 00                   16151 	.db #0x00	; 0
      000451 00                   16152 	.db #0x00	; 0
      000452 00                   16153 	.db #0x00	; 0
      000453 00                   16154 	.db #0x00	; 0
      000454 FF                   16155 	.db #0xff	; 255
      000455 FF                   16156 	.db #0xff	; 255
      000456 0F                   16157 	.db #0x0f	; 15
      000457 0F                   16158 	.db #0x0f	; 15
      000458 0F                   16159 	.db #0x0f	; 15
      000459 0F                   16160 	.db #0x0f	; 15
      00045A 0F                   16161 	.db #0x0f	; 15
      00045B 38                   16162 	.db #0x38	; 56	'8'
      00045C 44                   16163 	.db #0x44	; 68	'D'
      00045D 44                   16164 	.db #0x44	; 68	'D'
      00045E 38                   16165 	.db #0x38	; 56	'8'
      00045F 44                   16166 	.db #0x44	; 68	'D'
      000460 FC                   16167 	.db #0xfc	; 252
      000461 4A                   16168 	.db #0x4a	; 74	'J'
      000462 4A                   16169 	.db #0x4a	; 74	'J'
      000463 4A                   16170 	.db #0x4a	; 74	'J'
      000464 34                   16171 	.db #0x34	; 52	'4'
      000465 7E                   16172 	.db #0x7e	; 126
      000466 02                   16173 	.db #0x02	; 2
      000467 02                   16174 	.db #0x02	; 2
      000468 06                   16175 	.db #0x06	; 6
      000469 06                   16176 	.db #0x06	; 6
      00046A 02                   16177 	.db #0x02	; 2
      00046B 7E                   16178 	.db #0x7e	; 126
      00046C 02                   16179 	.db #0x02	; 2
      00046D 7E                   16180 	.db #0x7e	; 126
      00046E 02                   16181 	.db #0x02	; 2
      00046F 63                   16182 	.db #0x63	; 99	'c'
      000470 55                   16183 	.db #0x55	; 85	'U'
      000471 49                   16184 	.db #0x49	; 73	'I'
      000472 41                   16185 	.db #0x41	; 65	'A'
      000473 63                   16186 	.db #0x63	; 99	'c'
      000474 38                   16187 	.db #0x38	; 56	'8'
      000475 44                   16188 	.db #0x44	; 68	'D'
      000476 44                   16189 	.db #0x44	; 68	'D'
      000477 3C                   16190 	.db #0x3c	; 60
      000478 04                   16191 	.db #0x04	; 4
      000479 40                   16192 	.db #0x40	; 64
      00047A 7E                   16193 	.db #0x7e	; 126
      00047B 20                   16194 	.db #0x20	; 32
      00047C 1E                   16195 	.db #0x1e	; 30
      00047D 20                   16196 	.db #0x20	; 32
      00047E 06                   16197 	.db #0x06	; 6
      00047F 02                   16198 	.db #0x02	; 2
      000480 7E                   16199 	.db #0x7e	; 126
      000481 02                   16200 	.db #0x02	; 2
      000482 02                   16201 	.db #0x02	; 2
      000483 99                   16202 	.db #0x99	; 153
      000484 A5                   16203 	.db #0xa5	; 165
      000485 E7                   16204 	.db #0xe7	; 231
      000486 A5                   16205 	.db #0xa5	; 165
      000487 99                   16206 	.db #0x99	; 153
      000488 1C                   16207 	.db #0x1c	; 28
      000489 2A                   16208 	.db #0x2a	; 42
      00048A 49                   16209 	.db #0x49	; 73	'I'
      00048B 2A                   16210 	.db #0x2a	; 42
      00048C 1C                   16211 	.db #0x1c	; 28
      00048D 4C                   16212 	.db #0x4c	; 76	'L'
      00048E 72                   16213 	.db #0x72	; 114	'r'
      00048F 01                   16214 	.db #0x01	; 1
      000490 72                   16215 	.db #0x72	; 114	'r'
      000491 4C                   16216 	.db #0x4c	; 76	'L'
      000492 30                   16217 	.db #0x30	; 48	'0'
      000493 4A                   16218 	.db #0x4a	; 74	'J'
      000494 4D                   16219 	.db #0x4d	; 77	'M'
      000495 4D                   16220 	.db #0x4d	; 77	'M'
      000496 30                   16221 	.db #0x30	; 48	'0'
      000497 30                   16222 	.db #0x30	; 48	'0'
      000498 48                   16223 	.db #0x48	; 72	'H'
      000499 78                   16224 	.db #0x78	; 120	'x'
      00049A 48                   16225 	.db #0x48	; 72	'H'
      00049B 30                   16226 	.db #0x30	; 48	'0'
      00049C BC                   16227 	.db #0xbc	; 188
      00049D 62                   16228 	.db #0x62	; 98	'b'
      00049E 5A                   16229 	.db #0x5a	; 90	'Z'
      00049F 46                   16230 	.db #0x46	; 70	'F'
      0004A0 3D                   16231 	.db #0x3d	; 61
      0004A1 3E                   16232 	.db #0x3e	; 62
      0004A2 49                   16233 	.db #0x49	; 73	'I'
      0004A3 49                   16234 	.db #0x49	; 73	'I'
      0004A4 49                   16235 	.db #0x49	; 73	'I'
      0004A5 00                   16236 	.db #0x00	; 0
      0004A6 7E                   16237 	.db #0x7e	; 126
      0004A7 01                   16238 	.db #0x01	; 1
      0004A8 01                   16239 	.db #0x01	; 1
      0004A9 01                   16240 	.db #0x01	; 1
      0004AA 7E                   16241 	.db #0x7e	; 126
      0004AB 2A                   16242 	.db #0x2a	; 42
      0004AC 2A                   16243 	.db #0x2a	; 42
      0004AD 2A                   16244 	.db #0x2a	; 42
      0004AE 2A                   16245 	.db #0x2a	; 42
      0004AF 2A                   16246 	.db #0x2a	; 42
      0004B0 44                   16247 	.db #0x44	; 68	'D'
      0004B1 44                   16248 	.db #0x44	; 68	'D'
      0004B2 5F                   16249 	.db #0x5f	; 95
      0004B3 44                   16250 	.db #0x44	; 68	'D'
      0004B4 44                   16251 	.db #0x44	; 68	'D'
      0004B5 40                   16252 	.db #0x40	; 64
      0004B6 51                   16253 	.db #0x51	; 81	'Q'
      0004B7 4A                   16254 	.db #0x4a	; 74	'J'
      0004B8 44                   16255 	.db #0x44	; 68	'D'
      0004B9 40                   16256 	.db #0x40	; 64
      0004BA 40                   16257 	.db #0x40	; 64
      0004BB 44                   16258 	.db #0x44	; 68	'D'
      0004BC 4A                   16259 	.db #0x4a	; 74	'J'
      0004BD 51                   16260 	.db #0x51	; 81	'Q'
      0004BE 40                   16261 	.db #0x40	; 64
      0004BF 00                   16262 	.db #0x00	; 0
      0004C0 00                   16263 	.db #0x00	; 0
      0004C1 FF                   16264 	.db #0xff	; 255
      0004C2 01                   16265 	.db #0x01	; 1
      0004C3 03                   16266 	.db #0x03	; 3
      0004C4 E0                   16267 	.db #0xe0	; 224
      0004C5 80                   16268 	.db #0x80	; 128
      0004C6 FF                   16269 	.db #0xff	; 255
      0004C7 00                   16270 	.db #0x00	; 0
      0004C8 00                   16271 	.db #0x00	; 0
      0004C9 08                   16272 	.db #0x08	; 8
      0004CA 08                   16273 	.db #0x08	; 8
      0004CB 6B                   16274 	.db #0x6b	; 107	'k'
      0004CC 6B                   16275 	.db #0x6b	; 107	'k'
      0004CD 08                   16276 	.db #0x08	; 8
      0004CE 36                   16277 	.db #0x36	; 54	'6'
      0004CF 12                   16278 	.db #0x12	; 18
      0004D0 36                   16279 	.db #0x36	; 54	'6'
      0004D1 24                   16280 	.db #0x24	; 36
      0004D2 36                   16281 	.db #0x36	; 54	'6'
      0004D3 06                   16282 	.db #0x06	; 6
      0004D4 0F                   16283 	.db #0x0f	; 15
      0004D5 09                   16284 	.db #0x09	; 9
      0004D6 0F                   16285 	.db #0x0f	; 15
      0004D7 06                   16286 	.db #0x06	; 6
      0004D8 00                   16287 	.db #0x00	; 0
      0004D9 00                   16288 	.db #0x00	; 0
      0004DA 18                   16289 	.db #0x18	; 24
      0004DB 18                   16290 	.db #0x18	; 24
      0004DC 00                   16291 	.db #0x00	; 0
      0004DD 00                   16292 	.db #0x00	; 0
      0004DE 00                   16293 	.db #0x00	; 0
      0004DF 10                   16294 	.db #0x10	; 16
      0004E0 10                   16295 	.db #0x10	; 16
      0004E1 00                   16296 	.db #0x00	; 0
      0004E2 30                   16297 	.db #0x30	; 48	'0'
      0004E3 40                   16298 	.db #0x40	; 64
      0004E4 FF                   16299 	.db #0xff	; 255
      0004E5 01                   16300 	.db #0x01	; 1
      0004E6 01                   16301 	.db #0x01	; 1
      0004E7 00                   16302 	.db #0x00	; 0
      0004E8 1F                   16303 	.db #0x1f	; 31
      0004E9 01                   16304 	.db #0x01	; 1
      0004EA 01                   16305 	.db #0x01	; 1
      0004EB 1E                   16306 	.db #0x1e	; 30
      0004EC 00                   16307 	.db #0x00	; 0
      0004ED 19                   16308 	.db #0x19	; 25
      0004EE 1D                   16309 	.db #0x1d	; 29
      0004EF 17                   16310 	.db #0x17	; 23
      0004F0 12                   16311 	.db #0x12	; 18
      0004F1 00                   16312 	.db #0x00	; 0
      0004F2 3C                   16313 	.db #0x3c	; 60
      0004F3 3C                   16314 	.db #0x3c	; 60
      0004F4 3C                   16315 	.db #0x3c	; 60
      0004F5 3C                   16316 	.db #0x3c	; 60
      0004F6 00                   16317 	.db #0x00	; 0
      0004F7 00                   16318 	.db #0x00	; 0
      0004F8 00                   16319 	.db #0x00	; 0
      0004F9 00                   16320 	.db #0x00	; 0
      0004FA 00                   16321 	.db #0x00	; 0
      0004FB                      16322 _keypad:
      0004FB 31                   16323 	.db #0x31	; 49	'1'
      0004FC 34                   16324 	.db #0x34	; 52	'4'
      0004FD 37                   16325 	.db #0x37	; 55	'7'
      0004FE 46                   16326 	.db #0x46	; 70	'F'
      0004FF 32                   16327 	.db #0x32	; 50	'2'
      000500 35                   16328 	.db #0x35	; 53	'5'
      000501 38                   16329 	.db #0x38	; 56	'8'
      000502 30                   16330 	.db #0x30	; 48	'0'
      000503 33                   16331 	.db #0x33	; 51	'3'
      000504 36                   16332 	.db #0x36	; 54	'6'
      000505 39                   16333 	.db #0x39	; 57	'9'
      000506 45                   16334 	.db #0x45	; 69	'E'
      000507 41                   16335 	.db #0x41	; 65	'A'
      000508 42                   16336 	.db #0x42	; 66	'B'
      000509 43                   16337 	.db #0x43	; 67	'C'
      00050A 44                   16338 	.db #0x44	; 68	'D'
                                  16339 	.area CONST   (CODE)
      00050B                      16340 ___str_0:
      00050B 45 52 52 4F 52 20 46 16341 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      00051B 00                   16342 	.db 0x00
                                  16343 	.area CSEG    (CODE)
                                  16344 	.area CONST   (CODE)
      00051C                      16345 ___str_1:
      00051C 46 72 65 65 20 54 79 16346 	.ascii "Free Type: "
             70 65 3A 20
      000527 0A                   16347 	.db 0x0a
      000528 00                   16348 	.db 0x00
                                  16349 	.area CSEG    (CODE)
                                  16350 	.area CONST   (CODE)
      000529                      16351 ___str_2:
      000529 30 78                16352 	.ascii "0x"
      00052B 00                   16353 	.db 0x00
                                  16354 	.area CSEG    (CODE)
                                  16355 	.area CONST   (CODE)
      00052C                      16356 ___str_3:
      00052C 57 65 6C 63 6F 6D 65 16357 	.ascii "Welcome"
      000533 0A                   16358 	.db 0x0a
      000534 00                   16359 	.db 0x00
                                  16360 	.area CSEG    (CODE)
                                  16361 	.area CONST   (CODE)
      000535                      16362 ___str_4:
      000535 0A                   16363 	.db 0x0a
      000536 20 54 79 6C 65 72 20 16364 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      000543 0A                   16365 	.db 0x0a
      000544 20 20 45 43 45 4E 2D 16366 	.ascii "  ECEN-4350"
             34 33 35 30
      00054F 0A                   16367 	.db 0x0a
      000550 20 20 46 61 6C 6C 20 16368 	.ascii "  Fall 2021"
             32 30 32 31
      00055B 00                   16369 	.db 0x00
                                  16370 	.area CSEG    (CODE)
                                  16371 	.area CONST   (CODE)
      00055C                      16372 ___str_5:
      00055C 3C 4D 65 6E 75 3E    16373 	.ascii "<Menu>"
      000562 0A                   16374 	.db 0x0a
      000563 00                   16375 	.db 0x00
                                  16376 	.area CSEG    (CODE)
                                  16377 	.area CONST   (CODE)
      000564                      16378 ___str_6:
      000564 20 3C 44 3E          16379 	.ascii " <D>"
      000568 00                   16380 	.db 0x00
                                  16381 	.area CSEG    (CODE)
                                  16382 	.area CONST   (CODE)
      000569                      16383 ___str_7:
      000569 20 44 55 4D 50       16384 	.ascii " DUMP"
      00056E 0A                   16385 	.db 0x0a
      00056F 00                   16386 	.db 0x00
                                  16387 	.area CSEG    (CODE)
                                  16388 	.area CONST   (CODE)
      000570                      16389 ___str_8:
      000570 20 3C 42 3E          16390 	.ascii " <B>"
      000574 00                   16391 	.db 0x00
                                  16392 	.area CSEG    (CODE)
                                  16393 	.area CONST   (CODE)
      000575                      16394 ___str_9:
      000575 20 4D 4F 56 45       16395 	.ascii " MOVE"
      00057A 0A                   16396 	.db 0x0a
      00057B 00                   16397 	.db 0x00
                                  16398 	.area CSEG    (CODE)
                                  16399 	.area CONST   (CODE)
      00057C                      16400 ___str_10:
      00057C 20 3C 45 3E          16401 	.ascii " <E>"
      000580 00                   16402 	.db 0x00
                                  16403 	.area CSEG    (CODE)
                                  16404 	.area CONST   (CODE)
      000581                      16405 ___str_11:
      000581 20 45 44 49 54       16406 	.ascii " EDIT"
      000586 0A                   16407 	.db 0x0a
      000587 00                   16408 	.db 0x00
                                  16409 	.area CSEG    (CODE)
                                  16410 	.area CONST   (CODE)
      000588                      16411 ___str_12:
      000588 20 3C 46 3E          16412 	.ascii " <F>"
      00058C 00                   16413 	.db 0x00
                                  16414 	.area CSEG    (CODE)
                                  16415 	.area CONST   (CODE)
      00058D                      16416 ___str_13:
      00058D 20 46 49 4E 44       16417 	.ascii " FIND"
      000592 0A                   16418 	.db 0x0a
      000593 00                   16419 	.db 0x00
                                  16420 	.area CSEG    (CODE)
                                  16421 	.area CONST   (CODE)
      000594                      16422 ___str_14:
      000594 20 3C 43 3E          16423 	.ascii " <C>"
      000598 00                   16424 	.db 0x00
                                  16425 	.area CSEG    (CODE)
                                  16426 	.area CONST   (CODE)
      000599                      16427 ___str_15:
      000599 20 43 4F 55 4E 54    16428 	.ascii " COUNT"
      00059F 0A                   16429 	.db 0x0a
      0005A0 00                   16430 	.db 0x00
                                  16431 	.area CSEG    (CODE)
                                  16432 	.area CONST   (CODE)
      0005A1                      16433 ___str_16:
      0005A1 20 3C 41 3E          16434 	.ascii " <A>"
      0005A5 00                   16435 	.db 0x00
                                  16436 	.area CSEG    (CODE)
                                  16437 	.area CONST   (CODE)
      0005A6                      16438 ___str_17:
      0005A6 20 4D 45 4D 20 43 48 16439 	.ascii " MEM CHECK"
             45 43 4B
      0005B0 0A                   16440 	.db 0x0a
      0005B1 00                   16441 	.db 0x00
                                  16442 	.area CSEG    (CODE)
                                  16443 	.area CONST   (CODE)
      0005B2                      16444 ___str_18:
      0005B2 20 3C 31 3E          16445 	.ascii " <1>"
      0005B6 00                   16446 	.db 0x00
                                  16447 	.area CSEG    (CODE)
                                  16448 	.area CONST   (CODE)
      0005B7                      16449 ___str_19:
      0005B7 20 55 41 52 54       16450 	.ascii " UART"
      0005BC 00                   16451 	.db 0x00
                                  16452 	.area CSEG    (CODE)
                                  16453 	.area CONST   (CODE)
      0005BD                      16454 ___str_20:
      0005BD 20 5B 44 69 73 61 62 16455 	.ascii " [Disabled]"
             6C 65 64 5D
      0005C8 0A                   16456 	.db 0x0a
      0005C9 00                   16457 	.db 0x00
                                  16458 	.area CSEG    (CODE)
                                  16459 	.area CONST   (CODE)
      0005CA                      16460 ___str_21:
      0005CA 20 5B 45 6E 61 62 6C 16461 	.ascii " [Enabled]"
             65 64 5D
      0005D4 0A                   16462 	.db 0x0a
      0005D5 00                   16463 	.db 0x00
                                  16464 	.area CSEG    (CODE)
                                  16465 	.area CONST   (CODE)
      0005D6                      16466 ___str_22:
      0005D6 5B 44 55 4D 50 5D    16467 	.ascii "[DUMP]"
      0005DC 0A                   16468 	.db 0x0a
      0005DD 00                   16469 	.db 0x00
                                  16470 	.area CSEG    (CODE)
                                  16471 	.area CONST   (CODE)
      0005DE                      16472 ___str_23:
      0005DE 20 41 64 64 72 65 73 16473 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      0005F0 0A                   16474 	.db 0x0a
      0005F1 00                   16475 	.db 0x00
                                  16476 	.area CSEG    (CODE)
                                  16477 	.area CONST   (CODE)
      0005F2                      16478 ___str_24:
      0005F2 20 30 78 5F 5F 5F 5F 16479 	.ascii " 0x____"
      0005F9 00                   16480 	.db 0x00
                                  16481 	.area CSEG    (CODE)
                                  16482 	.area CONST   (CODE)
      0005FA                      16483 ___str_25:
      0005FA 20 43 68 6F 6F 73 65 16484 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      00060D 0A                   16485 	.db 0x0a
      00060E 00                   16486 	.db 0x00
                                  16487 	.area CSEG    (CODE)
                                  16488 	.area CONST   (CODE)
      00060F                      16489 ___str_26:
      00060F 20 20 3C 31 3E 20 42 16490 	.ascii "  <1> BYTE"
             59 54 45
      000619 0A                   16491 	.db 0x0a
      00061A 20 20 3C 32 3E 20 57 16492 	.ascii "  <2> WORD"
             4F 52 44
      000624 0A                   16493 	.db 0x0a
      000625 20 20 3C 34 3E 20 44 16494 	.ascii "  <4> DWORD"
             57 4F 52 44
      000630 00                   16495 	.db 0x00
                                  16496 	.area CSEG    (CODE)
                                  16497 	.area CONST   (CODE)
      000631                      16498 ___str_27:
      000631 20 49 6E 70 75 74 20 16499 	.ascii " Input Size:"
             53 69 7A 65 3A
      00063D 00                   16500 	.db 0x00
                                  16501 	.area CSEG    (CODE)
                                  16502 	.area CONST   (CODE)
      00063E                      16503 ___str_28:
      00063E 20 5F                16504 	.ascii " _"
      000640 00                   16505 	.db 0x00
                                  16506 	.area CSEG    (CODE)
                                  16507 	.area CONST   (CODE)
      000641                      16508 ___str_29:
      000641 20 41 64 64 72 65 73 16509 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      000653 00                   16510 	.db 0x00
                                  16511 	.area CSEG    (CODE)
                                  16512 	.area CONST   (CODE)
      000654                      16513 ___str_30:
      000654 20                   16514 	.ascii " "
      000655 00                   16515 	.db 0x00
                                  16516 	.area CSEG    (CODE)
                                  16517 	.area CONST   (CODE)
      000656                      16518 ___str_31:
      000656 20 43 68 6F 6F 73 65 16519 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      000669 00                   16520 	.db 0x00
                                  16521 	.area CSEG    (CODE)
                                  16522 	.area CONST   (CODE)
      00066A                      16523 ___str_32:
      00066A 0A                   16524 	.db 0x0a
      00066B 0A                   16525 	.db 0x0a
      00066C 00                   16526 	.db 0x00
                                  16527 	.area CSEG    (CODE)
                                  16528 	.area CONST   (CODE)
      00066D                      16529 ___str_33:
      00066D 20 20                16530 	.ascii "  "
      00066F 00                   16531 	.db 0x00
                                  16532 	.area CSEG    (CODE)
                                  16533 	.area CONST   (CODE)
      000670                      16534 ___str_34:
      000670 3C 31 3E 20 42 59 54 16535 	.ascii "<1> BYTE"
             45
      000678 0A                   16536 	.db 0x0a
      000679 00                   16537 	.db 0x00
                                  16538 	.area CSEG    (CODE)
                                  16539 	.area CONST   (CODE)
      00067A                      16540 ___str_35:
      00067A 0A                   16541 	.db 0x0a
      00067B 0A                   16542 	.db 0x0a
      00067C 20 20 20 20 20 20 20 16543 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00068C 0A                   16544 	.db 0x0a
      00068D 20 20 20 20 20 20 20 16545 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00069D 00                   16546 	.db 0x00
                                  16547 	.area CSEG    (CODE)
                                  16548 	.area CONST   (CODE)
      00069E                      16549 ___str_36:
      00069E 0A                   16550 	.db 0x0a
      00069F 20 20                16551 	.ascii "  "
      0006A1 00                   16552 	.db 0x00
                                  16553 	.area CSEG    (CODE)
                                  16554 	.area CONST   (CODE)
      0006A2                      16555 ___str_37:
      0006A2 3C 32 3E 20 57 4F 52 16556 	.ascii "<2> WORD"
             44
      0006AA 0A                   16557 	.db 0x0a
      0006AB 00                   16558 	.db 0x00
                                  16559 	.area CSEG    (CODE)
                                  16560 	.area CONST   (CODE)
      0006AC                      16561 ___str_38:
      0006AC 0A                   16562 	.db 0x0a
      0006AD 20 20 20 20 20 20 20 16563 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006BD 0A                   16564 	.db 0x0a
      0006BE 20 20 20 20 20 20 20 16565 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0006CE 00                   16566 	.db 0x00
                                  16567 	.area CSEG    (CODE)
                                  16568 	.area CONST   (CODE)
      0006CF                      16569 ___str_39:
      0006CF 0A                   16570 	.db 0x0a
      0006D0 0A                   16571 	.db 0x0a
      0006D1 20 20                16572 	.ascii "  "
      0006D3 00                   16573 	.db 0x00
                                  16574 	.area CSEG    (CODE)
                                  16575 	.area CONST   (CODE)
      0006D4                      16576 ___str_40:
      0006D4 3C 34 3E 20 44 57 4F 16577 	.ascii "<4> DWORD"
             52 44
      0006DD 00                   16578 	.db 0x00
                                  16579 	.area CSEG    (CODE)
                                  16580 	.area CONST   (CODE)
      0006DE                      16581 ___str_41:
      0006DE 0A                   16582 	.db 0x0a
      0006DF 20 20 49 6E 70 75 74 16583 	.ascii "  Input Error"
             20 45 72 72 6F 72
      0006EC 0A                   16584 	.db 0x0a
      0006ED 20 20 54 72 79 20 41 16585 	.ascii "  Try Again"
             67 61 69 6E
      0006F8 00                   16586 	.db 0x00
                                  16587 	.area CSEG    (CODE)
                                  16588 	.area CONST   (CODE)
      0006F9                      16589 ___str_42:
      0006F9 20 49 6E 70 75 74 20 16590 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      000706 00                   16591 	.db 0x00
                                  16592 	.area CSEG    (CODE)
                                  16593 	.area CONST   (CODE)
      000707                      16594 ___str_43:
      000707 20 4D 69 73 6D 61 74 16595 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      000716 0A                   16596 	.db 0x0a
      000717 20 54 72 79 20 41 67 16597 	.ascii " Try Again"
             61 69 6E
      000721 00                   16598 	.db 0x00
                                  16599 	.area CSEG    (CODE)
                                  16600 	.area CONST   (CODE)
      000722                      16601 ___str_44:
      000722 20 4D 61 74 63 68 20 16602 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      000732 0A                   16603 	.db 0x0a
      000733 20 20 20 20 20 20 20 16604 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      000743 00                   16605 	.db 0x00
                                  16606 	.area CSEG    (CODE)
                                  16607 	.area CONST   (CODE)
      000744                      16608 ___str_45:
      000744 20 41 64 64 72 65 73 16609 	.ascii " Address:"
             73 3A
      00074D 00                   16610 	.db 0x00
                                  16611 	.area CSEG    (CODE)
                                  16612 	.area CONST   (CODE)
      00074E                      16613 ___str_46:
      00074E 20 30 78             16614 	.ascii " 0x"
      000751 00                   16615 	.db 0x00
                                  16616 	.area CSEG    (CODE)
                                  16617 	.area CONST   (CODE)
      000752                      16618 ___str_47:
      000752 20 48 65 78 20 44 61 16619 	.ascii " Hex Data:"
             74 61 3A
      00075C 00                   16620 	.db 0x00
                                  16621 	.area CSEG    (CODE)
                                  16622 	.area CONST   (CODE)
      00075D                      16623 ___str_48:
      00075D 20 41 53 43 49 49 20 16624 	.ascii " ASCII Data:"
             44 61 74 61 3A
      000769 00                   16625 	.db 0x00
                                  16626 	.area CSEG    (CODE)
                                  16627 	.area CONST   (CODE)
      00076A                      16628 ___str_49:
      00076A 20 44 61 74 61 20 54 16629 	.ascii " Data Type:"
             79 70 65 3A
      000775 00                   16630 	.db 0x00
                                  16631 	.area CSEG    (CODE)
                                  16632 	.area CONST   (CODE)
      000776                      16633 ___str_50:
      000776 20 42 59 54 45       16634 	.ascii " BYTE"
      00077B 00                   16635 	.db 0x00
                                  16636 	.area CSEG    (CODE)
                                  16637 	.area CONST   (CODE)
      00077C                      16638 ___str_51:
      00077C 20 57 4F 52 44       16639 	.ascii " WORD"
      000781 00                   16640 	.db 0x00
                                  16641 	.area CSEG    (CODE)
                                  16642 	.area CONST   (CODE)
      000782                      16643 ___str_52:
      000782 20 44 57 4F 52 44    16644 	.ascii " DWORD"
      000788 00                   16645 	.db 0x00
                                  16646 	.area CSEG    (CODE)
                                  16647 	.area CONST   (CODE)
      000789                      16648 ___str_53:
      000789 20 3C 30 3E 20 45 78 16649 	.ascii " <0> Exit"
             69 74
      000792 0A                   16650 	.db 0x0a
      000793 00                   16651 	.db 0x00
                                  16652 	.area CSEG    (CODE)
                                  16653 	.area CONST   (CODE)
      000794                      16654 ___str_54:
      000794 3C 30 3E 20 45 78 69 16655 	.ascii "<0> Exit"
             74
      00079C 0A                   16656 	.db 0x0a
      00079D 00                   16657 	.db 0x00
                                  16658 	.area CSEG    (CODE)
                                  16659 	.area CONST   (CODE)
      00079E                      16660 ___str_55:
      00079E 5B 4D 4F 56 45 5D    16661 	.ascii "[MOVE]"
      0007A4 0A                   16662 	.db 0x0a
      0007A5 00                   16663 	.db 0x00
                                  16664 	.area CSEG    (CODE)
                                  16665 	.area CONST   (CODE)
      0007A6                      16666 ___str_56:
      0007A6 20 53 6F 75 72 63 65 16667 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      0007B6 00                   16668 	.db 0x00
                                  16669 	.area CSEG    (CODE)
                                  16670 	.area CONST   (CODE)
      0007B7                      16671 ___str_57:
      0007B7 20 44 65 73 74 69 6E 16672 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      0007C4 00                   16673 	.db 0x00
                                  16674 	.area CSEG    (CODE)
                                  16675 	.area CONST   (CODE)
      0007C5                      16676 ___str_58:
      0007C5 20 4D 6F 76 65 20 43 16677 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      0007D3 0A                   16678 	.db 0x0a
      0007D4 00                   16679 	.db 0x00
                                  16680 	.area CSEG    (CODE)
                                  16681 	.area CONST   (CODE)
      0007D5                      16682 ___str_59:
      0007D5 5B 45 44 49 54 5D    16683 	.ascii "[EDIT]"
      0007DB 0A                   16684 	.db 0x0a
      0007DC 00                   16685 	.db 0x00
                                  16686 	.area CSEG    (CODE)
                                  16687 	.area CONST   (CODE)
      0007DD                      16688 ___str_60:
      0007DD 20 45 64 69 74 20 41 16689 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      0007EB 00                   16690 	.db 0x00
                                  16691 	.area CSEG    (CODE)
                                  16692 	.area CONST   (CODE)
      0007EC                      16693 ___str_61:
      0007EC 20 4C 6F 63 61 74 69 16694 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      0007FF 0A                   16695 	.db 0x0a
      000800 00                   16696 	.db 0x00
                                  16697 	.area CSEG    (CODE)
                                  16698 	.area CONST   (CODE)
      000801                      16699 ___str_62:
      000801 20 5F 5F             16700 	.ascii " __"
      000804 00                   16701 	.db 0x00
                                  16702 	.area CSEG    (CODE)
                                  16703 	.area CONST   (CODE)
      000805                      16704 ___str_63:
      000805 20 45 6E 74 65 72 20 16705 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000816 0A                   16706 	.db 0x0a
      000817 00                   16707 	.db 0x00
                                  16708 	.area CSEG    (CODE)
                                  16709 	.area CONST   (CODE)
      000818                      16710 ___str_64:
      000818 20 43 68 6F 6F 73 65 16711 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      00082C 0A                   16712 	.db 0x0a
      00082D 00                   16713 	.db 0x00
                                  16714 	.area CSEG    (CODE)
                                  16715 	.area CONST   (CODE)
      00082E                      16716 ___str_65:
      00082E 20 20 3C 31 3E 20 4E 16717 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      000840 0A                   16718 	.db 0x0a
      000841 20 20 3C 32 3E 20 4E 16719 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      000852 0A                   16720 	.db 0x0a
      000853 00                   16721 	.db 0x00
                                  16722 	.area CSEG    (CODE)
                                  16723 	.area CONST   (CODE)
      000854                      16724 ___str_66:
      000854 20 20 3C 30 3E 20 45 16725 	.ascii "  <0> Exit"
             78 69 74
      00085E 00                   16726 	.db 0x00
                                  16727 	.area CSEG    (CODE)
                                  16728 	.area CONST   (CODE)
      00085F                      16729 ___str_67:
      00085F 0A                   16730 	.db 0x0a
      000860 20                   16731 	.ascii " "
      000861 00                   16732 	.db 0x00
                                  16733 	.area CSEG    (CODE)
                                  16734 	.area CONST   (CODE)
      000862                      16735 ___str_68:
      000862 20 45 6E 74 65 72 20 16736 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      000873 0A                   16737 	.db 0x0a
      000874 20                   16738 	.ascii " "
      000875 00                   16739 	.db 0x00
                                  16740 	.area CSEG    (CODE)
                                  16741 	.area CONST   (CODE)
      000876                      16742 ___str_69:
      000876 3C 31 3E 20 4E 65 78 16743 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      000886 0A                   16744 	.db 0x0a
      000887 00                   16745 	.db 0x00
                                  16746 	.area CSEG    (CODE)
                                  16747 	.area CONST   (CODE)
      000888                      16748 ___str_70:
      000888 0A                   16749 	.db 0x0a
      000889 0A                   16750 	.db 0x0a
      00088A 20 20 20 20 20 20 20 16751 	.ascii "               "
             20 20 20 20 20 20 20
             20
      000899 00                   16752 	.db 0x00
                                  16753 	.area CSEG    (CODE)
                                  16754 	.area CONST   (CODE)
      00089A                      16755 ___str_71:
      00089A 0A                   16756 	.db 0x0a
      00089B 20 5F 5F             16757 	.ascii " __"
      00089E 00                   16758 	.db 0x00
                                  16759 	.area CSEG    (CODE)
                                  16760 	.area CONST   (CODE)
      00089F                      16761 ___str_72:
      00089F 0A                   16762 	.db 0x0a
      0008A0 20 20 3C 31 3E 20 4E 16763 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0008B2 0A                   16764 	.db 0x0a
      0008B3 20 20 3C 32 3E 20 4E 16765 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0008C4 0A                   16766 	.db 0x0a
      0008C5 20 20 3C 30 3E 20 45 16767 	.ascii "  <0> Exit"
             78 69 74
      0008CF 00                   16768 	.db 0x00
                                  16769 	.area CSEG    (CODE)
                                  16770 	.area CONST   (CODE)
      0008D0                      16771 ___str_73:
      0008D0 20 43 68 6F 6F 73 65 16772 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      0008E4 0A                   16773 	.db 0x0a
      0008E5 20 20                16774 	.ascii "  "
      0008E7 00                   16775 	.db 0x00
                                  16776 	.area CSEG    (CODE)
                                  16777 	.area CONST   (CODE)
      0008E8                      16778 ___str_74:
      0008E8 3C 32 3E 20 4E 65 77 16779 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      0008F7 0A                   16780 	.db 0x0a
      0008F8 00                   16781 	.db 0x00
                                  16782 	.area CSEG    (CODE)
                                  16783 	.area CONST   (CODE)
      0008F9                      16784 ___str_75:
      0008F9 0A                   16785 	.db 0x0a
      0008FA 20 20 20 20 20 20 20 16786 	.ascii "               "
             20 20 20 20 20 20 20
             20
      000909 00                   16787 	.db 0x00
                                  16788 	.area CSEG    (CODE)
                                  16789 	.area CONST   (CODE)
      00090A                      16790 ___str_76:
      00090A 20 45 64 69 74 20 41 16791 	.ascii " Edit Address"
             64 64 72 65 73 73
      000917 00                   16792 	.db 0x00
                                  16793 	.area CSEG    (CODE)
                                  16794 	.area CONST   (CODE)
      000918                      16795 ___str_77:
      000918 0A                   16796 	.db 0x0a
      000919 00                   16797 	.db 0x00
                                  16798 	.area CSEG    (CODE)
                                  16799 	.area CONST   (CODE)
      00091A                      16800 ___str_78:
      00091A 3C 30 3E 20 45 78 69 16801 	.ascii "<0> Exit"
             74
      000922 00                   16802 	.db 0x00
                                  16803 	.area CSEG    (CODE)
                                  16804 	.area CONST   (CODE)
      000923                      16805 ___str_79:
      000923 0A                   16806 	.db 0x0a
      000924 0A                   16807 	.db 0x0a
      000925 0A                   16808 	.db 0x0a
      000926 0A                   16809 	.db 0x0a
      000927 20 49 6E 70 75 74 20 16810 	.ascii " Input Error "
             45 72 72 6F 72 20
      000934 00                   16811 	.db 0x00
                                  16812 	.area CSEG    (CODE)
                                  16813 	.area CONST   (CODE)
      000935                      16814 ___str_80:
      000935 5B 46 49 4E 44 5D    16815 	.ascii "[FIND]"
      00093B 0A                   16816 	.db 0x0a
      00093C 00                   16817 	.db 0x00
                                  16818 	.area CSEG    (CODE)
                                  16819 	.area CONST   (CODE)
      00093D                      16820 ___str_81:
      00093D 20 46 69 6E 64 20 56 16821 	.ascii " Find Value:"
             61 6C 75 65 3A
      000949 00                   16822 	.db 0x00
                                  16823 	.area CSEG    (CODE)
                                  16824 	.area CONST   (CODE)
      00094A                      16825 ___str_82:
      00094A 20 53 65 61 72 63 68 16826 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      00095A 00                   16827 	.db 0x00
                                  16828 	.area CSEG    (CODE)
                                  16829 	.area CONST   (CODE)
      00095B                      16830 ___str_83:
      00095B 20 49 6E 70 75 74 20 16831 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      00096D 0A                   16832 	.db 0x0a
      00096E 00                   16833 	.db 0x00
                                  16834 	.area CSEG    (CODE)
                                  16835 	.area CONST   (CODE)
      00096F                      16836 ___str_84:
      00096F 20 20 3C 30 31 3E 20 16837 	.ascii "  <01> BYTE"
             42 59 54 45
      00097A 0A                   16838 	.db 0x0a
      00097B 20 20 3C 30 32 3E 20 16839 	.ascii "  <02> WORD"
             57 4F 52 44
      000986 0A                   16840 	.db 0x0a
      000987 20 20 3C 30 34 3E 20 16841 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      000993 0A                   16842 	.db 0x0a
      000994 00                   16843 	.db 0x00
                                  16844 	.area CSEG    (CODE)
                                  16845 	.area CONST   (CODE)
      000995                      16846 ___str_85:
      000995 20 20 3C 46 46 3E 20 16847 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      0009A2 00                   16848 	.db 0x00
                                  16849 	.area CSEG    (CODE)
                                  16850 	.area CONST   (CODE)
      0009A3                      16851 ___str_86:
      0009A3 20 20 20 5F 5F       16852 	.ascii "   __"
      0009A8 00                   16853 	.db 0x00
                                  16854 	.area CSEG    (CODE)
                                  16855 	.area CONST   (CODE)
      0009A9                      16856 ___str_87:
      0009A9 20 20 20             16857 	.ascii "   "
      0009AC 00                   16858 	.db 0x00
                                  16859 	.area CSEG    (CODE)
                                  16860 	.area CONST   (CODE)
      0009AD                      16861 ___str_88:
      0009AD 0A                   16862 	.db 0x0a
      0009AE 20 20 20 20 20 20 20 16863 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0009BE 00                   16864 	.db 0x00
                                  16865 	.area CSEG    (CODE)
                                  16866 	.area CONST   (CODE)
      0009BF                      16867 ___str_89:
      0009BF 0A                   16868 	.db 0x0a
      0009C0 20 54 72 79 20 61 67 16869 	.ascii " Try again"
             61 69 6E
      0009CA 00                   16870 	.db 0x00
                                  16871 	.area CSEG    (CODE)
                                  16872 	.area CONST   (CODE)
      0009CB                      16873 ___str_90:
      0009CB 3C 30 31 3E 20 42 59 16874 	.ascii "<01> BYTE"
             54 45
      0009D4 0A                   16875 	.db 0x0a
      0009D5 00                   16876 	.db 0x00
                                  16877 	.area CSEG    (CODE)
                                  16878 	.area CONST   (CODE)
      0009D6                      16879 ___str_91:
      0009D6 20 20 3C 30 32 3E 20 16880 	.ascii "  <02> WORD"
             57 4F 52 44
      0009E1 0A                   16881 	.db 0x0a
      0009E2 00                   16882 	.db 0x00
                                  16883 	.area CSEG    (CODE)
                                  16884 	.area CONST   (CODE)
      0009E3                      16885 ___str_92:
      0009E3 20 20 3C 30 34 3E 20 16886 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      0009EF 0A                   16887 	.db 0x0a
      0009F0 00                   16888 	.db 0x00
                                  16889 	.area CSEG    (CODE)
                                  16890 	.area CONST   (CODE)
      0009F1                      16891 ___str_93:
      0009F1 0A                   16892 	.db 0x0a
      0009F2 20 53 65 61 72 63 68 16893 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      000A05 00                   16894 	.db 0x00
                                  16895 	.area CSEG    (CODE)
                                  16896 	.area CONST   (CODE)
      000A06                      16897 ___str_94:
      000A06 0A                   16898 	.db 0x0a
      000A07 20 42 59 54 45 20 5B 16899 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      000A15 00                   16900 	.db 0x00
                                  16901 	.area CSEG    (CODE)
                                  16902 	.area CONST   (CODE)
      000A16                      16903 ___str_95:
      000A16 20 20 3C 30 31 3E 20 16904 	.ascii "  <01> BYTE"
             42 59 54 45
      000A21 0A                   16905 	.db 0x0a
      000A22 20 20                16906 	.ascii "  "
      000A24 00                   16907 	.db 0x00
                                  16908 	.area CSEG    (CODE)
                                  16909 	.area CONST   (CODE)
      000A25                      16910 ___str_96:
      000A25 3C 30 32 3E 20 57 4F 16911 	.ascii "<02> WORD"
             52 44
      000A2E 0A                   16912 	.db 0x0a
      000A2F 00                   16913 	.db 0x00
                                  16914 	.area CSEG    (CODE)
                                  16915 	.area CONST   (CODE)
      000A30                      16916 ___str_97:
      000A30 0A                   16917 	.db 0x0a
      000A31 20 57 4F 52 44 20 5B 16918 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      000A40 00                   16919 	.db 0x00
                                  16920 	.area CSEG    (CODE)
                                  16921 	.area CONST   (CODE)
      000A41                      16922 ___str_98:
      000A41 20 20 3C 30 31 3E 20 16923 	.ascii "  <01> BYTE"
             42 59 54 45
      000A4C 0A                   16924 	.db 0x0a
      000A4D 20 20 3C 30 32 3E 20 16925 	.ascii "  <02> WORD"
             57 4F 52 44
      000A58 0A                   16926 	.db 0x0a
      000A59 20 20                16927 	.ascii "  "
      000A5B 00                   16928 	.db 0x00
                                  16929 	.area CSEG    (CODE)
                                  16930 	.area CONST   (CODE)
      000A5C                      16931 ___str_99:
      000A5C 3C 30 34 3E 20 44 57 16932 	.ascii "<04> DWORD"
             4F 52 44
      000A66 0A                   16933 	.db 0x0a
      000A67 00                   16934 	.db 0x00
                                  16935 	.area CSEG    (CODE)
                                  16936 	.area CONST   (CODE)
      000A68                      16937 ___str_100:
      000A68 0A                   16938 	.db 0x0a
      000A69 20 44 57 4F 52 44 20 16939 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      000A79 00                   16940 	.db 0x00
                                  16941 	.area CSEG    (CODE)
                                  16942 	.area CONST   (CODE)
      000A7A                      16943 ___str_101:
      000A7A 3C 30 34 3E 20 44 57 16944 	.ascii "<04> DWORD"
             4F 52 44
      000A84 0A                   16945 	.db 0x0a
      000A85 20 20                16946 	.ascii "  "
      000A87 00                   16947 	.db 0x00
                                  16948 	.area CSEG    (CODE)
                                  16949 	.area CONST   (CODE)
      000A88                      16950 ___str_102:
      000A88 3C 46 46 3E 20 28 53 16951 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      000A93 00                   16952 	.db 0x00
                                  16953 	.area CSEG    (CODE)
                                  16954 	.area CONST   (CODE)
      000A94                      16955 ___str_103:
      000A94 0A                   16956 	.db 0x0a
      000A95 20 5B 32 35 36 20 42 16957 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      000AA2 00                   16958 	.db 0x00
                                  16959 	.area CSEG    (CODE)
                                  16960 	.area CONST   (CODE)
      000AA3                      16961 ___str_104:
      000AA3 20 5B 4E 6F 6E 2D 49 16962 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      000AB5 0A                   16963 	.db 0x0a
      000AB6 00                   16964 	.db 0x00
                                  16965 	.area CSEG    (CODE)
                                  16966 	.area CONST   (CODE)
      000AB7                      16967 ___str_105:
      000AB7 20 53 65 61 72 63 68 16968 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000AC5 0A                   16969 	.db 0x0a
      000AC6 20                   16970 	.ascii " "
      000AC7 00                   16971 	.db 0x00
                                  16972 	.area CSEG    (CODE)
                                  16973 	.area CONST   (CODE)
      000AC8                      16974 ___str_106:
      000AC8 20 46 6F 75 6E 64 20 16975 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      000ADB 0A                   16976 	.db 0x0a
      000ADC 00                   16977 	.db 0x00
                                  16978 	.area CSEG    (CODE)
                                  16979 	.area CONST   (CODE)
      000ADD                      16980 ___str_107:
      000ADD 0A                   16981 	.db 0x0a
      000ADE 20 30 78             16982 	.ascii " 0x"
      000AE1 00                   16983 	.db 0x00
                                  16984 	.area CSEG    (CODE)
                                  16985 	.area CONST   (CODE)
      000AE2                      16986 ___str_108:
      000AE2 20 5B 49 6E 74 65 72 16987 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      000AF0 0A                   16988 	.db 0x0a
      000AF1 00                   16989 	.db 0x00
                                  16990 	.area CSEG    (CODE)
                                  16991 	.area CONST   (CODE)
      000AF2                      16992 ___str_109:
      000AF2 20 46 6F 75 6E 64 20 16993 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      000B05 0A                   16994 	.db 0x0a
      000B06 00                   16995 	.db 0x00
                                  16996 	.area CSEG    (CODE)
                                  16997 	.area CONST   (CODE)
      000B07                      16998 ___str_110:
      000B07 50 61 67 65 3A 20    16999 	.ascii "Page: "
      000B0D 00                   17000 	.db 0x00
                                  17001 	.area CSEG    (CODE)
                                  17002 	.area CONST   (CODE)
      000B0E                      17003 ___str_111:
      000B0E 20 3C 31 3E 20 4E 65 17004 	.ascii " <1> Next"
             78 74
      000B17 0A                   17005 	.db 0x0a
      000B18 20 3C 30 3E 20 45 78 17006 	.ascii " <0> Exit"
             69 74
      000B21 0A                   17007 	.db 0x0a
      000B22 20 20 20 20 20 20 20 17008 	.ascii "              "
             20 20 20 20 20 20 20
      000B30 00                   17009 	.db 0x00
                                  17010 	.area CSEG    (CODE)
                                  17011 	.area CONST   (CODE)
      000B31                      17012 ___str_112:
      000B31 3C 31 3E 20 4E 65 78 17013 	.ascii "<1> Next"
             74
      000B39 00                   17014 	.db 0x00
                                  17015 	.area CSEG    (CODE)
                                  17016 	.area CONST   (CODE)
      000B3A                      17017 ___str_113:
      000B3A 20 20 20 20 20 20 20 17018 	.ascii "          "
             20 20 20
      000B44 0A                   17019 	.db 0x0a
      000B45 20 3C 30 3E 20 45 78 17020 	.ascii " <0> Exit"
             69 74
      000B4E 0A                   17021 	.db 0x0a
      000B4F 20 20 20 20 20 20 20 17022 	.ascii "              "
             20 20 20 20 20 20 20
      000B5D 00                   17023 	.db 0x00
                                  17024 	.area CSEG    (CODE)
                                  17025 	.area CONST   (CODE)
      000B5E                      17026 ___str_114:
      000B5E 20 20 20 20 20 20 20 17027 	.ascii "          "
             20 20 20
      000B68 0A                   17028 	.db 0x0a
      000B69 20 3C 30 3E 20 45 78 17029 	.ascii " <0> Exit"
             69 74
      000B72 0A                   17030 	.db 0x0a
      000B73 20 3C 32 3E 20 50 72 17031 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000B80 00                   17032 	.db 0x00
                                  17033 	.area CSEG    (CODE)
                                  17034 	.area CONST   (CODE)
      000B81                      17035 ___str_115:
      000B81 0A                   17036 	.db 0x0a
      000B82 0A                   17037 	.db 0x0a
      000B83 20                   17038 	.ascii " "
      000B84 00                   17039 	.db 0x00
                                  17040 	.area CSEG    (CODE)
                                  17041 	.area CONST   (CODE)
      000B85                      17042 ___str_116:
      000B85 3C 32 3E 20 50 72 65 17043 	.ascii "<2> Previous"
             76 69 6F 75 73
      000B91 00                   17044 	.db 0x00
                                  17045 	.area CSEG    (CODE)
                                  17046 	.area CONST   (CODE)
      000B92                      17047 ___str_117:
      000B92 20 3C 31 3E 20 4E 65 17048 	.ascii " <1> Next"
             78 74
      000B9B 0A                   17049 	.db 0x0a
      000B9C 20 3C 30 3E 20 45 78 17050 	.ascii " <0> Exit"
             69 74
      000BA5 0A                   17051 	.db 0x0a
      000BA6 20 3C 32 3E 20 50 72 17052 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BB3 00                   17053 	.db 0x00
                                  17054 	.area CSEG    (CODE)
                                  17055 	.area CONST   (CODE)
      000BB4                      17056 ___str_118:
      000BB4 20 3C 31 3E 20 4E 65 17057 	.ascii " <1> Next"
             78 74
      000BBD 0A                   17058 	.db 0x0a
      000BBE 20                   17059 	.ascii " "
      000BBF 00                   17060 	.db 0x00
                                  17061 	.area CSEG    (CODE)
                                  17062 	.area CONST   (CODE)
      000BC0                      17063 ___str_119:
      000BC0 0A                   17064 	.db 0x0a
      000BC1 20 3C 32 3E 20 50 72 17065 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      000BCE 00                   17066 	.db 0x00
                                  17067 	.area CSEG    (CODE)
                                  17068 	.area CONST   (CODE)
      000BCF                      17069 ___str_120:
      000BCF 20 56 61 6C 75 65 20 17070 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      000BDF 0A                   17071 	.db 0x0a
      000BE0 20 57 69 74 68 69 6E 17072 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      000BED 0A                   17073 	.db 0x0a
      000BEE 20                   17074 	.ascii " "
      000BEF 00                   17075 	.db 0x00
                                  17076 	.area CSEG    (CODE)
                                  17077 	.area CONST   (CODE)
      000BF0                      17078 ___str_121:
      000BF0 0A                   17079 	.db 0x0a
      000BF1 20 3C 30 3E 20 45 78 17080 	.ascii " <0> Exit"
             69 74
      000BFA 00                   17081 	.db 0x00
                                  17082 	.area CSEG    (CODE)
                                  17083 	.area CONST   (CODE)
      000BFB                      17084 ___str_122:
      000BFB 0A                   17085 	.db 0x0a
      000BFC 0A                   17086 	.db 0x0a
      000BFD 0A                   17087 	.db 0x0a
      000BFE 20                   17088 	.ascii " "
      000BFF 00                   17089 	.db 0x00
                                  17090 	.area CSEG    (CODE)
                                  17091 	.area CONST   (CODE)
      000C00                      17092 ___str_123:
      000C00 5B 43 4F 55 4E 54 5D 17093 	.ascii "[COUNT]"
      000C07 0A                   17094 	.db 0x0a
      000C08 00                   17095 	.db 0x00
                                  17096 	.area CSEG    (CODE)
                                  17097 	.area CONST   (CODE)
      000C09                      17098 ___str_124:
      000C09 20 53 65 61 72 63 68 17099 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      000C17 00                   17100 	.db 0x00
                                  17101 	.area CSEG    (CODE)
                                  17102 	.area CONST   (CODE)
      000C18                      17103 ___str_125:
      000C18 20 46 6F 75 6E 64 20 17104 	.ascii " Found in"
             69 6E
      000C21 0A                   17105 	.db 0x0a
      000C22 20                   17106 	.ascii " "
      000C23 00                   17107 	.db 0x00
                                  17108 	.area CSEG    (CODE)
                                  17109 	.area CONST   (CODE)
      000C24                      17110 ___str_126:
      000C24 20 42 79 74 65 73 20 17111 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      000C30 0A                   17112 	.db 0x0a
      000C31 20                   17113 	.ascii " "
      000C32 00                   17114 	.db 0x00
                                  17115 	.area CSEG    (CODE)
                                  17116 	.area CONST   (CODE)
      000C33                      17117 ___str_127:
      000C33 43 6F 75 6E 74 3A 20 17118 	.ascii "Count: "
      000C3A 00                   17119 	.db 0x00
                                  17120 	.area CSEG    (CODE)
                                  17121 	.area CONST   (CODE)
      000C3B                      17122 ___str_128:
      000C3B 5B 43 48 45 43 4B 5D 17123 	.ascii "[CHECK]"
      000C42 0A                   17124 	.db 0x0a
      000C43 00                   17125 	.db 0x00
                                  17126 	.area CSEG    (CODE)
                                  17127 	.area CONST   (CODE)
      000C44                      17128 ___str_129:
      000C44 20 45 6E 74 65 72 20 17129 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      000C51 0A                   17130 	.db 0x0a
      000C52 00                   17131 	.db 0x00
                                  17132 	.area CSEG    (CODE)
                                  17133 	.area CONST   (CODE)
      000C53                      17134 ___str_130:
      000C53 0A                   17135 	.db 0x0a
      000C54 0A                   17136 	.db 0x0a
      000C55 20 57 72 69 74 69 6E 17137 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      000C65 0A                   17138 	.db 0x0a
      000C66 20 61 6C 6C 20 6D 65 17139 	.ascii " all memory"
             6D 6F 72 79
      000C71 0A                   17140 	.db 0x0a
      000C72 20 6C 6F 63 61 74 69 17141 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      000C7F 00                   17142 	.db 0x00
                                  17143 	.area CSEG    (CODE)
                                  17144 	.area CONST   (CODE)
      000C80                      17145 ___str_131:
      000C80 0A                   17146 	.db 0x0a
      000C81 20 56 65 72 69 66 79 17147 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      000C94 00                   17148 	.db 0x00
                                  17149 	.area CSEG    (CODE)
                                  17150 	.area CONST   (CODE)
      000C95                      17151 ___str_132:
      000C95 0A                   17152 	.db 0x0a
      000C96 20 43 6F 6D 70 6C 65 17153 	.ascii " Complete."
             74 65 2E
      000CA0 00                   17154 	.db 0x00
                                  17155 	.area CSEG    (CODE)
                                  17156 	.area CONST   (CODE)
      000CA1                      17157 ___str_133:
      000CA1 0A                   17158 	.db 0x0a
      000CA2 0A                   17159 	.db 0x0a
      000CA3 20 54 6F 67 67 6C 69 17160 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      000CB4 0A                   17161 	.db 0x0a
      000CB5 20 65 61 63 68 20 6E 17162 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      000CC4 00                   17163 	.db 0x00
                                  17164 	.area CSEG    (CODE)
                                  17165 	.area CONST   (CODE)
      000CC5                      17166 ___str_134:
      000CC5 0A                   17167 	.db 0x0a
      000CC6 20 57 72 69 74 69 6E 17168 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      000CDA 00                   17169 	.db 0x00
                                  17170 	.area CSEG    (CODE)
                                  17171 	.area CONST   (CODE)
      000CDB                      17172 ___str_135:
      000CDB 0A                   17173 	.db 0x0a
      000CDC 0A                   17174 	.db 0x0a
      000CDD 20 43 68 65 63 6B 20 17175 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      000CED 00                   17176 	.db 0x00
                                  17177 	.area CSEG    (CODE)
                                  17178 	.area CONST   (CODE)
      000CEE                      17179 ___str_136:
      000CEE 5B 55 41 52 54 5D    17180 	.ascii "[UART]"
      000CF4 0A                   17181 	.db 0x0a
      000CF5 00                   17182 	.db 0x00
                                  17183 	.area CSEG    (CODE)
                                  17184 	.area CONST   (CODE)
      000CF6                      17185 ___str_137:
      000CF6 20 3C 31 3E 20       17186 	.ascii " <1> "
      000CFB 00                   17187 	.db 0x00
                                  17188 	.area CSEG    (CODE)
                                  17189 	.area CONST   (CODE)
      000CFC                      17190 ___str_138:
      000CFC 31 32 30 30          17191 	.ascii "1200"
      000D00 00                   17192 	.db 0x00
                                  17193 	.area CSEG    (CODE)
                                  17194 	.area CONST   (CODE)
      000D01                      17195 ___str_139:
      000D01 32 34 30 30          17196 	.ascii "2400"
      000D05 00                   17197 	.db 0x00
                                  17198 	.area CSEG    (CODE)
                                  17199 	.area CONST   (CODE)
      000D06                      17200 ___str_140:
      000D06 34 38 30 30          17201 	.ascii "4800"
      000D0A 00                   17202 	.db 0x00
                                  17203 	.area CSEG    (CODE)
                                  17204 	.area CONST   (CODE)
      000D0B                      17205 ___str_141:
      000D0B 39 36 30 30          17206 	.ascii "9600"
      000D0F 00                   17207 	.db 0x00
                                  17208 	.area CSEG    (CODE)
                                  17209 	.area CONST   (CODE)
      000D10                      17210 ___str_142:
      000D10 31 39 32 30 30       17211 	.ascii "19200"
      000D15 00                   17212 	.db 0x00
                                  17213 	.area CSEG    (CODE)
                                  17214 	.area CONST   (CODE)
      000D16                      17215 ___str_143:
      000D16 20 62 61 75 64       17216 	.ascii " baud"
      000D1B 0A                   17217 	.db 0x0a
      000D1C 00                   17218 	.db 0x00
                                  17219 	.area CSEG    (CODE)
                                  17220 	.area CONST   (CODE)
      000D1D                      17221 ___str_144:
      000D1D 20 3C 32 3E 20       17222 	.ascii " <2> "
      000D22 00                   17223 	.db 0x00
                                  17224 	.area CSEG    (CODE)
                                  17225 	.area CONST   (CODE)
      000D23                      17226 ___str_145:
      000D23 38                   17227 	.ascii "8"
      000D24 00                   17228 	.db 0x00
                                  17229 	.area CSEG    (CODE)
                                  17230 	.area CONST   (CODE)
      000D25                      17231 ___str_146:
      000D25 39                   17232 	.ascii "9"
      000D26 00                   17233 	.db 0x00
                                  17234 	.area CSEG    (CODE)
                                  17235 	.area CONST   (CODE)
      000D27                      17236 ___str_147:
      000D27 2D 62 69 74 20 4D 6F 17237 	.ascii "-bit Mode"
             64 65
      000D30 0A                   17238 	.db 0x0a
      000D31 00                   17239 	.db 0x00
                                  17240 	.area CSEG    (CODE)
                                  17241 	.area CONST   (CODE)
      000D32                      17242 ___str_148:
      000D32 20 3C 33 3E 20       17243 	.ascii " <3> "
      000D37 00                   17244 	.db 0x00
                                  17245 	.area CSEG    (CODE)
                                  17246 	.area CONST   (CODE)
      000D38                      17247 ___str_149:
      000D38 20 50 61 72 69 74 79 17248 	.ascii " Parity"
      000D3F 00                   17249 	.db 0x00
                                  17250 	.area CSEG    (CODE)
                                  17251 	.area CONST   (CODE)
      000D40                      17252 ___str_150:
      000D40 20 3C 34 3E 20 44 69 17253 	.ascii " <4> Disable UART"
             73 61 62 6C 65 20 55
             41 52 54
      000D51 0A                   17254 	.db 0x0a
      000D52 00                   17255 	.db 0x00
                                  17256 	.area CSEG    (CODE)
                                  17257 	.area CONST   (CODE)
      000D53                      17258 ___str_151:
      000D53 20 20 20 20 20 28 45 17259 	.ascii "     (Enabled)"
             6E 61 62 6C 65 64 29
      000D61 0A                   17260 	.db 0x0a
      000D62 00                   17261 	.db 0x00
                                  17262 	.area CSEG    (CODE)
                                  17263 	.area CONST   (CODE)
      000D63                      17264 ___str_152:
      000D63 20 3C 31 3E 20 53 65 17265 	.ascii " <1> Set Data Rate"
             74 20 44 61 74 61 20
             52 61 74 65
      000D75 0A                   17266 	.db 0x0a
      000D76 00                   17267 	.db 0x00
                                  17268 	.area CSEG    (CODE)
                                  17269 	.area CONST   (CODE)
      000D77                      17270 ___str_153:
      000D77 20 3C 32 3E 20 4E 75 17271 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      000D8A 0A                   17272 	.db 0x0a
      000D8B 20 20 20 20 20 28 38 17273 	.ascii "     (8 or 9 bits)"
             20 6F 72 20 39 20 62
             69 74 73 29
      000D9D 0A                   17274 	.db 0x0a
      000D9E 00                   17275 	.db 0x00
                                  17276 	.area CSEG    (CODE)
                                  17277 	.area CONST   (CODE)
      000D9F                      17278 ___str_154:
      000D9F 20 3C 33 3E 20 50 61 17279 	.ascii " <3> Parity (Even)"
             72 69 74 79 20 28 45
             76 65 6E 29
      000DB1 0A                   17280 	.db 0x0a
      000DB2 20 20 20 20 20 28 4F 17281 	.ascii "     (Odd/None)"
             64 64 2F 4E 6F 6E 65
             29
      000DC1 0A                   17282 	.db 0x0a
      000DC2 00                   17283 	.db 0x00
                                  17284 	.area CSEG    (CODE)
                                  17285 	.area CONST   (CODE)
      000DC3                      17286 ___str_155:
      000DC3 20 3C 34 3E 20 45 6E 17287 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      000DD3 0A                   17288 	.db 0x0a
      000DD4 00                   17289 	.db 0x00
                                  17290 	.area CSEG    (CODE)
                                  17291 	.area CONST   (CODE)
      000DD5                      17292 ___str_156:
      000DD5 20 20 20 20 20 28 44 17293 	.ascii "     (Disabled)"
             69 73 61 62 6C 65 64
             29
      000DE4 0A                   17294 	.db 0x0a
      000DE5 00                   17295 	.db 0x00
                                  17296 	.area CSEG    (CODE)
                                  17297 	.area CONST   (CODE)
      000DE6                      17298 ___str_157:
      000DE6 20 3C 30 3E 20 45 78 17299 	.ascii " <0> Exit "
             69 74 20
      000DF0 0A                   17300 	.db 0x0a
      000DF1 00                   17301 	.db 0x00
                                  17302 	.area CSEG    (CODE)
                                  17303 	.area CONST   (CODE)
      000DF2                      17304 ___str_158:
      000DF2 3C 30 3E 20          17305 	.ascii "<0> "
      000DF6 00                   17306 	.db 0x00
                                  17307 	.area CSEG    (CODE)
                                  17308 	.area CONST   (CODE)
      000DF7                      17309 ___str_159:
      000DF7 45 78 69 74          17310 	.ascii "Exit"
      000DFB 0A                   17311 	.db 0x0a
      000DFC 00                   17312 	.db 0x00
                                  17313 	.area CSEG    (CODE)
                                  17314 	.area CONST   (CODE)
      000DFD                      17315 ___str_160:
      000DFD 3C 34 3E 20          17316 	.ascii "<4> "
      000E01 00                   17317 	.db 0x00
                                  17318 	.area CSEG    (CODE)
                                  17319 	.area CONST   (CODE)
      000E02                      17320 ___str_161:
      000E02 44 69 73 61 62 6C 65 17321 	.ascii "Disable UART"
             20 55 41 52 54
      000E0E 0A                   17322 	.db 0x0a
      000E0F 00                   17323 	.db 0x00
                                  17324 	.area CSEG    (CODE)
                                  17325 	.area CONST   (CODE)
      000E10                      17326 ___str_162:
      000E10 20 20 20 20 20       17327 	.ascii "     "
      000E15 00                   17328 	.db 0x00
                                  17329 	.area CSEG    (CODE)
                                  17330 	.area CONST   (CODE)
      000E16                      17331 ___str_163:
      000E16 28 45 6E 61 62 6C 65 17332 	.ascii "(Enabled)"
             64 29
      000E1F 00                   17333 	.db 0x00
                                  17334 	.area CSEG    (CODE)
                                  17335 	.area CONST   (CODE)
      000E20                      17336 ___str_164:
      000E20 45 6E 61 62 6C 65 20 17337 	.ascii "Enable UART"
             55 41 52 54
      000E2B 0A                   17338 	.db 0x0a
      000E2C 00                   17339 	.db 0x00
                                  17340 	.area CSEG    (CODE)
                                  17341 	.area CONST   (CODE)
      000E2D                      17342 ___str_165:
      000E2D 28 44 69 73 61 62 6C 17343 	.ascii "(Disabled)"
             65 64 29
      000E37 00                   17344 	.db 0x00
                                  17345 	.area CSEG    (CODE)
                                  17346 	.area CONST   (CODE)
      000E38                      17347 ___str_166:
      000E38 3C 31 3E 20          17348 	.ascii "<1> "
      000E3C 00                   17349 	.db 0x00
                                  17350 	.area CSEG    (CODE)
                                  17351 	.area CONST   (CODE)
      000E3D                      17352 ___str_167:
      000E3D 53 65 74 20 44 61 74 17353 	.ascii "Set Data Rate"
             61 20 52 61 74 65
      000E4A 0A                   17354 	.db 0x0a
      000E4B 00                   17355 	.db 0x00
                                  17356 	.area CSEG    (CODE)
                                  17357 	.area CONST   (CODE)
      000E4C                      17358 ___str_168:
      000E4C 0A                   17359 	.db 0x0a
      000E4D 0A                   17360 	.db 0x0a
      000E4E 0A                   17361 	.db 0x0a
      000E4F 0A                   17362 	.db 0x0a
      000E50 20 50 6C 65 61 73 65 17363 	.ascii " Please disable"
             20 64 69 73 61 62 6C
             65
      000E5F 0A                   17364 	.db 0x0a
      000E60 20 55 41 52 54 20 66 17365 	.ascii " UART first."
             69 72 73 74 2E
      000E6C 0A                   17366 	.db 0x0a
      000E6D 00                   17367 	.db 0x00
                                  17368 	.area CSEG    (CODE)
                                  17369 	.area CONST   (CODE)
      000E6E                      17370 ___str_169:
      000E6E 3C 32 3E 20          17371 	.ascii "<2> "
      000E72 00                   17372 	.db 0x00
                                  17373 	.area CSEG    (CODE)
                                  17374 	.area CONST   (CODE)
      000E73                      17375 ___str_170:
      000E73 4E 75 6D 62 65 72 20 17376 	.ascii "Number of Bits"
             6F 66 20 42 69 74 73
      000E81 0A                   17377 	.db 0x0a
      000E82 00                   17378 	.db 0x00
                                  17379 	.area CSEG    (CODE)
                                  17380 	.area CONST   (CODE)
      000E83                      17381 ___str_171:
      000E83 28 38 20 6F 72 20 39 17382 	.ascii "(8 or 9 bits)"
             20 62 69 74 73 29
      000E90 0A                   17383 	.db 0x0a
      000E91 00                   17384 	.db 0x00
                                  17385 	.area CSEG    (CODE)
                                  17386 	.area CONST   (CODE)
      000E92                      17387 ___str_172:
      000E92 3C 33 3E 20          17388 	.ascii "<3> "
      000E96 00                   17389 	.db 0x00
                                  17390 	.area CSEG    (CODE)
                                  17391 	.area CONST   (CODE)
      000E97                      17392 ___str_173:
      000E97 50 61 72 69 74 79 20 17393 	.ascii "Parity "
      000E9E 00                   17394 	.db 0x00
                                  17395 	.area CSEG    (CODE)
                                  17396 	.area CONST   (CODE)
      000E9F                      17397 ___str_174:
      000E9F 28 45 76 65 6E 2F    17398 	.ascii "(Even/"
      000EA5 0A                   17399 	.db 0x0a
      000EA6 00                   17400 	.db 0x00
                                  17401 	.area CSEG    (CODE)
                                  17402 	.area CONST   (CODE)
      000EA7                      17403 ___str_175:
      000EA7 28 4F 64 64 2F 4E 6F 17404 	.ascii "(Odd/None)"
             6E 65 29
      000EB1 0A                   17405 	.db 0x0a
      000EB2 00                   17406 	.db 0x00
                                  17407 	.area CSEG    (CODE)
                                  17408 	.area CONST   (CODE)
      000EB3                      17409 ___str_176:
      000EB3 0A                   17410 	.db 0x0a
      000EB4 0A                   17411 	.db 0x0a
      000EB5 0A                   17412 	.db 0x0a
      000EB6 0A                   17413 	.db 0x0a
      000EB7 20 49 6E 63 6F 72 72 17414 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      000EC7 0A                   17415 	.db 0x0a
      000EC8 20 20 54 72 79 20 61 17416 	.ascii "  Try again."
             67 61 69 6E 2E
      000ED4 0A                   17417 	.db 0x0a
      000ED5 00                   17418 	.db 0x00
                                  17419 	.area CSEG    (CODE)
                                  17420 	.area CONST   (CODE)
      000ED6                      17421 ___str_177:
      000ED6 0A                   17422 	.db 0x0a
      000ED7 20 44 69 73 61 62 6C 17423 	.ascii " Disabling UART..."
             69 6E 67 20 55 41 52
             54 2E 2E 2E
      000EE9 0A                   17424 	.db 0x0a
      000EEA 00                   17425 	.db 0x00
                                  17426 	.area CSEG    (CODE)
                                  17427 	.area CONST   (CODE)
      000EEB                      17428 ___str_178:
      000EEB 0A                   17429 	.db 0x0a
      000EEC 20 53 65 74 74 69 6E 17430 	.ascii " Settings Verified:"
             67 73 20 56 65 72 69
             66 69 65 64 3A
      000EFF 0A                   17431 	.db 0x0a
      000F00 00                   17432 	.db 0x00
                                  17433 	.area CSEG    (CODE)
                                  17434 	.area CONST   (CODE)
      000F01                      17435 ___str_179:
      000F01 20 45 6E 61 62 6C 69 17436 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      000F12 00                   17437 	.db 0x00
                                  17438 	.area CSEG    (CODE)
                                  17439 	.area CONST   (CODE)
      000F13                      17440 ___str_180:
      000F13 20 42 41 55 44 20 45 17441 	.ascii " BAUD ERROR"
             52 52 4F 52
      000F1E 0A                   17442 	.db 0x0a
      000F1F 00                   17443 	.db 0x00
                                  17444 	.area CSEG    (CODE)
                                  17445 	.area CONST   (CODE)
      000F20                      17446 ___str_181:
      000F20 20 45 6E 74 65 72 69 17447 	.ascii " Entering Baud..."
             6E 67 20 42 61 75 64
             2E 2E 2E
      000F31 0A                   17448 	.db 0x0a
      000F32 00                   17449 	.db 0x00
                                  17450 	.area CSEG    (CODE)
                                  17451 	.area CONST   (CODE)
      000F33                      17452 ___str_182:
      000F33 20 42 49 54 20 45 52 17453 	.ascii " BIT ERROR"
             52 4F 52
      000F3D 0A                   17454 	.db 0x0a
      000F3E 00                   17455 	.db 0x00
                                  17456 	.area CSEG    (CODE)
                                  17457 	.area CONST   (CODE)
      000F3F                      17458 ___str_183:
      000F3F 20 45 6E 74 65 72 69 17459 	.ascii " Entering Bits..."
             6E 67 20 42 69 74 73
             2E 2E 2E
      000F50 0A                   17460 	.db 0x0a
      000F51 00                   17461 	.db 0x00
                                  17462 	.area CSEG    (CODE)
                                  17463 	.area CONST   (CODE)
      000F52                      17464 ___str_184:
      000F52 20 50 41 52 49 54 59 17465 	.ascii " PARITY ERROR"
             20 45 52 52 4F 52
      000F5F 0A                   17466 	.db 0x0a
      000F60 00                   17467 	.db 0x00
                                  17468 	.area CSEG    (CODE)
                                  17469 	.area CONST   (CODE)
      000F61                      17470 ___str_185:
      000F61 20 45 6E 74 65 72 69 17471 	.ascii " Entering Parity..."
             6E 67 20 50 61 72 69
             74 79 2E 2E 2E
      000F74 0A                   17472 	.db 0x0a
      000F75 00                   17473 	.db 0x00
                                  17474 	.area CSEG    (CODE)
                                  17475 	.area CONST   (CODE)
      000F76                      17476 ___str_186:
      000F76 20 3C 31 3E 20 31 32 17477 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      000F84 0A                   17478 	.db 0x0a
      000F85 00                   17479 	.db 0x00
                                  17480 	.area CSEG    (CODE)
                                  17481 	.area CONST   (CODE)
      000F86                      17482 ___str_187:
      000F86 20 3C 32 3E 20 32 34 17483 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      000F94 0A                   17484 	.db 0x0a
      000F95 00                   17485 	.db 0x00
                                  17486 	.area CSEG    (CODE)
                                  17487 	.area CONST   (CODE)
      000F96                      17488 ___str_188:
      000F96 20 3C 33 3E 20 34 38 17489 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      000FA4 0A                   17490 	.db 0x0a
      000FA5 00                   17491 	.db 0x00
                                  17492 	.area CSEG    (CODE)
                                  17493 	.area CONST   (CODE)
      000FA6                      17494 ___str_189:
      000FA6 20 3C 34 3E 20 39 36 17495 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      000FB4 0A                   17496 	.db 0x0a
      000FB5 00                   17497 	.db 0x00
                                  17498 	.area CSEG    (CODE)
                                  17499 	.area CONST   (CODE)
      000FB6                      17500 ___str_190:
      000FB6 20 3C 35 3E 20 31 39 17501 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      000FC5 0A                   17502 	.db 0x0a
      000FC6 00                   17503 	.db 0x00
                                  17504 	.area CSEG    (CODE)
                                  17505 	.area CONST   (CODE)
      000FC7                      17506 ___str_191:
      000FC7 31 32 30 30 20 42 61 17507 	.ascii "1200 Baud"
             75 64
      000FD0 0A                   17508 	.db 0x0a
      000FD1 00                   17509 	.db 0x00
                                  17510 	.area CSEG    (CODE)
                                  17511 	.area CONST   (CODE)
      000FD2                      17512 ___str_192:
      000FD2 32 34 30 30 20 42 61 17513 	.ascii "2400 Baud"
             75 64
      000FDB 0A                   17514 	.db 0x0a
      000FDC 00                   17515 	.db 0x00
                                  17516 	.area CSEG    (CODE)
                                  17517 	.area CONST   (CODE)
      000FDD                      17518 ___str_193:
      000FDD 34 38 30 30 20 42 61 17519 	.ascii "4800 Baud"
             75 64
      000FE6 0A                   17520 	.db 0x0a
      000FE7 00                   17521 	.db 0x00
                                  17522 	.area CSEG    (CODE)
                                  17523 	.area CONST   (CODE)
      000FE8                      17524 ___str_194:
      000FE8 39 36 30 30 20 42 61 17525 	.ascii "9600 Baud"
             75 64
      000FF1 0A                   17526 	.db 0x0a
      000FF2 00                   17527 	.db 0x00
                                  17528 	.area CSEG    (CODE)
                                  17529 	.area CONST   (CODE)
      000FF3                      17530 ___str_195:
      000FF3 3C 35 3E 20          17531 	.ascii "<5> "
      000FF7 00                   17532 	.db 0x00
                                  17533 	.area CSEG    (CODE)
                                  17534 	.area CONST   (CODE)
      000FF8                      17535 ___str_196:
      000FF8 31 39 32 30 30 20 42 17536 	.ascii "19200 Baud"
             61 75 64
      001002 0A                   17537 	.db 0x0a
      001003 00                   17538 	.db 0x00
                                  17539 	.area CSEG    (CODE)
                                  17540 	.area CONST   (CODE)
      001004                      17541 ___str_197:
      001004 20 49 4E 50 55 54 20 17542 	.ascii " INPUT ERROR"
             45 52 52 4F 52
      001010 00                   17543 	.db 0x00
                                  17544 	.area CSEG    (CODE)
                                  17545 	.area CONST   (CODE)
      001011                      17546 ___str_198:
      001011 20 3C 31 3E 20 38 2D 17547 	.ascii " <1> 8-bit Mode"
             62 69 74 20 4D 6F 64
             65
      001020 0A                   17548 	.db 0x0a
      001021 00                   17549 	.db 0x00
                                  17550 	.area CSEG    (CODE)
                                  17551 	.area CONST   (CODE)
      001022                      17552 ___str_199:
      001022 20 3C 32 3E 20 39 2D 17553 	.ascii " <2> 9-bit Mode"
             62 69 74 20 4D 6F 64
             65
      001031 0A                   17554 	.db 0x0a
      001032 00                   17555 	.db 0x00
                                  17556 	.area CSEG    (CODE)
                                  17557 	.area CONST   (CODE)
      001033                      17558 ___str_200:
      001033 38 2D 62 69 74 20 4D 17559 	.ascii "8-bit Mode"
             6F 64 65
      00103D 0A                   17560 	.db 0x0a
      00103E 00                   17561 	.db 0x00
                                  17562 	.area CSEG    (CODE)
                                  17563 	.area CONST   (CODE)
      00103F                      17564 ___str_201:
      00103F 39 2D 62 69 74 20 4D 17565 	.ascii "9-bit Mode"
             6F 64 65
      001049 0A                   17566 	.db 0x0a
      00104A 00                   17567 	.db 0x00
                                  17568 	.area CSEG    (CODE)
                                  17569 	.area CONST   (CODE)
      00104B                      17570 ___str_202:
      00104B 0A                   17571 	.db 0x0a
      00104C 20 50 6C 65 61 73 65 17572 	.ascii " Please set the"
             20 73 65 74 20 74 68
             65
      00105B 0A                   17573 	.db 0x0a
      00105C 20 20 62 69 74 20 6D 17574 	.ascii "  bit mode first."
             6F 64 65 20 66 69 72
             73 74 2E
      00106D 0A                   17575 	.db 0x0a
      00106E 00                   17576 	.db 0x00
                                  17577 	.area CSEG    (CODE)
                                  17578 	.area CONST   (CODE)
      00106F                      17579 ___str_203:
      00106F 20 3C 31 3E 20 45 76 17580 	.ascii " <1> Even Parity"
             65 6E 20 50 61 72 69
             74 79
      00107F 0A                   17581 	.db 0x0a
      001080 00                   17582 	.db 0x00
                                  17583 	.area CSEG    (CODE)
                                  17584 	.area CONST   (CODE)
      001081                      17585 ___str_204:
      001081 20 3C 32 3E 20 4F 64 17586 	.ascii " <2> Odd Parity"
             64 20 50 61 72 69 74
             79
      001090 0A                   17587 	.db 0x0a
      001091 00                   17588 	.db 0x00
                                  17589 	.area CSEG    (CODE)
                                  17590 	.area CONST   (CODE)
      001092                      17591 ___str_205:
      001092 20 3C 33 3E 20 4E 6F 17592 	.ascii " <3> No Parity"
             20 50 61 72 69 74 79
      0010A0 00                   17593 	.db 0x00
                                  17594 	.area CSEG    (CODE)
                                  17595 	.area CONST   (CODE)
      0010A1                      17596 ___str_206:
      0010A1 45 76 65 6E 20 50 61 17597 	.ascii "Even Parity"
             72 69 74 79
      0010AC 0A                   17598 	.db 0x0a
      0010AD 00                   17599 	.db 0x00
                                  17600 	.area CSEG    (CODE)
                                  17601 	.area CONST   (CODE)
      0010AE                      17602 ___str_207:
      0010AE 4F 64 64 20 50 61 72 17603 	.ascii "Odd Parity"
             69 74 79
      0010B8 0A                   17604 	.db 0x0a
      0010B9 00                   17605 	.db 0x00
                                  17606 	.area CSEG    (CODE)
                                  17607 	.area CONST   (CODE)
      0010BA                      17608 ___str_208:
      0010BA 4E 6F 20 50 61 72 69 17609 	.ascii "No Parity"
             74 79
      0010C3 0A                   17610 	.db 0x0a
      0010C4 00                   17611 	.db 0x00
                                  17612 	.area CSEG    (CODE)
                                  17613 	.area CONST   (CODE)
      0010C5                      17614 ___str_209:
      0010C5 20 53 6F 6D 65 74 68 17615 	.ascii " Something is wrong."
             69 6E 67 20 69 73 20
             77 72 6F 6E 67 2E
      0010D9 00                   17616 	.db 0x00
                                  17617 	.area CSEG    (CODE)
                                  17618 	.area CONST   (CODE)
      0010DA                      17619 ___str_210:
      0010DA 3C 44 3E             17620 	.ascii "<D>"
      0010DD 00                   17621 	.db 0x00
                                  17622 	.area CSEG    (CODE)
                                  17623 	.area CONST   (CODE)
      0010DE                      17624 ___str_211:
      0010DE 20 20 20 20 20 20 20 17625 	.ascii "          "
             20 20 20
      0010E8 00                   17626 	.db 0x00
                                  17627 	.area CSEG    (CODE)
                                  17628 	.area CONST   (CODE)
      0010E9                      17629 ___str_212:
      0010E9 3C 42 3E             17630 	.ascii "<B>"
      0010EC 00                   17631 	.db 0x00
                                  17632 	.area CSEG    (CODE)
                                  17633 	.area CONST   (CODE)
      0010ED                      17634 ___str_213:
      0010ED 3C 45 3E             17635 	.ascii "<E>"
      0010F0 00                   17636 	.db 0x00
                                  17637 	.area CSEG    (CODE)
                                  17638 	.area CONST   (CODE)
      0010F1                      17639 ___str_214:
      0010F1 3C 46 3E             17640 	.ascii "<F>"
      0010F4 00                   17641 	.db 0x00
                                  17642 	.area CSEG    (CODE)
                                  17643 	.area CONST   (CODE)
      0010F5                      17644 ___str_215:
      0010F5 3C 43 3E             17645 	.ascii "<C>"
      0010F8 00                   17646 	.db 0x00
                                  17647 	.area CSEG    (CODE)
                                  17648 	.area CONST   (CODE)
      0010F9                      17649 ___str_216:
      0010F9 3C 41 3E             17650 	.ascii "<A>"
      0010FC 00                   17651 	.db 0x00
                                  17652 	.area CSEG    (CODE)
                                  17653 	.area CONST   (CODE)
      0010FD                      17654 ___str_217:
      0010FD 3C 31 3E             17655 	.ascii "<1>"
      001100 00                   17656 	.db 0x00
                                  17657 	.area CSEG    (CODE)
                                  17658 	.area CONST   (CODE)
      001101                      17659 ___str_218:
      001101 49 4E 56 41 4C 49 44 17660 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      00110E 0A                   17661 	.db 0x0a
      00110F 00                   17662 	.db 0x00
                                  17663 	.area CSEG    (CODE)
                                  17664 	.area CONST   (CODE)
      001110                      17665 ___str_219:
      001110 54 72 79 20 61 67 61 17666 	.ascii "Try again."
             69 6E 2E
      00111A 00                   17667 	.db 0x00
                                  17668 	.area CSEG    (CODE)
                                  17669 	.area CONST   (CODE)
      00111B                      17670 ___str_220:
      00111B 20 20 20 20 20 20 20 17671 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00112A 0A                   17672 	.db 0x0a
      00112B 00                   17673 	.db 0x00
                                  17674 	.area CSEG    (CODE)
                                  17675 	.area XINIT   (CODE)
                                  17676 	.area CABS    (ABS,CODE)
