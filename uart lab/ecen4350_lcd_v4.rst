                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_disable
                                     29 	.globl _UART_init
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _FL
                                     37 	.globl _P
                                     38 	.globl _TF2
                                     39 	.globl _EXF2
                                     40 	.globl _RCLK
                                     41 	.globl _TCLK
                                     42 	.globl _EXEN2
                                     43 	.globl _TR2
                                     44 	.globl _C_T2
                                     45 	.globl _CP_RL2
                                     46 	.globl _T2CON_7
                                     47 	.globl _T2CON_6
                                     48 	.globl _T2CON_5
                                     49 	.globl _T2CON_4
                                     50 	.globl _T2CON_3
                                     51 	.globl _T2CON_2
                                     52 	.globl _T2CON_1
                                     53 	.globl _T2CON_0
                                     54 	.globl _PT2
                                     55 	.globl _PS
                                     56 	.globl _PT1
                                     57 	.globl _PX1
                                     58 	.globl _PT0
                                     59 	.globl _PX0
                                     60 	.globl _RD
                                     61 	.globl _WR
                                     62 	.globl _T1
                                     63 	.globl _T0
                                     64 	.globl _INT1
                                     65 	.globl _INT0
                                     66 	.globl _TXD
                                     67 	.globl _RXD
                                     68 	.globl _P3_7
                                     69 	.globl _P3_6
                                     70 	.globl _P3_5
                                     71 	.globl _P3_4
                                     72 	.globl _P3_3
                                     73 	.globl _P3_2
                                     74 	.globl _P3_1
                                     75 	.globl _P3_0
                                     76 	.globl _EA
                                     77 	.globl _ET2
                                     78 	.globl _ES
                                     79 	.globl _ET1
                                     80 	.globl _EX1
                                     81 	.globl _ET0
                                     82 	.globl _EX0
                                     83 	.globl _P2_7
                                     84 	.globl _P2_6
                                     85 	.globl _P2_5
                                     86 	.globl _P2_4
                                     87 	.globl _P2_3
                                     88 	.globl _P2_2
                                     89 	.globl _P2_1
                                     90 	.globl _P2_0
                                     91 	.globl _SM0
                                     92 	.globl _SM1
                                     93 	.globl _SM2
                                     94 	.globl _REN
                                     95 	.globl _TB8
                                     96 	.globl _RB8
                                     97 	.globl _TI
                                     98 	.globl _RI
                                     99 	.globl _T2EX
                                    100 	.globl _T2
                                    101 	.globl _P1_7
                                    102 	.globl _P1_6
                                    103 	.globl _P1_5
                                    104 	.globl _P1_4
                                    105 	.globl _P1_3
                                    106 	.globl _P1_2
                                    107 	.globl _P1_1
                                    108 	.globl _P1_0
                                    109 	.globl _TF1
                                    110 	.globl _TR1
                                    111 	.globl _TF0
                                    112 	.globl _TR0
                                    113 	.globl _IE1
                                    114 	.globl _IT1
                                    115 	.globl _IE0
                                    116 	.globl _IT0
                                    117 	.globl _P0_7
                                    118 	.globl _P0_6
                                    119 	.globl _P0_5
                                    120 	.globl _P0_4
                                    121 	.globl _P0_3
                                    122 	.globl _P0_2
                                    123 	.globl _P0_1
                                    124 	.globl _P0_0
                                    125 	.globl _B
                                    126 	.globl _A
                                    127 	.globl _ACC
                                    128 	.globl _PSW
                                    129 	.globl _TH2
                                    130 	.globl _TL2
                                    131 	.globl _RCAP2H
                                    132 	.globl _RCAP2L
                                    133 	.globl _T2MOD
                                    134 	.globl _T2CON
                                    135 	.globl _IP
                                    136 	.globl _P3
                                    137 	.globl _IE
                                    138 	.globl _P2
                                    139 	.globl _SBUF
                                    140 	.globl _SCON
                                    141 	.globl _P1
                                    142 	.globl _TH1
                                    143 	.globl _TH0
                                    144 	.globl _TL1
                                    145 	.globl _TL0
                                    146 	.globl _TMOD
                                    147 	.globl _TCON
                                    148 	.globl _PCON
                                    149 	.globl _DPH
                                    150 	.globl _DPL
                                    151 	.globl _SP
                                    152 	.globl _P0
                                    153 	.globl _frame_NEP
                                    154 	.globl _tempFrame
                                    155 	.globl __8b
                                    156 	.globl _pType
                                    157 	.globl _baudType
                                    158 	.globl _parityBit
                                    159 	.globl _parityEven
                                    160 	.globl _paritySet
                                    161 	.globl _bitSet
                                    162 	.globl _baudSet
                                    163 	.globl _UART_en
                                    164 	.globl _selection
                                    165 	.globl _drawChar_PARM_6
                                    166 	.globl _drawChar_PARM_5
                                    167 	.globl _drawChar_PARM_4
                                    168 	.globl _drawChar_PARM_3
                                    169 	.globl _drawChar_PARM_2
                                    170 	.globl _fillRect_PARM_5
                                    171 	.globl _fillRect_PARM_4
                                    172 	.globl _fillRect_PARM_3
                                    173 	.globl _fillRect_PARM_2
                                    174 	.globl _testCircles_PARM_2
                                    175 	.globl _drawCircle_PARM_4
                                    176 	.globl _drawCircle_PARM_3
                                    177 	.globl _drawCircle_PARM_2
                                    178 	.globl _drawPixel_PARM_3
                                    179 	.globl _drawPixel_PARM_2
                                    180 	.globl _rtcWrite_PARM_2
                                    181 	.globl __height
                                    182 	.globl __width
                                    183 	.globl _textbgcolor
                                    184 	.globl _textcolor
                                    185 	.globl _rotation
                                    186 	.globl _textsize
                                    187 	.globl _cursor_y
                                    188 	.globl _cursor_x
                                    189 	.globl _received_flag
                                    190 	.globl _received_byte
                                    191 	.globl _seg7_address
                                    192 	.globl _lcd_address
                                    193 	.globl _rowloc
                                    194 	.globl _colloc
                                    195 	.globl _iowrite8
                                    196 	.globl _ioread8
                                    197 	.globl _ramWrite8
                                    198 	.globl _ramRead8
                                    199 	.globl _writeAllRAM
                                    200 	.globl _checkAllRAM
                                    201 	.globl _delay
                                    202 	.globl _writeRegister8
                                    203 	.globl _writeRegister16
                                    204 	.globl _seg7Test
                                    205 	.globl _rtcInit
                                    206 	.globl _rtcBusy
                                    207 	.globl _rtcCmd
                                    208 	.globl _rtcWrite
                                    209 	.globl _rtcRead
                                    210 	.globl _rtcPrint
                                    211 	.globl _setCursor
                                    212 	.globl _setTextColor
                                    213 	.globl _setTextSize
                                    214 	.globl _setAddress
                                    215 	.globl _TFT_LCD_INIT
                                    216 	.globl _drawPixel
                                    217 	.globl _drawCircle
                                    218 	.globl _testCircles
                                    219 	.globl _fillRect
                                    220 	.globl _fillTop
                                    221 	.globl _fillScreen
                                    222 	.globl _clearLCD
                                    223 	.globl _LCD_string_write
                                    224 	.globl _writeNewLine
                                    225 	.globl _freeType
                                    226 	.globl _keyDetect
                                    227 	.globl _reverse
                                    228 	.globl _reverse16
                                    229 	.globl _hexToASCII
                                    230 	.globl _ASCIItoHex
                                    231 	.globl _asciiToDec
                                    232 	.globl _asciiToHex
                                    233 	.globl _print4Hex
                                    234 	.globl _print8Hex
                                    235 	.globl _print16Hex
                                    236 	.globl _print16Dec
                                    237 	.globl _print8ASCII
                                    238 	.globl _print16ASCII
                                    239 	.globl _setColorDefault
                                    240 	.globl _setColorSelect
                                    241 	.globl _setColorHighlight1
                                    242 	.globl _setColorHighlight2
                                    243 	.globl _setColorGray
                                    244 	.globl _setColorMenu
                                    245 	.globl _setColorRed
                                    246 	.globl _setColorWhite
                                    247 	.globl _setColorGreen
                                    248 	.globl _setColorYellow
                                    249 	.globl _inputAddress
                                    250 	.globl _inputBlockType
                                    251 	.globl _inputBlockSize
                                    252 	.globl _printMenu
                                    253 	.globl _dump
                                    254 	.globl _move
                                    255 	.globl _edit
                                    256 	.globl _find
                                    257 	.globl _count
                                    258 	.globl _check
                                    259 	.globl _uart
                                    260 	.globl _main
                                    261 ;--------------------------------------------------------
                                    262 ; special function registers
                                    263 ;--------------------------------------------------------
                                    264 	.area RSEG    (ABS,DATA)
      000000                        265 	.org 0x0000
                           000080   266 _P0	=	0x0080
                           000081   267 _SP	=	0x0081
                           000082   268 _DPL	=	0x0082
                           000083   269 _DPH	=	0x0083
                           000087   270 _PCON	=	0x0087
                           000088   271 _TCON	=	0x0088
                           000089   272 _TMOD	=	0x0089
                           00008A   273 _TL0	=	0x008a
                           00008B   274 _TL1	=	0x008b
                           00008C   275 _TH0	=	0x008c
                           00008D   276 _TH1	=	0x008d
                           000090   277 _P1	=	0x0090
                           000098   278 _SCON	=	0x0098
                           000099   279 _SBUF	=	0x0099
                           0000A0   280 _P2	=	0x00a0
                           0000A8   281 _IE	=	0x00a8
                           0000B0   282 _P3	=	0x00b0
                           0000B8   283 _IP	=	0x00b8
                           0000C8   284 _T2CON	=	0x00c8
                           0000C9   285 _T2MOD	=	0x00c9
                           0000CA   286 _RCAP2L	=	0x00ca
                           0000CB   287 _RCAP2H	=	0x00cb
                           0000CC   288 _TL2	=	0x00cc
                           0000CD   289 _TH2	=	0x00cd
                           0000D0   290 _PSW	=	0x00d0
                           0000E0   291 _ACC	=	0x00e0
                           0000E0   292 _A	=	0x00e0
                           0000F0   293 _B	=	0x00f0
                                    294 ;--------------------------------------------------------
                                    295 ; special function bits
                                    296 ;--------------------------------------------------------
                                    297 	.area RSEG    (ABS,DATA)
      000000                        298 	.org 0x0000
                           000080   299 _P0_0	=	0x0080
                           000081   300 _P0_1	=	0x0081
                           000082   301 _P0_2	=	0x0082
                           000083   302 _P0_3	=	0x0083
                           000084   303 _P0_4	=	0x0084
                           000085   304 _P0_5	=	0x0085
                           000086   305 _P0_6	=	0x0086
                           000087   306 _P0_7	=	0x0087
                           000088   307 _IT0	=	0x0088
                           000089   308 _IE0	=	0x0089
                           00008A   309 _IT1	=	0x008a
                           00008B   310 _IE1	=	0x008b
                           00008C   311 _TR0	=	0x008c
                           00008D   312 _TF0	=	0x008d
                           00008E   313 _TR1	=	0x008e
                           00008F   314 _TF1	=	0x008f
                           000090   315 _P1_0	=	0x0090
                           000091   316 _P1_1	=	0x0091
                           000092   317 _P1_2	=	0x0092
                           000093   318 _P1_3	=	0x0093
                           000094   319 _P1_4	=	0x0094
                           000095   320 _P1_5	=	0x0095
                           000096   321 _P1_6	=	0x0096
                           000097   322 _P1_7	=	0x0097
                           000090   323 _T2	=	0x0090
                           000091   324 _T2EX	=	0x0091
                           000098   325 _RI	=	0x0098
                           000099   326 _TI	=	0x0099
                           00009A   327 _RB8	=	0x009a
                           00009B   328 _TB8	=	0x009b
                           00009C   329 _REN	=	0x009c
                           00009D   330 _SM2	=	0x009d
                           00009E   331 _SM1	=	0x009e
                           00009F   332 _SM0	=	0x009f
                           0000A0   333 _P2_0	=	0x00a0
                           0000A1   334 _P2_1	=	0x00a1
                           0000A2   335 _P2_2	=	0x00a2
                           0000A3   336 _P2_3	=	0x00a3
                           0000A4   337 _P2_4	=	0x00a4
                           0000A5   338 _P2_5	=	0x00a5
                           0000A6   339 _P2_6	=	0x00a6
                           0000A7   340 _P2_7	=	0x00a7
                           0000A8   341 _EX0	=	0x00a8
                           0000A9   342 _ET0	=	0x00a9
                           0000AA   343 _EX1	=	0x00aa
                           0000AB   344 _ET1	=	0x00ab
                           0000AC   345 _ES	=	0x00ac
                           0000AD   346 _ET2	=	0x00ad
                           0000AF   347 _EA	=	0x00af
                           0000B0   348 _P3_0	=	0x00b0
                           0000B1   349 _P3_1	=	0x00b1
                           0000B2   350 _P3_2	=	0x00b2
                           0000B3   351 _P3_3	=	0x00b3
                           0000B4   352 _P3_4	=	0x00b4
                           0000B5   353 _P3_5	=	0x00b5
                           0000B6   354 _P3_6	=	0x00b6
                           0000B7   355 _P3_7	=	0x00b7
                           0000B0   356 _RXD	=	0x00b0
                           0000B1   357 _TXD	=	0x00b1
                           0000B2   358 _INT0	=	0x00b2
                           0000B3   359 _INT1	=	0x00b3
                           0000B4   360 _T0	=	0x00b4
                           0000B5   361 _T1	=	0x00b5
                           0000B6   362 _WR	=	0x00b6
                           0000B7   363 _RD	=	0x00b7
                           0000B8   364 _PX0	=	0x00b8
                           0000B9   365 _PT0	=	0x00b9
                           0000BA   366 _PX1	=	0x00ba
                           0000BB   367 _PT1	=	0x00bb
                           0000BC   368 _PS	=	0x00bc
                           0000BD   369 _PT2	=	0x00bd
                           0000C8   370 _T2CON_0	=	0x00c8
                           0000C9   371 _T2CON_1	=	0x00c9
                           0000CA   372 _T2CON_2	=	0x00ca
                           0000CB   373 _T2CON_3	=	0x00cb
                           0000CC   374 _T2CON_4	=	0x00cc
                           0000CD   375 _T2CON_5	=	0x00cd
                           0000CE   376 _T2CON_6	=	0x00ce
                           0000CF   377 _T2CON_7	=	0x00cf
                           0000C8   378 _CP_RL2	=	0x00c8
                           0000C9   379 _C_T2	=	0x00c9
                           0000CA   380 _TR2	=	0x00ca
                           0000CB   381 _EXEN2	=	0x00cb
                           0000CC   382 _TCLK	=	0x00cc
                           0000CD   383 _RCLK	=	0x00cd
                           0000CE   384 _EXF2	=	0x00ce
                           0000CF   385 _TF2	=	0x00cf
                           0000D0   386 _P	=	0x00d0
                           0000D1   387 _FL	=	0x00d1
                           0000D2   388 _OV	=	0x00d2
                           0000D3   389 _RS0	=	0x00d3
                           0000D4   390 _RS1	=	0x00d4
                           0000D5   391 _F0	=	0x00d5
                           0000D6   392 _AC	=	0x00d6
                           0000D7   393 _CY	=	0x00d7
                                    394 ;--------------------------------------------------------
                                    395 ; overlayable register banks
                                    396 ;--------------------------------------------------------
                                    397 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        398 	.ds 8
                                    399 ;--------------------------------------------------------
                                    400 ; internal ram data
                                    401 ;--------------------------------------------------------
                                    402 	.area DSEG    (DATA)
      000008                        403 _colloc::
      000008                        404 	.ds 1
      000009                        405 _rowloc::
      000009                        406 	.ds 1
      00000A                        407 _lcd_address::
      00000A                        408 	.ds 2
      00000C                        409 _seg7_address::
      00000C                        410 	.ds 2
      00000E                        411 _received_byte::
      00000E                        412 	.ds 1
      00000F                        413 _received_flag::
      00000F                        414 	.ds 1
      000010                        415 _cursor_x::
      000010                        416 	.ds 2
      000012                        417 _cursor_y::
      000012                        418 	.ds 2
      000014                        419 _textsize::
      000014                        420 	.ds 1
      000015                        421 _rotation::
      000015                        422 	.ds 1
      000016                        423 _textcolor::
      000016                        424 	.ds 2
      000018                        425 _textbgcolor::
      000018                        426 	.ds 2
      00001A                        427 __width::
      00001A                        428 	.ds 2
      00001C                        429 __height::
      00001C                        430 	.ds 2
      00001E                        431 _rtcWrite_PARM_2:
      00001E                        432 	.ds 1
      00001F                        433 _rtcPrint_printval_65536_226:
      00001F                        434 	.ds 9
      000028                        435 _drawPixel_PARM_2:
      000028                        436 	.ds 2
      00002A                        437 _drawPixel_PARM_3:
      00002A                        438 	.ds 2
      00002C                        439 _drawCircle_PARM_2:
      00002C                        440 	.ds 2
      00002E                        441 _drawCircle_PARM_3:
      00002E                        442 	.ds 2
      000030                        443 _drawCircle_PARM_4:
      000030                        444 	.ds 2
      000032                        445 _drawCircle_x0_65536_393:
      000032                        446 	.ds 2
      000034                        447 _drawCircle_f_65536_394:
      000034                        448 	.ds 2
      000036                        449 _drawCircle_ddF_x_65536_394:
      000036                        450 	.ds 2
      000038                        451 _drawCircle_x_65536_394:
      000038                        452 	.ds 2
      00003A                        453 _testCircles_PARM_2:
      00003A                        454 	.ds 2
      00003C                        455 _testCircles_w_65536_398:
      00003C                        456 	.ds 2
      00003E                        457 _testCircles_h_65536_398:
      00003E                        458 	.ds 2
      000040                        459 _fillRect_PARM_2:
      000040                        460 	.ds 2
      000042                        461 _fillRect_PARM_3:
      000042                        462 	.ds 2
      000044                        463 _fillRect_PARM_4:
      000044                        464 	.ds 2
      000046                        465 _fillRect_PARM_5:
      000046                        466 	.ds 2
      000048                        467 _drawChar_PARM_2:
      000048                        468 	.ds 2
      00004A                        469 _drawChar_PARM_3:
      00004A                        470 	.ds 1
      00004B                        471 _drawChar_PARM_4:
      00004B                        472 	.ds 2
      00004D                        473 _drawChar_PARM_5:
      00004D                        474 	.ds 2
      00004F                        475 _drawChar_PARM_6:
      00004F                        476 	.ds 1
      000050                        477 _drawChar_x_65536_458:
      000050                        478 	.ds 2
      000052                        479 _drawChar_i_131072_461:
      000052                        480 	.ds 1
      000053                        481 _drawChar_line_196608_462:
      000053                        482 	.ds 1
      000054                        483 _drawChar_sloc0_1_0:
      000054                        484 	.ds 2
      000056                        485 _asciiToHex_store_65536_519:
      000056                        486 	.ds 2
      000058                        487 _dump_d_65536_553:
      000058                        488 	.ds 2
      00005A                        489 _dump_sloc0_1_0:
      00005A                        490 	.ds 1
      00005B                        491 _move_d_65536_609:
      00005B                        492 	.ds 2
      00005D                        493 _move_i_131072_618:
      00005D                        494 	.ds 2
      00005F                        495 _edit_d_65536_628:
      00005F                        496 	.ds 2
      000061                        497 _find_i_262144_665:
      000061                        498 	.ds 2
      000063                        499 _find_sloc0_1_0:
      000063                        500 	.ds 1
      000064                        501 _find_sloc1_1_0:
      000064                        502 	.ds 2
      000066                        503 _count_i_262144_721:
      000066                        504 	.ds 2
      000068                        505 _count_sloc0_1_0:
      000068                        506 	.ds 1
      000069                        507 _count_sloc1_1_0:
      000069                        508 	.ds 2
                                    509 ;--------------------------------------------------------
                                    510 ; overlayable items in internal ram 
                                    511 ;--------------------------------------------------------
                                    512 	.area	OSEG    (OVR,DATA)
      00006B                        513 _iowrite8_PARM_2:
      00006B                        514 	.ds 1
                                    515 	.area	OSEG    (OVR,DATA)
                                    516 	.area	OSEG    (OVR,DATA)
      00006B                        517 _ramWrite8_PARM_2:
      00006B                        518 	.ds 1
                                    519 	.area	OSEG    (OVR,DATA)
                                    520 	.area	OSEG    (OVR,DATA)
                                    521 	.area	OSEG    (OVR,DATA)
                                    522 	.area	OSEG    (OVR,DATA)
                                    523 	.area	OSEG    (OVR,DATA)
      00006B                        524 _writeRegister8_PARM_2:
      00006B                        525 	.ds 1
                                    526 	.area	OSEG    (OVR,DATA)
      00006B                        527 _writeRegister16_PARM_2:
      00006B                        528 	.ds 2
                                    529 	.area	OSEG    (OVR,DATA)
                                    530 	.area	OSEG    (OVR,DATA)
      00006B                        531 _rtcCmd_PARM_2:
      00006B                        532 	.ds 1
                                    533 	.area	OSEG    (OVR,DATA)
      00006B                        534 _setCursor_PARM_2:
      00006B                        535 	.ds 2
                                    536 	.area	OSEG    (OVR,DATA)
      00006B                        537 _setTextColor_PARM_2:
      00006B                        538 	.ds 2
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
      00006B                        541 _setAddress_PARM_2:
      00006B                        542 	.ds 2
      00006D                        543 _setAddress_PARM_3:
      00006D                        544 	.ds 2
      00006F                        545 _setAddress_PARM_4:
      00006F                        546 	.ds 2
                                    547 	.area	OSEG    (OVR,DATA)
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 ;--------------------------------------------------------
                                    550 ; Stack segment in internal ram 
                                    551 ;--------------------------------------------------------
                                    552 	.area	SSEG
      000095                        553 __start__stack:
      000095                        554 	.ds	1
                                    555 
                                    556 ;--------------------------------------------------------
                                    557 ; indirectly addressable internal ram data
                                    558 ;--------------------------------------------------------
                                    559 	.area ISEG    (DATA)
      000071                        560 _selection::
      000071                        561 	.ds 1
      000072                        562 _UART_en::
      000072                        563 	.ds 1
      000073                        564 _baudSet::
      000073                        565 	.ds 1
      000074                        566 _bitSet::
      000074                        567 	.ds 1
      000075                        568 _paritySet::
      000075                        569 	.ds 1
      000076                        570 _parityEven::
      000076                        571 	.ds 1
      000077                        572 _parityBit::
      000077                        573 	.ds 1
      000078                        574 _baudType::
      000078                        575 	.ds 1
      000079                        576 _pType::
      000079                        577 	.ds 1
      00007A                        578 __8b::
      00007A                        579 	.ds 1
      00007B                        580 _tempFrame::
      00007B                        581 	.ds 2
      00007D                        582 _frame_NEP::
      00007D                        583 	.ds 2
      00007F                        584 _dump_address_65536_553:
      00007F                        585 	.ds 2
      000081                        586 _dump_exit_65536_553:
      000081                        587 	.ds 1
      000082                        588 _move_sourceAddress_65536_609:
      000082                        589 	.ds 2
      000084                        590 _move_invalidSize_65536_609:
      000084                        591 	.ds 1
      000085                        592 _edit_exit_65536_628:
      000085                        593 	.ds 1
      000086                        594 _edit_invalid_65536_628:
      000086                        595 	.ds 1
      000087                        596 _find_address_65536_652:
      000087                        597 	.ds 2
      000089                        598 _find_blockSize_65536_652:
      000089                        599 	.ds 1
      00008A                        600 _find_value_65536_652:
      00008A                        601 	.ds 1
      00008B                        602 _find_scan_65536_652:
      00008B                        603 	.ds 1
      00008C                        604 _find_noneFound_65536_652:
      00008C                        605 	.ds 1
      00008D                        606 _find_exit_65536_652:
      00008D                        607 	.ds 1
      00008E                        608 _count_address_65536_708:
      00008E                        609 	.ds 2
      000090                        610 _count_blockSize_65536_708:
      000090                        611 	.ds 1
      000091                        612 _count_value_65536_708:
      000091                        613 	.ds 1
      000092                        614 _count_scan_65536_708:
      000092                        615 	.ds 1
      000093                        616 _count_noneFound_65536_708:
      000093                        617 	.ds 1
      000094                        618 _count_exit_65536_708:
      000094                        619 	.ds 1
                                    620 ;--------------------------------------------------------
                                    621 ; absolute internal ram data
                                    622 ;--------------------------------------------------------
                                    623 	.area IABS    (ABS,DATA)
                                    624 	.area IABS    (ABS,DATA)
                                    625 ;--------------------------------------------------------
                                    626 ; bit data
                                    627 ;--------------------------------------------------------
                                    628 	.area BSEG    (BIT)
                                    629 ;--------------------------------------------------------
                                    630 ; paged external ram data
                                    631 ;--------------------------------------------------------
                                    632 	.area PSEG    (PAG,XDATA)
                                    633 ;--------------------------------------------------------
                                    634 ; external ram data
                                    635 ;--------------------------------------------------------
                                    636 	.area XSEG    (XDATA)
                                    637 ;--------------------------------------------------------
                                    638 ; absolute external ram data
                                    639 ;--------------------------------------------------------
                                    640 	.area XABS    (ABS,XDATA)
                                    641 ;--------------------------------------------------------
                                    642 ; external initialized ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area XISEG   (XDATA)
                                    645 	.area HOME    (CODE)
                                    646 	.area GSINIT0 (CODE)
                                    647 	.area GSINIT1 (CODE)
                                    648 	.area GSINIT2 (CODE)
                                    649 	.area GSINIT3 (CODE)
                                    650 	.area GSINIT4 (CODE)
                                    651 	.area GSINIT5 (CODE)
                                    652 	.area GSINIT  (CODE)
                                    653 	.area GSFINAL (CODE)
                                    654 	.area CSEG    (CODE)
                                    655 ;--------------------------------------------------------
                                    656 ; interrupt vector 
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
      000000                        659 __interrupt_vect:
      000000 02 00 29         [24]  660 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  661 	reti
      000004                        662 	.ds	7
      00000B 32               [24]  663 	reti
      00000C                        664 	.ds	7
      000013 32               [24]  665 	reti
      000014                        666 	.ds	7
      00001B 32               [24]  667 	reti
      00001C                        668 	.ds	7
      000023 02 02 32         [24]  669 	ljmp	_ISR_receive
                                    670 ;--------------------------------------------------------
                                    671 ; global & static initialisations
                                    672 ;--------------------------------------------------------
                                    673 	.area HOME    (CODE)
                                    674 	.area GSINIT  (CODE)
                                    675 	.area GSFINAL (CODE)
                                    676 	.area GSINIT  (CODE)
                                    677 	.globl __sdcc_gsinit_startup
                                    678 	.globl __sdcc_program_startup
                                    679 	.globl __start__stack
                                    680 	.globl __mcs51_genXINIT
                                    681 	.globl __mcs51_genXRAMCLEAR
                                    682 	.globl __mcs51_genRAMCLEAR
                                    683 ;	.\ecen4350_lcd_v4.c:42: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000082 75 0A 00         [24]  684 	mov	_lcd_address,#0x00
      000085 75 0B 40         [24]  685 	mov	(_lcd_address + 1),#0x40
                                    686 ;	.\ecen4350_lcd_v4.c:43: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000088 75 0C 00         [24]  687 	mov	_seg7_address,#0x00
      00008B 75 0D 80         [24]  688 	mov	(_seg7_address + 1),#0x80
                                    689 ;	.\ecen4350_lcd_v4.c:45: volatile unsigned char received_byte = 0;
      00008E 75 0E 00         [24]  690 	mov	_received_byte,#0x00
                                    691 ;	.\ecen4350_lcd_v4.c:46: volatile unsigned char received_flag = 0;
      000091 75 0F 00         [24]  692 	mov	_received_flag,#0x00
                                    693 ;	.\ecen4350_lcd_v4.c:49: __idata unsigned char UART_en = 0;
      000094 78 72            [12]  694 	mov	r0,#_UART_en
      000096 76 00            [12]  695 	mov	@r0,#0x00
                                    696 ;	.\ecen4350_lcd_v4.c:50: __idata unsigned char baudSet = 0;
      000098 78 73            [12]  697 	mov	r0,#_baudSet
      00009A 76 00            [12]  698 	mov	@r0,#0x00
                                    699 ;	.\ecen4350_lcd_v4.c:51: __idata unsigned char bitSet = 0;
      00009C 78 74            [12]  700 	mov	r0,#_bitSet
      00009E 76 00            [12]  701 	mov	@r0,#0x00
                                    702 ;	.\ecen4350_lcd_v4.c:52: __idata unsigned char paritySet = 0;
      0000A0 78 75            [12]  703 	mov	r0,#_paritySet
      0000A2 76 00            [12]  704 	mov	@r0,#0x00
                                    705 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char parityEven = 'null';
      0000A4 78 76            [12]  706 	mov	r0,#_parityEven
      0000A6 76 6E            [12]  707 	mov	@r0,#0x6e
                                    708 ;	.\ecen4350_lcd_v4.c:54: __idata unsigned char parityBit = 'null';
      0000A8 78 77            [12]  709 	mov	r0,#_parityBit
      0000AA 76 6E            [12]  710 	mov	@r0,#0x6e
                                    711 ;	.\ecen4350_lcd_v4.c:55: __idata unsigned char baudType = 'null';
      0000AC 78 78            [12]  712 	mov	r0,#_baudType
      0000AE 76 6E            [12]  713 	mov	@r0,#0x6e
                                    714 ;	.\ecen4350_lcd_v4.c:56: __idata unsigned char pType = 'null';
      0000B0 78 79            [12]  715 	mov	r0,#_pType
      0000B2 76 6E            [12]  716 	mov	@r0,#0x6e
                                    717 ;	.\ecen4350_lcd_v4.c:57: __idata unsigned char _8b = 'null';
      0000B4 78 7A            [12]  718 	mov	r0,#__8b
      0000B6 76 6E            [12]  719 	mov	@r0,#0x6e
                                    720 ;	.\ecen4350_lcd_v4.c:58: __idata unsigned int tempFrame = 'null';
      0000B8 78 7B            [12]  721 	mov	r0,#_tempFrame
      0000BA 76 6E            [12]  722 	mov	@r0,#0x6e
      0000BC 08               [12]  723 	inc	r0
      0000BD 76 00            [12]  724 	mov	@r0,#0x00
                                    725 ;	.\ecen4350_lcd_v4.c:59: __idata unsigned int frame_NEP = 'null';	//	bitMode | Even/odd | Set/not
      0000BF 78 7D            [12]  726 	mov	r0,#_frame_NEP
      0000C1 76 6E            [12]  727 	mov	@r0,#0x6e
      0000C3 08               [12]  728 	inc	r0
      0000C4 76 00            [12]  729 	mov	@r0,#0x00
                                    730 	.area GSFINAL (CODE)
      0000C6 02 00 26         [24]  731 	ljmp	__sdcc_program_startup
                                    732 ;--------------------------------------------------------
                                    733 ; Home
                                    734 ;--------------------------------------------------------
                                    735 	.area HOME    (CODE)
                                    736 	.area HOME    (CODE)
      000026                        737 __sdcc_program_startup:
      000026 02 53 B6         [24]  738 	ljmp	_main
                                    739 ;	return from main will return to caller
                                    740 ;--------------------------------------------------------
                                    741 ; code
                                    742 ;--------------------------------------------------------
                                    743 	.area CSEG    (CODE)
                                    744 ;------------------------------------------------------------
                                    745 ;Allocation info for local variables in function 'iowrite8'
                                    746 ;------------------------------------------------------------
                                    747 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    748 ;map_address               Allocated to registers 
                                    749 ;------------------------------------------------------------
                                    750 ;	.\ecen4350_lcd_v4.c:104: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    751 ;	-----------------------------------------
                                    752 ;	 function iowrite8
                                    753 ;	-----------------------------------------
      0000C9                        754 _iowrite8:
                           000007   755 	ar7 = 0x07
                           000006   756 	ar6 = 0x06
                           000005   757 	ar5 = 0x05
                           000004   758 	ar4 = 0x04
                           000003   759 	ar3 = 0x03
                           000002   760 	ar2 = 0x02
                           000001   761 	ar1 = 0x01
                           000000   762 	ar0 = 0x00
                                    763 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    764 ;	assignBit
      0000C9 D2 B5            [12]  765 	setb	_P3_5
                                    766 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0000CB E5 6B            [12]  767 	mov	a,_iowrite8_PARM_2
      0000CD F0               [24]  768 	movx	@dptr,a
                                    769 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    770 ;	assignBit
      0000CE C2 B5            [12]  771 	clr	_P3_5
                                    772 ;	.\ecen4350_lcd_v4.c:108: }
      0000D0 22               [24]  773 	ret
                                    774 ;------------------------------------------------------------
                                    775 ;Allocation info for local variables in function 'ioread8'
                                    776 ;------------------------------------------------------------
                                    777 ;map_address               Allocated to registers 
                                    778 ;d                         Allocated to registers r7 
                                    779 ;------------------------------------------------------------
                                    780 ;	.\ecen4350_lcd_v4.c:110: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    781 ;	-----------------------------------------
                                    782 ;	 function ioread8
                                    783 ;	-----------------------------------------
      0000D1                        784 _ioread8:
                                    785 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                    786 ;	assignBit
      0000D1 D2 B5            [12]  787 	setb	_P3_5
                                    788 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0000D3 E0               [24]  789 	movx	a,@dptr
      0000D4 FF               [12]  790 	mov	r7,a
                                    791 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                    792 ;	assignBit
      0000D5 C2 B5            [12]  793 	clr	_P3_5
                                    794 ;	.\ecen4350_lcd_v4.c:116: return d;
      0000D7 8F 82            [24]  795 	mov	dpl,r7
                                    796 ;	.\ecen4350_lcd_v4.c:117: }
      0000D9 22               [24]  797 	ret
                                    798 ;------------------------------------------------------------
                                    799 ;Allocation info for local variables in function 'ramWrite8'
                                    800 ;------------------------------------------------------------
                                    801 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    802 ;map_address               Allocated to registers 
                                    803 ;------------------------------------------------------------
                                    804 ;	.\ecen4350_lcd_v4.c:119: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    805 ;	-----------------------------------------
                                    806 ;	 function ramWrite8
                                    807 ;	-----------------------------------------
      0000DA                        808 _ramWrite8:
                                    809 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                    810 ;	assignBit
      0000DA C2 B5            [12]  811 	clr	_P3_5
                                    812 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      0000DC E5 6B            [12]  813 	mov	a,_ramWrite8_PARM_2
      0000DE F0               [24]  814 	movx	@dptr,a
                                    815 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                    816 ;	assignBit
      0000DF D2 B5            [12]  817 	setb	_P3_5
                                    818 ;	.\ecen4350_lcd_v4.c:124: }
      0000E1 22               [24]  819 	ret
                                    820 ;------------------------------------------------------------
                                    821 ;Allocation info for local variables in function 'ramRead8'
                                    822 ;------------------------------------------------------------
                                    823 ;map_address               Allocated to registers 
                                    824 ;d                         Allocated to registers r7 
                                    825 ;------------------------------------------------------------
                                    826 ;	.\ecen4350_lcd_v4.c:126: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    827 ;	-----------------------------------------
                                    828 ;	 function ramRead8
                                    829 ;	-----------------------------------------
      0000E2                        830 _ramRead8:
                                    831 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                    832 ;	assignBit
      0000E2 C2 B5            [12]  833 	clr	_P3_5
                                    834 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      0000E4 E0               [24]  835 	movx	a,@dptr
      0000E5 FF               [12]  836 	mov	r7,a
                                    837 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                    838 ;	assignBit
      0000E6 D2 B5            [12]  839 	setb	_P3_5
                                    840 ;	.\ecen4350_lcd_v4.c:132: return d;
      0000E8 8F 82            [24]  841 	mov	dpl,r7
                                    842 ;	.\ecen4350_lcd_v4.c:133: }
      0000EA 22               [24]  843 	ret
                                    844 ;------------------------------------------------------------
                                    845 ;Allocation info for local variables in function 'writeAllRAM'
                                    846 ;------------------------------------------------------------
                                    847 ;d                         Allocated to registers r7 
                                    848 ;i                         Allocated to registers r3 r4 r5 r6 
                                    849 ;ram_address               Allocated to registers 
                                    850 ;------------------------------------------------------------
                                    851 ;	.\ecen4350_lcd_v4.c:135: void writeAllRAM(unsigned char d)
                                    852 ;	-----------------------------------------
                                    853 ;	 function writeAllRAM
                                    854 ;	-----------------------------------------
      0000EB                        855 _writeAllRAM:
      0000EB AF 82            [24]  856 	mov	r7,dpl
                                    857 ;	.\ecen4350_lcd_v4.c:140: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000ED 7B 00            [12]  858 	mov	r3,#0x00
      0000EF 7C 00            [12]  859 	mov	r4,#0x00
      0000F1 7D 00            [12]  860 	mov	r5,#0x00
      0000F3 7E 00            [12]  861 	mov	r6,#0x00
      0000F5                        862 00102$:
                                    863 ;	.\ecen4350_lcd_v4.c:142: IOM = 0;
                                    864 ;	assignBit
      0000F5 C2 B5            [12]  865 	clr	_P3_5
                                    866 ;	.\ecen4350_lcd_v4.c:143: ram_address = (unsigned char __xdata *)(i);
      0000F7 8B 82            [24]  867 	mov	dpl,r3
      0000F9 8C 83            [24]  868 	mov	dph,r4
                                    869 ;	.\ecen4350_lcd_v4.c:144: *ram_address = d;
      0000FB EF               [12]  870 	mov	a,r7
      0000FC F0               [24]  871 	movx	@dptr,a
                                    872 ;	.\ecen4350_lcd_v4.c:145: IOM = 1;
                                    873 ;	assignBit
      0000FD D2 B5            [12]  874 	setb	_P3_5
                                    875 ;	.\ecen4350_lcd_v4.c:140: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000FF 0B               [12]  876 	inc	r3
      000100 BB 00 09         [24]  877 	cjne	r3,#0x00,00111$
      000103 0C               [12]  878 	inc	r4
      000104 BC 00 05         [24]  879 	cjne	r4,#0x00,00111$
      000107 0D               [12]  880 	inc	r5
      000108 BD 00 01         [24]  881 	cjne	r5,#0x00,00111$
      00010B 0E               [12]  882 	inc	r6
      00010C                        883 00111$:
      00010C C3               [12]  884 	clr	c
      00010D 74 FF            [12]  885 	mov	a,#0xff
      00010F 9B               [12]  886 	subb	a,r3
      000110 74 FF            [12]  887 	mov	a,#0xff
      000112 9C               [12]  888 	subb	a,r4
      000113 E4               [12]  889 	clr	a
      000114 9D               [12]  890 	subb	a,r5
      000115 E4               [12]  891 	clr	a
      000116 9E               [12]  892 	subb	a,r6
      000117 50 DC            [24]  893 	jnc	00102$
                                    894 ;	.\ecen4350_lcd_v4.c:147: }
      000119 22               [24]  895 	ret
                                    896 ;------------------------------------------------------------
                                    897 ;Allocation info for local variables in function 'checkAllRAM'
                                    898 ;------------------------------------------------------------
                                    899 ;d                         Allocated to registers r7 
                                    900 ;ram_address               Allocated to registers 
                                    901 ;i                         Allocated to registers r3 r4 r5 r6 
                                    902 ;__3276800001              Allocated to registers 
                                    903 ;__3276800002              Allocated to registers 
                                    904 ;map_address               Allocated to registers 
                                    905 ;d                         Allocated to registers 
                                    906 ;__2621440004              Allocated to registers 
                                    907 ;__2621440005              Allocated to registers 
                                    908 ;map_address               Allocated to registers 
                                    909 ;d                         Allocated to registers 
                                    910 ;------------------------------------------------------------
                                    911 ;	.\ecen4350_lcd_v4.c:149: void checkAllRAM(unsigned char d)
                                    912 ;	-----------------------------------------
                                    913 ;	 function checkAllRAM
                                    914 ;	-----------------------------------------
      00011A                        915 _checkAllRAM:
      00011A AF 82            [24]  916 	mov	r7,dpl
                                    917 ;	.\ecen4350_lcd_v4.c:152: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      00011C 7B 00            [12]  918 	mov	r3,#0x00
      00011E 7C 00            [12]  919 	mov	r4,#0x00
      000120 7D 00            [12]  920 	mov	r5,#0x00
      000122 7E 00            [12]  921 	mov	r6,#0x00
      000124                        922 00107$:
      000124 C3               [12]  923 	clr	c
      000125 74 FF            [12]  924 	mov	a,#0xff
      000127 9B               [12]  925 	subb	a,r3
      000128 74 FF            [12]  926 	mov	a,#0xff
      00012A 9C               [12]  927 	subb	a,r4
      00012B E4               [12]  928 	clr	a
      00012C 9D               [12]  929 	subb	a,r5
      00012D E4               [12]  930 	clr	a
      00012E 9E               [12]  931 	subb	a,r6
      00012F 50 01            [24]  932 	jnc	00124$
      000131 22               [24]  933 	ret
      000132                        934 00124$:
                                    935 ;	.\ecen4350_lcd_v4.c:153: IOM = 0;
                                    936 ;	assignBit
      000132 C2 B5            [12]  937 	clr	_P3_5
                                    938 ;	.\ecen4350_lcd_v4.c:154: ram_address = (unsigned char __xdata *)(i);
      000134 8B 82            [24]  939 	mov	dpl,r3
      000136 8C 83            [24]  940 	mov	dph,r4
                                    941 ;	.\ecen4350_lcd_v4.c:156: if(d != *ram_address) {
      000138 E0               [24]  942 	movx	a,@dptr
      000139 FA               [12]  943 	mov	r2,a
      00013A EF               [12]  944 	mov	a,r7
      00013B B5 02 02         [24]  945 	cjne	a,ar2,00125$
      00013E 80 4A            [24]  946 	sjmp	00102$
      000140                        947 00125$:
                                    948 ;	.\ecen4350_lcd_v4.c:157: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      000140 85 0C 82         [24]  949 	mov	dpl,_seg7_address
      000143 85 0D 83         [24]  950 	mov	dph,(_seg7_address + 1)
                                    951 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    952 ;	assignBit
      000146 D2 B5            [12]  953 	setb	_P3_5
                                    954 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000148 74 8E            [12]  955 	mov	a,#0x8e
      00014A F0               [24]  956 	movx	@dptr,a
                                    957 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    958 ;	assignBit
      00014B C2 B5            [12]  959 	clr	_P3_5
                                    960 ;	.\ecen4350_lcd_v4.c:158: setCursor(0,0);
      00014D E4               [12]  961 	clr	a
      00014E F5 6B            [12]  962 	mov	_setCursor_PARM_2,a
      000150 F5 6C            [12]  963 	mov	(_setCursor_PARM_2 + 1),a
      000152 90 00 00         [24]  964 	mov	dptr,#0x0000
      000155 C0 07            [24]  965 	push	ar7
      000157 C0 06            [24]  966 	push	ar6
      000159 C0 05            [24]  967 	push	ar5
      00015B C0 04            [24]  968 	push	ar4
      00015D C0 03            [24]  969 	push	ar3
      00015F 12 05 BF         [24]  970 	lcall	_setCursor
                                    971 ;	.\ecen4350_lcd_v4.c:159: LCD_string_write("ERROR FOUND At: ");
      000162 90 5E 3B         [24]  972 	mov	dptr,#___str_0
      000165 75 F0 80         [24]  973 	mov	b,#0x80
      000168 12 10 D9         [24]  974 	lcall	_LCD_string_write
      00016B D0 03            [24]  975 	pop	ar3
      00016D D0 04            [24]  976 	pop	ar4
                                    977 ;	.\ecen4350_lcd_v4.c:160: print16Hex(i);
      00016F 8B 82            [24]  978 	mov	dpl,r3
      000171 8C 83            [24]  979 	mov	dph,r4
      000173 C0 04            [24]  980 	push	ar4
      000175 C0 03            [24]  981 	push	ar3
      000177 12 15 C1         [24]  982 	lcall	_print16Hex
                                    983 ;	.\ecen4350_lcd_v4.c:161: delay(40);
      00017A 90 00 28         [24]  984 	mov	dptr,#0x0028
      00017D 12 01 A9         [24]  985 	lcall	_delay
      000180 D0 03            [24]  986 	pop	ar3
      000182 D0 04            [24]  987 	pop	ar4
      000184 D0 05            [24]  988 	pop	ar5
      000186 D0 06            [24]  989 	pop	ar6
      000188 D0 07            [24]  990 	pop	ar7
      00018A                        991 00102$:
                                    992 ;	.\ecen4350_lcd_v4.c:163: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      00018A 85 0C 82         [24]  993 	mov	dpl,_seg7_address
      00018D 85 0D 83         [24]  994 	mov	dph,(_seg7_address + 1)
                                    995 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                    996 ;	assignBit
      000190 D2 B5            [12]  997 	setb	_P3_5
                                    998 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000192 74 8C            [12]  999 	mov	a,#0x8c
      000194 F0               [24] 1000 	movx	@dptr,a
                                   1001 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1002 ;	assignBit
      000195 C2 B5            [12] 1003 	clr	_P3_5
                                   1004 ;	.\ecen4350_lcd_v4.c:164: IOM = 1;
                                   1005 ;	assignBit
      000197 D2 B5            [12] 1006 	setb	_P3_5
                                   1007 ;	.\ecen4350_lcd_v4.c:152: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000199 0B               [12] 1008 	inc	r3
      00019A BB 00 09         [24] 1009 	cjne	r3,#0x00,00126$
      00019D 0C               [12] 1010 	inc	r4
      00019E BC 00 05         [24] 1011 	cjne	r4,#0x00,00126$
      0001A1 0D               [12] 1012 	inc	r5
      0001A2 BD 00 01         [24] 1013 	cjne	r5,#0x00,00126$
      0001A5 0E               [12] 1014 	inc	r6
      0001A6                       1015 00126$:
                                   1016 ;	.\ecen4350_lcd_v4.c:166: }
      0001A6 02 01 24         [24] 1017 	ljmp	00107$
                                   1018 ;------------------------------------------------------------
                                   1019 ;Allocation info for local variables in function 'delay'
                                   1020 ;------------------------------------------------------------
                                   1021 ;d                         Allocated to registers r6 r7 
                                   1022 ;i                         Allocated to registers r4 r5 
                                   1023 ;j                         Allocated to registers r2 r3 
                                   1024 ;------------------------------------------------------------
                                   1025 ;	.\ecen4350_lcd_v4.c:168: void delay(int d) /// x 1ms
                                   1026 ;	-----------------------------------------
                                   1027 ;	 function delay
                                   1028 ;	-----------------------------------------
      0001A9                       1029 _delay:
      0001A9 AE 82            [24] 1030 	mov	r6,dpl
      0001AB AF 83            [24] 1031 	mov	r7,dph
                                   1032 ;	.\ecen4350_lcd_v4.c:171: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0001AD 7C 00            [12] 1033 	mov	r4,#0x00
      0001AF 7D 00            [12] 1034 	mov	r5,#0x00
      0001B1                       1035 00107$:
      0001B1 C3               [12] 1036 	clr	c
      0001B2 EC               [12] 1037 	mov	a,r4
      0001B3 9E               [12] 1038 	subb	a,r6
      0001B4 ED               [12] 1039 	mov	a,r5
      0001B5 64 80            [12] 1040 	xrl	a,#0x80
      0001B7 8F F0            [24] 1041 	mov	b,r7
      0001B9 63 F0 80         [24] 1042 	xrl	b,#0x80
      0001BC 95 F0            [12] 1043 	subb	a,b
      0001BE 50 1B            [24] 1044 	jnc	00109$
                                   1045 ;	.\ecen4350_lcd_v4.c:173: for (j = 0; j < 1000; j++);
      0001C0 7A E8            [12] 1046 	mov	r2,#0xe8
      0001C2 7B 03            [12] 1047 	mov	r3,#0x03
      0001C4                       1048 00105$:
      0001C4 EA               [12] 1049 	mov	a,r2
      0001C5 24 FF            [12] 1050 	add	a,#0xff
      0001C7 F8               [12] 1051 	mov	r0,a
      0001C8 EB               [12] 1052 	mov	a,r3
      0001C9 34 FF            [12] 1053 	addc	a,#0xff
      0001CB F9               [12] 1054 	mov	r1,a
      0001CC 88 02            [24] 1055 	mov	ar2,r0
      0001CE 89 03            [24] 1056 	mov	ar3,r1
      0001D0 E8               [12] 1057 	mov	a,r0
      0001D1 49               [12] 1058 	orl	a,r1
      0001D2 70 F0            [24] 1059 	jnz	00105$
                                   1060 ;	.\ecen4350_lcd_v4.c:171: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0001D4 0C               [12] 1061 	inc	r4
      0001D5 BC 00 D9         [24] 1062 	cjne	r4,#0x00,00107$
      0001D8 0D               [12] 1063 	inc	r5
      0001D9 80 D6            [24] 1064 	sjmp	00107$
      0001DB                       1065 00109$:
                                   1066 ;	.\ecen4350_lcd_v4.c:175: }
      0001DB 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'UART_init'
                                   1070 ;------------------------------------------------------------
                                   1071 ;	.\ecen4350_lcd_v4.c:178: void UART_init(){
                                   1072 ;	-----------------------------------------
                                   1073 ;	 function UART_init
                                   1074 ;	-----------------------------------------
      0001DC                       1075 _UART_init:
                                   1076 ;	.\ecen4350_lcd_v4.c:179: TR1 = 1;      	// Turn ON the timer for Baud rate generation
                                   1077 ;	assignBit
      0001DC D2 8E            [12] 1078 	setb	_TR1
                                   1079 ;	.\ecen4350_lcd_v4.c:180: ES  = 1;		// Enable serial interrupt
                                   1080 ;	assignBit
      0001DE D2 AC            [12] 1081 	setb	_ES
                                   1082 ;	.\ecen4350_lcd_v4.c:181: EA  = 1;		// Enable global interrupts
                                   1083 ;	assignBit
      0001E0 D2 AF            [12] 1084 	setb	_EA
                                   1085 ;	.\ecen4350_lcd_v4.c:182: UART_en = 1;
      0001E2 78 72            [12] 1086 	mov	r0,#_UART_en
      0001E4 76 01            [12] 1087 	mov	@r0,#0x01
                                   1088 ;	.\ecen4350_lcd_v4.c:183: }
      0001E6 22               [24] 1089 	ret
                                   1090 ;------------------------------------------------------------
                                   1091 ;Allocation info for local variables in function 'UART_disable'
                                   1092 ;------------------------------------------------------------
                                   1093 ;	.\ecen4350_lcd_v4.c:185: void UART_disable(){
                                   1094 ;	-----------------------------------------
                                   1095 ;	 function UART_disable
                                   1096 ;	-----------------------------------------
      0001E7                       1097 _UART_disable:
                                   1098 ;	.\ecen4350_lcd_v4.c:186: TR1 = 0;
                                   1099 ;	assignBit
      0001E7 C2 8E            [12] 1100 	clr	_TR1
                                   1101 ;	.\ecen4350_lcd_v4.c:187: ES = 0;
                                   1102 ;	assignBit
      0001E9 C2 AC            [12] 1103 	clr	_ES
                                   1104 ;	.\ecen4350_lcd_v4.c:188: EA = 0;
                                   1105 ;	assignBit
      0001EB C2 AF            [12] 1106 	clr	_EA
                                   1107 ;	.\ecen4350_lcd_v4.c:189: TH1 = 0;
      0001ED 75 8D 00         [24] 1108 	mov	_TH1,#0x00
                                   1109 ;	.\ecen4350_lcd_v4.c:190: SCON = 0;
      0001F0 75 98 00         [24] 1110 	mov	_SCON,#0x00
                                   1111 ;	.\ecen4350_lcd_v4.c:191: PCON = 0;
      0001F3 75 87 00         [24] 1112 	mov	_PCON,#0x00
                                   1113 ;	.\ecen4350_lcd_v4.c:192: UART_en = 0;
      0001F6 78 72            [12] 1114 	mov	r0,#_UART_en
      0001F8 76 00            [12] 1115 	mov	@r0,#0x00
                                   1116 ;	.\ecen4350_lcd_v4.c:193: baudSet = 0;
      0001FA 78 73            [12] 1117 	mov	r0,#_baudSet
      0001FC 76 00            [12] 1118 	mov	@r0,#0x00
                                   1119 ;	.\ecen4350_lcd_v4.c:194: bitSet = 0;
      0001FE 78 74            [12] 1120 	mov	r0,#_bitSet
      000200 76 00            [12] 1121 	mov	@r0,#0x00
                                   1122 ;	.\ecen4350_lcd_v4.c:195: paritySet = 0;
      000202 78 75            [12] 1123 	mov	r0,#_paritySet
      000204 76 00            [12] 1124 	mov	@r0,#0x00
                                   1125 ;	.\ecen4350_lcd_v4.c:196: parityEven = 'null';
      000206 78 76            [12] 1126 	mov	r0,#_parityEven
      000208 76 6E            [12] 1127 	mov	@r0,#0x6e
                                   1128 ;	.\ecen4350_lcd_v4.c:197: parityBit = 'null';
      00020A 78 77            [12] 1129 	mov	r0,#_parityBit
      00020C 76 6E            [12] 1130 	mov	@r0,#0x6e
                                   1131 ;	.\ecen4350_lcd_v4.c:198: baudType = 'null';
      00020E 78 78            [12] 1132 	mov	r0,#_baudType
      000210 76 6E            [12] 1133 	mov	@r0,#0x6e
                                   1134 ;	.\ecen4350_lcd_v4.c:199: pType = 'null';
      000212 78 79            [12] 1135 	mov	r0,#_pType
      000214 76 6E            [12] 1136 	mov	@r0,#0x6e
                                   1137 ;	.\ecen4350_lcd_v4.c:200: _8b = 'null';
      000216 78 7A            [12] 1138 	mov	r0,#__8b
      000218 76 6E            [12] 1139 	mov	@r0,#0x6e
                                   1140 ;	.\ecen4350_lcd_v4.c:201: tempFrame = 'null';
      00021A 78 7B            [12] 1141 	mov	r0,#_tempFrame
      00021C 76 6E            [12] 1142 	mov	@r0,#0x6e
      00021E 08               [12] 1143 	inc	r0
      00021F 76 00            [12] 1144 	mov	@r0,#0x00
                                   1145 ;	.\ecen4350_lcd_v4.c:202: frame_NEP = 'null';
      000221 78 7D            [12] 1146 	mov	r0,#_frame_NEP
      000223 76 6E            [12] 1147 	mov	@r0,#0x6e
      000225 08               [12] 1148 	inc	r0
      000226 76 00            [12] 1149 	mov	@r0,#0x00
                                   1150 ;	.\ecen4350_lcd_v4.c:203: }
      000228 22               [24] 1151 	ret
                                   1152 ;------------------------------------------------------------
                                   1153 ;Allocation info for local variables in function 'UART_transmit'
                                   1154 ;------------------------------------------------------------
                                   1155 ;byte                      Allocated to registers 
                                   1156 ;------------------------------------------------------------
                                   1157 ;	.\ecen4350_lcd_v4.c:206: void UART_transmit(unsigned char byte){
                                   1158 ;	-----------------------------------------
                                   1159 ;	 function UART_transmit
                                   1160 ;	-----------------------------------------
      000229                       1161 _UART_transmit:
      000229 85 82 99         [24] 1162 	mov	_SBUF,dpl
                                   1163 ;	.\ecen4350_lcd_v4.c:208: while(TI == 1);
      00022C                       1164 00101$:
      00022C 20 99 FD         [24] 1165 	jb	_TI,00101$
                                   1166 ;	.\ecen4350_lcd_v4.c:209: TI = 0;
                                   1167 ;	assignBit
      00022F C2 99            [12] 1168 	clr	_TI
                                   1169 ;	.\ecen4350_lcd_v4.c:210: }
      000231 22               [24] 1170 	ret
                                   1171 ;------------------------------------------------------------
                                   1172 ;Allocation info for local variables in function 'ISR_receive'
                                   1173 ;------------------------------------------------------------
                                   1174 ;	.\ecen4350_lcd_v4.c:212: void ISR_receive() __interrupt (4) {
                                   1175 ;	-----------------------------------------
                                   1176 ;	 function ISR_receive
                                   1177 ;	-----------------------------------------
      000232                       1178 _ISR_receive:
                                   1179 ;	.\ecen4350_lcd_v4.c:213: if (RI == 1){
      000232 30 98 08         [24] 1180 	jnb	_RI,00103$
                                   1181 ;	.\ecen4350_lcd_v4.c:214: received_byte = SBUF;
      000235 85 99 0E         [24] 1182 	mov	_received_byte,_SBUF
                                   1183 ;	.\ecen4350_lcd_v4.c:215: RI = 0;
                                   1184 ;	assignBit
      000238 C2 98            [12] 1185 	clr	_RI
                                   1186 ;	.\ecen4350_lcd_v4.c:216: received_flag= 1;
      00023A 75 0F 01         [24] 1187 	mov	_received_flag,#0x01
      00023D                       1188 00103$:
                                   1189 ;	.\ecen4350_lcd_v4.c:218: }
      00023D 32               [24] 1190 	reti
                                   1191 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1192 ;	eliminated unneeded push/pop psw
                                   1193 ;	eliminated unneeded push/pop dpl
                                   1194 ;	eliminated unneeded push/pop dph
                                   1195 ;	eliminated unneeded push/pop b
                                   1196 ;	eliminated unneeded push/pop acc
                                   1197 ;------------------------------------------------------------
                                   1198 ;Allocation info for local variables in function 'writeRegister8'
                                   1199 ;------------------------------------------------------------
                                   1200 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1201 ;address                   Allocated to registers r7 
                                   1202 ;------------------------------------------------------------
                                   1203 ;	.\ecen4350_lcd_v4.c:220: void writeRegister8(u8 address, u8 d)
                                   1204 ;	-----------------------------------------
                                   1205 ;	 function writeRegister8
                                   1206 ;	-----------------------------------------
      00023E                       1207 _writeRegister8:
      00023E AF 82            [24] 1208 	mov	r7,dpl
                                   1209 ;	.\ecen4350_lcd_v4.c:223: CD = __CMD__;
                                   1210 ;	assignBit
      000240 C2 B4            [12] 1211 	clr	_P3_4
                                   1212 ;	.\ecen4350_lcd_v4.c:224: write8(address);
                                   1213 ;	assignBit
      000242 D2 B5            [12] 1214 	setb	_P3_5
      000244 85 0A 82         [24] 1215 	mov	dpl,_lcd_address
      000247 85 0B 83         [24] 1216 	mov	dph,(_lcd_address + 1)
      00024A EF               [12] 1217 	mov	a,r7
      00024B F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	assignBit
      00024C C2 B5            [12] 1220 	clr	_P3_5
                                   1221 ;	.\ecen4350_lcd_v4.c:225: CD = __DATA__;
                                   1222 ;	assignBit
      00024E D2 B4            [12] 1223 	setb	_P3_4
                                   1224 ;	.\ecen4350_lcd_v4.c:226: write8(d);
                                   1225 ;	assignBit
      000250 D2 B5            [12] 1226 	setb	_P3_5
      000252 85 0A 82         [24] 1227 	mov	dpl,_lcd_address
      000255 85 0B 83         [24] 1228 	mov	dph,(_lcd_address + 1)
      000258 E5 6B            [12] 1229 	mov	a,_writeRegister8_PARM_2
      00025A F0               [24] 1230 	movx	@dptr,a
                                   1231 ;	assignBit
      00025B C2 B5            [12] 1232 	clr	_P3_5
                                   1233 ;	.\ecen4350_lcd_v4.c:228: }
      00025D 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'writeRegister16'
                                   1237 ;------------------------------------------------------------
                                   1238 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1239 ;address                   Allocated to registers r6 r7 
                                   1240 ;hi                        Allocated to registers r6 r7 
                                   1241 ;lo                        Allocated to registers r4 r5 
                                   1242 ;------------------------------------------------------------
                                   1243 ;	.\ecen4350_lcd_v4.c:230: void writeRegister16(u16 address, u16 d)
                                   1244 ;	-----------------------------------------
                                   1245 ;	 function writeRegister16
                                   1246 ;	-----------------------------------------
      00025E                       1247 _writeRegister16:
      00025E AE 82            [24] 1248 	mov	r6,dpl
      000260 AF 83            [24] 1249 	mov	r7,dph
                                   1250 ;	.\ecen4350_lcd_v4.c:233: hi = (address) >> 8;
      000262 8F 04            [24] 1251 	mov	ar4,r7
                                   1252 ;	.\ecen4350_lcd_v4.c:234: lo = (address);
                                   1253 ;	.\ecen4350_lcd_v4.c:237: write8Reg(hi);
                                   1254 ;	assignBit
      000264 C2 B4            [12] 1255 	clr	_P3_4
                                   1256 ;	assignBit
      000266 D2 B5            [12] 1257 	setb	_P3_5
      000268 85 0A 82         [24] 1258 	mov	dpl,_lcd_address
      00026B 85 0B 83         [24] 1259 	mov	dph,(_lcd_address + 1)
      00026E EC               [12] 1260 	mov	a,r4
      00026F F0               [24] 1261 	movx	@dptr,a
                                   1262 ;	assignBit
      000270 C2 B5            [12] 1263 	clr	_P3_5
                                   1264 ;	.\ecen4350_lcd_v4.c:238: write8Reg(lo);
                                   1265 ;	assignBit
      000272 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	assignBit
      000274 D2 B5            [12] 1268 	setb	_P3_5
      000276 85 0A 82         [24] 1269 	mov	dpl,_lcd_address
      000279 85 0B 83         [24] 1270 	mov	dph,(_lcd_address + 1)
      00027C EE               [12] 1271 	mov	a,r6
      00027D F0               [24] 1272 	movx	@dptr,a
                                   1273 ;	assignBit
      00027E C2 B5            [12] 1274 	clr	_P3_5
                                   1275 ;	.\ecen4350_lcd_v4.c:239: hi = (d) >> 8;
      000280 AE 6C            [24] 1276 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1277 ;	.\ecen4350_lcd_v4.c:240: lo = (d);
      000282 AC 6B            [24] 1278 	mov	r4,_writeRegister16_PARM_2
                                   1279 ;	.\ecen4350_lcd_v4.c:241: CD = 1;
                                   1280 ;	assignBit
      000284 D2 B4            [12] 1281 	setb	_P3_4
                                   1282 ;	.\ecen4350_lcd_v4.c:242: write8Data(hi);
                                   1283 ;	assignBit
      000286 D2 B4            [12] 1284 	setb	_P3_4
                                   1285 ;	assignBit
      000288 D2 B5            [12] 1286 	setb	_P3_5
      00028A 85 0A 82         [24] 1287 	mov	dpl,_lcd_address
      00028D 85 0B 83         [24] 1288 	mov	dph,(_lcd_address + 1)
      000290 EE               [12] 1289 	mov	a,r6
      000291 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	assignBit
      000292 C2 B5            [12] 1292 	clr	_P3_5
                                   1293 ;	.\ecen4350_lcd_v4.c:243: write8Data(lo);
                                   1294 ;	assignBit
      000294 D2 B4            [12] 1295 	setb	_P3_4
                                   1296 ;	assignBit
      000296 D2 B5            [12] 1297 	setb	_P3_5
      000298 85 0A 82         [24] 1298 	mov	dpl,_lcd_address
      00029B 85 0B 83         [24] 1299 	mov	dph,(_lcd_address + 1)
      00029E EC               [12] 1300 	mov	a,r4
      00029F F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	assignBit
      0002A0 C2 B5            [12] 1303 	clr	_P3_5
                                   1304 ;	.\ecen4350_lcd_v4.c:245: }
      0002A2 22               [24] 1305 	ret
                                   1306 ;------------------------------------------------------------
                                   1307 ;Allocation info for local variables in function 'seg7Test'
                                   1308 ;------------------------------------------------------------
                                   1309 ;__1310720007              Allocated to registers 
                                   1310 ;__1310720008              Allocated to registers 
                                   1311 ;map_address               Allocated to registers 
                                   1312 ;d                         Allocated to registers 
                                   1313 ;__1310720010              Allocated to registers 
                                   1314 ;__1310720011              Allocated to registers 
                                   1315 ;map_address               Allocated to registers 
                                   1316 ;d                         Allocated to registers 
                                   1317 ;__1310720013              Allocated to registers 
                                   1318 ;__1310720014              Allocated to registers 
                                   1319 ;map_address               Allocated to registers 
                                   1320 ;d                         Allocated to registers 
                                   1321 ;__1310720016              Allocated to registers 
                                   1322 ;__1310720017              Allocated to registers 
                                   1323 ;map_address               Allocated to registers 
                                   1324 ;d                         Allocated to registers 
                                   1325 ;__1310720019              Allocated to registers 
                                   1326 ;__1310720020              Allocated to registers 
                                   1327 ;map_address               Allocated to registers 
                                   1328 ;d                         Allocated to registers 
                                   1329 ;__1310720022              Allocated to registers 
                                   1330 ;__1310720023              Allocated to registers 
                                   1331 ;map_address               Allocated to registers 
                                   1332 ;d                         Allocated to registers 
                                   1333 ;__1310720025              Allocated to registers 
                                   1334 ;__1310720026              Allocated to registers 
                                   1335 ;map_address               Allocated to registers 
                                   1336 ;d                         Allocated to registers 
                                   1337 ;__1310720028              Allocated to registers 
                                   1338 ;__1310720029              Allocated to registers 
                                   1339 ;map_address               Allocated to registers 
                                   1340 ;d                         Allocated to registers 
                                   1341 ;__1310720031              Allocated to registers 
                                   1342 ;__1310720032              Allocated to registers 
                                   1343 ;map_address               Allocated to registers 
                                   1344 ;d                         Allocated to registers 
                                   1345 ;__1310720034              Allocated to registers 
                                   1346 ;__1310720035              Allocated to registers 
                                   1347 ;map_address               Allocated to registers 
                                   1348 ;d                         Allocated to registers 
                                   1349 ;__1310720037              Allocated to registers 
                                   1350 ;__1310720038              Allocated to registers 
                                   1351 ;map_address               Allocated to registers 
                                   1352 ;d                         Allocated to registers 
                                   1353 ;__1310720040              Allocated to registers 
                                   1354 ;__1310720041              Allocated to registers 
                                   1355 ;map_address               Allocated to registers 
                                   1356 ;d                         Allocated to registers 
                                   1357 ;__1310720043              Allocated to registers 
                                   1358 ;__1310720044              Allocated to registers 
                                   1359 ;map_address               Allocated to registers 
                                   1360 ;d                         Allocated to registers 
                                   1361 ;__1310720046              Allocated to registers 
                                   1362 ;__1310720047              Allocated to registers 
                                   1363 ;map_address               Allocated to registers 
                                   1364 ;d                         Allocated to registers 
                                   1365 ;__1310720049              Allocated to registers 
                                   1366 ;__1310720050              Allocated to registers 
                                   1367 ;map_address               Allocated to registers 
                                   1368 ;d                         Allocated to registers 
                                   1369 ;__1310720052              Allocated to registers 
                                   1370 ;__1310720053              Allocated to registers 
                                   1371 ;map_address               Allocated to registers 
                                   1372 ;d                         Allocated to registers 
                                   1373 ;__1310720055              Allocated to registers 
                                   1374 ;__1310720056              Allocated to registers 
                                   1375 ;map_address               Allocated to registers 
                                   1376 ;d                         Allocated to registers 
                                   1377 ;__1310720058              Allocated to registers 
                                   1378 ;__1310720059              Allocated to registers 
                                   1379 ;map_address               Allocated to registers 
                                   1380 ;d                         Allocated to registers 
                                   1381 ;------------------------------------------------------------
                                   1382 ;	.\ecen4350_lcd_v4.c:247: void seg7Test(void)
                                   1383 ;	-----------------------------------------
                                   1384 ;	 function seg7Test
                                   1385 ;	-----------------------------------------
      0002A3                       1386 _seg7Test:
                                   1387 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      0002A3 90 00 04         [24] 1388 	mov	dptr,#0x0004
      0002A6 12 01 A9         [24] 1389 	lcall	_delay
                                   1390 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, ON);
      0002A9 85 0C 82         [24] 1391 	mov	dpl,_seg7_address
      0002AC 85 0D 83         [24] 1392 	mov	dph,(_seg7_address + 1)
                                   1393 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1394 ;	assignBit
      0002AF D2 B5            [12] 1395 	setb	_P3_5
                                   1396 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002B1 E4               [12] 1397 	clr	a
      0002B2 F0               [24] 1398 	movx	@dptr,a
                                   1399 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1400 ;	assignBit
      0002B3 C2 B5            [12] 1401 	clr	_P3_5
                                   1402 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      0002B5 90 00 04         [24] 1403 	mov	dptr,#0x0004
      0002B8 12 01 A9         [24] 1404 	lcall	_delay
                                   1405 ;	.\ecen4350_lcd_v4.c:252: iowrite8(seg7_address, ZERO);
      0002BB 85 0C 82         [24] 1406 	mov	dpl,_seg7_address
      0002BE 85 0D 83         [24] 1407 	mov	dph,(_seg7_address + 1)
                                   1408 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1409 ;	assignBit
      0002C1 D2 B5            [12] 1410 	setb	_P3_5
                                   1411 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002C3 74 C0            [12] 1412 	mov	a,#0xc0
      0002C5 F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1415 ;	assignBit
      0002C6 C2 B5            [12] 1416 	clr	_P3_5
                                   1417 ;	.\ecen4350_lcd_v4.c:253: delay(4);
      0002C8 90 00 04         [24] 1418 	mov	dptr,#0x0004
      0002CB 12 01 A9         [24] 1419 	lcall	_delay
                                   1420 ;	.\ecen4350_lcd_v4.c:254: iowrite8(seg7_address, ONE);
      0002CE 85 0C 82         [24] 1421 	mov	dpl,_seg7_address
      0002D1 85 0D 83         [24] 1422 	mov	dph,(_seg7_address + 1)
                                   1423 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1424 ;	assignBit
      0002D4 D2 B5            [12] 1425 	setb	_P3_5
                                   1426 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002D6 74 F9            [12] 1427 	mov	a,#0xf9
      0002D8 F0               [24] 1428 	movx	@dptr,a
                                   1429 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1430 ;	assignBit
      0002D9 C2 B5            [12] 1431 	clr	_P3_5
                                   1432 ;	.\ecen4350_lcd_v4.c:255: delay(4);
      0002DB 90 00 04         [24] 1433 	mov	dptr,#0x0004
      0002DE 12 01 A9         [24] 1434 	lcall	_delay
                                   1435 ;	.\ecen4350_lcd_v4.c:256: iowrite8(seg7_address, TWO);
      0002E1 85 0C 82         [24] 1436 	mov	dpl,_seg7_address
      0002E4 85 0D 83         [24] 1437 	mov	dph,(_seg7_address + 1)
                                   1438 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1439 ;	assignBit
      0002E7 D2 B5            [12] 1440 	setb	_P3_5
                                   1441 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002E9 74 A4            [12] 1442 	mov	a,#0xa4
      0002EB F0               [24] 1443 	movx	@dptr,a
                                   1444 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1445 ;	assignBit
      0002EC C2 B5            [12] 1446 	clr	_P3_5
                                   1447 ;	.\ecen4350_lcd_v4.c:257: delay(4);
      0002EE 90 00 04         [24] 1448 	mov	dptr,#0x0004
      0002F1 12 01 A9         [24] 1449 	lcall	_delay
                                   1450 ;	.\ecen4350_lcd_v4.c:258: iowrite8(seg7_address, THREE);
      0002F4 85 0C 82         [24] 1451 	mov	dpl,_seg7_address
      0002F7 85 0D 83         [24] 1452 	mov	dph,(_seg7_address + 1)
                                   1453 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1454 ;	assignBit
      0002FA D2 B5            [12] 1455 	setb	_P3_5
                                   1456 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0002FC 74 B0            [12] 1457 	mov	a,#0xb0
      0002FE F0               [24] 1458 	movx	@dptr,a
                                   1459 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1460 ;	assignBit
      0002FF C2 B5            [12] 1461 	clr	_P3_5
                                   1462 ;	.\ecen4350_lcd_v4.c:259: delay(4);
      000301 90 00 04         [24] 1463 	mov	dptr,#0x0004
      000304 12 01 A9         [24] 1464 	lcall	_delay
                                   1465 ;	.\ecen4350_lcd_v4.c:260: iowrite8(seg7_address, FOUR);
      000307 85 0C 82         [24] 1466 	mov	dpl,_seg7_address
      00030A 85 0D 83         [24] 1467 	mov	dph,(_seg7_address + 1)
                                   1468 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1469 ;	assignBit
      00030D D2 B5            [12] 1470 	setb	_P3_5
                                   1471 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00030F 74 99            [12] 1472 	mov	a,#0x99
      000311 F0               [24] 1473 	movx	@dptr,a
                                   1474 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1475 ;	assignBit
      000312 C2 B5            [12] 1476 	clr	_P3_5
                                   1477 ;	.\ecen4350_lcd_v4.c:261: delay(4);
      000314 90 00 04         [24] 1478 	mov	dptr,#0x0004
      000317 12 01 A9         [24] 1479 	lcall	_delay
                                   1480 ;	.\ecen4350_lcd_v4.c:262: iowrite8(seg7_address, FIVE);
      00031A 85 0C 82         [24] 1481 	mov	dpl,_seg7_address
      00031D 85 0D 83         [24] 1482 	mov	dph,(_seg7_address + 1)
                                   1483 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1484 ;	assignBit
      000320 D2 B5            [12] 1485 	setb	_P3_5
                                   1486 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000322 74 92            [12] 1487 	mov	a,#0x92
      000324 F0               [24] 1488 	movx	@dptr,a
                                   1489 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1490 ;	assignBit
      000325 C2 B5            [12] 1491 	clr	_P3_5
                                   1492 ;	.\ecen4350_lcd_v4.c:263: delay(4);
      000327 90 00 04         [24] 1493 	mov	dptr,#0x0004
      00032A 12 01 A9         [24] 1494 	lcall	_delay
                                   1495 ;	.\ecen4350_lcd_v4.c:264: iowrite8(seg7_address, SIX);
      00032D 85 0C 82         [24] 1496 	mov	dpl,_seg7_address
      000330 85 0D 83         [24] 1497 	mov	dph,(_seg7_address + 1)
                                   1498 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1499 ;	assignBit
      000333 D2 B5            [12] 1500 	setb	_P3_5
                                   1501 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000335 74 82            [12] 1502 	mov	a,#0x82
      000337 F0               [24] 1503 	movx	@dptr,a
                                   1504 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1505 ;	assignBit
      000338 C2 B5            [12] 1506 	clr	_P3_5
                                   1507 ;	.\ecen4350_lcd_v4.c:265: delay(4);
      00033A 90 00 04         [24] 1508 	mov	dptr,#0x0004
      00033D 12 01 A9         [24] 1509 	lcall	_delay
                                   1510 ;	.\ecen4350_lcd_v4.c:266: iowrite8(seg7_address, SEVEN);
      000340 85 0C 82         [24] 1511 	mov	dpl,_seg7_address
      000343 85 0D 83         [24] 1512 	mov	dph,(_seg7_address + 1)
                                   1513 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1514 ;	assignBit
      000346 D2 B5            [12] 1515 	setb	_P3_5
                                   1516 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000348 74 F8            [12] 1517 	mov	a,#0xf8
      00034A F0               [24] 1518 	movx	@dptr,a
                                   1519 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1520 ;	assignBit
      00034B C2 B5            [12] 1521 	clr	_P3_5
                                   1522 ;	.\ecen4350_lcd_v4.c:267: delay(4);
      00034D 90 00 04         [24] 1523 	mov	dptr,#0x0004
      000350 12 01 A9         [24] 1524 	lcall	_delay
                                   1525 ;	.\ecen4350_lcd_v4.c:268: iowrite8(seg7_address, EIGHT);
      000353 85 0C 82         [24] 1526 	mov	dpl,_seg7_address
      000356 85 0D 83         [24] 1527 	mov	dph,(_seg7_address + 1)
                                   1528 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1529 ;	assignBit
      000359 D2 B5            [12] 1530 	setb	_P3_5
                                   1531 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00035B 74 80            [12] 1532 	mov	a,#0x80
      00035D F0               [24] 1533 	movx	@dptr,a
                                   1534 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1535 ;	assignBit
      00035E C2 B5            [12] 1536 	clr	_P3_5
                                   1537 ;	.\ecen4350_lcd_v4.c:269: delay(4);
      000360 90 00 04         [24] 1538 	mov	dptr,#0x0004
      000363 12 01 A9         [24] 1539 	lcall	_delay
                                   1540 ;	.\ecen4350_lcd_v4.c:270: iowrite8(seg7_address, NINE);
      000366 85 0C 82         [24] 1541 	mov	dpl,_seg7_address
      000369 85 0D 83         [24] 1542 	mov	dph,(_seg7_address + 1)
                                   1543 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1544 ;	assignBit
      00036C D2 B5            [12] 1545 	setb	_P3_5
                                   1546 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00036E 74 98            [12] 1547 	mov	a,#0x98
      000370 F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1550 ;	assignBit
      000371 C2 B5            [12] 1551 	clr	_P3_5
                                   1552 ;	.\ecen4350_lcd_v4.c:271: delay(4);
      000373 90 00 04         [24] 1553 	mov	dptr,#0x0004
      000376 12 01 A9         [24] 1554 	lcall	_delay
                                   1555 ;	.\ecen4350_lcd_v4.c:272: iowrite8(seg7_address, SEG_A);
      000379 85 0C 82         [24] 1556 	mov	dpl,_seg7_address
      00037C 85 0D 83         [24] 1557 	mov	dph,(_seg7_address + 1)
                                   1558 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1559 ;	assignBit
      00037F D2 B5            [12] 1560 	setb	_P3_5
                                   1561 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000381 74 88            [12] 1562 	mov	a,#0x88
      000383 F0               [24] 1563 	movx	@dptr,a
                                   1564 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1565 ;	assignBit
      000384 C2 B5            [12] 1566 	clr	_P3_5
                                   1567 ;	.\ecen4350_lcd_v4.c:273: delay(4);
      000386 90 00 04         [24] 1568 	mov	dptr,#0x0004
      000389 12 01 A9         [24] 1569 	lcall	_delay
                                   1570 ;	.\ecen4350_lcd_v4.c:274: iowrite8(seg7_address, SEG_B);
      00038C 85 0C 82         [24] 1571 	mov	dpl,_seg7_address
      00038F 85 0D 83         [24] 1572 	mov	dph,(_seg7_address + 1)
                                   1573 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1574 ;	assignBit
      000392 D2 B5            [12] 1575 	setb	_P3_5
                                   1576 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000394 74 83            [12] 1577 	mov	a,#0x83
      000396 F0               [24] 1578 	movx	@dptr,a
                                   1579 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1580 ;	assignBit
      000397 C2 B5            [12] 1581 	clr	_P3_5
                                   1582 ;	.\ecen4350_lcd_v4.c:275: delay(4);
      000399 90 00 04         [24] 1583 	mov	dptr,#0x0004
      00039C 12 01 A9         [24] 1584 	lcall	_delay
                                   1585 ;	.\ecen4350_lcd_v4.c:276: iowrite8(seg7_address, SEG_C);
      00039F 85 0C 82         [24] 1586 	mov	dpl,_seg7_address
      0003A2 85 0D 83         [24] 1587 	mov	dph,(_seg7_address + 1)
                                   1588 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1589 ;	assignBit
      0003A5 D2 B5            [12] 1590 	setb	_P3_5
                                   1591 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003A7 74 C6            [12] 1592 	mov	a,#0xc6
      0003A9 F0               [24] 1593 	movx	@dptr,a
                                   1594 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1595 ;	assignBit
      0003AA C2 B5            [12] 1596 	clr	_P3_5
                                   1597 ;	.\ecen4350_lcd_v4.c:277: delay(4);
      0003AC 90 00 04         [24] 1598 	mov	dptr,#0x0004
      0003AF 12 01 A9         [24] 1599 	lcall	_delay
                                   1600 ;	.\ecen4350_lcd_v4.c:278: iowrite8(seg7_address, SEG_D);
      0003B2 85 0C 82         [24] 1601 	mov	dpl,_seg7_address
      0003B5 85 0D 83         [24] 1602 	mov	dph,(_seg7_address + 1)
                                   1603 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1604 ;	assignBit
      0003B8 D2 B5            [12] 1605 	setb	_P3_5
                                   1606 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003BA 74 A1            [12] 1607 	mov	a,#0xa1
      0003BC F0               [24] 1608 	movx	@dptr,a
                                   1609 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1610 ;	assignBit
      0003BD C2 B5            [12] 1611 	clr	_P3_5
                                   1612 ;	.\ecen4350_lcd_v4.c:279: delay(4);
      0003BF 90 00 04         [24] 1613 	mov	dptr,#0x0004
      0003C2 12 01 A9         [24] 1614 	lcall	_delay
                                   1615 ;	.\ecen4350_lcd_v4.c:280: iowrite8(seg7_address, SEG_E);
      0003C5 85 0C 82         [24] 1616 	mov	dpl,_seg7_address
      0003C8 85 0D 83         [24] 1617 	mov	dph,(_seg7_address + 1)
                                   1618 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1619 ;	assignBit
      0003CB D2 B5            [12] 1620 	setb	_P3_5
                                   1621 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003CD 74 86            [12] 1622 	mov	a,#0x86
      0003CF F0               [24] 1623 	movx	@dptr,a
                                   1624 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1625 ;	assignBit
      0003D0 C2 B5            [12] 1626 	clr	_P3_5
                                   1627 ;	.\ecen4350_lcd_v4.c:281: delay(4);
      0003D2 90 00 04         [24] 1628 	mov	dptr,#0x0004
      0003D5 12 01 A9         [24] 1629 	lcall	_delay
                                   1630 ;	.\ecen4350_lcd_v4.c:282: iowrite8(seg7_address, SEG_F);
      0003D8 85 0C 82         [24] 1631 	mov	dpl,_seg7_address
      0003DB 85 0D 83         [24] 1632 	mov	dph,(_seg7_address + 1)
                                   1633 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1634 ;	assignBit
      0003DE D2 B5            [12] 1635 	setb	_P3_5
                                   1636 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003E0 74 8E            [12] 1637 	mov	a,#0x8e
      0003E2 F0               [24] 1638 	movx	@dptr,a
                                   1639 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1640 ;	assignBit
      0003E3 C2 B5            [12] 1641 	clr	_P3_5
                                   1642 ;	.\ecen4350_lcd_v4.c:283: delay(4);
      0003E5 90 00 04         [24] 1643 	mov	dptr,#0x0004
      0003E8 12 01 A9         [24] 1644 	lcall	_delay
                                   1645 ;	.\ecen4350_lcd_v4.c:284: iowrite8(seg7_address, OFF);
      0003EB 85 0C 82         [24] 1646 	mov	dpl,_seg7_address
      0003EE 85 0D 83         [24] 1647 	mov	dph,(_seg7_address + 1)
                                   1648 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1649 ;	assignBit
      0003F1 D2 B5            [12] 1650 	setb	_P3_5
                                   1651 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0003F3 74 FF            [12] 1652 	mov	a,#0xff
      0003F5 F0               [24] 1653 	movx	@dptr,a
                                   1654 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1655 ;	assignBit
      0003F6 C2 B5            [12] 1656 	clr	_P3_5
                                   1657 ;	.\ecen4350_lcd_v4.c:285: delay(4);
      0003F8 90 00 04         [24] 1658 	mov	dptr,#0x0004
                                   1659 ;	.\ecen4350_lcd_v4.c:286: }
      0003FB 02 01 A9         [24] 1660 	ljmp	_delay
                                   1661 ;------------------------------------------------------------
                                   1662 ;Allocation info for local variables in function 'rtcInit'
                                   1663 ;------------------------------------------------------------
                                   1664 ;i                         Allocated to registers r6 r7 
                                   1665 ;------------------------------------------------------------
                                   1666 ;	.\ecen4350_lcd_v4.c:289: void rtcInit(void)
                                   1667 ;	-----------------------------------------
                                   1668 ;	 function rtcInit
                                   1669 ;	-----------------------------------------
      0003FE                       1670 _rtcInit:
                                   1671 ;	.\ecen4350_lcd_v4.c:293: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      0003FE 75 6B 07         [24] 1672 	mov	_rtcCmd_PARM_2,#0x07
      000401 90 00 0F         [24] 1673 	mov	dptr,#0x000f
      000404 12 04 42         [24] 1674 	lcall	_rtcCmd
                                   1675 ;	.\ecen4350_lcd_v4.c:296: for (i = __S1_REG__; i < __REG_D__; i++)
      000407 7E 00            [12] 1676 	mov	r6,#0x00
      000409 7F 00            [12] 1677 	mov	r7,#0x00
      00040B                       1678 00102$:
                                   1679 ;	.\ecen4350_lcd_v4.c:298: rtcWrite(i, 0x00);
      00040B 75 1E 00         [24] 1680 	mov	_rtcWrite_PARM_2,#0x00
      00040E 8E 82            [24] 1681 	mov	dpl,r6
      000410 8F 83            [24] 1682 	mov	dph,r7
      000412 C0 07            [24] 1683 	push	ar7
      000414 C0 06            [24] 1684 	push	ar6
      000416 12 04 4B         [24] 1685 	lcall	_rtcWrite
      000419 D0 06            [24] 1686 	pop	ar6
      00041B D0 07            [24] 1687 	pop	ar7
                                   1688 ;	.\ecen4350_lcd_v4.c:296: for (i = __S1_REG__; i < __REG_D__; i++)
      00041D 0E               [12] 1689 	inc	r6
      00041E BE 00 01         [24] 1690 	cjne	r6,#0x00,00115$
      000421 0F               [12] 1691 	inc	r7
      000422                       1692 00115$:
      000422 C3               [12] 1693 	clr	c
      000423 EE               [12] 1694 	mov	a,r6
      000424 94 0D            [12] 1695 	subb	a,#0x0d
      000426 EF               [12] 1696 	mov	a,r7
      000427 94 00            [12] 1697 	subb	a,#0x00
      000429 40 E0            [24] 1698 	jc	00102$
                                   1699 ;	.\ecen4350_lcd_v4.c:301: rtcCmd(__REG_F__, __HR_24__);
      00042B 75 6B 04         [24] 1700 	mov	_rtcCmd_PARM_2,#0x04
      00042E 90 00 0F         [24] 1701 	mov	dptr,#0x000f
                                   1702 ;	.\ecen4350_lcd_v4.c:302: }
      000431 02 04 42         [24] 1703 	ljmp	_rtcCmd
                                   1704 ;------------------------------------------------------------
                                   1705 ;Allocation info for local variables in function 'rtcBusy'
                                   1706 ;------------------------------------------------------------
                                   1707 ;__1310720061              Allocated to registers 
                                   1708 ;map_address               Allocated to registers 
                                   1709 ;__1310720062              Allocated to registers 
                                   1710 ;map_address               Allocated to registers 
                                   1711 ;d                         Allocated to registers r7 
                                   1712 ;------------------------------------------------------------
                                   1713 ;	.\ecen4350_lcd_v4.c:304: void rtcBusy(void)
                                   1714 ;	-----------------------------------------
                                   1715 ;	 function rtcBusy
                                   1716 ;	-----------------------------------------
      000434                       1717 _rtcBusy:
                                   1718 ;	.\ecen4350_lcd_v4.c:307: while ((ioread8(map_address) & 0x02))		;
      000434                       1719 00101$:
                                   1720 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   1721 ;	assignBit
      000434 D2 B5            [12] 1722 	setb	_P3_5
                                   1723 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000436 90 00 0D         [24] 1724 	mov	dptr,#0x000d
      000439 E0               [24] 1725 	movx	a,@dptr
      00043A FF               [12] 1726 	mov	r7,a
                                   1727 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   1728 ;	assignBit
      00043B C2 B5            [12] 1729 	clr	_P3_5
                                   1730 ;	.\ecen4350_lcd_v4.c:307: while ((ioread8(map_address) & 0x02))		;
      00043D EF               [12] 1731 	mov	a,r7
      00043E 20 E1 F3         [24] 1732 	jb	acc.1,00101$
                                   1733 ;	.\ecen4350_lcd_v4.c:308: }
      000441 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'rtcCmd'
                                   1737 ;------------------------------------------------------------
                                   1738 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1739 ;addr                      Allocated to registers r6 r7 
                                   1740 ;map_address               Allocated to registers 
                                   1741 ;__1310720064              Allocated to registers 
                                   1742 ;__1310720065              Allocated to registers r7 
                                   1743 ;map_address               Allocated to registers 
                                   1744 ;d                         Allocated to registers 
                                   1745 ;------------------------------------------------------------
                                   1746 ;	.\ecen4350_lcd_v4.c:310: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1747 ;	-----------------------------------------
                                   1748 ;	 function rtcCmd
                                   1749 ;	-----------------------------------------
      000442                       1750 _rtcCmd:
                                   1751 ;	.\ecen4350_lcd_v4.c:312: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1752 ;	.\ecen4350_lcd_v4.c:313: iowrite8(map_address, d);
      000442 AF 6B            [24] 1753 	mov	r7,_rtcCmd_PARM_2
                                   1754 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1755 ;	assignBit
      000444 D2 B5            [12] 1756 	setb	_P3_5
                                   1757 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000446 EF               [12] 1758 	mov	a,r7
      000447 F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1761 ;	assignBit
      000448 C2 B5            [12] 1762 	clr	_P3_5
                                   1763 ;	.\ecen4350_lcd_v4.c:313: iowrite8(map_address, d);
                                   1764 ;	.\ecen4350_lcd_v4.c:314: }
      00044A 22               [24] 1765 	ret
                                   1766 ;------------------------------------------------------------
                                   1767 ;Allocation info for local variables in function 'rtcWrite'
                                   1768 ;------------------------------------------------------------
                                   1769 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1770 ;addr                      Allocated to registers r6 r7 
                                   1771 ;map_address               Allocated to registers r6 r7 
                                   1772 ;__1310720067              Allocated to registers 
                                   1773 ;__1310720068              Allocated to registers 
                                   1774 ;addr                      Allocated to registers 
                                   1775 ;d                         Allocated to registers 
                                   1776 ;map_address               Allocated to registers 
                                   1777 ;__1310720064              Allocated to registers 
                                   1778 ;__1310720065              Allocated to registers 
                                   1779 ;map_address               Allocated to registers 
                                   1780 ;d                         Allocated to registers 
                                   1781 ;__1310720070              Allocated to registers 
                                   1782 ;__1310720071              Allocated to registers 
                                   1783 ;map_address               Allocated to registers 
                                   1784 ;d                         Allocated to registers 
                                   1785 ;__1310720073              Allocated to registers 
                                   1786 ;__1310720074              Allocated to registers r7 
                                   1787 ;addr                      Allocated to registers 
                                   1788 ;d                         Allocated to registers 
                                   1789 ;map_address               Allocated to registers 
                                   1790 ;__1310720064              Allocated to registers 
                                   1791 ;__1310720065              Allocated to registers 
                                   1792 ;map_address               Allocated to registers 
                                   1793 ;d                         Allocated to registers 
                                   1794 ;------------------------------------------------------------
                                   1795 ;	.\ecen4350_lcd_v4.c:316: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1796 ;	-----------------------------------------
                                   1797 ;	 function rtcWrite
                                   1798 ;	-----------------------------------------
      00044B                       1799 _rtcWrite:
      00044B AE 82            [24] 1800 	mov	r6,dpl
      00044D AF 83            [24] 1801 	mov	r7,dph
                                   1802 ;	.\ecen4350_lcd_v4.c:318: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1803 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1804 ;	assignBit
      00044F D2 B5            [12] 1805 	setb	_P3_5
                                   1806 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000451 90 00 0D         [24] 1807 	mov	dptr,#0x000d
      000454 74 01            [12] 1808 	mov	a,#0x01
      000456 F0               [24] 1809 	movx	@dptr,a
                                   1810 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1811 ;	assignBit
      000457 C2 B5            [12] 1812 	clr	_P3_5
                                   1813 ;	.\ecen4350_lcd_v4.c:320: rtcBusy();
      000459 C0 07            [24] 1814 	push	ar7
      00045B C0 06            [24] 1815 	push	ar6
      00045D 12 04 34         [24] 1816 	lcall	_rtcBusy
      000460 D0 06            [24] 1817 	pop	ar6
      000462 D0 07            [24] 1818 	pop	ar7
                                   1819 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1820 ;	assignBit
      000464 D2 B5            [12] 1821 	setb	_P3_5
                                   1822 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000466 8E 82            [24] 1823 	mov	dpl,r6
      000468 8F 83            [24] 1824 	mov	dph,r7
      00046A E4               [12] 1825 	clr	a
      00046B F0               [24] 1826 	movx	@dptr,a
                                   1827 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1828 ;	assignBit
      00046C C2 B5            [12] 1829 	clr	_P3_5
                                   1830 ;	.\ecen4350_lcd_v4.c:322: rtcCmd(__REG_D__, d);
      00046E AF 1E            [24] 1831 	mov	r7,_rtcWrite_PARM_2
                                   1832 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1833 ;	assignBit
      000470 D2 B5            [12] 1834 	setb	_P3_5
                                   1835 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000472 90 00 0D         [24] 1836 	mov	dptr,#0x000d
      000475 EF               [12] 1837 	mov	a,r7
      000476 F0               [24] 1838 	movx	@dptr,a
                                   1839 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1840 ;	assignBit
      000477 C2 B5            [12] 1841 	clr	_P3_5
                                   1842 ;	.\ecen4350_lcd_v4.c:322: rtcCmd(__REG_D__, d);
                                   1843 ;	.\ecen4350_lcd_v4.c:323: }
      000479 22               [24] 1844 	ret
                                   1845 ;------------------------------------------------------------
                                   1846 ;Allocation info for local variables in function 'rtcRead'
                                   1847 ;------------------------------------------------------------
                                   1848 ;addr                      Allocated to registers r6 r7 
                                   1849 ;__1310720079              Allocated to registers 
                                   1850 ;d                         Allocated to registers r7 
                                   1851 ;map_address               Allocated to registers r6 r7 
                                   1852 ;__1310720076              Allocated to registers 
                                   1853 ;__1310720077              Allocated to registers 
                                   1854 ;addr                      Allocated to registers 
                                   1855 ;d                         Allocated to registers 
                                   1856 ;map_address               Allocated to registers 
                                   1857 ;__1310720064              Allocated to registers 
                                   1858 ;__1310720065              Allocated to registers 
                                   1859 ;map_address               Allocated to registers 
                                   1860 ;d                         Allocated to registers 
                                   1861 ;__1310720080              Allocated to registers 
                                   1862 ;map_address               Allocated to registers 
                                   1863 ;d                         Allocated to registers r6 
                                   1864 ;__1310720082              Allocated to registers 
                                   1865 ;__1310720083              Allocated to registers 
                                   1866 ;addr                      Allocated to registers 
                                   1867 ;d                         Allocated to registers 
                                   1868 ;map_address               Allocated to registers 
                                   1869 ;__1310720064              Allocated to registers 
                                   1870 ;__1310720065              Allocated to registers 
                                   1871 ;map_address               Allocated to registers 
                                   1872 ;d                         Allocated to registers 
                                   1873 ;------------------------------------------------------------
                                   1874 ;	.\ecen4350_lcd_v4.c:325: inline unsigned char rtcRead(unsigned int addr)
                                   1875 ;	-----------------------------------------
                                   1876 ;	 function rtcRead
                                   1877 ;	-----------------------------------------
      00047A                       1878 _rtcRead:
      00047A AE 82            [24] 1879 	mov	r6,dpl
      00047C AF 83            [24] 1880 	mov	r7,dph
                                   1881 ;	.\ecen4350_lcd_v4.c:328: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1882 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1883 ;	assignBit
      00047E D2 B5            [12] 1884 	setb	_P3_5
                                   1885 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000480 90 00 0D         [24] 1886 	mov	dptr,#0x000d
      000483 74 01            [12] 1887 	mov	a,#0x01
      000485 F0               [24] 1888 	movx	@dptr,a
                                   1889 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1890 ;	assignBit
      000486 C2 B5            [12] 1891 	clr	_P3_5
                                   1892 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      000488 C0 07            [24] 1893 	push	ar7
      00048A C0 06            [24] 1894 	push	ar6
      00048C 12 04 34         [24] 1895 	lcall	_rtcBusy
      00048F D0 06            [24] 1896 	pop	ar6
      000491 D0 07            [24] 1897 	pop	ar7
                                   1898 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   1899 ;	assignBit
      000493 D2 B5            [12] 1900 	setb	_P3_5
                                   1901 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000495 8E 82            [24] 1902 	mov	dpl,r6
      000497 8F 83            [24] 1903 	mov	dph,r7
      000499 E0               [24] 1904 	movx	a,@dptr
      00049A FE               [12] 1905 	mov	r6,a
                                   1906 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   1907 ;	assignBit
      00049B C2 B5            [12] 1908 	clr	_P3_5
                                   1909 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00049D 74 0F            [12] 1910 	mov	a,#0x0f
      00049F 5E               [12] 1911 	anl	a,r6
      0004A0 44 30            [12] 1912 	orl	a,#0x30
      0004A2 FF               [12] 1913 	mov	r7,a
                                   1914 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   1915 ;	assignBit
      0004A3 D2 B5            [12] 1916 	setb	_P3_5
                                   1917 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004A5 90 00 0D         [24] 1918 	mov	dptr,#0x000d
      0004A8 E4               [12] 1919 	clr	a
      0004A9 F0               [24] 1920 	movx	@dptr,a
                                   1921 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   1922 ;	assignBit
      0004AA C2 B5            [12] 1923 	clr	_P3_5
                                   1924 ;	.\ecen4350_lcd_v4.c:335: return d;
      0004AC 8F 82            [24] 1925 	mov	dpl,r7
                                   1926 ;	.\ecen4350_lcd_v4.c:336: }
      0004AE 22               [24] 1927 	ret
                                   1928 ;------------------------------------------------------------
                                   1929 ;Allocation info for local variables in function 'rtcPrint'
                                   1930 ;------------------------------------------------------------
                                   1931 ;__1310720100              Allocated to registers 
                                   1932 ;__1310720097              Allocated to registers 
                                   1933 ;__1310720094              Allocated to registers 
                                   1934 ;__1310720091              Allocated to registers 
                                   1935 ;__1310720088              Allocated to registers 
                                   1936 ;__1310720085              Allocated to registers 
                                   1937 ;mi1                       Allocated to registers 
                                   1938 ;mi10                      Allocated to registers 
                                   1939 ;s1                        Allocated to registers 
                                   1940 ;s10                       Allocated to registers 
                                   1941 ;h1                        Allocated to registers 
                                   1942 ;h10                       Allocated to registers 
                                   1943 ;printval                  Allocated with name '_rtcPrint_printval_65536_226'
                                   1944 ;__1310720086              Allocated to registers 
                                   1945 ;addr                      Allocated to registers 
                                   1946 ;__1310720079              Allocated to registers 
                                   1947 ;d                         Allocated to registers r7 
                                   1948 ;map_address               Allocated to registers 
                                   1949 ;__1310720076              Allocated to registers 
                                   1950 ;__1310720077              Allocated to registers 
                                   1951 ;addr                      Allocated to registers 
                                   1952 ;d                         Allocated to registers 
                                   1953 ;map_address               Allocated to registers 
                                   1954 ;__1310720064              Allocated to registers 
                                   1955 ;__1310720065              Allocated to registers 
                                   1956 ;map_address               Allocated to registers 
                                   1957 ;d                         Allocated to registers 
                                   1958 ;__1310720080              Allocated to registers 
                                   1959 ;map_address               Allocated to registers 
                                   1960 ;d                         Allocated to registers r7 
                                   1961 ;__1310720082              Allocated to registers 
                                   1962 ;__1310720083              Allocated to registers 
                                   1963 ;addr                      Allocated to registers 
                                   1964 ;d                         Allocated to registers 
                                   1965 ;map_address               Allocated to registers 
                                   1966 ;__1310720064              Allocated to registers 
                                   1967 ;__1310720065              Allocated to registers 
                                   1968 ;map_address               Allocated to registers 
                                   1969 ;d                         Allocated to registers 
                                   1970 ;__1310720089              Allocated to registers 
                                   1971 ;addr                      Allocated to registers 
                                   1972 ;__1310720079              Allocated to registers 
                                   1973 ;d                         Allocated to registers r6 
                                   1974 ;map_address               Allocated to registers 
                                   1975 ;__1310720076              Allocated to registers 
                                   1976 ;__1310720077              Allocated to registers 
                                   1977 ;addr                      Allocated to registers 
                                   1978 ;d                         Allocated to registers 
                                   1979 ;map_address               Allocated to registers 
                                   1980 ;__1310720064              Allocated to registers 
                                   1981 ;__1310720065              Allocated to registers 
                                   1982 ;map_address               Allocated to registers 
                                   1983 ;d                         Allocated to registers 
                                   1984 ;__1310720080              Allocated to registers 
                                   1985 ;map_address               Allocated to registers 
                                   1986 ;d                         Allocated to registers r6 
                                   1987 ;__1310720082              Allocated to registers 
                                   1988 ;__1310720083              Allocated to registers 
                                   1989 ;addr                      Allocated to registers 
                                   1990 ;d                         Allocated to registers 
                                   1991 ;map_address               Allocated to registers 
                                   1992 ;__1310720064              Allocated to registers 
                                   1993 ;__1310720065              Allocated to registers 
                                   1994 ;map_address               Allocated to registers 
                                   1995 ;d                         Allocated to registers 
                                   1996 ;__1310720092              Allocated to registers 
                                   1997 ;addr                      Allocated to registers 
                                   1998 ;__1310720079              Allocated to registers 
                                   1999 ;d                         Allocated to registers r5 
                                   2000 ;map_address               Allocated to registers 
                                   2001 ;__1310720076              Allocated to registers 
                                   2002 ;__1310720077              Allocated to registers 
                                   2003 ;addr                      Allocated to registers 
                                   2004 ;d                         Allocated to registers 
                                   2005 ;map_address               Allocated to registers 
                                   2006 ;__1310720064              Allocated to registers 
                                   2007 ;__1310720065              Allocated to registers 
                                   2008 ;map_address               Allocated to registers 
                                   2009 ;d                         Allocated to registers 
                                   2010 ;__1310720080              Allocated to registers 
                                   2011 ;map_address               Allocated to registers 
                                   2012 ;d                         Allocated to registers r5 
                                   2013 ;__1310720082              Allocated to registers 
                                   2014 ;__1310720083              Allocated to registers 
                                   2015 ;addr                      Allocated to registers 
                                   2016 ;d                         Allocated to registers 
                                   2017 ;map_address               Allocated to registers 
                                   2018 ;__1310720064              Allocated to registers 
                                   2019 ;__1310720065              Allocated to registers 
                                   2020 ;map_address               Allocated to registers 
                                   2021 ;d                         Allocated to registers 
                                   2022 ;__1310720095              Allocated to registers 
                                   2023 ;addr                      Allocated to registers 
                                   2024 ;__1310720079              Allocated to registers 
                                   2025 ;d                         Allocated to registers r4 
                                   2026 ;map_address               Allocated to registers 
                                   2027 ;__1310720076              Allocated to registers 
                                   2028 ;__1310720077              Allocated to registers 
                                   2029 ;addr                      Allocated to registers 
                                   2030 ;d                         Allocated to registers 
                                   2031 ;map_address               Allocated to registers 
                                   2032 ;__1310720064              Allocated to registers 
                                   2033 ;__1310720065              Allocated to registers 
                                   2034 ;map_address               Allocated to registers 
                                   2035 ;d                         Allocated to registers 
                                   2036 ;__1310720080              Allocated to registers 
                                   2037 ;map_address               Allocated to registers 
                                   2038 ;d                         Allocated to registers r4 
                                   2039 ;__1310720082              Allocated to registers 
                                   2040 ;__1310720083              Allocated to registers 
                                   2041 ;addr                      Allocated to registers 
                                   2042 ;d                         Allocated to registers 
                                   2043 ;map_address               Allocated to registers 
                                   2044 ;__1310720064              Allocated to registers 
                                   2045 ;__1310720065              Allocated to registers 
                                   2046 ;map_address               Allocated to registers 
                                   2047 ;d                         Allocated to registers 
                                   2048 ;__1310720098              Allocated to registers 
                                   2049 ;addr                      Allocated to registers 
                                   2050 ;__1310720079              Allocated to registers 
                                   2051 ;d                         Allocated to registers r3 
                                   2052 ;map_address               Allocated to registers 
                                   2053 ;__1310720076              Allocated to registers 
                                   2054 ;__1310720077              Allocated to registers 
                                   2055 ;addr                      Allocated to registers 
                                   2056 ;d                         Allocated to registers 
                                   2057 ;map_address               Allocated to registers 
                                   2058 ;__1310720064              Allocated to registers 
                                   2059 ;__1310720065              Allocated to registers 
                                   2060 ;map_address               Allocated to registers 
                                   2061 ;d                         Allocated to registers 
                                   2062 ;__1310720080              Allocated to registers 
                                   2063 ;map_address               Allocated to registers 
                                   2064 ;d                         Allocated to registers r3 
                                   2065 ;__1310720082              Allocated to registers 
                                   2066 ;__1310720083              Allocated to registers 
                                   2067 ;addr                      Allocated to registers 
                                   2068 ;d                         Allocated to registers 
                                   2069 ;map_address               Allocated to registers 
                                   2070 ;__1310720064              Allocated to registers 
                                   2071 ;__1310720065              Allocated to registers 
                                   2072 ;map_address               Allocated to registers 
                                   2073 ;d                         Allocated to registers 
                                   2074 ;__1310720101              Allocated to registers 
                                   2075 ;addr                      Allocated to registers 
                                   2076 ;__1310720079              Allocated to registers 
                                   2077 ;d                         Allocated to registers r2 
                                   2078 ;map_address               Allocated to registers 
                                   2079 ;__1310720076              Allocated to registers 
                                   2080 ;__1310720077              Allocated to registers 
                                   2081 ;addr                      Allocated to registers 
                                   2082 ;d                         Allocated to registers 
                                   2083 ;map_address               Allocated to registers 
                                   2084 ;__1310720064              Allocated to registers 
                                   2085 ;__1310720065              Allocated to registers 
                                   2086 ;map_address               Allocated to registers 
                                   2087 ;d                         Allocated to registers 
                                   2088 ;__1310720080              Allocated to registers 
                                   2089 ;map_address               Allocated to registers 
                                   2090 ;d                         Allocated to registers r2 
                                   2091 ;__1310720082              Allocated to registers 
                                   2092 ;__1310720083              Allocated to registers 
                                   2093 ;addr                      Allocated to registers 
                                   2094 ;d                         Allocated to registers 
                                   2095 ;map_address               Allocated to registers 
                                   2096 ;__1310720064              Allocated to registers 
                                   2097 ;__1310720065              Allocated to registers 
                                   2098 ;map_address               Allocated to registers 
                                   2099 ;d                         Allocated to registers 
                                   2100 ;------------------------------------------------------------
                                   2101 ;	.\ecen4350_lcd_v4.c:338: void rtcPrint(void)
                                   2102 ;	-----------------------------------------
                                   2103 ;	 function rtcPrint
                                   2104 ;	-----------------------------------------
      0004AF                       2105 _rtcPrint:
                                   2106 ;	.\ecen4350_lcd_v4.c:342: printval[8] = '\0'; // end with address null character for string
      0004AF 75 27 00         [24] 2107 	mov	(_rtcPrint_printval_65536_226 + 0x0008),#0x00
                                   2108 ;	.\ecen4350_lcd_v4.c:343: printval[2] = ':';
      0004B2 75 21 3A         [24] 2109 	mov	(_rtcPrint_printval_65536_226 + 0x0002),#0x3a
                                   2110 ;	.\ecen4350_lcd_v4.c:344: printval[5] = ':';
      0004B5 75 24 3A         [24] 2111 	mov	(_rtcPrint_printval_65536_226 + 0x0005),#0x3a
                                   2112 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2113 ;	assignBit
      0004B8 D2 B5            [12] 2114 	setb	_P3_5
                                   2115 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004BA 90 00 0D         [24] 2116 	mov	dptr,#0x000d
      0004BD 74 01            [12] 2117 	mov	a,#0x01
      0004BF F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2120 ;	assignBit
      0004C0 C2 B5            [12] 2121 	clr	_P3_5
                                   2122 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      0004C2 12 04 34         [24] 2123 	lcall	_rtcBusy
                                   2124 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2125 ;	assignBit
      0004C5 D2 B5            [12] 2126 	setb	_P3_5
                                   2127 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0004C7 90 00 02         [24] 2128 	mov	dptr,#0x0002
      0004CA E0               [24] 2129 	movx	a,@dptr
      0004CB FF               [12] 2130 	mov	r7,a
                                   2131 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2132 ;	assignBit
      0004CC C2 B5            [12] 2133 	clr	_P3_5
                                   2134 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004CE 74 0F            [12] 2135 	mov	a,#0x0f
      0004D0 5F               [12] 2136 	anl	a,r7
      0004D1 44 30            [12] 2137 	orl	a,#0x30
      0004D3 FF               [12] 2138 	mov	r7,a
                                   2139 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2140 ;	assignBit
      0004D4 D2 B5            [12] 2141 	setb	_P3_5
                                   2142 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004D6 90 00 0D         [24] 2143 	mov	dptr,#0x000d
      0004D9 E4               [12] 2144 	clr	a
      0004DA F0               [24] 2145 	movx	@dptr,a
                                   2146 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2147 ;	assignBit
      0004DB C2 B5            [12] 2148 	clr	_P3_5
                                   2149 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2150 ;	assignBit
      0004DD D2 B5            [12] 2151 	setb	_P3_5
                                   2152 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004DF 90 00 0D         [24] 2153 	mov	dptr,#0x000d
      0004E2 74 01            [12] 2154 	mov	a,#0x01
      0004E4 F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2157 ;	assignBit
      0004E5 C2 B5            [12] 2158 	clr	_P3_5
                                   2159 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      0004E7 C0 07            [24] 2160 	push	ar7
      0004E9 12 04 34         [24] 2161 	lcall	_rtcBusy
                                   2162 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2163 ;	assignBit
      0004EC D2 B5            [12] 2164 	setb	_P3_5
                                   2165 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      0004EE 90 00 03         [24] 2166 	mov	dptr,#0x0003
      0004F1 E0               [24] 2167 	movx	a,@dptr
      0004F2 FE               [12] 2168 	mov	r6,a
                                   2169 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2170 ;	assignBit
      0004F3 C2 B5            [12] 2171 	clr	_P3_5
                                   2172 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004F5 74 0F            [12] 2173 	mov	a,#0x0f
      0004F7 5E               [12] 2174 	anl	a,r6
      0004F8 44 30            [12] 2175 	orl	a,#0x30
      0004FA FE               [12] 2176 	mov	r6,a
                                   2177 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2178 ;	assignBit
      0004FB D2 B5            [12] 2179 	setb	_P3_5
                                   2180 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0004FD 90 00 0D         [24] 2181 	mov	dptr,#0x000d
      000500 E4               [12] 2182 	clr	a
      000501 F0               [24] 2183 	movx	@dptr,a
                                   2184 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2185 ;	assignBit
      000502 C2 B5            [12] 2186 	clr	_P3_5
                                   2187 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2188 ;	assignBit
      000504 D2 B5            [12] 2189 	setb	_P3_5
                                   2190 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000506 90 00 0D         [24] 2191 	mov	dptr,#0x000d
      000509 74 01            [12] 2192 	mov	a,#0x01
      00050B F0               [24] 2193 	movx	@dptr,a
                                   2194 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2195 ;	assignBit
      00050C C2 B5            [12] 2196 	clr	_P3_5
                                   2197 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      00050E C0 06            [24] 2198 	push	ar6
      000510 12 04 34         [24] 2199 	lcall	_rtcBusy
                                   2200 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2201 ;	assignBit
      000513 D2 B5            [12] 2202 	setb	_P3_5
                                   2203 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000515 90 00 04         [24] 2204 	mov	dptr,#0x0004
      000518 E0               [24] 2205 	movx	a,@dptr
      000519 FD               [12] 2206 	mov	r5,a
                                   2207 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2208 ;	assignBit
      00051A C2 B5            [12] 2209 	clr	_P3_5
                                   2210 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00051C 74 0F            [12] 2211 	mov	a,#0x0f
      00051E 5D               [12] 2212 	anl	a,r5
      00051F 44 30            [12] 2213 	orl	a,#0x30
      000521 FD               [12] 2214 	mov	r5,a
                                   2215 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2216 ;	assignBit
      000522 D2 B5            [12] 2217 	setb	_P3_5
                                   2218 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000524 90 00 0D         [24] 2219 	mov	dptr,#0x000d
      000527 E4               [12] 2220 	clr	a
      000528 F0               [24] 2221 	movx	@dptr,a
                                   2222 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2223 ;	assignBit
      000529 C2 B5            [12] 2224 	clr	_P3_5
                                   2225 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2226 ;	assignBit
      00052B D2 B5            [12] 2227 	setb	_P3_5
                                   2228 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00052D 90 00 0D         [24] 2229 	mov	dptr,#0x000d
      000530 74 01            [12] 2230 	mov	a,#0x01
      000532 F0               [24] 2231 	movx	@dptr,a
                                   2232 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2233 ;	assignBit
      000533 C2 B5            [12] 2234 	clr	_P3_5
                                   2235 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      000535 C0 05            [24] 2236 	push	ar5
      000537 12 04 34         [24] 2237 	lcall	_rtcBusy
                                   2238 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2239 ;	assignBit
      00053A D2 B5            [12] 2240 	setb	_P3_5
                                   2241 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      00053C 90 00 05         [24] 2242 	mov	dptr,#0x0005
      00053F E0               [24] 2243 	movx	a,@dptr
      000540 FC               [12] 2244 	mov	r4,a
                                   2245 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2246 ;	assignBit
      000541 C2 B5            [12] 2247 	clr	_P3_5
                                   2248 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000543 74 0F            [12] 2249 	mov	a,#0x0f
      000545 5C               [12] 2250 	anl	a,r4
      000546 44 30            [12] 2251 	orl	a,#0x30
      000548 FC               [12] 2252 	mov	r4,a
                                   2253 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2254 ;	assignBit
      000549 D2 B5            [12] 2255 	setb	_P3_5
                                   2256 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00054B 90 00 0D         [24] 2257 	mov	dptr,#0x000d
      00054E E4               [12] 2258 	clr	a
      00054F F0               [24] 2259 	movx	@dptr,a
                                   2260 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2261 ;	assignBit
      000550 C2 B5            [12] 2262 	clr	_P3_5
                                   2263 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2264 ;	assignBit
      000552 D2 B5            [12] 2265 	setb	_P3_5
                                   2266 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000554 90 00 0D         [24] 2267 	mov	dptr,#0x000d
      000557 74 01            [12] 2268 	mov	a,#0x01
      000559 F0               [24] 2269 	movx	@dptr,a
                                   2270 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2271 ;	assignBit
      00055A C2 B5            [12] 2272 	clr	_P3_5
                                   2273 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      00055C C0 04            [24] 2274 	push	ar4
      00055E 12 04 34         [24] 2275 	lcall	_rtcBusy
                                   2276 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2277 ;	assignBit
      000561 D2 B5            [12] 2278 	setb	_P3_5
                                   2279 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000563 90 00 00         [24] 2280 	mov	dptr,#0x0000
      000566 E0               [24] 2281 	movx	a,@dptr
      000567 FB               [12] 2282 	mov	r3,a
                                   2283 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2284 ;	assignBit
      000568 C2 B5            [12] 2285 	clr	_P3_5
                                   2286 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00056A 74 0F            [12] 2287 	mov	a,#0x0f
      00056C 5B               [12] 2288 	anl	a,r3
      00056D 44 30            [12] 2289 	orl	a,#0x30
      00056F FB               [12] 2290 	mov	r3,a
                                   2291 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2292 ;	assignBit
      000570 D2 B5            [12] 2293 	setb	_P3_5
                                   2294 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      000572 90 00 0D         [24] 2295 	mov	dptr,#0x000d
      000575 E4               [12] 2296 	clr	a
      000576 F0               [24] 2297 	movx	@dptr,a
                                   2298 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2299 ;	assignBit
      000577 C2 B5            [12] 2300 	clr	_P3_5
                                   2301 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2302 ;	assignBit
      000579 D2 B5            [12] 2303 	setb	_P3_5
                                   2304 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00057B 90 00 0D         [24] 2305 	mov	dptr,#0x000d
      00057E 74 01            [12] 2306 	mov	a,#0x01
      000580 F0               [24] 2307 	movx	@dptr,a
                                   2308 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2309 ;	assignBit
      000581 C2 B5            [12] 2310 	clr	_P3_5
                                   2311 ;	.\ecen4350_lcd_v4.c:330: rtcBusy();
      000583 C0 03            [24] 2312 	push	ar3
      000585 12 04 34         [24] 2313 	lcall	_rtcBusy
      000588 D0 03            [24] 2314 	pop	ar3
      00058A D0 04            [24] 2315 	pop	ar4
      00058C D0 05            [24] 2316 	pop	ar5
      00058E D0 06            [24] 2317 	pop	ar6
      000590 D0 07            [24] 2318 	pop	ar7
                                   2319 ;	.\ecen4350_lcd_v4.c:113: IOM = 1;
                                   2320 ;	assignBit
      000592 D2 B5            [12] 2321 	setb	_P3_5
                                   2322 ;	.\ecen4350_lcd_v4.c:114: d = *map_address;
      000594 90 00 01         [24] 2323 	mov	dptr,#0x0001
      000597 E0               [24] 2324 	movx	a,@dptr
      000598 FA               [12] 2325 	mov	r2,a
                                   2326 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   2327 ;	assignBit
      000599 C2 B5            [12] 2328 	clr	_P3_5
                                   2329 ;	.\ecen4350_lcd_v4.c:333: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00059B 74 0F            [12] 2330 	mov	a,#0x0f
      00059D 5A               [12] 2331 	anl	a,r2
      00059E 44 30            [12] 2332 	orl	a,#0x30
      0005A0 FA               [12] 2333 	mov	r2,a
                                   2334 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                   2335 ;	assignBit
      0005A1 D2 B5            [12] 2336 	setb	_P3_5
                                   2337 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0005A3 90 00 0D         [24] 2338 	mov	dptr,#0x000d
      0005A6 E4               [12] 2339 	clr	a
      0005A7 F0               [24] 2340 	movx	@dptr,a
                                   2341 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   2342 ;	assignBit
      0005A8 C2 B5            [12] 2343 	clr	_P3_5
                                   2344 ;	.\ecen4350_lcd_v4.c:358: printval[0] = h10;
      0005AA 8C 1F            [24] 2345 	mov	_rtcPrint_printval_65536_226,r4
                                   2346 ;	.\ecen4350_lcd_v4.c:359: printval[1] = h1;
      0005AC 8D 20            [24] 2347 	mov	(_rtcPrint_printval_65536_226 + 0x0001),r5
                                   2348 ;	.\ecen4350_lcd_v4.c:360: printval[3] = mi10;
      0005AE 8E 22            [24] 2349 	mov	(_rtcPrint_printval_65536_226 + 0x0003),r6
                                   2350 ;	.\ecen4350_lcd_v4.c:361: printval[4] = mi1;
      0005B0 8F 23            [24] 2351 	mov	(_rtcPrint_printval_65536_226 + 0x0004),r7
                                   2352 ;	.\ecen4350_lcd_v4.c:362: printval[6] = s10;
      0005B2 8A 25            [24] 2353 	mov	(_rtcPrint_printval_65536_226 + 0x0006),r2
                                   2354 ;	.\ecen4350_lcd_v4.c:363: printval[7] = s1;
      0005B4 8B 26            [24] 2355 	mov	(_rtcPrint_printval_65536_226 + 0x0007),r3
                                   2356 ;	.\ecen4350_lcd_v4.c:364: LCD_string_write(printval);
      0005B6 90 00 1F         [24] 2357 	mov	dptr,#_rtcPrint_printval_65536_226
      0005B9 75 F0 40         [24] 2358 	mov	b,#0x40
                                   2359 ;	.\ecen4350_lcd_v4.c:365: }
      0005BC 02 10 D9         [24] 2360 	ljmp	_LCD_string_write
                                   2361 ;------------------------------------------------------------
                                   2362 ;Allocation info for local variables in function 'setCursor'
                                   2363 ;------------------------------------------------------------
                                   2364 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2365 ;x                         Allocated to registers 
                                   2366 ;------------------------------------------------------------
                                   2367 ;	.\ecen4350_lcd_v4.c:367: void setCursor(u16 x, u16 y)
                                   2368 ;	-----------------------------------------
                                   2369 ;	 function setCursor
                                   2370 ;	-----------------------------------------
      0005BF                       2371 _setCursor:
      0005BF 85 82 10         [24] 2372 	mov	_cursor_x,dpl
      0005C2 85 83 11         [24] 2373 	mov	(_cursor_x + 1),dph
                                   2374 ;	.\ecen4350_lcd_v4.c:370: cursor_y = y;
      0005C5 85 6B 12         [24] 2375 	mov	_cursor_y,_setCursor_PARM_2
      0005C8 85 6C 13         [24] 2376 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2377 ;	.\ecen4350_lcd_v4.c:371: }
      0005CB 22               [24] 2378 	ret
                                   2379 ;------------------------------------------------------------
                                   2380 ;Allocation info for local variables in function 'setTextColor'
                                   2381 ;------------------------------------------------------------
                                   2382 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2383 ;x                         Allocated to registers 
                                   2384 ;------------------------------------------------------------
                                   2385 ;	.\ecen4350_lcd_v4.c:373: void setTextColor(u16 x, u16 y)
                                   2386 ;	-----------------------------------------
                                   2387 ;	 function setTextColor
                                   2388 ;	-----------------------------------------
      0005CC                       2389 _setTextColor:
      0005CC 85 82 16         [24] 2390 	mov	_textcolor,dpl
      0005CF 85 83 17         [24] 2391 	mov	(_textcolor + 1),dph
                                   2392 ;	.\ecen4350_lcd_v4.c:376: textbgcolor = y;
      0005D2 85 6B 18         [24] 2393 	mov	_textbgcolor,_setTextColor_PARM_2
      0005D5 85 6C 19         [24] 2394 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2395 ;	.\ecen4350_lcd_v4.c:377: }
      0005D8 22               [24] 2396 	ret
                                   2397 ;------------------------------------------------------------
                                   2398 ;Allocation info for local variables in function 'setTextSize'
                                   2399 ;------------------------------------------------------------
                                   2400 ;s                         Allocated to registers r7 
                                   2401 ;------------------------------------------------------------
                                   2402 ;	.\ecen4350_lcd_v4.c:380: void setTextSize(u8 s)
                                   2403 ;	-----------------------------------------
                                   2404 ;	 function setTextSize
                                   2405 ;	-----------------------------------------
      0005D9                       2406 _setTextSize:
                                   2407 ;	.\ecen4350_lcd_v4.c:382: if (s > 8)
      0005D9 E5 82            [12] 2408 	mov	a,dpl
      0005DB FF               [12] 2409 	mov	r7,a
      0005DC 24 F7            [12] 2410 	add	a,#0xff - 0x08
      0005DE 50 01            [24] 2411 	jnc	00102$
                                   2412 ;	.\ecen4350_lcd_v4.c:383: return;
      0005E0 22               [24] 2413 	ret
      0005E1                       2414 00102$:
                                   2415 ;	.\ecen4350_lcd_v4.c:384: textsize = (s > 0) ? s : 1;
      0005E1 EF               [12] 2416 	mov	a,r7
      0005E2 60 06            [24] 2417 	jz	00105$
      0005E4 8F 06            [24] 2418 	mov	ar6,r7
      0005E6 7F 00            [12] 2419 	mov	r7,#0x00
      0005E8 80 04            [24] 2420 	sjmp	00106$
      0005EA                       2421 00105$:
      0005EA 7E 01            [12] 2422 	mov	r6,#0x01
      0005EC 7F 00            [12] 2423 	mov	r7,#0x00
      0005EE                       2424 00106$:
      0005EE 8E 14            [24] 2425 	mov	_textsize,r6
                                   2426 ;	.\ecen4350_lcd_v4.c:385: }
      0005F0 22               [24] 2427 	ret
                                   2428 ;------------------------------------------------------------
                                   2429 ;Allocation info for local variables in function 'setRotation'
                                   2430 ;------------------------------------------------------------
                                   2431 ;flag                      Allocated to registers r7 
                                   2432 ;------------------------------------------------------------
                                   2433 ;	.\ecen4350_lcd_v4.c:387: void setRotation(u8 flag)
                                   2434 ;	-----------------------------------------
                                   2435 ;	 function setRotation
                                   2436 ;	-----------------------------------------
      0005F1                       2437 _setRotation:
                                   2438 ;	.\ecen4350_lcd_v4.c:389: switch (flag)
      0005F1 E5 82            [12] 2439 	mov	a,dpl
      0005F3 FF               [12] 2440 	mov	r7,a
      0005F4 24 FC            [12] 2441 	add	a,#0xff - 0x03
      0005F6 40 4E            [24] 2442 	jc	00105$
      0005F8 EF               [12] 2443 	mov	a,r7
      0005F9 2F               [12] 2444 	add	a,r7
                                   2445 ;	.\ecen4350_lcd_v4.c:391: case 0:
      0005FA 90 05 FE         [24] 2446 	mov	dptr,#00115$
      0005FD 73               [24] 2447 	jmp	@a+dptr
      0005FE                       2448 00115$:
      0005FE 80 06            [24] 2449 	sjmp	00101$
      000600 80 14            [24] 2450 	sjmp	00102$
      000602 80 22            [24] 2451 	sjmp	00103$
      000604 80 30            [24] 2452 	sjmp	00104$
      000606                       2453 00101$:
                                   2454 ;	.\ecen4350_lcd_v4.c:392: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000606 7F 48            [12] 2455 	mov	r7,#0x48
                                   2456 ;	.\ecen4350_lcd_v4.c:393: _width = TFTWIDTH;
      000608 75 1A F0         [24] 2457 	mov	__width,#0xf0
      00060B 75 1B 00         [24] 2458 	mov	(__width + 1),#0x00
                                   2459 ;	.\ecen4350_lcd_v4.c:394: _height = TFTHEIGHT;
      00060E 75 1C 40         [24] 2460 	mov	__height,#0x40
      000611 75 1D 01         [24] 2461 	mov	(__height + 1),#0x01
                                   2462 ;	.\ecen4350_lcd_v4.c:395: break;
                                   2463 ;	.\ecen4350_lcd_v4.c:396: case 1:
      000614 80 3E            [24] 2464 	sjmp	00106$
      000616                       2465 00102$:
                                   2466 ;	.\ecen4350_lcd_v4.c:397: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000616 7F 28            [12] 2467 	mov	r7,#0x28
                                   2468 ;	.\ecen4350_lcd_v4.c:398: _width = TFTHEIGHT;
      000618 75 1A 40         [24] 2469 	mov	__width,#0x40
      00061B 75 1B 01         [24] 2470 	mov	(__width + 1),#0x01
                                   2471 ;	.\ecen4350_lcd_v4.c:399: _height = TFTWIDTH;
      00061E 75 1C F0         [24] 2472 	mov	__height,#0xf0
      000621 75 1D 00         [24] 2473 	mov	(__height + 1),#0x00
                                   2474 ;	.\ecen4350_lcd_v4.c:400: break;
                                   2475 ;	.\ecen4350_lcd_v4.c:401: case 2:
      000624 80 2E            [24] 2476 	sjmp	00106$
      000626                       2477 00103$:
                                   2478 ;	.\ecen4350_lcd_v4.c:402: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000626 7F 88            [12] 2479 	mov	r7,#0x88
                                   2480 ;	.\ecen4350_lcd_v4.c:403: _width = TFTWIDTH;
      000628 75 1A F0         [24] 2481 	mov	__width,#0xf0
      00062B 75 1B 00         [24] 2482 	mov	(__width + 1),#0x00
                                   2483 ;	.\ecen4350_lcd_v4.c:404: _height = TFTHEIGHT;
      00062E 75 1C 40         [24] 2484 	mov	__height,#0x40
      000631 75 1D 01         [24] 2485 	mov	(__height + 1),#0x01
                                   2486 ;	.\ecen4350_lcd_v4.c:405: break;
                                   2487 ;	.\ecen4350_lcd_v4.c:406: case 3:
      000634 80 1E            [24] 2488 	sjmp	00106$
      000636                       2489 00104$:
                                   2490 ;	.\ecen4350_lcd_v4.c:407: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000636 7F E8            [12] 2491 	mov	r7,#0xe8
                                   2492 ;	.\ecen4350_lcd_v4.c:408: _width = TFTHEIGHT;
      000638 75 1A 40         [24] 2493 	mov	__width,#0x40
      00063B 75 1B 01         [24] 2494 	mov	(__width + 1),#0x01
                                   2495 ;	.\ecen4350_lcd_v4.c:409: _height = TFTWIDTH;
      00063E 75 1C F0         [24] 2496 	mov	__height,#0xf0
      000641 75 1D 00         [24] 2497 	mov	(__height + 1),#0x00
                                   2498 ;	.\ecen4350_lcd_v4.c:410: break;
                                   2499 ;	.\ecen4350_lcd_v4.c:411: default:
      000644 80 0E            [24] 2500 	sjmp	00106$
      000646                       2501 00105$:
                                   2502 ;	.\ecen4350_lcd_v4.c:412: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000646 7F 48            [12] 2503 	mov	r7,#0x48
                                   2504 ;	.\ecen4350_lcd_v4.c:413: _width = TFTWIDTH;
      000648 75 1A F0         [24] 2505 	mov	__width,#0xf0
      00064B 75 1B 00         [24] 2506 	mov	(__width + 1),#0x00
                                   2507 ;	.\ecen4350_lcd_v4.c:414: _height = TFTHEIGHT;
      00064E 75 1C 40         [24] 2508 	mov	__height,#0x40
      000651 75 1D 01         [24] 2509 	mov	(__height + 1),#0x01
                                   2510 ;	.\ecen4350_lcd_v4.c:416: }
      000654                       2511 00106$:
                                   2512 ;	.\ecen4350_lcd_v4.c:417: writeRegister8(ILI9341_MEMCONTROL, flag);
      000654 8F 6B            [24] 2513 	mov	_writeRegister8_PARM_2,r7
      000656 75 82 36         [24] 2514 	mov	dpl,#0x36
                                   2515 ;	.\ecen4350_lcd_v4.c:418: }
      000659 02 02 3E         [24] 2516 	ljmp	_writeRegister8
                                   2517 ;------------------------------------------------------------
                                   2518 ;Allocation info for local variables in function 'setAddress'
                                   2519 ;------------------------------------------------------------
                                   2520 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2521 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2522 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2523 ;x1                        Allocated to registers r6 r7 
                                   2524 ;------------------------------------------------------------
                                   2525 ;	.\ecen4350_lcd_v4.c:421: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2526 ;	-----------------------------------------
                                   2527 ;	 function setAddress
                                   2528 ;	-----------------------------------------
      00065C                       2529 _setAddress:
      00065C AE 82            [24] 2530 	mov	r6,dpl
      00065E AF 83            [24] 2531 	mov	r7,dph
                                   2532 ;	.\ecen4350_lcd_v4.c:424: write8Reg(0x2A);
                                   2533 ;	assignBit
      000660 C2 B4            [12] 2534 	clr	_P3_4
                                   2535 ;	assignBit
      000662 D2 B5            [12] 2536 	setb	_P3_5
      000664 85 0A 82         [24] 2537 	mov	dpl,_lcd_address
      000667 85 0B 83         [24] 2538 	mov	dph,(_lcd_address + 1)
      00066A 74 2A            [12] 2539 	mov	a,#0x2a
      00066C F0               [24] 2540 	movx	@dptr,a
                                   2541 ;	assignBit
      00066D C2 B5            [12] 2542 	clr	_P3_5
                                   2543 ;	.\ecen4350_lcd_v4.c:425: write8Data(x1 >> 8);
                                   2544 ;	assignBit
      00066F D2 B4            [12] 2545 	setb	_P3_4
                                   2546 ;	assignBit
      000671 D2 B5            [12] 2547 	setb	_P3_5
      000673 85 0A 82         [24] 2548 	mov	dpl,_lcd_address
      000676 85 0B 83         [24] 2549 	mov	dph,(_lcd_address + 1)
      000679 8F 05            [24] 2550 	mov	ar5,r7
      00067B ED               [12] 2551 	mov	a,r5
      00067C F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	assignBit
      00067D C2 B5            [12] 2554 	clr	_P3_5
                                   2555 ;	.\ecen4350_lcd_v4.c:426: write8Data(x1);
                                   2556 ;	assignBit
      00067F D2 B4            [12] 2557 	setb	_P3_4
                                   2558 ;	assignBit
      000681 D2 B5            [12] 2559 	setb	_P3_5
      000683 85 0A 82         [24] 2560 	mov	dpl,_lcd_address
      000686 85 0B 83         [24] 2561 	mov	dph,(_lcd_address + 1)
      000689 EE               [12] 2562 	mov	a,r6
      00068A F0               [24] 2563 	movx	@dptr,a
                                   2564 ;	assignBit
      00068B C2 B5            [12] 2565 	clr	_P3_5
                                   2566 ;	.\ecen4350_lcd_v4.c:427: write8Data(x2 >> 8);
                                   2567 ;	assignBit
      00068D D2 B4            [12] 2568 	setb	_P3_4
                                   2569 ;	assignBit
      00068F D2 B5            [12] 2570 	setb	_P3_5
      000691 85 0A 82         [24] 2571 	mov	dpl,_lcd_address
      000694 85 0B 83         [24] 2572 	mov	dph,(_lcd_address + 1)
      000697 E5 6E            [12] 2573 	mov	a,(_setAddress_PARM_3 + 1)
      000699 F0               [24] 2574 	movx	@dptr,a
                                   2575 ;	assignBit
      00069A C2 B5            [12] 2576 	clr	_P3_5
                                   2577 ;	.\ecen4350_lcd_v4.c:428: write8Data(x2);
                                   2578 ;	assignBit
      00069C D2 B4            [12] 2579 	setb	_P3_4
                                   2580 ;	assignBit
      00069E D2 B5            [12] 2581 	setb	_P3_5
      0006A0 85 0A 82         [24] 2582 	mov	dpl,_lcd_address
      0006A3 85 0B 83         [24] 2583 	mov	dph,(_lcd_address + 1)
      0006A6 E5 6D            [12] 2584 	mov	a,_setAddress_PARM_3
      0006A8 F0               [24] 2585 	movx	@dptr,a
                                   2586 ;	assignBit
      0006A9 C2 B5            [12] 2587 	clr	_P3_5
                                   2588 ;	.\ecen4350_lcd_v4.c:430: write8Reg(0x2B);
                                   2589 ;	assignBit
      0006AB C2 B4            [12] 2590 	clr	_P3_4
                                   2591 ;	assignBit
      0006AD D2 B5            [12] 2592 	setb	_P3_5
      0006AF 85 0A 82         [24] 2593 	mov	dpl,_lcd_address
      0006B2 85 0B 83         [24] 2594 	mov	dph,(_lcd_address + 1)
      0006B5 74 2B            [12] 2595 	mov	a,#0x2b
      0006B7 F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	assignBit
      0006B8 C2 B5            [12] 2598 	clr	_P3_5
                                   2599 ;	.\ecen4350_lcd_v4.c:431: write8Data(y1 >> 8);
                                   2600 ;	assignBit
      0006BA D2 B4            [12] 2601 	setb	_P3_4
                                   2602 ;	assignBit
      0006BC D2 B5            [12] 2603 	setb	_P3_5
      0006BE 85 0A 82         [24] 2604 	mov	dpl,_lcd_address
      0006C1 85 0B 83         [24] 2605 	mov	dph,(_lcd_address + 1)
      0006C4 E5 6C            [12] 2606 	mov	a,(_setAddress_PARM_2 + 1)
      0006C6 F0               [24] 2607 	movx	@dptr,a
                                   2608 ;	assignBit
      0006C7 C2 B5            [12] 2609 	clr	_P3_5
                                   2610 ;	.\ecen4350_lcd_v4.c:432: write8Data(y1);
                                   2611 ;	assignBit
      0006C9 D2 B4            [12] 2612 	setb	_P3_4
                                   2613 ;	assignBit
      0006CB D2 B5            [12] 2614 	setb	_P3_5
      0006CD 85 0A 82         [24] 2615 	mov	dpl,_lcd_address
      0006D0 85 0B 83         [24] 2616 	mov	dph,(_lcd_address + 1)
      0006D3 E5 6B            [12] 2617 	mov	a,_setAddress_PARM_2
      0006D5 F0               [24] 2618 	movx	@dptr,a
                                   2619 ;	assignBit
      0006D6 C2 B5            [12] 2620 	clr	_P3_5
                                   2621 ;	.\ecen4350_lcd_v4.c:433: write8Data(y2 >> 8);
                                   2622 ;	assignBit
      0006D8 D2 B4            [12] 2623 	setb	_P3_4
                                   2624 ;	assignBit
      0006DA D2 B5            [12] 2625 	setb	_P3_5
      0006DC 85 0A 82         [24] 2626 	mov	dpl,_lcd_address
      0006DF 85 0B 83         [24] 2627 	mov	dph,(_lcd_address + 1)
      0006E2 E5 70            [12] 2628 	mov	a,(_setAddress_PARM_4 + 1)
      0006E4 F0               [24] 2629 	movx	@dptr,a
                                   2630 ;	assignBit
      0006E5 C2 B5            [12] 2631 	clr	_P3_5
                                   2632 ;	.\ecen4350_lcd_v4.c:434: write8Data(y2);
                                   2633 ;	assignBit
      0006E7 D2 B4            [12] 2634 	setb	_P3_4
                                   2635 ;	assignBit
      0006E9 D2 B5            [12] 2636 	setb	_P3_5
      0006EB 85 0A 82         [24] 2637 	mov	dpl,_lcd_address
      0006EE 85 0B 83         [24] 2638 	mov	dph,(_lcd_address + 1)
      0006F1 E5 6F            [12] 2639 	mov	a,_setAddress_PARM_4
      0006F3 F0               [24] 2640 	movx	@dptr,a
                                   2641 ;	assignBit
      0006F4 C2 B5            [12] 2642 	clr	_P3_5
                                   2643 ;	.\ecen4350_lcd_v4.c:437: }
      0006F6 22               [24] 2644 	ret
                                   2645 ;------------------------------------------------------------
                                   2646 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2647 ;------------------------------------------------------------
                                   2648 ;	.\ecen4350_lcd_v4.c:439: void TFT_LCD_INIT(void)
                                   2649 ;	-----------------------------------------
                                   2650 ;	 function TFT_LCD_INIT
                                   2651 ;	-----------------------------------------
      0006F7                       2652 _TFT_LCD_INIT:
                                   2653 ;	.\ecen4350_lcd_v4.c:443: _width = TFTWIDTH;
      0006F7 75 1A F0         [24] 2654 	mov	__width,#0xf0
      0006FA 75 1B 00         [24] 2655 	mov	(__width + 1),#0x00
                                   2656 ;	.\ecen4350_lcd_v4.c:444: _height = TFTHEIGHT;
      0006FD 75 1C 40         [24] 2657 	mov	__height,#0x40
      000700 75 1D 01         [24] 2658 	mov	(__height + 1),#0x01
                                   2659 ;	.\ecen4350_lcd_v4.c:447: IOM = 0;
                                   2660 ;	assignBit
      000703 C2 B5            [12] 2661 	clr	_P3_5
                                   2662 ;	.\ecen4350_lcd_v4.c:449: CD = 1;
                                   2663 ;	assignBit
      000705 D2 B4            [12] 2664 	setb	_P3_4
                                   2665 ;	.\ecen4350_lcd_v4.c:451: write8Reg(0x00);
                                   2666 ;	assignBit
      000707 C2 B4            [12] 2667 	clr	_P3_4
                                   2668 ;	assignBit
      000709 D2 B5            [12] 2669 	setb	_P3_5
      00070B 85 0A 82         [24] 2670 	mov	dpl,_lcd_address
      00070E 85 0B 83         [24] 2671 	mov	dph,(_lcd_address + 1)
      000711 E4               [12] 2672 	clr	a
      000712 F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	assignBit
      000713 C2 B5            [12] 2675 	clr	_P3_5
                                   2676 ;	.\ecen4350_lcd_v4.c:452: write8Data(0x00);
                                   2677 ;	assignBit
      000715 D2 B4            [12] 2678 	setb	_P3_4
                                   2679 ;	assignBit
      000717 D2 B5            [12] 2680 	setb	_P3_5
      000719 85 0A 82         [24] 2681 	mov	dpl,_lcd_address
      00071C 85 0B 83         [24] 2682 	mov	dph,(_lcd_address + 1)
      00071F E4               [12] 2683 	clr	a
      000720 F0               [24] 2684 	movx	@dptr,a
                                   2685 ;	assignBit
      000721 C2 B5            [12] 2686 	clr	_P3_5
                                   2687 ;	.\ecen4350_lcd_v4.c:453: write8Data(0x00);
                                   2688 ;	assignBit
      000723 D2 B4            [12] 2689 	setb	_P3_4
                                   2690 ;	assignBit
      000725 D2 B5            [12] 2691 	setb	_P3_5
      000727 85 0A 82         [24] 2692 	mov	dpl,_lcd_address
      00072A 85 0B 83         [24] 2693 	mov	dph,(_lcd_address + 1)
      00072D E4               [12] 2694 	clr	a
      00072E F0               [24] 2695 	movx	@dptr,a
                                   2696 ;	assignBit
      00072F C2 B5            [12] 2697 	clr	_P3_5
                                   2698 ;	.\ecen4350_lcd_v4.c:454: write8Data(0x00);
                                   2699 ;	assignBit
      000731 D2 B4            [12] 2700 	setb	_P3_4
                                   2701 ;	assignBit
      000733 D2 B5            [12] 2702 	setb	_P3_5
      000735 85 0A 82         [24] 2703 	mov	dpl,_lcd_address
      000738 85 0B 83         [24] 2704 	mov	dph,(_lcd_address + 1)
      00073B E4               [12] 2705 	clr	a
      00073C F0               [24] 2706 	movx	@dptr,a
                                   2707 ;	assignBit
      00073D C2 B5            [12] 2708 	clr	_P3_5
                                   2709 ;	.\ecen4350_lcd_v4.c:456: delay(100);						// changed from 200 to 100
      00073F 90 00 64         [24] 2710 	mov	dptr,#0x0064
      000742 12 01 A9         [24] 2711 	lcall	_delay
                                   2712 ;	.\ecen4350_lcd_v4.c:460: writeRegister8(ILI9341_SOFTRESET, 0);
      000745 75 6B 00         [24] 2713 	mov	_writeRegister8_PARM_2,#0x00
      000748 75 82 01         [24] 2714 	mov	dpl,#0x01
      00074B 12 02 3E         [24] 2715 	lcall	_writeRegister8
                                   2716 ;	.\ecen4350_lcd_v4.c:461: delay(50);
      00074E 90 00 32         [24] 2717 	mov	dptr,#0x0032
      000751 12 01 A9         [24] 2718 	lcall	_delay
                                   2719 ;	.\ecen4350_lcd_v4.c:462: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000754 75 6B 00         [24] 2720 	mov	_writeRegister8_PARM_2,#0x00
      000757 75 82 28         [24] 2721 	mov	dpl,#0x28
      00075A 12 02 3E         [24] 2722 	lcall	_writeRegister8
                                   2723 ;	.\ecen4350_lcd_v4.c:463: delay(10);
      00075D 90 00 0A         [24] 2724 	mov	dptr,#0x000a
      000760 12 01 A9         [24] 2725 	lcall	_delay
                                   2726 ;	.\ecen4350_lcd_v4.c:465: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000763 75 6B 23         [24] 2727 	mov	_writeRegister8_PARM_2,#0x23
      000766 75 82 C0         [24] 2728 	mov	dpl,#0xc0
      000769 12 02 3E         [24] 2729 	lcall	_writeRegister8
                                   2730 ;	.\ecen4350_lcd_v4.c:466: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00076C 75 6B 11         [24] 2731 	mov	_writeRegister8_PARM_2,#0x11
      00076F 75 82 C1         [24] 2732 	mov	dpl,#0xc1
      000772 12 02 3E         [24] 2733 	lcall	_writeRegister8
                                   2734 ;	.\ecen4350_lcd_v4.c:467: write8Reg(ILI9341_VCOMCONTROL1);
                                   2735 ;	assignBit
      000775 C2 B4            [12] 2736 	clr	_P3_4
                                   2737 ;	assignBit
      000777 D2 B5            [12] 2738 	setb	_P3_5
      000779 85 0A 82         [24] 2739 	mov	dpl,_lcd_address
      00077C 85 0B 83         [24] 2740 	mov	dph,(_lcd_address + 1)
      00077F 74 C5            [12] 2741 	mov	a,#0xc5
      000781 F0               [24] 2742 	movx	@dptr,a
                                   2743 ;	assignBit
      000782 C2 B5            [12] 2744 	clr	_P3_5
                                   2745 ;	.\ecen4350_lcd_v4.c:468: write8Data(0x3d);
                                   2746 ;	assignBit
      000784 D2 B4            [12] 2747 	setb	_P3_4
                                   2748 ;	assignBit
      000786 D2 B5            [12] 2749 	setb	_P3_5
      000788 85 0A 82         [24] 2750 	mov	dpl,_lcd_address
      00078B 85 0B 83         [24] 2751 	mov	dph,(_lcd_address + 1)
      00078E 74 3D            [12] 2752 	mov	a,#0x3d
      000790 F0               [24] 2753 	movx	@dptr,a
                                   2754 ;	assignBit
      000791 C2 B5            [12] 2755 	clr	_P3_5
                                   2756 ;	.\ecen4350_lcd_v4.c:469: write8Data(0x30);
                                   2757 ;	assignBit
      000793 D2 B4            [12] 2758 	setb	_P3_4
                                   2759 ;	assignBit
      000795 D2 B5            [12] 2760 	setb	_P3_5
      000797 85 0A 82         [24] 2761 	mov	dpl,_lcd_address
      00079A 85 0B 83         [24] 2762 	mov	dph,(_lcd_address + 1)
      00079D 74 30            [12] 2763 	mov	a,#0x30
      00079F F0               [24] 2764 	movx	@dptr,a
                                   2765 ;	assignBit
      0007A0 C2 B5            [12] 2766 	clr	_P3_5
                                   2767 ;	.\ecen4350_lcd_v4.c:470: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0007A2 75 6B AA         [24] 2768 	mov	_writeRegister8_PARM_2,#0xaa
      0007A5 75 82 C7         [24] 2769 	mov	dpl,#0xc7
      0007A8 12 02 3E         [24] 2770 	lcall	_writeRegister8
                                   2771 ;	.\ecen4350_lcd_v4.c:471: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0007AB 75 6B 88         [24] 2772 	mov	_writeRegister8_PARM_2,#0x88
      0007AE 75 82 36         [24] 2773 	mov	dpl,#0x36
      0007B1 12 02 3E         [24] 2774 	lcall	_writeRegister8
                                   2775 ;	.\ecen4350_lcd_v4.c:472: write8Reg(ILI9341_PIXELFORMAT);
                                   2776 ;	assignBit
      0007B4 C2 B4            [12] 2777 	clr	_P3_4
                                   2778 ;	assignBit
      0007B6 D2 B5            [12] 2779 	setb	_P3_5
      0007B8 85 0A 82         [24] 2780 	mov	dpl,_lcd_address
      0007BB 85 0B 83         [24] 2781 	mov	dph,(_lcd_address + 1)
      0007BE 74 3A            [12] 2782 	mov	a,#0x3a
      0007C0 F0               [24] 2783 	movx	@dptr,a
                                   2784 ;	assignBit
      0007C1 C2 B5            [12] 2785 	clr	_P3_5
                                   2786 ;	.\ecen4350_lcd_v4.c:473: write8Data(0x55);
                                   2787 ;	assignBit
      0007C3 D2 B4            [12] 2788 	setb	_P3_4
                                   2789 ;	assignBit
      0007C5 D2 B5            [12] 2790 	setb	_P3_5
      0007C7 85 0A 82         [24] 2791 	mov	dpl,_lcd_address
      0007CA 85 0B 83         [24] 2792 	mov	dph,(_lcd_address + 1)
      0007CD 74 55            [12] 2793 	mov	a,#0x55
      0007CF F0               [24] 2794 	movx	@dptr,a
                                   2795 ;	assignBit
      0007D0 C2 B5            [12] 2796 	clr	_P3_5
                                   2797 ;	.\ecen4350_lcd_v4.c:474: write8Data(0x00);
                                   2798 ;	assignBit
      0007D2 D2 B4            [12] 2799 	setb	_P3_4
                                   2800 ;	assignBit
      0007D4 D2 B5            [12] 2801 	setb	_P3_5
      0007D6 85 0A 82         [24] 2802 	mov	dpl,_lcd_address
      0007D9 85 0B 83         [24] 2803 	mov	dph,(_lcd_address + 1)
      0007DC E4               [12] 2804 	clr	a
      0007DD F0               [24] 2805 	movx	@dptr,a
                                   2806 ;	assignBit
      0007DE C2 B5            [12] 2807 	clr	_P3_5
                                   2808 ;	.\ecen4350_lcd_v4.c:475: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0007E0 75 6B 1B         [24] 2809 	mov	_writeRegister16_PARM_2,#0x1b
      0007E3 75 6C 00         [24] 2810 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0007E6 90 00 B1         [24] 2811 	mov	dptr,#0x00b1
      0007E9 12 02 5E         [24] 2812 	lcall	_writeRegister16
                                   2813 ;	.\ecen4350_lcd_v4.c:477: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0007EC 75 6B 07         [24] 2814 	mov	_writeRegister8_PARM_2,#0x07
      0007EF 75 82 B7         [24] 2815 	mov	dpl,#0xb7
      0007F2 12 02 3E         [24] 2816 	lcall	_writeRegister8
                                   2817 ;	.\ecen4350_lcd_v4.c:480: writeRegister8(ILI9341_SLEEPOUT, 0);
      0007F5 75 6B 00         [24] 2818 	mov	_writeRegister8_PARM_2,#0x00
      0007F8 75 82 11         [24] 2819 	mov	dpl,#0x11
      0007FB 12 02 3E         [24] 2820 	lcall	_writeRegister8
                                   2821 ;	.\ecen4350_lcd_v4.c:481: delay(100);								// changed from 150 to 100
      0007FE 90 00 64         [24] 2822 	mov	dptr,#0x0064
      000801 12 01 A9         [24] 2823 	lcall	_delay
                                   2824 ;	.\ecen4350_lcd_v4.c:482: writeRegister8(ILI9341_DISPLAYON, 0);
      000804 75 6B 00         [24] 2825 	mov	_writeRegister8_PARM_2,#0x00
      000807 75 82 29         [24] 2826 	mov	dpl,#0x29
      00080A 12 02 3E         [24] 2827 	lcall	_writeRegister8
                                   2828 ;	.\ecen4350_lcd_v4.c:483: delay(150);								// changed from 200 to 150
      00080D 90 00 96         [24] 2829 	mov	dptr,#0x0096
      000810 12 01 A9         [24] 2830 	lcall	_delay
                                   2831 ;	.\ecen4350_lcd_v4.c:484: setAddress(0, 0, _width - 1, _height - 1);
      000813 E5 1A            [12] 2832 	mov	a,__width
      000815 24 FF            [12] 2833 	add	a,#0xff
      000817 F5 6D            [12] 2834 	mov	_setAddress_PARM_3,a
      000819 E5 1B            [12] 2835 	mov	a,(__width + 1)
      00081B 34 FF            [12] 2836 	addc	a,#0xff
      00081D F5 6E            [12] 2837 	mov	(_setAddress_PARM_3 + 1),a
      00081F E5 1C            [12] 2838 	mov	a,__height
      000821 24 FF            [12] 2839 	add	a,#0xff
      000823 F5 6F            [12] 2840 	mov	_setAddress_PARM_4,a
      000825 E5 1D            [12] 2841 	mov	a,(__height + 1)
      000827 34 FF            [12] 2842 	addc	a,#0xff
      000829 F5 70            [12] 2843 	mov	(_setAddress_PARM_4 + 1),a
      00082B E4               [12] 2844 	clr	a
      00082C F5 6B            [12] 2845 	mov	_setAddress_PARM_2,a
      00082E F5 6C            [12] 2846 	mov	(_setAddress_PARM_2 + 1),a
      000830 90 00 00         [24] 2847 	mov	dptr,#0x0000
                                   2848 ;	.\ecen4350_lcd_v4.c:488: }
      000833 02 06 5C         [24] 2849 	ljmp	_setAddress
                                   2850 ;------------------------------------------------------------
                                   2851 ;Allocation info for local variables in function 'drawPixel'
                                   2852 ;------------------------------------------------------------
                                   2853 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2854 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2855 ;x3                        Allocated to registers r6 r7 
                                   2856 ;------------------------------------------------------------
                                   2857 ;	.\ecen4350_lcd_v4.c:489: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2858 ;	-----------------------------------------
                                   2859 ;	 function drawPixel
                                   2860 ;	-----------------------------------------
      000836                       2861 _drawPixel:
      000836 AE 82            [24] 2862 	mov	r6,dpl
      000838 AF 83            [24] 2863 	mov	r7,dph
                                   2864 ;	.\ecen4350_lcd_v4.c:497: setAddress(x3, y3, x3 + 1, y3 + 1);
      00083A 74 01            [12] 2865 	mov	a,#0x01
      00083C 2E               [12] 2866 	add	a,r6
      00083D F5 6D            [12] 2867 	mov	_setAddress_PARM_3,a
      00083F E4               [12] 2868 	clr	a
      000840 3F               [12] 2869 	addc	a,r7
      000841 F5 6E            [12] 2870 	mov	(_setAddress_PARM_3 + 1),a
      000843 74 01            [12] 2871 	mov	a,#0x01
      000845 25 28            [12] 2872 	add	a,_drawPixel_PARM_2
      000847 F5 6F            [12] 2873 	mov	_setAddress_PARM_4,a
      000849 E4               [12] 2874 	clr	a
      00084A 35 29            [12] 2875 	addc	a,(_drawPixel_PARM_2 + 1)
      00084C F5 70            [12] 2876 	mov	(_setAddress_PARM_4 + 1),a
      00084E 85 28 6B         [24] 2877 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000851 85 29 6C         [24] 2878 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000854 8E 82            [24] 2879 	mov	dpl,r6
      000856 8F 83            [24] 2880 	mov	dph,r7
      000858 12 06 5C         [24] 2881 	lcall	_setAddress
                                   2882 ;	.\ecen4350_lcd_v4.c:501: CD = 0;
                                   2883 ;	assignBit
      00085B C2 B4            [12] 2884 	clr	_P3_4
                                   2885 ;	.\ecen4350_lcd_v4.c:502: write8(0x2C);
                                   2886 ;	assignBit
      00085D D2 B5            [12] 2887 	setb	_P3_5
      00085F 85 0A 82         [24] 2888 	mov	dpl,_lcd_address
      000862 85 0B 83         [24] 2889 	mov	dph,(_lcd_address + 1)
      000865 74 2C            [12] 2890 	mov	a,#0x2c
      000867 F0               [24] 2891 	movx	@dptr,a
                                   2892 ;	assignBit
      000868 C2 B5            [12] 2893 	clr	_P3_5
                                   2894 ;	.\ecen4350_lcd_v4.c:504: CD = 1;
                                   2895 ;	assignBit
      00086A D2 B4            [12] 2896 	setb	_P3_4
                                   2897 ;	.\ecen4350_lcd_v4.c:505: write8(color1 >> 8);
                                   2898 ;	assignBit
      00086C D2 B5            [12] 2899 	setb	_P3_5
      00086E 85 0A 82         [24] 2900 	mov	dpl,_lcd_address
      000871 85 0B 83         [24] 2901 	mov	dph,(_lcd_address + 1)
      000874 E5 2B            [12] 2902 	mov	a,(_drawPixel_PARM_3 + 1)
      000876 F0               [24] 2903 	movx	@dptr,a
                                   2904 ;	assignBit
      000877 C2 B5            [12] 2905 	clr	_P3_5
                                   2906 ;	.\ecen4350_lcd_v4.c:506: write8(color1);
                                   2907 ;	assignBit
      000879 D2 B5            [12] 2908 	setb	_P3_5
      00087B 85 0A 82         [24] 2909 	mov	dpl,_lcd_address
      00087E 85 0B 83         [24] 2910 	mov	dph,(_lcd_address + 1)
      000881 E5 2A            [12] 2911 	mov	a,_drawPixel_PARM_3
      000883 F0               [24] 2912 	movx	@dptr,a
                                   2913 ;	assignBit
      000884 C2 B5            [12] 2914 	clr	_P3_5
                                   2915 ;	.\ecen4350_lcd_v4.c:508: }
      000886 22               [24] 2916 	ret
                                   2917 ;------------------------------------------------------------
                                   2918 ;Allocation info for local variables in function 'drawCircle'
                                   2919 ;------------------------------------------------------------
                                   2920 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2921 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2922 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2923 ;x0                        Allocated with name '_drawCircle_x0_65536_393'
                                   2924 ;f                         Allocated with name '_drawCircle_f_65536_394'
                                   2925 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_394'
                                   2926 ;ddF_y                     Allocated to registers r2 r3 
                                   2927 ;x                         Allocated with name '_drawCircle_x_65536_394'
                                   2928 ;y                         Allocated to registers r0 r1 
                                   2929 ;------------------------------------------------------------
                                   2930 ;	.\ecen4350_lcd_v4.c:512: void drawCircle(int x0, int y0, int r, u16 color)
                                   2931 ;	-----------------------------------------
                                   2932 ;	 function drawCircle
                                   2933 ;	-----------------------------------------
      000887                       2934 _drawCircle:
      000887 85 82 32         [24] 2935 	mov	_drawCircle_x0_65536_393,dpl
      00088A 85 83 33         [24] 2936 	mov	(_drawCircle_x0_65536_393 + 1),dph
                                   2937 ;	.\ecen4350_lcd_v4.c:514: int f = 1 - r;
      00088D 74 01            [12] 2938 	mov	a,#0x01
      00088F C3               [12] 2939 	clr	c
      000890 95 2E            [12] 2940 	subb	a,_drawCircle_PARM_3
      000892 F5 34            [12] 2941 	mov	_drawCircle_f_65536_394,a
      000894 E4               [12] 2942 	clr	a
      000895 95 2F            [12] 2943 	subb	a,(_drawCircle_PARM_3 + 1)
      000897 F5 35            [12] 2944 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2945 ;	.\ecen4350_lcd_v4.c:516: int ddF_y = -2 * r;
      000899 85 2E 6B         [24] 2946 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00089C 85 2F 6C         [24] 2947 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00089F 90 FF FE         [24] 2948 	mov	dptr,#0xfffe
      0008A2 12 58 38         [24] 2949 	lcall	__mulint
      0008A5 AA 82            [24] 2950 	mov	r2,dpl
      0008A7 AB 83            [24] 2951 	mov	r3,dph
                                   2952 ;	.\ecen4350_lcd_v4.c:518: int y = r;
      0008A9 A8 2E            [24] 2953 	mov	r0,_drawCircle_PARM_3
      0008AB A9 2F            [24] 2954 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2955 ;	.\ecen4350_lcd_v4.c:520: drawPixel(x0, y0 + r, color);
      0008AD E8               [12] 2956 	mov	a,r0
      0008AE 25 2C            [12] 2957 	add	a,_drawCircle_PARM_2
      0008B0 F5 28            [12] 2958 	mov	_drawPixel_PARM_2,a
      0008B2 E9               [12] 2959 	mov	a,r1
      0008B3 35 2D            [12] 2960 	addc	a,(_drawCircle_PARM_2 + 1)
      0008B5 F5 29            [12] 2961 	mov	(_drawPixel_PARM_2 + 1),a
      0008B7 85 30 2A         [24] 2962 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008BA 85 31 2B         [24] 2963 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008BD 85 32 82         [24] 2964 	mov	dpl,_drawCircle_x0_65536_393
      0008C0 85 33 83         [24] 2965 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      0008C3 C0 03            [24] 2966 	push	ar3
      0008C5 C0 02            [24] 2967 	push	ar2
      0008C7 C0 01            [24] 2968 	push	ar1
      0008C9 C0 00            [24] 2969 	push	ar0
      0008CB 12 08 36         [24] 2970 	lcall	_drawPixel
      0008CE D0 00            [24] 2971 	pop	ar0
      0008D0 D0 01            [24] 2972 	pop	ar1
                                   2973 ;	.\ecen4350_lcd_v4.c:521: drawPixel(x0, y0 - r, color);
      0008D2 E5 2C            [12] 2974 	mov	a,_drawCircle_PARM_2
      0008D4 C3               [12] 2975 	clr	c
      0008D5 98               [12] 2976 	subb	a,r0
      0008D6 F5 28            [12] 2977 	mov	_drawPixel_PARM_2,a
      0008D8 E5 2D            [12] 2978 	mov	a,(_drawCircle_PARM_2 + 1)
      0008DA 99               [12] 2979 	subb	a,r1
      0008DB F5 29            [12] 2980 	mov	(_drawPixel_PARM_2 + 1),a
      0008DD 85 30 2A         [24] 2981 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008E0 85 31 2B         [24] 2982 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008E3 85 32 82         [24] 2983 	mov	dpl,_drawCircle_x0_65536_393
      0008E6 85 33 83         [24] 2984 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      0008E9 C0 01            [24] 2985 	push	ar1
      0008EB C0 00            [24] 2986 	push	ar0
      0008ED 12 08 36         [24] 2987 	lcall	_drawPixel
      0008F0 D0 00            [24] 2988 	pop	ar0
      0008F2 D0 01            [24] 2989 	pop	ar1
                                   2990 ;	.\ecen4350_lcd_v4.c:522: drawPixel(x0 + r, y0, color);
      0008F4 E8               [12] 2991 	mov	a,r0
      0008F5 25 32            [12] 2992 	add	a,_drawCircle_x0_65536_393
      0008F7 F5 82            [12] 2993 	mov	dpl,a
      0008F9 E9               [12] 2994 	mov	a,r1
      0008FA 35 33            [12] 2995 	addc	a,(_drawCircle_x0_65536_393 + 1)
      0008FC F5 83            [12] 2996 	mov	dph,a
      0008FE 85 2C 28         [24] 2997 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000901 85 2D 29         [24] 2998 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000904 85 30 2A         [24] 2999 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000907 85 31 2B         [24] 3000 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00090A C0 01            [24] 3001 	push	ar1
      00090C C0 00            [24] 3002 	push	ar0
      00090E 12 08 36         [24] 3003 	lcall	_drawPixel
      000911 D0 00            [24] 3004 	pop	ar0
      000913 D0 01            [24] 3005 	pop	ar1
                                   3006 ;	.\ecen4350_lcd_v4.c:523: drawPixel(x0 - r, y0, color);
      000915 E5 32            [12] 3007 	mov	a,_drawCircle_x0_65536_393
      000917 C3               [12] 3008 	clr	c
      000918 98               [12] 3009 	subb	a,r0
      000919 F5 82            [12] 3010 	mov	dpl,a
      00091B E5 33            [12] 3011 	mov	a,(_drawCircle_x0_65536_393 + 1)
      00091D 99               [12] 3012 	subb	a,r1
      00091E F5 83            [12] 3013 	mov	dph,a
      000920 85 2C 28         [24] 3014 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000923 85 2D 29         [24] 3015 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000926 85 30 2A         [24] 3016 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000929 85 31 2B         [24] 3017 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00092C C0 01            [24] 3018 	push	ar1
      00092E C0 00            [24] 3019 	push	ar0
      000930 12 08 36         [24] 3020 	lcall	_drawPixel
      000933 D0 00            [24] 3021 	pop	ar0
      000935 D0 01            [24] 3022 	pop	ar1
      000937 D0 02            [24] 3023 	pop	ar2
      000939 D0 03            [24] 3024 	pop	ar3
                                   3025 ;	.\ecen4350_lcd_v4.c:525: while (x < y)
      00093B E4               [12] 3026 	clr	a
      00093C F5 38            [12] 3027 	mov	_drawCircle_x_65536_394,a
      00093E F5 39            [12] 3028 	mov	(_drawCircle_x_65536_394 + 1),a
      000940 75 36 01         [24] 3029 	mov	_drawCircle_ddF_x_65536_394,#0x01
                                   3030 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_394 + 1),#0x00
      000943 F5 37            [12] 3031 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
      000945                       3032 00103$:
      000945 C3               [12] 3033 	clr	c
      000946 E5 38            [12] 3034 	mov	a,_drawCircle_x_65536_394
      000948 98               [12] 3035 	subb	a,r0
      000949 E5 39            [12] 3036 	mov	a,(_drawCircle_x_65536_394 + 1)
      00094B 64 80            [12] 3037 	xrl	a,#0x80
      00094D 89 F0            [24] 3038 	mov	b,r1
      00094F 63 F0 80         [24] 3039 	xrl	b,#0x80
      000952 95 F0            [12] 3040 	subb	a,b
      000954 40 01            [24] 3041 	jc	00121$
      000956 22               [24] 3042 	ret
      000957                       3043 00121$:
                                   3044 ;	.\ecen4350_lcd_v4.c:527: if (f >= 0)
      000957 E5 35            [12] 3045 	mov	a,(_drawCircle_f_65536_394 + 1)
      000959 20 E7 16         [24] 3046 	jb	acc.7,00102$
                                   3047 ;	.\ecen4350_lcd_v4.c:529: y--;
      00095C 18               [12] 3048 	dec	r0
      00095D B8 FF 01         [24] 3049 	cjne	r0,#0xff,00123$
      000960 19               [12] 3050 	dec	r1
      000961                       3051 00123$:
                                   3052 ;	.\ecen4350_lcd_v4.c:530: ddF_y += 2;
      000961 74 02            [12] 3053 	mov	a,#0x02
      000963 2A               [12] 3054 	add	a,r2
      000964 FA               [12] 3055 	mov	r2,a
      000965 E4               [12] 3056 	clr	a
      000966 3B               [12] 3057 	addc	a,r3
      000967 FB               [12] 3058 	mov	r3,a
                                   3059 ;	.\ecen4350_lcd_v4.c:531: f += ddF_y;
      000968 EA               [12] 3060 	mov	a,r2
      000969 25 34            [12] 3061 	add	a,_drawCircle_f_65536_394
      00096B F5 34            [12] 3062 	mov	_drawCircle_f_65536_394,a
      00096D EB               [12] 3063 	mov	a,r3
      00096E 35 35            [12] 3064 	addc	a,(_drawCircle_f_65536_394 + 1)
      000970 F5 35            [12] 3065 	mov	(_drawCircle_f_65536_394 + 1),a
      000972                       3066 00102$:
                                   3067 ;	.\ecen4350_lcd_v4.c:533: x++;
      000972 C0 02            [24] 3068 	push	ar2
      000974 C0 03            [24] 3069 	push	ar3
      000976 05 38            [12] 3070 	inc	_drawCircle_x_65536_394
      000978 E4               [12] 3071 	clr	a
      000979 B5 38 02         [24] 3072 	cjne	a,_drawCircle_x_65536_394,00124$
      00097C 05 39            [12] 3073 	inc	(_drawCircle_x_65536_394 + 1)
      00097E                       3074 00124$:
                                   3075 ;	.\ecen4350_lcd_v4.c:534: ddF_x += 2;
      00097E 74 02            [12] 3076 	mov	a,#0x02
      000980 25 36            [12] 3077 	add	a,_drawCircle_ddF_x_65536_394
      000982 F5 36            [12] 3078 	mov	_drawCircle_ddF_x_65536_394,a
      000984 E4               [12] 3079 	clr	a
      000985 35 37            [12] 3080 	addc	a,(_drawCircle_ddF_x_65536_394 + 1)
      000987 F5 37            [12] 3081 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
                                   3082 ;	.\ecen4350_lcd_v4.c:535: f += ddF_x;
      000989 E5 36            [12] 3083 	mov	a,_drawCircle_ddF_x_65536_394
      00098B 25 34            [12] 3084 	add	a,_drawCircle_f_65536_394
      00098D F5 34            [12] 3085 	mov	_drawCircle_f_65536_394,a
      00098F E5 37            [12] 3086 	mov	a,(_drawCircle_ddF_x_65536_394 + 1)
      000991 35 35            [12] 3087 	addc	a,(_drawCircle_f_65536_394 + 1)
      000993 F5 35            [12] 3088 	mov	(_drawCircle_f_65536_394 + 1),a
                                   3089 ;	.\ecen4350_lcd_v4.c:537: drawPixel(x0 + x, y0 + y, color);
      000995 E5 38            [12] 3090 	mov	a,_drawCircle_x_65536_394
      000997 25 32            [12] 3091 	add	a,_drawCircle_x0_65536_393
      000999 FE               [12] 3092 	mov	r6,a
      00099A E5 39            [12] 3093 	mov	a,(_drawCircle_x_65536_394 + 1)
      00099C 35 33            [12] 3094 	addc	a,(_drawCircle_x0_65536_393 + 1)
      00099E FF               [12] 3095 	mov	r7,a
      00099F E8               [12] 3096 	mov	a,r0
      0009A0 25 2C            [12] 3097 	add	a,_drawCircle_PARM_2
      0009A2 FC               [12] 3098 	mov	r4,a
      0009A3 E9               [12] 3099 	mov	a,r1
      0009A4 35 2D            [12] 3100 	addc	a,(_drawCircle_PARM_2 + 1)
      0009A6 FD               [12] 3101 	mov	r5,a
      0009A7 8C 28            [24] 3102 	mov	_drawPixel_PARM_2,r4
      0009A9 8D 29            [24] 3103 	mov	(_drawPixel_PARM_2 + 1),r5
      0009AB 85 30 2A         [24] 3104 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009AE 85 31 2B         [24] 3105 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009B1 8E 82            [24] 3106 	mov	dpl,r6
      0009B3 8F 83            [24] 3107 	mov	dph,r7
      0009B5 C0 07            [24] 3108 	push	ar7
      0009B7 C0 06            [24] 3109 	push	ar6
      0009B9 C0 05            [24] 3110 	push	ar5
      0009BB C0 04            [24] 3111 	push	ar4
      0009BD C0 03            [24] 3112 	push	ar3
      0009BF C0 02            [24] 3113 	push	ar2
      0009C1 C0 01            [24] 3114 	push	ar1
      0009C3 C0 00            [24] 3115 	push	ar0
      0009C5 12 08 36         [24] 3116 	lcall	_drawPixel
      0009C8 D0 00            [24] 3117 	pop	ar0
      0009CA D0 01            [24] 3118 	pop	ar1
      0009CC D0 02            [24] 3119 	pop	ar2
      0009CE D0 03            [24] 3120 	pop	ar3
      0009D0 D0 04            [24] 3121 	pop	ar4
      0009D2 D0 05            [24] 3122 	pop	ar5
                                   3123 ;	.\ecen4350_lcd_v4.c:538: drawPixel(x0 - x, y0 + y, color);
      0009D4 E5 32            [12] 3124 	mov	a,_drawCircle_x0_65536_393
      0009D6 C3               [12] 3125 	clr	c
      0009D7 95 38            [12] 3126 	subb	a,_drawCircle_x_65536_394
      0009D9 FA               [12] 3127 	mov	r2,a
      0009DA E5 33            [12] 3128 	mov	a,(_drawCircle_x0_65536_393 + 1)
      0009DC 95 39            [12] 3129 	subb	a,(_drawCircle_x_65536_394 + 1)
      0009DE FB               [12] 3130 	mov	r3,a
      0009DF 8C 28            [24] 3131 	mov	_drawPixel_PARM_2,r4
      0009E1 8D 29            [24] 3132 	mov	(_drawPixel_PARM_2 + 1),r5
      0009E3 85 30 2A         [24] 3133 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009E6 85 31 2B         [24] 3134 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009E9 8A 82            [24] 3135 	mov	dpl,r2
      0009EB 8B 83            [24] 3136 	mov	dph,r3
      0009ED C0 03            [24] 3137 	push	ar3
      0009EF C0 02            [24] 3138 	push	ar2
      0009F1 C0 01            [24] 3139 	push	ar1
      0009F3 C0 00            [24] 3140 	push	ar0
      0009F5 12 08 36         [24] 3141 	lcall	_drawPixel
      0009F8 D0 00            [24] 3142 	pop	ar0
      0009FA D0 01            [24] 3143 	pop	ar1
      0009FC D0 02            [24] 3144 	pop	ar2
      0009FE D0 03            [24] 3145 	pop	ar3
      000A00 D0 06            [24] 3146 	pop	ar6
      000A02 D0 07            [24] 3147 	pop	ar7
                                   3148 ;	.\ecen4350_lcd_v4.c:539: drawPixel(x0 + x, y0 - y, color);
      000A04 E5 2C            [12] 3149 	mov	a,_drawCircle_PARM_2
      000A06 C3               [12] 3150 	clr	c
      000A07 98               [12] 3151 	subb	a,r0
      000A08 FC               [12] 3152 	mov	r4,a
      000A09 E5 2D            [12] 3153 	mov	a,(_drawCircle_PARM_2 + 1)
      000A0B 99               [12] 3154 	subb	a,r1
      000A0C FD               [12] 3155 	mov	r5,a
      000A0D 8C 28            [24] 3156 	mov	_drawPixel_PARM_2,r4
      000A0F 8D 29            [24] 3157 	mov	(_drawPixel_PARM_2 + 1),r5
      000A11 85 30 2A         [24] 3158 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A14 85 31 2B         [24] 3159 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A17 8E 82            [24] 3160 	mov	dpl,r6
      000A19 8F 83            [24] 3161 	mov	dph,r7
      000A1B C0 05            [24] 3162 	push	ar5
      000A1D C0 04            [24] 3163 	push	ar4
      000A1F C0 03            [24] 3164 	push	ar3
      000A21 C0 02            [24] 3165 	push	ar2
      000A23 C0 01            [24] 3166 	push	ar1
      000A25 C0 00            [24] 3167 	push	ar0
      000A27 12 08 36         [24] 3168 	lcall	_drawPixel
      000A2A D0 00            [24] 3169 	pop	ar0
      000A2C D0 01            [24] 3170 	pop	ar1
      000A2E D0 02            [24] 3171 	pop	ar2
      000A30 D0 03            [24] 3172 	pop	ar3
      000A32 D0 04            [24] 3173 	pop	ar4
      000A34 D0 05            [24] 3174 	pop	ar5
                                   3175 ;	.\ecen4350_lcd_v4.c:540: drawPixel(x0 - x, y0 - y, color);
      000A36 8C 28            [24] 3176 	mov	_drawPixel_PARM_2,r4
      000A38 8D 29            [24] 3177 	mov	(_drawPixel_PARM_2 + 1),r5
      000A3A 85 30 2A         [24] 3178 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A3D 85 31 2B         [24] 3179 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A40 8A 82            [24] 3180 	mov	dpl,r2
      000A42 8B 83            [24] 3181 	mov	dph,r3
      000A44 C0 03            [24] 3182 	push	ar3
      000A46 C0 02            [24] 3183 	push	ar2
      000A48 C0 01            [24] 3184 	push	ar1
      000A4A C0 00            [24] 3185 	push	ar0
      000A4C 12 08 36         [24] 3186 	lcall	_drawPixel
      000A4F D0 00            [24] 3187 	pop	ar0
      000A51 D0 01            [24] 3188 	pop	ar1
      000A53 D0 02            [24] 3189 	pop	ar2
      000A55 D0 03            [24] 3190 	pop	ar3
                                   3191 ;	.\ecen4350_lcd_v4.c:541: drawPixel(x0 + y, y0 + x, color);
      000A57 E8               [12] 3192 	mov	a,r0
      000A58 25 32            [12] 3193 	add	a,_drawCircle_x0_65536_393
      000A5A FE               [12] 3194 	mov	r6,a
      000A5B E9               [12] 3195 	mov	a,r1
      000A5C 35 33            [12] 3196 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000A5E FF               [12] 3197 	mov	r7,a
      000A5F E5 38            [12] 3198 	mov	a,_drawCircle_x_65536_394
      000A61 25 2C            [12] 3199 	add	a,_drawCircle_PARM_2
      000A63 FC               [12] 3200 	mov	r4,a
      000A64 E5 39            [12] 3201 	mov	a,(_drawCircle_x_65536_394 + 1)
      000A66 35 2D            [12] 3202 	addc	a,(_drawCircle_PARM_2 + 1)
      000A68 FD               [12] 3203 	mov	r5,a
      000A69 8C 28            [24] 3204 	mov	_drawPixel_PARM_2,r4
      000A6B 8D 29            [24] 3205 	mov	(_drawPixel_PARM_2 + 1),r5
      000A6D 85 30 2A         [24] 3206 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A70 85 31 2B         [24] 3207 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A73 8E 82            [24] 3208 	mov	dpl,r6
      000A75 8F 83            [24] 3209 	mov	dph,r7
      000A77 C0 07            [24] 3210 	push	ar7
      000A79 C0 06            [24] 3211 	push	ar6
      000A7B C0 05            [24] 3212 	push	ar5
      000A7D C0 04            [24] 3213 	push	ar4
      000A7F C0 03            [24] 3214 	push	ar3
      000A81 C0 02            [24] 3215 	push	ar2
      000A83 C0 01            [24] 3216 	push	ar1
      000A85 C0 00            [24] 3217 	push	ar0
      000A87 12 08 36         [24] 3218 	lcall	_drawPixel
      000A8A D0 00            [24] 3219 	pop	ar0
      000A8C D0 01            [24] 3220 	pop	ar1
      000A8E D0 02            [24] 3221 	pop	ar2
      000A90 D0 03            [24] 3222 	pop	ar3
      000A92 D0 04            [24] 3223 	pop	ar4
      000A94 D0 05            [24] 3224 	pop	ar5
                                   3225 ;	.\ecen4350_lcd_v4.c:542: drawPixel(x0 - y, y0 + x, color);
      000A96 E5 32            [12] 3226 	mov	a,_drawCircle_x0_65536_393
      000A98 C3               [12] 3227 	clr	c
      000A99 98               [12] 3228 	subb	a,r0
      000A9A FA               [12] 3229 	mov	r2,a
      000A9B E5 33            [12] 3230 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000A9D 99               [12] 3231 	subb	a,r1
      000A9E FB               [12] 3232 	mov	r3,a
      000A9F 8C 28            [24] 3233 	mov	_drawPixel_PARM_2,r4
      000AA1 8D 29            [24] 3234 	mov	(_drawPixel_PARM_2 + 1),r5
      000AA3 85 30 2A         [24] 3235 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000AA6 85 31 2B         [24] 3236 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000AA9 8A 82            [24] 3237 	mov	dpl,r2
      000AAB 8B 83            [24] 3238 	mov	dph,r3
      000AAD C0 03            [24] 3239 	push	ar3
      000AAF C0 02            [24] 3240 	push	ar2
      000AB1 C0 01            [24] 3241 	push	ar1
      000AB3 C0 00            [24] 3242 	push	ar0
      000AB5 12 08 36         [24] 3243 	lcall	_drawPixel
      000AB8 D0 00            [24] 3244 	pop	ar0
      000ABA D0 01            [24] 3245 	pop	ar1
      000ABC D0 02            [24] 3246 	pop	ar2
      000ABE D0 03            [24] 3247 	pop	ar3
      000AC0 D0 06            [24] 3248 	pop	ar6
      000AC2 D0 07            [24] 3249 	pop	ar7
                                   3250 ;	.\ecen4350_lcd_v4.c:543: drawPixel(x0 + y, y0 - x, color);
      000AC4 E5 2C            [12] 3251 	mov	a,_drawCircle_PARM_2
      000AC6 C3               [12] 3252 	clr	c
      000AC7 95 38            [12] 3253 	subb	a,_drawCircle_x_65536_394
      000AC9 FC               [12] 3254 	mov	r4,a
      000ACA E5 2D            [12] 3255 	mov	a,(_drawCircle_PARM_2 + 1)
      000ACC 95 39            [12] 3256 	subb	a,(_drawCircle_x_65536_394 + 1)
      000ACE FD               [12] 3257 	mov	r5,a
      000ACF 8C 28            [24] 3258 	mov	_drawPixel_PARM_2,r4
      000AD1 8D 29            [24] 3259 	mov	(_drawPixel_PARM_2 + 1),r5
      000AD3 85 30 2A         [24] 3260 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000AD6 85 31 2B         [24] 3261 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000AD9 8E 82            [24] 3262 	mov	dpl,r6
      000ADB 8F 83            [24] 3263 	mov	dph,r7
      000ADD C0 05            [24] 3264 	push	ar5
      000ADF C0 04            [24] 3265 	push	ar4
      000AE1 C0 03            [24] 3266 	push	ar3
      000AE3 C0 02            [24] 3267 	push	ar2
      000AE5 C0 01            [24] 3268 	push	ar1
      000AE7 C0 00            [24] 3269 	push	ar0
      000AE9 12 08 36         [24] 3270 	lcall	_drawPixel
      000AEC D0 00            [24] 3271 	pop	ar0
      000AEE D0 01            [24] 3272 	pop	ar1
      000AF0 D0 02            [24] 3273 	pop	ar2
      000AF2 D0 03            [24] 3274 	pop	ar3
      000AF4 D0 04            [24] 3275 	pop	ar4
      000AF6 D0 05            [24] 3276 	pop	ar5
                                   3277 ;	.\ecen4350_lcd_v4.c:544: drawPixel(x0 - y, y0 - x, color);
      000AF8 8C 28            [24] 3278 	mov	_drawPixel_PARM_2,r4
      000AFA 8D 29            [24] 3279 	mov	(_drawPixel_PARM_2 + 1),r5
      000AFC 85 30 2A         [24] 3280 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000AFF 85 31 2B         [24] 3281 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000B02 8A 82            [24] 3282 	mov	dpl,r2
      000B04 8B 83            [24] 3283 	mov	dph,r3
      000B06 C0 03            [24] 3284 	push	ar3
      000B08 C0 02            [24] 3285 	push	ar2
      000B0A C0 01            [24] 3286 	push	ar1
      000B0C C0 00            [24] 3287 	push	ar0
      000B0E 12 08 36         [24] 3288 	lcall	_drawPixel
      000B11 D0 00            [24] 3289 	pop	ar0
      000B13 D0 01            [24] 3290 	pop	ar1
      000B15 D0 02            [24] 3291 	pop	ar2
      000B17 D0 03            [24] 3292 	pop	ar3
      000B19 D0 03            [24] 3293 	pop	ar3
      000B1B D0 02            [24] 3294 	pop	ar2
                                   3295 ;	.\ecen4350_lcd_v4.c:546: }
      000B1D 02 09 45         [24] 3296 	ljmp	00103$
                                   3297 ;------------------------------------------------------------
                                   3298 ;Allocation info for local variables in function 'testCircles'
                                   3299 ;------------------------------------------------------------
                                   3300 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3301 ;radius                    Allocated to registers r7 
                                   3302 ;x                         Allocated to registers r0 r1 
                                   3303 ;y                         Allocated to registers r2 r3 
                                   3304 ;r2                        Allocated to registers r4 r5 
                                   3305 ;w                         Allocated with name '_testCircles_w_65536_398'
                                   3306 ;h                         Allocated with name '_testCircles_h_65536_398'
                                   3307 ;------------------------------------------------------------
                                   3308 ;	.\ecen4350_lcd_v4.c:548: void testCircles(u8 radius, u16 color)
                                   3309 ;	-----------------------------------------
                                   3310 ;	 function testCircles
                                   3311 ;	-----------------------------------------
      000B20                       3312 _testCircles:
                                   3313 ;	.\ecen4350_lcd_v4.c:551: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000B20 AE 82            [24] 3314 	mov	r6,dpl
      000B22 7F 00            [12] 3315 	mov	r7,#0x00
      000B24 EE               [12] 3316 	mov	a,r6
      000B25 2E               [12] 3317 	add	a,r6
      000B26 FC               [12] 3318 	mov	r4,a
      000B27 EF               [12] 3319 	mov	a,r7
      000B28 33               [12] 3320 	rlc	a
      000B29 FD               [12] 3321 	mov	r5,a
      000B2A 8E 02            [24] 3322 	mov	ar2,r6
      000B2C 8F 03            [24] 3323 	mov	ar3,r7
      000B2E EA               [12] 3324 	mov	a,r2
      000B2F 25 1A            [12] 3325 	add	a,__width
      000B31 F5 3C            [12] 3326 	mov	_testCircles_w_65536_398,a
      000B33 EB               [12] 3327 	mov	a,r3
      000B34 35 1B            [12] 3328 	addc	a,(__width + 1)
      000B36 F5 3D            [12] 3329 	mov	(_testCircles_w_65536_398 + 1),a
      000B38 EA               [12] 3330 	mov	a,r2
      000B39 25 1C            [12] 3331 	add	a,__height
      000B3B F5 3E            [12] 3332 	mov	_testCircles_h_65536_398,a
      000B3D EB               [12] 3333 	mov	a,r3
      000B3E 35 1D            [12] 3334 	addc	a,(__height + 1)
      000B40 F5 3F            [12] 3335 	mov	(_testCircles_h_65536_398 + 1),a
                                   3336 ;	.\ecen4350_lcd_v4.c:553: for (x = 0; x < w; x += r2)
      000B42 78 00            [12] 3337 	mov	r0,#0x00
      000B44 79 00            [12] 3338 	mov	r1,#0x00
      000B46                       3339 00107$:
      000B46 C3               [12] 3340 	clr	c
      000B47 E8               [12] 3341 	mov	a,r0
      000B48 95 3C            [12] 3342 	subb	a,_testCircles_w_65536_398
      000B4A E9               [12] 3343 	mov	a,r1
      000B4B 64 80            [12] 3344 	xrl	a,#0x80
      000B4D 85 3D F0         [24] 3345 	mov	b,(_testCircles_w_65536_398 + 1)
      000B50 63 F0 80         [24] 3346 	xrl	b,#0x80
      000B53 95 F0            [12] 3347 	subb	a,b
      000B55 50 5A            [24] 3348 	jnc	00109$
                                   3349 ;	.\ecen4350_lcd_v4.c:555: for (y = 0; y < h; y += r2)
      000B57 7A 00            [12] 3350 	mov	r2,#0x00
      000B59 7B 00            [12] 3351 	mov	r3,#0x00
      000B5B                       3352 00104$:
      000B5B C3               [12] 3353 	clr	c
      000B5C EA               [12] 3354 	mov	a,r2
      000B5D 95 3E            [12] 3355 	subb	a,_testCircles_h_65536_398
      000B5F EB               [12] 3356 	mov	a,r3
      000B60 64 80            [12] 3357 	xrl	a,#0x80
      000B62 85 3F F0         [24] 3358 	mov	b,(_testCircles_h_65536_398 + 1)
      000B65 63 F0 80         [24] 3359 	xrl	b,#0x80
      000B68 95 F0            [12] 3360 	subb	a,b
      000B6A 50 3D            [24] 3361 	jnc	00108$
                                   3362 ;	.\ecen4350_lcd_v4.c:557: drawCircle(x, y, radius, color);
      000B6C 8A 2C            [24] 3363 	mov	_drawCircle_PARM_2,r2
      000B6E 8B 2D            [24] 3364 	mov	(_drawCircle_PARM_2 + 1),r3
      000B70 8E 2E            [24] 3365 	mov	_drawCircle_PARM_3,r6
      000B72 8F 2F            [24] 3366 	mov	(_drawCircle_PARM_3 + 1),r7
      000B74 85 3A 30         [24] 3367 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000B77 85 3B 31         [24] 3368 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000B7A 88 82            [24] 3369 	mov	dpl,r0
      000B7C 89 83            [24] 3370 	mov	dph,r1
      000B7E C0 07            [24] 3371 	push	ar7
      000B80 C0 06            [24] 3372 	push	ar6
      000B82 C0 05            [24] 3373 	push	ar5
      000B84 C0 04            [24] 3374 	push	ar4
      000B86 C0 03            [24] 3375 	push	ar3
      000B88 C0 02            [24] 3376 	push	ar2
      000B8A C0 01            [24] 3377 	push	ar1
      000B8C C0 00            [24] 3378 	push	ar0
      000B8E 12 08 87         [24] 3379 	lcall	_drawCircle
      000B91 D0 00            [24] 3380 	pop	ar0
      000B93 D0 01            [24] 3381 	pop	ar1
      000B95 D0 02            [24] 3382 	pop	ar2
      000B97 D0 03            [24] 3383 	pop	ar3
      000B99 D0 04            [24] 3384 	pop	ar4
      000B9B D0 05            [24] 3385 	pop	ar5
      000B9D D0 06            [24] 3386 	pop	ar6
      000B9F D0 07            [24] 3387 	pop	ar7
                                   3388 ;	.\ecen4350_lcd_v4.c:555: for (y = 0; y < h; y += r2)
      000BA1 EC               [12] 3389 	mov	a,r4
      000BA2 2A               [12] 3390 	add	a,r2
      000BA3 FA               [12] 3391 	mov	r2,a
      000BA4 ED               [12] 3392 	mov	a,r5
      000BA5 3B               [12] 3393 	addc	a,r3
      000BA6 FB               [12] 3394 	mov	r3,a
      000BA7 80 B2            [24] 3395 	sjmp	00104$
      000BA9                       3396 00108$:
                                   3397 ;	.\ecen4350_lcd_v4.c:553: for (x = 0; x < w; x += r2)
      000BA9 EC               [12] 3398 	mov	a,r4
      000BAA 28               [12] 3399 	add	a,r0
      000BAB F8               [12] 3400 	mov	r0,a
      000BAC ED               [12] 3401 	mov	a,r5
      000BAD 39               [12] 3402 	addc	a,r1
      000BAE F9               [12] 3403 	mov	r1,a
      000BAF 80 95            [24] 3404 	sjmp	00107$
      000BB1                       3405 00109$:
                                   3406 ;	.\ecen4350_lcd_v4.c:560: }
      000BB1 22               [24] 3407 	ret
                                   3408 ;------------------------------------------------------------
                                   3409 ;Allocation info for local variables in function 'fillRect'
                                   3410 ;------------------------------------------------------------
                                   3411 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3412 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3413 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3414 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3415 ;x                         Allocated to registers 
                                   3416 ;------------------------------------------------------------
                                   3417 ;	.\ecen4350_lcd_v4.c:561: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3418 ;	-----------------------------------------
                                   3419 ;	 function fillRect
                                   3420 ;	-----------------------------------------
      000BB2                       3421 _fillRect:
      000BB2 AE 82            [24] 3422 	mov	r6,dpl
      000BB4 AF 83            [24] 3423 	mov	r7,dph
                                   3424 ;	.\ecen4350_lcd_v4.c:563: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000BB6 C3               [12] 3425 	clr	c
      000BB7 EE               [12] 3426 	mov	a,r6
      000BB8 94 F0            [12] 3427 	subb	a,#0xf0
      000BBA EF               [12] 3428 	mov	a,r7
      000BBB 94 00            [12] 3429 	subb	a,#0x00
      000BBD 50 0B            [24] 3430 	jnc	00101$
      000BBF C3               [12] 3431 	clr	c
      000BC0 E5 40            [12] 3432 	mov	a,_fillRect_PARM_2
      000BC2 94 40            [12] 3433 	subb	a,#0x40
      000BC4 E5 41            [12] 3434 	mov	a,(_fillRect_PARM_2 + 1)
      000BC6 94 01            [12] 3435 	subb	a,#0x01
      000BC8 40 01            [24] 3436 	jc	00102$
      000BCA                       3437 00101$:
                                   3438 ;	.\ecen4350_lcd_v4.c:565: return;
      000BCA 22               [24] 3439 	ret
      000BCB                       3440 00102$:
                                   3441 ;	.\ecen4350_lcd_v4.c:568: if ((x + w - 1) >= TFTWIDTH)
      000BCB E5 42            [12] 3442 	mov	a,_fillRect_PARM_3
      000BCD 2E               [12] 3443 	add	a,r6
      000BCE FC               [12] 3444 	mov	r4,a
      000BCF E5 43            [12] 3445 	mov	a,(_fillRect_PARM_3 + 1)
      000BD1 3F               [12] 3446 	addc	a,r7
      000BD2 FD               [12] 3447 	mov	r5,a
      000BD3 1C               [12] 3448 	dec	r4
      000BD4 BC FF 01         [24] 3449 	cjne	r4,#0xff,00161$
      000BD7 1D               [12] 3450 	dec	r5
      000BD8                       3451 00161$:
      000BD8 C3               [12] 3452 	clr	c
      000BD9 EC               [12] 3453 	mov	a,r4
      000BDA 94 F0            [12] 3454 	subb	a,#0xf0
      000BDC ED               [12] 3455 	mov	a,r5
      000BDD 94 00            [12] 3456 	subb	a,#0x00
      000BDF 40 0A            [24] 3457 	jc	00105$
                                   3458 ;	.\ecen4350_lcd_v4.c:570: w = TFTWIDTH - x;
      000BE1 74 F0            [12] 3459 	mov	a,#0xf0
      000BE3 C3               [12] 3460 	clr	c
      000BE4 9E               [12] 3461 	subb	a,r6
      000BE5 F5 42            [12] 3462 	mov	_fillRect_PARM_3,a
      000BE7 E4               [12] 3463 	clr	a
      000BE8 9F               [12] 3464 	subb	a,r7
      000BE9 F5 43            [12] 3465 	mov	(_fillRect_PARM_3 + 1),a
      000BEB                       3466 00105$:
                                   3467 ;	.\ecen4350_lcd_v4.c:573: if ((y + h - 1) >= TFTHEIGHT)
      000BEB E5 44            [12] 3468 	mov	a,_fillRect_PARM_4
      000BED 25 40            [12] 3469 	add	a,_fillRect_PARM_2
      000BEF FC               [12] 3470 	mov	r4,a
      000BF0 E5 45            [12] 3471 	mov	a,(_fillRect_PARM_4 + 1)
      000BF2 35 41            [12] 3472 	addc	a,(_fillRect_PARM_2 + 1)
      000BF4 FD               [12] 3473 	mov	r5,a
      000BF5 1C               [12] 3474 	dec	r4
      000BF6 BC FF 01         [24] 3475 	cjne	r4,#0xff,00163$
      000BF9 1D               [12] 3476 	dec	r5
      000BFA                       3477 00163$:
      000BFA C3               [12] 3478 	clr	c
      000BFB EC               [12] 3479 	mov	a,r4
      000BFC 94 40            [12] 3480 	subb	a,#0x40
      000BFE ED               [12] 3481 	mov	a,r5
      000BFF 94 01            [12] 3482 	subb	a,#0x01
      000C01 40 0D            [24] 3483 	jc	00107$
                                   3484 ;	.\ecen4350_lcd_v4.c:575: h = TFTHEIGHT - y;
      000C03 74 40            [12] 3485 	mov	a,#0x40
      000C05 C3               [12] 3486 	clr	c
      000C06 95 40            [12] 3487 	subb	a,_fillRect_PARM_2
      000C08 F5 44            [12] 3488 	mov	_fillRect_PARM_4,a
      000C0A 74 01            [12] 3489 	mov	a,#0x01
      000C0C 95 41            [12] 3490 	subb	a,(_fillRect_PARM_2 + 1)
      000C0E F5 45            [12] 3491 	mov	(_fillRect_PARM_4 + 1),a
      000C10                       3492 00107$:
                                   3493 ;	.\ecen4350_lcd_v4.c:578: setAddress(x, y, x + w - 1, y + h - 1);
      000C10 E5 42            [12] 3494 	mov	a,_fillRect_PARM_3
      000C12 2E               [12] 3495 	add	a,r6
      000C13 FC               [12] 3496 	mov	r4,a
      000C14 E5 43            [12] 3497 	mov	a,(_fillRect_PARM_3 + 1)
      000C16 3F               [12] 3498 	addc	a,r7
      000C17 FD               [12] 3499 	mov	r5,a
      000C18 EC               [12] 3500 	mov	a,r4
      000C19 24 FF            [12] 3501 	add	a,#0xff
      000C1B F5 6D            [12] 3502 	mov	_setAddress_PARM_3,a
      000C1D ED               [12] 3503 	mov	a,r5
      000C1E 34 FF            [12] 3504 	addc	a,#0xff
      000C20 F5 6E            [12] 3505 	mov	(_setAddress_PARM_3 + 1),a
      000C22 E5 44            [12] 3506 	mov	a,_fillRect_PARM_4
      000C24 25 40            [12] 3507 	add	a,_fillRect_PARM_2
      000C26 FC               [12] 3508 	mov	r4,a
      000C27 E5 45            [12] 3509 	mov	a,(_fillRect_PARM_4 + 1)
      000C29 35 41            [12] 3510 	addc	a,(_fillRect_PARM_2 + 1)
      000C2B FD               [12] 3511 	mov	r5,a
      000C2C EC               [12] 3512 	mov	a,r4
      000C2D 24 FF            [12] 3513 	add	a,#0xff
      000C2F F5 6F            [12] 3514 	mov	_setAddress_PARM_4,a
      000C31 ED               [12] 3515 	mov	a,r5
      000C32 34 FF            [12] 3516 	addc	a,#0xff
      000C34 F5 70            [12] 3517 	mov	(_setAddress_PARM_4 + 1),a
      000C36 85 40 6B         [24] 3518 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000C39 85 41 6C         [24] 3519 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000C3C 8E 82            [24] 3520 	mov	dpl,r6
      000C3E 8F 83            [24] 3521 	mov	dph,r7
      000C40 12 06 5C         [24] 3522 	lcall	_setAddress
                                   3523 ;	.\ecen4350_lcd_v4.c:581: write8Reg(0x2C);
                                   3524 ;	assignBit
      000C43 C2 B4            [12] 3525 	clr	_P3_4
                                   3526 ;	assignBit
      000C45 D2 B5            [12] 3527 	setb	_P3_5
      000C47 85 0A 82         [24] 3528 	mov	dpl,_lcd_address
      000C4A 85 0B 83         [24] 3529 	mov	dph,(_lcd_address + 1)
      000C4D 74 2C            [12] 3530 	mov	a,#0x2c
      000C4F F0               [24] 3531 	movx	@dptr,a
                                   3532 ;	assignBit
      000C50 C2 B5            [12] 3533 	clr	_P3_5
                                   3534 ;	.\ecen4350_lcd_v4.c:583: CD = 1;
                                   3535 ;	assignBit
      000C52 D2 B4            [12] 3536 	setb	_P3_4
                                   3537 ;	.\ecen4350_lcd_v4.c:584: for (y = h; y > 0; y--)
      000C54 AF 47            [24] 3538 	mov	r7,(_fillRect_PARM_5 + 1)
      000C56 AD 44            [24] 3539 	mov	r5,_fillRect_PARM_4
      000C58 AE 45            [24] 3540 	mov	r6,(_fillRect_PARM_4 + 1)
      000C5A                       3541 00114$:
      000C5A ED               [12] 3542 	mov	a,r5
      000C5B 4E               [12] 3543 	orl	a,r6
      000C5C 60 30            [24] 3544 	jz	00116$
                                   3545 ;	.\ecen4350_lcd_v4.c:586: for (x = w; x > 0; x--)
      000C5E AB 42            [24] 3546 	mov	r3,_fillRect_PARM_3
      000C60 AC 43            [24] 3547 	mov	r4,(_fillRect_PARM_3 + 1)
      000C62                       3548 00111$:
      000C62 EB               [12] 3549 	mov	a,r3
      000C63 4C               [12] 3550 	orl	a,r4
      000C64 60 21            [24] 3551 	jz	00115$
                                   3552 ;	.\ecen4350_lcd_v4.c:589: write8(color >> 8);
                                   3553 ;	assignBit
      000C66 D2 B5            [12] 3554 	setb	_P3_5
      000C68 85 0A 82         [24] 3555 	mov	dpl,_lcd_address
      000C6B 85 0B 83         [24] 3556 	mov	dph,(_lcd_address + 1)
      000C6E EF               [12] 3557 	mov	a,r7
      000C6F F0               [24] 3558 	movx	@dptr,a
                                   3559 ;	assignBit
      000C70 C2 B5            [12] 3560 	clr	_P3_5
                                   3561 ;	.\ecen4350_lcd_v4.c:590: write8(color);
                                   3562 ;	assignBit
      000C72 D2 B5            [12] 3563 	setb	_P3_5
      000C74 85 0A 82         [24] 3564 	mov	dpl,_lcd_address
      000C77 85 0B 83         [24] 3565 	mov	dph,(_lcd_address + 1)
      000C7A E5 46            [12] 3566 	mov	a,_fillRect_PARM_5
      000C7C FA               [12] 3567 	mov	r2,a
      000C7D F0               [24] 3568 	movx	@dptr,a
                                   3569 ;	assignBit
      000C7E C2 B5            [12] 3570 	clr	_P3_5
                                   3571 ;	.\ecen4350_lcd_v4.c:586: for (x = w; x > 0; x--)
      000C80 1B               [12] 3572 	dec	r3
      000C81 BB FF 01         [24] 3573 	cjne	r3,#0xff,00167$
      000C84 1C               [12] 3574 	dec	r4
      000C85                       3575 00167$:
      000C85 80 DB            [24] 3576 	sjmp	00111$
      000C87                       3577 00115$:
                                   3578 ;	.\ecen4350_lcd_v4.c:584: for (y = h; y > 0; y--)
      000C87 1D               [12] 3579 	dec	r5
      000C88 BD FF 01         [24] 3580 	cjne	r5,#0xff,00168$
      000C8B 1E               [12] 3581 	dec	r6
      000C8C                       3582 00168$:
      000C8C 80 CC            [24] 3583 	sjmp	00114$
      000C8E                       3584 00116$:
                                   3585 ;	.\ecen4350_lcd_v4.c:594: }
      000C8E 22               [24] 3586 	ret
                                   3587 ;------------------------------------------------------------
                                   3588 ;Allocation info for local variables in function 'fillTop'
                                   3589 ;------------------------------------------------------------
                                   3590 ;Color                     Allocated to registers r6 r7 
                                   3591 ;len                       Allocated to registers 
                                   3592 ;blocks                    Allocated to registers r4 r7 
                                   3593 ;i                         Allocated to registers r3 
                                   3594 ;hi                        Allocated to registers r5 
                                   3595 ;lo                        Allocated to registers r6 
                                   3596 ;------------------------------------------------------------
                                   3597 ;	.\ecen4350_lcd_v4.c:596: void fillTop(unsigned int Color) {
                                   3598 ;	-----------------------------------------
                                   3599 ;	 function fillTop
                                   3600 ;	-----------------------------------------
      000C8F                       3601 _fillTop:
      000C8F AE 82            [24] 3602 	mov	r6,dpl
      000C91 AF 83            [24] 3603 	mov	r7,dph
                                   3604 ;	.\ecen4350_lcd_v4.c:600: unsigned char i, hi = Color >> 8, 
      000C93 8F 05            [24] 3605 	mov	ar5,r7
                                   3606 ;	.\ecen4350_lcd_v4.c:601: lo = Color;
                                   3607 ;	.\ecen4350_lcd_v4.c:604: setAddress(0, 0, TFTWIDTH - 1, 39);
      000C95 E4               [12] 3608 	clr	a
      000C96 F5 6B            [12] 3609 	mov	_setAddress_PARM_2,a
      000C98 F5 6C            [12] 3610 	mov	(_setAddress_PARM_2 + 1),a
      000C9A 75 6D EF         [24] 3611 	mov	_setAddress_PARM_3,#0xef
                                   3612 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000C9D F5 6E            [12] 3613 	mov	(_setAddress_PARM_3 + 1),a
      000C9F 75 6F 27         [24] 3614 	mov	_setAddress_PARM_4,#0x27
                                   3615 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000CA2 F5 70            [12] 3616 	mov	(_setAddress_PARM_4 + 1),a
      000CA4 90 00 00         [24] 3617 	mov	dptr,#0x0000
      000CA7 C0 06            [24] 3618 	push	ar6
      000CA9 C0 05            [24] 3619 	push	ar5
      000CAB 12 06 5C         [24] 3620 	lcall	_setAddress
      000CAE D0 05            [24] 3621 	pop	ar5
      000CB0 D0 06            [24] 3622 	pop	ar6
                                   3623 ;	.\ecen4350_lcd_v4.c:606: write8Reg(0x2C);
                                   3624 ;	assignBit
      000CB2 C2 B4            [12] 3625 	clr	_P3_4
                                   3626 ;	assignBit
      000CB4 D2 B5            [12] 3627 	setb	_P3_5
      000CB6 85 0A 82         [24] 3628 	mov	dpl,_lcd_address
      000CB9 85 0B 83         [24] 3629 	mov	dph,(_lcd_address + 1)
      000CBC 74 2C            [12] 3630 	mov	a,#0x2c
      000CBE F0               [24] 3631 	movx	@dptr,a
                                   3632 ;	assignBit
      000CBF C2 B5            [12] 3633 	clr	_P3_5
                                   3634 ;	.\ecen4350_lcd_v4.c:608: CD = 1;
                                   3635 ;	assignBit
      000CC1 D2 B4            [12] 3636 	setb	_P3_4
                                   3637 ;	.\ecen4350_lcd_v4.c:609: write8(hi);
                                   3638 ;	assignBit
      000CC3 D2 B5            [12] 3639 	setb	_P3_5
      000CC5 85 0A 82         [24] 3640 	mov	dpl,_lcd_address
      000CC8 85 0B 83         [24] 3641 	mov	dph,(_lcd_address + 1)
      000CCB ED               [12] 3642 	mov	a,r5
      000CCC F0               [24] 3643 	movx	@dptr,a
                                   3644 ;	assignBit
      000CCD C2 B5            [12] 3645 	clr	_P3_5
                                   3646 ;	.\ecen4350_lcd_v4.c:610: write8(lo);
                                   3647 ;	assignBit
      000CCF D2 B5            [12] 3648 	setb	_P3_5
      000CD1 85 0A 82         [24] 3649 	mov	dpl,_lcd_address
      000CD4 85 0B 83         [24] 3650 	mov	dph,(_lcd_address + 1)
      000CD7 EE               [12] 3651 	mov	a,r6
      000CD8 F0               [24] 3652 	movx	@dptr,a
                                   3653 ;	assignBit
      000CD9 C2 B5            [12] 3654 	clr	_P3_5
                                   3655 ;	.\ecen4350_lcd_v4.c:613: while (blocks--)
      000CDB 7C 96            [12] 3656 	mov	r4,#0x96
      000CDD 7F 00            [12] 3657 	mov	r7,#0x00
      000CDF                       3658 00104$:
      000CDF 8C 02            [24] 3659 	mov	ar2,r4
      000CE1 8F 03            [24] 3660 	mov	ar3,r7
      000CE3 1C               [12] 3661 	dec	r4
      000CE4 BC FF 01         [24] 3662 	cjne	r4,#0xff,00140$
      000CE7 1F               [12] 3663 	dec	r7
      000CE8                       3664 00140$:
      000CE8 EA               [12] 3665 	mov	a,r2
      000CE9 4B               [12] 3666 	orl	a,r3
      000CEA 60 66            [24] 3667 	jz	00106$
                                   3668 ;	.\ecen4350_lcd_v4.c:616: do
      000CEC 7B 10            [12] 3669 	mov	r3,#0x10
      000CEE                       3670 00101$:
                                   3671 ;	.\ecen4350_lcd_v4.c:619: write8(hi);
                                   3672 ;	assignBit
      000CEE D2 B5            [12] 3673 	setb	_P3_5
      000CF0 85 0A 82         [24] 3674 	mov	dpl,_lcd_address
      000CF3 85 0B 83         [24] 3675 	mov	dph,(_lcd_address + 1)
      000CF6 ED               [12] 3676 	mov	a,r5
      000CF7 F0               [24] 3677 	movx	@dptr,a
                                   3678 ;	assignBit
      000CF8 C2 B5            [12] 3679 	clr	_P3_5
                                   3680 ;	.\ecen4350_lcd_v4.c:620: write8(lo);
                                   3681 ;	assignBit
      000CFA D2 B5            [12] 3682 	setb	_P3_5
      000CFC 85 0A 82         [24] 3683 	mov	dpl,_lcd_address
      000CFF 85 0B 83         [24] 3684 	mov	dph,(_lcd_address + 1)
      000D02 EE               [12] 3685 	mov	a,r6
      000D03 F0               [24] 3686 	movx	@dptr,a
                                   3687 ;	assignBit
      000D04 C2 B5            [12] 3688 	clr	_P3_5
                                   3689 ;	.\ecen4350_lcd_v4.c:621: write8(hi);
                                   3690 ;	assignBit
      000D06 D2 B5            [12] 3691 	setb	_P3_5
      000D08 85 0A 82         [24] 3692 	mov	dpl,_lcd_address
      000D0B 85 0B 83         [24] 3693 	mov	dph,(_lcd_address + 1)
      000D0E ED               [12] 3694 	mov	a,r5
      000D0F F0               [24] 3695 	movx	@dptr,a
                                   3696 ;	assignBit
      000D10 C2 B5            [12] 3697 	clr	_P3_5
                                   3698 ;	.\ecen4350_lcd_v4.c:622: write8(lo);
                                   3699 ;	assignBit
      000D12 D2 B5            [12] 3700 	setb	_P3_5
      000D14 85 0A 82         [24] 3701 	mov	dpl,_lcd_address
      000D17 85 0B 83         [24] 3702 	mov	dph,(_lcd_address + 1)
      000D1A EE               [12] 3703 	mov	a,r6
      000D1B F0               [24] 3704 	movx	@dptr,a
                                   3705 ;	assignBit
      000D1C C2 B5            [12] 3706 	clr	_P3_5
                                   3707 ;	.\ecen4350_lcd_v4.c:623: write8(hi);
                                   3708 ;	assignBit
      000D1E D2 B5            [12] 3709 	setb	_P3_5
      000D20 85 0A 82         [24] 3710 	mov	dpl,_lcd_address
      000D23 85 0B 83         [24] 3711 	mov	dph,(_lcd_address + 1)
      000D26 ED               [12] 3712 	mov	a,r5
      000D27 F0               [24] 3713 	movx	@dptr,a
                                   3714 ;	assignBit
      000D28 C2 B5            [12] 3715 	clr	_P3_5
                                   3716 ;	.\ecen4350_lcd_v4.c:624: write8(lo);
                                   3717 ;	assignBit
      000D2A D2 B5            [12] 3718 	setb	_P3_5
      000D2C 85 0A 82         [24] 3719 	mov	dpl,_lcd_address
      000D2F 85 0B 83         [24] 3720 	mov	dph,(_lcd_address + 1)
      000D32 EE               [12] 3721 	mov	a,r6
      000D33 F0               [24] 3722 	movx	@dptr,a
                                   3723 ;	assignBit
      000D34 C2 B5            [12] 3724 	clr	_P3_5
                                   3725 ;	.\ecen4350_lcd_v4.c:625: write8(hi);
                                   3726 ;	assignBit
      000D36 D2 B5            [12] 3727 	setb	_P3_5
      000D38 85 0A 82         [24] 3728 	mov	dpl,_lcd_address
      000D3B 85 0B 83         [24] 3729 	mov	dph,(_lcd_address + 1)
      000D3E ED               [12] 3730 	mov	a,r5
      000D3F F0               [24] 3731 	movx	@dptr,a
                                   3732 ;	assignBit
      000D40 C2 B5            [12] 3733 	clr	_P3_5
                                   3734 ;	.\ecen4350_lcd_v4.c:626: write8(lo);
                                   3735 ;	assignBit
      000D42 D2 B5            [12] 3736 	setb	_P3_5
      000D44 85 0A 82         [24] 3737 	mov	dpl,_lcd_address
      000D47 85 0B 83         [24] 3738 	mov	dph,(_lcd_address + 1)
      000D4A EE               [12] 3739 	mov	a,r6
      000D4B F0               [24] 3740 	movx	@dptr,a
                                   3741 ;	assignBit
      000D4C C2 B5            [12] 3742 	clr	_P3_5
                                   3743 ;	.\ecen4350_lcd_v4.c:627: } while (--i);
      000D4E DB 9E            [24] 3744 	djnz	r3,00101$
      000D50 80 8D            [24] 3745 	sjmp	00104$
      000D52                       3746 00106$:
                                   3747 ;	.\ecen4350_lcd_v4.c:629: for (i = (char)len & 63; i--;)
      000D52 7F 3F            [12] 3748 	mov	r7,#0x3f
      000D54                       3749 00109$:
      000D54 8F 04            [24] 3750 	mov	ar4,r7
      000D56 1F               [12] 3751 	dec	r7
      000D57 EC               [12] 3752 	mov	a,r4
      000D58 60 1A            [24] 3753 	jz	00111$
                                   3754 ;	.\ecen4350_lcd_v4.c:632: write8(hi);
                                   3755 ;	assignBit
      000D5A D2 B5            [12] 3756 	setb	_P3_5
      000D5C 85 0A 82         [24] 3757 	mov	dpl,_lcd_address
      000D5F 85 0B 83         [24] 3758 	mov	dph,(_lcd_address + 1)
      000D62 ED               [12] 3759 	mov	a,r5
      000D63 F0               [24] 3760 	movx	@dptr,a
                                   3761 ;	assignBit
      000D64 C2 B5            [12] 3762 	clr	_P3_5
                                   3763 ;	.\ecen4350_lcd_v4.c:633: write8(lo);
                                   3764 ;	assignBit
      000D66 D2 B5            [12] 3765 	setb	_P3_5
      000D68 85 0A 82         [24] 3766 	mov	dpl,_lcd_address
      000D6B 85 0B 83         [24] 3767 	mov	dph,(_lcd_address + 1)
      000D6E EE               [12] 3768 	mov	a,r6
      000D6F F0               [24] 3769 	movx	@dptr,a
                                   3770 ;	assignBit
      000D70 C2 B5            [12] 3771 	clr	_P3_5
      000D72 80 E0            [24] 3772 	sjmp	00109$
      000D74                       3773 00111$:
                                   3774 ;	.\ecen4350_lcd_v4.c:637: }
      000D74 22               [24] 3775 	ret
                                   3776 ;------------------------------------------------------------
                                   3777 ;Allocation info for local variables in function 'fillScreen'
                                   3778 ;------------------------------------------------------------
                                   3779 ;Color                     Allocated to registers r6 r7 
                                   3780 ;len                       Allocated to registers 
                                   3781 ;blocks                    Allocated to registers r4 r7 
                                   3782 ;i                         Allocated to registers r3 
                                   3783 ;hi                        Allocated to registers r5 
                                   3784 ;lo                        Allocated to registers r6 
                                   3785 ;------------------------------------------------------------
                                   3786 ;	.\ecen4350_lcd_v4.c:639: void fillScreen(unsigned int Color)
                                   3787 ;	-----------------------------------------
                                   3788 ;	 function fillScreen
                                   3789 ;	-----------------------------------------
      000D75                       3790 _fillScreen:
      000D75 AE 82            [24] 3791 	mov	r6,dpl
      000D77 AF 83            [24] 3792 	mov	r7,dph
                                   3793 ;	.\ecen4350_lcd_v4.c:646: unsigned char i, hi = Color >> 8,
      000D79 8F 05            [24] 3794 	mov	ar5,r7
                                   3795 ;	.\ecen4350_lcd_v4.c:647: lo = Color;
                                   3796 ;	.\ecen4350_lcd_v4.c:650: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000D7B E4               [12] 3797 	clr	a
      000D7C F5 6B            [12] 3798 	mov	_setAddress_PARM_2,a
      000D7E F5 6C            [12] 3799 	mov	(_setAddress_PARM_2 + 1),a
      000D80 75 6D EF         [24] 3800 	mov	_setAddress_PARM_3,#0xef
                                   3801 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000D83 F5 6E            [12] 3802 	mov	(_setAddress_PARM_3 + 1),a
      000D85 75 6F 3F         [24] 3803 	mov	_setAddress_PARM_4,#0x3f
      000D88 75 70 01         [24] 3804 	mov	(_setAddress_PARM_4 + 1),#0x01
      000D8B 90 00 00         [24] 3805 	mov	dptr,#0x0000
      000D8E C0 06            [24] 3806 	push	ar6
      000D90 C0 05            [24] 3807 	push	ar5
      000D92 12 06 5C         [24] 3808 	lcall	_setAddress
      000D95 D0 05            [24] 3809 	pop	ar5
      000D97 D0 06            [24] 3810 	pop	ar6
                                   3811 ;	.\ecen4350_lcd_v4.c:654: write8Reg(0x2C);
                                   3812 ;	assignBit
      000D99 C2 B4            [12] 3813 	clr	_P3_4
                                   3814 ;	assignBit
      000D9B D2 B5            [12] 3815 	setb	_P3_5
      000D9D 85 0A 82         [24] 3816 	mov	dpl,_lcd_address
      000DA0 85 0B 83         [24] 3817 	mov	dph,(_lcd_address + 1)
      000DA3 74 2C            [12] 3818 	mov	a,#0x2c
      000DA5 F0               [24] 3819 	movx	@dptr,a
                                   3820 ;	assignBit
      000DA6 C2 B5            [12] 3821 	clr	_P3_5
                                   3822 ;	.\ecen4350_lcd_v4.c:656: CD = 1;
                                   3823 ;	assignBit
      000DA8 D2 B4            [12] 3824 	setb	_P3_4
                                   3825 ;	.\ecen4350_lcd_v4.c:657: write8(hi);
                                   3826 ;	assignBit
      000DAA D2 B5            [12] 3827 	setb	_P3_5
      000DAC 85 0A 82         [24] 3828 	mov	dpl,_lcd_address
      000DAF 85 0B 83         [24] 3829 	mov	dph,(_lcd_address + 1)
      000DB2 ED               [12] 3830 	mov	a,r5
      000DB3 F0               [24] 3831 	movx	@dptr,a
                                   3832 ;	assignBit
      000DB4 C2 B5            [12] 3833 	clr	_P3_5
                                   3834 ;	.\ecen4350_lcd_v4.c:658: write8(lo);
                                   3835 ;	assignBit
      000DB6 D2 B5            [12] 3836 	setb	_P3_5
      000DB8 85 0A 82         [24] 3837 	mov	dpl,_lcd_address
      000DBB 85 0B 83         [24] 3838 	mov	dph,(_lcd_address + 1)
      000DBE EE               [12] 3839 	mov	a,r6
      000DBF F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	assignBit
      000DC0 C2 B5            [12] 3842 	clr	_P3_5
                                   3843 ;	.\ecen4350_lcd_v4.c:661: while (blocks--)
      000DC2 7C B0            [12] 3844 	mov	r4,#0xb0
      000DC4 7F 04            [12] 3845 	mov	r7,#0x04
      000DC6                       3846 00104$:
      000DC6 8C 02            [24] 3847 	mov	ar2,r4
      000DC8 8F 03            [24] 3848 	mov	ar3,r7
      000DCA 1C               [12] 3849 	dec	r4
      000DCB BC FF 01         [24] 3850 	cjne	r4,#0xff,00140$
      000DCE 1F               [12] 3851 	dec	r7
      000DCF                       3852 00140$:
      000DCF EA               [12] 3853 	mov	a,r2
      000DD0 4B               [12] 3854 	orl	a,r3
      000DD1 60 66            [24] 3855 	jz	00106$
                                   3856 ;	.\ecen4350_lcd_v4.c:664: do
      000DD3 7B 10            [12] 3857 	mov	r3,#0x10
      000DD5                       3858 00101$:
                                   3859 ;	.\ecen4350_lcd_v4.c:667: write8(hi);
                                   3860 ;	assignBit
      000DD5 D2 B5            [12] 3861 	setb	_P3_5
      000DD7 85 0A 82         [24] 3862 	mov	dpl,_lcd_address
      000DDA 85 0B 83         [24] 3863 	mov	dph,(_lcd_address + 1)
      000DDD ED               [12] 3864 	mov	a,r5
      000DDE F0               [24] 3865 	movx	@dptr,a
                                   3866 ;	assignBit
      000DDF C2 B5            [12] 3867 	clr	_P3_5
                                   3868 ;	.\ecen4350_lcd_v4.c:668: write8(lo);
                                   3869 ;	assignBit
      000DE1 D2 B5            [12] 3870 	setb	_P3_5
      000DE3 85 0A 82         [24] 3871 	mov	dpl,_lcd_address
      000DE6 85 0B 83         [24] 3872 	mov	dph,(_lcd_address + 1)
      000DE9 EE               [12] 3873 	mov	a,r6
      000DEA F0               [24] 3874 	movx	@dptr,a
                                   3875 ;	assignBit
      000DEB C2 B5            [12] 3876 	clr	_P3_5
                                   3877 ;	.\ecen4350_lcd_v4.c:669: write8(hi);
                                   3878 ;	assignBit
      000DED D2 B5            [12] 3879 	setb	_P3_5
      000DEF 85 0A 82         [24] 3880 	mov	dpl,_lcd_address
      000DF2 85 0B 83         [24] 3881 	mov	dph,(_lcd_address + 1)
      000DF5 ED               [12] 3882 	mov	a,r5
      000DF6 F0               [24] 3883 	movx	@dptr,a
                                   3884 ;	assignBit
      000DF7 C2 B5            [12] 3885 	clr	_P3_5
                                   3886 ;	.\ecen4350_lcd_v4.c:670: write8(lo);
                                   3887 ;	assignBit
      000DF9 D2 B5            [12] 3888 	setb	_P3_5
      000DFB 85 0A 82         [24] 3889 	mov	dpl,_lcd_address
      000DFE 85 0B 83         [24] 3890 	mov	dph,(_lcd_address + 1)
      000E01 EE               [12] 3891 	mov	a,r6
      000E02 F0               [24] 3892 	movx	@dptr,a
                                   3893 ;	assignBit
      000E03 C2 B5            [12] 3894 	clr	_P3_5
                                   3895 ;	.\ecen4350_lcd_v4.c:671: write8(hi);
                                   3896 ;	assignBit
      000E05 D2 B5            [12] 3897 	setb	_P3_5
      000E07 85 0A 82         [24] 3898 	mov	dpl,_lcd_address
      000E0A 85 0B 83         [24] 3899 	mov	dph,(_lcd_address + 1)
      000E0D ED               [12] 3900 	mov	a,r5
      000E0E F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	assignBit
      000E0F C2 B5            [12] 3903 	clr	_P3_5
                                   3904 ;	.\ecen4350_lcd_v4.c:672: write8(lo);
                                   3905 ;	assignBit
      000E11 D2 B5            [12] 3906 	setb	_P3_5
      000E13 85 0A 82         [24] 3907 	mov	dpl,_lcd_address
      000E16 85 0B 83         [24] 3908 	mov	dph,(_lcd_address + 1)
      000E19 EE               [12] 3909 	mov	a,r6
      000E1A F0               [24] 3910 	movx	@dptr,a
                                   3911 ;	assignBit
      000E1B C2 B5            [12] 3912 	clr	_P3_5
                                   3913 ;	.\ecen4350_lcd_v4.c:673: write8(hi);
                                   3914 ;	assignBit
      000E1D D2 B5            [12] 3915 	setb	_P3_5
      000E1F 85 0A 82         [24] 3916 	mov	dpl,_lcd_address
      000E22 85 0B 83         [24] 3917 	mov	dph,(_lcd_address + 1)
      000E25 ED               [12] 3918 	mov	a,r5
      000E26 F0               [24] 3919 	movx	@dptr,a
                                   3920 ;	assignBit
      000E27 C2 B5            [12] 3921 	clr	_P3_5
                                   3922 ;	.\ecen4350_lcd_v4.c:674: write8(lo);
                                   3923 ;	assignBit
      000E29 D2 B5            [12] 3924 	setb	_P3_5
      000E2B 85 0A 82         [24] 3925 	mov	dpl,_lcd_address
      000E2E 85 0B 83         [24] 3926 	mov	dph,(_lcd_address + 1)
      000E31 EE               [12] 3927 	mov	a,r6
      000E32 F0               [24] 3928 	movx	@dptr,a
                                   3929 ;	assignBit
      000E33 C2 B5            [12] 3930 	clr	_P3_5
                                   3931 ;	.\ecen4350_lcd_v4.c:675: } while (--i);
      000E35 DB 9E            [24] 3932 	djnz	r3,00101$
      000E37 80 8D            [24] 3933 	sjmp	00104$
      000E39                       3934 00106$:
                                   3935 ;	.\ecen4350_lcd_v4.c:677: for (i = (char)len & 63; i--;)
      000E39 7F 3F            [12] 3936 	mov	r7,#0x3f
      000E3B                       3937 00109$:
      000E3B 8F 04            [24] 3938 	mov	ar4,r7
      000E3D 1F               [12] 3939 	dec	r7
      000E3E EC               [12] 3940 	mov	a,r4
      000E3F 60 1A            [24] 3941 	jz	00111$
                                   3942 ;	.\ecen4350_lcd_v4.c:680: write8(hi);
                                   3943 ;	assignBit
      000E41 D2 B5            [12] 3944 	setb	_P3_5
      000E43 85 0A 82         [24] 3945 	mov	dpl,_lcd_address
      000E46 85 0B 83         [24] 3946 	mov	dph,(_lcd_address + 1)
      000E49 ED               [12] 3947 	mov	a,r5
      000E4A F0               [24] 3948 	movx	@dptr,a
                                   3949 ;	assignBit
      000E4B C2 B5            [12] 3950 	clr	_P3_5
                                   3951 ;	.\ecen4350_lcd_v4.c:681: write8(lo);
                                   3952 ;	assignBit
      000E4D D2 B5            [12] 3953 	setb	_P3_5
      000E4F 85 0A 82         [24] 3954 	mov	dpl,_lcd_address
      000E52 85 0B 83         [24] 3955 	mov	dph,(_lcd_address + 1)
      000E55 EE               [12] 3956 	mov	a,r6
      000E56 F0               [24] 3957 	movx	@dptr,a
                                   3958 ;	assignBit
      000E57 C2 B5            [12] 3959 	clr	_P3_5
      000E59 80 E0            [24] 3960 	sjmp	00109$
      000E5B                       3961 00111$:
                                   3962 ;	.\ecen4350_lcd_v4.c:685: }
      000E5B 22               [24] 3963 	ret
                                   3964 ;------------------------------------------------------------
                                   3965 ;Allocation info for local variables in function 'clearLCD'
                                   3966 ;------------------------------------------------------------
                                   3967 ;	.\ecen4350_lcd_v4.c:687: void clearLCD (void)
                                   3968 ;	-----------------------------------------
                                   3969 ;	 function clearLCD
                                   3970 ;	-----------------------------------------
      000E5C                       3971 _clearLCD:
                                   3972 ;	.\ecen4350_lcd_v4.c:689: fillScreen(colorBackground);
      000E5C 90 00 00         [24] 3973 	mov	dptr,#0x0000
                                   3974 ;	.\ecen4350_lcd_v4.c:690: }
      000E5F 02 0D 75         [24] 3975 	ljmp	_fillScreen
                                   3976 ;------------------------------------------------------------
                                   3977 ;Allocation info for local variables in function 'drawChar'
                                   3978 ;------------------------------------------------------------
                                   3979 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3980 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3981 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3982 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3983 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3984 ;x                         Allocated with name '_drawChar_x_65536_458'
                                   3985 ;i                         Allocated with name '_drawChar_i_131072_461'
                                   3986 ;line                      Allocated with name '_drawChar_line_196608_462'
                                   3987 ;j                         Allocated to registers r0 
                                   3988 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3989 ;------------------------------------------------------------
                                   3990 ;	.\ecen4350_lcd_v4.c:691: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3991 ;	-----------------------------------------
                                   3992 ;	 function drawChar
                                   3993 ;	-----------------------------------------
      000E62                       3994 _drawChar:
      000E62 85 82 50         [24] 3995 	mov	_drawChar_x_65536_458,dpl
      000E65 85 83 51         [24] 3996 	mov	(_drawChar_x_65536_458 + 1),dph
                                   3997 ;	.\ecen4350_lcd_v4.c:693: if ((x >= TFTWIDTH) ||			// Clip right
      000E68 C3               [12] 3998 	clr	c
      000E69 E5 50            [12] 3999 	mov	a,_drawChar_x_65536_458
      000E6B 94 F0            [12] 4000 	subb	a,#0xf0
      000E6D E5 51            [12] 4001 	mov	a,(_drawChar_x_65536_458 + 1)
      000E6F 64 80            [12] 4002 	xrl	a,#0x80
      000E71 94 80            [12] 4003 	subb	a,#0x80
      000E73 50 59            [24] 4004 	jnc	00101$
                                   4005 ;	.\ecen4350_lcd_v4.c:694: (y >= TFTHEIGHT) ||			// Clip bottom
      000E75 C3               [12] 4006 	clr	c
      000E76 E5 48            [12] 4007 	mov	a,_drawChar_PARM_2
      000E78 94 40            [12] 4008 	subb	a,#0x40
      000E7A E5 49            [12] 4009 	mov	a,(_drawChar_PARM_2 + 1)
      000E7C 64 80            [12] 4010 	xrl	a,#0x80
      000E7E 94 81            [12] 4011 	subb	a,#0x81
      000E80 50 4C            [24] 4012 	jnc	00101$
                                   4013 ;	.\ecen4350_lcd_v4.c:695: ((x + 6 * size - 1) < 0) || // Clip left
      000E82 AC 4F            [24] 4014 	mov	r4,_drawChar_PARM_6
      000E84 7D 00            [12] 4015 	mov	r5,#0x00
      000E86 8C 6B            [24] 4016 	mov	__mulint_PARM_2,r4
      000E88 8D 6C            [24] 4017 	mov	(__mulint_PARM_2 + 1),r5
      000E8A 90 00 06         [24] 4018 	mov	dptr,#0x0006
      000E8D C0 05            [24] 4019 	push	ar5
      000E8F C0 04            [24] 4020 	push	ar4
      000E91 12 58 38         [24] 4021 	lcall	__mulint
      000E94 AA 82            [24] 4022 	mov	r2,dpl
      000E96 AB 83            [24] 4023 	mov	r3,dph
      000E98 D0 04            [24] 4024 	pop	ar4
      000E9A D0 05            [24] 4025 	pop	ar5
      000E9C EA               [12] 4026 	mov	a,r2
      000E9D 25 50            [12] 4027 	add	a,_drawChar_x_65536_458
      000E9F FA               [12] 4028 	mov	r2,a
      000EA0 EB               [12] 4029 	mov	a,r3
      000EA1 35 51            [12] 4030 	addc	a,(_drawChar_x_65536_458 + 1)
      000EA3 FB               [12] 4031 	mov	r3,a
      000EA4 1A               [12] 4032 	dec	r2
      000EA5 BA FF 01         [24] 4033 	cjne	r2,#0xff,00182$
      000EA8 1B               [12] 4034 	dec	r3
      000EA9                       4035 00182$:
      000EA9 EB               [12] 4036 	mov	a,r3
      000EAA 20 E7 21         [24] 4037 	jb	acc.7,00101$
                                   4038 ;	.\ecen4350_lcd_v4.c:696: ((y + 8 * size - 1) < 0))	// Clip top
      000EAD ED               [12] 4039 	mov	a,r5
      000EAE C4               [12] 4040 	swap	a
      000EAF 03               [12] 4041 	rr	a
      000EB0 54 F8            [12] 4042 	anl	a,#0xf8
      000EB2 CC               [12] 4043 	xch	a,r4
      000EB3 C4               [12] 4044 	swap	a
      000EB4 03               [12] 4045 	rr	a
      000EB5 CC               [12] 4046 	xch	a,r4
      000EB6 6C               [12] 4047 	xrl	a,r4
      000EB7 CC               [12] 4048 	xch	a,r4
      000EB8 54 F8            [12] 4049 	anl	a,#0xf8
      000EBA CC               [12] 4050 	xch	a,r4
      000EBB 6C               [12] 4051 	xrl	a,r4
      000EBC FD               [12] 4052 	mov	r5,a
      000EBD EC               [12] 4053 	mov	a,r4
      000EBE 25 48            [12] 4054 	add	a,_drawChar_PARM_2
      000EC0 FC               [12] 4055 	mov	r4,a
      000EC1 ED               [12] 4056 	mov	a,r5
      000EC2 35 49            [12] 4057 	addc	a,(_drawChar_PARM_2 + 1)
      000EC4 FD               [12] 4058 	mov	r5,a
      000EC5 1C               [12] 4059 	dec	r4
      000EC6 BC FF 01         [24] 4060 	cjne	r4,#0xff,00184$
      000EC9 1D               [12] 4061 	dec	r5
      000ECA                       4062 00184$:
      000ECA ED               [12] 4063 	mov	a,r5
      000ECB 30 E7 01         [24] 4064 	jnb	acc.7,00141$
      000ECE                       4065 00101$:
                                   4066 ;	.\ecen4350_lcd_v4.c:698: return;
      000ECE 22               [24] 4067 	ret
                                   4068 ;	.\ecen4350_lcd_v4.c:701: for (char i = 0; i < 6; i++)
      000ECF                       4069 00141$:
      000ECF 74 01            [12] 4070 	mov	a,#0x01
      000ED1 B5 4F 04         [24] 4071 	cjne	a,_drawChar_PARM_6,00186$
      000ED4 74 01            [12] 4072 	mov	a,#0x01
      000ED6 80 01            [24] 4073 	sjmp	00187$
      000ED8                       4074 00186$:
      000ED8 E4               [12] 4075 	clr	a
      000ED9                       4076 00187$:
      000ED9 FD               [12] 4077 	mov	r5,a
      000EDA FC               [12] 4078 	mov	r4,a
      000EDB E5 4B            [12] 4079 	mov	a,_drawChar_PARM_4
      000EDD B5 4D 09         [24] 4080 	cjne	a,_drawChar_PARM_5,00188$
      000EE0 E5 4C            [12] 4081 	mov	a,(_drawChar_PARM_4 + 1)
      000EE2 B5 4E 04         [24] 4082 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000EE5 74 01            [12] 4083 	mov	a,#0x01
      000EE7 80 01            [24] 4084 	sjmp	00189$
      000EE9                       4085 00188$:
      000EE9 E4               [12] 4086 	clr	a
      000EEA                       4087 00189$:
      000EEA FB               [12] 4088 	mov	r3,a
      000EEB 75 52 00         [24] 4089 	mov	_drawChar_i_131072_461,#0x00
      000EEE                       4090 00126$:
      000EEE 74 FA            [12] 4091 	mov	a,#0x100 - 0x06
      000EF0 25 52            [12] 4092 	add	a,_drawChar_i_131072_461
      000EF2 50 01            [24] 4093 	jnc	00190$
      000EF4 22               [24] 4094 	ret
      000EF5                       4095 00190$:
                                   4096 ;	.\ecen4350_lcd_v4.c:705: if (i == 5)
      000EF5 74 05            [12] 4097 	mov	a,#0x05
      000EF7 B5 52 05         [24] 4098 	cjne	a,_drawChar_i_131072_461,00107$
                                   4099 ;	.\ecen4350_lcd_v4.c:707: line = 0x0;
      000EFA 75 53 00         [24] 4100 	mov	_drawChar_line_196608_462,#0x00
      000EFD 80 31            [24] 4101 	sjmp	00140$
      000EFF                       4102 00107$:
                                   4103 ;	.\ecen4350_lcd_v4.c:711: line = pgm_read_byte(font + (c * 5) + i);
      000EFF 85 4A 6B         [24] 4104 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000F02 75 6C 00         [24] 4105 	mov	(__mulint_PARM_2 + 1),#0x00
      000F05 90 00 05         [24] 4106 	mov	dptr,#0x0005
      000F08 C0 05            [24] 4107 	push	ar5
      000F0A C0 04            [24] 4108 	push	ar4
      000F0C C0 03            [24] 4109 	push	ar3
      000F0E 12 58 38         [24] 4110 	lcall	__mulint
      000F11 A8 82            [24] 4111 	mov	r0,dpl
      000F13 AF 83            [24] 4112 	mov	r7,dph
      000F15 D0 03            [24] 4113 	pop	ar3
      000F17 D0 04            [24] 4114 	pop	ar4
      000F19 D0 05            [24] 4115 	pop	ar5
      000F1B E8               [12] 4116 	mov	a,r0
      000F1C 24 30            [12] 4117 	add	a,#_font
      000F1E F8               [12] 4118 	mov	r0,a
      000F1F EF               [12] 4119 	mov	a,r7
      000F20 34 59            [12] 4120 	addc	a,#(_font >> 8)
      000F22 FF               [12] 4121 	mov	r7,a
      000F23 E5 52            [12] 4122 	mov	a,_drawChar_i_131072_461
      000F25 28               [12] 4123 	add	a,r0
      000F26 F5 82            [12] 4124 	mov	dpl,a
      000F28 E4               [12] 4125 	clr	a
      000F29 3F               [12] 4126 	addc	a,r7
      000F2A F5 83            [12] 4127 	mov	dph,a
      000F2C E4               [12] 4128 	clr	a
      000F2D 93               [24] 4129 	movc	a,@a+dptr
      000F2E F5 53            [12] 4130 	mov	_drawChar_line_196608_462,a
                                   4131 ;	.\ecen4350_lcd_v4.c:714: for (char j = 0; j < 8; j++)
      000F30                       4132 00140$:
      000F30 85 52 F0         [24] 4133 	mov	b,_drawChar_i_131072_461
      000F33 E5 4F            [12] 4134 	mov	a,_drawChar_PARM_6
      000F35 A4               [48] 4135 	mul	ab
      000F36 25 50            [12] 4136 	add	a,_drawChar_x_65536_458
      000F38 FE               [12] 4137 	mov	r6,a
      000F39 E5 51            [12] 4138 	mov	a,(_drawChar_x_65536_458 + 1)
      000F3B 35 F0            [12] 4139 	addc	a,b
      000F3D FF               [12] 4140 	mov	r7,a
      000F3E 8E 54            [24] 4141 	mov	_drawChar_sloc0_1_0,r6
      000F40 8F 55            [24] 4142 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000F42 78 00            [12] 4143 	mov	r0,#0x00
      000F44                       4144 00123$:
      000F44 B8 08 00         [24] 4145 	cjne	r0,#0x08,00193$
      000F47                       4146 00193$:
      000F47 40 03            [24] 4147 	jc	00194$
      000F49 02 10 6E         [24] 4148 	ljmp	00127$
      000F4C                       4149 00194$:
                                   4150 ;	.\ecen4350_lcd_v4.c:716: if (line & 0x1)
      000F4C E5 53            [12] 4151 	mov	a,_drawChar_line_196608_462
      000F4E 20 E0 03         [24] 4152 	jb	acc.0,00195$
      000F51 02 0F DC         [24] 4153 	ljmp	00118$
      000F54                       4154 00195$:
                                   4155 ;	.\ecen4350_lcd_v4.c:718: if (size == 1) // default size
      000F54 ED               [12] 4156 	mov	a,r5
      000F55 60 40            [24] 4157 	jz	00110$
                                   4158 ;	.\ecen4350_lcd_v4.c:720: drawPixel(x + i, y + j, color);
      000F57 A9 52            [24] 4159 	mov	r1,_drawChar_i_131072_461
      000F59 7A 00            [12] 4160 	mov	r2,#0x00
      000F5B E9               [12] 4161 	mov	a,r1
      000F5C 25 50            [12] 4162 	add	a,_drawChar_x_65536_458
      000F5E F5 82            [12] 4163 	mov	dpl,a
      000F60 EA               [12] 4164 	mov	a,r2
      000F61 35 51            [12] 4165 	addc	a,(_drawChar_x_65536_458 + 1)
      000F63 F5 83            [12] 4166 	mov	dph,a
      000F65 88 01            [24] 4167 	mov	ar1,r0
      000F67 7A 00            [12] 4168 	mov	r2,#0x00
      000F69 E9               [12] 4169 	mov	a,r1
      000F6A 25 48            [12] 4170 	add	a,_drawChar_PARM_2
      000F6C F5 28            [12] 4171 	mov	_drawPixel_PARM_2,a
      000F6E EA               [12] 4172 	mov	a,r2
      000F6F 35 49            [12] 4173 	addc	a,(_drawChar_PARM_2 + 1)
      000F71 F5 29            [12] 4174 	mov	(_drawPixel_PARM_2 + 1),a
      000F73 85 4B 2A         [24] 4175 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000F76 85 4C 2B         [24] 4176 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000F79 C0 07            [24] 4177 	push	ar7
      000F7B C0 06            [24] 4178 	push	ar6
      000F7D C0 05            [24] 4179 	push	ar5
      000F7F C0 04            [24] 4180 	push	ar4
      000F81 C0 03            [24] 4181 	push	ar3
      000F83 C0 00            [24] 4182 	push	ar0
      000F85 12 08 36         [24] 4183 	lcall	_drawPixel
      000F88 D0 00            [24] 4184 	pop	ar0
      000F8A D0 03            [24] 4185 	pop	ar3
      000F8C D0 04            [24] 4186 	pop	ar4
      000F8E D0 05            [24] 4187 	pop	ar5
      000F90 D0 06            [24] 4188 	pop	ar6
      000F92 D0 07            [24] 4189 	pop	ar7
      000F94 02 10 64         [24] 4190 	ljmp	00119$
      000F97                       4191 00110$:
                                   4192 ;	.\ecen4350_lcd_v4.c:724: fillRect(x + (i * size), y + (j * size), size, size, color);
      000F97 88 F0            [24] 4193 	mov	b,r0
      000F99 E5 4F            [12] 4194 	mov	a,_drawChar_PARM_6
      000F9B A4               [48] 4195 	mul	ab
      000F9C 25 48            [12] 4196 	add	a,_drawChar_PARM_2
      000F9E F5 40            [12] 4197 	mov	_fillRect_PARM_2,a
      000FA0 E5 49            [12] 4198 	mov	a,(_drawChar_PARM_2 + 1)
      000FA2 35 F0            [12] 4199 	addc	a,b
      000FA4 F5 41            [12] 4200 	mov	(_fillRect_PARM_2 + 1),a
      000FA6 A9 4F            [24] 4201 	mov	r1,_drawChar_PARM_6
      000FA8 7A 00            [12] 4202 	mov	r2,#0x00
      000FAA 89 42            [24] 4203 	mov	_fillRect_PARM_3,r1
      000FAC 8A 43            [24] 4204 	mov	(_fillRect_PARM_3 + 1),r2
      000FAE 89 44            [24] 4205 	mov	_fillRect_PARM_4,r1
      000FB0 8A 45            [24] 4206 	mov	(_fillRect_PARM_4 + 1),r2
      000FB2 85 4B 46         [24] 4207 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000FB5 85 4C 47         [24] 4208 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000FB8 85 54 82         [24] 4209 	mov	dpl,_drawChar_sloc0_1_0
      000FBB 85 55 83         [24] 4210 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000FBE C0 07            [24] 4211 	push	ar7
      000FC0 C0 06            [24] 4212 	push	ar6
      000FC2 C0 05            [24] 4213 	push	ar5
      000FC4 C0 04            [24] 4214 	push	ar4
      000FC6 C0 03            [24] 4215 	push	ar3
      000FC8 C0 00            [24] 4216 	push	ar0
      000FCA 12 0B B2         [24] 4217 	lcall	_fillRect
      000FCD D0 00            [24] 4218 	pop	ar0
      000FCF D0 03            [24] 4219 	pop	ar3
      000FD1 D0 04            [24] 4220 	pop	ar4
      000FD3 D0 05            [24] 4221 	pop	ar5
      000FD5 D0 06            [24] 4222 	pop	ar6
      000FD7 D0 07            [24] 4223 	pop	ar7
      000FD9 02 10 64         [24] 4224 	ljmp	00119$
      000FDC                       4225 00118$:
                                   4226 ;	.\ecen4350_lcd_v4.c:727: else if (bg != color)
      000FDC EB               [12] 4227 	mov	a,r3
      000FDD 60 03            [24] 4228 	jz	00197$
      000FDF 02 10 64         [24] 4229 	ljmp	00119$
      000FE2                       4230 00197$:
                                   4231 ;	.\ecen4350_lcd_v4.c:729: if (size == 1) // default size
      000FE2 EC               [12] 4232 	mov	a,r4
      000FE3 60 3F            [24] 4233 	jz	00113$
                                   4234 ;	.\ecen4350_lcd_v4.c:731: drawPixel(x + i, y + j, bg);
      000FE5 A9 52            [24] 4235 	mov	r1,_drawChar_i_131072_461
      000FE7 7A 00            [12] 4236 	mov	r2,#0x00
      000FE9 E9               [12] 4237 	mov	a,r1
      000FEA 25 50            [12] 4238 	add	a,_drawChar_x_65536_458
      000FEC F5 82            [12] 4239 	mov	dpl,a
      000FEE EA               [12] 4240 	mov	a,r2
      000FEF 35 51            [12] 4241 	addc	a,(_drawChar_x_65536_458 + 1)
      000FF1 F5 83            [12] 4242 	mov	dph,a
      000FF3 88 01            [24] 4243 	mov	ar1,r0
      000FF5 7A 00            [12] 4244 	mov	r2,#0x00
      000FF7 E9               [12] 4245 	mov	a,r1
      000FF8 25 48            [12] 4246 	add	a,_drawChar_PARM_2
      000FFA F5 28            [12] 4247 	mov	_drawPixel_PARM_2,a
      000FFC EA               [12] 4248 	mov	a,r2
      000FFD 35 49            [12] 4249 	addc	a,(_drawChar_PARM_2 + 1)
      000FFF F5 29            [12] 4250 	mov	(_drawPixel_PARM_2 + 1),a
      001001 85 4D 2A         [24] 4251 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      001004 85 4E 2B         [24] 4252 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      001007 C0 07            [24] 4253 	push	ar7
      001009 C0 06            [24] 4254 	push	ar6
      00100B C0 05            [24] 4255 	push	ar5
      00100D C0 04            [24] 4256 	push	ar4
      00100F C0 03            [24] 4257 	push	ar3
      001011 C0 00            [24] 4258 	push	ar0
      001013 12 08 36         [24] 4259 	lcall	_drawPixel
      001016 D0 00            [24] 4260 	pop	ar0
      001018 D0 03            [24] 4261 	pop	ar3
      00101A D0 04            [24] 4262 	pop	ar4
      00101C D0 05            [24] 4263 	pop	ar5
      00101E D0 06            [24] 4264 	pop	ar6
      001020 D0 07            [24] 4265 	pop	ar7
      001022 80 40            [24] 4266 	sjmp	00119$
      001024                       4267 00113$:
                                   4268 ;	.\ecen4350_lcd_v4.c:735: fillRect(x + i * size, y + j * size, size, size, bg);
      001024 88 F0            [24] 4269 	mov	b,r0
      001026 E5 4F            [12] 4270 	mov	a,_drawChar_PARM_6
      001028 A4               [48] 4271 	mul	ab
      001029 25 48            [12] 4272 	add	a,_drawChar_PARM_2
      00102B F5 40            [12] 4273 	mov	_fillRect_PARM_2,a
      00102D E5 49            [12] 4274 	mov	a,(_drawChar_PARM_2 + 1)
      00102F 35 F0            [12] 4275 	addc	a,b
      001031 F5 41            [12] 4276 	mov	(_fillRect_PARM_2 + 1),a
      001033 A9 4F            [24] 4277 	mov	r1,_drawChar_PARM_6
      001035 7A 00            [12] 4278 	mov	r2,#0x00
      001037 89 42            [24] 4279 	mov	_fillRect_PARM_3,r1
      001039 8A 43            [24] 4280 	mov	(_fillRect_PARM_3 + 1),r2
      00103B 89 44            [24] 4281 	mov	_fillRect_PARM_4,r1
      00103D 8A 45            [24] 4282 	mov	(_fillRect_PARM_4 + 1),r2
      00103F 85 4D 46         [24] 4283 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      001042 85 4E 47         [24] 4284 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      001045 8E 82            [24] 4285 	mov	dpl,r6
      001047 8F 83            [24] 4286 	mov	dph,r7
      001049 C0 07            [24] 4287 	push	ar7
      00104B C0 06            [24] 4288 	push	ar6
      00104D C0 05            [24] 4289 	push	ar5
      00104F C0 04            [24] 4290 	push	ar4
      001051 C0 03            [24] 4291 	push	ar3
      001053 C0 00            [24] 4292 	push	ar0
      001055 12 0B B2         [24] 4293 	lcall	_fillRect
      001058 D0 00            [24] 4294 	pop	ar0
      00105A D0 03            [24] 4295 	pop	ar3
      00105C D0 04            [24] 4296 	pop	ar4
      00105E D0 05            [24] 4297 	pop	ar5
      001060 D0 06            [24] 4298 	pop	ar6
      001062 D0 07            [24] 4299 	pop	ar7
      001064                       4300 00119$:
                                   4301 ;	.\ecen4350_lcd_v4.c:739: line >>= 1;
      001064 E5 53            [12] 4302 	mov	a,_drawChar_line_196608_462
      001066 C3               [12] 4303 	clr	c
      001067 13               [12] 4304 	rrc	a
      001068 F5 53            [12] 4305 	mov	_drawChar_line_196608_462,a
                                   4306 ;	.\ecen4350_lcd_v4.c:714: for (char j = 0; j < 8; j++)
      00106A 08               [12] 4307 	inc	r0
      00106B 02 0F 44         [24] 4308 	ljmp	00123$
      00106E                       4309 00127$:
                                   4310 ;	.\ecen4350_lcd_v4.c:701: for (char i = 0; i < 6; i++)
      00106E 05 52            [12] 4311 	inc	_drawChar_i_131072_461
                                   4312 ;	.\ecen4350_lcd_v4.c:742: }
      001070 02 0E EE         [24] 4313 	ljmp	00126$
                                   4314 ;------------------------------------------------------------
                                   4315 ;Allocation info for local variables in function 'write'
                                   4316 ;------------------------------------------------------------
                                   4317 ;c                         Allocated to registers r7 
                                   4318 ;------------------------------------------------------------
                                   4319 ;	.\ecen4350_lcd_v4.c:744: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4320 ;	-----------------------------------------
                                   4321 ;	 function write
                                   4322 ;	-----------------------------------------
      001073                       4323 _write:
      001073 AF 82            [24] 4324 	mov	r7,dpl
                                   4325 ;	.\ecen4350_lcd_v4.c:746: if (c == '\n')
      001075 BF 0A 22         [24] 4326 	cjne	r7,#0x0a,00105$
                                   4327 ;	.\ecen4350_lcd_v4.c:748: cursor_y += textsize * 8;
      001078 AD 14            [24] 4328 	mov	r5,_textsize
      00107A E4               [12] 4329 	clr	a
      00107B C4               [12] 4330 	swap	a
      00107C 03               [12] 4331 	rr	a
      00107D 54 F8            [12] 4332 	anl	a,#0xf8
      00107F CD               [12] 4333 	xch	a,r5
      001080 C4               [12] 4334 	swap	a
      001081 03               [12] 4335 	rr	a
      001082 CD               [12] 4336 	xch	a,r5
      001083 6D               [12] 4337 	xrl	a,r5
      001084 CD               [12] 4338 	xch	a,r5
      001085 54 F8            [12] 4339 	anl	a,#0xf8
      001087 CD               [12] 4340 	xch	a,r5
      001088 6D               [12] 4341 	xrl	a,r5
      001089 FE               [12] 4342 	mov	r6,a
      00108A ED               [12] 4343 	mov	a,r5
      00108B 25 12            [12] 4344 	add	a,_cursor_y
      00108D F5 12            [12] 4345 	mov	_cursor_y,a
      00108F EE               [12] 4346 	mov	a,r6
      001090 35 13            [12] 4347 	addc	a,(_cursor_y + 1)
      001092 F5 13            [12] 4348 	mov	(_cursor_y + 1),a
                                   4349 ;	.\ecen4350_lcd_v4.c:749: cursor_x = 0;
      001094 E4               [12] 4350 	clr	a
      001095 F5 10            [12] 4351 	mov	_cursor_x,a
      001097 F5 11            [12] 4352 	mov	(_cursor_x + 1),a
      001099 22               [24] 4353 	ret
      00109A                       4354 00105$:
                                   4355 ;	.\ecen4350_lcd_v4.c:751: else if (c == '\r')
      00109A BF 0D 01         [24] 4356 	cjne	r7,#0x0d,00119$
      00109D 22               [24] 4357 	ret
      00109E                       4358 00119$:
                                   4359 ;	.\ecen4350_lcd_v4.c:757: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      00109E 85 12 48         [24] 4360 	mov	_drawChar_PARM_2,_cursor_y
      0010A1 85 13 49         [24] 4361 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      0010A4 8F 4A            [24] 4362 	mov	_drawChar_PARM_3,r7
      0010A6 85 16 4B         [24] 4363 	mov	_drawChar_PARM_4,_textcolor
      0010A9 85 17 4C         [24] 4364 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      0010AC 85 18 4D         [24] 4365 	mov	_drawChar_PARM_5,_textbgcolor
      0010AF 85 19 4E         [24] 4366 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      0010B2 85 14 4F         [24] 4367 	mov	_drawChar_PARM_6,_textsize
      0010B5 85 10 82         [24] 4368 	mov	dpl,_cursor_x
      0010B8 85 11 83         [24] 4369 	mov	dph,(_cursor_x + 1)
      0010BB 12 0E 62         [24] 4370 	lcall	_drawChar
                                   4371 ;	.\ecen4350_lcd_v4.c:758: cursor_x += textsize * 6;
      0010BE 85 14 6B         [24] 4372 	mov	__mulint_PARM_2,_textsize
      0010C1 75 6C 00         [24] 4373 	mov	(__mulint_PARM_2 + 1),#0x00
      0010C4 90 00 06         [24] 4374 	mov	dptr,#0x0006
      0010C7 12 58 38         [24] 4375 	lcall	__mulint
      0010CA AE 82            [24] 4376 	mov	r6,dpl
      0010CC AF 83            [24] 4377 	mov	r7,dph
      0010CE EE               [12] 4378 	mov	a,r6
      0010CF 25 10            [12] 4379 	add	a,_cursor_x
      0010D1 F5 10            [12] 4380 	mov	_cursor_x,a
      0010D3 EF               [12] 4381 	mov	a,r7
      0010D4 35 11            [12] 4382 	addc	a,(_cursor_x + 1)
      0010D6 F5 11            [12] 4383 	mov	(_cursor_x + 1),a
                                   4384 ;	.\ecen4350_lcd_v4.c:760: }
      0010D8 22               [24] 4385 	ret
                                   4386 ;------------------------------------------------------------
                                   4387 ;Allocation info for local variables in function 'LCD_string_write'
                                   4388 ;------------------------------------------------------------
                                   4389 ;str                       Allocated to registers r5 r6 r7 
                                   4390 ;i                         Allocated to registers r3 r4 
                                   4391 ;------------------------------------------------------------
                                   4392 ;	.\ecen4350_lcd_v4.c:761: void LCD_string_write(char *str)
                                   4393 ;	-----------------------------------------
                                   4394 ;	 function LCD_string_write
                                   4395 ;	-----------------------------------------
      0010D9                       4396 _LCD_string_write:
      0010D9 AD 82            [24] 4397 	mov	r5,dpl
      0010DB AE 83            [24] 4398 	mov	r6,dph
      0010DD AF F0            [24] 4399 	mov	r7,b
                                   4400 ;	.\ecen4350_lcd_v4.c:764: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      0010DF 7B 00            [12] 4401 	mov	r3,#0x00
      0010E1 7C 00            [12] 4402 	mov	r4,#0x00
      0010E3                       4403 00103$:
      0010E3 EB               [12] 4404 	mov	a,r3
      0010E4 2D               [12] 4405 	add	a,r5
      0010E5 F8               [12] 4406 	mov	r0,a
      0010E6 EC               [12] 4407 	mov	a,r4
      0010E7 3E               [12] 4408 	addc	a,r6
      0010E8 F9               [12] 4409 	mov	r1,a
      0010E9 8F 02            [24] 4410 	mov	ar2,r7
      0010EB 88 82            [24] 4411 	mov	dpl,r0
      0010ED 89 83            [24] 4412 	mov	dph,r1
      0010EF 8A F0            [24] 4413 	mov	b,r2
      0010F1 12 58 A2         [24] 4414 	lcall	__gptrget
      0010F4 FA               [12] 4415 	mov	r2,a
      0010F5 60 20            [24] 4416 	jz	00105$
                                   4417 ;	.\ecen4350_lcd_v4.c:766: write(str[i]); /* Call transmit data function */
      0010F7 8A 82            [24] 4418 	mov	dpl,r2
      0010F9 C0 07            [24] 4419 	push	ar7
      0010FB C0 06            [24] 4420 	push	ar6
      0010FD C0 05            [24] 4421 	push	ar5
      0010FF C0 04            [24] 4422 	push	ar4
      001101 C0 03            [24] 4423 	push	ar3
      001103 12 10 73         [24] 4424 	lcall	_write
      001106 D0 03            [24] 4425 	pop	ar3
      001108 D0 04            [24] 4426 	pop	ar4
      00110A D0 05            [24] 4427 	pop	ar5
      00110C D0 06            [24] 4428 	pop	ar6
      00110E D0 07            [24] 4429 	pop	ar7
                                   4430 ;	.\ecen4350_lcd_v4.c:764: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      001110 0B               [12] 4431 	inc	r3
      001111 BB 00 CF         [24] 4432 	cjne	r3,#0x00,00103$
      001114 0C               [12] 4433 	inc	r4
      001115 80 CC            [24] 4434 	sjmp	00103$
      001117                       4435 00105$:
                                   4436 ;	.\ecen4350_lcd_v4.c:768: }
      001117 22               [24] 4437 	ret
                                   4438 ;------------------------------------------------------------
                                   4439 ;Allocation info for local variables in function 'writeNewLine'
                                   4440 ;------------------------------------------------------------
                                   4441 ;	.\ecen4350_lcd_v4.c:770: void writeNewLine(void)
                                   4442 ;	-----------------------------------------
                                   4443 ;	 function writeNewLine
                                   4444 ;	-----------------------------------------
      001118                       4445 _writeNewLine:
                                   4446 ;	.\ecen4350_lcd_v4.c:772: write('\n');
      001118 75 82 0A         [24] 4447 	mov	dpl,#0x0a
                                   4448 ;	.\ecen4350_lcd_v4.c:773: }
      00111B 02 10 73         [24] 4449 	ljmp	_write
                                   4450 ;------------------------------------------------------------
                                   4451 ;Allocation info for local variables in function 'freeType'
                                   4452 ;------------------------------------------------------------
                                   4453 ;count                     Allocated to registers r7 
                                   4454 ;d                         Allocated to registers 
                                   4455 ;row                       Allocated to registers r6 
                                   4456 ;------------------------------------------------------------
                                   4457 ;	.\ecen4350_lcd_v4.c:775: void freeType()
                                   4458 ;	-----------------------------------------
                                   4459 ;	 function freeType
                                   4460 ;	-----------------------------------------
      00111E                       4461 _freeType:
                                   4462 ;	.\ecen4350_lcd_v4.c:777: unsigned char count = 0;
      00111E 7F 00            [12] 4463 	mov	r7,#0x00
                                   4464 ;	.\ecen4350_lcd_v4.c:779: u8 row = 1;
      001120 7E 01            [12] 4465 	mov	r6,#0x01
                                   4466 ;	.\ecen4350_lcd_v4.c:781: clearLCD();
      001122 C0 07            [24] 4467 	push	ar7
      001124 C0 06            [24] 4468 	push	ar6
      001126 12 0E 5C         [24] 4469 	lcall	_clearLCD
                                   4470 ;	.\ecen4350_lcd_v4.c:782: setCursor(0,0);
      001129 E4               [12] 4471 	clr	a
      00112A F5 6B            [12] 4472 	mov	_setCursor_PARM_2,a
      00112C F5 6C            [12] 4473 	mov	(_setCursor_PARM_2 + 1),a
      00112E 90 00 00         [24] 4474 	mov	dptr,#0x0000
      001131 12 05 BF         [24] 4475 	lcall	_setCursor
                                   4476 ;	.\ecen4350_lcd_v4.c:783: setTextColor(colorSelect, colorBackground);
      001134 E4               [12] 4477 	clr	a
      001135 F5 6B            [12] 4478 	mov	_setTextColor_PARM_2,a
      001137 F5 6C            [12] 4479 	mov	(_setTextColor_PARM_2 + 1),a
      001139 90 F8 1F         [24] 4480 	mov	dptr,#0xf81f
      00113C 12 05 CC         [24] 4481 	lcall	_setTextColor
                                   4482 ;	.\ecen4350_lcd_v4.c:784: LCD_string_write("Free Type: \n");
      00113F 90 5E 4C         [24] 4483 	mov	dptr,#___str_1
      001142 75 F0 80         [24] 4484 	mov	b,#0x80
      001145 12 10 D9         [24] 4485 	lcall	_LCD_string_write
                                   4486 ;	.\ecen4350_lcd_v4.c:785: setTextColor(colorText, colorBackground);
      001148 E4               [12] 4487 	clr	a
      001149 F5 6B            [12] 4488 	mov	_setTextColor_PARM_2,a
      00114B F5 6C            [12] 4489 	mov	(_setTextColor_PARM_2 + 1),a
      00114D 90 07 FF         [24] 4490 	mov	dptr,#0x07ff
      001150 12 05 CC         [24] 4491 	lcall	_setTextColor
                                   4492 ;	.\ecen4350_lcd_v4.c:786: LCD_string_write("0x");
      001153 90 5E 59         [24] 4493 	mov	dptr,#___str_2
      001156 75 F0 80         [24] 4494 	mov	b,#0x80
      001159 12 10 D9         [24] 4495 	lcall	_LCD_string_write
      00115C D0 06            [24] 4496 	pop	ar6
      00115E D0 07            [24] 4497 	pop	ar7
                                   4498 ;	.\ecen4350_lcd_v4.c:787: while (1)
      001160                       4499 00108$:
                                   4500 ;	.\ecen4350_lcd_v4.c:790: if (count == 8)
      001160 BF 08 02         [24] 4501 	cjne	r7,#0x08,00124$
      001163 80 03            [24] 4502 	sjmp	00125$
      001165                       4503 00124$:
      001165 02 11 E5         [24] 4504 	ljmp	00105$
      001168                       4505 00125$:
                                   4506 ;	.\ecen4350_lcd_v4.c:793: count = 0;
      001168 7F 00            [12] 4507 	mov	r7,#0x00
                                   4508 ;	.\ecen4350_lcd_v4.c:794: write(d);
      00116A 75 82 0A         [24] 4509 	mov	dpl,#0x0a
      00116D C0 07            [24] 4510 	push	ar7
      00116F C0 06            [24] 4511 	push	ar6
      001171 12 10 73         [24] 4512 	lcall	_write
      001174 D0 06            [24] 4513 	pop	ar6
      001176 D0 07            [24] 4514 	pop	ar7
                                   4515 ;	.\ecen4350_lcd_v4.c:795: if (row == 4)
      001178 BE 04 55         [24] 4516 	cjne	r6,#0x04,00102$
                                   4517 ;	.\ecen4350_lcd_v4.c:797: delay(5);
      00117B 90 00 05         [24] 4518 	mov	dptr,#0x0005
      00117E C0 07            [24] 4519 	push	ar7
      001180 12 01 A9         [24] 4520 	lcall	_delay
                                   4521 ;	.\ecen4350_lcd_v4.c:798: clearLCD();
      001183 12 0E 5C         [24] 4522 	lcall	_clearLCD
                                   4523 ;	.\ecen4350_lcd_v4.c:799: setTextColor(colorSelect, colorBackground);
      001186 E4               [12] 4524 	clr	a
      001187 F5 6B            [12] 4525 	mov	_setTextColor_PARM_2,a
      001189 F5 6C            [12] 4526 	mov	(_setTextColor_PARM_2 + 1),a
      00118B 90 F8 1F         [24] 4527 	mov	dptr,#0xf81f
      00118E 12 05 CC         [24] 4528 	lcall	_setTextColor
                                   4529 ;	.\ecen4350_lcd_v4.c:800: rtcPrint();
      001191 12 04 AF         [24] 4530 	lcall	_rtcPrint
                                   4531 ;	.\ecen4350_lcd_v4.c:801: clearLCD();
      001194 12 0E 5C         [24] 4532 	lcall	_clearLCD
                                   4533 ;	.\ecen4350_lcd_v4.c:802: setCursor(0,0);
      001197 E4               [12] 4534 	clr	a
      001198 F5 6B            [12] 4535 	mov	_setCursor_PARM_2,a
      00119A F5 6C            [12] 4536 	mov	(_setCursor_PARM_2 + 1),a
      00119C 90 00 00         [24] 4537 	mov	dptr,#0x0000
      00119F 12 05 BF         [24] 4538 	lcall	_setCursor
                                   4539 ;	.\ecen4350_lcd_v4.c:803: setTextColor(colorSelect, colorBackground);
      0011A2 E4               [12] 4540 	clr	a
      0011A3 F5 6B            [12] 4541 	mov	_setTextColor_PARM_2,a
      0011A5 F5 6C            [12] 4542 	mov	(_setTextColor_PARM_2 + 1),a
      0011A7 90 F8 1F         [24] 4543 	mov	dptr,#0xf81f
      0011AA 12 05 CC         [24] 4544 	lcall	_setTextColor
                                   4545 ;	.\ecen4350_lcd_v4.c:804: LCD_string_write("Free Type: \n");
      0011AD 90 5E 4C         [24] 4546 	mov	dptr,#___str_1
      0011B0 75 F0 80         [24] 4547 	mov	b,#0x80
      0011B3 12 10 D9         [24] 4548 	lcall	_LCD_string_write
                                   4549 ;	.\ecen4350_lcd_v4.c:805: setTextColor(colorText, colorBackground);
      0011B6 E4               [12] 4550 	clr	a
      0011B7 F5 6B            [12] 4551 	mov	_setTextColor_PARM_2,a
      0011B9 F5 6C            [12] 4552 	mov	(_setTextColor_PARM_2 + 1),a
      0011BB 90 07 FF         [24] 4553 	mov	dptr,#0x07ff
      0011BE 12 05 CC         [24] 4554 	lcall	_setTextColor
                                   4555 ;	.\ecen4350_lcd_v4.c:806: LCD_string_write("0x");
      0011C1 90 5E 59         [24] 4556 	mov	dptr,#___str_2
      0011C4 75 F0 80         [24] 4557 	mov	b,#0x80
      0011C7 12 10 D9         [24] 4558 	lcall	_LCD_string_write
      0011CA D0 07            [24] 4559 	pop	ar7
                                   4560 ;	.\ecen4350_lcd_v4.c:808: row = 1;
      0011CC 7E 01            [12] 4561 	mov	r6,#0x01
      0011CE 80 90            [24] 4562 	sjmp	00108$
      0011D0                       4563 00102$:
                                   4564 ;	.\ecen4350_lcd_v4.c:811: LCD_string_write("0x");
      0011D0 90 5E 59         [24] 4565 	mov	dptr,#___str_2
      0011D3 75 F0 80         [24] 4566 	mov	b,#0x80
      0011D6 C0 07            [24] 4567 	push	ar7
      0011D8 C0 06            [24] 4568 	push	ar6
      0011DA 12 10 D9         [24] 4569 	lcall	_LCD_string_write
      0011DD D0 06            [24] 4570 	pop	ar6
      0011DF D0 07            [24] 4571 	pop	ar7
                                   4572 ;	.\ecen4350_lcd_v4.c:812: row++;
      0011E1 0E               [12] 4573 	inc	r6
      0011E2 02 11 60         [24] 4574 	ljmp	00108$
      0011E5                       4575 00105$:
                                   4576 ;	.\ecen4350_lcd_v4.c:817: d = keyDetect();
      0011E5 C0 07            [24] 4577 	push	ar7
      0011E7 C0 06            [24] 4578 	push	ar6
      0011E9 12 11 F7         [24] 4579 	lcall	_keyDetect
                                   4580 ;	.\ecen4350_lcd_v4.c:818: write(d);
      0011EC 12 10 73         [24] 4581 	lcall	_write
      0011EF D0 06            [24] 4582 	pop	ar6
      0011F1 D0 07            [24] 4583 	pop	ar7
                                   4584 ;	.\ecen4350_lcd_v4.c:819: count++;
      0011F3 0F               [12] 4585 	inc	r7
                                   4586 ;	.\ecen4350_lcd_v4.c:824: }
      0011F4 02 11 60         [24] 4587 	ljmp	00108$
                                   4588 ;------------------------------------------------------------
                                   4589 ;Allocation info for local variables in function 'keyDetect'
                                   4590 ;------------------------------------------------------------
                                   4591 ;portdata                  Allocated to registers r7 
                                   4592 ;------------------------------------------------------------
                                   4593 ;	.\ecen4350_lcd_v4.c:827: unsigned char keyDetect()
                                   4594 ;	-----------------------------------------
                                   4595 ;	 function keyDetect
                                   4596 ;	-----------------------------------------
      0011F7                       4597 _keyDetect:
                                   4598 ;	.\ecen4350_lcd_v4.c:830: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      0011F7 75 90 F0         [24] 4599 	mov	_P1,#0xf0
                                   4600 ;	.\ecen4350_lcd_v4.c:831: do 
      0011FA                       4601 00101$:
                                   4602 ;	.\ecen4350_lcd_v4.c:833: portdata = (__KEYPAD_PORT__ & 0xF0);
      0011FA E5 90            [12] 4603 	mov	a,_P1
      0011FC 54 F0            [12] 4604 	anl	a,#0xf0
      0011FE FF               [12] 4605 	mov	r7,a
                                   4606 ;	.\ecen4350_lcd_v4.c:834: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      0011FF BF F0 F8         [24] 4607 	cjne	r7,#0xf0,00101$
                                   4608 ;	.\ecen4350_lcd_v4.c:838: do
      001202                       4609 00105$:
                                   4610 ;	.\ecen4350_lcd_v4.c:841: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      001202 85 90 08         [24] 4611 	mov	_colloc,_P1
                                   4612 ;	.\ecen4350_lcd_v4.c:842: colloc &= 0xF0;		  									/* mask port for column read only */
      001205 53 08 F0         [24] 4613 	anl	_colloc,#0xf0
                                   4614 ;	.\ecen4350_lcd_v4.c:843: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      001208 74 F0            [12] 4615 	mov	a,#0xf0
      00120A B5 08 04         [24] 4616 	cjne	a,_colloc,00107$
      00120D E5 0F            [12] 4617 	mov	a,_received_flag
      00120F 60 F1            [24] 4618 	jz	00105$
      001211                       4619 00107$:
                                   4620 ;	.\ecen4350_lcd_v4.c:844: delay(10);													/* 15ms key debounce time */
      001211 90 00 0A         [24] 4621 	mov	dptr,#0x000a
      001214 12 01 A9         [24] 4622 	lcall	_delay
                                   4623 ;	.\ecen4350_lcd_v4.c:845: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      001217 E5 90            [12] 4624 	mov	a,_P1
      001219 54 F0            [12] 4625 	anl	a,#0xf0
                                   4626 ;	.\ecen4350_lcd_v4.c:846: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      00121B FF               [12] 4627 	mov	r7,a
      00121C B5 08 02         [24] 4628 	cjne	a,_colloc,00214$
      00121F 80 04            [24] 4629 	sjmp	00123$
      001221                       4630 00214$:
      001221 E5 0F            [12] 4631 	mov	a,_received_flag
      001223 60 DD            [24] 4632 	jz	00105$
                                   4633 ;	.\ecen4350_lcd_v4.c:848: while (1)
      001225                       4634 00123$:
                                   4635 ;	.\ecen4350_lcd_v4.c:850: if (received_flag == 1)											/* check for key input via serial interrupt */
      001225 74 01            [12] 4636 	mov	a,#0x01
      001227 B5 0F 09         [24] 4637 	cjne	a,_received_flag,00113$
                                   4638 ;	.\ecen4350_lcd_v4.c:852: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      00122A E5 0E            [12] 4639 	mov	a,_received_byte
      00122C FF               [12] 4640 	mov	r7,a
      00122D 24 C0            [12] 4641 	add	a,#0xc0
      00122F F5 0E            [12] 4642 	mov	_received_byte,a
                                   4643 ;	.\ecen4350_lcd_v4.c:853: break;														/* break outside while() */
      001231 80 52            [24] 4644 	sjmp	00124$
      001233                       4645 00113$:
                                   4646 ;	.\ecen4350_lcd_v4.c:856: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      001233 75 90 FE         [24] 4647 	mov	_P1,#0xfe
                                   4648 ;	.\ecen4350_lcd_v4.c:857: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      001236 E5 90            [12] 4649 	mov	a,_P1
      001238 54 F0            [12] 4650 	anl	a,#0xf0
      00123A F5 08            [12] 4651 	mov	_colloc,a
                                   4652 ;	.\ecen4350_lcd_v4.c:858: if (colloc != 0xF0)
      00123C 74 F0            [12] 4653 	mov	a,#0xf0
      00123E B5 08 02         [24] 4654 	cjne	a,_colloc,00218$
      001241 80 05            [24] 4655 	sjmp	00115$
      001243                       4656 00218$:
                                   4657 ;	.\ecen4350_lcd_v4.c:860: rowloc = 0;
      001243 75 09 00         [24] 4658 	mov	_rowloc,#0x00
                                   4659 ;	.\ecen4350_lcd_v4.c:861: break;
      001246 80 3D            [24] 4660 	sjmp	00124$
      001248                       4661 00115$:
                                   4662 ;	.\ecen4350_lcd_v4.c:864: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      001248 75 90 FD         [24] 4663 	mov	_P1,#0xfd
                                   4664 ;	.\ecen4350_lcd_v4.c:865: colloc = (__KEYPAD_PORT__ & 0xF0);
      00124B E5 90            [12] 4665 	mov	a,_P1
      00124D 54 F0            [12] 4666 	anl	a,#0xf0
      00124F F5 08            [12] 4667 	mov	_colloc,a
                                   4668 ;	.\ecen4350_lcd_v4.c:866: if (colloc != 0xF0)
      001251 74 F0            [12] 4669 	mov	a,#0xf0
      001253 B5 08 02         [24] 4670 	cjne	a,_colloc,00219$
      001256 80 05            [24] 4671 	sjmp	00117$
      001258                       4672 00219$:
                                   4673 ;	.\ecen4350_lcd_v4.c:868: rowloc = 1;
      001258 75 09 01         [24] 4674 	mov	_rowloc,#0x01
                                   4675 ;	.\ecen4350_lcd_v4.c:869: break;
      00125B 80 28            [24] 4676 	sjmp	00124$
      00125D                       4677 00117$:
                                   4678 ;	.\ecen4350_lcd_v4.c:872: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      00125D 75 90 FB         [24] 4679 	mov	_P1,#0xfb
                                   4680 ;	.\ecen4350_lcd_v4.c:873: colloc = (__KEYPAD_PORT__ & 0xF0);
      001260 E5 90            [12] 4681 	mov	a,_P1
      001262 54 F0            [12] 4682 	anl	a,#0xf0
      001264 F5 08            [12] 4683 	mov	_colloc,a
                                   4684 ;	.\ecen4350_lcd_v4.c:874: if (colloc != 0xF0)
      001266 74 F0            [12] 4685 	mov	a,#0xf0
      001268 B5 08 02         [24] 4686 	cjne	a,_colloc,00220$
      00126B 80 05            [24] 4687 	sjmp	00119$
      00126D                       4688 00220$:
                                   4689 ;	.\ecen4350_lcd_v4.c:876: rowloc = 2;
      00126D 75 09 02         [24] 4690 	mov	_rowloc,#0x02
                                   4691 ;	.\ecen4350_lcd_v4.c:877: break;
      001270 80 13            [24] 4692 	sjmp	00124$
      001272                       4693 00119$:
                                   4694 ;	.\ecen4350_lcd_v4.c:880: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      001272 75 90 F7         [24] 4695 	mov	_P1,#0xf7
                                   4696 ;	.\ecen4350_lcd_v4.c:881: colloc = (__KEYPAD_PORT__ & 0xF0);
      001275 E5 90            [12] 4697 	mov	a,_P1
      001277 54 F0            [12] 4698 	anl	a,#0xf0
      001279 F5 08            [12] 4699 	mov	_colloc,a
                                   4700 ;	.\ecen4350_lcd_v4.c:882: if (colloc != 0xF0)
      00127B 74 F0            [12] 4701 	mov	a,#0xf0
      00127D B5 08 02         [24] 4702 	cjne	a,_colloc,00221$
      001280 80 A3            [24] 4703 	sjmp	00123$
      001282                       4704 00221$:
                                   4705 ;	.\ecen4350_lcd_v4.c:884: rowloc = 3;
      001282 75 09 03         [24] 4706 	mov	_rowloc,#0x03
                                   4707 ;	.\ecen4350_lcd_v4.c:885: break;
      001285                       4708 00124$:
                                   4709 ;	.\ecen4350_lcd_v4.c:889: if (received_flag == 1)
      001285 74 01            [12] 4710 	mov	a,#0x01
      001287 B5 0F 07         [24] 4711 	cjne	a,_received_flag,00135$
                                   4712 ;	.\ecen4350_lcd_v4.c:891: received_flag = 0;
      00128A 75 0F 00         [24] 4713 	mov	_received_flag,#0x00
                                   4714 ;	.\ecen4350_lcd_v4.c:892: return received_byte;
      00128D 85 0E 82         [24] 4715 	mov	dpl,_received_byte
      001290 22               [24] 4716 	ret
      001291                       4717 00135$:
                                   4718 ;	.\ecen4350_lcd_v4.c:894: else if (colloc == 0xE0)
      001291 74 E0            [12] 4719 	mov	a,#0xe0
      001293 B5 08 15         [24] 4720 	cjne	a,_colloc,00132$
                                   4721 ;	.\ecen4350_lcd_v4.c:896: return (keypad[rowloc][0]);
      001296 E5 09            [12] 4722 	mov	a,_rowloc
      001298 75 F0 04         [24] 4723 	mov	b,#0x04
      00129B A4               [48] 4724 	mul	ab
      00129C 24 2B            [12] 4725 	add	a,#_keypad
      00129E F5 82            [12] 4726 	mov	dpl,a
      0012A0 74 5E            [12] 4727 	mov	a,#(_keypad >> 8)
      0012A2 35 F0            [12] 4728 	addc	a,b
      0012A4 F5 83            [12] 4729 	mov	dph,a
      0012A6 E4               [12] 4730 	clr	a
      0012A7 93               [24] 4731 	movc	a,@a+dptr
      0012A8 F5 82            [12] 4732 	mov	dpl,a
      0012AA 22               [24] 4733 	ret
      0012AB                       4734 00132$:
                                   4735 ;	.\ecen4350_lcd_v4.c:898: else if (colloc == 0xD0)
      0012AB 74 D0            [12] 4736 	mov	a,#0xd0
      0012AD B5 08 18         [24] 4737 	cjne	a,_colloc,00129$
                                   4738 ;	.\ecen4350_lcd_v4.c:900: return (keypad[rowloc][1]);
      0012B0 E5 09            [12] 4739 	mov	a,_rowloc
      0012B2 75 F0 04         [24] 4740 	mov	b,#0x04
      0012B5 A4               [48] 4741 	mul	ab
      0012B6 24 2B            [12] 4742 	add	a,#_keypad
      0012B8 FE               [12] 4743 	mov	r6,a
      0012B9 74 5E            [12] 4744 	mov	a,#(_keypad >> 8)
      0012BB 35 F0            [12] 4745 	addc	a,b
      0012BD FF               [12] 4746 	mov	r7,a
      0012BE 8E 82            [24] 4747 	mov	dpl,r6
      0012C0 8F 83            [24] 4748 	mov	dph,r7
      0012C2 A3               [24] 4749 	inc	dptr
      0012C3 E4               [12] 4750 	clr	a
      0012C4 93               [24] 4751 	movc	a,@a+dptr
      0012C5 F5 82            [12] 4752 	mov	dpl,a
      0012C7 22               [24] 4753 	ret
      0012C8                       4754 00129$:
                                   4755 ;	.\ecen4350_lcd_v4.c:902: else if (colloc == 0xB0)
      0012C8 74 B0            [12] 4756 	mov	a,#0xb0
      0012CA B5 08 19         [24] 4757 	cjne	a,_colloc,00126$
                                   4758 ;	.\ecen4350_lcd_v4.c:904: return (keypad[rowloc][2]);
      0012CD E5 09            [12] 4759 	mov	a,_rowloc
      0012CF 75 F0 04         [24] 4760 	mov	b,#0x04
      0012D2 A4               [48] 4761 	mul	ab
      0012D3 24 2B            [12] 4762 	add	a,#_keypad
      0012D5 FE               [12] 4763 	mov	r6,a
      0012D6 74 5E            [12] 4764 	mov	a,#(_keypad >> 8)
      0012D8 35 F0            [12] 4765 	addc	a,b
      0012DA FF               [12] 4766 	mov	r7,a
      0012DB 8E 82            [24] 4767 	mov	dpl,r6
      0012DD 8F 83            [24] 4768 	mov	dph,r7
      0012DF A3               [24] 4769 	inc	dptr
      0012E0 A3               [24] 4770 	inc	dptr
      0012E1 E4               [12] 4771 	clr	a
      0012E2 93               [24] 4772 	movc	a,@a+dptr
      0012E3 F5 82            [12] 4773 	mov	dpl,a
      0012E5 22               [24] 4774 	ret
      0012E6                       4775 00126$:
                                   4776 ;	.\ecen4350_lcd_v4.c:908: return (keypad[rowloc][3]);
      0012E6 E5 09            [12] 4777 	mov	a,_rowloc
      0012E8 75 F0 04         [24] 4778 	mov	b,#0x04
      0012EB A4               [48] 4779 	mul	ab
      0012EC 24 2B            [12] 4780 	add	a,#_keypad
      0012EE FE               [12] 4781 	mov	r6,a
      0012EF 74 5E            [12] 4782 	mov	a,#(_keypad >> 8)
      0012F1 35 F0            [12] 4783 	addc	a,b
      0012F3 FF               [12] 4784 	mov	r7,a
      0012F4 8E 82            [24] 4785 	mov	dpl,r6
      0012F6 8F 83            [24] 4786 	mov	dph,r7
      0012F8 A3               [24] 4787 	inc	dptr
      0012F9 A3               [24] 4788 	inc	dptr
      0012FA A3               [24] 4789 	inc	dptr
      0012FB E4               [12] 4790 	clr	a
      0012FC 93               [24] 4791 	movc	a,@a+dptr
                                   4792 ;	.\ecen4350_lcd_v4.c:910: }
      0012FD F5 82            [12] 4793 	mov	dpl,a
      0012FF 22               [24] 4794 	ret
                                   4795 ;------------------------------------------------------------
                                   4796 ;Allocation info for local variables in function 'reverse'
                                   4797 ;------------------------------------------------------------
                                   4798 ;d                         Allocated to registers r7 
                                   4799 ;rev                       Allocated to registers r5 r6 
                                   4800 ;val                       Allocated to registers r1 r2 
                                   4801 ;------------------------------------------------------------
                                   4802 ;	.\ecen4350_lcd_v4.c:912: unsigned int reverse(unsigned char d)
                                   4803 ;	-----------------------------------------
                                   4804 ;	 function reverse
                                   4805 ;	-----------------------------------------
      001300                       4806 _reverse:
      001300 AF 82            [24] 4807 	mov	r7,dpl
                                   4808 ;	.\ecen4350_lcd_v4.c:914: unsigned int rev = 0;
      001302 7D 00            [12] 4809 	mov	r5,#0x00
      001304 7E 00            [12] 4810 	mov	r6,#0x00
                                   4811 ;	.\ecen4350_lcd_v4.c:916: while (d >= 1)
      001306                       4812 00101$:
      001306 BF 01 00         [24] 4813 	cjne	r7,#0x01,00114$
      001309                       4814 00114$:
      001309 40 60            [24] 4815 	jc	00103$
                                   4816 ;	.\ecen4350_lcd_v4.c:919: val = d % 10;
      00130B 8F 03            [24] 4817 	mov	ar3,r7
      00130D 7C 00            [12] 4818 	mov	r4,#0x00
      00130F 75 6B 0A         [24] 4819 	mov	__modsint_PARM_2,#0x0a
                                   4820 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001312 8C 6C            [24] 4821 	mov	(__modsint_PARM_2 + 1),r4
      001314 8B 82            [24] 4822 	mov	dpl,r3
      001316 8C 83            [24] 4823 	mov	dph,r4
      001318 C0 06            [24] 4824 	push	ar6
      00131A C0 05            [24] 4825 	push	ar5
      00131C C0 04            [24] 4826 	push	ar4
      00131E C0 03            [24] 4827 	push	ar3
      001320 12 58 BE         [24] 4828 	lcall	__modsint
      001323 A9 82            [24] 4829 	mov	r1,dpl
      001325 AA 83            [24] 4830 	mov	r2,dph
      001327 D0 03            [24] 4831 	pop	ar3
      001329 D0 04            [24] 4832 	pop	ar4
                                   4833 ;	.\ecen4350_lcd_v4.c:920: d = d / 10;
      00132B 75 6B 0A         [24] 4834 	mov	__divsint_PARM_2,#0x0a
      00132E 75 6C 00         [24] 4835 	mov	(__divsint_PARM_2 + 1),#0x00
      001331 8B 82            [24] 4836 	mov	dpl,r3
      001333 8C 83            [24] 4837 	mov	dph,r4
      001335 C0 02            [24] 4838 	push	ar2
      001337 C0 01            [24] 4839 	push	ar1
      001339 12 58 F4         [24] 4840 	lcall	__divsint
      00133C AB 82            [24] 4841 	mov	r3,dpl
      00133E D0 01            [24] 4842 	pop	ar1
      001340 D0 02            [24] 4843 	pop	ar2
      001342 D0 05            [24] 4844 	pop	ar5
      001344 D0 06            [24] 4845 	pop	ar6
      001346 8B 07            [24] 4846 	mov	ar7,r3
                                   4847 ;	.\ecen4350_lcd_v4.c:921: rev = rev * 10 + val;
      001348 8D 6B            [24] 4848 	mov	__mulint_PARM_2,r5
      00134A 8E 6C            [24] 4849 	mov	(__mulint_PARM_2 + 1),r6
      00134C 90 00 0A         [24] 4850 	mov	dptr,#0x000a
      00134F C0 07            [24] 4851 	push	ar7
      001351 C0 02            [24] 4852 	push	ar2
      001353 C0 01            [24] 4853 	push	ar1
      001355 12 58 38         [24] 4854 	lcall	__mulint
      001358 E5 82            [12] 4855 	mov	a,dpl
      00135A 85 83 F0         [24] 4856 	mov	b,dph
      00135D D0 01            [24] 4857 	pop	ar1
      00135F D0 02            [24] 4858 	pop	ar2
      001361 D0 07            [24] 4859 	pop	ar7
      001363 29               [12] 4860 	add	a,r1
      001364 FD               [12] 4861 	mov	r5,a
      001365 EA               [12] 4862 	mov	a,r2
      001366 35 F0            [12] 4863 	addc	a,b
      001368 FE               [12] 4864 	mov	r6,a
      001369 80 9B            [24] 4865 	sjmp	00101$
      00136B                       4866 00103$:
                                   4867 ;	.\ecen4350_lcd_v4.c:923: return rev;
      00136B 8D 82            [24] 4868 	mov	dpl,r5
      00136D 8E 83            [24] 4869 	mov	dph,r6
                                   4870 ;	.\ecen4350_lcd_v4.c:924: }
      00136F 22               [24] 4871 	ret
                                   4872 ;------------------------------------------------------------
                                   4873 ;Allocation info for local variables in function 'reverse16'
                                   4874 ;------------------------------------------------------------
                                   4875 ;d                         Allocated to registers r6 r7 
                                   4876 ;rev                       Allocated to registers r4 r5 
                                   4877 ;val                       Allocated to registers r2 r3 
                                   4878 ;------------------------------------------------------------
                                   4879 ;	.\ecen4350_lcd_v4.c:926: unsigned int reverse16(unsigned int d)
                                   4880 ;	-----------------------------------------
                                   4881 ;	 function reverse16
                                   4882 ;	-----------------------------------------
      001370                       4883 _reverse16:
      001370 AE 82            [24] 4884 	mov	r6,dpl
      001372 AF 83            [24] 4885 	mov	r7,dph
                                   4886 ;	.\ecen4350_lcd_v4.c:928: unsigned int rev = 0;
      001374 7C 00            [12] 4887 	mov	r4,#0x00
      001376 7D 00            [12] 4888 	mov	r5,#0x00
                                   4889 ;	.\ecen4350_lcd_v4.c:930: while (d >= 1)
      001378                       4890 00101$:
      001378 C3               [12] 4891 	clr	c
      001379 EE               [12] 4892 	mov	a,r6
      00137A 94 01            [12] 4893 	subb	a,#0x01
      00137C EF               [12] 4894 	mov	a,r7
      00137D 94 00            [12] 4895 	subb	a,#0x00
      00137F 40 69            [24] 4896 	jc	00103$
                                   4897 ;	.\ecen4350_lcd_v4.c:933: val = d % 10;
      001381 75 6B 0A         [24] 4898 	mov	__moduint_PARM_2,#0x0a
      001384 75 6C 00         [24] 4899 	mov	(__moduint_PARM_2 + 1),#0x00
      001387 8E 82            [24] 4900 	mov	dpl,r6
      001389 8F 83            [24] 4901 	mov	dph,r7
      00138B C0 07            [24] 4902 	push	ar7
      00138D C0 06            [24] 4903 	push	ar6
      00138F C0 05            [24] 4904 	push	ar5
      001391 C0 04            [24] 4905 	push	ar4
      001393 12 58 55         [24] 4906 	lcall	__moduint
      001396 AA 82            [24] 4907 	mov	r2,dpl
      001398 AB 83            [24] 4908 	mov	r3,dph
      00139A D0 04            [24] 4909 	pop	ar4
      00139C D0 05            [24] 4910 	pop	ar5
      00139E D0 06            [24] 4911 	pop	ar6
      0013A0 D0 07            [24] 4912 	pop	ar7
                                   4913 ;	.\ecen4350_lcd_v4.c:934: d = d / 10;
      0013A2 75 6B 0A         [24] 4914 	mov	__divuint_PARM_2,#0x0a
      0013A5 75 6C 00         [24] 4915 	mov	(__divuint_PARM_2 + 1),#0x00
      0013A8 8E 82            [24] 4916 	mov	dpl,r6
      0013AA 8F 83            [24] 4917 	mov	dph,r7
      0013AC C0 05            [24] 4918 	push	ar5
      0013AE C0 04            [24] 4919 	push	ar4
      0013B0 C0 03            [24] 4920 	push	ar3
      0013B2 C0 02            [24] 4921 	push	ar2
      0013B4 12 58 0F         [24] 4922 	lcall	__divuint
      0013B7 AE 82            [24] 4923 	mov	r6,dpl
      0013B9 AF 83            [24] 4924 	mov	r7,dph
      0013BB D0 02            [24] 4925 	pop	ar2
      0013BD D0 03            [24] 4926 	pop	ar3
      0013BF D0 04            [24] 4927 	pop	ar4
      0013C1 D0 05            [24] 4928 	pop	ar5
                                   4929 ;	.\ecen4350_lcd_v4.c:935: rev = rev * 10 + val;
      0013C3 8C 6B            [24] 4930 	mov	__mulint_PARM_2,r4
      0013C5 8D 6C            [24] 4931 	mov	(__mulint_PARM_2 + 1),r5
      0013C7 90 00 0A         [24] 4932 	mov	dptr,#0x000a
      0013CA C0 07            [24] 4933 	push	ar7
      0013CC C0 06            [24] 4934 	push	ar6
      0013CE C0 03            [24] 4935 	push	ar3
      0013D0 C0 02            [24] 4936 	push	ar2
      0013D2 12 58 38         [24] 4937 	lcall	__mulint
      0013D5 E5 82            [12] 4938 	mov	a,dpl
      0013D7 85 83 F0         [24] 4939 	mov	b,dph
      0013DA D0 02            [24] 4940 	pop	ar2
      0013DC D0 03            [24] 4941 	pop	ar3
      0013DE D0 06            [24] 4942 	pop	ar6
      0013E0 D0 07            [24] 4943 	pop	ar7
      0013E2 2A               [12] 4944 	add	a,r2
      0013E3 FC               [12] 4945 	mov	r4,a
      0013E4 EB               [12] 4946 	mov	a,r3
      0013E5 35 F0            [12] 4947 	addc	a,b
      0013E7 FD               [12] 4948 	mov	r5,a
      0013E8 80 8E            [24] 4949 	sjmp	00101$
      0013EA                       4950 00103$:
                                   4951 ;	.\ecen4350_lcd_v4.c:937: return rev;
      0013EA 8C 82            [24] 4952 	mov	dpl,r4
      0013EC 8D 83            [24] 4953 	mov	dph,r5
                                   4954 ;	.\ecen4350_lcd_v4.c:938: }
      0013EE 22               [24] 4955 	ret
                                   4956 ;------------------------------------------------------------
                                   4957 ;Allocation info for local variables in function 'hexToASCII'
                                   4958 ;------------------------------------------------------------
                                   4959 ;key                       Allocated to registers r7 
                                   4960 ;------------------------------------------------------------
                                   4961 ;	.\ecen4350_lcd_v4.c:940: unsigned char hexToASCII(unsigned char key) {
                                   4962 ;	-----------------------------------------
                                   4963 ;	 function hexToASCII
                                   4964 ;	-----------------------------------------
      0013EF                       4965 _hexToASCII:
                                   4966 ;	.\ecen4350_lcd_v4.c:941: if(key == 0x0) return '0';
      0013EF E5 82            [12] 4967 	mov	a,dpl
      0013F1 FF               [12] 4968 	mov	r7,a
      0013F2 70 04            [24] 4969 	jnz	00102$
      0013F4 75 82 30         [24] 4970 	mov	dpl,#0x30
      0013F7 22               [24] 4971 	ret
      0013F8                       4972 00102$:
                                   4973 ;	.\ecen4350_lcd_v4.c:942: if(key == 0x1) return '1';
      0013F8 BF 01 04         [24] 4974 	cjne	r7,#0x01,00104$
      0013FB 75 82 31         [24] 4975 	mov	dpl,#0x31
      0013FE 22               [24] 4976 	ret
      0013FF                       4977 00104$:
                                   4978 ;	.\ecen4350_lcd_v4.c:943: if(key == 0x2) return '2';
      0013FF BF 02 04         [24] 4979 	cjne	r7,#0x02,00106$
      001402 75 82 32         [24] 4980 	mov	dpl,#0x32
      001405 22               [24] 4981 	ret
      001406                       4982 00106$:
                                   4983 ;	.\ecen4350_lcd_v4.c:944: if(key == 0x3) return '3';
      001406 BF 03 04         [24] 4984 	cjne	r7,#0x03,00108$
      001409 75 82 33         [24] 4985 	mov	dpl,#0x33
      00140C 22               [24] 4986 	ret
      00140D                       4987 00108$:
                                   4988 ;	.\ecen4350_lcd_v4.c:945: if(key == 0x4) return '4';
      00140D BF 04 04         [24] 4989 	cjne	r7,#0x04,00110$
      001410 75 82 34         [24] 4990 	mov	dpl,#0x34
      001413 22               [24] 4991 	ret
      001414                       4992 00110$:
                                   4993 ;	.\ecen4350_lcd_v4.c:946: if(key == 0x5) return '5';
      001414 BF 05 04         [24] 4994 	cjne	r7,#0x05,00112$
      001417 75 82 35         [24] 4995 	mov	dpl,#0x35
      00141A 22               [24] 4996 	ret
      00141B                       4997 00112$:
                                   4998 ;	.\ecen4350_lcd_v4.c:947: if(key == 0x6) return '6';
      00141B BF 06 04         [24] 4999 	cjne	r7,#0x06,00114$
      00141E 75 82 36         [24] 5000 	mov	dpl,#0x36
      001421 22               [24] 5001 	ret
      001422                       5002 00114$:
                                   5003 ;	.\ecen4350_lcd_v4.c:948: if(key == 0x7) return '7';
      001422 BF 07 04         [24] 5004 	cjne	r7,#0x07,00116$
      001425 75 82 37         [24] 5005 	mov	dpl,#0x37
      001428 22               [24] 5006 	ret
      001429                       5007 00116$:
                                   5008 ;	.\ecen4350_lcd_v4.c:949: if(key == 0x8) return '8';
      001429 BF 08 04         [24] 5009 	cjne	r7,#0x08,00118$
      00142C 75 82 38         [24] 5010 	mov	dpl,#0x38
      00142F 22               [24] 5011 	ret
      001430                       5012 00118$:
                                   5013 ;	.\ecen4350_lcd_v4.c:950: if(key == 0x9) return '9';
      001430 BF 09 04         [24] 5014 	cjne	r7,#0x09,00120$
      001433 75 82 39         [24] 5015 	mov	dpl,#0x39
      001436 22               [24] 5016 	ret
      001437                       5017 00120$:
                                   5018 ;	.\ecen4350_lcd_v4.c:951: if(key == 0xA) return 'A';
      001437 BF 0A 04         [24] 5019 	cjne	r7,#0x0a,00122$
      00143A 75 82 41         [24] 5020 	mov	dpl,#0x41
      00143D 22               [24] 5021 	ret
      00143E                       5022 00122$:
                                   5023 ;	.\ecen4350_lcd_v4.c:952: if(key == 0xB) return 'B';
      00143E BF 0B 04         [24] 5024 	cjne	r7,#0x0b,00124$
      001441 75 82 42         [24] 5025 	mov	dpl,#0x42
      001444 22               [24] 5026 	ret
      001445                       5027 00124$:
                                   5028 ;	.\ecen4350_lcd_v4.c:953: if(key == 0xC) return 'C';
      001445 BF 0C 04         [24] 5029 	cjne	r7,#0x0c,00126$
      001448 75 82 43         [24] 5030 	mov	dpl,#0x43
      00144B 22               [24] 5031 	ret
      00144C                       5032 00126$:
                                   5033 ;	.\ecen4350_lcd_v4.c:954: if(key == 0xD) return 'D';
      00144C BF 0D 04         [24] 5034 	cjne	r7,#0x0d,00128$
      00144F 75 82 44         [24] 5035 	mov	dpl,#0x44
      001452 22               [24] 5036 	ret
      001453                       5037 00128$:
                                   5038 ;	.\ecen4350_lcd_v4.c:955: if(key == 0xE) return 'E';
      001453 BF 0E 04         [24] 5039 	cjne	r7,#0x0e,00130$
      001456 75 82 45         [24] 5040 	mov	dpl,#0x45
      001459 22               [24] 5041 	ret
      00145A                       5042 00130$:
                                   5043 ;	.\ecen4350_lcd_v4.c:956: if(key == 0xF) return 'F';
      00145A BF 0F 04         [24] 5044 	cjne	r7,#0x0f,00132$
      00145D 75 82 46         [24] 5045 	mov	dpl,#0x46
      001460 22               [24] 5046 	ret
      001461                       5047 00132$:
                                   5048 ;	.\ecen4350_lcd_v4.c:958: return 0xff;
      001461 75 82 FF         [24] 5049 	mov	dpl,#0xff
                                   5050 ;	.\ecen4350_lcd_v4.c:959: }
      001464 22               [24] 5051 	ret
                                   5052 ;------------------------------------------------------------
                                   5053 ;Allocation info for local variables in function 'ASCIItoHex'
                                   5054 ;------------------------------------------------------------
                                   5055 ;key                       Allocated to registers r7 
                                   5056 ;------------------------------------------------------------
                                   5057 ;	.\ecen4350_lcd_v4.c:961: unsigned char ASCIItoHex(unsigned char key) {
                                   5058 ;	-----------------------------------------
                                   5059 ;	 function ASCIItoHex
                                   5060 ;	-----------------------------------------
      001465                       5061 _ASCIItoHex:
      001465 AF 82            [24] 5062 	mov	r7,dpl
                                   5063 ;	.\ecen4350_lcd_v4.c:962: if(key == '0') return 0x0;
      001467 BF 30 04         [24] 5064 	cjne	r7,#0x30,00102$
      00146A 75 82 00         [24] 5065 	mov	dpl,#0x00
      00146D 22               [24] 5066 	ret
      00146E                       5067 00102$:
                                   5068 ;	.\ecen4350_lcd_v4.c:963: if(key == '1') return 0x1;
      00146E BF 31 04         [24] 5069 	cjne	r7,#0x31,00104$
      001471 75 82 01         [24] 5070 	mov	dpl,#0x01
      001474 22               [24] 5071 	ret
      001475                       5072 00104$:
                                   5073 ;	.\ecen4350_lcd_v4.c:964: if(key == '2') return 0x2;
      001475 BF 32 04         [24] 5074 	cjne	r7,#0x32,00106$
      001478 75 82 02         [24] 5075 	mov	dpl,#0x02
      00147B 22               [24] 5076 	ret
      00147C                       5077 00106$:
                                   5078 ;	.\ecen4350_lcd_v4.c:965: if(key == '3') return 0x3;
      00147C BF 33 04         [24] 5079 	cjne	r7,#0x33,00108$
      00147F 75 82 03         [24] 5080 	mov	dpl,#0x03
      001482 22               [24] 5081 	ret
      001483                       5082 00108$:
                                   5083 ;	.\ecen4350_lcd_v4.c:966: if(key == '4') return 0x4;
      001483 BF 34 04         [24] 5084 	cjne	r7,#0x34,00110$
      001486 75 82 04         [24] 5085 	mov	dpl,#0x04
      001489 22               [24] 5086 	ret
      00148A                       5087 00110$:
                                   5088 ;	.\ecen4350_lcd_v4.c:967: if(key == '5') return 0x5;
      00148A BF 35 04         [24] 5089 	cjne	r7,#0x35,00112$
      00148D 75 82 05         [24] 5090 	mov	dpl,#0x05
      001490 22               [24] 5091 	ret
      001491                       5092 00112$:
                                   5093 ;	.\ecen4350_lcd_v4.c:968: if(key == '6') return 0x6;
      001491 BF 36 04         [24] 5094 	cjne	r7,#0x36,00114$
      001494 75 82 06         [24] 5095 	mov	dpl,#0x06
      001497 22               [24] 5096 	ret
      001498                       5097 00114$:
                                   5098 ;	.\ecen4350_lcd_v4.c:969: if(key == '7') return 0x7;
      001498 BF 37 04         [24] 5099 	cjne	r7,#0x37,00116$
      00149B 75 82 07         [24] 5100 	mov	dpl,#0x07
      00149E 22               [24] 5101 	ret
      00149F                       5102 00116$:
                                   5103 ;	.\ecen4350_lcd_v4.c:970: if(key == '8') return 0x8;
      00149F BF 38 04         [24] 5104 	cjne	r7,#0x38,00118$
      0014A2 75 82 08         [24] 5105 	mov	dpl,#0x08
      0014A5 22               [24] 5106 	ret
      0014A6                       5107 00118$:
                                   5108 ;	.\ecen4350_lcd_v4.c:971: if(key == '9') return 0x9;
      0014A6 BF 39 04         [24] 5109 	cjne	r7,#0x39,00120$
      0014A9 75 82 09         [24] 5110 	mov	dpl,#0x09
      0014AC 22               [24] 5111 	ret
      0014AD                       5112 00120$:
                                   5113 ;	.\ecen4350_lcd_v4.c:972: if(key == 'A') return 0xA;
      0014AD BF 41 04         [24] 5114 	cjne	r7,#0x41,00122$
      0014B0 75 82 0A         [24] 5115 	mov	dpl,#0x0a
      0014B3 22               [24] 5116 	ret
      0014B4                       5117 00122$:
                                   5118 ;	.\ecen4350_lcd_v4.c:973: if(key == 'B') return 0xB;
      0014B4 BF 42 04         [24] 5119 	cjne	r7,#0x42,00124$
      0014B7 75 82 0B         [24] 5120 	mov	dpl,#0x0b
      0014BA 22               [24] 5121 	ret
      0014BB                       5122 00124$:
                                   5123 ;	.\ecen4350_lcd_v4.c:974: if(key == 'C') return 0xC;
      0014BB BF 43 04         [24] 5124 	cjne	r7,#0x43,00126$
      0014BE 75 82 0C         [24] 5125 	mov	dpl,#0x0c
      0014C1 22               [24] 5126 	ret
      0014C2                       5127 00126$:
                                   5128 ;	.\ecen4350_lcd_v4.c:975: if(key == 'D') return 0xD;
      0014C2 BF 44 04         [24] 5129 	cjne	r7,#0x44,00128$
      0014C5 75 82 0D         [24] 5130 	mov	dpl,#0x0d
      0014C8 22               [24] 5131 	ret
      0014C9                       5132 00128$:
                                   5133 ;	.\ecen4350_lcd_v4.c:976: if(key == 'E') return 0xE;
      0014C9 BF 45 04         [24] 5134 	cjne	r7,#0x45,00130$
      0014CC 75 82 0E         [24] 5135 	mov	dpl,#0x0e
      0014CF 22               [24] 5136 	ret
      0014D0                       5137 00130$:
                                   5138 ;	.\ecen4350_lcd_v4.c:977: if(key == 'F') return 0xF;
      0014D0 BF 46 04         [24] 5139 	cjne	r7,#0x46,00132$
      0014D3 75 82 0F         [24] 5140 	mov	dpl,#0x0f
      0014D6 22               [24] 5141 	ret
      0014D7                       5142 00132$:
                                   5143 ;	.\ecen4350_lcd_v4.c:979: return 0xff;
      0014D7 75 82 FF         [24] 5144 	mov	dpl,#0xff
                                   5145 ;	.\ecen4350_lcd_v4.c:980: }
      0014DA 22               [24] 5146 	ret
                                   5147 ;------------------------------------------------------------
                                   5148 ;Allocation info for local variables in function 'asciiToDec'
                                   5149 ;------------------------------------------------------------
                                   5150 ;d                         Allocated to registers 
                                   5151 ;val                       Allocated to registers r4 
                                   5152 ;id                        Allocated to registers r6 r7 
                                   5153 ;------------------------------------------------------------
                                   5154 ;	.\ecen4350_lcd_v4.c:982: void asciiToDec(unsigned char d)
                                   5155 ;	-----------------------------------------
                                   5156 ;	 function asciiToDec
                                   5157 ;	-----------------------------------------
      0014DB                       5158 _asciiToDec:
                                   5159 ;	.\ecen4350_lcd_v4.c:986: id = reverse(d);
      0014DB 12 13 00         [24] 5160 	lcall	_reverse
      0014DE AE 82            [24] 5161 	mov	r6,dpl
      0014E0 AF 83            [24] 5162 	mov	r7,dph
                                   5163 ;	.\ecen4350_lcd_v4.c:987: while (id >= 1)
      0014E2                       5164 00101$:
      0014E2 C3               [12] 5165 	clr	c
      0014E3 EE               [12] 5166 	mov	a,r6
      0014E4 94 01            [12] 5167 	subb	a,#0x01
      0014E6 EF               [12] 5168 	mov	a,r7
      0014E7 94 00            [12] 5169 	subb	a,#0x00
      0014E9 40 3E            [24] 5170 	jc	00103$
                                   5171 ;	.\ecen4350_lcd_v4.c:990: val = id % 10;
      0014EB 75 6B 0A         [24] 5172 	mov	__moduint_PARM_2,#0x0a
      0014EE 75 6C 00         [24] 5173 	mov	(__moduint_PARM_2 + 1),#0x00
      0014F1 8E 82            [24] 5174 	mov	dpl,r6
      0014F3 8F 83            [24] 5175 	mov	dph,r7
      0014F5 C0 07            [24] 5176 	push	ar7
      0014F7 C0 06            [24] 5177 	push	ar6
      0014F9 12 58 55         [24] 5178 	lcall	__moduint
      0014FC AC 82            [24] 5179 	mov	r4,dpl
      0014FE D0 06            [24] 5180 	pop	ar6
      001500 D0 07            [24] 5181 	pop	ar7
                                   5182 ;	.\ecen4350_lcd_v4.c:991: id = id / 10;
      001502 75 6B 0A         [24] 5183 	mov	__divuint_PARM_2,#0x0a
      001505 75 6C 00         [24] 5184 	mov	(__divuint_PARM_2 + 1),#0x00
      001508 8E 82            [24] 5185 	mov	dpl,r6
      00150A 8F 83            [24] 5186 	mov	dph,r7
      00150C C0 04            [24] 5187 	push	ar4
      00150E 12 58 0F         [24] 5188 	lcall	__divuint
      001511 AE 82            [24] 5189 	mov	r6,dpl
      001513 AF 83            [24] 5190 	mov	r7,dph
      001515 D0 04            [24] 5191 	pop	ar4
                                   5192 ;	.\ecen4350_lcd_v4.c:992: write(val + '0');
      001517 74 30            [12] 5193 	mov	a,#0x30
      001519 2C               [12] 5194 	add	a,r4
      00151A F5 82            [12] 5195 	mov	dpl,a
      00151C C0 07            [24] 5196 	push	ar7
      00151E C0 06            [24] 5197 	push	ar6
      001520 12 10 73         [24] 5198 	lcall	_write
      001523 D0 06            [24] 5199 	pop	ar6
      001525 D0 07            [24] 5200 	pop	ar7
      001527 80 B9            [24] 5201 	sjmp	00101$
      001529                       5202 00103$:
                                   5203 ;	.\ecen4350_lcd_v4.c:994: write('\n');
      001529 75 82 0A         [24] 5204 	mov	dpl,#0x0a
                                   5205 ;	.\ecen4350_lcd_v4.c:995: }
      00152C 02 10 73         [24] 5206 	ljmp	_write
                                   5207 ;------------------------------------------------------------
                                   5208 ;Allocation info for local variables in function 'asciiToHex'
                                   5209 ;------------------------------------------------------------
                                   5210 ;d                         Allocated to registers r7 
                                   5211 ;val                       Allocated to registers r2 
                                   5212 ;store                     Allocated with name '_asciiToHex_store_65536_519'
                                   5213 ;i                         Allocated to registers r6 
                                   5214 ;------------------------------------------------------------
                                   5215 ;	.\ecen4350_lcd_v4.c:997: void asciiToHex(unsigned char d)
                                   5216 ;	-----------------------------------------
                                   5217 ;	 function asciiToHex
                                   5218 ;	-----------------------------------------
      00152F                       5219 _asciiToHex:
      00152F AF 82            [24] 5220 	mov	r7,dpl
                                   5221 ;	.\ecen4350_lcd_v4.c:1002: store[0] = 0;
      001531 75 56 00         [24] 5222 	mov	_asciiToHex_store_65536_519,#0x00
                                   5223 ;	.\ecen4350_lcd_v4.c:1003: store[1] = 0;
      001534 75 57 00         [24] 5224 	mov	(_asciiToHex_store_65536_519 + 0x0001),#0x00
                                   5225 ;	.\ecen4350_lcd_v4.c:1004: while (d >= 1)
      001537 7E 00            [12] 5226 	mov	r6,#0x00
      001539                       5227 00104$:
      001539 BF 01 00         [24] 5228 	cjne	r7,#0x01,00122$
      00153C                       5229 00122$:
      00153C 40 5A            [24] 5230 	jc	00106$
                                   5231 ;	.\ecen4350_lcd_v4.c:1007: val = d % 16;
      00153E 8F 04            [24] 5232 	mov	ar4,r7
      001540 7D 00            [12] 5233 	mov	r5,#0x00
      001542 74 0F            [12] 5234 	mov	a,#0x0f
      001544 5C               [12] 5235 	anl	a,r4
      001545 FA               [12] 5236 	mov	r2,a
                                   5237 ;	.\ecen4350_lcd_v4.c:1008: d = d / 16;
      001546 75 6B 10         [24] 5238 	mov	__divsint_PARM_2,#0x10
                                   5239 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001549 8D 6C            [24] 5240 	mov	(__divsint_PARM_2 + 1),r5
      00154B 8C 82            [24] 5241 	mov	dpl,r4
      00154D 8D 83            [24] 5242 	mov	dph,r5
      00154F C0 06            [24] 5243 	push	ar6
      001551 C0 02            [24] 5244 	push	ar2
      001553 12 58 F4         [24] 5245 	lcall	__divsint
      001556 AC 82            [24] 5246 	mov	r4,dpl
      001558 D0 02            [24] 5247 	pop	ar2
      00155A D0 06            [24] 5248 	pop	ar6
      00155C 8C 07            [24] 5249 	mov	ar7,r4
                                   5250 ;	.\ecen4350_lcd_v4.c:1009: if (val <= 9)
      00155E EA               [12] 5251 	mov	a,r2
      00155F 24 F6            [12] 5252 	add	a,#0xff - 0x09
      001561 40 0C            [24] 5253 	jc	00102$
                                   5254 ;	.\ecen4350_lcd_v4.c:1012: store[i] = val + '0';
      001563 EE               [12] 5255 	mov	a,r6
      001564 24 56            [12] 5256 	add	a,#_asciiToHex_store_65536_519
      001566 F9               [12] 5257 	mov	r1,a
      001567 8A 05            [24] 5258 	mov	ar5,r2
      001569 74 30            [12] 5259 	mov	a,#0x30
      00156B 2D               [12] 5260 	add	a,r5
      00156C F7               [12] 5261 	mov	@r1,a
      00156D 80 26            [24] 5262 	sjmp	00103$
      00156F                       5263 00102$:
                                   5264 ;	.\ecen4350_lcd_v4.c:1016: store[i] = (val % 10) + 'A';
      00156F EE               [12] 5265 	mov	a,r6
      001570 24 56            [12] 5266 	add	a,#_asciiToHex_store_65536_519
      001572 F9               [12] 5267 	mov	r1,a
      001573 7D 00            [12] 5268 	mov	r5,#0x00
      001575 75 6B 0A         [24] 5269 	mov	__modsint_PARM_2,#0x0a
                                   5270 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001578 8D 6C            [24] 5271 	mov	(__modsint_PARM_2 + 1),r5
      00157A 8A 82            [24] 5272 	mov	dpl,r2
      00157C 8D 83            [24] 5273 	mov	dph,r5
      00157E C0 07            [24] 5274 	push	ar7
      001580 C0 06            [24] 5275 	push	ar6
      001582 C0 01            [24] 5276 	push	ar1
      001584 12 58 BE         [24] 5277 	lcall	__modsint
      001587 AC 82            [24] 5278 	mov	r4,dpl
      001589 AD 83            [24] 5279 	mov	r5,dph
      00158B D0 01            [24] 5280 	pop	ar1
      00158D D0 06            [24] 5281 	pop	ar6
      00158F D0 07            [24] 5282 	pop	ar7
      001591 74 41            [12] 5283 	mov	a,#0x41
      001593 2C               [12] 5284 	add	a,r4
      001594 F7               [12] 5285 	mov	@r1,a
      001595                       5286 00103$:
                                   5287 ;	.\ecen4350_lcd_v4.c:1018: i++;
      001595 0E               [12] 5288 	inc	r6
      001596 80 A1            [24] 5289 	sjmp	00104$
      001598                       5290 00106$:
                                   5291 ;	.\ecen4350_lcd_v4.c:1020: write(store[1]);
      001598 85 57 82         [24] 5292 	mov	dpl,(_asciiToHex_store_65536_519 + 0x0001)
      00159B 12 10 73         [24] 5293 	lcall	_write
                                   5294 ;	.\ecen4350_lcd_v4.c:1021: write(store[0]);
      00159E 85 56 82         [24] 5295 	mov	dpl,_asciiToHex_store_65536_519
                                   5296 ;	.\ecen4350_lcd_v4.c:1023: }
      0015A1 02 10 73         [24] 5297 	ljmp	_write
                                   5298 ;------------------------------------------------------------
                                   5299 ;Allocation info for local variables in function 'print4Hex'
                                   5300 ;------------------------------------------------------------
                                   5301 ;num                       Allocated to registers 
                                   5302 ;------------------------------------------------------------
                                   5303 ;	.\ecen4350_lcd_v4.c:1026: void print4Hex(unsigned char num) {
                                   5304 ;	-----------------------------------------
                                   5305 ;	 function print4Hex
                                   5306 ;	-----------------------------------------
      0015A4                       5307 _print4Hex:
                                   5308 ;	.\ecen4350_lcd_v4.c:1027: write((u8) hexToASCII(num));
      0015A4 12 13 EF         [24] 5309 	lcall	_hexToASCII
                                   5310 ;	.\ecen4350_lcd_v4.c:1028: }
      0015A7 02 10 73         [24] 5311 	ljmp	_write
                                   5312 ;------------------------------------------------------------
                                   5313 ;Allocation info for local variables in function 'print8Hex'
                                   5314 ;------------------------------------------------------------
                                   5315 ;num                       Allocated to registers r7 
                                   5316 ;------------------------------------------------------------
                                   5317 ;	.\ecen4350_lcd_v4.c:1030: void print8Hex(unsigned char num) {
                                   5318 ;	-----------------------------------------
                                   5319 ;	 function print8Hex
                                   5320 ;	-----------------------------------------
      0015AA                       5321 _print8Hex:
                                   5322 ;	.\ecen4350_lcd_v4.c:1031: print4Hex(num >> 4);
      0015AA E5 82            [12] 5323 	mov	a,dpl
      0015AC FF               [12] 5324 	mov	r7,a
      0015AD C4               [12] 5325 	swap	a
      0015AE 54 0F            [12] 5326 	anl	a,#0x0f
      0015B0 F5 82            [12] 5327 	mov	dpl,a
      0015B2 C0 07            [24] 5328 	push	ar7
      0015B4 12 15 A4         [24] 5329 	lcall	_print4Hex
      0015B7 D0 07            [24] 5330 	pop	ar7
                                   5331 ;	.\ecen4350_lcd_v4.c:1032: print4Hex(num & 0x0F);
      0015B9 74 0F            [12] 5332 	mov	a,#0x0f
      0015BB 5F               [12] 5333 	anl	a,r7
      0015BC F5 82            [12] 5334 	mov	dpl,a
                                   5335 ;	.\ecen4350_lcd_v4.c:1033: }
      0015BE 02 15 A4         [24] 5336 	ljmp	_print4Hex
                                   5337 ;------------------------------------------------------------
                                   5338 ;Allocation info for local variables in function 'print16Hex'
                                   5339 ;------------------------------------------------------------
                                   5340 ;num                       Allocated to registers r6 r7 
                                   5341 ;------------------------------------------------------------
                                   5342 ;	.\ecen4350_lcd_v4.c:1035: void print16Hex(unsigned int num) {
                                   5343 ;	-----------------------------------------
                                   5344 ;	 function print16Hex
                                   5345 ;	-----------------------------------------
      0015C1                       5346 _print16Hex:
      0015C1 AE 82            [24] 5347 	mov	r6,dpl
      0015C3 AF 83            [24] 5348 	mov	r7,dph
                                   5349 ;	.\ecen4350_lcd_v4.c:1036: print8Hex((unsigned char)(num >> 8));
      0015C5 8F 82            [24] 5350 	mov	dpl,r7
      0015C7 C0 07            [24] 5351 	push	ar7
      0015C9 C0 06            [24] 5352 	push	ar6
      0015CB 12 15 AA         [24] 5353 	lcall	_print8Hex
      0015CE D0 06            [24] 5354 	pop	ar6
      0015D0 D0 07            [24] 5355 	pop	ar7
                                   5356 ;	.\ecen4350_lcd_v4.c:1037: print8Hex((unsigned char)num);
      0015D2 8E 82            [24] 5357 	mov	dpl,r6
                                   5358 ;	.\ecen4350_lcd_v4.c:1038: }
      0015D4 02 15 AA         [24] 5359 	ljmp	_print8Hex
                                   5360 ;------------------------------------------------------------
                                   5361 ;Allocation info for local variables in function 'print16Dec'
                                   5362 ;------------------------------------------------------------
                                   5363 ;num                       Allocated to registers 
                                   5364 ;val                       Allocated to registers r4 r5 
                                   5365 ;id                        Allocated to registers r6 r7 
                                   5366 ;------------------------------------------------------------
                                   5367 ;	.\ecen4350_lcd_v4.c:1040: void print16Dec(unsigned int num) {
                                   5368 ;	-----------------------------------------
                                   5369 ;	 function print16Dec
                                   5370 ;	-----------------------------------------
      0015D7                       5371 _print16Dec:
                                   5372 ;	.\ecen4350_lcd_v4.c:1043: id = reverse16(num);
      0015D7 12 13 70         [24] 5373 	lcall	_reverse16
      0015DA AE 82            [24] 5374 	mov	r6,dpl
      0015DC AF 83            [24] 5375 	mov	r7,dph
                                   5376 ;	.\ecen4350_lcd_v4.c:1044: while (id >= 1) {
      0015DE                       5377 00101$:
      0015DE C3               [12] 5378 	clr	c
      0015DF EE               [12] 5379 	mov	a,r6
      0015E0 94 01            [12] 5380 	subb	a,#0x01
      0015E2 EF               [12] 5381 	mov	a,r7
      0015E3 94 00            [12] 5382 	subb	a,#0x00
      0015E5 40 44            [24] 5383 	jc	00104$
                                   5384 ;	.\ecen4350_lcd_v4.c:1045: val = id % 10;
      0015E7 75 6B 0A         [24] 5385 	mov	__moduint_PARM_2,#0x0a
      0015EA 75 6C 00         [24] 5386 	mov	(__moduint_PARM_2 + 1),#0x00
      0015ED 8E 82            [24] 5387 	mov	dpl,r6
      0015EF 8F 83            [24] 5388 	mov	dph,r7
      0015F1 C0 07            [24] 5389 	push	ar7
      0015F3 C0 06            [24] 5390 	push	ar6
      0015F5 12 58 55         [24] 5391 	lcall	__moduint
      0015F8 AC 82            [24] 5392 	mov	r4,dpl
      0015FA AD 83            [24] 5393 	mov	r5,dph
      0015FC D0 06            [24] 5394 	pop	ar6
      0015FE D0 07            [24] 5395 	pop	ar7
                                   5396 ;	.\ecen4350_lcd_v4.c:1046: id = id/10;
      001600 75 6B 0A         [24] 5397 	mov	__divuint_PARM_2,#0x0a
      001603 75 6C 00         [24] 5398 	mov	(__divuint_PARM_2 + 1),#0x00
      001606 8E 82            [24] 5399 	mov	dpl,r6
      001608 8F 83            [24] 5400 	mov	dph,r7
      00160A C0 05            [24] 5401 	push	ar5
      00160C C0 04            [24] 5402 	push	ar4
      00160E 12 58 0F         [24] 5403 	lcall	__divuint
      001611 AE 82            [24] 5404 	mov	r6,dpl
      001613 AF 83            [24] 5405 	mov	r7,dph
      001615 D0 04            [24] 5406 	pop	ar4
      001617 D0 05            [24] 5407 	pop	ar5
                                   5408 ;	.\ecen4350_lcd_v4.c:1047: write(val + '0');
      001619 74 30            [12] 5409 	mov	a,#0x30
      00161B 2C               [12] 5410 	add	a,r4
      00161C F5 82            [12] 5411 	mov	dpl,a
      00161E C0 07            [24] 5412 	push	ar7
      001620 C0 06            [24] 5413 	push	ar6
      001622 12 10 73         [24] 5414 	lcall	_write
      001625 D0 06            [24] 5415 	pop	ar6
      001627 D0 07            [24] 5416 	pop	ar7
      001629 80 B3            [24] 5417 	sjmp	00101$
      00162B                       5418 00104$:
                                   5419 ;	.\ecen4350_lcd_v4.c:1049: }
      00162B 22               [24] 5420 	ret
                                   5421 ;------------------------------------------------------------
                                   5422 ;Allocation info for local variables in function 'print8ASCII'
                                   5423 ;------------------------------------------------------------
                                   5424 ;num                       Allocated to registers 
                                   5425 ;------------------------------------------------------------
                                   5426 ;	.\ecen4350_lcd_v4.c:1051: void print8ASCII(unsigned char num) {
                                   5427 ;	-----------------------------------------
                                   5428 ;	 function print8ASCII
                                   5429 ;	-----------------------------------------
      00162C                       5430 _print8ASCII:
                                   5431 ;	.\ecen4350_lcd_v4.c:1052: write((u8)num);
                                   5432 ;	.\ecen4350_lcd_v4.c:1053: }
      00162C 02 10 73         [24] 5433 	ljmp	_write
                                   5434 ;------------------------------------------------------------
                                   5435 ;Allocation info for local variables in function 'print16ASCII'
                                   5436 ;------------------------------------------------------------
                                   5437 ;num                       Allocated to registers r6 r7 
                                   5438 ;------------------------------------------------------------
                                   5439 ;	.\ecen4350_lcd_v4.c:1055: void print16ASCII(unsigned int num) {
                                   5440 ;	-----------------------------------------
                                   5441 ;	 function print16ASCII
                                   5442 ;	-----------------------------------------
      00162F                       5443 _print16ASCII:
      00162F AE 82            [24] 5444 	mov	r6,dpl
      001631 AF 83            [24] 5445 	mov	r7,dph
                                   5446 ;	.\ecen4350_lcd_v4.c:1056: print8ASCII((unsigned char)(num >> 8));
      001633 8F 82            [24] 5447 	mov	dpl,r7
      001635 C0 07            [24] 5448 	push	ar7
      001637 C0 06            [24] 5449 	push	ar6
      001639 12 16 2C         [24] 5450 	lcall	_print8ASCII
      00163C D0 06            [24] 5451 	pop	ar6
      00163E D0 07            [24] 5452 	pop	ar7
                                   5453 ;	.\ecen4350_lcd_v4.c:1057: print8ASCII((unsigned char)num);
      001640 8E 82            [24] 5454 	mov	dpl,r6
                                   5455 ;	.\ecen4350_lcd_v4.c:1058: }
      001642 02 16 2C         [24] 5456 	ljmp	_print8ASCII
                                   5457 ;------------------------------------------------------------
                                   5458 ;Allocation info for local variables in function 'writeSomeLines'
                                   5459 ;------------------------------------------------------------
                                   5460 ;	.\ecen4350_lcd_v4.c:1061: void writeSomeLines()
                                   5461 ;	-----------------------------------------
                                   5462 ;	 function writeSomeLines
                                   5463 ;	-----------------------------------------
      001645                       5464 _writeSomeLines:
                                   5465 ;	.\ecen4350_lcd_v4.c:1063: setRotation(0);		//rotation 0 is for flat/flush LCD
      001645 75 82 00         [24] 5466 	mov	dpl,#0x00
      001648 12 05 F1         [24] 5467 	lcall	_setRotation
                                   5468 ;	.\ecen4350_lcd_v4.c:1065: fillScreen(CYAN);
      00164B 90 07 FF         [24] 5469 	mov	dptr,#0x07ff
      00164E 12 0D 75         [24] 5470 	lcall	_fillScreen
                                   5471 ;	.\ecen4350_lcd_v4.c:1066: fillTop(BLACK);
      001651 90 00 00         [24] 5472 	mov	dptr,#0x0000
      001654 12 0C 8F         [24] 5473 	lcall	_fillTop
                                   5474 ;	.\ecen4350_lcd_v4.c:1067: setTextSize(5);
      001657 75 82 05         [24] 5475 	mov	dpl,#0x05
      00165A 12 05 D9         [24] 5476 	lcall	_setTextSize
                                   5477 ;	.\ecen4350_lcd_v4.c:1068: setTextColor(CYAN, BLACK);
      00165D E4               [12] 5478 	clr	a
      00165E F5 6B            [12] 5479 	mov	_setTextColor_PARM_2,a
      001660 F5 6C            [12] 5480 	mov	(_setTextColor_PARM_2 + 1),a
      001662 90 07 FF         [24] 5481 	mov	dptr,#0x07ff
      001665 12 05 CC         [24] 5482 	lcall	_setTextColor
                                   5483 ;	.\ecen4350_lcd_v4.c:1069: setCursor(10,0);
      001668 E4               [12] 5484 	clr	a
      001669 F5 6B            [12] 5485 	mov	_setCursor_PARM_2,a
      00166B F5 6C            [12] 5486 	mov	(_setCursor_PARM_2 + 1),a
      00166D 90 00 0A         [24] 5487 	mov	dptr,#0x000a
      001670 12 05 BF         [24] 5488 	lcall	_setCursor
                                   5489 ;	.\ecen4350_lcd_v4.c:1070: LCD_string_write("Welcome\n");
      001673 90 5E 5C         [24] 5490 	mov	dptr,#___str_3
      001676 75 F0 80         [24] 5491 	mov	b,#0x80
      001679 12 10 D9         [24] 5492 	lcall	_LCD_string_write
                                   5493 ;	.\ecen4350_lcd_v4.c:1071: setTextSize(2);
      00167C 75 82 02         [24] 5494 	mov	dpl,#0x02
      00167F 12 05 D9         [24] 5495 	lcall	_setTextSize
                                   5496 ;	.\ecen4350_lcd_v4.c:1072: setTextColor(BLACK, CYAN);
      001682 75 6B FF         [24] 5497 	mov	_setTextColor_PARM_2,#0xff
      001685 75 6C 07         [24] 5498 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001688 90 00 00         [24] 5499 	mov	dptr,#0x0000
      00168B 12 05 CC         [24] 5500 	lcall	_setTextColor
                                   5501 ;	.\ecen4350_lcd_v4.c:1073: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      00168E 90 5E 65         [24] 5502 	mov	dptr,#___str_4
      001691 75 F0 80         [24] 5503 	mov	b,#0x80
      001694 12 10 D9         [24] 5504 	lcall	_LCD_string_write
                                   5505 ;	.\ecen4350_lcd_v4.c:1074: delay(40);
      001697 90 00 28         [24] 5506 	mov	dptr,#0x0028
                                   5507 ;	.\ecen4350_lcd_v4.c:1075: }
      00169A 02 01 A9         [24] 5508 	ljmp	_delay
                                   5509 ;------------------------------------------------------------
                                   5510 ;Allocation info for local variables in function 'setColorDefault'
                                   5511 ;------------------------------------------------------------
                                   5512 ;	.\ecen4350_lcd_v4.c:1078: void setColorDefault() {
                                   5513 ;	-----------------------------------------
                                   5514 ;	 function setColorDefault
                                   5515 ;	-----------------------------------------
      00169D                       5516 _setColorDefault:
                                   5517 ;	.\ecen4350_lcd_v4.c:1079: setTextColor(colorText, colorBackground);
      00169D E4               [12] 5518 	clr	a
      00169E F5 6B            [12] 5519 	mov	_setTextColor_PARM_2,a
      0016A0 F5 6C            [12] 5520 	mov	(_setTextColor_PARM_2 + 1),a
      0016A2 90 07 FF         [24] 5521 	mov	dptr,#0x07ff
                                   5522 ;	.\ecen4350_lcd_v4.c:1080: } 
      0016A5 02 05 CC         [24] 5523 	ljmp	_setTextColor
                                   5524 ;------------------------------------------------------------
                                   5525 ;Allocation info for local variables in function 'setColorSelect'
                                   5526 ;------------------------------------------------------------
                                   5527 ;	.\ecen4350_lcd_v4.c:1082: void setColorSelect() {
                                   5528 ;	-----------------------------------------
                                   5529 ;	 function setColorSelect
                                   5530 ;	-----------------------------------------
      0016A8                       5531 _setColorSelect:
                                   5532 ;	.\ecen4350_lcd_v4.c:1083: setTextColor(colorSelect, colorBackground);
      0016A8 E4               [12] 5533 	clr	a
      0016A9 F5 6B            [12] 5534 	mov	_setTextColor_PARM_2,a
      0016AB F5 6C            [12] 5535 	mov	(_setTextColor_PARM_2 + 1),a
      0016AD 90 F8 1F         [24] 5536 	mov	dptr,#0xf81f
                                   5537 ;	.\ecen4350_lcd_v4.c:1084: }
      0016B0 02 05 CC         [24] 5538 	ljmp	_setTextColor
                                   5539 ;------------------------------------------------------------
                                   5540 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5541 ;------------------------------------------------------------
                                   5542 ;	.\ecen4350_lcd_v4.c:1086: void setColorHighlight1() {
                                   5543 ;	-----------------------------------------
                                   5544 ;	 function setColorHighlight1
                                   5545 ;	-----------------------------------------
      0016B3                       5546 _setColorHighlight1:
                                   5547 ;	.\ecen4350_lcd_v4.c:1087: setTextColor(colorSelect, CYAN);
      0016B3 75 6B FF         [24] 5548 	mov	_setTextColor_PARM_2,#0xff
      0016B6 75 6C 07         [24] 5549 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0016B9 90 F8 1F         [24] 5550 	mov	dptr,#0xf81f
                                   5551 ;	.\ecen4350_lcd_v4.c:1088: }
      0016BC 02 05 CC         [24] 5552 	ljmp	_setTextColor
                                   5553 ;------------------------------------------------------------
                                   5554 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5555 ;------------------------------------------------------------
                                   5556 ;	.\ecen4350_lcd_v4.c:1090: void setColorHighlight2() {
                                   5557 ;	-----------------------------------------
                                   5558 ;	 function setColorHighlight2
                                   5559 ;	-----------------------------------------
      0016BF                       5560 _setColorHighlight2:
                                   5561 ;	.\ecen4350_lcd_v4.c:1091: setTextColor(BLACK, CYAN);
      0016BF 75 6B FF         [24] 5562 	mov	_setTextColor_PARM_2,#0xff
      0016C2 75 6C 07         [24] 5563 	mov	(_setTextColor_PARM_2 + 1),#0x07
      0016C5 90 00 00         [24] 5564 	mov	dptr,#0x0000
                                   5565 ;	.\ecen4350_lcd_v4.c:1092: }
      0016C8 02 05 CC         [24] 5566 	ljmp	_setTextColor
                                   5567 ;------------------------------------------------------------
                                   5568 ;Allocation info for local variables in function 'setColorGray'
                                   5569 ;------------------------------------------------------------
                                   5570 ;	.\ecen4350_lcd_v4.c:1094: void setColorGray() {
                                   5571 ;	-----------------------------------------
                                   5572 ;	 function setColorGray
                                   5573 ;	-----------------------------------------
      0016CB                       5574 _setColorGray:
                                   5575 ;	.\ecen4350_lcd_v4.c:1095: setTextColor(GRAY, colorBackground);
      0016CB E4               [12] 5576 	clr	a
      0016CC F5 6B            [12] 5577 	mov	_setTextColor_PARM_2,a
      0016CE F5 6C            [12] 5578 	mov	(_setTextColor_PARM_2 + 1),a
      0016D0 90 D6 BA         [24] 5579 	mov	dptr,#0xd6ba
                                   5580 ;	.\ecen4350_lcd_v4.c:1096: }
      0016D3 02 05 CC         [24] 5581 	ljmp	_setTextColor
                                   5582 ;------------------------------------------------------------
                                   5583 ;Allocation info for local variables in function 'setColorMenu'
                                   5584 ;------------------------------------------------------------
                                   5585 ;	.\ecen4350_lcd_v4.c:1098: void setColorMenu() {
                                   5586 ;	-----------------------------------------
                                   5587 ;	 function setColorMenu
                                   5588 ;	-----------------------------------------
      0016D6                       5589 _setColorMenu:
                                   5590 ;	.\ecen4350_lcd_v4.c:1099: setTextColor(BLACK, GRAY);
      0016D6 75 6B BA         [24] 5591 	mov	_setTextColor_PARM_2,#0xba
      0016D9 75 6C D6         [24] 5592 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      0016DC 90 00 00         [24] 5593 	mov	dptr,#0x0000
                                   5594 ;	.\ecen4350_lcd_v4.c:1100: }
      0016DF 02 05 CC         [24] 5595 	ljmp	_setTextColor
                                   5596 ;------------------------------------------------------------
                                   5597 ;Allocation info for local variables in function 'setColorRed'
                                   5598 ;------------------------------------------------------------
                                   5599 ;	.\ecen4350_lcd_v4.c:1102: void setColorRed() {
                                   5600 ;	-----------------------------------------
                                   5601 ;	 function setColorRed
                                   5602 ;	-----------------------------------------
      0016E2                       5603 _setColorRed:
                                   5604 ;	.\ecen4350_lcd_v4.c:1103: setTextColor(RED, colorBackground);
      0016E2 E4               [12] 5605 	clr	a
      0016E3 F5 6B            [12] 5606 	mov	_setTextColor_PARM_2,a
      0016E5 F5 6C            [12] 5607 	mov	(_setTextColor_PARM_2 + 1),a
      0016E7 90 F8 00         [24] 5608 	mov	dptr,#0xf800
                                   5609 ;	.\ecen4350_lcd_v4.c:1104: }
      0016EA 02 05 CC         [24] 5610 	ljmp	_setTextColor
                                   5611 ;------------------------------------------------------------
                                   5612 ;Allocation info for local variables in function 'setColorWhite'
                                   5613 ;------------------------------------------------------------
                                   5614 ;	.\ecen4350_lcd_v4.c:1106: void setColorWhite() {
                                   5615 ;	-----------------------------------------
                                   5616 ;	 function setColorWhite
                                   5617 ;	-----------------------------------------
      0016ED                       5618 _setColorWhite:
                                   5619 ;	.\ecen4350_lcd_v4.c:1107: setTextColor(WHITE, colorBackground);
      0016ED E4               [12] 5620 	clr	a
      0016EE F5 6B            [12] 5621 	mov	_setTextColor_PARM_2,a
      0016F0 F5 6C            [12] 5622 	mov	(_setTextColor_PARM_2 + 1),a
      0016F2 90 FF FF         [24] 5623 	mov	dptr,#0xffff
                                   5624 ;	.\ecen4350_lcd_v4.c:1108: }
      0016F5 02 05 CC         [24] 5625 	ljmp	_setTextColor
                                   5626 ;------------------------------------------------------------
                                   5627 ;Allocation info for local variables in function 'setColorGreen'
                                   5628 ;------------------------------------------------------------
                                   5629 ;	.\ecen4350_lcd_v4.c:1110: void setColorGreen() {
                                   5630 ;	-----------------------------------------
                                   5631 ;	 function setColorGreen
                                   5632 ;	-----------------------------------------
      0016F8                       5633 _setColorGreen:
                                   5634 ;	.\ecen4350_lcd_v4.c:1111: setTextColor(GREEN, colorBackground);
      0016F8 E4               [12] 5635 	clr	a
      0016F9 F5 6B            [12] 5636 	mov	_setTextColor_PARM_2,a
      0016FB F5 6C            [12] 5637 	mov	(_setTextColor_PARM_2 + 1),a
      0016FD 90 07 E0         [24] 5638 	mov	dptr,#0x07e0
                                   5639 ;	.\ecen4350_lcd_v4.c:1112: }
      001700 02 05 CC         [24] 5640 	ljmp	_setTextColor
                                   5641 ;------------------------------------------------------------
                                   5642 ;Allocation info for local variables in function 'setColorYellow'
                                   5643 ;------------------------------------------------------------
                                   5644 ;	.\ecen4350_lcd_v4.c:1114: void setColorYellow() {
                                   5645 ;	-----------------------------------------
                                   5646 ;	 function setColorYellow
                                   5647 ;	-----------------------------------------
      001703                       5648 _setColorYellow:
                                   5649 ;	.\ecen4350_lcd_v4.c:1115: setTextColor(YELLOW, colorBackground);
      001703 E4               [12] 5650 	clr	a
      001704 F5 6B            [12] 5651 	mov	_setTextColor_PARM_2,a
      001706 F5 6C            [12] 5652 	mov	(_setTextColor_PARM_2 + 1),a
      001708 90 FF E0         [24] 5653 	mov	dptr,#0xffe0
                                   5654 ;	.\ecen4350_lcd_v4.c:1116: }
      00170B 02 05 CC         [24] 5655 	ljmp	_setTextColor
                                   5656 ;------------------------------------------------------------
                                   5657 ;Allocation info for local variables in function 'inputAddress'
                                   5658 ;------------------------------------------------------------
                                   5659 ;address                   Allocated to registers r7 r6 
                                   5660 ;input                     Allocated to registers r7 
                                   5661 ;------------------------------------------------------------
                                   5662 ;	.\ecen4350_lcd_v4.c:1118: unsigned int inputAddress()
                                   5663 ;	-----------------------------------------
                                   5664 ;	 function inputAddress
                                   5665 ;	-----------------------------------------
      00170E                       5666 _inputAddress:
                                   5667 ;	.\ecen4350_lcd_v4.c:1123: input = keyDetect();					
      00170E 12 11 F7         [24] 5668 	lcall	_keyDetect
                                   5669 ;	.\ecen4350_lcd_v4.c:1126: write(input);									// Print to screen
      001711 AF 82            [24] 5670 	mov  r7,dpl
      001713 C0 07            [24] 5671 	push	ar7
      001715 12 10 73         [24] 5672 	lcall	_write
      001718 D0 07            [24] 5673 	pop	ar7
                                   5674 ;	.\ecen4350_lcd_v4.c:1127: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      00171A 8F 82            [24] 5675 	mov	dpl,r7
      00171C 12 14 65         [24] 5676 	lcall	_ASCIItoHex
                                   5677 ;	.\ecen4350_lcd_v4.c:1128: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      00171F E5 82            [12] 5678 	mov	a,dpl
      001721 C4               [12] 5679 	swap	a
      001722 54 F0            [12] 5680 	anl	a,#0xf0
      001724 FE               [12] 5681 	mov	r6,a
      001725 7F 00            [12] 5682 	mov	r7,#0x00
                                   5683 ;	.\ecen4350_lcd_v4.c:1130: input = keyDetect();							// second highest address nibble
      001727 C0 07            [24] 5684 	push	ar7
      001729 C0 06            [24] 5685 	push	ar6
      00172B 12 11 F7         [24] 5686 	lcall	_keyDetect
                                   5687 ;	.\ecen4350_lcd_v4.c:1133: write(input);									// Print to screen
      00172E AD 82            [24] 5688 	mov  r5,dpl
      001730 C0 05            [24] 5689 	push	ar5
      001732 12 10 73         [24] 5690 	lcall	_write
      001735 D0 05            [24] 5691 	pop	ar5
                                   5692 ;	.\ecen4350_lcd_v4.c:1134: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      001737 8D 82            [24] 5693 	mov	dpl,r5
      001739 12 14 65         [24] 5694 	lcall	_ASCIItoHex
      00173C AD 82            [24] 5695 	mov	r5,dpl
      00173E D0 06            [24] 5696 	pop	ar6
      001740 D0 07            [24] 5697 	pop	ar7
                                   5698 ;	.\ecen4350_lcd_v4.c:1135: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      001742 8D 04            [24] 5699 	mov	ar4,r5
      001744 7D 00            [12] 5700 	mov	r5,#0x00
      001746 EF               [12] 5701 	mov	a,r7
      001747 42 05            [12] 5702 	orl	ar5,a
      001749 EE               [12] 5703 	mov	a,r6
      00174A 42 04            [12] 5704 	orl	ar4,a
                                   5705 ;	.\ecen4350_lcd_v4.c:1137: input = keyDetect();
      00174C C0 05            [24] 5706 	push	ar5
      00174E C0 04            [24] 5707 	push	ar4
      001750 12 11 F7         [24] 5708 	lcall	_keyDetect
      001753 AF 82            [24] 5709 	mov	r7,dpl
      001755 D0 04            [24] 5710 	pop	ar4
      001757 D0 05            [24] 5711 	pop	ar5
                                   5712 ;	.\ecen4350_lcd_v4.c:1140: write(input);
      001759 8F 82            [24] 5713 	mov	dpl,r7
      00175B C0 07            [24] 5714 	push	ar7
      00175D C0 05            [24] 5715 	push	ar5
      00175F C0 04            [24] 5716 	push	ar4
      001761 12 10 73         [24] 5717 	lcall	_write
      001764 D0 04            [24] 5718 	pop	ar4
      001766 D0 05            [24] 5719 	pop	ar5
      001768 D0 07            [24] 5720 	pop	ar7
                                   5721 ;	.\ecen4350_lcd_v4.c:1141: input = ASCIItoHex(input);
      00176A 8F 82            [24] 5722 	mov	dpl,r7
      00176C C0 05            [24] 5723 	push	ar5
      00176E C0 04            [24] 5724 	push	ar4
      001770 12 14 65         [24] 5725 	lcall	_ASCIItoHex
      001773 AF 82            [24] 5726 	mov	r7,dpl
      001775 D0 04            [24] 5727 	pop	ar4
      001777 D0 05            [24] 5728 	pop	ar5
                                   5729 ;	.\ecen4350_lcd_v4.c:1142: address |= (int) input * 16;					// *0x0010
      001779 E4               [12] 5730 	clr	a
      00177A CF               [12] 5731 	xch	a,r7
      00177B C4               [12] 5732 	swap	a
      00177C CF               [12] 5733 	xch	a,r7
      00177D 6F               [12] 5734 	xrl	a,r7
      00177E CF               [12] 5735 	xch	a,r7
      00177F 54 F0            [12] 5736 	anl	a,#0xf0
      001781 CF               [12] 5737 	xch	a,r7
      001782 6F               [12] 5738 	xrl	a,r7
      001783 FE               [12] 5739 	mov	r6,a
      001784 ED               [12] 5740 	mov	a,r5
      001785 42 07            [12] 5741 	orl	ar7,a
      001787 EC               [12] 5742 	mov	a,r4
      001788 42 06            [12] 5743 	orl	ar6,a
                                   5744 ;	.\ecen4350_lcd_v4.c:1144: input = keyDetect();
      00178A C0 07            [24] 5745 	push	ar7
      00178C C0 06            [24] 5746 	push	ar6
      00178E 12 11 F7         [24] 5747 	lcall	_keyDetect
                                   5748 ;	.\ecen4350_lcd_v4.c:1147: write(input);
      001791 AD 82            [24] 5749 	mov  r5,dpl
      001793 C0 05            [24] 5750 	push	ar5
      001795 12 10 73         [24] 5751 	lcall	_write
      001798 D0 05            [24] 5752 	pop	ar5
                                   5753 ;	.\ecen4350_lcd_v4.c:1148: input = ASCIItoHex(input);
      00179A 8D 82            [24] 5754 	mov	dpl,r5
      00179C 12 14 65         [24] 5755 	lcall	_ASCIItoHex
      00179F AD 82            [24] 5756 	mov	r5,dpl
      0017A1 D0 06            [24] 5757 	pop	ar6
      0017A3 D0 07            [24] 5758 	pop	ar7
                                   5759 ;	.\ecen4350_lcd_v4.c:1149: address |= (int) input;							// *0x0001
      0017A5 7C 00            [12] 5760 	mov	r4,#0x00
      0017A7 ED               [12] 5761 	mov	a,r5
      0017A8 4F               [12] 5762 	orl	a,r7
      0017A9 F5 82            [12] 5763 	mov	dpl,a
      0017AB EC               [12] 5764 	mov	a,r4
      0017AC 4E               [12] 5765 	orl	a,r6
      0017AD F5 83            [12] 5766 	mov	dph,a
                                   5767 ;	.\ecen4350_lcd_v4.c:1152: return address;									// yeet
                                   5768 ;	.\ecen4350_lcd_v4.c:1153: }
      0017AF 22               [24] 5769 	ret
                                   5770 ;------------------------------------------------------------
                                   5771 ;Allocation info for local variables in function 'inputBlockType'
                                   5772 ;------------------------------------------------------------
                                   5773 ;blockType                 Allocated to registers 
                                   5774 ;invalidType               Allocated to registers 
                                   5775 ;------------------------------------------------------------
                                   5776 ;	.\ecen4350_lcd_v4.c:1155: unsigned char inputBlockType() {
                                   5777 ;	-----------------------------------------
                                   5778 ;	 function inputBlockType
                                   5779 ;	-----------------------------------------
      0017B0                       5780 _inputBlockType:
                                   5781 ;	.\ecen4350_lcd_v4.c:1161: selection = keyDetect();
      0017B0 12 11 F7         [24] 5782 	lcall	_keyDetect
      0017B3 AF 82            [24] 5783 	mov	r7,dpl
      0017B5 78 71            [12] 5784 	mov	r0,#_selection
      0017B7 A6 07            [24] 5785 	mov	@r0,ar7
                                   5786 ;	.\ecen4350_lcd_v4.c:1162: blockType = ASCIItoHex(selection);
      0017B9 8F 82            [24] 5787 	mov	dpl,r7
                                   5788 ;	.\ecen4350_lcd_v4.c:1177: return blockType;
                                   5789 ;	.\ecen4350_lcd_v4.c:1178: }
      0017BB 02 14 65         [24] 5790 	ljmp	_ASCIItoHex
                                   5791 ;------------------------------------------------------------
                                   5792 ;Allocation info for local variables in function 'inputBlockSize'
                                   5793 ;------------------------------------------------------------
                                   5794 ;blockSize                 Allocated to registers 
                                   5795 ;------------------------------------------------------------
                                   5796 ;	.\ecen4350_lcd_v4.c:1180: unsigned char inputBlockSize() {
                                   5797 ;	-----------------------------------------
                                   5798 ;	 function inputBlockSize
                                   5799 ;	-----------------------------------------
      0017BE                       5800 _inputBlockSize:
                                   5801 ;	.\ecen4350_lcd_v4.c:1183: selection = keyDetect();
      0017BE 12 11 F7         [24] 5802 	lcall	_keyDetect
      0017C1 AF 82            [24] 5803 	mov	r7,dpl
      0017C3 78 71            [12] 5804 	mov	r0,#_selection
      0017C5 A6 07            [24] 5805 	mov	@r0,ar7
                                   5806 ;	.\ecen4350_lcd_v4.c:1184: write(selection);
      0017C7 8F 82            [24] 5807 	mov	dpl,r7
      0017C9 12 10 73         [24] 5808 	lcall	_write
                                   5809 ;	.\ecen4350_lcd_v4.c:1185: selection = ASCIItoHex(selection);
      0017CC 78 71            [12] 5810 	mov	r0,#_selection
      0017CE 86 82            [24] 5811 	mov	dpl,@r0
      0017D0 12 14 65         [24] 5812 	lcall	_ASCIItoHex
      0017D3 AF 82            [24] 5813 	mov	r7,dpl
      0017D5 78 71            [12] 5814 	mov	r0,#_selection
      0017D7 A6 07            [24] 5815 	mov	@r0,ar7
                                   5816 ;	.\ecen4350_lcd_v4.c:1186: blockSize |= selection * 16;
      0017D9 EF               [12] 5817 	mov	a,r7
      0017DA C4               [12] 5818 	swap	a
      0017DB 54 F0            [12] 5819 	anl	a,#0xf0
      0017DD FF               [12] 5820 	mov	r7,a
                                   5821 ;	.\ecen4350_lcd_v4.c:1187: selection = keyDetect();
      0017DE C0 07            [24] 5822 	push	ar7
      0017E0 12 11 F7         [24] 5823 	lcall	_keyDetect
      0017E3 AE 82            [24] 5824 	mov	r6,dpl
      0017E5 78 71            [12] 5825 	mov	r0,#_selection
      0017E7 A6 06            [24] 5826 	mov	@r0,ar6
                                   5827 ;	.\ecen4350_lcd_v4.c:1188: write(selection);
      0017E9 8E 82            [24] 5828 	mov	dpl,r6
      0017EB 12 10 73         [24] 5829 	lcall	_write
                                   5830 ;	.\ecen4350_lcd_v4.c:1189: selection = ASCIItoHex(selection);
      0017EE 78 71            [12] 5831 	mov	r0,#_selection
      0017F0 86 82            [24] 5832 	mov	dpl,@r0
      0017F2 12 14 65         [24] 5833 	lcall	_ASCIItoHex
      0017F5 AE 82            [24] 5834 	mov	r6,dpl
      0017F7 D0 07            [24] 5835 	pop	ar7
      0017F9 78 71            [12] 5836 	mov	r0,#_selection
      0017FB A6 06            [24] 5837 	mov	@r0,ar6
                                   5838 ;	.\ecen4350_lcd_v4.c:1190: blockSize |= selection;
      0017FD EE               [12] 5839 	mov	a,r6
      0017FE 4F               [12] 5840 	orl	a,r7
      0017FF F5 82            [12] 5841 	mov	dpl,a
                                   5842 ;	.\ecen4350_lcd_v4.c:1191: return blockSize;
                                   5843 ;	.\ecen4350_lcd_v4.c:1192: }
      001801 22               [24] 5844 	ret
                                   5845 ;------------------------------------------------------------
                                   5846 ;Allocation info for local variables in function 'printMenu'
                                   5847 ;------------------------------------------------------------
                                   5848 ;	.\ecen4350_lcd_v4.c:1195: void printMenu() {
                                   5849 ;	-----------------------------------------
                                   5850 ;	 function printMenu
                                   5851 ;	-----------------------------------------
      001802                       5852 _printMenu:
                                   5853 ;	.\ecen4350_lcd_v4.c:1197: setCursor(0,0);
      001802 E4               [12] 5854 	clr	a
      001803 F5 6B            [12] 5855 	mov	_setCursor_PARM_2,a
      001805 F5 6C            [12] 5856 	mov	(_setCursor_PARM_2 + 1),a
      001807 90 00 00         [24] 5857 	mov	dptr,#0x0000
      00180A 12 05 BF         [24] 5858 	lcall	_setCursor
                                   5859 ;	.\ecen4350_lcd_v4.c:1198: clearLCD();
      00180D 12 0E 5C         [24] 5860 	lcall	_clearLCD
                                   5861 ;	.\ecen4350_lcd_v4.c:1201: fillTop(GRAY);
      001810 90 D6 BA         [24] 5862 	mov	dptr,#0xd6ba
      001813 12 0C 8F         [24] 5863 	lcall	_fillTop
                                   5864 ;	.\ecen4350_lcd_v4.c:1202: setTextSize(5);
      001816 75 82 05         [24] 5865 	mov	dpl,#0x05
      001819 12 05 D9         [24] 5866 	lcall	_setTextSize
                                   5867 ;	.\ecen4350_lcd_v4.c:1203: setColorMenu();
      00181C 12 16 D6         [24] 5868 	lcall	_setColorMenu
                                   5869 ;	.\ecen4350_lcd_v4.c:1204: setCursor(30, 0);
      00181F E4               [12] 5870 	clr	a
      001820 F5 6B            [12] 5871 	mov	_setCursor_PARM_2,a
      001822 F5 6C            [12] 5872 	mov	(_setCursor_PARM_2 + 1),a
      001824 90 00 1E         [24] 5873 	mov	dptr,#0x001e
      001827 12 05 BF         [24] 5874 	lcall	_setCursor
                                   5875 ;	.\ecen4350_lcd_v4.c:1205: LCD_string_write("<Menu>\n");
      00182A 90 5E 8C         [24] 5876 	mov	dptr,#___str_5
      00182D 75 F0 80         [24] 5877 	mov	b,#0x80
      001830 12 10 D9         [24] 5878 	lcall	_LCD_string_write
                                   5879 ;	.\ecen4350_lcd_v4.c:1207: setTextSize(2);
      001833 75 82 02         [24] 5880 	mov	dpl,#0x02
      001836 12 05 D9         [24] 5881 	lcall	_setTextSize
                                   5882 ;	.\ecen4350_lcd_v4.c:1209: setCursor(0, 60);
      001839 75 6B 3C         [24] 5883 	mov	_setCursor_PARM_2,#0x3c
      00183C 75 6C 00         [24] 5884 	mov	(_setCursor_PARM_2 + 1),#0x00
      00183F 90 00 00         [24] 5885 	mov	dptr,#0x0000
      001842 12 05 BF         [24] 5886 	lcall	_setCursor
                                   5887 ;	.\ecen4350_lcd_v4.c:1210: setColorWhite();
      001845 12 16 ED         [24] 5888 	lcall	_setColorWhite
                                   5889 ;	.\ecen4350_lcd_v4.c:1211: LCD_string_write(" <D>");
      001848 90 5E 94         [24] 5890 	mov	dptr,#___str_6
      00184B 75 F0 80         [24] 5891 	mov	b,#0x80
      00184E 12 10 D9         [24] 5892 	lcall	_LCD_string_write
                                   5893 ;	.\ecen4350_lcd_v4.c:1212: setColorDefault();
      001851 12 16 9D         [24] 5894 	lcall	_setColorDefault
                                   5895 ;	.\ecen4350_lcd_v4.c:1213: LCD_string_write(" DUMP\n");
      001854 90 5E 99         [24] 5896 	mov	dptr,#___str_7
      001857 75 F0 80         [24] 5897 	mov	b,#0x80
      00185A 12 10 D9         [24] 5898 	lcall	_LCD_string_write
                                   5899 ;	.\ecen4350_lcd_v4.c:1215: setCursor(120, 60);
      00185D 75 6B 3C         [24] 5900 	mov	_setCursor_PARM_2,#0x3c
      001860 75 6C 00         [24] 5901 	mov	(_setCursor_PARM_2 + 1),#0x00
      001863 90 00 78         [24] 5902 	mov	dptr,#0x0078
      001866 12 05 BF         [24] 5903 	lcall	_setCursor
                                   5904 ;	.\ecen4350_lcd_v4.c:1216: setColorWhite();
      001869 12 16 ED         [24] 5905 	lcall	_setColorWhite
                                   5906 ;	.\ecen4350_lcd_v4.c:1217: LCD_string_write(" <B>");
      00186C 90 5E A0         [24] 5907 	mov	dptr,#___str_8
      00186F 75 F0 80         [24] 5908 	mov	b,#0x80
      001872 12 10 D9         [24] 5909 	lcall	_LCD_string_write
                                   5910 ;	.\ecen4350_lcd_v4.c:1218: setColorDefault();
      001875 12 16 9D         [24] 5911 	lcall	_setColorDefault
                                   5912 ;	.\ecen4350_lcd_v4.c:1219: LCD_string_write(" MOVE\n");
      001878 90 5E A5         [24] 5913 	mov	dptr,#___str_9
      00187B 75 F0 80         [24] 5914 	mov	b,#0x80
      00187E 12 10 D9         [24] 5915 	lcall	_LCD_string_write
                                   5916 ;	.\ecen4350_lcd_v4.c:1221: setCursor(0, 100);
      001881 75 6B 64         [24] 5917 	mov	_setCursor_PARM_2,#0x64
      001884 75 6C 00         [24] 5918 	mov	(_setCursor_PARM_2 + 1),#0x00
      001887 90 00 00         [24] 5919 	mov	dptr,#0x0000
      00188A 12 05 BF         [24] 5920 	lcall	_setCursor
                                   5921 ;	.\ecen4350_lcd_v4.c:1222: setColorWhite();
      00188D 12 16 ED         [24] 5922 	lcall	_setColorWhite
                                   5923 ;	.\ecen4350_lcd_v4.c:1223: LCD_string_write(" <E>");
      001890 90 5E AC         [24] 5924 	mov	dptr,#___str_10
      001893 75 F0 80         [24] 5925 	mov	b,#0x80
      001896 12 10 D9         [24] 5926 	lcall	_LCD_string_write
                                   5927 ;	.\ecen4350_lcd_v4.c:1224: setColorDefault();
      001899 12 16 9D         [24] 5928 	lcall	_setColorDefault
                                   5929 ;	.\ecen4350_lcd_v4.c:1225: LCD_string_write(" EDIT\n");
      00189C 90 5E B1         [24] 5930 	mov	dptr,#___str_11
      00189F 75 F0 80         [24] 5931 	mov	b,#0x80
      0018A2 12 10 D9         [24] 5932 	lcall	_LCD_string_write
                                   5933 ;	.\ecen4350_lcd_v4.c:1227: setCursor(120, 100);
      0018A5 75 6B 64         [24] 5934 	mov	_setCursor_PARM_2,#0x64
      0018A8 75 6C 00         [24] 5935 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018AB 90 00 78         [24] 5936 	mov	dptr,#0x0078
      0018AE 12 05 BF         [24] 5937 	lcall	_setCursor
                                   5938 ;	.\ecen4350_lcd_v4.c:1228: setColorWhite();
      0018B1 12 16 ED         [24] 5939 	lcall	_setColorWhite
                                   5940 ;	.\ecen4350_lcd_v4.c:1229: LCD_string_write(" <F>");
      0018B4 90 5E B8         [24] 5941 	mov	dptr,#___str_12
      0018B7 75 F0 80         [24] 5942 	mov	b,#0x80
      0018BA 12 10 D9         [24] 5943 	lcall	_LCD_string_write
                                   5944 ;	.\ecen4350_lcd_v4.c:1230: setColorDefault();
      0018BD 12 16 9D         [24] 5945 	lcall	_setColorDefault
                                   5946 ;	.\ecen4350_lcd_v4.c:1231: LCD_string_write(" FIND\n");
      0018C0 90 5E BD         [24] 5947 	mov	dptr,#___str_13
      0018C3 75 F0 80         [24] 5948 	mov	b,#0x80
      0018C6 12 10 D9         [24] 5949 	lcall	_LCD_string_write
                                   5950 ;	.\ecen4350_lcd_v4.c:1233: setCursor(0, 140);
      0018C9 75 6B 8C         [24] 5951 	mov	_setCursor_PARM_2,#0x8c
      0018CC 75 6C 00         [24] 5952 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018CF 90 00 00         [24] 5953 	mov	dptr,#0x0000
      0018D2 12 05 BF         [24] 5954 	lcall	_setCursor
                                   5955 ;	.\ecen4350_lcd_v4.c:1234: setColorWhite();
      0018D5 12 16 ED         [24] 5956 	lcall	_setColorWhite
                                   5957 ;	.\ecen4350_lcd_v4.c:1235: LCD_string_write(" <C>");
      0018D8 90 5E C4         [24] 5958 	mov	dptr,#___str_14
      0018DB 75 F0 80         [24] 5959 	mov	b,#0x80
      0018DE 12 10 D9         [24] 5960 	lcall	_LCD_string_write
                                   5961 ;	.\ecen4350_lcd_v4.c:1236: setColorDefault();
      0018E1 12 16 9D         [24] 5962 	lcall	_setColorDefault
                                   5963 ;	.\ecen4350_lcd_v4.c:1237: LCD_string_write(" COUNT\n");
      0018E4 90 5E C9         [24] 5964 	mov	dptr,#___str_15
      0018E7 75 F0 80         [24] 5965 	mov	b,#0x80
      0018EA 12 10 D9         [24] 5966 	lcall	_LCD_string_write
                                   5967 ;	.\ecen4350_lcd_v4.c:1239: setCursor(0, 180);
      0018ED 75 6B B4         [24] 5968 	mov	_setCursor_PARM_2,#0xb4
      0018F0 75 6C 00         [24] 5969 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018F3 90 00 00         [24] 5970 	mov	dptr,#0x0000
      0018F6 12 05 BF         [24] 5971 	lcall	_setCursor
                                   5972 ;	.\ecen4350_lcd_v4.c:1240: setColorWhite();
      0018F9 12 16 ED         [24] 5973 	lcall	_setColorWhite
                                   5974 ;	.\ecen4350_lcd_v4.c:1241: LCD_string_write(" <A>");
      0018FC 90 5E D1         [24] 5975 	mov	dptr,#___str_16
      0018FF 75 F0 80         [24] 5976 	mov	b,#0x80
      001902 12 10 D9         [24] 5977 	lcall	_LCD_string_write
                                   5978 ;	.\ecen4350_lcd_v4.c:1242: setColorDefault();
      001905 12 16 9D         [24] 5979 	lcall	_setColorDefault
                                   5980 ;	.\ecen4350_lcd_v4.c:1243: LCD_string_write(" MEM CHECK\n");
      001908 90 5E D6         [24] 5981 	mov	dptr,#___str_17
      00190B 75 F0 80         [24] 5982 	mov	b,#0x80
      00190E 12 10 D9         [24] 5983 	lcall	_LCD_string_write
                                   5984 ;	.\ecen4350_lcd_v4.c:1245: setCursor(0, 220);
      001911 75 6B DC         [24] 5985 	mov	_setCursor_PARM_2,#0xdc
      001914 75 6C 00         [24] 5986 	mov	(_setCursor_PARM_2 + 1),#0x00
      001917 90 00 00         [24] 5987 	mov	dptr,#0x0000
      00191A 12 05 BF         [24] 5988 	lcall	_setCursor
                                   5989 ;	.\ecen4350_lcd_v4.c:1246: setColorWhite();
      00191D 12 16 ED         [24] 5990 	lcall	_setColorWhite
                                   5991 ;	.\ecen4350_lcd_v4.c:1247: LCD_string_write(" <1>");
      001920 90 5E E2         [24] 5992 	mov	dptr,#___str_18
      001923 75 F0 80         [24] 5993 	mov	b,#0x80
      001926 12 10 D9         [24] 5994 	lcall	_LCD_string_write
                                   5995 ;	.\ecen4350_lcd_v4.c:1248: setColorDefault();
      001929 12 16 9D         [24] 5996 	lcall	_setColorDefault
                                   5997 ;	.\ecen4350_lcd_v4.c:1249: LCD_string_write(" UART");
      00192C 90 5E E7         [24] 5998 	mov	dptr,#___str_19
      00192F 75 F0 80         [24] 5999 	mov	b,#0x80
      001932 12 10 D9         [24] 6000 	lcall	_LCD_string_write
                                   6001 ;	.\ecen4350_lcd_v4.c:1250: setTextSize(1);
      001935 75 82 01         [24] 6002 	mov	dpl,#0x01
      001938 12 05 D9         [24] 6003 	lcall	_setTextSize
                                   6004 ;	.\ecen4350_lcd_v4.c:1251: if (UART_en == 0) {
      00193B 78 72            [12] 6005 	mov	r0,#_UART_en
      00193D E6               [12] 6006 	mov	a,@r0
      00193E 70 09            [24] 6007 	jnz	00102$
                                   6008 ;	.\ecen4350_lcd_v4.c:1252: LCD_string_write(" [Disabled]\n");
      001940 90 5E ED         [24] 6009 	mov	dptr,#___str_20
      001943 75 F0 80         [24] 6010 	mov	b,#0x80
      001946 12 10 D9         [24] 6011 	lcall	_LCD_string_write
      001949                       6012 00102$:
                                   6013 ;	.\ecen4350_lcd_v4.c:1253: } if (UART_en == 1) {
      001949 78 72            [12] 6014 	mov	r0,#_UART_en
      00194B B6 01 09         [24] 6015 	cjne	@r0,#0x01,00104$
                                   6016 ;	.\ecen4350_lcd_v4.c:1254: LCD_string_write(" [Enabled]\n");
      00194E 90 5E FA         [24] 6017 	mov	dptr,#___str_21
      001951 75 F0 80         [24] 6018 	mov	b,#0x80
      001954 12 10 D9         [24] 6019 	lcall	_LCD_string_write
      001957                       6020 00104$:
                                   6021 ;	.\ecen4350_lcd_v4.c:1256: setTextSize(2);
      001957 75 82 02         [24] 6022 	mov	dpl,#0x02
                                   6023 ;	.\ecen4350_lcd_v4.c:1257: return;
                                   6024 ;	.\ecen4350_lcd_v4.c:1258: }
      00195A 02 05 D9         [24] 6025 	ljmp	_setTextSize
                                   6026 ;------------------------------------------------------------
                                   6027 ;Allocation info for local variables in function 'dump'
                                   6028 ;------------------------------------------------------------
                                   6029 ;d                         Allocated with name '_dump_d_65536_553'
                                   6030 ;__2621440106              Allocated to registers 
                                   6031 ;__2621440103              Allocated to registers 
                                   6032 ;__2621440104              Allocated to registers 
                                   6033 ;map_address               Allocated to registers 
                                   6034 ;d                         Allocated to registers 
                                   6035 ;__2621440107              Allocated to registers 
                                   6036 ;map_address               Allocated to registers 
                                   6037 ;d                         Allocated to registers 
                                   6038 ;__2621440118              Allocated to registers 
                                   6039 ;__2621440115              Allocated to registers 
                                   6040 ;__2621440112              Allocated to registers 
                                   6041 ;__2621440109              Allocated to registers 
                                   6042 ;__2621440110              Allocated to registers 
                                   6043 ;map_address               Allocated to registers 
                                   6044 ;d                         Allocated to registers 
                                   6045 ;__2621440113              Allocated to registers 
                                   6046 ;map_address               Allocated to registers 
                                   6047 ;d                         Allocated to registers 
                                   6048 ;__2621440116              Allocated to registers 
                                   6049 ;map_address               Allocated to registers 
                                   6050 ;d                         Allocated to registers 
                                   6051 ;__2621440119              Allocated to registers 
                                   6052 ;map_address               Allocated to registers 
                                   6053 ;d                         Allocated to registers 
                                   6054 ;__2621440142              Allocated to registers 
                                   6055 ;__2621440139              Allocated to registers 
                                   6056 ;__2621440136              Allocated to registers 
                                   6057 ;__2621440133              Allocated to registers 
                                   6058 ;__2621440130              Allocated to registers 
                                   6059 ;__2621440127              Allocated to registers 
                                   6060 ;__2621440124              Allocated to registers 
                                   6061 ;__2621440121              Allocated to registers 
                                   6062 ;__2621440122              Allocated to registers 
                                   6063 ;map_address               Allocated to registers 
                                   6064 ;d                         Allocated to registers 
                                   6065 ;__2621440125              Allocated to registers 
                                   6066 ;map_address               Allocated to registers 
                                   6067 ;d                         Allocated to registers 
                                   6068 ;__2621440128              Allocated to registers 
                                   6069 ;map_address               Allocated to registers 
                                   6070 ;d                         Allocated to registers 
                                   6071 ;__2621440131              Allocated to registers 
                                   6072 ;map_address               Allocated to registers 
                                   6073 ;d                         Allocated to registers r3 
                                   6074 ;__2621440134              Allocated to registers 
                                   6075 ;map_address               Allocated to registers 
                                   6076 ;d                         Allocated to registers 
                                   6077 ;__2621440137              Allocated to registers 
                                   6078 ;map_address               Allocated to registers 
                                   6079 ;d                         Allocated to registers 
                                   6080 ;__2621440140              Allocated to registers 
                                   6081 ;map_address               Allocated to registers 
                                   6082 ;d                         Allocated to registers 
                                   6083 ;__2621440143              Allocated to registers 
                                   6084 ;map_address               Allocated to registers 
                                   6085 ;d                         Allocated to registers 
                                   6086 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   6087 ;address                   Allocated with name '_dump_address_65536_553'
                                   6088 ;blockSize                 Allocated to registers r5 
                                   6089 ;blockType                 Allocated to registers r7 
                                   6090 ;exit                      Allocated with name '_dump_exit_65536_553'
                                   6091 ;invalidType               Allocated to registers r5 
                                   6092 ;invalidSize               Allocated to registers r3 
                                   6093 ;------------------------------------------------------------
                                   6094 ;	.\ecen4350_lcd_v4.c:1260: void dump()
                                   6095 ;	-----------------------------------------
                                   6096 ;	 function dump
                                   6097 ;	-----------------------------------------
      00195D                       6098 _dump:
                                   6099 ;	.\ecen4350_lcd_v4.c:1265: __idata unsigned char blockType = 0;
      00195D 7F 00            [12] 6100 	mov	r7,#0x00
                                   6101 ;	.\ecen4350_lcd_v4.c:1266: __idata unsigned char exit = 1;
      00195F 78 81            [12] 6102 	mov	r0,#_dump_exit_65536_553
      001961 76 01            [12] 6103 	mov	@r0,#0x01
                                   6104 ;	.\ecen4350_lcd_v4.c:1267: __idata unsigned char invalidType = 1;
      001963 7D 01            [12] 6105 	mov	r5,#0x01
                                   6106 ;	.\ecen4350_lcd_v4.c:1268: __idata unsigned char invalidSize = 1;
      001965 7B 01            [12] 6107 	mov	r3,#0x01
                                   6108 ;	.\ecen4350_lcd_v4.c:1270: clearLCD();
      001967 C0 07            [24] 6109 	push	ar7
      001969 C0 05            [24] 6110 	push	ar5
      00196B C0 03            [24] 6111 	push	ar3
      00196D 12 0E 5C         [24] 6112 	lcall	_clearLCD
                                   6113 ;	.\ecen4350_lcd_v4.c:1273: fillTop(GRAY);
      001970 90 D6 BA         [24] 6114 	mov	dptr,#0xd6ba
      001973 12 0C 8F         [24] 6115 	lcall	_fillTop
                                   6116 ;	.\ecen4350_lcd_v4.c:1274: setTextSize(5);
      001976 75 82 05         [24] 6117 	mov	dpl,#0x05
      001979 12 05 D9         [24] 6118 	lcall	_setTextSize
                                   6119 ;	.\ecen4350_lcd_v4.c:1275: setColorMenu();
      00197C 12 16 D6         [24] 6120 	lcall	_setColorMenu
                                   6121 ;	.\ecen4350_lcd_v4.c:1276: setCursor(30, 0);
      00197F E4               [12] 6122 	clr	a
      001980 F5 6B            [12] 6123 	mov	_setCursor_PARM_2,a
      001982 F5 6C            [12] 6124 	mov	(_setCursor_PARM_2 + 1),a
      001984 90 00 1E         [24] 6125 	mov	dptr,#0x001e
      001987 12 05 BF         [24] 6126 	lcall	_setCursor
                                   6127 ;	.\ecen4350_lcd_v4.c:1277: LCD_string_write("[DUMP]\n");
      00198A 90 5F 06         [24] 6128 	mov	dptr,#___str_22
      00198D 75 F0 80         [24] 6129 	mov	b,#0x80
      001990 12 10 D9         [24] 6130 	lcall	_LCD_string_write
                                   6131 ;	.\ecen4350_lcd_v4.c:1278: setColorDefault();
      001993 12 16 9D         [24] 6132 	lcall	_setColorDefault
                                   6133 ;	.\ecen4350_lcd_v4.c:1279: setTextSize(2);
      001996 75 82 02         [24] 6134 	mov	dpl,#0x02
      001999 12 05 D9         [24] 6135 	lcall	_setTextSize
                                   6136 ;	.\ecen4350_lcd_v4.c:1280: setCursor(0, 60);
      00199C 75 6B 3C         [24] 6137 	mov	_setCursor_PARM_2,#0x3c
      00199F 75 6C 00         [24] 6138 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019A2 90 00 00         [24] 6139 	mov	dptr,#0x0000
      0019A5 12 05 BF         [24] 6140 	lcall	_setCursor
                                   6141 ;	.\ecen4350_lcd_v4.c:1281: LCD_string_write(" Address Location:\n");
      0019A8 90 5F 0E         [24] 6142 	mov	dptr,#___str_23
      0019AB 75 F0 80         [24] 6143 	mov	b,#0x80
      0019AE 12 10 D9         [24] 6144 	lcall	_LCD_string_write
                                   6145 ;	.\ecen4350_lcd_v4.c:1282: setCursor(0, 80);
      0019B1 75 6B 50         [24] 6146 	mov	_setCursor_PARM_2,#0x50
      0019B4 75 6C 00         [24] 6147 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019B7 90 00 00         [24] 6148 	mov	dptr,#0x0000
      0019BA 12 05 BF         [24] 6149 	lcall	_setCursor
                                   6150 ;	.\ecen4350_lcd_v4.c:1283: setColorGray();
      0019BD 12 16 CB         [24] 6151 	lcall	_setColorGray
                                   6152 ;	.\ecen4350_lcd_v4.c:1284: LCD_string_write(" 0x____");
      0019C0 90 5F 22         [24] 6153 	mov	dptr,#___str_24
      0019C3 75 F0 80         [24] 6154 	mov	b,#0x80
      0019C6 12 10 D9         [24] 6155 	lcall	_LCD_string_write
                                   6156 ;	.\ecen4350_lcd_v4.c:1285: setColorDefault();
      0019C9 12 16 9D         [24] 6157 	lcall	_setColorDefault
                                   6158 ;	.\ecen4350_lcd_v4.c:1286: setCursor(0, 140);
      0019CC 75 6B 8C         [24] 6159 	mov	_setCursor_PARM_2,#0x8c
      0019CF 75 6C 00         [24] 6160 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019D2 90 00 00         [24] 6161 	mov	dptr,#0x0000
      0019D5 12 05 BF         [24] 6162 	lcall	_setCursor
                                   6163 ;	.\ecen4350_lcd_v4.c:1287: LCD_string_write(" Choose Block Type:\n");
      0019D8 90 5F 2A         [24] 6164 	mov	dptr,#___str_25
      0019DB 75 F0 80         [24] 6165 	mov	b,#0x80
      0019DE 12 10 D9         [24] 6166 	lcall	_LCD_string_write
                                   6167 ;	.\ecen4350_lcd_v4.c:1288: setCursor(0, 160); 
      0019E1 75 6B A0         [24] 6168 	mov	_setCursor_PARM_2,#0xa0
      0019E4 75 6C 00         [24] 6169 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019E7 90 00 00         [24] 6170 	mov	dptr,#0x0000
      0019EA 12 05 BF         [24] 6171 	lcall	_setCursor
                                   6172 ;	.\ecen4350_lcd_v4.c:1289: setColorGray();
      0019ED 12 16 CB         [24] 6173 	lcall	_setColorGray
                                   6174 ;	.\ecen4350_lcd_v4.c:1290: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0019F0 90 5F 3F         [24] 6175 	mov	dptr,#___str_26
      0019F3 75 F0 80         [24] 6176 	mov	b,#0x80
      0019F6 12 10 D9         [24] 6177 	lcall	_LCD_string_write
                                   6178 ;	.\ecen4350_lcd_v4.c:1291: setCursor(0, 240);
      0019F9 75 6B F0         [24] 6179 	mov	_setCursor_PARM_2,#0xf0
      0019FC 75 6C 00         [24] 6180 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019FF 90 00 00         [24] 6181 	mov	dptr,#0x0000
      001A02 12 05 BF         [24] 6182 	lcall	_setCursor
                                   6183 ;	.\ecen4350_lcd_v4.c:1292: LCD_string_write(" Input Size:");
      001A05 90 5F 61         [24] 6184 	mov	dptr,#___str_27
      001A08 75 F0 80         [24] 6185 	mov	b,#0x80
      001A0B 12 10 D9         [24] 6186 	lcall	_LCD_string_write
                                   6187 ;	.\ecen4350_lcd_v4.c:1293: setColorGray();
      001A0E 12 16 CB         [24] 6188 	lcall	_setColorGray
                                   6189 ;	.\ecen4350_lcd_v4.c:1294: LCD_string_write(" _");
      001A11 90 5F 6E         [24] 6190 	mov	dptr,#___str_28
      001A14 75 F0 80         [24] 6191 	mov	b,#0x80
      001A17 12 10 D9         [24] 6192 	lcall	_LCD_string_write
                                   6193 ;	.\ecen4350_lcd_v4.c:1301: setColorSelect();
      001A1A 12 16 A8         [24] 6194 	lcall	_setColorSelect
                                   6195 ;	.\ecen4350_lcd_v4.c:1302: setCursor(0, 60);
      001A1D 75 6B 3C         [24] 6196 	mov	_setCursor_PARM_2,#0x3c
      001A20 75 6C 00         [24] 6197 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A23 90 00 00         [24] 6198 	mov	dptr,#0x0000
      001A26 12 05 BF         [24] 6199 	lcall	_setCursor
                                   6200 ;	.\ecen4350_lcd_v4.c:1303: LCD_string_write(" Address Location:");
      001A29 90 5F 71         [24] 6201 	mov	dptr,#___str_29
      001A2C 75 F0 80         [24] 6202 	mov	b,#0x80
      001A2F 12 10 D9         [24] 6203 	lcall	_LCD_string_write
                                   6204 ;	.\ecen4350_lcd_v4.c:1304: setCursor(0, 80);
      001A32 75 6B 50         [24] 6205 	mov	_setCursor_PARM_2,#0x50
      001A35 75 6C 00         [24] 6206 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A38 90 00 00         [24] 6207 	mov	dptr,#0x0000
      001A3B 12 05 BF         [24] 6208 	lcall	_setCursor
                                   6209 ;	.\ecen4350_lcd_v4.c:1305: LCD_string_write(" ");
      001A3E 90 5F 84         [24] 6210 	mov	dptr,#___str_30
      001A41 75 F0 80         [24] 6211 	mov	b,#0x80
      001A44 12 10 D9         [24] 6212 	lcall	_LCD_string_write
                                   6213 ;	.\ecen4350_lcd_v4.c:1306: setColorHighlight1();
      001A47 12 16 B3         [24] 6214 	lcall	_setColorHighlight1
                                   6215 ;	.\ecen4350_lcd_v4.c:1307: LCD_string_write("0x");
      001A4A 90 5E 59         [24] 6216 	mov	dptr,#___str_2
      001A4D 75 F0 80         [24] 6217 	mov	b,#0x80
      001A50 12 10 D9         [24] 6218 	lcall	_LCD_string_write
                                   6219 ;	.\ecen4350_lcd_v4.c:1308: address = inputAddress();				// input 16-bit address and store in memory
      001A53 12 17 0E         [24] 6220 	lcall	_inputAddress
      001A56 78 7F            [12] 6221 	mov	r0,#_dump_address_65536_553
      001A58 A6 82            [24] 6222 	mov	@r0,dpl
      001A5A 08               [12] 6223 	inc	r0
      001A5B A6 83            [24] 6224 	mov	@r0,dph
      001A5D D0 03            [24] 6225 	pop	ar3
      001A5F D0 05            [24] 6226 	pop	ar5
                                   6227 ;	.\ecen4350_lcd_v4.c:1309: d = (unsigned char __xdata *)(address);
      001A61 78 7F            [12] 6228 	mov	r0,#_dump_address_65536_553
      001A63 86 04            [24] 6229 	mov	ar4,@r0
      001A65 08               [12] 6230 	inc	r0
      001A66 86 06            [24] 6231 	mov	ar6,@r0
                                   6232 ;	.\ecen4350_lcd_v4.c:1312: setColorDefault();
      001A68 C0 06            [24] 6233 	push	ar6
      001A6A C0 05            [24] 6234 	push	ar5
      001A6C C0 04            [24] 6235 	push	ar4
      001A6E C0 03            [24] 6236 	push	ar3
      001A70 12 16 9D         [24] 6237 	lcall	_setColorDefault
                                   6238 ;	.\ecen4350_lcd_v4.c:1313: setCursor(0, 60);
      001A73 75 6B 3C         [24] 6239 	mov	_setCursor_PARM_2,#0x3c
      001A76 75 6C 00         [24] 6240 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A79 90 00 00         [24] 6241 	mov	dptr,#0x0000
      001A7C 12 05 BF         [24] 6242 	lcall	_setCursor
                                   6243 ;	.\ecen4350_lcd_v4.c:1314: LCD_string_write(" Address Location:");
      001A7F 90 5F 71         [24] 6244 	mov	dptr,#___str_29
      001A82 75 F0 80         [24] 6245 	mov	b,#0x80
      001A85 12 10 D9         [24] 6246 	lcall	_LCD_string_write
                                   6247 ;	.\ecen4350_lcd_v4.c:1315: setCursor(0, 80);
      001A88 75 6B 50         [24] 6248 	mov	_setCursor_PARM_2,#0x50
      001A8B 75 6C 00         [24] 6249 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A8E 90 00 00         [24] 6250 	mov	dptr,#0x0000
      001A91 12 05 BF         [24] 6251 	lcall	_setCursor
                                   6252 ;	.\ecen4350_lcd_v4.c:1316: LCD_string_write(" ");
      001A94 90 5F 84         [24] 6253 	mov	dptr,#___str_30
      001A97 75 F0 80         [24] 6254 	mov	b,#0x80
      001A9A 12 10 D9         [24] 6255 	lcall	_LCD_string_write
                                   6256 ;	.\ecen4350_lcd_v4.c:1317: setColorHighlight2();
      001A9D 12 16 BF         [24] 6257 	lcall	_setColorHighlight2
                                   6258 ;	.\ecen4350_lcd_v4.c:1318: LCD_string_write("0x");
      001AA0 90 5E 59         [24] 6259 	mov	dptr,#___str_2
      001AA3 75 F0 80         [24] 6260 	mov	b,#0x80
      001AA6 12 10 D9         [24] 6261 	lcall	_LCD_string_write
                                   6262 ;	.\ecen4350_lcd_v4.c:1319: print16Hex(address);					// print 16-bit address from stored memory
      001AA9 78 7F            [12] 6263 	mov	r0,#_dump_address_65536_553
      001AAB 86 82            [24] 6264 	mov	dpl,@r0
      001AAD 08               [12] 6265 	inc	r0
      001AAE 86 83            [24] 6266 	mov	dph,@r0
      001AB0 12 15 C1         [24] 6267 	lcall	_print16Hex
                                   6268 ;	.\ecen4350_lcd_v4.c:1322: setColorSelect();
      001AB3 12 16 A8         [24] 6269 	lcall	_setColorSelect
                                   6270 ;	.\ecen4350_lcd_v4.c:1323: setCursor(0, 140);
      001AB6 75 6B 8C         [24] 6271 	mov	_setCursor_PARM_2,#0x8c
      001AB9 75 6C 00         [24] 6272 	mov	(_setCursor_PARM_2 + 1),#0x00
      001ABC 90 00 00         [24] 6273 	mov	dptr,#0x0000
      001ABF 12 05 BF         [24] 6274 	lcall	_setCursor
                                   6275 ;	.\ecen4350_lcd_v4.c:1324: LCD_string_write(" Choose Block Type:");
      001AC2 90 5F 86         [24] 6276 	mov	dptr,#___str_31
      001AC5 75 F0 80         [24] 6277 	mov	b,#0x80
      001AC8 12 10 D9         [24] 6278 	lcall	_LCD_string_write
                                   6279 ;	.\ecen4350_lcd_v4.c:1325: setCursor(0, 160); 
      001ACB 75 6B A0         [24] 6280 	mov	_setCursor_PARM_2,#0xa0
      001ACE 75 6C 00         [24] 6281 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AD1 90 00 00         [24] 6282 	mov	dptr,#0x0000
      001AD4 12 05 BF         [24] 6283 	lcall	_setCursor
                                   6284 ;	.\ecen4350_lcd_v4.c:1326: setColorWhite();
      001AD7 12 16 ED         [24] 6285 	lcall	_setColorWhite
                                   6286 ;	.\ecen4350_lcd_v4.c:1327: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001ADA 90 5F 3F         [24] 6287 	mov	dptr,#___str_26
      001ADD 75 F0 80         [24] 6288 	mov	b,#0x80
      001AE0 12 10 D9         [24] 6289 	lcall	_LCD_string_write
      001AE3 D0 03            [24] 6290 	pop	ar3
      001AE5 D0 04            [24] 6291 	pop	ar4
      001AE7 D0 05            [24] 6292 	pop	ar5
      001AE9 D0 06            [24] 6293 	pop	ar6
      001AEB D0 07            [24] 6294 	pop	ar7
                                   6295 ;	.\ecen4350_lcd_v4.c:1330: while (invalidType) {
      001AED                       6296 00109$:
      001AED ED               [12] 6297 	mov	a,r5
      001AEE 70 03            [24] 6298 	jnz	00235$
      001AF0 02 1C 69         [24] 6299 	ljmp	00153$
      001AF3                       6300 00235$:
                                   6301 ;	.\ecen4350_lcd_v4.c:1331: setCursor(0, 160);
      001AF3 75 6B A0         [24] 6302 	mov	_setCursor_PARM_2,#0xa0
      001AF6 75 6C 00         [24] 6303 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AF9 90 00 00         [24] 6304 	mov	dptr,#0x0000
      001AFC C0 06            [24] 6305 	push	ar6
      001AFE C0 05            [24] 6306 	push	ar5
      001B00 C0 04            [24] 6307 	push	ar4
      001B02 C0 03            [24] 6308 	push	ar3
      001B04 12 05 BF         [24] 6309 	lcall	_setCursor
                                   6310 ;	.\ecen4350_lcd_v4.c:1332: setColorWhite();
      001B07 12 16 ED         [24] 6311 	lcall	_setColorWhite
                                   6312 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write("\n\n");
      001B0A 90 5F 9A         [24] 6313 	mov	dptr,#___str_32
      001B0D 75 F0 80         [24] 6314 	mov	b,#0x80
      001B10 12 10 D9         [24] 6315 	lcall	_LCD_string_write
                                   6316 ;	.\ecen4350_lcd_v4.c:1335: blockType = inputBlockType();
      001B13 12 17 B0         [24] 6317 	lcall	_inputBlockType
      001B16 AF 82            [24] 6318 	mov	r7,dpl
      001B18 D0 03            [24] 6319 	pop	ar3
      001B1A D0 04            [24] 6320 	pop	ar4
      001B1C D0 05            [24] 6321 	pop	ar5
      001B1E D0 06            [24] 6322 	pop	ar6
                                   6323 ;	.\ecen4350_lcd_v4.c:1337: if (blockType == 0x1) {
      001B20 BF 01 5B         [24] 6324 	cjne	r7,#0x01,00102$
                                   6325 ;	.\ecen4350_lcd_v4.c:1338: invalidType = 0;
      001B23 7D 00            [12] 6326 	mov	r5,#0x00
                                   6327 ;	.\ecen4350_lcd_v4.c:1340: setColorDefault();
      001B25 C0 07            [24] 6328 	push	ar7
      001B27 C0 06            [24] 6329 	push	ar6
      001B29 C0 05            [24] 6330 	push	ar5
      001B2B C0 04            [24] 6331 	push	ar4
      001B2D C0 03            [24] 6332 	push	ar3
      001B2F 12 16 9D         [24] 6333 	lcall	_setColorDefault
                                   6334 ;	.\ecen4350_lcd_v4.c:1341: setCursor(0, 140);
      001B32 75 6B 8C         [24] 6335 	mov	_setCursor_PARM_2,#0x8c
      001B35 75 6C 00         [24] 6336 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B38 90 00 00         [24] 6337 	mov	dptr,#0x0000
      001B3B 12 05 BF         [24] 6338 	lcall	_setCursor
                                   6339 ;	.\ecen4350_lcd_v4.c:1342: LCD_string_write(" Choose Block Type:");
      001B3E 90 5F 86         [24] 6340 	mov	dptr,#___str_31
      001B41 75 F0 80         [24] 6341 	mov	b,#0x80
      001B44 12 10 D9         [24] 6342 	lcall	_LCD_string_write
                                   6343 ;	.\ecen4350_lcd_v4.c:1343: setCursor(0, 160);
      001B47 75 6B A0         [24] 6344 	mov	_setCursor_PARM_2,#0xa0
      001B4A 75 6C 00         [24] 6345 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B4D 90 00 00         [24] 6346 	mov	dptr,#0x0000
      001B50 12 05 BF         [24] 6347 	lcall	_setCursor
                                   6348 ;	.\ecen4350_lcd_v4.c:1344: LCD_string_write("  ");
      001B53 90 5F 9D         [24] 6349 	mov	dptr,#___str_33
      001B56 75 F0 80         [24] 6350 	mov	b,#0x80
      001B59 12 10 D9         [24] 6351 	lcall	_LCD_string_write
                                   6352 ;	.\ecen4350_lcd_v4.c:1345: setColorHighlight2();
      001B5C 12 16 BF         [24] 6353 	lcall	_setColorHighlight2
                                   6354 ;	.\ecen4350_lcd_v4.c:1346: LCD_string_write("<1> BYTE\n");
      001B5F 90 5F A0         [24] 6355 	mov	dptr,#___str_34
      001B62 75 F0 80         [24] 6356 	mov	b,#0x80
      001B65 12 10 D9         [24] 6357 	lcall	_LCD_string_write
                                   6358 ;	.\ecen4350_lcd_v4.c:1347: setColorGray();
      001B68 12 16 CB         [24] 6359 	lcall	_setColorGray
                                   6360 ;	.\ecen4350_lcd_v4.c:1348: LCD_string_write("\n\n                \n                ");
      001B6B 90 5F AA         [24] 6361 	mov	dptr,#___str_35
      001B6E 75 F0 80         [24] 6362 	mov	b,#0x80
      001B71 12 10 D9         [24] 6363 	lcall	_LCD_string_write
      001B74 D0 03            [24] 6364 	pop	ar3
      001B76 D0 04            [24] 6365 	pop	ar4
      001B78 D0 05            [24] 6366 	pop	ar5
      001B7A D0 06            [24] 6367 	pop	ar6
      001B7C D0 07            [24] 6368 	pop	ar7
      001B7E                       6369 00102$:
                                   6370 ;	.\ecen4350_lcd_v4.c:1349: } if (blockType == 0x2) {
      001B7E BF 02 5E         [24] 6371 	cjne	r7,#0x02,00104$
                                   6372 ;	.\ecen4350_lcd_v4.c:1350: invalidType = 0;
      001B81 7D 00            [12] 6373 	mov	r5,#0x00
                                   6374 ;	.\ecen4350_lcd_v4.c:1352: setColorDefault();
      001B83 C0 07            [24] 6375 	push	ar7
      001B85 C0 06            [24] 6376 	push	ar6
      001B87 C0 05            [24] 6377 	push	ar5
      001B89 C0 04            [24] 6378 	push	ar4
      001B8B C0 03            [24] 6379 	push	ar3
      001B8D 12 16 9D         [24] 6380 	lcall	_setColorDefault
                                   6381 ;	.\ecen4350_lcd_v4.c:1353: setCursor(0, 140);
      001B90 75 6B 8C         [24] 6382 	mov	_setCursor_PARM_2,#0x8c
      001B93 75 6C 00         [24] 6383 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B96 90 00 00         [24] 6384 	mov	dptr,#0x0000
      001B99 12 05 BF         [24] 6385 	lcall	_setCursor
                                   6386 ;	.\ecen4350_lcd_v4.c:1354: LCD_string_write(" Choose Block Type:");
      001B9C 90 5F 86         [24] 6387 	mov	dptr,#___str_31
      001B9F 75 F0 80         [24] 6388 	mov	b,#0x80
      001BA2 12 10 D9         [24] 6389 	lcall	_LCD_string_write
                                   6390 ;	.\ecen4350_lcd_v4.c:1355: setCursor(0, 160);
      001BA5 75 6B A0         [24] 6391 	mov	_setCursor_PARM_2,#0xa0
      001BA8 75 6C 00         [24] 6392 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BAB 90 00 00         [24] 6393 	mov	dptr,#0x0000
      001BAE 12 05 BF         [24] 6394 	lcall	_setCursor
                                   6395 ;	.\ecen4350_lcd_v4.c:1356: setColorGray();
      001BB1 12 16 CB         [24] 6396 	lcall	_setColorGray
                                   6397 ;	.\ecen4350_lcd_v4.c:1357: LCD_string_write("\n  ");
      001BB4 90 5F CE         [24] 6398 	mov	dptr,#___str_36
      001BB7 75 F0 80         [24] 6399 	mov	b,#0x80
      001BBA 12 10 D9         [24] 6400 	lcall	_LCD_string_write
                                   6401 ;	.\ecen4350_lcd_v4.c:1358: setColorHighlight2();
      001BBD 12 16 BF         [24] 6402 	lcall	_setColorHighlight2
                                   6403 ;	.\ecen4350_lcd_v4.c:1359: LCD_string_write("<2> WORD\n");
      001BC0 90 5F D2         [24] 6404 	mov	dptr,#___str_37
      001BC3 75 F0 80         [24] 6405 	mov	b,#0x80
      001BC6 12 10 D9         [24] 6406 	lcall	_LCD_string_write
                                   6407 ;	.\ecen4350_lcd_v4.c:1360: setColorGray();
      001BC9 12 16 CB         [24] 6408 	lcall	_setColorGray
                                   6409 ;	.\ecen4350_lcd_v4.c:1361: LCD_string_write("\n                \n                ");
      001BCC 90 5F DC         [24] 6410 	mov	dptr,#___str_38
      001BCF 75 F0 80         [24] 6411 	mov	b,#0x80
      001BD2 12 10 D9         [24] 6412 	lcall	_LCD_string_write
      001BD5 D0 03            [24] 6413 	pop	ar3
      001BD7 D0 04            [24] 6414 	pop	ar4
      001BD9 D0 05            [24] 6415 	pop	ar5
      001BDB D0 06            [24] 6416 	pop	ar6
      001BDD D0 07            [24] 6417 	pop	ar7
      001BDF                       6418 00104$:
                                   6419 ;	.\ecen4350_lcd_v4.c:1362: } if (blockType == 0x4) {
      001BDF BF 04 5E         [24] 6420 	cjne	r7,#0x04,00106$
                                   6421 ;	.\ecen4350_lcd_v4.c:1363: invalidType = 0;
      001BE2 7D 00            [12] 6422 	mov	r5,#0x00
                                   6423 ;	.\ecen4350_lcd_v4.c:1365: setColorDefault();
      001BE4 C0 07            [24] 6424 	push	ar7
      001BE6 C0 06            [24] 6425 	push	ar6
      001BE8 C0 05            [24] 6426 	push	ar5
      001BEA C0 04            [24] 6427 	push	ar4
      001BEC C0 03            [24] 6428 	push	ar3
      001BEE 12 16 9D         [24] 6429 	lcall	_setColorDefault
                                   6430 ;	.\ecen4350_lcd_v4.c:1366: setCursor(0, 140);
      001BF1 75 6B 8C         [24] 6431 	mov	_setCursor_PARM_2,#0x8c
      001BF4 75 6C 00         [24] 6432 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BF7 90 00 00         [24] 6433 	mov	dptr,#0x0000
      001BFA 12 05 BF         [24] 6434 	lcall	_setCursor
                                   6435 ;	.\ecen4350_lcd_v4.c:1367: LCD_string_write(" Choose Block Type:");
      001BFD 90 5F 86         [24] 6436 	mov	dptr,#___str_31
      001C00 75 F0 80         [24] 6437 	mov	b,#0x80
      001C03 12 10 D9         [24] 6438 	lcall	_LCD_string_write
                                   6439 ;	.\ecen4350_lcd_v4.c:1368: setCursor(0, 160);
      001C06 75 6B A0         [24] 6440 	mov	_setCursor_PARM_2,#0xa0
      001C09 75 6C 00         [24] 6441 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C0C 90 00 00         [24] 6442 	mov	dptr,#0x0000
      001C0F 12 05 BF         [24] 6443 	lcall	_setCursor
                                   6444 ;	.\ecen4350_lcd_v4.c:1369: setColorGray();
      001C12 12 16 CB         [24] 6445 	lcall	_setColorGray
                                   6446 ;	.\ecen4350_lcd_v4.c:1370: LCD_string_write("\n\n  ");
      001C15 90 5F FF         [24] 6447 	mov	dptr,#___str_39
      001C18 75 F0 80         [24] 6448 	mov	b,#0x80
      001C1B 12 10 D9         [24] 6449 	lcall	_LCD_string_write
                                   6450 ;	.\ecen4350_lcd_v4.c:1371: setColorHighlight2();
      001C1E 12 16 BF         [24] 6451 	lcall	_setColorHighlight2
                                   6452 ;	.\ecen4350_lcd_v4.c:1372: LCD_string_write("<4> DWORD");
      001C21 90 60 04         [24] 6453 	mov	dptr,#___str_40
      001C24 75 F0 80         [24] 6454 	mov	b,#0x80
      001C27 12 10 D9         [24] 6455 	lcall	_LCD_string_write
                                   6456 ;	.\ecen4350_lcd_v4.c:1373: setColorGray();
      001C2A 12 16 CB         [24] 6457 	lcall	_setColorGray
                                   6458 ;	.\ecen4350_lcd_v4.c:1374: LCD_string_write("\n                \n                ");
      001C2D 90 5F DC         [24] 6459 	mov	dptr,#___str_38
      001C30 75 F0 80         [24] 6460 	mov	b,#0x80
      001C33 12 10 D9         [24] 6461 	lcall	_LCD_string_write
      001C36 D0 03            [24] 6462 	pop	ar3
      001C38 D0 04            [24] 6463 	pop	ar4
      001C3A D0 05            [24] 6464 	pop	ar5
      001C3C D0 06            [24] 6465 	pop	ar6
      001C3E D0 07            [24] 6466 	pop	ar7
      001C40                       6467 00106$:
                                   6468 ;	.\ecen4350_lcd_v4.c:1376: if (invalidType) {
      001C40 ED               [12] 6469 	mov	a,r5
      001C41 70 03            [24] 6470 	jnz	00242$
      001C43 02 1A ED         [24] 6471 	ljmp	00109$
      001C46                       6472 00242$:
                                   6473 ;	.\ecen4350_lcd_v4.c:1377: setColorRed();
      001C46 C0 07            [24] 6474 	push	ar7
      001C48 C0 06            [24] 6475 	push	ar6
      001C4A C0 05            [24] 6476 	push	ar5
      001C4C C0 04            [24] 6477 	push	ar4
      001C4E C0 03            [24] 6478 	push	ar3
      001C50 12 16 E2         [24] 6479 	lcall	_setColorRed
                                   6480 ;	.\ecen4350_lcd_v4.c:1378: LCD_string_write("\n  Input Error\n  Try Again");
      001C53 90 60 0E         [24] 6481 	mov	dptr,#___str_41
      001C56 75 F0 80         [24] 6482 	mov	b,#0x80
      001C59 12 10 D9         [24] 6483 	lcall	_LCD_string_write
      001C5C D0 03            [24] 6484 	pop	ar3
      001C5E D0 04            [24] 6485 	pop	ar4
      001C60 D0 05            [24] 6486 	pop	ar5
      001C62 D0 06            [24] 6487 	pop	ar6
      001C64 D0 07            [24] 6488 	pop	ar7
      001C66 02 1A ED         [24] 6489 	ljmp	00109$
                                   6490 ;	.\ecen4350_lcd_v4.c:1384: while (invalidSize)
      001C69                       6491 00153$:
      001C69                       6492 00115$:
      001C69 EB               [12] 6493 	mov	a,r3
      001C6A 70 03            [24] 6494 	jnz	00243$
      001C6C 02 1D 64         [24] 6495 	ljmp	00117$
      001C6F                       6496 00243$:
                                   6497 ;	.\ecen4350_lcd_v4.c:1387: setCursor(0, 240);
      001C6F 75 6B F0         [24] 6498 	mov	_setCursor_PARM_2,#0xf0
      001C72 75 6C 00         [24] 6499 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C75 90 00 00         [24] 6500 	mov	dptr,#0x0000
      001C78 C0 07            [24] 6501 	push	ar7
      001C7A C0 06            [24] 6502 	push	ar6
      001C7C C0 04            [24] 6503 	push	ar4
      001C7E C0 03            [24] 6504 	push	ar3
      001C80 12 05 BF         [24] 6505 	lcall	_setCursor
                                   6506 ;	.\ecen4350_lcd_v4.c:1388: setColorSelect();
      001C83 12 16 A8         [24] 6507 	lcall	_setColorSelect
                                   6508 ;	.\ecen4350_lcd_v4.c:1389: LCD_string_write(" Input Size: ");
      001C86 90 60 29         [24] 6509 	mov	dptr,#___str_42
      001C89 75 F0 80         [24] 6510 	mov	b,#0x80
      001C8C 12 10 D9         [24] 6511 	lcall	_LCD_string_write
                                   6512 ;	.\ecen4350_lcd_v4.c:1390: setColorHighlight1();
      001C8F 12 16 B3         [24] 6513 	lcall	_setColorHighlight1
                                   6514 ;	.\ecen4350_lcd_v4.c:1391: selection = keyDetect();
      001C92 12 11 F7         [24] 6515 	lcall	_keyDetect
      001C95 AD 82            [24] 6516 	mov	r5,dpl
      001C97 78 71            [12] 6517 	mov	r0,#_selection
      001C99 A6 05            [24] 6518 	mov	@r0,ar5
                                   6519 ;	.\ecen4350_lcd_v4.c:1392: write(selection);
      001C9B 8D 82            [24] 6520 	mov	dpl,r5
      001C9D 12 10 73         [24] 6521 	lcall	_write
                                   6522 ;	.\ecen4350_lcd_v4.c:1393: blockSize = ASCIItoHex(selection);
      001CA0 78 71            [12] 6523 	mov	r0,#_selection
      001CA2 86 82            [24] 6524 	mov	dpl,@r0
      001CA4 12 14 65         [24] 6525 	lcall	_ASCIItoHex
      001CA7 AD 82            [24] 6526 	mov	r5,dpl
      001CA9 D0 03            [24] 6527 	pop	ar3
      001CAB D0 04            [24] 6528 	pop	ar4
                                   6529 ;	.\ecen4350_lcd_v4.c:1394: setColorDefault();
      001CAD C0 05            [24] 6530 	push	ar5
      001CAF C0 04            [24] 6531 	push	ar4
      001CB1 C0 03            [24] 6532 	push	ar3
      001CB3 12 16 9D         [24] 6533 	lcall	_setColorDefault
      001CB6 D0 03            [24] 6534 	pop	ar3
      001CB8 D0 04            [24] 6535 	pop	ar4
      001CBA D0 05            [24] 6536 	pop	ar5
      001CBC D0 06            [24] 6537 	pop	ar6
      001CBE D0 07            [24] 6538 	pop	ar7
                                   6539 ;	.\ecen4350_lcd_v4.c:1396: if (blockSize != blockType) {
      001CC0 ED               [12] 6540 	mov	a,r5
      001CC1 B5 07 02         [24] 6541 	cjne	a,ar7,00244$
      001CC4 80 4F            [24] 6542 	sjmp	00113$
      001CC6                       6543 00244$:
                                   6544 ;	.\ecen4350_lcd_v4.c:1397: setColorSelect();
      001CC6 C0 07            [24] 6545 	push	ar7
      001CC8 C0 06            [24] 6546 	push	ar6
      001CCA C0 04            [24] 6547 	push	ar4
      001CCC C0 03            [24] 6548 	push	ar3
      001CCE 12 16 A8         [24] 6549 	lcall	_setColorSelect
                                   6550 ;	.\ecen4350_lcd_v4.c:1398: LCD_string_write(" Input Size:");
      001CD1 90 5F 61         [24] 6551 	mov	dptr,#___str_27
      001CD4 75 F0 80         [24] 6552 	mov	b,#0x80
      001CD7 12 10 D9         [24] 6553 	lcall	_LCD_string_write
                                   6554 ;	.\ecen4350_lcd_v4.c:1399: setColorGray();
      001CDA 12 16 CB         [24] 6555 	lcall	_setColorGray
                                   6556 ;	.\ecen4350_lcd_v4.c:1400: LCD_string_write(" _");
      001CDD 90 5F 6E         [24] 6557 	mov	dptr,#___str_28
      001CE0 75 F0 80         [24] 6558 	mov	b,#0x80
      001CE3 12 10 D9         [24] 6559 	lcall	_LCD_string_write
                                   6560 ;	.\ecen4350_lcd_v4.c:1401: setCursor(0,260);
      001CE6 75 6B 04         [24] 6561 	mov	_setCursor_PARM_2,#0x04
      001CE9 75 6C 01         [24] 6562 	mov	(_setCursor_PARM_2 + 1),#0x01
      001CEC 90 00 00         [24] 6563 	mov	dptr,#0x0000
      001CEF 12 05 BF         [24] 6564 	lcall	_setCursor
                                   6565 ;	.\ecen4350_lcd_v4.c:1402: setColorRed();
      001CF2 12 16 E2         [24] 6566 	lcall	_setColorRed
                                   6567 ;	.\ecen4350_lcd_v4.c:1403: LCD_string_write(" Mismatch Error\n Try Again");
      001CF5 90 60 37         [24] 6568 	mov	dptr,#___str_43
      001CF8 75 F0 80         [24] 6569 	mov	b,#0x80
      001CFB 12 10 D9         [24] 6570 	lcall	_LCD_string_write
                                   6571 ;	.\ecen4350_lcd_v4.c:1404: setCursor(0, 240);
      001CFE 75 6B F0         [24] 6572 	mov	_setCursor_PARM_2,#0xf0
      001D01 75 6C 00         [24] 6573 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D04 90 00 00         [24] 6574 	mov	dptr,#0x0000
      001D07 12 05 BF         [24] 6575 	lcall	_setCursor
      001D0A D0 03            [24] 6576 	pop	ar3
      001D0C D0 04            [24] 6577 	pop	ar4
      001D0E D0 06            [24] 6578 	pop	ar6
      001D10 D0 07            [24] 6579 	pop	ar7
      001D12 02 1C 69         [24] 6580 	ljmp	00115$
      001D15                       6581 00113$:
                                   6582 ;	.\ecen4350_lcd_v4.c:1406: setCursor(0, 240);
      001D15 75 6B F0         [24] 6583 	mov	_setCursor_PARM_2,#0xf0
      001D18 75 6C 00         [24] 6584 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D1B 90 00 00         [24] 6585 	mov	dptr,#0x0000
      001D1E C0 07            [24] 6586 	push	ar7
      001D20 C0 06            [24] 6587 	push	ar6
      001D22 C0 04            [24] 6588 	push	ar4
      001D24 12 05 BF         [24] 6589 	lcall	_setCursor
                                   6590 ;	.\ecen4350_lcd_v4.c:1407: setColorDefault();
      001D27 12 16 9D         [24] 6591 	lcall	_setColorDefault
                                   6592 ;	.\ecen4350_lcd_v4.c:1408: LCD_string_write(" Input Size: ");
      001D2A 90 60 29         [24] 6593 	mov	dptr,#___str_42
      001D2D 75 F0 80         [24] 6594 	mov	b,#0x80
      001D30 12 10 D9         [24] 6595 	lcall	_LCD_string_write
                                   6596 ;	.\ecen4350_lcd_v4.c:1409: setColorHighlight2();
      001D33 12 16 BF         [24] 6597 	lcall	_setColorHighlight2
                                   6598 ;	.\ecen4350_lcd_v4.c:1410: write(selection);
      001D36 78 71            [12] 6599 	mov	r0,#_selection
      001D38 86 82            [24] 6600 	mov	dpl,@r0
      001D3A 12 10 73         [24] 6601 	lcall	_write
                                   6602 ;	.\ecen4350_lcd_v4.c:1411: invalidSize = 0;
      001D3D 7B 00            [12] 6603 	mov	r3,#0x00
                                   6604 ;	.\ecen4350_lcd_v4.c:1412: setCursor(0,260);
      001D3F 75 6B 04         [24] 6605 	mov	_setCursor_PARM_2,#0x04
      001D42 75 6C 01         [24] 6606 	mov	(_setCursor_PARM_2 + 1),#0x01
      001D45 90 00 00         [24] 6607 	mov	dptr,#0x0000
      001D48 C0 03            [24] 6608 	push	ar3
      001D4A 12 05 BF         [24] 6609 	lcall	_setCursor
                                   6610 ;	.\ecen4350_lcd_v4.c:1413: setColorGreen();
      001D4D 12 16 F8         [24] 6611 	lcall	_setColorGreen
                                   6612 ;	.\ecen4350_lcd_v4.c:1414: LCD_string_write(" Match Confirmed\n                ");
      001D50 90 60 52         [24] 6613 	mov	dptr,#___str_44
      001D53 75 F0 80         [24] 6614 	mov	b,#0x80
      001D56 12 10 D9         [24] 6615 	lcall	_LCD_string_write
      001D59 D0 03            [24] 6616 	pop	ar3
      001D5B D0 04            [24] 6617 	pop	ar4
      001D5D D0 06            [24] 6618 	pop	ar6
      001D5F D0 07            [24] 6619 	pop	ar7
      001D61 02 1C 69         [24] 6620 	ljmp	00115$
      001D64                       6621 00117$:
                                   6622 ;	.\ecen4350_lcd_v4.c:1418: delay(40);
      001D64 90 00 28         [24] 6623 	mov	dptr,#0x0028
      001D67 C0 07            [24] 6624 	push	ar7
      001D69 C0 06            [24] 6625 	push	ar6
      001D6B C0 04            [24] 6626 	push	ar4
      001D6D 12 01 A9         [24] 6627 	lcall	_delay
                                   6628 ;	.\ecen4350_lcd_v4.c:1419: clearLCD();
      001D70 12 0E 5C         [24] 6629 	lcall	_clearLCD
                                   6630 ;	.\ecen4350_lcd_v4.c:1420: fillTop(GRAY);
      001D73 90 D6 BA         [24] 6631 	mov	dptr,#0xd6ba
      001D76 12 0C 8F         [24] 6632 	lcall	_fillTop
                                   6633 ;	.\ecen4350_lcd_v4.c:1427: setTextSize(5);
      001D79 75 82 05         [24] 6634 	mov	dpl,#0x05
      001D7C 12 05 D9         [24] 6635 	lcall	_setTextSize
                                   6636 ;	.\ecen4350_lcd_v4.c:1428: setColorMenu();
      001D7F 12 16 D6         [24] 6637 	lcall	_setColorMenu
                                   6638 ;	.\ecen4350_lcd_v4.c:1429: setCursor(30, 0);
      001D82 E4               [12] 6639 	clr	a
      001D83 F5 6B            [12] 6640 	mov	_setCursor_PARM_2,a
      001D85 F5 6C            [12] 6641 	mov	(_setCursor_PARM_2 + 1),a
      001D87 90 00 1E         [24] 6642 	mov	dptr,#0x001e
      001D8A 12 05 BF         [24] 6643 	lcall	_setCursor
                                   6644 ;	.\ecen4350_lcd_v4.c:1430: LCD_string_write("[DUMP]\n");
      001D8D 90 5F 06         [24] 6645 	mov	dptr,#___str_22
      001D90 75 F0 80         [24] 6646 	mov	b,#0x80
      001D93 12 10 D9         [24] 6647 	lcall	_LCD_string_write
                                   6648 ;	.\ecen4350_lcd_v4.c:1431: setColorDefault();
      001D96 12 16 9D         [24] 6649 	lcall	_setColorDefault
      001D99 D0 04            [24] 6650 	pop	ar4
      001D9B D0 06            [24] 6651 	pop	ar6
      001D9D D0 07            [24] 6652 	pop	ar7
                                   6653 ;	.\ecen4350_lcd_v4.c:1433: while (exit) {
      001D9F BF 01 03         [24] 6654 	cjne	r7,#0x01,00245$
      001DA2 EF               [12] 6655 	mov	a,r7
      001DA3 80 01            [24] 6656 	sjmp	00246$
      001DA5                       6657 00245$:
      001DA5 E4               [12] 6658 	clr	a
      001DA6                       6659 00246$:
      001DA6 FD               [12] 6660 	mov	r5,a
      001DA7 E4               [12] 6661 	clr	a
      001DA8 BF 02 01         [24] 6662 	cjne	r7,#0x02,00247$
      001DAB 04               [12] 6663 	inc	a
      001DAC                       6664 00247$:
      001DAC F5 5A            [12] 6665 	mov	_dump_sloc0_1_0,a
      001DAE E4               [12] 6666 	clr	a
      001DAF BF 04 01         [24] 6667 	cjne	r7,#0x04,00249$
      001DB2 04               [12] 6668 	inc	a
      001DB3                       6669 00249$:
      001DB3 FF               [12] 6670 	mov	r7,a
      001DB4                       6671 00126$:
      001DB4 78 81            [12] 6672 	mov	r0,#_dump_exit_65536_553
      001DB6 E6               [12] 6673 	mov	a,@r0
      001DB7 70 01            [24] 6674 	jnz	00251$
      001DB9 22               [24] 6675 	ret
      001DBA                       6676 00251$:
                                   6677 ;	.\ecen4350_lcd_v4.c:1434: setTextSize(2);
      001DBA 75 82 02         [24] 6678 	mov	dpl,#0x02
      001DBD C0 07            [24] 6679 	push	ar7
      001DBF C0 06            [24] 6680 	push	ar6
      001DC1 C0 05            [24] 6681 	push	ar5
      001DC3 C0 04            [24] 6682 	push	ar4
      001DC5 12 05 D9         [24] 6683 	lcall	_setTextSize
                                   6684 ;	.\ecen4350_lcd_v4.c:1435: setColorWhite();
      001DC8 12 16 ED         [24] 6685 	lcall	_setColorWhite
                                   6686 ;	.\ecen4350_lcd_v4.c:1436: setCursor(0, 60);
      001DCB 75 6B 3C         [24] 6687 	mov	_setCursor_PARM_2,#0x3c
      001DCE 75 6C 00         [24] 6688 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DD1 90 00 00         [24] 6689 	mov	dptr,#0x0000
      001DD4 12 05 BF         [24] 6690 	lcall	_setCursor
                                   6691 ;	.\ecen4350_lcd_v4.c:1437: LCD_string_write(" Address:");
      001DD7 90 60 74         [24] 6692 	mov	dptr,#___str_45
      001DDA 75 F0 80         [24] 6693 	mov	b,#0x80
      001DDD 12 10 D9         [24] 6694 	lcall	_LCD_string_write
                                   6695 ;	.\ecen4350_lcd_v4.c:1438: setColorDefault();
      001DE0 12 16 9D         [24] 6696 	lcall	_setColorDefault
                                   6697 ;	.\ecen4350_lcd_v4.c:1439: setCursor(0, 80);
      001DE3 75 6B 50         [24] 6698 	mov	_setCursor_PARM_2,#0x50
      001DE6 75 6C 00         [24] 6699 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DE9 90 00 00         [24] 6700 	mov	dptr,#0x0000
      001DEC 12 05 BF         [24] 6701 	lcall	_setCursor
                                   6702 ;	.\ecen4350_lcd_v4.c:1440: LCD_string_write(" 0x");
      001DEF 90 60 7E         [24] 6703 	mov	dptr,#___str_46
      001DF2 75 F0 80         [24] 6704 	mov	b,#0x80
      001DF5 12 10 D9         [24] 6705 	lcall	_LCD_string_write
                                   6706 ;	.\ecen4350_lcd_v4.c:1441: print16Hex(address);
      001DF8 78 7F            [12] 6707 	mov	r0,#_dump_address_65536_553
      001DFA 86 82            [24] 6708 	mov	dpl,@r0
      001DFC 08               [12] 6709 	inc	r0
      001DFD 86 83            [24] 6710 	mov	dph,@r0
      001DFF 12 15 C1         [24] 6711 	lcall	_print16Hex
      001E02 D0 04            [24] 6712 	pop	ar4
      001E04 D0 05            [24] 6713 	pop	ar5
      001E06 D0 06            [24] 6714 	pop	ar6
      001E08 D0 07            [24] 6715 	pop	ar7
                                   6716 ;	.\ecen4350_lcd_v4.c:1442: if (blockType == 0x1)
      001E0A ED               [12] 6717 	mov	a,r5
      001E0B 70 03            [24] 6718 	jnz	00252$
      001E0D 02 1E D2         [24] 6719 	ljmp	00119$
      001E10                       6720 00252$:
                                   6721 ;	.\ecen4350_lcd_v4.c:1444: setCursor(0, 120);
      001E10 75 6B 78         [24] 6722 	mov	_setCursor_PARM_2,#0x78
      001E13 75 6C 00         [24] 6723 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E16 90 00 00         [24] 6724 	mov	dptr,#0x0000
      001E19 C0 07            [24] 6725 	push	ar7
      001E1B C0 06            [24] 6726 	push	ar6
      001E1D C0 05            [24] 6727 	push	ar5
      001E1F C0 04            [24] 6728 	push	ar4
      001E21 12 05 BF         [24] 6729 	lcall	_setCursor
                                   6730 ;	.\ecen4350_lcd_v4.c:1445: setColorWhite();
      001E24 12 16 ED         [24] 6731 	lcall	_setColorWhite
                                   6732 ;	.\ecen4350_lcd_v4.c:1446: LCD_string_write(" Hex Data:");
      001E27 90 60 82         [24] 6733 	mov	dptr,#___str_47
      001E2A 75 F0 80         [24] 6734 	mov	b,#0x80
      001E2D 12 10 D9         [24] 6735 	lcall	_LCD_string_write
                                   6736 ;	.\ecen4350_lcd_v4.c:1447: setColorDefault();
      001E30 12 16 9D         [24] 6737 	lcall	_setColorDefault
                                   6738 ;	.\ecen4350_lcd_v4.c:1448: setCursor(10, 140);
      001E33 75 6B 8C         [24] 6739 	mov	_setCursor_PARM_2,#0x8c
      001E36 75 6C 00         [24] 6740 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E39 90 00 0A         [24] 6741 	mov	dptr,#0x000a
      001E3C 12 05 BF         [24] 6742 	lcall	_setCursor
      001E3F D0 04            [24] 6743 	pop	ar4
      001E41 D0 05            [24] 6744 	pop	ar5
      001E43 D0 06            [24] 6745 	pop	ar6
                                   6746 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6747 ;	assignBit
      001E45 C2 B5            [12] 6748 	clr	_P3_5
                                   6749 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001E47 8C 82            [24] 6750 	mov	dpl,r4
      001E49 8E 83            [24] 6751 	mov	dph,r6
      001E4B E0               [24] 6752 	movx	a,@dptr
      001E4C F5 82            [12] 6753 	mov	dpl,a
                                   6754 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6755 ;	assignBit
      001E4E D2 B5            [12] 6756 	setb	_P3_5
                                   6757 ;	.\ecen4350_lcd_v4.c:1449: print8Hex(ramRead8(d));
      001E50 C0 06            [24] 6758 	push	ar6
      001E52 C0 05            [24] 6759 	push	ar5
      001E54 C0 04            [24] 6760 	push	ar4
      001E56 12 15 AA         [24] 6761 	lcall	_print8Hex
                                   6762 ;	.\ecen4350_lcd_v4.c:1451: setCursor(0, 180);
      001E59 75 6B B4         [24] 6763 	mov	_setCursor_PARM_2,#0xb4
      001E5C 75 6C 00         [24] 6764 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E5F 90 00 00         [24] 6765 	mov	dptr,#0x0000
      001E62 12 05 BF         [24] 6766 	lcall	_setCursor
                                   6767 ;	.\ecen4350_lcd_v4.c:1452: setColorWhite();
      001E65 12 16 ED         [24] 6768 	lcall	_setColorWhite
                                   6769 ;	.\ecen4350_lcd_v4.c:1453: LCD_string_write(" ASCII Data:");
      001E68 90 60 8D         [24] 6770 	mov	dptr,#___str_48
      001E6B 75 F0 80         [24] 6771 	mov	b,#0x80
      001E6E 12 10 D9         [24] 6772 	lcall	_LCD_string_write
                                   6773 ;	.\ecen4350_lcd_v4.c:1454: setColorDefault();
      001E71 12 16 9D         [24] 6774 	lcall	_setColorDefault
                                   6775 ;	.\ecen4350_lcd_v4.c:1455: setCursor(10, 200);
      001E74 75 6B C8         [24] 6776 	mov	_setCursor_PARM_2,#0xc8
      001E77 75 6C 00         [24] 6777 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E7A 90 00 0A         [24] 6778 	mov	dptr,#0x000a
      001E7D 12 05 BF         [24] 6779 	lcall	_setCursor
      001E80 D0 04            [24] 6780 	pop	ar4
      001E82 D0 05            [24] 6781 	pop	ar5
      001E84 D0 06            [24] 6782 	pop	ar6
                                   6783 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6784 ;	assignBit
      001E86 C2 B5            [12] 6785 	clr	_P3_5
                                   6786 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001E88 8C 82            [24] 6787 	mov	dpl,r4
      001E8A 8E 83            [24] 6788 	mov	dph,r6
      001E8C E0               [24] 6789 	movx	a,@dptr
      001E8D F5 82            [12] 6790 	mov	dpl,a
                                   6791 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6792 ;	assignBit
      001E8F D2 B5            [12] 6793 	setb	_P3_5
                                   6794 ;	.\ecen4350_lcd_v4.c:1456: print8ASCII(ramRead8(d));
      001E91 C0 06            [24] 6795 	push	ar6
      001E93 C0 05            [24] 6796 	push	ar5
      001E95 C0 04            [24] 6797 	push	ar4
      001E97 12 16 2C         [24] 6798 	lcall	_print8ASCII
                                   6799 ;	.\ecen4350_lcd_v4.c:1458: setCursor(0, 240);
      001E9A 75 6B F0         [24] 6800 	mov	_setCursor_PARM_2,#0xf0
      001E9D 75 6C 00         [24] 6801 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EA0 90 00 00         [24] 6802 	mov	dptr,#0x0000
      001EA3 12 05 BF         [24] 6803 	lcall	_setCursor
                                   6804 ;	.\ecen4350_lcd_v4.c:1459: setColorWhite();
      001EA6 12 16 ED         [24] 6805 	lcall	_setColorWhite
                                   6806 ;	.\ecen4350_lcd_v4.c:1460: LCD_string_write(" Data Type:");
      001EA9 90 60 9A         [24] 6807 	mov	dptr,#___str_49
      001EAC 75 F0 80         [24] 6808 	mov	b,#0x80
      001EAF 12 10 D9         [24] 6809 	lcall	_LCD_string_write
                                   6810 ;	.\ecen4350_lcd_v4.c:1461: setCursor(0, 260);
      001EB2 75 6B 04         [24] 6811 	mov	_setCursor_PARM_2,#0x04
      001EB5 75 6C 01         [24] 6812 	mov	(_setCursor_PARM_2 + 1),#0x01
      001EB8 90 00 00         [24] 6813 	mov	dptr,#0x0000
      001EBB 12 05 BF         [24] 6814 	lcall	_setCursor
                                   6815 ;	.\ecen4350_lcd_v4.c:1462: setColorDefault();
      001EBE 12 16 9D         [24] 6816 	lcall	_setColorDefault
                                   6817 ;	.\ecen4350_lcd_v4.c:1463: LCD_string_write(" BYTE");
      001EC1 90 60 A6         [24] 6818 	mov	dptr,#___str_50
      001EC4 75 F0 80         [24] 6819 	mov	b,#0x80
      001EC7 12 10 D9         [24] 6820 	lcall	_LCD_string_write
      001ECA D0 04            [24] 6821 	pop	ar4
      001ECC D0 05            [24] 6822 	pop	ar5
      001ECE D0 06            [24] 6823 	pop	ar6
      001ED0 D0 07            [24] 6824 	pop	ar7
      001ED2                       6825 00119$:
                                   6826 ;	.\ecen4350_lcd_v4.c:1465: if (blockType == 0x2)
      001ED2 E5 5A            [12] 6827 	mov	a,_dump_sloc0_1_0
      001ED4 70 03            [24] 6828 	jnz	00253$
      001ED6 02 1F F6         [24] 6829 	ljmp	00121$
      001ED9                       6830 00253$:
                                   6831 ;	.\ecen4350_lcd_v4.c:1467: setCursor(0, 120);
      001ED9 C0 07            [24] 6832 	push	ar7
      001EDB 75 6B 78         [24] 6833 	mov	_setCursor_PARM_2,#0x78
      001EDE 75 6C 00         [24] 6834 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EE1 90 00 00         [24] 6835 	mov	dptr,#0x0000
      001EE4 C0 07            [24] 6836 	push	ar7
      001EE6 C0 06            [24] 6837 	push	ar6
      001EE8 C0 05            [24] 6838 	push	ar5
      001EEA C0 04            [24] 6839 	push	ar4
      001EEC 12 05 BF         [24] 6840 	lcall	_setCursor
                                   6841 ;	.\ecen4350_lcd_v4.c:1468: setColorWhite();
      001EEF 12 16 ED         [24] 6842 	lcall	_setColorWhite
                                   6843 ;	.\ecen4350_lcd_v4.c:1469: LCD_string_write(" Hex Data:");
      001EF2 90 60 82         [24] 6844 	mov	dptr,#___str_47
      001EF5 75 F0 80         [24] 6845 	mov	b,#0x80
      001EF8 12 10 D9         [24] 6846 	lcall	_LCD_string_write
                                   6847 ;	.\ecen4350_lcd_v4.c:1470: setColorDefault();
      001EFB 12 16 9D         [24] 6848 	lcall	_setColorDefault
                                   6849 ;	.\ecen4350_lcd_v4.c:1471: setCursor(10, 140);
      001EFE 75 6B 8C         [24] 6850 	mov	_setCursor_PARM_2,#0x8c
      001F01 75 6C 00         [24] 6851 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F04 90 00 0A         [24] 6852 	mov	dptr,#0x000a
      001F07 12 05 BF         [24] 6853 	lcall	_setCursor
      001F0A D0 04            [24] 6854 	pop	ar4
      001F0C D0 05            [24] 6855 	pop	ar5
      001F0E D0 06            [24] 6856 	pop	ar6
                                   6857 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6858 ;	assignBit
      001F10 C2 B5            [12] 6859 	clr	_P3_5
                                   6860 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001F12 8C 82            [24] 6861 	mov	dpl,r4
      001F14 8E 83            [24] 6862 	mov	dph,r6
      001F16 E0               [24] 6863 	movx	a,@dptr
      001F17 F5 82            [12] 6864 	mov	dpl,a
                                   6865 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6866 ;	assignBit
      001F19 D2 B5            [12] 6867 	setb	_P3_5
                                   6868 ;	.\ecen4350_lcd_v4.c:1472: print8Hex(ramRead8(d));
      001F1B C0 06            [24] 6869 	push	ar6
      001F1D C0 05            [24] 6870 	push	ar5
      001F1F C0 04            [24] 6871 	push	ar4
      001F21 12 15 AA         [24] 6872 	lcall	_print8Hex
      001F24 D0 04            [24] 6873 	pop	ar4
      001F26 D0 05            [24] 6874 	pop	ar5
      001F28 D0 06            [24] 6875 	pop	ar6
      001F2A D0 07            [24] 6876 	pop	ar7
                                   6877 ;	.\ecen4350_lcd_v4.c:1473: d++;
      001F2C 74 01            [12] 6878 	mov	a,#0x01
      001F2E 2C               [12] 6879 	add	a,r4
      001F2F FB               [12] 6880 	mov	r3,a
      001F30 E4               [12] 6881 	clr	a
      001F31 3E               [12] 6882 	addc	a,r6
      001F32 FF               [12] 6883 	mov	r7,a
                                   6884 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6885 ;	assignBit
      001F33 C2 B5            [12] 6886 	clr	_P3_5
                                   6887 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001F35 8B 82            [24] 6888 	mov	dpl,r3
      001F37 8F 83            [24] 6889 	mov	dph,r7
      001F39 E0               [24] 6890 	movx	a,@dptr
      001F3A F5 82            [12] 6891 	mov	dpl,a
                                   6892 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6893 ;	assignBit
      001F3C D2 B5            [12] 6894 	setb	_P3_5
                                   6895 ;	.\ecen4350_lcd_v4.c:1474: print8Hex(ramRead8(d));
      001F3E C0 07            [24] 6896 	push	ar7
      001F40 C0 05            [24] 6897 	push	ar5
      001F42 C0 03            [24] 6898 	push	ar3
      001F44 12 15 AA         [24] 6899 	lcall	_print8Hex
      001F47 D0 03            [24] 6900 	pop	ar3
      001F49 D0 05            [24] 6901 	pop	ar5
      001F4B D0 07            [24] 6902 	pop	ar7
                                   6903 ;	.\ecen4350_lcd_v4.c:1475: d--;
      001F4D 1B               [12] 6904 	dec	r3
      001F4E BB FF 01         [24] 6905 	cjne	r3,#0xff,00254$
      001F51 1F               [12] 6906 	dec	r7
      001F52                       6907 00254$:
                                   6908 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 180);
      001F52 75 6B B4         [24] 6909 	mov	_setCursor_PARM_2,#0xb4
      001F55 75 6C 00         [24] 6910 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F58 90 00 00         [24] 6911 	mov	dptr,#0x0000
      001F5B C0 07            [24] 6912 	push	ar7
      001F5D C0 05            [24] 6913 	push	ar5
      001F5F C0 03            [24] 6914 	push	ar3
      001F61 12 05 BF         [24] 6915 	lcall	_setCursor
                                   6916 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      001F64 12 16 ED         [24] 6917 	lcall	_setColorWhite
                                   6918 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" ASCII Data:");
      001F67 90 60 8D         [24] 6919 	mov	dptr,#___str_48
      001F6A 75 F0 80         [24] 6920 	mov	b,#0x80
      001F6D 12 10 D9         [24] 6921 	lcall	_LCD_string_write
                                   6922 ;	.\ecen4350_lcd_v4.c:1480: setColorDefault();
      001F70 12 16 9D         [24] 6923 	lcall	_setColorDefault
                                   6924 ;	.\ecen4350_lcd_v4.c:1481: setCursor(10, 200);
      001F73 75 6B C8         [24] 6925 	mov	_setCursor_PARM_2,#0xc8
      001F76 75 6C 00         [24] 6926 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F79 90 00 0A         [24] 6927 	mov	dptr,#0x000a
      001F7C 12 05 BF         [24] 6928 	lcall	_setCursor
      001F7F D0 03            [24] 6929 	pop	ar3
      001F81 D0 05            [24] 6930 	pop	ar5
      001F83 D0 07            [24] 6931 	pop	ar7
                                   6932 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6933 ;	assignBit
      001F85 C2 B5            [12] 6934 	clr	_P3_5
                                   6935 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001F87 8B 82            [24] 6936 	mov	dpl,r3
      001F89 8F 83            [24] 6937 	mov	dph,r7
      001F8B E0               [24] 6938 	movx	a,@dptr
      001F8C F5 82            [12] 6939 	mov	dpl,a
                                   6940 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6941 ;	assignBit
      001F8E D2 B5            [12] 6942 	setb	_P3_5
                                   6943 ;	.\ecen4350_lcd_v4.c:1482: print8ASCII(ramRead8(d));
      001F90 C0 07            [24] 6944 	push	ar7
      001F92 C0 05            [24] 6945 	push	ar5
      001F94 C0 03            [24] 6946 	push	ar3
      001F96 12 16 2C         [24] 6947 	lcall	_print8ASCII
      001F99 D0 03            [24] 6948 	pop	ar3
      001F9B D0 05            [24] 6949 	pop	ar5
      001F9D D0 07            [24] 6950 	pop	ar7
                                   6951 ;	.\ecen4350_lcd_v4.c:1483: d++;
      001F9F 74 01            [12] 6952 	mov	a,#0x01
      001FA1 2B               [12] 6953 	add	a,r3
      001FA2 FC               [12] 6954 	mov	r4,a
      001FA3 E4               [12] 6955 	clr	a
      001FA4 3F               [12] 6956 	addc	a,r7
      001FA5 FE               [12] 6957 	mov	r6,a
                                   6958 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   6959 ;	assignBit
      001FA6 C2 B5            [12] 6960 	clr	_P3_5
                                   6961 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      001FA8 8C 82            [24] 6962 	mov	dpl,r4
      001FAA 8E 83            [24] 6963 	mov	dph,r6
      001FAC E0               [24] 6964 	movx	a,@dptr
      001FAD F5 82            [12] 6965 	mov	dpl,a
                                   6966 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   6967 ;	assignBit
      001FAF D2 B5            [12] 6968 	setb	_P3_5
                                   6969 ;	.\ecen4350_lcd_v4.c:1484: print8ASCII(ramRead8(d));
      001FB1 C0 07            [24] 6970 	push	ar7
      001FB3 C0 06            [24] 6971 	push	ar6
      001FB5 C0 05            [24] 6972 	push	ar5
      001FB7 C0 04            [24] 6973 	push	ar4
      001FB9 12 16 2C         [24] 6974 	lcall	_print8ASCII
                                   6975 ;	.\ecen4350_lcd_v4.c:1486: setCursor(0, 240);
      001FBC 75 6B F0         [24] 6976 	mov	_setCursor_PARM_2,#0xf0
      001FBF 75 6C 00         [24] 6977 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FC2 90 00 00         [24] 6978 	mov	dptr,#0x0000
      001FC5 12 05 BF         [24] 6979 	lcall	_setCursor
                                   6980 ;	.\ecen4350_lcd_v4.c:1487: setColorWhite();
      001FC8 12 16 ED         [24] 6981 	lcall	_setColorWhite
                                   6982 ;	.\ecen4350_lcd_v4.c:1488: LCD_string_write(" Data Type:");
      001FCB 90 60 9A         [24] 6983 	mov	dptr,#___str_49
      001FCE 75 F0 80         [24] 6984 	mov	b,#0x80
      001FD1 12 10 D9         [24] 6985 	lcall	_LCD_string_write
                                   6986 ;	.\ecen4350_lcd_v4.c:1489: setColorDefault();
      001FD4 12 16 9D         [24] 6987 	lcall	_setColorDefault
                                   6988 ;	.\ecen4350_lcd_v4.c:1490: setCursor(0, 260);
      001FD7 75 6B 04         [24] 6989 	mov	_setCursor_PARM_2,#0x04
      001FDA 75 6C 01         [24] 6990 	mov	(_setCursor_PARM_2 + 1),#0x01
      001FDD 90 00 00         [24] 6991 	mov	dptr,#0x0000
      001FE0 12 05 BF         [24] 6992 	lcall	_setCursor
                                   6993 ;	.\ecen4350_lcd_v4.c:1491: LCD_string_write(" WORD");
      001FE3 90 60 AC         [24] 6994 	mov	dptr,#___str_51
      001FE6 75 F0 80         [24] 6995 	mov	b,#0x80
      001FE9 12 10 D9         [24] 6996 	lcall	_LCD_string_write
      001FEC D0 04            [24] 6997 	pop	ar4
      001FEE D0 05            [24] 6998 	pop	ar5
      001FF0 D0 06            [24] 6999 	pop	ar6
      001FF2 D0 07            [24] 7000 	pop	ar7
                                   7001 ;	.\ecen4350_lcd_v4.c:1547: return;
      001FF4 D0 07            [24] 7002 	pop	ar7
                                   7003 ;	.\ecen4350_lcd_v4.c:1491: LCD_string_write(" WORD");
      001FF6                       7004 00121$:
                                   7005 ;	.\ecen4350_lcd_v4.c:1493: if (blockType == 0x4)
      001FF6 EF               [12] 7006 	mov	a,r7
      001FF7 70 03            [24] 7007 	jnz	00255$
      001FF9 02 21 A3         [24] 7008 	ljmp	00123$
      001FFC                       7009 00255$:
                                   7010 ;	.\ecen4350_lcd_v4.c:1495: setCursor(0, 120);
      001FFC 75 6B 78         [24] 7011 	mov	_setCursor_PARM_2,#0x78
      001FFF 75 6C 00         [24] 7012 	mov	(_setCursor_PARM_2 + 1),#0x00
      002002 90 00 00         [24] 7013 	mov	dptr,#0x0000
      002005 C0 07            [24] 7014 	push	ar7
      002007 C0 06            [24] 7015 	push	ar6
      002009 C0 05            [24] 7016 	push	ar5
      00200B C0 04            [24] 7017 	push	ar4
      00200D 12 05 BF         [24] 7018 	lcall	_setCursor
                                   7019 ;	.\ecen4350_lcd_v4.c:1496: setColorWhite();
      002010 12 16 ED         [24] 7020 	lcall	_setColorWhite
                                   7021 ;	.\ecen4350_lcd_v4.c:1497: LCD_string_write(" Hex Data:");
      002013 90 60 82         [24] 7022 	mov	dptr,#___str_47
      002016 75 F0 80         [24] 7023 	mov	b,#0x80
      002019 12 10 D9         [24] 7024 	lcall	_LCD_string_write
                                   7025 ;	.\ecen4350_lcd_v4.c:1498: setColorDefault();
      00201C 12 16 9D         [24] 7026 	lcall	_setColorDefault
                                   7027 ;	.\ecen4350_lcd_v4.c:1499: setCursor(10, 140);
      00201F 75 6B 8C         [24] 7028 	mov	_setCursor_PARM_2,#0x8c
      002022 75 6C 00         [24] 7029 	mov	(_setCursor_PARM_2 + 1),#0x00
      002025 90 00 0A         [24] 7030 	mov	dptr,#0x000a
      002028 12 05 BF         [24] 7031 	lcall	_setCursor
      00202B D0 04            [24] 7032 	pop	ar4
      00202D D0 05            [24] 7033 	pop	ar5
      00202F D0 06            [24] 7034 	pop	ar6
                                   7035 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7036 ;	assignBit
      002031 C2 B5            [12] 7037 	clr	_P3_5
                                   7038 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002033 8C 82            [24] 7039 	mov	dpl,r4
      002035 8E 83            [24] 7040 	mov	dph,r6
      002037 E0               [24] 7041 	movx	a,@dptr
      002038 F5 82            [12] 7042 	mov	dpl,a
                                   7043 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7044 ;	assignBit
      00203A D2 B5            [12] 7045 	setb	_P3_5
                                   7046 ;	.\ecen4350_lcd_v4.c:1500: print8Hex(ramRead8(d));
      00203C C0 06            [24] 7047 	push	ar6
      00203E C0 05            [24] 7048 	push	ar5
      002040 C0 04            [24] 7049 	push	ar4
      002042 12 15 AA         [24] 7050 	lcall	_print8Hex
      002045 D0 04            [24] 7051 	pop	ar4
      002047 D0 05            [24] 7052 	pop	ar5
      002049 D0 06            [24] 7053 	pop	ar6
                                   7054 ;	.\ecen4350_lcd_v4.c:1501: d++;
      00204B 74 01            [12] 7055 	mov	a,#0x01
      00204D 2C               [12] 7056 	add	a,r4
      00204E FA               [12] 7057 	mov	r2,a
      00204F E4               [12] 7058 	clr	a
      002050 3E               [12] 7059 	addc	a,r6
      002051 FB               [12] 7060 	mov	r3,a
                                   7061 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7062 ;	assignBit
      002052 C2 B5            [12] 7063 	clr	_P3_5
                                   7064 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002054 8A 82            [24] 7065 	mov	dpl,r2
      002056 8B 83            [24] 7066 	mov	dph,r3
      002058 E0               [24] 7067 	movx	a,@dptr
      002059 F5 82            [12] 7068 	mov	dpl,a
                                   7069 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7070 ;	assignBit
      00205B D2 B5            [12] 7071 	setb	_P3_5
                                   7072 ;	.\ecen4350_lcd_v4.c:1502: print8Hex(ramRead8(d));
      00205D C0 05            [24] 7073 	push	ar5
      00205F C0 03            [24] 7074 	push	ar3
      002061 C0 02            [24] 7075 	push	ar2
      002063 12 15 AA         [24] 7076 	lcall	_print8Hex
      002066 D0 02            [24] 7077 	pop	ar2
      002068 D0 03            [24] 7078 	pop	ar3
      00206A D0 05            [24] 7079 	pop	ar5
      00206C D0 07            [24] 7080 	pop	ar7
                                   7081 ;	.\ecen4350_lcd_v4.c:1503: d++;
      00206E 0A               [12] 7082 	inc	r2
      00206F BA 00 01         [24] 7083 	cjne	r2,#0x00,00256$
      002072 0B               [12] 7084 	inc	r3
      002073                       7085 00256$:
                                   7086 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7087 ;	assignBit
      002073 C2 B5            [12] 7088 	clr	_P3_5
                                   7089 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002075 8A 82            [24] 7090 	mov	dpl,r2
      002077 8B 83            [24] 7091 	mov	dph,r3
      002079 E0               [24] 7092 	movx	a,@dptr
      00207A F5 82            [12] 7093 	mov	dpl,a
                                   7094 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7095 ;	assignBit
      00207C D2 B5            [12] 7096 	setb	_P3_5
                                   7097 ;	.\ecen4350_lcd_v4.c:1504: print8Hex(ramRead8(d));
      00207E C0 07            [24] 7098 	push	ar7
      002080 C0 05            [24] 7099 	push	ar5
      002082 C0 03            [24] 7100 	push	ar3
      002084 C0 02            [24] 7101 	push	ar2
      002086 12 15 AA         [24] 7102 	lcall	_print8Hex
      002089 D0 02            [24] 7103 	pop	ar2
      00208B D0 03            [24] 7104 	pop	ar3
                                   7105 ;	.\ecen4350_lcd_v4.c:1505: d++;
      00208D 74 01            [12] 7106 	mov	a,#0x01
      00208F 2A               [12] 7107 	add	a,r2
      002090 F5 58            [12] 7108 	mov	_dump_d_65536_553,a
      002092 E4               [12] 7109 	clr	a
      002093 3B               [12] 7110 	addc	a,r3
      002094 F5 59            [12] 7111 	mov	(_dump_d_65536_553 + 1),a
                                   7112 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7113 ;	assignBit
      002096 C2 B5            [12] 7114 	clr	_P3_5
                                   7115 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002098 85 58 82         [24] 7116 	mov	dpl,_dump_d_65536_553
      00209B 85 59 83         [24] 7117 	mov	dph,(_dump_d_65536_553 + 1)
      00209E E0               [24] 7118 	movx	a,@dptr
      00209F FB               [12] 7119 	mov	r3,a
                                   7120 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7121 ;	assignBit
      0020A0 D2 B5            [12] 7122 	setb	_P3_5
                                   7123 ;	.\ecen4350_lcd_v4.c:1506: print8Hex(ramRead8(d));
      0020A2 8B 82            [24] 7124 	mov	dpl,r3
      0020A4 12 15 AA         [24] 7125 	lcall	_print8Hex
      0020A7 D0 05            [24] 7126 	pop	ar5
      0020A9 D0 07            [24] 7127 	pop	ar7
                                   7128 ;	.\ecen4350_lcd_v4.c:1507: d--;
      0020AB E5 58            [12] 7129 	mov	a,_dump_d_65536_553
      0020AD 24 FF            [12] 7130 	add	a,#0xff
      0020AF FA               [12] 7131 	mov	r2,a
      0020B0 E5 59            [12] 7132 	mov	a,(_dump_d_65536_553 + 1)
      0020B2 34 FF            [12] 7133 	addc	a,#0xff
      0020B4 FB               [12] 7134 	mov	r3,a
                                   7135 ;	.\ecen4350_lcd_v4.c:1508: d--;
      0020B5 1A               [12] 7136 	dec	r2
      0020B6 BA FF 01         [24] 7137 	cjne	r2,#0xff,00257$
      0020B9 1B               [12] 7138 	dec	r3
      0020BA                       7139 00257$:
                                   7140 ;	.\ecen4350_lcd_v4.c:1509: d--;
      0020BA 1A               [12] 7141 	dec	r2
      0020BB BA FF 01         [24] 7142 	cjne	r2,#0xff,00258$
      0020BE 1B               [12] 7143 	dec	r3
      0020BF                       7144 00258$:
                                   7145 ;	.\ecen4350_lcd_v4.c:1511: setCursor(0, 180);
      0020BF 75 6B B4         [24] 7146 	mov	_setCursor_PARM_2,#0xb4
      0020C2 75 6C 00         [24] 7147 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020C5 90 00 00         [24] 7148 	mov	dptr,#0x0000
      0020C8 C0 07            [24] 7149 	push	ar7
      0020CA C0 05            [24] 7150 	push	ar5
      0020CC C0 03            [24] 7151 	push	ar3
      0020CE C0 02            [24] 7152 	push	ar2
      0020D0 12 05 BF         [24] 7153 	lcall	_setCursor
                                   7154 ;	.\ecen4350_lcd_v4.c:1512: setColorWhite();
      0020D3 12 16 ED         [24] 7155 	lcall	_setColorWhite
                                   7156 ;	.\ecen4350_lcd_v4.c:1513: LCD_string_write(" ASCII Data:");
      0020D6 90 60 8D         [24] 7157 	mov	dptr,#___str_48
      0020D9 75 F0 80         [24] 7158 	mov	b,#0x80
      0020DC 12 10 D9         [24] 7159 	lcall	_LCD_string_write
                                   7160 ;	.\ecen4350_lcd_v4.c:1514: setColorDefault();
      0020DF 12 16 9D         [24] 7161 	lcall	_setColorDefault
                                   7162 ;	.\ecen4350_lcd_v4.c:1515: setCursor(10, 200);
      0020E2 75 6B C8         [24] 7163 	mov	_setCursor_PARM_2,#0xc8
      0020E5 75 6C 00         [24] 7164 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020E8 90 00 0A         [24] 7165 	mov	dptr,#0x000a
      0020EB 12 05 BF         [24] 7166 	lcall	_setCursor
      0020EE D0 02            [24] 7167 	pop	ar2
      0020F0 D0 03            [24] 7168 	pop	ar3
                                   7169 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7170 ;	assignBit
      0020F2 C2 B5            [12] 7171 	clr	_P3_5
                                   7172 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      0020F4 8A 82            [24] 7173 	mov	dpl,r2
      0020F6 8B 83            [24] 7174 	mov	dph,r3
      0020F8 E0               [24] 7175 	movx	a,@dptr
      0020F9 F5 82            [12] 7176 	mov	dpl,a
                                   7177 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7178 ;	assignBit
      0020FB D2 B5            [12] 7179 	setb	_P3_5
                                   7180 ;	.\ecen4350_lcd_v4.c:1516: print8ASCII(ramRead8(d));
      0020FD C0 03            [24] 7181 	push	ar3
      0020FF C0 02            [24] 7182 	push	ar2
      002101 12 16 2C         [24] 7183 	lcall	_print8ASCII
      002104 D0 02            [24] 7184 	pop	ar2
      002106 D0 03            [24] 7185 	pop	ar3
      002108 D0 05            [24] 7186 	pop	ar5
      00210A D0 07            [24] 7187 	pop	ar7
                                   7188 ;	.\ecen4350_lcd_v4.c:1517: d++;
      00210C 0A               [12] 7189 	inc	r2
      00210D BA 00 01         [24] 7190 	cjne	r2,#0x00,00259$
      002110 0B               [12] 7191 	inc	r3
      002111                       7192 00259$:
                                   7193 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7194 ;	assignBit
      002111 C2 B5            [12] 7195 	clr	_P3_5
                                   7196 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002113 8A 82            [24] 7197 	mov	dpl,r2
      002115 8B 83            [24] 7198 	mov	dph,r3
      002117 E0               [24] 7199 	movx	a,@dptr
      002118 F5 82            [12] 7200 	mov	dpl,a
                                   7201 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7202 ;	assignBit
      00211A D2 B5            [12] 7203 	setb	_P3_5
                                   7204 ;	.\ecen4350_lcd_v4.c:1518: print8ASCII(ramRead8(d));
      00211C C0 07            [24] 7205 	push	ar7
      00211E C0 05            [24] 7206 	push	ar5
      002120 C0 03            [24] 7207 	push	ar3
      002122 C0 02            [24] 7208 	push	ar2
      002124 12 16 2C         [24] 7209 	lcall	_print8ASCII
      002127 D0 02            [24] 7210 	pop	ar2
      002129 D0 03            [24] 7211 	pop	ar3
      00212B D0 05            [24] 7212 	pop	ar5
      00212D D0 07            [24] 7213 	pop	ar7
                                   7214 ;	.\ecen4350_lcd_v4.c:1519: d++;
      00212F 0A               [12] 7215 	inc	r2
      002130 BA 00 01         [24] 7216 	cjne	r2,#0x00,00260$
      002133 0B               [12] 7217 	inc	r3
      002134                       7218 00260$:
                                   7219 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7220 ;	assignBit
      002134 C2 B5            [12] 7221 	clr	_P3_5
                                   7222 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002136 8A 82            [24] 7223 	mov	dpl,r2
      002138 8B 83            [24] 7224 	mov	dph,r3
      00213A E0               [24] 7225 	movx	a,@dptr
      00213B F5 82            [12] 7226 	mov	dpl,a
                                   7227 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7228 ;	assignBit
      00213D D2 B5            [12] 7229 	setb	_P3_5
                                   7230 ;	.\ecen4350_lcd_v4.c:1520: print8ASCII(ramRead8(d));
      00213F C0 07            [24] 7231 	push	ar7
      002141 C0 05            [24] 7232 	push	ar5
      002143 C0 03            [24] 7233 	push	ar3
      002145 C0 02            [24] 7234 	push	ar2
      002147 12 16 2C         [24] 7235 	lcall	_print8ASCII
      00214A D0 02            [24] 7236 	pop	ar2
      00214C D0 03            [24] 7237 	pop	ar3
      00214E D0 05            [24] 7238 	pop	ar5
                                   7239 ;	.\ecen4350_lcd_v4.c:1521: d++;
      002150 74 01            [12] 7240 	mov	a,#0x01
      002152 2A               [12] 7241 	add	a,r2
      002153 FC               [12] 7242 	mov	r4,a
      002154 E4               [12] 7243 	clr	a
      002155 3B               [12] 7244 	addc	a,r3
      002156 FE               [12] 7245 	mov	r6,a
                                   7246 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   7247 ;	assignBit
      002157 C2 B5            [12] 7248 	clr	_P3_5
                                   7249 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002159 8C 82            [24] 7250 	mov	dpl,r4
      00215B 8E 83            [24] 7251 	mov	dph,r6
      00215D E0               [24] 7252 	movx	a,@dptr
      00215E F5 82            [12] 7253 	mov	dpl,a
                                   7254 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   7255 ;	assignBit
      002160 D2 B5            [12] 7256 	setb	_P3_5
                                   7257 ;	.\ecen4350_lcd_v4.c:1522: print8ASCII(ramRead8(d));
      002162 C0 06            [24] 7258 	push	ar6
      002164 C0 05            [24] 7259 	push	ar5
      002166 C0 04            [24] 7260 	push	ar4
      002168 12 16 2C         [24] 7261 	lcall	_print8ASCII
                                   7262 ;	.\ecen4350_lcd_v4.c:1524: setCursor(0, 240);
      00216B 75 6B F0         [24] 7263 	mov	_setCursor_PARM_2,#0xf0
      00216E 75 6C 00         [24] 7264 	mov	(_setCursor_PARM_2 + 1),#0x00
      002171 90 00 00         [24] 7265 	mov	dptr,#0x0000
      002174 12 05 BF         [24] 7266 	lcall	_setCursor
                                   7267 ;	.\ecen4350_lcd_v4.c:1525: setColorWhite();
      002177 12 16 ED         [24] 7268 	lcall	_setColorWhite
                                   7269 ;	.\ecen4350_lcd_v4.c:1526: LCD_string_write(" Data Type:");
      00217A 90 60 9A         [24] 7270 	mov	dptr,#___str_49
      00217D 75 F0 80         [24] 7271 	mov	b,#0x80
      002180 12 10 D9         [24] 7272 	lcall	_LCD_string_write
                                   7273 ;	.\ecen4350_lcd_v4.c:1527: setColorDefault();
      002183 12 16 9D         [24] 7274 	lcall	_setColorDefault
                                   7275 ;	.\ecen4350_lcd_v4.c:1528: setCursor(0, 260);
      002186 75 6B 04         [24] 7276 	mov	_setCursor_PARM_2,#0x04
      002189 75 6C 01         [24] 7277 	mov	(_setCursor_PARM_2 + 1),#0x01
      00218C 90 00 00         [24] 7278 	mov	dptr,#0x0000
      00218F 12 05 BF         [24] 7279 	lcall	_setCursor
                                   7280 ;	.\ecen4350_lcd_v4.c:1529: LCD_string_write(" DWORD");
      002192 90 60 B2         [24] 7281 	mov	dptr,#___str_52
      002195 75 F0 80         [24] 7282 	mov	b,#0x80
      002198 12 10 D9         [24] 7283 	lcall	_LCD_string_write
      00219B D0 04            [24] 7284 	pop	ar4
      00219D D0 05            [24] 7285 	pop	ar5
      00219F D0 06            [24] 7286 	pop	ar6
      0021A1 D0 07            [24] 7287 	pop	ar7
      0021A3                       7288 00123$:
                                   7289 ;	.\ecen4350_lcd_v4.c:1531: setCursor(50, 300);
      0021A3 75 6B 2C         [24] 7290 	mov	_setCursor_PARM_2,#0x2c
      0021A6 75 6C 01         [24] 7291 	mov	(_setCursor_PARM_2 + 1),#0x01
      0021A9 90 00 32         [24] 7292 	mov	dptr,#0x0032
      0021AC C0 07            [24] 7293 	push	ar7
      0021AE C0 06            [24] 7294 	push	ar6
      0021B0 C0 05            [24] 7295 	push	ar5
      0021B2 C0 04            [24] 7296 	push	ar4
      0021B4 12 05 BF         [24] 7297 	lcall	_setCursor
                                   7298 ;	.\ecen4350_lcd_v4.c:1532: setColorWhite();
      0021B7 12 16 ED         [24] 7299 	lcall	_setColorWhite
                                   7300 ;	.\ecen4350_lcd_v4.c:1533: LCD_string_write(" <0> Exit\n");
      0021BA 90 60 B9         [24] 7301 	mov	dptr,#___str_53
      0021BD 75 F0 80         [24] 7302 	mov	b,#0x80
      0021C0 12 10 D9         [24] 7303 	lcall	_LCD_string_write
                                   7304 ;	.\ecen4350_lcd_v4.c:1535: selection = keyDetect();
      0021C3 12 11 F7         [24] 7305 	lcall	_keyDetect
      0021C6 AB 82            [24] 7306 	mov	r3,dpl
      0021C8 D0 04            [24] 7307 	pop	ar4
      0021CA D0 05            [24] 7308 	pop	ar5
      0021CC D0 06            [24] 7309 	pop	ar6
      0021CE D0 07            [24] 7310 	pop	ar7
      0021D0 78 71            [12] 7311 	mov	r0,#_selection
      0021D2 A6 03            [24] 7312 	mov	@r0,ar3
                                   7313 ;	.\ecen4350_lcd_v4.c:1537: if (selection == '0' ) {
      0021D4 BB 30 02         [24] 7314 	cjne	r3,#0x30,00261$
      0021D7 80 03            [24] 7315 	sjmp	00262$
      0021D9                       7316 00261$:
      0021D9 02 1D B4         [24] 7317 	ljmp	00126$
      0021DC                       7318 00262$:
                                   7319 ;	.\ecen4350_lcd_v4.c:1538: exit = 0;
      0021DC 78 81            [12] 7320 	mov	r0,#_dump_exit_65536_553
      0021DE 76 00            [12] 7321 	mov	@r0,#0x00
                                   7322 ;	.\ecen4350_lcd_v4.c:1539: setCursor(50, 300);
      0021E0 75 6B 2C         [24] 7323 	mov	_setCursor_PARM_2,#0x2c
      0021E3 75 6C 01         [24] 7324 	mov	(_setCursor_PARM_2 + 1),#0x01
      0021E6 90 00 32         [24] 7325 	mov	dptr,#0x0032
      0021E9 C0 07            [24] 7326 	push	ar7
      0021EB C0 06            [24] 7327 	push	ar6
      0021ED C0 05            [24] 7328 	push	ar5
      0021EF C0 04            [24] 7329 	push	ar4
      0021F1 12 05 BF         [24] 7330 	lcall	_setCursor
                                   7331 ;	.\ecen4350_lcd_v4.c:1540: setColorSelect();
      0021F4 12 16 A8         [24] 7332 	lcall	_setColorSelect
                                   7333 ;	.\ecen4350_lcd_v4.c:1541: LCD_string_write(" ");
      0021F7 90 5F 84         [24] 7334 	mov	dptr,#___str_30
      0021FA 75 F0 80         [24] 7335 	mov	b,#0x80
      0021FD 12 10 D9         [24] 7336 	lcall	_LCD_string_write
                                   7337 ;	.\ecen4350_lcd_v4.c:1542: setColorHighlight2();
      002200 12 16 BF         [24] 7338 	lcall	_setColorHighlight2
                                   7339 ;	.\ecen4350_lcd_v4.c:1543: LCD_string_write("<0> Exit\n");
      002203 90 60 C4         [24] 7340 	mov	dptr,#___str_54
      002206 75 F0 80         [24] 7341 	mov	b,#0x80
      002209 12 10 D9         [24] 7342 	lcall	_LCD_string_write
                                   7343 ;	.\ecen4350_lcd_v4.c:1544: delay(40);
      00220C 90 00 28         [24] 7344 	mov	dptr,#0x0028
      00220F 12 01 A9         [24] 7345 	lcall	_delay
      002212 D0 04            [24] 7346 	pop	ar4
      002214 D0 05            [24] 7347 	pop	ar5
      002216 D0 06            [24] 7348 	pop	ar6
      002218 D0 07            [24] 7349 	pop	ar7
      00221A 02 1D B4         [24] 7350 	ljmp	00126$
                                   7351 ;	.\ecen4350_lcd_v4.c:1547: return;
                                   7352 ;	.\ecen4350_lcd_v4.c:1548: }
      00221D 22               [24] 7353 	ret
                                   7354 ;------------------------------------------------------------
                                   7355 ;Allocation info for local variables in function 'move'
                                   7356 ;------------------------------------------------------------
                                   7357 ;d                         Allocated with name '_move_d_65536_609'
                                   7358 ;i                         Allocated with name '_move_i_131072_618'
                                   7359 ;__2621440148              Allocated to registers 
                                   7360 ;__2621440145              Allocated to registers 
                                   7361 ;__2621440146              Allocated to registers 
                                   7362 ;__3276800149              Allocated to registers 
                                   7363 ;map_address               Allocated to registers 
                                   7364 ;d                         Allocated to registers r5 
                                   7365 ;map_address               Allocated to registers 
                                   7366 ;d                         Allocated to registers 
                                   7367 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_609'
                                   7368 ;destAddress               Allocated to registers r2 r3 
                                   7369 ;blockSize                 Allocated to registers r6 r7 
                                   7370 ;blockType                 Allocated to registers r5 
                                   7371 ;invalidType               Allocated to registers r4 
                                   7372 ;invalidSize               Allocated with name '_move_invalidSize_65536_609'
                                   7373 ;------------------------------------------------------------
                                   7374 ;	.\ecen4350_lcd_v4.c:1550: void move() {
                                   7375 ;	-----------------------------------------
                                   7376 ;	 function move
                                   7377 ;	-----------------------------------------
      00221E                       7378 _move:
                                   7379 ;	.\ecen4350_lcd_v4.c:1554: __idata unsigned int blockSize = 0;
      00221E 7E 00            [12] 7380 	mov	r6,#0x00
      002220 7F 00            [12] 7381 	mov	r7,#0x00
                                   7382 ;	.\ecen4350_lcd_v4.c:1555: __idata unsigned char blockType = 0;
      002222 7D 00            [12] 7383 	mov	r5,#0x00
                                   7384 ;	.\ecen4350_lcd_v4.c:1556: __idata unsigned char invalidType = 1;
      002224 7C 01            [12] 7385 	mov	r4,#0x01
                                   7386 ;	.\ecen4350_lcd_v4.c:1557: __idata unsigned char invalidSize = 1;
      002226 78 84            [12] 7387 	mov	r0,#_move_invalidSize_65536_609
      002228 76 01            [12] 7388 	mov	@r0,#0x01
                                   7389 ;	.\ecen4350_lcd_v4.c:1559: clearLCD();
      00222A C0 07            [24] 7390 	push	ar7
      00222C C0 06            [24] 7391 	push	ar6
      00222E C0 05            [24] 7392 	push	ar5
      002230 C0 04            [24] 7393 	push	ar4
      002232 12 0E 5C         [24] 7394 	lcall	_clearLCD
                                   7395 ;	.\ecen4350_lcd_v4.c:1562: fillTop(GRAY);
      002235 90 D6 BA         [24] 7396 	mov	dptr,#0xd6ba
      002238 12 0C 8F         [24] 7397 	lcall	_fillTop
                                   7398 ;	.\ecen4350_lcd_v4.c:1563: setTextSize(5);
      00223B 75 82 05         [24] 7399 	mov	dpl,#0x05
      00223E 12 05 D9         [24] 7400 	lcall	_setTextSize
                                   7401 ;	.\ecen4350_lcd_v4.c:1564: setColorMenu();
      002241 12 16 D6         [24] 7402 	lcall	_setColorMenu
                                   7403 ;	.\ecen4350_lcd_v4.c:1565: setCursor(30, 0);
      002244 E4               [12] 7404 	clr	a
      002245 F5 6B            [12] 7405 	mov	_setCursor_PARM_2,a
      002247 F5 6C            [12] 7406 	mov	(_setCursor_PARM_2 + 1),a
      002249 90 00 1E         [24] 7407 	mov	dptr,#0x001e
      00224C 12 05 BF         [24] 7408 	lcall	_setCursor
                                   7409 ;	.\ecen4350_lcd_v4.c:1566: LCD_string_write("[MOVE]\n");
      00224F 90 60 CE         [24] 7410 	mov	dptr,#___str_55
      002252 75 F0 80         [24] 7411 	mov	b,#0x80
      002255 12 10 D9         [24] 7412 	lcall	_LCD_string_write
                                   7413 ;	.\ecen4350_lcd_v4.c:1567: setColorDefault();
      002258 12 16 9D         [24] 7414 	lcall	_setColorDefault
                                   7415 ;	.\ecen4350_lcd_v4.c:1568: setTextSize(2);
      00225B 75 82 02         [24] 7416 	mov	dpl,#0x02
      00225E 12 05 D9         [24] 7417 	lcall	_setTextSize
                                   7418 ;	.\ecen4350_lcd_v4.c:1569: setCursor(0, 60);
      002261 75 6B 3C         [24] 7419 	mov	_setCursor_PARM_2,#0x3c
      002264 75 6C 00         [24] 7420 	mov	(_setCursor_PARM_2 + 1),#0x00
      002267 90 00 00         [24] 7421 	mov	dptr,#0x0000
      00226A 12 05 BF         [24] 7422 	lcall	_setCursor
                                   7423 ;	.\ecen4350_lcd_v4.c:1570: LCD_string_write(" Source Address:");
      00226D 90 60 D6         [24] 7424 	mov	dptr,#___str_56
      002270 75 F0 80         [24] 7425 	mov	b,#0x80
      002273 12 10 D9         [24] 7426 	lcall	_LCD_string_write
                                   7427 ;	.\ecen4350_lcd_v4.c:1571: setCursor(0, 80);
      002276 75 6B 50         [24] 7428 	mov	_setCursor_PARM_2,#0x50
      002279 75 6C 00         [24] 7429 	mov	(_setCursor_PARM_2 + 1),#0x00
      00227C 90 00 00         [24] 7430 	mov	dptr,#0x0000
      00227F 12 05 BF         [24] 7431 	lcall	_setCursor
                                   7432 ;	.\ecen4350_lcd_v4.c:1572: setColorGray();
      002282 12 16 CB         [24] 7433 	lcall	_setColorGray
                                   7434 ;	.\ecen4350_lcd_v4.c:1573: LCD_string_write(" 0x____");
      002285 90 5F 22         [24] 7435 	mov	dptr,#___str_24
      002288 75 F0 80         [24] 7436 	mov	b,#0x80
      00228B 12 10 D9         [24] 7437 	lcall	_LCD_string_write
                                   7438 ;	.\ecen4350_lcd_v4.c:1574: setCursor(0, 110);
      00228E 75 6B 6E         [24] 7439 	mov	_setCursor_PARM_2,#0x6e
      002291 75 6C 00         [24] 7440 	mov	(_setCursor_PARM_2 + 1),#0x00
      002294 90 00 00         [24] 7441 	mov	dptr,#0x0000
      002297 12 05 BF         [24] 7442 	lcall	_setCursor
                                   7443 ;	.\ecen4350_lcd_v4.c:1575: setColorDefault();
      00229A 12 16 9D         [24] 7444 	lcall	_setColorDefault
                                   7445 ;	.\ecen4350_lcd_v4.c:1576: LCD_string_write(" Destination:");
      00229D 90 60 E7         [24] 7446 	mov	dptr,#___str_57
      0022A0 75 F0 80         [24] 7447 	mov	b,#0x80
      0022A3 12 10 D9         [24] 7448 	lcall	_LCD_string_write
                                   7449 ;	.\ecen4350_lcd_v4.c:1577: setCursor(0, 130);
      0022A6 75 6B 82         [24] 7450 	mov	_setCursor_PARM_2,#0x82
      0022A9 75 6C 00         [24] 7451 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022AC 90 00 00         [24] 7452 	mov	dptr,#0x0000
      0022AF 12 05 BF         [24] 7453 	lcall	_setCursor
                                   7454 ;	.\ecen4350_lcd_v4.c:1578: setColorGray();
      0022B2 12 16 CB         [24] 7455 	lcall	_setColorGray
                                   7456 ;	.\ecen4350_lcd_v4.c:1579: LCD_string_write(" 0x____");
      0022B5 90 5F 22         [24] 7457 	mov	dptr,#___str_24
      0022B8 75 F0 80         [24] 7458 	mov	b,#0x80
      0022BB 12 10 D9         [24] 7459 	lcall	_LCD_string_write
                                   7460 ;	.\ecen4350_lcd_v4.c:1580: setCursor(0, 160);
      0022BE 75 6B A0         [24] 7461 	mov	_setCursor_PARM_2,#0xa0
      0022C1 75 6C 00         [24] 7462 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022C4 90 00 00         [24] 7463 	mov	dptr,#0x0000
      0022C7 12 05 BF         [24] 7464 	lcall	_setCursor
                                   7465 ;	.\ecen4350_lcd_v4.c:1581: setColorDefault();
      0022CA 12 16 9D         [24] 7466 	lcall	_setColorDefault
                                   7467 ;	.\ecen4350_lcd_v4.c:1582: LCD_string_write(" Choose Block Type:");
      0022CD 90 5F 86         [24] 7468 	mov	dptr,#___str_31
      0022D0 75 F0 80         [24] 7469 	mov	b,#0x80
      0022D3 12 10 D9         [24] 7470 	lcall	_LCD_string_write
                                   7471 ;	.\ecen4350_lcd_v4.c:1583: setCursor(0, 180);
      0022D6 75 6B B4         [24] 7472 	mov	_setCursor_PARM_2,#0xb4
      0022D9 75 6C 00         [24] 7473 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022DC 90 00 00         [24] 7474 	mov	dptr,#0x0000
      0022DF 12 05 BF         [24] 7475 	lcall	_setCursor
                                   7476 ;	.\ecen4350_lcd_v4.c:1584: setColorGray();
      0022E2 12 16 CB         [24] 7477 	lcall	_setColorGray
                                   7478 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0022E5 90 5F 3F         [24] 7479 	mov	dptr,#___str_26
      0022E8 75 F0 80         [24] 7480 	mov	b,#0x80
      0022EB 12 10 D9         [24] 7481 	lcall	_LCD_string_write
                                   7482 ;	.\ecen4350_lcd_v4.c:1586: setCursor(0, 260);
      0022EE 75 6B 04         [24] 7483 	mov	_setCursor_PARM_2,#0x04
      0022F1 75 6C 01         [24] 7484 	mov	(_setCursor_PARM_2 + 1),#0x01
      0022F4 90 00 00         [24] 7485 	mov	dptr,#0x0000
      0022F7 12 05 BF         [24] 7486 	lcall	_setCursor
                                   7487 ;	.\ecen4350_lcd_v4.c:1587: setColorDefault();
      0022FA 12 16 9D         [24] 7488 	lcall	_setColorDefault
                                   7489 ;	.\ecen4350_lcd_v4.c:1588: LCD_string_write(" Input Size:");
      0022FD 90 5F 61         [24] 7490 	mov	dptr,#___str_27
      002300 75 F0 80         [24] 7491 	mov	b,#0x80
      002303 12 10 D9         [24] 7492 	lcall	_LCD_string_write
                                   7493 ;	.\ecen4350_lcd_v4.c:1589: setColorGray();
      002306 12 16 CB         [24] 7494 	lcall	_setColorGray
                                   7495 ;	.\ecen4350_lcd_v4.c:1590: LCD_string_write(" _");
      002309 90 5F 6E         [24] 7496 	mov	dptr,#___str_28
      00230C 75 F0 80         [24] 7497 	mov	b,#0x80
      00230F 12 10 D9         [24] 7498 	lcall	_LCD_string_write
                                   7499 ;	.\ecen4350_lcd_v4.c:1597: setCursor(0, 60);
      002312 75 6B 3C         [24] 7500 	mov	_setCursor_PARM_2,#0x3c
      002315 75 6C 00         [24] 7501 	mov	(_setCursor_PARM_2 + 1),#0x00
      002318 90 00 00         [24] 7502 	mov	dptr,#0x0000
      00231B 12 05 BF         [24] 7503 	lcall	_setCursor
                                   7504 ;	.\ecen4350_lcd_v4.c:1598: setColorSelect();
      00231E 12 16 A8         [24] 7505 	lcall	_setColorSelect
                                   7506 ;	.\ecen4350_lcd_v4.c:1599: LCD_string_write(" Source Address:");
      002321 90 60 D6         [24] 7507 	mov	dptr,#___str_56
      002324 75 F0 80         [24] 7508 	mov	b,#0x80
      002327 12 10 D9         [24] 7509 	lcall	_LCD_string_write
                                   7510 ;	.\ecen4350_lcd_v4.c:1600: setCursor(0, 80);
      00232A 75 6B 50         [24] 7511 	mov	_setCursor_PARM_2,#0x50
      00232D 75 6C 00         [24] 7512 	mov	(_setCursor_PARM_2 + 1),#0x00
      002330 90 00 00         [24] 7513 	mov	dptr,#0x0000
      002333 12 05 BF         [24] 7514 	lcall	_setCursor
                                   7515 ;	.\ecen4350_lcd_v4.c:1601: LCD_string_write(" ");
      002336 90 5F 84         [24] 7516 	mov	dptr,#___str_30
      002339 75 F0 80         [24] 7517 	mov	b,#0x80
      00233C 12 10 D9         [24] 7518 	lcall	_LCD_string_write
                                   7519 ;	.\ecen4350_lcd_v4.c:1602: setColorHighlight1();
      00233F 12 16 B3         [24] 7520 	lcall	_setColorHighlight1
                                   7521 ;	.\ecen4350_lcd_v4.c:1603: LCD_string_write("0x");
      002342 90 5E 59         [24] 7522 	mov	dptr,#___str_2
      002345 75 F0 80         [24] 7523 	mov	b,#0x80
      002348 12 10 D9         [24] 7524 	lcall	_LCD_string_write
                                   7525 ;	.\ecen4350_lcd_v4.c:1604: sourceAddress = inputAddress();
      00234B 12 17 0E         [24] 7526 	lcall	_inputAddress
      00234E 78 82            [12] 7527 	mov	r0,#_move_sourceAddress_65536_609
      002350 A6 82            [24] 7528 	mov	@r0,dpl
      002352 08               [12] 7529 	inc	r0
      002353 A6 83            [24] 7530 	mov	@r0,dph
                                   7531 ;	.\ecen4350_lcd_v4.c:1607: setColorDefault();
      002355 12 16 9D         [24] 7532 	lcall	_setColorDefault
                                   7533 ;	.\ecen4350_lcd_v4.c:1608: setCursor(0, 60);
      002358 75 6B 3C         [24] 7534 	mov	_setCursor_PARM_2,#0x3c
      00235B 75 6C 00         [24] 7535 	mov	(_setCursor_PARM_2 + 1),#0x00
      00235E 90 00 00         [24] 7536 	mov	dptr,#0x0000
      002361 12 05 BF         [24] 7537 	lcall	_setCursor
                                   7538 ;	.\ecen4350_lcd_v4.c:1609: LCD_string_write(" Source Address:");
      002364 90 60 D6         [24] 7539 	mov	dptr,#___str_56
      002367 75 F0 80         [24] 7540 	mov	b,#0x80
      00236A 12 10 D9         [24] 7541 	lcall	_LCD_string_write
                                   7542 ;	.\ecen4350_lcd_v4.c:1610: setCursor(0, 80);
      00236D 75 6B 50         [24] 7543 	mov	_setCursor_PARM_2,#0x50
      002370 75 6C 00         [24] 7544 	mov	(_setCursor_PARM_2 + 1),#0x00
      002373 90 00 00         [24] 7545 	mov	dptr,#0x0000
      002376 12 05 BF         [24] 7546 	lcall	_setCursor
                                   7547 ;	.\ecen4350_lcd_v4.c:1611: LCD_string_write(" ");
      002379 90 5F 84         [24] 7548 	mov	dptr,#___str_30
      00237C 75 F0 80         [24] 7549 	mov	b,#0x80
      00237F 12 10 D9         [24] 7550 	lcall	_LCD_string_write
                                   7551 ;	.\ecen4350_lcd_v4.c:1612: setColorHighlight2();
      002382 12 16 BF         [24] 7552 	lcall	_setColorHighlight2
                                   7553 ;	.\ecen4350_lcd_v4.c:1613: LCD_string_write("0x");
      002385 90 5E 59         [24] 7554 	mov	dptr,#___str_2
      002388 75 F0 80         [24] 7555 	mov	b,#0x80
      00238B 12 10 D9         [24] 7556 	lcall	_LCD_string_write
                                   7557 ;	.\ecen4350_lcd_v4.c:1614: print16Hex(sourceAddress);
      00238E 78 82            [12] 7558 	mov	r0,#_move_sourceAddress_65536_609
      002390 86 82            [24] 7559 	mov	dpl,@r0
      002392 08               [12] 7560 	inc	r0
      002393 86 83            [24] 7561 	mov	dph,@r0
      002395 12 15 C1         [24] 7562 	lcall	_print16Hex
                                   7563 ;	.\ecen4350_lcd_v4.c:1617: setCursor(0, 110);
      002398 75 6B 6E         [24] 7564 	mov	_setCursor_PARM_2,#0x6e
      00239B 75 6C 00         [24] 7565 	mov	(_setCursor_PARM_2 + 1),#0x00
      00239E 90 00 00         [24] 7566 	mov	dptr,#0x0000
      0023A1 12 05 BF         [24] 7567 	lcall	_setCursor
                                   7568 ;	.\ecen4350_lcd_v4.c:1618: setColorSelect();
      0023A4 12 16 A8         [24] 7569 	lcall	_setColorSelect
                                   7570 ;	.\ecen4350_lcd_v4.c:1619: LCD_string_write(" Destination:");
      0023A7 90 60 E7         [24] 7571 	mov	dptr,#___str_57
      0023AA 75 F0 80         [24] 7572 	mov	b,#0x80
      0023AD 12 10 D9         [24] 7573 	lcall	_LCD_string_write
                                   7574 ;	.\ecen4350_lcd_v4.c:1620: setCursor(0, 130);
      0023B0 75 6B 82         [24] 7575 	mov	_setCursor_PARM_2,#0x82
      0023B3 75 6C 00         [24] 7576 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023B6 90 00 00         [24] 7577 	mov	dptr,#0x0000
      0023B9 12 05 BF         [24] 7578 	lcall	_setCursor
                                   7579 ;	.\ecen4350_lcd_v4.c:1621: LCD_string_write(" ");
      0023BC 90 5F 84         [24] 7580 	mov	dptr,#___str_30
      0023BF 75 F0 80         [24] 7581 	mov	b,#0x80
      0023C2 12 10 D9         [24] 7582 	lcall	_LCD_string_write
                                   7583 ;	.\ecen4350_lcd_v4.c:1622: setColorHighlight1();
      0023C5 12 16 B3         [24] 7584 	lcall	_setColorHighlight1
                                   7585 ;	.\ecen4350_lcd_v4.c:1623: LCD_string_write("0x");
      0023C8 90 5E 59         [24] 7586 	mov	dptr,#___str_2
      0023CB 75 F0 80         [24] 7587 	mov	b,#0x80
      0023CE 12 10 D9         [24] 7588 	lcall	_LCD_string_write
                                   7589 ;	.\ecen4350_lcd_v4.c:1624: destAddress = inputAddress();
      0023D1 12 17 0E         [24] 7590 	lcall	_inputAddress
      0023D4 AA 82            [24] 7591 	mov	r2,dpl
      0023D6 AB 83            [24] 7592 	mov	r3,dph
                                   7593 ;	.\ecen4350_lcd_v4.c:1627: setColorDefault();
      0023D8 C0 03            [24] 7594 	push	ar3
      0023DA C0 02            [24] 7595 	push	ar2
      0023DC 12 16 9D         [24] 7596 	lcall	_setColorDefault
                                   7597 ;	.\ecen4350_lcd_v4.c:1628: setCursor(0, 110);
      0023DF 75 6B 6E         [24] 7598 	mov	_setCursor_PARM_2,#0x6e
      0023E2 75 6C 00         [24] 7599 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023E5 90 00 00         [24] 7600 	mov	dptr,#0x0000
      0023E8 12 05 BF         [24] 7601 	lcall	_setCursor
                                   7602 ;	.\ecen4350_lcd_v4.c:1629: LCD_string_write( " Destination:");
      0023EB 90 60 E7         [24] 7603 	mov	dptr,#___str_57
      0023EE 75 F0 80         [24] 7604 	mov	b,#0x80
      0023F1 12 10 D9         [24] 7605 	lcall	_LCD_string_write
                                   7606 ;	.\ecen4350_lcd_v4.c:1630: setCursor(0, 130);
      0023F4 75 6B 82         [24] 7607 	mov	_setCursor_PARM_2,#0x82
      0023F7 75 6C 00         [24] 7608 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023FA 90 00 00         [24] 7609 	mov	dptr,#0x0000
      0023FD 12 05 BF         [24] 7610 	lcall	_setCursor
                                   7611 ;	.\ecen4350_lcd_v4.c:1631: LCD_string_write(" ");
      002400 90 5F 84         [24] 7612 	mov	dptr,#___str_30
      002403 75 F0 80         [24] 7613 	mov	b,#0x80
      002406 12 10 D9         [24] 7614 	lcall	_LCD_string_write
                                   7615 ;	.\ecen4350_lcd_v4.c:1632: setColorHighlight2();
      002409 12 16 BF         [24] 7616 	lcall	_setColorHighlight2
                                   7617 ;	.\ecen4350_lcd_v4.c:1633: LCD_string_write("0x");
      00240C 90 5E 59         [24] 7618 	mov	dptr,#___str_2
      00240F 75 F0 80         [24] 7619 	mov	b,#0x80
      002412 12 10 D9         [24] 7620 	lcall	_LCD_string_write
      002415 D0 02            [24] 7621 	pop	ar2
      002417 D0 03            [24] 7622 	pop	ar3
                                   7623 ;	.\ecen4350_lcd_v4.c:1634: print16Hex(destAddress);
      002419 8A 82            [24] 7624 	mov	dpl,r2
      00241B 8B 83            [24] 7625 	mov	dph,r3
      00241D C0 03            [24] 7626 	push	ar3
      00241F C0 02            [24] 7627 	push	ar2
      002421 12 15 C1         [24] 7628 	lcall	_print16Hex
                                   7629 ;	.\ecen4350_lcd_v4.c:1637: setCursor(0, 160);
      002424 75 6B A0         [24] 7630 	mov	_setCursor_PARM_2,#0xa0
      002427 75 6C 00         [24] 7631 	mov	(_setCursor_PARM_2 + 1),#0x00
      00242A 90 00 00         [24] 7632 	mov	dptr,#0x0000
      00242D 12 05 BF         [24] 7633 	lcall	_setCursor
                                   7634 ;	.\ecen4350_lcd_v4.c:1638: setColorSelect();
      002430 12 16 A8         [24] 7635 	lcall	_setColorSelect
                                   7636 ;	.\ecen4350_lcd_v4.c:1639: LCD_string_write(" Choose Block Type:");
      002433 90 5F 86         [24] 7637 	mov	dptr,#___str_31
      002436 75 F0 80         [24] 7638 	mov	b,#0x80
      002439 12 10 D9         [24] 7639 	lcall	_LCD_string_write
                                   7640 ;	.\ecen4350_lcd_v4.c:1640: setCursor(0, 180);
      00243C 75 6B B4         [24] 7641 	mov	_setCursor_PARM_2,#0xb4
      00243F 75 6C 00         [24] 7642 	mov	(_setCursor_PARM_2 + 1),#0x00
      002442 90 00 00         [24] 7643 	mov	dptr,#0x0000
      002445 12 05 BF         [24] 7644 	lcall	_setCursor
                                   7645 ;	.\ecen4350_lcd_v4.c:1641: setColorWhite();
      002448 12 16 ED         [24] 7646 	lcall	_setColorWhite
                                   7647 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      00244B 90 5F 3F         [24] 7648 	mov	dptr,#___str_26
      00244E 75 F0 80         [24] 7649 	mov	b,#0x80
      002451 12 10 D9         [24] 7650 	lcall	_LCD_string_write
      002454 D0 02            [24] 7651 	pop	ar2
      002456 D0 03            [24] 7652 	pop	ar3
      002458 D0 04            [24] 7653 	pop	ar4
      00245A D0 05            [24] 7654 	pop	ar5
      00245C D0 06            [24] 7655 	pop	ar6
      00245E D0 07            [24] 7656 	pop	ar7
                                   7657 ;	.\ecen4350_lcd_v4.c:1644: while (invalidType) {
      002460                       7658 00109$:
      002460 EC               [12] 7659 	mov	a,r4
      002461 70 03            [24] 7660 	jnz	00178$
      002463 02 25 F0         [24] 7661 	ljmp	00137$
      002466                       7662 00178$:
                                   7663 ;	.\ecen4350_lcd_v4.c:1645: setCursor(0, 180);
      002466 75 6B B4         [24] 7664 	mov	_setCursor_PARM_2,#0xb4
      002469 75 6C 00         [24] 7665 	mov	(_setCursor_PARM_2 + 1),#0x00
      00246C 90 00 00         [24] 7666 	mov	dptr,#0x0000
      00246F C0 07            [24] 7667 	push	ar7
      002471 C0 06            [24] 7668 	push	ar6
      002473 C0 04            [24] 7669 	push	ar4
      002475 C0 03            [24] 7670 	push	ar3
      002477 C0 02            [24] 7671 	push	ar2
      002479 12 05 BF         [24] 7672 	lcall	_setCursor
                                   7673 ;	.\ecen4350_lcd_v4.c:1646: setColorWhite();
      00247C 12 16 ED         [24] 7674 	lcall	_setColorWhite
                                   7675 ;	.\ecen4350_lcd_v4.c:1647: LCD_string_write("\n\n");
      00247F 90 5F 9A         [24] 7676 	mov	dptr,#___str_32
      002482 75 F0 80         [24] 7677 	mov	b,#0x80
      002485 12 10 D9         [24] 7678 	lcall	_LCD_string_write
                                   7679 ;	.\ecen4350_lcd_v4.c:1649: blockType = inputBlockType();
      002488 12 17 B0         [24] 7680 	lcall	_inputBlockType
      00248B AD 82            [24] 7681 	mov	r5,dpl
      00248D D0 02            [24] 7682 	pop	ar2
      00248F D0 03            [24] 7683 	pop	ar3
      002491 D0 04            [24] 7684 	pop	ar4
      002493 D0 06            [24] 7685 	pop	ar6
      002495 D0 07            [24] 7686 	pop	ar7
                                   7687 ;	.\ecen4350_lcd_v4.c:1651: if (blockType == 0x1) {
      002497 BD 01 5F         [24] 7688 	cjne	r5,#0x01,00102$
                                   7689 ;	.\ecen4350_lcd_v4.c:1652: invalidType = 0;
      00249A 7C 00            [12] 7690 	mov	r4,#0x00
                                   7691 ;	.\ecen4350_lcd_v4.c:1654: setColorDefault();
      00249C C0 07            [24] 7692 	push	ar7
      00249E C0 06            [24] 7693 	push	ar6
      0024A0 C0 05            [24] 7694 	push	ar5
      0024A2 C0 04            [24] 7695 	push	ar4
      0024A4 C0 03            [24] 7696 	push	ar3
      0024A6 C0 02            [24] 7697 	push	ar2
      0024A8 12 16 9D         [24] 7698 	lcall	_setColorDefault
                                   7699 ;	.\ecen4350_lcd_v4.c:1655: setCursor(0, 160);
      0024AB 75 6B A0         [24] 7700 	mov	_setCursor_PARM_2,#0xa0
      0024AE 75 6C 00         [24] 7701 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024B1 90 00 00         [24] 7702 	mov	dptr,#0x0000
      0024B4 12 05 BF         [24] 7703 	lcall	_setCursor
                                   7704 ;	.\ecen4350_lcd_v4.c:1656: LCD_string_write(" Choose Block Type:");
      0024B7 90 5F 86         [24] 7705 	mov	dptr,#___str_31
      0024BA 75 F0 80         [24] 7706 	mov	b,#0x80
      0024BD 12 10 D9         [24] 7707 	lcall	_LCD_string_write
                                   7708 ;	.\ecen4350_lcd_v4.c:1657: setCursor(0, 180);
      0024C0 75 6B B4         [24] 7709 	mov	_setCursor_PARM_2,#0xb4
      0024C3 75 6C 00         [24] 7710 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024C6 90 00 00         [24] 7711 	mov	dptr,#0x0000
      0024C9 12 05 BF         [24] 7712 	lcall	_setCursor
                                   7713 ;	.\ecen4350_lcd_v4.c:1658: LCD_string_write("  ");
      0024CC 90 5F 9D         [24] 7714 	mov	dptr,#___str_33
      0024CF 75 F0 80         [24] 7715 	mov	b,#0x80
      0024D2 12 10 D9         [24] 7716 	lcall	_LCD_string_write
                                   7717 ;	.\ecen4350_lcd_v4.c:1659: setColorHighlight2();
      0024D5 12 16 BF         [24] 7718 	lcall	_setColorHighlight2
                                   7719 ;	.\ecen4350_lcd_v4.c:1660: LCD_string_write("<1> BYTE\n");
      0024D8 90 5F A0         [24] 7720 	mov	dptr,#___str_34
      0024DB 75 F0 80         [24] 7721 	mov	b,#0x80
      0024DE 12 10 D9         [24] 7722 	lcall	_LCD_string_write
                                   7723 ;	.\ecen4350_lcd_v4.c:1661: setColorGray();
      0024E1 12 16 CB         [24] 7724 	lcall	_setColorGray
                                   7725 ;	.\ecen4350_lcd_v4.c:1662: LCD_string_write("\n\n                \n                ");
      0024E4 90 5F AA         [24] 7726 	mov	dptr,#___str_35
      0024E7 75 F0 80         [24] 7727 	mov	b,#0x80
      0024EA 12 10 D9         [24] 7728 	lcall	_LCD_string_write
      0024ED D0 02            [24] 7729 	pop	ar2
      0024EF D0 03            [24] 7730 	pop	ar3
      0024F1 D0 04            [24] 7731 	pop	ar4
      0024F3 D0 05            [24] 7732 	pop	ar5
      0024F5 D0 06            [24] 7733 	pop	ar6
      0024F7 D0 07            [24] 7734 	pop	ar7
      0024F9                       7735 00102$:
                                   7736 ;	.\ecen4350_lcd_v4.c:1664: } if (blockType == 0x2) {
      0024F9 BD 02 62         [24] 7737 	cjne	r5,#0x02,00104$
                                   7738 ;	.\ecen4350_lcd_v4.c:1665: invalidType = 0;
      0024FC 7C 00            [12] 7739 	mov	r4,#0x00
                                   7740 ;	.\ecen4350_lcd_v4.c:1667: setColorDefault();
      0024FE C0 07            [24] 7741 	push	ar7
      002500 C0 06            [24] 7742 	push	ar6
      002502 C0 05            [24] 7743 	push	ar5
      002504 C0 04            [24] 7744 	push	ar4
      002506 C0 03            [24] 7745 	push	ar3
      002508 C0 02            [24] 7746 	push	ar2
      00250A 12 16 9D         [24] 7747 	lcall	_setColorDefault
                                   7748 ;	.\ecen4350_lcd_v4.c:1668: setCursor(0, 160);
      00250D 75 6B A0         [24] 7749 	mov	_setCursor_PARM_2,#0xa0
      002510 75 6C 00         [24] 7750 	mov	(_setCursor_PARM_2 + 1),#0x00
      002513 90 00 00         [24] 7751 	mov	dptr,#0x0000
      002516 12 05 BF         [24] 7752 	lcall	_setCursor
                                   7753 ;	.\ecen4350_lcd_v4.c:1669: LCD_string_write(" Choose Block Type:");
      002519 90 5F 86         [24] 7754 	mov	dptr,#___str_31
      00251C 75 F0 80         [24] 7755 	mov	b,#0x80
      00251F 12 10 D9         [24] 7756 	lcall	_LCD_string_write
                                   7757 ;	.\ecen4350_lcd_v4.c:1670: setCursor(0, 180);
      002522 75 6B B4         [24] 7758 	mov	_setCursor_PARM_2,#0xb4
      002525 75 6C 00         [24] 7759 	mov	(_setCursor_PARM_2 + 1),#0x00
      002528 90 00 00         [24] 7760 	mov	dptr,#0x0000
      00252B 12 05 BF         [24] 7761 	lcall	_setCursor
                                   7762 ;	.\ecen4350_lcd_v4.c:1671: setColorGray();
      00252E 12 16 CB         [24] 7763 	lcall	_setColorGray
                                   7764 ;	.\ecen4350_lcd_v4.c:1672: LCD_string_write("\n  ");
      002531 90 5F CE         [24] 7765 	mov	dptr,#___str_36
      002534 75 F0 80         [24] 7766 	mov	b,#0x80
      002537 12 10 D9         [24] 7767 	lcall	_LCD_string_write
                                   7768 ;	.\ecen4350_lcd_v4.c:1673: setColorHighlight2();
      00253A 12 16 BF         [24] 7769 	lcall	_setColorHighlight2
                                   7770 ;	.\ecen4350_lcd_v4.c:1674: LCD_string_write("<2> WORD\n");
      00253D 90 5F D2         [24] 7771 	mov	dptr,#___str_37
      002540 75 F0 80         [24] 7772 	mov	b,#0x80
      002543 12 10 D9         [24] 7773 	lcall	_LCD_string_write
                                   7774 ;	.\ecen4350_lcd_v4.c:1675: setColorGray();
      002546 12 16 CB         [24] 7775 	lcall	_setColorGray
                                   7776 ;	.\ecen4350_lcd_v4.c:1676: LCD_string_write("\n                \n                ");
      002549 90 5F DC         [24] 7777 	mov	dptr,#___str_38
      00254C 75 F0 80         [24] 7778 	mov	b,#0x80
      00254F 12 10 D9         [24] 7779 	lcall	_LCD_string_write
      002552 D0 02            [24] 7780 	pop	ar2
      002554 D0 03            [24] 7781 	pop	ar3
      002556 D0 04            [24] 7782 	pop	ar4
      002558 D0 05            [24] 7783 	pop	ar5
      00255A D0 06            [24] 7784 	pop	ar6
      00255C D0 07            [24] 7785 	pop	ar7
      00255E                       7786 00104$:
                                   7787 ;	.\ecen4350_lcd_v4.c:1677: } if (blockType == 0x4) {
      00255E BD 04 62         [24] 7788 	cjne	r5,#0x04,00106$
                                   7789 ;	.\ecen4350_lcd_v4.c:1678: invalidType = 0;
      002561 7C 00            [12] 7790 	mov	r4,#0x00
                                   7791 ;	.\ecen4350_lcd_v4.c:1680: setColorDefault();
      002563 C0 07            [24] 7792 	push	ar7
      002565 C0 06            [24] 7793 	push	ar6
      002567 C0 05            [24] 7794 	push	ar5
      002569 C0 04            [24] 7795 	push	ar4
      00256B C0 03            [24] 7796 	push	ar3
      00256D C0 02            [24] 7797 	push	ar2
      00256F 12 16 9D         [24] 7798 	lcall	_setColorDefault
                                   7799 ;	.\ecen4350_lcd_v4.c:1681: setCursor(0, 160);
      002572 75 6B A0         [24] 7800 	mov	_setCursor_PARM_2,#0xa0
      002575 75 6C 00         [24] 7801 	mov	(_setCursor_PARM_2 + 1),#0x00
      002578 90 00 00         [24] 7802 	mov	dptr,#0x0000
      00257B 12 05 BF         [24] 7803 	lcall	_setCursor
                                   7804 ;	.\ecen4350_lcd_v4.c:1682: LCD_string_write(" Choose Block Type:");
      00257E 90 5F 86         [24] 7805 	mov	dptr,#___str_31
      002581 75 F0 80         [24] 7806 	mov	b,#0x80
      002584 12 10 D9         [24] 7807 	lcall	_LCD_string_write
                                   7808 ;	.\ecen4350_lcd_v4.c:1683: setColorGray();
      002587 12 16 CB         [24] 7809 	lcall	_setColorGray
                                   7810 ;	.\ecen4350_lcd_v4.c:1684: setCursor(0, 180);
      00258A 75 6B B4         [24] 7811 	mov	_setCursor_PARM_2,#0xb4
      00258D 75 6C 00         [24] 7812 	mov	(_setCursor_PARM_2 + 1),#0x00
      002590 90 00 00         [24] 7813 	mov	dptr,#0x0000
      002593 12 05 BF         [24] 7814 	lcall	_setCursor
                                   7815 ;	.\ecen4350_lcd_v4.c:1685: LCD_string_write("\n\n  ");
      002596 90 5F FF         [24] 7816 	mov	dptr,#___str_39
      002599 75 F0 80         [24] 7817 	mov	b,#0x80
      00259C 12 10 D9         [24] 7818 	lcall	_LCD_string_write
                                   7819 ;	.\ecen4350_lcd_v4.c:1686: setColorHighlight2();
      00259F 12 16 BF         [24] 7820 	lcall	_setColorHighlight2
                                   7821 ;	.\ecen4350_lcd_v4.c:1687: LCD_string_write("<4> DWORD");
      0025A2 90 60 04         [24] 7822 	mov	dptr,#___str_40
      0025A5 75 F0 80         [24] 7823 	mov	b,#0x80
      0025A8 12 10 D9         [24] 7824 	lcall	_LCD_string_write
                                   7825 ;	.\ecen4350_lcd_v4.c:1688: setColorGray();
      0025AB 12 16 CB         [24] 7826 	lcall	_setColorGray
                                   7827 ;	.\ecen4350_lcd_v4.c:1689: LCD_string_write("\n                \n                ");
      0025AE 90 5F DC         [24] 7828 	mov	dptr,#___str_38
      0025B1 75 F0 80         [24] 7829 	mov	b,#0x80
      0025B4 12 10 D9         [24] 7830 	lcall	_LCD_string_write
      0025B7 D0 02            [24] 7831 	pop	ar2
      0025B9 D0 03            [24] 7832 	pop	ar3
      0025BB D0 04            [24] 7833 	pop	ar4
      0025BD D0 05            [24] 7834 	pop	ar5
      0025BF D0 06            [24] 7835 	pop	ar6
      0025C1 D0 07            [24] 7836 	pop	ar7
      0025C3                       7837 00106$:
                                   7838 ;	.\ecen4350_lcd_v4.c:1691: if (invalidType) {
      0025C3 EC               [12] 7839 	mov	a,r4
      0025C4 70 03            [24] 7840 	jnz	00185$
      0025C6 02 24 60         [24] 7841 	ljmp	00109$
      0025C9                       7842 00185$:
                                   7843 ;	.\ecen4350_lcd_v4.c:1692: setColorRed();
      0025C9 C0 07            [24] 7844 	push	ar7
      0025CB C0 06            [24] 7845 	push	ar6
      0025CD C0 05            [24] 7846 	push	ar5
      0025CF C0 04            [24] 7847 	push	ar4
      0025D1 C0 03            [24] 7848 	push	ar3
      0025D3 C0 02            [24] 7849 	push	ar2
      0025D5 12 16 E2         [24] 7850 	lcall	_setColorRed
                                   7851 ;	.\ecen4350_lcd_v4.c:1693: LCD_string_write("\n  Input Error\n  Try Again");
      0025D8 90 60 0E         [24] 7852 	mov	dptr,#___str_41
      0025DB 75 F0 80         [24] 7853 	mov	b,#0x80
      0025DE 12 10 D9         [24] 7854 	lcall	_LCD_string_write
      0025E1 D0 02            [24] 7855 	pop	ar2
      0025E3 D0 03            [24] 7856 	pop	ar3
      0025E5 D0 04            [24] 7857 	pop	ar4
      0025E7 D0 05            [24] 7858 	pop	ar5
      0025E9 D0 06            [24] 7859 	pop	ar6
      0025EB D0 07            [24] 7860 	pop	ar7
      0025ED 02 24 60         [24] 7861 	ljmp	00109$
                                   7862 ;	.\ecen4350_lcd_v4.c:1699: while (invalidSize)
      0025F0                       7863 00137$:
      0025F0                       7864 00115$:
      0025F0 78 84            [12] 7865 	mov	r0,#_move_invalidSize_65536_609
      0025F2 E6               [12] 7866 	mov	a,@r0
      0025F3 70 03            [24] 7867 	jnz	00186$
      0025F5 02 27 14         [24] 7868 	ljmp	00140$
      0025F8                       7869 00186$:
                                   7870 ;	.\ecen4350_lcd_v4.c:1702: setCursor(0, 260);
      0025F8 C0 02            [24] 7871 	push	ar2
      0025FA C0 03            [24] 7872 	push	ar3
      0025FC 75 6B 04         [24] 7873 	mov	_setCursor_PARM_2,#0x04
      0025FF 75 6C 01         [24] 7874 	mov	(_setCursor_PARM_2 + 1),#0x01
      002602 90 00 00         [24] 7875 	mov	dptr,#0x0000
      002605 C0 05            [24] 7876 	push	ar5
      002607 C0 03            [24] 7877 	push	ar3
      002609 C0 02            [24] 7878 	push	ar2
      00260B 12 05 BF         [24] 7879 	lcall	_setCursor
                                   7880 ;	.\ecen4350_lcd_v4.c:1703: setColorSelect();
      00260E 12 16 A8         [24] 7881 	lcall	_setColorSelect
                                   7882 ;	.\ecen4350_lcd_v4.c:1704: LCD_string_write(" Input Size: ");
      002611 90 60 29         [24] 7883 	mov	dptr,#___str_42
      002614 75 F0 80         [24] 7884 	mov	b,#0x80
      002617 12 10 D9         [24] 7885 	lcall	_LCD_string_write
                                   7886 ;	.\ecen4350_lcd_v4.c:1705: selection = keyDetect();
      00261A 12 11 F7         [24] 7887 	lcall	_keyDetect
      00261D E5 82            [12] 7888 	mov	a,dpl
      00261F 78 71            [12] 7889 	mov	r0,#_selection
      002621 F6               [12] 7890 	mov	@r0,a
                                   7891 ;	.\ecen4350_lcd_v4.c:1706: setColorHighlight1();
      002622 12 16 B3         [24] 7892 	lcall	_setColorHighlight1
                                   7893 ;	.\ecen4350_lcd_v4.c:1707: write(selection);
      002625 78 71            [12] 7894 	mov	r0,#_selection
      002627 86 82            [24] 7895 	mov	dpl,@r0
      002629 12 10 73         [24] 7896 	lcall	_write
                                   7897 ;	.\ecen4350_lcd_v4.c:1708: blockSize = ASCIItoHex(selection);
      00262C 78 71            [12] 7898 	mov	r0,#_selection
      00262E 86 82            [24] 7899 	mov	dpl,@r0
      002630 12 14 65         [24] 7900 	lcall	_ASCIItoHex
      002633 AC 82            [24] 7901 	mov	r4,dpl
      002635 D0 02            [24] 7902 	pop	ar2
      002637 D0 03            [24] 7903 	pop	ar3
      002639 D0 05            [24] 7904 	pop	ar5
      00263B 8C 06            [24] 7905 	mov	ar6,r4
      00263D 7F 00            [12] 7906 	mov	r7,#0x00
                                   7907 ;	.\ecen4350_lcd_v4.c:1709: setColorDefault();
      00263F C0 07            [24] 7908 	push	ar7
      002641 C0 06            [24] 7909 	push	ar6
      002643 C0 05            [24] 7910 	push	ar5
      002645 C0 03            [24] 7911 	push	ar3
      002647 C0 02            [24] 7912 	push	ar2
      002649 12 16 9D         [24] 7913 	lcall	_setColorDefault
      00264C D0 02            [24] 7914 	pop	ar2
      00264E D0 03            [24] 7915 	pop	ar3
      002650 D0 05            [24] 7916 	pop	ar5
      002652 D0 06            [24] 7917 	pop	ar6
      002654 D0 07            [24] 7918 	pop	ar7
                                   7919 ;	.\ecen4350_lcd_v4.c:1711: if (blockSize != blockType) {
      002656 8D 03            [24] 7920 	mov	ar3,r5
      002658 7C 00            [12] 7921 	mov	r4,#0x00
      00265A EE               [12] 7922 	mov	a,r6
      00265B B5 03 0A         [24] 7923 	cjne	a,ar3,00187$
      00265E EF               [12] 7924 	mov	a,r7
      00265F B5 04 06         [24] 7925 	cjne	a,ar4,00187$
      002662 D0 03            [24] 7926 	pop	ar3
      002664 D0 02            [24] 7927 	pop	ar2
      002666 80 57            [24] 7928 	sjmp	00113$
      002668                       7929 00187$:
      002668 D0 03            [24] 7930 	pop	ar3
      00266A D0 02            [24] 7931 	pop	ar2
                                   7932 ;	.\ecen4350_lcd_v4.c:1712: setCursor(0,280);
      00266C 75 6B 18         [24] 7933 	mov	_setCursor_PARM_2,#0x18
      00266F 75 6C 01         [24] 7934 	mov	(_setCursor_PARM_2 + 1),#0x01
      002672 90 00 00         [24] 7935 	mov	dptr,#0x0000
      002675 C0 07            [24] 7936 	push	ar7
      002677 C0 06            [24] 7937 	push	ar6
      002679 C0 05            [24] 7938 	push	ar5
      00267B C0 03            [24] 7939 	push	ar3
      00267D C0 02            [24] 7940 	push	ar2
      00267F 12 05 BF         [24] 7941 	lcall	_setCursor
                                   7942 ;	.\ecen4350_lcd_v4.c:1713: setColorRed();
      002682 12 16 E2         [24] 7943 	lcall	_setColorRed
                                   7944 ;	.\ecen4350_lcd_v4.c:1714: LCD_string_write(" Mismatch Error\n Try Again");
      002685 90 60 37         [24] 7945 	mov	dptr,#___str_43
      002688 75 F0 80         [24] 7946 	mov	b,#0x80
      00268B 12 10 D9         [24] 7947 	lcall	_LCD_string_write
                                   7948 ;	.\ecen4350_lcd_v4.c:1715: setCursor(0, 260);
      00268E 75 6B 04         [24] 7949 	mov	_setCursor_PARM_2,#0x04
      002691 75 6C 01         [24] 7950 	mov	(_setCursor_PARM_2 + 1),#0x01
      002694 90 00 00         [24] 7951 	mov	dptr,#0x0000
      002697 12 05 BF         [24] 7952 	lcall	_setCursor
                                   7953 ;	.\ecen4350_lcd_v4.c:1716: setColorSelect();
      00269A 12 16 A8         [24] 7954 	lcall	_setColorSelect
                                   7955 ;	.\ecen4350_lcd_v4.c:1717: LCD_string_write(" Input Size:");
      00269D 90 5F 61         [24] 7956 	mov	dptr,#___str_27
      0026A0 75 F0 80         [24] 7957 	mov	b,#0x80
      0026A3 12 10 D9         [24] 7958 	lcall	_LCD_string_write
                                   7959 ;	.\ecen4350_lcd_v4.c:1718: setColorGray();
      0026A6 12 16 CB         [24] 7960 	lcall	_setColorGray
                                   7961 ;	.\ecen4350_lcd_v4.c:1719: LCD_string_write(" _");
      0026A9 90 5F 6E         [24] 7962 	mov	dptr,#___str_28
      0026AC 75 F0 80         [24] 7963 	mov	b,#0x80
      0026AF 12 10 D9         [24] 7964 	lcall	_LCD_string_write
      0026B2 D0 02            [24] 7965 	pop	ar2
      0026B4 D0 03            [24] 7966 	pop	ar3
      0026B6 D0 05            [24] 7967 	pop	ar5
      0026B8 D0 06            [24] 7968 	pop	ar6
      0026BA D0 07            [24] 7969 	pop	ar7
      0026BC 02 25 F0         [24] 7970 	ljmp	00115$
      0026BF                       7971 00113$:
                                   7972 ;	.\ecen4350_lcd_v4.c:1721: setCursor(0, 260);
      0026BF 75 6B 04         [24] 7973 	mov	_setCursor_PARM_2,#0x04
      0026C2 75 6C 01         [24] 7974 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026C5 90 00 00         [24] 7975 	mov	dptr,#0x0000
      0026C8 C0 07            [24] 7976 	push	ar7
      0026CA C0 06            [24] 7977 	push	ar6
      0026CC C0 05            [24] 7978 	push	ar5
      0026CE C0 03            [24] 7979 	push	ar3
      0026D0 C0 02            [24] 7980 	push	ar2
      0026D2 12 05 BF         [24] 7981 	lcall	_setCursor
                                   7982 ;	.\ecen4350_lcd_v4.c:1722: setColorDefault();
      0026D5 12 16 9D         [24] 7983 	lcall	_setColorDefault
                                   7984 ;	.\ecen4350_lcd_v4.c:1723: LCD_string_write(" Input Size: ");
      0026D8 90 60 29         [24] 7985 	mov	dptr,#___str_42
      0026DB 75 F0 80         [24] 7986 	mov	b,#0x80
      0026DE 12 10 D9         [24] 7987 	lcall	_LCD_string_write
                                   7988 ;	.\ecen4350_lcd_v4.c:1724: setColorHighlight2();
      0026E1 12 16 BF         [24] 7989 	lcall	_setColorHighlight2
                                   7990 ;	.\ecen4350_lcd_v4.c:1725: write(selection);
      0026E4 78 71            [12] 7991 	mov	r0,#_selection
      0026E6 86 82            [24] 7992 	mov	dpl,@r0
      0026E8 12 10 73         [24] 7993 	lcall	_write
                                   7994 ;	.\ecen4350_lcd_v4.c:1726: invalidSize = 0;
      0026EB 78 84            [12] 7995 	mov	r0,#_move_invalidSize_65536_609
      0026ED 76 00            [12] 7996 	mov	@r0,#0x00
                                   7997 ;	.\ecen4350_lcd_v4.c:1727: setCursor(0,280);
      0026EF 75 6B 18         [24] 7998 	mov	_setCursor_PARM_2,#0x18
      0026F2 75 6C 01         [24] 7999 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026F5 90 00 00         [24] 8000 	mov	dptr,#0x0000
      0026F8 12 05 BF         [24] 8001 	lcall	_setCursor
                                   8002 ;	.\ecen4350_lcd_v4.c:1728: setColorGreen();
      0026FB 12 16 F8         [24] 8003 	lcall	_setColorGreen
                                   8004 ;	.\ecen4350_lcd_v4.c:1729: LCD_string_write(" Match Confirmed\n                ");
      0026FE 90 60 52         [24] 8005 	mov	dptr,#___str_44
      002701 75 F0 80         [24] 8006 	mov	b,#0x80
      002704 12 10 D9         [24] 8007 	lcall	_LCD_string_write
      002707 D0 02            [24] 8008 	pop	ar2
      002709 D0 03            [24] 8009 	pop	ar3
      00270B D0 05            [24] 8010 	pop	ar5
      00270D D0 06            [24] 8011 	pop	ar6
      00270F D0 07            [24] 8012 	pop	ar7
      002711 02 25 F0         [24] 8013 	ljmp	00115$
                                   8014 ;	.\ecen4350_lcd_v4.c:1735: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      002714                       8015 00140$:
      002714 78 82            [12] 8016 	mov	r0,#_move_sourceAddress_65536_609
      002716 EE               [12] 8017 	mov	a,r6
      002717 26               [12] 8018 	add	a,@r0
      002718 FE               [12] 8019 	mov	r6,a
      002719 EF               [12] 8020 	mov	a,r7
      00271A 08               [12] 8021 	inc	r0
      00271B 36               [12] 8022 	addc	a,@r0
      00271C FF               [12] 8023 	mov	r7,a
      00271D 78 82            [12] 8024 	mov	r0,#_move_sourceAddress_65536_609
      00271F 86 5D            [24] 8025 	mov	_move_i_131072_618,@r0
      002721 08               [12] 8026 	inc	r0
      002722 86 5E            [24] 8027 	mov	(_move_i_131072_618 + 1),@r0
      002724                       8028 00125$:
      002724 C3               [12] 8029 	clr	c
      002725 E5 5D            [12] 8030 	mov	a,_move_i_131072_618
      002727 9E               [12] 8031 	subb	a,r6
      002728 E5 5E            [12] 8032 	mov	a,(_move_i_131072_618 + 1)
      00272A 9F               [12] 8033 	subb	a,r7
      00272B 50 37            [24] 8034 	jnc	00121$
                                   8035 ;	.\ecen4350_lcd_v4.c:1736: d = (unsigned char __xdata*)(destAddress);
      00272D 8A 5B            [24] 8036 	mov	_move_d_65536_609,r2
      00272F 8B 5C            [24] 8037 	mov	(_move_d_65536_609 + 1),r3
                                   8038 ;	.\ecen4350_lcd_v4.c:1737: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      002731 85 5D 82         [24] 8039 	mov	dpl,_move_i_131072_618
      002734 85 5E 83         [24] 8040 	mov	dph,(_move_i_131072_618 + 1)
                                   8041 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8042 ;	assignBit
      002737 C2 B5            [12] 8043 	clr	_P3_5
                                   8044 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002739 E0               [24] 8045 	movx	a,@dptr
      00273A FD               [12] 8046 	mov	r5,a
                                   8047 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8048 ;	assignBit
      00273B D2 B5            [12] 8049 	setb	_P3_5
                                   8050 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8051 ;	assignBit
      00273D C2 B5            [12] 8052 	clr	_P3_5
                                   8053 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      00273F 85 5B 82         [24] 8054 	mov	dpl,_move_d_65536_609
      002742 85 5C 83         [24] 8055 	mov	dph,(_move_d_65536_609 + 1)
      002745 ED               [12] 8056 	mov	a,r5
      002746 F0               [24] 8057 	movx	@dptr,a
                                   8058 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8059 ;	assignBit
      002747 D2 B5            [12] 8060 	setb	_P3_5
                                   8061 ;	.\ecen4350_lcd_v4.c:1738: if (destAddress == 0xFFFF) {						// check end of RAM
      002749 BA FF 09         [24] 8062 	cjne	r2,#0xff,00119$
      00274C BB FF 06         [24] 8063 	cjne	r3,#0xff,00119$
                                   8064 ;	.\ecen4350_lcd_v4.c:1739: destAddress = 0x0000;
      00274F 7A 00            [12] 8065 	mov	r2,#0x00
      002751 7B 00            [12] 8066 	mov	r3,#0x00
      002753 80 05            [24] 8067 	sjmp	00126$
      002755                       8068 00119$:
                                   8069 ;	.\ecen4350_lcd_v4.c:1741: destAddress++;
      002755 0A               [12] 8070 	inc	r2
      002756 BA 00 01         [24] 8071 	cjne	r2,#0x00,00191$
      002759 0B               [12] 8072 	inc	r3
      00275A                       8073 00191$:
      00275A                       8074 00126$:
                                   8075 ;	.\ecen4350_lcd_v4.c:1735: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      00275A 05 5D            [12] 8076 	inc	_move_i_131072_618
      00275C E4               [12] 8077 	clr	a
      00275D B5 5D C4         [24] 8078 	cjne	a,_move_i_131072_618,00125$
      002760 05 5E            [12] 8079 	inc	(_move_i_131072_618 + 1)
      002762 80 C0            [24] 8080 	sjmp	00125$
      002764                       8081 00121$:
                                   8082 ;	.\ecen4350_lcd_v4.c:1745: setCursor(0, 300);
      002764 75 6B 2C         [24] 8083 	mov	_setCursor_PARM_2,#0x2c
      002767 75 6C 01         [24] 8084 	mov	(_setCursor_PARM_2 + 1),#0x01
      00276A 90 00 00         [24] 8085 	mov	dptr,#0x0000
      00276D 12 05 BF         [24] 8086 	lcall	_setCursor
                                   8087 ;	.\ecen4350_lcd_v4.c:1746: setColorGreen();
      002770 12 16 F8         [24] 8088 	lcall	_setColorGreen
                                   8089 ;	.\ecen4350_lcd_v4.c:1747: LCD_string_write(" Move Complete\n");
      002773 90 60 F5         [24] 8090 	mov	dptr,#___str_58
      002776 75 F0 80         [24] 8091 	mov	b,#0x80
      002779 12 10 D9         [24] 8092 	lcall	_LCD_string_write
                                   8093 ;	.\ecen4350_lcd_v4.c:1748: delay(60);
      00277C 90 00 3C         [24] 8094 	mov	dptr,#0x003c
      00277F 12 01 A9         [24] 8095 	lcall	_delay
                                   8096 ;	.\ecen4350_lcd_v4.c:1749: selection = 'null';
      002782 78 71            [12] 8097 	mov	r0,#_selection
      002784 76 6E            [12] 8098 	mov	@r0,#0x6e
                                   8099 ;	.\ecen4350_lcd_v4.c:1750: return;
                                   8100 ;	.\ecen4350_lcd_v4.c:1751: }
      002786 22               [24] 8101 	ret
                                   8102 ;------------------------------------------------------------
                                   8103 ;Allocation info for local variables in function 'edit'
                                   8104 ;------------------------------------------------------------
                                   8105 ;__1310720151              Allocated to registers 
                                   8106 ;d                         Allocated with name '_edit_d_65536_628'
                                   8107 ;__1310720152              Allocated to registers 
                                   8108 ;map_address               Allocated to registers 
                                   8109 ;d                         Allocated to registers 
                                   8110 ;__1310720154              Allocated to registers 
                                   8111 ;__1310720155              Allocated to registers 
                                   8112 ;map_address               Allocated to registers 
                                   8113 ;d                         Allocated to registers 
                                   8114 ;__2621440157              Allocated to registers 
                                   8115 ;__2621440158              Allocated to registers 
                                   8116 ;map_address               Allocated to registers 
                                   8117 ;d                         Allocated to registers r2 
                                   8118 ;__2621440160              Allocated to registers 
                                   8119 ;__2621440161              Allocated to registers 
                                   8120 ;map_address               Allocated to registers 
                                   8121 ;d                         Allocated to registers 
                                   8122 ;__2621440163              Allocated to registers 
                                   8123 ;__2621440164              Allocated to registers 
                                   8124 ;map_address               Allocated to registers 
                                   8125 ;d                         Allocated to registers 
                                   8126 ;__2621440166              Allocated to registers 
                                   8127 ;__2621440167              Allocated to registers 
                                   8128 ;map_address               Allocated to registers 
                                   8129 ;d                         Allocated to registers 
                                   8130 ;address                   Allocated to registers r5 r6 
                                   8131 ;value                     Allocated to registers r7 
                                   8132 ;exit                      Allocated with name '_edit_exit_65536_628'
                                   8133 ;invalid                   Allocated with name '_edit_invalid_65536_628'
                                   8134 ;------------------------------------------------------------
                                   8135 ;	.\ecen4350_lcd_v4.c:1753: void edit(){
                                   8136 ;	-----------------------------------------
                                   8137 ;	 function edit
                                   8138 ;	-----------------------------------------
      002787                       8139 _edit:
                                   8140 ;	.\ecen4350_lcd_v4.c:1757: __idata unsigned char exit = 1;
      002787 78 85            [12] 8141 	mov	r0,#_edit_exit_65536_628
      002789 76 01            [12] 8142 	mov	@r0,#0x01
                                   8143 ;	.\ecen4350_lcd_v4.c:1760: clearLCD();
      00278B 12 0E 5C         [24] 8144 	lcall	_clearLCD
                                   8145 ;	.\ecen4350_lcd_v4.c:1763: fillTop(GRAY);
      00278E 90 D6 BA         [24] 8146 	mov	dptr,#0xd6ba
      002791 12 0C 8F         [24] 8147 	lcall	_fillTop
                                   8148 ;	.\ecen4350_lcd_v4.c:1764: setTextSize(5);
      002794 75 82 05         [24] 8149 	mov	dpl,#0x05
      002797 12 05 D9         [24] 8150 	lcall	_setTextSize
                                   8151 ;	.\ecen4350_lcd_v4.c:1765: setColorMenu();
      00279A 12 16 D6         [24] 8152 	lcall	_setColorMenu
                                   8153 ;	.\ecen4350_lcd_v4.c:1766: setCursor(30, 0);
      00279D E4               [12] 8154 	clr	a
      00279E F5 6B            [12] 8155 	mov	_setCursor_PARM_2,a
      0027A0 F5 6C            [12] 8156 	mov	(_setCursor_PARM_2 + 1),a
      0027A2 90 00 1E         [24] 8157 	mov	dptr,#0x001e
      0027A5 12 05 BF         [24] 8158 	lcall	_setCursor
                                   8159 ;	.\ecen4350_lcd_v4.c:1767: LCD_string_write("[EDIT]\n");
      0027A8 90 61 05         [24] 8160 	mov	dptr,#___str_59
      0027AB 75 F0 80         [24] 8161 	mov	b,#0x80
      0027AE 12 10 D9         [24] 8162 	lcall	_LCD_string_write
                                   8163 ;	.\ecen4350_lcd_v4.c:1768: setTextSize(2);
      0027B1 75 82 02         [24] 8164 	mov	dpl,#0x02
      0027B4 12 05 D9         [24] 8165 	lcall	_setTextSize
                                   8166 ;	.\ecen4350_lcd_v4.c:1769: setColorDefault();
      0027B7 12 16 9D         [24] 8167 	lcall	_setColorDefault
                                   8168 ;	.\ecen4350_lcd_v4.c:1770: setCursor(0, 60);
      0027BA 75 6B 3C         [24] 8169 	mov	_setCursor_PARM_2,#0x3c
      0027BD 75 6C 00         [24] 8170 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027C0 90 00 00         [24] 8171 	mov	dptr,#0x0000
      0027C3 12 05 BF         [24] 8172 	lcall	_setCursor
                                   8173 ;	.\ecen4350_lcd_v4.c:1771: LCD_string_write(" Edit Address:");
      0027C6 90 61 0D         [24] 8174 	mov	dptr,#___str_60
      0027C9 75 F0 80         [24] 8175 	mov	b,#0x80
      0027CC 12 10 D9         [24] 8176 	lcall	_LCD_string_write
                                   8177 ;	.\ecen4350_lcd_v4.c:1772: setCursor(0, 80);
      0027CF 75 6B 50         [24] 8178 	mov	_setCursor_PARM_2,#0x50
      0027D2 75 6C 00         [24] 8179 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027D5 90 00 00         [24] 8180 	mov	dptr,#0x0000
      0027D8 12 05 BF         [24] 8181 	lcall	_setCursor
                                   8182 ;	.\ecen4350_lcd_v4.c:1773: setColorGray();
      0027DB 12 16 CB         [24] 8183 	lcall	_setColorGray
                                   8184 ;	.\ecen4350_lcd_v4.c:1774: LCD_string_write(" 0x____");
      0027DE 90 5F 22         [24] 8185 	mov	dptr,#___str_24
      0027E1 75 F0 80         [24] 8186 	mov	b,#0x80
      0027E4 12 10 D9         [24] 8187 	lcall	_LCD_string_write
                                   8188 ;	.\ecen4350_lcd_v4.c:1775: setCursor(0, 110);
      0027E7 75 6B 6E         [24] 8189 	mov	_setCursor_PARM_2,#0x6e
      0027EA 75 6C 00         [24] 8190 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027ED 90 00 00         [24] 8191 	mov	dptr,#0x0000
      0027F0 12 05 BF         [24] 8192 	lcall	_setCursor
                                   8193 ;	.\ecen4350_lcd_v4.c:1776: setColorDefault();
      0027F3 12 16 9D         [24] 8194 	lcall	_setColorDefault
                                   8195 ;	.\ecen4350_lcd_v4.c:1777: LCD_string_write(" Location Contents:\n");
      0027F6 90 61 1C         [24] 8196 	mov	dptr,#___str_61
      0027F9 75 F0 80         [24] 8197 	mov	b,#0x80
      0027FC 12 10 D9         [24] 8198 	lcall	_LCD_string_write
                                   8199 ;	.\ecen4350_lcd_v4.c:1778: setColorGray();
      0027FF 12 16 CB         [24] 8200 	lcall	_setColorGray
                                   8201 ;	.\ecen4350_lcd_v4.c:1779: LCD_string_write(" __");
      002802 90 61 31         [24] 8202 	mov	dptr,#___str_62
      002805 75 F0 80         [24] 8203 	mov	b,#0x80
      002808 12 10 D9         [24] 8204 	lcall	_LCD_string_write
                                   8205 ;	.\ecen4350_lcd_v4.c:1780: setCursor(0, 160);
      00280B 75 6B A0         [24] 8206 	mov	_setCursor_PARM_2,#0xa0
      00280E 75 6C 00         [24] 8207 	mov	(_setCursor_PARM_2 + 1),#0x00
      002811 90 00 00         [24] 8208 	mov	dptr,#0x0000
      002814 12 05 BF         [24] 8209 	lcall	_setCursor
                                   8210 ;	.\ecen4350_lcd_v4.c:1781: setColorDefault();
      002817 12 16 9D         [24] 8211 	lcall	_setColorDefault
                                   8212 ;	.\ecen4350_lcd_v4.c:1782: LCD_string_write(" Enter New Value:\n");
      00281A 90 61 35         [24] 8213 	mov	dptr,#___str_63
      00281D 75 F0 80         [24] 8214 	mov	b,#0x80
      002820 12 10 D9         [24] 8215 	lcall	_LCD_string_write
                                   8216 ;	.\ecen4350_lcd_v4.c:1783: setColorGray();
      002823 12 16 CB         [24] 8217 	lcall	_setColorGray
                                   8218 ;	.\ecen4350_lcd_v4.c:1784: LCD_string_write(" __");
      002826 90 61 31         [24] 8219 	mov	dptr,#___str_62
      002829 75 F0 80         [24] 8220 	mov	b,#0x80
      00282C 12 10 D9         [24] 8221 	lcall	_LCD_string_write
                                   8222 ;	.\ecen4350_lcd_v4.c:1785: setCursor(0,210);
      00282F 75 6B D2         [24] 8223 	mov	_setCursor_PARM_2,#0xd2
      002832 75 6C 00         [24] 8224 	mov	(_setCursor_PARM_2 + 1),#0x00
      002835 90 00 00         [24] 8225 	mov	dptr,#0x0000
      002838 12 05 BF         [24] 8226 	lcall	_setCursor
                                   8227 ;	.\ecen4350_lcd_v4.c:1786: setColorDefault();
      00283B 12 16 9D         [24] 8228 	lcall	_setColorDefault
                                   8229 ;	.\ecen4350_lcd_v4.c:1787: LCD_string_write(" Choose Next Action:\n");
      00283E 90 61 48         [24] 8230 	mov	dptr,#___str_64
      002841 75 F0 80         [24] 8231 	mov	b,#0x80
      002844 12 10 D9         [24] 8232 	lcall	_LCD_string_write
                                   8233 ;	.\ecen4350_lcd_v4.c:1788: setColorGray();
      002847 12 16 CB         [24] 8234 	lcall	_setColorGray
                                   8235 ;	.\ecen4350_lcd_v4.c:1789: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      00284A 90 61 5E         [24] 8236 	mov	dptr,#___str_65
      00284D 75 F0 80         [24] 8237 	mov	b,#0x80
      002850 12 10 D9         [24] 8238 	lcall	_LCD_string_write
                                   8239 ;	.\ecen4350_lcd_v4.c:1790: LCD_string_write("  <0> Exit");
      002853 90 61 84         [24] 8240 	mov	dptr,#___str_66
      002856 75 F0 80         [24] 8241 	mov	b,#0x80
      002859 12 10 D9         [24] 8242 	lcall	_LCD_string_write
                                   8243 ;	.\ecen4350_lcd_v4.c:1797: setColorSelect();
      00285C 12 16 A8         [24] 8244 	lcall	_setColorSelect
                                   8245 ;	.\ecen4350_lcd_v4.c:1798: setCursor(0, 60);
      00285F 75 6B 3C         [24] 8246 	mov	_setCursor_PARM_2,#0x3c
      002862 75 6C 00         [24] 8247 	mov	(_setCursor_PARM_2 + 1),#0x00
      002865 90 00 00         [24] 8248 	mov	dptr,#0x0000
      002868 12 05 BF         [24] 8249 	lcall	_setCursor
                                   8250 ;	.\ecen4350_lcd_v4.c:1799: LCD_string_write(" Edit Address:");
      00286B 90 61 0D         [24] 8251 	mov	dptr,#___str_60
      00286E 75 F0 80         [24] 8252 	mov	b,#0x80
      002871 12 10 D9         [24] 8253 	lcall	_LCD_string_write
                                   8254 ;	.\ecen4350_lcd_v4.c:1800: setCursor(0, 80);
      002874 75 6B 50         [24] 8255 	mov	_setCursor_PARM_2,#0x50
      002877 75 6C 00         [24] 8256 	mov	(_setCursor_PARM_2 + 1),#0x00
      00287A 90 00 00         [24] 8257 	mov	dptr,#0x0000
      00287D 12 05 BF         [24] 8258 	lcall	_setCursor
                                   8259 ;	.\ecen4350_lcd_v4.c:1801: LCD_string_write(" ");
      002880 90 5F 84         [24] 8260 	mov	dptr,#___str_30
      002883 75 F0 80         [24] 8261 	mov	b,#0x80
      002886 12 10 D9         [24] 8262 	lcall	_LCD_string_write
                                   8263 ;	.\ecen4350_lcd_v4.c:1802: setColorHighlight1();
      002889 12 16 B3         [24] 8264 	lcall	_setColorHighlight1
                                   8265 ;	.\ecen4350_lcd_v4.c:1803: LCD_string_write("0x");
      00288C 90 5E 59         [24] 8266 	mov	dptr,#___str_2
      00288F 75 F0 80         [24] 8267 	mov	b,#0x80
      002892 12 10 D9         [24] 8268 	lcall	_LCD_string_write
                                   8269 ;	.\ecen4350_lcd_v4.c:1804: address = inputAddress();		// input 16-bit address and store in memory
      002895 12 17 0E         [24] 8270 	lcall	_inputAddress
      002898 AD 82            [24] 8271 	mov	r5,dpl
      00289A AE 83            [24] 8272 	mov	r6,dph
                                   8273 ;	.\ecen4350_lcd_v4.c:1805: d = (unsigned char __xdata*)address;
      00289C 8D 03            [24] 8274 	mov	ar3,r5
      00289E 8E 04            [24] 8275 	mov	ar4,r6
                                   8276 ;	.\ecen4350_lcd_v4.c:1808: setColorDefault();
      0028A0 C0 06            [24] 8277 	push	ar6
      0028A2 C0 05            [24] 8278 	push	ar5
      0028A4 C0 04            [24] 8279 	push	ar4
      0028A6 C0 03            [24] 8280 	push	ar3
      0028A8 12 16 9D         [24] 8281 	lcall	_setColorDefault
                                   8282 ;	.\ecen4350_lcd_v4.c:1809: setCursor(0, 60);
      0028AB 75 6B 3C         [24] 8283 	mov	_setCursor_PARM_2,#0x3c
      0028AE 75 6C 00         [24] 8284 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028B1 90 00 00         [24] 8285 	mov	dptr,#0x0000
      0028B4 12 05 BF         [24] 8286 	lcall	_setCursor
                                   8287 ;	.\ecen4350_lcd_v4.c:1810: LCD_string_write(" Edit Address:");
      0028B7 90 61 0D         [24] 8288 	mov	dptr,#___str_60
      0028BA 75 F0 80         [24] 8289 	mov	b,#0x80
      0028BD 12 10 D9         [24] 8290 	lcall	_LCD_string_write
                                   8291 ;	.\ecen4350_lcd_v4.c:1811: setCursor(0, 80);
      0028C0 75 6B 50         [24] 8292 	mov	_setCursor_PARM_2,#0x50
      0028C3 75 6C 00         [24] 8293 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028C6 90 00 00         [24] 8294 	mov	dptr,#0x0000
      0028C9 12 05 BF         [24] 8295 	lcall	_setCursor
                                   8296 ;	.\ecen4350_lcd_v4.c:1812: LCD_string_write(" ");
      0028CC 90 5F 84         [24] 8297 	mov	dptr,#___str_30
      0028CF 75 F0 80         [24] 8298 	mov	b,#0x80
      0028D2 12 10 D9         [24] 8299 	lcall	_LCD_string_write
                                   8300 ;	.\ecen4350_lcd_v4.c:1813: setColorHighlight2();
      0028D5 12 16 BF         [24] 8301 	lcall	_setColorHighlight2
                                   8302 ;	.\ecen4350_lcd_v4.c:1814: LCD_string_write("0x");
      0028D8 90 5E 59         [24] 8303 	mov	dptr,#___str_2
      0028DB 75 F0 80         [24] 8304 	mov	b,#0x80
      0028DE 12 10 D9         [24] 8305 	lcall	_LCD_string_write
      0028E1 D0 03            [24] 8306 	pop	ar3
      0028E3 D0 04            [24] 8307 	pop	ar4
      0028E5 D0 05            [24] 8308 	pop	ar5
      0028E7 D0 06            [24] 8309 	pop	ar6
                                   8310 ;	.\ecen4350_lcd_v4.c:1815: print16Hex(address);		// print 16-bit address from stored memory
      0028E9 8D 82            [24] 8311 	mov	dpl,r5
      0028EB 8E 83            [24] 8312 	mov	dph,r6
      0028ED C0 06            [24] 8313 	push	ar6
      0028EF C0 05            [24] 8314 	push	ar5
      0028F1 C0 04            [24] 8315 	push	ar4
      0028F3 C0 03            [24] 8316 	push	ar3
      0028F5 12 15 C1         [24] 8317 	lcall	_print16Hex
                                   8318 ;	.\ecen4350_lcd_v4.c:1818: setCursor(0, 110);
      0028F8 75 6B 6E         [24] 8319 	mov	_setCursor_PARM_2,#0x6e
      0028FB 75 6C 00         [24] 8320 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028FE 90 00 00         [24] 8321 	mov	dptr,#0x0000
      002901 12 05 BF         [24] 8322 	lcall	_setCursor
                                   8323 ;	.\ecen4350_lcd_v4.c:1819: setColorDefault();
      002904 12 16 9D         [24] 8324 	lcall	_setColorDefault
                                   8325 ;	.\ecen4350_lcd_v4.c:1820: LCD_string_write("\n ");
      002907 90 61 8F         [24] 8326 	mov	dptr,#___str_67
      00290A 75 F0 80         [24] 8327 	mov	b,#0x80
      00290D 12 10 D9         [24] 8328 	lcall	_LCD_string_write
                                   8329 ;	.\ecen4350_lcd_v4.c:1821: setColorHighlight2();
      002910 12 16 BF         [24] 8330 	lcall	_setColorHighlight2
      002913 D0 03            [24] 8331 	pop	ar3
      002915 D0 04            [24] 8332 	pop	ar4
                                   8333 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8334 ;	assignBit
      002917 C2 B5            [12] 8335 	clr	_P3_5
                                   8336 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002919 8B 82            [24] 8337 	mov	dpl,r3
      00291B 8C 83            [24] 8338 	mov	dph,r4
      00291D E0               [24] 8339 	movx	a,@dptr
      00291E F5 82            [12] 8340 	mov	dpl,a
                                   8341 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8342 ;	assignBit
      002920 D2 B5            [12] 8343 	setb	_P3_5
                                   8344 ;	.\ecen4350_lcd_v4.c:1822: print8Hex(ramRead8(d));
      002922 C0 04            [24] 8345 	push	ar4
      002924 C0 03            [24] 8346 	push	ar3
      002926 12 15 AA         [24] 8347 	lcall	_print8Hex
                                   8348 ;	.\ecen4350_lcd_v4.c:1825: setCursor(0, 160);
      002929 75 6B A0         [24] 8349 	mov	_setCursor_PARM_2,#0xa0
      00292C 75 6C 00         [24] 8350 	mov	(_setCursor_PARM_2 + 1),#0x00
      00292F 90 00 00         [24] 8351 	mov	dptr,#0x0000
      002932 12 05 BF         [24] 8352 	lcall	_setCursor
                                   8353 ;	.\ecen4350_lcd_v4.c:1826: setColorSelect();
      002935 12 16 A8         [24] 8354 	lcall	_setColorSelect
                                   8355 ;	.\ecen4350_lcd_v4.c:1827: LCD_string_write(" Enter New Value:\n ");
      002938 90 61 92         [24] 8356 	mov	dptr,#___str_68
      00293B 75 F0 80         [24] 8357 	mov	b,#0x80
      00293E 12 10 D9         [24] 8358 	lcall	_LCD_string_write
                                   8359 ;	.\ecen4350_lcd_v4.c:1828: setColorHighlight1();
      002941 12 16 B3         [24] 8360 	lcall	_setColorHighlight1
                                   8361 ;	.\ecen4350_lcd_v4.c:1829: selection = keyDetect();
      002944 12 11 F7         [24] 8362 	lcall	_keyDetect
      002947 AA 82            [24] 8363 	mov	r2,dpl
      002949 78 71            [12] 8364 	mov	r0,#_selection
      00294B A6 02            [24] 8365 	mov	@r0,ar2
                                   8366 ;	.\ecen4350_lcd_v4.c:1830: write(selection);
      00294D 8A 82            [24] 8367 	mov	dpl,r2
      00294F 12 10 73         [24] 8368 	lcall	_write
                                   8369 ;	.\ecen4350_lcd_v4.c:1831: selection = ASCIItoHex(selection);
      002952 78 71            [12] 8370 	mov	r0,#_selection
      002954 86 82            [24] 8371 	mov	dpl,@r0
      002956 12 14 65         [24] 8372 	lcall	_ASCIItoHex
      002959 AA 82            [24] 8373 	mov	r2,dpl
      00295B 78 71            [12] 8374 	mov	r0,#_selection
      00295D A6 02            [24] 8375 	mov	@r0,ar2
                                   8376 ;	.\ecen4350_lcd_v4.c:1832: value |= selection * 16;
      00295F EA               [12] 8377 	mov	a,r2
      002960 C4               [12] 8378 	swap	a
      002961 54 F0            [12] 8379 	anl	a,#0xf0
      002963 FA               [12] 8380 	mov	r2,a
                                   8381 ;	.\ecen4350_lcd_v4.c:1833: selection = keyDetect();
      002964 C0 02            [24] 8382 	push	ar2
      002966 12 11 F7         [24] 8383 	lcall	_keyDetect
      002969 AF 82            [24] 8384 	mov	r7,dpl
      00296B 78 71            [12] 8385 	mov	r0,#_selection
      00296D A6 07            [24] 8386 	mov	@r0,ar7
                                   8387 ;	.\ecen4350_lcd_v4.c:1834: write(selection);
      00296F 8F 82            [24] 8388 	mov	dpl,r7
      002971 12 10 73         [24] 8389 	lcall	_write
                                   8390 ;	.\ecen4350_lcd_v4.c:1835: selection = ASCIItoHex(selection);
      002974 78 71            [12] 8391 	mov	r0,#_selection
      002976 86 82            [24] 8392 	mov	dpl,@r0
      002978 12 14 65         [24] 8393 	lcall	_ASCIItoHex
      00297B AF 82            [24] 8394 	mov	r7,dpl
      00297D D0 02            [24] 8395 	pop	ar2
      00297F D0 03            [24] 8396 	pop	ar3
      002981 D0 04            [24] 8397 	pop	ar4
      002983 D0 05            [24] 8398 	pop	ar5
      002985 D0 06            [24] 8399 	pop	ar6
      002987 78 71            [12] 8400 	mov	r0,#_selection
      002989 A6 07            [24] 8401 	mov	@r0,ar7
                                   8402 ;	.\ecen4350_lcd_v4.c:1836: value |= selection;
      00298B EA               [12] 8403 	mov	a,r2
      00298C 42 07            [12] 8404 	orl	ar7,a
                                   8405 ;	.\ecen4350_lcd_v4.c:1839: setColorDefault();
      00298E C0 07            [24] 8406 	push	ar7
      002990 C0 06            [24] 8407 	push	ar6
      002992 C0 05            [24] 8408 	push	ar5
      002994 C0 04            [24] 8409 	push	ar4
      002996 C0 03            [24] 8410 	push	ar3
      002998 12 16 9D         [24] 8411 	lcall	_setColorDefault
                                   8412 ;	.\ecen4350_lcd_v4.c:1840: setCursor(0, 160);
      00299B 75 6B A0         [24] 8413 	mov	_setCursor_PARM_2,#0xa0
      00299E 75 6C 00         [24] 8414 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029A1 90 00 00         [24] 8415 	mov	dptr,#0x0000
      0029A4 12 05 BF         [24] 8416 	lcall	_setCursor
                                   8417 ;	.\ecen4350_lcd_v4.c:1841: LCD_string_write(" Enter New Value:\n ");
      0029A7 90 61 92         [24] 8418 	mov	dptr,#___str_68
      0029AA 75 F0 80         [24] 8419 	mov	b,#0x80
      0029AD 12 10 D9         [24] 8420 	lcall	_LCD_string_write
                                   8421 ;	.\ecen4350_lcd_v4.c:1842: setColorHighlight2();
      0029B0 12 16 BF         [24] 8422 	lcall	_setColorHighlight2
      0029B3 D0 03            [24] 8423 	pop	ar3
      0029B5 D0 04            [24] 8424 	pop	ar4
      0029B7 D0 05            [24] 8425 	pop	ar5
      0029B9 D0 06            [24] 8426 	pop	ar6
      0029BB D0 07            [24] 8427 	pop	ar7
                                   8428 ;	.\ecen4350_lcd_v4.c:1843: print8Hex(value);
      0029BD 8F 82            [24] 8429 	mov	dpl,r7
      0029BF C0 07            [24] 8430 	push	ar7
      0029C1 C0 06            [24] 8431 	push	ar6
      0029C3 C0 05            [24] 8432 	push	ar5
      0029C5 C0 04            [24] 8433 	push	ar4
      0029C7 C0 03            [24] 8434 	push	ar3
      0029C9 12 15 AA         [24] 8435 	lcall	_print8Hex
      0029CC D0 03            [24] 8436 	pop	ar3
      0029CE D0 04            [24] 8437 	pop	ar4
      0029D0 D0 05            [24] 8438 	pop	ar5
      0029D2 D0 06            [24] 8439 	pop	ar6
      0029D4 D0 07            [24] 8440 	pop	ar7
                                   8441 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8442 ;	assignBit
      0029D6 C2 B5            [12] 8443 	clr	_P3_5
                                   8444 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      0029D8 8B 82            [24] 8445 	mov	dpl,r3
      0029DA 8C 83            [24] 8446 	mov	dph,r4
      0029DC EF               [12] 8447 	mov	a,r7
      0029DD F0               [24] 8448 	movx	@dptr,a
                                   8449 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8450 ;	assignBit
      0029DE D2 B5            [12] 8451 	setb	_P3_5
                                   8452 ;	.\ecen4350_lcd_v4.c:1848: setCursor(0, 210);
      0029E0 75 6B D2         [24] 8453 	mov	_setCursor_PARM_2,#0xd2
      0029E3 75 6C 00         [24] 8454 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029E6 90 00 00         [24] 8455 	mov	dptr,#0x0000
      0029E9 C0 06            [24] 8456 	push	ar6
      0029EB C0 05            [24] 8457 	push	ar5
      0029ED 12 05 BF         [24] 8458 	lcall	_setCursor
                                   8459 ;	.\ecen4350_lcd_v4.c:1849: setColorSelect();
      0029F0 12 16 A8         [24] 8460 	lcall	_setColorSelect
                                   8461 ;	.\ecen4350_lcd_v4.c:1850: LCD_string_write(" Choose Next Action:\n");
      0029F3 90 61 48         [24] 8462 	mov	dptr,#___str_64
      0029F6 75 F0 80         [24] 8463 	mov	b,#0x80
      0029F9 12 10 D9         [24] 8464 	lcall	_LCD_string_write
                                   8465 ;	.\ecen4350_lcd_v4.c:1851: setColorWhite();
      0029FC 12 16 ED         [24] 8466 	lcall	_setColorWhite
                                   8467 ;	.\ecen4350_lcd_v4.c:1852: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      0029FF 90 61 5E         [24] 8468 	mov	dptr,#___str_65
      002A02 75 F0 80         [24] 8469 	mov	b,#0x80
      002A05 12 10 D9         [24] 8470 	lcall	_LCD_string_write
                                   8471 ;	.\ecen4350_lcd_v4.c:1853: LCD_string_write("  <0> Exit");
      002A08 90 61 84         [24] 8472 	mov	dptr,#___str_66
      002A0B 75 F0 80         [24] 8473 	mov	b,#0x80
      002A0E 12 10 D9         [24] 8474 	lcall	_LCD_string_write
      002A11 D0 05            [24] 8475 	pop	ar5
      002A13 D0 06            [24] 8476 	pop	ar6
                                   8477 ;	.\ecen4350_lcd_v4.c:1859: while(exit){
      002A15                       8478 00109$:
      002A15 78 85            [12] 8479 	mov	r0,#_edit_exit_65536_628
      002A17 E6               [12] 8480 	mov	a,@r0
      002A18 70 01            [24] 8481 	jnz	00150$
      002A1A 22               [24] 8482 	ret
      002A1B                       8483 00150$:
                                   8484 ;	.\ecen4350_lcd_v4.c:1860: selection = keyDetect();
      002A1B C0 06            [24] 8485 	push	ar6
      002A1D C0 05            [24] 8486 	push	ar5
      002A1F 12 11 F7         [24] 8487 	lcall	_keyDetect
      002A22 AF 82            [24] 8488 	mov	r7,dpl
      002A24 D0 05            [24] 8489 	pop	ar5
      002A26 D0 06            [24] 8490 	pop	ar6
      002A28 78 71            [12] 8491 	mov	r0,#_selection
      002A2A A6 07            [24] 8492 	mov	@r0,ar7
                                   8493 ;	.\ecen4350_lcd_v4.c:1861: invalid = 1;
      002A2C 78 86            [12] 8494 	mov	r0,#_edit_invalid_65536_628
      002A2E 76 01            [12] 8495 	mov	@r0,#0x01
                                   8496 ;	.\ecen4350_lcd_v4.c:1862: if (selection == '1') {		/* Highlight choice and gray out others */
      002A30 BF 31 02         [24] 8497 	cjne	r7,#0x31,00151$
      002A33 80 03            [24] 8498 	sjmp	00152$
      002A35                       8499 00151$:
      002A35 02 2C 14         [24] 8500 	ljmp	00102$
      002A38                       8501 00152$:
                                   8502 ;	.\ecen4350_lcd_v4.c:1863: invalid = 0;
      002A38 78 86            [12] 8503 	mov	r0,#_edit_invalid_65536_628
      002A3A 76 00            [12] 8504 	mov	@r0,#0x00
                                   8505 ;	.\ecen4350_lcd_v4.c:1865: setCursor(0, 210);
      002A3C 75 6B D2         [24] 8506 	mov	_setCursor_PARM_2,#0xd2
      002A3F 75 6C 00         [24] 8507 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A42 90 00 00         [24] 8508 	mov	dptr,#0x0000
      002A45 C0 06            [24] 8509 	push	ar6
      002A47 C0 05            [24] 8510 	push	ar5
      002A49 12 05 BF         [24] 8511 	lcall	_setCursor
                                   8512 ;	.\ecen4350_lcd_v4.c:1866: setColorDefault();
      002A4C 12 16 9D         [24] 8513 	lcall	_setColorDefault
                                   8514 ;	.\ecen4350_lcd_v4.c:1867: LCD_string_write("\n  ");
      002A4F 90 5F CE         [24] 8515 	mov	dptr,#___str_36
      002A52 75 F0 80         [24] 8516 	mov	b,#0x80
      002A55 12 10 D9         [24] 8517 	lcall	_LCD_string_write
                                   8518 ;	.\ecen4350_lcd_v4.c:1868: setColorHighlight2();
      002A58 12 16 BF         [24] 8519 	lcall	_setColorHighlight2
                                   8520 ;	.\ecen4350_lcd_v4.c:1869: LCD_string_write("<1> Next Address\n");
      002A5B 90 61 A6         [24] 8521 	mov	dptr,#___str_69
      002A5E 75 F0 80         [24] 8522 	mov	b,#0x80
      002A61 12 10 D9         [24] 8523 	lcall	_LCD_string_write
                                   8524 ;	.\ecen4350_lcd_v4.c:1870: setColorGray();
      002A64 12 16 CB         [24] 8525 	lcall	_setColorGray
                                   8526 ;	.\ecen4350_lcd_v4.c:1871: LCD_string_write("\n\n               ");
      002A67 90 61 B8         [24] 8527 	mov	dptr,#___str_70
      002A6A 75 F0 80         [24] 8528 	mov	b,#0x80
      002A6D 12 10 D9         [24] 8529 	lcall	_LCD_string_write
                                   8530 ;	.\ecen4350_lcd_v4.c:1872: delay(60);
      002A70 90 00 3C         [24] 8531 	mov	dptr,#0x003c
      002A73 12 01 A9         [24] 8532 	lcall	_delay
                                   8533 ;	.\ecen4350_lcd_v4.c:1875: setCursor(0, 80);
      002A76 75 6B 50         [24] 8534 	mov	_setCursor_PARM_2,#0x50
      002A79 75 6C 00         [24] 8535 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A7C 90 00 00         [24] 8536 	mov	dptr,#0x0000
      002A7F 12 05 BF         [24] 8537 	lcall	_setCursor
                                   8538 ;	.\ecen4350_lcd_v4.c:1876: setColorGray();
      002A82 12 16 CB         [24] 8539 	lcall	_setColorGray
                                   8540 ;	.\ecen4350_lcd_v4.c:1877: LCD_string_write(" 0x____");
      002A85 90 5F 22         [24] 8541 	mov	dptr,#___str_24
      002A88 75 F0 80         [24] 8542 	mov	b,#0x80
      002A8B 12 10 D9         [24] 8543 	lcall	_LCD_string_write
                                   8544 ;	.\ecen4350_lcd_v4.c:1878: setCursor(0, 110);
      002A8E 75 6B 6E         [24] 8545 	mov	_setCursor_PARM_2,#0x6e
      002A91 75 6C 00         [24] 8546 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A94 90 00 00         [24] 8547 	mov	dptr,#0x0000
      002A97 12 05 BF         [24] 8548 	lcall	_setCursor
                                   8549 ;	.\ecen4350_lcd_v4.c:1879: LCD_string_write("\n __");
      002A9A 90 61 CA         [24] 8550 	mov	dptr,#___str_71
      002A9D 75 F0 80         [24] 8551 	mov	b,#0x80
      002AA0 12 10 D9         [24] 8552 	lcall	_LCD_string_write
                                   8553 ;	.\ecen4350_lcd_v4.c:1880: setCursor(0, 160);
      002AA3 75 6B A0         [24] 8554 	mov	_setCursor_PARM_2,#0xa0
      002AA6 75 6C 00         [24] 8555 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AA9 90 00 00         [24] 8556 	mov	dptr,#0x0000
      002AAC 12 05 BF         [24] 8557 	lcall	_setCursor
                                   8558 ;	.\ecen4350_lcd_v4.c:1881: LCD_string_write("\n __");
      002AAF 90 61 CA         [24] 8559 	mov	dptr,#___str_71
      002AB2 75 F0 80         [24] 8560 	mov	b,#0x80
      002AB5 12 10 D9         [24] 8561 	lcall	_LCD_string_write
                                   8562 ;	.\ecen4350_lcd_v4.c:1882: setCursor(0, 210);
      002AB8 75 6B D2         [24] 8563 	mov	_setCursor_PARM_2,#0xd2
      002ABB 75 6C 00         [24] 8564 	mov	(_setCursor_PARM_2 + 1),#0x00
      002ABE 90 00 00         [24] 8565 	mov	dptr,#0x0000
      002AC1 12 05 BF         [24] 8566 	lcall	_setCursor
                                   8567 ;	.\ecen4350_lcd_v4.c:1883: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002AC4 90 61 CF         [24] 8568 	mov	dptr,#___str_72
      002AC7 75 F0 80         [24] 8569 	mov	b,#0x80
      002ACA 12 10 D9         [24] 8570 	lcall	_LCD_string_write
      002ACD D0 05            [24] 8571 	pop	ar5
      002ACF D0 06            [24] 8572 	pop	ar6
                                   8573 ;	.\ecen4350_lcd_v4.c:1886: address++;
      002AD1 0D               [12] 8574 	inc	r5
      002AD2 BD 00 01         [24] 8575 	cjne	r5,#0x00,00153$
      002AD5 0E               [12] 8576 	inc	r6
      002AD6                       8577 00153$:
                                   8578 ;	.\ecen4350_lcd_v4.c:1887: d = (unsigned char __xdata*)address;
      002AD6 8D 5F            [24] 8579 	mov	_edit_d_65536_628,r5
      002AD8 8E 60            [24] 8580 	mov	(_edit_d_65536_628 + 1),r6
                                   8581 ;	.\ecen4350_lcd_v4.c:1888: setCursor(0, 80);
      002ADA 75 6B 50         [24] 8582 	mov	_setCursor_PARM_2,#0x50
      002ADD 75 6C 00         [24] 8583 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AE0 90 00 00         [24] 8584 	mov	dptr,#0x0000
      002AE3 C0 06            [24] 8585 	push	ar6
      002AE5 C0 05            [24] 8586 	push	ar5
      002AE7 12 05 BF         [24] 8587 	lcall	_setCursor
                                   8588 ;	.\ecen4350_lcd_v4.c:1889: LCD_string_write(" ");
      002AEA 90 5F 84         [24] 8589 	mov	dptr,#___str_30
      002AED 75 F0 80         [24] 8590 	mov	b,#0x80
      002AF0 12 10 D9         [24] 8591 	lcall	_LCD_string_write
                                   8592 ;	.\ecen4350_lcd_v4.c:1890: setColorHighlight2();
      002AF3 12 16 BF         [24] 8593 	lcall	_setColorHighlight2
                                   8594 ;	.\ecen4350_lcd_v4.c:1891: LCD_string_write("0x");
      002AF6 90 5E 59         [24] 8595 	mov	dptr,#___str_2
      002AF9 75 F0 80         [24] 8596 	mov	b,#0x80
      002AFC 12 10 D9         [24] 8597 	lcall	_LCD_string_write
      002AFF D0 05            [24] 8598 	pop	ar5
      002B01 D0 06            [24] 8599 	pop	ar6
                                   8600 ;	.\ecen4350_lcd_v4.c:1892: print16Hex(address);		// print 16-bit address from stored memory
      002B03 8D 82            [24] 8601 	mov	dpl,r5
      002B05 8E 83            [24] 8602 	mov	dph,r6
      002B07 C0 06            [24] 8603 	push	ar6
      002B09 C0 05            [24] 8604 	push	ar5
      002B0B 12 15 C1         [24] 8605 	lcall	_print16Hex
                                   8606 ;	.\ecen4350_lcd_v4.c:1895: setCursor(0, 110);
      002B0E 75 6B 6E         [24] 8607 	mov	_setCursor_PARM_2,#0x6e
      002B11 75 6C 00         [24] 8608 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B14 90 00 00         [24] 8609 	mov	dptr,#0x0000
      002B17 12 05 BF         [24] 8610 	lcall	_setCursor
                                   8611 ;	.\ecen4350_lcd_v4.c:1896: setColorDefault();
      002B1A 12 16 9D         [24] 8612 	lcall	_setColorDefault
                                   8613 ;	.\ecen4350_lcd_v4.c:1897: LCD_string_write("\n ");
      002B1D 90 61 8F         [24] 8614 	mov	dptr,#___str_67
      002B20 75 F0 80         [24] 8615 	mov	b,#0x80
      002B23 12 10 D9         [24] 8616 	lcall	_LCD_string_write
                                   8617 ;	.\ecen4350_lcd_v4.c:1898: setColorHighlight2();
      002B26 12 16 BF         [24] 8618 	lcall	_setColorHighlight2
                                   8619 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8620 ;	assignBit
      002B29 C2 B5            [12] 8621 	clr	_P3_5
                                   8622 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002B2B 85 5F 82         [24] 8623 	mov	dpl,_edit_d_65536_628
      002B2E 85 60 83         [24] 8624 	mov	dph,(_edit_d_65536_628 + 1)
      002B31 E0               [24] 8625 	movx	a,@dptr
      002B32 FA               [12] 8626 	mov	r2,a
                                   8627 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8628 ;	assignBit
      002B33 D2 B5            [12] 8629 	setb	_P3_5
                                   8630 ;	.\ecen4350_lcd_v4.c:1899: print8Hex(ramRead8(d));
      002B35 8A 82            [24] 8631 	mov	dpl,r2
      002B37 12 15 AA         [24] 8632 	lcall	_print8Hex
                                   8633 ;	.\ecen4350_lcd_v4.c:1902: setCursor(0, 160);
      002B3A 75 6B A0         [24] 8634 	mov	_setCursor_PARM_2,#0xa0
      002B3D 75 6C 00         [24] 8635 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B40 90 00 00         [24] 8636 	mov	dptr,#0x0000
      002B43 12 05 BF         [24] 8637 	lcall	_setCursor
                                   8638 ;	.\ecen4350_lcd_v4.c:1903: setColorSelect();
      002B46 12 16 A8         [24] 8639 	lcall	_setColorSelect
                                   8640 ;	.\ecen4350_lcd_v4.c:1904: LCD_string_write(" Enter New Value:\n ");
      002B49 90 61 92         [24] 8641 	mov	dptr,#___str_68
      002B4C 75 F0 80         [24] 8642 	mov	b,#0x80
      002B4F 12 10 D9         [24] 8643 	lcall	_LCD_string_write
                                   8644 ;	.\ecen4350_lcd_v4.c:1905: setColorHighlight1();
      002B52 12 16 B3         [24] 8645 	lcall	_setColorHighlight1
                                   8646 ;	.\ecen4350_lcd_v4.c:1906: selection = keyDetect();
      002B55 12 11 F7         [24] 8647 	lcall	_keyDetect
      002B58 AA 82            [24] 8648 	mov	r2,dpl
      002B5A 78 71            [12] 8649 	mov	r0,#_selection
      002B5C A6 02            [24] 8650 	mov	@r0,ar2
                                   8651 ;	.\ecen4350_lcd_v4.c:1907: write(selection);
      002B5E 8A 82            [24] 8652 	mov	dpl,r2
      002B60 12 10 73         [24] 8653 	lcall	_write
                                   8654 ;	.\ecen4350_lcd_v4.c:1908: selection = ASCIItoHex(selection);
      002B63 78 71            [12] 8655 	mov	r0,#_selection
      002B65 86 82            [24] 8656 	mov	dpl,@r0
      002B67 12 14 65         [24] 8657 	lcall	_ASCIItoHex
      002B6A AA 82            [24] 8658 	mov	r2,dpl
      002B6C 78 71            [12] 8659 	mov	r0,#_selection
      002B6E A6 02            [24] 8660 	mov	@r0,ar2
                                   8661 ;	.\ecen4350_lcd_v4.c:1909: value |= selection * 16;
      002B70 EA               [12] 8662 	mov	a,r2
      002B71 C4               [12] 8663 	swap	a
      002B72 54 F0            [12] 8664 	anl	a,#0xf0
      002B74 FA               [12] 8665 	mov	r2,a
                                   8666 ;	.\ecen4350_lcd_v4.c:1910: selection = keyDetect();
      002B75 C0 02            [24] 8667 	push	ar2
      002B77 12 11 F7         [24] 8668 	lcall	_keyDetect
      002B7A AF 82            [24] 8669 	mov	r7,dpl
      002B7C 78 71            [12] 8670 	mov	r0,#_selection
      002B7E A6 07            [24] 8671 	mov	@r0,ar7
                                   8672 ;	.\ecen4350_lcd_v4.c:1911: write(selection);
      002B80 8F 82            [24] 8673 	mov	dpl,r7
      002B82 12 10 73         [24] 8674 	lcall	_write
                                   8675 ;	.\ecen4350_lcd_v4.c:1912: selection = ASCIItoHex(selection);
      002B85 78 71            [12] 8676 	mov	r0,#_selection
      002B87 86 82            [24] 8677 	mov	dpl,@r0
      002B89 12 14 65         [24] 8678 	lcall	_ASCIItoHex
      002B8C AF 82            [24] 8679 	mov	r7,dpl
      002B8E D0 02            [24] 8680 	pop	ar2
      002B90 D0 05            [24] 8681 	pop	ar5
      002B92 D0 06            [24] 8682 	pop	ar6
      002B94 78 71            [12] 8683 	mov	r0,#_selection
      002B96 A6 07            [24] 8684 	mov	@r0,ar7
                                   8685 ;	.\ecen4350_lcd_v4.c:1913: value |= selection;
      002B98 EA               [12] 8686 	mov	a,r2
      002B99 42 07            [12] 8687 	orl	ar7,a
                                   8688 ;	.\ecen4350_lcd_v4.c:1916: setColorDefault();
      002B9B C0 07            [24] 8689 	push	ar7
      002B9D C0 06            [24] 8690 	push	ar6
      002B9F C0 05            [24] 8691 	push	ar5
      002BA1 12 16 9D         [24] 8692 	lcall	_setColorDefault
                                   8693 ;	.\ecen4350_lcd_v4.c:1917: setCursor(0, 160);
      002BA4 75 6B A0         [24] 8694 	mov	_setCursor_PARM_2,#0xa0
      002BA7 75 6C 00         [24] 8695 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BAA 90 00 00         [24] 8696 	mov	dptr,#0x0000
      002BAD 12 05 BF         [24] 8697 	lcall	_setCursor
                                   8698 ;	.\ecen4350_lcd_v4.c:1918: LCD_string_write(" Enter New Value:\n ");
      002BB0 90 61 92         [24] 8699 	mov	dptr,#___str_68
      002BB3 75 F0 80         [24] 8700 	mov	b,#0x80
      002BB6 12 10 D9         [24] 8701 	lcall	_LCD_string_write
                                   8702 ;	.\ecen4350_lcd_v4.c:1919: setColorHighlight2();
      002BB9 12 16 BF         [24] 8703 	lcall	_setColorHighlight2
      002BBC D0 05            [24] 8704 	pop	ar5
      002BBE D0 06            [24] 8705 	pop	ar6
      002BC0 D0 07            [24] 8706 	pop	ar7
                                   8707 ;	.\ecen4350_lcd_v4.c:1920: print8Hex(value);
      002BC2 8F 82            [24] 8708 	mov	dpl,r7
      002BC4 C0 07            [24] 8709 	push	ar7
      002BC6 C0 06            [24] 8710 	push	ar6
      002BC8 C0 05            [24] 8711 	push	ar5
      002BCA 12 15 AA         [24] 8712 	lcall	_print8Hex
      002BCD D0 05            [24] 8713 	pop	ar5
      002BCF D0 06            [24] 8714 	pop	ar6
      002BD1 D0 07            [24] 8715 	pop	ar7
                                   8716 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   8717 ;	assignBit
      002BD3 C2 B5            [12] 8718 	clr	_P3_5
                                   8719 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      002BD5 85 5F 82         [24] 8720 	mov	dpl,_edit_d_65536_628
      002BD8 85 60 83         [24] 8721 	mov	dph,(_edit_d_65536_628 + 1)
      002BDB EF               [12] 8722 	mov	a,r7
      002BDC F0               [24] 8723 	movx	@dptr,a
                                   8724 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   8725 ;	assignBit
      002BDD D2 B5            [12] 8726 	setb	_P3_5
                                   8727 ;	.\ecen4350_lcd_v4.c:1925: setCursor(0, 210);
      002BDF 75 6B D2         [24] 8728 	mov	_setCursor_PARM_2,#0xd2
      002BE2 75 6C 00         [24] 8729 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BE5 90 00 00         [24] 8730 	mov	dptr,#0x0000
      002BE8 C0 06            [24] 8731 	push	ar6
      002BEA C0 05            [24] 8732 	push	ar5
      002BEC 12 05 BF         [24] 8733 	lcall	_setCursor
                                   8734 ;	.\ecen4350_lcd_v4.c:1926: setColorSelect();
      002BEF 12 16 A8         [24] 8735 	lcall	_setColorSelect
                                   8736 ;	.\ecen4350_lcd_v4.c:1927: LCD_string_write(" Choose Next Action:\n");
      002BF2 90 61 48         [24] 8737 	mov	dptr,#___str_64
      002BF5 75 F0 80         [24] 8738 	mov	b,#0x80
      002BF8 12 10 D9         [24] 8739 	lcall	_LCD_string_write
                                   8740 ;	.\ecen4350_lcd_v4.c:1928: setColorWhite();
      002BFB 12 16 ED         [24] 8741 	lcall	_setColorWhite
                                   8742 ;	.\ecen4350_lcd_v4.c:1929: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002BFE 90 61 5E         [24] 8743 	mov	dptr,#___str_65
      002C01 75 F0 80         [24] 8744 	mov	b,#0x80
      002C04 12 10 D9         [24] 8745 	lcall	_LCD_string_write
                                   8746 ;	.\ecen4350_lcd_v4.c:1930: LCD_string_write("  <0> Exit");
      002C07 90 61 84         [24] 8747 	mov	dptr,#___str_66
      002C0A 75 F0 80         [24] 8748 	mov	b,#0x80
      002C0D 12 10 D9         [24] 8749 	lcall	_LCD_string_write
      002C10 D0 05            [24] 8750 	pop	ar5
      002C12 D0 06            [24] 8751 	pop	ar6
      002C14                       8752 00102$:
                                   8753 ;	.\ecen4350_lcd_v4.c:1932: if (selection == '2') {			/* Highlight choice and gray out others*/
      002C14 78 71            [12] 8754 	mov	r0,#_selection
      002C16 B6 32 02         [24] 8755 	cjne	@r0,#0x32,00154$
      002C19 80 03            [24] 8756 	sjmp	00155$
      002C1B                       8757 00154$:
      002C1B 02 2E 60         [24] 8758 	ljmp	00104$
      002C1E                       8759 00155$:
                                   8760 ;	.\ecen4350_lcd_v4.c:1933: invalid = 0;
      002C1E 78 86            [12] 8761 	mov	r0,#_edit_invalid_65536_628
      002C20 76 00            [12] 8762 	mov	@r0,#0x00
                                   8763 ;	.\ecen4350_lcd_v4.c:1935: setCursor(0, 210);
      002C22 75 6B D2         [24] 8764 	mov	_setCursor_PARM_2,#0xd2
      002C25 75 6C 00         [24] 8765 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C28 90 00 00         [24] 8766 	mov	dptr,#0x0000
      002C2B 12 05 BF         [24] 8767 	lcall	_setCursor
                                   8768 ;	.\ecen4350_lcd_v4.c:1936: setColorDefault();
      002C2E 12 16 9D         [24] 8769 	lcall	_setColorDefault
                                   8770 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Choose Next Action:\n  ");
      002C31 90 62 00         [24] 8771 	mov	dptr,#___str_73
      002C34 75 F0 80         [24] 8772 	mov	b,#0x80
      002C37 12 10 D9         [24] 8773 	lcall	_LCD_string_write
                                   8774 ;	.\ecen4350_lcd_v4.c:1938: setColorGray();
      002C3A 12 16 CB         [24] 8775 	lcall	_setColorGray
                                   8776 ;	.\ecen4350_lcd_v4.c:1939: LCD_string_write("\n  ");
      002C3D 90 5F CE         [24] 8777 	mov	dptr,#___str_36
      002C40 75 F0 80         [24] 8778 	mov	b,#0x80
      002C43 12 10 D9         [24] 8779 	lcall	_LCD_string_write
                                   8780 ;	.\ecen4350_lcd_v4.c:1940: setColorHighlight2();
      002C46 12 16 BF         [24] 8781 	lcall	_setColorHighlight2
                                   8782 ;	.\ecen4350_lcd_v4.c:1941: LCD_string_write("<2> New Address\n");
      002C49 90 62 18         [24] 8783 	mov	dptr,#___str_74
      002C4C 75 F0 80         [24] 8784 	mov	b,#0x80
      002C4F 12 10 D9         [24] 8785 	lcall	_LCD_string_write
                                   8786 ;	.\ecen4350_lcd_v4.c:1942: setColorGray();
      002C52 12 16 CB         [24] 8787 	lcall	_setColorGray
                                   8788 ;	.\ecen4350_lcd_v4.c:1943: LCD_string_write("\n               ");
      002C55 90 62 29         [24] 8789 	mov	dptr,#___str_75
      002C58 75 F0 80         [24] 8790 	mov	b,#0x80
      002C5B 12 10 D9         [24] 8791 	lcall	_LCD_string_write
                                   8792 ;	.\ecen4350_lcd_v4.c:1944: delay(60);
      002C5E 90 00 3C         [24] 8793 	mov	dptr,#0x003c
      002C61 12 01 A9         [24] 8794 	lcall	_delay
                                   8795 ;	.\ecen4350_lcd_v4.c:1947: setCursor(0, 80);
      002C64 75 6B 50         [24] 8796 	mov	_setCursor_PARM_2,#0x50
      002C67 75 6C 00         [24] 8797 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C6A 90 00 00         [24] 8798 	mov	dptr,#0x0000
      002C6D 12 05 BF         [24] 8799 	lcall	_setCursor
                                   8800 ;	.\ecen4350_lcd_v4.c:1948: setColorGray();
      002C70 12 16 CB         [24] 8801 	lcall	_setColorGray
                                   8802 ;	.\ecen4350_lcd_v4.c:1949: LCD_string_write(" 0x____");
      002C73 90 5F 22         [24] 8803 	mov	dptr,#___str_24
      002C76 75 F0 80         [24] 8804 	mov	b,#0x80
      002C79 12 10 D9         [24] 8805 	lcall	_LCD_string_write
                                   8806 ;	.\ecen4350_lcd_v4.c:1950: setCursor(0, 110);
      002C7C 75 6B 6E         [24] 8807 	mov	_setCursor_PARM_2,#0x6e
      002C7F 75 6C 00         [24] 8808 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C82 90 00 00         [24] 8809 	mov	dptr,#0x0000
      002C85 12 05 BF         [24] 8810 	lcall	_setCursor
                                   8811 ;	.\ecen4350_lcd_v4.c:1951: LCD_string_write("\n __");
      002C88 90 61 CA         [24] 8812 	mov	dptr,#___str_71
      002C8B 75 F0 80         [24] 8813 	mov	b,#0x80
      002C8E 12 10 D9         [24] 8814 	lcall	_LCD_string_write
                                   8815 ;	.\ecen4350_lcd_v4.c:1952: setCursor(0, 160);
      002C91 75 6B A0         [24] 8816 	mov	_setCursor_PARM_2,#0xa0
      002C94 75 6C 00         [24] 8817 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C97 90 00 00         [24] 8818 	mov	dptr,#0x0000
      002C9A 12 05 BF         [24] 8819 	lcall	_setCursor
                                   8820 ;	.\ecen4350_lcd_v4.c:1953: LCD_string_write("\n __");
      002C9D 90 61 CA         [24] 8821 	mov	dptr,#___str_71
      002CA0 75 F0 80         [24] 8822 	mov	b,#0x80
      002CA3 12 10 D9         [24] 8823 	lcall	_LCD_string_write
                                   8824 ;	.\ecen4350_lcd_v4.c:1954: setCursor(0, 210);
      002CA6 75 6B D2         [24] 8825 	mov	_setCursor_PARM_2,#0xd2
      002CA9 75 6C 00         [24] 8826 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CAC 90 00 00         [24] 8827 	mov	dptr,#0x0000
      002CAF 12 05 BF         [24] 8828 	lcall	_setCursor
                                   8829 ;	.\ecen4350_lcd_v4.c:1955: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002CB2 90 61 CF         [24] 8830 	mov	dptr,#___str_72
      002CB5 75 F0 80         [24] 8831 	mov	b,#0x80
      002CB8 12 10 D9         [24] 8832 	lcall	_LCD_string_write
                                   8833 ;	.\ecen4350_lcd_v4.c:1958: setCursor(0, 60);
      002CBB 75 6B 3C         [24] 8834 	mov	_setCursor_PARM_2,#0x3c
      002CBE 75 6C 00         [24] 8835 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CC1 90 00 00         [24] 8836 	mov	dptr,#0x0000
      002CC4 12 05 BF         [24] 8837 	lcall	_setCursor
                                   8838 ;	.\ecen4350_lcd_v4.c:1959: setColorSelect();
      002CC7 12 16 A8         [24] 8839 	lcall	_setColorSelect
                                   8840 ;	.\ecen4350_lcd_v4.c:1960: LCD_string_write(" Edit Address");
      002CCA 90 62 3A         [24] 8841 	mov	dptr,#___str_76
      002CCD 75 F0 80         [24] 8842 	mov	b,#0x80
      002CD0 12 10 D9         [24] 8843 	lcall	_LCD_string_write
                                   8844 ;	.\ecen4350_lcd_v4.c:1961: setCursor(0, 80);
      002CD3 75 6B 50         [24] 8845 	mov	_setCursor_PARM_2,#0x50
      002CD6 75 6C 00         [24] 8846 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CD9 90 00 00         [24] 8847 	mov	dptr,#0x0000
      002CDC 12 05 BF         [24] 8848 	lcall	_setCursor
                                   8849 ;	.\ecen4350_lcd_v4.c:1962: LCD_string_write(" ");
      002CDF 90 5F 84         [24] 8850 	mov	dptr,#___str_30
      002CE2 75 F0 80         [24] 8851 	mov	b,#0x80
      002CE5 12 10 D9         [24] 8852 	lcall	_LCD_string_write
                                   8853 ;	.\ecen4350_lcd_v4.c:1963: setColorHighlight1();
      002CE8 12 16 B3         [24] 8854 	lcall	_setColorHighlight1
                                   8855 ;	.\ecen4350_lcd_v4.c:1964: LCD_string_write("0x");
      002CEB 90 5E 59         [24] 8856 	mov	dptr,#___str_2
      002CEE 75 F0 80         [24] 8857 	mov	b,#0x80
      002CF1 12 10 D9         [24] 8858 	lcall	_LCD_string_write
                                   8859 ;	.\ecen4350_lcd_v4.c:1965: address = inputAddress();		// input 16-bit address and store in memory
      002CF4 12 17 0E         [24] 8860 	lcall	_inputAddress
      002CF7 AD 82            [24] 8861 	mov	r5,dpl
      002CF9 AE 83            [24] 8862 	mov	r6,dph
                                   8863 ;	.\ecen4350_lcd_v4.c:1966: d = (unsigned char __xdata*)address;
      002CFB 8D 03            [24] 8864 	mov	ar3,r5
      002CFD 8E 07            [24] 8865 	mov	ar7,r6
                                   8866 ;	.\ecen4350_lcd_v4.c:1969: setColorDefault();
      002CFF C0 07            [24] 8867 	push	ar7
      002D01 C0 06            [24] 8868 	push	ar6
      002D03 C0 05            [24] 8869 	push	ar5
      002D05 C0 03            [24] 8870 	push	ar3
      002D07 12 16 9D         [24] 8871 	lcall	_setColorDefault
                                   8872 ;	.\ecen4350_lcd_v4.c:1970: setCursor(0, 60);
      002D0A 75 6B 3C         [24] 8873 	mov	_setCursor_PARM_2,#0x3c
      002D0D 75 6C 00         [24] 8874 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D10 90 00 00         [24] 8875 	mov	dptr,#0x0000
      002D13 12 05 BF         [24] 8876 	lcall	_setCursor
                                   8877 ;	.\ecen4350_lcd_v4.c:1971: LCD_string_write(" Edit Address:");
      002D16 90 61 0D         [24] 8878 	mov	dptr,#___str_60
      002D19 75 F0 80         [24] 8879 	mov	b,#0x80
      002D1C 12 10 D9         [24] 8880 	lcall	_LCD_string_write
                                   8881 ;	.\ecen4350_lcd_v4.c:1972: setCursor(0, 80);
      002D1F 75 6B 50         [24] 8882 	mov	_setCursor_PARM_2,#0x50
      002D22 75 6C 00         [24] 8883 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D25 90 00 00         [24] 8884 	mov	dptr,#0x0000
      002D28 12 05 BF         [24] 8885 	lcall	_setCursor
                                   8886 ;	.\ecen4350_lcd_v4.c:1973: LCD_string_write(" ");
      002D2B 90 5F 84         [24] 8887 	mov	dptr,#___str_30
      002D2E 75 F0 80         [24] 8888 	mov	b,#0x80
      002D31 12 10 D9         [24] 8889 	lcall	_LCD_string_write
                                   8890 ;	.\ecen4350_lcd_v4.c:1974: setColorHighlight2();
      002D34 12 16 BF         [24] 8891 	lcall	_setColorHighlight2
                                   8892 ;	.\ecen4350_lcd_v4.c:1975: LCD_string_write("0x");
      002D37 90 5E 59         [24] 8893 	mov	dptr,#___str_2
      002D3A 75 F0 80         [24] 8894 	mov	b,#0x80
      002D3D 12 10 D9         [24] 8895 	lcall	_LCD_string_write
      002D40 D0 03            [24] 8896 	pop	ar3
      002D42 D0 05            [24] 8897 	pop	ar5
      002D44 D0 06            [24] 8898 	pop	ar6
                                   8899 ;	.\ecen4350_lcd_v4.c:1976: print16Hex(address);		// print 16-bit address from stored memory
      002D46 8D 82            [24] 8900 	mov	dpl,r5
      002D48 8E 83            [24] 8901 	mov	dph,r6
      002D4A C0 06            [24] 8902 	push	ar6
      002D4C C0 05            [24] 8903 	push	ar5
      002D4E C0 03            [24] 8904 	push	ar3
      002D50 12 15 C1         [24] 8905 	lcall	_print16Hex
                                   8906 ;	.\ecen4350_lcd_v4.c:1979: setCursor(0, 110);
      002D53 75 6B 6E         [24] 8907 	mov	_setCursor_PARM_2,#0x6e
      002D56 75 6C 00         [24] 8908 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D59 90 00 00         [24] 8909 	mov	dptr,#0x0000
      002D5C 12 05 BF         [24] 8910 	lcall	_setCursor
                                   8911 ;	.\ecen4350_lcd_v4.c:1980: setColorDefault();
      002D5F 12 16 9D         [24] 8912 	lcall	_setColorDefault
                                   8913 ;	.\ecen4350_lcd_v4.c:1981: LCD_string_write("\n ");
      002D62 90 61 8F         [24] 8914 	mov	dptr,#___str_67
      002D65 75 F0 80         [24] 8915 	mov	b,#0x80
      002D68 12 10 D9         [24] 8916 	lcall	_LCD_string_write
                                   8917 ;	.\ecen4350_lcd_v4.c:1982: setColorHighlight2();
      002D6B 12 16 BF         [24] 8918 	lcall	_setColorHighlight2
      002D6E D0 03            [24] 8919 	pop	ar3
      002D70 D0 05            [24] 8920 	pop	ar5
      002D72 D0 06            [24] 8921 	pop	ar6
      002D74 D0 07            [24] 8922 	pop	ar7
                                   8923 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   8924 ;	assignBit
      002D76 C2 B5            [12] 8925 	clr	_P3_5
                                   8926 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      002D78 8B 82            [24] 8927 	mov	dpl,r3
      002D7A 8F 83            [24] 8928 	mov	dph,r7
      002D7C E0               [24] 8929 	movx	a,@dptr
      002D7D F5 82            [12] 8930 	mov	dpl,a
                                   8931 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   8932 ;	assignBit
      002D7F D2 B5            [12] 8933 	setb	_P3_5
                                   8934 ;	.\ecen4350_lcd_v4.c:1983: print8Hex(ramRead8(d));
      002D81 C0 07            [24] 8935 	push	ar7
      002D83 C0 06            [24] 8936 	push	ar6
      002D85 C0 05            [24] 8937 	push	ar5
      002D87 C0 03            [24] 8938 	push	ar3
      002D89 12 15 AA         [24] 8939 	lcall	_print8Hex
                                   8940 ;	.\ecen4350_lcd_v4.c:1986: setCursor(0, 160);
      002D8C 75 6B A0         [24] 8941 	mov	_setCursor_PARM_2,#0xa0
      002D8F 75 6C 00         [24] 8942 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D92 90 00 00         [24] 8943 	mov	dptr,#0x0000
      002D95 12 05 BF         [24] 8944 	lcall	_setCursor
                                   8945 ;	.\ecen4350_lcd_v4.c:1987: setColorSelect();
      002D98 12 16 A8         [24] 8946 	lcall	_setColorSelect
                                   8947 ;	.\ecen4350_lcd_v4.c:1988: LCD_string_write(" Enter New Value:\n ");
      002D9B 90 61 92         [24] 8948 	mov	dptr,#___str_68
      002D9E 75 F0 80         [24] 8949 	mov	b,#0x80
      002DA1 12 10 D9         [24] 8950 	lcall	_LCD_string_write
                                   8951 ;	.\ecen4350_lcd_v4.c:1989: setColorHighlight1();
      002DA4 12 16 B3         [24] 8952 	lcall	_setColorHighlight1
                                   8953 ;	.\ecen4350_lcd_v4.c:1990: selection = keyDetect();
      002DA7 12 11 F7         [24] 8954 	lcall	_keyDetect
      002DAA AA 82            [24] 8955 	mov	r2,dpl
      002DAC 78 71            [12] 8956 	mov	r0,#_selection
      002DAE A6 02            [24] 8957 	mov	@r0,ar2
                                   8958 ;	.\ecen4350_lcd_v4.c:1991: write(selection);
      002DB0 8A 82            [24] 8959 	mov	dpl,r2
      002DB2 12 10 73         [24] 8960 	lcall	_write
                                   8961 ;	.\ecen4350_lcd_v4.c:1992: selection = ASCIItoHex(selection);
      002DB5 78 71            [12] 8962 	mov	r0,#_selection
      002DB7 86 82            [24] 8963 	mov	dpl,@r0
      002DB9 12 14 65         [24] 8964 	lcall	_ASCIItoHex
      002DBC AA 82            [24] 8965 	mov	r2,dpl
      002DBE 78 71            [12] 8966 	mov	r0,#_selection
      002DC0 A6 02            [24] 8967 	mov	@r0,ar2
                                   8968 ;	.\ecen4350_lcd_v4.c:1993: value |= selection * 16;
      002DC2 EA               [12] 8969 	mov	a,r2
      002DC3 C4               [12] 8970 	swap	a
      002DC4 54 F0            [12] 8971 	anl	a,#0xf0
      002DC6 FA               [12] 8972 	mov	r2,a
                                   8973 ;	.\ecen4350_lcd_v4.c:1994: selection = keyDetect();
      002DC7 C0 02            [24] 8974 	push	ar2
      002DC9 12 11 F7         [24] 8975 	lcall	_keyDetect
      002DCC AC 82            [24] 8976 	mov	r4,dpl
      002DCE 78 71            [12] 8977 	mov	r0,#_selection
      002DD0 A6 04            [24] 8978 	mov	@r0,ar4
                                   8979 ;	.\ecen4350_lcd_v4.c:1995: write(selection);
      002DD2 8C 82            [24] 8980 	mov	dpl,r4
      002DD4 12 10 73         [24] 8981 	lcall	_write
                                   8982 ;	.\ecen4350_lcd_v4.c:1996: selection = ASCIItoHex(selection);
      002DD7 78 71            [12] 8983 	mov	r0,#_selection
      002DD9 86 82            [24] 8984 	mov	dpl,@r0
      002DDB 12 14 65         [24] 8985 	lcall	_ASCIItoHex
      002DDE AC 82            [24] 8986 	mov	r4,dpl
      002DE0 D0 02            [24] 8987 	pop	ar2
      002DE2 D0 03            [24] 8988 	pop	ar3
      002DE4 78 71            [12] 8989 	mov	r0,#_selection
      002DE6 A6 04            [24] 8990 	mov	@r0,ar4
                                   8991 ;	.\ecen4350_lcd_v4.c:1997: value |= selection;
      002DE8 EA               [12] 8992 	mov	a,r2
      002DE9 42 04            [12] 8993 	orl	ar4,a
                                   8994 ;	.\ecen4350_lcd_v4.c:2000: setColorDefault();
      002DEB C0 04            [24] 8995 	push	ar4
      002DED C0 03            [24] 8996 	push	ar3
      002DEF 12 16 9D         [24] 8997 	lcall	_setColorDefault
                                   8998 ;	.\ecen4350_lcd_v4.c:2001: setCursor(0, 160);
      002DF2 75 6B A0         [24] 8999 	mov	_setCursor_PARM_2,#0xa0
      002DF5 75 6C 00         [24] 9000 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DF8 90 00 00         [24] 9001 	mov	dptr,#0x0000
      002DFB 12 05 BF         [24] 9002 	lcall	_setCursor
                                   9003 ;	.\ecen4350_lcd_v4.c:2002: LCD_string_write(" Enter New Value:\n ");
      002DFE 90 61 92         [24] 9004 	mov	dptr,#___str_68
      002E01 75 F0 80         [24] 9005 	mov	b,#0x80
      002E04 12 10 D9         [24] 9006 	lcall	_LCD_string_write
                                   9007 ;	.\ecen4350_lcd_v4.c:2003: setColorHighlight2();
      002E07 12 16 BF         [24] 9008 	lcall	_setColorHighlight2
      002E0A D0 03            [24] 9009 	pop	ar3
      002E0C D0 04            [24] 9010 	pop	ar4
                                   9011 ;	.\ecen4350_lcd_v4.c:2004: print8Hex(value);
      002E0E 8C 82            [24] 9012 	mov	dpl,r4
      002E10 C0 04            [24] 9013 	push	ar4
      002E12 C0 03            [24] 9014 	push	ar3
      002E14 12 15 AA         [24] 9015 	lcall	_print8Hex
      002E17 D0 03            [24] 9016 	pop	ar3
      002E19 D0 04            [24] 9017 	pop	ar4
      002E1B D0 05            [24] 9018 	pop	ar5
      002E1D D0 06            [24] 9019 	pop	ar6
      002E1F D0 07            [24] 9020 	pop	ar7
                                   9021 ;	.\ecen4350_lcd_v4.c:121: IOM = 0;
                                   9022 ;	assignBit
      002E21 C2 B5            [12] 9023 	clr	_P3_5
                                   9024 ;	.\ecen4350_lcd_v4.c:122: *map_address = d;
      002E23 8B 82            [24] 9025 	mov	dpl,r3
      002E25 8F 83            [24] 9026 	mov	dph,r7
      002E27 EC               [12] 9027 	mov	a,r4
      002E28 F0               [24] 9028 	movx	@dptr,a
                                   9029 ;	.\ecen4350_lcd_v4.c:123: IOM = 1;
                                   9030 ;	assignBit
      002E29 D2 B5            [12] 9031 	setb	_P3_5
                                   9032 ;	.\ecen4350_lcd_v4.c:2009: setCursor(0, 210);
      002E2B 75 6B D2         [24] 9033 	mov	_setCursor_PARM_2,#0xd2
      002E2E 75 6C 00         [24] 9034 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E31 90 00 00         [24] 9035 	mov	dptr,#0x0000
      002E34 C0 06            [24] 9036 	push	ar6
      002E36 C0 05            [24] 9037 	push	ar5
      002E38 12 05 BF         [24] 9038 	lcall	_setCursor
                                   9039 ;	.\ecen4350_lcd_v4.c:2010: setColorSelect();
      002E3B 12 16 A8         [24] 9040 	lcall	_setColorSelect
                                   9041 ;	.\ecen4350_lcd_v4.c:2011: LCD_string_write(" Choose Next Action:\n");
      002E3E 90 61 48         [24] 9042 	mov	dptr,#___str_64
      002E41 75 F0 80         [24] 9043 	mov	b,#0x80
      002E44 12 10 D9         [24] 9044 	lcall	_LCD_string_write
                                   9045 ;	.\ecen4350_lcd_v4.c:2012: setColorWhite();
      002E47 12 16 ED         [24] 9046 	lcall	_setColorWhite
                                   9047 ;	.\ecen4350_lcd_v4.c:2013: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002E4A 90 61 5E         [24] 9048 	mov	dptr,#___str_65
      002E4D 75 F0 80         [24] 9049 	mov	b,#0x80
      002E50 12 10 D9         [24] 9050 	lcall	_LCD_string_write
                                   9051 ;	.\ecen4350_lcd_v4.c:2014: LCD_string_write("  <0> Exit");
      002E53 90 61 84         [24] 9052 	mov	dptr,#___str_66
      002E56 75 F0 80         [24] 9053 	mov	b,#0x80
      002E59 12 10 D9         [24] 9054 	lcall	_LCD_string_write
      002E5C D0 05            [24] 9055 	pop	ar5
      002E5E D0 06            [24] 9056 	pop	ar6
      002E60                       9057 00104$:
                                   9058 ;	.\ecen4350_lcd_v4.c:2016: if (selection == '0') {			/* Highlight choice and gray out others */
      002E60 78 71            [12] 9059 	mov	r0,#_selection
      002E62 B6 30 52         [24] 9060 	cjne	@r0,#0x30,00106$
                                   9061 ;	.\ecen4350_lcd_v4.c:2017: exit = 0;
      002E65 78 85            [12] 9062 	mov	r0,#_edit_exit_65536_628
      002E67 76 00            [12] 9063 	mov	@r0,#0x00
                                   9064 ;	.\ecen4350_lcd_v4.c:2018: invalid = 0;
      002E69 78 86            [12] 9065 	mov	r0,#_edit_invalid_65536_628
      002E6B 76 00            [12] 9066 	mov	@r0,#0x00
                                   9067 ;	.\ecen4350_lcd_v4.c:2019: setCursor(0, 210);
      002E6D 75 6B D2         [24] 9068 	mov	_setCursor_PARM_2,#0xd2
      002E70 75 6C 00         [24] 9069 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E73 90 00 00         [24] 9070 	mov	dptr,#0x0000
      002E76 C0 06            [24] 9071 	push	ar6
      002E78 C0 05            [24] 9072 	push	ar5
      002E7A 12 05 BF         [24] 9073 	lcall	_setCursor
                                   9074 ;	.\ecen4350_lcd_v4.c:2020: setColorDefault();
      002E7D 12 16 9D         [24] 9075 	lcall	_setColorDefault
                                   9076 ;	.\ecen4350_lcd_v4.c:2021: LCD_string_write("\n");
      002E80 90 62 48         [24] 9077 	mov	dptr,#___str_77
      002E83 75 F0 80         [24] 9078 	mov	b,#0x80
      002E86 12 10 D9         [24] 9079 	lcall	_LCD_string_write
                                   9080 ;	.\ecen4350_lcd_v4.c:2022: setColorGray();
      002E89 12 16 CB         [24] 9081 	lcall	_setColorGray
                                   9082 ;	.\ecen4350_lcd_v4.c:2023: LCD_string_write("\n\n  ");
      002E8C 90 5F FF         [24] 9083 	mov	dptr,#___str_39
      002E8F 75 F0 80         [24] 9084 	mov	b,#0x80
      002E92 12 10 D9         [24] 9085 	lcall	_LCD_string_write
                                   9086 ;	.\ecen4350_lcd_v4.c:2024: setColorHighlight2();
      002E95 12 16 BF         [24] 9087 	lcall	_setColorHighlight2
                                   9088 ;	.\ecen4350_lcd_v4.c:2025: LCD_string_write("<0> Exit");
      002E98 90 62 4A         [24] 9089 	mov	dptr,#___str_78
      002E9B 75 F0 80         [24] 9090 	mov	b,#0x80
      002E9E 12 10 D9         [24] 9091 	lcall	_LCD_string_write
                                   9092 ;	.\ecen4350_lcd_v4.c:2026: setColorGray();
      002EA1 12 16 CB         [24] 9093 	lcall	_setColorGray
                                   9094 ;	.\ecen4350_lcd_v4.c:2027: LCD_string_write("\n               ");
      002EA4 90 62 29         [24] 9095 	mov	dptr,#___str_75
      002EA7 75 F0 80         [24] 9096 	mov	b,#0x80
      002EAA 12 10 D9         [24] 9097 	lcall	_LCD_string_write
                                   9098 ;	.\ecen4350_lcd_v4.c:2028: delay(60);
      002EAD 90 00 3C         [24] 9099 	mov	dptr,#0x003c
      002EB0 12 01 A9         [24] 9100 	lcall	_delay
      002EB3 D0 05            [24] 9101 	pop	ar5
      002EB5 D0 06            [24] 9102 	pop	ar6
      002EB7                       9103 00106$:
                                   9104 ;	.\ecen4350_lcd_v4.c:2030: if (invalid) {
      002EB7 78 86            [12] 9105 	mov	r0,#_edit_invalid_65536_628
      002EB9 E6               [12] 9106 	mov	a,@r0
      002EBA 70 03            [24] 9107 	jnz	00158$
      002EBC 02 2A 15         [24] 9108 	ljmp	00109$
      002EBF                       9109 00158$:
                                   9110 ;	.\ecen4350_lcd_v4.c:2031: setCursor(0, 210);
      002EBF 75 6B D2         [24] 9111 	mov	_setCursor_PARM_2,#0xd2
      002EC2 75 6C 00         [24] 9112 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EC5 90 00 00         [24] 9113 	mov	dptr,#0x0000
      002EC8 C0 06            [24] 9114 	push	ar6
      002ECA C0 05            [24] 9115 	push	ar5
      002ECC 12 05 BF         [24] 9116 	lcall	_setCursor
                                   9117 ;	.\ecen4350_lcd_v4.c:2032: setColorRed();
      002ECF 12 16 E2         [24] 9118 	lcall	_setColorRed
                                   9119 ;	.\ecen4350_lcd_v4.c:2033: LCD_string_write("\n\n\n\n Input Error ");
      002ED2 90 62 53         [24] 9120 	mov	dptr,#___str_79
      002ED5 75 F0 80         [24] 9121 	mov	b,#0x80
      002ED8 12 10 D9         [24] 9122 	lcall	_LCD_string_write
      002EDB D0 05            [24] 9123 	pop	ar5
      002EDD D0 06            [24] 9124 	pop	ar6
      002EDF 02 2A 15         [24] 9125 	ljmp	00109$
                                   9126 ;	.\ecen4350_lcd_v4.c:2036: return;
                                   9127 ;	.\ecen4350_lcd_v4.c:2037: }
      002EE2 22               [24] 9128 	ret
                                   9129 ;------------------------------------------------------------
                                   9130 ;Allocation info for local variables in function 'find'
                                   9131 ;------------------------------------------------------------
                                   9132 ;d                         Allocated to registers 
                                   9133 ;i                         Allocated with name '_find_i_262144_665'
                                   9134 ;__3932160169              Allocated to registers 
                                   9135 ;__3932160170              Allocated to registers 
                                   9136 ;map_address               Allocated to registers 
                                   9137 ;d                         Allocated to registers r4 
                                   9138 ;i                         Allocated to registers r4 r6 
                                   9139 ;__3932160172              Allocated to registers 
                                   9140 ;__3932160173              Allocated to registers 
                                   9141 ;map_address               Allocated to registers 
                                   9142 ;d                         Allocated to registers r3 
                                   9143 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9144 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9145 ;address                   Allocated with name '_find_address_65536_652'
                                   9146 ;destination               Allocated to registers 
                                   9147 ;blockSize                 Allocated with name '_find_blockSize_65536_652'
                                   9148 ;value                     Allocated with name '_find_value_65536_652'
                                   9149 ;scan                      Allocated with name '_find_scan_65536_652'
                                   9150 ;page                      Allocated to registers r5 
                                   9151 ;noneFound                 Allocated with name '_find_noneFound_65536_652'
                                   9152 ;invalidInput              Allocated to registers r7 
                                   9153 ;exit                      Allocated with name '_find_exit_65536_652'
                                   9154 ;------------------------------------------------------------
                                   9155 ;	.\ecen4350_lcd_v4.c:2039: void find() {
                                   9156 ;	-----------------------------------------
                                   9157 ;	 function find
                                   9158 ;	-----------------------------------------
      002EE3                       9159 _find:
                                   9160 ;	.\ecen4350_lcd_v4.c:2043: __idata unsigned char blockSize = 0;
      002EE3 78 89            [12] 9161 	mov	r0,#_find_blockSize_65536_652
      002EE5 76 00            [12] 9162 	mov	@r0,#0x00
                                   9163 ;	.\ecen4350_lcd_v4.c:2045: __idata unsigned char scan = 0;
      002EE7 78 8B            [12] 9164 	mov	r0,#_find_scan_65536_652
      002EE9 76 00            [12] 9165 	mov	@r0,#0x00
                                   9166 ;	.\ecen4350_lcd_v4.c:2046: __idata unsigned char page = 0;
      002EEB 7D 00            [12] 9167 	mov	r5,#0x00
                                   9168 ;	.\ecen4350_lcd_v4.c:2047: __idata unsigned char noneFound = 1;
      002EED 78 8C            [12] 9169 	mov	r0,#_find_noneFound_65536_652
      002EEF 76 01            [12] 9170 	mov	@r0,#0x01
                                   9171 ;	.\ecen4350_lcd_v4.c:2048: __idata unsigned char invalidInput = 1;
      002EF1 7B 01            [12] 9172 	mov	r3,#0x01
                                   9173 ;	.\ecen4350_lcd_v4.c:2049: __idata unsigned char exit = 1;
      002EF3 78 8D            [12] 9174 	mov	r0,#_find_exit_65536_652
      002EF5 76 01            [12] 9175 	mov	@r0,#0x01
                                   9176 ;	.\ecen4350_lcd_v4.c:2051: clearLCD();
      002EF7 C0 05            [24] 9177 	push	ar5
      002EF9 C0 03            [24] 9178 	push	ar3
      002EFB 12 0E 5C         [24] 9179 	lcall	_clearLCD
                                   9180 ;	.\ecen4350_lcd_v4.c:2054: setTextSize(5);
      002EFE 75 82 05         [24] 9181 	mov	dpl,#0x05
      002F01 12 05 D9         [24] 9182 	lcall	_setTextSize
                                   9183 ;	.\ecen4350_lcd_v4.c:2055: fillTop(GRAY);
      002F04 90 D6 BA         [24] 9184 	mov	dptr,#0xd6ba
      002F07 12 0C 8F         [24] 9185 	lcall	_fillTop
                                   9186 ;	.\ecen4350_lcd_v4.c:2056: setColorMenu();
      002F0A 12 16 D6         [24] 9187 	lcall	_setColorMenu
                                   9188 ;	.\ecen4350_lcd_v4.c:2057: setCursor(30, 0);
      002F0D E4               [12] 9189 	clr	a
      002F0E F5 6B            [12] 9190 	mov	_setCursor_PARM_2,a
      002F10 F5 6C            [12] 9191 	mov	(_setCursor_PARM_2 + 1),a
      002F12 90 00 1E         [24] 9192 	mov	dptr,#0x001e
      002F15 12 05 BF         [24] 9193 	lcall	_setCursor
                                   9194 ;	.\ecen4350_lcd_v4.c:2058: LCD_string_write("[FIND]\n");
      002F18 90 62 65         [24] 9195 	mov	dptr,#___str_80
      002F1B 75 F0 80         [24] 9196 	mov	b,#0x80
      002F1E 12 10 D9         [24] 9197 	lcall	_LCD_string_write
                                   9198 ;	.\ecen4350_lcd_v4.c:2059: setColorDefault();
      002F21 12 16 9D         [24] 9199 	lcall	_setColorDefault
                                   9200 ;	.\ecen4350_lcd_v4.c:2060: setTextSize(2);
      002F24 75 82 02         [24] 9201 	mov	dpl,#0x02
      002F27 12 05 D9         [24] 9202 	lcall	_setTextSize
                                   9203 ;	.\ecen4350_lcd_v4.c:2061: setCursor(0, 60);
      002F2A 75 6B 3C         [24] 9204 	mov	_setCursor_PARM_2,#0x3c
      002F2D 75 6C 00         [24] 9205 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F30 90 00 00         [24] 9206 	mov	dptr,#0x0000
      002F33 12 05 BF         [24] 9207 	lcall	_setCursor
                                   9208 ;	.\ecen4350_lcd_v4.c:2062: LCD_string_write(" Find Value:");
      002F36 90 62 6D         [24] 9209 	mov	dptr,#___str_81
      002F39 75 F0 80         [24] 9210 	mov	b,#0x80
      002F3C 12 10 D9         [24] 9211 	lcall	_LCD_string_write
                                   9212 ;	.\ecen4350_lcd_v4.c:2063: setCursor(0, 80);
      002F3F 75 6B 50         [24] 9213 	mov	_setCursor_PARM_2,#0x50
      002F42 75 6C 00         [24] 9214 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F45 90 00 00         [24] 9215 	mov	dptr,#0x0000
      002F48 12 05 BF         [24] 9216 	lcall	_setCursor
                                   9217 ;	.\ecen4350_lcd_v4.c:2064: setColorGray();
      002F4B 12 16 CB         [24] 9218 	lcall	_setColorGray
                                   9219 ;	.\ecen4350_lcd_v4.c:2065: LCD_string_write(" __");
      002F4E 90 61 31         [24] 9220 	mov	dptr,#___str_62
      002F51 75 F0 80         [24] 9221 	mov	b,#0x80
      002F54 12 10 D9         [24] 9222 	lcall	_LCD_string_write
                                   9223 ;	.\ecen4350_lcd_v4.c:2066: setCursor(0, 110);
      002F57 75 6B 6E         [24] 9224 	mov	_setCursor_PARM_2,#0x6e
      002F5A 75 6C 00         [24] 9225 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F5D 90 00 00         [24] 9226 	mov	dptr,#0x0000
      002F60 12 05 BF         [24] 9227 	lcall	_setCursor
                                   9228 ;	.\ecen4350_lcd_v4.c:2067: setColorDefault();
      002F63 12 16 9D         [24] 9229 	lcall	_setColorDefault
                                   9230 ;	.\ecen4350_lcd_v4.c:2068: LCD_string_write(" Search Address:");
      002F66 90 62 7A         [24] 9231 	mov	dptr,#___str_82
      002F69 75 F0 80         [24] 9232 	mov	b,#0x80
      002F6C 12 10 D9         [24] 9233 	lcall	_LCD_string_write
                                   9234 ;	.\ecen4350_lcd_v4.c:2069: setCursor(0, 130 );
      002F6F 75 6B 82         [24] 9235 	mov	_setCursor_PARM_2,#0x82
      002F72 75 6C 00         [24] 9236 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F75 90 00 00         [24] 9237 	mov	dptr,#0x0000
      002F78 12 05 BF         [24] 9238 	lcall	_setCursor
                                   9239 ;	.\ecen4350_lcd_v4.c:2070: setColorGray();
      002F7B 12 16 CB         [24] 9240 	lcall	_setColorGray
                                   9241 ;	.\ecen4350_lcd_v4.c:2071: LCD_string_write(" 0x____");
      002F7E 90 5F 22         [24] 9242 	mov	dptr,#___str_24
      002F81 75 F0 80         [24] 9243 	mov	b,#0x80
      002F84 12 10 D9         [24] 9244 	lcall	_LCD_string_write
                                   9245 ;	.\ecen4350_lcd_v4.c:2072: setCursor(0, 160);
      002F87 75 6B A0         [24] 9246 	mov	_setCursor_PARM_2,#0xa0
      002F8A 75 6C 00         [24] 9247 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F8D 90 00 00         [24] 9248 	mov	dptr,#0x0000
      002F90 12 05 BF         [24] 9249 	lcall	_setCursor
                                   9250 ;	.\ecen4350_lcd_v4.c:2073: setColorDefault();
      002F93 12 16 9D         [24] 9251 	lcall	_setColorDefault
                                   9252 ;	.\ecen4350_lcd_v4.c:2074: LCD_string_write(" Input Block Size:\n");
      002F96 90 62 8B         [24] 9253 	mov	dptr,#___str_83
      002F99 75 F0 80         [24] 9254 	mov	b,#0x80
      002F9C 12 10 D9         [24] 9255 	lcall	_LCD_string_write
                                   9256 ;	.\ecen4350_lcd_v4.c:2075: setColorGray();
      002F9F 12 16 CB         [24] 9257 	lcall	_setColorGray
                                   9258 ;	.\ecen4350_lcd_v4.c:2076: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      002FA2 90 62 9F         [24] 9259 	mov	dptr,#___str_84
      002FA5 75 F0 80         [24] 9260 	mov	b,#0x80
      002FA8 12 10 D9         [24] 9261 	lcall	_LCD_string_write
                                   9262 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write("  <FF> (SCAN)");
      002FAB 90 62 C5         [24] 9263 	mov	dptr,#___str_85
      002FAE 75 F0 80         [24] 9264 	mov	b,#0x80
      002FB1 12 10 D9         [24] 9265 	lcall	_LCD_string_write
                                   9266 ;	.\ecen4350_lcd_v4.c:2079: (0, 250);
      002FB4 75 6B FA         [24] 9267 	mov	_setCursor_PARM_2,#0xfa
      002FB7 75 6C 00         [24] 9268 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FBA 90 00 00         [24] 9269 	mov	dptr,#0x0000
      002FBD 12 05 BF         [24] 9270 	lcall	_setCursor
                                   9271 ;	.\ecen4350_lcd_v4.c:2080: setColorGray();
      002FC0 12 16 CB         [24] 9272 	lcall	_setColorGray
                                   9273 ;	.\ecen4350_lcd_v4.c:2081: LCD_string_write("   __");
      002FC3 90 62 D3         [24] 9274 	mov	dptr,#___str_86
      002FC6 75 F0 80         [24] 9275 	mov	b,#0x80
      002FC9 12 10 D9         [24] 9276 	lcall	_LCD_string_write
                                   9277 ;	.\ecen4350_lcd_v4.c:2088: setColorSelect();
      002FCC 12 16 A8         [24] 9278 	lcall	_setColorSelect
                                   9279 ;	.\ecen4350_lcd_v4.c:2089: setCursor(0, 60);
      002FCF 75 6B 3C         [24] 9280 	mov	_setCursor_PARM_2,#0x3c
      002FD2 75 6C 00         [24] 9281 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FD5 90 00 00         [24] 9282 	mov	dptr,#0x0000
      002FD8 12 05 BF         [24] 9283 	lcall	_setCursor
                                   9284 ;	.\ecen4350_lcd_v4.c:2090: LCD_string_write(" Find Value:");
      002FDB 90 62 6D         [24] 9285 	mov	dptr,#___str_81
      002FDE 75 F0 80         [24] 9286 	mov	b,#0x80
      002FE1 12 10 D9         [24] 9287 	lcall	_LCD_string_write
                                   9288 ;	.\ecen4350_lcd_v4.c:2091: setCursor(0, 80);
      002FE4 75 6B 50         [24] 9289 	mov	_setCursor_PARM_2,#0x50
      002FE7 75 6C 00         [24] 9290 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FEA 90 00 00         [24] 9291 	mov	dptr,#0x0000
      002FED 12 05 BF         [24] 9292 	lcall	_setCursor
                                   9293 ;	.\ecen4350_lcd_v4.c:2092: setColorWhite();
      002FF0 12 16 ED         [24] 9294 	lcall	_setColorWhite
                                   9295 ;	.\ecen4350_lcd_v4.c:2093: setCursor(0, 80);
      002FF3 75 6B 50         [24] 9296 	mov	_setCursor_PARM_2,#0x50
      002FF6 75 6C 00         [24] 9297 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FF9 90 00 00         [24] 9298 	mov	dptr,#0x0000
      002FFC 12 05 BF         [24] 9299 	lcall	_setCursor
                                   9300 ;	.\ecen4350_lcd_v4.c:2094: LCD_string_write(" ");
      002FFF 90 5F 84         [24] 9301 	mov	dptr,#___str_30
      003002 75 F0 80         [24] 9302 	mov	b,#0x80
      003005 12 10 D9         [24] 9303 	lcall	_LCD_string_write
                                   9304 ;	.\ecen4350_lcd_v4.c:2095: setColorHighlight1();
      003008 12 16 B3         [24] 9305 	lcall	_setColorHighlight1
                                   9306 ;	.\ecen4350_lcd_v4.c:2096: selection = keyDetect();
      00300B 12 11 F7         [24] 9307 	lcall	_keyDetect
      00300E AC 82            [24] 9308 	mov	r4,dpl
      003010 78 71            [12] 9309 	mov	r0,#_selection
      003012 A6 04            [24] 9310 	mov	@r0,ar4
                                   9311 ;	.\ecen4350_lcd_v4.c:2097: write(selection);
      003014 8C 82            [24] 9312 	mov	dpl,r4
      003016 12 10 73         [24] 9313 	lcall	_write
                                   9314 ;	.\ecen4350_lcd_v4.c:2098: selection = ASCIItoHex(selection);
      003019 78 71            [12] 9315 	mov	r0,#_selection
      00301B 86 82            [24] 9316 	mov	dpl,@r0
      00301D 12 14 65         [24] 9317 	lcall	_ASCIItoHex
      003020 AC 82            [24] 9318 	mov	r4,dpl
      003022 D0 03            [24] 9319 	pop	ar3
      003024 78 71            [12] 9320 	mov	r0,#_selection
      003026 A6 04            [24] 9321 	mov	@r0,ar4
                                   9322 ;	.\ecen4350_lcd_v4.c:2099: value |= selection * 16;
      003028 EC               [12] 9323 	mov	a,r4
      003029 C4               [12] 9324 	swap	a
      00302A 54 F0            [12] 9325 	anl	a,#0xf0
      00302C FC               [12] 9326 	mov	r4,a
                                   9327 ;	.\ecen4350_lcd_v4.c:2100: selection = keyDetect();
      00302D C0 04            [24] 9328 	push	ar4
      00302F C0 03            [24] 9329 	push	ar3
      003031 12 11 F7         [24] 9330 	lcall	_keyDetect
      003034 AE 82            [24] 9331 	mov	r6,dpl
      003036 78 71            [12] 9332 	mov	r0,#_selection
      003038 A6 06            [24] 9333 	mov	@r0,ar6
                                   9334 ;	.\ecen4350_lcd_v4.c:2101: write(selection);
      00303A 8E 82            [24] 9335 	mov	dpl,r6
      00303C 12 10 73         [24] 9336 	lcall	_write
                                   9337 ;	.\ecen4350_lcd_v4.c:2102: selection = ASCIItoHex(selection);
      00303F 78 71            [12] 9338 	mov	r0,#_selection
      003041 86 82            [24] 9339 	mov	dpl,@r0
      003043 12 14 65         [24] 9340 	lcall	_ASCIItoHex
      003046 AE 82            [24] 9341 	mov	r6,dpl
      003048 D0 03            [24] 9342 	pop	ar3
      00304A D0 04            [24] 9343 	pop	ar4
      00304C 78 71            [12] 9344 	mov	r0,#_selection
      00304E A6 06            [24] 9345 	mov	@r0,ar6
                                   9346 ;	.\ecen4350_lcd_v4.c:2103: value |= selection;
      003050 78 8A            [12] 9347 	mov	r0,#_find_value_65536_652
      003052 EE               [12] 9348 	mov	a,r6
      003053 4C               [12] 9349 	orl	a,r4
      003054 F6               [12] 9350 	mov	@r0,a
                                   9351 ;	.\ecen4350_lcd_v4.c:2106: setColorDefault();
      003055 C0 03            [24] 9352 	push	ar3
      003057 12 16 9D         [24] 9353 	lcall	_setColorDefault
                                   9354 ;	.\ecen4350_lcd_v4.c:2107: setCursor(0, 60);
      00305A 75 6B 3C         [24] 9355 	mov	_setCursor_PARM_2,#0x3c
      00305D 75 6C 00         [24] 9356 	mov	(_setCursor_PARM_2 + 1),#0x00
      003060 90 00 00         [24] 9357 	mov	dptr,#0x0000
      003063 12 05 BF         [24] 9358 	lcall	_setCursor
                                   9359 ;	.\ecen4350_lcd_v4.c:2108: LCD_string_write(" Find Value:");
      003066 90 62 6D         [24] 9360 	mov	dptr,#___str_81
      003069 75 F0 80         [24] 9361 	mov	b,#0x80
      00306C 12 10 D9         [24] 9362 	lcall	_LCD_string_write
                                   9363 ;	.\ecen4350_lcd_v4.c:2109: setCursor(0, 80);
      00306F 75 6B 50         [24] 9364 	mov	_setCursor_PARM_2,#0x50
      003072 75 6C 00         [24] 9365 	mov	(_setCursor_PARM_2 + 1),#0x00
      003075 90 00 00         [24] 9366 	mov	dptr,#0x0000
      003078 12 05 BF         [24] 9367 	lcall	_setCursor
                                   9368 ;	.\ecen4350_lcd_v4.c:2110: setColorWhite();
      00307B 12 16 ED         [24] 9369 	lcall	_setColorWhite
                                   9370 ;	.\ecen4350_lcd_v4.c:2111: LCD_string_write(" ");
      00307E 90 5F 84         [24] 9371 	mov	dptr,#___str_30
      003081 75 F0 80         [24] 9372 	mov	b,#0x80
      003084 12 10 D9         [24] 9373 	lcall	_LCD_string_write
                                   9374 ;	.\ecen4350_lcd_v4.c:2112: setColorHighlight2();
      003087 12 16 BF         [24] 9375 	lcall	_setColorHighlight2
                                   9376 ;	.\ecen4350_lcd_v4.c:2113: print8Hex(value);
      00308A 78 8A            [12] 9377 	mov	r0,#_find_value_65536_652
      00308C 86 82            [24] 9378 	mov	dpl,@r0
      00308E 12 15 AA         [24] 9379 	lcall	_print8Hex
                                   9380 ;	.\ecen4350_lcd_v4.c:2116: setColorSelect();
      003091 12 16 A8         [24] 9381 	lcall	_setColorSelect
                                   9382 ;	.\ecen4350_lcd_v4.c:2117: setCursor(0, 110);
      003094 75 6B 6E         [24] 9383 	mov	_setCursor_PARM_2,#0x6e
      003097 75 6C 00         [24] 9384 	mov	(_setCursor_PARM_2 + 1),#0x00
      00309A 90 00 00         [24] 9385 	mov	dptr,#0x0000
      00309D 12 05 BF         [24] 9386 	lcall	_setCursor
                                   9387 ;	.\ecen4350_lcd_v4.c:2118: LCD_string_write(" Search Address:");
      0030A0 90 62 7A         [24] 9388 	mov	dptr,#___str_82
      0030A3 75 F0 80         [24] 9389 	mov	b,#0x80
      0030A6 12 10 D9         [24] 9390 	lcall	_LCD_string_write
                                   9391 ;	.\ecen4350_lcd_v4.c:2119: setCursor(0, 130);
      0030A9 75 6B 82         [24] 9392 	mov	_setCursor_PARM_2,#0x82
      0030AC 75 6C 00         [24] 9393 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030AF 90 00 00         [24] 9394 	mov	dptr,#0x0000
      0030B2 12 05 BF         [24] 9395 	lcall	_setCursor
                                   9396 ;	.\ecen4350_lcd_v4.c:2120: LCD_string_write(" ");
      0030B5 90 5F 84         [24] 9397 	mov	dptr,#___str_30
      0030B8 75 F0 80         [24] 9398 	mov	b,#0x80
      0030BB 12 10 D9         [24] 9399 	lcall	_LCD_string_write
                                   9400 ;	.\ecen4350_lcd_v4.c:2121: setColorHighlight1();
      0030BE 12 16 B3         [24] 9401 	lcall	_setColorHighlight1
                                   9402 ;	.\ecen4350_lcd_v4.c:2122: LCD_string_write("0x");
      0030C1 90 5E 59         [24] 9403 	mov	dptr,#___str_2
      0030C4 75 F0 80         [24] 9404 	mov	b,#0x80
      0030C7 12 10 D9         [24] 9405 	lcall	_LCD_string_write
                                   9406 ;	.\ecen4350_lcd_v4.c:2123: address = inputAddress();
      0030CA 12 17 0E         [24] 9407 	lcall	_inputAddress
      0030CD 78 87            [12] 9408 	mov	r0,#_find_address_65536_652
      0030CF A6 82            [24] 9409 	mov	@r0,dpl
      0030D1 08               [12] 9410 	inc	r0
      0030D2 A6 83            [24] 9411 	mov	@r0,dph
                                   9412 ;	.\ecen4350_lcd_v4.c:2126: setColorDefault();
      0030D4 12 16 9D         [24] 9413 	lcall	_setColorDefault
                                   9414 ;	.\ecen4350_lcd_v4.c:2127: setCursor(0, 110);
      0030D7 75 6B 6E         [24] 9415 	mov	_setCursor_PARM_2,#0x6e
      0030DA 75 6C 00         [24] 9416 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030DD 90 00 00         [24] 9417 	mov	dptr,#0x0000
      0030E0 12 05 BF         [24] 9418 	lcall	_setCursor
                                   9419 ;	.\ecen4350_lcd_v4.c:2128: LCD_string_write(" Search Address:");
      0030E3 90 62 7A         [24] 9420 	mov	dptr,#___str_82
      0030E6 75 F0 80         [24] 9421 	mov	b,#0x80
      0030E9 12 10 D9         [24] 9422 	lcall	_LCD_string_write
                                   9423 ;	.\ecen4350_lcd_v4.c:2129: setCursor(0, 130);
      0030EC 75 6B 82         [24] 9424 	mov	_setCursor_PARM_2,#0x82
      0030EF 75 6C 00         [24] 9425 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030F2 90 00 00         [24] 9426 	mov	dptr,#0x0000
      0030F5 12 05 BF         [24] 9427 	lcall	_setCursor
                                   9428 ;	.\ecen4350_lcd_v4.c:2130: LCD_string_write(" ");
      0030F8 90 5F 84         [24] 9429 	mov	dptr,#___str_30
      0030FB 75 F0 80         [24] 9430 	mov	b,#0x80
      0030FE 12 10 D9         [24] 9431 	lcall	_LCD_string_write
                                   9432 ;	.\ecen4350_lcd_v4.c:2131: setColorHighlight2();
      003101 12 16 BF         [24] 9433 	lcall	_setColorHighlight2
                                   9434 ;	.\ecen4350_lcd_v4.c:2132: LCD_string_write("0x");
      003104 90 5E 59         [24] 9435 	mov	dptr,#___str_2
      003107 75 F0 80         [24] 9436 	mov	b,#0x80
      00310A 12 10 D9         [24] 9437 	lcall	_LCD_string_write
                                   9438 ;	.\ecen4350_lcd_v4.c:2133: print16Hex(address);
      00310D 78 87            [12] 9439 	mov	r0,#_find_address_65536_652
      00310F 86 82            [24] 9440 	mov	dpl,@r0
      003111 08               [12] 9441 	inc	r0
      003112 86 83            [24] 9442 	mov	dph,@r0
      003114 12 15 C1         [24] 9443 	lcall	_print16Hex
                                   9444 ;	.\ecen4350_lcd_v4.c:2136: setColorSelect();
      003117 12 16 A8         [24] 9445 	lcall	_setColorSelect
                                   9446 ;	.\ecen4350_lcd_v4.c:2137: setCursor(0, 160);
      00311A 75 6B A0         [24] 9447 	mov	_setCursor_PARM_2,#0xa0
      00311D 75 6C 00         [24] 9448 	mov	(_setCursor_PARM_2 + 1),#0x00
      003120 90 00 00         [24] 9449 	mov	dptr,#0x0000
      003123 12 05 BF         [24] 9450 	lcall	_setCursor
                                   9451 ;	.\ecen4350_lcd_v4.c:2138: LCD_string_write(" Input Block Size:\n");
      003126 90 62 8B         [24] 9452 	mov	dptr,#___str_83
      003129 75 F0 80         [24] 9453 	mov	b,#0x80
      00312C 12 10 D9         [24] 9454 	lcall	_LCD_string_write
                                   9455 ;	.\ecen4350_lcd_v4.c:2139: setColorWhite();
      00312F 12 16 ED         [24] 9456 	lcall	_setColorWhite
                                   9457 ;	.\ecen4350_lcd_v4.c:2140: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003132 90 62 9F         [24] 9458 	mov	dptr,#___str_84
      003135 75 F0 80         [24] 9459 	mov	b,#0x80
      003138 12 10 D9         [24] 9460 	lcall	_LCD_string_write
                                   9461 ;	.\ecen4350_lcd_v4.c:2141: LCD_string_write("  <FF> (SCAN)");
      00313B 90 62 C5         [24] 9462 	mov	dptr,#___str_85
      00313E 75 F0 80         [24] 9463 	mov	b,#0x80
      003141 12 10 D9         [24] 9464 	lcall	_LCD_string_write
      003144 D0 03            [24] 9465 	pop	ar3
      003146 D0 05            [24] 9466 	pop	ar5
                                   9467 ;	.\ecen4350_lcd_v4.c:2142: while (invalidInput) {
      003148                       9468 00113$:
      003148 EB               [12] 9469 	mov	a,r3
      003149 70 03            [24] 9470 	jnz	00539$
      00314B 02 32 07         [24] 9471 	ljmp	00115$
      00314E                       9472 00539$:
                                   9473 ;	.\ecen4350_lcd_v4.c:2143: setCursor(0, 250);
      00314E 75 6B FA         [24] 9474 	mov	_setCursor_PARM_2,#0xfa
      003151 75 6C 00         [24] 9475 	mov	(_setCursor_PARM_2 + 1),#0x00
      003154 90 00 00         [24] 9476 	mov	dptr,#0x0000
      003157 C0 05            [24] 9477 	push	ar5
      003159 C0 03            [24] 9478 	push	ar3
      00315B 12 05 BF         [24] 9479 	lcall	_setCursor
                                   9480 ;	.\ecen4350_lcd_v4.c:2144: setColorGray();
      00315E 12 16 CB         [24] 9481 	lcall	_setColorGray
                                   9482 ;	.\ecen4350_lcd_v4.c:2145: LCD_string_write("   __");
      003161 90 62 D3         [24] 9483 	mov	dptr,#___str_86
      003164 75 F0 80         [24] 9484 	mov	b,#0x80
      003167 12 10 D9         [24] 9485 	lcall	_LCD_string_write
                                   9486 ;	.\ecen4350_lcd_v4.c:2146: setCursor(0, 250);
      00316A 75 6B FA         [24] 9487 	mov	_setCursor_PARM_2,#0xfa
      00316D 75 6C 00         [24] 9488 	mov	(_setCursor_PARM_2 + 1),#0x00
      003170 90 00 00         [24] 9489 	mov	dptr,#0x0000
      003173 12 05 BF         [24] 9490 	lcall	_setCursor
                                   9491 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write("   ");
      003176 90 62 D9         [24] 9492 	mov	dptr,#___str_87
      003179 75 F0 80         [24] 9493 	mov	b,#0x80
      00317C 12 10 D9         [24] 9494 	lcall	_LCD_string_write
                                   9495 ;	.\ecen4350_lcd_v4.c:2148: setColorHighlight1();
      00317F 12 16 B3         [24] 9496 	lcall	_setColorHighlight1
                                   9497 ;	.\ecen4350_lcd_v4.c:2149: blockSize = inputBlockSize();
      003182 12 17 BE         [24] 9498 	lcall	_inputBlockSize
      003185 78 89            [12] 9499 	mov	r0,#_find_blockSize_65536_652
      003187 A6 82            [24] 9500 	mov	@r0,dpl
      003189 D0 03            [24] 9501 	pop	ar3
      00318B D0 05            [24] 9502 	pop	ar5
                                   9503 ;	.\ecen4350_lcd_v4.c:2150: if (blockSize == 0x01) {
      00318D 78 89            [12] 9504 	mov	r0,#_find_blockSize_65536_652
      00318F B6 01 18         [24] 9505 	cjne	@r0,#0x01,00111$
                                   9506 ;	.\ecen4350_lcd_v4.c:2151: invalidInput = 0;
      003192 7B 00            [12] 9507 	mov	r3,#0x00
                                   9508 ;	.\ecen4350_lcd_v4.c:2152: setColorDefault();
      003194 C0 05            [24] 9509 	push	ar5
      003196 C0 03            [24] 9510 	push	ar3
      003198 12 16 9D         [24] 9511 	lcall	_setColorDefault
                                   9512 ;	.\ecen4350_lcd_v4.c:2153: LCD_string_write("\n                ");
      00319B 90 62 DD         [24] 9513 	mov	dptr,#___str_88
      00319E 75 F0 80         [24] 9514 	mov	b,#0x80
      0031A1 12 10 D9         [24] 9515 	lcall	_LCD_string_write
      0031A4 D0 03            [24] 9516 	pop	ar3
      0031A6 D0 05            [24] 9517 	pop	ar5
      0031A8 80 9E            [24] 9518 	sjmp	00113$
      0031AA                       9519 00111$:
                                   9520 ;	.\ecen4350_lcd_v4.c:2154: } else if (blockSize == 0x02) {
      0031AA 78 89            [12] 9521 	mov	r0,#_find_blockSize_65536_652
      0031AC B6 02 19         [24] 9522 	cjne	@r0,#0x02,00108$
                                   9523 ;	.\ecen4350_lcd_v4.c:2155: invalidInput = 0;
      0031AF 7B 00            [12] 9524 	mov	r3,#0x00
                                   9525 ;	.\ecen4350_lcd_v4.c:2156: setColorDefault();
      0031B1 C0 05            [24] 9526 	push	ar5
      0031B3 C0 03            [24] 9527 	push	ar3
      0031B5 12 16 9D         [24] 9528 	lcall	_setColorDefault
                                   9529 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write("\n                ");
      0031B8 90 62 DD         [24] 9530 	mov	dptr,#___str_88
      0031BB 75 F0 80         [24] 9531 	mov	b,#0x80
      0031BE 12 10 D9         [24] 9532 	lcall	_LCD_string_write
      0031C1 D0 03            [24] 9533 	pop	ar3
      0031C3 D0 05            [24] 9534 	pop	ar5
      0031C5 02 31 48         [24] 9535 	ljmp	00113$
      0031C8                       9536 00108$:
                                   9537 ;	.\ecen4350_lcd_v4.c:2158: } else if (blockSize == 0x04) {
      0031C8 78 89            [12] 9538 	mov	r0,#_find_blockSize_65536_652
      0031CA B6 04 19         [24] 9539 	cjne	@r0,#0x04,00105$
                                   9540 ;	.\ecen4350_lcd_v4.c:2159: invalidInput = 0;
      0031CD 7B 00            [12] 9541 	mov	r3,#0x00
                                   9542 ;	.\ecen4350_lcd_v4.c:2160: setColorDefault();
      0031CF C0 05            [24] 9543 	push	ar5
      0031D1 C0 03            [24] 9544 	push	ar3
      0031D3 12 16 9D         [24] 9545 	lcall	_setColorDefault
                                   9546 ;	.\ecen4350_lcd_v4.c:2161: LCD_string_write("\n                ");
      0031D6 90 62 DD         [24] 9547 	mov	dptr,#___str_88
      0031D9 75 F0 80         [24] 9548 	mov	b,#0x80
      0031DC 12 10 D9         [24] 9549 	lcall	_LCD_string_write
      0031DF D0 03            [24] 9550 	pop	ar3
      0031E1 D0 05            [24] 9551 	pop	ar5
      0031E3 02 31 48         [24] 9552 	ljmp	00113$
      0031E6                       9553 00105$:
                                   9554 ;	.\ecen4350_lcd_v4.c:2162: } else if (blockSize == 0xFF) {
      0031E6 78 89            [12] 9555 	mov	r0,#_find_blockSize_65536_652
      0031E8 B6 FF 05         [24] 9556 	cjne	@r0,#0xff,00102$
                                   9557 ;	.\ecen4350_lcd_v4.c:2163: invalidInput = 0;
      0031EB 7B 00            [12] 9558 	mov	r3,#0x00
      0031ED 02 31 48         [24] 9559 	ljmp	00113$
      0031F0                       9560 00102$:
                                   9561 ;	.\ecen4350_lcd_v4.c:2166: setColorRed();
      0031F0 C0 05            [24] 9562 	push	ar5
      0031F2 C0 03            [24] 9563 	push	ar3
      0031F4 12 16 E2         [24] 9564 	lcall	_setColorRed
                                   9565 ;	.\ecen4350_lcd_v4.c:2167: LCD_string_write("\n Try again");
      0031F7 90 62 EF         [24] 9566 	mov	dptr,#___str_89
      0031FA 75 F0 80         [24] 9567 	mov	b,#0x80
      0031FD 12 10 D9         [24] 9568 	lcall	_LCD_string_write
      003200 D0 03            [24] 9569 	pop	ar3
      003202 D0 05            [24] 9570 	pop	ar5
      003204 02 31 48         [24] 9571 	ljmp	00113$
      003207                       9572 00115$:
                                   9573 ;	.\ecen4350_lcd_v4.c:2172: setCursor(0, 160);
      003207 75 6B A0         [24] 9574 	mov	_setCursor_PARM_2,#0xa0
      00320A 75 6C 00         [24] 9575 	mov	(_setCursor_PARM_2 + 1),#0x00
      00320D 90 00 00         [24] 9576 	mov	dptr,#0x0000
      003210 C0 05            [24] 9577 	push	ar5
      003212 12 05 BF         [24] 9578 	lcall	_setCursor
                                   9579 ;	.\ecen4350_lcd_v4.c:2173: setColorDefault();
      003215 12 16 9D         [24] 9580 	lcall	_setColorDefault
                                   9581 ;	.\ecen4350_lcd_v4.c:2174: LCD_string_write(" Input Block Size:\n");
      003218 90 62 8B         [24] 9582 	mov	dptr,#___str_83
      00321B 75 F0 80         [24] 9583 	mov	b,#0x80
      00321E 12 10 D9         [24] 9584 	lcall	_LCD_string_write
      003221 D0 05            [24] 9585 	pop	ar5
                                   9586 ;	.\ecen4350_lcd_v4.c:2175: if (blockSize == 0x01){
      003223 78 89            [12] 9587 	mov	r0,#_find_blockSize_65536_652
      003225 B6 01 74         [24] 9588 	cjne	@r0,#0x01,00125$
                                   9589 ;	.\ecen4350_lcd_v4.c:2176: LCD_string_write("  ");
      003228 90 5F 9D         [24] 9590 	mov	dptr,#___str_33
      00322B 75 F0 80         [24] 9591 	mov	b,#0x80
      00322E C0 05            [24] 9592 	push	ar5
      003230 12 10 D9         [24] 9593 	lcall	_LCD_string_write
                                   9594 ;	.\ecen4350_lcd_v4.c:2177: setColorHighlight2();
      003233 12 16 BF         [24] 9595 	lcall	_setColorHighlight2
                                   9596 ;	.\ecen4350_lcd_v4.c:2178: LCD_string_write("<01> BYTE\n");
      003236 90 62 FB         [24] 9597 	mov	dptr,#___str_90
      003239 75 F0 80         [24] 9598 	mov	b,#0x80
      00323C 12 10 D9         [24] 9599 	lcall	_LCD_string_write
                                   9600 ;	.\ecen4350_lcd_v4.c:2179: setColorGray();
      00323F 12 16 CB         [24] 9601 	lcall	_setColorGray
                                   9602 ;	.\ecen4350_lcd_v4.c:2180: LCD_string_write("  <02> WORD\n");
      003242 90 63 06         [24] 9603 	mov	dptr,#___str_91
      003245 75 F0 80         [24] 9604 	mov	b,#0x80
      003248 12 10 D9         [24] 9605 	lcall	_LCD_string_write
                                   9606 ;	.\ecen4350_lcd_v4.c:2181: LCD_string_write("  <04> DWORD\n");
      00324B 90 63 13         [24] 9607 	mov	dptr,#___str_92
      00324E 75 F0 80         [24] 9608 	mov	b,#0x80
      003251 12 10 D9         [24] 9609 	lcall	_LCD_string_write
                                   9610 ;	.\ecen4350_lcd_v4.c:2182: LCD_string_write("  <FF> (SCAN)");
      003254 90 62 C5         [24] 9611 	mov	dptr,#___str_85
      003257 75 F0 80         [24] 9612 	mov	b,#0x80
      00325A 12 10 D9         [24] 9613 	lcall	_LCD_string_write
                                   9614 ;	.\ecen4350_lcd_v4.c:2183: setColorDefault();
      00325D 12 16 9D         [24] 9615 	lcall	_setColorDefault
                                   9616 ;	.\ecen4350_lcd_v4.c:2184: setCursor(0, 250);
      003260 75 6B FA         [24] 9617 	mov	_setCursor_PARM_2,#0xfa
      003263 75 6C 00         [24] 9618 	mov	(_setCursor_PARM_2 + 1),#0x00
      003266 90 00 00         [24] 9619 	mov	dptr,#0x0000
      003269 12 05 BF         [24] 9620 	lcall	_setCursor
                                   9621 ;	.\ecen4350_lcd_v4.c:2185: LCD_string_write("   ");
      00326C 90 62 D9         [24] 9622 	mov	dptr,#___str_87
      00326F 75 F0 80         [24] 9623 	mov	b,#0x80
      003272 12 10 D9         [24] 9624 	lcall	_LCD_string_write
                                   9625 ;	.\ecen4350_lcd_v4.c:2186: setColorHighlight2();
      003275 12 16 BF         [24] 9626 	lcall	_setColorHighlight2
                                   9627 ;	.\ecen4350_lcd_v4.c:2187: print8Hex(blockSize);
      003278 78 89            [12] 9628 	mov	r0,#_find_blockSize_65536_652
      00327A 86 82            [24] 9629 	mov	dpl,@r0
      00327C 12 15 AA         [24] 9630 	lcall	_print8Hex
                                   9631 ;	.\ecen4350_lcd_v4.c:2188: setColorDefault();
      00327F 12 16 9D         [24] 9632 	lcall	_setColorDefault
                                   9633 ;	.\ecen4350_lcd_v4.c:2189: LCD_string_write("\n Search Size Limit:");
      003282 90 63 21         [24] 9634 	mov	dptr,#___str_93
      003285 75 F0 80         [24] 9635 	mov	b,#0x80
      003288 12 10 D9         [24] 9636 	lcall	_LCD_string_write
                                   9637 ;	.\ecen4350_lcd_v4.c:2190: setColorWhite();
      00328B 12 16 ED         [24] 9638 	lcall	_setColorWhite
                                   9639 ;	.\ecen4350_lcd_v4.c:2191: LCD_string_write("\n BYTE [8 bits]");
      00328E 90 63 36         [24] 9640 	mov	dptr,#___str_94
      003291 75 F0 80         [24] 9641 	mov	b,#0x80
      003294 12 10 D9         [24] 9642 	lcall	_LCD_string_write
      003297 D0 05            [24] 9643 	pop	ar5
      003299 02 33 E0         [24] 9644 	ljmp	00126$
      00329C                       9645 00125$:
                                   9646 ;	.\ecen4350_lcd_v4.c:2192: } else if (blockSize == 0x02) {
      00329C 78 89            [12] 9647 	mov	r0,#_find_blockSize_65536_652
      00329E B6 02 6E         [24] 9648 	cjne	@r0,#0x02,00122$
                                   9649 ;	.\ecen4350_lcd_v4.c:2193: setColorGray();
      0032A1 C0 05            [24] 9650 	push	ar5
      0032A3 12 16 CB         [24] 9651 	lcall	_setColorGray
                                   9652 ;	.\ecen4350_lcd_v4.c:2194: LCD_string_write("  <01> BYTE\n  ");
      0032A6 90 63 46         [24] 9653 	mov	dptr,#___str_95
      0032A9 75 F0 80         [24] 9654 	mov	b,#0x80
      0032AC 12 10 D9         [24] 9655 	lcall	_LCD_string_write
                                   9656 ;	.\ecen4350_lcd_v4.c:2195: setColorHighlight2();
      0032AF 12 16 BF         [24] 9657 	lcall	_setColorHighlight2
                                   9658 ;	.\ecen4350_lcd_v4.c:2196: LCD_string_write("<02> WORD\n");
      0032B2 90 63 55         [24] 9659 	mov	dptr,#___str_96
      0032B5 75 F0 80         [24] 9660 	mov	b,#0x80
      0032B8 12 10 D9         [24] 9661 	lcall	_LCD_string_write
                                   9662 ;	.\ecen4350_lcd_v4.c:2197: setColorGray();
      0032BB 12 16 CB         [24] 9663 	lcall	_setColorGray
                                   9664 ;	.\ecen4350_lcd_v4.c:2198: LCD_string_write("  <04> DWORD\n");
      0032BE 90 63 13         [24] 9665 	mov	dptr,#___str_92
      0032C1 75 F0 80         [24] 9666 	mov	b,#0x80
      0032C4 12 10 D9         [24] 9667 	lcall	_LCD_string_write
                                   9668 ;	.\ecen4350_lcd_v4.c:2199: LCD_string_write("  <FF> (SCAN)");
      0032C7 90 62 C5         [24] 9669 	mov	dptr,#___str_85
      0032CA 75 F0 80         [24] 9670 	mov	b,#0x80
      0032CD 12 10 D9         [24] 9671 	lcall	_LCD_string_write
                                   9672 ;	.\ecen4350_lcd_v4.c:2200: setColorDefault();
      0032D0 12 16 9D         [24] 9673 	lcall	_setColorDefault
                                   9674 ;	.\ecen4350_lcd_v4.c:2201: setCursor(0, 250);
      0032D3 75 6B FA         [24] 9675 	mov	_setCursor_PARM_2,#0xfa
      0032D6 75 6C 00         [24] 9676 	mov	(_setCursor_PARM_2 + 1),#0x00
      0032D9 90 00 00         [24] 9677 	mov	dptr,#0x0000
      0032DC 12 05 BF         [24] 9678 	lcall	_setCursor
                                   9679 ;	.\ecen4350_lcd_v4.c:2202: LCD_string_write("   ");
      0032DF 90 62 D9         [24] 9680 	mov	dptr,#___str_87
      0032E2 75 F0 80         [24] 9681 	mov	b,#0x80
      0032E5 12 10 D9         [24] 9682 	lcall	_LCD_string_write
                                   9683 ;	.\ecen4350_lcd_v4.c:2203: setColorHighlight2();
      0032E8 12 16 BF         [24] 9684 	lcall	_setColorHighlight2
                                   9685 ;	.\ecen4350_lcd_v4.c:2204: print8Hex(blockSize);
      0032EB 78 89            [12] 9686 	mov	r0,#_find_blockSize_65536_652
      0032ED 86 82            [24] 9687 	mov	dpl,@r0
      0032EF 12 15 AA         [24] 9688 	lcall	_print8Hex
                                   9689 ;	.\ecen4350_lcd_v4.c:2205: setColorDefault();
      0032F2 12 16 9D         [24] 9690 	lcall	_setColorDefault
                                   9691 ;	.\ecen4350_lcd_v4.c:2206: LCD_string_write("\n Search Size Limit:");
      0032F5 90 63 21         [24] 9692 	mov	dptr,#___str_93
      0032F8 75 F0 80         [24] 9693 	mov	b,#0x80
      0032FB 12 10 D9         [24] 9694 	lcall	_LCD_string_write
                                   9695 ;	.\ecen4350_lcd_v4.c:2207: setColorWhite();
      0032FE 12 16 ED         [24] 9696 	lcall	_setColorWhite
                                   9697 ;	.\ecen4350_lcd_v4.c:2208: LCD_string_write("\n WORD [16 bits]");
      003301 90 63 60         [24] 9698 	mov	dptr,#___str_97
      003304 75 F0 80         [24] 9699 	mov	b,#0x80
      003307 12 10 D9         [24] 9700 	lcall	_LCD_string_write
      00330A D0 05            [24] 9701 	pop	ar5
      00330C 02 33 E0         [24] 9702 	ljmp	00126$
      00330F                       9703 00122$:
                                   9704 ;	.\ecen4350_lcd_v4.c:2209: } else if (blockSize == 0x04) {
      00330F 78 89            [12] 9705 	mov	r0,#_find_blockSize_65536_652
      003311 B6 04 64         [24] 9706 	cjne	@r0,#0x04,00119$
                                   9707 ;	.\ecen4350_lcd_v4.c:2210: setColorGray();
      003314 C0 05            [24] 9708 	push	ar5
      003316 12 16 CB         [24] 9709 	lcall	_setColorGray
                                   9710 ;	.\ecen4350_lcd_v4.c:2211: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003319 90 63 71         [24] 9711 	mov	dptr,#___str_98
      00331C 75 F0 80         [24] 9712 	mov	b,#0x80
      00331F 12 10 D9         [24] 9713 	lcall	_LCD_string_write
                                   9714 ;	.\ecen4350_lcd_v4.c:2212: setColorHighlight2();
      003322 12 16 BF         [24] 9715 	lcall	_setColorHighlight2
                                   9716 ;	.\ecen4350_lcd_v4.c:2213: LCD_string_write("<04> DWORD\n");
      003325 90 63 8C         [24] 9717 	mov	dptr,#___str_99
      003328 75 F0 80         [24] 9718 	mov	b,#0x80
      00332B 12 10 D9         [24] 9719 	lcall	_LCD_string_write
                                   9720 ;	.\ecen4350_lcd_v4.c:2214: setColorGray();
      00332E 12 16 CB         [24] 9721 	lcall	_setColorGray
                                   9722 ;	.\ecen4350_lcd_v4.c:2215: LCD_string_write("  <FF> (SCAN)");
      003331 90 62 C5         [24] 9723 	mov	dptr,#___str_85
      003334 75 F0 80         [24] 9724 	mov	b,#0x80
      003337 12 10 D9         [24] 9725 	lcall	_LCD_string_write
                                   9726 ;	.\ecen4350_lcd_v4.c:2216: setColorDefault();
      00333A 12 16 9D         [24] 9727 	lcall	_setColorDefault
                                   9728 ;	.\ecen4350_lcd_v4.c:2217: setCursor(0, 250);
      00333D 75 6B FA         [24] 9729 	mov	_setCursor_PARM_2,#0xfa
      003340 75 6C 00         [24] 9730 	mov	(_setCursor_PARM_2 + 1),#0x00
      003343 90 00 00         [24] 9731 	mov	dptr,#0x0000
      003346 12 05 BF         [24] 9732 	lcall	_setCursor
                                   9733 ;	.\ecen4350_lcd_v4.c:2218: LCD_string_write("   ");
      003349 90 62 D9         [24] 9734 	mov	dptr,#___str_87
      00334C 75 F0 80         [24] 9735 	mov	b,#0x80
      00334F 12 10 D9         [24] 9736 	lcall	_LCD_string_write
                                   9737 ;	.\ecen4350_lcd_v4.c:2219: setColorHighlight2();
      003352 12 16 BF         [24] 9738 	lcall	_setColorHighlight2
                                   9739 ;	.\ecen4350_lcd_v4.c:2220: print8Hex(blockSize);
      003355 78 89            [12] 9740 	mov	r0,#_find_blockSize_65536_652
      003357 86 82            [24] 9741 	mov	dpl,@r0
      003359 12 15 AA         [24] 9742 	lcall	_print8Hex
                                   9743 ;	.\ecen4350_lcd_v4.c:2221: setColorDefault();
      00335C 12 16 9D         [24] 9744 	lcall	_setColorDefault
                                   9745 ;	.\ecen4350_lcd_v4.c:2222: LCD_string_write("\n Search Size Limit:");
      00335F 90 63 21         [24] 9746 	mov	dptr,#___str_93
      003362 75 F0 80         [24] 9747 	mov	b,#0x80
      003365 12 10 D9         [24] 9748 	lcall	_LCD_string_write
                                   9749 ;	.\ecen4350_lcd_v4.c:2223: setColorWhite();
      003368 12 16 ED         [24] 9750 	lcall	_setColorWhite
                                   9751 ;	.\ecen4350_lcd_v4.c:2224: LCD_string_write("\n DWORD [32 bits]");
      00336B 90 63 98         [24] 9752 	mov	dptr,#___str_100
      00336E 75 F0 80         [24] 9753 	mov	b,#0x80
      003371 12 10 D9         [24] 9754 	lcall	_LCD_string_write
      003374 D0 05            [24] 9755 	pop	ar5
      003376 80 68            [24] 9756 	sjmp	00126$
      003378                       9757 00119$:
                                   9758 ;	.\ecen4350_lcd_v4.c:2225: } else if (blockSize == 0xFF) {
      003378 78 89            [12] 9759 	mov	r0,#_find_blockSize_65536_652
      00337A B6 FF 63         [24] 9760 	cjne	@r0,#0xff,00126$
                                   9761 ;	.\ecen4350_lcd_v4.c:2226: scan = 1;
      00337D 78 8B            [12] 9762 	mov	r0,#_find_scan_65536_652
      00337F 76 01            [12] 9763 	mov	@r0,#0x01
                                   9764 ;	.\ecen4350_lcd_v4.c:2227: setColorGray();
      003381 C0 05            [24] 9765 	push	ar5
      003383 12 16 CB         [24] 9766 	lcall	_setColorGray
                                   9767 ;	.\ecen4350_lcd_v4.c:2228: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003386 90 63 71         [24] 9768 	mov	dptr,#___str_98
      003389 75 F0 80         [24] 9769 	mov	b,#0x80
      00338C 12 10 D9         [24] 9770 	lcall	_LCD_string_write
                                   9771 ;	.\ecen4350_lcd_v4.c:2229: LCD_string_write("<04> DWORD\n  ");
      00338F 90 63 AA         [24] 9772 	mov	dptr,#___str_101
      003392 75 F0 80         [24] 9773 	mov	b,#0x80
      003395 12 10 D9         [24] 9774 	lcall	_LCD_string_write
                                   9775 ;	.\ecen4350_lcd_v4.c:2230: setColorHighlight2();
      003398 12 16 BF         [24] 9776 	lcall	_setColorHighlight2
                                   9777 ;	.\ecen4350_lcd_v4.c:2231: LCD_string_write("<FF> (SCAN)");
      00339B 90 63 B8         [24] 9778 	mov	dptr,#___str_102
      00339E 75 F0 80         [24] 9779 	mov	b,#0x80
      0033A1 12 10 D9         [24] 9780 	lcall	_LCD_string_write
                                   9781 ;	.\ecen4350_lcd_v4.c:2232: setColorDefault();
      0033A4 12 16 9D         [24] 9782 	lcall	_setColorDefault
                                   9783 ;	.\ecen4350_lcd_v4.c:2233: setCursor(0, 250);
      0033A7 75 6B FA         [24] 9784 	mov	_setCursor_PARM_2,#0xfa
      0033AA 75 6C 00         [24] 9785 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033AD 90 00 00         [24] 9786 	mov	dptr,#0x0000
      0033B0 12 05 BF         [24] 9787 	lcall	_setCursor
                                   9788 ;	.\ecen4350_lcd_v4.c:2234: LCD_string_write("   ");
      0033B3 90 62 D9         [24] 9789 	mov	dptr,#___str_87
      0033B6 75 F0 80         [24] 9790 	mov	b,#0x80
      0033B9 12 10 D9         [24] 9791 	lcall	_LCD_string_write
                                   9792 ;	.\ecen4350_lcd_v4.c:2235: setColorHighlight2();
      0033BC 12 16 BF         [24] 9793 	lcall	_setColorHighlight2
                                   9794 ;	.\ecen4350_lcd_v4.c:2236: print8Hex(blockSize);
      0033BF 78 89            [12] 9795 	mov	r0,#_find_blockSize_65536_652
      0033C1 86 82            [24] 9796 	mov	dpl,@r0
      0033C3 12 15 AA         [24] 9797 	lcall	_print8Hex
                                   9798 ;	.\ecen4350_lcd_v4.c:2237: setColorDefault();
      0033C6 12 16 9D         [24] 9799 	lcall	_setColorDefault
                                   9800 ;	.\ecen4350_lcd_v4.c:2238: LCD_string_write("\n Search Size Limit:");
      0033C9 90 63 21         [24] 9801 	mov	dptr,#___str_93
      0033CC 75 F0 80         [24] 9802 	mov	b,#0x80
      0033CF 12 10 D9         [24] 9803 	lcall	_LCD_string_write
                                   9804 ;	.\ecen4350_lcd_v4.c:2239: setColorWhite();
      0033D2 12 16 ED         [24] 9805 	lcall	_setColorWhite
                                   9806 ;	.\ecen4350_lcd_v4.c:2240: LCD_string_write("\n [256 Blocks]");
      0033D5 90 63 C4         [24] 9807 	mov	dptr,#___str_103
      0033D8 75 F0 80         [24] 9808 	mov	b,#0x80
      0033DB 12 10 D9         [24] 9809 	lcall	_LCD_string_write
      0033DE D0 05            [24] 9810 	pop	ar5
      0033E0                       9811 00126$:
                                   9812 ;	.\ecen4350_lcd_v4.c:2244: delay(40);
      0033E0 90 00 28         [24] 9813 	mov	dptr,#0x0028
      0033E3 C0 05            [24] 9814 	push	ar5
      0033E5 12 01 A9         [24] 9815 	lcall	_delay
                                   9816 ;	.\ecen4350_lcd_v4.c:2245: clearLCD();
      0033E8 12 0E 5C         [24] 9817 	lcall	_clearLCD
                                   9818 ;	.\ecen4350_lcd_v4.c:2246: fillTop(GRAY);
      0033EB 90 D6 BA         [24] 9819 	mov	dptr,#0xd6ba
      0033EE 12 0C 8F         [24] 9820 	lcall	_fillTop
                                   9821 ;	.\ecen4350_lcd_v4.c:2247: setTextSize(5);
      0033F1 75 82 05         [24] 9822 	mov	dpl,#0x05
      0033F4 12 05 D9         [24] 9823 	lcall	_setTextSize
                                   9824 ;	.\ecen4350_lcd_v4.c:2248: setColorMenu();
      0033F7 12 16 D6         [24] 9825 	lcall	_setColorMenu
                                   9826 ;	.\ecen4350_lcd_v4.c:2249: setCursor(30,0);
      0033FA E4               [12] 9827 	clr	a
      0033FB F5 6B            [12] 9828 	mov	_setCursor_PARM_2,a
      0033FD F5 6C            [12] 9829 	mov	(_setCursor_PARM_2 + 1),a
      0033FF 90 00 1E         [24] 9830 	mov	dptr,#0x001e
      003402 12 05 BF         [24] 9831 	lcall	_setCursor
                                   9832 ;	.\ecen4350_lcd_v4.c:2250: LCD_string_write("[FIND]\n");
      003405 90 62 65         [24] 9833 	mov	dptr,#___str_80
      003408 75 F0 80         [24] 9834 	mov	b,#0x80
      00340B 12 10 D9         [24] 9835 	lcall	_LCD_string_write
                                   9836 ;	.\ecen4350_lcd_v4.c:2251: setColorDefault();
      00340E 12 16 9D         [24] 9837 	lcall	_setColorDefault
                                   9838 ;	.\ecen4350_lcd_v4.c:2252: setTextSize(2);
      003411 75 82 02         [24] 9839 	mov	dpl,#0x02
      003414 12 05 D9         [24] 9840 	lcall	_setTextSize
      003417 D0 05            [24] 9841 	pop	ar5
                                   9842 ;	.\ecen4350_lcd_v4.c:2258: while (exit) {
      003419                       9843 00205$:
      003419 78 8D            [12] 9844 	mov	r0,#_find_exit_65536_652
      00341B E6               [12] 9845 	mov	a,@r0
      00341C 70 03            [24] 9846 	jnz	00556$
      00341E 02 39 E1         [24] 9847 	ljmp	00207$
      003421                       9848 00556$:
                                   9849 ;	.\ecen4350_lcd_v4.c:2260: if (scan) {	
      003421 78 8B            [12] 9850 	mov	r0,#_find_scan_65536_652
      003423 E6               [12] 9851 	mov	a,@r0
      003424 70 03            [24] 9852 	jnz	00557$
      003426 02 35 00         [24] 9853 	ljmp	00196$
      003429                       9854 00557$:
                                   9855 ;	.\ecen4350_lcd_v4.c:2261: setCursor(0, 60);
      003429 75 6B 3C         [24] 9856 	mov	_setCursor_PARM_2,#0x3c
      00342C 75 6C 00         [24] 9857 	mov	(_setCursor_PARM_2 + 1),#0x00
      00342F 90 00 00         [24] 9858 	mov	dptr,#0x0000
      003432 C0 05            [24] 9859 	push	ar5
      003434 12 05 BF         [24] 9860 	lcall	_setCursor
                                   9861 ;	.\ecen4350_lcd_v4.c:2262: setColorYellow();
      003437 12 17 03         [24] 9862 	lcall	_setColorYellow
                                   9863 ;	.\ecen4350_lcd_v4.c:2263: LCD_string_write(" [Non-Interactive]\n");
      00343A 90 63 D3         [24] 9864 	mov	dptr,#___str_104
      00343D 75 F0 80         [24] 9865 	mov	b,#0x80
      003440 12 10 D9         [24] 9866 	lcall	_LCD_string_write
                                   9867 ;	.\ecen4350_lcd_v4.c:2264: setColorWhite();
      003443 12 16 ED         [24] 9868 	lcall	_setColorWhite
                                   9869 ;	.\ecen4350_lcd_v4.c:2265: LCD_string_write(" Search Value:\n ");
      003446 90 63 E7         [24] 9870 	mov	dptr,#___str_105
      003449 75 F0 80         [24] 9871 	mov	b,#0x80
      00344C 12 10 D9         [24] 9872 	lcall	_LCD_string_write
                                   9873 ;	.\ecen4350_lcd_v4.c:2266: setColorDefault();
      00344F 12 16 9D         [24] 9874 	lcall	_setColorDefault
                                   9875 ;	.\ecen4350_lcd_v4.c:2267: print8Hex(value);
      003452 78 8A            [12] 9876 	mov	r0,#_find_value_65536_652
      003454 86 82            [24] 9877 	mov	dpl,@r0
      003456 12 15 AA         [24] 9878 	lcall	_print8Hex
      003459 D0 05            [24] 9879 	pop	ar5
                                   9880 ;	.\ecen4350_lcd_v4.c:2268: for(unsigned int i = 0; i < blockSize; i++) {
      00345B 8D 03            [24] 9881 	mov	ar3,r5
      00345D E4               [12] 9882 	clr	a
      00345E F5 61            [12] 9883 	mov	_find_i_262144_665,a
      003460 F5 62            [12] 9884 	mov	(_find_i_262144_665 + 1),a
      003462                       9885 00211$:
      003462 78 89            [12] 9886 	mov	r0,#_find_blockSize_65536_652
      003464 86 02            [24] 9887 	mov	ar2,@r0
      003466 7E 00            [12] 9888 	mov	r6,#0x00
      003468 C3               [12] 9889 	clr	c
      003469 E5 61            [12] 9890 	mov	a,_find_i_262144_665
      00346B 9A               [12] 9891 	subb	a,r2
      00346C E5 62            [12] 9892 	mov	a,(_find_i_262144_665 + 1)
      00346E 9E               [12] 9893 	subb	a,r6
      00346F 40 03            [24] 9894 	jc	00558$
      003471 02 34 F7         [24] 9895 	ljmp	00271$
      003474                       9896 00558$:
                                   9897 ;	.\ecen4350_lcd_v4.c:2269: d = (unsigned char __xdata*)(i+address);
      003474 78 87            [12] 9898 	mov	r0,#_find_address_65536_652
      003476 E6               [12] 9899 	mov	a,@r0
      003477 25 61            [12] 9900 	add	a,_find_i_262144_665
      003479 FC               [12] 9901 	mov	r4,a
      00347A 08               [12] 9902 	inc	r0
      00347B E6               [12] 9903 	mov	a,@r0
      00347C 35 62            [12] 9904 	addc	a,(_find_i_262144_665 + 1)
      00347E FE               [12] 9905 	mov	r6,a
                                   9906 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                   9907 ;	assignBit
      00347F C2 B5            [12] 9908 	clr	_P3_5
                                   9909 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      003481 8C 82            [24] 9910 	mov	dpl,r4
      003483 8E 83            [24] 9911 	mov	dph,r6
      003485 E0               [24] 9912 	movx	a,@dptr
      003486 FC               [12] 9913 	mov	r4,a
                                   9914 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                   9915 ;	assignBit
      003487 D2 B5            [12] 9916 	setb	_P3_5
                                   9917 ;	.\ecen4350_lcd_v4.c:2270: if(value == ramRead8(d)){
      003489 78 8A            [12] 9918 	mov	r0,#_find_value_65536_652
      00348B E6               [12] 9919 	mov	a,@r0
      00348C B5 04 5D         [24] 9920 	cjne	a,ar4,00212$
                                   9921 ;	.\ecen4350_lcd_v4.c:2271: noneFound = 0;
      00348F 78 8C            [12] 9922 	mov	r0,#_find_noneFound_65536_652
      003491 76 00            [12] 9923 	mov	@r0,#0x00
                                   9924 ;	.\ecen4350_lcd_v4.c:2273: if (page == 0) {		
      003493 EB               [12] 9925 	mov	a,r3
      003494 70 34            [24] 9926 	jnz	00128$
                                   9927 ;	.\ecen4350_lcd_v4.c:2274: setColorWhite();
      003496 C0 03            [24] 9928 	push	ar3
      003498 12 16 ED         [24] 9929 	lcall	_setColorWhite
                                   9930 ;	.\ecen4350_lcd_v4.c:2275: setCursor(0, 120);
      00349B 75 6B 78         [24] 9931 	mov	_setCursor_PARM_2,#0x78
      00349E 75 6C 00         [24] 9932 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034A1 90 00 00         [24] 9933 	mov	dptr,#0x0000
      0034A4 12 05 BF         [24] 9934 	lcall	_setCursor
                                   9935 ;	.\ecen4350_lcd_v4.c:2276: LCD_string_write(" Found at Location:\n");
      0034A7 90 63 F8         [24] 9936 	mov	dptr,#___str_106
      0034AA 75 F0 80         [24] 9937 	mov	b,#0x80
      0034AD 12 10 D9         [24] 9938 	lcall	_LCD_string_write
                                   9939 ;	.\ecen4350_lcd_v4.c:2277: setColorDefault();
      0034B0 12 16 9D         [24] 9940 	lcall	_setColorDefault
                                   9941 ;	.\ecen4350_lcd_v4.c:2278: LCD_string_write(" 0x");
      0034B3 90 60 7E         [24] 9942 	mov	dptr,#___str_46
      0034B6 75 F0 80         [24] 9943 	mov	b,#0x80
      0034B9 12 10 D9         [24] 9944 	lcall	_LCD_string_write
                                   9945 ;	.\ecen4350_lcd_v4.c:2279: print16Hex(i);
      0034BC 85 61 82         [24] 9946 	mov	dpl,_find_i_262144_665
      0034BF 85 62 83         [24] 9947 	mov	dph,(_find_i_262144_665 + 1)
      0034C2 12 15 C1         [24] 9948 	lcall	_print16Hex
      0034C5 D0 03            [24] 9949 	pop	ar3
                                   9950 ;	.\ecen4350_lcd_v4.c:2280: page++;
      0034C7 0B               [12] 9951 	inc	r3
      0034C8 80 22            [24] 9952 	sjmp	00212$
      0034CA                       9953 00128$:
                                   9954 ;	.\ecen4350_lcd_v4.c:2282: setCursor(0, 120);
      0034CA 75 6B 78         [24] 9955 	mov	_setCursor_PARM_2,#0x78
      0034CD 75 6C 00         [24] 9956 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034D0 90 00 00         [24] 9957 	mov	dptr,#0x0000
      0034D3 C0 03            [24] 9958 	push	ar3
      0034D5 12 05 BF         [24] 9959 	lcall	_setCursor
                                   9960 ;	.\ecen4350_lcd_v4.c:2283: LCD_string_write("\n 0x");
      0034D8 90 64 0D         [24] 9961 	mov	dptr,#___str_107
      0034DB 75 F0 80         [24] 9962 	mov	b,#0x80
      0034DE 12 10 D9         [24] 9963 	lcall	_LCD_string_write
                                   9964 ;	.\ecen4350_lcd_v4.c:2284: print16Hex(i);
      0034E1 85 61 82         [24] 9965 	mov	dpl,_find_i_262144_665
      0034E4 85 62 83         [24] 9966 	mov	dph,(_find_i_262144_665 + 1)
      0034E7 12 15 C1         [24] 9967 	lcall	_print16Hex
      0034EA D0 03            [24] 9968 	pop	ar3
      0034EC                       9969 00212$:
                                   9970 ;	.\ecen4350_lcd_v4.c:2268: for(unsigned int i = 0; i < blockSize; i++) {
      0034EC 05 61            [12] 9971 	inc	_find_i_262144_665
      0034EE E4               [12] 9972 	clr	a
      0034EF B5 61 02         [24] 9973 	cjne	a,_find_i_262144_665,00562$
      0034F2 05 62            [12] 9974 	inc	(_find_i_262144_665 + 1)
      0034F4                       9975 00562$:
      0034F4 02 34 62         [24] 9976 	ljmp	00211$
      0034F7                       9977 00271$:
      0034F7 8B 05            [24] 9978 	mov	ar5,r3
                                   9979 ;	.\ecen4350_lcd_v4.c:2288: exit = 0;
      0034F9 78 8D            [12] 9980 	mov	r0,#_find_exit_65536_652
      0034FB 76 00            [12] 9981 	mov	@r0,#0x00
      0034FD 02 39 68         [24] 9982 	ljmp	00197$
      003500                       9983 00196$:
                                   9984 ;	.\ecen4350_lcd_v4.c:2290: setCursor(0, 60);
      003500 75 6B 3C         [24] 9985 	mov	_setCursor_PARM_2,#0x3c
      003503 75 6C 00         [24] 9986 	mov	(_setCursor_PARM_2 + 1),#0x00
      003506 90 00 00         [24] 9987 	mov	dptr,#0x0000
      003509 C0 05            [24] 9988 	push	ar5
      00350B 12 05 BF         [24] 9989 	lcall	_setCursor
                                   9990 ;	.\ecen4350_lcd_v4.c:2291: setColorYellow();
      00350E 12 17 03         [24] 9991 	lcall	_setColorYellow
                                   9992 ;	.\ecen4350_lcd_v4.c:2292: LCD_string_write(" [Interactive]\n");
      003511 90 64 12         [24] 9993 	mov	dptr,#___str_108
      003514 75 F0 80         [24] 9994 	mov	b,#0x80
      003517 12 10 D9         [24] 9995 	lcall	_LCD_string_write
                                   9996 ;	.\ecen4350_lcd_v4.c:2293: setColorWhite();
      00351A 12 16 ED         [24] 9997 	lcall	_setColorWhite
                                   9998 ;	.\ecen4350_lcd_v4.c:2294: LCD_string_write(" Search Value:\n ");
      00351D 90 63 E7         [24] 9999 	mov	dptr,#___str_105
      003520 75 F0 80         [24]10000 	mov	b,#0x80
      003523 12 10 D9         [24]10001 	lcall	_LCD_string_write
                                  10002 ;	.\ecen4350_lcd_v4.c:2295: setColorDefault();
      003526 12 16 9D         [24]10003 	lcall	_setColorDefault
                                  10004 ;	.\ecen4350_lcd_v4.c:2296: print8Hex(value);
      003529 78 8A            [12]10005 	mov	r0,#_find_value_65536_652
      00352B 86 82            [24]10006 	mov	dpl,@r0
      00352D 12 15 AA         [24]10007 	lcall	_print8Hex
      003530 D0 05            [24]10008 	pop	ar5
                                  10009 ;	.\ecen4350_lcd_v4.c:2299: for (unsigned int i = 0; i < blockSize; i++) {
      003532 E4               [12]10010 	clr	a
      003533 F5 64            [12]10011 	mov	_find_sloc1_1_0,a
      003535 F5 65            [12]10012 	mov	(_find_sloc1_1_0 + 1),a
      003537                      10013 00214$:
      003537 78 89            [12]10014 	mov	r0,#_find_blockSize_65536_652
      003539 86 02            [24]10015 	mov	ar2,@r0
      00353B 7B 00            [12]10016 	mov	r3,#0x00
      00353D C3               [12]10017 	clr	c
      00353E E5 64            [12]10018 	mov	a,_find_sloc1_1_0
      003540 9A               [12]10019 	subb	a,r2
      003541 E5 65            [12]10020 	mov	a,(_find_sloc1_1_0 + 1)
      003543 9B               [12]10021 	subb	a,r3
      003544 40 03            [24]10022 	jc	00563$
      003546 02 39 68         [24]10023 	ljmp	00197$
      003549                      10024 00563$:
                                  10025 ;	.\ecen4350_lcd_v4.c:2300: d = (unsigned char __xdata*)(i+address);
      003549 78 87            [12]10026 	mov	r0,#_find_address_65536_652
      00354B E6               [12]10027 	mov	a,@r0
      00354C 25 64            [12]10028 	add	a,_find_sloc1_1_0
      00354E FA               [12]10029 	mov	r2,a
      00354F 08               [12]10030 	inc	r0
      003550 E6               [12]10031 	mov	a,@r0
      003551 35 65            [12]10032 	addc	a,(_find_sloc1_1_0 + 1)
      003553 FB               [12]10033 	mov	r3,a
      003554 8A 82            [24]10034 	mov	dpl,r2
      003556 8B 83            [24]10035 	mov	dph,r3
                                  10036 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  10037 ;	assignBit
      003558 C2 B5            [12]10038 	clr	_P3_5
                                  10039 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      00355A E0               [24]10040 	movx	a,@dptr
      00355B FB               [12]10041 	mov	r3,a
                                  10042 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  10043 ;	assignBit
      00355C D2 B5            [12]10044 	setb	_P3_5
                                  10045 ;	.\ecen4350_lcd_v4.c:2301: if(value == ramRead8(d)){
      00355E 78 8A            [12]10046 	mov	r0,#_find_value_65536_652
      003560 E6               [12]10047 	mov	a,@r0
      003561 B5 03 02         [24]10048 	cjne	a,ar3,00564$
      003564 80 03            [24]10049 	sjmp	00565$
      003566                      10050 00564$:
      003566 02 39 5D         [24]10051 	ljmp	00215$
      003569                      10052 00565$:
                                  10053 ;	.\ecen4350_lcd_v4.c:2302: noneFound = 0;		// toggle flag
      003569 78 8C            [12]10054 	mov	r0,#_find_noneFound_65536_652
      00356B 76 00            [12]10055 	mov	@r0,#0x00
                                  10056 ;	.\ecen4350_lcd_v4.c:2303: setCursor(0, 120);
      00356D 75 6B 78         [24]10057 	mov	_setCursor_PARM_2,#0x78
      003570 75 6C 00         [24]10058 	mov	(_setCursor_PARM_2 + 1),#0x00
      003573 90 00 00         [24]10059 	mov	dptr,#0x0000
      003576 C0 05            [24]10060 	push	ar5
      003578 12 05 BF         [24]10061 	lcall	_setCursor
                                  10062 ;	.\ecen4350_lcd_v4.c:2304: setColorWhite();
      00357B 12 16 ED         [24]10063 	lcall	_setColorWhite
                                  10064 ;	.\ecen4350_lcd_v4.c:2305: LCD_string_write(" Found at Location \n");
      00357E 90 64 22         [24]10065 	mov	dptr,#___str_109
      003581 75 F0 80         [24]10066 	mov	b,#0x80
      003584 12 10 D9         [24]10067 	lcall	_LCD_string_write
                                  10068 ;	.\ecen4350_lcd_v4.c:2306: setColorDefault();
      003587 12 16 9D         [24]10069 	lcall	_setColorDefault
                                  10070 ;	.\ecen4350_lcd_v4.c:2307: LCD_string_write(" 0x");
      00358A 90 60 7E         [24]10071 	mov	dptr,#___str_46
      00358D 75 F0 80         [24]10072 	mov	b,#0x80
      003590 12 10 D9         [24]10073 	lcall	_LCD_string_write
      003593 D0 05            [24]10074 	pop	ar5
                                  10075 ;	.\ecen4350_lcd_v4.c:2308: print16Hex(page+address);
      003595 8D 02            [24]10076 	mov	ar2,r5
      003597 7B 00            [12]10077 	mov	r3,#0x00
      003599 78 87            [12]10078 	mov	r0,#_find_address_65536_652
      00359B E6               [12]10079 	mov	a,@r0
      00359C 2A               [12]10080 	add	a,r2
      00359D F5 82            [12]10081 	mov	dpl,a
      00359F 08               [12]10082 	inc	r0
      0035A0 E6               [12]10083 	mov	a,@r0
      0035A1 3B               [12]10084 	addc	a,r3
      0035A2 F5 83            [12]10085 	mov	dph,a
      0035A4 C0 05            [24]10086 	push	ar5
      0035A6 12 15 C1         [24]10087 	lcall	_print16Hex
                                  10088 ;	.\ecen4350_lcd_v4.c:2309: setCursor(50, 300);
      0035A9 75 6B 2C         [24]10089 	mov	_setCursor_PARM_2,#0x2c
      0035AC 75 6C 01         [24]10090 	mov	(_setCursor_PARM_2 + 1),#0x01
      0035AF 90 00 32         [24]10091 	mov	dptr,#0x0032
      0035B2 12 05 BF         [24]10092 	lcall	_setCursor
                                  10093 ;	.\ecen4350_lcd_v4.c:2310: setColorGray();
      0035B5 12 16 CB         [24]10094 	lcall	_setColorGray
                                  10095 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write("Page: ");
      0035B8 90 64 37         [24]10096 	mov	dptr,#___str_110
      0035BB 75 F0 80         [24]10097 	mov	b,#0x80
      0035BE 12 10 D9         [24]10098 	lcall	_LCD_string_write
                                  10099 ;	.\ecen4350_lcd_v4.c:2312: setColorHighlight2();
      0035C1 12 16 BF         [24]10100 	lcall	_setColorHighlight2
      0035C4 D0 05            [24]10101 	pop	ar5
                                  10102 ;	.\ecen4350_lcd_v4.c:2313: print8Hex(page+1);
      0035C6 8D 03            [24]10103 	mov	ar3,r5
      0035C8 EB               [12]10104 	mov	a,r3
      0035C9 04               [12]10105 	inc	a
      0035CA F5 82            [12]10106 	mov	dpl,a
      0035CC C0 05            [24]10107 	push	ar5
      0035CE 12 15 AA         [24]10108 	lcall	_print8Hex
      0035D1 D0 05            [24]10109 	pop	ar5
                                  10110 ;	.\ecen4350_lcd_v4.c:2317: if (i == 0) {					// At beginning, page <0>
      0035D3 E5 64            [12]10111 	mov	a,_find_sloc1_1_0
      0035D5 45 65            [12]10112 	orl	a,(_find_sloc1_1_0 + 1)
      0035D7 60 03            [24]10113 	jz	00566$
      0035D9 02 37 08         [24]10114 	ljmp	00190$
      0035DC                      10115 00566$:
                                  10116 ;	.\ecen4350_lcd_v4.c:2318: if (i != blockSize - 1) {	// not at the end yet, no previous page
      0035DC C0 05            [24]10117 	push	ar5
      0035DE 78 89            [12]10118 	mov	r0,#_find_blockSize_65536_652
      0035E0 86 02            [24]10119 	mov	ar2,@r0
      0035E2 7B 00            [12]10120 	mov	r3,#0x00
      0035E4 EA               [12]10121 	mov	a,r2
      0035E5 24 FF            [12]10122 	add	a,#0xff
      0035E7 FD               [12]10123 	mov	r5,a
      0035E8 EB               [12]10124 	mov	a,r3
      0035E9 34 FF            [12]10125 	addc	a,#0xff
      0035EB FF               [12]10126 	mov	r7,a
      0035EC ED               [12]10127 	mov	a,r5
      0035ED B5 64 09         [24]10128 	cjne	a,_find_sloc1_1_0,00567$
      0035F0 EF               [12]10129 	mov	a,r7
      0035F1 B5 65 05         [24]10130 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      0035F4 D0 05            [24]10131 	pop	ar5
      0035F6 02 36 89         [24]10132 	ljmp	00148$
      0035F9                      10133 00567$:
                                  10134 ;	.\ecen4350_lcd_v4.c:2319: setCursor(0, 180);
      0035F9 75 6B B4         [24]10135 	mov	_setCursor_PARM_2,#0xb4
      0035FC 75 6C 00         [24]10136 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035FF 90 00 00         [24]10137 	mov	dptr,#0x0000
      003602 12 05 BF         [24]10138 	lcall	_setCursor
                                  10139 ;	.\ecen4350_lcd_v4.c:2320: setColorWhite();
      003605 12 16 ED         [24]10140 	lcall	_setColorWhite
                                  10141 ;	.\ecen4350_lcd_v4.c:2321: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      003608 90 64 3E         [24]10142 	mov	dptr,#___str_111
      00360B 75 F0 80         [24]10143 	mov	b,#0x80
      00360E 12 10 D9         [24]10144 	lcall	_LCD_string_write
      003611 D0 05            [24]10145 	pop	ar5
                                  10146 ;	.\ecen4350_lcd_v4.c:2322: invalidInput = 1;
      003613 7F 01            [12]10147 	mov	r7,#0x01
                                  10148 ;	.\ecen4350_lcd_v4.c:2323: while (invalidInput) {
      003615 8D 63            [24]10149 	mov	_find_sloc0_1_0,r5
      003617                      10150 00137$:
      003617 EF               [12]10151 	mov	a,r7
      003618 70 03            [24]10152 	jnz	00568$
      00361A 02 36 FB         [24]10153 	ljmp	00272$
      00361D                      10154 00568$:
                                  10155 ;	.\ecen4350_lcd_v4.c:2324: selection = keyDetect();
      00361D C0 07            [24]10156 	push	ar7
      00361F 12 11 F7         [24]10157 	lcall	_keyDetect
      003622 AF 82            [24]10158 	mov	r7,dpl
      003624 78 71            [12]10159 	mov	r0,#_selection
      003626 A6 07            [24]10160 	mov	@r0,ar7
                                  10161 ;	.\ecen4350_lcd_v4.c:2325: if(selection == '1'){
      003628 BF 31 02         [24]10162 	cjne	r7,#0x31,00569$
      00362B 80 04            [24]10163 	sjmp	00570$
      00362D                      10164 00569$:
      00362D D0 07            [24]10165 	pop	ar7
      00362F 80 27            [24]10166 	sjmp	00134$
      003631                      10167 00570$:
      003631 D0 07            [24]10168 	pop	ar7
                                  10169 ;	.\ecen4350_lcd_v4.c:2326: setCursor(0, 180);
      003633 75 6B B4         [24]10170 	mov	_setCursor_PARM_2,#0xb4
      003636 75 6C 00         [24]10171 	mov	(_setCursor_PARM_2 + 1),#0x00
      003639 90 00 00         [24]10172 	mov	dptr,#0x0000
      00363C 12 05 BF         [24]10173 	lcall	_setCursor
                                  10174 ;	.\ecen4350_lcd_v4.c:2327: LCD_string_write(" ");
      00363F 90 5F 84         [24]10175 	mov	dptr,#___str_30
      003642 75 F0 80         [24]10176 	mov	b,#0x80
      003645 12 10 D9         [24]10177 	lcall	_LCD_string_write
                                  10178 ;	.\ecen4350_lcd_v4.c:2328: setColorHighlight2();
      003648 12 16 BF         [24]10179 	lcall	_setColorHighlight2
                                  10180 ;	.\ecen4350_lcd_v4.c:2329: LCD_string_write("<1> Next");
      00364B 90 64 61         [24]10181 	mov	dptr,#___str_112
      00364E 75 F0 80         [24]10182 	mov	b,#0x80
      003651 12 10 D9         [24]10183 	lcall	_LCD_string_write
                                  10184 ;	.\ecen4350_lcd_v4.c:2330: invalidInput = 0;
      003654 7F 00            [12]10185 	mov	r7,#0x00
                                  10186 ;	.\ecen4350_lcd_v4.c:2331: page++;
      003656 05 63            [12]10187 	inc	_find_sloc0_1_0
      003658                      10188 00134$:
                                  10189 ;	.\ecen4350_lcd_v4.c:2332: } if(selection == '0') {
      003658 78 71            [12]10190 	mov	r0,#_selection
      00365A B6 30 BA         [24]10191 	cjne	@r0,#0x30,00137$
                                  10192 ;	.\ecen4350_lcd_v4.c:2333: setColorDefault();
      00365D 12 16 9D         [24]10193 	lcall	_setColorDefault
                                  10194 ;	.\ecen4350_lcd_v4.c:2334: setCursor(0, 180);
      003660 75 6B B4         [24]10195 	mov	_setCursor_PARM_2,#0xb4
      003663 75 6C 00         [24]10196 	mov	(_setCursor_PARM_2 + 1),#0x00
      003666 90 00 00         [24]10197 	mov	dptr,#0x0000
      003669 12 05 BF         [24]10198 	lcall	_setCursor
                                  10199 ;	.\ecen4350_lcd_v4.c:2335: LCD_string_write("\n ");
      00366C 90 61 8F         [24]10200 	mov	dptr,#___str_67
      00366F 75 F0 80         [24]10201 	mov	b,#0x80
      003672 12 10 D9         [24]10202 	lcall	_LCD_string_write
                                  10203 ;	.\ecen4350_lcd_v4.c:2336: setColorHighlight2();
      003675 12 16 BF         [24]10204 	lcall	_setColorHighlight2
                                  10205 ;	.\ecen4350_lcd_v4.c:2337: LCD_string_write("<0> Exit");
      003678 90 62 4A         [24]10206 	mov	dptr,#___str_78
      00367B 75 F0 80         [24]10207 	mov	b,#0x80
      00367E 12 10 D9         [24]10208 	lcall	_LCD_string_write
                                  10209 ;	.\ecen4350_lcd_v4.c:2338: exit = 0;		// set exit flag
      003681 78 8D            [12]10210 	mov	r0,#_find_exit_65536_652
      003683 76 00            [12]10211 	mov	@r0,#0x00
                                  10212 ;	.\ecen4350_lcd_v4.c:2339: invalidInput = 0;
      003685 7F 00            [12]10213 	mov	r7,#0x00
      003687 80 8E            [24]10214 	sjmp	00137$
      003689                      10215 00148$:
                                  10216 ;	.\ecen4350_lcd_v4.c:2342: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      003689 1A               [12]10217 	dec	r2
      00368A BA FF 01         [24]10218 	cjne	r2,#0xff,00573$
      00368D 1B               [12]10219 	dec	r3
      00368E                      10220 00573$:
      00368E EA               [12]10221 	mov	a,r2
      00368F B5 64 6B         [24]10222 	cjne	a,_find_sloc1_1_0,00149$
      003692 EB               [12]10223 	mov	a,r3
      003693 B5 65 67         [24]10224 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10225 ;	.\ecen4350_lcd_v4.c:2343: setCursor(0, 180);
      003696 75 6B B4         [24]10226 	mov	_setCursor_PARM_2,#0xb4
      003699 75 6C 00         [24]10227 	mov	(_setCursor_PARM_2 + 1),#0x00
      00369C 90 00 00         [24]10228 	mov	dptr,#0x0000
      00369F C0 05            [24]10229 	push	ar5
      0036A1 12 05 BF         [24]10230 	lcall	_setCursor
                                  10231 ;	.\ecen4350_lcd_v4.c:2344: setColorWhite();
      0036A4 12 16 ED         [24]10232 	lcall	_setColorWhite
                                  10233 ;	.\ecen4350_lcd_v4.c:2345: LCD_string_write("          \n <0> Exit\n              ");
      0036A7 90 64 6A         [24]10234 	mov	dptr,#___str_113
      0036AA 75 F0 80         [24]10235 	mov	b,#0x80
      0036AD 12 10 D9         [24]10236 	lcall	_LCD_string_write
      0036B0 D0 05            [24]10237 	pop	ar5
                                  10238 ;	.\ecen4350_lcd_v4.c:2346: invalidInput = 1;
      0036B2 7F 01            [12]10239 	mov	r7,#0x01
                                  10240 ;	.\ecen4350_lcd_v4.c:2347: while (invalidInput) {
      0036B4                      10241 00142$:
      0036B4 EF               [12]10242 	mov	a,r7
      0036B5 60 46            [24]10243 	jz	00149$
                                  10244 ;	.\ecen4350_lcd_v4.c:2348: selection = keyDetect();
      0036B7 C0 07            [24]10245 	push	ar7
      0036B9 C0 05            [24]10246 	push	ar5
      0036BB 12 11 F7         [24]10247 	lcall	_keyDetect
      0036BE AB 82            [24]10248 	mov	r3,dpl
      0036C0 D0 05            [24]10249 	pop	ar5
      0036C2 D0 07            [24]10250 	pop	ar7
      0036C4 78 71            [12]10251 	mov	r0,#_selection
      0036C6 A6 03            [24]10252 	mov	@r0,ar3
                                  10253 ;	.\ecen4350_lcd_v4.c:2349: if(selection == '0') {
      0036C8 BB 30 E9         [24]10254 	cjne	r3,#0x30,00142$
                                  10255 ;	.\ecen4350_lcd_v4.c:2350: setColorDefault();
      0036CB C0 05            [24]10256 	push	ar5
      0036CD 12 16 9D         [24]10257 	lcall	_setColorDefault
                                  10258 ;	.\ecen4350_lcd_v4.c:2351: setCursor(0, 180);
      0036D0 75 6B B4         [24]10259 	mov	_setCursor_PARM_2,#0xb4
      0036D3 75 6C 00         [24]10260 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036D6 90 00 00         [24]10261 	mov	dptr,#0x0000
      0036D9 12 05 BF         [24]10262 	lcall	_setCursor
                                  10263 ;	.\ecen4350_lcd_v4.c:2352: LCD_string_write("\n ");
      0036DC 90 61 8F         [24]10264 	mov	dptr,#___str_67
      0036DF 75 F0 80         [24]10265 	mov	b,#0x80
      0036E2 12 10 D9         [24]10266 	lcall	_LCD_string_write
                                  10267 ;	.\ecen4350_lcd_v4.c:2353: setColorHighlight2();
      0036E5 12 16 BF         [24]10268 	lcall	_setColorHighlight2
                                  10269 ;	.\ecen4350_lcd_v4.c:2354: LCD_string_write("<0> Exit");
      0036E8 90 62 4A         [24]10270 	mov	dptr,#___str_78
      0036EB 75 F0 80         [24]10271 	mov	b,#0x80
      0036EE 12 10 D9         [24]10272 	lcall	_LCD_string_write
      0036F1 D0 05            [24]10273 	pop	ar5
                                  10274 ;	.\ecen4350_lcd_v4.c:2355: exit = 0;		// set exit flag
      0036F3 78 8D            [12]10275 	mov	r0,#_find_exit_65536_652
      0036F5 76 00            [12]10276 	mov	@r0,#0x00
                                  10277 ;	.\ecen4350_lcd_v4.c:2356: invalidInput = 0;
      0036F7 7F 00            [12]10278 	mov	r7,#0x00
      0036F9 80 B9            [24]10279 	sjmp	00142$
      0036FB                      10280 00272$:
      0036FB AD 63            [24]10281 	mov	r5,_find_sloc0_1_0
      0036FD                      10282 00149$:
                                  10283 ;	.\ecen4350_lcd_v4.c:2360: if (exit == 0) {	// check exit flag
      0036FD 78 8D            [12]10284 	mov	r0,#_find_exit_65536_652
      0036FF E6               [12]10285 	mov	a,@r0
      003700 60 03            [24]10286 	jz	00579$
      003702 02 39 5D         [24]10287 	ljmp	00215$
      003705                      10288 00579$:
                                  10289 ;	.\ecen4350_lcd_v4.c:2361: break;			// break out of for loop iteration
      003705 02 39 68         [24]10290 	ljmp	00197$
      003708                      10291 00190$:
                                  10292 ;	.\ecen4350_lcd_v4.c:2366: else if (i == blockSize - 1) {		// At Page End 
      003708 C0 05            [24]10293 	push	ar5
      00370A 78 89            [12]10294 	mov	r0,#_find_blockSize_65536_652
      00370C 86 03            [24]10295 	mov	ar3,@r0
      00370E 7F 00            [12]10296 	mov	r7,#0x00
      003710 EB               [12]10297 	mov	a,r3
      003711 24 FF            [12]10298 	add	a,#0xff
      003713 FA               [12]10299 	mov	r2,a
      003714 EF               [12]10300 	mov	a,r7
      003715 34 FF            [12]10301 	addc	a,#0xff
      003717 FD               [12]10302 	mov	r5,a
      003718 EA               [12]10303 	mov	a,r2
      003719 B5 64 06         [24]10304 	cjne	a,_find_sloc1_1_0,00580$
      00371C ED               [12]10305 	mov	a,r5
      00371D B5 65 02         [24]10306 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      003720 80 05            [24]10307 	sjmp	00581$
      003722                      10308 00580$:
      003722 D0 05            [24]10309 	pop	ar5
      003724 02 38 54         [24]10310 	ljmp	00187$
      003727                      10311 00581$:
      003727 D0 05            [24]10312 	pop	ar5
                                  10313 ;	.\ecen4350_lcd_v4.c:2367: if (i != 0) {				// not at beginning, no next page
      003729 E5 64            [12]10314 	mov	a,_find_sloc1_1_0
      00372B 45 65            [12]10315 	orl	a,(_find_sloc1_1_0 + 1)
      00372D 70 03            [24]10316 	jnz	00582$
      00372F 02 37 DD         [24]10317 	ljmp	00167$
      003732                      10318 00582$:
                                  10319 ;	.\ecen4350_lcd_v4.c:2368: setCursor(0, 180);
      003732 75 6B B4         [24]10320 	mov	_setCursor_PARM_2,#0xb4
      003735 75 6C 00         [24]10321 	mov	(_setCursor_PARM_2 + 1),#0x00
      003738 90 00 00         [24]10322 	mov	dptr,#0x0000
      00373B C0 05            [24]10323 	push	ar5
      00373D 12 05 BF         [24]10324 	lcall	_setCursor
                                  10325 ;	.\ecen4350_lcd_v4.c:2369: setColorWhite();
      003740 12 16 ED         [24]10326 	lcall	_setColorWhite
                                  10327 ;	.\ecen4350_lcd_v4.c:2370: LCD_string_write("          \n <0> Exit\n <2> Previous");
      003743 90 64 8E         [24]10328 	mov	dptr,#___str_114
      003746 75 F0 80         [24]10329 	mov	b,#0x80
      003749 12 10 D9         [24]10330 	lcall	_LCD_string_write
      00374C D0 05            [24]10331 	pop	ar5
                                  10332 ;	.\ecen4350_lcd_v4.c:2371: invalidInput = 1;
      00374E 7F 01            [12]10333 	mov	r7,#0x01
                                  10334 ;	.\ecen4350_lcd_v4.c:2372: while (invalidInput) {
      003750 8D 63            [24]10335 	mov	_find_sloc0_1_0,r5
      003752                      10336 00156$:
      003752 EF               [12]10337 	mov	a,r7
      003753 70 03            [24]10338 	jnz	00583$
      003755 02 38 47         [24]10339 	ljmp	00273$
      003758                      10340 00583$:
                                  10341 ;	.\ecen4350_lcd_v4.c:2373: selection = keyDetect();
      003758 C0 07            [24]10342 	push	ar7
      00375A C0 07            [24]10343 	push	ar7
      00375C 12 11 F7         [24]10344 	lcall	_keyDetect
      00375F AA 82            [24]10345 	mov	r2,dpl
      003761 D0 07            [24]10346 	pop	ar7
      003763 78 71            [12]10347 	mov	r0,#_selection
      003765 A6 02            [24]10348 	mov	@r0,ar2
                                  10349 ;	.\ecen4350_lcd_v4.c:2374: if(selection == '0'){
      003767 BA 30 02         [24]10350 	cjne	r2,#0x30,00584$
      00376A 80 04            [24]10351 	sjmp	00585$
      00376C                      10352 00584$:
      00376C D0 07            [24]10353 	pop	ar7
      00376E 80 29            [24]10354 	sjmp	00153$
      003770                      10355 00585$:
      003770 D0 07            [24]10356 	pop	ar7
                                  10357 ;	.\ecen4350_lcd_v4.c:2375: setCursor(0, 180);
      003772 75 6B B4         [24]10358 	mov	_setCursor_PARM_2,#0xb4
      003775 75 6C 00         [24]10359 	mov	(_setCursor_PARM_2 + 1),#0x00
      003778 90 00 00         [24]10360 	mov	dptr,#0x0000
      00377B 12 05 BF         [24]10361 	lcall	_setCursor
                                  10362 ;	.\ecen4350_lcd_v4.c:2376: LCD_string_write("\n ");
      00377E 90 61 8F         [24]10363 	mov	dptr,#___str_67
      003781 75 F0 80         [24]10364 	mov	b,#0x80
      003784 12 10 D9         [24]10365 	lcall	_LCD_string_write
                                  10366 ;	.\ecen4350_lcd_v4.c:2377: setColorHighlight2();
      003787 12 16 BF         [24]10367 	lcall	_setColorHighlight2
                                  10368 ;	.\ecen4350_lcd_v4.c:2378: LCD_string_write("<0> Exit\n");
      00378A 90 60 C4         [24]10369 	mov	dptr,#___str_54
      00378D 75 F0 80         [24]10370 	mov	b,#0x80
      003790 12 10 D9         [24]10371 	lcall	_LCD_string_write
                                  10372 ;	.\ecen4350_lcd_v4.c:2379: invalidInput = 0;
      003793 7F 00            [12]10373 	mov	r7,#0x00
                                  10374 ;	.\ecen4350_lcd_v4.c:2380: exit = 0;
      003795 78 8D            [12]10375 	mov	r0,#_find_exit_65536_652
      003797 76 00            [12]10376 	mov	@r0,#0x00
      003799                      10377 00153$:
                                  10378 ;	.\ecen4350_lcd_v4.c:2381: } if (selection == '2') {
      003799 78 71            [12]10379 	mov	r0,#_selection
      00379B B6 32 B4         [24]10380 	cjne	@r0,#0x32,00156$
                                  10381 ;	.\ecen4350_lcd_v4.c:2382: setCursor(0, 180);
      00379E 75 6B B4         [24]10382 	mov	_setCursor_PARM_2,#0xb4
      0037A1 75 6C 00         [24]10383 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037A4 90 00 00         [24]10384 	mov	dptr,#0x0000
      0037A7 12 05 BF         [24]10385 	lcall	_setCursor
                                  10386 ;	.\ecen4350_lcd_v4.c:2383: setColorWhite();
      0037AA 12 16 ED         [24]10387 	lcall	_setColorWhite
                                  10388 ;	.\ecen4350_lcd_v4.c:2384: LCD_string_write("\n\n ");
      0037AD 90 64 B1         [24]10389 	mov	dptr,#___str_115
      0037B0 75 F0 80         [24]10390 	mov	b,#0x80
      0037B3 12 10 D9         [24]10391 	lcall	_LCD_string_write
                                  10392 ;	.\ecen4350_lcd_v4.c:2385: setColorHighlight2();
      0037B6 12 16 BF         [24]10393 	lcall	_setColorHighlight2
                                  10394 ;	.\ecen4350_lcd_v4.c:2386: LCD_string_write("<2> Previous");
      0037B9 90 64 B5         [24]10395 	mov	dptr,#___str_116
      0037BC 75 F0 80         [24]10396 	mov	b,#0x80
      0037BF 12 10 D9         [24]10397 	lcall	_LCD_string_write
                                  10398 ;	.\ecen4350_lcd_v4.c:2387: invalidInput = 0;
      0037C2 7F 00            [12]10399 	mov	r7,#0x00
                                  10400 ;	.\ecen4350_lcd_v4.c:2388: i--;			// two decrements plus next loop increment is equal to one decrement
      0037C4 E5 64            [12]10401 	mov	a,_find_sloc1_1_0
      0037C6 24 FF            [12]10402 	add	a,#0xff
      0037C8 FA               [12]10403 	mov	r2,a
      0037C9 E5 65            [12]10404 	mov	a,(_find_sloc1_1_0 + 1)
      0037CB 34 FF            [12]10405 	addc	a,#0xff
      0037CD FE               [12]10406 	mov	r6,a
                                  10407 ;	.\ecen4350_lcd_v4.c:2389: i--;
      0037CE EA               [12]10408 	mov	a,r2
      0037CF 24 FF            [12]10409 	add	a,#0xff
      0037D1 F5 64            [12]10410 	mov	_find_sloc1_1_0,a
      0037D3 EE               [12]10411 	mov	a,r6
      0037D4 34 FF            [12]10412 	addc	a,#0xff
      0037D6 F5 65            [12]10413 	mov	(_find_sloc1_1_0 + 1),a
                                  10414 ;	.\ecen4350_lcd_v4.c:2390: page--;			// decrement to previous page
      0037D8 15 63            [12]10415 	dec	_find_sloc0_1_0
      0037DA 02 37 52         [24]10416 	ljmp	00156$
      0037DD                      10417 00167$:
                                  10418 ;	.\ecen4350_lcd_v4.c:2394: else if (i == 0){				// end at beginning, no next or previous
      0037DD E5 64            [12]10419 	mov	a,_find_sloc1_1_0
      0037DF 45 65            [12]10420 	orl	a,(_find_sloc1_1_0 + 1)
                                  10421 ;	.\ecen4350_lcd_v4.c:2395: setCursor(0, 180);
      0037E1 70 66            [24]10422 	jnz	00168$
      0037E3 75 6B B4         [24]10423 	mov	_setCursor_PARM_2,#0xb4
      0037E6 F5 6C            [12]10424 	mov	(_setCursor_PARM_2 + 1),a
      0037E8 90 00 00         [24]10425 	mov	dptr,#0x0000
      0037EB C0 05            [24]10426 	push	ar5
      0037ED 12 05 BF         [24]10427 	lcall	_setCursor
                                  10428 ;	.\ecen4350_lcd_v4.c:2396: setColorWhite();
      0037F0 12 16 ED         [24]10429 	lcall	_setColorWhite
                                  10430 ;	.\ecen4350_lcd_v4.c:2397: LCD_string_write("          \n <0> Exit\n              ");
      0037F3 90 64 6A         [24]10431 	mov	dptr,#___str_113
      0037F6 75 F0 80         [24]10432 	mov	b,#0x80
      0037F9 12 10 D9         [24]10433 	lcall	_LCD_string_write
      0037FC D0 05            [24]10434 	pop	ar5
                                  10435 ;	.\ecen4350_lcd_v4.c:2398: invalidInput = 1;
      0037FE 7E 01            [12]10436 	mov	r6,#0x01
                                  10437 ;	.\ecen4350_lcd_v4.c:2399: while (invalidInput) {
      003800                      10438 00161$:
      003800 EE               [12]10439 	mov	a,r6
      003801 60 46            [24]10440 	jz	00168$
                                  10441 ;	.\ecen4350_lcd_v4.c:2400: selection = keyDetect();
      003803 C0 06            [24]10442 	push	ar6
      003805 C0 05            [24]10443 	push	ar5
      003807 12 11 F7         [24]10444 	lcall	_keyDetect
      00380A AC 82            [24]10445 	mov	r4,dpl
      00380C D0 05            [24]10446 	pop	ar5
      00380E D0 06            [24]10447 	pop	ar6
      003810 78 71            [12]10448 	mov	r0,#_selection
      003812 A6 04            [24]10449 	mov	@r0,ar4
                                  10450 ;	.\ecen4350_lcd_v4.c:2401: if(selection == '0') {
      003814 BC 30 E9         [24]10451 	cjne	r4,#0x30,00161$
                                  10452 ;	.\ecen4350_lcd_v4.c:2402: setColorDefault();
      003817 C0 05            [24]10453 	push	ar5
      003819 12 16 9D         [24]10454 	lcall	_setColorDefault
                                  10455 ;	.\ecen4350_lcd_v4.c:2403: setCursor(0, 180);
      00381C 75 6B B4         [24]10456 	mov	_setCursor_PARM_2,#0xb4
      00381F 75 6C 00         [24]10457 	mov	(_setCursor_PARM_2 + 1),#0x00
      003822 90 00 00         [24]10458 	mov	dptr,#0x0000
      003825 12 05 BF         [24]10459 	lcall	_setCursor
                                  10460 ;	.\ecen4350_lcd_v4.c:2404: LCD_string_write("\n ");
      003828 90 61 8F         [24]10461 	mov	dptr,#___str_67
      00382B 75 F0 80         [24]10462 	mov	b,#0x80
      00382E 12 10 D9         [24]10463 	lcall	_LCD_string_write
                                  10464 ;	.\ecen4350_lcd_v4.c:2405: setColorHighlight2();
      003831 12 16 BF         [24]10465 	lcall	_setColorHighlight2
                                  10466 ;	.\ecen4350_lcd_v4.c:2406: LCD_string_write("<0> Exit");
      003834 90 62 4A         [24]10467 	mov	dptr,#___str_78
      003837 75 F0 80         [24]10468 	mov	b,#0x80
      00383A 12 10 D9         [24]10469 	lcall	_LCD_string_write
      00383D D0 05            [24]10470 	pop	ar5
                                  10471 ;	.\ecen4350_lcd_v4.c:2407: exit = 0;		// set exit flag
      00383F 78 8D            [12]10472 	mov	r0,#_find_exit_65536_652
      003841 76 00            [12]10473 	mov	@r0,#0x00
                                  10474 ;	.\ecen4350_lcd_v4.c:2408: invalidInput = 0;
      003843 7E 00            [12]10475 	mov	r6,#0x00
      003845 80 B9            [24]10476 	sjmp	00161$
      003847                      10477 00273$:
      003847 AD 63            [24]10478 	mov	r5,_find_sloc0_1_0
      003849                      10479 00168$:
                                  10480 ;	.\ecen4350_lcd_v4.c:2412: if (exit == 0) {	// check exit flag
      003849 78 8D            [12]10481 	mov	r0,#_find_exit_65536_652
      00384B E6               [12]10482 	mov	a,@r0
      00384C 60 03            [24]10483 	jz	00592$
      00384E 02 39 5D         [24]10484 	ljmp	00215$
      003851                      10485 00592$:
                                  10486 ;	.\ecen4350_lcd_v4.c:2413: break;			// break out of for loop iteration
      003851 02 39 68         [24]10487 	ljmp	00197$
      003854                      10488 00187$:
                                  10489 ;	.\ecen4350_lcd_v4.c:2418: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      003854 1B               [12]10490 	dec	r3
      003855 BB FF 01         [24]10491 	cjne	r3,#0xff,00593$
      003858 1F               [12]10492 	dec	r7
      003859                      10493 00593$:
      003859 EB               [12]10494 	mov	a,r3
      00385A B5 64 07         [24]10495 	cjne	a,_find_sloc1_1_0,00594$
      00385D EF               [12]10496 	mov	a,r7
      00385E B5 65 03         [24]10497 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      003861 02 39 5D         [24]10498 	ljmp	00215$
      003864                      10499 00594$:
                                  10500 ;	.\ecen4350_lcd_v4.c:2419: if (i != 0) {
      003864 E5 64            [12]10501 	mov	a,_find_sloc1_1_0
      003866 45 65            [12]10502 	orl	a,(_find_sloc1_1_0 + 1)
      003868 70 03            [24]10503 	jnz	00595$
      00386A 02 39 58         [24]10504 	ljmp	00181$
      00386D                      10505 00595$:
                                  10506 ;	.\ecen4350_lcd_v4.c:2420: setCursor(0, 180);
      00386D 75 6B B4         [24]10507 	mov	_setCursor_PARM_2,#0xb4
      003870 75 6C 00         [24]10508 	mov	(_setCursor_PARM_2 + 1),#0x00
      003873 90 00 00         [24]10509 	mov	dptr,#0x0000
      003876 C0 05            [24]10510 	push	ar5
      003878 12 05 BF         [24]10511 	lcall	_setCursor
                                  10512 ;	.\ecen4350_lcd_v4.c:2421: setColorWhite();
      00387B 12 16 ED         [24]10513 	lcall	_setColorWhite
                                  10514 ;	.\ecen4350_lcd_v4.c:2422: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      00387E 90 64 C2         [24]10515 	mov	dptr,#___str_117
      003881 75 F0 80         [24]10516 	mov	b,#0x80
      003884 12 10 D9         [24]10517 	lcall	_LCD_string_write
      003887 D0 05            [24]10518 	pop	ar5
                                  10519 ;	.\ecen4350_lcd_v4.c:2423: invalidInput = 1;
      003889 7F 01            [12]10520 	mov	r7,#0x01
                                  10521 ;	.\ecen4350_lcd_v4.c:2424: while (invalidInput) {
      00388B                      10522 00177$:
      00388B EF               [12]10523 	mov	a,r7
      00388C 70 03            [24]10524 	jnz	00596$
      00388E 02 39 58         [24]10525 	ljmp	00181$
      003891                      10526 00596$:
                                  10527 ;	.\ecen4350_lcd_v4.c:2425: selection = keyDetect();
      003891 C0 07            [24]10528 	push	ar7
      003893 C0 05            [24]10529 	push	ar5
      003895 12 11 F7         [24]10530 	lcall	_keyDetect
      003898 AE 82            [24]10531 	mov	r6,dpl
      00389A D0 05            [24]10532 	pop	ar5
      00389C D0 07            [24]10533 	pop	ar7
      00389E 78 71            [12]10534 	mov	r0,#_selection
      0038A0 A6 06            [24]10535 	mov	@r0,ar6
                                  10536 ;	.\ecen4350_lcd_v4.c:2426: if (selection == '1') {
      0038A2 BE 31 28         [24]10537 	cjne	r6,#0x31,00172$
                                  10538 ;	.\ecen4350_lcd_v4.c:2427: setCursor(0, 180);
      0038A5 75 6B B4         [24]10539 	mov	_setCursor_PARM_2,#0xb4
      0038A8 75 6C 00         [24]10540 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038AB 90 00 00         [24]10541 	mov	dptr,#0x0000
      0038AE C0 05            [24]10542 	push	ar5
      0038B0 12 05 BF         [24]10543 	lcall	_setCursor
                                  10544 ;	.\ecen4350_lcd_v4.c:2428: LCD_string_write(" ");
      0038B3 90 5F 84         [24]10545 	mov	dptr,#___str_30
      0038B6 75 F0 80         [24]10546 	mov	b,#0x80
      0038B9 12 10 D9         [24]10547 	lcall	_LCD_string_write
                                  10548 ;	.\ecen4350_lcd_v4.c:2429: setColorHighlight2();
      0038BC 12 16 BF         [24]10549 	lcall	_setColorHighlight2
                                  10550 ;	.\ecen4350_lcd_v4.c:2430: LCD_string_write("<1> Next");
      0038BF 90 64 61         [24]10551 	mov	dptr,#___str_112
      0038C2 75 F0 80         [24]10552 	mov	b,#0x80
      0038C5 12 10 D9         [24]10553 	lcall	_LCD_string_write
      0038C8 D0 05            [24]10554 	pop	ar5
                                  10555 ;	.\ecen4350_lcd_v4.c:2431: invalidInput = 0;
      0038CA 7F 00            [12]10556 	mov	r7,#0x00
                                  10557 ;	.\ecen4350_lcd_v4.c:2432: page++;
      0038CC 0D               [12]10558 	inc	r5
      0038CD                      10559 00172$:
                                  10560 ;	.\ecen4350_lcd_v4.c:2433: } if (selection == '2') {
      0038CD 78 71            [12]10561 	mov	r0,#_selection
      0038CF B6 32 3F         [24]10562 	cjne	@r0,#0x32,00174$
                                  10563 ;	.\ecen4350_lcd_v4.c:2434: setCursor(0, 180);
      0038D2 75 6B B4         [24]10564 	mov	_setCursor_PARM_2,#0xb4
      0038D5 75 6C 00         [24]10565 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038D8 90 00 00         [24]10566 	mov	dptr,#0x0000
      0038DB C0 05            [24]10567 	push	ar5
      0038DD 12 05 BF         [24]10568 	lcall	_setCursor
                                  10569 ;	.\ecen4350_lcd_v4.c:2435: setColorWhite();
      0038E0 12 16 ED         [24]10570 	lcall	_setColorWhite
                                  10571 ;	.\ecen4350_lcd_v4.c:2436: LCD_string_write("\n\n ");
      0038E3 90 64 B1         [24]10572 	mov	dptr,#___str_115
      0038E6 75 F0 80         [24]10573 	mov	b,#0x80
      0038E9 12 10 D9         [24]10574 	lcall	_LCD_string_write
                                  10575 ;	.\ecen4350_lcd_v4.c:2437: setColorHighlight2();
      0038EC 12 16 BF         [24]10576 	lcall	_setColorHighlight2
                                  10577 ;	.\ecen4350_lcd_v4.c:2438: LCD_string_write("<2> Previous");
      0038EF 90 64 B5         [24]10578 	mov	dptr,#___str_116
      0038F2 75 F0 80         [24]10579 	mov	b,#0x80
      0038F5 12 10 D9         [24]10580 	lcall	_LCD_string_write
      0038F8 D0 05            [24]10581 	pop	ar5
                                  10582 ;	.\ecen4350_lcd_v4.c:2439: invalidInput = 0;
      0038FA 7F 00            [12]10583 	mov	r7,#0x00
                                  10584 ;	.\ecen4350_lcd_v4.c:2440: i--;
      0038FC E5 64            [12]10585 	mov	a,_find_sloc1_1_0
      0038FE 24 FF            [12]10586 	add	a,#0xff
      003900 FC               [12]10587 	mov	r4,a
      003901 E5 65            [12]10588 	mov	a,(_find_sloc1_1_0 + 1)
      003903 34 FF            [12]10589 	addc	a,#0xff
      003905 FE               [12]10590 	mov	r6,a
                                  10591 ;	.\ecen4350_lcd_v4.c:2441: i--;		// two decrements plus next loop increment is equal to one decrement
      003906 EC               [12]10592 	mov	a,r4
      003907 24 FF            [12]10593 	add	a,#0xff
      003909 F5 64            [12]10594 	mov	_find_sloc1_1_0,a
      00390B EE               [12]10595 	mov	a,r6
      00390C 34 FF            [12]10596 	addc	a,#0xff
      00390E F5 65            [12]10597 	mov	(_find_sloc1_1_0 + 1),a
                                  10598 ;	.\ecen4350_lcd_v4.c:2442: page--;		// decrement to previous page
      003910 1D               [12]10599 	dec	r5
      003911                      10600 00174$:
                                  10601 ;	.\ecen4350_lcd_v4.c:2443: } if (selection == '0') {
      003911 78 71            [12]10602 	mov	r0,#_selection
      003913 B6 30 02         [24]10603 	cjne	@r0,#0x30,00601$
      003916 80 03            [24]10604 	sjmp	00602$
      003918                      10605 00601$:
      003918 02 38 8B         [24]10606 	ljmp	00177$
      00391B                      10607 00602$:
                                  10608 ;	.\ecen4350_lcd_v4.c:2444: setColorWhite();
      00391B C0 05            [24]10609 	push	ar5
      00391D 12 16 ED         [24]10610 	lcall	_setColorWhite
                                  10611 ;	.\ecen4350_lcd_v4.c:2445: setCursor(0, 180);
      003920 75 6B B4         [24]10612 	mov	_setCursor_PARM_2,#0xb4
      003923 75 6C 00         [24]10613 	mov	(_setCursor_PARM_2 + 1),#0x00
      003926 90 00 00         [24]10614 	mov	dptr,#0x0000
      003929 12 05 BF         [24]10615 	lcall	_setCursor
                                  10616 ;	.\ecen4350_lcd_v4.c:2446: LCD_string_write(" <1> Next\n ");
      00392C 90 64 E4         [24]10617 	mov	dptr,#___str_118
      00392F 75 F0 80         [24]10618 	mov	b,#0x80
      003932 12 10 D9         [24]10619 	lcall	_LCD_string_write
                                  10620 ;	.\ecen4350_lcd_v4.c:2447: setColorHighlight2();
      003935 12 16 BF         [24]10621 	lcall	_setColorHighlight2
                                  10622 ;	.\ecen4350_lcd_v4.c:2448: LCD_string_write("<0> Exit");
      003938 90 62 4A         [24]10623 	mov	dptr,#___str_78
      00393B 75 F0 80         [24]10624 	mov	b,#0x80
      00393E 12 10 D9         [24]10625 	lcall	_LCD_string_write
                                  10626 ;	.\ecen4350_lcd_v4.c:2449: setColorWhite();
      003941 12 16 ED         [24]10627 	lcall	_setColorWhite
                                  10628 ;	.\ecen4350_lcd_v4.c:2450: LCD_string_write("\n <2> Previous");
      003944 90 64 F0         [24]10629 	mov	dptr,#___str_119
      003947 75 F0 80         [24]10630 	mov	b,#0x80
      00394A 12 10 D9         [24]10631 	lcall	_LCD_string_write
      00394D D0 05            [24]10632 	pop	ar5
                                  10633 ;	.\ecen4350_lcd_v4.c:2451: exit = 0;		// set exit flag
      00394F 78 8D            [12]10634 	mov	r0,#_find_exit_65536_652
      003951 76 00            [12]10635 	mov	@r0,#0x00
                                  10636 ;	.\ecen4350_lcd_v4.c:2452: invalidInput = 0;
      003953 7F 00            [12]10637 	mov	r7,#0x00
      003955 02 38 8B         [24]10638 	ljmp	00177$
      003958                      10639 00181$:
                                  10640 ;	.\ecen4350_lcd_v4.c:2456: if (exit == 0) {		// check exit flag
      003958 78 8D            [12]10641 	mov	r0,#_find_exit_65536_652
      00395A E6               [12]10642 	mov	a,@r0
      00395B 60 0B            [24]10643 	jz	00197$
                                  10644 ;	.\ecen4350_lcd_v4.c:2457: break;			// break out the loop
      00395D                      10645 00215$:
                                  10646 ;	.\ecen4350_lcd_v4.c:2299: for (unsigned int i = 0; i < blockSize; i++) {
      00395D 05 64            [12]10647 	inc	_find_sloc1_1_0
      00395F E4               [12]10648 	clr	a
      003960 B5 64 02         [24]10649 	cjne	a,_find_sloc1_1_0,00604$
      003963 05 65            [12]10650 	inc	(_find_sloc1_1_0 + 1)
      003965                      10651 00604$:
      003965 02 35 37         [24]10652 	ljmp	00214$
      003968                      10653 00197$:
                                  10654 ;	.\ecen4350_lcd_v4.c:2463: if(noneFound) {
      003968 78 8C            [12]10655 	mov	r0,#_find_noneFound_65536_652
      00396A E6               [12]10656 	mov	a,@r0
      00396B 70 03            [24]10657 	jnz	00605$
      00396D 02 34 19         [24]10658 	ljmp	00205$
      003970                      10659 00605$:
                                  10660 ;	.\ecen4350_lcd_v4.c:2464: setColorRed();
      003970 C0 05            [24]10661 	push	ar5
      003972 12 16 E2         [24]10662 	lcall	_setColorRed
                                  10663 ;	.\ecen4350_lcd_v4.c:2465: setCursor(0, 140);
      003975 75 6B 8C         [24]10664 	mov	_setCursor_PARM_2,#0x8c
      003978 75 6C 00         [24]10665 	mov	(_setCursor_PARM_2 + 1),#0x00
      00397B 90 00 00         [24]10666 	mov	dptr,#0x0000
      00397E 12 05 BF         [24]10667 	lcall	_setCursor
                                  10668 ;	.\ecen4350_lcd_v4.c:2466: LCD_string_write(" Value Not Found\n Within Block\n ");
      003981 90 64 FF         [24]10669 	mov	dptr,#___str_120
      003984 75 F0 80         [24]10670 	mov	b,#0x80
      003987 12 10 D9         [24]10671 	lcall	_LCD_string_write
                                  10672 ;	.\ecen4350_lcd_v4.c:2467: setColorWhite();
      00398A 12 16 ED         [24]10673 	lcall	_setColorWhite
                                  10674 ;	.\ecen4350_lcd_v4.c:2468: LCD_string_write("\n <0> Exit");
      00398D 90 65 20         [24]10675 	mov	dptr,#___str_121
      003990 75 F0 80         [24]10676 	mov	b,#0x80
      003993 12 10 D9         [24]10677 	lcall	_LCD_string_write
      003996 D0 05            [24]10678 	pop	ar5
                                  10679 ;	.\ecen4350_lcd_v4.c:2469: invalidInput = 1;
      003998 7F 01            [12]10680 	mov	r7,#0x01
                                  10681 ;	.\ecen4350_lcd_v4.c:2471: while (invalidInput) {
      00399A                      10682 00200$:
      00399A EF               [12]10683 	mov	a,r7
      00399B 70 03            [24]10684 	jnz	00606$
      00399D 02 34 19         [24]10685 	ljmp	00205$
      0039A0                      10686 00606$:
                                  10687 ;	.\ecen4350_lcd_v4.c:2472: selection = keyDetect();
      0039A0 C0 07            [24]10688 	push	ar7
      0039A2 C0 05            [24]10689 	push	ar5
      0039A4 12 11 F7         [24]10690 	lcall	_keyDetect
      0039A7 AE 82            [24]10691 	mov	r6,dpl
      0039A9 D0 05            [24]10692 	pop	ar5
      0039AB D0 07            [24]10693 	pop	ar7
      0039AD 78 71            [12]10694 	mov	r0,#_selection
      0039AF A6 06            [24]10695 	mov	@r0,ar6
                                  10696 ;	.\ecen4350_lcd_v4.c:2473: if (selection == '0'){
      0039B1 BE 30 E6         [24]10697 	cjne	r6,#0x30,00200$
                                  10698 ;	.\ecen4350_lcd_v4.c:2474: setCursor(0, 140);
      0039B4 75 6B 8C         [24]10699 	mov	_setCursor_PARM_2,#0x8c
      0039B7 75 6C 00         [24]10700 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039BA 90 00 00         [24]10701 	mov	dptr,#0x0000
      0039BD C0 05            [24]10702 	push	ar5
      0039BF 12 05 BF         [24]10703 	lcall	_setCursor
                                  10704 ;	.\ecen4350_lcd_v4.c:2475: LCD_string_write("\n\n\n ");
      0039C2 90 65 2B         [24]10705 	mov	dptr,#___str_122
      0039C5 75 F0 80         [24]10706 	mov	b,#0x80
      0039C8 12 10 D9         [24]10707 	lcall	_LCD_string_write
                                  10708 ;	.\ecen4350_lcd_v4.c:2476: setColorHighlight2();
      0039CB 12 16 BF         [24]10709 	lcall	_setColorHighlight2
                                  10710 ;	.\ecen4350_lcd_v4.c:2477: LCD_string_write("<0> Exit");
      0039CE 90 62 4A         [24]10711 	mov	dptr,#___str_78
      0039D1 75 F0 80         [24]10712 	mov	b,#0x80
      0039D4 12 10 D9         [24]10713 	lcall	_LCD_string_write
      0039D7 D0 05            [24]10714 	pop	ar5
                                  10715 ;	.\ecen4350_lcd_v4.c:2478: invalidInput = 0;
      0039D9 7F 00            [12]10716 	mov	r7,#0x00
                                  10717 ;	.\ecen4350_lcd_v4.c:2479: exit = 0;
      0039DB 78 8D            [12]10718 	mov	r0,#_find_exit_65536_652
      0039DD 76 00            [12]10719 	mov	@r0,#0x00
      0039DF 80 B9            [24]10720 	sjmp	00200$
      0039E1                      10721 00207$:
                                  10722 ;	.\ecen4350_lcd_v4.c:2484: delay(80);
      0039E1 90 00 50         [24]10723 	mov	dptr,#0x0050
                                  10724 ;	.\ecen4350_lcd_v4.c:2485: return;
                                  10725 ;	.\ecen4350_lcd_v4.c:2486: }
      0039E4 02 01 A9         [24]10726 	ljmp	_delay
                                  10727 ;------------------------------------------------------------
                                  10728 ;Allocation info for local variables in function 'count'
                                  10729 ;------------------------------------------------------------
                                  10730 ;d                         Allocated to registers 
                                  10731 ;i                         Allocated with name '_count_i_262144_721'
                                  10732 ;__3932160175              Allocated to registers 
                                  10733 ;__3932160176              Allocated to registers 
                                  10734 ;map_address               Allocated to registers 
                                  10735 ;d                         Allocated to registers r4 
                                  10736 ;i                         Allocated to registers r4 r6 
                                  10737 ;__3932160178              Allocated to registers 
                                  10738 ;__3932160179              Allocated to registers 
                                  10739 ;map_address               Allocated to registers 
                                  10740 ;d                         Allocated to registers r3 
                                  10741 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10742 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10743 ;address                   Allocated with name '_count_address_65536_708'
                                  10744 ;destination               Allocated to registers 
                                  10745 ;blockSize                 Allocated with name '_count_blockSize_65536_708'
                                  10746 ;value                     Allocated with name '_count_value_65536_708'
                                  10747 ;scan                      Allocated with name '_count_scan_65536_708'
                                  10748 ;page                      Allocated to registers r5 
                                  10749 ;noneFound                 Allocated with name '_count_noneFound_65536_708'
                                  10750 ;invalidInput              Allocated to registers r7 
                                  10751 ;exit                      Allocated with name '_count_exit_65536_708'
                                  10752 ;------------------------------------------------------------
                                  10753 ;	.\ecen4350_lcd_v4.c:2488: void count() {
                                  10754 ;	-----------------------------------------
                                  10755 ;	 function count
                                  10756 ;	-----------------------------------------
      0039E7                      10757 _count:
                                  10758 ;	.\ecen4350_lcd_v4.c:2492: __idata unsigned char blockSize = 0;
      0039E7 78 90            [12]10759 	mov	r0,#_count_blockSize_65536_708
      0039E9 76 00            [12]10760 	mov	@r0,#0x00
                                  10761 ;	.\ecen4350_lcd_v4.c:2494: __idata unsigned char scan = 0;
      0039EB 78 92            [12]10762 	mov	r0,#_count_scan_65536_708
      0039ED 76 00            [12]10763 	mov	@r0,#0x00
                                  10764 ;	.\ecen4350_lcd_v4.c:2495: __idata unsigned char page = 0;
      0039EF 7D 00            [12]10765 	mov	r5,#0x00
                                  10766 ;	.\ecen4350_lcd_v4.c:2496: __idata unsigned char noneFound = 1;
      0039F1 78 93            [12]10767 	mov	r0,#_count_noneFound_65536_708
      0039F3 76 01            [12]10768 	mov	@r0,#0x01
                                  10769 ;	.\ecen4350_lcd_v4.c:2497: __idata unsigned char invalidInput = 1;
      0039F5 7B 01            [12]10770 	mov	r3,#0x01
                                  10771 ;	.\ecen4350_lcd_v4.c:2498: __idata unsigned char exit = 1;
      0039F7 78 94            [12]10772 	mov	r0,#_count_exit_65536_708
      0039F9 76 01            [12]10773 	mov	@r0,#0x01
                                  10774 ;	.\ecen4350_lcd_v4.c:2500: clearLCD();
      0039FB C0 05            [24]10775 	push	ar5
      0039FD C0 03            [24]10776 	push	ar3
      0039FF 12 0E 5C         [24]10777 	lcall	_clearLCD
                                  10778 ;	.\ecen4350_lcd_v4.c:2503: setTextSize(5);
      003A02 75 82 05         [24]10779 	mov	dpl,#0x05
      003A05 12 05 D9         [24]10780 	lcall	_setTextSize
                                  10781 ;	.\ecen4350_lcd_v4.c:2504: fillTop(GRAY);
      003A08 90 D6 BA         [24]10782 	mov	dptr,#0xd6ba
      003A0B 12 0C 8F         [24]10783 	lcall	_fillTop
                                  10784 ;	.\ecen4350_lcd_v4.c:2505: setColorMenu();
      003A0E 12 16 D6         [24]10785 	lcall	_setColorMenu
                                  10786 ;	.\ecen4350_lcd_v4.c:2506: setCursor(15, 0);
      003A11 E4               [12]10787 	clr	a
      003A12 F5 6B            [12]10788 	mov	_setCursor_PARM_2,a
      003A14 F5 6C            [12]10789 	mov	(_setCursor_PARM_2 + 1),a
      003A16 90 00 0F         [24]10790 	mov	dptr,#0x000f
      003A19 12 05 BF         [24]10791 	lcall	_setCursor
                                  10792 ;	.\ecen4350_lcd_v4.c:2507: LCD_string_write("[COUNT]\n");
      003A1C 90 65 30         [24]10793 	mov	dptr,#___str_123
      003A1F 75 F0 80         [24]10794 	mov	b,#0x80
      003A22 12 10 D9         [24]10795 	lcall	_LCD_string_write
                                  10796 ;	.\ecen4350_lcd_v4.c:2508: setColorDefault();
      003A25 12 16 9D         [24]10797 	lcall	_setColorDefault
                                  10798 ;	.\ecen4350_lcd_v4.c:2509: setTextSize(2);
      003A28 75 82 02         [24]10799 	mov	dpl,#0x02
      003A2B 12 05 D9         [24]10800 	lcall	_setTextSize
                                  10801 ;	.\ecen4350_lcd_v4.c:2510: setCursor(0, 60);
      003A2E 75 6B 3C         [24]10802 	mov	_setCursor_PARM_2,#0x3c
      003A31 75 6C 00         [24]10803 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A34 90 00 00         [24]10804 	mov	dptr,#0x0000
      003A37 12 05 BF         [24]10805 	lcall	_setCursor
                                  10806 ;	.\ecen4350_lcd_v4.c:2511: LCD_string_write(" Search Value:");
      003A3A 90 65 39         [24]10807 	mov	dptr,#___str_124
      003A3D 75 F0 80         [24]10808 	mov	b,#0x80
      003A40 12 10 D9         [24]10809 	lcall	_LCD_string_write
                                  10810 ;	.\ecen4350_lcd_v4.c:2512: setCursor(0, 80);
      003A43 75 6B 50         [24]10811 	mov	_setCursor_PARM_2,#0x50
      003A46 75 6C 00         [24]10812 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A49 90 00 00         [24]10813 	mov	dptr,#0x0000
      003A4C 12 05 BF         [24]10814 	lcall	_setCursor
                                  10815 ;	.\ecen4350_lcd_v4.c:2513: setColorGray();
      003A4F 12 16 CB         [24]10816 	lcall	_setColorGray
                                  10817 ;	.\ecen4350_lcd_v4.c:2514: LCD_string_write(" __");
      003A52 90 61 31         [24]10818 	mov	dptr,#___str_62
      003A55 75 F0 80         [24]10819 	mov	b,#0x80
      003A58 12 10 D9         [24]10820 	lcall	_LCD_string_write
                                  10821 ;	.\ecen4350_lcd_v4.c:2515: setCursor(0, 110);
      003A5B 75 6B 6E         [24]10822 	mov	_setCursor_PARM_2,#0x6e
      003A5E 75 6C 00         [24]10823 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A61 90 00 00         [24]10824 	mov	dptr,#0x0000
      003A64 12 05 BF         [24]10825 	lcall	_setCursor
                                  10826 ;	.\ecen4350_lcd_v4.c:2516: setColorDefault();
      003A67 12 16 9D         [24]10827 	lcall	_setColorDefault
                                  10828 ;	.\ecen4350_lcd_v4.c:2517: LCD_string_write(" Search Address:");
      003A6A 90 62 7A         [24]10829 	mov	dptr,#___str_82
      003A6D 75 F0 80         [24]10830 	mov	b,#0x80
      003A70 12 10 D9         [24]10831 	lcall	_LCD_string_write
                                  10832 ;	.\ecen4350_lcd_v4.c:2518: setCursor(0, 130 );
      003A73 75 6B 82         [24]10833 	mov	_setCursor_PARM_2,#0x82
      003A76 75 6C 00         [24]10834 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A79 90 00 00         [24]10835 	mov	dptr,#0x0000
      003A7C 12 05 BF         [24]10836 	lcall	_setCursor
                                  10837 ;	.\ecen4350_lcd_v4.c:2519: setColorGray();
      003A7F 12 16 CB         [24]10838 	lcall	_setColorGray
                                  10839 ;	.\ecen4350_lcd_v4.c:2520: LCD_string_write(" 0x____");
      003A82 90 5F 22         [24]10840 	mov	dptr,#___str_24
      003A85 75 F0 80         [24]10841 	mov	b,#0x80
      003A88 12 10 D9         [24]10842 	lcall	_LCD_string_write
                                  10843 ;	.\ecen4350_lcd_v4.c:2521: setCursor(0, 160);
      003A8B 75 6B A0         [24]10844 	mov	_setCursor_PARM_2,#0xa0
      003A8E 75 6C 00         [24]10845 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A91 90 00 00         [24]10846 	mov	dptr,#0x0000
      003A94 12 05 BF         [24]10847 	lcall	_setCursor
                                  10848 ;	.\ecen4350_lcd_v4.c:2522: setColorDefault();
      003A97 12 16 9D         [24]10849 	lcall	_setColorDefault
                                  10850 ;	.\ecen4350_lcd_v4.c:2523: LCD_string_write(" Input Block Size:\n");
      003A9A 90 62 8B         [24]10851 	mov	dptr,#___str_83
      003A9D 75 F0 80         [24]10852 	mov	b,#0x80
      003AA0 12 10 D9         [24]10853 	lcall	_LCD_string_write
                                  10854 ;	.\ecen4350_lcd_v4.c:2524: setColorGray();
      003AA3 12 16 CB         [24]10855 	lcall	_setColorGray
                                  10856 ;	.\ecen4350_lcd_v4.c:2525: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003AA6 90 62 9F         [24]10857 	mov	dptr,#___str_84
      003AA9 75 F0 80         [24]10858 	mov	b,#0x80
      003AAC 12 10 D9         [24]10859 	lcall	_LCD_string_write
                                  10860 ;	.\ecen4350_lcd_v4.c:2526: LCD_string_write("  <FF> (SCAN)");
      003AAF 90 62 C5         [24]10861 	mov	dptr,#___str_85
      003AB2 75 F0 80         [24]10862 	mov	b,#0x80
      003AB5 12 10 D9         [24]10863 	lcall	_LCD_string_write
                                  10864 ;	.\ecen4350_lcd_v4.c:2527: setCursor(0, 250);
      003AB8 75 6B FA         [24]10865 	mov	_setCursor_PARM_2,#0xfa
      003ABB 75 6C 00         [24]10866 	mov	(_setCursor_PARM_2 + 1),#0x00
      003ABE 90 00 00         [24]10867 	mov	dptr,#0x0000
      003AC1 12 05 BF         [24]10868 	lcall	_setCursor
                                  10869 ;	.\ecen4350_lcd_v4.c:2528: setColorGray();
      003AC4 12 16 CB         [24]10870 	lcall	_setColorGray
                                  10871 ;	.\ecen4350_lcd_v4.c:2529: LCD_string_write("   __");
      003AC7 90 62 D3         [24]10872 	mov	dptr,#___str_86
      003ACA 75 F0 80         [24]10873 	mov	b,#0x80
      003ACD 12 10 D9         [24]10874 	lcall	_LCD_string_write
                                  10875 ;	.\ecen4350_lcd_v4.c:2536: setColorSelect();
      003AD0 12 16 A8         [24]10876 	lcall	_setColorSelect
                                  10877 ;	.\ecen4350_lcd_v4.c:2537: setCursor(0, 60);
      003AD3 75 6B 3C         [24]10878 	mov	_setCursor_PARM_2,#0x3c
      003AD6 75 6C 00         [24]10879 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AD9 90 00 00         [24]10880 	mov	dptr,#0x0000
      003ADC 12 05 BF         [24]10881 	lcall	_setCursor
                                  10882 ;	.\ecen4350_lcd_v4.c:2538: LCD_string_write(" Search Value:");
      003ADF 90 65 39         [24]10883 	mov	dptr,#___str_124
      003AE2 75 F0 80         [24]10884 	mov	b,#0x80
      003AE5 12 10 D9         [24]10885 	lcall	_LCD_string_write
                                  10886 ;	.\ecen4350_lcd_v4.c:2539: setCursor(0, 80);
      003AE8 75 6B 50         [24]10887 	mov	_setCursor_PARM_2,#0x50
      003AEB 75 6C 00         [24]10888 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AEE 90 00 00         [24]10889 	mov	dptr,#0x0000
      003AF1 12 05 BF         [24]10890 	lcall	_setCursor
                                  10891 ;	.\ecen4350_lcd_v4.c:2540: setColorWhite();
      003AF4 12 16 ED         [24]10892 	lcall	_setColorWhite
                                  10893 ;	.\ecen4350_lcd_v4.c:2541: setCursor(0, 80);
      003AF7 75 6B 50         [24]10894 	mov	_setCursor_PARM_2,#0x50
      003AFA 75 6C 00         [24]10895 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AFD 90 00 00         [24]10896 	mov	dptr,#0x0000
      003B00 12 05 BF         [24]10897 	lcall	_setCursor
                                  10898 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" ");
      003B03 90 5F 84         [24]10899 	mov	dptr,#___str_30
      003B06 75 F0 80         [24]10900 	mov	b,#0x80
      003B09 12 10 D9         [24]10901 	lcall	_LCD_string_write
                                  10902 ;	.\ecen4350_lcd_v4.c:2543: setColorHighlight1();
      003B0C 12 16 B3         [24]10903 	lcall	_setColorHighlight1
                                  10904 ;	.\ecen4350_lcd_v4.c:2544: selection = keyDetect();
      003B0F 12 11 F7         [24]10905 	lcall	_keyDetect
      003B12 AC 82            [24]10906 	mov	r4,dpl
      003B14 78 71            [12]10907 	mov	r0,#_selection
      003B16 A6 04            [24]10908 	mov	@r0,ar4
                                  10909 ;	.\ecen4350_lcd_v4.c:2545: write(selection);
      003B18 8C 82            [24]10910 	mov	dpl,r4
      003B1A 12 10 73         [24]10911 	lcall	_write
                                  10912 ;	.\ecen4350_lcd_v4.c:2546: selection = ASCIItoHex(selection);
      003B1D 78 71            [12]10913 	mov	r0,#_selection
      003B1F 86 82            [24]10914 	mov	dpl,@r0
      003B21 12 14 65         [24]10915 	lcall	_ASCIItoHex
      003B24 AC 82            [24]10916 	mov	r4,dpl
      003B26 D0 03            [24]10917 	pop	ar3
      003B28 78 71            [12]10918 	mov	r0,#_selection
      003B2A A6 04            [24]10919 	mov	@r0,ar4
                                  10920 ;	.\ecen4350_lcd_v4.c:2547: value |= selection * 16;
      003B2C EC               [12]10921 	mov	a,r4
      003B2D C4               [12]10922 	swap	a
      003B2E 54 F0            [12]10923 	anl	a,#0xf0
      003B30 FC               [12]10924 	mov	r4,a
                                  10925 ;	.\ecen4350_lcd_v4.c:2548: selection = keyDetect();
      003B31 C0 04            [24]10926 	push	ar4
      003B33 C0 03            [24]10927 	push	ar3
      003B35 12 11 F7         [24]10928 	lcall	_keyDetect
      003B38 AE 82            [24]10929 	mov	r6,dpl
      003B3A 78 71            [12]10930 	mov	r0,#_selection
      003B3C A6 06            [24]10931 	mov	@r0,ar6
                                  10932 ;	.\ecen4350_lcd_v4.c:2549: write(selection);
      003B3E 8E 82            [24]10933 	mov	dpl,r6
      003B40 12 10 73         [24]10934 	lcall	_write
                                  10935 ;	.\ecen4350_lcd_v4.c:2550: selection = ASCIItoHex(selection);
      003B43 78 71            [12]10936 	mov	r0,#_selection
      003B45 86 82            [24]10937 	mov	dpl,@r0
      003B47 12 14 65         [24]10938 	lcall	_ASCIItoHex
      003B4A AE 82            [24]10939 	mov	r6,dpl
      003B4C D0 03            [24]10940 	pop	ar3
      003B4E D0 04            [24]10941 	pop	ar4
      003B50 78 71            [12]10942 	mov	r0,#_selection
      003B52 A6 06            [24]10943 	mov	@r0,ar6
                                  10944 ;	.\ecen4350_lcd_v4.c:2551: value |= selection;
      003B54 78 91            [12]10945 	mov	r0,#_count_value_65536_708
      003B56 EE               [12]10946 	mov	a,r6
      003B57 4C               [12]10947 	orl	a,r4
      003B58 F6               [12]10948 	mov	@r0,a
                                  10949 ;	.\ecen4350_lcd_v4.c:2554: setColorDefault();
      003B59 C0 03            [24]10950 	push	ar3
      003B5B 12 16 9D         [24]10951 	lcall	_setColorDefault
                                  10952 ;	.\ecen4350_lcd_v4.c:2555: setCursor(0, 60);
      003B5E 75 6B 3C         [24]10953 	mov	_setCursor_PARM_2,#0x3c
      003B61 75 6C 00         [24]10954 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B64 90 00 00         [24]10955 	mov	dptr,#0x0000
      003B67 12 05 BF         [24]10956 	lcall	_setCursor
                                  10957 ;	.\ecen4350_lcd_v4.c:2556: LCD_string_write(" Search Value:");
      003B6A 90 65 39         [24]10958 	mov	dptr,#___str_124
      003B6D 75 F0 80         [24]10959 	mov	b,#0x80
      003B70 12 10 D9         [24]10960 	lcall	_LCD_string_write
                                  10961 ;	.\ecen4350_lcd_v4.c:2557: setCursor(0, 80);
      003B73 75 6B 50         [24]10962 	mov	_setCursor_PARM_2,#0x50
      003B76 75 6C 00         [24]10963 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B79 90 00 00         [24]10964 	mov	dptr,#0x0000
      003B7C 12 05 BF         [24]10965 	lcall	_setCursor
                                  10966 ;	.\ecen4350_lcd_v4.c:2558: setColorWhite();
      003B7F 12 16 ED         [24]10967 	lcall	_setColorWhite
                                  10968 ;	.\ecen4350_lcd_v4.c:2559: LCD_string_write(" ");
      003B82 90 5F 84         [24]10969 	mov	dptr,#___str_30
      003B85 75 F0 80         [24]10970 	mov	b,#0x80
      003B88 12 10 D9         [24]10971 	lcall	_LCD_string_write
                                  10972 ;	.\ecen4350_lcd_v4.c:2560: setColorHighlight2();
      003B8B 12 16 BF         [24]10973 	lcall	_setColorHighlight2
                                  10974 ;	.\ecen4350_lcd_v4.c:2561: print8Hex(value);
      003B8E 78 91            [12]10975 	mov	r0,#_count_value_65536_708
      003B90 86 82            [24]10976 	mov	dpl,@r0
      003B92 12 15 AA         [24]10977 	lcall	_print8Hex
                                  10978 ;	.\ecen4350_lcd_v4.c:2564: setColorSelect();
      003B95 12 16 A8         [24]10979 	lcall	_setColorSelect
                                  10980 ;	.\ecen4350_lcd_v4.c:2565: setCursor(0, 110);
      003B98 75 6B 6E         [24]10981 	mov	_setCursor_PARM_2,#0x6e
      003B9B 75 6C 00         [24]10982 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B9E 90 00 00         [24]10983 	mov	dptr,#0x0000
      003BA1 12 05 BF         [24]10984 	lcall	_setCursor
                                  10985 ;	.\ecen4350_lcd_v4.c:2566: LCD_string_write(" Search Address:");
      003BA4 90 62 7A         [24]10986 	mov	dptr,#___str_82
      003BA7 75 F0 80         [24]10987 	mov	b,#0x80
      003BAA 12 10 D9         [24]10988 	lcall	_LCD_string_write
                                  10989 ;	.\ecen4350_lcd_v4.c:2567: setCursor(0, 130);
      003BAD 75 6B 82         [24]10990 	mov	_setCursor_PARM_2,#0x82
      003BB0 75 6C 00         [24]10991 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BB3 90 00 00         [24]10992 	mov	dptr,#0x0000
      003BB6 12 05 BF         [24]10993 	lcall	_setCursor
                                  10994 ;	.\ecen4350_lcd_v4.c:2568: LCD_string_write(" ");
      003BB9 90 5F 84         [24]10995 	mov	dptr,#___str_30
      003BBC 75 F0 80         [24]10996 	mov	b,#0x80
      003BBF 12 10 D9         [24]10997 	lcall	_LCD_string_write
                                  10998 ;	.\ecen4350_lcd_v4.c:2569: setColorHighlight1();
      003BC2 12 16 B3         [24]10999 	lcall	_setColorHighlight1
                                  11000 ;	.\ecen4350_lcd_v4.c:2570: LCD_string_write("0x");
      003BC5 90 5E 59         [24]11001 	mov	dptr,#___str_2
      003BC8 75 F0 80         [24]11002 	mov	b,#0x80
      003BCB 12 10 D9         [24]11003 	lcall	_LCD_string_write
                                  11004 ;	.\ecen4350_lcd_v4.c:2571: address = inputAddress();
      003BCE 12 17 0E         [24]11005 	lcall	_inputAddress
      003BD1 78 8E            [12]11006 	mov	r0,#_count_address_65536_708
      003BD3 A6 82            [24]11007 	mov	@r0,dpl
      003BD5 08               [12]11008 	inc	r0
      003BD6 A6 83            [24]11009 	mov	@r0,dph
                                  11010 ;	.\ecen4350_lcd_v4.c:2574: setColorDefault();
      003BD8 12 16 9D         [24]11011 	lcall	_setColorDefault
                                  11012 ;	.\ecen4350_lcd_v4.c:2575: setCursor(0, 110);
      003BDB 75 6B 6E         [24]11013 	mov	_setCursor_PARM_2,#0x6e
      003BDE 75 6C 00         [24]11014 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BE1 90 00 00         [24]11015 	mov	dptr,#0x0000
      003BE4 12 05 BF         [24]11016 	lcall	_setCursor
                                  11017 ;	.\ecen4350_lcd_v4.c:2576: LCD_string_write(" Search Address:");
      003BE7 90 62 7A         [24]11018 	mov	dptr,#___str_82
      003BEA 75 F0 80         [24]11019 	mov	b,#0x80
      003BED 12 10 D9         [24]11020 	lcall	_LCD_string_write
                                  11021 ;	.\ecen4350_lcd_v4.c:2577: setCursor(0, 130);
      003BF0 75 6B 82         [24]11022 	mov	_setCursor_PARM_2,#0x82
      003BF3 75 6C 00         [24]11023 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BF6 90 00 00         [24]11024 	mov	dptr,#0x0000
      003BF9 12 05 BF         [24]11025 	lcall	_setCursor
                                  11026 ;	.\ecen4350_lcd_v4.c:2578: LCD_string_write(" ");
      003BFC 90 5F 84         [24]11027 	mov	dptr,#___str_30
      003BFF 75 F0 80         [24]11028 	mov	b,#0x80
      003C02 12 10 D9         [24]11029 	lcall	_LCD_string_write
                                  11030 ;	.\ecen4350_lcd_v4.c:2579: setColorHighlight2();
      003C05 12 16 BF         [24]11031 	lcall	_setColorHighlight2
                                  11032 ;	.\ecen4350_lcd_v4.c:2580: LCD_string_write("0x");
      003C08 90 5E 59         [24]11033 	mov	dptr,#___str_2
      003C0B 75 F0 80         [24]11034 	mov	b,#0x80
      003C0E 12 10 D9         [24]11035 	lcall	_LCD_string_write
                                  11036 ;	.\ecen4350_lcd_v4.c:2581: print16Hex(address);
      003C11 78 8E            [12]11037 	mov	r0,#_count_address_65536_708
      003C13 86 82            [24]11038 	mov	dpl,@r0
      003C15 08               [12]11039 	inc	r0
      003C16 86 83            [24]11040 	mov	dph,@r0
      003C18 12 15 C1         [24]11041 	lcall	_print16Hex
                                  11042 ;	.\ecen4350_lcd_v4.c:2584: setColorSelect();
      003C1B 12 16 A8         [24]11043 	lcall	_setColorSelect
                                  11044 ;	.\ecen4350_lcd_v4.c:2585: setCursor(0, 160);
      003C1E 75 6B A0         [24]11045 	mov	_setCursor_PARM_2,#0xa0
      003C21 75 6C 00         [24]11046 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C24 90 00 00         [24]11047 	mov	dptr,#0x0000
      003C27 12 05 BF         [24]11048 	lcall	_setCursor
                                  11049 ;	.\ecen4350_lcd_v4.c:2586: LCD_string_write(" Input Block Size:\n");
      003C2A 90 62 8B         [24]11050 	mov	dptr,#___str_83
      003C2D 75 F0 80         [24]11051 	mov	b,#0x80
      003C30 12 10 D9         [24]11052 	lcall	_LCD_string_write
                                  11053 ;	.\ecen4350_lcd_v4.c:2587: setColorWhite();
      003C33 12 16 ED         [24]11054 	lcall	_setColorWhite
                                  11055 ;	.\ecen4350_lcd_v4.c:2588: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003C36 90 62 9F         [24]11056 	mov	dptr,#___str_84
      003C39 75 F0 80         [24]11057 	mov	b,#0x80
      003C3C 12 10 D9         [24]11058 	lcall	_LCD_string_write
                                  11059 ;	.\ecen4350_lcd_v4.c:2589: LCD_string_write("  <FF> (SCAN)");
      003C3F 90 62 C5         [24]11060 	mov	dptr,#___str_85
      003C42 75 F0 80         [24]11061 	mov	b,#0x80
      003C45 12 10 D9         [24]11062 	lcall	_LCD_string_write
      003C48 D0 03            [24]11063 	pop	ar3
      003C4A D0 05            [24]11064 	pop	ar5
                                  11065 ;	.\ecen4350_lcd_v4.c:2590: while (invalidInput) {
      003C4C                      11066 00113$:
      003C4C EB               [12]11067 	mov	a,r3
      003C4D 70 03            [24]11068 	jnz	00530$
      003C4F 02 3D 0B         [24]11069 	ljmp	00115$
      003C52                      11070 00530$:
                                  11071 ;	.\ecen4350_lcd_v4.c:2591: setCursor(0, 250);
      003C52 75 6B FA         [24]11072 	mov	_setCursor_PARM_2,#0xfa
      003C55 75 6C 00         [24]11073 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C58 90 00 00         [24]11074 	mov	dptr,#0x0000
      003C5B C0 05            [24]11075 	push	ar5
      003C5D C0 03            [24]11076 	push	ar3
      003C5F 12 05 BF         [24]11077 	lcall	_setCursor
                                  11078 ;	.\ecen4350_lcd_v4.c:2592: setColorGray();
      003C62 12 16 CB         [24]11079 	lcall	_setColorGray
                                  11080 ;	.\ecen4350_lcd_v4.c:2593: LCD_string_write("   __");
      003C65 90 62 D3         [24]11081 	mov	dptr,#___str_86
      003C68 75 F0 80         [24]11082 	mov	b,#0x80
      003C6B 12 10 D9         [24]11083 	lcall	_LCD_string_write
                                  11084 ;	.\ecen4350_lcd_v4.c:2594: setCursor(0, 250);
      003C6E 75 6B FA         [24]11085 	mov	_setCursor_PARM_2,#0xfa
      003C71 75 6C 00         [24]11086 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C74 90 00 00         [24]11087 	mov	dptr,#0x0000
      003C77 12 05 BF         [24]11088 	lcall	_setCursor
                                  11089 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write("   ");
      003C7A 90 62 D9         [24]11090 	mov	dptr,#___str_87
      003C7D 75 F0 80         [24]11091 	mov	b,#0x80
      003C80 12 10 D9         [24]11092 	lcall	_LCD_string_write
                                  11093 ;	.\ecen4350_lcd_v4.c:2596: setColorHighlight1();
      003C83 12 16 B3         [24]11094 	lcall	_setColorHighlight1
                                  11095 ;	.\ecen4350_lcd_v4.c:2597: blockSize = inputBlockSize();
      003C86 12 17 BE         [24]11096 	lcall	_inputBlockSize
      003C89 78 90            [12]11097 	mov	r0,#_count_blockSize_65536_708
      003C8B A6 82            [24]11098 	mov	@r0,dpl
      003C8D D0 03            [24]11099 	pop	ar3
      003C8F D0 05            [24]11100 	pop	ar5
                                  11101 ;	.\ecen4350_lcd_v4.c:2598: if (blockSize == 0x01) {
      003C91 78 90            [12]11102 	mov	r0,#_count_blockSize_65536_708
      003C93 B6 01 18         [24]11103 	cjne	@r0,#0x01,00111$
                                  11104 ;	.\ecen4350_lcd_v4.c:2599: invalidInput = 0;
      003C96 7B 00            [12]11105 	mov	r3,#0x00
                                  11106 ;	.\ecen4350_lcd_v4.c:2600: setColorDefault();
      003C98 C0 05            [24]11107 	push	ar5
      003C9A C0 03            [24]11108 	push	ar3
      003C9C 12 16 9D         [24]11109 	lcall	_setColorDefault
                                  11110 ;	.\ecen4350_lcd_v4.c:2601: LCD_string_write("\n                ");
      003C9F 90 62 DD         [24]11111 	mov	dptr,#___str_88
      003CA2 75 F0 80         [24]11112 	mov	b,#0x80
      003CA5 12 10 D9         [24]11113 	lcall	_LCD_string_write
      003CA8 D0 03            [24]11114 	pop	ar3
      003CAA D0 05            [24]11115 	pop	ar5
      003CAC 80 9E            [24]11116 	sjmp	00113$
      003CAE                      11117 00111$:
                                  11118 ;	.\ecen4350_lcd_v4.c:2602: } else if (blockSize == 0x02) {
      003CAE 78 90            [12]11119 	mov	r0,#_count_blockSize_65536_708
      003CB0 B6 02 19         [24]11120 	cjne	@r0,#0x02,00108$
                                  11121 ;	.\ecen4350_lcd_v4.c:2603: invalidInput = 0;
      003CB3 7B 00            [12]11122 	mov	r3,#0x00
                                  11123 ;	.\ecen4350_lcd_v4.c:2604: setColorDefault();
      003CB5 C0 05            [24]11124 	push	ar5
      003CB7 C0 03            [24]11125 	push	ar3
      003CB9 12 16 9D         [24]11126 	lcall	_setColorDefault
                                  11127 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write("\n                ");
      003CBC 90 62 DD         [24]11128 	mov	dptr,#___str_88
      003CBF 75 F0 80         [24]11129 	mov	b,#0x80
      003CC2 12 10 D9         [24]11130 	lcall	_LCD_string_write
      003CC5 D0 03            [24]11131 	pop	ar3
      003CC7 D0 05            [24]11132 	pop	ar5
      003CC9 02 3C 4C         [24]11133 	ljmp	00113$
      003CCC                      11134 00108$:
                                  11135 ;	.\ecen4350_lcd_v4.c:2606: } else if (blockSize == 0x04) {
      003CCC 78 90            [12]11136 	mov	r0,#_count_blockSize_65536_708
      003CCE B6 04 19         [24]11137 	cjne	@r0,#0x04,00105$
                                  11138 ;	.\ecen4350_lcd_v4.c:2607: invalidInput = 0;
      003CD1 7B 00            [12]11139 	mov	r3,#0x00
                                  11140 ;	.\ecen4350_lcd_v4.c:2608: setColorDefault();
      003CD3 C0 05            [24]11141 	push	ar5
      003CD5 C0 03            [24]11142 	push	ar3
      003CD7 12 16 9D         [24]11143 	lcall	_setColorDefault
                                  11144 ;	.\ecen4350_lcd_v4.c:2609: LCD_string_write("\n                ");
      003CDA 90 62 DD         [24]11145 	mov	dptr,#___str_88
      003CDD 75 F0 80         [24]11146 	mov	b,#0x80
      003CE0 12 10 D9         [24]11147 	lcall	_LCD_string_write
      003CE3 D0 03            [24]11148 	pop	ar3
      003CE5 D0 05            [24]11149 	pop	ar5
      003CE7 02 3C 4C         [24]11150 	ljmp	00113$
      003CEA                      11151 00105$:
                                  11152 ;	.\ecen4350_lcd_v4.c:2610: } else if (blockSize == 0xFF) {
      003CEA 78 90            [12]11153 	mov	r0,#_count_blockSize_65536_708
      003CEC B6 FF 05         [24]11154 	cjne	@r0,#0xff,00102$
                                  11155 ;	.\ecen4350_lcd_v4.c:2611: invalidInput = 0;
      003CEF 7B 00            [12]11156 	mov	r3,#0x00
      003CF1 02 3C 4C         [24]11157 	ljmp	00113$
      003CF4                      11158 00102$:
                                  11159 ;	.\ecen4350_lcd_v4.c:2614: setColorRed();
      003CF4 C0 05            [24]11160 	push	ar5
      003CF6 C0 03            [24]11161 	push	ar3
      003CF8 12 16 E2         [24]11162 	lcall	_setColorRed
                                  11163 ;	.\ecen4350_lcd_v4.c:2615: LCD_string_write("\n Try again");
      003CFB 90 62 EF         [24]11164 	mov	dptr,#___str_89
      003CFE 75 F0 80         [24]11165 	mov	b,#0x80
      003D01 12 10 D9         [24]11166 	lcall	_LCD_string_write
      003D04 D0 03            [24]11167 	pop	ar3
      003D06 D0 05            [24]11168 	pop	ar5
      003D08 02 3C 4C         [24]11169 	ljmp	00113$
      003D0B                      11170 00115$:
                                  11171 ;	.\ecen4350_lcd_v4.c:2620: setCursor(0, 160);
      003D0B 75 6B A0         [24]11172 	mov	_setCursor_PARM_2,#0xa0
      003D0E 75 6C 00         [24]11173 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D11 90 00 00         [24]11174 	mov	dptr,#0x0000
      003D14 C0 05            [24]11175 	push	ar5
      003D16 12 05 BF         [24]11176 	lcall	_setCursor
                                  11177 ;	.\ecen4350_lcd_v4.c:2621: setColorDefault();
      003D19 12 16 9D         [24]11178 	lcall	_setColorDefault
                                  11179 ;	.\ecen4350_lcd_v4.c:2622: LCD_string_write(" Input Block Size:\n");
      003D1C 90 62 8B         [24]11180 	mov	dptr,#___str_83
      003D1F 75 F0 80         [24]11181 	mov	b,#0x80
      003D22 12 10 D9         [24]11182 	lcall	_LCD_string_write
      003D25 D0 05            [24]11183 	pop	ar5
                                  11184 ;	.\ecen4350_lcd_v4.c:2623: if (blockSize == 0x01){
      003D27 78 90            [12]11185 	mov	r0,#_count_blockSize_65536_708
      003D29 B6 01 74         [24]11186 	cjne	@r0,#0x01,00125$
                                  11187 ;	.\ecen4350_lcd_v4.c:2624: LCD_string_write("  ");
      003D2C 90 5F 9D         [24]11188 	mov	dptr,#___str_33
      003D2F 75 F0 80         [24]11189 	mov	b,#0x80
      003D32 C0 05            [24]11190 	push	ar5
      003D34 12 10 D9         [24]11191 	lcall	_LCD_string_write
                                  11192 ;	.\ecen4350_lcd_v4.c:2625: setColorHighlight2();
      003D37 12 16 BF         [24]11193 	lcall	_setColorHighlight2
                                  11194 ;	.\ecen4350_lcd_v4.c:2626: LCD_string_write("<01> BYTE\n");
      003D3A 90 62 FB         [24]11195 	mov	dptr,#___str_90
      003D3D 75 F0 80         [24]11196 	mov	b,#0x80
      003D40 12 10 D9         [24]11197 	lcall	_LCD_string_write
                                  11198 ;	.\ecen4350_lcd_v4.c:2627: setColorGray();
      003D43 12 16 CB         [24]11199 	lcall	_setColorGray
                                  11200 ;	.\ecen4350_lcd_v4.c:2628: LCD_string_write("  <02> WORD\n");
      003D46 90 63 06         [24]11201 	mov	dptr,#___str_91
      003D49 75 F0 80         [24]11202 	mov	b,#0x80
      003D4C 12 10 D9         [24]11203 	lcall	_LCD_string_write
                                  11204 ;	.\ecen4350_lcd_v4.c:2629: LCD_string_write("  <04> DWORD\n");
      003D4F 90 63 13         [24]11205 	mov	dptr,#___str_92
      003D52 75 F0 80         [24]11206 	mov	b,#0x80
      003D55 12 10 D9         [24]11207 	lcall	_LCD_string_write
                                  11208 ;	.\ecen4350_lcd_v4.c:2630: LCD_string_write("  <FF> (SCAN)");
      003D58 90 62 C5         [24]11209 	mov	dptr,#___str_85
      003D5B 75 F0 80         [24]11210 	mov	b,#0x80
      003D5E 12 10 D9         [24]11211 	lcall	_LCD_string_write
                                  11212 ;	.\ecen4350_lcd_v4.c:2631: setColorDefault();
      003D61 12 16 9D         [24]11213 	lcall	_setColorDefault
                                  11214 ;	.\ecen4350_lcd_v4.c:2632: setCursor(0, 250);
      003D64 75 6B FA         [24]11215 	mov	_setCursor_PARM_2,#0xfa
      003D67 75 6C 00         [24]11216 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D6A 90 00 00         [24]11217 	mov	dptr,#0x0000
      003D6D 12 05 BF         [24]11218 	lcall	_setCursor
                                  11219 ;	.\ecen4350_lcd_v4.c:2633: LCD_string_write("   ");
      003D70 90 62 D9         [24]11220 	mov	dptr,#___str_87
      003D73 75 F0 80         [24]11221 	mov	b,#0x80
      003D76 12 10 D9         [24]11222 	lcall	_LCD_string_write
                                  11223 ;	.\ecen4350_lcd_v4.c:2634: setColorHighlight2();
      003D79 12 16 BF         [24]11224 	lcall	_setColorHighlight2
                                  11225 ;	.\ecen4350_lcd_v4.c:2635: print8Hex(blockSize);
      003D7C 78 90            [12]11226 	mov	r0,#_count_blockSize_65536_708
      003D7E 86 82            [24]11227 	mov	dpl,@r0
      003D80 12 15 AA         [24]11228 	lcall	_print8Hex
                                  11229 ;	.\ecen4350_lcd_v4.c:2636: setColorDefault();
      003D83 12 16 9D         [24]11230 	lcall	_setColorDefault
                                  11231 ;	.\ecen4350_lcd_v4.c:2637: LCD_string_write("\n Search Size Limit:");
      003D86 90 63 21         [24]11232 	mov	dptr,#___str_93
      003D89 75 F0 80         [24]11233 	mov	b,#0x80
      003D8C 12 10 D9         [24]11234 	lcall	_LCD_string_write
                                  11235 ;	.\ecen4350_lcd_v4.c:2638: setColorWhite();
      003D8F 12 16 ED         [24]11236 	lcall	_setColorWhite
                                  11237 ;	.\ecen4350_lcd_v4.c:2639: LCD_string_write("\n BYTE [8 bits]");
      003D92 90 63 36         [24]11238 	mov	dptr,#___str_94
      003D95 75 F0 80         [24]11239 	mov	b,#0x80
      003D98 12 10 D9         [24]11240 	lcall	_LCD_string_write
      003D9B D0 05            [24]11241 	pop	ar5
      003D9D 02 3E E4         [24]11242 	ljmp	00126$
      003DA0                      11243 00125$:
                                  11244 ;	.\ecen4350_lcd_v4.c:2640: } else if (blockSize == 0x02) {
      003DA0 78 90            [12]11245 	mov	r0,#_count_blockSize_65536_708
      003DA2 B6 02 6E         [24]11246 	cjne	@r0,#0x02,00122$
                                  11247 ;	.\ecen4350_lcd_v4.c:2641: setColorGray();
      003DA5 C0 05            [24]11248 	push	ar5
      003DA7 12 16 CB         [24]11249 	lcall	_setColorGray
                                  11250 ;	.\ecen4350_lcd_v4.c:2642: LCD_string_write("  <01> BYTE\n  ");
      003DAA 90 63 46         [24]11251 	mov	dptr,#___str_95
      003DAD 75 F0 80         [24]11252 	mov	b,#0x80
      003DB0 12 10 D9         [24]11253 	lcall	_LCD_string_write
                                  11254 ;	.\ecen4350_lcd_v4.c:2643: setColorHighlight2();
      003DB3 12 16 BF         [24]11255 	lcall	_setColorHighlight2
                                  11256 ;	.\ecen4350_lcd_v4.c:2644: LCD_string_write("<02> WORD\n");
      003DB6 90 63 55         [24]11257 	mov	dptr,#___str_96
      003DB9 75 F0 80         [24]11258 	mov	b,#0x80
      003DBC 12 10 D9         [24]11259 	lcall	_LCD_string_write
                                  11260 ;	.\ecen4350_lcd_v4.c:2645: setColorGray();
      003DBF 12 16 CB         [24]11261 	lcall	_setColorGray
                                  11262 ;	.\ecen4350_lcd_v4.c:2646: LCD_string_write("  <04> DWORD\n");
      003DC2 90 63 13         [24]11263 	mov	dptr,#___str_92
      003DC5 75 F0 80         [24]11264 	mov	b,#0x80
      003DC8 12 10 D9         [24]11265 	lcall	_LCD_string_write
                                  11266 ;	.\ecen4350_lcd_v4.c:2647: LCD_string_write("  <FF> (SCAN)");
      003DCB 90 62 C5         [24]11267 	mov	dptr,#___str_85
      003DCE 75 F0 80         [24]11268 	mov	b,#0x80
      003DD1 12 10 D9         [24]11269 	lcall	_LCD_string_write
                                  11270 ;	.\ecen4350_lcd_v4.c:2648: setColorDefault();
      003DD4 12 16 9D         [24]11271 	lcall	_setColorDefault
                                  11272 ;	.\ecen4350_lcd_v4.c:2649: setCursor(0, 250);
      003DD7 75 6B FA         [24]11273 	mov	_setCursor_PARM_2,#0xfa
      003DDA 75 6C 00         [24]11274 	mov	(_setCursor_PARM_2 + 1),#0x00
      003DDD 90 00 00         [24]11275 	mov	dptr,#0x0000
      003DE0 12 05 BF         [24]11276 	lcall	_setCursor
                                  11277 ;	.\ecen4350_lcd_v4.c:2650: LCD_string_write("   ");
      003DE3 90 62 D9         [24]11278 	mov	dptr,#___str_87
      003DE6 75 F0 80         [24]11279 	mov	b,#0x80
      003DE9 12 10 D9         [24]11280 	lcall	_LCD_string_write
                                  11281 ;	.\ecen4350_lcd_v4.c:2651: setColorHighlight2();
      003DEC 12 16 BF         [24]11282 	lcall	_setColorHighlight2
                                  11283 ;	.\ecen4350_lcd_v4.c:2652: print8Hex(blockSize);
      003DEF 78 90            [12]11284 	mov	r0,#_count_blockSize_65536_708
      003DF1 86 82            [24]11285 	mov	dpl,@r0
      003DF3 12 15 AA         [24]11286 	lcall	_print8Hex
                                  11287 ;	.\ecen4350_lcd_v4.c:2653: setColorDefault();
      003DF6 12 16 9D         [24]11288 	lcall	_setColorDefault
                                  11289 ;	.\ecen4350_lcd_v4.c:2654: LCD_string_write("\n Search Size Limit:");
      003DF9 90 63 21         [24]11290 	mov	dptr,#___str_93
      003DFC 75 F0 80         [24]11291 	mov	b,#0x80
      003DFF 12 10 D9         [24]11292 	lcall	_LCD_string_write
                                  11293 ;	.\ecen4350_lcd_v4.c:2655: setColorWhite();
      003E02 12 16 ED         [24]11294 	lcall	_setColorWhite
                                  11295 ;	.\ecen4350_lcd_v4.c:2656: LCD_string_write("\n WORD [16 bits]");
      003E05 90 63 60         [24]11296 	mov	dptr,#___str_97
      003E08 75 F0 80         [24]11297 	mov	b,#0x80
      003E0B 12 10 D9         [24]11298 	lcall	_LCD_string_write
      003E0E D0 05            [24]11299 	pop	ar5
      003E10 02 3E E4         [24]11300 	ljmp	00126$
      003E13                      11301 00122$:
                                  11302 ;	.\ecen4350_lcd_v4.c:2657: } else if (blockSize == 0x04) {
      003E13 78 90            [12]11303 	mov	r0,#_count_blockSize_65536_708
      003E15 B6 04 64         [24]11304 	cjne	@r0,#0x04,00119$
                                  11305 ;	.\ecen4350_lcd_v4.c:2658: setColorGray();
      003E18 C0 05            [24]11306 	push	ar5
      003E1A 12 16 CB         [24]11307 	lcall	_setColorGray
                                  11308 ;	.\ecen4350_lcd_v4.c:2659: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003E1D 90 63 71         [24]11309 	mov	dptr,#___str_98
      003E20 75 F0 80         [24]11310 	mov	b,#0x80
      003E23 12 10 D9         [24]11311 	lcall	_LCD_string_write
                                  11312 ;	.\ecen4350_lcd_v4.c:2660: setColorHighlight2();
      003E26 12 16 BF         [24]11313 	lcall	_setColorHighlight2
                                  11314 ;	.\ecen4350_lcd_v4.c:2661: LCD_string_write("<04> DWORD\n");
      003E29 90 63 8C         [24]11315 	mov	dptr,#___str_99
      003E2C 75 F0 80         [24]11316 	mov	b,#0x80
      003E2F 12 10 D9         [24]11317 	lcall	_LCD_string_write
                                  11318 ;	.\ecen4350_lcd_v4.c:2662: setColorGray();
      003E32 12 16 CB         [24]11319 	lcall	_setColorGray
                                  11320 ;	.\ecen4350_lcd_v4.c:2663: LCD_string_write("  <FF> (SCAN)");
      003E35 90 62 C5         [24]11321 	mov	dptr,#___str_85
      003E38 75 F0 80         [24]11322 	mov	b,#0x80
      003E3B 12 10 D9         [24]11323 	lcall	_LCD_string_write
                                  11324 ;	.\ecen4350_lcd_v4.c:2664: setColorDefault();
      003E3E 12 16 9D         [24]11325 	lcall	_setColorDefault
                                  11326 ;	.\ecen4350_lcd_v4.c:2665: setCursor(0, 250);
      003E41 75 6B FA         [24]11327 	mov	_setCursor_PARM_2,#0xfa
      003E44 75 6C 00         [24]11328 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E47 90 00 00         [24]11329 	mov	dptr,#0x0000
      003E4A 12 05 BF         [24]11330 	lcall	_setCursor
                                  11331 ;	.\ecen4350_lcd_v4.c:2666: LCD_string_write("   ");
      003E4D 90 62 D9         [24]11332 	mov	dptr,#___str_87
      003E50 75 F0 80         [24]11333 	mov	b,#0x80
      003E53 12 10 D9         [24]11334 	lcall	_LCD_string_write
                                  11335 ;	.\ecen4350_lcd_v4.c:2667: setColorHighlight2();
      003E56 12 16 BF         [24]11336 	lcall	_setColorHighlight2
                                  11337 ;	.\ecen4350_lcd_v4.c:2668: print8Hex(blockSize);
      003E59 78 90            [12]11338 	mov	r0,#_count_blockSize_65536_708
      003E5B 86 82            [24]11339 	mov	dpl,@r0
      003E5D 12 15 AA         [24]11340 	lcall	_print8Hex
                                  11341 ;	.\ecen4350_lcd_v4.c:2669: setColorDefault();
      003E60 12 16 9D         [24]11342 	lcall	_setColorDefault
                                  11343 ;	.\ecen4350_lcd_v4.c:2670: LCD_string_write("\n Search Size Limit:");
      003E63 90 63 21         [24]11344 	mov	dptr,#___str_93
      003E66 75 F0 80         [24]11345 	mov	b,#0x80
      003E69 12 10 D9         [24]11346 	lcall	_LCD_string_write
                                  11347 ;	.\ecen4350_lcd_v4.c:2671: setColorWhite();
      003E6C 12 16 ED         [24]11348 	lcall	_setColorWhite
                                  11349 ;	.\ecen4350_lcd_v4.c:2672: LCD_string_write("\n DWORD [32 bits]");
      003E6F 90 63 98         [24]11350 	mov	dptr,#___str_100
      003E72 75 F0 80         [24]11351 	mov	b,#0x80
      003E75 12 10 D9         [24]11352 	lcall	_LCD_string_write
      003E78 D0 05            [24]11353 	pop	ar5
      003E7A 80 68            [24]11354 	sjmp	00126$
      003E7C                      11355 00119$:
                                  11356 ;	.\ecen4350_lcd_v4.c:2673: } else if (blockSize == 0xFF) {
      003E7C 78 90            [12]11357 	mov	r0,#_count_blockSize_65536_708
      003E7E B6 FF 63         [24]11358 	cjne	@r0,#0xff,00126$
                                  11359 ;	.\ecen4350_lcd_v4.c:2674: scan = 1;
      003E81 78 92            [12]11360 	mov	r0,#_count_scan_65536_708
      003E83 76 01            [12]11361 	mov	@r0,#0x01
                                  11362 ;	.\ecen4350_lcd_v4.c:2675: setColorGray();
      003E85 C0 05            [24]11363 	push	ar5
      003E87 12 16 CB         [24]11364 	lcall	_setColorGray
                                  11365 ;	.\ecen4350_lcd_v4.c:2676: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003E8A 90 63 71         [24]11366 	mov	dptr,#___str_98
      003E8D 75 F0 80         [24]11367 	mov	b,#0x80
      003E90 12 10 D9         [24]11368 	lcall	_LCD_string_write
                                  11369 ;	.\ecen4350_lcd_v4.c:2677: LCD_string_write("<04> DWORD\n  ");
      003E93 90 63 AA         [24]11370 	mov	dptr,#___str_101
      003E96 75 F0 80         [24]11371 	mov	b,#0x80
      003E99 12 10 D9         [24]11372 	lcall	_LCD_string_write
                                  11373 ;	.\ecen4350_lcd_v4.c:2678: setColorHighlight2();
      003E9C 12 16 BF         [24]11374 	lcall	_setColorHighlight2
                                  11375 ;	.\ecen4350_lcd_v4.c:2679: LCD_string_write("<FF> (SCAN)");
      003E9F 90 63 B8         [24]11376 	mov	dptr,#___str_102
      003EA2 75 F0 80         [24]11377 	mov	b,#0x80
      003EA5 12 10 D9         [24]11378 	lcall	_LCD_string_write
                                  11379 ;	.\ecen4350_lcd_v4.c:2680: setColorDefault();
      003EA8 12 16 9D         [24]11380 	lcall	_setColorDefault
                                  11381 ;	.\ecen4350_lcd_v4.c:2681: setCursor(0, 250);
      003EAB 75 6B FA         [24]11382 	mov	_setCursor_PARM_2,#0xfa
      003EAE 75 6C 00         [24]11383 	mov	(_setCursor_PARM_2 + 1),#0x00
      003EB1 90 00 00         [24]11384 	mov	dptr,#0x0000
      003EB4 12 05 BF         [24]11385 	lcall	_setCursor
                                  11386 ;	.\ecen4350_lcd_v4.c:2682: LCD_string_write("   ");
      003EB7 90 62 D9         [24]11387 	mov	dptr,#___str_87
      003EBA 75 F0 80         [24]11388 	mov	b,#0x80
      003EBD 12 10 D9         [24]11389 	lcall	_LCD_string_write
                                  11390 ;	.\ecen4350_lcd_v4.c:2683: setColorHighlight2();
      003EC0 12 16 BF         [24]11391 	lcall	_setColorHighlight2
                                  11392 ;	.\ecen4350_lcd_v4.c:2684: print8Hex(blockSize);
      003EC3 78 90            [12]11393 	mov	r0,#_count_blockSize_65536_708
      003EC5 86 82            [24]11394 	mov	dpl,@r0
      003EC7 12 15 AA         [24]11395 	lcall	_print8Hex
                                  11396 ;	.\ecen4350_lcd_v4.c:2685: setColorDefault();
      003ECA 12 16 9D         [24]11397 	lcall	_setColorDefault
                                  11398 ;	.\ecen4350_lcd_v4.c:2686: LCD_string_write("\n Search Size Limit:");
      003ECD 90 63 21         [24]11399 	mov	dptr,#___str_93
      003ED0 75 F0 80         [24]11400 	mov	b,#0x80
      003ED3 12 10 D9         [24]11401 	lcall	_LCD_string_write
                                  11402 ;	.\ecen4350_lcd_v4.c:2687: setColorWhite();
      003ED6 12 16 ED         [24]11403 	lcall	_setColorWhite
                                  11404 ;	.\ecen4350_lcd_v4.c:2688: LCD_string_write("\n [256 Blocks]");
      003ED9 90 63 C4         [24]11405 	mov	dptr,#___str_103
      003EDC 75 F0 80         [24]11406 	mov	b,#0x80
      003EDF 12 10 D9         [24]11407 	lcall	_LCD_string_write
      003EE2 D0 05            [24]11408 	pop	ar5
      003EE4                      11409 00126$:
                                  11410 ;	.\ecen4350_lcd_v4.c:2692: delay(40);
      003EE4 90 00 28         [24]11411 	mov	dptr,#0x0028
      003EE7 C0 05            [24]11412 	push	ar5
      003EE9 12 01 A9         [24]11413 	lcall	_delay
                                  11414 ;	.\ecen4350_lcd_v4.c:2693: clearLCD();
      003EEC 12 0E 5C         [24]11415 	lcall	_clearLCD
                                  11416 ;	.\ecen4350_lcd_v4.c:2694: fillTop(GRAY);
      003EEF 90 D6 BA         [24]11417 	mov	dptr,#0xd6ba
      003EF2 12 0C 8F         [24]11418 	lcall	_fillTop
                                  11419 ;	.\ecen4350_lcd_v4.c:2695: setTextSize(5);
      003EF5 75 82 05         [24]11420 	mov	dpl,#0x05
      003EF8 12 05 D9         [24]11421 	lcall	_setTextSize
                                  11422 ;	.\ecen4350_lcd_v4.c:2696: setColorMenu();
      003EFB 12 16 D6         [24]11423 	lcall	_setColorMenu
                                  11424 ;	.\ecen4350_lcd_v4.c:2697: setCursor(15,0);
      003EFE E4               [12]11425 	clr	a
      003EFF F5 6B            [12]11426 	mov	_setCursor_PARM_2,a
      003F01 F5 6C            [12]11427 	mov	(_setCursor_PARM_2 + 1),a
      003F03 90 00 0F         [24]11428 	mov	dptr,#0x000f
      003F06 12 05 BF         [24]11429 	lcall	_setCursor
                                  11430 ;	.\ecen4350_lcd_v4.c:2698: LCD_string_write("[COUNT]\n");
      003F09 90 65 30         [24]11431 	mov	dptr,#___str_123
      003F0C 75 F0 80         [24]11432 	mov	b,#0x80
      003F0F 12 10 D9         [24]11433 	lcall	_LCD_string_write
                                  11434 ;	.\ecen4350_lcd_v4.c:2699: setColorDefault();
      003F12 12 16 9D         [24]11435 	lcall	_setColorDefault
                                  11436 ;	.\ecen4350_lcd_v4.c:2700: setTextSize(2);
      003F15 75 82 02         [24]11437 	mov	dpl,#0x02
      003F18 12 05 D9         [24]11438 	lcall	_setTextSize
      003F1B D0 05            [24]11439 	pop	ar5
                                  11440 ;	.\ecen4350_lcd_v4.c:2706: while (exit) {
      003F1D                      11441 00202$:
      003F1D 78 94            [12]11442 	mov	r0,#_count_exit_65536_708
      003F1F E6               [12]11443 	mov	a,@r0
      003F20 70 03            [24]11444 	jnz	00547$
      003F22 02 44 BC         [24]11445 	ljmp	00204$
      003F25                      11446 00547$:
                                  11447 ;	.\ecen4350_lcd_v4.c:2708: if (scan) {	
      003F25 78 92            [12]11448 	mov	r0,#_count_scan_65536_708
      003F27 E6               [12]11449 	mov	a,@r0
      003F28 70 03            [24]11450 	jnz	00548$
      003F2A 02 3F E2         [24]11451 	ljmp	00193$
      003F2D                      11452 00548$:
                                  11453 ;	.\ecen4350_lcd_v4.c:2709: setCursor(0, 60);
      003F2D 75 6B 3C         [24]11454 	mov	_setCursor_PARM_2,#0x3c
      003F30 75 6C 00         [24]11455 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F33 90 00 00         [24]11456 	mov	dptr,#0x0000
      003F36 C0 05            [24]11457 	push	ar5
      003F38 12 05 BF         [24]11458 	lcall	_setCursor
                                  11459 ;	.\ecen4350_lcd_v4.c:2710: setColorYellow();
      003F3B 12 17 03         [24]11460 	lcall	_setColorYellow
                                  11461 ;	.\ecen4350_lcd_v4.c:2711: LCD_string_write(" [Non-Interactive]\n");
      003F3E 90 63 D3         [24]11462 	mov	dptr,#___str_104
      003F41 75 F0 80         [24]11463 	mov	b,#0x80
      003F44 12 10 D9         [24]11464 	lcall	_LCD_string_write
                                  11465 ;	.\ecen4350_lcd_v4.c:2712: setColorWhite();
      003F47 12 16 ED         [24]11466 	lcall	_setColorWhite
                                  11467 ;	.\ecen4350_lcd_v4.c:2713: LCD_string_write(" Search Value:\n ");
      003F4A 90 63 E7         [24]11468 	mov	dptr,#___str_105
      003F4D 75 F0 80         [24]11469 	mov	b,#0x80
      003F50 12 10 D9         [24]11470 	lcall	_LCD_string_write
                                  11471 ;	.\ecen4350_lcd_v4.c:2714: setColorDefault();
      003F53 12 16 9D         [24]11472 	lcall	_setColorDefault
                                  11473 ;	.\ecen4350_lcd_v4.c:2715: print8Hex(value);
      003F56 78 91            [12]11474 	mov	r0,#_count_value_65536_708
      003F58 86 82            [24]11475 	mov	dpl,@r0
      003F5A 12 15 AA         [24]11476 	lcall	_print8Hex
      003F5D D0 05            [24]11477 	pop	ar5
                                  11478 ;	.\ecen4350_lcd_v4.c:2716: for(unsigned int i = 0; i < blockSize; i++) {
      003F5F 8D 03            [24]11479 	mov	ar3,r5
      003F61 E4               [12]11480 	clr	a
      003F62 F5 66            [12]11481 	mov	_count_i_262144_721,a
      003F64 F5 67            [12]11482 	mov	(_count_i_262144_721 + 1),a
      003F66                      11483 00208$:
      003F66 78 90            [12]11484 	mov	r0,#_count_blockSize_65536_708
      003F68 86 02            [24]11485 	mov	ar2,@r0
      003F6A 7E 00            [12]11486 	mov	r6,#0x00
      003F6C C3               [12]11487 	clr	c
      003F6D E5 66            [12]11488 	mov	a,_count_i_262144_721
      003F6F 9A               [12]11489 	subb	a,r2
      003F70 E5 67            [12]11490 	mov	a,(_count_i_262144_721 + 1)
      003F72 9E               [12]11491 	subb	a,r6
      003F73 50 2A            [24]11492 	jnc	00267$
                                  11493 ;	.\ecen4350_lcd_v4.c:2717: d = (unsigned char __xdata*)(i+address);
      003F75 78 8E            [12]11494 	mov	r0,#_count_address_65536_708
      003F77 E6               [12]11495 	mov	a,@r0
      003F78 25 66            [12]11496 	add	a,_count_i_262144_721
      003F7A FC               [12]11497 	mov	r4,a
      003F7B 08               [12]11498 	inc	r0
      003F7C E6               [12]11499 	mov	a,@r0
      003F7D 35 67            [12]11500 	addc	a,(_count_i_262144_721 + 1)
      003F7F FE               [12]11501 	mov	r6,a
                                  11502 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  11503 ;	assignBit
      003F80 C2 B5            [12]11504 	clr	_P3_5
                                  11505 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      003F82 8C 82            [24]11506 	mov	dpl,r4
      003F84 8E 83            [24]11507 	mov	dph,r6
      003F86 E0               [24]11508 	movx	a,@dptr
      003F87 FC               [12]11509 	mov	r4,a
                                  11510 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  11511 ;	assignBit
      003F88 D2 B5            [12]11512 	setb	_P3_5
                                  11513 ;	.\ecen4350_lcd_v4.c:2718: if(value == ramRead8(d)){
      003F8A 78 91            [12]11514 	mov	r0,#_count_value_65536_708
      003F8C E6               [12]11515 	mov	a,@r0
      003F8D B5 04 05         [24]11516 	cjne	a,ar4,00209$
                                  11517 ;	.\ecen4350_lcd_v4.c:2719: noneFound = 0;
      003F90 78 93            [12]11518 	mov	r0,#_count_noneFound_65536_708
      003F92 76 00            [12]11519 	mov	@r0,#0x00
                                  11520 ;	.\ecen4350_lcd_v4.c:2720: page++;
      003F94 0B               [12]11521 	inc	r3
      003F95                      11522 00209$:
                                  11523 ;	.\ecen4350_lcd_v4.c:2716: for(unsigned int i = 0; i < blockSize; i++) {
      003F95 05 66            [12]11524 	inc	_count_i_262144_721
      003F97 E4               [12]11525 	clr	a
      003F98 B5 66 CB         [24]11526 	cjne	a,_count_i_262144_721,00208$
      003F9B 05 67            [12]11527 	inc	(_count_i_262144_721 + 1)
      003F9D 80 C7            [24]11528 	sjmp	00208$
      003F9F                      11529 00267$:
      003F9F 8B 05            [24]11530 	mov	ar5,r3
                                  11531 ;	.\ecen4350_lcd_v4.c:2723: setCursor(0, 120);
      003FA1 75 6B 78         [24]11532 	mov	_setCursor_PARM_2,#0x78
      003FA4 75 6C 00         [24]11533 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FA7 90 00 00         [24]11534 	mov	dptr,#0x0000
      003FAA C0 05            [24]11535 	push	ar5
      003FAC C0 03            [24]11536 	push	ar3
      003FAE 12 05 BF         [24]11537 	lcall	_setCursor
                                  11538 ;	.\ecen4350_lcd_v4.c:2724: setColorWhite();
      003FB1 12 16 ED         [24]11539 	lcall	_setColorWhite
                                  11540 ;	.\ecen4350_lcd_v4.c:2725: LCD_string_write(" Found in\n ");
      003FB4 90 65 48         [24]11541 	mov	dptr,#___str_125
      003FB7 75 F0 80         [24]11542 	mov	b,#0x80
      003FBA 12 10 D9         [24]11543 	lcall	_LCD_string_write
                                  11544 ;	.\ecen4350_lcd_v4.c:2726: setColorDefault();
      003FBD 12 16 9D         [24]11545 	lcall	_setColorDefault
                                  11546 ;	.\ecen4350_lcd_v4.c:2727: LCD_string_write("0x");
      003FC0 90 5E 59         [24]11547 	mov	dptr,#___str_2
      003FC3 75 F0 80         [24]11548 	mov	b,#0x80
      003FC6 12 10 D9         [24]11549 	lcall	_LCD_string_write
      003FC9 D0 03            [24]11550 	pop	ar3
                                  11551 ;	.\ecen4350_lcd_v4.c:2728: print8Hex(page);
      003FCB 8B 82            [24]11552 	mov	dpl,r3
      003FCD 12 15 AA         [24]11553 	lcall	_print8Hex
                                  11554 ;	.\ecen4350_lcd_v4.c:2729: LCD_string_write(" Bytes (Hex)\n ");
      003FD0 90 65 54         [24]11555 	mov	dptr,#___str_126
      003FD3 75 F0 80         [24]11556 	mov	b,#0x80
      003FD6 12 10 D9         [24]11557 	lcall	_LCD_string_write
      003FD9 D0 05            [24]11558 	pop	ar5
                                  11559 ;	.\ecen4350_lcd_v4.c:2730: exit = 0;
      003FDB 78 94            [12]11560 	mov	r0,#_count_exit_65536_708
      003FDD 76 00            [12]11561 	mov	@r0,#0x00
      003FDF 02 44 43         [24]11562 	ljmp	00194$
      003FE2                      11563 00193$:
                                  11564 ;	.\ecen4350_lcd_v4.c:2732: setCursor(0, 60);
      003FE2 75 6B 3C         [24]11565 	mov	_setCursor_PARM_2,#0x3c
      003FE5 75 6C 00         [24]11566 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FE8 90 00 00         [24]11567 	mov	dptr,#0x0000
      003FEB C0 05            [24]11568 	push	ar5
      003FED 12 05 BF         [24]11569 	lcall	_setCursor
                                  11570 ;	.\ecen4350_lcd_v4.c:2733: setColorYellow();
      003FF0 12 17 03         [24]11571 	lcall	_setColorYellow
                                  11572 ;	.\ecen4350_lcd_v4.c:2734: LCD_string_write(" [Interactive]\n");
      003FF3 90 64 12         [24]11573 	mov	dptr,#___str_108
      003FF6 75 F0 80         [24]11574 	mov	b,#0x80
      003FF9 12 10 D9         [24]11575 	lcall	_LCD_string_write
                                  11576 ;	.\ecen4350_lcd_v4.c:2735: setColorWhite();
      003FFC 12 16 ED         [24]11577 	lcall	_setColorWhite
                                  11578 ;	.\ecen4350_lcd_v4.c:2736: LCD_string_write(" Search Value:\n ");
      003FFF 90 63 E7         [24]11579 	mov	dptr,#___str_105
      004002 75 F0 80         [24]11580 	mov	b,#0x80
      004005 12 10 D9         [24]11581 	lcall	_LCD_string_write
                                  11582 ;	.\ecen4350_lcd_v4.c:2737: setColorDefault();
      004008 12 16 9D         [24]11583 	lcall	_setColorDefault
      00400B D0 05            [24]11584 	pop	ar5
                                  11585 ;	.\ecen4350_lcd_v4.c:2740: for (unsigned int i = 0; i < blockSize; i++) {
      00400D E4               [12]11586 	clr	a
      00400E F5 69            [12]11587 	mov	_count_sloc1_1_0,a
      004010 F5 6A            [12]11588 	mov	(_count_sloc1_1_0 + 1),a
      004012                      11589 00211$:
      004012 78 90            [12]11590 	mov	r0,#_count_blockSize_65536_708
      004014 86 02            [24]11591 	mov	ar2,@r0
      004016 7B 00            [12]11592 	mov	r3,#0x00
      004018 C3               [12]11593 	clr	c
      004019 E5 69            [12]11594 	mov	a,_count_sloc1_1_0
      00401B 9A               [12]11595 	subb	a,r2
      00401C E5 6A            [12]11596 	mov	a,(_count_sloc1_1_0 + 1)
      00401E 9B               [12]11597 	subb	a,r3
      00401F 40 03            [24]11598 	jc	00553$
      004021 02 44 43         [24]11599 	ljmp	00194$
      004024                      11600 00553$:
                                  11601 ;	.\ecen4350_lcd_v4.c:2741: d = (unsigned char __xdata*)(i+address);
      004024 78 8E            [12]11602 	mov	r0,#_count_address_65536_708
      004026 E6               [12]11603 	mov	a,@r0
      004027 25 69            [12]11604 	add	a,_count_sloc1_1_0
      004029 FA               [12]11605 	mov	r2,a
      00402A 08               [12]11606 	inc	r0
      00402B E6               [12]11607 	mov	a,@r0
      00402C 35 6A            [12]11608 	addc	a,(_count_sloc1_1_0 + 1)
      00402E FB               [12]11609 	mov	r3,a
      00402F 8A 82            [24]11610 	mov	dpl,r2
      004031 8B 83            [24]11611 	mov	dph,r3
                                  11612 ;	.\ecen4350_lcd_v4.c:129: IOM = 0;
                                  11613 ;	assignBit
      004033 C2 B5            [12]11614 	clr	_P3_5
                                  11615 ;	.\ecen4350_lcd_v4.c:130: d = *map_address;
      004035 E0               [24]11616 	movx	a,@dptr
      004036 FB               [12]11617 	mov	r3,a
                                  11618 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                  11619 ;	assignBit
      004037 D2 B5            [12]11620 	setb	_P3_5
                                  11621 ;	.\ecen4350_lcd_v4.c:2742: if(value == ramRead8(d)){
      004039 78 91            [12]11622 	mov	r0,#_count_value_65536_708
      00403B E6               [12]11623 	mov	a,@r0
      00403C B5 03 02         [24]11624 	cjne	a,ar3,00554$
      00403F 80 03            [24]11625 	sjmp	00555$
      004041                      11626 00554$:
      004041 02 44 38         [24]11627 	ljmp	00212$
      004044                      11628 00555$:
                                  11629 ;	.\ecen4350_lcd_v4.c:2743: noneFound = 0;		// toggle flag
      004044 78 93            [12]11630 	mov	r0,#_count_noneFound_65536_708
      004046 76 00            [12]11631 	mov	@r0,#0x00
                                  11632 ;	.\ecen4350_lcd_v4.c:2744: setCursor(0, 120);
      004048 75 6B 78         [24]11633 	mov	_setCursor_PARM_2,#0x78
      00404B 75 6C 00         [24]11634 	mov	(_setCursor_PARM_2 + 1),#0x00
      00404E 90 00 00         [24]11635 	mov	dptr,#0x0000
      004051 C0 05            [24]11636 	push	ar5
      004053 12 05 BF         [24]11637 	lcall	_setCursor
                                  11638 ;	.\ecen4350_lcd_v4.c:2745: setColorWhite();
      004056 12 16 ED         [24]11639 	lcall	_setColorWhite
                                  11640 ;	.\ecen4350_lcd_v4.c:2746: LCD_string_write(" Found at Location \n");
      004059 90 64 22         [24]11641 	mov	dptr,#___str_109
      00405C 75 F0 80         [24]11642 	mov	b,#0x80
      00405F 12 10 D9         [24]11643 	lcall	_LCD_string_write
                                  11644 ;	.\ecen4350_lcd_v4.c:2747: setColorDefault();
      004062 12 16 9D         [24]11645 	lcall	_setColorDefault
                                  11646 ;	.\ecen4350_lcd_v4.c:2748: LCD_string_write(" 0x");
      004065 90 60 7E         [24]11647 	mov	dptr,#___str_46
      004068 75 F0 80         [24]11648 	mov	b,#0x80
      00406B 12 10 D9         [24]11649 	lcall	_LCD_string_write
      00406E D0 05            [24]11650 	pop	ar5
                                  11651 ;	.\ecen4350_lcd_v4.c:2749: print16Hex(page+address);
      004070 8D 02            [24]11652 	mov	ar2,r5
      004072 7B 00            [12]11653 	mov	r3,#0x00
      004074 78 8E            [12]11654 	mov	r0,#_count_address_65536_708
      004076 E6               [12]11655 	mov	a,@r0
      004077 2A               [12]11656 	add	a,r2
      004078 F5 82            [12]11657 	mov	dpl,a
      00407A 08               [12]11658 	inc	r0
      00407B E6               [12]11659 	mov	a,@r0
      00407C 3B               [12]11660 	addc	a,r3
      00407D F5 83            [12]11661 	mov	dph,a
      00407F C0 05            [24]11662 	push	ar5
      004081 12 15 C1         [24]11663 	lcall	_print16Hex
                                  11664 ;	.\ecen4350_lcd_v4.c:2750: setCursor(50, 300);
      004084 75 6B 2C         [24]11665 	mov	_setCursor_PARM_2,#0x2c
      004087 75 6C 01         [24]11666 	mov	(_setCursor_PARM_2 + 1),#0x01
      00408A 90 00 32         [24]11667 	mov	dptr,#0x0032
      00408D 12 05 BF         [24]11668 	lcall	_setCursor
                                  11669 ;	.\ecen4350_lcd_v4.c:2751: setColorGray();
      004090 12 16 CB         [24]11670 	lcall	_setColorGray
                                  11671 ;	.\ecen4350_lcd_v4.c:2752: LCD_string_write("Count: ");
      004093 90 65 63         [24]11672 	mov	dptr,#___str_127
      004096 75 F0 80         [24]11673 	mov	b,#0x80
      004099 12 10 D9         [24]11674 	lcall	_LCD_string_write
                                  11675 ;	.\ecen4350_lcd_v4.c:2753: setColorHighlight2();
      00409C 12 16 BF         [24]11676 	lcall	_setColorHighlight2
      00409F D0 05            [24]11677 	pop	ar5
                                  11678 ;	.\ecen4350_lcd_v4.c:2754: print8Hex(page+1);
      0040A1 8D 03            [24]11679 	mov	ar3,r5
      0040A3 EB               [12]11680 	mov	a,r3
      0040A4 04               [12]11681 	inc	a
      0040A5 F5 82            [12]11682 	mov	dpl,a
      0040A7 C0 05            [24]11683 	push	ar5
      0040A9 12 15 AA         [24]11684 	lcall	_print8Hex
      0040AC D0 05            [24]11685 	pop	ar5
                                  11686 ;	.\ecen4350_lcd_v4.c:2758: if (i == 0) {					// At beginning, page <0>
      0040AE E5 69            [12]11687 	mov	a,_count_sloc1_1_0
      0040B0 45 6A            [12]11688 	orl	a,(_count_sloc1_1_0 + 1)
      0040B2 60 03            [24]11689 	jz	00556$
      0040B4 02 41 E3         [24]11690 	ljmp	00187$
      0040B7                      11691 00556$:
                                  11692 ;	.\ecen4350_lcd_v4.c:2759: if (i != blockSize - 1) {	// not at the end yet, no previous page
      0040B7 C0 05            [24]11693 	push	ar5
      0040B9 78 90            [12]11694 	mov	r0,#_count_blockSize_65536_708
      0040BB 86 02            [24]11695 	mov	ar2,@r0
      0040BD 7B 00            [12]11696 	mov	r3,#0x00
      0040BF EA               [12]11697 	mov	a,r2
      0040C0 24 FF            [12]11698 	add	a,#0xff
      0040C2 FD               [12]11699 	mov	r5,a
      0040C3 EB               [12]11700 	mov	a,r3
      0040C4 34 FF            [12]11701 	addc	a,#0xff
      0040C6 FF               [12]11702 	mov	r7,a
      0040C7 ED               [12]11703 	mov	a,r5
      0040C8 B5 69 09         [24]11704 	cjne	a,_count_sloc1_1_0,00557$
      0040CB EF               [12]11705 	mov	a,r7
      0040CC B5 6A 05         [24]11706 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      0040CF D0 05            [24]11707 	pop	ar5
      0040D1 02 41 64         [24]11708 	ljmp	00145$
      0040D4                      11709 00557$:
                                  11710 ;	.\ecen4350_lcd_v4.c:2760: setCursor(0, 180);
      0040D4 75 6B B4         [24]11711 	mov	_setCursor_PARM_2,#0xb4
      0040D7 75 6C 00         [24]11712 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040DA 90 00 00         [24]11713 	mov	dptr,#0x0000
      0040DD 12 05 BF         [24]11714 	lcall	_setCursor
                                  11715 ;	.\ecen4350_lcd_v4.c:2761: setColorWhite();
      0040E0 12 16 ED         [24]11716 	lcall	_setColorWhite
                                  11717 ;	.\ecen4350_lcd_v4.c:2762: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      0040E3 90 64 3E         [24]11718 	mov	dptr,#___str_111
      0040E6 75 F0 80         [24]11719 	mov	b,#0x80
      0040E9 12 10 D9         [24]11720 	lcall	_LCD_string_write
      0040EC D0 05            [24]11721 	pop	ar5
                                  11722 ;	.\ecen4350_lcd_v4.c:2763: invalidInput = 1;
      0040EE 7F 01            [12]11723 	mov	r7,#0x01
                                  11724 ;	.\ecen4350_lcd_v4.c:2764: while (invalidInput) {
      0040F0 8D 68            [24]11725 	mov	_count_sloc0_1_0,r5
      0040F2                      11726 00134$:
      0040F2 EF               [12]11727 	mov	a,r7
      0040F3 70 03            [24]11728 	jnz	00558$
      0040F5 02 41 D6         [24]11729 	ljmp	00268$
      0040F8                      11730 00558$:
                                  11731 ;	.\ecen4350_lcd_v4.c:2765: selection = keyDetect();
      0040F8 C0 07            [24]11732 	push	ar7
      0040FA 12 11 F7         [24]11733 	lcall	_keyDetect
      0040FD AF 82            [24]11734 	mov	r7,dpl
      0040FF 78 71            [12]11735 	mov	r0,#_selection
      004101 A6 07            [24]11736 	mov	@r0,ar7
                                  11737 ;	.\ecen4350_lcd_v4.c:2766: if(selection == '1'){
      004103 BF 31 02         [24]11738 	cjne	r7,#0x31,00559$
      004106 80 04            [24]11739 	sjmp	00560$
      004108                      11740 00559$:
      004108 D0 07            [24]11741 	pop	ar7
      00410A 80 27            [24]11742 	sjmp	00131$
      00410C                      11743 00560$:
      00410C D0 07            [24]11744 	pop	ar7
                                  11745 ;	.\ecen4350_lcd_v4.c:2767: setCursor(0, 180);
      00410E 75 6B B4         [24]11746 	mov	_setCursor_PARM_2,#0xb4
      004111 75 6C 00         [24]11747 	mov	(_setCursor_PARM_2 + 1),#0x00
      004114 90 00 00         [24]11748 	mov	dptr,#0x0000
      004117 12 05 BF         [24]11749 	lcall	_setCursor
                                  11750 ;	.\ecen4350_lcd_v4.c:2768: LCD_string_write(" ");
      00411A 90 5F 84         [24]11751 	mov	dptr,#___str_30
      00411D 75 F0 80         [24]11752 	mov	b,#0x80
      004120 12 10 D9         [24]11753 	lcall	_LCD_string_write
                                  11754 ;	.\ecen4350_lcd_v4.c:2769: setColorHighlight2();
      004123 12 16 BF         [24]11755 	lcall	_setColorHighlight2
                                  11756 ;	.\ecen4350_lcd_v4.c:2770: LCD_string_write("<1> Next");
      004126 90 64 61         [24]11757 	mov	dptr,#___str_112
      004129 75 F0 80         [24]11758 	mov	b,#0x80
      00412C 12 10 D9         [24]11759 	lcall	_LCD_string_write
                                  11760 ;	.\ecen4350_lcd_v4.c:2771: invalidInput = 0;
      00412F 7F 00            [12]11761 	mov	r7,#0x00
                                  11762 ;	.\ecen4350_lcd_v4.c:2772: page++;
      004131 05 68            [12]11763 	inc	_count_sloc0_1_0
      004133                      11764 00131$:
                                  11765 ;	.\ecen4350_lcd_v4.c:2773: } if(selection == '0') {
      004133 78 71            [12]11766 	mov	r0,#_selection
      004135 B6 30 BA         [24]11767 	cjne	@r0,#0x30,00134$
                                  11768 ;	.\ecen4350_lcd_v4.c:2774: setColorDefault();
      004138 12 16 9D         [24]11769 	lcall	_setColorDefault
                                  11770 ;	.\ecen4350_lcd_v4.c:2775: setCursor(0, 180);
      00413B 75 6B B4         [24]11771 	mov	_setCursor_PARM_2,#0xb4
      00413E 75 6C 00         [24]11772 	mov	(_setCursor_PARM_2 + 1),#0x00
      004141 90 00 00         [24]11773 	mov	dptr,#0x0000
      004144 12 05 BF         [24]11774 	lcall	_setCursor
                                  11775 ;	.\ecen4350_lcd_v4.c:2776: LCD_string_write("\n ");
      004147 90 61 8F         [24]11776 	mov	dptr,#___str_67
      00414A 75 F0 80         [24]11777 	mov	b,#0x80
      00414D 12 10 D9         [24]11778 	lcall	_LCD_string_write
                                  11779 ;	.\ecen4350_lcd_v4.c:2777: setColorHighlight2();
      004150 12 16 BF         [24]11780 	lcall	_setColorHighlight2
                                  11781 ;	.\ecen4350_lcd_v4.c:2778: LCD_string_write("<0> Exit");
      004153 90 62 4A         [24]11782 	mov	dptr,#___str_78
      004156 75 F0 80         [24]11783 	mov	b,#0x80
      004159 12 10 D9         [24]11784 	lcall	_LCD_string_write
                                  11785 ;	.\ecen4350_lcd_v4.c:2779: exit = 0;		// set exit flag
      00415C 78 94            [12]11786 	mov	r0,#_count_exit_65536_708
      00415E 76 00            [12]11787 	mov	@r0,#0x00
                                  11788 ;	.\ecen4350_lcd_v4.c:2780: invalidInput = 0;
      004160 7F 00            [12]11789 	mov	r7,#0x00
      004162 80 8E            [24]11790 	sjmp	00134$
      004164                      11791 00145$:
                                  11792 ;	.\ecen4350_lcd_v4.c:2783: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      004164 1A               [12]11793 	dec	r2
      004165 BA FF 01         [24]11794 	cjne	r2,#0xff,00563$
      004168 1B               [12]11795 	dec	r3
      004169                      11796 00563$:
      004169 EA               [12]11797 	mov	a,r2
      00416A B5 69 6B         [24]11798 	cjne	a,_count_sloc1_1_0,00146$
      00416D EB               [12]11799 	mov	a,r3
      00416E B5 6A 67         [24]11800 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11801 ;	.\ecen4350_lcd_v4.c:2784: setCursor(0, 180);
      004171 75 6B B4         [24]11802 	mov	_setCursor_PARM_2,#0xb4
      004174 75 6C 00         [24]11803 	mov	(_setCursor_PARM_2 + 1),#0x00
      004177 90 00 00         [24]11804 	mov	dptr,#0x0000
      00417A C0 05            [24]11805 	push	ar5
      00417C 12 05 BF         [24]11806 	lcall	_setCursor
                                  11807 ;	.\ecen4350_lcd_v4.c:2785: setColorWhite();
      00417F 12 16 ED         [24]11808 	lcall	_setColorWhite
                                  11809 ;	.\ecen4350_lcd_v4.c:2786: LCD_string_write("          \n <0> Exit\n              ");
      004182 90 64 6A         [24]11810 	mov	dptr,#___str_113
      004185 75 F0 80         [24]11811 	mov	b,#0x80
      004188 12 10 D9         [24]11812 	lcall	_LCD_string_write
      00418B D0 05            [24]11813 	pop	ar5
                                  11814 ;	.\ecen4350_lcd_v4.c:2787: invalidInput = 1;
      00418D 7F 01            [12]11815 	mov	r7,#0x01
                                  11816 ;	.\ecen4350_lcd_v4.c:2788: while (invalidInput) {
      00418F                      11817 00139$:
      00418F EF               [12]11818 	mov	a,r7
      004190 60 46            [24]11819 	jz	00146$
                                  11820 ;	.\ecen4350_lcd_v4.c:2789: selection = keyDetect();
      004192 C0 07            [24]11821 	push	ar7
      004194 C0 05            [24]11822 	push	ar5
      004196 12 11 F7         [24]11823 	lcall	_keyDetect
      004199 AB 82            [24]11824 	mov	r3,dpl
      00419B D0 05            [24]11825 	pop	ar5
      00419D D0 07            [24]11826 	pop	ar7
      00419F 78 71            [12]11827 	mov	r0,#_selection
      0041A1 A6 03            [24]11828 	mov	@r0,ar3
                                  11829 ;	.\ecen4350_lcd_v4.c:2790: if(selection == '0') {
      0041A3 BB 30 E9         [24]11830 	cjne	r3,#0x30,00139$
                                  11831 ;	.\ecen4350_lcd_v4.c:2791: setColorDefault();
      0041A6 C0 05            [24]11832 	push	ar5
      0041A8 12 16 9D         [24]11833 	lcall	_setColorDefault
                                  11834 ;	.\ecen4350_lcd_v4.c:2792: setCursor(0, 180);
      0041AB 75 6B B4         [24]11835 	mov	_setCursor_PARM_2,#0xb4
      0041AE 75 6C 00         [24]11836 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041B1 90 00 00         [24]11837 	mov	dptr,#0x0000
      0041B4 12 05 BF         [24]11838 	lcall	_setCursor
                                  11839 ;	.\ecen4350_lcd_v4.c:2793: LCD_string_write("\n ");
      0041B7 90 61 8F         [24]11840 	mov	dptr,#___str_67
      0041BA 75 F0 80         [24]11841 	mov	b,#0x80
      0041BD 12 10 D9         [24]11842 	lcall	_LCD_string_write
                                  11843 ;	.\ecen4350_lcd_v4.c:2794: setColorHighlight2();
      0041C0 12 16 BF         [24]11844 	lcall	_setColorHighlight2
                                  11845 ;	.\ecen4350_lcd_v4.c:2795: LCD_string_write("<0> Exit");
      0041C3 90 62 4A         [24]11846 	mov	dptr,#___str_78
      0041C6 75 F0 80         [24]11847 	mov	b,#0x80
      0041C9 12 10 D9         [24]11848 	lcall	_LCD_string_write
      0041CC D0 05            [24]11849 	pop	ar5
                                  11850 ;	.\ecen4350_lcd_v4.c:2796: exit = 0;		// set exit flag
      0041CE 78 94            [12]11851 	mov	r0,#_count_exit_65536_708
      0041D0 76 00            [12]11852 	mov	@r0,#0x00
                                  11853 ;	.\ecen4350_lcd_v4.c:2797: invalidInput = 0;
      0041D2 7F 00            [12]11854 	mov	r7,#0x00
      0041D4 80 B9            [24]11855 	sjmp	00139$
      0041D6                      11856 00268$:
      0041D6 AD 68            [24]11857 	mov	r5,_count_sloc0_1_0
      0041D8                      11858 00146$:
                                  11859 ;	.\ecen4350_lcd_v4.c:2801: if (exit == 0) {	// check exit flag
      0041D8 78 94            [12]11860 	mov	r0,#_count_exit_65536_708
      0041DA E6               [12]11861 	mov	a,@r0
      0041DB 60 03            [24]11862 	jz	00569$
      0041DD 02 44 38         [24]11863 	ljmp	00212$
      0041E0                      11864 00569$:
                                  11865 ;	.\ecen4350_lcd_v4.c:2802: break;			// break out of for loop iteration
      0041E0 02 44 43         [24]11866 	ljmp	00194$
      0041E3                      11867 00187$:
                                  11868 ;	.\ecen4350_lcd_v4.c:2807: else if (i == blockSize - 1) {		// At Page End 
      0041E3 C0 05            [24]11869 	push	ar5
      0041E5 78 90            [12]11870 	mov	r0,#_count_blockSize_65536_708
      0041E7 86 03            [24]11871 	mov	ar3,@r0
      0041E9 7F 00            [12]11872 	mov	r7,#0x00
      0041EB EB               [12]11873 	mov	a,r3
      0041EC 24 FF            [12]11874 	add	a,#0xff
      0041EE FA               [12]11875 	mov	r2,a
      0041EF EF               [12]11876 	mov	a,r7
      0041F0 34 FF            [12]11877 	addc	a,#0xff
      0041F2 FD               [12]11878 	mov	r5,a
      0041F3 EA               [12]11879 	mov	a,r2
      0041F4 B5 69 06         [24]11880 	cjne	a,_count_sloc1_1_0,00570$
      0041F7 ED               [12]11881 	mov	a,r5
      0041F8 B5 6A 02         [24]11882 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      0041FB 80 05            [24]11883 	sjmp	00571$
      0041FD                      11884 00570$:
      0041FD D0 05            [24]11885 	pop	ar5
      0041FF 02 43 2F         [24]11886 	ljmp	00184$
      004202                      11887 00571$:
      004202 D0 05            [24]11888 	pop	ar5
                                  11889 ;	.\ecen4350_lcd_v4.c:2808: if (i != 0) {				// not at beginning, no next page
      004204 E5 69            [12]11890 	mov	a,_count_sloc1_1_0
      004206 45 6A            [12]11891 	orl	a,(_count_sloc1_1_0 + 1)
      004208 70 03            [24]11892 	jnz	00572$
      00420A 02 42 B8         [24]11893 	ljmp	00164$
      00420D                      11894 00572$:
                                  11895 ;	.\ecen4350_lcd_v4.c:2809: setCursor(0, 180);
      00420D 75 6B B4         [24]11896 	mov	_setCursor_PARM_2,#0xb4
      004210 75 6C 00         [24]11897 	mov	(_setCursor_PARM_2 + 1),#0x00
      004213 90 00 00         [24]11898 	mov	dptr,#0x0000
      004216 C0 05            [24]11899 	push	ar5
      004218 12 05 BF         [24]11900 	lcall	_setCursor
                                  11901 ;	.\ecen4350_lcd_v4.c:2810: setColorWhite();
      00421B 12 16 ED         [24]11902 	lcall	_setColorWhite
                                  11903 ;	.\ecen4350_lcd_v4.c:2811: LCD_string_write("          \n <0> Exit\n <2> Previous");
      00421E 90 64 8E         [24]11904 	mov	dptr,#___str_114
      004221 75 F0 80         [24]11905 	mov	b,#0x80
      004224 12 10 D9         [24]11906 	lcall	_LCD_string_write
      004227 D0 05            [24]11907 	pop	ar5
                                  11908 ;	.\ecen4350_lcd_v4.c:2812: invalidInput = 1;
      004229 7F 01            [12]11909 	mov	r7,#0x01
                                  11910 ;	.\ecen4350_lcd_v4.c:2813: while (invalidInput) {
      00422B 8D 68            [24]11911 	mov	_count_sloc0_1_0,r5
      00422D                      11912 00153$:
      00422D EF               [12]11913 	mov	a,r7
      00422E 70 03            [24]11914 	jnz	00573$
      004230 02 43 22         [24]11915 	ljmp	00269$
      004233                      11916 00573$:
                                  11917 ;	.\ecen4350_lcd_v4.c:2814: selection = keyDetect();
      004233 C0 07            [24]11918 	push	ar7
      004235 C0 07            [24]11919 	push	ar7
      004237 12 11 F7         [24]11920 	lcall	_keyDetect
      00423A AA 82            [24]11921 	mov	r2,dpl
      00423C D0 07            [24]11922 	pop	ar7
      00423E 78 71            [12]11923 	mov	r0,#_selection
      004240 A6 02            [24]11924 	mov	@r0,ar2
                                  11925 ;	.\ecen4350_lcd_v4.c:2815: if(selection == '0'){
      004242 BA 30 02         [24]11926 	cjne	r2,#0x30,00574$
      004245 80 04            [24]11927 	sjmp	00575$
      004247                      11928 00574$:
      004247 D0 07            [24]11929 	pop	ar7
      004249 80 29            [24]11930 	sjmp	00150$
      00424B                      11931 00575$:
      00424B D0 07            [24]11932 	pop	ar7
                                  11933 ;	.\ecen4350_lcd_v4.c:2816: setCursor(0, 180);
      00424D 75 6B B4         [24]11934 	mov	_setCursor_PARM_2,#0xb4
      004250 75 6C 00         [24]11935 	mov	(_setCursor_PARM_2 + 1),#0x00
      004253 90 00 00         [24]11936 	mov	dptr,#0x0000
      004256 12 05 BF         [24]11937 	lcall	_setCursor
                                  11938 ;	.\ecen4350_lcd_v4.c:2817: LCD_string_write("\n ");
      004259 90 61 8F         [24]11939 	mov	dptr,#___str_67
      00425C 75 F0 80         [24]11940 	mov	b,#0x80
      00425F 12 10 D9         [24]11941 	lcall	_LCD_string_write
                                  11942 ;	.\ecen4350_lcd_v4.c:2818: setColorHighlight2();
      004262 12 16 BF         [24]11943 	lcall	_setColorHighlight2
                                  11944 ;	.\ecen4350_lcd_v4.c:2819: LCD_string_write("<0> Exit\n");
      004265 90 60 C4         [24]11945 	mov	dptr,#___str_54
      004268 75 F0 80         [24]11946 	mov	b,#0x80
      00426B 12 10 D9         [24]11947 	lcall	_LCD_string_write
                                  11948 ;	.\ecen4350_lcd_v4.c:2820: invalidInput = 0;
      00426E 7F 00            [12]11949 	mov	r7,#0x00
                                  11950 ;	.\ecen4350_lcd_v4.c:2821: exit = 0;
      004270 78 94            [12]11951 	mov	r0,#_count_exit_65536_708
      004272 76 00            [12]11952 	mov	@r0,#0x00
      004274                      11953 00150$:
                                  11954 ;	.\ecen4350_lcd_v4.c:2822: } if (selection == '2') {
      004274 78 71            [12]11955 	mov	r0,#_selection
      004276 B6 32 B4         [24]11956 	cjne	@r0,#0x32,00153$
                                  11957 ;	.\ecen4350_lcd_v4.c:2823: setCursor(0, 180);
      004279 75 6B B4         [24]11958 	mov	_setCursor_PARM_2,#0xb4
      00427C 75 6C 00         [24]11959 	mov	(_setCursor_PARM_2 + 1),#0x00
      00427F 90 00 00         [24]11960 	mov	dptr,#0x0000
      004282 12 05 BF         [24]11961 	lcall	_setCursor
                                  11962 ;	.\ecen4350_lcd_v4.c:2824: setColorWhite();
      004285 12 16 ED         [24]11963 	lcall	_setColorWhite
                                  11964 ;	.\ecen4350_lcd_v4.c:2825: LCD_string_write("\n\n ");
      004288 90 64 B1         [24]11965 	mov	dptr,#___str_115
      00428B 75 F0 80         [24]11966 	mov	b,#0x80
      00428E 12 10 D9         [24]11967 	lcall	_LCD_string_write
                                  11968 ;	.\ecen4350_lcd_v4.c:2826: setColorHighlight2();
      004291 12 16 BF         [24]11969 	lcall	_setColorHighlight2
                                  11970 ;	.\ecen4350_lcd_v4.c:2827: LCD_string_write("<2> Previous");
      004294 90 64 B5         [24]11971 	mov	dptr,#___str_116
      004297 75 F0 80         [24]11972 	mov	b,#0x80
      00429A 12 10 D9         [24]11973 	lcall	_LCD_string_write
                                  11974 ;	.\ecen4350_lcd_v4.c:2828: invalidInput = 0;
      00429D 7F 00            [12]11975 	mov	r7,#0x00
                                  11976 ;	.\ecen4350_lcd_v4.c:2829: i--;			// two decrements plus next loop increment is equal to one decrement
      00429F E5 69            [12]11977 	mov	a,_count_sloc1_1_0
      0042A1 24 FF            [12]11978 	add	a,#0xff
      0042A3 FA               [12]11979 	mov	r2,a
      0042A4 E5 6A            [12]11980 	mov	a,(_count_sloc1_1_0 + 1)
      0042A6 34 FF            [12]11981 	addc	a,#0xff
      0042A8 FE               [12]11982 	mov	r6,a
                                  11983 ;	.\ecen4350_lcd_v4.c:2830: i--;
      0042A9 EA               [12]11984 	mov	a,r2
      0042AA 24 FF            [12]11985 	add	a,#0xff
      0042AC F5 69            [12]11986 	mov	_count_sloc1_1_0,a
      0042AE EE               [12]11987 	mov	a,r6
      0042AF 34 FF            [12]11988 	addc	a,#0xff
      0042B1 F5 6A            [12]11989 	mov	(_count_sloc1_1_0 + 1),a
                                  11990 ;	.\ecen4350_lcd_v4.c:2831: page--;			// decrement to previous page
      0042B3 15 68            [12]11991 	dec	_count_sloc0_1_0
      0042B5 02 42 2D         [24]11992 	ljmp	00153$
      0042B8                      11993 00164$:
                                  11994 ;	.\ecen4350_lcd_v4.c:2835: else if (i == 0){				// end at beginning, no next or previous
      0042B8 E5 69            [12]11995 	mov	a,_count_sloc1_1_0
      0042BA 45 6A            [12]11996 	orl	a,(_count_sloc1_1_0 + 1)
                                  11997 ;	.\ecen4350_lcd_v4.c:2836: setCursor(0, 180);
      0042BC 70 66            [24]11998 	jnz	00165$
      0042BE 75 6B B4         [24]11999 	mov	_setCursor_PARM_2,#0xb4
      0042C1 F5 6C            [12]12000 	mov	(_setCursor_PARM_2 + 1),a
      0042C3 90 00 00         [24]12001 	mov	dptr,#0x0000
      0042C6 C0 05            [24]12002 	push	ar5
      0042C8 12 05 BF         [24]12003 	lcall	_setCursor
                                  12004 ;	.\ecen4350_lcd_v4.c:2837: setColorWhite();
      0042CB 12 16 ED         [24]12005 	lcall	_setColorWhite
                                  12006 ;	.\ecen4350_lcd_v4.c:2838: LCD_string_write("          \n <0> Exit\n              ");
      0042CE 90 64 6A         [24]12007 	mov	dptr,#___str_113
      0042D1 75 F0 80         [24]12008 	mov	b,#0x80
      0042D4 12 10 D9         [24]12009 	lcall	_LCD_string_write
      0042D7 D0 05            [24]12010 	pop	ar5
                                  12011 ;	.\ecen4350_lcd_v4.c:2839: invalidInput = 1;
      0042D9 7E 01            [12]12012 	mov	r6,#0x01
                                  12013 ;	.\ecen4350_lcd_v4.c:2840: while (invalidInput) {
      0042DB                      12014 00158$:
      0042DB EE               [12]12015 	mov	a,r6
      0042DC 60 46            [24]12016 	jz	00165$
                                  12017 ;	.\ecen4350_lcd_v4.c:2841: selection = keyDetect();
      0042DE C0 06            [24]12018 	push	ar6
      0042E0 C0 05            [24]12019 	push	ar5
      0042E2 12 11 F7         [24]12020 	lcall	_keyDetect
      0042E5 AC 82            [24]12021 	mov	r4,dpl
      0042E7 D0 05            [24]12022 	pop	ar5
      0042E9 D0 06            [24]12023 	pop	ar6
      0042EB 78 71            [12]12024 	mov	r0,#_selection
      0042ED A6 04            [24]12025 	mov	@r0,ar4
                                  12026 ;	.\ecen4350_lcd_v4.c:2842: if(selection == '0') {
      0042EF BC 30 E9         [24]12027 	cjne	r4,#0x30,00158$
                                  12028 ;	.\ecen4350_lcd_v4.c:2843: setColorDefault();
      0042F2 C0 05            [24]12029 	push	ar5
      0042F4 12 16 9D         [24]12030 	lcall	_setColorDefault
                                  12031 ;	.\ecen4350_lcd_v4.c:2844: setCursor(0, 180);
      0042F7 75 6B B4         [24]12032 	mov	_setCursor_PARM_2,#0xb4
      0042FA 75 6C 00         [24]12033 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042FD 90 00 00         [24]12034 	mov	dptr,#0x0000
      004300 12 05 BF         [24]12035 	lcall	_setCursor
                                  12036 ;	.\ecen4350_lcd_v4.c:2845: LCD_string_write("\n ");
      004303 90 61 8F         [24]12037 	mov	dptr,#___str_67
      004306 75 F0 80         [24]12038 	mov	b,#0x80
      004309 12 10 D9         [24]12039 	lcall	_LCD_string_write
                                  12040 ;	.\ecen4350_lcd_v4.c:2846: setColorHighlight2();
      00430C 12 16 BF         [24]12041 	lcall	_setColorHighlight2
                                  12042 ;	.\ecen4350_lcd_v4.c:2847: LCD_string_write("<0> Exit");
      00430F 90 62 4A         [24]12043 	mov	dptr,#___str_78
      004312 75 F0 80         [24]12044 	mov	b,#0x80
      004315 12 10 D9         [24]12045 	lcall	_LCD_string_write
      004318 D0 05            [24]12046 	pop	ar5
                                  12047 ;	.\ecen4350_lcd_v4.c:2848: exit = 0;		// set exit flag
      00431A 78 94            [12]12048 	mov	r0,#_count_exit_65536_708
      00431C 76 00            [12]12049 	mov	@r0,#0x00
                                  12050 ;	.\ecen4350_lcd_v4.c:2849: invalidInput = 0;
      00431E 7E 00            [12]12051 	mov	r6,#0x00
      004320 80 B9            [24]12052 	sjmp	00158$
      004322                      12053 00269$:
      004322 AD 68            [24]12054 	mov	r5,_count_sloc0_1_0
      004324                      12055 00165$:
                                  12056 ;	.\ecen4350_lcd_v4.c:2853: if (exit == 0) {	// check exit flag
      004324 78 94            [12]12057 	mov	r0,#_count_exit_65536_708
      004326 E6               [12]12058 	mov	a,@r0
      004327 60 03            [24]12059 	jz	00582$
      004329 02 44 38         [24]12060 	ljmp	00212$
      00432C                      12061 00582$:
                                  12062 ;	.\ecen4350_lcd_v4.c:2854: break;			// break out of for loop iteration
      00432C 02 44 43         [24]12063 	ljmp	00194$
      00432F                      12064 00184$:
                                  12065 ;	.\ecen4350_lcd_v4.c:2859: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      00432F 1B               [12]12066 	dec	r3
      004330 BB FF 01         [24]12067 	cjne	r3,#0xff,00583$
      004333 1F               [12]12068 	dec	r7
      004334                      12069 00583$:
      004334 EB               [12]12070 	mov	a,r3
      004335 B5 69 07         [24]12071 	cjne	a,_count_sloc1_1_0,00584$
      004338 EF               [12]12072 	mov	a,r7
      004339 B5 6A 03         [24]12073 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      00433C 02 44 38         [24]12074 	ljmp	00212$
      00433F                      12075 00584$:
                                  12076 ;	.\ecen4350_lcd_v4.c:2860: if (i != 0) {
      00433F E5 69            [12]12077 	mov	a,_count_sloc1_1_0
      004341 45 6A            [12]12078 	orl	a,(_count_sloc1_1_0 + 1)
      004343 70 03            [24]12079 	jnz	00585$
      004345 02 44 33         [24]12080 	ljmp	00178$
      004348                      12081 00585$:
                                  12082 ;	.\ecen4350_lcd_v4.c:2861: setCursor(0, 180);
      004348 75 6B B4         [24]12083 	mov	_setCursor_PARM_2,#0xb4
      00434B 75 6C 00         [24]12084 	mov	(_setCursor_PARM_2 + 1),#0x00
      00434E 90 00 00         [24]12085 	mov	dptr,#0x0000
      004351 C0 05            [24]12086 	push	ar5
      004353 12 05 BF         [24]12087 	lcall	_setCursor
                                  12088 ;	.\ecen4350_lcd_v4.c:2862: setColorWhite();
      004356 12 16 ED         [24]12089 	lcall	_setColorWhite
                                  12090 ;	.\ecen4350_lcd_v4.c:2863: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      004359 90 64 C2         [24]12091 	mov	dptr,#___str_117
      00435C 75 F0 80         [24]12092 	mov	b,#0x80
      00435F 12 10 D9         [24]12093 	lcall	_LCD_string_write
      004362 D0 05            [24]12094 	pop	ar5
                                  12095 ;	.\ecen4350_lcd_v4.c:2864: invalidInput = 1;
      004364 7F 01            [12]12096 	mov	r7,#0x01
                                  12097 ;	.\ecen4350_lcd_v4.c:2865: while (invalidInput) {
      004366                      12098 00174$:
      004366 EF               [12]12099 	mov	a,r7
      004367 70 03            [24]12100 	jnz	00586$
      004369 02 44 33         [24]12101 	ljmp	00178$
      00436C                      12102 00586$:
                                  12103 ;	.\ecen4350_lcd_v4.c:2866: selection = keyDetect();
      00436C C0 07            [24]12104 	push	ar7
      00436E C0 05            [24]12105 	push	ar5
      004370 12 11 F7         [24]12106 	lcall	_keyDetect
      004373 AE 82            [24]12107 	mov	r6,dpl
      004375 D0 05            [24]12108 	pop	ar5
      004377 D0 07            [24]12109 	pop	ar7
      004379 78 71            [12]12110 	mov	r0,#_selection
      00437B A6 06            [24]12111 	mov	@r0,ar6
                                  12112 ;	.\ecen4350_lcd_v4.c:2867: if (selection == '1') {
      00437D BE 31 28         [24]12113 	cjne	r6,#0x31,00169$
                                  12114 ;	.\ecen4350_lcd_v4.c:2868: setCursor(0, 180);
      004380 75 6B B4         [24]12115 	mov	_setCursor_PARM_2,#0xb4
      004383 75 6C 00         [24]12116 	mov	(_setCursor_PARM_2 + 1),#0x00
      004386 90 00 00         [24]12117 	mov	dptr,#0x0000
      004389 C0 05            [24]12118 	push	ar5
      00438B 12 05 BF         [24]12119 	lcall	_setCursor
                                  12120 ;	.\ecen4350_lcd_v4.c:2869: LCD_string_write(" ");
      00438E 90 5F 84         [24]12121 	mov	dptr,#___str_30
      004391 75 F0 80         [24]12122 	mov	b,#0x80
      004394 12 10 D9         [24]12123 	lcall	_LCD_string_write
                                  12124 ;	.\ecen4350_lcd_v4.c:2870: setColorHighlight2();
      004397 12 16 BF         [24]12125 	lcall	_setColorHighlight2
                                  12126 ;	.\ecen4350_lcd_v4.c:2871: LCD_string_write("<1> Next");
      00439A 90 64 61         [24]12127 	mov	dptr,#___str_112
      00439D 75 F0 80         [24]12128 	mov	b,#0x80
      0043A0 12 10 D9         [24]12129 	lcall	_LCD_string_write
      0043A3 D0 05            [24]12130 	pop	ar5
                                  12131 ;	.\ecen4350_lcd_v4.c:2872: invalidInput = 0;
      0043A5 7F 00            [12]12132 	mov	r7,#0x00
                                  12133 ;	.\ecen4350_lcd_v4.c:2873: page++;
      0043A7 0D               [12]12134 	inc	r5
      0043A8                      12135 00169$:
                                  12136 ;	.\ecen4350_lcd_v4.c:2874: } if (selection == '2') {
      0043A8 78 71            [12]12137 	mov	r0,#_selection
      0043AA B6 32 3F         [24]12138 	cjne	@r0,#0x32,00171$
                                  12139 ;	.\ecen4350_lcd_v4.c:2875: setCursor(0, 180);
      0043AD 75 6B B4         [24]12140 	mov	_setCursor_PARM_2,#0xb4
      0043B0 75 6C 00         [24]12141 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043B3 90 00 00         [24]12142 	mov	dptr,#0x0000
      0043B6 C0 05            [24]12143 	push	ar5
      0043B8 12 05 BF         [24]12144 	lcall	_setCursor
                                  12145 ;	.\ecen4350_lcd_v4.c:2876: setColorWhite();
      0043BB 12 16 ED         [24]12146 	lcall	_setColorWhite
                                  12147 ;	.\ecen4350_lcd_v4.c:2877: LCD_string_write("\n\n ");
      0043BE 90 64 B1         [24]12148 	mov	dptr,#___str_115
      0043C1 75 F0 80         [24]12149 	mov	b,#0x80
      0043C4 12 10 D9         [24]12150 	lcall	_LCD_string_write
                                  12151 ;	.\ecen4350_lcd_v4.c:2878: setColorHighlight2();
      0043C7 12 16 BF         [24]12152 	lcall	_setColorHighlight2
                                  12153 ;	.\ecen4350_lcd_v4.c:2879: LCD_string_write("<2> Previous");
      0043CA 90 64 B5         [24]12154 	mov	dptr,#___str_116
      0043CD 75 F0 80         [24]12155 	mov	b,#0x80
      0043D0 12 10 D9         [24]12156 	lcall	_LCD_string_write
      0043D3 D0 05            [24]12157 	pop	ar5
                                  12158 ;	.\ecen4350_lcd_v4.c:2880: invalidInput = 0;
      0043D5 7F 00            [12]12159 	mov	r7,#0x00
                                  12160 ;	.\ecen4350_lcd_v4.c:2881: i--;
      0043D7 E5 69            [12]12161 	mov	a,_count_sloc1_1_0
      0043D9 24 FF            [12]12162 	add	a,#0xff
      0043DB FC               [12]12163 	mov	r4,a
      0043DC E5 6A            [12]12164 	mov	a,(_count_sloc1_1_0 + 1)
      0043DE 34 FF            [12]12165 	addc	a,#0xff
      0043E0 FE               [12]12166 	mov	r6,a
                                  12167 ;	.\ecen4350_lcd_v4.c:2882: i--;		// two decrements plus next loop increment is equal to one decrement
      0043E1 EC               [12]12168 	mov	a,r4
      0043E2 24 FF            [12]12169 	add	a,#0xff
      0043E4 F5 69            [12]12170 	mov	_count_sloc1_1_0,a
      0043E6 EE               [12]12171 	mov	a,r6
      0043E7 34 FF            [12]12172 	addc	a,#0xff
      0043E9 F5 6A            [12]12173 	mov	(_count_sloc1_1_0 + 1),a
                                  12174 ;	.\ecen4350_lcd_v4.c:2883: page--;		// decrement to previous page
      0043EB 1D               [12]12175 	dec	r5
      0043EC                      12176 00171$:
                                  12177 ;	.\ecen4350_lcd_v4.c:2884: } if (selection == '0') {
      0043EC 78 71            [12]12178 	mov	r0,#_selection
      0043EE B6 30 02         [24]12179 	cjne	@r0,#0x30,00591$
      0043F1 80 03            [24]12180 	sjmp	00592$
      0043F3                      12181 00591$:
      0043F3 02 43 66         [24]12182 	ljmp	00174$
      0043F6                      12183 00592$:
                                  12184 ;	.\ecen4350_lcd_v4.c:2885: setColorWhite();
      0043F6 C0 05            [24]12185 	push	ar5
      0043F8 12 16 ED         [24]12186 	lcall	_setColorWhite
                                  12187 ;	.\ecen4350_lcd_v4.c:2886: setCursor(0, 180);
      0043FB 75 6B B4         [24]12188 	mov	_setCursor_PARM_2,#0xb4
      0043FE 75 6C 00         [24]12189 	mov	(_setCursor_PARM_2 + 1),#0x00
      004401 90 00 00         [24]12190 	mov	dptr,#0x0000
      004404 12 05 BF         [24]12191 	lcall	_setCursor
                                  12192 ;	.\ecen4350_lcd_v4.c:2887: LCD_string_write(" <1> Next\n ");
      004407 90 64 E4         [24]12193 	mov	dptr,#___str_118
      00440A 75 F0 80         [24]12194 	mov	b,#0x80
      00440D 12 10 D9         [24]12195 	lcall	_LCD_string_write
                                  12196 ;	.\ecen4350_lcd_v4.c:2888: setColorHighlight2();
      004410 12 16 BF         [24]12197 	lcall	_setColorHighlight2
                                  12198 ;	.\ecen4350_lcd_v4.c:2889: LCD_string_write("<0> Exit");
      004413 90 62 4A         [24]12199 	mov	dptr,#___str_78
      004416 75 F0 80         [24]12200 	mov	b,#0x80
      004419 12 10 D9         [24]12201 	lcall	_LCD_string_write
                                  12202 ;	.\ecen4350_lcd_v4.c:2890: setColorWhite();
      00441C 12 16 ED         [24]12203 	lcall	_setColorWhite
                                  12204 ;	.\ecen4350_lcd_v4.c:2891: LCD_string_write("\n <2> Previous");
      00441F 90 64 F0         [24]12205 	mov	dptr,#___str_119
      004422 75 F0 80         [24]12206 	mov	b,#0x80
      004425 12 10 D9         [24]12207 	lcall	_LCD_string_write
      004428 D0 05            [24]12208 	pop	ar5
                                  12209 ;	.\ecen4350_lcd_v4.c:2892: exit = 0;		// set exit flag
      00442A 78 94            [12]12210 	mov	r0,#_count_exit_65536_708
      00442C 76 00            [12]12211 	mov	@r0,#0x00
                                  12212 ;	.\ecen4350_lcd_v4.c:2893: invalidInput = 0;
      00442E 7F 00            [12]12213 	mov	r7,#0x00
      004430 02 43 66         [24]12214 	ljmp	00174$
      004433                      12215 00178$:
                                  12216 ;	.\ecen4350_lcd_v4.c:2897: if (exit == 0) {		// check exit flag
      004433 78 94            [12]12217 	mov	r0,#_count_exit_65536_708
      004435 E6               [12]12218 	mov	a,@r0
      004436 60 0B            [24]12219 	jz	00194$
                                  12220 ;	.\ecen4350_lcd_v4.c:2898: break;			// break out the loop
      004438                      12221 00212$:
                                  12222 ;	.\ecen4350_lcd_v4.c:2740: for (unsigned int i = 0; i < blockSize; i++) {
      004438 05 69            [12]12223 	inc	_count_sloc1_1_0
      00443A E4               [12]12224 	clr	a
      00443B B5 69 02         [24]12225 	cjne	a,_count_sloc1_1_0,00594$
      00443E 05 6A            [12]12226 	inc	(_count_sloc1_1_0 + 1)
      004440                      12227 00594$:
      004440 02 40 12         [24]12228 	ljmp	00211$
      004443                      12229 00194$:
                                  12230 ;	.\ecen4350_lcd_v4.c:2904: if(noneFound) {
      004443 78 93            [12]12231 	mov	r0,#_count_noneFound_65536_708
      004445 E6               [12]12232 	mov	a,@r0
      004446 70 03            [24]12233 	jnz	00595$
      004448 02 3F 1D         [24]12234 	ljmp	00202$
      00444B                      12235 00595$:
                                  12236 ;	.\ecen4350_lcd_v4.c:2905: setColorRed();
      00444B C0 05            [24]12237 	push	ar5
      00444D 12 16 E2         [24]12238 	lcall	_setColorRed
                                  12239 ;	.\ecen4350_lcd_v4.c:2906: setCursor(0, 160);
      004450 75 6B A0         [24]12240 	mov	_setCursor_PARM_2,#0xa0
      004453 75 6C 00         [24]12241 	mov	(_setCursor_PARM_2 + 1),#0x00
      004456 90 00 00         [24]12242 	mov	dptr,#0x0000
      004459 12 05 BF         [24]12243 	lcall	_setCursor
                                  12244 ;	.\ecen4350_lcd_v4.c:2907: LCD_string_write(" Value Not Found\n Within Block\n ");
      00445C 90 64 FF         [24]12245 	mov	dptr,#___str_120
      00445F 75 F0 80         [24]12246 	mov	b,#0x80
      004462 12 10 D9         [24]12247 	lcall	_LCD_string_write
                                  12248 ;	.\ecen4350_lcd_v4.c:2908: setColorWhite();
      004465 12 16 ED         [24]12249 	lcall	_setColorWhite
                                  12250 ;	.\ecen4350_lcd_v4.c:2909: LCD_string_write("\n <0> Exit");
      004468 90 65 20         [24]12251 	mov	dptr,#___str_121
      00446B 75 F0 80         [24]12252 	mov	b,#0x80
      00446E 12 10 D9         [24]12253 	lcall	_LCD_string_write
      004471 D0 05            [24]12254 	pop	ar5
                                  12255 ;	.\ecen4350_lcd_v4.c:2910: invalidInput = 1;
      004473 7F 01            [12]12256 	mov	r7,#0x01
                                  12257 ;	.\ecen4350_lcd_v4.c:2912: while (invalidInput) {
      004475                      12258 00197$:
      004475 EF               [12]12259 	mov	a,r7
      004476 70 03            [24]12260 	jnz	00596$
      004478 02 3F 1D         [24]12261 	ljmp	00202$
      00447B                      12262 00596$:
                                  12263 ;	.\ecen4350_lcd_v4.c:2913: selection = keyDetect();
      00447B C0 07            [24]12264 	push	ar7
      00447D C0 05            [24]12265 	push	ar5
      00447F 12 11 F7         [24]12266 	lcall	_keyDetect
      004482 AE 82            [24]12267 	mov	r6,dpl
      004484 D0 05            [24]12268 	pop	ar5
      004486 D0 07            [24]12269 	pop	ar7
      004488 78 71            [12]12270 	mov	r0,#_selection
      00448A A6 06            [24]12271 	mov	@r0,ar6
                                  12272 ;	.\ecen4350_lcd_v4.c:2914: if (selection == '0'){
      00448C BE 30 E6         [24]12273 	cjne	r6,#0x30,00197$
                                  12274 ;	.\ecen4350_lcd_v4.c:2915: setCursor(0, 160);
      00448F 75 6B A0         [24]12275 	mov	_setCursor_PARM_2,#0xa0
      004492 75 6C 00         [24]12276 	mov	(_setCursor_PARM_2 + 1),#0x00
      004495 90 00 00         [24]12277 	mov	dptr,#0x0000
      004498 C0 05            [24]12278 	push	ar5
      00449A 12 05 BF         [24]12279 	lcall	_setCursor
                                  12280 ;	.\ecen4350_lcd_v4.c:2916: LCD_string_write("\n\n\n ");
      00449D 90 65 2B         [24]12281 	mov	dptr,#___str_122
      0044A0 75 F0 80         [24]12282 	mov	b,#0x80
      0044A3 12 10 D9         [24]12283 	lcall	_LCD_string_write
                                  12284 ;	.\ecen4350_lcd_v4.c:2917: setColorHighlight2();
      0044A6 12 16 BF         [24]12285 	lcall	_setColorHighlight2
                                  12286 ;	.\ecen4350_lcd_v4.c:2918: LCD_string_write("<0> Exit");
      0044A9 90 62 4A         [24]12287 	mov	dptr,#___str_78
      0044AC 75 F0 80         [24]12288 	mov	b,#0x80
      0044AF 12 10 D9         [24]12289 	lcall	_LCD_string_write
      0044B2 D0 05            [24]12290 	pop	ar5
                                  12291 ;	.\ecen4350_lcd_v4.c:2919: invalidInput = 0;
      0044B4 7F 00            [12]12292 	mov	r7,#0x00
                                  12293 ;	.\ecen4350_lcd_v4.c:2920: exit = 0;
      0044B6 78 94            [12]12294 	mov	r0,#_count_exit_65536_708
      0044B8 76 00            [12]12295 	mov	@r0,#0x00
      0044BA 80 B9            [24]12296 	sjmp	00197$
      0044BC                      12297 00204$:
                                  12298 ;	.\ecen4350_lcd_v4.c:2925: delay(80);
      0044BC 90 00 50         [24]12299 	mov	dptr,#0x0050
                                  12300 ;	.\ecen4350_lcd_v4.c:2926: return;
                                  12301 ;	.\ecen4350_lcd_v4.c:2927: }
      0044BF 02 01 A9         [24]12302 	ljmp	_delay
                                  12303 ;------------------------------------------------------------
                                  12304 ;Allocation info for local variables in function 'check'
                                  12305 ;------------------------------------------------------------
                                  12306 ;temp                      Allocated to registers r7 
                                  12307 ;------------------------------------------------------------
                                  12308 ;	.\ecen4350_lcd_v4.c:2929: void check() {
                                  12309 ;	-----------------------------------------
                                  12310 ;	 function check
                                  12311 ;	-----------------------------------------
      0044C2                      12312 _check:
                                  12313 ;	.\ecen4350_lcd_v4.c:2931: clearLCD();
      0044C2 12 0E 5C         [24]12314 	lcall	_clearLCD
                                  12315 ;	.\ecen4350_lcd_v4.c:2934: fillTop(GRAY);
      0044C5 90 D6 BA         [24]12316 	mov	dptr,#0xd6ba
      0044C8 12 0C 8F         [24]12317 	lcall	_fillTop
                                  12318 ;	.\ecen4350_lcd_v4.c:2935: setTextSize(5);
      0044CB 75 82 05         [24]12319 	mov	dpl,#0x05
      0044CE 12 05 D9         [24]12320 	lcall	_setTextSize
                                  12321 ;	.\ecen4350_lcd_v4.c:2936: setColorMenu();
      0044D1 12 16 D6         [24]12322 	lcall	_setColorMenu
                                  12323 ;	.\ecen4350_lcd_v4.c:2937: setCursor(15, 0);
      0044D4 E4               [12]12324 	clr	a
      0044D5 F5 6B            [12]12325 	mov	_setCursor_PARM_2,a
      0044D7 F5 6C            [12]12326 	mov	(_setCursor_PARM_2 + 1),a
      0044D9 90 00 0F         [24]12327 	mov	dptr,#0x000f
      0044DC 12 05 BF         [24]12328 	lcall	_setCursor
                                  12329 ;	.\ecen4350_lcd_v4.c:2938: LCD_string_write("[CHECK]\n");
      0044DF 90 65 6B         [24]12330 	mov	dptr,#___str_128
      0044E2 75 F0 80         [24]12331 	mov	b,#0x80
      0044E5 12 10 D9         [24]12332 	lcall	_LCD_string_write
                                  12333 ;	.\ecen4350_lcd_v4.c:2939: setColorDefault();
      0044E8 12 16 9D         [24]12334 	lcall	_setColorDefault
                                  12335 ;	.\ecen4350_lcd_v4.c:2940: setTextSize(2);
      0044EB 75 82 02         [24]12336 	mov	dpl,#0x02
      0044EE 12 05 D9         [24]12337 	lcall	_setTextSize
                                  12338 ;	.\ecen4350_lcd_v4.c:2941: setCursor(0, 60);
      0044F1 75 6B 3C         [24]12339 	mov	_setCursor_PARM_2,#0x3c
      0044F4 75 6C 00         [24]12340 	mov	(_setCursor_PARM_2 + 1),#0x00
      0044F7 90 00 00         [24]12341 	mov	dptr,#0x0000
      0044FA 12 05 BF         [24]12342 	lcall	_setCursor
                                  12343 ;	.\ecen4350_lcd_v4.c:2942: LCD_string_write(" Enter Value:\n");
      0044FD 90 65 74         [24]12344 	mov	dptr,#___str_129
      004500 75 F0 80         [24]12345 	mov	b,#0x80
      004503 12 10 D9         [24]12346 	lcall	_LCD_string_write
                                  12347 ;	.\ecen4350_lcd_v4.c:2943: setColorGray();
      004506 12 16 CB         [24]12348 	lcall	_setColorGray
                                  12349 ;	.\ecen4350_lcd_v4.c:2944: LCD_string_write(" __");
      004509 90 61 31         [24]12350 	mov	dptr,#___str_62
      00450C 75 F0 80         [24]12351 	mov	b,#0x80
      00450F 12 10 D9         [24]12352 	lcall	_LCD_string_write
                                  12353 ;	.\ecen4350_lcd_v4.c:2946: setCursor(0,60);
      004512 75 6B 3C         [24]12354 	mov	_setCursor_PARM_2,#0x3c
      004515 75 6C 00         [24]12355 	mov	(_setCursor_PARM_2 + 1),#0x00
      004518 90 00 00         [24]12356 	mov	dptr,#0x0000
      00451B 12 05 BF         [24]12357 	lcall	_setCursor
                                  12358 ;	.\ecen4350_lcd_v4.c:2947: LCD_string_write("\n ");
      00451E 90 61 8F         [24]12359 	mov	dptr,#___str_67
      004521 75 F0 80         [24]12360 	mov	b,#0x80
      004524 12 10 D9         [24]12361 	lcall	_LCD_string_write
                                  12362 ;	.\ecen4350_lcd_v4.c:2948: setColorHighlight1();
      004527 12 16 B3         [24]12363 	lcall	_setColorHighlight1
                                  12364 ;	.\ecen4350_lcd_v4.c:2949: selection = 0;
      00452A 78 71            [12]12365 	mov	r0,#_selection
      00452C 76 00            [12]12366 	mov	@r0,#0x00
                                  12367 ;	.\ecen4350_lcd_v4.c:2950: temp = keyDetect();
      00452E 12 11 F7         [24]12368 	lcall	_keyDetect
                                  12369 ;	.\ecen4350_lcd_v4.c:2951: write(temp);
      004531 AF 82            [24]12370 	mov  r7,dpl
      004533 C0 07            [24]12371 	push	ar7
      004535 12 10 73         [24]12372 	lcall	_write
      004538 D0 07            [24]12373 	pop	ar7
                                  12374 ;	.\ecen4350_lcd_v4.c:2952: temp = ASCIItoHex(temp);
      00453A 8F 82            [24]12375 	mov	dpl,r7
      00453C 12 14 65         [24]12376 	lcall	_ASCIItoHex
                                  12377 ;	.\ecen4350_lcd_v4.c:2953: selection |= temp * 16;
      00453F E5 82            [12]12378 	mov	a,dpl
      004541 C4               [12]12379 	swap	a
      004542 54 F0            [12]12380 	anl	a,#0xf0
      004544 FF               [12]12381 	mov	r7,a
      004545 78 71            [12]12382 	mov	r0,#_selection
      004547 E6               [12]12383 	mov	a,@r0
      004548 4F               [12]12384 	orl	a,r7
      004549 78 71            [12]12385 	mov	r0,#_selection
      00454B F6               [12]12386 	mov	@r0,a
                                  12387 ;	.\ecen4350_lcd_v4.c:2954: temp = keyDetect();
      00454C 12 11 F7         [24]12388 	lcall	_keyDetect
                                  12389 ;	.\ecen4350_lcd_v4.c:2955: write(temp);
      00454F AF 82            [24]12390 	mov  r7,dpl
      004551 C0 07            [24]12391 	push	ar7
      004553 12 10 73         [24]12392 	lcall	_write
      004556 D0 07            [24]12393 	pop	ar7
                                  12394 ;	.\ecen4350_lcd_v4.c:2956: temp = ASCIItoHex(temp);
      004558 8F 82            [24]12395 	mov	dpl,r7
      00455A 12 14 65         [24]12396 	lcall	_ASCIItoHex
      00455D AF 82            [24]12397 	mov	r7,dpl
                                  12398 ;	.\ecen4350_lcd_v4.c:2957: selection |= temp;
      00455F 78 71            [12]12399 	mov	r0,#_selection
      004561 EF               [12]12400 	mov	a,r7
      004562 46               [12]12401 	orl	a,@r0
      004563 F6               [12]12402 	mov	@r0,a
                                  12403 ;	.\ecen4350_lcd_v4.c:2958: setColorDefault();
      004564 12 16 9D         [24]12404 	lcall	_setColorDefault
                                  12405 ;	.\ecen4350_lcd_v4.c:2959: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      004567 90 65 83         [24]12406 	mov	dptr,#___str_130
      00456A 75 F0 80         [24]12407 	mov	b,#0x80
      00456D 12 10 D9         [24]12408 	lcall	_LCD_string_write
                                  12409 ;	.\ecen4350_lcd_v4.c:2960: writeAllRAM(selection);
      004570 78 71            [12]12410 	mov	r0,#_selection
      004572 86 82            [24]12411 	mov	dpl,@r0
      004574 12 00 EB         [24]12412 	lcall	_writeAllRAM
                                  12413 ;	.\ecen4350_lcd_v4.c:2961: setColorWhite();
      004577 12 16 ED         [24]12414 	lcall	_setColorWhite
                                  12415 ;	.\ecen4350_lcd_v4.c:2962: LCD_string_write("\n Verifying write...");
      00457A 90 65 B0         [24]12416 	mov	dptr,#___str_131
      00457D 75 F0 80         [24]12417 	mov	b,#0x80
      004580 12 10 D9         [24]12418 	lcall	_LCD_string_write
                                  12419 ;	.\ecen4350_lcd_v4.c:2963: checkAllRAM(selection);
      004583 78 71            [12]12420 	mov	r0,#_selection
      004585 86 82            [24]12421 	mov	dpl,@r0
      004587 12 01 1A         [24]12422 	lcall	_checkAllRAM
                                  12423 ;	.\ecen4350_lcd_v4.c:2964: LCD_string_write("\n Complete.");
      00458A 90 65 C5         [24]12424 	mov	dptr,#___str_132
      00458D 75 F0 80         [24]12425 	mov	b,#0x80
      004590 12 10 D9         [24]12426 	lcall	_LCD_string_write
                                  12427 ;	.\ecen4350_lcd_v4.c:2965: setTextColor(BLUE, colorBackground);
      004593 E4               [12]12428 	clr	a
      004594 F5 6B            [12]12429 	mov	_setTextColor_PARM_2,a
      004596 F5 6C            [12]12430 	mov	(_setTextColor_PARM_2 + 1),a
      004598 90 00 1F         [24]12431 	mov	dptr,#0x001f
      00459B 12 05 CC         [24]12432 	lcall	_setTextColor
                                  12433 ;	.\ecen4350_lcd_v4.c:2966: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      00459E 90 65 D1         [24]12434 	mov	dptr,#___str_133
      0045A1 75 F0 80         [24]12435 	mov	b,#0x80
      0045A4 12 10 D9         [24]12436 	lcall	_LCD_string_write
                                  12437 ;	.\ecen4350_lcd_v4.c:2967: selection = ~selection;
      0045A7 78 71            [12]12438 	mov	r0,#_selection
      0045A9 E6               [12]12439 	mov	a,@r0
      0045AA F4               [12]12440 	cpl	a
      0045AB F6               [12]12441 	mov	@r0,a
                                  12442 ;	.\ecen4350_lcd_v4.c:2968: setColorSelect();
      0045AC 12 16 A8         [24]12443 	lcall	_setColorSelect
                                  12444 ;	.\ecen4350_lcd_v4.c:2969: LCD_string_write("\n Writing new byte...");
      0045AF 90 65 F5         [24]12445 	mov	dptr,#___str_134
      0045B2 75 F0 80         [24]12446 	mov	b,#0x80
      0045B5 12 10 D9         [24]12447 	lcall	_LCD_string_write
                                  12448 ;	.\ecen4350_lcd_v4.c:2970: writeAllRAM(selection);
      0045B8 78 71            [12]12449 	mov	r0,#_selection
      0045BA 86 82            [24]12450 	mov	dpl,@r0
      0045BC 12 00 EB         [24]12451 	lcall	_writeAllRAM
                                  12452 ;	.\ecen4350_lcd_v4.c:2971: setColorYellow();
      0045BF 12 17 03         [24]12453 	lcall	_setColorYellow
                                  12454 ;	.\ecen4350_lcd_v4.c:2972: LCD_string_write("\n Verifying write...");
      0045C2 90 65 B0         [24]12455 	mov	dptr,#___str_131
      0045C5 75 F0 80         [24]12456 	mov	b,#0x80
      0045C8 12 10 D9         [24]12457 	lcall	_LCD_string_write
                                  12458 ;	.\ecen4350_lcd_v4.c:2973: checkAllRAM(selection);
      0045CB 78 71            [12]12459 	mov	r0,#_selection
      0045CD 86 82            [24]12460 	mov	dpl,@r0
      0045CF 12 01 1A         [24]12461 	lcall	_checkAllRAM
                                  12462 ;	.\ecen4350_lcd_v4.c:2974: setColorGreen();
      0045D2 12 16 F8         [24]12463 	lcall	_setColorGreen
                                  12464 ;	.\ecen4350_lcd_v4.c:2975: LCD_string_write("\n\n Check Complete.");
      0045D5 90 66 0B         [24]12465 	mov	dptr,#___str_135
      0045D8 75 F0 80         [24]12466 	mov	b,#0x80
      0045DB 12 10 D9         [24]12467 	lcall	_LCD_string_write
                                  12468 ;	.\ecen4350_lcd_v4.c:2976: delay(120);
      0045DE 90 00 78         [24]12469 	mov	dptr,#0x0078
                                  12470 ;	.\ecen4350_lcd_v4.c:2977: return;
                                  12471 ;	.\ecen4350_lcd_v4.c:2978: }
      0045E1 02 01 A9         [24]12472 	ljmp	_delay
                                  12473 ;------------------------------------------------------------
                                  12474 ;Allocation info for local variables in function 'uart'
                                  12475 ;------------------------------------------------------------
                                  12476 ;initLock                  Allocated to registers r7 
                                  12477 ;temp                      Allocated to registers r6 
                                  12478 ;------------------------------------------------------------
                                  12479 ;	.\ecen4350_lcd_v4.c:2980: void uart() {
                                  12480 ;	-----------------------------------------
                                  12481 ;	 function uart
                                  12482 ;	-----------------------------------------
      0045E4                      12483 _uart:
                                  12484 ;	.\ecen4350_lcd_v4.c:2981: __idata u8 initLock = 0;
      0045E4 7F 00            [12]12485 	mov	r7,#0x00
                                  12486 ;	.\ecen4350_lcd_v4.c:2982: __idata u8 temp = 0;
      0045E6 7E 00            [12]12487 	mov	r6,#0x00
                                  12488 ;	.\ecen4350_lcd_v4.c:2985: uartMenu:
      0045E8                      12489 00101$:
                                  12490 ;	.\ecen4350_lcd_v4.c:2986: clearLCD();
      0045E8 C0 07            [24]12491 	push	ar7
      0045EA C0 06            [24]12492 	push	ar6
      0045EC 12 0E 5C         [24]12493 	lcall	_clearLCD
                                  12494 ;	.\ecen4350_lcd_v4.c:2987: fillTop(GRAY);
      0045EF 90 D6 BA         [24]12495 	mov	dptr,#0xd6ba
      0045F2 12 0C 8F         [24]12496 	lcall	_fillTop
                                  12497 ;	.\ecen4350_lcd_v4.c:2988: setTextSize(5);
      0045F5 75 82 05         [24]12498 	mov	dpl,#0x05
      0045F8 12 05 D9         [24]12499 	lcall	_setTextSize
                                  12500 ;	.\ecen4350_lcd_v4.c:2989: setColorMenu();
      0045FB 12 16 D6         [24]12501 	lcall	_setColorMenu
                                  12502 ;	.\ecen4350_lcd_v4.c:2990: setCursor(30, 0);
      0045FE E4               [12]12503 	clr	a
      0045FF F5 6B            [12]12504 	mov	_setCursor_PARM_2,a
      004601 F5 6C            [12]12505 	mov	(_setCursor_PARM_2 + 1),a
      004603 90 00 1E         [24]12506 	mov	dptr,#0x001e
      004606 12 05 BF         [24]12507 	lcall	_setCursor
                                  12508 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write("[UART]\n");
      004609 90 66 1E         [24]12509 	mov	dptr,#___str_136
      00460C 75 F0 80         [24]12510 	mov	b,#0x80
      00460F 12 10 D9         [24]12511 	lcall	_LCD_string_write
                                  12512 ;	.\ecen4350_lcd_v4.c:2994: setTextSize(2);
      004612 75 82 02         [24]12513 	mov	dpl,#0x02
      004615 12 05 D9         [24]12514 	lcall	_setTextSize
                                  12515 ;	.\ecen4350_lcd_v4.c:2995: setColorDefault();
      004618 12 16 9D         [24]12516 	lcall	_setColorDefault
      00461B D0 06            [24]12517 	pop	ar6
      00461D D0 07            [24]12518 	pop	ar7
                                  12519 ;	.\ecen4350_lcd_v4.c:2996: if (baudSet == 1){
      00461F 78 73            [12]12520 	mov	r0,#_baudSet
      004621 B6 01 02         [24]12521 	cjne	@r0,#0x01,00629$
      004624 80 03            [24]12522 	sjmp	00630$
      004626                      12523 00629$:
      004626 02 46 C5         [24]12524 	ljmp	00114$
      004629                      12525 00630$:
                                  12526 ;	.\ecen4350_lcd_v4.c:2997: setCursor(0, 60);
      004629 75 6B 3C         [24]12527 	mov	_setCursor_PARM_2,#0x3c
      00462C 75 6C 00         [24]12528 	mov	(_setCursor_PARM_2 + 1),#0x00
      00462F 90 00 00         [24]12529 	mov	dptr,#0x0000
      004632 C0 07            [24]12530 	push	ar7
      004634 C0 06            [24]12531 	push	ar6
      004636 12 05 BF         [24]12532 	lcall	_setCursor
                                  12533 ;	.\ecen4350_lcd_v4.c:2998: LCD_string_write(" <1> ");
      004639 90 66 26         [24]12534 	mov	dptr,#___str_137
      00463C 75 F0 80         [24]12535 	mov	b,#0x80
      00463F 12 10 D9         [24]12536 	lcall	_LCD_string_write
      004642 D0 06            [24]12537 	pop	ar6
      004644 D0 07            [24]12538 	pop	ar7
                                  12539 ;	.\ecen4350_lcd_v4.c:2999: if (baudType == 0x1) {
      004646 78 78            [12]12540 	mov	r0,#_baudType
      004648 B6 01 11         [24]12541 	cjne	@r0,#0x01,00104$
                                  12542 ;	.\ecen4350_lcd_v4.c:3000: LCD_string_write("1200");
      00464B 90 66 2C         [24]12543 	mov	dptr,#___str_138
      00464E 75 F0 80         [24]12544 	mov	b,#0x80
      004651 C0 07            [24]12545 	push	ar7
      004653 C0 06            [24]12546 	push	ar6
      004655 12 10 D9         [24]12547 	lcall	_LCD_string_write
      004658 D0 06            [24]12548 	pop	ar6
      00465A D0 07            [24]12549 	pop	ar7
      00465C                      12550 00104$:
                                  12551 ;	.\ecen4350_lcd_v4.c:3002: if (baudType == 0x2) {
      00465C 78 78            [12]12552 	mov	r0,#_baudType
      00465E B6 02 11         [24]12553 	cjne	@r0,#0x02,00106$
                                  12554 ;	.\ecen4350_lcd_v4.c:3003: LCD_string_write("2400");
      004661 90 66 31         [24]12555 	mov	dptr,#___str_139
      004664 75 F0 80         [24]12556 	mov	b,#0x80
      004667 C0 07            [24]12557 	push	ar7
      004669 C0 06            [24]12558 	push	ar6
      00466B 12 10 D9         [24]12559 	lcall	_LCD_string_write
      00466E D0 06            [24]12560 	pop	ar6
      004670 D0 07            [24]12561 	pop	ar7
      004672                      12562 00106$:
                                  12563 ;	.\ecen4350_lcd_v4.c:3004: } if (baudType == 0x3){
      004672 78 78            [12]12564 	mov	r0,#_baudType
      004674 B6 03 11         [24]12565 	cjne	@r0,#0x03,00108$
                                  12566 ;	.\ecen4350_lcd_v4.c:3005: LCD_string_write("4800");
      004677 90 66 36         [24]12567 	mov	dptr,#___str_140
      00467A 75 F0 80         [24]12568 	mov	b,#0x80
      00467D C0 07            [24]12569 	push	ar7
      00467F C0 06            [24]12570 	push	ar6
      004681 12 10 D9         [24]12571 	lcall	_LCD_string_write
      004684 D0 06            [24]12572 	pop	ar6
      004686 D0 07            [24]12573 	pop	ar7
      004688                      12574 00108$:
                                  12575 ;	.\ecen4350_lcd_v4.c:3006: } if (baudType == 0x4){
      004688 78 78            [12]12576 	mov	r0,#_baudType
      00468A B6 04 11         [24]12577 	cjne	@r0,#0x04,00110$
                                  12578 ;	.\ecen4350_lcd_v4.c:3007: LCD_string_write("9600");
      00468D 90 66 3B         [24]12579 	mov	dptr,#___str_141
      004690 75 F0 80         [24]12580 	mov	b,#0x80
      004693 C0 07            [24]12581 	push	ar7
      004695 C0 06            [24]12582 	push	ar6
      004697 12 10 D9         [24]12583 	lcall	_LCD_string_write
      00469A D0 06            [24]12584 	pop	ar6
      00469C D0 07            [24]12585 	pop	ar7
      00469E                      12586 00110$:
                                  12587 ;	.\ecen4350_lcd_v4.c:3008: } if (baudType == 0x5) {
      00469E 78 78            [12]12588 	mov	r0,#_baudType
      0046A0 B6 05 11         [24]12589 	cjne	@r0,#0x05,00112$
                                  12590 ;	.\ecen4350_lcd_v4.c:3009: LCD_string_write("19200");
      0046A3 90 66 40         [24]12591 	mov	dptr,#___str_142
      0046A6 75 F0 80         [24]12592 	mov	b,#0x80
      0046A9 C0 07            [24]12593 	push	ar7
      0046AB C0 06            [24]12594 	push	ar6
      0046AD 12 10 D9         [24]12595 	lcall	_LCD_string_write
      0046B0 D0 06            [24]12596 	pop	ar6
      0046B2 D0 07            [24]12597 	pop	ar7
      0046B4                      12598 00112$:
                                  12599 ;	.\ecen4350_lcd_v4.c:3011: LCD_string_write(" baud\n");
      0046B4 90 66 46         [24]12600 	mov	dptr,#___str_143
      0046B7 75 F0 80         [24]12601 	mov	b,#0x80
      0046BA C0 07            [24]12602 	push	ar7
      0046BC C0 06            [24]12603 	push	ar6
      0046BE 12 10 D9         [24]12604 	lcall	_LCD_string_write
      0046C1 D0 06            [24]12605 	pop	ar6
      0046C3 D0 07            [24]12606 	pop	ar7
      0046C5                      12607 00114$:
                                  12608 ;	.\ecen4350_lcd_v4.c:3012: } if (baudSet == 0) {
      0046C5 78 73            [12]12609 	mov	r0,#_baudSet
      0046C7 E6               [12]12610 	mov	a,@r0
                                  12611 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 60);
      0046C8 70 1C            [24]12612 	jnz	00116$
      0046CA 75 6B 3C         [24]12613 	mov	_setCursor_PARM_2,#0x3c
      0046CD F5 6C            [12]12614 	mov	(_setCursor_PARM_2 + 1),a
      0046CF 90 00 00         [24]12615 	mov	dptr,#0x0000
      0046D2 C0 07            [24]12616 	push	ar7
      0046D4 C0 06            [24]12617 	push	ar6
      0046D6 12 05 BF         [24]12618 	lcall	_setCursor
                                  12619 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <1> Set Data Rate\n");
      0046D9 90 66 4D         [24]12620 	mov	dptr,#___str_144
      0046DC 75 F0 80         [24]12621 	mov	b,#0x80
      0046DF 12 10 D9         [24]12622 	lcall	_LCD_string_write
      0046E2 D0 06            [24]12623 	pop	ar6
      0046E4 D0 07            [24]12624 	pop	ar7
      0046E6                      12625 00116$:
                                  12626 ;	.\ecen4350_lcd_v4.c:3016: if (bitSet == 1) {
      0046E6 78 74            [12]12627 	mov	r0,#_bitSet
      0046E8 B6 01 5A         [24]12628 	cjne	@r0,#0x01,00122$
                                  12629 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 100);
      0046EB 75 6B 64         [24]12630 	mov	_setCursor_PARM_2,#0x64
      0046EE 75 6C 00         [24]12631 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046F1 90 00 00         [24]12632 	mov	dptr,#0x0000
      0046F4 C0 07            [24]12633 	push	ar7
      0046F6 C0 06            [24]12634 	push	ar6
      0046F8 12 05 BF         [24]12635 	lcall	_setCursor
                                  12636 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <2> ");
      0046FB 90 66 61         [24]12637 	mov	dptr,#___str_145
      0046FE 75 F0 80         [24]12638 	mov	b,#0x80
      004701 12 10 D9         [24]12639 	lcall	_LCD_string_write
      004704 D0 06            [24]12640 	pop	ar6
      004706 D0 07            [24]12641 	pop	ar7
                                  12642 ;	.\ecen4350_lcd_v4.c:3019: if (_8b == 1) {
      004708 78 7A            [12]12643 	mov	r0,#__8b
      00470A B6 01 11         [24]12644 	cjne	@r0,#0x01,00118$
                                  12645 ;	.\ecen4350_lcd_v4.c:3020: LCD_string_write("8");
      00470D 90 66 67         [24]12646 	mov	dptr,#___str_146
      004710 75 F0 80         [24]12647 	mov	b,#0x80
      004713 C0 07            [24]12648 	push	ar7
      004715 C0 06            [24]12649 	push	ar6
      004717 12 10 D9         [24]12650 	lcall	_LCD_string_write
      00471A D0 06            [24]12651 	pop	ar6
      00471C D0 07            [24]12652 	pop	ar7
      00471E                      12653 00118$:
                                  12654 ;	.\ecen4350_lcd_v4.c:3021: } if (_8b == 0) {
      00471E 78 7A            [12]12655 	mov	r0,#__8b
      004720 E6               [12]12656 	mov	a,@r0
      004721 70 11            [24]12657 	jnz	00120$
                                  12658 ;	.\ecen4350_lcd_v4.c:3022: LCD_string_write("9");
      004723 90 66 69         [24]12659 	mov	dptr,#___str_147
      004726 75 F0 80         [24]12660 	mov	b,#0x80
      004729 C0 07            [24]12661 	push	ar7
      00472B C0 06            [24]12662 	push	ar6
      00472D 12 10 D9         [24]12663 	lcall	_LCD_string_write
      004730 D0 06            [24]12664 	pop	ar6
      004732 D0 07            [24]12665 	pop	ar7
      004734                      12666 00120$:
                                  12667 ;	.\ecen4350_lcd_v4.c:3024: LCD_string_write("-bit Mode\n");
      004734 90 66 6B         [24]12668 	mov	dptr,#___str_148
      004737 75 F0 80         [24]12669 	mov	b,#0x80
      00473A C0 07            [24]12670 	push	ar7
      00473C C0 06            [24]12671 	push	ar6
      00473E 12 10 D9         [24]12672 	lcall	_LCD_string_write
      004741 D0 06            [24]12673 	pop	ar6
      004743 D0 07            [24]12674 	pop	ar7
      004745                      12675 00122$:
                                  12676 ;	.\ecen4350_lcd_v4.c:3025: } if (bitSet == 0) {
      004745 78 74            [12]12677 	mov	r0,#_bitSet
      004747 E6               [12]12678 	mov	a,@r0
                                  12679 ;	.\ecen4350_lcd_v4.c:3026: setCursor(0, 100);
      004748 70 1C            [24]12680 	jnz	00124$
      00474A 75 6B 64         [24]12681 	mov	_setCursor_PARM_2,#0x64
      00474D F5 6C            [12]12682 	mov	(_setCursor_PARM_2 + 1),a
      00474F 90 00 00         [24]12683 	mov	dptr,#0x0000
      004752 C0 07            [24]12684 	push	ar7
      004754 C0 06            [24]12685 	push	ar6
      004756 12 05 BF         [24]12686 	lcall	_setCursor
                                  12687 ;	.\ecen4350_lcd_v4.c:3027: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      004759 90 66 76         [24]12688 	mov	dptr,#___str_149
      00475C 75 F0 80         [24]12689 	mov	b,#0x80
      00475F 12 10 D9         [24]12690 	lcall	_LCD_string_write
      004762 D0 06            [24]12691 	pop	ar6
      004764 D0 07            [24]12692 	pop	ar7
      004766                      12693 00124$:
                                  12694 ;	.\ecen4350_lcd_v4.c:3028: } if (paritySet == 1) {
      004766 78 75            [12]12695 	mov	r0,#_paritySet
      004768 B6 01 02         [24]12696 	cjne	@r0,#0x01,00648$
      00476B 80 03            [24]12697 	sjmp	00649$
      00476D                      12698 00648$:
      00476D 02 48 38         [24]12699 	ljmp	00140$
      004770                      12700 00649$:
                                  12701 ;	.\ecen4350_lcd_v4.c:3029: setCursor(0, 140);
      004770 75 6B 8C         [24]12702 	mov	_setCursor_PARM_2,#0x8c
      004773 75 6C 00         [24]12703 	mov	(_setCursor_PARM_2 + 1),#0x00
      004776 90 00 00         [24]12704 	mov	dptr,#0x0000
      004779 C0 07            [24]12705 	push	ar7
      00477B C0 06            [24]12706 	push	ar6
      00477D 12 05 BF         [24]12707 	lcall	_setCursor
                                  12708 ;	.\ecen4350_lcd_v4.c:3030: LCD_string_write(" <3> ");
      004780 90 66 9E         [24]12709 	mov	dptr,#___str_150
      004783 75 F0 80         [24]12710 	mov	b,#0x80
      004786 12 10 D9         [24]12711 	lcall	_LCD_string_write
      004789 D0 06            [24]12712 	pop	ar6
      00478B D0 07            [24]12713 	pop	ar7
                                  12714 ;	.\ecen4350_lcd_v4.c:3031: if (pType == 0x1) {
      00478D 78 79            [12]12715 	mov	r0,#_pType
      00478F B6 01 11         [24]12716 	cjne	@r0,#0x01,00126$
                                  12717 ;	.\ecen4350_lcd_v4.c:3032: LCD_string_write("No ");
      004792 90 66 A4         [24]12718 	mov	dptr,#___str_151
      004795 75 F0 80         [24]12719 	mov	b,#0x80
      004798 C0 07            [24]12720 	push	ar7
      00479A C0 06            [24]12721 	push	ar6
      00479C 12 10 D9         [24]12722 	lcall	_LCD_string_write
      00479F D0 06            [24]12723 	pop	ar6
      0047A1 D0 07            [24]12724 	pop	ar7
      0047A3                      12725 00126$:
                                  12726 ;	.\ecen4350_lcd_v4.c:3033: } if (pType == 0x2) {
      0047A3 78 79            [12]12727 	mov	r0,#_pType
      0047A5 B6 02 11         [24]12728 	cjne	@r0,#0x02,00128$
                                  12729 ;	.\ecen4350_lcd_v4.c:3034: LCD_string_write("Even ");
      0047A8 90 66 A8         [24]12730 	mov	dptr,#___str_152
      0047AB 75 F0 80         [24]12731 	mov	b,#0x80
      0047AE C0 07            [24]12732 	push	ar7
      0047B0 C0 06            [24]12733 	push	ar6
      0047B2 12 10 D9         [24]12734 	lcall	_LCD_string_write
      0047B5 D0 06            [24]12735 	pop	ar6
      0047B7 D0 07            [24]12736 	pop	ar7
      0047B9                      12737 00128$:
                                  12738 ;	.\ecen4350_lcd_v4.c:3035: } if (pType == 0x3) {
      0047B9 78 79            [12]12739 	mov	r0,#_pType
      0047BB B6 03 11         [24]12740 	cjne	@r0,#0x03,00130$
                                  12741 ;	.\ecen4350_lcd_v4.c:3036: LCD_string_write("Even ");
      0047BE 90 66 A8         [24]12742 	mov	dptr,#___str_152
      0047C1 75 F0 80         [24]12743 	mov	b,#0x80
      0047C4 C0 07            [24]12744 	push	ar7
      0047C6 C0 06            [24]12745 	push	ar6
      0047C8 12 10 D9         [24]12746 	lcall	_LCD_string_write
      0047CB D0 06            [24]12747 	pop	ar6
      0047CD D0 07            [24]12748 	pop	ar7
      0047CF                      12749 00130$:
                                  12750 ;	.\ecen4350_lcd_v4.c:3037: } if (pType == 0x4) {	
      0047CF 78 79            [12]12751 	mov	r0,#_pType
      0047D1 B6 04 11         [24]12752 	cjne	@r0,#0x04,00132$
                                  12753 ;	.\ecen4350_lcd_v4.c:3038: LCD_string_write("Odd ");
      0047D4 90 66 AE         [24]12754 	mov	dptr,#___str_153
      0047D7 75 F0 80         [24]12755 	mov	b,#0x80
      0047DA C0 07            [24]12756 	push	ar7
      0047DC C0 06            [24]12757 	push	ar6
      0047DE 12 10 D9         [24]12758 	lcall	_LCD_string_write
      0047E1 D0 06            [24]12759 	pop	ar6
      0047E3 D0 07            [24]12760 	pop	ar7
      0047E5                      12761 00132$:
                                  12762 ;	.\ecen4350_lcd_v4.c:3039: } if (pType == 0x5) {
      0047E5 78 79            [12]12763 	mov	r0,#_pType
      0047E7 B6 05 11         [24]12764 	cjne	@r0,#0x05,00134$
                                  12765 ;	.\ecen4350_lcd_v4.c:3040: LCD_string_write("Odd ");
      0047EA 90 66 AE         [24]12766 	mov	dptr,#___str_153
      0047ED 75 F0 80         [24]12767 	mov	b,#0x80
      0047F0 C0 07            [24]12768 	push	ar7
      0047F2 C0 06            [24]12769 	push	ar6
      0047F4 12 10 D9         [24]12770 	lcall	_LCD_string_write
      0047F7 D0 06            [24]12771 	pop	ar6
      0047F9 D0 07            [24]12772 	pop	ar7
      0047FB                      12773 00134$:
                                  12774 ;	.\ecen4350_lcd_v4.c:3042: if (pType == 0x7) {
      0047FB 78 79            [12]12775 	mov	r0,#_pType
      0047FD B6 07 11         [24]12776 	cjne	@r0,#0x07,00136$
                                  12777 ;	.\ecen4350_lcd_v4.c:3043: LCD_string_write("No ");
      004800 90 66 A4         [24]12778 	mov	dptr,#___str_151
      004803 75 F0 80         [24]12779 	mov	b,#0x80
      004806 C0 07            [24]12780 	push	ar7
      004808 C0 06            [24]12781 	push	ar6
      00480A 12 10 D9         [24]12782 	lcall	_LCD_string_write
      00480D D0 06            [24]12783 	pop	ar6
      00480F D0 07            [24]12784 	pop	ar7
      004811                      12785 00136$:
                                  12786 ;	.\ecen4350_lcd_v4.c:3044: } if (pType == 0x8) {
      004811 78 79            [12]12787 	mov	r0,#_pType
      004813 B6 08 11         [24]12788 	cjne	@r0,#0x08,00138$
                                  12789 ;	.\ecen4350_lcd_v4.c:3045: LCD_string_write("Even ");
      004816 90 66 A8         [24]12790 	mov	dptr,#___str_152
      004819 75 F0 80         [24]12791 	mov	b,#0x80
      00481C C0 07            [24]12792 	push	ar7
      00481E C0 06            [24]12793 	push	ar6
      004820 12 10 D9         [24]12794 	lcall	_LCD_string_write
      004823 D0 06            [24]12795 	pop	ar6
      004825 D0 07            [24]12796 	pop	ar7
      004827                      12797 00138$:
                                  12798 ;	.\ecen4350_lcd_v4.c:3047: LCD_string_write("Parity\n");
      004827 90 66 B3         [24]12799 	mov	dptr,#___str_154
      00482A 75 F0 80         [24]12800 	mov	b,#0x80
      00482D C0 07            [24]12801 	push	ar7
      00482F C0 06            [24]12802 	push	ar6
      004831 12 10 D9         [24]12803 	lcall	_LCD_string_write
      004834 D0 06            [24]12804 	pop	ar6
      004836 D0 07            [24]12805 	pop	ar7
      004838                      12806 00140$:
                                  12807 ;	.\ecen4350_lcd_v4.c:3048: } if (paritySet == 0) {
      004838 78 75            [12]12808 	mov	r0,#_paritySet
      00483A E6               [12]12809 	mov	a,@r0
                                  12810 ;	.\ecen4350_lcd_v4.c:3049: setCursor(0, 140);
      00483B 70 1C            [24]12811 	jnz	00142$
      00483D 75 6B 8C         [24]12812 	mov	_setCursor_PARM_2,#0x8c
      004840 F5 6C            [12]12813 	mov	(_setCursor_PARM_2 + 1),a
      004842 90 00 00         [24]12814 	mov	dptr,#0x0000
      004845 C0 07            [24]12815 	push	ar7
      004847 C0 06            [24]12816 	push	ar6
      004849 12 05 BF         [24]12817 	lcall	_setCursor
                                  12818 ;	.\ecen4350_lcd_v4.c:3050: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      00484C 90 66 BB         [24]12819 	mov	dptr,#___str_155
      00484F 75 F0 80         [24]12820 	mov	b,#0x80
      004852 12 10 D9         [24]12821 	lcall	_LCD_string_write
      004855 D0 06            [24]12822 	pop	ar6
      004857 D0 07            [24]12823 	pop	ar7
      004859                      12824 00142$:
                                  12825 ;	.\ecen4350_lcd_v4.c:3051: } if (UART_en == 1) {
      004859 78 72            [12]12826 	mov	r0,#_UART_en
      00485B B6 01 26         [24]12827 	cjne	@r0,#0x01,00144$
                                  12828 ;	.\ecen4350_lcd_v4.c:3052: setCursor(0, 180);
      00485E 75 6B B4         [24]12829 	mov	_setCursor_PARM_2,#0xb4
      004861 75 6C 00         [24]12830 	mov	(_setCursor_PARM_2 + 1),#0x00
      004864 90 00 00         [24]12831 	mov	dptr,#0x0000
      004867 C0 07            [24]12832 	push	ar7
      004869 C0 06            [24]12833 	push	ar6
      00486B 12 05 BF         [24]12834 	lcall	_setCursor
                                  12835 ;	.\ecen4350_lcd_v4.c:3053: LCD_string_write(" <4> Disable UART\n");
      00486E 90 66 DF         [24]12836 	mov	dptr,#___str_156
      004871 75 F0 80         [24]12837 	mov	b,#0x80
      004874 12 10 D9         [24]12838 	lcall	_LCD_string_write
                                  12839 ;	.\ecen4350_lcd_v4.c:3054: LCD_string_write("     [Enabled]\n");
      004877 90 66 F2         [24]12840 	mov	dptr,#___str_157
      00487A 75 F0 80         [24]12841 	mov	b,#0x80
      00487D 12 10 D9         [24]12842 	lcall	_LCD_string_write
      004880 D0 06            [24]12843 	pop	ar6
      004882 D0 07            [24]12844 	pop	ar7
      004884                      12845 00144$:
                                  12846 ;	.\ecen4350_lcd_v4.c:3055: } if (UART_en == 0) {
      004884 78 72            [12]12847 	mov	r0,#_UART_en
      004886 E6               [12]12848 	mov	a,@r0
                                  12849 ;	.\ecen4350_lcd_v4.c:3056: setCursor(0, 180);
      004887 70 25            [24]12850 	jnz	00146$
      004889 75 6B B4         [24]12851 	mov	_setCursor_PARM_2,#0xb4
      00488C F5 6C            [12]12852 	mov	(_setCursor_PARM_2 + 1),a
      00488E 90 00 00         [24]12853 	mov	dptr,#0x0000
      004891 C0 07            [24]12854 	push	ar7
      004893 C0 06            [24]12855 	push	ar6
      004895 12 05 BF         [24]12856 	lcall	_setCursor
                                  12857 ;	.\ecen4350_lcd_v4.c:3057: LCD_string_write(" <4> Enable UART\n");
      004898 90 67 02         [24]12858 	mov	dptr,#___str_158
      00489B 75 F0 80         [24]12859 	mov	b,#0x80
      00489E 12 10 D9         [24]12860 	lcall	_LCD_string_write
                                  12861 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write("     (Disabled)\n");
      0048A1 90 67 14         [24]12862 	mov	dptr,#___str_159
      0048A4 75 F0 80         [24]12863 	mov	b,#0x80
      0048A7 12 10 D9         [24]12864 	lcall	_LCD_string_write
      0048AA D0 06            [24]12865 	pop	ar6
      0048AC D0 07            [24]12866 	pop	ar7
      0048AE                      12867 00146$:
                                  12868 ;	.\ecen4350_lcd_v4.c:3060: setCursor(0, 240);
      0048AE 75 6B F0         [24]12869 	mov	_setCursor_PARM_2,#0xf0
      0048B1 75 6C 00         [24]12870 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048B4 90 00 00         [24]12871 	mov	dptr,#0x0000
      0048B7 C0 07            [24]12872 	push	ar7
      0048B9 C0 06            [24]12873 	push	ar6
      0048BB 12 05 BF         [24]12874 	lcall	_setCursor
                                  12875 ;	.\ecen4350_lcd_v4.c:3061: LCD_string_write(" <0> Exit \n");
      0048BE 90 67 25         [24]12876 	mov	dptr,#___str_160
      0048C1 75 F0 80         [24]12877 	mov	b,#0x80
      0048C4 12 10 D9         [24]12878 	lcall	_LCD_string_write
      0048C7 D0 06            [24]12879 	pop	ar6
      0048C9 D0 07            [24]12880 	pop	ar7
                                  12881 ;	.\ecen4350_lcd_v4.c:3063: mainInput:
      0048CB                      12882 00147$:
                                  12883 ;	.\ecen4350_lcd_v4.c:3064: selection = keyDetect();
      0048CB C0 07            [24]12884 	push	ar7
      0048CD C0 06            [24]12885 	push	ar6
      0048CF 12 11 F7         [24]12886 	lcall	_keyDetect
      0048D2 AD 82            [24]12887 	mov	r5,dpl
      0048D4 D0 06            [24]12888 	pop	ar6
      0048D6 D0 07            [24]12889 	pop	ar7
      0048D8 78 71            [12]12890 	mov	r0,#_selection
      0048DA A6 05            [24]12891 	mov	@r0,ar5
                                  12892 ;	.\ecen4350_lcd_v4.c:3065: if (selection =='0') {
      0048DC BD 30 33         [24]12893 	cjne	r5,#0x30,00149$
                                  12894 ;	.\ecen4350_lcd_v4.c:3066: setCursor (0, 240);
      0048DF 75 6B F0         [24]12895 	mov	_setCursor_PARM_2,#0xf0
      0048E2 75 6C 00         [24]12896 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048E5 90 00 00         [24]12897 	mov	dptr,#0x0000
      0048E8 12 05 BF         [24]12898 	lcall	_setCursor
                                  12899 ;	.\ecen4350_lcd_v4.c:3067: LCD_string_write(" ");
      0048EB 90 5F 84         [24]12900 	mov	dptr,#___str_30
      0048EE 75 F0 80         [24]12901 	mov	b,#0x80
      0048F1 12 10 D9         [24]12902 	lcall	_LCD_string_write
                                  12903 ;	.\ecen4350_lcd_v4.c:3068: setColorHighlight1();
      0048F4 12 16 B3         [24]12904 	lcall	_setColorHighlight1
                                  12905 ;	.\ecen4350_lcd_v4.c:3069: LCD_string_write("<0> ");
      0048F7 90 67 31         [24]12906 	mov	dptr,#___str_161
      0048FA 75 F0 80         [24]12907 	mov	b,#0x80
      0048FD 12 10 D9         [24]12908 	lcall	_LCD_string_write
                                  12909 ;	.\ecen4350_lcd_v4.c:3070: setColorHighlight2();
      004900 12 16 BF         [24]12910 	lcall	_setColorHighlight2
                                  12911 ;	.\ecen4350_lcd_v4.c:3071: LCD_string_write("Exit\n");
      004903 90 67 36         [24]12912 	mov	dptr,#___str_162
      004906 75 F0 80         [24]12913 	mov	b,#0x80
      004909 12 10 D9         [24]12914 	lcall	_LCD_string_write
                                  12915 ;	.\ecen4350_lcd_v4.c:3072: delay(20);
      00490C 90 00 14         [24]12916 	mov	dptr,#0x0014
                                  12917 ;	.\ecen4350_lcd_v4.c:3073: goto finish;
      00490F 02 01 A9         [24]12918 	ljmp	_delay
      004912                      12919 00149$:
                                  12920 ;	.\ecen4350_lcd_v4.c:3075: if (selection == '4') {
      004912 BD 34 02         [24]12921 	cjne	r5,#0x34,00670$
      004915 80 03            [24]12922 	sjmp	00671$
      004917                      12923 00670$:
      004917 02 49 DD         [24]12924 	ljmp	00155$
      00491A                      12925 00671$:
                                  12926 ;	.\ecen4350_lcd_v4.c:3076: setCursor (0, 180);
      00491A 75 6B B4         [24]12927 	mov	_setCursor_PARM_2,#0xb4
      00491D 75 6C 00         [24]12928 	mov	(_setCursor_PARM_2 + 1),#0x00
      004920 90 00 00         [24]12929 	mov	dptr,#0x0000
      004923 C0 07            [24]12930 	push	ar7
      004925 C0 06            [24]12931 	push	ar6
      004927 12 05 BF         [24]12932 	lcall	_setCursor
                                  12933 ;	.\ecen4350_lcd_v4.c:3077: LCD_string_write(" ");
      00492A 90 5F 84         [24]12934 	mov	dptr,#___str_30
      00492D 75 F0 80         [24]12935 	mov	b,#0x80
      004930 12 10 D9         [24]12936 	lcall	_LCD_string_write
                                  12937 ;	.\ecen4350_lcd_v4.c:3078: setColorHighlight1();
      004933 12 16 B3         [24]12938 	lcall	_setColorHighlight1
                                  12939 ;	.\ecen4350_lcd_v4.c:3079: LCD_string_write("<4> ");
      004936 90 67 3C         [24]12940 	mov	dptr,#___str_163
      004939 75 F0 80         [24]12941 	mov	b,#0x80
      00493C 12 10 D9         [24]12942 	lcall	_LCD_string_write
                                  12943 ;	.\ecen4350_lcd_v4.c:3080: setColorHighlight2();
      00493F 12 16 BF         [24]12944 	lcall	_setColorHighlight2
      004942 D0 06            [24]12945 	pop	ar6
      004944 D0 07            [24]12946 	pop	ar7
                                  12947 ;	.\ecen4350_lcd_v4.c:3081: if (UART_en == 1) {
      004946 78 72            [12]12948 	mov	r0,#_UART_en
      004948 B6 01 54         [24]12949 	cjne	@r0,#0x01,00151$
                                  12950 ;	.\ecen4350_lcd_v4.c:3082: LCD_string_write("Disable UART\n");
      00494B 90 67 41         [24]12951 	mov	dptr,#___str_164
      00494E 75 F0 80         [24]12952 	mov	b,#0x80
      004951 12 10 D9         [24]12953 	lcall	_LCD_string_write
                                  12954 ;	.\ecen4350_lcd_v4.c:3083: setColorDefault();
      004954 12 16 9D         [24]12955 	lcall	_setColorDefault
                                  12956 ;	.\ecen4350_lcd_v4.c:3084: LCD_string_write("     ");
      004957 90 67 4F         [24]12957 	mov	dptr,#___str_165
      00495A 75 F0 80         [24]12958 	mov	b,#0x80
      00495D 12 10 D9         [24]12959 	lcall	_LCD_string_write
                                  12960 ;	.\ecen4350_lcd_v4.c:3085: setColorHighlight1();
      004960 12 16 B3         [24]12961 	lcall	_setColorHighlight1
                                  12962 ;	.\ecen4350_lcd_v4.c:3086: LCD_string_write("[Enabled]");
      004963 90 67 55         [24]12963 	mov	dptr,#___str_166
      004966 75 F0 80         [24]12964 	mov	b,#0x80
      004969 12 10 D9         [24]12965 	lcall	_LCD_string_write
                                  12966 ;	.\ecen4350_lcd_v4.c:3087: setColorDefault();
      00496C 12 16 9D         [24]12967 	lcall	_setColorDefault
                                  12968 ;	.\ecen4350_lcd_v4.c:3088: initLock = 0;
      00496F 7F 00            [12]12969 	mov	r7,#0x00
                                  12970 ;	.\ecen4350_lcd_v4.c:3089: temp = 0;
      004971 7E 00            [12]12971 	mov	r6,#0x00
                                  12972 ;	.\ecen4350_lcd_v4.c:3090: UART_disable();
      004973 C0 07            [24]12973 	push	ar7
      004975 C0 06            [24]12974 	push	ar6
      004977 12 01 E7         [24]12975 	lcall	_UART_disable
                                  12976 ;	.\ecen4350_lcd_v4.c:3091: clearLCD();
      00497A 12 0E 5C         [24]12977 	lcall	_clearLCD
                                  12978 ;	.\ecen4350_lcd_v4.c:3092: setCursor(30, 120);
      00497D 75 6B 78         [24]12979 	mov	_setCursor_PARM_2,#0x78
      004980 75 6C 00         [24]12980 	mov	(_setCursor_PARM_2 + 1),#0x00
      004983 90 00 1E         [24]12981 	mov	dptr,#0x001e
      004986 12 05 BF         [24]12982 	lcall	_setCursor
                                  12983 ;	.\ecen4350_lcd_v4.c:3093: LCD_string_write("UART Disabled.");
      004989 90 67 5F         [24]12984 	mov	dptr,#___str_167
      00498C 75 F0 80         [24]12985 	mov	b,#0x80
      00498F 12 10 D9         [24]12986 	lcall	_LCD_string_write
                                  12987 ;	.\ecen4350_lcd_v4.c:3094: delay(40);
      004992 90 00 28         [24]12988 	mov	dptr,#0x0028
      004995 12 01 A9         [24]12989 	lcall	_delay
      004998 D0 06            [24]12990 	pop	ar6
      00499A D0 07            [24]12991 	pop	ar7
                                  12992 ;	.\ecen4350_lcd_v4.c:3095: goto uartMenu;
      00499C 02 45 E8         [24]12993 	ljmp	00101$
      00499F                      12994 00151$:
                                  12995 ;	.\ecen4350_lcd_v4.c:3096: } if (UART_en == 0 ){
      00499F 78 72            [12]12996 	mov	r0,#_UART_en
      0049A1 E6               [12]12997 	mov	a,@r0
      0049A2 70 39            [24]12998 	jnz	00155$
                                  12999 ;	.\ecen4350_lcd_v4.c:3097: LCD_string_write("Enable UART\n");
      0049A4 90 67 6E         [24]13000 	mov	dptr,#___str_168
      0049A7 75 F0 80         [24]13001 	mov	b,#0x80
      0049AA C0 06            [24]13002 	push	ar6
      0049AC 12 10 D9         [24]13003 	lcall	_LCD_string_write
                                  13004 ;	.\ecen4350_lcd_v4.c:3098: setColorDefault();
      0049AF 12 16 9D         [24]13005 	lcall	_setColorDefault
                                  13006 ;	.\ecen4350_lcd_v4.c:3099: LCD_string_write("     ");
      0049B2 90 67 4F         [24]13007 	mov	dptr,#___str_165
      0049B5 75 F0 80         [24]13008 	mov	b,#0x80
      0049B8 12 10 D9         [24]13009 	lcall	_LCD_string_write
                                  13010 ;	.\ecen4350_lcd_v4.c:3100: setColorHighlight1();
      0049BB 12 16 B3         [24]13011 	lcall	_setColorHighlight1
                                  13012 ;	.\ecen4350_lcd_v4.c:3101: LCD_string_write("(Disabled)");
      0049BE 90 67 7B         [24]13013 	mov	dptr,#___str_169
      0049C1 75 F0 80         [24]13014 	mov	b,#0x80
      0049C4 12 10 D9         [24]13015 	lcall	_LCD_string_write
                                  13016 ;	.\ecen4350_lcd_v4.c:3102: setColorDefault();
      0049C7 12 16 9D         [24]13017 	lcall	_setColorDefault
                                  13018 ;	.\ecen4350_lcd_v4.c:3103: delay(40);
      0049CA 90 00 28         [24]13019 	mov	dptr,#0x0028
      0049CD 12 01 A9         [24]13020 	lcall	_delay
                                  13021 ;	.\ecen4350_lcd_v4.c:3104: delay(40);
      0049D0 90 00 28         [24]13022 	mov	dptr,#0x0028
      0049D3 12 01 A9         [24]13023 	lcall	_delay
      0049D6 D0 06            [24]13024 	pop	ar6
                                  13025 ;	.\ecen4350_lcd_v4.c:3105: initLock = 1;
      0049D8 7F 01            [12]13026 	mov	r7,#0x01
                                  13027 ;	.\ecen4350_lcd_v4.c:3106: goto verifyUART;
      0049DA 02 4B DA         [24]13028 	ljmp	00175$
      0049DD                      13029 00155$:
                                  13030 ;	.\ecen4350_lcd_v4.c:3108: } if (selection == '1') {
      0049DD 78 71            [12]13031 	mov	r0,#_selection
      0049DF B6 31 02         [24]13032 	cjne	@r0,#0x31,00675$
      0049E2 80 03            [24]13033 	sjmp	00676$
      0049E4                      13034 00675$:
      0049E4 02 4A 6A         [24]13035 	ljmp	00161$
      0049E7                      13036 00676$:
                                  13037 ;	.\ecen4350_lcd_v4.c:3109: setCursor (0, 60);
      0049E7 75 6B 3C         [24]13038 	mov	_setCursor_PARM_2,#0x3c
      0049EA 75 6C 00         [24]13039 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049ED 90 00 00         [24]13040 	mov	dptr,#0x0000
      0049F0 C0 07            [24]13041 	push	ar7
      0049F2 C0 06            [24]13042 	push	ar6
      0049F4 12 05 BF         [24]13043 	lcall	_setCursor
                                  13044 ;	.\ecen4350_lcd_v4.c:3110: LCD_string_write(" ");
      0049F7 90 5F 84         [24]13045 	mov	dptr,#___str_30
      0049FA 75 F0 80         [24]13046 	mov	b,#0x80
      0049FD 12 10 D9         [24]13047 	lcall	_LCD_string_write
                                  13048 ;	.\ecen4350_lcd_v4.c:3111: setColorHighlight1();
      004A00 12 16 B3         [24]13049 	lcall	_setColorHighlight1
                                  13050 ;	.\ecen4350_lcd_v4.c:3112: LCD_string_write("<1> ");
      004A03 90 67 86         [24]13051 	mov	dptr,#___str_170
      004A06 75 F0 80         [24]13052 	mov	b,#0x80
      004A09 12 10 D9         [24]13053 	lcall	_LCD_string_write
                                  13054 ;	.\ecen4350_lcd_v4.c:3113: setColorHighlight2();
      004A0C 12 16 BF         [24]13055 	lcall	_setColorHighlight2
                                  13056 ;	.\ecen4350_lcd_v4.c:3114: LCD_string_write("Set Data Rate\n");
      004A0F 90 67 8B         [24]13057 	mov	dptr,#___str_171
      004A12 75 F0 80         [24]13058 	mov	b,#0x80
      004A15 12 10 D9         [24]13059 	lcall	_LCD_string_write
                                  13060 ;	.\ecen4350_lcd_v4.c:3115: delay(20);
      004A18 90 00 14         [24]13061 	mov	dptr,#0x0014
      004A1B 12 01 A9         [24]13062 	lcall	_delay
      004A1E D0 06            [24]13063 	pop	ar6
      004A20 D0 07            [24]13064 	pop	ar7
                                  13065 ;	.\ecen4350_lcd_v4.c:3116: if (UART_en == 1) {
      004A22 78 72            [12]13066 	mov	r0,#_UART_en
      004A24 B6 01 3B         [24]13067 	cjne	@r0,#0x01,00157$
                                  13068 ;	.\ecen4350_lcd_v4.c:3117: setCursor(0, 200);
      004A27 75 6B C8         [24]13069 	mov	_setCursor_PARM_2,#0xc8
      004A2A 75 6C 00         [24]13070 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A2D 90 00 00         [24]13071 	mov	dptr,#0x0000
      004A30 C0 07            [24]13072 	push	ar7
      004A32 C0 06            [24]13073 	push	ar6
      004A34 12 05 BF         [24]13074 	lcall	_setCursor
                                  13075 ;	.\ecen4350_lcd_v4.c:3118: setColorRed();
      004A37 12 16 E2         [24]13076 	lcall	_setColorRed
                                  13077 ;	.\ecen4350_lcd_v4.c:3119: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004A3A 90 67 9A         [24]13078 	mov	dptr,#___str_172
      004A3D 75 F0 80         [24]13079 	mov	b,#0x80
      004A40 12 10 D9         [24]13080 	lcall	_LCD_string_write
                                  13081 ;	.\ecen4350_lcd_v4.c:3120: setColorDefault();
      004A43 12 16 9D         [24]13082 	lcall	_setColorDefault
                                  13083 ;	.\ecen4350_lcd_v4.c:3121: setCursor(0, 60);
      004A46 75 6B 3C         [24]13084 	mov	_setCursor_PARM_2,#0x3c
      004A49 75 6C 00         [24]13085 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A4C 90 00 00         [24]13086 	mov	dptr,#0x0000
      004A4F 12 05 BF         [24]13087 	lcall	_setCursor
                                  13088 ;	.\ecen4350_lcd_v4.c:3122: LCD_string_write(" <1> Set Data Rate\n");
      004A52 90 66 4D         [24]13089 	mov	dptr,#___str_144
      004A55 75 F0 80         [24]13090 	mov	b,#0x80
      004A58 12 10 D9         [24]13091 	lcall	_LCD_string_write
      004A5B D0 06            [24]13092 	pop	ar6
      004A5D D0 07            [24]13093 	pop	ar7
                                  13094 ;	.\ecen4350_lcd_v4.c:3123: goto mainInput;
      004A5F 02 48 CB         [24]13095 	ljmp	00147$
      004A62                      13096 00157$:
                                  13097 ;	.\ecen4350_lcd_v4.c:3124: } if (UART_en == 0) {
      004A62 78 72            [12]13098 	mov	r0,#_UART_en
      004A64 E6               [12]13099 	mov	a,@r0
      004A65 70 03            [24]13100 	jnz	00679$
      004A67 02 4C E9         [24]13101 	ljmp	00194$
      004A6A                      13102 00679$:
                                  13103 ;	.\ecen4350_lcd_v4.c:3125: goto setRate;
      004A6A                      13104 00161$:
                                  13105 ;	.\ecen4350_lcd_v4.c:3128: if (selection == '2') {
      004A6A 78 71            [12]13106 	mov	r0,#_selection
      004A6C B6 32 02         [24]13107 	cjne	@r0,#0x32,00680$
      004A6F 80 03            [24]13108 	sjmp	00681$
      004A71                      13109 00680$:
      004A71 02 4B 09         [24]13110 	ljmp	00167$
      004A74                      13111 00681$:
                                  13112 ;	.\ecen4350_lcd_v4.c:3129: setCursor (0, 100);
      004A74 75 6B 64         [24]13113 	mov	_setCursor_PARM_2,#0x64
      004A77 75 6C 00         [24]13114 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A7A 90 00 00         [24]13115 	mov	dptr,#0x0000
      004A7D C0 07            [24]13116 	push	ar7
      004A7F C0 06            [24]13117 	push	ar6
      004A81 12 05 BF         [24]13118 	lcall	_setCursor
                                  13119 ;	.\ecen4350_lcd_v4.c:3130: LCD_string_write(" ");
      004A84 90 5F 84         [24]13120 	mov	dptr,#___str_30
      004A87 75 F0 80         [24]13121 	mov	b,#0x80
      004A8A 12 10 D9         [24]13122 	lcall	_LCD_string_write
                                  13123 ;	.\ecen4350_lcd_v4.c:3131: setColorHighlight1();
      004A8D 12 16 B3         [24]13124 	lcall	_setColorHighlight1
                                  13125 ;	.\ecen4350_lcd_v4.c:3132: LCD_string_write("<2> ");
      004A90 90 67 BC         [24]13126 	mov	dptr,#___str_173
      004A93 75 F0 80         [24]13127 	mov	b,#0x80
      004A96 12 10 D9         [24]13128 	lcall	_LCD_string_write
                                  13129 ;	.\ecen4350_lcd_v4.c:3133: setColorHighlight2();
      004A99 12 16 BF         [24]13130 	lcall	_setColorHighlight2
                                  13131 ;	.\ecen4350_lcd_v4.c:3134: LCD_string_write("Number of Bits\n");
      004A9C 90 67 C1         [24]13132 	mov	dptr,#___str_174
      004A9F 75 F0 80         [24]13133 	mov	b,#0x80
      004AA2 12 10 D9         [24]13134 	lcall	_LCD_string_write
                                  13135 ;	.\ecen4350_lcd_v4.c:3135: setColorDefault();
      004AA5 12 16 9D         [24]13136 	lcall	_setColorDefault
                                  13137 ;	.\ecen4350_lcd_v4.c:3136: LCD_string_write("     ");
      004AA8 90 67 4F         [24]13138 	mov	dptr,#___str_165
      004AAB 75 F0 80         [24]13139 	mov	b,#0x80
      004AAE 12 10 D9         [24]13140 	lcall	_LCD_string_write
                                  13141 ;	.\ecen4350_lcd_v4.c:3137: setColorHighlight1();
      004AB1 12 16 B3         [24]13142 	lcall	_setColorHighlight1
                                  13143 ;	.\ecen4350_lcd_v4.c:3138: LCD_string_write("(8 or 9 bits)\n");
      004AB4 90 67 D1         [24]13144 	mov	dptr,#___str_175
      004AB7 75 F0 80         [24]13145 	mov	b,#0x80
      004ABA 12 10 D9         [24]13146 	lcall	_LCD_string_write
      004ABD D0 06            [24]13147 	pop	ar6
      004ABF D0 07            [24]13148 	pop	ar7
                                  13149 ;	.\ecen4350_lcd_v4.c:3139: if (UART_en == 1) {
      004AC1 78 72            [12]13150 	mov	r0,#_UART_en
      004AC3 B6 01 3B         [24]13151 	cjne	@r0,#0x01,00163$
                                  13152 ;	.\ecen4350_lcd_v4.c:3140: setCursor(0, 200);
      004AC6 75 6B C8         [24]13153 	mov	_setCursor_PARM_2,#0xc8
      004AC9 75 6C 00         [24]13154 	mov	(_setCursor_PARM_2 + 1),#0x00
      004ACC 90 00 00         [24]13155 	mov	dptr,#0x0000
      004ACF C0 07            [24]13156 	push	ar7
      004AD1 C0 06            [24]13157 	push	ar6
      004AD3 12 05 BF         [24]13158 	lcall	_setCursor
                                  13159 ;	.\ecen4350_lcd_v4.c:3141: setColorRed();
      004AD6 12 16 E2         [24]13160 	lcall	_setColorRed
                                  13161 ;	.\ecen4350_lcd_v4.c:3142: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004AD9 90 67 9A         [24]13162 	mov	dptr,#___str_172
      004ADC 75 F0 80         [24]13163 	mov	b,#0x80
      004ADF 12 10 D9         [24]13164 	lcall	_LCD_string_write
                                  13165 ;	.\ecen4350_lcd_v4.c:3143: setColorDefault();
      004AE2 12 16 9D         [24]13166 	lcall	_setColorDefault
                                  13167 ;	.\ecen4350_lcd_v4.c:3144: setCursor(0, 100);		
      004AE5 75 6B 64         [24]13168 	mov	_setCursor_PARM_2,#0x64
      004AE8 75 6C 00         [24]13169 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AEB 90 00 00         [24]13170 	mov	dptr,#0x0000
      004AEE 12 05 BF         [24]13171 	lcall	_setCursor
                                  13172 ;	.\ecen4350_lcd_v4.c:3145: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      004AF1 90 66 76         [24]13173 	mov	dptr,#___str_149
      004AF4 75 F0 80         [24]13174 	mov	b,#0x80
      004AF7 12 10 D9         [24]13175 	lcall	_LCD_string_write
      004AFA D0 06            [24]13176 	pop	ar6
      004AFC D0 07            [24]13177 	pop	ar7
                                  13178 ;	.\ecen4350_lcd_v4.c:3146: goto mainInput;
      004AFE 02 48 CB         [24]13179 	ljmp	00147$
      004B01                      13180 00163$:
                                  13181 ;	.\ecen4350_lcd_v4.c:3147: } if (UART_en == 0) goto setBit;
      004B01 78 72            [12]13182 	mov	r0,#_UART_en
      004B03 E6               [12]13183 	mov	a,@r0
      004B04 70 03            [24]13184 	jnz	00684$
      004B06 02 4F 70         [24]13185 	ljmp	00221$
      004B09                      13186 00684$:
      004B09                      13187 00167$:
                                  13188 ;	.\ecen4350_lcd_v4.c:3148: } if (selection == '3') {
      004B09 78 71            [12]13189 	mov	r0,#_selection
      004B0B B6 33 02         [24]13190 	cjne	@r0,#0x33,00685$
      004B0E 80 03            [24]13191 	sjmp	00686$
      004B10                      13192 00685$:
      004B10 02 4B B4         [24]13193 	ljmp	00173$
      004B13                      13194 00686$:
                                  13195 ;	.\ecen4350_lcd_v4.c:3149: setCursor (0, 140);
      004B13 75 6B 8C         [24]13196 	mov	_setCursor_PARM_2,#0x8c
      004B16 75 6C 00         [24]13197 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B19 90 00 00         [24]13198 	mov	dptr,#0x0000
      004B1C C0 07            [24]13199 	push	ar7
      004B1E C0 06            [24]13200 	push	ar6
      004B20 12 05 BF         [24]13201 	lcall	_setCursor
                                  13202 ;	.\ecen4350_lcd_v4.c:3150: LCD_string_write(" ");
      004B23 90 5F 84         [24]13203 	mov	dptr,#___str_30
      004B26 75 F0 80         [24]13204 	mov	b,#0x80
      004B29 12 10 D9         [24]13205 	lcall	_LCD_string_write
                                  13206 ;	.\ecen4350_lcd_v4.c:3151: setColorHighlight1();
      004B2C 12 16 B3         [24]13207 	lcall	_setColorHighlight1
                                  13208 ;	.\ecen4350_lcd_v4.c:3152: LCD_string_write("<3> ");
      004B2F 90 67 E0         [24]13209 	mov	dptr,#___str_176
      004B32 75 F0 80         [24]13210 	mov	b,#0x80
      004B35 12 10 D9         [24]13211 	lcall	_LCD_string_write
                                  13212 ;	.\ecen4350_lcd_v4.c:3153: setColorHighlight2();
      004B38 12 16 BF         [24]13213 	lcall	_setColorHighlight2
                                  13214 ;	.\ecen4350_lcd_v4.c:3154: LCD_string_write("Parity ");
      004B3B 90 67 E5         [24]13215 	mov	dptr,#___str_177
      004B3E 75 F0 80         [24]13216 	mov	b,#0x80
      004B41 12 10 D9         [24]13217 	lcall	_LCD_string_write
                                  13218 ;	.\ecen4350_lcd_v4.c:3155: setColorHighlight1();
      004B44 12 16 B3         [24]13219 	lcall	_setColorHighlight1
                                  13220 ;	.\ecen4350_lcd_v4.c:3156: LCD_string_write("(Even/\n");
      004B47 90 67 ED         [24]13221 	mov	dptr,#___str_178
      004B4A 75 F0 80         [24]13222 	mov	b,#0x80
      004B4D 12 10 D9         [24]13223 	lcall	_LCD_string_write
                                  13224 ;	.\ecen4350_lcd_v4.c:3157: setColorDefault();
      004B50 12 16 9D         [24]13225 	lcall	_setColorDefault
                                  13226 ;	.\ecen4350_lcd_v4.c:3158: LCD_string_write("     ");
      004B53 90 67 4F         [24]13227 	mov	dptr,#___str_165
      004B56 75 F0 80         [24]13228 	mov	b,#0x80
      004B59 12 10 D9         [24]13229 	lcall	_LCD_string_write
                                  13230 ;	.\ecen4350_lcd_v4.c:3159: setColorHighlight1();
      004B5C 12 16 B3         [24]13231 	lcall	_setColorHighlight1
                                  13232 ;	.\ecen4350_lcd_v4.c:3160: LCD_string_write("(Odd/None)\n");
      004B5F 90 67 F5         [24]13233 	mov	dptr,#___str_179
      004B62 75 F0 80         [24]13234 	mov	b,#0x80
      004B65 12 10 D9         [24]13235 	lcall	_LCD_string_write
      004B68 D0 06            [24]13236 	pop	ar6
      004B6A D0 07            [24]13237 	pop	ar7
                                  13238 ;	.\ecen4350_lcd_v4.c:3161: if (UART_en == 1) {
      004B6C 78 72            [12]13239 	mov	r0,#_UART_en
      004B6E B6 01 3B         [24]13240 	cjne	@r0,#0x01,00169$
                                  13241 ;	.\ecen4350_lcd_v4.c:3162: setCursor(0, 200);
      004B71 75 6B C8         [24]13242 	mov	_setCursor_PARM_2,#0xc8
      004B74 75 6C 00         [24]13243 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B77 90 00 00         [24]13244 	mov	dptr,#0x0000
      004B7A C0 07            [24]13245 	push	ar7
      004B7C C0 06            [24]13246 	push	ar6
      004B7E 12 05 BF         [24]13247 	lcall	_setCursor
                                  13248 ;	.\ecen4350_lcd_v4.c:3163: setColorRed();
      004B81 12 16 E2         [24]13249 	lcall	_setColorRed
                                  13250 ;	.\ecen4350_lcd_v4.c:3164: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004B84 90 67 9A         [24]13251 	mov	dptr,#___str_172
      004B87 75 F0 80         [24]13252 	mov	b,#0x80
      004B8A 12 10 D9         [24]13253 	lcall	_LCD_string_write
                                  13254 ;	.\ecen4350_lcd_v4.c:3165: setColorDefault();
      004B8D 12 16 9D         [24]13255 	lcall	_setColorDefault
                                  13256 ;	.\ecen4350_lcd_v4.c:3166: setCursor(0, 140);
      004B90 75 6B 8C         [24]13257 	mov	_setCursor_PARM_2,#0x8c
      004B93 75 6C 00         [24]13258 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B96 90 00 00         [24]13259 	mov	dptr,#0x0000
      004B99 12 05 BF         [24]13260 	lcall	_setCursor
                                  13261 ;	.\ecen4350_lcd_v4.c:3167: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004B9C 90 66 BB         [24]13262 	mov	dptr,#___str_155
      004B9F 75 F0 80         [24]13263 	mov	b,#0x80
      004BA2 12 10 D9         [24]13264 	lcall	_LCD_string_write
      004BA5 D0 06            [24]13265 	pop	ar6
      004BA7 D0 07            [24]13266 	pop	ar7
                                  13267 ;	.\ecen4350_lcd_v4.c:3168: goto mainInput;
      004BA9 02 48 CB         [24]13268 	ljmp	00147$
      004BAC                      13269 00169$:
                                  13270 ;	.\ecen4350_lcd_v4.c:3169: } if (UART_en == 0) goto setParity;
      004BAC 78 72            [12]13271 	mov	r0,#_UART_en
      004BAE E6               [12]13272 	mov	a,@r0
      004BAF 70 29            [24]13273 	jnz	00175$
      004BB1 02 50 9D         [24]13274 	ljmp	00228$
      004BB4                      13275 00173$:
                                  13276 ;	.\ecen4350_lcd_v4.c:3171: setColorRed();
      004BB4 C0 07            [24]13277 	push	ar7
      004BB6 C0 06            [24]13278 	push	ar6
      004BB8 12 16 E2         [24]13279 	lcall	_setColorRed
                                  13280 ;	.\ecen4350_lcd_v4.c:3172: setCursor(0, 200);
      004BBB 75 6B C8         [24]13281 	mov	_setCursor_PARM_2,#0xc8
      004BBE 75 6C 00         [24]13282 	mov	(_setCursor_PARM_2 + 1),#0x00
      004BC1 90 00 00         [24]13283 	mov	dptr,#0x0000
      004BC4 12 05 BF         [24]13284 	lcall	_setCursor
                                  13285 ;	.\ecen4350_lcd_v4.c:3173: LCD_string_write("\n\n\n\n Incorrect input\n  Try again.\n");
      004BC7 90 68 01         [24]13286 	mov	dptr,#___str_180
      004BCA 75 F0 80         [24]13287 	mov	b,#0x80
      004BCD 12 10 D9         [24]13288 	lcall	_LCD_string_write
                                  13289 ;	.\ecen4350_lcd_v4.c:3174: setColorDefault();
      004BD0 12 16 9D         [24]13290 	lcall	_setColorDefault
      004BD3 D0 06            [24]13291 	pop	ar6
      004BD5 D0 07            [24]13292 	pop	ar7
                                  13293 ;	.\ecen4350_lcd_v4.c:3175: goto mainInput;
      004BD7 02 48 CB         [24]13294 	ljmp	00147$
                                  13295 ;	.\ecen4350_lcd_v4.c:3178: verifyUART:
      004BDA                      13296 00175$:
                                  13297 ;	.\ecen4350_lcd_v4.c:3179: clearLCD();
      004BDA C0 07            [24]13298 	push	ar7
      004BDC C0 06            [24]13299 	push	ar6
      004BDE 12 0E 5C         [24]13300 	lcall	_clearLCD
                                  13301 ;	.\ecen4350_lcd_v4.c:3180: setCursor(0, 120);
      004BE1 75 6B 78         [24]13302 	mov	_setCursor_PARM_2,#0x78
      004BE4 75 6C 00         [24]13303 	mov	(_setCursor_PARM_2 + 1),#0x00
      004BE7 90 00 00         [24]13304 	mov	dptr,#0x0000
      004BEA 12 05 BF         [24]13305 	lcall	_setCursor
      004BED D0 06            [24]13306 	pop	ar6
      004BEF D0 07            [24]13307 	pop	ar7
                                  13308 ;	.\ecen4350_lcd_v4.c:3181: if (initLock == 1) {
      004BF1 BF 01 02         [24]13309 	cjne	r7,#0x01,00690$
      004BF4 80 03            [24]13310 	sjmp	00691$
      004BF6                      13311 00690$:
      004BF6 02 4C E9         [24]13312 	ljmp	00194$
      004BF9                      13313 00691$:
                                  13314 ;	.\ecen4350_lcd_v4.c:3182: if (UART_en == 1) {
      004BF9 78 72            [12]13315 	mov	r0,#_UART_en
      004BFB B6 01 26         [24]13316 	cjne	@r0,#0x01,00177$
                                  13317 ;	.\ecen4350_lcd_v4.c:3183: setColorGreen();
      004BFE C0 07            [24]13318 	push	ar7
      004C00 C0 06            [24]13319 	push	ar6
      004C02 12 16 F8         [24]13320 	lcall	_setColorGreen
                                  13321 ;	.\ecen4350_lcd_v4.c:3184: LCD_string_write("\n Disabling UART...\n");
      004C05 90 68 24         [24]13322 	mov	dptr,#___str_181
      004C08 75 F0 80         [24]13323 	mov	b,#0x80
      004C0B 12 10 D9         [24]13324 	lcall	_LCD_string_write
                                  13325 ;	.\ecen4350_lcd_v4.c:3185: UART_disable();
      004C0E 12 01 E7         [24]13326 	lcall	_UART_disable
                                  13327 ;	.\ecen4350_lcd_v4.c:3186: setColorDefault();
      004C11 12 16 9D         [24]13328 	lcall	_setColorDefault
                                  13329 ;	.\ecen4350_lcd_v4.c:3187: delay(40);
      004C14 90 00 28         [24]13330 	mov	dptr,#0x0028
      004C17 12 01 A9         [24]13331 	lcall	_delay
                                  13332 ;	.\ecen4350_lcd_v4.c:3188: setColorDefault();
      004C1A 12 16 9D         [24]13333 	lcall	_setColorDefault
      004C1D D0 06            [24]13334 	pop	ar6
      004C1F D0 07            [24]13335 	pop	ar7
                                  13336 ;	.\ecen4350_lcd_v4.c:3189: goto uartMenu;
      004C21 02 45 E8         [24]13337 	ljmp	00101$
      004C24                      13338 00177$:
                                  13339 ;	.\ecen4350_lcd_v4.c:3190: } if (UART_en == 0) {
      004C24 78 72            [12]13340 	mov	r0,#_UART_en
      004C26 E6               [12]13341 	mov	a,@r0
      004C27 60 03            [24]13342 	jz	00694$
      004C29 02 45 E8         [24]13343 	ljmp	00101$
      004C2C                      13344 00694$:
                                  13345 ;	.\ecen4350_lcd_v4.c:3191: if ((baudSet == 1) && (paritySet == 1) && (bitSet == 1)) {
      004C2C 78 73            [12]13346 	mov	r0,#_baudSet
      004C2E B6 01 33         [24]13347 	cjne	@r0,#0x01,00185$
      004C31 78 75            [12]13348 	mov	r0,#_paritySet
      004C33 B6 01 2E         [24]13349 	cjne	@r0,#0x01,00185$
      004C36 78 74            [12]13350 	mov	r0,#_bitSet
      004C38 B6 01 29         [24]13351 	cjne	@r0,#0x01,00185$
                                  13352 ;	.\ecen4350_lcd_v4.c:3192: setColorSelect();
      004C3B C0 07            [24]13353 	push	ar7
      004C3D C0 06            [24]13354 	push	ar6
      004C3F 12 16 A8         [24]13355 	lcall	_setColorSelect
                                  13356 ;	.\ecen4350_lcd_v4.c:3193: LCD_string_write("\n Settings Verified:\n");
      004C42 90 68 39         [24]13357 	mov	dptr,#___str_182
      004C45 75 F0 80         [24]13358 	mov	b,#0x80
      004C48 12 10 D9         [24]13359 	lcall	_LCD_string_write
                                  13360 ;	.\ecen4350_lcd_v4.c:3194: setColorDefault();
      004C4B 12 16 9D         [24]13361 	lcall	_setColorDefault
                                  13362 ;	.\ecen4350_lcd_v4.c:3195: LCD_string_write(" Enabling UART...");
      004C4E 90 68 4F         [24]13363 	mov	dptr,#___str_183
      004C51 75 F0 80         [24]13364 	mov	b,#0x80
      004C54 12 10 D9         [24]13365 	lcall	_LCD_string_write
                                  13366 ;	.\ecen4350_lcd_v4.c:3196: delay(40);
      004C57 90 00 28         [24]13367 	mov	dptr,#0x0028
      004C5A 12 01 A9         [24]13368 	lcall	_delay
      004C5D D0 06            [24]13369 	pop	ar6
      004C5F D0 07            [24]13370 	pop	ar7
                                  13371 ;	.\ecen4350_lcd_v4.c:3197: goto setFrame; //init UARt with settings
      004C61 02 52 AB         [24]13372 	ljmp	00255$
      004C64                      13373 00185$:
                                  13374 ;	.\ecen4350_lcd_v4.c:3199: if (baudSet == 0) {
      004C64 78 73            [12]13375 	mov	r0,#_baudSet
      004C66 E6               [12]13376 	mov	a,@r0
      004C67 70 28            [24]13377 	jnz	00179$
                                  13378 ;	.\ecen4350_lcd_v4.c:3200: setColorRed();
      004C69 C0 07            [24]13379 	push	ar7
      004C6B C0 06            [24]13380 	push	ar6
      004C6D 12 16 E2         [24]13381 	lcall	_setColorRed
                                  13382 ;	.\ecen4350_lcd_v4.c:3201: LCD_string_write(" BAUD ERROR\n");
      004C70 90 68 61         [24]13383 	mov	dptr,#___str_184
      004C73 75 F0 80         [24]13384 	mov	b,#0x80
      004C76 12 10 D9         [24]13385 	lcall	_LCD_string_write
                                  13386 ;	.\ecen4350_lcd_v4.c:3202: setColorDefault();
      004C79 12 16 9D         [24]13387 	lcall	_setColorDefault
                                  13388 ;	.\ecen4350_lcd_v4.c:3203: LCD_string_write(" Entering Baud...\n");
      004C7C 90 68 6E         [24]13389 	mov	dptr,#___str_185
      004C7F 75 F0 80         [24]13390 	mov	b,#0x80
      004C82 12 10 D9         [24]13391 	lcall	_LCD_string_write
                                  13392 ;	.\ecen4350_lcd_v4.c:3204: delay(40);
      004C85 90 00 28         [24]13393 	mov	dptr,#0x0028
      004C88 12 01 A9         [24]13394 	lcall	_delay
      004C8B D0 06            [24]13395 	pop	ar6
      004C8D D0 07            [24]13396 	pop	ar7
                                  13397 ;	.\ecen4350_lcd_v4.c:3205: goto setRate;
      004C8F 80 58            [24]13398 	sjmp	00194$
      004C91                      13399 00179$:
                                  13400 ;	.\ecen4350_lcd_v4.c:3206: } if (bitSet == 0) {
      004C91 78 74            [12]13401 	mov	r0,#_bitSet
      004C93 E6               [12]13402 	mov	a,@r0
      004C94 70 25            [24]13403 	jnz	00181$
                                  13404 ;	.\ecen4350_lcd_v4.c:3207: setColorRed();
      004C96 C0 07            [24]13405 	push	ar7
      004C98 12 16 E2         [24]13406 	lcall	_setColorRed
                                  13407 ;	.\ecen4350_lcd_v4.c:3208: LCD_string_write(" BIT ERROR\n");
      004C9B 90 68 81         [24]13408 	mov	dptr,#___str_186
      004C9E 75 F0 80         [24]13409 	mov	b,#0x80
      004CA1 12 10 D9         [24]13410 	lcall	_LCD_string_write
                                  13411 ;	.\ecen4350_lcd_v4.c:3209: setColorDefault();
      004CA4 12 16 9D         [24]13412 	lcall	_setColorDefault
                                  13413 ;	.\ecen4350_lcd_v4.c:3210: LCD_string_write(" Entering Bits...\n");
      004CA7 90 68 8D         [24]13414 	mov	dptr,#___str_187
      004CAA 75 F0 80         [24]13415 	mov	b,#0x80
      004CAD 12 10 D9         [24]13416 	lcall	_LCD_string_write
                                  13417 ;	.\ecen4350_lcd_v4.c:3211: delay(40);
      004CB0 90 00 28         [24]13418 	mov	dptr,#0x0028
      004CB3 12 01 A9         [24]13419 	lcall	_delay
      004CB6 D0 07            [24]13420 	pop	ar7
                                  13421 ;	.\ecen4350_lcd_v4.c:3212: goto setBit;
      004CB8 02 4F 70         [24]13422 	ljmp	00221$
      004CBB                      13423 00181$:
                                  13424 ;	.\ecen4350_lcd_v4.c:3213: } if (paritySet == 0) {
      004CBB 78 75            [12]13425 	mov	r0,#_paritySet
      004CBD E6               [12]13426 	mov	a,@r0
      004CBE 70 29            [24]13427 	jnz	00194$
                                  13428 ;	.\ecen4350_lcd_v4.c:3214: setColorRed();
      004CC0 C0 07            [24]13429 	push	ar7
      004CC2 C0 06            [24]13430 	push	ar6
      004CC4 12 16 E2         [24]13431 	lcall	_setColorRed
                                  13432 ;	.\ecen4350_lcd_v4.c:3215: LCD_string_write(" PARITY ERROR\n");
      004CC7 90 68 A0         [24]13433 	mov	dptr,#___str_188
      004CCA 75 F0 80         [24]13434 	mov	b,#0x80
      004CCD 12 10 D9         [24]13435 	lcall	_LCD_string_write
                                  13436 ;	.\ecen4350_lcd_v4.c:3216: setColorDefault();
      004CD0 12 16 9D         [24]13437 	lcall	_setColorDefault
                                  13438 ;	.\ecen4350_lcd_v4.c:3217: LCD_string_write(" Entering Parity...\n");
      004CD3 90 68 AF         [24]13439 	mov	dptr,#___str_189
      004CD6 75 F0 80         [24]13440 	mov	b,#0x80
      004CD9 12 10 D9         [24]13441 	lcall	_LCD_string_write
                                  13442 ;	.\ecen4350_lcd_v4.c:3218: delay(40);
      004CDC 90 00 28         [24]13443 	mov	dptr,#0x0028
      004CDF 12 01 A9         [24]13444 	lcall	_delay
      004CE2 D0 06            [24]13445 	pop	ar6
      004CE4 D0 07            [24]13446 	pop	ar7
                                  13447 ;	.\ecen4350_lcd_v4.c:3219: goto setParity;
      004CE6 02 50 9D         [24]13448 	ljmp	00228$
                                  13449 ;	.\ecen4350_lcd_v4.c:3225: setRate: 
      004CE9                      13450 00194$:
                                  13451 ;	.\ecen4350_lcd_v4.c:3226: clearLCD();
      004CE9 C0 07            [24]13452 	push	ar7
      004CEB C0 06            [24]13453 	push	ar6
      004CED 12 0E 5C         [24]13454 	lcall	_clearLCD
                                  13455 ;	.\ecen4350_lcd_v4.c:3227: fillTop(GRAY);
      004CF0 90 D6 BA         [24]13456 	mov	dptr,#0xd6ba
      004CF3 12 0C 8F         [24]13457 	lcall	_fillTop
                                  13458 ;	.\ecen4350_lcd_v4.c:3228: setTextSize(5);
      004CF6 75 82 05         [24]13459 	mov	dpl,#0x05
      004CF9 12 05 D9         [24]13460 	lcall	_setTextSize
                                  13461 ;	.\ecen4350_lcd_v4.c:3229: setColorMenu();
      004CFC 12 16 D6         [24]13462 	lcall	_setColorMenu
                                  13463 ;	.\ecen4350_lcd_v4.c:3230: setCursor(30, 0);
      004CFF E4               [12]13464 	clr	a
      004D00 F5 6B            [12]13465 	mov	_setCursor_PARM_2,a
      004D02 F5 6C            [12]13466 	mov	(_setCursor_PARM_2 + 1),a
      004D04 90 00 1E         [24]13467 	mov	dptr,#0x001e
      004D07 12 05 BF         [24]13468 	lcall	_setCursor
                                  13469 ;	.\ecen4350_lcd_v4.c:3231: LCD_string_write("[UART]\n");
      004D0A 90 66 1E         [24]13470 	mov	dptr,#___str_136
      004D0D 75 F0 80         [24]13471 	mov	b,#0x80
      004D10 12 10 D9         [24]13472 	lcall	_LCD_string_write
                                  13473 ;	.\ecen4350_lcd_v4.c:3232: setTextSize(2);
      004D13 75 82 02         [24]13474 	mov	dpl,#0x02
      004D16 12 05 D9         [24]13475 	lcall	_setTextSize
                                  13476 ;	.\ecen4350_lcd_v4.c:3233: setColorDefault();
      004D19 12 16 9D         [24]13477 	lcall	_setColorDefault
                                  13478 ;	.\ecen4350_lcd_v4.c:3234: setCursor(0, 60);
      004D1C 75 6B 3C         [24]13479 	mov	_setCursor_PARM_2,#0x3c
      004D1F 75 6C 00         [24]13480 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D22 90 00 00         [24]13481 	mov	dptr,#0x0000
      004D25 12 05 BF         [24]13482 	lcall	_setCursor
                                  13483 ;	.\ecen4350_lcd_v4.c:3235: LCD_string_write(" <1> 1200 Baud\n");
      004D28 90 68 C4         [24]13484 	mov	dptr,#___str_190
      004D2B 75 F0 80         [24]13485 	mov	b,#0x80
      004D2E 12 10 D9         [24]13486 	lcall	_LCD_string_write
                                  13487 ;	.\ecen4350_lcd_v4.c:3236: setCursor(0, 100);
      004D31 75 6B 64         [24]13488 	mov	_setCursor_PARM_2,#0x64
      004D34 75 6C 00         [24]13489 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D37 90 00 00         [24]13490 	mov	dptr,#0x0000
      004D3A 12 05 BF         [24]13491 	lcall	_setCursor
                                  13492 ;	.\ecen4350_lcd_v4.c:3237: LCD_string_write(" <2> 2400 Baud\n");
      004D3D 90 68 D4         [24]13493 	mov	dptr,#___str_191
      004D40 75 F0 80         [24]13494 	mov	b,#0x80
      004D43 12 10 D9         [24]13495 	lcall	_LCD_string_write
                                  13496 ;	.\ecen4350_lcd_v4.c:3238: setCursor(0, 140);
      004D46 75 6B 8C         [24]13497 	mov	_setCursor_PARM_2,#0x8c
      004D49 75 6C 00         [24]13498 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D4C 90 00 00         [24]13499 	mov	dptr,#0x0000
      004D4F 12 05 BF         [24]13500 	lcall	_setCursor
                                  13501 ;	.\ecen4350_lcd_v4.c:3239: LCD_string_write(" <3> 4800 Baud\n");
      004D52 90 68 E4         [24]13502 	mov	dptr,#___str_192
      004D55 75 F0 80         [24]13503 	mov	b,#0x80
      004D58 12 10 D9         [24]13504 	lcall	_LCD_string_write
                                  13505 ;	.\ecen4350_lcd_v4.c:3240: setCursor(0, 180);
      004D5B 75 6B B4         [24]13506 	mov	_setCursor_PARM_2,#0xb4
      004D5E 75 6C 00         [24]13507 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D61 90 00 00         [24]13508 	mov	dptr,#0x0000
      004D64 12 05 BF         [24]13509 	lcall	_setCursor
                                  13510 ;	.\ecen4350_lcd_v4.c:3241: LCD_string_write(" <4> 9600 Baud\n");
      004D67 90 68 F4         [24]13511 	mov	dptr,#___str_193
      004D6A 75 F0 80         [24]13512 	mov	b,#0x80
      004D6D 12 10 D9         [24]13513 	lcall	_LCD_string_write
                                  13514 ;	.\ecen4350_lcd_v4.c:3242: setCursor(0, 220);
      004D70 75 6B DC         [24]13515 	mov	_setCursor_PARM_2,#0xdc
      004D73 75 6C 00         [24]13516 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D76 90 00 00         [24]13517 	mov	dptr,#0x0000
      004D79 12 05 BF         [24]13518 	lcall	_setCursor
                                  13519 ;	.\ecen4350_lcd_v4.c:3243: LCD_string_write(" <5> 19200 Baud\n");
      004D7C 90 69 04         [24]13520 	mov	dptr,#___str_194
      004D7F 75 F0 80         [24]13521 	mov	b,#0x80
      004D82 12 10 D9         [24]13522 	lcall	_LCD_string_write
      004D85 D0 06            [24]13523 	pop	ar6
      004D87 D0 07            [24]13524 	pop	ar7
                                  13525 ;	.\ecen4350_lcd_v4.c:3244: baudInput:
      004D89                      13526 00195$:
                                  13527 ;	.\ecen4350_lcd_v4.c:3245: selection = keyDetect();
      004D89 C0 07            [24]13528 	push	ar7
      004D8B C0 06            [24]13529 	push	ar6
      004D8D 12 11 F7         [24]13530 	lcall	_keyDetect
      004D90 AD 82            [24]13531 	mov	r5,dpl
      004D92 D0 06            [24]13532 	pop	ar6
      004D94 D0 07            [24]13533 	pop	ar7
      004D96 78 71            [12]13534 	mov	r0,#_selection
      004D98 A6 05            [24]13535 	mov	@r0,ar5
                                  13536 ;	.\ecen4350_lcd_v4.c:3246: if (selection == '1' ) {
      004D9A BD 31 4E         [24]13537 	cjne	r5,#0x31,00200$
                                  13538 ;	.\ecen4350_lcd_v4.c:3247: setCursor(0, 60);
      004D9D 75 6B 3C         [24]13539 	mov	_setCursor_PARM_2,#0x3c
      004DA0 75 6C 00         [24]13540 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DA3 90 00 00         [24]13541 	mov	dptr,#0x0000
      004DA6 C0 07            [24]13542 	push	ar7
      004DA8 C0 06            [24]13543 	push	ar6
      004DAA 12 05 BF         [24]13544 	lcall	_setCursor
                                  13545 ;	.\ecen4350_lcd_v4.c:3248: LCD_string_write(" ");
      004DAD 90 5F 84         [24]13546 	mov	dptr,#___str_30
      004DB0 75 F0 80         [24]13547 	mov	b,#0x80
      004DB3 12 10 D9         [24]13548 	lcall	_LCD_string_write
                                  13549 ;	.\ecen4350_lcd_v4.c:3249: setColorHighlight1();
      004DB6 12 16 B3         [24]13550 	lcall	_setColorHighlight1
                                  13551 ;	.\ecen4350_lcd_v4.c:3250: LCD_string_write("<1> ");
      004DB9 90 67 86         [24]13552 	mov	dptr,#___str_170
      004DBC 75 F0 80         [24]13553 	mov	b,#0x80
      004DBF 12 10 D9         [24]13554 	lcall	_LCD_string_write
                                  13555 ;	.\ecen4350_lcd_v4.c:3251: setColorHighlight2();
      004DC2 12 16 BF         [24]13556 	lcall	_setColorHighlight2
                                  13557 ;	.\ecen4350_lcd_v4.c:3252: LCD_string_write("1200 Baud\n");
      004DC5 90 69 15         [24]13558 	mov	dptr,#___str_195
      004DC8 75 F0 80         [24]13559 	mov	b,#0x80
      004DCB 12 10 D9         [24]13560 	lcall	_LCD_string_write
      004DCE D0 06            [24]13561 	pop	ar6
      004DD0 D0 07            [24]13562 	pop	ar7
                                  13563 ;	.\ecen4350_lcd_v4.c:3253: TH1 = 0xE6;	// 1200 baud
      004DD2 75 8D E6         [24]13564 	mov	_TH1,#0xe6
                                  13565 ;	.\ecen4350_lcd_v4.c:3254: PCON = 0x00; //SMOD = 0
      004DD5 75 87 00         [24]13566 	mov	_PCON,#0x00
                                  13567 ;	.\ecen4350_lcd_v4.c:3255: baudSet = 1;
      004DD8 78 73            [12]13568 	mov	r0,#_baudSet
      004DDA 76 01            [12]13569 	mov	@r0,#0x01
                                  13570 ;	.\ecen4350_lcd_v4.c:3256: baudType = 0x1;
      004DDC 78 78            [12]13571 	mov	r0,#_baudType
      004DDE 76 01            [12]13572 	mov	@r0,#0x01
                                  13573 ;	.\ecen4350_lcd_v4.c:3257: if (initLock == 1) goto cont;
      004DE0 BF 01 02         [24]13574 	cjne	r7,#0x01,00706$
      004DE3 80 03            [24]13575 	sjmp	00707$
      004DE5                      13576 00706$:
      004DE5 02 45 E8         [24]13577 	ljmp	00101$
      004DE8                      13578 00707$:
      004DE8 02 53 AA         [24]13579 	ljmp	00278$
                                  13580 ;	.\ecen4350_lcd_v4.c:3258: else goto uartMenu;
      004DEB                      13581 00200$:
                                  13582 ;	.\ecen4350_lcd_v4.c:3260: if (selection == '2' ) {
      004DEB BD 32 4E         [24]13583 	cjne	r5,#0x32,00205$
                                  13584 ;	.\ecen4350_lcd_v4.c:3261: setCursor(0, 100);
      004DEE 75 6B 64         [24]13585 	mov	_setCursor_PARM_2,#0x64
      004DF1 75 6C 00         [24]13586 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DF4 90 00 00         [24]13587 	mov	dptr,#0x0000
      004DF7 C0 07            [24]13588 	push	ar7
      004DF9 C0 06            [24]13589 	push	ar6
      004DFB 12 05 BF         [24]13590 	lcall	_setCursor
                                  13591 ;	.\ecen4350_lcd_v4.c:3262: LCD_string_write(" ");
      004DFE 90 5F 84         [24]13592 	mov	dptr,#___str_30
      004E01 75 F0 80         [24]13593 	mov	b,#0x80
      004E04 12 10 D9         [24]13594 	lcall	_LCD_string_write
                                  13595 ;	.\ecen4350_lcd_v4.c:3263: setColorHighlight1();
      004E07 12 16 B3         [24]13596 	lcall	_setColorHighlight1
                                  13597 ;	.\ecen4350_lcd_v4.c:3264: LCD_string_write("<2> ");
      004E0A 90 67 BC         [24]13598 	mov	dptr,#___str_173
      004E0D 75 F0 80         [24]13599 	mov	b,#0x80
      004E10 12 10 D9         [24]13600 	lcall	_LCD_string_write
                                  13601 ;	.\ecen4350_lcd_v4.c:3265: setColorHighlight2();
      004E13 12 16 BF         [24]13602 	lcall	_setColorHighlight2
                                  13603 ;	.\ecen4350_lcd_v4.c:3266: LCD_string_write("2400 Baud\n");
      004E16 90 69 20         [24]13604 	mov	dptr,#___str_196
      004E19 75 F0 80         [24]13605 	mov	b,#0x80
      004E1C 12 10 D9         [24]13606 	lcall	_LCD_string_write
      004E1F D0 06            [24]13607 	pop	ar6
      004E21 D0 07            [24]13608 	pop	ar7
                                  13609 ;	.\ecen4350_lcd_v4.c:3267: TH1 = 0xF3; // 2400 baud
      004E23 75 8D F3         [24]13610 	mov	_TH1,#0xf3
                                  13611 ;	.\ecen4350_lcd_v4.c:3268: PCON = 0x00; //SMOD = 0
      004E26 75 87 00         [24]13612 	mov	_PCON,#0x00
                                  13613 ;	.\ecen4350_lcd_v4.c:3269: baudSet = 1;
      004E29 78 73            [12]13614 	mov	r0,#_baudSet
      004E2B 76 01            [12]13615 	mov	@r0,#0x01
                                  13616 ;	.\ecen4350_lcd_v4.c:3270: baudType = 0x2;
      004E2D 78 78            [12]13617 	mov	r0,#_baudType
      004E2F 76 02            [12]13618 	mov	@r0,#0x02
                                  13619 ;	.\ecen4350_lcd_v4.c:3271: if (initLock == 1) goto cont;
      004E31 BF 01 02         [24]13620 	cjne	r7,#0x01,00710$
      004E34 80 03            [24]13621 	sjmp	00711$
      004E36                      13622 00710$:
      004E36 02 45 E8         [24]13623 	ljmp	00101$
      004E39                      13624 00711$:
      004E39 02 53 AA         [24]13625 	ljmp	00278$
                                  13626 ;	.\ecen4350_lcd_v4.c:3272: else goto uartMenu;
      004E3C                      13627 00205$:
                                  13628 ;	.\ecen4350_lcd_v4.c:3274: if (selection == '3' ) {
      004E3C BD 33 4E         [24]13629 	cjne	r5,#0x33,00210$
                                  13630 ;	.\ecen4350_lcd_v4.c:3275: setCursor(0, 140);
      004E3F 75 6B 8C         [24]13631 	mov	_setCursor_PARM_2,#0x8c
      004E42 75 6C 00         [24]13632 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E45 90 00 00         [24]13633 	mov	dptr,#0x0000
      004E48 C0 07            [24]13634 	push	ar7
      004E4A C0 06            [24]13635 	push	ar6
      004E4C 12 05 BF         [24]13636 	lcall	_setCursor
                                  13637 ;	.\ecen4350_lcd_v4.c:3276: LCD_string_write(" ");
      004E4F 90 5F 84         [24]13638 	mov	dptr,#___str_30
      004E52 75 F0 80         [24]13639 	mov	b,#0x80
      004E55 12 10 D9         [24]13640 	lcall	_LCD_string_write
                                  13641 ;	.\ecen4350_lcd_v4.c:3277: setColorHighlight1();
      004E58 12 16 B3         [24]13642 	lcall	_setColorHighlight1
                                  13643 ;	.\ecen4350_lcd_v4.c:3278: LCD_string_write("<3> ");
      004E5B 90 67 E0         [24]13644 	mov	dptr,#___str_176
      004E5E 75 F0 80         [24]13645 	mov	b,#0x80
      004E61 12 10 D9         [24]13646 	lcall	_LCD_string_write
                                  13647 ;	.\ecen4350_lcd_v4.c:3279: setColorHighlight2();
      004E64 12 16 BF         [24]13648 	lcall	_setColorHighlight2
                                  13649 ;	.\ecen4350_lcd_v4.c:3280: LCD_string_write("4800 Baud\n");
      004E67 90 69 2B         [24]13650 	mov	dptr,#___str_197
      004E6A 75 F0 80         [24]13651 	mov	b,#0x80
      004E6D 12 10 D9         [24]13652 	lcall	_LCD_string_write
      004E70 D0 06            [24]13653 	pop	ar6
      004E72 D0 07            [24]13654 	pop	ar7
                                  13655 ;	.\ecen4350_lcd_v4.c:3281: TH1 = 0xF3; //4800 baud
      004E74 75 8D F3         [24]13656 	mov	_TH1,#0xf3
                                  13657 ;	.\ecen4350_lcd_v4.c:3282: PCON = 0x80; //SMOD 1
      004E77 75 87 80         [24]13658 	mov	_PCON,#0x80
                                  13659 ;	.\ecen4350_lcd_v4.c:3283: baudSet = 1; 
      004E7A 78 73            [12]13660 	mov	r0,#_baudSet
      004E7C 76 01            [12]13661 	mov	@r0,#0x01
                                  13662 ;	.\ecen4350_lcd_v4.c:3284: baudType = 0x3;
      004E7E 78 78            [12]13663 	mov	r0,#_baudType
      004E80 76 03            [12]13664 	mov	@r0,#0x03
                                  13665 ;	.\ecen4350_lcd_v4.c:3285: if (initLock == 1) goto cont;
      004E82 BF 01 02         [24]13666 	cjne	r7,#0x01,00714$
      004E85 80 03            [24]13667 	sjmp	00715$
      004E87                      13668 00714$:
      004E87 02 45 E8         [24]13669 	ljmp	00101$
      004E8A                      13670 00715$:
      004E8A 02 53 AA         [24]13671 	ljmp	00278$
                                  13672 ;	.\ecen4350_lcd_v4.c:3286: else goto uartMenu;
      004E8D                      13673 00210$:
                                  13674 ;	.\ecen4350_lcd_v4.c:3288: if (selection == '4' ) {
      004E8D BD 34 4E         [24]13675 	cjne	r5,#0x34,00215$
                                  13676 ;	.\ecen4350_lcd_v4.c:3289: setCursor(0, 180);
      004E90 75 6B B4         [24]13677 	mov	_setCursor_PARM_2,#0xb4
      004E93 75 6C 00         [24]13678 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E96 90 00 00         [24]13679 	mov	dptr,#0x0000
      004E99 C0 07            [24]13680 	push	ar7
      004E9B C0 06            [24]13681 	push	ar6
      004E9D 12 05 BF         [24]13682 	lcall	_setCursor
                                  13683 ;	.\ecen4350_lcd_v4.c:3290: LCD_string_write(" ");
      004EA0 90 5F 84         [24]13684 	mov	dptr,#___str_30
      004EA3 75 F0 80         [24]13685 	mov	b,#0x80
      004EA6 12 10 D9         [24]13686 	lcall	_LCD_string_write
                                  13687 ;	.\ecen4350_lcd_v4.c:3291: setColorHighlight1();
      004EA9 12 16 B3         [24]13688 	lcall	_setColorHighlight1
                                  13689 ;	.\ecen4350_lcd_v4.c:3292: LCD_string_write("<4> ");
      004EAC 90 67 3C         [24]13690 	mov	dptr,#___str_163
      004EAF 75 F0 80         [24]13691 	mov	b,#0x80
      004EB2 12 10 D9         [24]13692 	lcall	_LCD_string_write
                                  13693 ;	.\ecen4350_lcd_v4.c:3293: setColorHighlight2();
      004EB5 12 16 BF         [24]13694 	lcall	_setColorHighlight2
                                  13695 ;	.\ecen4350_lcd_v4.c:3294: LCD_string_write("9600 Baud\n");
      004EB8 90 69 36         [24]13696 	mov	dptr,#___str_198
      004EBB 75 F0 80         [24]13697 	mov	b,#0x80
      004EBE 12 10 D9         [24]13698 	lcall	_LCD_string_write
      004EC1 D0 06            [24]13699 	pop	ar6
      004EC3 D0 07            [24]13700 	pop	ar7
                                  13701 ;	.\ecen4350_lcd_v4.c:3295: TH1 = 0xFD; //9600 baud
      004EC5 75 8D FD         [24]13702 	mov	_TH1,#0xfd
                                  13703 ;	.\ecen4350_lcd_v4.c:3296: PCON = 0x00; //SMOD 0
      004EC8 75 87 00         [24]13704 	mov	_PCON,#0x00
                                  13705 ;	.\ecen4350_lcd_v4.c:3297: baudSet = 1;
      004ECB 78 73            [12]13706 	mov	r0,#_baudSet
      004ECD 76 01            [12]13707 	mov	@r0,#0x01
                                  13708 ;	.\ecen4350_lcd_v4.c:3298: baudType = 0x4;
      004ECF 78 78            [12]13709 	mov	r0,#_baudType
      004ED1 76 04            [12]13710 	mov	@r0,#0x04
                                  13711 ;	.\ecen4350_lcd_v4.c:3299: if (initLock == 1) goto cont;
      004ED3 BF 01 02         [24]13712 	cjne	r7,#0x01,00718$
      004ED6 80 03            [24]13713 	sjmp	00719$
      004ED8                      13714 00718$:
      004ED8 02 45 E8         [24]13715 	ljmp	00101$
      004EDB                      13716 00719$:
      004EDB 02 53 AA         [24]13717 	ljmp	00278$
                                  13718 ;	.\ecen4350_lcd_v4.c:3300: else goto uartMenu;
      004EDE                      13719 00215$:
                                  13720 ;	.\ecen4350_lcd_v4.c:3302: if (selection == '5' ) {
      004EDE BD 35 4E         [24]13721 	cjne	r5,#0x35,00219$
                                  13722 ;	.\ecen4350_lcd_v4.c:3303: setCursor(0, 220);
      004EE1 75 6B DC         [24]13723 	mov	_setCursor_PARM_2,#0xdc
      004EE4 75 6C 00         [24]13724 	mov	(_setCursor_PARM_2 + 1),#0x00
      004EE7 90 00 00         [24]13725 	mov	dptr,#0x0000
      004EEA C0 07            [24]13726 	push	ar7
      004EEC C0 06            [24]13727 	push	ar6
      004EEE 12 05 BF         [24]13728 	lcall	_setCursor
                                  13729 ;	.\ecen4350_lcd_v4.c:3304: LCD_string_write(" ");
      004EF1 90 5F 84         [24]13730 	mov	dptr,#___str_30
      004EF4 75 F0 80         [24]13731 	mov	b,#0x80
      004EF7 12 10 D9         [24]13732 	lcall	_LCD_string_write
                                  13733 ;	.\ecen4350_lcd_v4.c:3305: setColorHighlight1();
      004EFA 12 16 B3         [24]13734 	lcall	_setColorHighlight1
                                  13735 ;	.\ecen4350_lcd_v4.c:3306: LCD_string_write("<5> ");
      004EFD 90 69 41         [24]13736 	mov	dptr,#___str_199
      004F00 75 F0 80         [24]13737 	mov	b,#0x80
      004F03 12 10 D9         [24]13738 	lcall	_LCD_string_write
                                  13739 ;	.\ecen4350_lcd_v4.c:3307: setColorHighlight2();
      004F06 12 16 BF         [24]13740 	lcall	_setColorHighlight2
                                  13741 ;	.\ecen4350_lcd_v4.c:3308: LCD_string_write("19200 Baud\n");
      004F09 90 69 46         [24]13742 	mov	dptr,#___str_200
      004F0C 75 F0 80         [24]13743 	mov	b,#0x80
      004F0F 12 10 D9         [24]13744 	lcall	_LCD_string_write
      004F12 D0 06            [24]13745 	pop	ar6
      004F14 D0 07            [24]13746 	pop	ar7
                                  13747 ;	.\ecen4350_lcd_v4.c:3309: TH1 = 0xFD;	//19200 baud
      004F16 75 8D FD         [24]13748 	mov	_TH1,#0xfd
                                  13749 ;	.\ecen4350_lcd_v4.c:3310: PCON = 0x80; //SMOD 1
      004F19 75 87 80         [24]13750 	mov	_PCON,#0x80
                                  13751 ;	.\ecen4350_lcd_v4.c:3311: baudSet = 1;
      004F1C 78 73            [12]13752 	mov	r0,#_baudSet
      004F1E 76 01            [12]13753 	mov	@r0,#0x01
                                  13754 ;	.\ecen4350_lcd_v4.c:3312: baudType = 0x5;
      004F20 78 78            [12]13755 	mov	r0,#_baudType
      004F22 76 05            [12]13756 	mov	@r0,#0x05
                                  13757 ;	.\ecen4350_lcd_v4.c:3313: if (initLock == 1) goto cont;
      004F24 BF 01 02         [24]13758 	cjne	r7,#0x01,00722$
      004F27 80 03            [24]13759 	sjmp	00723$
      004F29                      13760 00722$:
      004F29 02 45 E8         [24]13761 	ljmp	00101$
      004F2C                      13762 00723$:
      004F2C 02 53 AA         [24]13763 	ljmp	00278$
                                  13764 ;	.\ecen4350_lcd_v4.c:3314: goto uartMenu;
      004F2F                      13765 00219$:
                                  13766 ;	.\ecen4350_lcd_v4.c:3316: setColorRed();
      004F2F C0 07            [24]13767 	push	ar7
      004F31 C0 06            [24]13768 	push	ar6
      004F33 12 16 E2         [24]13769 	lcall	_setColorRed
                                  13770 ;	.\ecen4350_lcd_v4.c:3317: setCursor(0, 240);
      004F36 75 6B F0         [24]13771 	mov	_setCursor_PARM_2,#0xf0
      004F39 75 6C 00         [24]13772 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F3C 90 00 00         [24]13773 	mov	dptr,#0x0000
      004F3F 12 05 BF         [24]13774 	lcall	_setCursor
                                  13775 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write(" INPUT ERROR");
      004F42 90 69 52         [24]13776 	mov	dptr,#___str_201
      004F45 75 F0 80         [24]13777 	mov	b,#0x80
      004F48 12 10 D9         [24]13778 	lcall	_LCD_string_write
                                  13779 ;	.\ecen4350_lcd_v4.c:3319: delay(20);
      004F4B 90 00 14         [24]13780 	mov	dptr,#0x0014
      004F4E 12 01 A9         [24]13781 	lcall	_delay
                                  13782 ;	.\ecen4350_lcd_v4.c:3320: setColorDefault();
      004F51 12 16 9D         [24]13783 	lcall	_setColorDefault
                                  13784 ;	.\ecen4350_lcd_v4.c:3321: setCursor(0, 240);
      004F54 75 6B F0         [24]13785 	mov	_setCursor_PARM_2,#0xf0
      004F57 75 6C 00         [24]13786 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F5A 90 00 00         [24]13787 	mov	dptr,#0x0000
      004F5D 12 05 BF         [24]13788 	lcall	_setCursor
                                  13789 ;	.\ecen4350_lcd_v4.c:3322: LCD_string_write("            ");
      004F60 90 69 5F         [24]13790 	mov	dptr,#___str_202
      004F63 75 F0 80         [24]13791 	mov	b,#0x80
      004F66 12 10 D9         [24]13792 	lcall	_LCD_string_write
      004F69 D0 06            [24]13793 	pop	ar6
      004F6B D0 07            [24]13794 	pop	ar7
                                  13795 ;	.\ecen4350_lcd_v4.c:3323: goto baudInput;
      004F6D 02 4D 89         [24]13796 	ljmp	00195$
                                  13797 ;	.\ecen4350_lcd_v4.c:3326: setBit:
      004F70                      13798 00221$:
                                  13799 ;	.\ecen4350_lcd_v4.c:3327: clearLCD();
      004F70 C0 07            [24]13800 	push	ar7
      004F72 12 0E 5C         [24]13801 	lcall	_clearLCD
                                  13802 ;	.\ecen4350_lcd_v4.c:3328: fillTop(GRAY);
      004F75 90 D6 BA         [24]13803 	mov	dptr,#0xd6ba
      004F78 12 0C 8F         [24]13804 	lcall	_fillTop
                                  13805 ;	.\ecen4350_lcd_v4.c:3329: setTextSize(5);
      004F7B 75 82 05         [24]13806 	mov	dpl,#0x05
      004F7E 12 05 D9         [24]13807 	lcall	_setTextSize
                                  13808 ;	.\ecen4350_lcd_v4.c:3330: setColorMenu();
      004F81 12 16 D6         [24]13809 	lcall	_setColorMenu
                                  13810 ;	.\ecen4350_lcd_v4.c:3331: setCursor(30, 0);
      004F84 E4               [12]13811 	clr	a
      004F85 F5 6B            [12]13812 	mov	_setCursor_PARM_2,a
      004F87 F5 6C            [12]13813 	mov	(_setCursor_PARM_2 + 1),a
      004F89 90 00 1E         [24]13814 	mov	dptr,#0x001e
      004F8C 12 05 BF         [24]13815 	lcall	_setCursor
                                  13816 ;	.\ecen4350_lcd_v4.c:3332: LCD_string_write("[UART]\n");
      004F8F 90 66 1E         [24]13817 	mov	dptr,#___str_136
      004F92 75 F0 80         [24]13818 	mov	b,#0x80
      004F95 12 10 D9         [24]13819 	lcall	_LCD_string_write
                                  13820 ;	.\ecen4350_lcd_v4.c:3333: setTextSize(2);
      004F98 75 82 02         [24]13821 	mov	dpl,#0x02
      004F9B 12 05 D9         [24]13822 	lcall	_setTextSize
                                  13823 ;	.\ecen4350_lcd_v4.c:3334: setColorDefault();
      004F9E 12 16 9D         [24]13824 	lcall	_setColorDefault
                                  13825 ;	.\ecen4350_lcd_v4.c:3335: setCursor(0, 60);
      004FA1 75 6B 3C         [24]13826 	mov	_setCursor_PARM_2,#0x3c
      004FA4 75 6C 00         [24]13827 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FA7 90 00 00         [24]13828 	mov	dptr,#0x0000
      004FAA 12 05 BF         [24]13829 	lcall	_setCursor
                                  13830 ;	.\ecen4350_lcd_v4.c:3336: LCD_string_write(" <1> 8-bit Mode\n");
      004FAD 90 69 6C         [24]13831 	mov	dptr,#___str_203
      004FB0 75 F0 80         [24]13832 	mov	b,#0x80
      004FB3 12 10 D9         [24]13833 	lcall	_LCD_string_write
                                  13834 ;	.\ecen4350_lcd_v4.c:3337: setCursor(0, 100);
      004FB6 75 6B 64         [24]13835 	mov	_setCursor_PARM_2,#0x64
      004FB9 75 6C 00         [24]13836 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FBC 90 00 00         [24]13837 	mov	dptr,#0x0000
      004FBF 12 05 BF         [24]13838 	lcall	_setCursor
                                  13839 ;	.\ecen4350_lcd_v4.c:3338: LCD_string_write(" <2> 9-bit Mode\n");
      004FC2 90 69 7D         [24]13840 	mov	dptr,#___str_204
      004FC5 75 F0 80         [24]13841 	mov	b,#0x80
      004FC8 12 10 D9         [24]13842 	lcall	_LCD_string_write
      004FCB D0 07            [24]13843 	pop	ar7
                                  13844 ;	.\ecen4350_lcd_v4.c:3339: sel:
      004FCD                      13845 00222$:
                                  13846 ;	.\ecen4350_lcd_v4.c:3340: selection = keyDetect();
      004FCD C0 07            [24]13847 	push	ar7
      004FCF 12 11 F7         [24]13848 	lcall	_keyDetect
      004FD2 AD 82            [24]13849 	mov	r5,dpl
      004FD4 D0 07            [24]13850 	pop	ar7
      004FD6 78 71            [12]13851 	mov	r0,#_selection
      004FD8 A6 05            [24]13852 	mov	@r0,ar5
                                  13853 ;	.\ecen4350_lcd_v4.c:3341: if (selection == '1') {
      004FDA BD 31 3E         [24]13854 	cjne	r5,#0x31,00224$
                                  13855 ;	.\ecen4350_lcd_v4.c:3342: setCursor(0, 60);
      004FDD 75 6B 3C         [24]13856 	mov	_setCursor_PARM_2,#0x3c
      004FE0 75 6C 00         [24]13857 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FE3 90 00 00         [24]13858 	mov	dptr,#0x0000
      004FE6 C0 07            [24]13859 	push	ar7
      004FE8 12 05 BF         [24]13860 	lcall	_setCursor
                                  13861 ;	.\ecen4350_lcd_v4.c:3343: LCD_string_write(" ");
      004FEB 90 5F 84         [24]13862 	mov	dptr,#___str_30
      004FEE 75 F0 80         [24]13863 	mov	b,#0x80
      004FF1 12 10 D9         [24]13864 	lcall	_LCD_string_write
                                  13865 ;	.\ecen4350_lcd_v4.c:3344: setColorHighlight1();
      004FF4 12 16 B3         [24]13866 	lcall	_setColorHighlight1
                                  13867 ;	.\ecen4350_lcd_v4.c:3345: LCD_string_write("<1> ");
      004FF7 90 67 86         [24]13868 	mov	dptr,#___str_170
      004FFA 75 F0 80         [24]13869 	mov	b,#0x80
      004FFD 12 10 D9         [24]13870 	lcall	_LCD_string_write
                                  13871 ;	.\ecen4350_lcd_v4.c:3346: setColorHighlight2();
      005000 12 16 BF         [24]13872 	lcall	_setColorHighlight2
                                  13873 ;	.\ecen4350_lcd_v4.c:3347: LCD_string_write("8-bit Mode\n");
      005003 90 69 8E         [24]13874 	mov	dptr,#___str_205
      005006 75 F0 80         [24]13875 	mov	b,#0x80
      005009 12 10 D9         [24]13876 	lcall	_LCD_string_write
      00500C D0 07            [24]13877 	pop	ar7
                                  13878 ;	.\ecen4350_lcd_v4.c:3348: bitSet = 1;
      00500E 78 74            [12]13879 	mov	r0,#_bitSet
      005010 76 01            [12]13880 	mov	@r0,#0x01
                                  13881 ;	.\ecen4350_lcd_v4.c:3349: _8b = 1;
      005012 78 7A            [12]13882 	mov	r0,#__8b
      005014 76 01            [12]13883 	mov	@r0,#0x01
                                  13884 ;	.\ecen4350_lcd_v4.c:3350: temp = 1;
      005016 7E 01            [12]13885 	mov	r6,#0x01
                                  13886 ;	.\ecen4350_lcd_v4.c:3351: goto cont;
      005018 02 53 AA         [24]13887 	ljmp	00278$
      00501B                      13888 00224$:
                                  13889 ;	.\ecen4350_lcd_v4.c:3352: } if (selection == '2') {
      00501B BD 32 3E         [24]13890 	cjne	r5,#0x32,00226$
                                  13891 ;	.\ecen4350_lcd_v4.c:3353: setCursor(0, 100);
      00501E 75 6B 64         [24]13892 	mov	_setCursor_PARM_2,#0x64
      005021 75 6C 00         [24]13893 	mov	(_setCursor_PARM_2 + 1),#0x00
      005024 90 00 00         [24]13894 	mov	dptr,#0x0000
      005027 C0 07            [24]13895 	push	ar7
      005029 12 05 BF         [24]13896 	lcall	_setCursor
                                  13897 ;	.\ecen4350_lcd_v4.c:3354: LCD_string_write(" ");
      00502C 90 5F 84         [24]13898 	mov	dptr,#___str_30
      00502F 75 F0 80         [24]13899 	mov	b,#0x80
      005032 12 10 D9         [24]13900 	lcall	_LCD_string_write
                                  13901 ;	.\ecen4350_lcd_v4.c:3355: setColorHighlight1();
      005035 12 16 B3         [24]13902 	lcall	_setColorHighlight1
                                  13903 ;	.\ecen4350_lcd_v4.c:3356: LCD_string_write("<2> ");
      005038 90 67 BC         [24]13904 	mov	dptr,#___str_173
      00503B 75 F0 80         [24]13905 	mov	b,#0x80
      00503E 12 10 D9         [24]13906 	lcall	_LCD_string_write
                                  13907 ;	.\ecen4350_lcd_v4.c:3357: setColorHighlight2();
      005041 12 16 BF         [24]13908 	lcall	_setColorHighlight2
                                  13909 ;	.\ecen4350_lcd_v4.c:3358: LCD_string_write("9-bit Mode\n");
      005044 90 69 9A         [24]13910 	mov	dptr,#___str_206
      005047 75 F0 80         [24]13911 	mov	b,#0x80
      00504A 12 10 D9         [24]13912 	lcall	_LCD_string_write
      00504D D0 07            [24]13913 	pop	ar7
                                  13914 ;	.\ecen4350_lcd_v4.c:3359: bitSet = 1;
      00504F 78 74            [12]13915 	mov	r0,#_bitSet
      005051 76 01            [12]13916 	mov	@r0,#0x01
                                  13917 ;	.\ecen4350_lcd_v4.c:3360: _8b = 0;
      005053 78 7A            [12]13918 	mov	r0,#__8b
      005055 76 00            [12]13919 	mov	@r0,#0x00
                                  13920 ;	.\ecen4350_lcd_v4.c:3361: temp = 2;
      005057 7E 02            [12]13921 	mov	r6,#0x02
                                  13922 ;	.\ecen4350_lcd_v4.c:3362: goto cont;
      005059 02 53 AA         [24]13923 	ljmp	00278$
      00505C                      13924 00226$:
                                  13925 ;	.\ecen4350_lcd_v4.c:3364: bitSet = 0;
      00505C 78 74            [12]13926 	mov	r0,#_bitSet
      00505E 76 00            [12]13927 	mov	@r0,#0x00
                                  13928 ;	.\ecen4350_lcd_v4.c:3365: setColorRed();
      005060 C0 07            [24]13929 	push	ar7
      005062 12 16 E2         [24]13930 	lcall	_setColorRed
                                  13931 ;	.\ecen4350_lcd_v4.c:3366: setCursor(0, 240);
      005065 75 6B F0         [24]13932 	mov	_setCursor_PARM_2,#0xf0
      005068 75 6C 00         [24]13933 	mov	(_setCursor_PARM_2 + 1),#0x00
      00506B 90 00 00         [24]13934 	mov	dptr,#0x0000
      00506E 12 05 BF         [24]13935 	lcall	_setCursor
                                  13936 ;	.\ecen4350_lcd_v4.c:3367: LCD_string_write(" INPUT ERROR");
      005071 90 69 52         [24]13937 	mov	dptr,#___str_201
      005074 75 F0 80         [24]13938 	mov	b,#0x80
      005077 12 10 D9         [24]13939 	lcall	_LCD_string_write
                                  13940 ;	.\ecen4350_lcd_v4.c:3368: delay(20);
      00507A 90 00 14         [24]13941 	mov	dptr,#0x0014
      00507D 12 01 A9         [24]13942 	lcall	_delay
                                  13943 ;	.\ecen4350_lcd_v4.c:3369: setColorDefault();
      005080 12 16 9D         [24]13944 	lcall	_setColorDefault
                                  13945 ;	.\ecen4350_lcd_v4.c:3370: setCursor(0, 240);
      005083 75 6B F0         [24]13946 	mov	_setCursor_PARM_2,#0xf0
      005086 75 6C 00         [24]13947 	mov	(_setCursor_PARM_2 + 1),#0x00
      005089 90 00 00         [24]13948 	mov	dptr,#0x0000
      00508C 12 05 BF         [24]13949 	lcall	_setCursor
                                  13950 ;	.\ecen4350_lcd_v4.c:3371: LCD_string_write("            ");
      00508F 90 69 5F         [24]13951 	mov	dptr,#___str_202
      005092 75 F0 80         [24]13952 	mov	b,#0x80
      005095 12 10 D9         [24]13953 	lcall	_LCD_string_write
      005098 D0 07            [24]13954 	pop	ar7
                                  13955 ;	.\ecen4350_lcd_v4.c:3372: goto sel;
      00509A 02 4F CD         [24]13956 	ljmp	00222$
                                  13957 ;	.\ecen4350_lcd_v4.c:3375: setParity:
      00509D                      13958 00228$:
                                  13959 ;	.\ecen4350_lcd_v4.c:3376: if (temp == 0) {
      00509D EE               [12]13960 	mov	a,r6
                                  13961 ;	.\ecen4350_lcd_v4.c:3377: setCursor(0, 240);
      00509E 70 3D            [24]13962 	jnz	00230$
      0050A0 75 6B F0         [24]13963 	mov	_setCursor_PARM_2,#0xf0
      0050A3 F5 6C            [12]13964 	mov	(_setCursor_PARM_2 + 1),a
      0050A5 90 00 00         [24]13965 	mov	dptr,#0x0000
      0050A8 C0 07            [24]13966 	push	ar7
      0050AA C0 06            [24]13967 	push	ar6
      0050AC 12 05 BF         [24]13968 	lcall	_setCursor
                                  13969 ;	.\ecen4350_lcd_v4.c:3378: setColorRed();
      0050AF 12 16 E2         [24]13970 	lcall	_setColorRed
                                  13971 ;	.\ecen4350_lcd_v4.c:3379: writeNewLine();
      0050B2 12 11 18         [24]13972 	lcall	_writeNewLine
                                  13973 ;	.\ecen4350_lcd_v4.c:3380: LCD_string_write("\n Please set the\n  bit mode first.\n");
      0050B5 90 69 A6         [24]13974 	mov	dptr,#___str_207
      0050B8 75 F0 80         [24]13975 	mov	b,#0x80
      0050BB 12 10 D9         [24]13976 	lcall	_LCD_string_write
                                  13977 ;	.\ecen4350_lcd_v4.c:3381: setColorDefault();
      0050BE 12 16 9D         [24]13978 	lcall	_setColorDefault
                                  13979 ;	.\ecen4350_lcd_v4.c:3382: setCursor(0, 140);
      0050C1 75 6B 8C         [24]13980 	mov	_setCursor_PARM_2,#0x8c
      0050C4 75 6C 00         [24]13981 	mov	(_setCursor_PARM_2 + 1),#0x00
      0050C7 90 00 00         [24]13982 	mov	dptr,#0x0000
      0050CA 12 05 BF         [24]13983 	lcall	_setCursor
                                  13984 ;	.\ecen4350_lcd_v4.c:3383: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      0050CD 90 66 BB         [24]13985 	mov	dptr,#___str_155
      0050D0 75 F0 80         [24]13986 	mov	b,#0x80
      0050D3 12 10 D9         [24]13987 	lcall	_LCD_string_write
      0050D6 D0 06            [24]13988 	pop	ar6
      0050D8 D0 07            [24]13989 	pop	ar7
                                  13990 ;	.\ecen4350_lcd_v4.c:3384: goto mainInput;
      0050DA 02 48 CB         [24]13991 	ljmp	00147$
      0050DD                      13992 00230$:
                                  13993 ;	.\ecen4350_lcd_v4.c:3385: } if (temp == 1) {
      0050DD BE 01 04         [24]13994 	cjne	r6,#0x01,00232$
                                  13995 ;	.\ecen4350_lcd_v4.c:3386: _8b = 1;
      0050E0 78 7A            [12]13996 	mov	r0,#__8b
      0050E2 76 01            [12]13997 	mov	@r0,#0x01
      0050E4                      13998 00232$:
                                  13999 ;	.\ecen4350_lcd_v4.c:3387: } if (temp == 2) {
      0050E4 BE 02 04         [24]14000 	cjne	r6,#0x02,00234$
                                  14001 ;	.\ecen4350_lcd_v4.c:3388: _8b = 0;
      0050E7 78 7A            [12]14002 	mov	r0,#__8b
      0050E9 76 00            [12]14003 	mov	@r0,#0x00
      0050EB                      14004 00234$:
                                  14005 ;	.\ecen4350_lcd_v4.c:3390: clearLCD();
      0050EB C0 07            [24]14006 	push	ar7
      0050ED C0 06            [24]14007 	push	ar6
      0050EF 12 0E 5C         [24]14008 	lcall	_clearLCD
                                  14009 ;	.\ecen4350_lcd_v4.c:3391: fillTop(GRAY);
      0050F2 90 D6 BA         [24]14010 	mov	dptr,#0xd6ba
      0050F5 12 0C 8F         [24]14011 	lcall	_fillTop
                                  14012 ;	.\ecen4350_lcd_v4.c:3392: setTextSize(5);
      0050F8 75 82 05         [24]14013 	mov	dpl,#0x05
      0050FB 12 05 D9         [24]14014 	lcall	_setTextSize
                                  14015 ;	.\ecen4350_lcd_v4.c:3393: setColorMenu();
      0050FE 12 16 D6         [24]14016 	lcall	_setColorMenu
                                  14017 ;	.\ecen4350_lcd_v4.c:3394: setCursor(30, 0);
      005101 E4               [12]14018 	clr	a
      005102 F5 6B            [12]14019 	mov	_setCursor_PARM_2,a
      005104 F5 6C            [12]14020 	mov	(_setCursor_PARM_2 + 1),a
      005106 90 00 1E         [24]14021 	mov	dptr,#0x001e
      005109 12 05 BF         [24]14022 	lcall	_setCursor
                                  14023 ;	.\ecen4350_lcd_v4.c:3395: LCD_string_write("[UART]\n");
      00510C 90 66 1E         [24]14024 	mov	dptr,#___str_136
      00510F 75 F0 80         [24]14025 	mov	b,#0x80
      005112 12 10 D9         [24]14026 	lcall	_LCD_string_write
                                  14027 ;	.\ecen4350_lcd_v4.c:3396: setTextSize(2);
      005115 75 82 02         [24]14028 	mov	dpl,#0x02
      005118 12 05 D9         [24]14029 	lcall	_setTextSize
                                  14030 ;	.\ecen4350_lcd_v4.c:3397: setColorDefault();
      00511B 12 16 9D         [24]14031 	lcall	_setColorDefault
                                  14032 ;	.\ecen4350_lcd_v4.c:3398: setCursor(0, 60);
      00511E 75 6B 3C         [24]14033 	mov	_setCursor_PARM_2,#0x3c
      005121 75 6C 00         [24]14034 	mov	(_setCursor_PARM_2 + 1),#0x00
      005124 90 00 00         [24]14035 	mov	dptr,#0x0000
      005127 12 05 BF         [24]14036 	lcall	_setCursor
                                  14037 ;	.\ecen4350_lcd_v4.c:3399: LCD_string_write(" <1> Even Parity\n");
      00512A 90 69 CA         [24]14038 	mov	dptr,#___str_208
      00512D 75 F0 80         [24]14039 	mov	b,#0x80
      005130 12 10 D9         [24]14040 	lcall	_LCD_string_write
                                  14041 ;	.\ecen4350_lcd_v4.c:3400: setCursor(0, 100);
      005133 75 6B 64         [24]14042 	mov	_setCursor_PARM_2,#0x64
      005136 75 6C 00         [24]14043 	mov	(_setCursor_PARM_2 + 1),#0x00
      005139 90 00 00         [24]14044 	mov	dptr,#0x0000
      00513C 12 05 BF         [24]14045 	lcall	_setCursor
                                  14046 ;	.\ecen4350_lcd_v4.c:3401: LCD_string_write(" <2> Odd Parity\n");
      00513F 90 69 DC         [24]14047 	mov	dptr,#___str_209
      005142 75 F0 80         [24]14048 	mov	b,#0x80
      005145 12 10 D9         [24]14049 	lcall	_LCD_string_write
                                  14050 ;	.\ecen4350_lcd_v4.c:3402: setCursor(0, 140);
      005148 75 6B 8C         [24]14051 	mov	_setCursor_PARM_2,#0x8c
      00514B 75 6C 00         [24]14052 	mov	(_setCursor_PARM_2 + 1),#0x00
      00514E 90 00 00         [24]14053 	mov	dptr,#0x0000
      005151 12 05 BF         [24]14054 	lcall	_setCursor
                                  14055 ;	.\ecen4350_lcd_v4.c:3403: LCD_string_write(" <3> No Parity");
      005154 90 69 ED         [24]14056 	mov	dptr,#___str_210
      005157 75 F0 80         [24]14057 	mov	b,#0x80
      00515A 12 10 D9         [24]14058 	lcall	_LCD_string_write
      00515D D0 06            [24]14059 	pop	ar6
      00515F D0 07            [24]14060 	pop	ar7
                                  14061 ;	.\ecen4350_lcd_v4.c:3405: boop: 
      005161                      14062 00235$:
                                  14063 ;	.\ecen4350_lcd_v4.c:3406: selection = keyDetect();
      005161 C0 07            [24]14064 	push	ar7
      005163 C0 06            [24]14065 	push	ar6
      005165 12 11 F7         [24]14066 	lcall	_keyDetect
      005168 AD 82            [24]14067 	mov	r5,dpl
      00516A D0 06            [24]14068 	pop	ar6
      00516C D0 07            [24]14069 	pop	ar7
      00516E 78 71            [12]14070 	mov	r0,#_selection
      005170 A6 05            [24]14071 	mov	@r0,ar5
                                  14072 ;	.\ecen4350_lcd_v4.c:3407: if (selection == '1') {
      005172 BD 31 63         [24]14073 	cjne	r5,#0x31,00241$
                                  14074 ;	.\ecen4350_lcd_v4.c:3408: setCursor(0, 60);
      005175 75 6B 3C         [24]14075 	mov	_setCursor_PARM_2,#0x3c
      005178 75 6C 00         [24]14076 	mov	(_setCursor_PARM_2 + 1),#0x00
      00517B 90 00 00         [24]14077 	mov	dptr,#0x0000
      00517E C0 07            [24]14078 	push	ar7
      005180 C0 06            [24]14079 	push	ar6
      005182 12 05 BF         [24]14080 	lcall	_setCursor
                                  14081 ;	.\ecen4350_lcd_v4.c:3409: LCD_string_write(" ");
      005185 90 5F 84         [24]14082 	mov	dptr,#___str_30
      005188 75 F0 80         [24]14083 	mov	b,#0x80
      00518B 12 10 D9         [24]14084 	lcall	_LCD_string_write
                                  14085 ;	.\ecen4350_lcd_v4.c:3410: setColorHighlight1();
      00518E 12 16 B3         [24]14086 	lcall	_setColorHighlight1
                                  14087 ;	.\ecen4350_lcd_v4.c:3411: LCD_string_write("<1> ");
      005191 90 67 86         [24]14088 	mov	dptr,#___str_170
      005194 75 F0 80         [24]14089 	mov	b,#0x80
      005197 12 10 D9         [24]14090 	lcall	_LCD_string_write
                                  14091 ;	.\ecen4350_lcd_v4.c:3412: setColorHighlight2();
      00519A 12 16 BF         [24]14092 	lcall	_setColorHighlight2
                                  14093 ;	.\ecen4350_lcd_v4.c:3413: LCD_string_write("Even Parity\n");
      00519D 90 69 FC         [24]14094 	mov	dptr,#___str_211
      0051A0 75 F0 80         [24]14095 	mov	b,#0x80
      0051A3 12 10 D9         [24]14096 	lcall	_LCD_string_write
      0051A6 D0 06            [24]14097 	pop	ar6
      0051A8 D0 07            [24]14098 	pop	ar7
                                  14099 ;	.\ecen4350_lcd_v4.c:3415: if(_8b == 0) {
      0051AA 78 7A            [12]14100 	mov	r0,#__8b
      0051AC E6               [12]14101 	mov	a,@r0
      0051AD 70 12            [24]14102 	jnz	00237$
                                  14103 ;	.\ecen4350_lcd_v4.c:3416: frame_NEP = 0x111;	//9 bit, Even, Parity Set
      0051AF 78 7D            [12]14104 	mov	r0,#_frame_NEP
      0051B1 76 11            [12]14105 	mov	@r0,#0x11
      0051B3 08               [12]14106 	inc	r0
      0051B4 76 01            [12]14107 	mov	@r0,#0x01
                                  14108 ;	.\ecen4350_lcd_v4.c:3417: paritySet = 1;
      0051B6 78 75            [12]14109 	mov	r0,#_paritySet
      0051B8 76 01            [12]14110 	mov	@r0,#0x01
                                  14111 ;	.\ecen4350_lcd_v4.c:3418: pType = 0x2;
      0051BA 78 79            [12]14112 	mov	r0,#_pType
      0051BC 76 02            [12]14113 	mov	@r0,#0x02
                                  14114 ;	.\ecen4350_lcd_v4.c:3419: goto cont;
      0051BE 02 53 AA         [24]14115 	ljmp	00278$
      0051C1                      14116 00237$:
                                  14117 ;	.\ecen4350_lcd_v4.c:3420: } if (_8b == 1){
      0051C1 78 7A            [12]14118 	mov	r0,#__8b
      0051C3 B6 01 12         [24]14119 	cjne	@r0,#0x01,00241$
                                  14120 ;	.\ecen4350_lcd_v4.c:3421: frame_NEP = 0x011;	//8 bit, even, Parity Set
      0051C6 78 7D            [12]14121 	mov	r0,#_frame_NEP
      0051C8 76 11            [12]14122 	mov	@r0,#0x11
      0051CA 08               [12]14123 	inc	r0
      0051CB 76 00            [12]14124 	mov	@r0,#0x00
                                  14125 ;	.\ecen4350_lcd_v4.c:3422: paritySet = 1;
      0051CD 78 75            [12]14126 	mov	r0,#_paritySet
      0051CF 76 01            [12]14127 	mov	@r0,#0x01
                                  14128 ;	.\ecen4350_lcd_v4.c:3423: pType = 0x3;
      0051D1 78 79            [12]14129 	mov	r0,#_pType
      0051D3 76 03            [12]14130 	mov	@r0,#0x03
                                  14131 ;	.\ecen4350_lcd_v4.c:3424: goto cont`;
      0051D5 02 53 AA         [24]14132 	ljmp	00278$
      0051D8                      14133 00241$:
                                  14134 ;	.\ecen4350_lcd_v4.c:3426: } if (selection == '2') {
      0051D8 78 71            [12]14135 	mov	r0,#_selection
      0051DA B6 32 63         [24]14136 	cjne	@r0,#0x32,00247$
                                  14137 ;	.\ecen4350_lcd_v4.c:3427: setCursor(0, 100);
      0051DD 75 6B 64         [24]14138 	mov	_setCursor_PARM_2,#0x64
      0051E0 75 6C 00         [24]14139 	mov	(_setCursor_PARM_2 + 1),#0x00
      0051E3 90 00 00         [24]14140 	mov	dptr,#0x0000
      0051E6 C0 07            [24]14141 	push	ar7
      0051E8 C0 06            [24]14142 	push	ar6
      0051EA 12 05 BF         [24]14143 	lcall	_setCursor
                                  14144 ;	.\ecen4350_lcd_v4.c:3428: LCD_string_write(" ");
      0051ED 90 5F 84         [24]14145 	mov	dptr,#___str_30
      0051F0 75 F0 80         [24]14146 	mov	b,#0x80
      0051F3 12 10 D9         [24]14147 	lcall	_LCD_string_write
                                  14148 ;	.\ecen4350_lcd_v4.c:3429: setColorHighlight1();
      0051F6 12 16 B3         [24]14149 	lcall	_setColorHighlight1
                                  14150 ;	.\ecen4350_lcd_v4.c:3430: LCD_string_write("<2> ");
      0051F9 90 67 BC         [24]14151 	mov	dptr,#___str_173
      0051FC 75 F0 80         [24]14152 	mov	b,#0x80
      0051FF 12 10 D9         [24]14153 	lcall	_LCD_string_write
                                  14154 ;	.\ecen4350_lcd_v4.c:3431: setColorHighlight2();
      005202 12 16 BF         [24]14155 	lcall	_setColorHighlight2
                                  14156 ;	.\ecen4350_lcd_v4.c:3432: LCD_string_write("Odd Parity\n");
      005205 90 6A 09         [24]14157 	mov	dptr,#___str_212
      005208 75 F0 80         [24]14158 	mov	b,#0x80
      00520B 12 10 D9         [24]14159 	lcall	_LCD_string_write
      00520E D0 06            [24]14160 	pop	ar6
      005210 D0 07            [24]14161 	pop	ar7
                                  14162 ;	.\ecen4350_lcd_v4.c:3434: if (_8b == 0) {
      005212 78 7A            [12]14163 	mov	r0,#__8b
      005214 E6               [12]14164 	mov	a,@r0
      005215 70 12            [24]14165 	jnz	00243$
                                  14166 ;	.\ecen4350_lcd_v4.c:3435: frame_NEP = 0x101;		//9 bit, odd, parity set
      005217 78 7D            [12]14167 	mov	r0,#_frame_NEP
      005219 76 01            [12]14168 	mov	@r0,#0x01
      00521B 08               [12]14169 	inc	r0
      00521C 76 01            [12]14170 	mov	@r0,#0x01
                                  14171 ;	.\ecen4350_lcd_v4.c:3436: paritySet = 1;
      00521E 78 75            [12]14172 	mov	r0,#_paritySet
      005220 76 01            [12]14173 	mov	@r0,#0x01
                                  14174 ;	.\ecen4350_lcd_v4.c:3437: pType = 0x4;
      005222 78 79            [12]14175 	mov	r0,#_pType
      005224 76 04            [12]14176 	mov	@r0,#0x04
                                  14177 ;	.\ecen4350_lcd_v4.c:3438: goto cont;
      005226 02 53 AA         [24]14178 	ljmp	00278$
      005229                      14179 00243$:
                                  14180 ;	.\ecen4350_lcd_v4.c:3439: } if (_8b == 1) {
      005229 78 7A            [12]14181 	mov	r0,#__8b
      00522B B6 01 12         [24]14182 	cjne	@r0,#0x01,00247$
                                  14183 ;	.\ecen4350_lcd_v4.c:3440: frame_NEP = 0x001;		//8 bit, odd, parity set
      00522E 78 7D            [12]14184 	mov	r0,#_frame_NEP
      005230 76 01            [12]14185 	mov	@r0,#0x01
      005232 08               [12]14186 	inc	r0
      005233 76 00            [12]14187 	mov	@r0,#0x00
                                  14188 ;	.\ecen4350_lcd_v4.c:3441: paritySet = 1;
      005235 78 75            [12]14189 	mov	r0,#_paritySet
      005237 76 01            [12]14190 	mov	@r0,#0x01
                                  14191 ;	.\ecen4350_lcd_v4.c:3442: pType = 0x5;
      005239 78 79            [12]14192 	mov	r0,#_pType
      00523B 76 05            [12]14193 	mov	@r0,#0x05
                                  14194 ;	.\ecen4350_lcd_v4.c:3443: goto cont;
      00523D 02 53 AA         [24]14195 	ljmp	00278$
      005240                      14196 00247$:
                                  14197 ;	.\ecen4350_lcd_v4.c:3445: } if (selection == '3') {
      005240 78 71            [12]14198 	mov	r0,#_selection
      005242 B6 33 02         [24]14199 	cjne	@r0,#0x33,00743$
      005245 80 03            [24]14200 	sjmp	00744$
      005247                      14201 00743$:
      005247 02 51 61         [24]14202 	ljmp	00235$
      00524A                      14203 00744$:
                                  14204 ;	.\ecen4350_lcd_v4.c:3446: setCursor(0, 140);
      00524A 75 6B 8C         [24]14205 	mov	_setCursor_PARM_2,#0x8c
      00524D 75 6C 00         [24]14206 	mov	(_setCursor_PARM_2 + 1),#0x00
      005250 90 00 00         [24]14207 	mov	dptr,#0x0000
      005253 C0 07            [24]14208 	push	ar7
      005255 C0 06            [24]14209 	push	ar6
      005257 12 05 BF         [24]14210 	lcall	_setCursor
                                  14211 ;	.\ecen4350_lcd_v4.c:3447: LCD_string_write(" ");
      00525A 90 5F 84         [24]14212 	mov	dptr,#___str_30
      00525D 75 F0 80         [24]14213 	mov	b,#0x80
      005260 12 10 D9         [24]14214 	lcall	_LCD_string_write
                                  14215 ;	.\ecen4350_lcd_v4.c:3448: setColorHighlight1();
      005263 12 16 B3         [24]14216 	lcall	_setColorHighlight1
                                  14217 ;	.\ecen4350_lcd_v4.c:3449: LCD_string_write("<3> ");
      005266 90 67 E0         [24]14218 	mov	dptr,#___str_176
      005269 75 F0 80         [24]14219 	mov	b,#0x80
      00526C 12 10 D9         [24]14220 	lcall	_LCD_string_write
                                  14221 ;	.\ecen4350_lcd_v4.c:3450: setColorHighlight2();
      00526F 12 16 BF         [24]14222 	lcall	_setColorHighlight2
                                  14223 ;	.\ecen4350_lcd_v4.c:3451: LCD_string_write("No Parity\n");
      005272 90 6A 15         [24]14224 	mov	dptr,#___str_213
      005275 75 F0 80         [24]14225 	mov	b,#0x80
      005278 12 10 D9         [24]14226 	lcall	_LCD_string_write
      00527B D0 06            [24]14227 	pop	ar6
      00527D D0 07            [24]14228 	pop	ar7
                                  14229 ;	.\ecen4350_lcd_v4.c:3453: if (_8b == 0) {
      00527F 78 7A            [12]14230 	mov	r0,#__8b
      005281 E6               [12]14231 	mov	a,@r0
                                  14232 ;	.\ecen4350_lcd_v4.c:3454: frame_NEP = 0x100; 			//9 bit, odd, no parity
      005282 70 11            [24]14233 	jnz	00249$
      005284 78 7D            [12]14234 	mov	r0,#_frame_NEP
      005286 F6               [12]14235 	mov	@r0,a
      005287 08               [12]14236 	inc	r0
      005288 76 01            [12]14237 	mov	@r0,#0x01
                                  14238 ;	.\ecen4350_lcd_v4.c:3455: paritySet = 1;
      00528A 78 75            [12]14239 	mov	r0,#_paritySet
      00528C 76 01            [12]14240 	mov	@r0,#0x01
                                  14241 ;	.\ecen4350_lcd_v4.c:3456: pType = 0x1;
      00528E 78 79            [12]14242 	mov	r0,#_pType
      005290 76 01            [12]14243 	mov	@r0,#0x01
                                  14244 ;	.\ecen4350_lcd_v4.c:3457: goto cont;
      005292 02 53 AA         [24]14245 	ljmp	00278$
      005295                      14246 00249$:
                                  14247 ;	.\ecen4350_lcd_v4.c:3458: } if (_8b == 1) {
      005295 78 7A            [12]14248 	mov	r0,#__8b
      005297 B6 01 11         [24]14249 	cjne	@r0,#0x01,00255$
                                  14250 ;	.\ecen4350_lcd_v4.c:3459: frame_NEP = 0x000;		 	//8 bit, odd, no parity
      00529A 78 7D            [12]14251 	mov	r0,#_frame_NEP
      00529C E4               [12]14252 	clr	a
      00529D F6               [12]14253 	mov	@r0,a
      00529E 08               [12]14254 	inc	r0
      00529F F6               [12]14255 	mov	@r0,a
                                  14256 ;	.\ecen4350_lcd_v4.c:3460: paritySet = 1;
      0052A0 78 75            [12]14257 	mov	r0,#_paritySet
      0052A2 76 01            [12]14258 	mov	@r0,#0x01
                                  14259 ;	.\ecen4350_lcd_v4.c:3461: pType = 0x7;
      0052A4 78 79            [12]14260 	mov	r0,#_pType
      0052A6 76 07            [12]14261 	mov	@r0,#0x07
                                  14262 ;	.\ecen4350_lcd_v4.c:3462: goto cont;
      0052A8 02 53 AA         [24]14263 	ljmp	00278$
                                  14264 ;	.\ecen4350_lcd_v4.c:3466: setFrame:
      0052AB                      14265 00255$:
                                  14266 ;	.\ecen4350_lcd_v4.c:3467: paritySet = 0;
      0052AB 78 75            [12]14267 	mov	r0,#_paritySet
      0052AD 76 00            [12]14268 	mov	@r0,#0x00
                                  14269 ;	.\ecen4350_lcd_v4.c:3468: if ((frame_NEP == 0x000) || 	//8 bit, odd, no parity 
      0052AF 78 7D            [12]14270 	mov	r0,#_frame_NEP
      0052B1 E6               [12]14271 	mov	a,@r0
      0052B2 08               [12]14272 	inc	r0
      0052B3 46               [12]14273 	orl	a,@r0
      0052B4 60 50            [24]14274 	jz	00268$
                                  14275 ;	.\ecen4350_lcd_v4.c:3469: (frame_NEP == 0x001) ||		//8 bit, odd, parity set
      0052B6 78 7D            [12]14276 	mov	r0,#_frame_NEP
      0052B8 B6 01 06         [24]14277 	cjne	@r0,#0x01,00749$
      0052BB 08               [12]14278 	inc	r0
      0052BC B6 00 02         [24]14279 	cjne	@r0,#0x00,00749$
      0052BF 80 45            [24]14280 	sjmp	00268$
      0052C1                      14281 00749$:
                                  14282 ;	.\ecen4350_lcd_v4.c:3470: (frame_NEP == 0x010) ||		//8 bit, even, no parity
      0052C1 78 7D            [12]14283 	mov	r0,#_frame_NEP
      0052C3 B6 10 06         [24]14284 	cjne	@r0,#0x10,00750$
      0052C6 08               [12]14285 	inc	r0
      0052C7 B6 00 02         [24]14286 	cjne	@r0,#0x00,00750$
      0052CA 80 3A            [24]14287 	sjmp	00268$
      0052CC                      14288 00750$:
                                  14289 ;	.\ecen4350_lcd_v4.c:3471: (frame_NEP == 0x011) ||		//8 bit, even, parity set
      0052CC 78 7D            [12]14290 	mov	r0,#_frame_NEP
      0052CE B6 11 06         [24]14291 	cjne	@r0,#0x11,00751$
      0052D1 08               [12]14292 	inc	r0
      0052D2 B6 00 02         [24]14293 	cjne	@r0,#0x00,00751$
      0052D5 80 2F            [24]14294 	sjmp	00268$
      0052D7                      14295 00751$:
                                  14296 ;	.\ecen4350_lcd_v4.c:3472: (frame_NEP == 0x100) ||		//9 bit, odd, no parity
      0052D7 78 7D            [12]14297 	mov	r0,#_frame_NEP
      0052D9 B6 00 06         [24]14298 	cjne	@r0,#0x00,00752$
      0052DC 08               [12]14299 	inc	r0
      0052DD B6 01 02         [24]14300 	cjne	@r0,#0x01,00752$
      0052E0 80 24            [24]14301 	sjmp	00268$
      0052E2                      14302 00752$:
                                  14303 ;	.\ecen4350_lcd_v4.c:3473: (frame_NEP == 0x101) ||		//9 bit, odd, parity set
      0052E2 78 7D            [12]14304 	mov	r0,#_frame_NEP
      0052E4 B6 01 06         [24]14305 	cjne	@r0,#0x01,00753$
      0052E7 08               [12]14306 	inc	r0
      0052E8 B6 01 02         [24]14307 	cjne	@r0,#0x01,00753$
      0052EB 80 19            [24]14308 	sjmp	00268$
      0052ED                      14309 00753$:
                                  14310 ;	.\ecen4350_lcd_v4.c:3474: (frame_NEP == 0x110) ||		//9 bit, even, no parity
      0052ED 78 7D            [12]14311 	mov	r0,#_frame_NEP
      0052EF B6 10 06         [24]14312 	cjne	@r0,#0x10,00754$
      0052F2 08               [12]14313 	inc	r0
      0052F3 B6 01 02         [24]14314 	cjne	@r0,#0x01,00754$
      0052F6 80 0E            [24]14315 	sjmp	00268$
      0052F8                      14316 00754$:
                                  14317 ;	.\ecen4350_lcd_v4.c:3475: (frame_NEP == 0x111)) {		//9 bit, even, parity set
      0052F8 78 7D            [12]14318 	mov	r0,#_frame_NEP
      0052FA B6 11 06         [24]14319 	cjne	@r0,#0x11,00755$
      0052FD 08               [12]14320 	inc	r0
      0052FE B6 01 02         [24]14321 	cjne	@r0,#0x01,00755$
      005301 80 03            [24]14322 	sjmp	00756$
      005303                      14323 00755$:
      005303 02 53 89         [24]14324 	ljmp	00269$
      005306                      14325 00756$:
      005306                      14326 00268$:
                                  14327 ;	.\ecen4350_lcd_v4.c:3477: paritySet = 1;
      005306 78 75            [12]14328 	mov	r0,#_paritySet
      005308 76 01            [12]14329 	mov	@r0,#0x01
                                  14330 ;	.\ecen4350_lcd_v4.c:3478: tempFrame = frame_NEP;
      00530A 78 7D            [12]14331 	mov	r0,#_frame_NEP
      00530C 86 04            [24]14332 	mov	ar4,@r0
      00530E 08               [12]14333 	inc	r0
      00530F 86 05            [24]14334 	mov	ar5,@r0
      005311 78 7B            [12]14335 	mov	r0,#_tempFrame
      005313 A6 04            [24]14336 	mov	@r0,ar4
      005315 08               [12]14337 	inc	r0
      005316 A6 05            [24]14338 	mov	@r0,ar5
                                  14339 ;	.\ecen4350_lcd_v4.c:3480: if ((tempFrame & 0x100) == 0x100){ //9-bit Mode
      005318 7C 00            [12]14340 	mov	r4,#0x00
      00531A 53 05 01         [24]14341 	anl	ar5,#0x01
      00531D BC 00 16         [24]14342 	cjne	r4,#0x00,00257$
      005320 BD 01 13         [24]14343 	cjne	r5,#0x01,00257$
                                  14344 ;	.\ecen4350_lcd_v4.c:3481: initLock = 0;
      005323 7F 00            [12]14345 	mov	r7,#0x00
                                  14346 ;	.\ecen4350_lcd_v4.c:3482: SCON = 0xC0;  	// Asynchronous mode, 9-bit data and 1-stop (b9)
      005325 75 98 C0         [24]14347 	mov	_SCON,#0xc0
                                  14348 ;	.\ecen4350_lcd_v4.c:3483: TMOD = 0x20;  	// Timer1 input Mode2. input auto reload
      005328 75 89 20         [24]14349 	mov	_TMOD,#0x20
                                  14350 ;	.\ecen4350_lcd_v4.c:3485: UART_init();  	// 9-bit, Serial Mode 3, variable baud
      00532B C0 07            [24]14351 	push	ar7
      00532D C0 06            [24]14352 	push	ar6
      00532F 12 01 DC         [24]14353 	lcall	_UART_init
      005332 D0 06            [24]14354 	pop	ar6
      005334 D0 07            [24]14355 	pop	ar7
      005336                      14356 00257$:
                                  14357 ;	.\ecen4350_lcd_v4.c:3486: } if ((tempFrame & 0x100) == 0x000){
      005336 78 7C            [12]14358 	mov	r0,#(_tempFrame + 1)
      005338 E6               [12]14359 	mov	a,@r0
      005339 20 E0 13         [24]14360 	jb	acc.0,00259$
                                  14361 ;	.\ecen4350_lcd_v4.c:3487: initLock = 0;
      00533C 7F 00            [12]14362 	mov	r7,#0x00
                                  14363 ;	.\ecen4350_lcd_v4.c:3488: SCON = 0x50;  	// Asynchronous mode, 8-bit data and 1-stop bit
      00533E 75 98 50         [24]14364 	mov	_SCON,#0x50
                                  14365 ;	.\ecen4350_lcd_v4.c:3489: TMOD = 0x20;  	// Timer1 input Mode2. input 8 bit auto reload
      005341 75 89 20         [24]14366 	mov	_TMOD,#0x20
                                  14367 ;	.\ecen4350_lcd_v4.c:3490: UART_init();	//8-bit Mode, Serial Mode 1; variable baud
      005344 C0 07            [24]14368 	push	ar7
      005346 C0 06            [24]14369 	push	ar6
      005348 12 01 DC         [24]14370 	lcall	_UART_init
      00534B D0 06            [24]14371 	pop	ar6
      00534D D0 07            [24]14372 	pop	ar7
      00534F                      14373 00259$:
                                  14374 ;	.\ecen4350_lcd_v4.c:3491: } if ((tempFrame & 0x010) == 0x010) {
      00534F 78 7B            [12]14375 	mov	r0,#_tempFrame
      005351 74 10            [12]14376 	mov	a,#0x10
      005353 56               [12]14377 	anl	a,@r0
      005354 FC               [12]14378 	mov	r4,a
      005355 7D 00            [12]14379 	mov	r5,#0x00
      005357 BC 10 09         [24]14380 	cjne	r4,#0x10,00261$
      00535A BD 00 06         [24]14381 	cjne	r5,#0x00,00261$
                                  14382 ;	.\ecen4350_lcd_v4.c:3492: initLock = 0;	//even parity
      00535D 7F 00            [12]14383 	mov	r7,#0x00
                                  14384 ;	.\ecen4350_lcd_v4.c:3493: parityEven = 1;
      00535F 78 76            [12]14385 	mov	r0,#_parityEven
      005361 76 01            [12]14386 	mov	@r0,#0x01
      005363                      14387 00261$:
                                  14388 ;	.\ecen4350_lcd_v4.c:3495: } if ((tempFrame & 0x010) == 0x000) {
      005363 78 7B            [12]14389 	mov	r0,#_tempFrame
      005365 E6               [12]14390 	mov	a,@r0
      005366 20 E4 06         [24]14391 	jb	acc.4,00263$
                                  14392 ;	.\ecen4350_lcd_v4.c:3496: initLock = 0;	//odd parity
      005369 7F 00            [12]14393 	mov	r7,#0x00
                                  14394 ;	.\ecen4350_lcd_v4.c:3497: parityEven = 0;
      00536B 78 76            [12]14395 	mov	r0,#_parityEven
      00536D 76 00            [12]14396 	mov	@r0,#0x00
      00536F                      14397 00263$:
                                  14398 ;	.\ecen4350_lcd_v4.c:3499: } if ((tempFrame & 0x001) == 0x001) {
      00536F 78 7B            [12]14399 	mov	r0,#_tempFrame
      005371 74 01            [12]14400 	mov	a,#0x01
      005373 56               [12]14401 	anl	a,@r0
      005374 FC               [12]14402 	mov	r4,a
      005375 7D 00            [12]14403 	mov	r5,#0x00
      005377 BC 01 05         [24]14404 	cjne	r4,#0x01,00265$
      00537A BD 00 02         [24]14405 	cjne	r5,#0x00,00265$
                                  14406 ;	.\ecen4350_lcd_v4.c:3500: initLock = 0;	//set parity
      00537D 7F 00            [12]14407 	mov	r7,#0x00
      00537F                      14408 00265$:
                                  14409 ;	.\ecen4350_lcd_v4.c:3502: } if ((tempFrame & 0x001) == 0x000) {
      00537F 78 7B            [12]14410 	mov	r0,#_tempFrame
      005381 E6               [12]14411 	mov	a,@r0
      005382 20 E0 25         [24]14412 	jb	acc.0,00278$
                                  14413 ;	.\ecen4350_lcd_v4.c:3503: initLock = 0;	//no parity
      005385 7F 00            [12]14414 	mov	r7,#0x00
      005387 80 21            [24]14415 	sjmp	00278$
      005389                      14416 00269$:
                                  14417 ;	.\ecen4350_lcd_v4.c:3507: writeNewLine();
      005389 C0 07            [24]14418 	push	ar7
      00538B C0 06            [24]14419 	push	ar6
      00538D 12 11 18         [24]14420 	lcall	_writeNewLine
                                  14421 ;	.\ecen4350_lcd_v4.c:3508: LCD_string_write(" Something is wrong.\n  UART failed to set.\n");
      005390 90 6A 20         [24]14422 	mov	dptr,#___str_214
      005393 75 F0 80         [24]14423 	mov	b,#0x80
      005396 12 10 D9         [24]14424 	lcall	_LCD_string_write
                                  14425 ;	.\ecen4350_lcd_v4.c:3509: delay(80);
      005399 90 00 50         [24]14426 	mov	dptr,#0x0050
      00539C 12 01 A9         [24]14427 	lcall	_delay
      00539F D0 06            [24]14428 	pop	ar6
      0053A1 D0 07            [24]14429 	pop	ar7
                                  14430 ;	.\ecen4350_lcd_v4.c:3510: bitSet = 0;
      0053A3 78 74            [12]14431 	mov	r0,#_bitSet
      0053A5 76 00            [12]14432 	mov	@r0,#0x00
                                  14433 ;	.\ecen4350_lcd_v4.c:3511: goto uartMenu;
      0053A7 02 45 E8         [24]14434 	ljmp	00101$
                                  14435 ;	.\ecen4350_lcd_v4.c:3513: cont:
      0053AA                      14436 00278$:
                                  14437 ;	.\ecen4350_lcd_v4.c:3514: if (initLock == 1) goto verifyUART;
      0053AA BF 01 02         [24]14438 	cjne	r7,#0x01,00766$
      0053AD 80 03            [24]14439 	sjmp	00767$
      0053AF                      14440 00766$:
      0053AF 02 45 E8         [24]14441 	ljmp	00101$
      0053B2                      14442 00767$:
      0053B2 02 4B DA         [24]14443 	ljmp	00175$
                                  14444 ;	.\ecen4350_lcd_v4.c:3516: finish:
                                  14445 ;	.\ecen4350_lcd_v4.c:3517: return;
                                  14446 ;	.\ecen4350_lcd_v4.c:3518: }
      0053B5 22               [24]14447 	ret
                                  14448 ;------------------------------------------------------------
                                  14449 ;Allocation info for local variables in function 'main'
                                  14450 ;------------------------------------------------------------
                                  14451 ;__1310720181              Allocated to registers 
                                  14452 ;__1310720182              Allocated to registers 
                                  14453 ;map_address               Allocated to registers 
                                  14454 ;d                         Allocated to registers 
                                  14455 ;__1310720184              Allocated to registers 
                                  14456 ;__1310720185              Allocated to registers 
                                  14457 ;map_address               Allocated to registers 
                                  14458 ;d                         Allocated to registers 
                                  14459 ;__1310720187              Allocated to registers 
                                  14460 ;__1310720188              Allocated to registers 
                                  14461 ;map_address               Allocated to registers 
                                  14462 ;d                         Allocated to registers 
                                  14463 ;__1310720190              Allocated to registers 
                                  14464 ;__1310720191              Allocated to registers 
                                  14465 ;map_address               Allocated to registers 
                                  14466 ;d                         Allocated to registers 
                                  14467 ;__1966080193              Allocated to registers 
                                  14468 ;__1966080194              Allocated to registers 
                                  14469 ;map_address               Allocated to registers 
                                  14470 ;d                         Allocated to registers 
                                  14471 ;__2621440196              Allocated to registers 
                                  14472 ;__2621440197              Allocated to registers 
                                  14473 ;map_address               Allocated to registers 
                                  14474 ;d                         Allocated to registers 
                                  14475 ;__2621440199              Allocated to registers 
                                  14476 ;__2621440200              Allocated to registers 
                                  14477 ;map_address               Allocated to registers 
                                  14478 ;d                         Allocated to registers 
                                  14479 ;__2621440202              Allocated to registers 
                                  14480 ;__2621440203              Allocated to registers 
                                  14481 ;map_address               Allocated to registers 
                                  14482 ;d                         Allocated to registers 
                                  14483 ;__2621440205              Allocated to registers 
                                  14484 ;__2621440206              Allocated to registers 
                                  14485 ;map_address               Allocated to registers 
                                  14486 ;d                         Allocated to registers 
                                  14487 ;__2621440208              Allocated to registers 
                                  14488 ;__2621440209              Allocated to registers 
                                  14489 ;map_address               Allocated to registers 
                                  14490 ;d                         Allocated to registers 
                                  14491 ;__2621440211              Allocated to registers 
                                  14492 ;__2621440212              Allocated to registers 
                                  14493 ;map_address               Allocated to registers 
                                  14494 ;d                         Allocated to registers 
                                  14495 ;__2621440214              Allocated to registers 
                                  14496 ;__2621440215              Allocated to registers 
                                  14497 ;map_address               Allocated to registers 
                                  14498 ;d                         Allocated to registers 
                                  14499 ;__2621440217              Allocated to registers 
                                  14500 ;__2621440218              Allocated to registers 
                                  14501 ;map_address               Allocated to registers 
                                  14502 ;d                         Allocated to registers 
                                  14503 ;__2621440220              Allocated to registers 
                                  14504 ;__2621440221              Allocated to registers 
                                  14505 ;map_address               Allocated to registers 
                                  14506 ;d                         Allocated to registers 
                                  14507 ;__2621440223              Allocated to registers 
                                  14508 ;__2621440224              Allocated to registers 
                                  14509 ;map_address               Allocated to registers 
                                  14510 ;d                         Allocated to registers 
                                  14511 ;__2621440226              Allocated to registers 
                                  14512 ;__2621440227              Allocated to registers 
                                  14513 ;map_address               Allocated to registers 
                                  14514 ;d                         Allocated to registers 
                                  14515 ;__2621440229              Allocated to registers 
                                  14516 ;__2621440230              Allocated to registers 
                                  14517 ;map_address               Allocated to registers 
                                  14518 ;d                         Allocated to registers 
                                  14519 ;__2621440232              Allocated to registers 
                                  14520 ;__2621440233              Allocated to registers 
                                  14521 ;map_address               Allocated to registers 
                                  14522 ;d                         Allocated to registers 
                                  14523 ;__2621440235              Allocated to registers 
                                  14524 ;__2621440236              Allocated to registers 
                                  14525 ;map_address               Allocated to registers 
                                  14526 ;d                         Allocated to registers 
                                  14527 ;validKey                  Allocated to registers r7 
                                  14528 ;------------------------------------------------------------
                                  14529 ;	.\ecen4350_lcd_v4.c:3521: void main() {
                                  14530 ;	-----------------------------------------
                                  14531 ;	 function main
                                  14532 ;	-----------------------------------------
      0053B6                      14533 _main:
                                  14534 ;	.\ecen4350_lcd_v4.c:3525: delay(10);
      0053B6 90 00 0A         [24]14535 	mov	dptr,#0x000a
      0053B9 12 01 A9         [24]14536 	lcall	_delay
                                  14537 ;	.\ecen4350_lcd_v4.c:3526: iowrite8(seg7_address, ON);
      0053BC 85 0C 82         [24]14538 	mov	dpl,_seg7_address
      0053BF 85 0D 83         [24]14539 	mov	dph,(_seg7_address + 1)
                                  14540 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14541 ;	assignBit
      0053C2 D2 B5            [12]14542 	setb	_P3_5
                                  14543 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0053C4 E4               [12]14544 	clr	a
      0053C5 F0               [24]14545 	movx	@dptr,a
                                  14546 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14547 ;	assignBit
      0053C6 C2 B5            [12]14548 	clr	_P3_5
                                  14549 ;	.\ecen4350_lcd_v4.c:3527: delay(5);
      0053C8 90 00 05         [24]14550 	mov	dptr,#0x0005
      0053CB 12 01 A9         [24]14551 	lcall	_delay
                                  14552 ;	.\ecen4350_lcd_v4.c:3528: CD = 0;
                                  14553 ;	assignBit
      0053CE C2 B4            [12]14554 	clr	_P3_4
                                  14555 ;	.\ecen4350_lcd_v4.c:3529: IOM = 0;
                                  14556 ;	assignBit
      0053D0 C2 B5            [12]14557 	clr	_P3_5
                                  14558 ;	.\ecen4350_lcd_v4.c:3530: rtcInit();							// RTC init
      0053D2 12 03 FE         [24]14559 	lcall	_rtcInit
                                  14560 ;	.\ecen4350_lcd_v4.c:3532: TFT_LCD_INIT();						// LCD init
      0053D5 12 06 F7         [24]14561 	lcall	_TFT_LCD_INIT
                                  14562 ;	.\ecen4350_lcd_v4.c:3533: iowrite8(seg7_address, SEG_H);		// [H]
      0053D8 85 0C 82         [24]14563 	mov	dpl,_seg7_address
      0053DB 85 0D 83         [24]14564 	mov	dph,(_seg7_address + 1)
                                  14565 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14566 ;	assignBit
      0053DE D2 B5            [12]14567 	setb	_P3_5
                                  14568 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0053E0 74 89            [12]14569 	mov	a,#0x89
      0053E2 F0               [24]14570 	movx	@dptr,a
                                  14571 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14572 ;	assignBit
      0053E3 C2 B5            [12]14573 	clr	_P3_5
                                  14574 ;	.\ecen4350_lcd_v4.c:3534: delay(40);							
      0053E5 90 00 28         [24]14575 	mov	dptr,#0x0028
      0053E8 12 01 A9         [24]14576 	lcall	_delay
                                  14577 ;	.\ecen4350_lcd_v4.c:3535: iowrite8(seg7_address, 0b01111011); // [i.]
      0053EB 85 0C 82         [24]14578 	mov	dpl,_seg7_address
      0053EE 85 0D 83         [24]14579 	mov	dph,(_seg7_address + 1)
                                  14580 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14581 ;	assignBit
      0053F1 D2 B5            [12]14582 	setb	_P3_5
                                  14583 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0053F3 74 7B            [12]14584 	mov	a,#0x7b
      0053F5 F0               [24]14585 	movx	@dptr,a
                                  14586 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14587 ;	assignBit
      0053F6 C2 B5            [12]14588 	clr	_P3_5
                                  14589 ;	.\ecen4350_lcd_v4.c:3536: delay(40);
      0053F8 90 00 28         [24]14590 	mov	dptr,#0x0028
      0053FB 12 01 A9         [24]14591 	lcall	_delay
                                  14592 ;	.\ecen4350_lcd_v4.c:3537: iowrite8(seg7_address, OFF);
      0053FE 85 0C 82         [24]14593 	mov	dpl,_seg7_address
      005401 85 0D 83         [24]14594 	mov	dph,(_seg7_address + 1)
                                  14595 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14596 ;	assignBit
      005404 D2 B5            [12]14597 	setb	_P3_5
                                  14598 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005406 74 FF            [12]14599 	mov	a,#0xff
      005408 F0               [24]14600 	movx	@dptr,a
                                  14601 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14602 ;	assignBit
      005409 C2 B5            [12]14603 	clr	_P3_5
                                  14604 ;	.\ecen4350_lcd_v4.c:3538: delay(20);
      00540B 90 00 14         [24]14605 	mov	dptr,#0x0014
      00540E 12 01 A9         [24]14606 	lcall	_delay
                                  14607 ;	.\ecen4350_lcd_v4.c:3539: seg7Test();
      005411 12 02 A3         [24]14608 	lcall	_seg7Test
                                  14609 ;	.\ecen4350_lcd_v4.c:3541: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      005414 12 16 45         [24]14610 	lcall	_writeSomeLines
                                  14611 ;	.\ecen4350_lcd_v4.c:3543: clearLCD();							// set LCD background
      005417 12 0E 5C         [24]14612 	lcall	_clearLCD
                                  14613 ;	.\ecen4350_lcd_v4.c:3544: setColorDefault();	// set text color
      00541A 12 16 9D         [24]14614 	lcall	_setColorDefault
                                  14615 ;	.\ecen4350_lcd_v4.c:3545: setCursor(30, 120);				
      00541D 75 6B 78         [24]14616 	mov	_setCursor_PARM_2,#0x78
      005420 75 6C 00         [24]14617 	mov	(_setCursor_PARM_2 + 1),#0x00
      005423 90 00 1E         [24]14618 	mov	dptr,#0x001e
      005426 12 05 BF         [24]14619 	lcall	_setCursor
                                  14620 ;	.\ecen4350_lcd_v4.c:3546: LCD_string_write("RAM POST\n");
      005429 90 6A 4C         [24]14621 	mov	dptr,#___str_215
      00542C 75 F0 80         [24]14622 	mov	b,#0x80
      00542F 12 10 D9         [24]14623 	lcall	_LCD_string_write
                                  14624 ;	.\ecen4350_lcd_v4.c:3547: writeAllRAM(0xAA);
      005432 75 82 AA         [24]14625 	mov	dpl,#0xaa
      005435 12 00 EB         [24]14626 	lcall	_writeAllRAM
                                  14627 ;	.\ecen4350_lcd_v4.c:3548: setCursor(30, 150);
      005438 75 6B 96         [24]14628 	mov	_setCursor_PARM_2,#0x96
      00543B 75 6C 00         [24]14629 	mov	(_setCursor_PARM_2 + 1),#0x00
      00543E 90 00 1E         [24]14630 	mov	dptr,#0x001e
      005441 12 05 BF         [24]14631 	lcall	_setCursor
                                  14632 ;	.\ecen4350_lcd_v4.c:3549: LCD_string_write("...\n");
      005444 90 6A 56         [24]14633 	mov	dptr,#___str_216
      005447 75 F0 80         [24]14634 	mov	b,#0x80
      00544A 12 10 D9         [24]14635 	lcall	_LCD_string_write
                                  14636 ;	.\ecen4350_lcd_v4.c:3550: checkAllRAM(0xAA);
      00544D 75 82 AA         [24]14637 	mov	dpl,#0xaa
      005450 12 01 1A         [24]14638 	lcall	_checkAllRAM
                                  14639 ;	.\ecen4350_lcd_v4.c:3551: UART_en = 0;
      005453 78 72            [12]14640 	mov	r0,#_UART_en
      005455 76 00            [12]14641 	mov	@r0,#0x00
                                  14642 ;	.\ecen4350_lcd_v4.c:3554: loop:
      005457                      14643 00101$:
                                  14644 ;	.\ecen4350_lcd_v4.c:3555: validKey = 1;
      005457 7F 01            [12]14645 	mov	r7,#0x01
                                  14646 ;	.\ecen4350_lcd_v4.c:3556: iowrite8(seg7_address, OFF);
      005459 85 0C 82         [24]14647 	mov	dpl,_seg7_address
      00545C 85 0D 83         [24]14648 	mov	dph,(_seg7_address + 1)
                                  14649 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14650 ;	assignBit
      00545F D2 B5            [12]14651 	setb	_P3_5
                                  14652 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005461 74 FF            [12]14653 	mov	a,#0xff
      005463 F0               [24]14654 	movx	@dptr,a
                                  14655 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14656 ;	assignBit
      005464 C2 B5            [12]14657 	clr	_P3_5
                                  14658 ;	.\ecen4350_lcd_v4.c:3557: clearLCD();
      005466 C0 07            [24]14659 	push	ar7
      005468 12 0E 5C         [24]14660 	lcall	_clearLCD
                                  14661 ;	.\ecen4350_lcd_v4.c:3558: setCursor(30, 120);
      00546B 75 6B 78         [24]14662 	mov	_setCursor_PARM_2,#0x78
      00546E 75 6C 00         [24]14663 	mov	(_setCursor_PARM_2 + 1),#0x00
      005471 90 00 1E         [24]14664 	mov	dptr,#0x001e
      005474 12 05 BF         [24]14665 	lcall	_setCursor
                                  14666 ;	.\ecen4350_lcd_v4.c:3559: setTextSize(3);
      005477 75 82 03         [24]14667 	mov	dpl,#0x03
      00547A 12 05 D9         [24]14668 	lcall	_setTextSize
                                  14669 ;	.\ecen4350_lcd_v4.c:3560: setColorSelect();
      00547D 12 16 A8         [24]14670 	lcall	_setColorSelect
                                  14671 ;	.\ecen4350_lcd_v4.c:3561: rtcPrint();
      005480 12 04 AF         [24]14672 	lcall	_rtcPrint
                                  14673 ;	.\ecen4350_lcd_v4.c:3562: printMenu();
      005483 12 18 02         [24]14674 	lcall	_printMenu
      005486 D0 07            [24]14675 	pop	ar7
                                  14676 ;	.\ecen4350_lcd_v4.c:3563: inputKey:
      005488                      14677 00102$:
                                  14678 ;	.\ecen4350_lcd_v4.c:3564: selection = keyDetect();
      005488 C0 07            [24]14679 	push	ar7
      00548A 12 11 F7         [24]14680 	lcall	_keyDetect
      00548D AE 82            [24]14681 	mov	r6,dpl
      00548F D0 07            [24]14682 	pop	ar7
      005491 78 71            [12]14683 	mov	r0,#_selection
      005493 A6 06            [24]14684 	mov	@r0,ar6
                                  14685 ;	.\ecen4350_lcd_v4.c:3565: if (selection == 'D') {
      005495 BE 44 68         [24]14686 	cjne	r6,#0x44,00106$
                                  14687 ;	.\ecen4350_lcd_v4.c:3566: iowrite8(seg7_address, ON);
      005498 85 0C 82         [24]14688 	mov	dpl,_seg7_address
      00549B 85 0D 83         [24]14689 	mov	dph,(_seg7_address + 1)
                                  14690 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14691 ;	assignBit
      00549E D2 B5            [12]14692 	setb	_P3_5
                                  14693 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0054A0 E4               [12]14694 	clr	a
      0054A1 F0               [24]14695 	movx	@dptr,a
                                  14696 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14697 ;	assignBit
      0054A2 C2 B5            [12]14698 	clr	_P3_5
                                  14699 ;	.\ecen4350_lcd_v4.c:3567: setCursor(10, 60);
      0054A4 75 6B 3C         [24]14700 	mov	_setCursor_PARM_2,#0x3c
      0054A7 75 6C 00         [24]14701 	mov	(_setCursor_PARM_2 + 1),#0x00
      0054AA 90 00 0A         [24]14702 	mov	dptr,#0x000a
      0054AD C0 07            [24]14703 	push	ar7
      0054AF 12 05 BF         [24]14704 	lcall	_setCursor
                                  14705 ;	.\ecen4350_lcd_v4.c:3568: setColorHighlight1();
      0054B2 12 16 B3         [24]14706 	lcall	_setColorHighlight1
                                  14707 ;	.\ecen4350_lcd_v4.c:3569: LCD_string_write("<D>");
      0054B5 90 6A 5B         [24]14708 	mov	dptr,#___str_217
      0054B8 75 F0 80         [24]14709 	mov	b,#0x80
      0054BB 12 10 D9         [24]14710 	lcall	_LCD_string_write
                                  14711 ;	.\ecen4350_lcd_v4.c:3570: setColorHighlight2();
      0054BE 12 16 BF         [24]14712 	lcall	_setColorHighlight2
                                  14713 ;	.\ecen4350_lcd_v4.c:3571: LCD_string_write(" DUMP\n");
      0054C1 90 5E 99         [24]14714 	mov	dptr,#___str_7
      0054C4 75 F0 80         [24]14715 	mov	b,#0x80
      0054C7 12 10 D9         [24]14716 	lcall	_LCD_string_write
                                  14717 ;	.\ecen4350_lcd_v4.c:3572: delay(20);
      0054CA 90 00 14         [24]14718 	mov	dptr,#0x0014
      0054CD 12 01 A9         [24]14719 	lcall	_delay
      0054D0 D0 07            [24]14720 	pop	ar7
                                  14721 ;	.\ecen4350_lcd_v4.c:3573: iowrite8(seg7_address, SEG_D);
      0054D2 85 0C 82         [24]14722 	mov	dpl,_seg7_address
      0054D5 85 0D 83         [24]14723 	mov	dph,(_seg7_address + 1)
                                  14724 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14725 ;	assignBit
      0054D8 D2 B5            [12]14726 	setb	_P3_5
                                  14727 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0054DA 74 A1            [12]14728 	mov	a,#0xa1
      0054DC F0               [24]14729 	movx	@dptr,a
                                  14730 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14731 ;	assignBit
      0054DD C2 B5            [12]14732 	clr	_P3_5
                                  14733 ;	.\ecen4350_lcd_v4.c:3574: if (validKey == 0) {
      0054DF EF               [12]14734 	mov	a,r7
      0054E0 70 18            [24]14735 	jnz	00104$
                                  14736 ;	.\ecen4350_lcd_v4.c:3575: setColorDefault();
      0054E2 12 16 9D         [24]14737 	lcall	_setColorDefault
                                  14738 ;	.\ecen4350_lcd_v4.c:3576: setCursor(60, 280);
      0054E5 75 6B 18         [24]14739 	mov	_setCursor_PARM_2,#0x18
      0054E8 75 6C 01         [24]14740 	mov	(_setCursor_PARM_2 + 1),#0x01
      0054EB 90 00 3C         [24]14741 	mov	dptr,#0x003c
      0054EE 12 05 BF         [24]14742 	lcall	_setCursor
                                  14743 ;	.\ecen4350_lcd_v4.c:3577: LCD_string_write("          ");
      0054F1 90 6A 5F         [24]14744 	mov	dptr,#___str_218
      0054F4 75 F0 80         [24]14745 	mov	b,#0x80
      0054F7 12 10 D9         [24]14746 	lcall	_LCD_string_write
      0054FA                      14747 00104$:
                                  14748 ;	.\ecen4350_lcd_v4.c:3579: dump();
      0054FA 12 19 5D         [24]14749 	lcall	_dump
                                  14750 ;	.\ecen4350_lcd_v4.c:3580: goto loop;
      0054FD 02 54 57         [24]14751 	ljmp	00101$
      005500                      14752 00106$:
                                  14753 ;	.\ecen4350_lcd_v4.c:3581: } if(selection == 'B') {
      005500 BE 42 68         [24]14754 	cjne	r6,#0x42,00110$
                                  14755 ;	.\ecen4350_lcd_v4.c:3582: iowrite8(seg7_address, ON);
      005503 85 0C 82         [24]14756 	mov	dpl,_seg7_address
      005506 85 0D 83         [24]14757 	mov	dph,(_seg7_address + 1)
                                  14758 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14759 ;	assignBit
      005509 D2 B5            [12]14760 	setb	_P3_5
                                  14761 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00550B E4               [12]14762 	clr	a
      00550C F0               [24]14763 	movx	@dptr,a
                                  14764 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14765 ;	assignBit
      00550D C2 B5            [12]14766 	clr	_P3_5
                                  14767 ;	.\ecen4350_lcd_v4.c:3583: setCursor(130, 60);
      00550F 75 6B 3C         [24]14768 	mov	_setCursor_PARM_2,#0x3c
      005512 75 6C 00         [24]14769 	mov	(_setCursor_PARM_2 + 1),#0x00
      005515 90 00 82         [24]14770 	mov	dptr,#0x0082
      005518 C0 07            [24]14771 	push	ar7
      00551A 12 05 BF         [24]14772 	lcall	_setCursor
                                  14773 ;	.\ecen4350_lcd_v4.c:3584: setColorHighlight1();
      00551D 12 16 B3         [24]14774 	lcall	_setColorHighlight1
                                  14775 ;	.\ecen4350_lcd_v4.c:3585: LCD_string_write("<B>");
      005520 90 6A 6A         [24]14776 	mov	dptr,#___str_219
      005523 75 F0 80         [24]14777 	mov	b,#0x80
      005526 12 10 D9         [24]14778 	lcall	_LCD_string_write
                                  14779 ;	.\ecen4350_lcd_v4.c:3586: setColorHighlight2();
      005529 12 16 BF         [24]14780 	lcall	_setColorHighlight2
                                  14781 ;	.\ecen4350_lcd_v4.c:3587: LCD_string_write(" MOVE\n");
      00552C 90 5E A5         [24]14782 	mov	dptr,#___str_9
      00552F 75 F0 80         [24]14783 	mov	b,#0x80
      005532 12 10 D9         [24]14784 	lcall	_LCD_string_write
                                  14785 ;	.\ecen4350_lcd_v4.c:3588: delay(20);
      005535 90 00 14         [24]14786 	mov	dptr,#0x0014
      005538 12 01 A9         [24]14787 	lcall	_delay
      00553B D0 07            [24]14788 	pop	ar7
                                  14789 ;	.\ecen4350_lcd_v4.c:3589: iowrite8(seg7_address, SEG_B);
      00553D 85 0C 82         [24]14790 	mov	dpl,_seg7_address
      005540 85 0D 83         [24]14791 	mov	dph,(_seg7_address + 1)
                                  14792 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14793 ;	assignBit
      005543 D2 B5            [12]14794 	setb	_P3_5
                                  14795 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005545 74 83            [12]14796 	mov	a,#0x83
      005547 F0               [24]14797 	movx	@dptr,a
                                  14798 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14799 ;	assignBit
      005548 C2 B5            [12]14800 	clr	_P3_5
                                  14801 ;	.\ecen4350_lcd_v4.c:3590: if (validKey == 0) {
      00554A EF               [12]14802 	mov	a,r7
      00554B 70 18            [24]14803 	jnz	00108$
                                  14804 ;	.\ecen4350_lcd_v4.c:3591: setColorDefault();
      00554D 12 16 9D         [24]14805 	lcall	_setColorDefault
                                  14806 ;	.\ecen4350_lcd_v4.c:3592: setCursor(60, 280);
      005550 75 6B 18         [24]14807 	mov	_setCursor_PARM_2,#0x18
      005553 75 6C 01         [24]14808 	mov	(_setCursor_PARM_2 + 1),#0x01
      005556 90 00 3C         [24]14809 	mov	dptr,#0x003c
      005559 12 05 BF         [24]14810 	lcall	_setCursor
                                  14811 ;	.\ecen4350_lcd_v4.c:3593: LCD_string_write("          ");
      00555C 90 6A 5F         [24]14812 	mov	dptr,#___str_218
      00555F 75 F0 80         [24]14813 	mov	b,#0x80
      005562 12 10 D9         [24]14814 	lcall	_LCD_string_write
      005565                      14815 00108$:
                                  14816 ;	.\ecen4350_lcd_v4.c:3595: move();
      005565 12 22 1E         [24]14817 	lcall	_move
                                  14818 ;	.\ecen4350_lcd_v4.c:3596: goto loop;
      005568 02 54 57         [24]14819 	ljmp	00101$
      00556B                      14820 00110$:
                                  14821 ;	.\ecen4350_lcd_v4.c:3597: } if(selection == 'E') {
      00556B BE 45 68         [24]14822 	cjne	r6,#0x45,00114$
                                  14823 ;	.\ecen4350_lcd_v4.c:3598: iowrite8(seg7_address, ON);
      00556E 85 0C 82         [24]14824 	mov	dpl,_seg7_address
      005571 85 0D 83         [24]14825 	mov	dph,(_seg7_address + 1)
                                  14826 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14827 ;	assignBit
      005574 D2 B5            [12]14828 	setb	_P3_5
                                  14829 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005576 E4               [12]14830 	clr	a
      005577 F0               [24]14831 	movx	@dptr,a
                                  14832 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14833 ;	assignBit
      005578 C2 B5            [12]14834 	clr	_P3_5
                                  14835 ;	.\ecen4350_lcd_v4.c:3599: setCursor(10, 100);
      00557A 75 6B 64         [24]14836 	mov	_setCursor_PARM_2,#0x64
      00557D 75 6C 00         [24]14837 	mov	(_setCursor_PARM_2 + 1),#0x00
      005580 90 00 0A         [24]14838 	mov	dptr,#0x000a
      005583 C0 07            [24]14839 	push	ar7
      005585 12 05 BF         [24]14840 	lcall	_setCursor
                                  14841 ;	.\ecen4350_lcd_v4.c:3600: setColorHighlight1();
      005588 12 16 B3         [24]14842 	lcall	_setColorHighlight1
                                  14843 ;	.\ecen4350_lcd_v4.c:3601: LCD_string_write("<E>");
      00558B 90 6A 6E         [24]14844 	mov	dptr,#___str_220
      00558E 75 F0 80         [24]14845 	mov	b,#0x80
      005591 12 10 D9         [24]14846 	lcall	_LCD_string_write
                                  14847 ;	.\ecen4350_lcd_v4.c:3602: setColorHighlight2();
      005594 12 16 BF         [24]14848 	lcall	_setColorHighlight2
                                  14849 ;	.\ecen4350_lcd_v4.c:3603: LCD_string_write(" EDIT\n");
      005597 90 5E B1         [24]14850 	mov	dptr,#___str_11
      00559A 75 F0 80         [24]14851 	mov	b,#0x80
      00559D 12 10 D9         [24]14852 	lcall	_LCD_string_write
                                  14853 ;	.\ecen4350_lcd_v4.c:3604: delay(20);
      0055A0 90 00 14         [24]14854 	mov	dptr,#0x0014
      0055A3 12 01 A9         [24]14855 	lcall	_delay
      0055A6 D0 07            [24]14856 	pop	ar7
                                  14857 ;	.\ecen4350_lcd_v4.c:3605: iowrite8(seg7_address, SEG_E);
      0055A8 85 0C 82         [24]14858 	mov	dpl,_seg7_address
      0055AB 85 0D 83         [24]14859 	mov	dph,(_seg7_address + 1)
                                  14860 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14861 ;	assignBit
      0055AE D2 B5            [12]14862 	setb	_P3_5
                                  14863 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0055B0 74 86            [12]14864 	mov	a,#0x86
      0055B2 F0               [24]14865 	movx	@dptr,a
                                  14866 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14867 ;	assignBit
      0055B3 C2 B5            [12]14868 	clr	_P3_5
                                  14869 ;	.\ecen4350_lcd_v4.c:3606: if (validKey == 0) {
      0055B5 EF               [12]14870 	mov	a,r7
      0055B6 70 18            [24]14871 	jnz	00112$
                                  14872 ;	.\ecen4350_lcd_v4.c:3607: setColorDefault();
      0055B8 12 16 9D         [24]14873 	lcall	_setColorDefault
                                  14874 ;	.\ecen4350_lcd_v4.c:3608: setCursor(60, 280);
      0055BB 75 6B 18         [24]14875 	mov	_setCursor_PARM_2,#0x18
      0055BE 75 6C 01         [24]14876 	mov	(_setCursor_PARM_2 + 1),#0x01
      0055C1 90 00 3C         [24]14877 	mov	dptr,#0x003c
      0055C4 12 05 BF         [24]14878 	lcall	_setCursor
                                  14879 ;	.\ecen4350_lcd_v4.c:3609: LCD_string_write("          ");
      0055C7 90 6A 5F         [24]14880 	mov	dptr,#___str_218
      0055CA 75 F0 80         [24]14881 	mov	b,#0x80
      0055CD 12 10 D9         [24]14882 	lcall	_LCD_string_write
      0055D0                      14883 00112$:
                                  14884 ;	.\ecen4350_lcd_v4.c:3611: edit();
      0055D0 12 27 87         [24]14885 	lcall	_edit
                                  14886 ;	.\ecen4350_lcd_v4.c:3612: goto loop;
      0055D3 02 54 57         [24]14887 	ljmp	00101$
      0055D6                      14888 00114$:
                                  14889 ;	.\ecen4350_lcd_v4.c:3613: } if(selection == 'F') {
      0055D6 BE 46 68         [24]14890 	cjne	r6,#0x46,00118$
                                  14891 ;	.\ecen4350_lcd_v4.c:3614: iowrite8(seg7_address, ON);
      0055D9 85 0C 82         [24]14892 	mov	dpl,_seg7_address
      0055DC 85 0D 83         [24]14893 	mov	dph,(_seg7_address + 1)
                                  14894 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14895 ;	assignBit
      0055DF D2 B5            [12]14896 	setb	_P3_5
                                  14897 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0055E1 E4               [12]14898 	clr	a
      0055E2 F0               [24]14899 	movx	@dptr,a
                                  14900 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14901 ;	assignBit
      0055E3 C2 B5            [12]14902 	clr	_P3_5
                                  14903 ;	.\ecen4350_lcd_v4.c:3615: setCursor(130, 100);
      0055E5 75 6B 64         [24]14904 	mov	_setCursor_PARM_2,#0x64
      0055E8 75 6C 00         [24]14905 	mov	(_setCursor_PARM_2 + 1),#0x00
      0055EB 90 00 82         [24]14906 	mov	dptr,#0x0082
      0055EE C0 07            [24]14907 	push	ar7
      0055F0 12 05 BF         [24]14908 	lcall	_setCursor
                                  14909 ;	.\ecen4350_lcd_v4.c:3616: setColorHighlight1();
      0055F3 12 16 B3         [24]14910 	lcall	_setColorHighlight1
                                  14911 ;	.\ecen4350_lcd_v4.c:3617: LCD_string_write("<F>");
      0055F6 90 6A 72         [24]14912 	mov	dptr,#___str_221
      0055F9 75 F0 80         [24]14913 	mov	b,#0x80
      0055FC 12 10 D9         [24]14914 	lcall	_LCD_string_write
                                  14915 ;	.\ecen4350_lcd_v4.c:3618: setColorHighlight2();
      0055FF 12 16 BF         [24]14916 	lcall	_setColorHighlight2
                                  14917 ;	.\ecen4350_lcd_v4.c:3619: LCD_string_write(" FIND\n");
      005602 90 5E BD         [24]14918 	mov	dptr,#___str_13
      005605 75 F0 80         [24]14919 	mov	b,#0x80
      005608 12 10 D9         [24]14920 	lcall	_LCD_string_write
                                  14921 ;	.\ecen4350_lcd_v4.c:3620: delay(20);
      00560B 90 00 14         [24]14922 	mov	dptr,#0x0014
      00560E 12 01 A9         [24]14923 	lcall	_delay
      005611 D0 07            [24]14924 	pop	ar7
                                  14925 ;	.\ecen4350_lcd_v4.c:3621: iowrite8(seg7_address, SEG_F);
      005613 85 0C 82         [24]14926 	mov	dpl,_seg7_address
      005616 85 0D 83         [24]14927 	mov	dph,(_seg7_address + 1)
                                  14928 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14929 ;	assignBit
      005619 D2 B5            [12]14930 	setb	_P3_5
                                  14931 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00561B 74 8E            [12]14932 	mov	a,#0x8e
      00561D F0               [24]14933 	movx	@dptr,a
                                  14934 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14935 ;	assignBit
      00561E C2 B5            [12]14936 	clr	_P3_5
                                  14937 ;	.\ecen4350_lcd_v4.c:3622: if (validKey == 0) {
      005620 EF               [12]14938 	mov	a,r7
      005621 70 18            [24]14939 	jnz	00116$
                                  14940 ;	.\ecen4350_lcd_v4.c:3623: setColorDefault();
      005623 12 16 9D         [24]14941 	lcall	_setColorDefault
                                  14942 ;	.\ecen4350_lcd_v4.c:3624: setCursor(60, 280);
      005626 75 6B 18         [24]14943 	mov	_setCursor_PARM_2,#0x18
      005629 75 6C 01         [24]14944 	mov	(_setCursor_PARM_2 + 1),#0x01
      00562C 90 00 3C         [24]14945 	mov	dptr,#0x003c
      00562F 12 05 BF         [24]14946 	lcall	_setCursor
                                  14947 ;	.\ecen4350_lcd_v4.c:3625: LCD_string_write("          ");
      005632 90 6A 5F         [24]14948 	mov	dptr,#___str_218
      005635 75 F0 80         [24]14949 	mov	b,#0x80
      005638 12 10 D9         [24]14950 	lcall	_LCD_string_write
      00563B                      14951 00116$:
                                  14952 ;	.\ecen4350_lcd_v4.c:3627: find();
      00563B 12 2E E3         [24]14953 	lcall	_find
                                  14954 ;	.\ecen4350_lcd_v4.c:3628: goto loop;
      00563E 02 54 57         [24]14955 	ljmp	00101$
      005641                      14956 00118$:
                                  14957 ;	.\ecen4350_lcd_v4.c:3629: } if(selection == 'C') {
      005641 BE 43 68         [24]14958 	cjne	r6,#0x43,00122$
                                  14959 ;	.\ecen4350_lcd_v4.c:3630: iowrite8(seg7_address, ON);
      005644 85 0C 82         [24]14960 	mov	dpl,_seg7_address
      005647 85 0D 83         [24]14961 	mov	dph,(_seg7_address + 1)
                                  14962 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14963 ;	assignBit
      00564A D2 B5            [12]14964 	setb	_P3_5
                                  14965 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      00564C E4               [12]14966 	clr	a
      00564D F0               [24]14967 	movx	@dptr,a
                                  14968 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  14969 ;	assignBit
      00564E C2 B5            [12]14970 	clr	_P3_5
                                  14971 ;	.\ecen4350_lcd_v4.c:3631: setCursor(10, 160);
      005650 75 6B A0         [24]14972 	mov	_setCursor_PARM_2,#0xa0
      005653 75 6C 00         [24]14973 	mov	(_setCursor_PARM_2 + 1),#0x00
      005656 90 00 0A         [24]14974 	mov	dptr,#0x000a
      005659 C0 07            [24]14975 	push	ar7
      00565B 12 05 BF         [24]14976 	lcall	_setCursor
                                  14977 ;	.\ecen4350_lcd_v4.c:3632: setColorHighlight1();
      00565E 12 16 B3         [24]14978 	lcall	_setColorHighlight1
                                  14979 ;	.\ecen4350_lcd_v4.c:3633: LCD_string_write("<C>");
      005661 90 6A 76         [24]14980 	mov	dptr,#___str_222
      005664 75 F0 80         [24]14981 	mov	b,#0x80
      005667 12 10 D9         [24]14982 	lcall	_LCD_string_write
                                  14983 ;	.\ecen4350_lcd_v4.c:3634: setColorHighlight2();
      00566A 12 16 BF         [24]14984 	lcall	_setColorHighlight2
                                  14985 ;	.\ecen4350_lcd_v4.c:3635: LCD_string_write(" COUNT\n");
      00566D 90 5E C9         [24]14986 	mov	dptr,#___str_15
      005670 75 F0 80         [24]14987 	mov	b,#0x80
      005673 12 10 D9         [24]14988 	lcall	_LCD_string_write
                                  14989 ;	.\ecen4350_lcd_v4.c:3636: delay(20);
      005676 90 00 14         [24]14990 	mov	dptr,#0x0014
      005679 12 01 A9         [24]14991 	lcall	_delay
      00567C D0 07            [24]14992 	pop	ar7
                                  14993 ;	.\ecen4350_lcd_v4.c:3637: iowrite8(seg7_address, SEG_C);
      00567E 85 0C 82         [24]14994 	mov	dpl,_seg7_address
      005681 85 0D 83         [24]14995 	mov	dph,(_seg7_address + 1)
                                  14996 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  14997 ;	assignBit
      005684 D2 B5            [12]14998 	setb	_P3_5
                                  14999 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005686 74 C6            [12]15000 	mov	a,#0xc6
      005688 F0               [24]15001 	movx	@dptr,a
                                  15002 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15003 ;	assignBit
      005689 C2 B5            [12]15004 	clr	_P3_5
                                  15005 ;	.\ecen4350_lcd_v4.c:3638: if (validKey == 0) {
      00568B EF               [12]15006 	mov	a,r7
      00568C 70 18            [24]15007 	jnz	00120$
                                  15008 ;	.\ecen4350_lcd_v4.c:3639: setColorDefault();
      00568E 12 16 9D         [24]15009 	lcall	_setColorDefault
                                  15010 ;	.\ecen4350_lcd_v4.c:3640: setCursor(60, 280);
      005691 75 6B 18         [24]15011 	mov	_setCursor_PARM_2,#0x18
      005694 75 6C 01         [24]15012 	mov	(_setCursor_PARM_2 + 1),#0x01
      005697 90 00 3C         [24]15013 	mov	dptr,#0x003c
      00569A 12 05 BF         [24]15014 	lcall	_setCursor
                                  15015 ;	.\ecen4350_lcd_v4.c:3641: LCD_string_write("          ");
      00569D 90 6A 5F         [24]15016 	mov	dptr,#___str_218
      0056A0 75 F0 80         [24]15017 	mov	b,#0x80
      0056A3 12 10 D9         [24]15018 	lcall	_LCD_string_write
      0056A6                      15019 00120$:
                                  15020 ;	.\ecen4350_lcd_v4.c:3643: count();
      0056A6 12 39 E7         [24]15021 	lcall	_count
                                  15022 ;	.\ecen4350_lcd_v4.c:3644: goto loop;
      0056A9 02 54 57         [24]15023 	ljmp	00101$
      0056AC                      15024 00122$:
                                  15025 ;	.\ecen4350_lcd_v4.c:3645: } if(selection == 'A') {
      0056AC BE 41 68         [24]15026 	cjne	r6,#0x41,00126$
                                  15027 ;	.\ecen4350_lcd_v4.c:3646: iowrite8(seg7_address, ON);
      0056AF 85 0C 82         [24]15028 	mov	dpl,_seg7_address
      0056B2 85 0D 83         [24]15029 	mov	dph,(_seg7_address + 1)
                                  15030 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15031 ;	assignBit
      0056B5 D2 B5            [12]15032 	setb	_P3_5
                                  15033 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0056B7 E4               [12]15034 	clr	a
      0056B8 F0               [24]15035 	movx	@dptr,a
                                  15036 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15037 ;	assignBit
      0056B9 C2 B5            [12]15038 	clr	_P3_5
                                  15039 ;	.\ecen4350_lcd_v4.c:3647: setCursor(10, 180);
      0056BB 75 6B B4         [24]15040 	mov	_setCursor_PARM_2,#0xb4
      0056BE 75 6C 00         [24]15041 	mov	(_setCursor_PARM_2 + 1),#0x00
      0056C1 90 00 0A         [24]15042 	mov	dptr,#0x000a
      0056C4 C0 07            [24]15043 	push	ar7
      0056C6 12 05 BF         [24]15044 	lcall	_setCursor
                                  15045 ;	.\ecen4350_lcd_v4.c:3648: setColorHighlight1();
      0056C9 12 16 B3         [24]15046 	lcall	_setColorHighlight1
                                  15047 ;	.\ecen4350_lcd_v4.c:3649: LCD_string_write("<A>");
      0056CC 90 6A 7A         [24]15048 	mov	dptr,#___str_223
      0056CF 75 F0 80         [24]15049 	mov	b,#0x80
      0056D2 12 10 D9         [24]15050 	lcall	_LCD_string_write
                                  15051 ;	.\ecen4350_lcd_v4.c:3650: setColorHighlight2();
      0056D5 12 16 BF         [24]15052 	lcall	_setColorHighlight2
                                  15053 ;	.\ecen4350_lcd_v4.c:3651: LCD_string_write(" MEM CHECK\n");
      0056D8 90 5E D6         [24]15054 	mov	dptr,#___str_17
      0056DB 75 F0 80         [24]15055 	mov	b,#0x80
      0056DE 12 10 D9         [24]15056 	lcall	_LCD_string_write
                                  15057 ;	.\ecen4350_lcd_v4.c:3652: delay(20);
      0056E1 90 00 14         [24]15058 	mov	dptr,#0x0014
      0056E4 12 01 A9         [24]15059 	lcall	_delay
      0056E7 D0 07            [24]15060 	pop	ar7
                                  15061 ;	.\ecen4350_lcd_v4.c:3653: iowrite8(seg7_address, SEG_A);
      0056E9 85 0C 82         [24]15062 	mov	dpl,_seg7_address
      0056EC 85 0D 83         [24]15063 	mov	dph,(_seg7_address + 1)
                                  15064 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15065 ;	assignBit
      0056EF D2 B5            [12]15066 	setb	_P3_5
                                  15067 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      0056F1 74 88            [12]15068 	mov	a,#0x88
      0056F3 F0               [24]15069 	movx	@dptr,a
                                  15070 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15071 ;	assignBit
      0056F4 C2 B5            [12]15072 	clr	_P3_5
                                  15073 ;	.\ecen4350_lcd_v4.c:3654: if (validKey == 0) {
      0056F6 EF               [12]15074 	mov	a,r7
      0056F7 70 18            [24]15075 	jnz	00124$
                                  15076 ;	.\ecen4350_lcd_v4.c:3655: setColorDefault();
      0056F9 12 16 9D         [24]15077 	lcall	_setColorDefault
                                  15078 ;	.\ecen4350_lcd_v4.c:3656: setCursor(60, 280);
      0056FC 75 6B 18         [24]15079 	mov	_setCursor_PARM_2,#0x18
      0056FF 75 6C 01         [24]15080 	mov	(_setCursor_PARM_2 + 1),#0x01
      005702 90 00 3C         [24]15081 	mov	dptr,#0x003c
      005705 12 05 BF         [24]15082 	lcall	_setCursor
                                  15083 ;	.\ecen4350_lcd_v4.c:3657: LCD_string_write("          ");
      005708 90 6A 5F         [24]15084 	mov	dptr,#___str_218
      00570B 75 F0 80         [24]15085 	mov	b,#0x80
      00570E 12 10 D9         [24]15086 	lcall	_LCD_string_write
      005711                      15087 00124$:
                                  15088 ;	.\ecen4350_lcd_v4.c:3659: check();
      005711 12 44 C2         [24]15089 	lcall	_check
                                  15090 ;	.\ecen4350_lcd_v4.c:3660: goto loop;
      005714 02 54 57         [24]15091 	ljmp	00101$
      005717                      15092 00126$:
                                  15093 ;	.\ecen4350_lcd_v4.c:3661: } if(selection == '1') {
      005717 BE 31 02         [24]15094 	cjne	r6,#0x31,00250$
      00571A 80 03            [24]15095 	sjmp	00251$
      00571C                      15096 00250$:
      00571C 02 57 BB         [24]15097 	ljmp	00134$
      00571F                      15098 00251$:
                                  15099 ;	.\ecen4350_lcd_v4.c:3662: iowrite8(seg7_address, ON);
      00571F 85 0C 82         [24]15100 	mov	dpl,_seg7_address
      005722 85 0D 83         [24]15101 	mov	dph,(_seg7_address + 1)
                                  15102 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15103 ;	assignBit
      005725 D2 B5            [12]15104 	setb	_P3_5
                                  15105 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005727 E4               [12]15106 	clr	a
      005728 F0               [24]15107 	movx	@dptr,a
                                  15108 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15109 ;	assignBit
      005729 C2 B5            [12]15110 	clr	_P3_5
                                  15111 ;	.\ecen4350_lcd_v4.c:3663: setCursor(10, 220);
      00572B 75 6B DC         [24]15112 	mov	_setCursor_PARM_2,#0xdc
      00572E 75 6C 00         [24]15113 	mov	(_setCursor_PARM_2 + 1),#0x00
      005731 90 00 0A         [24]15114 	mov	dptr,#0x000a
      005734 C0 07            [24]15115 	push	ar7
      005736 12 05 BF         [24]15116 	lcall	_setCursor
                                  15117 ;	.\ecen4350_lcd_v4.c:3664: setColorHighlight1();
      005739 12 16 B3         [24]15118 	lcall	_setColorHighlight1
                                  15119 ;	.\ecen4350_lcd_v4.c:3665: LCD_string_write("<1>");
      00573C 90 6A 7E         [24]15120 	mov	dptr,#___str_224
      00573F 75 F0 80         [24]15121 	mov	b,#0x80
      005742 12 10 D9         [24]15122 	lcall	_LCD_string_write
                                  15123 ;	.\ecen4350_lcd_v4.c:3666: setColorHighlight2();
      005745 12 16 BF         [24]15124 	lcall	_setColorHighlight2
                                  15125 ;	.\ecen4350_lcd_v4.c:3667: LCD_string_write(" UART");
      005748 90 5E E7         [24]15126 	mov	dptr,#___str_19
      00574B 75 F0 80         [24]15127 	mov	b,#0x80
      00574E 12 10 D9         [24]15128 	lcall	_LCD_string_write
                                  15129 ;	.\ecen4350_lcd_v4.c:3668: setTextSize(1);
      005751 75 82 01         [24]15130 	mov	dpl,#0x01
      005754 12 05 D9         [24]15131 	lcall	_setTextSize
      005757 D0 07            [24]15132 	pop	ar7
                                  15133 ;	.\ecen4350_lcd_v4.c:3669: if (UART_en == 1) {
      005759 78 72            [12]15134 	mov	r0,#_UART_en
      00575B B6 01 0D         [24]15135 	cjne	@r0,#0x01,00128$
                                  15136 ;	.\ecen4350_lcd_v4.c:3670: LCD_string_write(" [Enabled]\n");
      00575E 90 5E FA         [24]15137 	mov	dptr,#___str_21
      005761 75 F0 80         [24]15138 	mov	b,#0x80
      005764 C0 07            [24]15139 	push	ar7
      005766 12 10 D9         [24]15140 	lcall	_LCD_string_write
      005769 D0 07            [24]15141 	pop	ar7
      00576B                      15142 00128$:
                                  15143 ;	.\ecen4350_lcd_v4.c:3671: } if (UART_en == 0) {
      00576B 78 72            [12]15144 	mov	r0,#_UART_en
      00576D E6               [12]15145 	mov	a,@r0
      00576E 70 0D            [24]15146 	jnz	00130$
                                  15147 ;	.\ecen4350_lcd_v4.c:3672: LCD_string_write(" [Disabled]\n");
      005770 90 5E ED         [24]15148 	mov	dptr,#___str_20
      005773 75 F0 80         [24]15149 	mov	b,#0x80
      005776 C0 07            [24]15150 	push	ar7
      005778 12 10 D9         [24]15151 	lcall	_LCD_string_write
      00577B D0 07            [24]15152 	pop	ar7
      00577D                      15153 00130$:
                                  15154 ;	.\ecen4350_lcd_v4.c:3674: setTextSize(2);
      00577D 75 82 02         [24]15155 	mov	dpl,#0x02
      005780 C0 07            [24]15156 	push	ar7
      005782 12 05 D9         [24]15157 	lcall	_setTextSize
                                  15158 ;	.\ecen4350_lcd_v4.c:3675: delay(20);
      005785 90 00 14         [24]15159 	mov	dptr,#0x0014
      005788 12 01 A9         [24]15160 	lcall	_delay
      00578B D0 07            [24]15161 	pop	ar7
                                  15162 ;	.\ecen4350_lcd_v4.c:3676: iowrite8(seg7_address, SEG_U);
      00578D 85 0C 82         [24]15163 	mov	dpl,_seg7_address
      005790 85 0D 83         [24]15164 	mov	dph,(_seg7_address + 1)
                                  15165 ;	.\ecen4350_lcd_v4.c:105: IOM = 1;
                                  15166 ;	assignBit
      005793 D2 B5            [12]15167 	setb	_P3_5
                                  15168 ;	.\ecen4350_lcd_v4.c:106: *map_address = d;
      005795 74 C1            [12]15169 	mov	a,#0xc1
      005797 F0               [24]15170 	movx	@dptr,a
                                  15171 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                  15172 ;	assignBit
      005798 C2 B5            [12]15173 	clr	_P3_5
                                  15174 ;	.\ecen4350_lcd_v4.c:3677: if (validKey == 0) {
      00579A EF               [12]15175 	mov	a,r7
      00579B 70 18            [24]15176 	jnz	00132$
                                  15177 ;	.\ecen4350_lcd_v4.c:3678: setColorDefault();
      00579D 12 16 9D         [24]15178 	lcall	_setColorDefault
                                  15179 ;	.\ecen4350_lcd_v4.c:3679: setCursor(60, 280);
      0057A0 75 6B 18         [24]15180 	mov	_setCursor_PARM_2,#0x18
      0057A3 75 6C 01         [24]15181 	mov	(_setCursor_PARM_2 + 1),#0x01
      0057A6 90 00 3C         [24]15182 	mov	dptr,#0x003c
      0057A9 12 05 BF         [24]15183 	lcall	_setCursor
                                  15184 ;	.\ecen4350_lcd_v4.c:3680: LCD_string_write("          ");
      0057AC 90 6A 5F         [24]15185 	mov	dptr,#___str_218
      0057AF 75 F0 80         [24]15186 	mov	b,#0x80
      0057B2 12 10 D9         [24]15187 	lcall	_LCD_string_write
      0057B5                      15188 00132$:
                                  15189 ;	.\ecen4350_lcd_v4.c:3683: uart();
      0057B5 12 45 E4         [24]15190 	lcall	_uart
                                  15191 ;	.\ecen4350_lcd_v4.c:3684: goto loop;
      0057B8 02 54 57         [24]15192 	ljmp	00101$
      0057BB                      15193 00134$:
                                  15194 ;	.\ecen4350_lcd_v4.c:3686: setCursor(45, 260);
      0057BB 75 6B 04         [24]15195 	mov	_setCursor_PARM_2,#0x04
      0057BE 75 6C 01         [24]15196 	mov	(_setCursor_PARM_2 + 1),#0x01
      0057C1 90 00 2D         [24]15197 	mov	dptr,#0x002d
      0057C4 12 05 BF         [24]15198 	lcall	_setCursor
                                  15199 ;	.\ecen4350_lcd_v4.c:3687: setColorRed();
      0057C7 12 16 E2         [24]15200 	lcall	_setColorRed
                                  15201 ;	.\ecen4350_lcd_v4.c:3688: LCD_string_write("INVALID INPUT\n");
      0057CA 90 6A 82         [24]15202 	mov	dptr,#___str_225
      0057CD 75 F0 80         [24]15203 	mov	b,#0x80
      0057D0 12 10 D9         [24]15204 	lcall	_LCD_string_write
                                  15205 ;	.\ecen4350_lcd_v4.c:3689: setCursor(60, 280);
      0057D3 75 6B 18         [24]15206 	mov	_setCursor_PARM_2,#0x18
      0057D6 75 6C 01         [24]15207 	mov	(_setCursor_PARM_2 + 1),#0x01
      0057D9 90 00 3C         [24]15208 	mov	dptr,#0x003c
      0057DC 12 05 BF         [24]15209 	lcall	_setCursor
                                  15210 ;	.\ecen4350_lcd_v4.c:3690: LCD_string_write("Try again.");
      0057DF 90 6A 91         [24]15211 	mov	dptr,#___str_226
      0057E2 75 F0 80         [24]15212 	mov	b,#0x80
      0057E5 12 10 D9         [24]15213 	lcall	_LCD_string_write
                                  15214 ;	.\ecen4350_lcd_v4.c:3691: validKey = 0;
      0057E8 7F 00            [12]15215 	mov	r7,#0x00
                                  15216 ;	.\ecen4350_lcd_v4.c:3692: delay(20);
      0057EA 90 00 14         [24]15217 	mov	dptr,#0x0014
      0057ED C0 07            [24]15218 	push	ar7
      0057EF 12 01 A9         [24]15219 	lcall	_delay
                                  15220 ;	.\ecen4350_lcd_v4.c:3693: setColorDefault();
      0057F2 12 16 9D         [24]15221 	lcall	_setColorDefault
                                  15222 ;	.\ecen4350_lcd_v4.c:3694: setCursor(45, 260);
      0057F5 75 6B 04         [24]15223 	mov	_setCursor_PARM_2,#0x04
      0057F8 75 6C 01         [24]15224 	mov	(_setCursor_PARM_2 + 1),#0x01
      0057FB 90 00 2D         [24]15225 	mov	dptr,#0x002d
      0057FE 12 05 BF         [24]15226 	lcall	_setCursor
                                  15227 ;	.\ecen4350_lcd_v4.c:3695: LCD_string_write("               \n");
      005801 90 6A 9C         [24]15228 	mov	dptr,#___str_227
      005804 75 F0 80         [24]15229 	mov	b,#0x80
      005807 12 10 D9         [24]15230 	lcall	_LCD_string_write
      00580A D0 07            [24]15231 	pop	ar7
                                  15232 ;	.\ecen4350_lcd_v4.c:3696: goto inputKey;
                                  15233 ;	.\ecen4350_lcd_v4.c:3700: }
      00580C 02 54 88         [24]15234 	ljmp	00102$
                                  15235 	.area CSEG    (CODE)
                                  15236 	.area CONST   (CODE)
      005930                      15237 _font:
      005930 00                   15238 	.db #0x00	; 0
      005931 00                   15239 	.db #0x00	; 0
      005932 00                   15240 	.db #0x00	; 0
      005933 00                   15241 	.db #0x00	; 0
      005934 00                   15242 	.db #0x00	; 0
      005935 3E                   15243 	.db #0x3e	; 62
      005936 5B                   15244 	.db #0x5b	; 91
      005937 4F                   15245 	.db #0x4f	; 79	'O'
      005938 5B                   15246 	.db #0x5b	; 91
      005939 3E                   15247 	.db #0x3e	; 62
      00593A 3E                   15248 	.db #0x3e	; 62
      00593B 6B                   15249 	.db #0x6b	; 107	'k'
      00593C 4F                   15250 	.db #0x4f	; 79	'O'
      00593D 6B                   15251 	.db #0x6b	; 107	'k'
      00593E 3E                   15252 	.db #0x3e	; 62
      00593F 1C                   15253 	.db #0x1c	; 28
      005940 3E                   15254 	.db #0x3e	; 62
      005941 7C                   15255 	.db #0x7c	; 124
      005942 3E                   15256 	.db #0x3e	; 62
      005943 1C                   15257 	.db #0x1c	; 28
      005944 18                   15258 	.db #0x18	; 24
      005945 3C                   15259 	.db #0x3c	; 60
      005946 7E                   15260 	.db #0x7e	; 126
      005947 3C                   15261 	.db #0x3c	; 60
      005948 18                   15262 	.db #0x18	; 24
      005949 1C                   15263 	.db #0x1c	; 28
      00594A 57                   15264 	.db #0x57	; 87	'W'
      00594B 7D                   15265 	.db #0x7d	; 125
      00594C 57                   15266 	.db #0x57	; 87	'W'
      00594D 1C                   15267 	.db #0x1c	; 28
      00594E 1C                   15268 	.db #0x1c	; 28
      00594F 5E                   15269 	.db #0x5e	; 94
      005950 7F                   15270 	.db #0x7f	; 127
      005951 5E                   15271 	.db #0x5e	; 94
      005952 1C                   15272 	.db #0x1c	; 28
      005953 00                   15273 	.db #0x00	; 0
      005954 18                   15274 	.db #0x18	; 24
      005955 3C                   15275 	.db #0x3c	; 60
      005956 18                   15276 	.db #0x18	; 24
      005957 00                   15277 	.db #0x00	; 0
      005958 FF                   15278 	.db #0xff	; 255
      005959 E7                   15279 	.db #0xe7	; 231
      00595A C3                   15280 	.db #0xc3	; 195
      00595B E7                   15281 	.db #0xe7	; 231
      00595C FF                   15282 	.db #0xff	; 255
      00595D 00                   15283 	.db #0x00	; 0
      00595E 18                   15284 	.db #0x18	; 24
      00595F 24                   15285 	.db #0x24	; 36
      005960 18                   15286 	.db #0x18	; 24
      005961 00                   15287 	.db #0x00	; 0
      005962 FF                   15288 	.db #0xff	; 255
      005963 E7                   15289 	.db #0xe7	; 231
      005964 DB                   15290 	.db #0xdb	; 219
      005965 E7                   15291 	.db #0xe7	; 231
      005966 FF                   15292 	.db #0xff	; 255
      005967 30                   15293 	.db #0x30	; 48	'0'
      005968 48                   15294 	.db #0x48	; 72	'H'
      005969 3A                   15295 	.db #0x3a	; 58
      00596A 06                   15296 	.db #0x06	; 6
      00596B 0E                   15297 	.db #0x0e	; 14
      00596C 26                   15298 	.db #0x26	; 38
      00596D 29                   15299 	.db #0x29	; 41
      00596E 79                   15300 	.db #0x79	; 121	'y'
      00596F 29                   15301 	.db #0x29	; 41
      005970 26                   15302 	.db #0x26	; 38
      005971 40                   15303 	.db #0x40	; 64
      005972 7F                   15304 	.db #0x7f	; 127
      005973 05                   15305 	.db #0x05	; 5
      005974 05                   15306 	.db #0x05	; 5
      005975 07                   15307 	.db #0x07	; 7
      005976 40                   15308 	.db #0x40	; 64
      005977 7F                   15309 	.db #0x7f	; 127
      005978 05                   15310 	.db #0x05	; 5
      005979 25                   15311 	.db #0x25	; 37
      00597A 3F                   15312 	.db #0x3f	; 63
      00597B 5A                   15313 	.db #0x5a	; 90	'Z'
      00597C 3C                   15314 	.db #0x3c	; 60
      00597D E7                   15315 	.db #0xe7	; 231
      00597E 3C                   15316 	.db #0x3c	; 60
      00597F 5A                   15317 	.db #0x5a	; 90	'Z'
      005980 7F                   15318 	.db #0x7f	; 127
      005981 3E                   15319 	.db #0x3e	; 62
      005982 1C                   15320 	.db #0x1c	; 28
      005983 1C                   15321 	.db #0x1c	; 28
      005984 08                   15322 	.db #0x08	; 8
      005985 08                   15323 	.db #0x08	; 8
      005986 1C                   15324 	.db #0x1c	; 28
      005987 1C                   15325 	.db #0x1c	; 28
      005988 3E                   15326 	.db #0x3e	; 62
      005989 7F                   15327 	.db #0x7f	; 127
      00598A 14                   15328 	.db #0x14	; 20
      00598B 22                   15329 	.db #0x22	; 34
      00598C 7F                   15330 	.db #0x7f	; 127
      00598D 22                   15331 	.db #0x22	; 34
      00598E 14                   15332 	.db #0x14	; 20
      00598F 5F                   15333 	.db #0x5f	; 95
      005990 5F                   15334 	.db #0x5f	; 95
      005991 00                   15335 	.db #0x00	; 0
      005992 5F                   15336 	.db #0x5f	; 95
      005993 5F                   15337 	.db #0x5f	; 95
      005994 06                   15338 	.db #0x06	; 6
      005995 09                   15339 	.db #0x09	; 9
      005996 7F                   15340 	.db #0x7f	; 127
      005997 01                   15341 	.db #0x01	; 1
      005998 7F                   15342 	.db #0x7f	; 127
      005999 00                   15343 	.db #0x00	; 0
      00599A 66                   15344 	.db #0x66	; 102	'f'
      00599B 89                   15345 	.db #0x89	; 137
      00599C 95                   15346 	.db #0x95	; 149
      00599D 6A                   15347 	.db #0x6a	; 106	'j'
      00599E 60                   15348 	.db #0x60	; 96
      00599F 60                   15349 	.db #0x60	; 96
      0059A0 60                   15350 	.db #0x60	; 96
      0059A1 60                   15351 	.db #0x60	; 96
      0059A2 60                   15352 	.db #0x60	; 96
      0059A3 94                   15353 	.db #0x94	; 148
      0059A4 A2                   15354 	.db #0xa2	; 162
      0059A5 FF                   15355 	.db #0xff	; 255
      0059A6 A2                   15356 	.db #0xa2	; 162
      0059A7 94                   15357 	.db #0x94	; 148
      0059A8 08                   15358 	.db #0x08	; 8
      0059A9 04                   15359 	.db #0x04	; 4
      0059AA 7E                   15360 	.db #0x7e	; 126
      0059AB 04                   15361 	.db #0x04	; 4
      0059AC 08                   15362 	.db #0x08	; 8
      0059AD 10                   15363 	.db #0x10	; 16
      0059AE 20                   15364 	.db #0x20	; 32
      0059AF 7E                   15365 	.db #0x7e	; 126
      0059B0 20                   15366 	.db #0x20	; 32
      0059B1 10                   15367 	.db #0x10	; 16
      0059B2 08                   15368 	.db #0x08	; 8
      0059B3 08                   15369 	.db #0x08	; 8
      0059B4 2A                   15370 	.db #0x2a	; 42
      0059B5 1C                   15371 	.db #0x1c	; 28
      0059B6 08                   15372 	.db #0x08	; 8
      0059B7 08                   15373 	.db #0x08	; 8
      0059B8 1C                   15374 	.db #0x1c	; 28
      0059B9 2A                   15375 	.db #0x2a	; 42
      0059BA 08                   15376 	.db #0x08	; 8
      0059BB 08                   15377 	.db #0x08	; 8
      0059BC 1E                   15378 	.db #0x1e	; 30
      0059BD 10                   15379 	.db #0x10	; 16
      0059BE 10                   15380 	.db #0x10	; 16
      0059BF 10                   15381 	.db #0x10	; 16
      0059C0 10                   15382 	.db #0x10	; 16
      0059C1 0C                   15383 	.db #0x0c	; 12
      0059C2 1E                   15384 	.db #0x1e	; 30
      0059C3 0C                   15385 	.db #0x0c	; 12
      0059C4 1E                   15386 	.db #0x1e	; 30
      0059C5 0C                   15387 	.db #0x0c	; 12
      0059C6 30                   15388 	.db #0x30	; 48	'0'
      0059C7 38                   15389 	.db #0x38	; 56	'8'
      0059C8 3E                   15390 	.db #0x3e	; 62
      0059C9 38                   15391 	.db #0x38	; 56	'8'
      0059CA 30                   15392 	.db #0x30	; 48	'0'
      0059CB 06                   15393 	.db #0x06	; 6
      0059CC 0E                   15394 	.db #0x0e	; 14
      0059CD 3E                   15395 	.db #0x3e	; 62
      0059CE 0E                   15396 	.db #0x0e	; 14
      0059CF 06                   15397 	.db #0x06	; 6
      0059D0 00                   15398 	.db #0x00	; 0
      0059D1 00                   15399 	.db #0x00	; 0
      0059D2 00                   15400 	.db #0x00	; 0
      0059D3 00                   15401 	.db #0x00	; 0
      0059D4 00                   15402 	.db #0x00	; 0
      0059D5 00                   15403 	.db #0x00	; 0
      0059D6 00                   15404 	.db #0x00	; 0
      0059D7 5F                   15405 	.db #0x5f	; 95
      0059D8 00                   15406 	.db #0x00	; 0
      0059D9 00                   15407 	.db #0x00	; 0
      0059DA 00                   15408 	.db #0x00	; 0
      0059DB 07                   15409 	.db #0x07	; 7
      0059DC 00                   15410 	.db #0x00	; 0
      0059DD 07                   15411 	.db #0x07	; 7
      0059DE 00                   15412 	.db #0x00	; 0
      0059DF 14                   15413 	.db #0x14	; 20
      0059E0 7F                   15414 	.db #0x7f	; 127
      0059E1 14                   15415 	.db #0x14	; 20
      0059E2 7F                   15416 	.db #0x7f	; 127
      0059E3 14                   15417 	.db #0x14	; 20
      0059E4 24                   15418 	.db #0x24	; 36
      0059E5 2A                   15419 	.db #0x2a	; 42
      0059E6 7F                   15420 	.db #0x7f	; 127
      0059E7 2A                   15421 	.db #0x2a	; 42
      0059E8 12                   15422 	.db #0x12	; 18
      0059E9 23                   15423 	.db #0x23	; 35
      0059EA 13                   15424 	.db #0x13	; 19
      0059EB 08                   15425 	.db #0x08	; 8
      0059EC 64                   15426 	.db #0x64	; 100	'd'
      0059ED 62                   15427 	.db #0x62	; 98	'b'
      0059EE 36                   15428 	.db #0x36	; 54	'6'
      0059EF 49                   15429 	.db #0x49	; 73	'I'
      0059F0 56                   15430 	.db #0x56	; 86	'V'
      0059F1 20                   15431 	.db #0x20	; 32
      0059F2 50                   15432 	.db #0x50	; 80	'P'
      0059F3 00                   15433 	.db #0x00	; 0
      0059F4 08                   15434 	.db #0x08	; 8
      0059F5 07                   15435 	.db #0x07	; 7
      0059F6 03                   15436 	.db #0x03	; 3
      0059F7 00                   15437 	.db #0x00	; 0
      0059F8 00                   15438 	.db #0x00	; 0
      0059F9 1C                   15439 	.db #0x1c	; 28
      0059FA 22                   15440 	.db #0x22	; 34
      0059FB 41                   15441 	.db #0x41	; 65	'A'
      0059FC 00                   15442 	.db #0x00	; 0
      0059FD 00                   15443 	.db #0x00	; 0
      0059FE 41                   15444 	.db #0x41	; 65	'A'
      0059FF 22                   15445 	.db #0x22	; 34
      005A00 1C                   15446 	.db #0x1c	; 28
      005A01 00                   15447 	.db #0x00	; 0
      005A02 2A                   15448 	.db #0x2a	; 42
      005A03 1C                   15449 	.db #0x1c	; 28
      005A04 7F                   15450 	.db #0x7f	; 127
      005A05 1C                   15451 	.db #0x1c	; 28
      005A06 2A                   15452 	.db #0x2a	; 42
      005A07 08                   15453 	.db #0x08	; 8
      005A08 08                   15454 	.db #0x08	; 8
      005A09 3E                   15455 	.db #0x3e	; 62
      005A0A 08                   15456 	.db #0x08	; 8
      005A0B 08                   15457 	.db #0x08	; 8
      005A0C 00                   15458 	.db #0x00	; 0
      005A0D 80                   15459 	.db #0x80	; 128
      005A0E 70                   15460 	.db #0x70	; 112	'p'
      005A0F 30                   15461 	.db #0x30	; 48	'0'
      005A10 00                   15462 	.db #0x00	; 0
      005A11 08                   15463 	.db #0x08	; 8
      005A12 08                   15464 	.db #0x08	; 8
      005A13 08                   15465 	.db #0x08	; 8
      005A14 08                   15466 	.db #0x08	; 8
      005A15 08                   15467 	.db #0x08	; 8
      005A16 00                   15468 	.db #0x00	; 0
      005A17 00                   15469 	.db #0x00	; 0
      005A18 60                   15470 	.db #0x60	; 96
      005A19 60                   15471 	.db #0x60	; 96
      005A1A 00                   15472 	.db #0x00	; 0
      005A1B 20                   15473 	.db #0x20	; 32
      005A1C 10                   15474 	.db #0x10	; 16
      005A1D 08                   15475 	.db #0x08	; 8
      005A1E 04                   15476 	.db #0x04	; 4
      005A1F 02                   15477 	.db #0x02	; 2
      005A20 3E                   15478 	.db #0x3e	; 62
      005A21 51                   15479 	.db #0x51	; 81	'Q'
      005A22 49                   15480 	.db #0x49	; 73	'I'
      005A23 45                   15481 	.db #0x45	; 69	'E'
      005A24 3E                   15482 	.db #0x3e	; 62
      005A25 00                   15483 	.db #0x00	; 0
      005A26 42                   15484 	.db #0x42	; 66	'B'
      005A27 7F                   15485 	.db #0x7f	; 127
      005A28 40                   15486 	.db #0x40	; 64
      005A29 00                   15487 	.db #0x00	; 0
      005A2A 72                   15488 	.db #0x72	; 114	'r'
      005A2B 49                   15489 	.db #0x49	; 73	'I'
      005A2C 49                   15490 	.db #0x49	; 73	'I'
      005A2D 49                   15491 	.db #0x49	; 73	'I'
      005A2E 46                   15492 	.db #0x46	; 70	'F'
      005A2F 21                   15493 	.db #0x21	; 33
      005A30 41                   15494 	.db #0x41	; 65	'A'
      005A31 49                   15495 	.db #0x49	; 73	'I'
      005A32 4D                   15496 	.db #0x4d	; 77	'M'
      005A33 33                   15497 	.db #0x33	; 51	'3'
      005A34 18                   15498 	.db #0x18	; 24
      005A35 14                   15499 	.db #0x14	; 20
      005A36 12                   15500 	.db #0x12	; 18
      005A37 7F                   15501 	.db #0x7f	; 127
      005A38 10                   15502 	.db #0x10	; 16
      005A39 27                   15503 	.db #0x27	; 39
      005A3A 45                   15504 	.db #0x45	; 69	'E'
      005A3B 45                   15505 	.db #0x45	; 69	'E'
      005A3C 45                   15506 	.db #0x45	; 69	'E'
      005A3D 39                   15507 	.db #0x39	; 57	'9'
      005A3E 3C                   15508 	.db #0x3c	; 60
      005A3F 4A                   15509 	.db #0x4a	; 74	'J'
      005A40 49                   15510 	.db #0x49	; 73	'I'
      005A41 49                   15511 	.db #0x49	; 73	'I'
      005A42 31                   15512 	.db #0x31	; 49	'1'
      005A43 41                   15513 	.db #0x41	; 65	'A'
      005A44 21                   15514 	.db #0x21	; 33
      005A45 11                   15515 	.db #0x11	; 17
      005A46 09                   15516 	.db #0x09	; 9
      005A47 07                   15517 	.db #0x07	; 7
      005A48 36                   15518 	.db #0x36	; 54	'6'
      005A49 49                   15519 	.db #0x49	; 73	'I'
      005A4A 49                   15520 	.db #0x49	; 73	'I'
      005A4B 49                   15521 	.db #0x49	; 73	'I'
      005A4C 36                   15522 	.db #0x36	; 54	'6'
      005A4D 46                   15523 	.db #0x46	; 70	'F'
      005A4E 49                   15524 	.db #0x49	; 73	'I'
      005A4F 49                   15525 	.db #0x49	; 73	'I'
      005A50 29                   15526 	.db #0x29	; 41
      005A51 1E                   15527 	.db #0x1e	; 30
      005A52 00                   15528 	.db #0x00	; 0
      005A53 00                   15529 	.db #0x00	; 0
      005A54 14                   15530 	.db #0x14	; 20
      005A55 00                   15531 	.db #0x00	; 0
      005A56 00                   15532 	.db #0x00	; 0
      005A57 00                   15533 	.db #0x00	; 0
      005A58 40                   15534 	.db #0x40	; 64
      005A59 34                   15535 	.db #0x34	; 52	'4'
      005A5A 00                   15536 	.db #0x00	; 0
      005A5B 00                   15537 	.db #0x00	; 0
      005A5C 00                   15538 	.db #0x00	; 0
      005A5D 08                   15539 	.db #0x08	; 8
      005A5E 14                   15540 	.db #0x14	; 20
      005A5F 22                   15541 	.db #0x22	; 34
      005A60 41                   15542 	.db #0x41	; 65	'A'
      005A61 14                   15543 	.db #0x14	; 20
      005A62 14                   15544 	.db #0x14	; 20
      005A63 14                   15545 	.db #0x14	; 20
      005A64 14                   15546 	.db #0x14	; 20
      005A65 14                   15547 	.db #0x14	; 20
      005A66 00                   15548 	.db #0x00	; 0
      005A67 41                   15549 	.db #0x41	; 65	'A'
      005A68 22                   15550 	.db #0x22	; 34
      005A69 14                   15551 	.db #0x14	; 20
      005A6A 08                   15552 	.db #0x08	; 8
      005A6B 02                   15553 	.db #0x02	; 2
      005A6C 01                   15554 	.db #0x01	; 1
      005A6D 59                   15555 	.db #0x59	; 89	'Y'
      005A6E 09                   15556 	.db #0x09	; 9
      005A6F 06                   15557 	.db #0x06	; 6
      005A70 3E                   15558 	.db #0x3e	; 62
      005A71 41                   15559 	.db #0x41	; 65	'A'
      005A72 5D                   15560 	.db #0x5d	; 93
      005A73 59                   15561 	.db #0x59	; 89	'Y'
      005A74 4E                   15562 	.db #0x4e	; 78	'N'
      005A75 7C                   15563 	.db #0x7c	; 124
      005A76 12                   15564 	.db #0x12	; 18
      005A77 11                   15565 	.db #0x11	; 17
      005A78 12                   15566 	.db #0x12	; 18
      005A79 7C                   15567 	.db #0x7c	; 124
      005A7A 7F                   15568 	.db #0x7f	; 127
      005A7B 49                   15569 	.db #0x49	; 73	'I'
      005A7C 49                   15570 	.db #0x49	; 73	'I'
      005A7D 49                   15571 	.db #0x49	; 73	'I'
      005A7E 36                   15572 	.db #0x36	; 54	'6'
      005A7F 3E                   15573 	.db #0x3e	; 62
      005A80 41                   15574 	.db #0x41	; 65	'A'
      005A81 41                   15575 	.db #0x41	; 65	'A'
      005A82 41                   15576 	.db #0x41	; 65	'A'
      005A83 22                   15577 	.db #0x22	; 34
      005A84 7F                   15578 	.db #0x7f	; 127
      005A85 41                   15579 	.db #0x41	; 65	'A'
      005A86 41                   15580 	.db #0x41	; 65	'A'
      005A87 41                   15581 	.db #0x41	; 65	'A'
      005A88 3E                   15582 	.db #0x3e	; 62
      005A89 7F                   15583 	.db #0x7f	; 127
      005A8A 49                   15584 	.db #0x49	; 73	'I'
      005A8B 49                   15585 	.db #0x49	; 73	'I'
      005A8C 49                   15586 	.db #0x49	; 73	'I'
      005A8D 41                   15587 	.db #0x41	; 65	'A'
      005A8E 7F                   15588 	.db #0x7f	; 127
      005A8F 09                   15589 	.db #0x09	; 9
      005A90 09                   15590 	.db #0x09	; 9
      005A91 09                   15591 	.db #0x09	; 9
      005A92 01                   15592 	.db #0x01	; 1
      005A93 3E                   15593 	.db #0x3e	; 62
      005A94 41                   15594 	.db #0x41	; 65	'A'
      005A95 41                   15595 	.db #0x41	; 65	'A'
      005A96 51                   15596 	.db #0x51	; 81	'Q'
      005A97 73                   15597 	.db #0x73	; 115	's'
      005A98 7F                   15598 	.db #0x7f	; 127
      005A99 08                   15599 	.db #0x08	; 8
      005A9A 08                   15600 	.db #0x08	; 8
      005A9B 08                   15601 	.db #0x08	; 8
      005A9C 7F                   15602 	.db #0x7f	; 127
      005A9D 00                   15603 	.db #0x00	; 0
      005A9E 41                   15604 	.db #0x41	; 65	'A'
      005A9F 7F                   15605 	.db #0x7f	; 127
      005AA0 41                   15606 	.db #0x41	; 65	'A'
      005AA1 00                   15607 	.db #0x00	; 0
      005AA2 20                   15608 	.db #0x20	; 32
      005AA3 40                   15609 	.db #0x40	; 64
      005AA4 41                   15610 	.db #0x41	; 65	'A'
      005AA5 3F                   15611 	.db #0x3f	; 63
      005AA6 01                   15612 	.db #0x01	; 1
      005AA7 7F                   15613 	.db #0x7f	; 127
      005AA8 08                   15614 	.db #0x08	; 8
      005AA9 14                   15615 	.db #0x14	; 20
      005AAA 22                   15616 	.db #0x22	; 34
      005AAB 41                   15617 	.db #0x41	; 65	'A'
      005AAC 7F                   15618 	.db #0x7f	; 127
      005AAD 40                   15619 	.db #0x40	; 64
      005AAE 40                   15620 	.db #0x40	; 64
      005AAF 40                   15621 	.db #0x40	; 64
      005AB0 40                   15622 	.db #0x40	; 64
      005AB1 7F                   15623 	.db #0x7f	; 127
      005AB2 02                   15624 	.db #0x02	; 2
      005AB3 1C                   15625 	.db #0x1c	; 28
      005AB4 02                   15626 	.db #0x02	; 2
      005AB5 7F                   15627 	.db #0x7f	; 127
      005AB6 7F                   15628 	.db #0x7f	; 127
      005AB7 04                   15629 	.db #0x04	; 4
      005AB8 08                   15630 	.db #0x08	; 8
      005AB9 10                   15631 	.db #0x10	; 16
      005ABA 7F                   15632 	.db #0x7f	; 127
      005ABB 3E                   15633 	.db #0x3e	; 62
      005ABC 41                   15634 	.db #0x41	; 65	'A'
      005ABD 41                   15635 	.db #0x41	; 65	'A'
      005ABE 41                   15636 	.db #0x41	; 65	'A'
      005ABF 3E                   15637 	.db #0x3e	; 62
      005AC0 7F                   15638 	.db #0x7f	; 127
      005AC1 09                   15639 	.db #0x09	; 9
      005AC2 09                   15640 	.db #0x09	; 9
      005AC3 09                   15641 	.db #0x09	; 9
      005AC4 06                   15642 	.db #0x06	; 6
      005AC5 3E                   15643 	.db #0x3e	; 62
      005AC6 41                   15644 	.db #0x41	; 65	'A'
      005AC7 51                   15645 	.db #0x51	; 81	'Q'
      005AC8 21                   15646 	.db #0x21	; 33
      005AC9 5E                   15647 	.db #0x5e	; 94
      005ACA 7F                   15648 	.db #0x7f	; 127
      005ACB 09                   15649 	.db #0x09	; 9
      005ACC 19                   15650 	.db #0x19	; 25
      005ACD 29                   15651 	.db #0x29	; 41
      005ACE 46                   15652 	.db #0x46	; 70	'F'
      005ACF 26                   15653 	.db #0x26	; 38
      005AD0 49                   15654 	.db #0x49	; 73	'I'
      005AD1 49                   15655 	.db #0x49	; 73	'I'
      005AD2 49                   15656 	.db #0x49	; 73	'I'
      005AD3 32                   15657 	.db #0x32	; 50	'2'
      005AD4 03                   15658 	.db #0x03	; 3
      005AD5 01                   15659 	.db #0x01	; 1
      005AD6 7F                   15660 	.db #0x7f	; 127
      005AD7 01                   15661 	.db #0x01	; 1
      005AD8 03                   15662 	.db #0x03	; 3
      005AD9 3F                   15663 	.db #0x3f	; 63
      005ADA 40                   15664 	.db #0x40	; 64
      005ADB 40                   15665 	.db #0x40	; 64
      005ADC 40                   15666 	.db #0x40	; 64
      005ADD 3F                   15667 	.db #0x3f	; 63
      005ADE 1F                   15668 	.db #0x1f	; 31
      005ADF 20                   15669 	.db #0x20	; 32
      005AE0 40                   15670 	.db #0x40	; 64
      005AE1 20                   15671 	.db #0x20	; 32
      005AE2 1F                   15672 	.db #0x1f	; 31
      005AE3 3F                   15673 	.db #0x3f	; 63
      005AE4 40                   15674 	.db #0x40	; 64
      005AE5 38                   15675 	.db #0x38	; 56	'8'
      005AE6 40                   15676 	.db #0x40	; 64
      005AE7 3F                   15677 	.db #0x3f	; 63
      005AE8 63                   15678 	.db #0x63	; 99	'c'
      005AE9 14                   15679 	.db #0x14	; 20
      005AEA 08                   15680 	.db #0x08	; 8
      005AEB 14                   15681 	.db #0x14	; 20
      005AEC 63                   15682 	.db #0x63	; 99	'c'
      005AED 03                   15683 	.db #0x03	; 3
      005AEE 04                   15684 	.db #0x04	; 4
      005AEF 78                   15685 	.db #0x78	; 120	'x'
      005AF0 04                   15686 	.db #0x04	; 4
      005AF1 03                   15687 	.db #0x03	; 3
      005AF2 61                   15688 	.db #0x61	; 97	'a'
      005AF3 59                   15689 	.db #0x59	; 89	'Y'
      005AF4 49                   15690 	.db #0x49	; 73	'I'
      005AF5 4D                   15691 	.db #0x4d	; 77	'M'
      005AF6 43                   15692 	.db #0x43	; 67	'C'
      005AF7 00                   15693 	.db #0x00	; 0
      005AF8 7F                   15694 	.db #0x7f	; 127
      005AF9 41                   15695 	.db #0x41	; 65	'A'
      005AFA 41                   15696 	.db #0x41	; 65	'A'
      005AFB 41                   15697 	.db #0x41	; 65	'A'
      005AFC 02                   15698 	.db #0x02	; 2
      005AFD 04                   15699 	.db #0x04	; 4
      005AFE 08                   15700 	.db #0x08	; 8
      005AFF 10                   15701 	.db #0x10	; 16
      005B00 20                   15702 	.db #0x20	; 32
      005B01 00                   15703 	.db #0x00	; 0
      005B02 41                   15704 	.db #0x41	; 65	'A'
      005B03 41                   15705 	.db #0x41	; 65	'A'
      005B04 41                   15706 	.db #0x41	; 65	'A'
      005B05 7F                   15707 	.db #0x7f	; 127
      005B06 04                   15708 	.db #0x04	; 4
      005B07 02                   15709 	.db #0x02	; 2
      005B08 01                   15710 	.db #0x01	; 1
      005B09 02                   15711 	.db #0x02	; 2
      005B0A 04                   15712 	.db #0x04	; 4
      005B0B 40                   15713 	.db #0x40	; 64
      005B0C 40                   15714 	.db #0x40	; 64
      005B0D 40                   15715 	.db #0x40	; 64
      005B0E 40                   15716 	.db #0x40	; 64
      005B0F 40                   15717 	.db #0x40	; 64
      005B10 00                   15718 	.db #0x00	; 0
      005B11 03                   15719 	.db #0x03	; 3
      005B12 07                   15720 	.db #0x07	; 7
      005B13 08                   15721 	.db #0x08	; 8
      005B14 00                   15722 	.db #0x00	; 0
      005B15 20                   15723 	.db #0x20	; 32
      005B16 54                   15724 	.db #0x54	; 84	'T'
      005B17 54                   15725 	.db #0x54	; 84	'T'
      005B18 78                   15726 	.db #0x78	; 120	'x'
      005B19 40                   15727 	.db #0x40	; 64
      005B1A 7F                   15728 	.db #0x7f	; 127
      005B1B 28                   15729 	.db #0x28	; 40
      005B1C 44                   15730 	.db #0x44	; 68	'D'
      005B1D 44                   15731 	.db #0x44	; 68	'D'
      005B1E 38                   15732 	.db #0x38	; 56	'8'
      005B1F 38                   15733 	.db #0x38	; 56	'8'
      005B20 44                   15734 	.db #0x44	; 68	'D'
      005B21 44                   15735 	.db #0x44	; 68	'D'
      005B22 44                   15736 	.db #0x44	; 68	'D'
      005B23 28                   15737 	.db #0x28	; 40
      005B24 38                   15738 	.db #0x38	; 56	'8'
      005B25 44                   15739 	.db #0x44	; 68	'D'
      005B26 44                   15740 	.db #0x44	; 68	'D'
      005B27 28                   15741 	.db #0x28	; 40
      005B28 7F                   15742 	.db #0x7f	; 127
      005B29 38                   15743 	.db #0x38	; 56	'8'
      005B2A 54                   15744 	.db #0x54	; 84	'T'
      005B2B 54                   15745 	.db #0x54	; 84	'T'
      005B2C 54                   15746 	.db #0x54	; 84	'T'
      005B2D 18                   15747 	.db #0x18	; 24
      005B2E 00                   15748 	.db #0x00	; 0
      005B2F 08                   15749 	.db #0x08	; 8
      005B30 7E                   15750 	.db #0x7e	; 126
      005B31 09                   15751 	.db #0x09	; 9
      005B32 02                   15752 	.db #0x02	; 2
      005B33 18                   15753 	.db #0x18	; 24
      005B34 A4                   15754 	.db #0xa4	; 164
      005B35 A4                   15755 	.db #0xa4	; 164
      005B36 9C                   15756 	.db #0x9c	; 156
      005B37 78                   15757 	.db #0x78	; 120	'x'
      005B38 7F                   15758 	.db #0x7f	; 127
      005B39 08                   15759 	.db #0x08	; 8
      005B3A 04                   15760 	.db #0x04	; 4
      005B3B 04                   15761 	.db #0x04	; 4
      005B3C 78                   15762 	.db #0x78	; 120	'x'
      005B3D 00                   15763 	.db #0x00	; 0
      005B3E 44                   15764 	.db #0x44	; 68	'D'
      005B3F 7D                   15765 	.db #0x7d	; 125
      005B40 40                   15766 	.db #0x40	; 64
      005B41 00                   15767 	.db #0x00	; 0
      005B42 20                   15768 	.db #0x20	; 32
      005B43 40                   15769 	.db #0x40	; 64
      005B44 40                   15770 	.db #0x40	; 64
      005B45 3D                   15771 	.db #0x3d	; 61
      005B46 00                   15772 	.db #0x00	; 0
      005B47 7F                   15773 	.db #0x7f	; 127
      005B48 10                   15774 	.db #0x10	; 16
      005B49 28                   15775 	.db #0x28	; 40
      005B4A 44                   15776 	.db #0x44	; 68	'D'
      005B4B 00                   15777 	.db #0x00	; 0
      005B4C 00                   15778 	.db #0x00	; 0
      005B4D 41                   15779 	.db #0x41	; 65	'A'
      005B4E 7F                   15780 	.db #0x7f	; 127
      005B4F 40                   15781 	.db #0x40	; 64
      005B50 00                   15782 	.db #0x00	; 0
      005B51 7C                   15783 	.db #0x7c	; 124
      005B52 04                   15784 	.db #0x04	; 4
      005B53 78                   15785 	.db #0x78	; 120	'x'
      005B54 04                   15786 	.db #0x04	; 4
      005B55 78                   15787 	.db #0x78	; 120	'x'
      005B56 7C                   15788 	.db #0x7c	; 124
      005B57 08                   15789 	.db #0x08	; 8
      005B58 04                   15790 	.db #0x04	; 4
      005B59 04                   15791 	.db #0x04	; 4
      005B5A 78                   15792 	.db #0x78	; 120	'x'
      005B5B 38                   15793 	.db #0x38	; 56	'8'
      005B5C 44                   15794 	.db #0x44	; 68	'D'
      005B5D 44                   15795 	.db #0x44	; 68	'D'
      005B5E 44                   15796 	.db #0x44	; 68	'D'
      005B5F 38                   15797 	.db #0x38	; 56	'8'
      005B60 FC                   15798 	.db #0xfc	; 252
      005B61 18                   15799 	.db #0x18	; 24
      005B62 24                   15800 	.db #0x24	; 36
      005B63 24                   15801 	.db #0x24	; 36
      005B64 18                   15802 	.db #0x18	; 24
      005B65 18                   15803 	.db #0x18	; 24
      005B66 24                   15804 	.db #0x24	; 36
      005B67 24                   15805 	.db #0x24	; 36
      005B68 18                   15806 	.db #0x18	; 24
      005B69 FC                   15807 	.db #0xfc	; 252
      005B6A 7C                   15808 	.db #0x7c	; 124
      005B6B 08                   15809 	.db #0x08	; 8
      005B6C 04                   15810 	.db #0x04	; 4
      005B6D 04                   15811 	.db #0x04	; 4
      005B6E 08                   15812 	.db #0x08	; 8
      005B6F 48                   15813 	.db #0x48	; 72	'H'
      005B70 54                   15814 	.db #0x54	; 84	'T'
      005B71 54                   15815 	.db #0x54	; 84	'T'
      005B72 54                   15816 	.db #0x54	; 84	'T'
      005B73 24                   15817 	.db #0x24	; 36
      005B74 04                   15818 	.db #0x04	; 4
      005B75 04                   15819 	.db #0x04	; 4
      005B76 3F                   15820 	.db #0x3f	; 63
      005B77 44                   15821 	.db #0x44	; 68	'D'
      005B78 24                   15822 	.db #0x24	; 36
      005B79 3C                   15823 	.db #0x3c	; 60
      005B7A 40                   15824 	.db #0x40	; 64
      005B7B 40                   15825 	.db #0x40	; 64
      005B7C 20                   15826 	.db #0x20	; 32
      005B7D 7C                   15827 	.db #0x7c	; 124
      005B7E 1C                   15828 	.db #0x1c	; 28
      005B7F 20                   15829 	.db #0x20	; 32
      005B80 40                   15830 	.db #0x40	; 64
      005B81 20                   15831 	.db #0x20	; 32
      005B82 1C                   15832 	.db #0x1c	; 28
      005B83 3C                   15833 	.db #0x3c	; 60
      005B84 40                   15834 	.db #0x40	; 64
      005B85 30                   15835 	.db #0x30	; 48	'0'
      005B86 40                   15836 	.db #0x40	; 64
      005B87 3C                   15837 	.db #0x3c	; 60
      005B88 44                   15838 	.db #0x44	; 68	'D'
      005B89 28                   15839 	.db #0x28	; 40
      005B8A 10                   15840 	.db #0x10	; 16
      005B8B 28                   15841 	.db #0x28	; 40
      005B8C 44                   15842 	.db #0x44	; 68	'D'
      005B8D 4C                   15843 	.db #0x4c	; 76	'L'
      005B8E 90                   15844 	.db #0x90	; 144
      005B8F 90                   15845 	.db #0x90	; 144
      005B90 90                   15846 	.db #0x90	; 144
      005B91 7C                   15847 	.db #0x7c	; 124
      005B92 44                   15848 	.db #0x44	; 68	'D'
      005B93 64                   15849 	.db #0x64	; 100	'd'
      005B94 54                   15850 	.db #0x54	; 84	'T'
      005B95 4C                   15851 	.db #0x4c	; 76	'L'
      005B96 44                   15852 	.db #0x44	; 68	'D'
      005B97 00                   15853 	.db #0x00	; 0
      005B98 08                   15854 	.db #0x08	; 8
      005B99 36                   15855 	.db #0x36	; 54	'6'
      005B9A 41                   15856 	.db #0x41	; 65	'A'
      005B9B 00                   15857 	.db #0x00	; 0
      005B9C 00                   15858 	.db #0x00	; 0
      005B9D 00                   15859 	.db #0x00	; 0
      005B9E 77                   15860 	.db #0x77	; 119	'w'
      005B9F 00                   15861 	.db #0x00	; 0
      005BA0 00                   15862 	.db #0x00	; 0
      005BA1 00                   15863 	.db #0x00	; 0
      005BA2 41                   15864 	.db #0x41	; 65	'A'
      005BA3 36                   15865 	.db #0x36	; 54	'6'
      005BA4 08                   15866 	.db #0x08	; 8
      005BA5 00                   15867 	.db #0x00	; 0
      005BA6 02                   15868 	.db #0x02	; 2
      005BA7 01                   15869 	.db #0x01	; 1
      005BA8 02                   15870 	.db #0x02	; 2
      005BA9 04                   15871 	.db #0x04	; 4
      005BAA 02                   15872 	.db #0x02	; 2
      005BAB 3C                   15873 	.db #0x3c	; 60
      005BAC 26                   15874 	.db #0x26	; 38
      005BAD 23                   15875 	.db #0x23	; 35
      005BAE 26                   15876 	.db #0x26	; 38
      005BAF 3C                   15877 	.db #0x3c	; 60
      005BB0 1E                   15878 	.db #0x1e	; 30
      005BB1 A1                   15879 	.db #0xa1	; 161
      005BB2 A1                   15880 	.db #0xa1	; 161
      005BB3 61                   15881 	.db #0x61	; 97	'a'
      005BB4 12                   15882 	.db #0x12	; 18
      005BB5 3A                   15883 	.db #0x3a	; 58
      005BB6 40                   15884 	.db #0x40	; 64
      005BB7 40                   15885 	.db #0x40	; 64
      005BB8 20                   15886 	.db #0x20	; 32
      005BB9 7A                   15887 	.db #0x7a	; 122	'z'
      005BBA 38                   15888 	.db #0x38	; 56	'8'
      005BBB 54                   15889 	.db #0x54	; 84	'T'
      005BBC 54                   15890 	.db #0x54	; 84	'T'
      005BBD 55                   15891 	.db #0x55	; 85	'U'
      005BBE 59                   15892 	.db #0x59	; 89	'Y'
      005BBF 21                   15893 	.db #0x21	; 33
      005BC0 55                   15894 	.db #0x55	; 85	'U'
      005BC1 55                   15895 	.db #0x55	; 85	'U'
      005BC2 79                   15896 	.db #0x79	; 121	'y'
      005BC3 41                   15897 	.db #0x41	; 65	'A'
      005BC4 22                   15898 	.db #0x22	; 34
      005BC5 54                   15899 	.db #0x54	; 84	'T'
      005BC6 54                   15900 	.db #0x54	; 84	'T'
      005BC7 78                   15901 	.db #0x78	; 120	'x'
      005BC8 42                   15902 	.db #0x42	; 66	'B'
      005BC9 21                   15903 	.db #0x21	; 33
      005BCA 55                   15904 	.db #0x55	; 85	'U'
      005BCB 54                   15905 	.db #0x54	; 84	'T'
      005BCC 78                   15906 	.db #0x78	; 120	'x'
      005BCD 40                   15907 	.db #0x40	; 64
      005BCE 20                   15908 	.db #0x20	; 32
      005BCF 54                   15909 	.db #0x54	; 84	'T'
      005BD0 55                   15910 	.db #0x55	; 85	'U'
      005BD1 79                   15911 	.db #0x79	; 121	'y'
      005BD2 40                   15912 	.db #0x40	; 64
      005BD3 0C                   15913 	.db #0x0c	; 12
      005BD4 1E                   15914 	.db #0x1e	; 30
      005BD5 52                   15915 	.db #0x52	; 82	'R'
      005BD6 72                   15916 	.db #0x72	; 114	'r'
      005BD7 12                   15917 	.db #0x12	; 18
      005BD8 39                   15918 	.db #0x39	; 57	'9'
      005BD9 55                   15919 	.db #0x55	; 85	'U'
      005BDA 55                   15920 	.db #0x55	; 85	'U'
      005BDB 55                   15921 	.db #0x55	; 85	'U'
      005BDC 59                   15922 	.db #0x59	; 89	'Y'
      005BDD 39                   15923 	.db #0x39	; 57	'9'
      005BDE 54                   15924 	.db #0x54	; 84	'T'
      005BDF 54                   15925 	.db #0x54	; 84	'T'
      005BE0 54                   15926 	.db #0x54	; 84	'T'
      005BE1 59                   15927 	.db #0x59	; 89	'Y'
      005BE2 39                   15928 	.db #0x39	; 57	'9'
      005BE3 55                   15929 	.db #0x55	; 85	'U'
      005BE4 54                   15930 	.db #0x54	; 84	'T'
      005BE5 54                   15931 	.db #0x54	; 84	'T'
      005BE6 58                   15932 	.db #0x58	; 88	'X'
      005BE7 00                   15933 	.db #0x00	; 0
      005BE8 00                   15934 	.db #0x00	; 0
      005BE9 45                   15935 	.db #0x45	; 69	'E'
      005BEA 7C                   15936 	.db #0x7c	; 124
      005BEB 41                   15937 	.db #0x41	; 65	'A'
      005BEC 00                   15938 	.db #0x00	; 0
      005BED 02                   15939 	.db #0x02	; 2
      005BEE 45                   15940 	.db #0x45	; 69	'E'
      005BEF 7D                   15941 	.db #0x7d	; 125
      005BF0 42                   15942 	.db #0x42	; 66	'B'
      005BF1 00                   15943 	.db #0x00	; 0
      005BF2 01                   15944 	.db #0x01	; 1
      005BF3 45                   15945 	.db #0x45	; 69	'E'
      005BF4 7C                   15946 	.db #0x7c	; 124
      005BF5 40                   15947 	.db #0x40	; 64
      005BF6 7D                   15948 	.db #0x7d	; 125
      005BF7 12                   15949 	.db #0x12	; 18
      005BF8 11                   15950 	.db #0x11	; 17
      005BF9 12                   15951 	.db #0x12	; 18
      005BFA 7D                   15952 	.db #0x7d	; 125
      005BFB F0                   15953 	.db #0xf0	; 240
      005BFC 28                   15954 	.db #0x28	; 40
      005BFD 25                   15955 	.db #0x25	; 37
      005BFE 28                   15956 	.db #0x28	; 40
      005BFF F0                   15957 	.db #0xf0	; 240
      005C00 7C                   15958 	.db #0x7c	; 124
      005C01 54                   15959 	.db #0x54	; 84	'T'
      005C02 55                   15960 	.db #0x55	; 85	'U'
      005C03 45                   15961 	.db #0x45	; 69	'E'
      005C04 00                   15962 	.db #0x00	; 0
      005C05 20                   15963 	.db #0x20	; 32
      005C06 54                   15964 	.db #0x54	; 84	'T'
      005C07 54                   15965 	.db #0x54	; 84	'T'
      005C08 7C                   15966 	.db #0x7c	; 124
      005C09 54                   15967 	.db #0x54	; 84	'T'
      005C0A 7C                   15968 	.db #0x7c	; 124
      005C0B 0A                   15969 	.db #0x0a	; 10
      005C0C 09                   15970 	.db #0x09	; 9
      005C0D 7F                   15971 	.db #0x7f	; 127
      005C0E 49                   15972 	.db #0x49	; 73	'I'
      005C0F 32                   15973 	.db #0x32	; 50	'2'
      005C10 49                   15974 	.db #0x49	; 73	'I'
      005C11 49                   15975 	.db #0x49	; 73	'I'
      005C12 49                   15976 	.db #0x49	; 73	'I'
      005C13 32                   15977 	.db #0x32	; 50	'2'
      005C14 3A                   15978 	.db #0x3a	; 58
      005C15 44                   15979 	.db #0x44	; 68	'D'
      005C16 44                   15980 	.db #0x44	; 68	'D'
      005C17 44                   15981 	.db #0x44	; 68	'D'
      005C18 3A                   15982 	.db #0x3a	; 58
      005C19 32                   15983 	.db #0x32	; 50	'2'
      005C1A 4A                   15984 	.db #0x4a	; 74	'J'
      005C1B 48                   15985 	.db #0x48	; 72	'H'
      005C1C 48                   15986 	.db #0x48	; 72	'H'
      005C1D 30                   15987 	.db #0x30	; 48	'0'
      005C1E 3A                   15988 	.db #0x3a	; 58
      005C1F 41                   15989 	.db #0x41	; 65	'A'
      005C20 41                   15990 	.db #0x41	; 65	'A'
      005C21 21                   15991 	.db #0x21	; 33
      005C22 7A                   15992 	.db #0x7a	; 122	'z'
      005C23 3A                   15993 	.db #0x3a	; 58
      005C24 42                   15994 	.db #0x42	; 66	'B'
      005C25 40                   15995 	.db #0x40	; 64
      005C26 20                   15996 	.db #0x20	; 32
      005C27 78                   15997 	.db #0x78	; 120	'x'
      005C28 00                   15998 	.db #0x00	; 0
      005C29 9D                   15999 	.db #0x9d	; 157
      005C2A A0                   16000 	.db #0xa0	; 160
      005C2B A0                   16001 	.db #0xa0	; 160
      005C2C 7D                   16002 	.db #0x7d	; 125
      005C2D 3D                   16003 	.db #0x3d	; 61
      005C2E 42                   16004 	.db #0x42	; 66	'B'
      005C2F 42                   16005 	.db #0x42	; 66	'B'
      005C30 42                   16006 	.db #0x42	; 66	'B'
      005C31 3D                   16007 	.db #0x3d	; 61
      005C32 3D                   16008 	.db #0x3d	; 61
      005C33 40                   16009 	.db #0x40	; 64
      005C34 40                   16010 	.db #0x40	; 64
      005C35 40                   16011 	.db #0x40	; 64
      005C36 3D                   16012 	.db #0x3d	; 61
      005C37 3C                   16013 	.db #0x3c	; 60
      005C38 24                   16014 	.db #0x24	; 36
      005C39 FF                   16015 	.db #0xff	; 255
      005C3A 24                   16016 	.db #0x24	; 36
      005C3B 24                   16017 	.db #0x24	; 36
      005C3C 48                   16018 	.db #0x48	; 72	'H'
      005C3D 7E                   16019 	.db #0x7e	; 126
      005C3E 49                   16020 	.db #0x49	; 73	'I'
      005C3F 43                   16021 	.db #0x43	; 67	'C'
      005C40 66                   16022 	.db #0x66	; 102	'f'
      005C41 2B                   16023 	.db #0x2b	; 43
      005C42 2F                   16024 	.db #0x2f	; 47
      005C43 FC                   16025 	.db #0xfc	; 252
      005C44 2F                   16026 	.db #0x2f	; 47
      005C45 2B                   16027 	.db #0x2b	; 43
      005C46 FF                   16028 	.db #0xff	; 255
      005C47 09                   16029 	.db #0x09	; 9
      005C48 29                   16030 	.db #0x29	; 41
      005C49 F6                   16031 	.db #0xf6	; 246
      005C4A 20                   16032 	.db #0x20	; 32
      005C4B C0                   16033 	.db #0xc0	; 192
      005C4C 88                   16034 	.db #0x88	; 136
      005C4D 7E                   16035 	.db #0x7e	; 126
      005C4E 09                   16036 	.db #0x09	; 9
      005C4F 03                   16037 	.db #0x03	; 3
      005C50 20                   16038 	.db #0x20	; 32
      005C51 54                   16039 	.db #0x54	; 84	'T'
      005C52 54                   16040 	.db #0x54	; 84	'T'
      005C53 79                   16041 	.db #0x79	; 121	'y'
      005C54 41                   16042 	.db #0x41	; 65	'A'
      005C55 00                   16043 	.db #0x00	; 0
      005C56 00                   16044 	.db #0x00	; 0
      005C57 44                   16045 	.db #0x44	; 68	'D'
      005C58 7D                   16046 	.db #0x7d	; 125
      005C59 41                   16047 	.db #0x41	; 65	'A'
      005C5A 30                   16048 	.db #0x30	; 48	'0'
      005C5B 48                   16049 	.db #0x48	; 72	'H'
      005C5C 48                   16050 	.db #0x48	; 72	'H'
      005C5D 4A                   16051 	.db #0x4a	; 74	'J'
      005C5E 32                   16052 	.db #0x32	; 50	'2'
      005C5F 38                   16053 	.db #0x38	; 56	'8'
      005C60 40                   16054 	.db #0x40	; 64
      005C61 40                   16055 	.db #0x40	; 64
      005C62 22                   16056 	.db #0x22	; 34
      005C63 7A                   16057 	.db #0x7a	; 122	'z'
      005C64 00                   16058 	.db #0x00	; 0
      005C65 7A                   16059 	.db #0x7a	; 122	'z'
      005C66 0A                   16060 	.db #0x0a	; 10
      005C67 0A                   16061 	.db #0x0a	; 10
      005C68 72                   16062 	.db #0x72	; 114	'r'
      005C69 7D                   16063 	.db #0x7d	; 125
      005C6A 0D                   16064 	.db #0x0d	; 13
      005C6B 19                   16065 	.db #0x19	; 25
      005C6C 31                   16066 	.db #0x31	; 49	'1'
      005C6D 7D                   16067 	.db #0x7d	; 125
      005C6E 26                   16068 	.db #0x26	; 38
      005C6F 29                   16069 	.db #0x29	; 41
      005C70 29                   16070 	.db #0x29	; 41
      005C71 2F                   16071 	.db #0x2f	; 47
      005C72 28                   16072 	.db #0x28	; 40
      005C73 26                   16073 	.db #0x26	; 38
      005C74 29                   16074 	.db #0x29	; 41
      005C75 29                   16075 	.db #0x29	; 41
      005C76 29                   16076 	.db #0x29	; 41
      005C77 26                   16077 	.db #0x26	; 38
      005C78 30                   16078 	.db #0x30	; 48	'0'
      005C79 48                   16079 	.db #0x48	; 72	'H'
      005C7A 4D                   16080 	.db #0x4d	; 77	'M'
      005C7B 40                   16081 	.db #0x40	; 64
      005C7C 20                   16082 	.db #0x20	; 32
      005C7D 38                   16083 	.db #0x38	; 56	'8'
      005C7E 08                   16084 	.db #0x08	; 8
      005C7F 08                   16085 	.db #0x08	; 8
      005C80 08                   16086 	.db #0x08	; 8
      005C81 08                   16087 	.db #0x08	; 8
      005C82 08                   16088 	.db #0x08	; 8
      005C83 08                   16089 	.db #0x08	; 8
      005C84 08                   16090 	.db #0x08	; 8
      005C85 08                   16091 	.db #0x08	; 8
      005C86 38                   16092 	.db #0x38	; 56	'8'
      005C87 2F                   16093 	.db #0x2f	; 47
      005C88 10                   16094 	.db #0x10	; 16
      005C89 C8                   16095 	.db #0xc8	; 200
      005C8A AC                   16096 	.db #0xac	; 172
      005C8B BA                   16097 	.db #0xba	; 186
      005C8C 2F                   16098 	.db #0x2f	; 47
      005C8D 10                   16099 	.db #0x10	; 16
      005C8E 28                   16100 	.db #0x28	; 40
      005C8F 34                   16101 	.db #0x34	; 52	'4'
      005C90 FA                   16102 	.db #0xfa	; 250
      005C91 00                   16103 	.db #0x00	; 0
      005C92 00                   16104 	.db #0x00	; 0
      005C93 7B                   16105 	.db #0x7b	; 123
      005C94 00                   16106 	.db #0x00	; 0
      005C95 00                   16107 	.db #0x00	; 0
      005C96 08                   16108 	.db #0x08	; 8
      005C97 14                   16109 	.db #0x14	; 20
      005C98 2A                   16110 	.db #0x2a	; 42
      005C99 14                   16111 	.db #0x14	; 20
      005C9A 22                   16112 	.db #0x22	; 34
      005C9B 22                   16113 	.db #0x22	; 34
      005C9C 14                   16114 	.db #0x14	; 20
      005C9D 2A                   16115 	.db #0x2a	; 42
      005C9E 14                   16116 	.db #0x14	; 20
      005C9F 08                   16117 	.db #0x08	; 8
      005CA0 AA                   16118 	.db #0xaa	; 170
      005CA1 00                   16119 	.db #0x00	; 0
      005CA2 55                   16120 	.db #0x55	; 85	'U'
      005CA3 00                   16121 	.db #0x00	; 0
      005CA4 AA                   16122 	.db #0xaa	; 170
      005CA5 AA                   16123 	.db #0xaa	; 170
      005CA6 55                   16124 	.db #0x55	; 85	'U'
      005CA7 AA                   16125 	.db #0xaa	; 170
      005CA8 55                   16126 	.db #0x55	; 85	'U'
      005CA9 AA                   16127 	.db #0xaa	; 170
      005CAA 00                   16128 	.db #0x00	; 0
      005CAB 00                   16129 	.db #0x00	; 0
      005CAC 00                   16130 	.db #0x00	; 0
      005CAD FF                   16131 	.db #0xff	; 255
      005CAE 00                   16132 	.db #0x00	; 0
      005CAF 10                   16133 	.db #0x10	; 16
      005CB0 10                   16134 	.db #0x10	; 16
      005CB1 10                   16135 	.db #0x10	; 16
      005CB2 FF                   16136 	.db #0xff	; 255
      005CB3 00                   16137 	.db #0x00	; 0
      005CB4 14                   16138 	.db #0x14	; 20
      005CB5 14                   16139 	.db #0x14	; 20
      005CB6 14                   16140 	.db #0x14	; 20
      005CB7 FF                   16141 	.db #0xff	; 255
      005CB8 00                   16142 	.db #0x00	; 0
      005CB9 10                   16143 	.db #0x10	; 16
      005CBA 10                   16144 	.db #0x10	; 16
      005CBB FF                   16145 	.db #0xff	; 255
      005CBC 00                   16146 	.db #0x00	; 0
      005CBD FF                   16147 	.db #0xff	; 255
      005CBE 10                   16148 	.db #0x10	; 16
      005CBF 10                   16149 	.db #0x10	; 16
      005CC0 F0                   16150 	.db #0xf0	; 240
      005CC1 10                   16151 	.db #0x10	; 16
      005CC2 F0                   16152 	.db #0xf0	; 240
      005CC3 14                   16153 	.db #0x14	; 20
      005CC4 14                   16154 	.db #0x14	; 20
      005CC5 14                   16155 	.db #0x14	; 20
      005CC6 FC                   16156 	.db #0xfc	; 252
      005CC7 00                   16157 	.db #0x00	; 0
      005CC8 14                   16158 	.db #0x14	; 20
      005CC9 14                   16159 	.db #0x14	; 20
      005CCA F7                   16160 	.db #0xf7	; 247
      005CCB 00                   16161 	.db #0x00	; 0
      005CCC FF                   16162 	.db #0xff	; 255
      005CCD 00                   16163 	.db #0x00	; 0
      005CCE 00                   16164 	.db #0x00	; 0
      005CCF FF                   16165 	.db #0xff	; 255
      005CD0 00                   16166 	.db #0x00	; 0
      005CD1 FF                   16167 	.db #0xff	; 255
      005CD2 14                   16168 	.db #0x14	; 20
      005CD3 14                   16169 	.db #0x14	; 20
      005CD4 F4                   16170 	.db #0xf4	; 244
      005CD5 04                   16171 	.db #0x04	; 4
      005CD6 FC                   16172 	.db #0xfc	; 252
      005CD7 14                   16173 	.db #0x14	; 20
      005CD8 14                   16174 	.db #0x14	; 20
      005CD9 17                   16175 	.db #0x17	; 23
      005CDA 10                   16176 	.db #0x10	; 16
      005CDB 1F                   16177 	.db #0x1f	; 31
      005CDC 10                   16178 	.db #0x10	; 16
      005CDD 10                   16179 	.db #0x10	; 16
      005CDE 1F                   16180 	.db #0x1f	; 31
      005CDF 10                   16181 	.db #0x10	; 16
      005CE0 1F                   16182 	.db #0x1f	; 31
      005CE1 14                   16183 	.db #0x14	; 20
      005CE2 14                   16184 	.db #0x14	; 20
      005CE3 14                   16185 	.db #0x14	; 20
      005CE4 1F                   16186 	.db #0x1f	; 31
      005CE5 00                   16187 	.db #0x00	; 0
      005CE6 10                   16188 	.db #0x10	; 16
      005CE7 10                   16189 	.db #0x10	; 16
      005CE8 10                   16190 	.db #0x10	; 16
      005CE9 F0                   16191 	.db #0xf0	; 240
      005CEA 00                   16192 	.db #0x00	; 0
      005CEB 00                   16193 	.db #0x00	; 0
      005CEC 00                   16194 	.db #0x00	; 0
      005CED 00                   16195 	.db #0x00	; 0
      005CEE 1F                   16196 	.db #0x1f	; 31
      005CEF 10                   16197 	.db #0x10	; 16
      005CF0 10                   16198 	.db #0x10	; 16
      005CF1 10                   16199 	.db #0x10	; 16
      005CF2 10                   16200 	.db #0x10	; 16
      005CF3 1F                   16201 	.db #0x1f	; 31
      005CF4 10                   16202 	.db #0x10	; 16
      005CF5 10                   16203 	.db #0x10	; 16
      005CF6 10                   16204 	.db #0x10	; 16
      005CF7 10                   16205 	.db #0x10	; 16
      005CF8 F0                   16206 	.db #0xf0	; 240
      005CF9 10                   16207 	.db #0x10	; 16
      005CFA 00                   16208 	.db #0x00	; 0
      005CFB 00                   16209 	.db #0x00	; 0
      005CFC 00                   16210 	.db #0x00	; 0
      005CFD FF                   16211 	.db #0xff	; 255
      005CFE 10                   16212 	.db #0x10	; 16
      005CFF 10                   16213 	.db #0x10	; 16
      005D00 10                   16214 	.db #0x10	; 16
      005D01 10                   16215 	.db #0x10	; 16
      005D02 10                   16216 	.db #0x10	; 16
      005D03 10                   16217 	.db #0x10	; 16
      005D04 10                   16218 	.db #0x10	; 16
      005D05 10                   16219 	.db #0x10	; 16
      005D06 10                   16220 	.db #0x10	; 16
      005D07 FF                   16221 	.db #0xff	; 255
      005D08 10                   16222 	.db #0x10	; 16
      005D09 00                   16223 	.db #0x00	; 0
      005D0A 00                   16224 	.db #0x00	; 0
      005D0B 00                   16225 	.db #0x00	; 0
      005D0C FF                   16226 	.db #0xff	; 255
      005D0D 14                   16227 	.db #0x14	; 20
      005D0E 00                   16228 	.db #0x00	; 0
      005D0F 00                   16229 	.db #0x00	; 0
      005D10 FF                   16230 	.db #0xff	; 255
      005D11 00                   16231 	.db #0x00	; 0
      005D12 FF                   16232 	.db #0xff	; 255
      005D13 00                   16233 	.db #0x00	; 0
      005D14 00                   16234 	.db #0x00	; 0
      005D15 1F                   16235 	.db #0x1f	; 31
      005D16 10                   16236 	.db #0x10	; 16
      005D17 17                   16237 	.db #0x17	; 23
      005D18 00                   16238 	.db #0x00	; 0
      005D19 00                   16239 	.db #0x00	; 0
      005D1A FC                   16240 	.db #0xfc	; 252
      005D1B 04                   16241 	.db #0x04	; 4
      005D1C F4                   16242 	.db #0xf4	; 244
      005D1D 14                   16243 	.db #0x14	; 20
      005D1E 14                   16244 	.db #0x14	; 20
      005D1F 17                   16245 	.db #0x17	; 23
      005D20 10                   16246 	.db #0x10	; 16
      005D21 17                   16247 	.db #0x17	; 23
      005D22 14                   16248 	.db #0x14	; 20
      005D23 14                   16249 	.db #0x14	; 20
      005D24 F4                   16250 	.db #0xf4	; 244
      005D25 04                   16251 	.db #0x04	; 4
      005D26 F4                   16252 	.db #0xf4	; 244
      005D27 00                   16253 	.db #0x00	; 0
      005D28 00                   16254 	.db #0x00	; 0
      005D29 FF                   16255 	.db #0xff	; 255
      005D2A 00                   16256 	.db #0x00	; 0
      005D2B F7                   16257 	.db #0xf7	; 247
      005D2C 14                   16258 	.db #0x14	; 20
      005D2D 14                   16259 	.db #0x14	; 20
      005D2E 14                   16260 	.db #0x14	; 20
      005D2F 14                   16261 	.db #0x14	; 20
      005D30 14                   16262 	.db #0x14	; 20
      005D31 14                   16263 	.db #0x14	; 20
      005D32 14                   16264 	.db #0x14	; 20
      005D33 F7                   16265 	.db #0xf7	; 247
      005D34 00                   16266 	.db #0x00	; 0
      005D35 F7                   16267 	.db #0xf7	; 247
      005D36 14                   16268 	.db #0x14	; 20
      005D37 14                   16269 	.db #0x14	; 20
      005D38 14                   16270 	.db #0x14	; 20
      005D39 17                   16271 	.db #0x17	; 23
      005D3A 14                   16272 	.db #0x14	; 20
      005D3B 10                   16273 	.db #0x10	; 16
      005D3C 10                   16274 	.db #0x10	; 16
      005D3D 1F                   16275 	.db #0x1f	; 31
      005D3E 10                   16276 	.db #0x10	; 16
      005D3F 1F                   16277 	.db #0x1f	; 31
      005D40 14                   16278 	.db #0x14	; 20
      005D41 14                   16279 	.db #0x14	; 20
      005D42 14                   16280 	.db #0x14	; 20
      005D43 F4                   16281 	.db #0xf4	; 244
      005D44 14                   16282 	.db #0x14	; 20
      005D45 10                   16283 	.db #0x10	; 16
      005D46 10                   16284 	.db #0x10	; 16
      005D47 F0                   16285 	.db #0xf0	; 240
      005D48 10                   16286 	.db #0x10	; 16
      005D49 F0                   16287 	.db #0xf0	; 240
      005D4A 00                   16288 	.db #0x00	; 0
      005D4B 00                   16289 	.db #0x00	; 0
      005D4C 1F                   16290 	.db #0x1f	; 31
      005D4D 10                   16291 	.db #0x10	; 16
      005D4E 1F                   16292 	.db #0x1f	; 31
      005D4F 00                   16293 	.db #0x00	; 0
      005D50 00                   16294 	.db #0x00	; 0
      005D51 00                   16295 	.db #0x00	; 0
      005D52 1F                   16296 	.db #0x1f	; 31
      005D53 14                   16297 	.db #0x14	; 20
      005D54 00                   16298 	.db #0x00	; 0
      005D55 00                   16299 	.db #0x00	; 0
      005D56 00                   16300 	.db #0x00	; 0
      005D57 FC                   16301 	.db #0xfc	; 252
      005D58 14                   16302 	.db #0x14	; 20
      005D59 00                   16303 	.db #0x00	; 0
      005D5A 00                   16304 	.db #0x00	; 0
      005D5B F0                   16305 	.db #0xf0	; 240
      005D5C 10                   16306 	.db #0x10	; 16
      005D5D F0                   16307 	.db #0xf0	; 240
      005D5E 10                   16308 	.db #0x10	; 16
      005D5F 10                   16309 	.db #0x10	; 16
      005D60 FF                   16310 	.db #0xff	; 255
      005D61 10                   16311 	.db #0x10	; 16
      005D62 FF                   16312 	.db #0xff	; 255
      005D63 14                   16313 	.db #0x14	; 20
      005D64 14                   16314 	.db #0x14	; 20
      005D65 14                   16315 	.db #0x14	; 20
      005D66 FF                   16316 	.db #0xff	; 255
      005D67 14                   16317 	.db #0x14	; 20
      005D68 10                   16318 	.db #0x10	; 16
      005D69 10                   16319 	.db #0x10	; 16
      005D6A 10                   16320 	.db #0x10	; 16
      005D6B 1F                   16321 	.db #0x1f	; 31
      005D6C 00                   16322 	.db #0x00	; 0
      005D6D 00                   16323 	.db #0x00	; 0
      005D6E 00                   16324 	.db #0x00	; 0
      005D6F 00                   16325 	.db #0x00	; 0
      005D70 F0                   16326 	.db #0xf0	; 240
      005D71 10                   16327 	.db #0x10	; 16
      005D72 FF                   16328 	.db #0xff	; 255
      005D73 FF                   16329 	.db #0xff	; 255
      005D74 FF                   16330 	.db #0xff	; 255
      005D75 FF                   16331 	.db #0xff	; 255
      005D76 FF                   16332 	.db #0xff	; 255
      005D77 F0                   16333 	.db #0xf0	; 240
      005D78 F0                   16334 	.db #0xf0	; 240
      005D79 F0                   16335 	.db #0xf0	; 240
      005D7A F0                   16336 	.db #0xf0	; 240
      005D7B F0                   16337 	.db #0xf0	; 240
      005D7C FF                   16338 	.db #0xff	; 255
      005D7D FF                   16339 	.db #0xff	; 255
      005D7E FF                   16340 	.db #0xff	; 255
      005D7F 00                   16341 	.db #0x00	; 0
      005D80 00                   16342 	.db #0x00	; 0
      005D81 00                   16343 	.db #0x00	; 0
      005D82 00                   16344 	.db #0x00	; 0
      005D83 00                   16345 	.db #0x00	; 0
      005D84 FF                   16346 	.db #0xff	; 255
      005D85 FF                   16347 	.db #0xff	; 255
      005D86 0F                   16348 	.db #0x0f	; 15
      005D87 0F                   16349 	.db #0x0f	; 15
      005D88 0F                   16350 	.db #0x0f	; 15
      005D89 0F                   16351 	.db #0x0f	; 15
      005D8A 0F                   16352 	.db #0x0f	; 15
      005D8B 38                   16353 	.db #0x38	; 56	'8'
      005D8C 44                   16354 	.db #0x44	; 68	'D'
      005D8D 44                   16355 	.db #0x44	; 68	'D'
      005D8E 38                   16356 	.db #0x38	; 56	'8'
      005D8F 44                   16357 	.db #0x44	; 68	'D'
      005D90 FC                   16358 	.db #0xfc	; 252
      005D91 4A                   16359 	.db #0x4a	; 74	'J'
      005D92 4A                   16360 	.db #0x4a	; 74	'J'
      005D93 4A                   16361 	.db #0x4a	; 74	'J'
      005D94 34                   16362 	.db #0x34	; 52	'4'
      005D95 7E                   16363 	.db #0x7e	; 126
      005D96 02                   16364 	.db #0x02	; 2
      005D97 02                   16365 	.db #0x02	; 2
      005D98 06                   16366 	.db #0x06	; 6
      005D99 06                   16367 	.db #0x06	; 6
      005D9A 02                   16368 	.db #0x02	; 2
      005D9B 7E                   16369 	.db #0x7e	; 126
      005D9C 02                   16370 	.db #0x02	; 2
      005D9D 7E                   16371 	.db #0x7e	; 126
      005D9E 02                   16372 	.db #0x02	; 2
      005D9F 63                   16373 	.db #0x63	; 99	'c'
      005DA0 55                   16374 	.db #0x55	; 85	'U'
      005DA1 49                   16375 	.db #0x49	; 73	'I'
      005DA2 41                   16376 	.db #0x41	; 65	'A'
      005DA3 63                   16377 	.db #0x63	; 99	'c'
      005DA4 38                   16378 	.db #0x38	; 56	'8'
      005DA5 44                   16379 	.db #0x44	; 68	'D'
      005DA6 44                   16380 	.db #0x44	; 68	'D'
      005DA7 3C                   16381 	.db #0x3c	; 60
      005DA8 04                   16382 	.db #0x04	; 4
      005DA9 40                   16383 	.db #0x40	; 64
      005DAA 7E                   16384 	.db #0x7e	; 126
      005DAB 20                   16385 	.db #0x20	; 32
      005DAC 1E                   16386 	.db #0x1e	; 30
      005DAD 20                   16387 	.db #0x20	; 32
      005DAE 06                   16388 	.db #0x06	; 6
      005DAF 02                   16389 	.db #0x02	; 2
      005DB0 7E                   16390 	.db #0x7e	; 126
      005DB1 02                   16391 	.db #0x02	; 2
      005DB2 02                   16392 	.db #0x02	; 2
      005DB3 99                   16393 	.db #0x99	; 153
      005DB4 A5                   16394 	.db #0xa5	; 165
      005DB5 E7                   16395 	.db #0xe7	; 231
      005DB6 A5                   16396 	.db #0xa5	; 165
      005DB7 99                   16397 	.db #0x99	; 153
      005DB8 1C                   16398 	.db #0x1c	; 28
      005DB9 2A                   16399 	.db #0x2a	; 42
      005DBA 49                   16400 	.db #0x49	; 73	'I'
      005DBB 2A                   16401 	.db #0x2a	; 42
      005DBC 1C                   16402 	.db #0x1c	; 28
      005DBD 4C                   16403 	.db #0x4c	; 76	'L'
      005DBE 72                   16404 	.db #0x72	; 114	'r'
      005DBF 01                   16405 	.db #0x01	; 1
      005DC0 72                   16406 	.db #0x72	; 114	'r'
      005DC1 4C                   16407 	.db #0x4c	; 76	'L'
      005DC2 30                   16408 	.db #0x30	; 48	'0'
      005DC3 4A                   16409 	.db #0x4a	; 74	'J'
      005DC4 4D                   16410 	.db #0x4d	; 77	'M'
      005DC5 4D                   16411 	.db #0x4d	; 77	'M'
      005DC6 30                   16412 	.db #0x30	; 48	'0'
      005DC7 30                   16413 	.db #0x30	; 48	'0'
      005DC8 48                   16414 	.db #0x48	; 72	'H'
      005DC9 78                   16415 	.db #0x78	; 120	'x'
      005DCA 48                   16416 	.db #0x48	; 72	'H'
      005DCB 30                   16417 	.db #0x30	; 48	'0'
      005DCC BC                   16418 	.db #0xbc	; 188
      005DCD 62                   16419 	.db #0x62	; 98	'b'
      005DCE 5A                   16420 	.db #0x5a	; 90	'Z'
      005DCF 46                   16421 	.db #0x46	; 70	'F'
      005DD0 3D                   16422 	.db #0x3d	; 61
      005DD1 3E                   16423 	.db #0x3e	; 62
      005DD2 49                   16424 	.db #0x49	; 73	'I'
      005DD3 49                   16425 	.db #0x49	; 73	'I'
      005DD4 49                   16426 	.db #0x49	; 73	'I'
      005DD5 00                   16427 	.db #0x00	; 0
      005DD6 7E                   16428 	.db #0x7e	; 126
      005DD7 01                   16429 	.db #0x01	; 1
      005DD8 01                   16430 	.db #0x01	; 1
      005DD9 01                   16431 	.db #0x01	; 1
      005DDA 7E                   16432 	.db #0x7e	; 126
      005DDB 2A                   16433 	.db #0x2a	; 42
      005DDC 2A                   16434 	.db #0x2a	; 42
      005DDD 2A                   16435 	.db #0x2a	; 42
      005DDE 2A                   16436 	.db #0x2a	; 42
      005DDF 2A                   16437 	.db #0x2a	; 42
      005DE0 44                   16438 	.db #0x44	; 68	'D'
      005DE1 44                   16439 	.db #0x44	; 68	'D'
      005DE2 5F                   16440 	.db #0x5f	; 95
      005DE3 44                   16441 	.db #0x44	; 68	'D'
      005DE4 44                   16442 	.db #0x44	; 68	'D'
      005DE5 40                   16443 	.db #0x40	; 64
      005DE6 51                   16444 	.db #0x51	; 81	'Q'
      005DE7 4A                   16445 	.db #0x4a	; 74	'J'
      005DE8 44                   16446 	.db #0x44	; 68	'D'
      005DE9 40                   16447 	.db #0x40	; 64
      005DEA 40                   16448 	.db #0x40	; 64
      005DEB 44                   16449 	.db #0x44	; 68	'D'
      005DEC 4A                   16450 	.db #0x4a	; 74	'J'
      005DED 51                   16451 	.db #0x51	; 81	'Q'
      005DEE 40                   16452 	.db #0x40	; 64
      005DEF 00                   16453 	.db #0x00	; 0
      005DF0 00                   16454 	.db #0x00	; 0
      005DF1 FF                   16455 	.db #0xff	; 255
      005DF2 01                   16456 	.db #0x01	; 1
      005DF3 03                   16457 	.db #0x03	; 3
      005DF4 E0                   16458 	.db #0xe0	; 224
      005DF5 80                   16459 	.db #0x80	; 128
      005DF6 FF                   16460 	.db #0xff	; 255
      005DF7 00                   16461 	.db #0x00	; 0
      005DF8 00                   16462 	.db #0x00	; 0
      005DF9 08                   16463 	.db #0x08	; 8
      005DFA 08                   16464 	.db #0x08	; 8
      005DFB 6B                   16465 	.db #0x6b	; 107	'k'
      005DFC 6B                   16466 	.db #0x6b	; 107	'k'
      005DFD 08                   16467 	.db #0x08	; 8
      005DFE 36                   16468 	.db #0x36	; 54	'6'
      005DFF 12                   16469 	.db #0x12	; 18
      005E00 36                   16470 	.db #0x36	; 54	'6'
      005E01 24                   16471 	.db #0x24	; 36
      005E02 36                   16472 	.db #0x36	; 54	'6'
      005E03 06                   16473 	.db #0x06	; 6
      005E04 0F                   16474 	.db #0x0f	; 15
      005E05 09                   16475 	.db #0x09	; 9
      005E06 0F                   16476 	.db #0x0f	; 15
      005E07 06                   16477 	.db #0x06	; 6
      005E08 00                   16478 	.db #0x00	; 0
      005E09 00                   16479 	.db #0x00	; 0
      005E0A 18                   16480 	.db #0x18	; 24
      005E0B 18                   16481 	.db #0x18	; 24
      005E0C 00                   16482 	.db #0x00	; 0
      005E0D 00                   16483 	.db #0x00	; 0
      005E0E 00                   16484 	.db #0x00	; 0
      005E0F 10                   16485 	.db #0x10	; 16
      005E10 10                   16486 	.db #0x10	; 16
      005E11 00                   16487 	.db #0x00	; 0
      005E12 30                   16488 	.db #0x30	; 48	'0'
      005E13 40                   16489 	.db #0x40	; 64
      005E14 FF                   16490 	.db #0xff	; 255
      005E15 01                   16491 	.db #0x01	; 1
      005E16 01                   16492 	.db #0x01	; 1
      005E17 00                   16493 	.db #0x00	; 0
      005E18 1F                   16494 	.db #0x1f	; 31
      005E19 01                   16495 	.db #0x01	; 1
      005E1A 01                   16496 	.db #0x01	; 1
      005E1B 1E                   16497 	.db #0x1e	; 30
      005E1C 00                   16498 	.db #0x00	; 0
      005E1D 19                   16499 	.db #0x19	; 25
      005E1E 1D                   16500 	.db #0x1d	; 29
      005E1F 17                   16501 	.db #0x17	; 23
      005E20 12                   16502 	.db #0x12	; 18
      005E21 00                   16503 	.db #0x00	; 0
      005E22 3C                   16504 	.db #0x3c	; 60
      005E23 3C                   16505 	.db #0x3c	; 60
      005E24 3C                   16506 	.db #0x3c	; 60
      005E25 3C                   16507 	.db #0x3c	; 60
      005E26 00                   16508 	.db #0x00	; 0
      005E27 00                   16509 	.db #0x00	; 0
      005E28 00                   16510 	.db #0x00	; 0
      005E29 00                   16511 	.db #0x00	; 0
      005E2A 00                   16512 	.db #0x00	; 0
      005E2B                      16513 _keypad:
      005E2B 31                   16514 	.db #0x31	; 49	'1'
      005E2C 34                   16515 	.db #0x34	; 52	'4'
      005E2D 37                   16516 	.db #0x37	; 55	'7'
      005E2E 46                   16517 	.db #0x46	; 70	'F'
      005E2F 32                   16518 	.db #0x32	; 50	'2'
      005E30 35                   16519 	.db #0x35	; 53	'5'
      005E31 38                   16520 	.db #0x38	; 56	'8'
      005E32 30                   16521 	.db #0x30	; 48	'0'
      005E33 33                   16522 	.db #0x33	; 51	'3'
      005E34 36                   16523 	.db #0x36	; 54	'6'
      005E35 39                   16524 	.db #0x39	; 57	'9'
      005E36 45                   16525 	.db #0x45	; 69	'E'
      005E37 41                   16526 	.db #0x41	; 65	'A'
      005E38 42                   16527 	.db #0x42	; 66	'B'
      005E39 43                   16528 	.db #0x43	; 67	'C'
      005E3A 44                   16529 	.db #0x44	; 68	'D'
                                  16530 	.area CONST   (CODE)
      005E3B                      16531 ___str_0:
      005E3B 45 52 52 4F 52 20 46 16532 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      005E4B 00                   16533 	.db 0x00
                                  16534 	.area CSEG    (CODE)
                                  16535 	.area CONST   (CODE)
      005E4C                      16536 ___str_1:
      005E4C 46 72 65 65 20 54 79 16537 	.ascii "Free Type: "
             70 65 3A 20
      005E57 0A                   16538 	.db 0x0a
      005E58 00                   16539 	.db 0x00
                                  16540 	.area CSEG    (CODE)
                                  16541 	.area CONST   (CODE)
      005E59                      16542 ___str_2:
      005E59 30 78                16543 	.ascii "0x"
      005E5B 00                   16544 	.db 0x00
                                  16545 	.area CSEG    (CODE)
                                  16546 	.area CONST   (CODE)
      005E5C                      16547 ___str_3:
      005E5C 57 65 6C 63 6F 6D 65 16548 	.ascii "Welcome"
      005E63 0A                   16549 	.db 0x0a
      005E64 00                   16550 	.db 0x00
                                  16551 	.area CSEG    (CODE)
                                  16552 	.area CONST   (CODE)
      005E65                      16553 ___str_4:
      005E65 0A                   16554 	.db 0x0a
      005E66 20 54 79 6C 65 72 20 16555 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      005E73 0A                   16556 	.db 0x0a
      005E74 20 20 45 43 45 4E 2D 16557 	.ascii "  ECEN-4350"
             34 33 35 30
      005E7F 0A                   16558 	.db 0x0a
      005E80 20 20 46 61 6C 6C 20 16559 	.ascii "  Fall 2021"
             32 30 32 31
      005E8B 00                   16560 	.db 0x00
                                  16561 	.area CSEG    (CODE)
                                  16562 	.area CONST   (CODE)
      005E8C                      16563 ___str_5:
      005E8C 3C 4D 65 6E 75 3E    16564 	.ascii "<Menu>"
      005E92 0A                   16565 	.db 0x0a
      005E93 00                   16566 	.db 0x00
                                  16567 	.area CSEG    (CODE)
                                  16568 	.area CONST   (CODE)
      005E94                      16569 ___str_6:
      005E94 20 3C 44 3E          16570 	.ascii " <D>"
      005E98 00                   16571 	.db 0x00
                                  16572 	.area CSEG    (CODE)
                                  16573 	.area CONST   (CODE)
      005E99                      16574 ___str_7:
      005E99 20 44 55 4D 50       16575 	.ascii " DUMP"
      005E9E 0A                   16576 	.db 0x0a
      005E9F 00                   16577 	.db 0x00
                                  16578 	.area CSEG    (CODE)
                                  16579 	.area CONST   (CODE)
      005EA0                      16580 ___str_8:
      005EA0 20 3C 42 3E          16581 	.ascii " <B>"
      005EA4 00                   16582 	.db 0x00
                                  16583 	.area CSEG    (CODE)
                                  16584 	.area CONST   (CODE)
      005EA5                      16585 ___str_9:
      005EA5 20 4D 4F 56 45       16586 	.ascii " MOVE"
      005EAA 0A                   16587 	.db 0x0a
      005EAB 00                   16588 	.db 0x00
                                  16589 	.area CSEG    (CODE)
                                  16590 	.area CONST   (CODE)
      005EAC                      16591 ___str_10:
      005EAC 20 3C 45 3E          16592 	.ascii " <E>"
      005EB0 00                   16593 	.db 0x00
                                  16594 	.area CSEG    (CODE)
                                  16595 	.area CONST   (CODE)
      005EB1                      16596 ___str_11:
      005EB1 20 45 44 49 54       16597 	.ascii " EDIT"
      005EB6 0A                   16598 	.db 0x0a
      005EB7 00                   16599 	.db 0x00
                                  16600 	.area CSEG    (CODE)
                                  16601 	.area CONST   (CODE)
      005EB8                      16602 ___str_12:
      005EB8 20 3C 46 3E          16603 	.ascii " <F>"
      005EBC 00                   16604 	.db 0x00
                                  16605 	.area CSEG    (CODE)
                                  16606 	.area CONST   (CODE)
      005EBD                      16607 ___str_13:
      005EBD 20 46 49 4E 44       16608 	.ascii " FIND"
      005EC2 0A                   16609 	.db 0x0a
      005EC3 00                   16610 	.db 0x00
                                  16611 	.area CSEG    (CODE)
                                  16612 	.area CONST   (CODE)
      005EC4                      16613 ___str_14:
      005EC4 20 3C 43 3E          16614 	.ascii " <C>"
      005EC8 00                   16615 	.db 0x00
                                  16616 	.area CSEG    (CODE)
                                  16617 	.area CONST   (CODE)
      005EC9                      16618 ___str_15:
      005EC9 20 43 4F 55 4E 54    16619 	.ascii " COUNT"
      005ECF 0A                   16620 	.db 0x0a
      005ED0 00                   16621 	.db 0x00
                                  16622 	.area CSEG    (CODE)
                                  16623 	.area CONST   (CODE)
      005ED1                      16624 ___str_16:
      005ED1 20 3C 41 3E          16625 	.ascii " <A>"
      005ED5 00                   16626 	.db 0x00
                                  16627 	.area CSEG    (CODE)
                                  16628 	.area CONST   (CODE)
      005ED6                      16629 ___str_17:
      005ED6 20 4D 45 4D 20 43 48 16630 	.ascii " MEM CHECK"
             45 43 4B
      005EE0 0A                   16631 	.db 0x0a
      005EE1 00                   16632 	.db 0x00
                                  16633 	.area CSEG    (CODE)
                                  16634 	.area CONST   (CODE)
      005EE2                      16635 ___str_18:
      005EE2 20 3C 31 3E          16636 	.ascii " <1>"
      005EE6 00                   16637 	.db 0x00
                                  16638 	.area CSEG    (CODE)
                                  16639 	.area CONST   (CODE)
      005EE7                      16640 ___str_19:
      005EE7 20 55 41 52 54       16641 	.ascii " UART"
      005EEC 00                   16642 	.db 0x00
                                  16643 	.area CSEG    (CODE)
                                  16644 	.area CONST   (CODE)
      005EED                      16645 ___str_20:
      005EED 20 5B 44 69 73 61 62 16646 	.ascii " [Disabled]"
             6C 65 64 5D
      005EF8 0A                   16647 	.db 0x0a
      005EF9 00                   16648 	.db 0x00
                                  16649 	.area CSEG    (CODE)
                                  16650 	.area CONST   (CODE)
      005EFA                      16651 ___str_21:
      005EFA 20 5B 45 6E 61 62 6C 16652 	.ascii " [Enabled]"
             65 64 5D
      005F04 0A                   16653 	.db 0x0a
      005F05 00                   16654 	.db 0x00
                                  16655 	.area CSEG    (CODE)
                                  16656 	.area CONST   (CODE)
      005F06                      16657 ___str_22:
      005F06 5B 44 55 4D 50 5D    16658 	.ascii "[DUMP]"
      005F0C 0A                   16659 	.db 0x0a
      005F0D 00                   16660 	.db 0x00
                                  16661 	.area CSEG    (CODE)
                                  16662 	.area CONST   (CODE)
      005F0E                      16663 ___str_23:
      005F0E 20 41 64 64 72 65 73 16664 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      005F20 0A                   16665 	.db 0x0a
      005F21 00                   16666 	.db 0x00
                                  16667 	.area CSEG    (CODE)
                                  16668 	.area CONST   (CODE)
      005F22                      16669 ___str_24:
      005F22 20 30 78 5F 5F 5F 5F 16670 	.ascii " 0x____"
      005F29 00                   16671 	.db 0x00
                                  16672 	.area CSEG    (CODE)
                                  16673 	.area CONST   (CODE)
      005F2A                      16674 ___str_25:
      005F2A 20 43 68 6F 6F 73 65 16675 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      005F3D 0A                   16676 	.db 0x0a
      005F3E 00                   16677 	.db 0x00
                                  16678 	.area CSEG    (CODE)
                                  16679 	.area CONST   (CODE)
      005F3F                      16680 ___str_26:
      005F3F 20 20 3C 31 3E 20 42 16681 	.ascii "  <1> BYTE"
             59 54 45
      005F49 0A                   16682 	.db 0x0a
      005F4A 20 20 3C 32 3E 20 57 16683 	.ascii "  <2> WORD"
             4F 52 44
      005F54 0A                   16684 	.db 0x0a
      005F55 20 20 3C 34 3E 20 44 16685 	.ascii "  <4> DWORD"
             57 4F 52 44
      005F60 00                   16686 	.db 0x00
                                  16687 	.area CSEG    (CODE)
                                  16688 	.area CONST   (CODE)
      005F61                      16689 ___str_27:
      005F61 20 49 6E 70 75 74 20 16690 	.ascii " Input Size:"
             53 69 7A 65 3A
      005F6D 00                   16691 	.db 0x00
                                  16692 	.area CSEG    (CODE)
                                  16693 	.area CONST   (CODE)
      005F6E                      16694 ___str_28:
      005F6E 20 5F                16695 	.ascii " _"
      005F70 00                   16696 	.db 0x00
                                  16697 	.area CSEG    (CODE)
                                  16698 	.area CONST   (CODE)
      005F71                      16699 ___str_29:
      005F71 20 41 64 64 72 65 73 16700 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      005F83 00                   16701 	.db 0x00
                                  16702 	.area CSEG    (CODE)
                                  16703 	.area CONST   (CODE)
      005F84                      16704 ___str_30:
      005F84 20                   16705 	.ascii " "
      005F85 00                   16706 	.db 0x00
                                  16707 	.area CSEG    (CODE)
                                  16708 	.area CONST   (CODE)
      005F86                      16709 ___str_31:
      005F86 20 43 68 6F 6F 73 65 16710 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      005F99 00                   16711 	.db 0x00
                                  16712 	.area CSEG    (CODE)
                                  16713 	.area CONST   (CODE)
      005F9A                      16714 ___str_32:
      005F9A 0A                   16715 	.db 0x0a
      005F9B 0A                   16716 	.db 0x0a
      005F9C 00                   16717 	.db 0x00
                                  16718 	.area CSEG    (CODE)
                                  16719 	.area CONST   (CODE)
      005F9D                      16720 ___str_33:
      005F9D 20 20                16721 	.ascii "  "
      005F9F 00                   16722 	.db 0x00
                                  16723 	.area CSEG    (CODE)
                                  16724 	.area CONST   (CODE)
      005FA0                      16725 ___str_34:
      005FA0 3C 31 3E 20 42 59 54 16726 	.ascii "<1> BYTE"
             45
      005FA8 0A                   16727 	.db 0x0a
      005FA9 00                   16728 	.db 0x00
                                  16729 	.area CSEG    (CODE)
                                  16730 	.area CONST   (CODE)
      005FAA                      16731 ___str_35:
      005FAA 0A                   16732 	.db 0x0a
      005FAB 0A                   16733 	.db 0x0a
      005FAC 20 20 20 20 20 20 20 16734 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005FBC 0A                   16735 	.db 0x0a
      005FBD 20 20 20 20 20 20 20 16736 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005FCD 00                   16737 	.db 0x00
                                  16738 	.area CSEG    (CODE)
                                  16739 	.area CONST   (CODE)
      005FCE                      16740 ___str_36:
      005FCE 0A                   16741 	.db 0x0a
      005FCF 20 20                16742 	.ascii "  "
      005FD1 00                   16743 	.db 0x00
                                  16744 	.area CSEG    (CODE)
                                  16745 	.area CONST   (CODE)
      005FD2                      16746 ___str_37:
      005FD2 3C 32 3E 20 57 4F 52 16747 	.ascii "<2> WORD"
             44
      005FDA 0A                   16748 	.db 0x0a
      005FDB 00                   16749 	.db 0x00
                                  16750 	.area CSEG    (CODE)
                                  16751 	.area CONST   (CODE)
      005FDC                      16752 ___str_38:
      005FDC 0A                   16753 	.db 0x0a
      005FDD 20 20 20 20 20 20 20 16754 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005FED 0A                   16755 	.db 0x0a
      005FEE 20 20 20 20 20 20 20 16756 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005FFE 00                   16757 	.db 0x00
                                  16758 	.area CSEG    (CODE)
                                  16759 	.area CONST   (CODE)
      005FFF                      16760 ___str_39:
      005FFF 0A                   16761 	.db 0x0a
      006000 0A                   16762 	.db 0x0a
      006001 20 20                16763 	.ascii "  "
      006003 00                   16764 	.db 0x00
                                  16765 	.area CSEG    (CODE)
                                  16766 	.area CONST   (CODE)
      006004                      16767 ___str_40:
      006004 3C 34 3E 20 44 57 4F 16768 	.ascii "<4> DWORD"
             52 44
      00600D 00                   16769 	.db 0x00
                                  16770 	.area CSEG    (CODE)
                                  16771 	.area CONST   (CODE)
      00600E                      16772 ___str_41:
      00600E 0A                   16773 	.db 0x0a
      00600F 20 20 49 6E 70 75 74 16774 	.ascii "  Input Error"
             20 45 72 72 6F 72
      00601C 0A                   16775 	.db 0x0a
      00601D 20 20 54 72 79 20 41 16776 	.ascii "  Try Again"
             67 61 69 6E
      006028 00                   16777 	.db 0x00
                                  16778 	.area CSEG    (CODE)
                                  16779 	.area CONST   (CODE)
      006029                      16780 ___str_42:
      006029 20 49 6E 70 75 74 20 16781 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      006036 00                   16782 	.db 0x00
                                  16783 	.area CSEG    (CODE)
                                  16784 	.area CONST   (CODE)
      006037                      16785 ___str_43:
      006037 20 4D 69 73 6D 61 74 16786 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      006046 0A                   16787 	.db 0x0a
      006047 20 54 72 79 20 41 67 16788 	.ascii " Try Again"
             61 69 6E
      006051 00                   16789 	.db 0x00
                                  16790 	.area CSEG    (CODE)
                                  16791 	.area CONST   (CODE)
      006052                      16792 ___str_44:
      006052 20 4D 61 74 63 68 20 16793 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      006062 0A                   16794 	.db 0x0a
      006063 20 20 20 20 20 20 20 16795 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      006073 00                   16796 	.db 0x00
                                  16797 	.area CSEG    (CODE)
                                  16798 	.area CONST   (CODE)
      006074                      16799 ___str_45:
      006074 20 41 64 64 72 65 73 16800 	.ascii " Address:"
             73 3A
      00607D 00                   16801 	.db 0x00
                                  16802 	.area CSEG    (CODE)
                                  16803 	.area CONST   (CODE)
      00607E                      16804 ___str_46:
      00607E 20 30 78             16805 	.ascii " 0x"
      006081 00                   16806 	.db 0x00
                                  16807 	.area CSEG    (CODE)
                                  16808 	.area CONST   (CODE)
      006082                      16809 ___str_47:
      006082 20 48 65 78 20 44 61 16810 	.ascii " Hex Data:"
             74 61 3A
      00608C 00                   16811 	.db 0x00
                                  16812 	.area CSEG    (CODE)
                                  16813 	.area CONST   (CODE)
      00608D                      16814 ___str_48:
      00608D 20 41 53 43 49 49 20 16815 	.ascii " ASCII Data:"
             44 61 74 61 3A
      006099 00                   16816 	.db 0x00
                                  16817 	.area CSEG    (CODE)
                                  16818 	.area CONST   (CODE)
      00609A                      16819 ___str_49:
      00609A 20 44 61 74 61 20 54 16820 	.ascii " Data Type:"
             79 70 65 3A
      0060A5 00                   16821 	.db 0x00
                                  16822 	.area CSEG    (CODE)
                                  16823 	.area CONST   (CODE)
      0060A6                      16824 ___str_50:
      0060A6 20 42 59 54 45       16825 	.ascii " BYTE"
      0060AB 00                   16826 	.db 0x00
                                  16827 	.area CSEG    (CODE)
                                  16828 	.area CONST   (CODE)
      0060AC                      16829 ___str_51:
      0060AC 20 57 4F 52 44       16830 	.ascii " WORD"
      0060B1 00                   16831 	.db 0x00
                                  16832 	.area CSEG    (CODE)
                                  16833 	.area CONST   (CODE)
      0060B2                      16834 ___str_52:
      0060B2 20 44 57 4F 52 44    16835 	.ascii " DWORD"
      0060B8 00                   16836 	.db 0x00
                                  16837 	.area CSEG    (CODE)
                                  16838 	.area CONST   (CODE)
      0060B9                      16839 ___str_53:
      0060B9 20 3C 30 3E 20 45 78 16840 	.ascii " <0> Exit"
             69 74
      0060C2 0A                   16841 	.db 0x0a
      0060C3 00                   16842 	.db 0x00
                                  16843 	.area CSEG    (CODE)
                                  16844 	.area CONST   (CODE)
      0060C4                      16845 ___str_54:
      0060C4 3C 30 3E 20 45 78 69 16846 	.ascii "<0> Exit"
             74
      0060CC 0A                   16847 	.db 0x0a
      0060CD 00                   16848 	.db 0x00
                                  16849 	.area CSEG    (CODE)
                                  16850 	.area CONST   (CODE)
      0060CE                      16851 ___str_55:
      0060CE 5B 4D 4F 56 45 5D    16852 	.ascii "[MOVE]"
      0060D4 0A                   16853 	.db 0x0a
      0060D5 00                   16854 	.db 0x00
                                  16855 	.area CSEG    (CODE)
                                  16856 	.area CONST   (CODE)
      0060D6                      16857 ___str_56:
      0060D6 20 53 6F 75 72 63 65 16858 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      0060E6 00                   16859 	.db 0x00
                                  16860 	.area CSEG    (CODE)
                                  16861 	.area CONST   (CODE)
      0060E7                      16862 ___str_57:
      0060E7 20 44 65 73 74 69 6E 16863 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      0060F4 00                   16864 	.db 0x00
                                  16865 	.area CSEG    (CODE)
                                  16866 	.area CONST   (CODE)
      0060F5                      16867 ___str_58:
      0060F5 20 4D 6F 76 65 20 43 16868 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      006103 0A                   16869 	.db 0x0a
      006104 00                   16870 	.db 0x00
                                  16871 	.area CSEG    (CODE)
                                  16872 	.area CONST   (CODE)
      006105                      16873 ___str_59:
      006105 5B 45 44 49 54 5D    16874 	.ascii "[EDIT]"
      00610B 0A                   16875 	.db 0x0a
      00610C 00                   16876 	.db 0x00
                                  16877 	.area CSEG    (CODE)
                                  16878 	.area CONST   (CODE)
      00610D                      16879 ___str_60:
      00610D 20 45 64 69 74 20 41 16880 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      00611B 00                   16881 	.db 0x00
                                  16882 	.area CSEG    (CODE)
                                  16883 	.area CONST   (CODE)
      00611C                      16884 ___str_61:
      00611C 20 4C 6F 63 61 74 69 16885 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      00612F 0A                   16886 	.db 0x0a
      006130 00                   16887 	.db 0x00
                                  16888 	.area CSEG    (CODE)
                                  16889 	.area CONST   (CODE)
      006131                      16890 ___str_62:
      006131 20 5F 5F             16891 	.ascii " __"
      006134 00                   16892 	.db 0x00
                                  16893 	.area CSEG    (CODE)
                                  16894 	.area CONST   (CODE)
      006135                      16895 ___str_63:
      006135 20 45 6E 74 65 72 20 16896 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      006146 0A                   16897 	.db 0x0a
      006147 00                   16898 	.db 0x00
                                  16899 	.area CSEG    (CODE)
                                  16900 	.area CONST   (CODE)
      006148                      16901 ___str_64:
      006148 20 43 68 6F 6F 73 65 16902 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      00615C 0A                   16903 	.db 0x0a
      00615D 00                   16904 	.db 0x00
                                  16905 	.area CSEG    (CODE)
                                  16906 	.area CONST   (CODE)
      00615E                      16907 ___str_65:
      00615E 20 20 3C 31 3E 20 4E 16908 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      006170 0A                   16909 	.db 0x0a
      006171 20 20 3C 32 3E 20 4E 16910 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      006182 0A                   16911 	.db 0x0a
      006183 00                   16912 	.db 0x00
                                  16913 	.area CSEG    (CODE)
                                  16914 	.area CONST   (CODE)
      006184                      16915 ___str_66:
      006184 20 20 3C 30 3E 20 45 16916 	.ascii "  <0> Exit"
             78 69 74
      00618E 00                   16917 	.db 0x00
                                  16918 	.area CSEG    (CODE)
                                  16919 	.area CONST   (CODE)
      00618F                      16920 ___str_67:
      00618F 0A                   16921 	.db 0x0a
      006190 20                   16922 	.ascii " "
      006191 00                   16923 	.db 0x00
                                  16924 	.area CSEG    (CODE)
                                  16925 	.area CONST   (CODE)
      006192                      16926 ___str_68:
      006192 20 45 6E 74 65 72 20 16927 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      0061A3 0A                   16928 	.db 0x0a
      0061A4 20                   16929 	.ascii " "
      0061A5 00                   16930 	.db 0x00
                                  16931 	.area CSEG    (CODE)
                                  16932 	.area CONST   (CODE)
      0061A6                      16933 ___str_69:
      0061A6 3C 31 3E 20 4E 65 78 16934 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      0061B6 0A                   16935 	.db 0x0a
      0061B7 00                   16936 	.db 0x00
                                  16937 	.area CSEG    (CODE)
                                  16938 	.area CONST   (CODE)
      0061B8                      16939 ___str_70:
      0061B8 0A                   16940 	.db 0x0a
      0061B9 0A                   16941 	.db 0x0a
      0061BA 20 20 20 20 20 20 20 16942 	.ascii "               "
             20 20 20 20 20 20 20
             20
      0061C9 00                   16943 	.db 0x00
                                  16944 	.area CSEG    (CODE)
                                  16945 	.area CONST   (CODE)
      0061CA                      16946 ___str_71:
      0061CA 0A                   16947 	.db 0x0a
      0061CB 20 5F 5F             16948 	.ascii " __"
      0061CE 00                   16949 	.db 0x00
                                  16950 	.area CSEG    (CODE)
                                  16951 	.area CONST   (CODE)
      0061CF                      16952 ___str_72:
      0061CF 0A                   16953 	.db 0x0a
      0061D0 20 20 3C 31 3E 20 4E 16954 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0061E2 0A                   16955 	.db 0x0a
      0061E3 20 20 3C 32 3E 20 4E 16956 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0061F4 0A                   16957 	.db 0x0a
      0061F5 20 20 3C 30 3E 20 45 16958 	.ascii "  <0> Exit"
             78 69 74
      0061FF 00                   16959 	.db 0x00
                                  16960 	.area CSEG    (CODE)
                                  16961 	.area CONST   (CODE)
      006200                      16962 ___str_73:
      006200 20 43 68 6F 6F 73 65 16963 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      006214 0A                   16964 	.db 0x0a
      006215 20 20                16965 	.ascii "  "
      006217 00                   16966 	.db 0x00
                                  16967 	.area CSEG    (CODE)
                                  16968 	.area CONST   (CODE)
      006218                      16969 ___str_74:
      006218 3C 32 3E 20 4E 65 77 16970 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      006227 0A                   16971 	.db 0x0a
      006228 00                   16972 	.db 0x00
                                  16973 	.area CSEG    (CODE)
                                  16974 	.area CONST   (CODE)
      006229                      16975 ___str_75:
      006229 0A                   16976 	.db 0x0a
      00622A 20 20 20 20 20 20 20 16977 	.ascii "               "
             20 20 20 20 20 20 20
             20
      006239 00                   16978 	.db 0x00
                                  16979 	.area CSEG    (CODE)
                                  16980 	.area CONST   (CODE)
      00623A                      16981 ___str_76:
      00623A 20 45 64 69 74 20 41 16982 	.ascii " Edit Address"
             64 64 72 65 73 73
      006247 00                   16983 	.db 0x00
                                  16984 	.area CSEG    (CODE)
                                  16985 	.area CONST   (CODE)
      006248                      16986 ___str_77:
      006248 0A                   16987 	.db 0x0a
      006249 00                   16988 	.db 0x00
                                  16989 	.area CSEG    (CODE)
                                  16990 	.area CONST   (CODE)
      00624A                      16991 ___str_78:
      00624A 3C 30 3E 20 45 78 69 16992 	.ascii "<0> Exit"
             74
      006252 00                   16993 	.db 0x00
                                  16994 	.area CSEG    (CODE)
                                  16995 	.area CONST   (CODE)
      006253                      16996 ___str_79:
      006253 0A                   16997 	.db 0x0a
      006254 0A                   16998 	.db 0x0a
      006255 0A                   16999 	.db 0x0a
      006256 0A                   17000 	.db 0x0a
      006257 20 49 6E 70 75 74 20 17001 	.ascii " Input Error "
             45 72 72 6F 72 20
      006264 00                   17002 	.db 0x00
                                  17003 	.area CSEG    (CODE)
                                  17004 	.area CONST   (CODE)
      006265                      17005 ___str_80:
      006265 5B 46 49 4E 44 5D    17006 	.ascii "[FIND]"
      00626B 0A                   17007 	.db 0x0a
      00626C 00                   17008 	.db 0x00
                                  17009 	.area CSEG    (CODE)
                                  17010 	.area CONST   (CODE)
      00626D                      17011 ___str_81:
      00626D 20 46 69 6E 64 20 56 17012 	.ascii " Find Value:"
             61 6C 75 65 3A
      006279 00                   17013 	.db 0x00
                                  17014 	.area CSEG    (CODE)
                                  17015 	.area CONST   (CODE)
      00627A                      17016 ___str_82:
      00627A 20 53 65 61 72 63 68 17017 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      00628A 00                   17018 	.db 0x00
                                  17019 	.area CSEG    (CODE)
                                  17020 	.area CONST   (CODE)
      00628B                      17021 ___str_83:
      00628B 20 49 6E 70 75 74 20 17022 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      00629D 0A                   17023 	.db 0x0a
      00629E 00                   17024 	.db 0x00
                                  17025 	.area CSEG    (CODE)
                                  17026 	.area CONST   (CODE)
      00629F                      17027 ___str_84:
      00629F 20 20 3C 30 31 3E 20 17028 	.ascii "  <01> BYTE"
             42 59 54 45
      0062AA 0A                   17029 	.db 0x0a
      0062AB 20 20 3C 30 32 3E 20 17030 	.ascii "  <02> WORD"
             57 4F 52 44
      0062B6 0A                   17031 	.db 0x0a
      0062B7 20 20 3C 30 34 3E 20 17032 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      0062C3 0A                   17033 	.db 0x0a
      0062C4 00                   17034 	.db 0x00
                                  17035 	.area CSEG    (CODE)
                                  17036 	.area CONST   (CODE)
      0062C5                      17037 ___str_85:
      0062C5 20 20 3C 46 46 3E 20 17038 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      0062D2 00                   17039 	.db 0x00
                                  17040 	.area CSEG    (CODE)
                                  17041 	.area CONST   (CODE)
      0062D3                      17042 ___str_86:
      0062D3 20 20 20 5F 5F       17043 	.ascii "   __"
      0062D8 00                   17044 	.db 0x00
                                  17045 	.area CSEG    (CODE)
                                  17046 	.area CONST   (CODE)
      0062D9                      17047 ___str_87:
      0062D9 20 20 20             17048 	.ascii "   "
      0062DC 00                   17049 	.db 0x00
                                  17050 	.area CSEG    (CODE)
                                  17051 	.area CONST   (CODE)
      0062DD                      17052 ___str_88:
      0062DD 0A                   17053 	.db 0x0a
      0062DE 20 20 20 20 20 20 20 17054 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0062EE 00                   17055 	.db 0x00
                                  17056 	.area CSEG    (CODE)
                                  17057 	.area CONST   (CODE)
      0062EF                      17058 ___str_89:
      0062EF 0A                   17059 	.db 0x0a
      0062F0 20 54 72 79 20 61 67 17060 	.ascii " Try again"
             61 69 6E
      0062FA 00                   17061 	.db 0x00
                                  17062 	.area CSEG    (CODE)
                                  17063 	.area CONST   (CODE)
      0062FB                      17064 ___str_90:
      0062FB 3C 30 31 3E 20 42 59 17065 	.ascii "<01> BYTE"
             54 45
      006304 0A                   17066 	.db 0x0a
      006305 00                   17067 	.db 0x00
                                  17068 	.area CSEG    (CODE)
                                  17069 	.area CONST   (CODE)
      006306                      17070 ___str_91:
      006306 20 20 3C 30 32 3E 20 17071 	.ascii "  <02> WORD"
             57 4F 52 44
      006311 0A                   17072 	.db 0x0a
      006312 00                   17073 	.db 0x00
                                  17074 	.area CSEG    (CODE)
                                  17075 	.area CONST   (CODE)
      006313                      17076 ___str_92:
      006313 20 20 3C 30 34 3E 20 17077 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      00631F 0A                   17078 	.db 0x0a
      006320 00                   17079 	.db 0x00
                                  17080 	.area CSEG    (CODE)
                                  17081 	.area CONST   (CODE)
      006321                      17082 ___str_93:
      006321 0A                   17083 	.db 0x0a
      006322 20 53 65 61 72 63 68 17084 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      006335 00                   17085 	.db 0x00
                                  17086 	.area CSEG    (CODE)
                                  17087 	.area CONST   (CODE)
      006336                      17088 ___str_94:
      006336 0A                   17089 	.db 0x0a
      006337 20 42 59 54 45 20 5B 17090 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      006345 00                   17091 	.db 0x00
                                  17092 	.area CSEG    (CODE)
                                  17093 	.area CONST   (CODE)
      006346                      17094 ___str_95:
      006346 20 20 3C 30 31 3E 20 17095 	.ascii "  <01> BYTE"
             42 59 54 45
      006351 0A                   17096 	.db 0x0a
      006352 20 20                17097 	.ascii "  "
      006354 00                   17098 	.db 0x00
                                  17099 	.area CSEG    (CODE)
                                  17100 	.area CONST   (CODE)
      006355                      17101 ___str_96:
      006355 3C 30 32 3E 20 57 4F 17102 	.ascii "<02> WORD"
             52 44
      00635E 0A                   17103 	.db 0x0a
      00635F 00                   17104 	.db 0x00
                                  17105 	.area CSEG    (CODE)
                                  17106 	.area CONST   (CODE)
      006360                      17107 ___str_97:
      006360 0A                   17108 	.db 0x0a
      006361 20 57 4F 52 44 20 5B 17109 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      006370 00                   17110 	.db 0x00
                                  17111 	.area CSEG    (CODE)
                                  17112 	.area CONST   (CODE)
      006371                      17113 ___str_98:
      006371 20 20 3C 30 31 3E 20 17114 	.ascii "  <01> BYTE"
             42 59 54 45
      00637C 0A                   17115 	.db 0x0a
      00637D 20 20 3C 30 32 3E 20 17116 	.ascii "  <02> WORD"
             57 4F 52 44
      006388 0A                   17117 	.db 0x0a
      006389 20 20                17118 	.ascii "  "
      00638B 00                   17119 	.db 0x00
                                  17120 	.area CSEG    (CODE)
                                  17121 	.area CONST   (CODE)
      00638C                      17122 ___str_99:
      00638C 3C 30 34 3E 20 44 57 17123 	.ascii "<04> DWORD"
             4F 52 44
      006396 0A                   17124 	.db 0x0a
      006397 00                   17125 	.db 0x00
                                  17126 	.area CSEG    (CODE)
                                  17127 	.area CONST   (CODE)
      006398                      17128 ___str_100:
      006398 0A                   17129 	.db 0x0a
      006399 20 44 57 4F 52 44 20 17130 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      0063A9 00                   17131 	.db 0x00
                                  17132 	.area CSEG    (CODE)
                                  17133 	.area CONST   (CODE)
      0063AA                      17134 ___str_101:
      0063AA 3C 30 34 3E 20 44 57 17135 	.ascii "<04> DWORD"
             4F 52 44
      0063B4 0A                   17136 	.db 0x0a
      0063B5 20 20                17137 	.ascii "  "
      0063B7 00                   17138 	.db 0x00
                                  17139 	.area CSEG    (CODE)
                                  17140 	.area CONST   (CODE)
      0063B8                      17141 ___str_102:
      0063B8 3C 46 46 3E 20 28 53 17142 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      0063C3 00                   17143 	.db 0x00
                                  17144 	.area CSEG    (CODE)
                                  17145 	.area CONST   (CODE)
      0063C4                      17146 ___str_103:
      0063C4 0A                   17147 	.db 0x0a
      0063C5 20 5B 32 35 36 20 42 17148 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      0063D2 00                   17149 	.db 0x00
                                  17150 	.area CSEG    (CODE)
                                  17151 	.area CONST   (CODE)
      0063D3                      17152 ___str_104:
      0063D3 20 5B 4E 6F 6E 2D 49 17153 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      0063E5 0A                   17154 	.db 0x0a
      0063E6 00                   17155 	.db 0x00
                                  17156 	.area CSEG    (CODE)
                                  17157 	.area CONST   (CODE)
      0063E7                      17158 ___str_105:
      0063E7 20 53 65 61 72 63 68 17159 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      0063F5 0A                   17160 	.db 0x0a
      0063F6 20                   17161 	.ascii " "
      0063F7 00                   17162 	.db 0x00
                                  17163 	.area CSEG    (CODE)
                                  17164 	.area CONST   (CODE)
      0063F8                      17165 ___str_106:
      0063F8 20 46 6F 75 6E 64 20 17166 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      00640B 0A                   17167 	.db 0x0a
      00640C 00                   17168 	.db 0x00
                                  17169 	.area CSEG    (CODE)
                                  17170 	.area CONST   (CODE)
      00640D                      17171 ___str_107:
      00640D 0A                   17172 	.db 0x0a
      00640E 20 30 78             17173 	.ascii " 0x"
      006411 00                   17174 	.db 0x00
                                  17175 	.area CSEG    (CODE)
                                  17176 	.area CONST   (CODE)
      006412                      17177 ___str_108:
      006412 20 5B 49 6E 74 65 72 17178 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      006420 0A                   17179 	.db 0x0a
      006421 00                   17180 	.db 0x00
                                  17181 	.area CSEG    (CODE)
                                  17182 	.area CONST   (CODE)
      006422                      17183 ___str_109:
      006422 20 46 6F 75 6E 64 20 17184 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      006435 0A                   17185 	.db 0x0a
      006436 00                   17186 	.db 0x00
                                  17187 	.area CSEG    (CODE)
                                  17188 	.area CONST   (CODE)
      006437                      17189 ___str_110:
      006437 50 61 67 65 3A 20    17190 	.ascii "Page: "
      00643D 00                   17191 	.db 0x00
                                  17192 	.area CSEG    (CODE)
                                  17193 	.area CONST   (CODE)
      00643E                      17194 ___str_111:
      00643E 20 3C 31 3E 20 4E 65 17195 	.ascii " <1> Next"
             78 74
      006447 0A                   17196 	.db 0x0a
      006448 20 3C 30 3E 20 45 78 17197 	.ascii " <0> Exit"
             69 74
      006451 0A                   17198 	.db 0x0a
      006452 20 20 20 20 20 20 20 17199 	.ascii "              "
             20 20 20 20 20 20 20
      006460 00                   17200 	.db 0x00
                                  17201 	.area CSEG    (CODE)
                                  17202 	.area CONST   (CODE)
      006461                      17203 ___str_112:
      006461 3C 31 3E 20 4E 65 78 17204 	.ascii "<1> Next"
             74
      006469 00                   17205 	.db 0x00
                                  17206 	.area CSEG    (CODE)
                                  17207 	.area CONST   (CODE)
      00646A                      17208 ___str_113:
      00646A 20 20 20 20 20 20 20 17209 	.ascii "          "
             20 20 20
      006474 0A                   17210 	.db 0x0a
      006475 20 3C 30 3E 20 45 78 17211 	.ascii " <0> Exit"
             69 74
      00647E 0A                   17212 	.db 0x0a
      00647F 20 20 20 20 20 20 20 17213 	.ascii "              "
             20 20 20 20 20 20 20
      00648D 00                   17214 	.db 0x00
                                  17215 	.area CSEG    (CODE)
                                  17216 	.area CONST   (CODE)
      00648E                      17217 ___str_114:
      00648E 20 20 20 20 20 20 20 17218 	.ascii "          "
             20 20 20
      006498 0A                   17219 	.db 0x0a
      006499 20 3C 30 3E 20 45 78 17220 	.ascii " <0> Exit"
             69 74
      0064A2 0A                   17221 	.db 0x0a
      0064A3 20 3C 32 3E 20 50 72 17222 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      0064B0 00                   17223 	.db 0x00
                                  17224 	.area CSEG    (CODE)
                                  17225 	.area CONST   (CODE)
      0064B1                      17226 ___str_115:
      0064B1 0A                   17227 	.db 0x0a
      0064B2 0A                   17228 	.db 0x0a
      0064B3 20                   17229 	.ascii " "
      0064B4 00                   17230 	.db 0x00
                                  17231 	.area CSEG    (CODE)
                                  17232 	.area CONST   (CODE)
      0064B5                      17233 ___str_116:
      0064B5 3C 32 3E 20 50 72 65 17234 	.ascii "<2> Previous"
             76 69 6F 75 73
      0064C1 00                   17235 	.db 0x00
                                  17236 	.area CSEG    (CODE)
                                  17237 	.area CONST   (CODE)
      0064C2                      17238 ___str_117:
      0064C2 20 3C 31 3E 20 4E 65 17239 	.ascii " <1> Next"
             78 74
      0064CB 0A                   17240 	.db 0x0a
      0064CC 20 3C 30 3E 20 45 78 17241 	.ascii " <0> Exit"
             69 74
      0064D5 0A                   17242 	.db 0x0a
      0064D6 20 3C 32 3E 20 50 72 17243 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      0064E3 00                   17244 	.db 0x00
                                  17245 	.area CSEG    (CODE)
                                  17246 	.area CONST   (CODE)
      0064E4                      17247 ___str_118:
      0064E4 20 3C 31 3E 20 4E 65 17248 	.ascii " <1> Next"
             78 74
      0064ED 0A                   17249 	.db 0x0a
      0064EE 20                   17250 	.ascii " "
      0064EF 00                   17251 	.db 0x00
                                  17252 	.area CSEG    (CODE)
                                  17253 	.area CONST   (CODE)
      0064F0                      17254 ___str_119:
      0064F0 0A                   17255 	.db 0x0a
      0064F1 20 3C 32 3E 20 50 72 17256 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      0064FE 00                   17257 	.db 0x00
                                  17258 	.area CSEG    (CODE)
                                  17259 	.area CONST   (CODE)
      0064FF                      17260 ___str_120:
      0064FF 20 56 61 6C 75 65 20 17261 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      00650F 0A                   17262 	.db 0x0a
      006510 20 57 69 74 68 69 6E 17263 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      00651D 0A                   17264 	.db 0x0a
      00651E 20                   17265 	.ascii " "
      00651F 00                   17266 	.db 0x00
                                  17267 	.area CSEG    (CODE)
                                  17268 	.area CONST   (CODE)
      006520                      17269 ___str_121:
      006520 0A                   17270 	.db 0x0a
      006521 20 3C 30 3E 20 45 78 17271 	.ascii " <0> Exit"
             69 74
      00652A 00                   17272 	.db 0x00
                                  17273 	.area CSEG    (CODE)
                                  17274 	.area CONST   (CODE)
      00652B                      17275 ___str_122:
      00652B 0A                   17276 	.db 0x0a
      00652C 0A                   17277 	.db 0x0a
      00652D 0A                   17278 	.db 0x0a
      00652E 20                   17279 	.ascii " "
      00652F 00                   17280 	.db 0x00
                                  17281 	.area CSEG    (CODE)
                                  17282 	.area CONST   (CODE)
      006530                      17283 ___str_123:
      006530 5B 43 4F 55 4E 54 5D 17284 	.ascii "[COUNT]"
      006537 0A                   17285 	.db 0x0a
      006538 00                   17286 	.db 0x00
                                  17287 	.area CSEG    (CODE)
                                  17288 	.area CONST   (CODE)
      006539                      17289 ___str_124:
      006539 20 53 65 61 72 63 68 17290 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      006547 00                   17291 	.db 0x00
                                  17292 	.area CSEG    (CODE)
                                  17293 	.area CONST   (CODE)
      006548                      17294 ___str_125:
      006548 20 46 6F 75 6E 64 20 17295 	.ascii " Found in"
             69 6E
      006551 0A                   17296 	.db 0x0a
      006552 20                   17297 	.ascii " "
      006553 00                   17298 	.db 0x00
                                  17299 	.area CSEG    (CODE)
                                  17300 	.area CONST   (CODE)
      006554                      17301 ___str_126:
      006554 20 42 79 74 65 73 20 17302 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      006560 0A                   17303 	.db 0x0a
      006561 20                   17304 	.ascii " "
      006562 00                   17305 	.db 0x00
                                  17306 	.area CSEG    (CODE)
                                  17307 	.area CONST   (CODE)
      006563                      17308 ___str_127:
      006563 43 6F 75 6E 74 3A 20 17309 	.ascii "Count: "
      00656A 00                   17310 	.db 0x00
                                  17311 	.area CSEG    (CODE)
                                  17312 	.area CONST   (CODE)
      00656B                      17313 ___str_128:
      00656B 5B 43 48 45 43 4B 5D 17314 	.ascii "[CHECK]"
      006572 0A                   17315 	.db 0x0a
      006573 00                   17316 	.db 0x00
                                  17317 	.area CSEG    (CODE)
                                  17318 	.area CONST   (CODE)
      006574                      17319 ___str_129:
      006574 20 45 6E 74 65 72 20 17320 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      006581 0A                   17321 	.db 0x0a
      006582 00                   17322 	.db 0x00
                                  17323 	.area CSEG    (CODE)
                                  17324 	.area CONST   (CODE)
      006583                      17325 ___str_130:
      006583 0A                   17326 	.db 0x0a
      006584 0A                   17327 	.db 0x0a
      006585 20 57 72 69 74 69 6E 17328 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      006595 0A                   17329 	.db 0x0a
      006596 20 61 6C 6C 20 6D 65 17330 	.ascii " all memory"
             6D 6F 72 79
      0065A1 0A                   17331 	.db 0x0a
      0065A2 20 6C 6F 63 61 74 69 17332 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      0065AF 00                   17333 	.db 0x00
                                  17334 	.area CSEG    (CODE)
                                  17335 	.area CONST   (CODE)
      0065B0                      17336 ___str_131:
      0065B0 0A                   17337 	.db 0x0a
      0065B1 20 56 65 72 69 66 79 17338 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      0065C4 00                   17339 	.db 0x00
                                  17340 	.area CSEG    (CODE)
                                  17341 	.area CONST   (CODE)
      0065C5                      17342 ___str_132:
      0065C5 0A                   17343 	.db 0x0a
      0065C6 20 43 6F 6D 70 6C 65 17344 	.ascii " Complete."
             74 65 2E
      0065D0 00                   17345 	.db 0x00
                                  17346 	.area CSEG    (CODE)
                                  17347 	.area CONST   (CODE)
      0065D1                      17348 ___str_133:
      0065D1 0A                   17349 	.db 0x0a
      0065D2 0A                   17350 	.db 0x0a
      0065D3 20 54 6F 67 67 6C 69 17351 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      0065E4 0A                   17352 	.db 0x0a
      0065E5 20 65 61 63 68 20 6E 17353 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      0065F4 00                   17354 	.db 0x00
                                  17355 	.area CSEG    (CODE)
                                  17356 	.area CONST   (CODE)
      0065F5                      17357 ___str_134:
      0065F5 0A                   17358 	.db 0x0a
      0065F6 20 57 72 69 74 69 6E 17359 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      00660A 00                   17360 	.db 0x00
                                  17361 	.area CSEG    (CODE)
                                  17362 	.area CONST   (CODE)
      00660B                      17363 ___str_135:
      00660B 0A                   17364 	.db 0x0a
      00660C 0A                   17365 	.db 0x0a
      00660D 20 43 68 65 63 6B 20 17366 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      00661D 00                   17367 	.db 0x00
                                  17368 	.area CSEG    (CODE)
                                  17369 	.area CONST   (CODE)
      00661E                      17370 ___str_136:
      00661E 5B 55 41 52 54 5D    17371 	.ascii "[UART]"
      006624 0A                   17372 	.db 0x0a
      006625 00                   17373 	.db 0x00
                                  17374 	.area CSEG    (CODE)
                                  17375 	.area CONST   (CODE)
      006626                      17376 ___str_137:
      006626 20 3C 31 3E 20       17377 	.ascii " <1> "
      00662B 00                   17378 	.db 0x00
                                  17379 	.area CSEG    (CODE)
                                  17380 	.area CONST   (CODE)
      00662C                      17381 ___str_138:
      00662C 31 32 30 30          17382 	.ascii "1200"
      006630 00                   17383 	.db 0x00
                                  17384 	.area CSEG    (CODE)
                                  17385 	.area CONST   (CODE)
      006631                      17386 ___str_139:
      006631 32 34 30 30          17387 	.ascii "2400"
      006635 00                   17388 	.db 0x00
                                  17389 	.area CSEG    (CODE)
                                  17390 	.area CONST   (CODE)
      006636                      17391 ___str_140:
      006636 34 38 30 30          17392 	.ascii "4800"
      00663A 00                   17393 	.db 0x00
                                  17394 	.area CSEG    (CODE)
                                  17395 	.area CONST   (CODE)
      00663B                      17396 ___str_141:
      00663B 39 36 30 30          17397 	.ascii "9600"
      00663F 00                   17398 	.db 0x00
                                  17399 	.area CSEG    (CODE)
                                  17400 	.area CONST   (CODE)
      006640                      17401 ___str_142:
      006640 31 39 32 30 30       17402 	.ascii "19200"
      006645 00                   17403 	.db 0x00
                                  17404 	.area CSEG    (CODE)
                                  17405 	.area CONST   (CODE)
      006646                      17406 ___str_143:
      006646 20 62 61 75 64       17407 	.ascii " baud"
      00664B 0A                   17408 	.db 0x0a
      00664C 00                   17409 	.db 0x00
                                  17410 	.area CSEG    (CODE)
                                  17411 	.area CONST   (CODE)
      00664D                      17412 ___str_144:
      00664D 20 3C 31 3E 20 53 65 17413 	.ascii " <1> Set Data Rate"
             74 20 44 61 74 61 20
             52 61 74 65
      00665F 0A                   17414 	.db 0x0a
      006660 00                   17415 	.db 0x00
                                  17416 	.area CSEG    (CODE)
                                  17417 	.area CONST   (CODE)
      006661                      17418 ___str_145:
      006661 20 3C 32 3E 20       17419 	.ascii " <2> "
      006666 00                   17420 	.db 0x00
                                  17421 	.area CSEG    (CODE)
                                  17422 	.area CONST   (CODE)
      006667                      17423 ___str_146:
      006667 38                   17424 	.ascii "8"
      006668 00                   17425 	.db 0x00
                                  17426 	.area CSEG    (CODE)
                                  17427 	.area CONST   (CODE)
      006669                      17428 ___str_147:
      006669 39                   17429 	.ascii "9"
      00666A 00                   17430 	.db 0x00
                                  17431 	.area CSEG    (CODE)
                                  17432 	.area CONST   (CODE)
      00666B                      17433 ___str_148:
      00666B 2D 62 69 74 20 4D 6F 17434 	.ascii "-bit Mode"
             64 65
      006674 0A                   17435 	.db 0x0a
      006675 00                   17436 	.db 0x00
                                  17437 	.area CSEG    (CODE)
                                  17438 	.area CONST   (CODE)
      006676                      17439 ___str_149:
      006676 20 3C 32 3E 20 4E 75 17440 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      006689 0A                   17441 	.db 0x0a
      00668A 20 20 20 20 20 28 38 17442 	.ascii "     (8 or 9 bits)"
             20 6F 72 20 39 20 62
             69 74 73 29
      00669C 0A                   17443 	.db 0x0a
      00669D 00                   17444 	.db 0x00
                                  17445 	.area CSEG    (CODE)
                                  17446 	.area CONST   (CODE)
      00669E                      17447 ___str_150:
      00669E 20 3C 33 3E 20       17448 	.ascii " <3> "
      0066A3 00                   17449 	.db 0x00
                                  17450 	.area CSEG    (CODE)
                                  17451 	.area CONST   (CODE)
      0066A4                      17452 ___str_151:
      0066A4 4E 6F 20             17453 	.ascii "No "
      0066A7 00                   17454 	.db 0x00
                                  17455 	.area CSEG    (CODE)
                                  17456 	.area CONST   (CODE)
      0066A8                      17457 ___str_152:
      0066A8 45 76 65 6E 20       17458 	.ascii "Even "
      0066AD 00                   17459 	.db 0x00
                                  17460 	.area CSEG    (CODE)
                                  17461 	.area CONST   (CODE)
      0066AE                      17462 ___str_153:
      0066AE 4F 64 64 20          17463 	.ascii "Odd "
      0066B2 00                   17464 	.db 0x00
                                  17465 	.area CSEG    (CODE)
                                  17466 	.area CONST   (CODE)
      0066B3                      17467 ___str_154:
      0066B3 50 61 72 69 74 79    17468 	.ascii "Parity"
      0066B9 0A                   17469 	.db 0x0a
      0066BA 00                   17470 	.db 0x00
                                  17471 	.area CSEG    (CODE)
                                  17472 	.area CONST   (CODE)
      0066BB                      17473 ___str_155:
      0066BB 20 3C 33 3E 20 50 61 17474 	.ascii " <3> Parity (Even)"
             72 69 74 79 20 28 45
             76 65 6E 29
      0066CD 0A                   17475 	.db 0x0a
      0066CE 20 20 20 20 20 28 4F 17476 	.ascii "     (Odd/None)"
             64 64 2F 4E 6F 6E 65
             29
      0066DD 0A                   17477 	.db 0x0a
      0066DE 00                   17478 	.db 0x00
                                  17479 	.area CSEG    (CODE)
                                  17480 	.area CONST   (CODE)
      0066DF                      17481 ___str_156:
      0066DF 20 3C 34 3E 20 44 69 17482 	.ascii " <4> Disable UART"
             73 61 62 6C 65 20 55
             41 52 54
      0066F0 0A                   17483 	.db 0x0a
      0066F1 00                   17484 	.db 0x00
                                  17485 	.area CSEG    (CODE)
                                  17486 	.area CONST   (CODE)
      0066F2                      17487 ___str_157:
      0066F2 20 20 20 20 20 5B 45 17488 	.ascii "     [Enabled]"
             6E 61 62 6C 65 64 5D
      006700 0A                   17489 	.db 0x0a
      006701 00                   17490 	.db 0x00
                                  17491 	.area CSEG    (CODE)
                                  17492 	.area CONST   (CODE)
      006702                      17493 ___str_158:
      006702 20 3C 34 3E 20 45 6E 17494 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      006712 0A                   17495 	.db 0x0a
      006713 00                   17496 	.db 0x00
                                  17497 	.area CSEG    (CODE)
                                  17498 	.area CONST   (CODE)
      006714                      17499 ___str_159:
      006714 20 20 20 20 20 28 44 17500 	.ascii "     (Disabled)"
             69 73 61 62 6C 65 64
             29
      006723 0A                   17501 	.db 0x0a
      006724 00                   17502 	.db 0x00
                                  17503 	.area CSEG    (CODE)
                                  17504 	.area CONST   (CODE)
      006725                      17505 ___str_160:
      006725 20 3C 30 3E 20 45 78 17506 	.ascii " <0> Exit "
             69 74 20
      00672F 0A                   17507 	.db 0x0a
      006730 00                   17508 	.db 0x00
                                  17509 	.area CSEG    (CODE)
                                  17510 	.area CONST   (CODE)
      006731                      17511 ___str_161:
      006731 3C 30 3E 20          17512 	.ascii "<0> "
      006735 00                   17513 	.db 0x00
                                  17514 	.area CSEG    (CODE)
                                  17515 	.area CONST   (CODE)
      006736                      17516 ___str_162:
      006736 45 78 69 74          17517 	.ascii "Exit"
      00673A 0A                   17518 	.db 0x0a
      00673B 00                   17519 	.db 0x00
                                  17520 	.area CSEG    (CODE)
                                  17521 	.area CONST   (CODE)
      00673C                      17522 ___str_163:
      00673C 3C 34 3E 20          17523 	.ascii "<4> "
      006740 00                   17524 	.db 0x00
                                  17525 	.area CSEG    (CODE)
                                  17526 	.area CONST   (CODE)
      006741                      17527 ___str_164:
      006741 44 69 73 61 62 6C 65 17528 	.ascii "Disable UART"
             20 55 41 52 54
      00674D 0A                   17529 	.db 0x0a
      00674E 00                   17530 	.db 0x00
                                  17531 	.area CSEG    (CODE)
                                  17532 	.area CONST   (CODE)
      00674F                      17533 ___str_165:
      00674F 20 20 20 20 20       17534 	.ascii "     "
      006754 00                   17535 	.db 0x00
                                  17536 	.area CSEG    (CODE)
                                  17537 	.area CONST   (CODE)
      006755                      17538 ___str_166:
      006755 5B 45 6E 61 62 6C 65 17539 	.ascii "[Enabled]"
             64 5D
      00675E 00                   17540 	.db 0x00
                                  17541 	.area CSEG    (CODE)
                                  17542 	.area CONST   (CODE)
      00675F                      17543 ___str_167:
      00675F 55 41 52 54 20 44 69 17544 	.ascii "UART Disabled."
             73 61 62 6C 65 64 2E
      00676D 00                   17545 	.db 0x00
                                  17546 	.area CSEG    (CODE)
                                  17547 	.area CONST   (CODE)
      00676E                      17548 ___str_168:
      00676E 45 6E 61 62 6C 65 20 17549 	.ascii "Enable UART"
             55 41 52 54
      006779 0A                   17550 	.db 0x0a
      00677A 00                   17551 	.db 0x00
                                  17552 	.area CSEG    (CODE)
                                  17553 	.area CONST   (CODE)
      00677B                      17554 ___str_169:
      00677B 28 44 69 73 61 62 6C 17555 	.ascii "(Disabled)"
             65 64 29
      006785 00                   17556 	.db 0x00
                                  17557 	.area CSEG    (CODE)
                                  17558 	.area CONST   (CODE)
      006786                      17559 ___str_170:
      006786 3C 31 3E 20          17560 	.ascii "<1> "
      00678A 00                   17561 	.db 0x00
                                  17562 	.area CSEG    (CODE)
                                  17563 	.area CONST   (CODE)
      00678B                      17564 ___str_171:
      00678B 53 65 74 20 44 61 74 17565 	.ascii "Set Data Rate"
             61 20 52 61 74 65
      006798 0A                   17566 	.db 0x0a
      006799 00                   17567 	.db 0x00
                                  17568 	.area CSEG    (CODE)
                                  17569 	.area CONST   (CODE)
      00679A                      17570 ___str_172:
      00679A 0A                   17571 	.db 0x0a
      00679B 0A                   17572 	.db 0x0a
      00679C 0A                   17573 	.db 0x0a
      00679D 0A                   17574 	.db 0x0a
      00679E 20 50 6C 65 61 73 65 17575 	.ascii " Please disable"
             20 64 69 73 61 62 6C
             65
      0067AD 0A                   17576 	.db 0x0a
      0067AE 20 55 41 52 54 20 66 17577 	.ascii " UART first."
             69 72 73 74 2E
      0067BA 0A                   17578 	.db 0x0a
      0067BB 00                   17579 	.db 0x00
                                  17580 	.area CSEG    (CODE)
                                  17581 	.area CONST   (CODE)
      0067BC                      17582 ___str_173:
      0067BC 3C 32 3E 20          17583 	.ascii "<2> "
      0067C0 00                   17584 	.db 0x00
                                  17585 	.area CSEG    (CODE)
                                  17586 	.area CONST   (CODE)
      0067C1                      17587 ___str_174:
      0067C1 4E 75 6D 62 65 72 20 17588 	.ascii "Number of Bits"
             6F 66 20 42 69 74 73
      0067CF 0A                   17589 	.db 0x0a
      0067D0 00                   17590 	.db 0x00
                                  17591 	.area CSEG    (CODE)
                                  17592 	.area CONST   (CODE)
      0067D1                      17593 ___str_175:
      0067D1 28 38 20 6F 72 20 39 17594 	.ascii "(8 or 9 bits)"
             20 62 69 74 73 29
      0067DE 0A                   17595 	.db 0x0a
      0067DF 00                   17596 	.db 0x00
                                  17597 	.area CSEG    (CODE)
                                  17598 	.area CONST   (CODE)
      0067E0                      17599 ___str_176:
      0067E0 3C 33 3E 20          17600 	.ascii "<3> "
      0067E4 00                   17601 	.db 0x00
                                  17602 	.area CSEG    (CODE)
                                  17603 	.area CONST   (CODE)
      0067E5                      17604 ___str_177:
      0067E5 50 61 72 69 74 79 20 17605 	.ascii "Parity "
      0067EC 00                   17606 	.db 0x00
                                  17607 	.area CSEG    (CODE)
                                  17608 	.area CONST   (CODE)
      0067ED                      17609 ___str_178:
      0067ED 28 45 76 65 6E 2F    17610 	.ascii "(Even/"
      0067F3 0A                   17611 	.db 0x0a
      0067F4 00                   17612 	.db 0x00
                                  17613 	.area CSEG    (CODE)
                                  17614 	.area CONST   (CODE)
      0067F5                      17615 ___str_179:
      0067F5 28 4F 64 64 2F 4E 6F 17616 	.ascii "(Odd/None)"
             6E 65 29
      0067FF 0A                   17617 	.db 0x0a
      006800 00                   17618 	.db 0x00
                                  17619 	.area CSEG    (CODE)
                                  17620 	.area CONST   (CODE)
      006801                      17621 ___str_180:
      006801 0A                   17622 	.db 0x0a
      006802 0A                   17623 	.db 0x0a
      006803 0A                   17624 	.db 0x0a
      006804 0A                   17625 	.db 0x0a
      006805 20 49 6E 63 6F 72 72 17626 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      006815 0A                   17627 	.db 0x0a
      006816 20 20 54 72 79 20 61 17628 	.ascii "  Try again."
             67 61 69 6E 2E
      006822 0A                   17629 	.db 0x0a
      006823 00                   17630 	.db 0x00
                                  17631 	.area CSEG    (CODE)
                                  17632 	.area CONST   (CODE)
      006824                      17633 ___str_181:
      006824 0A                   17634 	.db 0x0a
      006825 20 44 69 73 61 62 6C 17635 	.ascii " Disabling UART..."
             69 6E 67 20 55 41 52
             54 2E 2E 2E
      006837 0A                   17636 	.db 0x0a
      006838 00                   17637 	.db 0x00
                                  17638 	.area CSEG    (CODE)
                                  17639 	.area CONST   (CODE)
      006839                      17640 ___str_182:
      006839 0A                   17641 	.db 0x0a
      00683A 20 53 65 74 74 69 6E 17642 	.ascii " Settings Verified:"
             67 73 20 56 65 72 69
             66 69 65 64 3A
      00684D 0A                   17643 	.db 0x0a
      00684E 00                   17644 	.db 0x00
                                  17645 	.area CSEG    (CODE)
                                  17646 	.area CONST   (CODE)
      00684F                      17647 ___str_183:
      00684F 20 45 6E 61 62 6C 69 17648 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      006860 00                   17649 	.db 0x00
                                  17650 	.area CSEG    (CODE)
                                  17651 	.area CONST   (CODE)
      006861                      17652 ___str_184:
      006861 20 42 41 55 44 20 45 17653 	.ascii " BAUD ERROR"
             52 52 4F 52
      00686C 0A                   17654 	.db 0x0a
      00686D 00                   17655 	.db 0x00
                                  17656 	.area CSEG    (CODE)
                                  17657 	.area CONST   (CODE)
      00686E                      17658 ___str_185:
      00686E 20 45 6E 74 65 72 69 17659 	.ascii " Entering Baud..."
             6E 67 20 42 61 75 64
             2E 2E 2E
      00687F 0A                   17660 	.db 0x0a
      006880 00                   17661 	.db 0x00
                                  17662 	.area CSEG    (CODE)
                                  17663 	.area CONST   (CODE)
      006881                      17664 ___str_186:
      006881 20 42 49 54 20 45 52 17665 	.ascii " BIT ERROR"
             52 4F 52
      00688B 0A                   17666 	.db 0x0a
      00688C 00                   17667 	.db 0x00
                                  17668 	.area CSEG    (CODE)
                                  17669 	.area CONST   (CODE)
      00688D                      17670 ___str_187:
      00688D 20 45 6E 74 65 72 69 17671 	.ascii " Entering Bits..."
             6E 67 20 42 69 74 73
             2E 2E 2E
      00689E 0A                   17672 	.db 0x0a
      00689F 00                   17673 	.db 0x00
                                  17674 	.area CSEG    (CODE)
                                  17675 	.area CONST   (CODE)
      0068A0                      17676 ___str_188:
      0068A0 20 50 41 52 49 54 59 17677 	.ascii " PARITY ERROR"
             20 45 52 52 4F 52
      0068AD 0A                   17678 	.db 0x0a
      0068AE 00                   17679 	.db 0x00
                                  17680 	.area CSEG    (CODE)
                                  17681 	.area CONST   (CODE)
      0068AF                      17682 ___str_189:
      0068AF 20 45 6E 74 65 72 69 17683 	.ascii " Entering Parity..."
             6E 67 20 50 61 72 69
             74 79 2E 2E 2E
      0068C2 0A                   17684 	.db 0x0a
      0068C3 00                   17685 	.db 0x00
                                  17686 	.area CSEG    (CODE)
                                  17687 	.area CONST   (CODE)
      0068C4                      17688 ___str_190:
      0068C4 20 3C 31 3E 20 31 32 17689 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      0068D2 0A                   17690 	.db 0x0a
      0068D3 00                   17691 	.db 0x00
                                  17692 	.area CSEG    (CODE)
                                  17693 	.area CONST   (CODE)
      0068D4                      17694 ___str_191:
      0068D4 20 3C 32 3E 20 32 34 17695 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      0068E2 0A                   17696 	.db 0x0a
      0068E3 00                   17697 	.db 0x00
                                  17698 	.area CSEG    (CODE)
                                  17699 	.area CONST   (CODE)
      0068E4                      17700 ___str_192:
      0068E4 20 3C 33 3E 20 34 38 17701 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      0068F2 0A                   17702 	.db 0x0a
      0068F3 00                   17703 	.db 0x00
                                  17704 	.area CSEG    (CODE)
                                  17705 	.area CONST   (CODE)
      0068F4                      17706 ___str_193:
      0068F4 20 3C 34 3E 20 39 36 17707 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      006902 0A                   17708 	.db 0x0a
      006903 00                   17709 	.db 0x00
                                  17710 	.area CSEG    (CODE)
                                  17711 	.area CONST   (CODE)
      006904                      17712 ___str_194:
      006904 20 3C 35 3E 20 31 39 17713 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      006913 0A                   17714 	.db 0x0a
      006914 00                   17715 	.db 0x00
                                  17716 	.area CSEG    (CODE)
                                  17717 	.area CONST   (CODE)
      006915                      17718 ___str_195:
      006915 31 32 30 30 20 42 61 17719 	.ascii "1200 Baud"
             75 64
      00691E 0A                   17720 	.db 0x0a
      00691F 00                   17721 	.db 0x00
                                  17722 	.area CSEG    (CODE)
                                  17723 	.area CONST   (CODE)
      006920                      17724 ___str_196:
      006920 32 34 30 30 20 42 61 17725 	.ascii "2400 Baud"
             75 64
      006929 0A                   17726 	.db 0x0a
      00692A 00                   17727 	.db 0x00
                                  17728 	.area CSEG    (CODE)
                                  17729 	.area CONST   (CODE)
      00692B                      17730 ___str_197:
      00692B 34 38 30 30 20 42 61 17731 	.ascii "4800 Baud"
             75 64
      006934 0A                   17732 	.db 0x0a
      006935 00                   17733 	.db 0x00
                                  17734 	.area CSEG    (CODE)
                                  17735 	.area CONST   (CODE)
      006936                      17736 ___str_198:
      006936 39 36 30 30 20 42 61 17737 	.ascii "9600 Baud"
             75 64
      00693F 0A                   17738 	.db 0x0a
      006940 00                   17739 	.db 0x00
                                  17740 	.area CSEG    (CODE)
                                  17741 	.area CONST   (CODE)
      006941                      17742 ___str_199:
      006941 3C 35 3E 20          17743 	.ascii "<5> "
      006945 00                   17744 	.db 0x00
                                  17745 	.area CSEG    (CODE)
                                  17746 	.area CONST   (CODE)
      006946                      17747 ___str_200:
      006946 31 39 32 30 30 20 42 17748 	.ascii "19200 Baud"
             61 75 64
      006950 0A                   17749 	.db 0x0a
      006951 00                   17750 	.db 0x00
                                  17751 	.area CSEG    (CODE)
                                  17752 	.area CONST   (CODE)
      006952                      17753 ___str_201:
      006952 20 49 4E 50 55 54 20 17754 	.ascii " INPUT ERROR"
             45 52 52 4F 52
      00695E 00                   17755 	.db 0x00
                                  17756 	.area CSEG    (CODE)
                                  17757 	.area CONST   (CODE)
      00695F                      17758 ___str_202:
      00695F 20 20 20 20 20 20 20 17759 	.ascii "            "
             20 20 20 20 20
      00696B 00                   17760 	.db 0x00
                                  17761 	.area CSEG    (CODE)
                                  17762 	.area CONST   (CODE)
      00696C                      17763 ___str_203:
      00696C 20 3C 31 3E 20 38 2D 17764 	.ascii " <1> 8-bit Mode"
             62 69 74 20 4D 6F 64
             65
      00697B 0A                   17765 	.db 0x0a
      00697C 00                   17766 	.db 0x00
                                  17767 	.area CSEG    (CODE)
                                  17768 	.area CONST   (CODE)
      00697D                      17769 ___str_204:
      00697D 20 3C 32 3E 20 39 2D 17770 	.ascii " <2> 9-bit Mode"
             62 69 74 20 4D 6F 64
             65
      00698C 0A                   17771 	.db 0x0a
      00698D 00                   17772 	.db 0x00
                                  17773 	.area CSEG    (CODE)
                                  17774 	.area CONST   (CODE)
      00698E                      17775 ___str_205:
      00698E 38 2D 62 69 74 20 4D 17776 	.ascii "8-bit Mode"
             6F 64 65
      006998 0A                   17777 	.db 0x0a
      006999 00                   17778 	.db 0x00
                                  17779 	.area CSEG    (CODE)
                                  17780 	.area CONST   (CODE)
      00699A                      17781 ___str_206:
      00699A 39 2D 62 69 74 20 4D 17782 	.ascii "9-bit Mode"
             6F 64 65
      0069A4 0A                   17783 	.db 0x0a
      0069A5 00                   17784 	.db 0x00
                                  17785 	.area CSEG    (CODE)
                                  17786 	.area CONST   (CODE)
      0069A6                      17787 ___str_207:
      0069A6 0A                   17788 	.db 0x0a
      0069A7 20 50 6C 65 61 73 65 17789 	.ascii " Please set the"
             20 73 65 74 20 74 68
             65
      0069B6 0A                   17790 	.db 0x0a
      0069B7 20 20 62 69 74 20 6D 17791 	.ascii "  bit mode first."
             6F 64 65 20 66 69 72
             73 74 2E
      0069C8 0A                   17792 	.db 0x0a
      0069C9 00                   17793 	.db 0x00
                                  17794 	.area CSEG    (CODE)
                                  17795 	.area CONST   (CODE)
      0069CA                      17796 ___str_208:
      0069CA 20 3C 31 3E 20 45 76 17797 	.ascii " <1> Even Parity"
             65 6E 20 50 61 72 69
             74 79
      0069DA 0A                   17798 	.db 0x0a
      0069DB 00                   17799 	.db 0x00
                                  17800 	.area CSEG    (CODE)
                                  17801 	.area CONST   (CODE)
      0069DC                      17802 ___str_209:
      0069DC 20 3C 32 3E 20 4F 64 17803 	.ascii " <2> Odd Parity"
             64 20 50 61 72 69 74
             79
      0069EB 0A                   17804 	.db 0x0a
      0069EC 00                   17805 	.db 0x00
                                  17806 	.area CSEG    (CODE)
                                  17807 	.area CONST   (CODE)
      0069ED                      17808 ___str_210:
      0069ED 20 3C 33 3E 20 4E 6F 17809 	.ascii " <3> No Parity"
             20 50 61 72 69 74 79
      0069FB 00                   17810 	.db 0x00
                                  17811 	.area CSEG    (CODE)
                                  17812 	.area CONST   (CODE)
      0069FC                      17813 ___str_211:
      0069FC 45 76 65 6E 20 50 61 17814 	.ascii "Even Parity"
             72 69 74 79
      006A07 0A                   17815 	.db 0x0a
      006A08 00                   17816 	.db 0x00
                                  17817 	.area CSEG    (CODE)
                                  17818 	.area CONST   (CODE)
      006A09                      17819 ___str_212:
      006A09 4F 64 64 20 50 61 72 17820 	.ascii "Odd Parity"
             69 74 79
      006A13 0A                   17821 	.db 0x0a
      006A14 00                   17822 	.db 0x00
                                  17823 	.area CSEG    (CODE)
                                  17824 	.area CONST   (CODE)
      006A15                      17825 ___str_213:
      006A15 4E 6F 20 50 61 72 69 17826 	.ascii "No Parity"
             74 79
      006A1E 0A                   17827 	.db 0x0a
      006A1F 00                   17828 	.db 0x00
                                  17829 	.area CSEG    (CODE)
                                  17830 	.area CONST   (CODE)
      006A20                      17831 ___str_214:
      006A20 20 53 6F 6D 65 74 68 17832 	.ascii " Something is wrong."
             69 6E 67 20 69 73 20
             77 72 6F 6E 67 2E
      006A34 0A                   17833 	.db 0x0a
      006A35 20 20 55 41 52 54 20 17834 	.ascii "  UART failed to set."
             66 61 69 6C 65 64 20
             74 6F 20 73 65 74 2E
      006A4A 0A                   17835 	.db 0x0a
      006A4B 00                   17836 	.db 0x00
                                  17837 	.area CSEG    (CODE)
                                  17838 	.area CONST   (CODE)
      006A4C                      17839 ___str_215:
      006A4C 52 41 4D 20 50 4F 53 17840 	.ascii "RAM POST"
             54
      006A54 0A                   17841 	.db 0x0a
      006A55 00                   17842 	.db 0x00
                                  17843 	.area CSEG    (CODE)
                                  17844 	.area CONST   (CODE)
      006A56                      17845 ___str_216:
      006A56 2E 2E 2E             17846 	.ascii "..."
      006A59 0A                   17847 	.db 0x0a
      006A5A 00                   17848 	.db 0x00
                                  17849 	.area CSEG    (CODE)
                                  17850 	.area CONST   (CODE)
      006A5B                      17851 ___str_217:
      006A5B 3C 44 3E             17852 	.ascii "<D>"
      006A5E 00                   17853 	.db 0x00
                                  17854 	.area CSEG    (CODE)
                                  17855 	.area CONST   (CODE)
      006A5F                      17856 ___str_218:
      006A5F 20 20 20 20 20 20 20 17857 	.ascii "          "
             20 20 20
      006A69 00                   17858 	.db 0x00
                                  17859 	.area CSEG    (CODE)
                                  17860 	.area CONST   (CODE)
      006A6A                      17861 ___str_219:
      006A6A 3C 42 3E             17862 	.ascii "<B>"
      006A6D 00                   17863 	.db 0x00
                                  17864 	.area CSEG    (CODE)
                                  17865 	.area CONST   (CODE)
      006A6E                      17866 ___str_220:
      006A6E 3C 45 3E             17867 	.ascii "<E>"
      006A71 00                   17868 	.db 0x00
                                  17869 	.area CSEG    (CODE)
                                  17870 	.area CONST   (CODE)
      006A72                      17871 ___str_221:
      006A72 3C 46 3E             17872 	.ascii "<F>"
      006A75 00                   17873 	.db 0x00
                                  17874 	.area CSEG    (CODE)
                                  17875 	.area CONST   (CODE)
      006A76                      17876 ___str_222:
      006A76 3C 43 3E             17877 	.ascii "<C>"
      006A79 00                   17878 	.db 0x00
                                  17879 	.area CSEG    (CODE)
                                  17880 	.area CONST   (CODE)
      006A7A                      17881 ___str_223:
      006A7A 3C 41 3E             17882 	.ascii "<A>"
      006A7D 00                   17883 	.db 0x00
                                  17884 	.area CSEG    (CODE)
                                  17885 	.area CONST   (CODE)
      006A7E                      17886 ___str_224:
      006A7E 3C 31 3E             17887 	.ascii "<1>"
      006A81 00                   17888 	.db 0x00
                                  17889 	.area CSEG    (CODE)
                                  17890 	.area CONST   (CODE)
      006A82                      17891 ___str_225:
      006A82 49 4E 56 41 4C 49 44 17892 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      006A8F 0A                   17893 	.db 0x0a
      006A90 00                   17894 	.db 0x00
                                  17895 	.area CSEG    (CODE)
                                  17896 	.area CONST   (CODE)
      006A91                      17897 ___str_226:
      006A91 54 72 79 20 61 67 61 17898 	.ascii "Try again."
             69 6E 2E
      006A9B 00                   17899 	.db 0x00
                                  17900 	.area CSEG    (CODE)
                                  17901 	.area CONST   (CODE)
      006A9C                      17902 ___str_227:
      006A9C 20 20 20 20 20 20 20 17903 	.ascii "               "
             20 20 20 20 20 20 20
             20
      006AAB 0A                   17904 	.db 0x0a
      006AAC 00                   17905 	.db 0x00
                                  17906 	.area CSEG    (CODE)
                                  17907 	.area XINIT   (CODE)
                                  17908 	.area CABS    (ABS,CODE)
