                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_Init
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _FL
                                     36 	.globl _P
                                     37 	.globl _TF2
                                     38 	.globl _EXF2
                                     39 	.globl _RCLK
                                     40 	.globl _TCLK
                                     41 	.globl _EXEN2
                                     42 	.globl _TR2
                                     43 	.globl _C_T2
                                     44 	.globl _CP_RL2
                                     45 	.globl _T2CON_7
                                     46 	.globl _T2CON_6
                                     47 	.globl _T2CON_5
                                     48 	.globl _T2CON_4
                                     49 	.globl _T2CON_3
                                     50 	.globl _T2CON_2
                                     51 	.globl _T2CON_1
                                     52 	.globl _T2CON_0
                                     53 	.globl _PT2
                                     54 	.globl _PS
                                     55 	.globl _PT1
                                     56 	.globl _PX1
                                     57 	.globl _PT0
                                     58 	.globl _PX0
                                     59 	.globl _RD
                                     60 	.globl _WR
                                     61 	.globl _T1
                                     62 	.globl _T0
                                     63 	.globl _INT1
                                     64 	.globl _INT0
                                     65 	.globl _TXD
                                     66 	.globl _RXD
                                     67 	.globl _P3_7
                                     68 	.globl _P3_6
                                     69 	.globl _P3_5
                                     70 	.globl _P3_4
                                     71 	.globl _P3_3
                                     72 	.globl _P3_2
                                     73 	.globl _P3_1
                                     74 	.globl _P3_0
                                     75 	.globl _EA
                                     76 	.globl _ET2
                                     77 	.globl _ES
                                     78 	.globl _ET1
                                     79 	.globl _EX1
                                     80 	.globl _ET0
                                     81 	.globl _EX0
                                     82 	.globl _P2_7
                                     83 	.globl _P2_6
                                     84 	.globl _P2_5
                                     85 	.globl _P2_4
                                     86 	.globl _P2_3
                                     87 	.globl _P2_2
                                     88 	.globl _P2_1
                                     89 	.globl _P2_0
                                     90 	.globl _SM0
                                     91 	.globl _SM1
                                     92 	.globl _SM2
                                     93 	.globl _REN
                                     94 	.globl _TB8
                                     95 	.globl _RB8
                                     96 	.globl _TI
                                     97 	.globl _RI
                                     98 	.globl _T2EX
                                     99 	.globl _T2
                                    100 	.globl _P1_7
                                    101 	.globl _P1_6
                                    102 	.globl _P1_5
                                    103 	.globl _P1_4
                                    104 	.globl _P1_3
                                    105 	.globl _P1_2
                                    106 	.globl _P1_1
                                    107 	.globl _P1_0
                                    108 	.globl _TF1
                                    109 	.globl _TR1
                                    110 	.globl _TF0
                                    111 	.globl _TR0
                                    112 	.globl _IE1
                                    113 	.globl _IT1
                                    114 	.globl _IE0
                                    115 	.globl _IT0
                                    116 	.globl _P0_7
                                    117 	.globl _P0_6
                                    118 	.globl _P0_5
                                    119 	.globl _P0_4
                                    120 	.globl _P0_3
                                    121 	.globl _P0_2
                                    122 	.globl _P0_1
                                    123 	.globl _P0_0
                                    124 	.globl _B
                                    125 	.globl _A
                                    126 	.globl _ACC
                                    127 	.globl _PSW
                                    128 	.globl _TH2
                                    129 	.globl _TL2
                                    130 	.globl _RCAP2H
                                    131 	.globl _RCAP2L
                                    132 	.globl _T2MOD
                                    133 	.globl _T2CON
                                    134 	.globl _IP
                                    135 	.globl _P3
                                    136 	.globl _IE
                                    137 	.globl _P2
                                    138 	.globl _SBUF
                                    139 	.globl _SCON
                                    140 	.globl _P1
                                    141 	.globl _TH1
                                    142 	.globl _TH0
                                    143 	.globl _TL1
                                    144 	.globl _TL0
                                    145 	.globl _TMOD
                                    146 	.globl _TCON
                                    147 	.globl _PCON
                                    148 	.globl _DPH
                                    149 	.globl _DPL
                                    150 	.globl _SP
                                    151 	.globl _P0
                                    152 	.globl _bitSet
                                    153 	.globl _paritySet
                                    154 	.globl _baudSet
                                    155 	.globl _UART_en
                                    156 	.globl _selection
                                    157 	.globl _drawChar_PARM_6
                                    158 	.globl _drawChar_PARM_5
                                    159 	.globl _drawChar_PARM_4
                                    160 	.globl _drawChar_PARM_3
                                    161 	.globl _drawChar_PARM_2
                                    162 	.globl _fillRect_PARM_5
                                    163 	.globl _fillRect_PARM_4
                                    164 	.globl _fillRect_PARM_3
                                    165 	.globl _fillRect_PARM_2
                                    166 	.globl _testCircles_PARM_2
                                    167 	.globl _drawCircle_PARM_4
                                    168 	.globl _drawCircle_PARM_3
                                    169 	.globl _drawCircle_PARM_2
                                    170 	.globl _drawPixel_PARM_3
                                    171 	.globl _drawPixel_PARM_2
                                    172 	.globl _rtcWrite_PARM_2
                                    173 	.globl __height
                                    174 	.globl __width
                                    175 	.globl _textbgcolor
                                    176 	.globl _textcolor
                                    177 	.globl _rotation
                                    178 	.globl _textsize
                                    179 	.globl _cursor_y
                                    180 	.globl _cursor_x
                                    181 	.globl _received_flag
                                    182 	.globl _received_byte
                                    183 	.globl _seg7_address
                                    184 	.globl _lcd_address
                                    185 	.globl _rowloc
                                    186 	.globl _colloc
                                    187 	.globl _iowrite8
                                    188 	.globl _ioread8
                                    189 	.globl _ramWrite8
                                    190 	.globl _ramRead8
                                    191 	.globl _writeAllRAM
                                    192 	.globl _checkAllRAM
                                    193 	.globl _delay
                                    194 	.globl _writeRegister8
                                    195 	.globl _writeRegister16
                                    196 	.globl _seg7Test
                                    197 	.globl _rtcInit
                                    198 	.globl _rtcBusy
                                    199 	.globl _rtcCmd
                                    200 	.globl _rtcWrite
                                    201 	.globl _rtcRead
                                    202 	.globl _rtcPrint
                                    203 	.globl _setCursor
                                    204 	.globl _setTextColor
                                    205 	.globl _setTextSize
                                    206 	.globl _setAddress
                                    207 	.globl _TFT_LCD_INIT
                                    208 	.globl _drawPixel
                                    209 	.globl _drawCircle
                                    210 	.globl _testCircles
                                    211 	.globl _fillRect
                                    212 	.globl _fillTop
                                    213 	.globl _fillScreen
                                    214 	.globl _clearLCD
                                    215 	.globl _LCD_string_write
                                    216 	.globl _writeNewLine
                                    217 	.globl _freeType
                                    218 	.globl _keyDetect
                                    219 	.globl _reverse
                                    220 	.globl _reverse16
                                    221 	.globl _hexToASCII
                                    222 	.globl _ASCIItoHex
                                    223 	.globl _asciiToDec
                                    224 	.globl _asciiToHex
                                    225 	.globl _print4Hex
                                    226 	.globl _print8Hex
                                    227 	.globl _print16Hex
                                    228 	.globl _print16Dec
                                    229 	.globl _print8ASCII
                                    230 	.globl _print16ASCII
                                    231 	.globl _setColorDefault
                                    232 	.globl _setColorSelect
                                    233 	.globl _setColorHighlight1
                                    234 	.globl _setColorHighlight2
                                    235 	.globl _setColorGray
                                    236 	.globl _setColorMenu
                                    237 	.globl _setColorRed
                                    238 	.globl _setColorWhite
                                    239 	.globl _setColorGreen
                                    240 	.globl _setColorYellow
                                    241 	.globl _inputAddress
                                    242 	.globl _inputBlockType
                                    243 	.globl _inputBlockSize
                                    244 	.globl _printMenu
                                    245 	.globl _dump
                                    246 	.globl _move
                                    247 	.globl _edit
                                    248 	.globl _find
                                    249 	.globl _count
                                    250 	.globl _check
                                    251 	.globl _uart
                                    252 	.globl _main
                                    253 ;--------------------------------------------------------
                                    254 ; special function registers
                                    255 ;--------------------------------------------------------
                                    256 	.area RSEG    (ABS,DATA)
      000000                        257 	.org 0x0000
                           000080   258 _P0	=	0x0080
                           000081   259 _SP	=	0x0081
                           000082   260 _DPL	=	0x0082
                           000083   261 _DPH	=	0x0083
                           000087   262 _PCON	=	0x0087
                           000088   263 _TCON	=	0x0088
                           000089   264 _TMOD	=	0x0089
                           00008A   265 _TL0	=	0x008a
                           00008B   266 _TL1	=	0x008b
                           00008C   267 _TH0	=	0x008c
                           00008D   268 _TH1	=	0x008d
                           000090   269 _P1	=	0x0090
                           000098   270 _SCON	=	0x0098
                           000099   271 _SBUF	=	0x0099
                           0000A0   272 _P2	=	0x00a0
                           0000A8   273 _IE	=	0x00a8
                           0000B0   274 _P3	=	0x00b0
                           0000B8   275 _IP	=	0x00b8
                           0000C8   276 _T2CON	=	0x00c8
                           0000C9   277 _T2MOD	=	0x00c9
                           0000CA   278 _RCAP2L	=	0x00ca
                           0000CB   279 _RCAP2H	=	0x00cb
                           0000CC   280 _TL2	=	0x00cc
                           0000CD   281 _TH2	=	0x00cd
                           0000D0   282 _PSW	=	0x00d0
                           0000E0   283 _ACC	=	0x00e0
                           0000E0   284 _A	=	0x00e0
                           0000F0   285 _B	=	0x00f0
                                    286 ;--------------------------------------------------------
                                    287 ; special function bits
                                    288 ;--------------------------------------------------------
                                    289 	.area RSEG    (ABS,DATA)
      000000                        290 	.org 0x0000
                           000080   291 _P0_0	=	0x0080
                           000081   292 _P0_1	=	0x0081
                           000082   293 _P0_2	=	0x0082
                           000083   294 _P0_3	=	0x0083
                           000084   295 _P0_4	=	0x0084
                           000085   296 _P0_5	=	0x0085
                           000086   297 _P0_6	=	0x0086
                           000087   298 _P0_7	=	0x0087
                           000088   299 _IT0	=	0x0088
                           000089   300 _IE0	=	0x0089
                           00008A   301 _IT1	=	0x008a
                           00008B   302 _IE1	=	0x008b
                           00008C   303 _TR0	=	0x008c
                           00008D   304 _TF0	=	0x008d
                           00008E   305 _TR1	=	0x008e
                           00008F   306 _TF1	=	0x008f
                           000090   307 _P1_0	=	0x0090
                           000091   308 _P1_1	=	0x0091
                           000092   309 _P1_2	=	0x0092
                           000093   310 _P1_3	=	0x0093
                           000094   311 _P1_4	=	0x0094
                           000095   312 _P1_5	=	0x0095
                           000096   313 _P1_6	=	0x0096
                           000097   314 _P1_7	=	0x0097
                           000090   315 _T2	=	0x0090
                           000091   316 _T2EX	=	0x0091
                           000098   317 _RI	=	0x0098
                           000099   318 _TI	=	0x0099
                           00009A   319 _RB8	=	0x009a
                           00009B   320 _TB8	=	0x009b
                           00009C   321 _REN	=	0x009c
                           00009D   322 _SM2	=	0x009d
                           00009E   323 _SM1	=	0x009e
                           00009F   324 _SM0	=	0x009f
                           0000A0   325 _P2_0	=	0x00a0
                           0000A1   326 _P2_1	=	0x00a1
                           0000A2   327 _P2_2	=	0x00a2
                           0000A3   328 _P2_3	=	0x00a3
                           0000A4   329 _P2_4	=	0x00a4
                           0000A5   330 _P2_5	=	0x00a5
                           0000A6   331 _P2_6	=	0x00a6
                           0000A7   332 _P2_7	=	0x00a7
                           0000A8   333 _EX0	=	0x00a8
                           0000A9   334 _ET0	=	0x00a9
                           0000AA   335 _EX1	=	0x00aa
                           0000AB   336 _ET1	=	0x00ab
                           0000AC   337 _ES	=	0x00ac
                           0000AD   338 _ET2	=	0x00ad
                           0000AF   339 _EA	=	0x00af
                           0000B0   340 _P3_0	=	0x00b0
                           0000B1   341 _P3_1	=	0x00b1
                           0000B2   342 _P3_2	=	0x00b2
                           0000B3   343 _P3_3	=	0x00b3
                           0000B4   344 _P3_4	=	0x00b4
                           0000B5   345 _P3_5	=	0x00b5
                           0000B6   346 _P3_6	=	0x00b6
                           0000B7   347 _P3_7	=	0x00b7
                           0000B0   348 _RXD	=	0x00b0
                           0000B1   349 _TXD	=	0x00b1
                           0000B2   350 _INT0	=	0x00b2
                           0000B3   351 _INT1	=	0x00b3
                           0000B4   352 _T0	=	0x00b4
                           0000B5   353 _T1	=	0x00b5
                           0000B6   354 _WR	=	0x00b6
                           0000B7   355 _RD	=	0x00b7
                           0000B8   356 _PX0	=	0x00b8
                           0000B9   357 _PT0	=	0x00b9
                           0000BA   358 _PX1	=	0x00ba
                           0000BB   359 _PT1	=	0x00bb
                           0000BC   360 _PS	=	0x00bc
                           0000BD   361 _PT2	=	0x00bd
                           0000C8   362 _T2CON_0	=	0x00c8
                           0000C9   363 _T2CON_1	=	0x00c9
                           0000CA   364 _T2CON_2	=	0x00ca
                           0000CB   365 _T2CON_3	=	0x00cb
                           0000CC   366 _T2CON_4	=	0x00cc
                           0000CD   367 _T2CON_5	=	0x00cd
                           0000CE   368 _T2CON_6	=	0x00ce
                           0000CF   369 _T2CON_7	=	0x00cf
                           0000C8   370 _CP_RL2	=	0x00c8
                           0000C9   371 _C_T2	=	0x00c9
                           0000CA   372 _TR2	=	0x00ca
                           0000CB   373 _EXEN2	=	0x00cb
                           0000CC   374 _TCLK	=	0x00cc
                           0000CD   375 _RCLK	=	0x00cd
                           0000CE   376 _EXF2	=	0x00ce
                           0000CF   377 _TF2	=	0x00cf
                           0000D0   378 _P	=	0x00d0
                           0000D1   379 _FL	=	0x00d1
                           0000D2   380 _OV	=	0x00d2
                           0000D3   381 _RS0	=	0x00d3
                           0000D4   382 _RS1	=	0x00d4
                           0000D5   383 _F0	=	0x00d5
                           0000D6   384 _AC	=	0x00d6
                           0000D7   385 _CY	=	0x00d7
                                    386 ;--------------------------------------------------------
                                    387 ; overlayable register banks
                                    388 ;--------------------------------------------------------
                                    389 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        390 	.ds 8
                                    391 ;--------------------------------------------------------
                                    392 ; internal ram data
                                    393 ;--------------------------------------------------------
                                    394 	.area DSEG    (DATA)
      000008                        395 _colloc::
      000008                        396 	.ds 1
      000009                        397 _rowloc::
      000009                        398 	.ds 1
      00000A                        399 _lcd_address::
      00000A                        400 	.ds 2
      00000C                        401 _seg7_address::
      00000C                        402 	.ds 2
      00000E                        403 _received_byte::
      00000E                        404 	.ds 1
      00000F                        405 _received_flag::
      00000F                        406 	.ds 1
      000010                        407 _cursor_x::
      000010                        408 	.ds 2
      000012                        409 _cursor_y::
      000012                        410 	.ds 2
      000014                        411 _textsize::
      000014                        412 	.ds 1
      000015                        413 _rotation::
      000015                        414 	.ds 1
      000016                        415 _textcolor::
      000016                        416 	.ds 2
      000018                        417 _textbgcolor::
      000018                        418 	.ds 2
      00001A                        419 __width::
      00001A                        420 	.ds 2
      00001C                        421 __height::
      00001C                        422 	.ds 2
      00001E                        423 _rtcWrite_PARM_2:
      00001E                        424 	.ds 1
      00001F                        425 _rtcPrint_printval_65536_222:
      00001F                        426 	.ds 9
      000028                        427 _drawPixel_PARM_2:
      000028                        428 	.ds 2
      00002A                        429 _drawPixel_PARM_3:
      00002A                        430 	.ds 2
      00002C                        431 _drawCircle_PARM_2:
      00002C                        432 	.ds 2
      00002E                        433 _drawCircle_PARM_3:
      00002E                        434 	.ds 2
      000030                        435 _drawCircle_PARM_4:
      000030                        436 	.ds 2
      000032                        437 _drawCircle_x0_65536_389:
      000032                        438 	.ds 2
      000034                        439 _drawCircle_f_65536_390:
      000034                        440 	.ds 2
      000036                        441 _drawCircle_ddF_x_65536_390:
      000036                        442 	.ds 2
      000038                        443 _drawCircle_x_65536_390:
      000038                        444 	.ds 2
      00003A                        445 _testCircles_PARM_2:
      00003A                        446 	.ds 2
      00003C                        447 _testCircles_w_65536_394:
      00003C                        448 	.ds 2
      00003E                        449 _testCircles_h_65536_394:
      00003E                        450 	.ds 2
      000040                        451 _fillRect_PARM_2:
      000040                        452 	.ds 2
      000042                        453 _fillRect_PARM_3:
      000042                        454 	.ds 2
      000044                        455 _fillRect_PARM_4:
      000044                        456 	.ds 2
      000046                        457 _fillRect_PARM_5:
      000046                        458 	.ds 2
      000048                        459 _drawChar_PARM_2:
      000048                        460 	.ds 2
      00004A                        461 _drawChar_PARM_3:
      00004A                        462 	.ds 1
      00004B                        463 _drawChar_PARM_4:
      00004B                        464 	.ds 2
      00004D                        465 _drawChar_PARM_5:
      00004D                        466 	.ds 2
      00004F                        467 _drawChar_PARM_6:
      00004F                        468 	.ds 1
      000050                        469 _drawChar_x_65536_454:
      000050                        470 	.ds 2
      000052                        471 _drawChar_i_131072_457:
      000052                        472 	.ds 1
      000053                        473 _drawChar_line_196608_458:
      000053                        474 	.ds 1
      000054                        475 _drawChar_sloc0_1_0:
      000054                        476 	.ds 2
      000056                        477 _asciiToHex_store_65536_515:
      000056                        478 	.ds 2
      000058                        479 _dump_d_65536_547:
      000058                        480 	.ds 2
      00005A                        481 _dump_sloc0_1_0:
      00005A                        482 	.ds 1
      00005B                        483 _move_d_65536_603:
      00005B                        484 	.ds 2
      00005D                        485 _move_i_131072_612:
      00005D                        486 	.ds 2
      00005F                        487 _edit_d_65536_622:
      00005F                        488 	.ds 2
      000061                        489 _find_i_262144_659:
      000061                        490 	.ds 2
      000063                        491 _find_sloc0_1_0:
      000063                        492 	.ds 1
      000064                        493 _find_sloc1_1_0:
      000064                        494 	.ds 2
      000066                        495 _count_i_262144_715:
      000066                        496 	.ds 2
      000068                        497 _count_sloc0_1_0:
      000068                        498 	.ds 1
      000069                        499 _count_sloc1_1_0:
      000069                        500 	.ds 2
                                    501 ;--------------------------------------------------------
                                    502 ; overlayable items in internal ram 
                                    503 ;--------------------------------------------------------
                                    504 	.area	OSEG    (OVR,DATA)
      00006B                        505 _iowrite8_PARM_2:
      00006B                        506 	.ds 1
                                    507 	.area	OSEG    (OVR,DATA)
                                    508 	.area	OSEG    (OVR,DATA)
      00006B                        509 _ramWrite8_PARM_2:
      00006B                        510 	.ds 1
                                    511 	.area	OSEG    (OVR,DATA)
                                    512 	.area	OSEG    (OVR,DATA)
                                    513 	.area	OSEG    (OVR,DATA)
                                    514 	.area	OSEG    (OVR,DATA)
                                    515 	.area	OSEG    (OVR,DATA)
      00006B                        516 _writeRegister8_PARM_2:
      00006B                        517 	.ds 1
                                    518 	.area	OSEG    (OVR,DATA)
      00006B                        519 _writeRegister16_PARM_2:
      00006B                        520 	.ds 2
                                    521 	.area	OSEG    (OVR,DATA)
                                    522 	.area	OSEG    (OVR,DATA)
      00006B                        523 _rtcCmd_PARM_2:
      00006B                        524 	.ds 1
                                    525 	.area	OSEG    (OVR,DATA)
      00006B                        526 _setCursor_PARM_2:
      00006B                        527 	.ds 2
                                    528 	.area	OSEG    (OVR,DATA)
      00006B                        529 _setTextColor_PARM_2:
      00006B                        530 	.ds 2
                                    531 	.area	OSEG    (OVR,DATA)
                                    532 	.area	OSEG    (OVR,DATA)
      00006B                        533 _setAddress_PARM_2:
      00006B                        534 	.ds 2
      00006D                        535 _setAddress_PARM_3:
      00006D                        536 	.ds 2
      00006F                        537 _setAddress_PARM_4:
      00006F                        538 	.ds 2
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
                                    541 ;--------------------------------------------------------
                                    542 ; Stack segment in internal ram 
                                    543 ;--------------------------------------------------------
                                    544 	.area	SSEG
      00008C                        545 __start__stack:
      00008C                        546 	.ds	1
                                    547 
                                    548 ;--------------------------------------------------------
                                    549 ; indirectly addressable internal ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area ISEG    (DATA)
      000071                        552 _selection::
      000071                        553 	.ds 1
      000072                        554 _UART_en::
      000072                        555 	.ds 1
      000073                        556 _baudSet::
      000073                        557 	.ds 1
      000074                        558 _paritySet::
      000074                        559 	.ds 1
      000075                        560 _bitSet::
      000075                        561 	.ds 1
      000076                        562 _dump_address_65536_547:
      000076                        563 	.ds 2
      000078                        564 _dump_exit_65536_547:
      000078                        565 	.ds 1
      000079                        566 _move_sourceAddress_65536_603:
      000079                        567 	.ds 2
      00007B                        568 _move_invalidSize_65536_603:
      00007B                        569 	.ds 1
      00007C                        570 _edit_exit_65536_622:
      00007C                        571 	.ds 1
      00007D                        572 _edit_invalid_65536_622:
      00007D                        573 	.ds 1
      00007E                        574 _find_address_65536_646:
      00007E                        575 	.ds 2
      000080                        576 _find_blockSize_65536_646:
      000080                        577 	.ds 1
      000081                        578 _find_value_65536_646:
      000081                        579 	.ds 1
      000082                        580 _find_scan_65536_646:
      000082                        581 	.ds 1
      000083                        582 _find_noneFound_65536_646:
      000083                        583 	.ds 1
      000084                        584 _find_exit_65536_646:
      000084                        585 	.ds 1
      000085                        586 _count_address_65536_702:
      000085                        587 	.ds 2
      000087                        588 _count_blockSize_65536_702:
      000087                        589 	.ds 1
      000088                        590 _count_value_65536_702:
      000088                        591 	.ds 1
      000089                        592 _count_scan_65536_702:
      000089                        593 	.ds 1
      00008A                        594 _count_noneFound_65536_702:
      00008A                        595 	.ds 1
      00008B                        596 _count_exit_65536_702:
      00008B                        597 	.ds 1
                                    598 ;--------------------------------------------------------
                                    599 ; absolute internal ram data
                                    600 ;--------------------------------------------------------
                                    601 	.area IABS    (ABS,DATA)
                                    602 	.area IABS    (ABS,DATA)
                                    603 ;--------------------------------------------------------
                                    604 ; bit data
                                    605 ;--------------------------------------------------------
                                    606 	.area BSEG    (BIT)
                                    607 ;--------------------------------------------------------
                                    608 ; paged external ram data
                                    609 ;--------------------------------------------------------
                                    610 	.area PSEG    (PAG,XDATA)
                                    611 ;--------------------------------------------------------
                                    612 ; external ram data
                                    613 ;--------------------------------------------------------
                                    614 	.area XSEG    (XDATA)
                                    615 ;--------------------------------------------------------
                                    616 ; absolute external ram data
                                    617 ;--------------------------------------------------------
                                    618 	.area XABS    (ABS,XDATA)
                                    619 ;--------------------------------------------------------
                                    620 ; external initialized ram data
                                    621 ;--------------------------------------------------------
                                    622 	.area XISEG   (XDATA)
                                    623 	.area HOME    (CODE)
                                    624 	.area GSINIT0 (CODE)
                                    625 	.area GSINIT1 (CODE)
                                    626 	.area GSINIT2 (CODE)
                                    627 	.area GSINIT3 (CODE)
                                    628 	.area GSINIT4 (CODE)
                                    629 	.area GSINIT5 (CODE)
                                    630 	.area GSINIT  (CODE)
                                    631 	.area GSFINAL (CODE)
                                    632 	.area CSEG    (CODE)
                                    633 ;--------------------------------------------------------
                                    634 ; interrupt vector 
                                    635 ;--------------------------------------------------------
                                    636 	.area HOME    (CODE)
      000000                        637 __interrupt_vect:
      000000 02 00 29         [24]  638 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  639 	reti
      000004                        640 	.ds	7
      00000B 32               [24]  641 	reti
      00000C                        642 	.ds	7
      000013 32               [24]  643 	reti
      000014                        644 	.ds	7
      00001B 32               [24]  645 	reti
      00001C                        646 	.ds	7
      000023 02 01 D0         [24]  647 	ljmp	_ISR_receive
                                    648 ;--------------------------------------------------------
                                    649 ; global & static initialisations
                                    650 ;--------------------------------------------------------
                                    651 	.area HOME    (CODE)
                                    652 	.area GSINIT  (CODE)
                                    653 	.area GSFINAL (CODE)
                                    654 	.area GSINIT  (CODE)
                                    655 	.globl __sdcc_gsinit_startup
                                    656 	.globl __sdcc_program_startup
                                    657 	.globl __start__stack
                                    658 	.globl __mcs51_genXINIT
                                    659 	.globl __mcs51_genXRAMCLEAR
                                    660 	.globl __mcs51_genRAMCLEAR
                                    661 ;	.\ecen4350_lcd_v4.c:45: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000082 75 0A 00         [24]  662 	mov	_lcd_address,#0x00
      000085 75 0B 40         [24]  663 	mov	(_lcd_address + 1),#0x40
                                    664 ;	.\ecen4350_lcd_v4.c:46: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000088 75 0C 00         [24]  665 	mov	_seg7_address,#0x00
      00008B 75 0D 80         [24]  666 	mov	(_seg7_address + 1),#0x80
                                    667 ;	.\ecen4350_lcd_v4.c:48: volatile unsigned char received_byte = 0;
      00008E 75 0E 00         [24]  668 	mov	_received_byte,#0x00
                                    669 ;	.\ecen4350_lcd_v4.c:49: volatile unsigned char received_flag = 0;
      000091 75 0F 00         [24]  670 	mov	_received_flag,#0x00
                                    671 ;	.\ecen4350_lcd_v4.c:52: __idata unsigned char UART_en = 0;
      000094 78 72            [12]  672 	mov	r0,#_UART_en
      000096 76 00            [12]  673 	mov	@r0,#0x00
                                    674 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char baudSet = 0;
      000098 78 73            [12]  675 	mov	r0,#_baudSet
      00009A 76 00            [12]  676 	mov	@r0,#0x00
                                    677 ;	.\ecen4350_lcd_v4.c:54: __idata unsigned char paritySet = 0;
      00009C 78 74            [12]  678 	mov	r0,#_paritySet
      00009E 76 00            [12]  679 	mov	@r0,#0x00
                                    680 ;	.\ecen4350_lcd_v4.c:55: __idata unsigned char bitSet = 0;
      0000A0 78 75            [12]  681 	mov	r0,#_bitSet
      0000A2 76 00            [12]  682 	mov	@r0,#0x00
                                    683 	.area GSFINAL (CODE)
      0000A4 02 00 26         [24]  684 	ljmp	__sdcc_program_startup
                                    685 ;--------------------------------------------------------
                                    686 ; Home
                                    687 ;--------------------------------------------------------
                                    688 	.area HOME    (CODE)
                                    689 	.area HOME    (CODE)
      000026                        690 __sdcc_program_startup:
      000026 02 49 C3         [24]  691 	ljmp	_main
                                    692 ;	return from main will return to caller
                                    693 ;--------------------------------------------------------
                                    694 ; code
                                    695 ;--------------------------------------------------------
                                    696 	.area CSEG    (CODE)
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'iowrite8'
                                    699 ;------------------------------------------------------------
                                    700 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    701 ;map_address               Allocated to registers 
                                    702 ;------------------------------------------------------------
                                    703 ;	.\ecen4350_lcd_v4.c:92: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    704 ;	-----------------------------------------
                                    705 ;	 function iowrite8
                                    706 ;	-----------------------------------------
      0000A7                        707 _iowrite8:
                           000007   708 	ar7 = 0x07
                           000006   709 	ar6 = 0x06
                           000005   710 	ar5 = 0x05
                           000004   711 	ar4 = 0x04
                           000003   712 	ar3 = 0x03
                           000002   713 	ar2 = 0x02
                           000001   714 	ar1 = 0x01
                           000000   715 	ar0 = 0x00
                                    716 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    717 ;	assignBit
      0000A7 D2 B5            [12]  718 	setb	_P3_5
                                    719 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0000A9 E5 6B            [12]  720 	mov	a,_iowrite8_PARM_2
      0000AB F0               [24]  721 	movx	@dptr,a
                                    722 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    723 ;	assignBit
      0000AC C2 B5            [12]  724 	clr	_P3_5
                                    725 ;	.\ecen4350_lcd_v4.c:96: }
      0000AE 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'ioread8'
                                    729 ;------------------------------------------------------------
                                    730 ;map_address               Allocated to registers 
                                    731 ;d                         Allocated to registers r7 
                                    732 ;------------------------------------------------------------
                                    733 ;	.\ecen4350_lcd_v4.c:98: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    734 ;	-----------------------------------------
                                    735 ;	 function ioread8
                                    736 ;	-----------------------------------------
      0000AF                        737 _ioread8:
                                    738 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                    739 ;	assignBit
      0000AF D2 B5            [12]  740 	setb	_P3_5
                                    741 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0000B1 E0               [24]  742 	movx	a,@dptr
      0000B2 FF               [12]  743 	mov	r7,a
                                    744 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                    745 ;	assignBit
      0000B3 C2 B5            [12]  746 	clr	_P3_5
                                    747 ;	.\ecen4350_lcd_v4.c:104: return d;
      0000B5 8F 82            [24]  748 	mov	dpl,r7
                                    749 ;	.\ecen4350_lcd_v4.c:105: }
      0000B7 22               [24]  750 	ret
                                    751 ;------------------------------------------------------------
                                    752 ;Allocation info for local variables in function 'ramWrite8'
                                    753 ;------------------------------------------------------------
                                    754 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    755 ;map_address               Allocated to registers 
                                    756 ;------------------------------------------------------------
                                    757 ;	.\ecen4350_lcd_v4.c:107: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    758 ;	-----------------------------------------
                                    759 ;	 function ramWrite8
                                    760 ;	-----------------------------------------
      0000B8                        761 _ramWrite8:
                                    762 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                    763 ;	assignBit
      0000B8 C2 B5            [12]  764 	clr	_P3_5
                                    765 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      0000BA E5 6B            [12]  766 	mov	a,_ramWrite8_PARM_2
      0000BC F0               [24]  767 	movx	@dptr,a
                                    768 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                    769 ;	assignBit
      0000BD D2 B5            [12]  770 	setb	_P3_5
                                    771 ;	.\ecen4350_lcd_v4.c:112: }
      0000BF 22               [24]  772 	ret
                                    773 ;------------------------------------------------------------
                                    774 ;Allocation info for local variables in function 'ramRead8'
                                    775 ;------------------------------------------------------------
                                    776 ;map_address               Allocated to registers 
                                    777 ;d                         Allocated to registers r7 
                                    778 ;------------------------------------------------------------
                                    779 ;	.\ecen4350_lcd_v4.c:114: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    780 ;	-----------------------------------------
                                    781 ;	 function ramRead8
                                    782 ;	-----------------------------------------
      0000C0                        783 _ramRead8:
                                    784 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                    785 ;	assignBit
      0000C0 C2 B5            [12]  786 	clr	_P3_5
                                    787 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0000C2 E0               [24]  788 	movx	a,@dptr
      0000C3 FF               [12]  789 	mov	r7,a
                                    790 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                    791 ;	assignBit
      0000C4 D2 B5            [12]  792 	setb	_P3_5
                                    793 ;	.\ecen4350_lcd_v4.c:120: return d;
      0000C6 8F 82            [24]  794 	mov	dpl,r7
                                    795 ;	.\ecen4350_lcd_v4.c:121: }
      0000C8 22               [24]  796 	ret
                                    797 ;------------------------------------------------------------
                                    798 ;Allocation info for local variables in function 'writeAllRAM'
                                    799 ;------------------------------------------------------------
                                    800 ;d                         Allocated to registers r7 
                                    801 ;i                         Allocated to registers r3 r4 r5 r6 
                                    802 ;ram_address               Allocated to registers 
                                    803 ;------------------------------------------------------------
                                    804 ;	.\ecen4350_lcd_v4.c:123: void writeAllRAM(unsigned char d)
                                    805 ;	-----------------------------------------
                                    806 ;	 function writeAllRAM
                                    807 ;	-----------------------------------------
      0000C9                        808 _writeAllRAM:
      0000C9 AF 82            [24]  809 	mov	r7,dpl
                                    810 ;	.\ecen4350_lcd_v4.c:128: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000CB 7B 00            [12]  811 	mov	r3,#0x00
      0000CD 7C 00            [12]  812 	mov	r4,#0x00
      0000CF 7D 00            [12]  813 	mov	r5,#0x00
      0000D1 7E 00            [12]  814 	mov	r6,#0x00
      0000D3                        815 00102$:
                                    816 ;	.\ecen4350_lcd_v4.c:130: IOM = 0;
                                    817 ;	assignBit
      0000D3 C2 B5            [12]  818 	clr	_P3_5
                                    819 ;	.\ecen4350_lcd_v4.c:131: ram_address = (unsigned char __xdata *)(i);
      0000D5 8B 82            [24]  820 	mov	dpl,r3
      0000D7 8C 83            [24]  821 	mov	dph,r4
                                    822 ;	.\ecen4350_lcd_v4.c:132: *ram_address = d;
      0000D9 EF               [12]  823 	mov	a,r7
      0000DA F0               [24]  824 	movx	@dptr,a
                                    825 ;	.\ecen4350_lcd_v4.c:133: IOM = 1;
                                    826 ;	assignBit
      0000DB D2 B5            [12]  827 	setb	_P3_5
                                    828 ;	.\ecen4350_lcd_v4.c:128: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000DD 0B               [12]  829 	inc	r3
      0000DE BB 00 09         [24]  830 	cjne	r3,#0x00,00111$
      0000E1 0C               [12]  831 	inc	r4
      0000E2 BC 00 05         [24]  832 	cjne	r4,#0x00,00111$
      0000E5 0D               [12]  833 	inc	r5
      0000E6 BD 00 01         [24]  834 	cjne	r5,#0x00,00111$
      0000E9 0E               [12]  835 	inc	r6
      0000EA                        836 00111$:
      0000EA C3               [12]  837 	clr	c
      0000EB 74 FF            [12]  838 	mov	a,#0xff
      0000ED 9B               [12]  839 	subb	a,r3
      0000EE 74 FF            [12]  840 	mov	a,#0xff
      0000F0 9C               [12]  841 	subb	a,r4
      0000F1 E4               [12]  842 	clr	a
      0000F2 9D               [12]  843 	subb	a,r5
      0000F3 E4               [12]  844 	clr	a
      0000F4 9E               [12]  845 	subb	a,r6
      0000F5 50 DC            [24]  846 	jnc	00102$
                                    847 ;	.\ecen4350_lcd_v4.c:135: }
      0000F7 22               [24]  848 	ret
                                    849 ;------------------------------------------------------------
                                    850 ;Allocation info for local variables in function 'checkAllRAM'
                                    851 ;------------------------------------------------------------
                                    852 ;d                         Allocated to registers r7 
                                    853 ;ram_address               Allocated to registers 
                                    854 ;i                         Allocated to registers r3 r4 r5 r6 
                                    855 ;__3276800001              Allocated to registers 
                                    856 ;__3276800002              Allocated to registers 
                                    857 ;map_address               Allocated to registers 
                                    858 ;d                         Allocated to registers 
                                    859 ;__2621440004              Allocated to registers 
                                    860 ;__2621440005              Allocated to registers 
                                    861 ;map_address               Allocated to registers 
                                    862 ;d                         Allocated to registers 
                                    863 ;------------------------------------------------------------
                                    864 ;	.\ecen4350_lcd_v4.c:137: void checkAllRAM(unsigned char d)
                                    865 ;	-----------------------------------------
                                    866 ;	 function checkAllRAM
                                    867 ;	-----------------------------------------
      0000F8                        868 _checkAllRAM:
      0000F8 AF 82            [24]  869 	mov	r7,dpl
                                    870 ;	.\ecen4350_lcd_v4.c:140: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      0000FA 7B 00            [12]  871 	mov	r3,#0x00
      0000FC 7C 00            [12]  872 	mov	r4,#0x00
      0000FE 7D 00            [12]  873 	mov	r5,#0x00
      000100 7E 00            [12]  874 	mov	r6,#0x00
      000102                        875 00107$:
      000102 C3               [12]  876 	clr	c
      000103 74 FF            [12]  877 	mov	a,#0xff
      000105 9B               [12]  878 	subb	a,r3
      000106 74 FF            [12]  879 	mov	a,#0xff
      000108 9C               [12]  880 	subb	a,r4
      000109 E4               [12]  881 	clr	a
      00010A 9D               [12]  882 	subb	a,r5
      00010B E4               [12]  883 	clr	a
      00010C 9E               [12]  884 	subb	a,r6
      00010D 50 01            [24]  885 	jnc	00124$
      00010F 22               [24]  886 	ret
      000110                        887 00124$:
                                    888 ;	.\ecen4350_lcd_v4.c:141: IOM = 0;
                                    889 ;	assignBit
      000110 C2 B5            [12]  890 	clr	_P3_5
                                    891 ;	.\ecen4350_lcd_v4.c:142: ram_address = (unsigned char __xdata *)(i);
      000112 8B 82            [24]  892 	mov	dpl,r3
      000114 8C 83            [24]  893 	mov	dph,r4
                                    894 ;	.\ecen4350_lcd_v4.c:144: if(d != *ram_address) {
      000116 E0               [24]  895 	movx	a,@dptr
      000117 FA               [12]  896 	mov	r2,a
      000118 EF               [12]  897 	mov	a,r7
      000119 B5 02 02         [24]  898 	cjne	a,ar2,00125$
      00011C 80 4A            [24]  899 	sjmp	00102$
      00011E                        900 00125$:
                                    901 ;	.\ecen4350_lcd_v4.c:145: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      00011E 85 0C 82         [24]  902 	mov	dpl,_seg7_address
      000121 85 0D 83         [24]  903 	mov	dph,(_seg7_address + 1)
                                    904 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    905 ;	assignBit
      000124 D2 B5            [12]  906 	setb	_P3_5
                                    907 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000126 74 8E            [12]  908 	mov	a,#0x8e
      000128 F0               [24]  909 	movx	@dptr,a
                                    910 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    911 ;	assignBit
      000129 C2 B5            [12]  912 	clr	_P3_5
                                    913 ;	.\ecen4350_lcd_v4.c:146: setCursor(0,0);
      00012B E4               [12]  914 	clr	a
      00012C F5 6B            [12]  915 	mov	_setCursor_PARM_2,a
      00012E F5 6C            [12]  916 	mov	(_setCursor_PARM_2 + 1),a
      000130 90 00 00         [24]  917 	mov	dptr,#0x0000
      000133 C0 07            [24]  918 	push	ar7
      000135 C0 06            [24]  919 	push	ar6
      000137 C0 05            [24]  920 	push	ar5
      000139 C0 04            [24]  921 	push	ar4
      00013B C0 03            [24]  922 	push	ar3
      00013D 12 05 5D         [24]  923 	lcall	_setCursor
                                    924 ;	.\ecen4350_lcd_v4.c:147: LCD_string_write("ERROR FOUND At: ");
      000140 90 54 96         [24]  925 	mov	dptr,#___str_0
      000143 75 F0 80         [24]  926 	mov	b,#0x80
      000146 12 10 77         [24]  927 	lcall	_LCD_string_write
      000149 D0 03            [24]  928 	pop	ar3
      00014B D0 04            [24]  929 	pop	ar4
                                    930 ;	.\ecen4350_lcd_v4.c:148: print16Hex(i);
      00014D 8B 82            [24]  931 	mov	dpl,r3
      00014F 8C 83            [24]  932 	mov	dph,r4
      000151 C0 04            [24]  933 	push	ar4
      000153 C0 03            [24]  934 	push	ar3
      000155 12 15 5F         [24]  935 	lcall	_print16Hex
                                    936 ;	.\ecen4350_lcd_v4.c:149: delay(40);
      000158 90 00 28         [24]  937 	mov	dptr,#0x0028
      00015B 12 01 87         [24]  938 	lcall	_delay
      00015E D0 03            [24]  939 	pop	ar3
      000160 D0 04            [24]  940 	pop	ar4
      000162 D0 05            [24]  941 	pop	ar5
      000164 D0 06            [24]  942 	pop	ar6
      000166 D0 07            [24]  943 	pop	ar7
      000168                        944 00102$:
                                    945 ;	.\ecen4350_lcd_v4.c:151: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      000168 85 0C 82         [24]  946 	mov	dpl,_seg7_address
      00016B 85 0D 83         [24]  947 	mov	dph,(_seg7_address + 1)
                                    948 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                    949 ;	assignBit
      00016E D2 B5            [12]  950 	setb	_P3_5
                                    951 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000170 74 8C            [12]  952 	mov	a,#0x8c
      000172 F0               [24]  953 	movx	@dptr,a
                                    954 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                    955 ;	assignBit
      000173 C2 B5            [12]  956 	clr	_P3_5
                                    957 ;	.\ecen4350_lcd_v4.c:152: IOM = 1;
                                    958 ;	assignBit
      000175 D2 B5            [12]  959 	setb	_P3_5
                                    960 ;	.\ecen4350_lcd_v4.c:140: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000177 0B               [12]  961 	inc	r3
      000178 BB 00 09         [24]  962 	cjne	r3,#0x00,00126$
      00017B 0C               [12]  963 	inc	r4
      00017C BC 00 05         [24]  964 	cjne	r4,#0x00,00126$
      00017F 0D               [12]  965 	inc	r5
      000180 BD 00 01         [24]  966 	cjne	r5,#0x00,00126$
      000183 0E               [12]  967 	inc	r6
      000184                        968 00126$:
                                    969 ;	.\ecen4350_lcd_v4.c:154: }
      000184 02 01 02         [24]  970 	ljmp	00107$
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'delay'
                                    973 ;------------------------------------------------------------
                                    974 ;d                         Allocated to registers r6 r7 
                                    975 ;i                         Allocated to registers r4 r5 
                                    976 ;j                         Allocated to registers r2 r3 
                                    977 ;------------------------------------------------------------
                                    978 ;	.\ecen4350_lcd_v4.c:156: void delay(int d) /// x 1ms
                                    979 ;	-----------------------------------------
                                    980 ;	 function delay
                                    981 ;	-----------------------------------------
      000187                        982 _delay:
      000187 AE 82            [24]  983 	mov	r6,dpl
      000189 AF 83            [24]  984 	mov	r7,dph
                                    985 ;	.\ecen4350_lcd_v4.c:159: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      00018B 7C 00            [12]  986 	mov	r4,#0x00
      00018D 7D 00            [12]  987 	mov	r5,#0x00
      00018F                        988 00107$:
      00018F C3               [12]  989 	clr	c
      000190 EC               [12]  990 	mov	a,r4
      000191 9E               [12]  991 	subb	a,r6
      000192 ED               [12]  992 	mov	a,r5
      000193 64 80            [12]  993 	xrl	a,#0x80
      000195 8F F0            [24]  994 	mov	b,r7
      000197 63 F0 80         [24]  995 	xrl	b,#0x80
      00019A 95 F0            [12]  996 	subb	a,b
      00019C 50 1B            [24]  997 	jnc	00109$
                                    998 ;	.\ecen4350_lcd_v4.c:161: for (j = 0; j < 1000; j++);
      00019E 7A E8            [12]  999 	mov	r2,#0xe8
      0001A0 7B 03            [12] 1000 	mov	r3,#0x03
      0001A2                       1001 00105$:
      0001A2 EA               [12] 1002 	mov	a,r2
      0001A3 24 FF            [12] 1003 	add	a,#0xff
      0001A5 F8               [12] 1004 	mov	r0,a
      0001A6 EB               [12] 1005 	mov	a,r3
      0001A7 34 FF            [12] 1006 	addc	a,#0xff
      0001A9 F9               [12] 1007 	mov	r1,a
      0001AA 88 02            [24] 1008 	mov	ar2,r0
      0001AC 89 03            [24] 1009 	mov	ar3,r1
      0001AE E8               [12] 1010 	mov	a,r0
      0001AF 49               [12] 1011 	orl	a,r1
      0001B0 70 F0            [24] 1012 	jnz	00105$
                                   1013 ;	.\ecen4350_lcd_v4.c:159: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0001B2 0C               [12] 1014 	inc	r4
      0001B3 BC 00 D9         [24] 1015 	cjne	r4,#0x00,00107$
      0001B6 0D               [12] 1016 	inc	r5
      0001B7 80 D6            [24] 1017 	sjmp	00107$
      0001B9                       1018 00109$:
                                   1019 ;	.\ecen4350_lcd_v4.c:163: }
      0001B9 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'UART_Init'
                                   1023 ;------------------------------------------------------------
                                   1024 ;	.\ecen4350_lcd_v4.c:165: void UART_Init(){
                                   1025 ;	-----------------------------------------
                                   1026 ;	 function UART_Init
                                   1027 ;	-----------------------------------------
      0001BA                       1028 _UART_Init:
                                   1029 ;	.\ecen4350_lcd_v4.c:166: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      0001BA 75 98 50         [24] 1030 	mov	_SCON,#0x50
                                   1031 ;	.\ecen4350_lcd_v4.c:167: TMOD = 0x20;  // Timer1 input Mode2. input 8 bit auto reload
      0001BD 75 89 20         [24] 1032 	mov	_TMOD,#0x20
                                   1033 ;	.\ecen4350_lcd_v4.c:168: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                   1034 ;	assignBit
      0001C0 D2 8E            [12] 1035 	setb	_TR1
                                   1036 ;	.\ecen4350_lcd_v4.c:169: ES  = 1;      // Enable Serial Interrupt
                                   1037 ;	assignBit
      0001C2 D2 AC            [12] 1038 	setb	_ES
                                   1039 ;	.\ecen4350_lcd_v4.c:170: EA  = 1;      // Enable Global Interrupt bit
                                   1040 ;	assignBit
      0001C4 D2 AF            [12] 1041 	setb	_EA
                                   1042 ;	.\ecen4350_lcd_v4.c:171: }
      0001C6 22               [24] 1043 	ret
                                   1044 ;------------------------------------------------------------
                                   1045 ;Allocation info for local variables in function 'UART_transmit'
                                   1046 ;------------------------------------------------------------
                                   1047 ;byte                      Allocated to registers 
                                   1048 ;------------------------------------------------------------
                                   1049 ;	.\ecen4350_lcd_v4.c:174: void UART_transmit(unsigned char byte){
                                   1050 ;	-----------------------------------------
                                   1051 ;	 function UART_transmit
                                   1052 ;	-----------------------------------------
      0001C7                       1053 _UART_transmit:
      0001C7 85 82 99         [24] 1054 	mov	_SBUF,dpl
                                   1055 ;	.\ecen4350_lcd_v4.c:176: while(TI == 1);
      0001CA                       1056 00101$:
      0001CA 20 99 FD         [24] 1057 	jb	_TI,00101$
                                   1058 ;	.\ecen4350_lcd_v4.c:177: TI = 0;
                                   1059 ;	assignBit
      0001CD C2 99            [12] 1060 	clr	_TI
                                   1061 ;	.\ecen4350_lcd_v4.c:178: }
      0001CF 22               [24] 1062 	ret
                                   1063 ;------------------------------------------------------------
                                   1064 ;Allocation info for local variables in function 'ISR_receive'
                                   1065 ;------------------------------------------------------------
                                   1066 ;	.\ecen4350_lcd_v4.c:180: void ISR_receive() __interrupt (4) {
                                   1067 ;	-----------------------------------------
                                   1068 ;	 function ISR_receive
                                   1069 ;	-----------------------------------------
      0001D0                       1070 _ISR_receive:
                                   1071 ;	.\ecen4350_lcd_v4.c:181: if (RI == 1){
      0001D0 30 98 08         [24] 1072 	jnb	_RI,00103$
                                   1073 ;	.\ecen4350_lcd_v4.c:182: received_byte = SBUF;
      0001D3 85 99 0E         [24] 1074 	mov	_received_byte,_SBUF
                                   1075 ;	.\ecen4350_lcd_v4.c:183: RI = 0;
                                   1076 ;	assignBit
      0001D6 C2 98            [12] 1077 	clr	_RI
                                   1078 ;	.\ecen4350_lcd_v4.c:184: received_flag= 1;
      0001D8 75 0F 01         [24] 1079 	mov	_received_flag,#0x01
      0001DB                       1080 00103$:
                                   1081 ;	.\ecen4350_lcd_v4.c:186: }
      0001DB 32               [24] 1082 	reti
                                   1083 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1084 ;	eliminated unneeded push/pop psw
                                   1085 ;	eliminated unneeded push/pop dpl
                                   1086 ;	eliminated unneeded push/pop dph
                                   1087 ;	eliminated unneeded push/pop b
                                   1088 ;	eliminated unneeded push/pop acc
                                   1089 ;------------------------------------------------------------
                                   1090 ;Allocation info for local variables in function 'writeRegister8'
                                   1091 ;------------------------------------------------------------
                                   1092 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1093 ;address                   Allocated to registers r7 
                                   1094 ;------------------------------------------------------------
                                   1095 ;	.\ecen4350_lcd_v4.c:188: void writeRegister8(u8 address, u8 d)
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function writeRegister8
                                   1098 ;	-----------------------------------------
      0001DC                       1099 _writeRegister8:
      0001DC AF 82            [24] 1100 	mov	r7,dpl
                                   1101 ;	.\ecen4350_lcd_v4.c:191: CD = __CMD__;
                                   1102 ;	assignBit
      0001DE C2 B4            [12] 1103 	clr	_P3_4
                                   1104 ;	.\ecen4350_lcd_v4.c:192: write8(address);
                                   1105 ;	assignBit
      0001E0 D2 B5            [12] 1106 	setb	_P3_5
      0001E2 85 0A 82         [24] 1107 	mov	dpl,_lcd_address
      0001E5 85 0B 83         [24] 1108 	mov	dph,(_lcd_address + 1)
      0001E8 EF               [12] 1109 	mov	a,r7
      0001E9 F0               [24] 1110 	movx	@dptr,a
                                   1111 ;	assignBit
      0001EA C2 B5            [12] 1112 	clr	_P3_5
                                   1113 ;	.\ecen4350_lcd_v4.c:193: CD = __DATA__;
                                   1114 ;	assignBit
      0001EC D2 B4            [12] 1115 	setb	_P3_4
                                   1116 ;	.\ecen4350_lcd_v4.c:194: write8(d);
                                   1117 ;	assignBit
      0001EE D2 B5            [12] 1118 	setb	_P3_5
      0001F0 85 0A 82         [24] 1119 	mov	dpl,_lcd_address
      0001F3 85 0B 83         [24] 1120 	mov	dph,(_lcd_address + 1)
      0001F6 E5 6B            [12] 1121 	mov	a,_writeRegister8_PARM_2
      0001F8 F0               [24] 1122 	movx	@dptr,a
                                   1123 ;	assignBit
      0001F9 C2 B5            [12] 1124 	clr	_P3_5
                                   1125 ;	.\ecen4350_lcd_v4.c:196: }
      0001FB 22               [24] 1126 	ret
                                   1127 ;------------------------------------------------------------
                                   1128 ;Allocation info for local variables in function 'writeRegister16'
                                   1129 ;------------------------------------------------------------
                                   1130 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1131 ;address                   Allocated to registers r6 r7 
                                   1132 ;hi                        Allocated to registers r6 r7 
                                   1133 ;lo                        Allocated to registers r4 r5 
                                   1134 ;------------------------------------------------------------
                                   1135 ;	.\ecen4350_lcd_v4.c:198: void writeRegister16(u16 address, u16 d)
                                   1136 ;	-----------------------------------------
                                   1137 ;	 function writeRegister16
                                   1138 ;	-----------------------------------------
      0001FC                       1139 _writeRegister16:
      0001FC AE 82            [24] 1140 	mov	r6,dpl
      0001FE AF 83            [24] 1141 	mov	r7,dph
                                   1142 ;	.\ecen4350_lcd_v4.c:201: hi = (address) >> 8;
      000200 8F 04            [24] 1143 	mov	ar4,r7
                                   1144 ;	.\ecen4350_lcd_v4.c:202: lo = (address);
                                   1145 ;	.\ecen4350_lcd_v4.c:205: write8Reg(hi);
                                   1146 ;	assignBit
      000202 C2 B4            [12] 1147 	clr	_P3_4
                                   1148 ;	assignBit
      000204 D2 B5            [12] 1149 	setb	_P3_5
      000206 85 0A 82         [24] 1150 	mov	dpl,_lcd_address
      000209 85 0B 83         [24] 1151 	mov	dph,(_lcd_address + 1)
      00020C EC               [12] 1152 	mov	a,r4
      00020D F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	assignBit
      00020E C2 B5            [12] 1155 	clr	_P3_5
                                   1156 ;	.\ecen4350_lcd_v4.c:206: write8Reg(lo);
                                   1157 ;	assignBit
      000210 C2 B4            [12] 1158 	clr	_P3_4
                                   1159 ;	assignBit
      000212 D2 B5            [12] 1160 	setb	_P3_5
      000214 85 0A 82         [24] 1161 	mov	dpl,_lcd_address
      000217 85 0B 83         [24] 1162 	mov	dph,(_lcd_address + 1)
      00021A EE               [12] 1163 	mov	a,r6
      00021B F0               [24] 1164 	movx	@dptr,a
                                   1165 ;	assignBit
      00021C C2 B5            [12] 1166 	clr	_P3_5
                                   1167 ;	.\ecen4350_lcd_v4.c:207: hi = (d) >> 8;
      00021E AE 6C            [24] 1168 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1169 ;	.\ecen4350_lcd_v4.c:208: lo = (d);
      000220 AC 6B            [24] 1170 	mov	r4,_writeRegister16_PARM_2
                                   1171 ;	.\ecen4350_lcd_v4.c:209: CD = 1;
                                   1172 ;	assignBit
      000222 D2 B4            [12] 1173 	setb	_P3_4
                                   1174 ;	.\ecen4350_lcd_v4.c:210: write8Data(hi);
                                   1175 ;	assignBit
      000224 D2 B4            [12] 1176 	setb	_P3_4
                                   1177 ;	assignBit
      000226 D2 B5            [12] 1178 	setb	_P3_5
      000228 85 0A 82         [24] 1179 	mov	dpl,_lcd_address
      00022B 85 0B 83         [24] 1180 	mov	dph,(_lcd_address + 1)
      00022E EE               [12] 1181 	mov	a,r6
      00022F F0               [24] 1182 	movx	@dptr,a
                                   1183 ;	assignBit
      000230 C2 B5            [12] 1184 	clr	_P3_5
                                   1185 ;	.\ecen4350_lcd_v4.c:211: write8Data(lo);
                                   1186 ;	assignBit
      000232 D2 B4            [12] 1187 	setb	_P3_4
                                   1188 ;	assignBit
      000234 D2 B5            [12] 1189 	setb	_P3_5
      000236 85 0A 82         [24] 1190 	mov	dpl,_lcd_address
      000239 85 0B 83         [24] 1191 	mov	dph,(_lcd_address + 1)
      00023C EC               [12] 1192 	mov	a,r4
      00023D F0               [24] 1193 	movx	@dptr,a
                                   1194 ;	assignBit
      00023E C2 B5            [12] 1195 	clr	_P3_5
                                   1196 ;	.\ecen4350_lcd_v4.c:213: }
      000240 22               [24] 1197 	ret
                                   1198 ;------------------------------------------------------------
                                   1199 ;Allocation info for local variables in function 'seg7Test'
                                   1200 ;------------------------------------------------------------
                                   1201 ;__1310720007              Allocated to registers 
                                   1202 ;__1310720008              Allocated to registers 
                                   1203 ;map_address               Allocated to registers 
                                   1204 ;d                         Allocated to registers 
                                   1205 ;__1310720010              Allocated to registers 
                                   1206 ;__1310720011              Allocated to registers 
                                   1207 ;map_address               Allocated to registers 
                                   1208 ;d                         Allocated to registers 
                                   1209 ;__1310720013              Allocated to registers 
                                   1210 ;__1310720014              Allocated to registers 
                                   1211 ;map_address               Allocated to registers 
                                   1212 ;d                         Allocated to registers 
                                   1213 ;__1310720016              Allocated to registers 
                                   1214 ;__1310720017              Allocated to registers 
                                   1215 ;map_address               Allocated to registers 
                                   1216 ;d                         Allocated to registers 
                                   1217 ;__1310720019              Allocated to registers 
                                   1218 ;__1310720020              Allocated to registers 
                                   1219 ;map_address               Allocated to registers 
                                   1220 ;d                         Allocated to registers 
                                   1221 ;__1310720022              Allocated to registers 
                                   1222 ;__1310720023              Allocated to registers 
                                   1223 ;map_address               Allocated to registers 
                                   1224 ;d                         Allocated to registers 
                                   1225 ;__1310720025              Allocated to registers 
                                   1226 ;__1310720026              Allocated to registers 
                                   1227 ;map_address               Allocated to registers 
                                   1228 ;d                         Allocated to registers 
                                   1229 ;__1310720028              Allocated to registers 
                                   1230 ;__1310720029              Allocated to registers 
                                   1231 ;map_address               Allocated to registers 
                                   1232 ;d                         Allocated to registers 
                                   1233 ;__1310720031              Allocated to registers 
                                   1234 ;__1310720032              Allocated to registers 
                                   1235 ;map_address               Allocated to registers 
                                   1236 ;d                         Allocated to registers 
                                   1237 ;__1310720034              Allocated to registers 
                                   1238 ;__1310720035              Allocated to registers 
                                   1239 ;map_address               Allocated to registers 
                                   1240 ;d                         Allocated to registers 
                                   1241 ;__1310720037              Allocated to registers 
                                   1242 ;__1310720038              Allocated to registers 
                                   1243 ;map_address               Allocated to registers 
                                   1244 ;d                         Allocated to registers 
                                   1245 ;__1310720040              Allocated to registers 
                                   1246 ;__1310720041              Allocated to registers 
                                   1247 ;map_address               Allocated to registers 
                                   1248 ;d                         Allocated to registers 
                                   1249 ;__1310720043              Allocated to registers 
                                   1250 ;__1310720044              Allocated to registers 
                                   1251 ;map_address               Allocated to registers 
                                   1252 ;d                         Allocated to registers 
                                   1253 ;__1310720046              Allocated to registers 
                                   1254 ;__1310720047              Allocated to registers 
                                   1255 ;map_address               Allocated to registers 
                                   1256 ;d                         Allocated to registers 
                                   1257 ;__1310720049              Allocated to registers 
                                   1258 ;__1310720050              Allocated to registers 
                                   1259 ;map_address               Allocated to registers 
                                   1260 ;d                         Allocated to registers 
                                   1261 ;__1310720052              Allocated to registers 
                                   1262 ;__1310720053              Allocated to registers 
                                   1263 ;map_address               Allocated to registers 
                                   1264 ;d                         Allocated to registers 
                                   1265 ;__1310720055              Allocated to registers 
                                   1266 ;__1310720056              Allocated to registers 
                                   1267 ;map_address               Allocated to registers 
                                   1268 ;d                         Allocated to registers 
                                   1269 ;__1310720058              Allocated to registers 
                                   1270 ;__1310720059              Allocated to registers 
                                   1271 ;map_address               Allocated to registers 
                                   1272 ;d                         Allocated to registers 
                                   1273 ;------------------------------------------------------------
                                   1274 ;	.\ecen4350_lcd_v4.c:215: void seg7Test(void)
                                   1275 ;	-----------------------------------------
                                   1276 ;	 function seg7Test
                                   1277 ;	-----------------------------------------
      000241                       1278 _seg7Test:
                                   1279 ;	.\ecen4350_lcd_v4.c:217: delay(4);
      000241 90 00 04         [24] 1280 	mov	dptr,#0x0004
      000244 12 01 87         [24] 1281 	lcall	_delay
                                   1282 ;	.\ecen4350_lcd_v4.c:218: iowrite8(seg7_address, ON);
      000247 85 0C 82         [24] 1283 	mov	dpl,_seg7_address
      00024A 85 0D 83         [24] 1284 	mov	dph,(_seg7_address + 1)
                                   1285 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1286 ;	assignBit
      00024D D2 B5            [12] 1287 	setb	_P3_5
                                   1288 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00024F E4               [12] 1289 	clr	a
      000250 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1292 ;	assignBit
      000251 C2 B5            [12] 1293 	clr	_P3_5
                                   1294 ;	.\ecen4350_lcd_v4.c:219: delay(4);
      000253 90 00 04         [24] 1295 	mov	dptr,#0x0004
      000256 12 01 87         [24] 1296 	lcall	_delay
                                   1297 ;	.\ecen4350_lcd_v4.c:220: iowrite8(seg7_address, ZERO);
      000259 85 0C 82         [24] 1298 	mov	dpl,_seg7_address
      00025C 85 0D 83         [24] 1299 	mov	dph,(_seg7_address + 1)
                                   1300 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1301 ;	assignBit
      00025F D2 B5            [12] 1302 	setb	_P3_5
                                   1303 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000261 74 C0            [12] 1304 	mov	a,#0xc0
      000263 F0               [24] 1305 	movx	@dptr,a
                                   1306 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1307 ;	assignBit
      000264 C2 B5            [12] 1308 	clr	_P3_5
                                   1309 ;	.\ecen4350_lcd_v4.c:221: delay(4);
      000266 90 00 04         [24] 1310 	mov	dptr,#0x0004
      000269 12 01 87         [24] 1311 	lcall	_delay
                                   1312 ;	.\ecen4350_lcd_v4.c:222: iowrite8(seg7_address, ONE);
      00026C 85 0C 82         [24] 1313 	mov	dpl,_seg7_address
      00026F 85 0D 83         [24] 1314 	mov	dph,(_seg7_address + 1)
                                   1315 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1316 ;	assignBit
      000272 D2 B5            [12] 1317 	setb	_P3_5
                                   1318 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000274 74 F9            [12] 1319 	mov	a,#0xf9
      000276 F0               [24] 1320 	movx	@dptr,a
                                   1321 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1322 ;	assignBit
      000277 C2 B5            [12] 1323 	clr	_P3_5
                                   1324 ;	.\ecen4350_lcd_v4.c:223: delay(4);
      000279 90 00 04         [24] 1325 	mov	dptr,#0x0004
      00027C 12 01 87         [24] 1326 	lcall	_delay
                                   1327 ;	.\ecen4350_lcd_v4.c:224: iowrite8(seg7_address, TWO);
      00027F 85 0C 82         [24] 1328 	mov	dpl,_seg7_address
      000282 85 0D 83         [24] 1329 	mov	dph,(_seg7_address + 1)
                                   1330 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1331 ;	assignBit
      000285 D2 B5            [12] 1332 	setb	_P3_5
                                   1333 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000287 74 A4            [12] 1334 	mov	a,#0xa4
      000289 F0               [24] 1335 	movx	@dptr,a
                                   1336 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1337 ;	assignBit
      00028A C2 B5            [12] 1338 	clr	_P3_5
                                   1339 ;	.\ecen4350_lcd_v4.c:225: delay(4);
      00028C 90 00 04         [24] 1340 	mov	dptr,#0x0004
      00028F 12 01 87         [24] 1341 	lcall	_delay
                                   1342 ;	.\ecen4350_lcd_v4.c:226: iowrite8(seg7_address, THREE);
      000292 85 0C 82         [24] 1343 	mov	dpl,_seg7_address
      000295 85 0D 83         [24] 1344 	mov	dph,(_seg7_address + 1)
                                   1345 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1346 ;	assignBit
      000298 D2 B5            [12] 1347 	setb	_P3_5
                                   1348 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00029A 74 B0            [12] 1349 	mov	a,#0xb0
      00029C F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1352 ;	assignBit
      00029D C2 B5            [12] 1353 	clr	_P3_5
                                   1354 ;	.\ecen4350_lcd_v4.c:227: delay(4);
      00029F 90 00 04         [24] 1355 	mov	dptr,#0x0004
      0002A2 12 01 87         [24] 1356 	lcall	_delay
                                   1357 ;	.\ecen4350_lcd_v4.c:228: iowrite8(seg7_address, FOUR);
      0002A5 85 0C 82         [24] 1358 	mov	dpl,_seg7_address
      0002A8 85 0D 83         [24] 1359 	mov	dph,(_seg7_address + 1)
                                   1360 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1361 ;	assignBit
      0002AB D2 B5            [12] 1362 	setb	_P3_5
                                   1363 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002AD 74 99            [12] 1364 	mov	a,#0x99
      0002AF F0               [24] 1365 	movx	@dptr,a
                                   1366 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1367 ;	assignBit
      0002B0 C2 B5            [12] 1368 	clr	_P3_5
                                   1369 ;	.\ecen4350_lcd_v4.c:229: delay(4);
      0002B2 90 00 04         [24] 1370 	mov	dptr,#0x0004
      0002B5 12 01 87         [24] 1371 	lcall	_delay
                                   1372 ;	.\ecen4350_lcd_v4.c:230: iowrite8(seg7_address, FIVE);
      0002B8 85 0C 82         [24] 1373 	mov	dpl,_seg7_address
      0002BB 85 0D 83         [24] 1374 	mov	dph,(_seg7_address + 1)
                                   1375 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1376 ;	assignBit
      0002BE D2 B5            [12] 1377 	setb	_P3_5
                                   1378 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002C0 74 92            [12] 1379 	mov	a,#0x92
      0002C2 F0               [24] 1380 	movx	@dptr,a
                                   1381 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1382 ;	assignBit
      0002C3 C2 B5            [12] 1383 	clr	_P3_5
                                   1384 ;	.\ecen4350_lcd_v4.c:231: delay(4);
      0002C5 90 00 04         [24] 1385 	mov	dptr,#0x0004
      0002C8 12 01 87         [24] 1386 	lcall	_delay
                                   1387 ;	.\ecen4350_lcd_v4.c:232: iowrite8(seg7_address, SIX);
      0002CB 85 0C 82         [24] 1388 	mov	dpl,_seg7_address
      0002CE 85 0D 83         [24] 1389 	mov	dph,(_seg7_address + 1)
                                   1390 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1391 ;	assignBit
      0002D1 D2 B5            [12] 1392 	setb	_P3_5
                                   1393 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002D3 74 82            [12] 1394 	mov	a,#0x82
      0002D5 F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1397 ;	assignBit
      0002D6 C2 B5            [12] 1398 	clr	_P3_5
                                   1399 ;	.\ecen4350_lcd_v4.c:233: delay(4);
      0002D8 90 00 04         [24] 1400 	mov	dptr,#0x0004
      0002DB 12 01 87         [24] 1401 	lcall	_delay
                                   1402 ;	.\ecen4350_lcd_v4.c:234: iowrite8(seg7_address, SEVEN);
      0002DE 85 0C 82         [24] 1403 	mov	dpl,_seg7_address
      0002E1 85 0D 83         [24] 1404 	mov	dph,(_seg7_address + 1)
                                   1405 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1406 ;	assignBit
      0002E4 D2 B5            [12] 1407 	setb	_P3_5
                                   1408 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002E6 74 F8            [12] 1409 	mov	a,#0xf8
      0002E8 F0               [24] 1410 	movx	@dptr,a
                                   1411 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1412 ;	assignBit
      0002E9 C2 B5            [12] 1413 	clr	_P3_5
                                   1414 ;	.\ecen4350_lcd_v4.c:235: delay(4);
      0002EB 90 00 04         [24] 1415 	mov	dptr,#0x0004
      0002EE 12 01 87         [24] 1416 	lcall	_delay
                                   1417 ;	.\ecen4350_lcd_v4.c:236: iowrite8(seg7_address, EIGHT);
      0002F1 85 0C 82         [24] 1418 	mov	dpl,_seg7_address
      0002F4 85 0D 83         [24] 1419 	mov	dph,(_seg7_address + 1)
                                   1420 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1421 ;	assignBit
      0002F7 D2 B5            [12] 1422 	setb	_P3_5
                                   1423 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0002F9 74 80            [12] 1424 	mov	a,#0x80
      0002FB F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1427 ;	assignBit
      0002FC C2 B5            [12] 1428 	clr	_P3_5
                                   1429 ;	.\ecen4350_lcd_v4.c:237: delay(4);
      0002FE 90 00 04         [24] 1430 	mov	dptr,#0x0004
      000301 12 01 87         [24] 1431 	lcall	_delay
                                   1432 ;	.\ecen4350_lcd_v4.c:238: iowrite8(seg7_address, NINE);
      000304 85 0C 82         [24] 1433 	mov	dpl,_seg7_address
      000307 85 0D 83         [24] 1434 	mov	dph,(_seg7_address + 1)
                                   1435 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1436 ;	assignBit
      00030A D2 B5            [12] 1437 	setb	_P3_5
                                   1438 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00030C 74 98            [12] 1439 	mov	a,#0x98
      00030E F0               [24] 1440 	movx	@dptr,a
                                   1441 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1442 ;	assignBit
      00030F C2 B5            [12] 1443 	clr	_P3_5
                                   1444 ;	.\ecen4350_lcd_v4.c:239: delay(4);
      000311 90 00 04         [24] 1445 	mov	dptr,#0x0004
      000314 12 01 87         [24] 1446 	lcall	_delay
                                   1447 ;	.\ecen4350_lcd_v4.c:240: iowrite8(seg7_address, SEG_A);
      000317 85 0C 82         [24] 1448 	mov	dpl,_seg7_address
      00031A 85 0D 83         [24] 1449 	mov	dph,(_seg7_address + 1)
                                   1450 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1451 ;	assignBit
      00031D D2 B5            [12] 1452 	setb	_P3_5
                                   1453 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00031F 74 88            [12] 1454 	mov	a,#0x88
      000321 F0               [24] 1455 	movx	@dptr,a
                                   1456 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1457 ;	assignBit
      000322 C2 B5            [12] 1458 	clr	_P3_5
                                   1459 ;	.\ecen4350_lcd_v4.c:241: delay(4);
      000324 90 00 04         [24] 1460 	mov	dptr,#0x0004
      000327 12 01 87         [24] 1461 	lcall	_delay
                                   1462 ;	.\ecen4350_lcd_v4.c:242: iowrite8(seg7_address, SEG_B);
      00032A 85 0C 82         [24] 1463 	mov	dpl,_seg7_address
      00032D 85 0D 83         [24] 1464 	mov	dph,(_seg7_address + 1)
                                   1465 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1466 ;	assignBit
      000330 D2 B5            [12] 1467 	setb	_P3_5
                                   1468 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000332 74 83            [12] 1469 	mov	a,#0x83
      000334 F0               [24] 1470 	movx	@dptr,a
                                   1471 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1472 ;	assignBit
      000335 C2 B5            [12] 1473 	clr	_P3_5
                                   1474 ;	.\ecen4350_lcd_v4.c:243: delay(4);
      000337 90 00 04         [24] 1475 	mov	dptr,#0x0004
      00033A 12 01 87         [24] 1476 	lcall	_delay
                                   1477 ;	.\ecen4350_lcd_v4.c:244: iowrite8(seg7_address, SEG_C);
      00033D 85 0C 82         [24] 1478 	mov	dpl,_seg7_address
      000340 85 0D 83         [24] 1479 	mov	dph,(_seg7_address + 1)
                                   1480 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1481 ;	assignBit
      000343 D2 B5            [12] 1482 	setb	_P3_5
                                   1483 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000345 74 C6            [12] 1484 	mov	a,#0xc6
      000347 F0               [24] 1485 	movx	@dptr,a
                                   1486 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1487 ;	assignBit
      000348 C2 B5            [12] 1488 	clr	_P3_5
                                   1489 ;	.\ecen4350_lcd_v4.c:245: delay(4);
      00034A 90 00 04         [24] 1490 	mov	dptr,#0x0004
      00034D 12 01 87         [24] 1491 	lcall	_delay
                                   1492 ;	.\ecen4350_lcd_v4.c:246: iowrite8(seg7_address, SEG_D);
      000350 85 0C 82         [24] 1493 	mov	dpl,_seg7_address
      000353 85 0D 83         [24] 1494 	mov	dph,(_seg7_address + 1)
                                   1495 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1496 ;	assignBit
      000356 D2 B5            [12] 1497 	setb	_P3_5
                                   1498 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000358 74 A1            [12] 1499 	mov	a,#0xa1
      00035A F0               [24] 1500 	movx	@dptr,a
                                   1501 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1502 ;	assignBit
      00035B C2 B5            [12] 1503 	clr	_P3_5
                                   1504 ;	.\ecen4350_lcd_v4.c:247: delay(4);
      00035D 90 00 04         [24] 1505 	mov	dptr,#0x0004
      000360 12 01 87         [24] 1506 	lcall	_delay
                                   1507 ;	.\ecen4350_lcd_v4.c:248: iowrite8(seg7_address, SEG_E);
      000363 85 0C 82         [24] 1508 	mov	dpl,_seg7_address
      000366 85 0D 83         [24] 1509 	mov	dph,(_seg7_address + 1)
                                   1510 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1511 ;	assignBit
      000369 D2 B5            [12] 1512 	setb	_P3_5
                                   1513 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00036B 74 86            [12] 1514 	mov	a,#0x86
      00036D F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1517 ;	assignBit
      00036E C2 B5            [12] 1518 	clr	_P3_5
                                   1519 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      000370 90 00 04         [24] 1520 	mov	dptr,#0x0004
      000373 12 01 87         [24] 1521 	lcall	_delay
                                   1522 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, SEG_F);
      000376 85 0C 82         [24] 1523 	mov	dpl,_seg7_address
      000379 85 0D 83         [24] 1524 	mov	dph,(_seg7_address + 1)
                                   1525 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1526 ;	assignBit
      00037C D2 B5            [12] 1527 	setb	_P3_5
                                   1528 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00037E 74 8E            [12] 1529 	mov	a,#0x8e
      000380 F0               [24] 1530 	movx	@dptr,a
                                   1531 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1532 ;	assignBit
      000381 C2 B5            [12] 1533 	clr	_P3_5
                                   1534 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      000383 90 00 04         [24] 1535 	mov	dptr,#0x0004
      000386 12 01 87         [24] 1536 	lcall	_delay
                                   1537 ;	.\ecen4350_lcd_v4.c:252: iowrite8(seg7_address, OFF);
      000389 85 0C 82         [24] 1538 	mov	dpl,_seg7_address
      00038C 85 0D 83         [24] 1539 	mov	dph,(_seg7_address + 1)
                                   1540 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1541 ;	assignBit
      00038F D2 B5            [12] 1542 	setb	_P3_5
                                   1543 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000391 74 FF            [12] 1544 	mov	a,#0xff
      000393 F0               [24] 1545 	movx	@dptr,a
                                   1546 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1547 ;	assignBit
      000394 C2 B5            [12] 1548 	clr	_P3_5
                                   1549 ;	.\ecen4350_lcd_v4.c:253: delay(4);
      000396 90 00 04         [24] 1550 	mov	dptr,#0x0004
                                   1551 ;	.\ecen4350_lcd_v4.c:254: }
      000399 02 01 87         [24] 1552 	ljmp	_delay
                                   1553 ;------------------------------------------------------------
                                   1554 ;Allocation info for local variables in function 'rtcInit'
                                   1555 ;------------------------------------------------------------
                                   1556 ;i                         Allocated to registers r6 r7 
                                   1557 ;------------------------------------------------------------
                                   1558 ;	.\ecen4350_lcd_v4.c:257: void rtcInit(void)
                                   1559 ;	-----------------------------------------
                                   1560 ;	 function rtcInit
                                   1561 ;	-----------------------------------------
      00039C                       1562 _rtcInit:
                                   1563 ;	.\ecen4350_lcd_v4.c:261: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      00039C 75 6B 07         [24] 1564 	mov	_rtcCmd_PARM_2,#0x07
      00039F 90 00 0F         [24] 1565 	mov	dptr,#0x000f
      0003A2 12 03 E0         [24] 1566 	lcall	_rtcCmd
                                   1567 ;	.\ecen4350_lcd_v4.c:264: for (i = __S1_REG__; i < __REG_D__; i++)
      0003A5 7E 00            [12] 1568 	mov	r6,#0x00
      0003A7 7F 00            [12] 1569 	mov	r7,#0x00
      0003A9                       1570 00102$:
                                   1571 ;	.\ecen4350_lcd_v4.c:266: rtcWrite(i, 0x00);
      0003A9 75 1E 00         [24] 1572 	mov	_rtcWrite_PARM_2,#0x00
      0003AC 8E 82            [24] 1573 	mov	dpl,r6
      0003AE 8F 83            [24] 1574 	mov	dph,r7
      0003B0 C0 07            [24] 1575 	push	ar7
      0003B2 C0 06            [24] 1576 	push	ar6
      0003B4 12 03 E9         [24] 1577 	lcall	_rtcWrite
      0003B7 D0 06            [24] 1578 	pop	ar6
      0003B9 D0 07            [24] 1579 	pop	ar7
                                   1580 ;	.\ecen4350_lcd_v4.c:264: for (i = __S1_REG__; i < __REG_D__; i++)
      0003BB 0E               [12] 1581 	inc	r6
      0003BC BE 00 01         [24] 1582 	cjne	r6,#0x00,00115$
      0003BF 0F               [12] 1583 	inc	r7
      0003C0                       1584 00115$:
      0003C0 C3               [12] 1585 	clr	c
      0003C1 EE               [12] 1586 	mov	a,r6
      0003C2 94 0D            [12] 1587 	subb	a,#0x0d
      0003C4 EF               [12] 1588 	mov	a,r7
      0003C5 94 00            [12] 1589 	subb	a,#0x00
      0003C7 40 E0            [24] 1590 	jc	00102$
                                   1591 ;	.\ecen4350_lcd_v4.c:269: rtcCmd(__REG_F__, __HR_24__);
      0003C9 75 6B 04         [24] 1592 	mov	_rtcCmd_PARM_2,#0x04
      0003CC 90 00 0F         [24] 1593 	mov	dptr,#0x000f
                                   1594 ;	.\ecen4350_lcd_v4.c:270: }
      0003CF 02 03 E0         [24] 1595 	ljmp	_rtcCmd
                                   1596 ;------------------------------------------------------------
                                   1597 ;Allocation info for local variables in function 'rtcBusy'
                                   1598 ;------------------------------------------------------------
                                   1599 ;__1310720061              Allocated to registers 
                                   1600 ;map_address               Allocated to registers 
                                   1601 ;__1310720062              Allocated to registers 
                                   1602 ;map_address               Allocated to registers 
                                   1603 ;d                         Allocated to registers r7 
                                   1604 ;------------------------------------------------------------
                                   1605 ;	.\ecen4350_lcd_v4.c:272: void rtcBusy(void)
                                   1606 ;	-----------------------------------------
                                   1607 ;	 function rtcBusy
                                   1608 ;	-----------------------------------------
      0003D2                       1609 _rtcBusy:
                                   1610 ;	.\ecen4350_lcd_v4.c:275: while ((ioread8(map_address) & 0x02))		;
      0003D2                       1611 00101$:
                                   1612 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   1613 ;	assignBit
      0003D2 D2 B5            [12] 1614 	setb	_P3_5
                                   1615 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0003D4 90 00 0D         [24] 1616 	mov	dptr,#0x000d
      0003D7 E0               [24] 1617 	movx	a,@dptr
      0003D8 FF               [12] 1618 	mov	r7,a
                                   1619 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   1620 ;	assignBit
      0003D9 C2 B5            [12] 1621 	clr	_P3_5
                                   1622 ;	.\ecen4350_lcd_v4.c:275: while ((ioread8(map_address) & 0x02))		;
      0003DB EF               [12] 1623 	mov	a,r7
      0003DC 20 E1 F3         [24] 1624 	jb	acc.1,00101$
                                   1625 ;	.\ecen4350_lcd_v4.c:276: }
      0003DF 22               [24] 1626 	ret
                                   1627 ;------------------------------------------------------------
                                   1628 ;Allocation info for local variables in function 'rtcCmd'
                                   1629 ;------------------------------------------------------------
                                   1630 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1631 ;addr                      Allocated to registers r6 r7 
                                   1632 ;map_address               Allocated to registers 
                                   1633 ;__1310720064              Allocated to registers 
                                   1634 ;__1310720065              Allocated to registers r7 
                                   1635 ;map_address               Allocated to registers 
                                   1636 ;d                         Allocated to registers 
                                   1637 ;------------------------------------------------------------
                                   1638 ;	.\ecen4350_lcd_v4.c:278: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1639 ;	-----------------------------------------
                                   1640 ;	 function rtcCmd
                                   1641 ;	-----------------------------------------
      0003E0                       1642 _rtcCmd:
                                   1643 ;	.\ecen4350_lcd_v4.c:280: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1644 ;	.\ecen4350_lcd_v4.c:281: iowrite8(map_address, d);
      0003E0 AF 6B            [24] 1645 	mov	r7,_rtcCmd_PARM_2
                                   1646 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1647 ;	assignBit
      0003E2 D2 B5            [12] 1648 	setb	_P3_5
                                   1649 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003E4 EF               [12] 1650 	mov	a,r7
      0003E5 F0               [24] 1651 	movx	@dptr,a
                                   1652 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1653 ;	assignBit
      0003E6 C2 B5            [12] 1654 	clr	_P3_5
                                   1655 ;	.\ecen4350_lcd_v4.c:281: iowrite8(map_address, d);
                                   1656 ;	.\ecen4350_lcd_v4.c:282: }
      0003E8 22               [24] 1657 	ret
                                   1658 ;------------------------------------------------------------
                                   1659 ;Allocation info for local variables in function 'rtcWrite'
                                   1660 ;------------------------------------------------------------
                                   1661 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1662 ;addr                      Allocated to registers r6 r7 
                                   1663 ;map_address               Allocated to registers r6 r7 
                                   1664 ;__1310720067              Allocated to registers 
                                   1665 ;__1310720068              Allocated to registers 
                                   1666 ;addr                      Allocated to registers 
                                   1667 ;d                         Allocated to registers 
                                   1668 ;map_address               Allocated to registers 
                                   1669 ;__1310720064              Allocated to registers 
                                   1670 ;__1310720065              Allocated to registers 
                                   1671 ;map_address               Allocated to registers 
                                   1672 ;d                         Allocated to registers 
                                   1673 ;__1310720070              Allocated to registers 
                                   1674 ;__1310720071              Allocated to registers 
                                   1675 ;map_address               Allocated to registers 
                                   1676 ;d                         Allocated to registers 
                                   1677 ;__1310720073              Allocated to registers 
                                   1678 ;__1310720074              Allocated to registers r7 
                                   1679 ;addr                      Allocated to registers 
                                   1680 ;d                         Allocated to registers 
                                   1681 ;map_address               Allocated to registers 
                                   1682 ;__1310720064              Allocated to registers 
                                   1683 ;__1310720065              Allocated to registers 
                                   1684 ;map_address               Allocated to registers 
                                   1685 ;d                         Allocated to registers 
                                   1686 ;------------------------------------------------------------
                                   1687 ;	.\ecen4350_lcd_v4.c:284: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1688 ;	-----------------------------------------
                                   1689 ;	 function rtcWrite
                                   1690 ;	-----------------------------------------
      0003E9                       1691 _rtcWrite:
      0003E9 AE 82            [24] 1692 	mov	r6,dpl
      0003EB AF 83            [24] 1693 	mov	r7,dph
                                   1694 ;	.\ecen4350_lcd_v4.c:286: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1695 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1696 ;	assignBit
      0003ED D2 B5            [12] 1697 	setb	_P3_5
                                   1698 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0003EF 90 00 0D         [24] 1699 	mov	dptr,#0x000d
      0003F2 74 01            [12] 1700 	mov	a,#0x01
      0003F4 F0               [24] 1701 	movx	@dptr,a
                                   1702 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1703 ;	assignBit
      0003F5 C2 B5            [12] 1704 	clr	_P3_5
                                   1705 ;	.\ecen4350_lcd_v4.c:288: rtcBusy();
      0003F7 C0 07            [24] 1706 	push	ar7
      0003F9 C0 06            [24] 1707 	push	ar6
      0003FB 12 03 D2         [24] 1708 	lcall	_rtcBusy
      0003FE D0 06            [24] 1709 	pop	ar6
      000400 D0 07            [24] 1710 	pop	ar7
                                   1711 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1712 ;	assignBit
      000402 D2 B5            [12] 1713 	setb	_P3_5
                                   1714 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000404 8E 82            [24] 1715 	mov	dpl,r6
      000406 8F 83            [24] 1716 	mov	dph,r7
      000408 E4               [12] 1717 	clr	a
      000409 F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1720 ;	assignBit
      00040A C2 B5            [12] 1721 	clr	_P3_5
                                   1722 ;	.\ecen4350_lcd_v4.c:290: rtcCmd(__REG_D__, d);
      00040C AF 1E            [24] 1723 	mov	r7,_rtcWrite_PARM_2
                                   1724 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1725 ;	assignBit
      00040E D2 B5            [12] 1726 	setb	_P3_5
                                   1727 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000410 90 00 0D         [24] 1728 	mov	dptr,#0x000d
      000413 EF               [12] 1729 	mov	a,r7
      000414 F0               [24] 1730 	movx	@dptr,a
                                   1731 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1732 ;	assignBit
      000415 C2 B5            [12] 1733 	clr	_P3_5
                                   1734 ;	.\ecen4350_lcd_v4.c:290: rtcCmd(__REG_D__, d);
                                   1735 ;	.\ecen4350_lcd_v4.c:291: }
      000417 22               [24] 1736 	ret
                                   1737 ;------------------------------------------------------------
                                   1738 ;Allocation info for local variables in function 'rtcRead'
                                   1739 ;------------------------------------------------------------
                                   1740 ;addr                      Allocated to registers r6 r7 
                                   1741 ;__1310720079              Allocated to registers 
                                   1742 ;d                         Allocated to registers r7 
                                   1743 ;map_address               Allocated to registers r6 r7 
                                   1744 ;__1310720076              Allocated to registers 
                                   1745 ;__1310720077              Allocated to registers 
                                   1746 ;addr                      Allocated to registers 
                                   1747 ;d                         Allocated to registers 
                                   1748 ;map_address               Allocated to registers 
                                   1749 ;__1310720064              Allocated to registers 
                                   1750 ;__1310720065              Allocated to registers 
                                   1751 ;map_address               Allocated to registers 
                                   1752 ;d                         Allocated to registers 
                                   1753 ;__1310720080              Allocated to registers 
                                   1754 ;map_address               Allocated to registers 
                                   1755 ;d                         Allocated to registers r6 
                                   1756 ;__1310720082              Allocated to registers 
                                   1757 ;__1310720083              Allocated to registers 
                                   1758 ;addr                      Allocated to registers 
                                   1759 ;d                         Allocated to registers 
                                   1760 ;map_address               Allocated to registers 
                                   1761 ;__1310720064              Allocated to registers 
                                   1762 ;__1310720065              Allocated to registers 
                                   1763 ;map_address               Allocated to registers 
                                   1764 ;d                         Allocated to registers 
                                   1765 ;------------------------------------------------------------
                                   1766 ;	.\ecen4350_lcd_v4.c:293: inline unsigned char rtcRead(unsigned int addr)
                                   1767 ;	-----------------------------------------
                                   1768 ;	 function rtcRead
                                   1769 ;	-----------------------------------------
      000418                       1770 _rtcRead:
      000418 AE 82            [24] 1771 	mov	r6,dpl
      00041A AF 83            [24] 1772 	mov	r7,dph
                                   1773 ;	.\ecen4350_lcd_v4.c:296: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1774 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1775 ;	assignBit
      00041C D2 B5            [12] 1776 	setb	_P3_5
                                   1777 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00041E 90 00 0D         [24] 1778 	mov	dptr,#0x000d
      000421 74 01            [12] 1779 	mov	a,#0x01
      000423 F0               [24] 1780 	movx	@dptr,a
                                   1781 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1782 ;	assignBit
      000424 C2 B5            [12] 1783 	clr	_P3_5
                                   1784 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000426 C0 07            [24] 1785 	push	ar7
      000428 C0 06            [24] 1786 	push	ar6
      00042A 12 03 D2         [24] 1787 	lcall	_rtcBusy
      00042D D0 06            [24] 1788 	pop	ar6
      00042F D0 07            [24] 1789 	pop	ar7
                                   1790 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   1791 ;	assignBit
      000431 D2 B5            [12] 1792 	setb	_P3_5
                                   1793 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      000433 8E 82            [24] 1794 	mov	dpl,r6
      000435 8F 83            [24] 1795 	mov	dph,r7
      000437 E0               [24] 1796 	movx	a,@dptr
      000438 FE               [12] 1797 	mov	r6,a
                                   1798 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   1799 ;	assignBit
      000439 C2 B5            [12] 1800 	clr	_P3_5
                                   1801 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00043B 74 0F            [12] 1802 	mov	a,#0x0f
      00043D 5E               [12] 1803 	anl	a,r6
      00043E 44 30            [12] 1804 	orl	a,#0x30
      000440 FF               [12] 1805 	mov	r7,a
                                   1806 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   1807 ;	assignBit
      000441 D2 B5            [12] 1808 	setb	_P3_5
                                   1809 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000443 90 00 0D         [24] 1810 	mov	dptr,#0x000d
      000446 E4               [12] 1811 	clr	a
      000447 F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   1814 ;	assignBit
      000448 C2 B5            [12] 1815 	clr	_P3_5
                                   1816 ;	.\ecen4350_lcd_v4.c:303: return d;
      00044A 8F 82            [24] 1817 	mov	dpl,r7
                                   1818 ;	.\ecen4350_lcd_v4.c:304: }
      00044C 22               [24] 1819 	ret
                                   1820 ;------------------------------------------------------------
                                   1821 ;Allocation info for local variables in function 'rtcPrint'
                                   1822 ;------------------------------------------------------------
                                   1823 ;__1310720100              Allocated to registers 
                                   1824 ;__1310720097              Allocated to registers 
                                   1825 ;__1310720094              Allocated to registers 
                                   1826 ;__1310720091              Allocated to registers 
                                   1827 ;__1310720088              Allocated to registers 
                                   1828 ;__1310720085              Allocated to registers 
                                   1829 ;mi1                       Allocated to registers 
                                   1830 ;mi10                      Allocated to registers 
                                   1831 ;s1                        Allocated to registers 
                                   1832 ;s10                       Allocated to registers 
                                   1833 ;h1                        Allocated to registers 
                                   1834 ;h10                       Allocated to registers 
                                   1835 ;printval                  Allocated with name '_rtcPrint_printval_65536_222'
                                   1836 ;__1310720086              Allocated to registers 
                                   1837 ;addr                      Allocated to registers 
                                   1838 ;__1310720079              Allocated to registers 
                                   1839 ;d                         Allocated to registers r7 
                                   1840 ;map_address               Allocated to registers 
                                   1841 ;__1310720076              Allocated to registers 
                                   1842 ;__1310720077              Allocated to registers 
                                   1843 ;addr                      Allocated to registers 
                                   1844 ;d                         Allocated to registers 
                                   1845 ;map_address               Allocated to registers 
                                   1846 ;__1310720064              Allocated to registers 
                                   1847 ;__1310720065              Allocated to registers 
                                   1848 ;map_address               Allocated to registers 
                                   1849 ;d                         Allocated to registers 
                                   1850 ;__1310720080              Allocated to registers 
                                   1851 ;map_address               Allocated to registers 
                                   1852 ;d                         Allocated to registers r7 
                                   1853 ;__1310720082              Allocated to registers 
                                   1854 ;__1310720083              Allocated to registers 
                                   1855 ;addr                      Allocated to registers 
                                   1856 ;d                         Allocated to registers 
                                   1857 ;map_address               Allocated to registers 
                                   1858 ;__1310720064              Allocated to registers 
                                   1859 ;__1310720065              Allocated to registers 
                                   1860 ;map_address               Allocated to registers 
                                   1861 ;d                         Allocated to registers 
                                   1862 ;__1310720089              Allocated to registers 
                                   1863 ;addr                      Allocated to registers 
                                   1864 ;__1310720079              Allocated to registers 
                                   1865 ;d                         Allocated to registers r6 
                                   1866 ;map_address               Allocated to registers 
                                   1867 ;__1310720076              Allocated to registers 
                                   1868 ;__1310720077              Allocated to registers 
                                   1869 ;addr                      Allocated to registers 
                                   1870 ;d                         Allocated to registers 
                                   1871 ;map_address               Allocated to registers 
                                   1872 ;__1310720064              Allocated to registers 
                                   1873 ;__1310720065              Allocated to registers 
                                   1874 ;map_address               Allocated to registers 
                                   1875 ;d                         Allocated to registers 
                                   1876 ;__1310720080              Allocated to registers 
                                   1877 ;map_address               Allocated to registers 
                                   1878 ;d                         Allocated to registers r6 
                                   1879 ;__1310720082              Allocated to registers 
                                   1880 ;__1310720083              Allocated to registers 
                                   1881 ;addr                      Allocated to registers 
                                   1882 ;d                         Allocated to registers 
                                   1883 ;map_address               Allocated to registers 
                                   1884 ;__1310720064              Allocated to registers 
                                   1885 ;__1310720065              Allocated to registers 
                                   1886 ;map_address               Allocated to registers 
                                   1887 ;d                         Allocated to registers 
                                   1888 ;__1310720092              Allocated to registers 
                                   1889 ;addr                      Allocated to registers 
                                   1890 ;__1310720079              Allocated to registers 
                                   1891 ;d                         Allocated to registers r5 
                                   1892 ;map_address               Allocated to registers 
                                   1893 ;__1310720076              Allocated to registers 
                                   1894 ;__1310720077              Allocated to registers 
                                   1895 ;addr                      Allocated to registers 
                                   1896 ;d                         Allocated to registers 
                                   1897 ;map_address               Allocated to registers 
                                   1898 ;__1310720064              Allocated to registers 
                                   1899 ;__1310720065              Allocated to registers 
                                   1900 ;map_address               Allocated to registers 
                                   1901 ;d                         Allocated to registers 
                                   1902 ;__1310720080              Allocated to registers 
                                   1903 ;map_address               Allocated to registers 
                                   1904 ;d                         Allocated to registers r5 
                                   1905 ;__1310720082              Allocated to registers 
                                   1906 ;__1310720083              Allocated to registers 
                                   1907 ;addr                      Allocated to registers 
                                   1908 ;d                         Allocated to registers 
                                   1909 ;map_address               Allocated to registers 
                                   1910 ;__1310720064              Allocated to registers 
                                   1911 ;__1310720065              Allocated to registers 
                                   1912 ;map_address               Allocated to registers 
                                   1913 ;d                         Allocated to registers 
                                   1914 ;__1310720095              Allocated to registers 
                                   1915 ;addr                      Allocated to registers 
                                   1916 ;__1310720079              Allocated to registers 
                                   1917 ;d                         Allocated to registers r4 
                                   1918 ;map_address               Allocated to registers 
                                   1919 ;__1310720076              Allocated to registers 
                                   1920 ;__1310720077              Allocated to registers 
                                   1921 ;addr                      Allocated to registers 
                                   1922 ;d                         Allocated to registers 
                                   1923 ;map_address               Allocated to registers 
                                   1924 ;__1310720064              Allocated to registers 
                                   1925 ;__1310720065              Allocated to registers 
                                   1926 ;map_address               Allocated to registers 
                                   1927 ;d                         Allocated to registers 
                                   1928 ;__1310720080              Allocated to registers 
                                   1929 ;map_address               Allocated to registers 
                                   1930 ;d                         Allocated to registers r4 
                                   1931 ;__1310720082              Allocated to registers 
                                   1932 ;__1310720083              Allocated to registers 
                                   1933 ;addr                      Allocated to registers 
                                   1934 ;d                         Allocated to registers 
                                   1935 ;map_address               Allocated to registers 
                                   1936 ;__1310720064              Allocated to registers 
                                   1937 ;__1310720065              Allocated to registers 
                                   1938 ;map_address               Allocated to registers 
                                   1939 ;d                         Allocated to registers 
                                   1940 ;__1310720098              Allocated to registers 
                                   1941 ;addr                      Allocated to registers 
                                   1942 ;__1310720079              Allocated to registers 
                                   1943 ;d                         Allocated to registers r3 
                                   1944 ;map_address               Allocated to registers 
                                   1945 ;__1310720076              Allocated to registers 
                                   1946 ;__1310720077              Allocated to registers 
                                   1947 ;addr                      Allocated to registers 
                                   1948 ;d                         Allocated to registers 
                                   1949 ;map_address               Allocated to registers 
                                   1950 ;__1310720064              Allocated to registers 
                                   1951 ;__1310720065              Allocated to registers 
                                   1952 ;map_address               Allocated to registers 
                                   1953 ;d                         Allocated to registers 
                                   1954 ;__1310720080              Allocated to registers 
                                   1955 ;map_address               Allocated to registers 
                                   1956 ;d                         Allocated to registers r3 
                                   1957 ;__1310720082              Allocated to registers 
                                   1958 ;__1310720083              Allocated to registers 
                                   1959 ;addr                      Allocated to registers 
                                   1960 ;d                         Allocated to registers 
                                   1961 ;map_address               Allocated to registers 
                                   1962 ;__1310720064              Allocated to registers 
                                   1963 ;__1310720065              Allocated to registers 
                                   1964 ;map_address               Allocated to registers 
                                   1965 ;d                         Allocated to registers 
                                   1966 ;__1310720101              Allocated to registers 
                                   1967 ;addr                      Allocated to registers 
                                   1968 ;__1310720079              Allocated to registers 
                                   1969 ;d                         Allocated to registers r2 
                                   1970 ;map_address               Allocated to registers 
                                   1971 ;__1310720076              Allocated to registers 
                                   1972 ;__1310720077              Allocated to registers 
                                   1973 ;addr                      Allocated to registers 
                                   1974 ;d                         Allocated to registers 
                                   1975 ;map_address               Allocated to registers 
                                   1976 ;__1310720064              Allocated to registers 
                                   1977 ;__1310720065              Allocated to registers 
                                   1978 ;map_address               Allocated to registers 
                                   1979 ;d                         Allocated to registers 
                                   1980 ;__1310720080              Allocated to registers 
                                   1981 ;map_address               Allocated to registers 
                                   1982 ;d                         Allocated to registers r2 
                                   1983 ;__1310720082              Allocated to registers 
                                   1984 ;__1310720083              Allocated to registers 
                                   1985 ;addr                      Allocated to registers 
                                   1986 ;d                         Allocated to registers 
                                   1987 ;map_address               Allocated to registers 
                                   1988 ;__1310720064              Allocated to registers 
                                   1989 ;__1310720065              Allocated to registers 
                                   1990 ;map_address               Allocated to registers 
                                   1991 ;d                         Allocated to registers 
                                   1992 ;------------------------------------------------------------
                                   1993 ;	.\ecen4350_lcd_v4.c:306: void rtcPrint(void)
                                   1994 ;	-----------------------------------------
                                   1995 ;	 function rtcPrint
                                   1996 ;	-----------------------------------------
      00044D                       1997 _rtcPrint:
                                   1998 ;	.\ecen4350_lcd_v4.c:310: printval[8] = '\0'; // end with address null character for string
      00044D 75 27 00         [24] 1999 	mov	(_rtcPrint_printval_65536_222 + 0x0008),#0x00
                                   2000 ;	.\ecen4350_lcd_v4.c:311: printval[2] = ':';
      000450 75 21 3A         [24] 2001 	mov	(_rtcPrint_printval_65536_222 + 0x0002),#0x3a
                                   2002 ;	.\ecen4350_lcd_v4.c:312: printval[5] = ':';
      000453 75 24 3A         [24] 2003 	mov	(_rtcPrint_printval_65536_222 + 0x0005),#0x3a
                                   2004 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2005 ;	assignBit
      000456 D2 B5            [12] 2006 	setb	_P3_5
                                   2007 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000458 90 00 0D         [24] 2008 	mov	dptr,#0x000d
      00045B 74 01            [12] 2009 	mov	a,#0x01
      00045D F0               [24] 2010 	movx	@dptr,a
                                   2011 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2012 ;	assignBit
      00045E C2 B5            [12] 2013 	clr	_P3_5
                                   2014 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000460 12 03 D2         [24] 2015 	lcall	_rtcBusy
                                   2016 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2017 ;	assignBit
      000463 D2 B5            [12] 2018 	setb	_P3_5
                                   2019 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      000465 90 00 02         [24] 2020 	mov	dptr,#0x0002
      000468 E0               [24] 2021 	movx	a,@dptr
      000469 FF               [12] 2022 	mov	r7,a
                                   2023 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2024 ;	assignBit
      00046A C2 B5            [12] 2025 	clr	_P3_5
                                   2026 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00046C 74 0F            [12] 2027 	mov	a,#0x0f
      00046E 5F               [12] 2028 	anl	a,r7
      00046F 44 30            [12] 2029 	orl	a,#0x30
      000471 FF               [12] 2030 	mov	r7,a
                                   2031 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2032 ;	assignBit
      000472 D2 B5            [12] 2033 	setb	_P3_5
                                   2034 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000474 90 00 0D         [24] 2035 	mov	dptr,#0x000d
      000477 E4               [12] 2036 	clr	a
      000478 F0               [24] 2037 	movx	@dptr,a
                                   2038 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2039 ;	assignBit
      000479 C2 B5            [12] 2040 	clr	_P3_5
                                   2041 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2042 ;	assignBit
      00047B D2 B5            [12] 2043 	setb	_P3_5
                                   2044 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00047D 90 00 0D         [24] 2045 	mov	dptr,#0x000d
      000480 74 01            [12] 2046 	mov	a,#0x01
      000482 F0               [24] 2047 	movx	@dptr,a
                                   2048 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2049 ;	assignBit
      000483 C2 B5            [12] 2050 	clr	_P3_5
                                   2051 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000485 C0 07            [24] 2052 	push	ar7
      000487 12 03 D2         [24] 2053 	lcall	_rtcBusy
                                   2054 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2055 ;	assignBit
      00048A D2 B5            [12] 2056 	setb	_P3_5
                                   2057 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      00048C 90 00 03         [24] 2058 	mov	dptr,#0x0003
      00048F E0               [24] 2059 	movx	a,@dptr
      000490 FE               [12] 2060 	mov	r6,a
                                   2061 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2062 ;	assignBit
      000491 C2 B5            [12] 2063 	clr	_P3_5
                                   2064 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000493 74 0F            [12] 2065 	mov	a,#0x0f
      000495 5E               [12] 2066 	anl	a,r6
      000496 44 30            [12] 2067 	orl	a,#0x30
      000498 FE               [12] 2068 	mov	r6,a
                                   2069 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2070 ;	assignBit
      000499 D2 B5            [12] 2071 	setb	_P3_5
                                   2072 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      00049B 90 00 0D         [24] 2073 	mov	dptr,#0x000d
      00049E E4               [12] 2074 	clr	a
      00049F F0               [24] 2075 	movx	@dptr,a
                                   2076 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2077 ;	assignBit
      0004A0 C2 B5            [12] 2078 	clr	_P3_5
                                   2079 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2080 ;	assignBit
      0004A2 D2 B5            [12] 2081 	setb	_P3_5
                                   2082 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0004A4 90 00 0D         [24] 2083 	mov	dptr,#0x000d
      0004A7 74 01            [12] 2084 	mov	a,#0x01
      0004A9 F0               [24] 2085 	movx	@dptr,a
                                   2086 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2087 ;	assignBit
      0004AA C2 B5            [12] 2088 	clr	_P3_5
                                   2089 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      0004AC C0 06            [24] 2090 	push	ar6
      0004AE 12 03 D2         [24] 2091 	lcall	_rtcBusy
                                   2092 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2093 ;	assignBit
      0004B1 D2 B5            [12] 2094 	setb	_P3_5
                                   2095 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0004B3 90 00 04         [24] 2096 	mov	dptr,#0x0004
      0004B6 E0               [24] 2097 	movx	a,@dptr
      0004B7 FD               [12] 2098 	mov	r5,a
                                   2099 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2100 ;	assignBit
      0004B8 C2 B5            [12] 2101 	clr	_P3_5
                                   2102 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004BA 74 0F            [12] 2103 	mov	a,#0x0f
      0004BC 5D               [12] 2104 	anl	a,r5
      0004BD 44 30            [12] 2105 	orl	a,#0x30
      0004BF FD               [12] 2106 	mov	r5,a
                                   2107 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2108 ;	assignBit
      0004C0 D2 B5            [12] 2109 	setb	_P3_5
                                   2110 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0004C2 90 00 0D         [24] 2111 	mov	dptr,#0x000d
      0004C5 E4               [12] 2112 	clr	a
      0004C6 F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2115 ;	assignBit
      0004C7 C2 B5            [12] 2116 	clr	_P3_5
                                   2117 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2118 ;	assignBit
      0004C9 D2 B5            [12] 2119 	setb	_P3_5
                                   2120 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0004CB 90 00 0D         [24] 2121 	mov	dptr,#0x000d
      0004CE 74 01            [12] 2122 	mov	a,#0x01
      0004D0 F0               [24] 2123 	movx	@dptr,a
                                   2124 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2125 ;	assignBit
      0004D1 C2 B5            [12] 2126 	clr	_P3_5
                                   2127 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      0004D3 C0 05            [24] 2128 	push	ar5
      0004D5 12 03 D2         [24] 2129 	lcall	_rtcBusy
                                   2130 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2131 ;	assignBit
      0004D8 D2 B5            [12] 2132 	setb	_P3_5
                                   2133 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      0004DA 90 00 05         [24] 2134 	mov	dptr,#0x0005
      0004DD E0               [24] 2135 	movx	a,@dptr
      0004DE FC               [12] 2136 	mov	r4,a
                                   2137 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2138 ;	assignBit
      0004DF C2 B5            [12] 2139 	clr	_P3_5
                                   2140 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004E1 74 0F            [12] 2141 	mov	a,#0x0f
      0004E3 5C               [12] 2142 	anl	a,r4
      0004E4 44 30            [12] 2143 	orl	a,#0x30
      0004E6 FC               [12] 2144 	mov	r4,a
                                   2145 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2146 ;	assignBit
      0004E7 D2 B5            [12] 2147 	setb	_P3_5
                                   2148 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0004E9 90 00 0D         [24] 2149 	mov	dptr,#0x000d
      0004EC E4               [12] 2150 	clr	a
      0004ED F0               [24] 2151 	movx	@dptr,a
                                   2152 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2153 ;	assignBit
      0004EE C2 B5            [12] 2154 	clr	_P3_5
                                   2155 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2156 ;	assignBit
      0004F0 D2 B5            [12] 2157 	setb	_P3_5
                                   2158 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0004F2 90 00 0D         [24] 2159 	mov	dptr,#0x000d
      0004F5 74 01            [12] 2160 	mov	a,#0x01
      0004F7 F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2163 ;	assignBit
      0004F8 C2 B5            [12] 2164 	clr	_P3_5
                                   2165 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      0004FA C0 04            [24] 2166 	push	ar4
      0004FC 12 03 D2         [24] 2167 	lcall	_rtcBusy
                                   2168 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2169 ;	assignBit
      0004FF D2 B5            [12] 2170 	setb	_P3_5
                                   2171 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      000501 90 00 00         [24] 2172 	mov	dptr,#0x0000
      000504 E0               [24] 2173 	movx	a,@dptr
      000505 FB               [12] 2174 	mov	r3,a
                                   2175 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2176 ;	assignBit
      000506 C2 B5            [12] 2177 	clr	_P3_5
                                   2178 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000508 74 0F            [12] 2179 	mov	a,#0x0f
      00050A 5B               [12] 2180 	anl	a,r3
      00050B 44 30            [12] 2181 	orl	a,#0x30
      00050D FB               [12] 2182 	mov	r3,a
                                   2183 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2184 ;	assignBit
      00050E D2 B5            [12] 2185 	setb	_P3_5
                                   2186 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000510 90 00 0D         [24] 2187 	mov	dptr,#0x000d
      000513 E4               [12] 2188 	clr	a
      000514 F0               [24] 2189 	movx	@dptr,a
                                   2190 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2191 ;	assignBit
      000515 C2 B5            [12] 2192 	clr	_P3_5
                                   2193 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2194 ;	assignBit
      000517 D2 B5            [12] 2195 	setb	_P3_5
                                   2196 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000519 90 00 0D         [24] 2197 	mov	dptr,#0x000d
      00051C 74 01            [12] 2198 	mov	a,#0x01
      00051E F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2201 ;	assignBit
      00051F C2 B5            [12] 2202 	clr	_P3_5
                                   2203 ;	.\ecen4350_lcd_v4.c:298: rtcBusy();
      000521 C0 03            [24] 2204 	push	ar3
      000523 12 03 D2         [24] 2205 	lcall	_rtcBusy
      000526 D0 03            [24] 2206 	pop	ar3
      000528 D0 04            [24] 2207 	pop	ar4
      00052A D0 05            [24] 2208 	pop	ar5
      00052C D0 06            [24] 2209 	pop	ar6
      00052E D0 07            [24] 2210 	pop	ar7
                                   2211 ;	.\ecen4350_lcd_v4.c:101: IOM = 1;
                                   2212 ;	assignBit
      000530 D2 B5            [12] 2213 	setb	_P3_5
                                   2214 ;	.\ecen4350_lcd_v4.c:102: d = *map_address;
      000532 90 00 01         [24] 2215 	mov	dptr,#0x0001
      000535 E0               [24] 2216 	movx	a,@dptr
      000536 FA               [12] 2217 	mov	r2,a
                                   2218 ;	.\ecen4350_lcd_v4.c:103: IOM = 0;
                                   2219 ;	assignBit
      000537 C2 B5            [12] 2220 	clr	_P3_5
                                   2221 ;	.\ecen4350_lcd_v4.c:301: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000539 74 0F            [12] 2222 	mov	a,#0x0f
      00053B 5A               [12] 2223 	anl	a,r2
      00053C 44 30            [12] 2224 	orl	a,#0x30
      00053E FA               [12] 2225 	mov	r2,a
                                   2226 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                   2227 ;	assignBit
      00053F D2 B5            [12] 2228 	setb	_P3_5
                                   2229 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      000541 90 00 0D         [24] 2230 	mov	dptr,#0x000d
      000544 E4               [12] 2231 	clr	a
      000545 F0               [24] 2232 	movx	@dptr,a
                                   2233 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                   2234 ;	assignBit
      000546 C2 B5            [12] 2235 	clr	_P3_5
                                   2236 ;	.\ecen4350_lcd_v4.c:326: printval[0] = h10;
      000548 8C 1F            [24] 2237 	mov	_rtcPrint_printval_65536_222,r4
                                   2238 ;	.\ecen4350_lcd_v4.c:327: printval[1] = h1;
      00054A 8D 20            [24] 2239 	mov	(_rtcPrint_printval_65536_222 + 0x0001),r5
                                   2240 ;	.\ecen4350_lcd_v4.c:328: printval[3] = mi10;
      00054C 8E 22            [24] 2241 	mov	(_rtcPrint_printval_65536_222 + 0x0003),r6
                                   2242 ;	.\ecen4350_lcd_v4.c:329: printval[4] = mi1;
      00054E 8F 23            [24] 2243 	mov	(_rtcPrint_printval_65536_222 + 0x0004),r7
                                   2244 ;	.\ecen4350_lcd_v4.c:330: printval[6] = s10;
      000550 8A 25            [24] 2245 	mov	(_rtcPrint_printval_65536_222 + 0x0006),r2
                                   2246 ;	.\ecen4350_lcd_v4.c:331: printval[7] = s1;
      000552 8B 26            [24] 2247 	mov	(_rtcPrint_printval_65536_222 + 0x0007),r3
                                   2248 ;	.\ecen4350_lcd_v4.c:332: LCD_string_write(printval);
      000554 90 00 1F         [24] 2249 	mov	dptr,#_rtcPrint_printval_65536_222
      000557 75 F0 40         [24] 2250 	mov	b,#0x40
                                   2251 ;	.\ecen4350_lcd_v4.c:333: }
      00055A 02 10 77         [24] 2252 	ljmp	_LCD_string_write
                                   2253 ;------------------------------------------------------------
                                   2254 ;Allocation info for local variables in function 'setCursor'
                                   2255 ;------------------------------------------------------------
                                   2256 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2257 ;x                         Allocated to registers 
                                   2258 ;------------------------------------------------------------
                                   2259 ;	.\ecen4350_lcd_v4.c:335: void setCursor(u16 x, u16 y)
                                   2260 ;	-----------------------------------------
                                   2261 ;	 function setCursor
                                   2262 ;	-----------------------------------------
      00055D                       2263 _setCursor:
      00055D 85 82 10         [24] 2264 	mov	_cursor_x,dpl
      000560 85 83 11         [24] 2265 	mov	(_cursor_x + 1),dph
                                   2266 ;	.\ecen4350_lcd_v4.c:338: cursor_y = y;
      000563 85 6B 12         [24] 2267 	mov	_cursor_y,_setCursor_PARM_2
      000566 85 6C 13         [24] 2268 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2269 ;	.\ecen4350_lcd_v4.c:339: }
      000569 22               [24] 2270 	ret
                                   2271 ;------------------------------------------------------------
                                   2272 ;Allocation info for local variables in function 'setTextColor'
                                   2273 ;------------------------------------------------------------
                                   2274 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2275 ;x                         Allocated to registers 
                                   2276 ;------------------------------------------------------------
                                   2277 ;	.\ecen4350_lcd_v4.c:341: void setTextColor(u16 x, u16 y)
                                   2278 ;	-----------------------------------------
                                   2279 ;	 function setTextColor
                                   2280 ;	-----------------------------------------
      00056A                       2281 _setTextColor:
      00056A 85 82 16         [24] 2282 	mov	_textcolor,dpl
      00056D 85 83 17         [24] 2283 	mov	(_textcolor + 1),dph
                                   2284 ;	.\ecen4350_lcd_v4.c:344: textbgcolor = y;
      000570 85 6B 18         [24] 2285 	mov	_textbgcolor,_setTextColor_PARM_2
      000573 85 6C 19         [24] 2286 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2287 ;	.\ecen4350_lcd_v4.c:345: }
      000576 22               [24] 2288 	ret
                                   2289 ;------------------------------------------------------------
                                   2290 ;Allocation info for local variables in function 'setTextSize'
                                   2291 ;------------------------------------------------------------
                                   2292 ;s                         Allocated to registers r7 
                                   2293 ;------------------------------------------------------------
                                   2294 ;	.\ecen4350_lcd_v4.c:348: void setTextSize(u8 s)
                                   2295 ;	-----------------------------------------
                                   2296 ;	 function setTextSize
                                   2297 ;	-----------------------------------------
      000577                       2298 _setTextSize:
                                   2299 ;	.\ecen4350_lcd_v4.c:350: if (s > 8)
      000577 E5 82            [12] 2300 	mov	a,dpl
      000579 FF               [12] 2301 	mov	r7,a
      00057A 24 F7            [12] 2302 	add	a,#0xff - 0x08
      00057C 50 01            [24] 2303 	jnc	00102$
                                   2304 ;	.\ecen4350_lcd_v4.c:351: return;
      00057E 22               [24] 2305 	ret
      00057F                       2306 00102$:
                                   2307 ;	.\ecen4350_lcd_v4.c:352: textsize = (s > 0) ? s : 1;
      00057F EF               [12] 2308 	mov	a,r7
      000580 60 06            [24] 2309 	jz	00105$
      000582 8F 06            [24] 2310 	mov	ar6,r7
      000584 7F 00            [12] 2311 	mov	r7,#0x00
      000586 80 04            [24] 2312 	sjmp	00106$
      000588                       2313 00105$:
      000588 7E 01            [12] 2314 	mov	r6,#0x01
      00058A 7F 00            [12] 2315 	mov	r7,#0x00
      00058C                       2316 00106$:
      00058C 8E 14            [24] 2317 	mov	_textsize,r6
                                   2318 ;	.\ecen4350_lcd_v4.c:353: }
      00058E 22               [24] 2319 	ret
                                   2320 ;------------------------------------------------------------
                                   2321 ;Allocation info for local variables in function 'setRotation'
                                   2322 ;------------------------------------------------------------
                                   2323 ;flag                      Allocated to registers r7 
                                   2324 ;------------------------------------------------------------
                                   2325 ;	.\ecen4350_lcd_v4.c:355: void setRotation(u8 flag)
                                   2326 ;	-----------------------------------------
                                   2327 ;	 function setRotation
                                   2328 ;	-----------------------------------------
      00058F                       2329 _setRotation:
                                   2330 ;	.\ecen4350_lcd_v4.c:357: switch (flag)
      00058F E5 82            [12] 2331 	mov	a,dpl
      000591 FF               [12] 2332 	mov	r7,a
      000592 24 FC            [12] 2333 	add	a,#0xff - 0x03
      000594 40 4E            [24] 2334 	jc	00105$
      000596 EF               [12] 2335 	mov	a,r7
      000597 2F               [12] 2336 	add	a,r7
                                   2337 ;	.\ecen4350_lcd_v4.c:359: case 0:
      000598 90 05 9C         [24] 2338 	mov	dptr,#00115$
      00059B 73               [24] 2339 	jmp	@a+dptr
      00059C                       2340 00115$:
      00059C 80 06            [24] 2341 	sjmp	00101$
      00059E 80 14            [24] 2342 	sjmp	00102$
      0005A0 80 22            [24] 2343 	sjmp	00103$
      0005A2 80 30            [24] 2344 	sjmp	00104$
      0005A4                       2345 00101$:
                                   2346 ;	.\ecen4350_lcd_v4.c:360: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0005A4 7F 48            [12] 2347 	mov	r7,#0x48
                                   2348 ;	.\ecen4350_lcd_v4.c:361: _width = TFTWIDTH;
      0005A6 75 1A F0         [24] 2349 	mov	__width,#0xf0
      0005A9 75 1B 00         [24] 2350 	mov	(__width + 1),#0x00
                                   2351 ;	.\ecen4350_lcd_v4.c:362: _height = TFTHEIGHT;
      0005AC 75 1C 40         [24] 2352 	mov	__height,#0x40
      0005AF 75 1D 01         [24] 2353 	mov	(__height + 1),#0x01
                                   2354 ;	.\ecen4350_lcd_v4.c:363: break;
                                   2355 ;	.\ecen4350_lcd_v4.c:364: case 1:
      0005B2 80 3E            [24] 2356 	sjmp	00106$
      0005B4                       2357 00102$:
                                   2358 ;	.\ecen4350_lcd_v4.c:365: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0005B4 7F 28            [12] 2359 	mov	r7,#0x28
                                   2360 ;	.\ecen4350_lcd_v4.c:366: _width = TFTHEIGHT;
      0005B6 75 1A 40         [24] 2361 	mov	__width,#0x40
      0005B9 75 1B 01         [24] 2362 	mov	(__width + 1),#0x01
                                   2363 ;	.\ecen4350_lcd_v4.c:367: _height = TFTWIDTH;
      0005BC 75 1C F0         [24] 2364 	mov	__height,#0xf0
      0005BF 75 1D 00         [24] 2365 	mov	(__height + 1),#0x00
                                   2366 ;	.\ecen4350_lcd_v4.c:368: break;
                                   2367 ;	.\ecen4350_lcd_v4.c:369: case 2:
      0005C2 80 2E            [24] 2368 	sjmp	00106$
      0005C4                       2369 00103$:
                                   2370 ;	.\ecen4350_lcd_v4.c:370: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0005C4 7F 88            [12] 2371 	mov	r7,#0x88
                                   2372 ;	.\ecen4350_lcd_v4.c:371: _width = TFTWIDTH;
      0005C6 75 1A F0         [24] 2373 	mov	__width,#0xf0
      0005C9 75 1B 00         [24] 2374 	mov	(__width + 1),#0x00
                                   2375 ;	.\ecen4350_lcd_v4.c:372: _height = TFTHEIGHT;
      0005CC 75 1C 40         [24] 2376 	mov	__height,#0x40
      0005CF 75 1D 01         [24] 2377 	mov	(__height + 1),#0x01
                                   2378 ;	.\ecen4350_lcd_v4.c:373: break;
                                   2379 ;	.\ecen4350_lcd_v4.c:374: case 3:
      0005D2 80 1E            [24] 2380 	sjmp	00106$
      0005D4                       2381 00104$:
                                   2382 ;	.\ecen4350_lcd_v4.c:375: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0005D4 7F E8            [12] 2383 	mov	r7,#0xe8
                                   2384 ;	.\ecen4350_lcd_v4.c:376: _width = TFTHEIGHT;
      0005D6 75 1A 40         [24] 2385 	mov	__width,#0x40
      0005D9 75 1B 01         [24] 2386 	mov	(__width + 1),#0x01
                                   2387 ;	.\ecen4350_lcd_v4.c:377: _height = TFTWIDTH;
      0005DC 75 1C F0         [24] 2388 	mov	__height,#0xf0
      0005DF 75 1D 00         [24] 2389 	mov	(__height + 1),#0x00
                                   2390 ;	.\ecen4350_lcd_v4.c:378: break;
                                   2391 ;	.\ecen4350_lcd_v4.c:379: default:
      0005E2 80 0E            [24] 2392 	sjmp	00106$
      0005E4                       2393 00105$:
                                   2394 ;	.\ecen4350_lcd_v4.c:380: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0005E4 7F 48            [12] 2395 	mov	r7,#0x48
                                   2396 ;	.\ecen4350_lcd_v4.c:381: _width = TFTWIDTH;
      0005E6 75 1A F0         [24] 2397 	mov	__width,#0xf0
      0005E9 75 1B 00         [24] 2398 	mov	(__width + 1),#0x00
                                   2399 ;	.\ecen4350_lcd_v4.c:382: _height = TFTHEIGHT;
      0005EC 75 1C 40         [24] 2400 	mov	__height,#0x40
      0005EF 75 1D 01         [24] 2401 	mov	(__height + 1),#0x01
                                   2402 ;	.\ecen4350_lcd_v4.c:384: }
      0005F2                       2403 00106$:
                                   2404 ;	.\ecen4350_lcd_v4.c:385: writeRegister8(ILI9341_MEMCONTROL, flag);
      0005F2 8F 6B            [24] 2405 	mov	_writeRegister8_PARM_2,r7
      0005F4 75 82 36         [24] 2406 	mov	dpl,#0x36
                                   2407 ;	.\ecen4350_lcd_v4.c:386: }
      0005F7 02 01 DC         [24] 2408 	ljmp	_writeRegister8
                                   2409 ;------------------------------------------------------------
                                   2410 ;Allocation info for local variables in function 'setAddress'
                                   2411 ;------------------------------------------------------------
                                   2412 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2413 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2414 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2415 ;x1                        Allocated to registers r6 r7 
                                   2416 ;------------------------------------------------------------
                                   2417 ;	.\ecen4350_lcd_v4.c:389: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2418 ;	-----------------------------------------
                                   2419 ;	 function setAddress
                                   2420 ;	-----------------------------------------
      0005FA                       2421 _setAddress:
      0005FA AE 82            [24] 2422 	mov	r6,dpl
      0005FC AF 83            [24] 2423 	mov	r7,dph
                                   2424 ;	.\ecen4350_lcd_v4.c:392: write8Reg(0x2A);
                                   2425 ;	assignBit
      0005FE C2 B4            [12] 2426 	clr	_P3_4
                                   2427 ;	assignBit
      000600 D2 B5            [12] 2428 	setb	_P3_5
      000602 85 0A 82         [24] 2429 	mov	dpl,_lcd_address
      000605 85 0B 83         [24] 2430 	mov	dph,(_lcd_address + 1)
      000608 74 2A            [12] 2431 	mov	a,#0x2a
      00060A F0               [24] 2432 	movx	@dptr,a
                                   2433 ;	assignBit
      00060B C2 B5            [12] 2434 	clr	_P3_5
                                   2435 ;	.\ecen4350_lcd_v4.c:393: write8Data(x1 >> 8);
                                   2436 ;	assignBit
      00060D D2 B4            [12] 2437 	setb	_P3_4
                                   2438 ;	assignBit
      00060F D2 B5            [12] 2439 	setb	_P3_5
      000611 85 0A 82         [24] 2440 	mov	dpl,_lcd_address
      000614 85 0B 83         [24] 2441 	mov	dph,(_lcd_address + 1)
      000617 8F 05            [24] 2442 	mov	ar5,r7
      000619 ED               [12] 2443 	mov	a,r5
      00061A F0               [24] 2444 	movx	@dptr,a
                                   2445 ;	assignBit
      00061B C2 B5            [12] 2446 	clr	_P3_5
                                   2447 ;	.\ecen4350_lcd_v4.c:394: write8Data(x1);
                                   2448 ;	assignBit
      00061D D2 B4            [12] 2449 	setb	_P3_4
                                   2450 ;	assignBit
      00061F D2 B5            [12] 2451 	setb	_P3_5
      000621 85 0A 82         [24] 2452 	mov	dpl,_lcd_address
      000624 85 0B 83         [24] 2453 	mov	dph,(_lcd_address + 1)
      000627 EE               [12] 2454 	mov	a,r6
      000628 F0               [24] 2455 	movx	@dptr,a
                                   2456 ;	assignBit
      000629 C2 B5            [12] 2457 	clr	_P3_5
                                   2458 ;	.\ecen4350_lcd_v4.c:395: write8Data(x2 >> 8);
                                   2459 ;	assignBit
      00062B D2 B4            [12] 2460 	setb	_P3_4
                                   2461 ;	assignBit
      00062D D2 B5            [12] 2462 	setb	_P3_5
      00062F 85 0A 82         [24] 2463 	mov	dpl,_lcd_address
      000632 85 0B 83         [24] 2464 	mov	dph,(_lcd_address + 1)
      000635 E5 6E            [12] 2465 	mov	a,(_setAddress_PARM_3 + 1)
      000637 F0               [24] 2466 	movx	@dptr,a
                                   2467 ;	assignBit
      000638 C2 B5            [12] 2468 	clr	_P3_5
                                   2469 ;	.\ecen4350_lcd_v4.c:396: write8Data(x2);
                                   2470 ;	assignBit
      00063A D2 B4            [12] 2471 	setb	_P3_4
                                   2472 ;	assignBit
      00063C D2 B5            [12] 2473 	setb	_P3_5
      00063E 85 0A 82         [24] 2474 	mov	dpl,_lcd_address
      000641 85 0B 83         [24] 2475 	mov	dph,(_lcd_address + 1)
      000644 E5 6D            [12] 2476 	mov	a,_setAddress_PARM_3
      000646 F0               [24] 2477 	movx	@dptr,a
                                   2478 ;	assignBit
      000647 C2 B5            [12] 2479 	clr	_P3_5
                                   2480 ;	.\ecen4350_lcd_v4.c:398: write8Reg(0x2B);
                                   2481 ;	assignBit
      000649 C2 B4            [12] 2482 	clr	_P3_4
                                   2483 ;	assignBit
      00064B D2 B5            [12] 2484 	setb	_P3_5
      00064D 85 0A 82         [24] 2485 	mov	dpl,_lcd_address
      000650 85 0B 83         [24] 2486 	mov	dph,(_lcd_address + 1)
      000653 74 2B            [12] 2487 	mov	a,#0x2b
      000655 F0               [24] 2488 	movx	@dptr,a
                                   2489 ;	assignBit
      000656 C2 B5            [12] 2490 	clr	_P3_5
                                   2491 ;	.\ecen4350_lcd_v4.c:399: write8Data(y1 >> 8);
                                   2492 ;	assignBit
      000658 D2 B4            [12] 2493 	setb	_P3_4
                                   2494 ;	assignBit
      00065A D2 B5            [12] 2495 	setb	_P3_5
      00065C 85 0A 82         [24] 2496 	mov	dpl,_lcd_address
      00065F 85 0B 83         [24] 2497 	mov	dph,(_lcd_address + 1)
      000662 E5 6C            [12] 2498 	mov	a,(_setAddress_PARM_2 + 1)
      000664 F0               [24] 2499 	movx	@dptr,a
                                   2500 ;	assignBit
      000665 C2 B5            [12] 2501 	clr	_P3_5
                                   2502 ;	.\ecen4350_lcd_v4.c:400: write8Data(y1);
                                   2503 ;	assignBit
      000667 D2 B4            [12] 2504 	setb	_P3_4
                                   2505 ;	assignBit
      000669 D2 B5            [12] 2506 	setb	_P3_5
      00066B 85 0A 82         [24] 2507 	mov	dpl,_lcd_address
      00066E 85 0B 83         [24] 2508 	mov	dph,(_lcd_address + 1)
      000671 E5 6B            [12] 2509 	mov	a,_setAddress_PARM_2
      000673 F0               [24] 2510 	movx	@dptr,a
                                   2511 ;	assignBit
      000674 C2 B5            [12] 2512 	clr	_P3_5
                                   2513 ;	.\ecen4350_lcd_v4.c:401: write8Data(y2 >> 8);
                                   2514 ;	assignBit
      000676 D2 B4            [12] 2515 	setb	_P3_4
                                   2516 ;	assignBit
      000678 D2 B5            [12] 2517 	setb	_P3_5
      00067A 85 0A 82         [24] 2518 	mov	dpl,_lcd_address
      00067D 85 0B 83         [24] 2519 	mov	dph,(_lcd_address + 1)
      000680 E5 70            [12] 2520 	mov	a,(_setAddress_PARM_4 + 1)
      000682 F0               [24] 2521 	movx	@dptr,a
                                   2522 ;	assignBit
      000683 C2 B5            [12] 2523 	clr	_P3_5
                                   2524 ;	.\ecen4350_lcd_v4.c:402: write8Data(y2);
                                   2525 ;	assignBit
      000685 D2 B4            [12] 2526 	setb	_P3_4
                                   2527 ;	assignBit
      000687 D2 B5            [12] 2528 	setb	_P3_5
      000689 85 0A 82         [24] 2529 	mov	dpl,_lcd_address
      00068C 85 0B 83         [24] 2530 	mov	dph,(_lcd_address + 1)
      00068F E5 6F            [12] 2531 	mov	a,_setAddress_PARM_4
      000691 F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	assignBit
      000692 C2 B5            [12] 2534 	clr	_P3_5
                                   2535 ;	.\ecen4350_lcd_v4.c:405: }
      000694 22               [24] 2536 	ret
                                   2537 ;------------------------------------------------------------
                                   2538 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2539 ;------------------------------------------------------------
                                   2540 ;	.\ecen4350_lcd_v4.c:407: void TFT_LCD_INIT(void)
                                   2541 ;	-----------------------------------------
                                   2542 ;	 function TFT_LCD_INIT
                                   2543 ;	-----------------------------------------
      000695                       2544 _TFT_LCD_INIT:
                                   2545 ;	.\ecen4350_lcd_v4.c:411: _width = TFTWIDTH;
      000695 75 1A F0         [24] 2546 	mov	__width,#0xf0
      000698 75 1B 00         [24] 2547 	mov	(__width + 1),#0x00
                                   2548 ;	.\ecen4350_lcd_v4.c:412: _height = TFTHEIGHT;
      00069B 75 1C 40         [24] 2549 	mov	__height,#0x40
      00069E 75 1D 01         [24] 2550 	mov	(__height + 1),#0x01
                                   2551 ;	.\ecen4350_lcd_v4.c:415: IOM = 0;
                                   2552 ;	assignBit
      0006A1 C2 B5            [12] 2553 	clr	_P3_5
                                   2554 ;	.\ecen4350_lcd_v4.c:417: CD = 1;
                                   2555 ;	assignBit
      0006A3 D2 B4            [12] 2556 	setb	_P3_4
                                   2557 ;	.\ecen4350_lcd_v4.c:419: write8Reg(0x00);
                                   2558 ;	assignBit
      0006A5 C2 B4            [12] 2559 	clr	_P3_4
                                   2560 ;	assignBit
      0006A7 D2 B5            [12] 2561 	setb	_P3_5
      0006A9 85 0A 82         [24] 2562 	mov	dpl,_lcd_address
      0006AC 85 0B 83         [24] 2563 	mov	dph,(_lcd_address + 1)
      0006AF E4               [12] 2564 	clr	a
      0006B0 F0               [24] 2565 	movx	@dptr,a
                                   2566 ;	assignBit
      0006B1 C2 B5            [12] 2567 	clr	_P3_5
                                   2568 ;	.\ecen4350_lcd_v4.c:420: write8Data(0x00);
                                   2569 ;	assignBit
      0006B3 D2 B4            [12] 2570 	setb	_P3_4
                                   2571 ;	assignBit
      0006B5 D2 B5            [12] 2572 	setb	_P3_5
      0006B7 85 0A 82         [24] 2573 	mov	dpl,_lcd_address
      0006BA 85 0B 83         [24] 2574 	mov	dph,(_lcd_address + 1)
      0006BD E4               [12] 2575 	clr	a
      0006BE F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	assignBit
      0006BF C2 B5            [12] 2578 	clr	_P3_5
                                   2579 ;	.\ecen4350_lcd_v4.c:421: write8Data(0x00);
                                   2580 ;	assignBit
      0006C1 D2 B4            [12] 2581 	setb	_P3_4
                                   2582 ;	assignBit
      0006C3 D2 B5            [12] 2583 	setb	_P3_5
      0006C5 85 0A 82         [24] 2584 	mov	dpl,_lcd_address
      0006C8 85 0B 83         [24] 2585 	mov	dph,(_lcd_address + 1)
      0006CB E4               [12] 2586 	clr	a
      0006CC F0               [24] 2587 	movx	@dptr,a
                                   2588 ;	assignBit
      0006CD C2 B5            [12] 2589 	clr	_P3_5
                                   2590 ;	.\ecen4350_lcd_v4.c:422: write8Data(0x00);
                                   2591 ;	assignBit
      0006CF D2 B4            [12] 2592 	setb	_P3_4
                                   2593 ;	assignBit
      0006D1 D2 B5            [12] 2594 	setb	_P3_5
      0006D3 85 0A 82         [24] 2595 	mov	dpl,_lcd_address
      0006D6 85 0B 83         [24] 2596 	mov	dph,(_lcd_address + 1)
      0006D9 E4               [12] 2597 	clr	a
      0006DA F0               [24] 2598 	movx	@dptr,a
                                   2599 ;	assignBit
      0006DB C2 B5            [12] 2600 	clr	_P3_5
                                   2601 ;	.\ecen4350_lcd_v4.c:424: delay(100);						// changed from 200 to 100
      0006DD 90 00 64         [24] 2602 	mov	dptr,#0x0064
      0006E0 12 01 87         [24] 2603 	lcall	_delay
                                   2604 ;	.\ecen4350_lcd_v4.c:428: writeRegister8(ILI9341_SOFTRESET, 0);
      0006E3 75 6B 00         [24] 2605 	mov	_writeRegister8_PARM_2,#0x00
      0006E6 75 82 01         [24] 2606 	mov	dpl,#0x01
      0006E9 12 01 DC         [24] 2607 	lcall	_writeRegister8
                                   2608 ;	.\ecen4350_lcd_v4.c:429: delay(50);
      0006EC 90 00 32         [24] 2609 	mov	dptr,#0x0032
      0006EF 12 01 87         [24] 2610 	lcall	_delay
                                   2611 ;	.\ecen4350_lcd_v4.c:430: writeRegister8(ILI9341_DISPLAYOFF, 0);
      0006F2 75 6B 00         [24] 2612 	mov	_writeRegister8_PARM_2,#0x00
      0006F5 75 82 28         [24] 2613 	mov	dpl,#0x28
      0006F8 12 01 DC         [24] 2614 	lcall	_writeRegister8
                                   2615 ;	.\ecen4350_lcd_v4.c:431: delay(10);
      0006FB 90 00 0A         [24] 2616 	mov	dptr,#0x000a
      0006FE 12 01 87         [24] 2617 	lcall	_delay
                                   2618 ;	.\ecen4350_lcd_v4.c:433: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000701 75 6B 23         [24] 2619 	mov	_writeRegister8_PARM_2,#0x23
      000704 75 82 C0         [24] 2620 	mov	dpl,#0xc0
      000707 12 01 DC         [24] 2621 	lcall	_writeRegister8
                                   2622 ;	.\ecen4350_lcd_v4.c:434: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00070A 75 6B 11         [24] 2623 	mov	_writeRegister8_PARM_2,#0x11
      00070D 75 82 C1         [24] 2624 	mov	dpl,#0xc1
      000710 12 01 DC         [24] 2625 	lcall	_writeRegister8
                                   2626 ;	.\ecen4350_lcd_v4.c:435: write8Reg(ILI9341_VCOMCONTROL1);
                                   2627 ;	assignBit
      000713 C2 B4            [12] 2628 	clr	_P3_4
                                   2629 ;	assignBit
      000715 D2 B5            [12] 2630 	setb	_P3_5
      000717 85 0A 82         [24] 2631 	mov	dpl,_lcd_address
      00071A 85 0B 83         [24] 2632 	mov	dph,(_lcd_address + 1)
      00071D 74 C5            [12] 2633 	mov	a,#0xc5
      00071F F0               [24] 2634 	movx	@dptr,a
                                   2635 ;	assignBit
      000720 C2 B5            [12] 2636 	clr	_P3_5
                                   2637 ;	.\ecen4350_lcd_v4.c:436: write8Data(0x3d);
                                   2638 ;	assignBit
      000722 D2 B4            [12] 2639 	setb	_P3_4
                                   2640 ;	assignBit
      000724 D2 B5            [12] 2641 	setb	_P3_5
      000726 85 0A 82         [24] 2642 	mov	dpl,_lcd_address
      000729 85 0B 83         [24] 2643 	mov	dph,(_lcd_address + 1)
      00072C 74 3D            [12] 2644 	mov	a,#0x3d
      00072E F0               [24] 2645 	movx	@dptr,a
                                   2646 ;	assignBit
      00072F C2 B5            [12] 2647 	clr	_P3_5
                                   2648 ;	.\ecen4350_lcd_v4.c:437: write8Data(0x30);
                                   2649 ;	assignBit
      000731 D2 B4            [12] 2650 	setb	_P3_4
                                   2651 ;	assignBit
      000733 D2 B5            [12] 2652 	setb	_P3_5
      000735 85 0A 82         [24] 2653 	mov	dpl,_lcd_address
      000738 85 0B 83         [24] 2654 	mov	dph,(_lcd_address + 1)
      00073B 74 30            [12] 2655 	mov	a,#0x30
      00073D F0               [24] 2656 	movx	@dptr,a
                                   2657 ;	assignBit
      00073E C2 B5            [12] 2658 	clr	_P3_5
                                   2659 ;	.\ecen4350_lcd_v4.c:438: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000740 75 6B AA         [24] 2660 	mov	_writeRegister8_PARM_2,#0xaa
      000743 75 82 C7         [24] 2661 	mov	dpl,#0xc7
      000746 12 01 DC         [24] 2662 	lcall	_writeRegister8
                                   2663 ;	.\ecen4350_lcd_v4.c:439: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000749 75 6B 88         [24] 2664 	mov	_writeRegister8_PARM_2,#0x88
      00074C 75 82 36         [24] 2665 	mov	dpl,#0x36
      00074F 12 01 DC         [24] 2666 	lcall	_writeRegister8
                                   2667 ;	.\ecen4350_lcd_v4.c:440: write8Reg(ILI9341_PIXELFORMAT);
                                   2668 ;	assignBit
      000752 C2 B4            [12] 2669 	clr	_P3_4
                                   2670 ;	assignBit
      000754 D2 B5            [12] 2671 	setb	_P3_5
      000756 85 0A 82         [24] 2672 	mov	dpl,_lcd_address
      000759 85 0B 83         [24] 2673 	mov	dph,(_lcd_address + 1)
      00075C 74 3A            [12] 2674 	mov	a,#0x3a
      00075E F0               [24] 2675 	movx	@dptr,a
                                   2676 ;	assignBit
      00075F C2 B5            [12] 2677 	clr	_P3_5
                                   2678 ;	.\ecen4350_lcd_v4.c:441: write8Data(0x55);
                                   2679 ;	assignBit
      000761 D2 B4            [12] 2680 	setb	_P3_4
                                   2681 ;	assignBit
      000763 D2 B5            [12] 2682 	setb	_P3_5
      000765 85 0A 82         [24] 2683 	mov	dpl,_lcd_address
      000768 85 0B 83         [24] 2684 	mov	dph,(_lcd_address + 1)
      00076B 74 55            [12] 2685 	mov	a,#0x55
      00076D F0               [24] 2686 	movx	@dptr,a
                                   2687 ;	assignBit
      00076E C2 B5            [12] 2688 	clr	_P3_5
                                   2689 ;	.\ecen4350_lcd_v4.c:442: write8Data(0x00);
                                   2690 ;	assignBit
      000770 D2 B4            [12] 2691 	setb	_P3_4
                                   2692 ;	assignBit
      000772 D2 B5            [12] 2693 	setb	_P3_5
      000774 85 0A 82         [24] 2694 	mov	dpl,_lcd_address
      000777 85 0B 83         [24] 2695 	mov	dph,(_lcd_address + 1)
      00077A E4               [12] 2696 	clr	a
      00077B F0               [24] 2697 	movx	@dptr,a
                                   2698 ;	assignBit
      00077C C2 B5            [12] 2699 	clr	_P3_5
                                   2700 ;	.\ecen4350_lcd_v4.c:443: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      00077E 75 6B 1B         [24] 2701 	mov	_writeRegister16_PARM_2,#0x1b
      000781 75 6C 00         [24] 2702 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000784 90 00 B1         [24] 2703 	mov	dptr,#0x00b1
      000787 12 01 FC         [24] 2704 	lcall	_writeRegister16
                                   2705 ;	.\ecen4350_lcd_v4.c:445: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00078A 75 6B 07         [24] 2706 	mov	_writeRegister8_PARM_2,#0x07
      00078D 75 82 B7         [24] 2707 	mov	dpl,#0xb7
      000790 12 01 DC         [24] 2708 	lcall	_writeRegister8
                                   2709 ;	.\ecen4350_lcd_v4.c:448: writeRegister8(ILI9341_SLEEPOUT, 0);
      000793 75 6B 00         [24] 2710 	mov	_writeRegister8_PARM_2,#0x00
      000796 75 82 11         [24] 2711 	mov	dpl,#0x11
      000799 12 01 DC         [24] 2712 	lcall	_writeRegister8
                                   2713 ;	.\ecen4350_lcd_v4.c:449: delay(100);								// changed from 150 to 100
      00079C 90 00 64         [24] 2714 	mov	dptr,#0x0064
      00079F 12 01 87         [24] 2715 	lcall	_delay
                                   2716 ;	.\ecen4350_lcd_v4.c:450: writeRegister8(ILI9341_DISPLAYON, 0);
      0007A2 75 6B 00         [24] 2717 	mov	_writeRegister8_PARM_2,#0x00
      0007A5 75 82 29         [24] 2718 	mov	dpl,#0x29
      0007A8 12 01 DC         [24] 2719 	lcall	_writeRegister8
                                   2720 ;	.\ecen4350_lcd_v4.c:451: delay(150);								// changed from 200 to 150
      0007AB 90 00 96         [24] 2721 	mov	dptr,#0x0096
      0007AE 12 01 87         [24] 2722 	lcall	_delay
                                   2723 ;	.\ecen4350_lcd_v4.c:452: setAddress(0, 0, _width - 1, _height - 1);
      0007B1 E5 1A            [12] 2724 	mov	a,__width
      0007B3 24 FF            [12] 2725 	add	a,#0xff
      0007B5 F5 6D            [12] 2726 	mov	_setAddress_PARM_3,a
      0007B7 E5 1B            [12] 2727 	mov	a,(__width + 1)
      0007B9 34 FF            [12] 2728 	addc	a,#0xff
      0007BB F5 6E            [12] 2729 	mov	(_setAddress_PARM_3 + 1),a
      0007BD E5 1C            [12] 2730 	mov	a,__height
      0007BF 24 FF            [12] 2731 	add	a,#0xff
      0007C1 F5 6F            [12] 2732 	mov	_setAddress_PARM_4,a
      0007C3 E5 1D            [12] 2733 	mov	a,(__height + 1)
      0007C5 34 FF            [12] 2734 	addc	a,#0xff
      0007C7 F5 70            [12] 2735 	mov	(_setAddress_PARM_4 + 1),a
      0007C9 E4               [12] 2736 	clr	a
      0007CA F5 6B            [12] 2737 	mov	_setAddress_PARM_2,a
      0007CC F5 6C            [12] 2738 	mov	(_setAddress_PARM_2 + 1),a
      0007CE 90 00 00         [24] 2739 	mov	dptr,#0x0000
                                   2740 ;	.\ecen4350_lcd_v4.c:456: }
      0007D1 02 05 FA         [24] 2741 	ljmp	_setAddress
                                   2742 ;------------------------------------------------------------
                                   2743 ;Allocation info for local variables in function 'drawPixel'
                                   2744 ;------------------------------------------------------------
                                   2745 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2746 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2747 ;x3                        Allocated to registers r6 r7 
                                   2748 ;------------------------------------------------------------
                                   2749 ;	.\ecen4350_lcd_v4.c:457: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2750 ;	-----------------------------------------
                                   2751 ;	 function drawPixel
                                   2752 ;	-----------------------------------------
      0007D4                       2753 _drawPixel:
      0007D4 AE 82            [24] 2754 	mov	r6,dpl
      0007D6 AF 83            [24] 2755 	mov	r7,dph
                                   2756 ;	.\ecen4350_lcd_v4.c:465: setAddress(x3, y3, x3 + 1, y3 + 1);
      0007D8 74 01            [12] 2757 	mov	a,#0x01
      0007DA 2E               [12] 2758 	add	a,r6
      0007DB F5 6D            [12] 2759 	mov	_setAddress_PARM_3,a
      0007DD E4               [12] 2760 	clr	a
      0007DE 3F               [12] 2761 	addc	a,r7
      0007DF F5 6E            [12] 2762 	mov	(_setAddress_PARM_3 + 1),a
      0007E1 74 01            [12] 2763 	mov	a,#0x01
      0007E3 25 28            [12] 2764 	add	a,_drawPixel_PARM_2
      0007E5 F5 6F            [12] 2765 	mov	_setAddress_PARM_4,a
      0007E7 E4               [12] 2766 	clr	a
      0007E8 35 29            [12] 2767 	addc	a,(_drawPixel_PARM_2 + 1)
      0007EA F5 70            [12] 2768 	mov	(_setAddress_PARM_4 + 1),a
      0007EC 85 28 6B         [24] 2769 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      0007EF 85 29 6C         [24] 2770 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      0007F2 8E 82            [24] 2771 	mov	dpl,r6
      0007F4 8F 83            [24] 2772 	mov	dph,r7
      0007F6 12 05 FA         [24] 2773 	lcall	_setAddress
                                   2774 ;	.\ecen4350_lcd_v4.c:469: CD = 0;
                                   2775 ;	assignBit
      0007F9 C2 B4            [12] 2776 	clr	_P3_4
                                   2777 ;	.\ecen4350_lcd_v4.c:470: write8(0x2C);
                                   2778 ;	assignBit
      0007FB D2 B5            [12] 2779 	setb	_P3_5
      0007FD 85 0A 82         [24] 2780 	mov	dpl,_lcd_address
      000800 85 0B 83         [24] 2781 	mov	dph,(_lcd_address + 1)
      000803 74 2C            [12] 2782 	mov	a,#0x2c
      000805 F0               [24] 2783 	movx	@dptr,a
                                   2784 ;	assignBit
      000806 C2 B5            [12] 2785 	clr	_P3_5
                                   2786 ;	.\ecen4350_lcd_v4.c:472: CD = 1;
                                   2787 ;	assignBit
      000808 D2 B4            [12] 2788 	setb	_P3_4
                                   2789 ;	.\ecen4350_lcd_v4.c:473: write8(color1 >> 8);
                                   2790 ;	assignBit
      00080A D2 B5            [12] 2791 	setb	_P3_5
      00080C 85 0A 82         [24] 2792 	mov	dpl,_lcd_address
      00080F 85 0B 83         [24] 2793 	mov	dph,(_lcd_address + 1)
      000812 E5 2B            [12] 2794 	mov	a,(_drawPixel_PARM_3 + 1)
      000814 F0               [24] 2795 	movx	@dptr,a
                                   2796 ;	assignBit
      000815 C2 B5            [12] 2797 	clr	_P3_5
                                   2798 ;	.\ecen4350_lcd_v4.c:474: write8(color1);
                                   2799 ;	assignBit
      000817 D2 B5            [12] 2800 	setb	_P3_5
      000819 85 0A 82         [24] 2801 	mov	dpl,_lcd_address
      00081C 85 0B 83         [24] 2802 	mov	dph,(_lcd_address + 1)
      00081F E5 2A            [12] 2803 	mov	a,_drawPixel_PARM_3
      000821 F0               [24] 2804 	movx	@dptr,a
                                   2805 ;	assignBit
      000822 C2 B5            [12] 2806 	clr	_P3_5
                                   2807 ;	.\ecen4350_lcd_v4.c:476: }
      000824 22               [24] 2808 	ret
                                   2809 ;------------------------------------------------------------
                                   2810 ;Allocation info for local variables in function 'drawCircle'
                                   2811 ;------------------------------------------------------------
                                   2812 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2813 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2814 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2815 ;x0                        Allocated with name '_drawCircle_x0_65536_389'
                                   2816 ;f                         Allocated with name '_drawCircle_f_65536_390'
                                   2817 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_390'
                                   2818 ;ddF_y                     Allocated to registers r2 r3 
                                   2819 ;x                         Allocated with name '_drawCircle_x_65536_390'
                                   2820 ;y                         Allocated to registers r0 r1 
                                   2821 ;------------------------------------------------------------
                                   2822 ;	.\ecen4350_lcd_v4.c:480: void drawCircle(int x0, int y0, int r, u16 color)
                                   2823 ;	-----------------------------------------
                                   2824 ;	 function drawCircle
                                   2825 ;	-----------------------------------------
      000825                       2826 _drawCircle:
      000825 85 82 32         [24] 2827 	mov	_drawCircle_x0_65536_389,dpl
      000828 85 83 33         [24] 2828 	mov	(_drawCircle_x0_65536_389 + 1),dph
                                   2829 ;	.\ecen4350_lcd_v4.c:482: int f = 1 - r;
      00082B 74 01            [12] 2830 	mov	a,#0x01
      00082D C3               [12] 2831 	clr	c
      00082E 95 2E            [12] 2832 	subb	a,_drawCircle_PARM_3
      000830 F5 34            [12] 2833 	mov	_drawCircle_f_65536_390,a
      000832 E4               [12] 2834 	clr	a
      000833 95 2F            [12] 2835 	subb	a,(_drawCircle_PARM_3 + 1)
      000835 F5 35            [12] 2836 	mov	(_drawCircle_f_65536_390 + 1),a
                                   2837 ;	.\ecen4350_lcd_v4.c:484: int ddF_y = -2 * r;
      000837 85 2E 6B         [24] 2838 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00083A 85 2F 6C         [24] 2839 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00083D 90 FF FE         [24] 2840 	mov	dptr,#0xfffe
      000840 12 4E 93         [24] 2841 	lcall	__mulint
      000843 AA 82            [24] 2842 	mov	r2,dpl
      000845 AB 83            [24] 2843 	mov	r3,dph
                                   2844 ;	.\ecen4350_lcd_v4.c:486: int y = r;
      000847 A8 2E            [24] 2845 	mov	r0,_drawCircle_PARM_3
      000849 A9 2F            [24] 2846 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2847 ;	.\ecen4350_lcd_v4.c:488: drawPixel(x0, y0 + r, color);
      00084B E8               [12] 2848 	mov	a,r0
      00084C 25 2C            [12] 2849 	add	a,_drawCircle_PARM_2
      00084E F5 28            [12] 2850 	mov	_drawPixel_PARM_2,a
      000850 E9               [12] 2851 	mov	a,r1
      000851 35 2D            [12] 2852 	addc	a,(_drawCircle_PARM_2 + 1)
      000853 F5 29            [12] 2853 	mov	(_drawPixel_PARM_2 + 1),a
      000855 85 30 2A         [24] 2854 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000858 85 31 2B         [24] 2855 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00085B 85 32 82         [24] 2856 	mov	dpl,_drawCircle_x0_65536_389
      00085E 85 33 83         [24] 2857 	mov	dph,(_drawCircle_x0_65536_389 + 1)
      000861 C0 03            [24] 2858 	push	ar3
      000863 C0 02            [24] 2859 	push	ar2
      000865 C0 01            [24] 2860 	push	ar1
      000867 C0 00            [24] 2861 	push	ar0
      000869 12 07 D4         [24] 2862 	lcall	_drawPixel
      00086C D0 00            [24] 2863 	pop	ar0
      00086E D0 01            [24] 2864 	pop	ar1
                                   2865 ;	.\ecen4350_lcd_v4.c:489: drawPixel(x0, y0 - r, color);
      000870 E5 2C            [12] 2866 	mov	a,_drawCircle_PARM_2
      000872 C3               [12] 2867 	clr	c
      000873 98               [12] 2868 	subb	a,r0
      000874 F5 28            [12] 2869 	mov	_drawPixel_PARM_2,a
      000876 E5 2D            [12] 2870 	mov	a,(_drawCircle_PARM_2 + 1)
      000878 99               [12] 2871 	subb	a,r1
      000879 F5 29            [12] 2872 	mov	(_drawPixel_PARM_2 + 1),a
      00087B 85 30 2A         [24] 2873 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00087E 85 31 2B         [24] 2874 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000881 85 32 82         [24] 2875 	mov	dpl,_drawCircle_x0_65536_389
      000884 85 33 83         [24] 2876 	mov	dph,(_drawCircle_x0_65536_389 + 1)
      000887 C0 01            [24] 2877 	push	ar1
      000889 C0 00            [24] 2878 	push	ar0
      00088B 12 07 D4         [24] 2879 	lcall	_drawPixel
      00088E D0 00            [24] 2880 	pop	ar0
      000890 D0 01            [24] 2881 	pop	ar1
                                   2882 ;	.\ecen4350_lcd_v4.c:490: drawPixel(x0 + r, y0, color);
      000892 E8               [12] 2883 	mov	a,r0
      000893 25 32            [12] 2884 	add	a,_drawCircle_x0_65536_389
      000895 F5 82            [12] 2885 	mov	dpl,a
      000897 E9               [12] 2886 	mov	a,r1
      000898 35 33            [12] 2887 	addc	a,(_drawCircle_x0_65536_389 + 1)
      00089A F5 83            [12] 2888 	mov	dph,a
      00089C 85 2C 28         [24] 2889 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00089F 85 2D 29         [24] 2890 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0008A2 85 30 2A         [24] 2891 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008A5 85 31 2B         [24] 2892 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008A8 C0 01            [24] 2893 	push	ar1
      0008AA C0 00            [24] 2894 	push	ar0
      0008AC 12 07 D4         [24] 2895 	lcall	_drawPixel
      0008AF D0 00            [24] 2896 	pop	ar0
      0008B1 D0 01            [24] 2897 	pop	ar1
                                   2898 ;	.\ecen4350_lcd_v4.c:491: drawPixel(x0 - r, y0, color);
      0008B3 E5 32            [12] 2899 	mov	a,_drawCircle_x0_65536_389
      0008B5 C3               [12] 2900 	clr	c
      0008B6 98               [12] 2901 	subb	a,r0
      0008B7 F5 82            [12] 2902 	mov	dpl,a
      0008B9 E5 33            [12] 2903 	mov	a,(_drawCircle_x0_65536_389 + 1)
      0008BB 99               [12] 2904 	subb	a,r1
      0008BC F5 83            [12] 2905 	mov	dph,a
      0008BE 85 2C 28         [24] 2906 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0008C1 85 2D 29         [24] 2907 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0008C4 85 30 2A         [24] 2908 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008C7 85 31 2B         [24] 2909 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008CA C0 01            [24] 2910 	push	ar1
      0008CC C0 00            [24] 2911 	push	ar0
      0008CE 12 07 D4         [24] 2912 	lcall	_drawPixel
      0008D1 D0 00            [24] 2913 	pop	ar0
      0008D3 D0 01            [24] 2914 	pop	ar1
      0008D5 D0 02            [24] 2915 	pop	ar2
      0008D7 D0 03            [24] 2916 	pop	ar3
                                   2917 ;	.\ecen4350_lcd_v4.c:493: while (x < y)
      0008D9 E4               [12] 2918 	clr	a
      0008DA F5 38            [12] 2919 	mov	_drawCircle_x_65536_390,a
      0008DC F5 39            [12] 2920 	mov	(_drawCircle_x_65536_390 + 1),a
      0008DE 75 36 01         [24] 2921 	mov	_drawCircle_ddF_x_65536_390,#0x01
                                   2922 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_390 + 1),#0x00
      0008E1 F5 37            [12] 2923 	mov	(_drawCircle_ddF_x_65536_390 + 1),a
      0008E3                       2924 00103$:
      0008E3 C3               [12] 2925 	clr	c
      0008E4 E5 38            [12] 2926 	mov	a,_drawCircle_x_65536_390
      0008E6 98               [12] 2927 	subb	a,r0
      0008E7 E5 39            [12] 2928 	mov	a,(_drawCircle_x_65536_390 + 1)
      0008E9 64 80            [12] 2929 	xrl	a,#0x80
      0008EB 89 F0            [24] 2930 	mov	b,r1
      0008ED 63 F0 80         [24] 2931 	xrl	b,#0x80
      0008F0 95 F0            [12] 2932 	subb	a,b
      0008F2 40 01            [24] 2933 	jc	00121$
      0008F4 22               [24] 2934 	ret
      0008F5                       2935 00121$:
                                   2936 ;	.\ecen4350_lcd_v4.c:495: if (f >= 0)
      0008F5 E5 35            [12] 2937 	mov	a,(_drawCircle_f_65536_390 + 1)
      0008F7 20 E7 16         [24] 2938 	jb	acc.7,00102$
                                   2939 ;	.\ecen4350_lcd_v4.c:497: y--;
      0008FA 18               [12] 2940 	dec	r0
      0008FB B8 FF 01         [24] 2941 	cjne	r0,#0xff,00123$
      0008FE 19               [12] 2942 	dec	r1
      0008FF                       2943 00123$:
                                   2944 ;	.\ecen4350_lcd_v4.c:498: ddF_y += 2;
      0008FF 74 02            [12] 2945 	mov	a,#0x02
      000901 2A               [12] 2946 	add	a,r2
      000902 FA               [12] 2947 	mov	r2,a
      000903 E4               [12] 2948 	clr	a
      000904 3B               [12] 2949 	addc	a,r3
      000905 FB               [12] 2950 	mov	r3,a
                                   2951 ;	.\ecen4350_lcd_v4.c:499: f += ddF_y;
      000906 EA               [12] 2952 	mov	a,r2
      000907 25 34            [12] 2953 	add	a,_drawCircle_f_65536_390
      000909 F5 34            [12] 2954 	mov	_drawCircle_f_65536_390,a
      00090B EB               [12] 2955 	mov	a,r3
      00090C 35 35            [12] 2956 	addc	a,(_drawCircle_f_65536_390 + 1)
      00090E F5 35            [12] 2957 	mov	(_drawCircle_f_65536_390 + 1),a
      000910                       2958 00102$:
                                   2959 ;	.\ecen4350_lcd_v4.c:501: x++;
      000910 C0 02            [24] 2960 	push	ar2
      000912 C0 03            [24] 2961 	push	ar3
      000914 05 38            [12] 2962 	inc	_drawCircle_x_65536_390
      000916 E4               [12] 2963 	clr	a
      000917 B5 38 02         [24] 2964 	cjne	a,_drawCircle_x_65536_390,00124$
      00091A 05 39            [12] 2965 	inc	(_drawCircle_x_65536_390 + 1)
      00091C                       2966 00124$:
                                   2967 ;	.\ecen4350_lcd_v4.c:502: ddF_x += 2;
      00091C 74 02            [12] 2968 	mov	a,#0x02
      00091E 25 36            [12] 2969 	add	a,_drawCircle_ddF_x_65536_390
      000920 F5 36            [12] 2970 	mov	_drawCircle_ddF_x_65536_390,a
      000922 E4               [12] 2971 	clr	a
      000923 35 37            [12] 2972 	addc	a,(_drawCircle_ddF_x_65536_390 + 1)
      000925 F5 37            [12] 2973 	mov	(_drawCircle_ddF_x_65536_390 + 1),a
                                   2974 ;	.\ecen4350_lcd_v4.c:503: f += ddF_x;
      000927 E5 36            [12] 2975 	mov	a,_drawCircle_ddF_x_65536_390
      000929 25 34            [12] 2976 	add	a,_drawCircle_f_65536_390
      00092B F5 34            [12] 2977 	mov	_drawCircle_f_65536_390,a
      00092D E5 37            [12] 2978 	mov	a,(_drawCircle_ddF_x_65536_390 + 1)
      00092F 35 35            [12] 2979 	addc	a,(_drawCircle_f_65536_390 + 1)
      000931 F5 35            [12] 2980 	mov	(_drawCircle_f_65536_390 + 1),a
                                   2981 ;	.\ecen4350_lcd_v4.c:505: drawPixel(x0 + x, y0 + y, color);
      000933 E5 38            [12] 2982 	mov	a,_drawCircle_x_65536_390
      000935 25 32            [12] 2983 	add	a,_drawCircle_x0_65536_389
      000937 FE               [12] 2984 	mov	r6,a
      000938 E5 39            [12] 2985 	mov	a,(_drawCircle_x_65536_390 + 1)
      00093A 35 33            [12] 2986 	addc	a,(_drawCircle_x0_65536_389 + 1)
      00093C FF               [12] 2987 	mov	r7,a
      00093D E8               [12] 2988 	mov	a,r0
      00093E 25 2C            [12] 2989 	add	a,_drawCircle_PARM_2
      000940 FC               [12] 2990 	mov	r4,a
      000941 E9               [12] 2991 	mov	a,r1
      000942 35 2D            [12] 2992 	addc	a,(_drawCircle_PARM_2 + 1)
      000944 FD               [12] 2993 	mov	r5,a
      000945 8C 28            [24] 2994 	mov	_drawPixel_PARM_2,r4
      000947 8D 29            [24] 2995 	mov	(_drawPixel_PARM_2 + 1),r5
      000949 85 30 2A         [24] 2996 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00094C 85 31 2B         [24] 2997 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00094F 8E 82            [24] 2998 	mov	dpl,r6
      000951 8F 83            [24] 2999 	mov	dph,r7
      000953 C0 07            [24] 3000 	push	ar7
      000955 C0 06            [24] 3001 	push	ar6
      000957 C0 05            [24] 3002 	push	ar5
      000959 C0 04            [24] 3003 	push	ar4
      00095B C0 03            [24] 3004 	push	ar3
      00095D C0 02            [24] 3005 	push	ar2
      00095F C0 01            [24] 3006 	push	ar1
      000961 C0 00            [24] 3007 	push	ar0
      000963 12 07 D4         [24] 3008 	lcall	_drawPixel
      000966 D0 00            [24] 3009 	pop	ar0
      000968 D0 01            [24] 3010 	pop	ar1
      00096A D0 02            [24] 3011 	pop	ar2
      00096C D0 03            [24] 3012 	pop	ar3
      00096E D0 04            [24] 3013 	pop	ar4
      000970 D0 05            [24] 3014 	pop	ar5
                                   3015 ;	.\ecen4350_lcd_v4.c:506: drawPixel(x0 - x, y0 + y, color);
      000972 E5 32            [12] 3016 	mov	a,_drawCircle_x0_65536_389
      000974 C3               [12] 3017 	clr	c
      000975 95 38            [12] 3018 	subb	a,_drawCircle_x_65536_390
      000977 FA               [12] 3019 	mov	r2,a
      000978 E5 33            [12] 3020 	mov	a,(_drawCircle_x0_65536_389 + 1)
      00097A 95 39            [12] 3021 	subb	a,(_drawCircle_x_65536_390 + 1)
      00097C FB               [12] 3022 	mov	r3,a
      00097D 8C 28            [24] 3023 	mov	_drawPixel_PARM_2,r4
      00097F 8D 29            [24] 3024 	mov	(_drawPixel_PARM_2 + 1),r5
      000981 85 30 2A         [24] 3025 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000984 85 31 2B         [24] 3026 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000987 8A 82            [24] 3027 	mov	dpl,r2
      000989 8B 83            [24] 3028 	mov	dph,r3
      00098B C0 03            [24] 3029 	push	ar3
      00098D C0 02            [24] 3030 	push	ar2
      00098F C0 01            [24] 3031 	push	ar1
      000991 C0 00            [24] 3032 	push	ar0
      000993 12 07 D4         [24] 3033 	lcall	_drawPixel
      000996 D0 00            [24] 3034 	pop	ar0
      000998 D0 01            [24] 3035 	pop	ar1
      00099A D0 02            [24] 3036 	pop	ar2
      00099C D0 03            [24] 3037 	pop	ar3
      00099E D0 06            [24] 3038 	pop	ar6
      0009A0 D0 07            [24] 3039 	pop	ar7
                                   3040 ;	.\ecen4350_lcd_v4.c:507: drawPixel(x0 + x, y0 - y, color);
      0009A2 E5 2C            [12] 3041 	mov	a,_drawCircle_PARM_2
      0009A4 C3               [12] 3042 	clr	c
      0009A5 98               [12] 3043 	subb	a,r0
      0009A6 FC               [12] 3044 	mov	r4,a
      0009A7 E5 2D            [12] 3045 	mov	a,(_drawCircle_PARM_2 + 1)
      0009A9 99               [12] 3046 	subb	a,r1
      0009AA FD               [12] 3047 	mov	r5,a
      0009AB 8C 28            [24] 3048 	mov	_drawPixel_PARM_2,r4
      0009AD 8D 29            [24] 3049 	mov	(_drawPixel_PARM_2 + 1),r5
      0009AF 85 30 2A         [24] 3050 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009B2 85 31 2B         [24] 3051 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009B5 8E 82            [24] 3052 	mov	dpl,r6
      0009B7 8F 83            [24] 3053 	mov	dph,r7
      0009B9 C0 05            [24] 3054 	push	ar5
      0009BB C0 04            [24] 3055 	push	ar4
      0009BD C0 03            [24] 3056 	push	ar3
      0009BF C0 02            [24] 3057 	push	ar2
      0009C1 C0 01            [24] 3058 	push	ar1
      0009C3 C0 00            [24] 3059 	push	ar0
      0009C5 12 07 D4         [24] 3060 	lcall	_drawPixel
      0009C8 D0 00            [24] 3061 	pop	ar0
      0009CA D0 01            [24] 3062 	pop	ar1
      0009CC D0 02            [24] 3063 	pop	ar2
      0009CE D0 03            [24] 3064 	pop	ar3
      0009D0 D0 04            [24] 3065 	pop	ar4
      0009D2 D0 05            [24] 3066 	pop	ar5
                                   3067 ;	.\ecen4350_lcd_v4.c:508: drawPixel(x0 - x, y0 - y, color);
      0009D4 8C 28            [24] 3068 	mov	_drawPixel_PARM_2,r4
      0009D6 8D 29            [24] 3069 	mov	(_drawPixel_PARM_2 + 1),r5
      0009D8 85 30 2A         [24] 3070 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009DB 85 31 2B         [24] 3071 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009DE 8A 82            [24] 3072 	mov	dpl,r2
      0009E0 8B 83            [24] 3073 	mov	dph,r3
      0009E2 C0 03            [24] 3074 	push	ar3
      0009E4 C0 02            [24] 3075 	push	ar2
      0009E6 C0 01            [24] 3076 	push	ar1
      0009E8 C0 00            [24] 3077 	push	ar0
      0009EA 12 07 D4         [24] 3078 	lcall	_drawPixel
      0009ED D0 00            [24] 3079 	pop	ar0
      0009EF D0 01            [24] 3080 	pop	ar1
      0009F1 D0 02            [24] 3081 	pop	ar2
      0009F3 D0 03            [24] 3082 	pop	ar3
                                   3083 ;	.\ecen4350_lcd_v4.c:509: drawPixel(x0 + y, y0 + x, color);
      0009F5 E8               [12] 3084 	mov	a,r0
      0009F6 25 32            [12] 3085 	add	a,_drawCircle_x0_65536_389
      0009F8 FE               [12] 3086 	mov	r6,a
      0009F9 E9               [12] 3087 	mov	a,r1
      0009FA 35 33            [12] 3088 	addc	a,(_drawCircle_x0_65536_389 + 1)
      0009FC FF               [12] 3089 	mov	r7,a
      0009FD E5 38            [12] 3090 	mov	a,_drawCircle_x_65536_390
      0009FF 25 2C            [12] 3091 	add	a,_drawCircle_PARM_2
      000A01 FC               [12] 3092 	mov	r4,a
      000A02 E5 39            [12] 3093 	mov	a,(_drawCircle_x_65536_390 + 1)
      000A04 35 2D            [12] 3094 	addc	a,(_drawCircle_PARM_2 + 1)
      000A06 FD               [12] 3095 	mov	r5,a
      000A07 8C 28            [24] 3096 	mov	_drawPixel_PARM_2,r4
      000A09 8D 29            [24] 3097 	mov	(_drawPixel_PARM_2 + 1),r5
      000A0B 85 30 2A         [24] 3098 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A0E 85 31 2B         [24] 3099 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A11 8E 82            [24] 3100 	mov	dpl,r6
      000A13 8F 83            [24] 3101 	mov	dph,r7
      000A15 C0 07            [24] 3102 	push	ar7
      000A17 C0 06            [24] 3103 	push	ar6
      000A19 C0 05            [24] 3104 	push	ar5
      000A1B C0 04            [24] 3105 	push	ar4
      000A1D C0 03            [24] 3106 	push	ar3
      000A1F C0 02            [24] 3107 	push	ar2
      000A21 C0 01            [24] 3108 	push	ar1
      000A23 C0 00            [24] 3109 	push	ar0
      000A25 12 07 D4         [24] 3110 	lcall	_drawPixel
      000A28 D0 00            [24] 3111 	pop	ar0
      000A2A D0 01            [24] 3112 	pop	ar1
      000A2C D0 02            [24] 3113 	pop	ar2
      000A2E D0 03            [24] 3114 	pop	ar3
      000A30 D0 04            [24] 3115 	pop	ar4
      000A32 D0 05            [24] 3116 	pop	ar5
                                   3117 ;	.\ecen4350_lcd_v4.c:510: drawPixel(x0 - y, y0 + x, color);
      000A34 E5 32            [12] 3118 	mov	a,_drawCircle_x0_65536_389
      000A36 C3               [12] 3119 	clr	c
      000A37 98               [12] 3120 	subb	a,r0
      000A38 FA               [12] 3121 	mov	r2,a
      000A39 E5 33            [12] 3122 	mov	a,(_drawCircle_x0_65536_389 + 1)
      000A3B 99               [12] 3123 	subb	a,r1
      000A3C FB               [12] 3124 	mov	r3,a
      000A3D 8C 28            [24] 3125 	mov	_drawPixel_PARM_2,r4
      000A3F 8D 29            [24] 3126 	mov	(_drawPixel_PARM_2 + 1),r5
      000A41 85 30 2A         [24] 3127 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A44 85 31 2B         [24] 3128 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A47 8A 82            [24] 3129 	mov	dpl,r2
      000A49 8B 83            [24] 3130 	mov	dph,r3
      000A4B C0 03            [24] 3131 	push	ar3
      000A4D C0 02            [24] 3132 	push	ar2
      000A4F C0 01            [24] 3133 	push	ar1
      000A51 C0 00            [24] 3134 	push	ar0
      000A53 12 07 D4         [24] 3135 	lcall	_drawPixel
      000A56 D0 00            [24] 3136 	pop	ar0
      000A58 D0 01            [24] 3137 	pop	ar1
      000A5A D0 02            [24] 3138 	pop	ar2
      000A5C D0 03            [24] 3139 	pop	ar3
      000A5E D0 06            [24] 3140 	pop	ar6
      000A60 D0 07            [24] 3141 	pop	ar7
                                   3142 ;	.\ecen4350_lcd_v4.c:511: drawPixel(x0 + y, y0 - x, color);
      000A62 E5 2C            [12] 3143 	mov	a,_drawCircle_PARM_2
      000A64 C3               [12] 3144 	clr	c
      000A65 95 38            [12] 3145 	subb	a,_drawCircle_x_65536_390
      000A67 FC               [12] 3146 	mov	r4,a
      000A68 E5 2D            [12] 3147 	mov	a,(_drawCircle_PARM_2 + 1)
      000A6A 95 39            [12] 3148 	subb	a,(_drawCircle_x_65536_390 + 1)
      000A6C FD               [12] 3149 	mov	r5,a
      000A6D 8C 28            [24] 3150 	mov	_drawPixel_PARM_2,r4
      000A6F 8D 29            [24] 3151 	mov	(_drawPixel_PARM_2 + 1),r5
      000A71 85 30 2A         [24] 3152 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A74 85 31 2B         [24] 3153 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A77 8E 82            [24] 3154 	mov	dpl,r6
      000A79 8F 83            [24] 3155 	mov	dph,r7
      000A7B C0 05            [24] 3156 	push	ar5
      000A7D C0 04            [24] 3157 	push	ar4
      000A7F C0 03            [24] 3158 	push	ar3
      000A81 C0 02            [24] 3159 	push	ar2
      000A83 C0 01            [24] 3160 	push	ar1
      000A85 C0 00            [24] 3161 	push	ar0
      000A87 12 07 D4         [24] 3162 	lcall	_drawPixel
      000A8A D0 00            [24] 3163 	pop	ar0
      000A8C D0 01            [24] 3164 	pop	ar1
      000A8E D0 02            [24] 3165 	pop	ar2
      000A90 D0 03            [24] 3166 	pop	ar3
      000A92 D0 04            [24] 3167 	pop	ar4
      000A94 D0 05            [24] 3168 	pop	ar5
                                   3169 ;	.\ecen4350_lcd_v4.c:512: drawPixel(x0 - y, y0 - x, color);
      000A96 8C 28            [24] 3170 	mov	_drawPixel_PARM_2,r4
      000A98 8D 29            [24] 3171 	mov	(_drawPixel_PARM_2 + 1),r5
      000A9A 85 30 2A         [24] 3172 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A9D 85 31 2B         [24] 3173 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000AA0 8A 82            [24] 3174 	mov	dpl,r2
      000AA2 8B 83            [24] 3175 	mov	dph,r3
      000AA4 C0 03            [24] 3176 	push	ar3
      000AA6 C0 02            [24] 3177 	push	ar2
      000AA8 C0 01            [24] 3178 	push	ar1
      000AAA C0 00            [24] 3179 	push	ar0
      000AAC 12 07 D4         [24] 3180 	lcall	_drawPixel
      000AAF D0 00            [24] 3181 	pop	ar0
      000AB1 D0 01            [24] 3182 	pop	ar1
      000AB3 D0 02            [24] 3183 	pop	ar2
      000AB5 D0 03            [24] 3184 	pop	ar3
      000AB7 D0 03            [24] 3185 	pop	ar3
      000AB9 D0 02            [24] 3186 	pop	ar2
                                   3187 ;	.\ecen4350_lcd_v4.c:514: }
      000ABB 02 08 E3         [24] 3188 	ljmp	00103$
                                   3189 ;------------------------------------------------------------
                                   3190 ;Allocation info for local variables in function 'testCircles'
                                   3191 ;------------------------------------------------------------
                                   3192 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3193 ;radius                    Allocated to registers r7 
                                   3194 ;x                         Allocated to registers r0 r1 
                                   3195 ;y                         Allocated to registers r2 r3 
                                   3196 ;r2                        Allocated to registers r4 r5 
                                   3197 ;w                         Allocated with name '_testCircles_w_65536_394'
                                   3198 ;h                         Allocated with name '_testCircles_h_65536_394'
                                   3199 ;------------------------------------------------------------
                                   3200 ;	.\ecen4350_lcd_v4.c:516: void testCircles(u8 radius, u16 color)
                                   3201 ;	-----------------------------------------
                                   3202 ;	 function testCircles
                                   3203 ;	-----------------------------------------
      000ABE                       3204 _testCircles:
                                   3205 ;	.\ecen4350_lcd_v4.c:519: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000ABE AE 82            [24] 3206 	mov	r6,dpl
      000AC0 7F 00            [12] 3207 	mov	r7,#0x00
      000AC2 EE               [12] 3208 	mov	a,r6
      000AC3 2E               [12] 3209 	add	a,r6
      000AC4 FC               [12] 3210 	mov	r4,a
      000AC5 EF               [12] 3211 	mov	a,r7
      000AC6 33               [12] 3212 	rlc	a
      000AC7 FD               [12] 3213 	mov	r5,a
      000AC8 8E 02            [24] 3214 	mov	ar2,r6
      000ACA 8F 03            [24] 3215 	mov	ar3,r7
      000ACC EA               [12] 3216 	mov	a,r2
      000ACD 25 1A            [12] 3217 	add	a,__width
      000ACF F5 3C            [12] 3218 	mov	_testCircles_w_65536_394,a
      000AD1 EB               [12] 3219 	mov	a,r3
      000AD2 35 1B            [12] 3220 	addc	a,(__width + 1)
      000AD4 F5 3D            [12] 3221 	mov	(_testCircles_w_65536_394 + 1),a
      000AD6 EA               [12] 3222 	mov	a,r2
      000AD7 25 1C            [12] 3223 	add	a,__height
      000AD9 F5 3E            [12] 3224 	mov	_testCircles_h_65536_394,a
      000ADB EB               [12] 3225 	mov	a,r3
      000ADC 35 1D            [12] 3226 	addc	a,(__height + 1)
      000ADE F5 3F            [12] 3227 	mov	(_testCircles_h_65536_394 + 1),a
                                   3228 ;	.\ecen4350_lcd_v4.c:521: for (x = 0; x < w; x += r2)
      000AE0 78 00            [12] 3229 	mov	r0,#0x00
      000AE2 79 00            [12] 3230 	mov	r1,#0x00
      000AE4                       3231 00107$:
      000AE4 C3               [12] 3232 	clr	c
      000AE5 E8               [12] 3233 	mov	a,r0
      000AE6 95 3C            [12] 3234 	subb	a,_testCircles_w_65536_394
      000AE8 E9               [12] 3235 	mov	a,r1
      000AE9 64 80            [12] 3236 	xrl	a,#0x80
      000AEB 85 3D F0         [24] 3237 	mov	b,(_testCircles_w_65536_394 + 1)
      000AEE 63 F0 80         [24] 3238 	xrl	b,#0x80
      000AF1 95 F0            [12] 3239 	subb	a,b
      000AF3 50 5A            [24] 3240 	jnc	00109$
                                   3241 ;	.\ecen4350_lcd_v4.c:523: for (y = 0; y < h; y += r2)
      000AF5 7A 00            [12] 3242 	mov	r2,#0x00
      000AF7 7B 00            [12] 3243 	mov	r3,#0x00
      000AF9                       3244 00104$:
      000AF9 C3               [12] 3245 	clr	c
      000AFA EA               [12] 3246 	mov	a,r2
      000AFB 95 3E            [12] 3247 	subb	a,_testCircles_h_65536_394
      000AFD EB               [12] 3248 	mov	a,r3
      000AFE 64 80            [12] 3249 	xrl	a,#0x80
      000B00 85 3F F0         [24] 3250 	mov	b,(_testCircles_h_65536_394 + 1)
      000B03 63 F0 80         [24] 3251 	xrl	b,#0x80
      000B06 95 F0            [12] 3252 	subb	a,b
      000B08 50 3D            [24] 3253 	jnc	00108$
                                   3254 ;	.\ecen4350_lcd_v4.c:525: drawCircle(x, y, radius, color);
      000B0A 8A 2C            [24] 3255 	mov	_drawCircle_PARM_2,r2
      000B0C 8B 2D            [24] 3256 	mov	(_drawCircle_PARM_2 + 1),r3
      000B0E 8E 2E            [24] 3257 	mov	_drawCircle_PARM_3,r6
      000B10 8F 2F            [24] 3258 	mov	(_drawCircle_PARM_3 + 1),r7
      000B12 85 3A 30         [24] 3259 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000B15 85 3B 31         [24] 3260 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000B18 88 82            [24] 3261 	mov	dpl,r0
      000B1A 89 83            [24] 3262 	mov	dph,r1
      000B1C C0 07            [24] 3263 	push	ar7
      000B1E C0 06            [24] 3264 	push	ar6
      000B20 C0 05            [24] 3265 	push	ar5
      000B22 C0 04            [24] 3266 	push	ar4
      000B24 C0 03            [24] 3267 	push	ar3
      000B26 C0 02            [24] 3268 	push	ar2
      000B28 C0 01            [24] 3269 	push	ar1
      000B2A C0 00            [24] 3270 	push	ar0
      000B2C 12 08 25         [24] 3271 	lcall	_drawCircle
      000B2F D0 00            [24] 3272 	pop	ar0
      000B31 D0 01            [24] 3273 	pop	ar1
      000B33 D0 02            [24] 3274 	pop	ar2
      000B35 D0 03            [24] 3275 	pop	ar3
      000B37 D0 04            [24] 3276 	pop	ar4
      000B39 D0 05            [24] 3277 	pop	ar5
      000B3B D0 06            [24] 3278 	pop	ar6
      000B3D D0 07            [24] 3279 	pop	ar7
                                   3280 ;	.\ecen4350_lcd_v4.c:523: for (y = 0; y < h; y += r2)
      000B3F EC               [12] 3281 	mov	a,r4
      000B40 2A               [12] 3282 	add	a,r2
      000B41 FA               [12] 3283 	mov	r2,a
      000B42 ED               [12] 3284 	mov	a,r5
      000B43 3B               [12] 3285 	addc	a,r3
      000B44 FB               [12] 3286 	mov	r3,a
      000B45 80 B2            [24] 3287 	sjmp	00104$
      000B47                       3288 00108$:
                                   3289 ;	.\ecen4350_lcd_v4.c:521: for (x = 0; x < w; x += r2)
      000B47 EC               [12] 3290 	mov	a,r4
      000B48 28               [12] 3291 	add	a,r0
      000B49 F8               [12] 3292 	mov	r0,a
      000B4A ED               [12] 3293 	mov	a,r5
      000B4B 39               [12] 3294 	addc	a,r1
      000B4C F9               [12] 3295 	mov	r1,a
      000B4D 80 95            [24] 3296 	sjmp	00107$
      000B4F                       3297 00109$:
                                   3298 ;	.\ecen4350_lcd_v4.c:528: }
      000B4F 22               [24] 3299 	ret
                                   3300 ;------------------------------------------------------------
                                   3301 ;Allocation info for local variables in function 'fillRect'
                                   3302 ;------------------------------------------------------------
                                   3303 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3304 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3305 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3306 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3307 ;x                         Allocated to registers 
                                   3308 ;------------------------------------------------------------
                                   3309 ;	.\ecen4350_lcd_v4.c:529: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3310 ;	-----------------------------------------
                                   3311 ;	 function fillRect
                                   3312 ;	-----------------------------------------
      000B50                       3313 _fillRect:
      000B50 AE 82            [24] 3314 	mov	r6,dpl
      000B52 AF 83            [24] 3315 	mov	r7,dph
                                   3316 ;	.\ecen4350_lcd_v4.c:531: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000B54 C3               [12] 3317 	clr	c
      000B55 EE               [12] 3318 	mov	a,r6
      000B56 94 F0            [12] 3319 	subb	a,#0xf0
      000B58 EF               [12] 3320 	mov	a,r7
      000B59 94 00            [12] 3321 	subb	a,#0x00
      000B5B 50 0B            [24] 3322 	jnc	00101$
      000B5D C3               [12] 3323 	clr	c
      000B5E E5 40            [12] 3324 	mov	a,_fillRect_PARM_2
      000B60 94 40            [12] 3325 	subb	a,#0x40
      000B62 E5 41            [12] 3326 	mov	a,(_fillRect_PARM_2 + 1)
      000B64 94 01            [12] 3327 	subb	a,#0x01
      000B66 40 01            [24] 3328 	jc	00102$
      000B68                       3329 00101$:
                                   3330 ;	.\ecen4350_lcd_v4.c:533: return;
      000B68 22               [24] 3331 	ret
      000B69                       3332 00102$:
                                   3333 ;	.\ecen4350_lcd_v4.c:536: if ((x + w - 1) >= TFTWIDTH)
      000B69 E5 42            [12] 3334 	mov	a,_fillRect_PARM_3
      000B6B 2E               [12] 3335 	add	a,r6
      000B6C FC               [12] 3336 	mov	r4,a
      000B6D E5 43            [12] 3337 	mov	a,(_fillRect_PARM_3 + 1)
      000B6F 3F               [12] 3338 	addc	a,r7
      000B70 FD               [12] 3339 	mov	r5,a
      000B71 1C               [12] 3340 	dec	r4
      000B72 BC FF 01         [24] 3341 	cjne	r4,#0xff,00161$
      000B75 1D               [12] 3342 	dec	r5
      000B76                       3343 00161$:
      000B76 C3               [12] 3344 	clr	c
      000B77 EC               [12] 3345 	mov	a,r4
      000B78 94 F0            [12] 3346 	subb	a,#0xf0
      000B7A ED               [12] 3347 	mov	a,r5
      000B7B 94 00            [12] 3348 	subb	a,#0x00
      000B7D 40 0A            [24] 3349 	jc	00105$
                                   3350 ;	.\ecen4350_lcd_v4.c:538: w = TFTWIDTH - x;
      000B7F 74 F0            [12] 3351 	mov	a,#0xf0
      000B81 C3               [12] 3352 	clr	c
      000B82 9E               [12] 3353 	subb	a,r6
      000B83 F5 42            [12] 3354 	mov	_fillRect_PARM_3,a
      000B85 E4               [12] 3355 	clr	a
      000B86 9F               [12] 3356 	subb	a,r7
      000B87 F5 43            [12] 3357 	mov	(_fillRect_PARM_3 + 1),a
      000B89                       3358 00105$:
                                   3359 ;	.\ecen4350_lcd_v4.c:541: if ((y + h - 1) >= TFTHEIGHT)
      000B89 E5 44            [12] 3360 	mov	a,_fillRect_PARM_4
      000B8B 25 40            [12] 3361 	add	a,_fillRect_PARM_2
      000B8D FC               [12] 3362 	mov	r4,a
      000B8E E5 45            [12] 3363 	mov	a,(_fillRect_PARM_4 + 1)
      000B90 35 41            [12] 3364 	addc	a,(_fillRect_PARM_2 + 1)
      000B92 FD               [12] 3365 	mov	r5,a
      000B93 1C               [12] 3366 	dec	r4
      000B94 BC FF 01         [24] 3367 	cjne	r4,#0xff,00163$
      000B97 1D               [12] 3368 	dec	r5
      000B98                       3369 00163$:
      000B98 C3               [12] 3370 	clr	c
      000B99 EC               [12] 3371 	mov	a,r4
      000B9A 94 40            [12] 3372 	subb	a,#0x40
      000B9C ED               [12] 3373 	mov	a,r5
      000B9D 94 01            [12] 3374 	subb	a,#0x01
      000B9F 40 0D            [24] 3375 	jc	00107$
                                   3376 ;	.\ecen4350_lcd_v4.c:543: h = TFTHEIGHT - y;
      000BA1 74 40            [12] 3377 	mov	a,#0x40
      000BA3 C3               [12] 3378 	clr	c
      000BA4 95 40            [12] 3379 	subb	a,_fillRect_PARM_2
      000BA6 F5 44            [12] 3380 	mov	_fillRect_PARM_4,a
      000BA8 74 01            [12] 3381 	mov	a,#0x01
      000BAA 95 41            [12] 3382 	subb	a,(_fillRect_PARM_2 + 1)
      000BAC F5 45            [12] 3383 	mov	(_fillRect_PARM_4 + 1),a
      000BAE                       3384 00107$:
                                   3385 ;	.\ecen4350_lcd_v4.c:546: setAddress(x, y, x + w - 1, y + h - 1);
      000BAE E5 42            [12] 3386 	mov	a,_fillRect_PARM_3
      000BB0 2E               [12] 3387 	add	a,r6
      000BB1 FC               [12] 3388 	mov	r4,a
      000BB2 E5 43            [12] 3389 	mov	a,(_fillRect_PARM_3 + 1)
      000BB4 3F               [12] 3390 	addc	a,r7
      000BB5 FD               [12] 3391 	mov	r5,a
      000BB6 EC               [12] 3392 	mov	a,r4
      000BB7 24 FF            [12] 3393 	add	a,#0xff
      000BB9 F5 6D            [12] 3394 	mov	_setAddress_PARM_3,a
      000BBB ED               [12] 3395 	mov	a,r5
      000BBC 34 FF            [12] 3396 	addc	a,#0xff
      000BBE F5 6E            [12] 3397 	mov	(_setAddress_PARM_3 + 1),a
      000BC0 E5 44            [12] 3398 	mov	a,_fillRect_PARM_4
      000BC2 25 40            [12] 3399 	add	a,_fillRect_PARM_2
      000BC4 FC               [12] 3400 	mov	r4,a
      000BC5 E5 45            [12] 3401 	mov	a,(_fillRect_PARM_4 + 1)
      000BC7 35 41            [12] 3402 	addc	a,(_fillRect_PARM_2 + 1)
      000BC9 FD               [12] 3403 	mov	r5,a
      000BCA EC               [12] 3404 	mov	a,r4
      000BCB 24 FF            [12] 3405 	add	a,#0xff
      000BCD F5 6F            [12] 3406 	mov	_setAddress_PARM_4,a
      000BCF ED               [12] 3407 	mov	a,r5
      000BD0 34 FF            [12] 3408 	addc	a,#0xff
      000BD2 F5 70            [12] 3409 	mov	(_setAddress_PARM_4 + 1),a
      000BD4 85 40 6B         [24] 3410 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000BD7 85 41 6C         [24] 3411 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000BDA 8E 82            [24] 3412 	mov	dpl,r6
      000BDC 8F 83            [24] 3413 	mov	dph,r7
      000BDE 12 05 FA         [24] 3414 	lcall	_setAddress
                                   3415 ;	.\ecen4350_lcd_v4.c:549: write8Reg(0x2C);
                                   3416 ;	assignBit
      000BE1 C2 B4            [12] 3417 	clr	_P3_4
                                   3418 ;	assignBit
      000BE3 D2 B5            [12] 3419 	setb	_P3_5
      000BE5 85 0A 82         [24] 3420 	mov	dpl,_lcd_address
      000BE8 85 0B 83         [24] 3421 	mov	dph,(_lcd_address + 1)
      000BEB 74 2C            [12] 3422 	mov	a,#0x2c
      000BED F0               [24] 3423 	movx	@dptr,a
                                   3424 ;	assignBit
      000BEE C2 B5            [12] 3425 	clr	_P3_5
                                   3426 ;	.\ecen4350_lcd_v4.c:551: CD = 1;
                                   3427 ;	assignBit
      000BF0 D2 B4            [12] 3428 	setb	_P3_4
                                   3429 ;	.\ecen4350_lcd_v4.c:552: for (y = h; y > 0; y--)
      000BF2 AF 47            [24] 3430 	mov	r7,(_fillRect_PARM_5 + 1)
      000BF4 AD 44            [24] 3431 	mov	r5,_fillRect_PARM_4
      000BF6 AE 45            [24] 3432 	mov	r6,(_fillRect_PARM_4 + 1)
      000BF8                       3433 00114$:
      000BF8 ED               [12] 3434 	mov	a,r5
      000BF9 4E               [12] 3435 	orl	a,r6
      000BFA 60 30            [24] 3436 	jz	00116$
                                   3437 ;	.\ecen4350_lcd_v4.c:554: for (x = w; x > 0; x--)
      000BFC AB 42            [24] 3438 	mov	r3,_fillRect_PARM_3
      000BFE AC 43            [24] 3439 	mov	r4,(_fillRect_PARM_3 + 1)
      000C00                       3440 00111$:
      000C00 EB               [12] 3441 	mov	a,r3
      000C01 4C               [12] 3442 	orl	a,r4
      000C02 60 21            [24] 3443 	jz	00115$
                                   3444 ;	.\ecen4350_lcd_v4.c:557: write8(color >> 8);
                                   3445 ;	assignBit
      000C04 D2 B5            [12] 3446 	setb	_P3_5
      000C06 85 0A 82         [24] 3447 	mov	dpl,_lcd_address
      000C09 85 0B 83         [24] 3448 	mov	dph,(_lcd_address + 1)
      000C0C EF               [12] 3449 	mov	a,r7
      000C0D F0               [24] 3450 	movx	@dptr,a
                                   3451 ;	assignBit
      000C0E C2 B5            [12] 3452 	clr	_P3_5
                                   3453 ;	.\ecen4350_lcd_v4.c:558: write8(color);
                                   3454 ;	assignBit
      000C10 D2 B5            [12] 3455 	setb	_P3_5
      000C12 85 0A 82         [24] 3456 	mov	dpl,_lcd_address
      000C15 85 0B 83         [24] 3457 	mov	dph,(_lcd_address + 1)
      000C18 E5 46            [12] 3458 	mov	a,_fillRect_PARM_5
      000C1A FA               [12] 3459 	mov	r2,a
      000C1B F0               [24] 3460 	movx	@dptr,a
                                   3461 ;	assignBit
      000C1C C2 B5            [12] 3462 	clr	_P3_5
                                   3463 ;	.\ecen4350_lcd_v4.c:554: for (x = w; x > 0; x--)
      000C1E 1B               [12] 3464 	dec	r3
      000C1F BB FF 01         [24] 3465 	cjne	r3,#0xff,00167$
      000C22 1C               [12] 3466 	dec	r4
      000C23                       3467 00167$:
      000C23 80 DB            [24] 3468 	sjmp	00111$
      000C25                       3469 00115$:
                                   3470 ;	.\ecen4350_lcd_v4.c:552: for (y = h; y > 0; y--)
      000C25 1D               [12] 3471 	dec	r5
      000C26 BD FF 01         [24] 3472 	cjne	r5,#0xff,00168$
      000C29 1E               [12] 3473 	dec	r6
      000C2A                       3474 00168$:
      000C2A 80 CC            [24] 3475 	sjmp	00114$
      000C2C                       3476 00116$:
                                   3477 ;	.\ecen4350_lcd_v4.c:562: }
      000C2C 22               [24] 3478 	ret
                                   3479 ;------------------------------------------------------------
                                   3480 ;Allocation info for local variables in function 'fillTop'
                                   3481 ;------------------------------------------------------------
                                   3482 ;Color                     Allocated to registers r6 r7 
                                   3483 ;len                       Allocated to registers 
                                   3484 ;blocks                    Allocated to registers r4 r7 
                                   3485 ;i                         Allocated to registers r3 
                                   3486 ;hi                        Allocated to registers r5 
                                   3487 ;lo                        Allocated to registers r6 
                                   3488 ;------------------------------------------------------------
                                   3489 ;	.\ecen4350_lcd_v4.c:564: void fillTop(unsigned int Color) {
                                   3490 ;	-----------------------------------------
                                   3491 ;	 function fillTop
                                   3492 ;	-----------------------------------------
      000C2D                       3493 _fillTop:
      000C2D AE 82            [24] 3494 	mov	r6,dpl
      000C2F AF 83            [24] 3495 	mov	r7,dph
                                   3496 ;	.\ecen4350_lcd_v4.c:568: unsigned char i, hi = Color >> 8, 
      000C31 8F 05            [24] 3497 	mov	ar5,r7
                                   3498 ;	.\ecen4350_lcd_v4.c:569: lo = Color;
                                   3499 ;	.\ecen4350_lcd_v4.c:572: setAddress(0, 0, TFTWIDTH - 1, 39);
      000C33 E4               [12] 3500 	clr	a
      000C34 F5 6B            [12] 3501 	mov	_setAddress_PARM_2,a
      000C36 F5 6C            [12] 3502 	mov	(_setAddress_PARM_2 + 1),a
      000C38 75 6D EF         [24] 3503 	mov	_setAddress_PARM_3,#0xef
                                   3504 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000C3B F5 6E            [12] 3505 	mov	(_setAddress_PARM_3 + 1),a
      000C3D 75 6F 27         [24] 3506 	mov	_setAddress_PARM_4,#0x27
                                   3507 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000C40 F5 70            [12] 3508 	mov	(_setAddress_PARM_4 + 1),a
      000C42 90 00 00         [24] 3509 	mov	dptr,#0x0000
      000C45 C0 06            [24] 3510 	push	ar6
      000C47 C0 05            [24] 3511 	push	ar5
      000C49 12 05 FA         [24] 3512 	lcall	_setAddress
      000C4C D0 05            [24] 3513 	pop	ar5
      000C4E D0 06            [24] 3514 	pop	ar6
                                   3515 ;	.\ecen4350_lcd_v4.c:574: write8Reg(0x2C);
                                   3516 ;	assignBit
      000C50 C2 B4            [12] 3517 	clr	_P3_4
                                   3518 ;	assignBit
      000C52 D2 B5            [12] 3519 	setb	_P3_5
      000C54 85 0A 82         [24] 3520 	mov	dpl,_lcd_address
      000C57 85 0B 83         [24] 3521 	mov	dph,(_lcd_address + 1)
      000C5A 74 2C            [12] 3522 	mov	a,#0x2c
      000C5C F0               [24] 3523 	movx	@dptr,a
                                   3524 ;	assignBit
      000C5D C2 B5            [12] 3525 	clr	_P3_5
                                   3526 ;	.\ecen4350_lcd_v4.c:576: CD = 1;
                                   3527 ;	assignBit
      000C5F D2 B4            [12] 3528 	setb	_P3_4
                                   3529 ;	.\ecen4350_lcd_v4.c:577: write8(hi);
                                   3530 ;	assignBit
      000C61 D2 B5            [12] 3531 	setb	_P3_5
      000C63 85 0A 82         [24] 3532 	mov	dpl,_lcd_address
      000C66 85 0B 83         [24] 3533 	mov	dph,(_lcd_address + 1)
      000C69 ED               [12] 3534 	mov	a,r5
      000C6A F0               [24] 3535 	movx	@dptr,a
                                   3536 ;	assignBit
      000C6B C2 B5            [12] 3537 	clr	_P3_5
                                   3538 ;	.\ecen4350_lcd_v4.c:578: write8(lo);
                                   3539 ;	assignBit
      000C6D D2 B5            [12] 3540 	setb	_P3_5
      000C6F 85 0A 82         [24] 3541 	mov	dpl,_lcd_address
      000C72 85 0B 83         [24] 3542 	mov	dph,(_lcd_address + 1)
      000C75 EE               [12] 3543 	mov	a,r6
      000C76 F0               [24] 3544 	movx	@dptr,a
                                   3545 ;	assignBit
      000C77 C2 B5            [12] 3546 	clr	_P3_5
                                   3547 ;	.\ecen4350_lcd_v4.c:581: while (blocks--)
      000C79 7C 96            [12] 3548 	mov	r4,#0x96
      000C7B 7F 00            [12] 3549 	mov	r7,#0x00
      000C7D                       3550 00104$:
      000C7D 8C 02            [24] 3551 	mov	ar2,r4
      000C7F 8F 03            [24] 3552 	mov	ar3,r7
      000C81 1C               [12] 3553 	dec	r4
      000C82 BC FF 01         [24] 3554 	cjne	r4,#0xff,00140$
      000C85 1F               [12] 3555 	dec	r7
      000C86                       3556 00140$:
      000C86 EA               [12] 3557 	mov	a,r2
      000C87 4B               [12] 3558 	orl	a,r3
      000C88 60 66            [24] 3559 	jz	00106$
                                   3560 ;	.\ecen4350_lcd_v4.c:584: do
      000C8A 7B 10            [12] 3561 	mov	r3,#0x10
      000C8C                       3562 00101$:
                                   3563 ;	.\ecen4350_lcd_v4.c:587: write8(hi);
                                   3564 ;	assignBit
      000C8C D2 B5            [12] 3565 	setb	_P3_5
      000C8E 85 0A 82         [24] 3566 	mov	dpl,_lcd_address
      000C91 85 0B 83         [24] 3567 	mov	dph,(_lcd_address + 1)
      000C94 ED               [12] 3568 	mov	a,r5
      000C95 F0               [24] 3569 	movx	@dptr,a
                                   3570 ;	assignBit
      000C96 C2 B5            [12] 3571 	clr	_P3_5
                                   3572 ;	.\ecen4350_lcd_v4.c:588: write8(lo);
                                   3573 ;	assignBit
      000C98 D2 B5            [12] 3574 	setb	_P3_5
      000C9A 85 0A 82         [24] 3575 	mov	dpl,_lcd_address
      000C9D 85 0B 83         [24] 3576 	mov	dph,(_lcd_address + 1)
      000CA0 EE               [12] 3577 	mov	a,r6
      000CA1 F0               [24] 3578 	movx	@dptr,a
                                   3579 ;	assignBit
      000CA2 C2 B5            [12] 3580 	clr	_P3_5
                                   3581 ;	.\ecen4350_lcd_v4.c:589: write8(hi);
                                   3582 ;	assignBit
      000CA4 D2 B5            [12] 3583 	setb	_P3_5
      000CA6 85 0A 82         [24] 3584 	mov	dpl,_lcd_address
      000CA9 85 0B 83         [24] 3585 	mov	dph,(_lcd_address + 1)
      000CAC ED               [12] 3586 	mov	a,r5
      000CAD F0               [24] 3587 	movx	@dptr,a
                                   3588 ;	assignBit
      000CAE C2 B5            [12] 3589 	clr	_P3_5
                                   3590 ;	.\ecen4350_lcd_v4.c:590: write8(lo);
                                   3591 ;	assignBit
      000CB0 D2 B5            [12] 3592 	setb	_P3_5
      000CB2 85 0A 82         [24] 3593 	mov	dpl,_lcd_address
      000CB5 85 0B 83         [24] 3594 	mov	dph,(_lcd_address + 1)
      000CB8 EE               [12] 3595 	mov	a,r6
      000CB9 F0               [24] 3596 	movx	@dptr,a
                                   3597 ;	assignBit
      000CBA C2 B5            [12] 3598 	clr	_P3_5
                                   3599 ;	.\ecen4350_lcd_v4.c:591: write8(hi);
                                   3600 ;	assignBit
      000CBC D2 B5            [12] 3601 	setb	_P3_5
      000CBE 85 0A 82         [24] 3602 	mov	dpl,_lcd_address
      000CC1 85 0B 83         [24] 3603 	mov	dph,(_lcd_address + 1)
      000CC4 ED               [12] 3604 	mov	a,r5
      000CC5 F0               [24] 3605 	movx	@dptr,a
                                   3606 ;	assignBit
      000CC6 C2 B5            [12] 3607 	clr	_P3_5
                                   3608 ;	.\ecen4350_lcd_v4.c:592: write8(lo);
                                   3609 ;	assignBit
      000CC8 D2 B5            [12] 3610 	setb	_P3_5
      000CCA 85 0A 82         [24] 3611 	mov	dpl,_lcd_address
      000CCD 85 0B 83         [24] 3612 	mov	dph,(_lcd_address + 1)
      000CD0 EE               [12] 3613 	mov	a,r6
      000CD1 F0               [24] 3614 	movx	@dptr,a
                                   3615 ;	assignBit
      000CD2 C2 B5            [12] 3616 	clr	_P3_5
                                   3617 ;	.\ecen4350_lcd_v4.c:593: write8(hi);
                                   3618 ;	assignBit
      000CD4 D2 B5            [12] 3619 	setb	_P3_5
      000CD6 85 0A 82         [24] 3620 	mov	dpl,_lcd_address
      000CD9 85 0B 83         [24] 3621 	mov	dph,(_lcd_address + 1)
      000CDC ED               [12] 3622 	mov	a,r5
      000CDD F0               [24] 3623 	movx	@dptr,a
                                   3624 ;	assignBit
      000CDE C2 B5            [12] 3625 	clr	_P3_5
                                   3626 ;	.\ecen4350_lcd_v4.c:594: write8(lo);
                                   3627 ;	assignBit
      000CE0 D2 B5            [12] 3628 	setb	_P3_5
      000CE2 85 0A 82         [24] 3629 	mov	dpl,_lcd_address
      000CE5 85 0B 83         [24] 3630 	mov	dph,(_lcd_address + 1)
      000CE8 EE               [12] 3631 	mov	a,r6
      000CE9 F0               [24] 3632 	movx	@dptr,a
                                   3633 ;	assignBit
      000CEA C2 B5            [12] 3634 	clr	_P3_5
                                   3635 ;	.\ecen4350_lcd_v4.c:595: } while (--i);
      000CEC DB 9E            [24] 3636 	djnz	r3,00101$
      000CEE 80 8D            [24] 3637 	sjmp	00104$
      000CF0                       3638 00106$:
                                   3639 ;	.\ecen4350_lcd_v4.c:597: for (i = (char)len & 63; i--;)
      000CF0 7F 3F            [12] 3640 	mov	r7,#0x3f
      000CF2                       3641 00109$:
      000CF2 8F 04            [24] 3642 	mov	ar4,r7
      000CF4 1F               [12] 3643 	dec	r7
      000CF5 EC               [12] 3644 	mov	a,r4
      000CF6 60 1A            [24] 3645 	jz	00111$
                                   3646 ;	.\ecen4350_lcd_v4.c:600: write8(hi);
                                   3647 ;	assignBit
      000CF8 D2 B5            [12] 3648 	setb	_P3_5
      000CFA 85 0A 82         [24] 3649 	mov	dpl,_lcd_address
      000CFD 85 0B 83         [24] 3650 	mov	dph,(_lcd_address + 1)
      000D00 ED               [12] 3651 	mov	a,r5
      000D01 F0               [24] 3652 	movx	@dptr,a
                                   3653 ;	assignBit
      000D02 C2 B5            [12] 3654 	clr	_P3_5
                                   3655 ;	.\ecen4350_lcd_v4.c:601: write8(lo);
                                   3656 ;	assignBit
      000D04 D2 B5            [12] 3657 	setb	_P3_5
      000D06 85 0A 82         [24] 3658 	mov	dpl,_lcd_address
      000D09 85 0B 83         [24] 3659 	mov	dph,(_lcd_address + 1)
      000D0C EE               [12] 3660 	mov	a,r6
      000D0D F0               [24] 3661 	movx	@dptr,a
                                   3662 ;	assignBit
      000D0E C2 B5            [12] 3663 	clr	_P3_5
      000D10 80 E0            [24] 3664 	sjmp	00109$
      000D12                       3665 00111$:
                                   3666 ;	.\ecen4350_lcd_v4.c:605: }
      000D12 22               [24] 3667 	ret
                                   3668 ;------------------------------------------------------------
                                   3669 ;Allocation info for local variables in function 'fillScreen'
                                   3670 ;------------------------------------------------------------
                                   3671 ;Color                     Allocated to registers r6 r7 
                                   3672 ;len                       Allocated to registers 
                                   3673 ;blocks                    Allocated to registers r4 r7 
                                   3674 ;i                         Allocated to registers r3 
                                   3675 ;hi                        Allocated to registers r5 
                                   3676 ;lo                        Allocated to registers r6 
                                   3677 ;------------------------------------------------------------
                                   3678 ;	.\ecen4350_lcd_v4.c:607: void fillScreen(unsigned int Color)
                                   3679 ;	-----------------------------------------
                                   3680 ;	 function fillScreen
                                   3681 ;	-----------------------------------------
      000D13                       3682 _fillScreen:
      000D13 AE 82            [24] 3683 	mov	r6,dpl
      000D15 AF 83            [24] 3684 	mov	r7,dph
                                   3685 ;	.\ecen4350_lcd_v4.c:614: unsigned char i, hi = Color >> 8,
      000D17 8F 05            [24] 3686 	mov	ar5,r7
                                   3687 ;	.\ecen4350_lcd_v4.c:615: lo = Color;
                                   3688 ;	.\ecen4350_lcd_v4.c:618: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000D19 E4               [12] 3689 	clr	a
      000D1A F5 6B            [12] 3690 	mov	_setAddress_PARM_2,a
      000D1C F5 6C            [12] 3691 	mov	(_setAddress_PARM_2 + 1),a
      000D1E 75 6D EF         [24] 3692 	mov	_setAddress_PARM_3,#0xef
                                   3693 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000D21 F5 6E            [12] 3694 	mov	(_setAddress_PARM_3 + 1),a
      000D23 75 6F 3F         [24] 3695 	mov	_setAddress_PARM_4,#0x3f
      000D26 75 70 01         [24] 3696 	mov	(_setAddress_PARM_4 + 1),#0x01
      000D29 90 00 00         [24] 3697 	mov	dptr,#0x0000
      000D2C C0 06            [24] 3698 	push	ar6
      000D2E C0 05            [24] 3699 	push	ar5
      000D30 12 05 FA         [24] 3700 	lcall	_setAddress
      000D33 D0 05            [24] 3701 	pop	ar5
      000D35 D0 06            [24] 3702 	pop	ar6
                                   3703 ;	.\ecen4350_lcd_v4.c:622: write8Reg(0x2C);
                                   3704 ;	assignBit
      000D37 C2 B4            [12] 3705 	clr	_P3_4
                                   3706 ;	assignBit
      000D39 D2 B5            [12] 3707 	setb	_P3_5
      000D3B 85 0A 82         [24] 3708 	mov	dpl,_lcd_address
      000D3E 85 0B 83         [24] 3709 	mov	dph,(_lcd_address + 1)
      000D41 74 2C            [12] 3710 	mov	a,#0x2c
      000D43 F0               [24] 3711 	movx	@dptr,a
                                   3712 ;	assignBit
      000D44 C2 B5            [12] 3713 	clr	_P3_5
                                   3714 ;	.\ecen4350_lcd_v4.c:624: CD = 1;
                                   3715 ;	assignBit
      000D46 D2 B4            [12] 3716 	setb	_P3_4
                                   3717 ;	.\ecen4350_lcd_v4.c:625: write8(hi);
                                   3718 ;	assignBit
      000D48 D2 B5            [12] 3719 	setb	_P3_5
      000D4A 85 0A 82         [24] 3720 	mov	dpl,_lcd_address
      000D4D 85 0B 83         [24] 3721 	mov	dph,(_lcd_address + 1)
      000D50 ED               [12] 3722 	mov	a,r5
      000D51 F0               [24] 3723 	movx	@dptr,a
                                   3724 ;	assignBit
      000D52 C2 B5            [12] 3725 	clr	_P3_5
                                   3726 ;	.\ecen4350_lcd_v4.c:626: write8(lo);
                                   3727 ;	assignBit
      000D54 D2 B5            [12] 3728 	setb	_P3_5
      000D56 85 0A 82         [24] 3729 	mov	dpl,_lcd_address
      000D59 85 0B 83         [24] 3730 	mov	dph,(_lcd_address + 1)
      000D5C EE               [12] 3731 	mov	a,r6
      000D5D F0               [24] 3732 	movx	@dptr,a
                                   3733 ;	assignBit
      000D5E C2 B5            [12] 3734 	clr	_P3_5
                                   3735 ;	.\ecen4350_lcd_v4.c:629: while (blocks--)
      000D60 7C B0            [12] 3736 	mov	r4,#0xb0
      000D62 7F 04            [12] 3737 	mov	r7,#0x04
      000D64                       3738 00104$:
      000D64 8C 02            [24] 3739 	mov	ar2,r4
      000D66 8F 03            [24] 3740 	mov	ar3,r7
      000D68 1C               [12] 3741 	dec	r4
      000D69 BC FF 01         [24] 3742 	cjne	r4,#0xff,00140$
      000D6C 1F               [12] 3743 	dec	r7
      000D6D                       3744 00140$:
      000D6D EA               [12] 3745 	mov	a,r2
      000D6E 4B               [12] 3746 	orl	a,r3
      000D6F 60 66            [24] 3747 	jz	00106$
                                   3748 ;	.\ecen4350_lcd_v4.c:632: do
      000D71 7B 10            [12] 3749 	mov	r3,#0x10
      000D73                       3750 00101$:
                                   3751 ;	.\ecen4350_lcd_v4.c:635: write8(hi);
                                   3752 ;	assignBit
      000D73 D2 B5            [12] 3753 	setb	_P3_5
      000D75 85 0A 82         [24] 3754 	mov	dpl,_lcd_address
      000D78 85 0B 83         [24] 3755 	mov	dph,(_lcd_address + 1)
      000D7B ED               [12] 3756 	mov	a,r5
      000D7C F0               [24] 3757 	movx	@dptr,a
                                   3758 ;	assignBit
      000D7D C2 B5            [12] 3759 	clr	_P3_5
                                   3760 ;	.\ecen4350_lcd_v4.c:636: write8(lo);
                                   3761 ;	assignBit
      000D7F D2 B5            [12] 3762 	setb	_P3_5
      000D81 85 0A 82         [24] 3763 	mov	dpl,_lcd_address
      000D84 85 0B 83         [24] 3764 	mov	dph,(_lcd_address + 1)
      000D87 EE               [12] 3765 	mov	a,r6
      000D88 F0               [24] 3766 	movx	@dptr,a
                                   3767 ;	assignBit
      000D89 C2 B5            [12] 3768 	clr	_P3_5
                                   3769 ;	.\ecen4350_lcd_v4.c:637: write8(hi);
                                   3770 ;	assignBit
      000D8B D2 B5            [12] 3771 	setb	_P3_5
      000D8D 85 0A 82         [24] 3772 	mov	dpl,_lcd_address
      000D90 85 0B 83         [24] 3773 	mov	dph,(_lcd_address + 1)
      000D93 ED               [12] 3774 	mov	a,r5
      000D94 F0               [24] 3775 	movx	@dptr,a
                                   3776 ;	assignBit
      000D95 C2 B5            [12] 3777 	clr	_P3_5
                                   3778 ;	.\ecen4350_lcd_v4.c:638: write8(lo);
                                   3779 ;	assignBit
      000D97 D2 B5            [12] 3780 	setb	_P3_5
      000D99 85 0A 82         [24] 3781 	mov	dpl,_lcd_address
      000D9C 85 0B 83         [24] 3782 	mov	dph,(_lcd_address + 1)
      000D9F EE               [12] 3783 	mov	a,r6
      000DA0 F0               [24] 3784 	movx	@dptr,a
                                   3785 ;	assignBit
      000DA1 C2 B5            [12] 3786 	clr	_P3_5
                                   3787 ;	.\ecen4350_lcd_v4.c:639: write8(hi);
                                   3788 ;	assignBit
      000DA3 D2 B5            [12] 3789 	setb	_P3_5
      000DA5 85 0A 82         [24] 3790 	mov	dpl,_lcd_address
      000DA8 85 0B 83         [24] 3791 	mov	dph,(_lcd_address + 1)
      000DAB ED               [12] 3792 	mov	a,r5
      000DAC F0               [24] 3793 	movx	@dptr,a
                                   3794 ;	assignBit
      000DAD C2 B5            [12] 3795 	clr	_P3_5
                                   3796 ;	.\ecen4350_lcd_v4.c:640: write8(lo);
                                   3797 ;	assignBit
      000DAF D2 B5            [12] 3798 	setb	_P3_5
      000DB1 85 0A 82         [24] 3799 	mov	dpl,_lcd_address
      000DB4 85 0B 83         [24] 3800 	mov	dph,(_lcd_address + 1)
      000DB7 EE               [12] 3801 	mov	a,r6
      000DB8 F0               [24] 3802 	movx	@dptr,a
                                   3803 ;	assignBit
      000DB9 C2 B5            [12] 3804 	clr	_P3_5
                                   3805 ;	.\ecen4350_lcd_v4.c:641: write8(hi);
                                   3806 ;	assignBit
      000DBB D2 B5            [12] 3807 	setb	_P3_5
      000DBD 85 0A 82         [24] 3808 	mov	dpl,_lcd_address
      000DC0 85 0B 83         [24] 3809 	mov	dph,(_lcd_address + 1)
      000DC3 ED               [12] 3810 	mov	a,r5
      000DC4 F0               [24] 3811 	movx	@dptr,a
                                   3812 ;	assignBit
      000DC5 C2 B5            [12] 3813 	clr	_P3_5
                                   3814 ;	.\ecen4350_lcd_v4.c:642: write8(lo);
                                   3815 ;	assignBit
      000DC7 D2 B5            [12] 3816 	setb	_P3_5
      000DC9 85 0A 82         [24] 3817 	mov	dpl,_lcd_address
      000DCC 85 0B 83         [24] 3818 	mov	dph,(_lcd_address + 1)
      000DCF EE               [12] 3819 	mov	a,r6
      000DD0 F0               [24] 3820 	movx	@dptr,a
                                   3821 ;	assignBit
      000DD1 C2 B5            [12] 3822 	clr	_P3_5
                                   3823 ;	.\ecen4350_lcd_v4.c:643: } while (--i);
      000DD3 DB 9E            [24] 3824 	djnz	r3,00101$
      000DD5 80 8D            [24] 3825 	sjmp	00104$
      000DD7                       3826 00106$:
                                   3827 ;	.\ecen4350_lcd_v4.c:645: for (i = (char)len & 63; i--;)
      000DD7 7F 3F            [12] 3828 	mov	r7,#0x3f
      000DD9                       3829 00109$:
      000DD9 8F 04            [24] 3830 	mov	ar4,r7
      000DDB 1F               [12] 3831 	dec	r7
      000DDC EC               [12] 3832 	mov	a,r4
      000DDD 60 1A            [24] 3833 	jz	00111$
                                   3834 ;	.\ecen4350_lcd_v4.c:648: write8(hi);
                                   3835 ;	assignBit
      000DDF D2 B5            [12] 3836 	setb	_P3_5
      000DE1 85 0A 82         [24] 3837 	mov	dpl,_lcd_address
      000DE4 85 0B 83         [24] 3838 	mov	dph,(_lcd_address + 1)
      000DE7 ED               [12] 3839 	mov	a,r5
      000DE8 F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	assignBit
      000DE9 C2 B5            [12] 3842 	clr	_P3_5
                                   3843 ;	.\ecen4350_lcd_v4.c:649: write8(lo);
                                   3844 ;	assignBit
      000DEB D2 B5            [12] 3845 	setb	_P3_5
      000DED 85 0A 82         [24] 3846 	mov	dpl,_lcd_address
      000DF0 85 0B 83         [24] 3847 	mov	dph,(_lcd_address + 1)
      000DF3 EE               [12] 3848 	mov	a,r6
      000DF4 F0               [24] 3849 	movx	@dptr,a
                                   3850 ;	assignBit
      000DF5 C2 B5            [12] 3851 	clr	_P3_5
      000DF7 80 E0            [24] 3852 	sjmp	00109$
      000DF9                       3853 00111$:
                                   3854 ;	.\ecen4350_lcd_v4.c:653: }
      000DF9 22               [24] 3855 	ret
                                   3856 ;------------------------------------------------------------
                                   3857 ;Allocation info for local variables in function 'clearLCD'
                                   3858 ;------------------------------------------------------------
                                   3859 ;	.\ecen4350_lcd_v4.c:655: void clearLCD (void)
                                   3860 ;	-----------------------------------------
                                   3861 ;	 function clearLCD
                                   3862 ;	-----------------------------------------
      000DFA                       3863 _clearLCD:
                                   3864 ;	.\ecen4350_lcd_v4.c:657: fillScreen(colorBackground);
      000DFA 90 00 00         [24] 3865 	mov	dptr,#0x0000
                                   3866 ;	.\ecen4350_lcd_v4.c:658: }
      000DFD 02 0D 13         [24] 3867 	ljmp	_fillScreen
                                   3868 ;------------------------------------------------------------
                                   3869 ;Allocation info for local variables in function 'drawChar'
                                   3870 ;------------------------------------------------------------
                                   3871 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3872 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3873 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3874 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3875 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3876 ;x                         Allocated with name '_drawChar_x_65536_454'
                                   3877 ;i                         Allocated with name '_drawChar_i_131072_457'
                                   3878 ;line                      Allocated with name '_drawChar_line_196608_458'
                                   3879 ;j                         Allocated to registers r0 
                                   3880 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3881 ;------------------------------------------------------------
                                   3882 ;	.\ecen4350_lcd_v4.c:659: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3883 ;	-----------------------------------------
                                   3884 ;	 function drawChar
                                   3885 ;	-----------------------------------------
      000E00                       3886 _drawChar:
      000E00 85 82 50         [24] 3887 	mov	_drawChar_x_65536_454,dpl
      000E03 85 83 51         [24] 3888 	mov	(_drawChar_x_65536_454 + 1),dph
                                   3889 ;	.\ecen4350_lcd_v4.c:661: if ((x >= TFTWIDTH) ||			// Clip right
      000E06 C3               [12] 3890 	clr	c
      000E07 E5 50            [12] 3891 	mov	a,_drawChar_x_65536_454
      000E09 94 F0            [12] 3892 	subb	a,#0xf0
      000E0B E5 51            [12] 3893 	mov	a,(_drawChar_x_65536_454 + 1)
      000E0D 64 80            [12] 3894 	xrl	a,#0x80
      000E0F 94 80            [12] 3895 	subb	a,#0x80
      000E11 50 59            [24] 3896 	jnc	00101$
                                   3897 ;	.\ecen4350_lcd_v4.c:662: (y >= TFTHEIGHT) ||			// Clip bottom
      000E13 C3               [12] 3898 	clr	c
      000E14 E5 48            [12] 3899 	mov	a,_drawChar_PARM_2
      000E16 94 40            [12] 3900 	subb	a,#0x40
      000E18 E5 49            [12] 3901 	mov	a,(_drawChar_PARM_2 + 1)
      000E1A 64 80            [12] 3902 	xrl	a,#0x80
      000E1C 94 81            [12] 3903 	subb	a,#0x81
      000E1E 50 4C            [24] 3904 	jnc	00101$
                                   3905 ;	.\ecen4350_lcd_v4.c:663: ((x + 6 * size - 1) < 0) || // Clip left
      000E20 AC 4F            [24] 3906 	mov	r4,_drawChar_PARM_6
      000E22 7D 00            [12] 3907 	mov	r5,#0x00
      000E24 8C 6B            [24] 3908 	mov	__mulint_PARM_2,r4
      000E26 8D 6C            [24] 3909 	mov	(__mulint_PARM_2 + 1),r5
      000E28 90 00 06         [24] 3910 	mov	dptr,#0x0006
      000E2B C0 05            [24] 3911 	push	ar5
      000E2D C0 04            [24] 3912 	push	ar4
      000E2F 12 4E 93         [24] 3913 	lcall	__mulint
      000E32 AA 82            [24] 3914 	mov	r2,dpl
      000E34 AB 83            [24] 3915 	mov	r3,dph
      000E36 D0 04            [24] 3916 	pop	ar4
      000E38 D0 05            [24] 3917 	pop	ar5
      000E3A EA               [12] 3918 	mov	a,r2
      000E3B 25 50            [12] 3919 	add	a,_drawChar_x_65536_454
      000E3D FA               [12] 3920 	mov	r2,a
      000E3E EB               [12] 3921 	mov	a,r3
      000E3F 35 51            [12] 3922 	addc	a,(_drawChar_x_65536_454 + 1)
      000E41 FB               [12] 3923 	mov	r3,a
      000E42 1A               [12] 3924 	dec	r2
      000E43 BA FF 01         [24] 3925 	cjne	r2,#0xff,00182$
      000E46 1B               [12] 3926 	dec	r3
      000E47                       3927 00182$:
      000E47 EB               [12] 3928 	mov	a,r3
      000E48 20 E7 21         [24] 3929 	jb	acc.7,00101$
                                   3930 ;	.\ecen4350_lcd_v4.c:664: ((y + 8 * size - 1) < 0))	// Clip top
      000E4B ED               [12] 3931 	mov	a,r5
      000E4C C4               [12] 3932 	swap	a
      000E4D 03               [12] 3933 	rr	a
      000E4E 54 F8            [12] 3934 	anl	a,#0xf8
      000E50 CC               [12] 3935 	xch	a,r4
      000E51 C4               [12] 3936 	swap	a
      000E52 03               [12] 3937 	rr	a
      000E53 CC               [12] 3938 	xch	a,r4
      000E54 6C               [12] 3939 	xrl	a,r4
      000E55 CC               [12] 3940 	xch	a,r4
      000E56 54 F8            [12] 3941 	anl	a,#0xf8
      000E58 CC               [12] 3942 	xch	a,r4
      000E59 6C               [12] 3943 	xrl	a,r4
      000E5A FD               [12] 3944 	mov	r5,a
      000E5B EC               [12] 3945 	mov	a,r4
      000E5C 25 48            [12] 3946 	add	a,_drawChar_PARM_2
      000E5E FC               [12] 3947 	mov	r4,a
      000E5F ED               [12] 3948 	mov	a,r5
      000E60 35 49            [12] 3949 	addc	a,(_drawChar_PARM_2 + 1)
      000E62 FD               [12] 3950 	mov	r5,a
      000E63 1C               [12] 3951 	dec	r4
      000E64 BC FF 01         [24] 3952 	cjne	r4,#0xff,00184$
      000E67 1D               [12] 3953 	dec	r5
      000E68                       3954 00184$:
      000E68 ED               [12] 3955 	mov	a,r5
      000E69 30 E7 01         [24] 3956 	jnb	acc.7,00141$
      000E6C                       3957 00101$:
                                   3958 ;	.\ecen4350_lcd_v4.c:666: return;
      000E6C 22               [24] 3959 	ret
                                   3960 ;	.\ecen4350_lcd_v4.c:669: for (char i = 0; i < 6; i++)
      000E6D                       3961 00141$:
      000E6D 74 01            [12] 3962 	mov	a,#0x01
      000E6F B5 4F 04         [24] 3963 	cjne	a,_drawChar_PARM_6,00186$
      000E72 74 01            [12] 3964 	mov	a,#0x01
      000E74 80 01            [24] 3965 	sjmp	00187$
      000E76                       3966 00186$:
      000E76 E4               [12] 3967 	clr	a
      000E77                       3968 00187$:
      000E77 FD               [12] 3969 	mov	r5,a
      000E78 FC               [12] 3970 	mov	r4,a
      000E79 E5 4B            [12] 3971 	mov	a,_drawChar_PARM_4
      000E7B B5 4D 09         [24] 3972 	cjne	a,_drawChar_PARM_5,00188$
      000E7E E5 4C            [12] 3973 	mov	a,(_drawChar_PARM_4 + 1)
      000E80 B5 4E 04         [24] 3974 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000E83 74 01            [12] 3975 	mov	a,#0x01
      000E85 80 01            [24] 3976 	sjmp	00189$
      000E87                       3977 00188$:
      000E87 E4               [12] 3978 	clr	a
      000E88                       3979 00189$:
      000E88 FB               [12] 3980 	mov	r3,a
      000E89 75 52 00         [24] 3981 	mov	_drawChar_i_131072_457,#0x00
      000E8C                       3982 00126$:
      000E8C 74 FA            [12] 3983 	mov	a,#0x100 - 0x06
      000E8E 25 52            [12] 3984 	add	a,_drawChar_i_131072_457
      000E90 50 01            [24] 3985 	jnc	00190$
      000E92 22               [24] 3986 	ret
      000E93                       3987 00190$:
                                   3988 ;	.\ecen4350_lcd_v4.c:673: if (i == 5)
      000E93 74 05            [12] 3989 	mov	a,#0x05
      000E95 B5 52 05         [24] 3990 	cjne	a,_drawChar_i_131072_457,00107$
                                   3991 ;	.\ecen4350_lcd_v4.c:675: line = 0x0;
      000E98 75 53 00         [24] 3992 	mov	_drawChar_line_196608_458,#0x00
      000E9B 80 31            [24] 3993 	sjmp	00140$
      000E9D                       3994 00107$:
                                   3995 ;	.\ecen4350_lcd_v4.c:679: line = pgm_read_byte(font + (c * 5) + i);
      000E9D 85 4A 6B         [24] 3996 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000EA0 75 6C 00         [24] 3997 	mov	(__mulint_PARM_2 + 1),#0x00
      000EA3 90 00 05         [24] 3998 	mov	dptr,#0x0005
      000EA6 C0 05            [24] 3999 	push	ar5
      000EA8 C0 04            [24] 4000 	push	ar4
      000EAA C0 03            [24] 4001 	push	ar3
      000EAC 12 4E 93         [24] 4002 	lcall	__mulint
      000EAF A8 82            [24] 4003 	mov	r0,dpl
      000EB1 AF 83            [24] 4004 	mov	r7,dph
      000EB3 D0 03            [24] 4005 	pop	ar3
      000EB5 D0 04            [24] 4006 	pop	ar4
      000EB7 D0 05            [24] 4007 	pop	ar5
      000EB9 E8               [12] 4008 	mov	a,r0
      000EBA 24 8B            [12] 4009 	add	a,#_font
      000EBC F8               [12] 4010 	mov	r0,a
      000EBD EF               [12] 4011 	mov	a,r7
      000EBE 34 4F            [12] 4012 	addc	a,#(_font >> 8)
      000EC0 FF               [12] 4013 	mov	r7,a
      000EC1 E5 52            [12] 4014 	mov	a,_drawChar_i_131072_457
      000EC3 28               [12] 4015 	add	a,r0
      000EC4 F5 82            [12] 4016 	mov	dpl,a
      000EC6 E4               [12] 4017 	clr	a
      000EC7 3F               [12] 4018 	addc	a,r7
      000EC8 F5 83            [12] 4019 	mov	dph,a
      000ECA E4               [12] 4020 	clr	a
      000ECB 93               [24] 4021 	movc	a,@a+dptr
      000ECC F5 53            [12] 4022 	mov	_drawChar_line_196608_458,a
                                   4023 ;	.\ecen4350_lcd_v4.c:682: for (char j = 0; j < 8; j++)
      000ECE                       4024 00140$:
      000ECE 85 52 F0         [24] 4025 	mov	b,_drawChar_i_131072_457
      000ED1 E5 4F            [12] 4026 	mov	a,_drawChar_PARM_6
      000ED3 A4               [48] 4027 	mul	ab
      000ED4 25 50            [12] 4028 	add	a,_drawChar_x_65536_454
      000ED6 FE               [12] 4029 	mov	r6,a
      000ED7 E5 51            [12] 4030 	mov	a,(_drawChar_x_65536_454 + 1)
      000ED9 35 F0            [12] 4031 	addc	a,b
      000EDB FF               [12] 4032 	mov	r7,a
      000EDC 8E 54            [24] 4033 	mov	_drawChar_sloc0_1_0,r6
      000EDE 8F 55            [24] 4034 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000EE0 78 00            [12] 4035 	mov	r0,#0x00
      000EE2                       4036 00123$:
      000EE2 B8 08 00         [24] 4037 	cjne	r0,#0x08,00193$
      000EE5                       4038 00193$:
      000EE5 40 03            [24] 4039 	jc	00194$
      000EE7 02 10 0C         [24] 4040 	ljmp	00127$
      000EEA                       4041 00194$:
                                   4042 ;	.\ecen4350_lcd_v4.c:684: if (line & 0x1)
      000EEA E5 53            [12] 4043 	mov	a,_drawChar_line_196608_458
      000EEC 20 E0 03         [24] 4044 	jb	acc.0,00195$
      000EEF 02 0F 7A         [24] 4045 	ljmp	00118$
      000EF2                       4046 00195$:
                                   4047 ;	.\ecen4350_lcd_v4.c:686: if (size == 1) // default size
      000EF2 ED               [12] 4048 	mov	a,r5
      000EF3 60 40            [24] 4049 	jz	00110$
                                   4050 ;	.\ecen4350_lcd_v4.c:688: drawPixel(x + i, y + j, color);
      000EF5 A9 52            [24] 4051 	mov	r1,_drawChar_i_131072_457
      000EF7 7A 00            [12] 4052 	mov	r2,#0x00
      000EF9 E9               [12] 4053 	mov	a,r1
      000EFA 25 50            [12] 4054 	add	a,_drawChar_x_65536_454
      000EFC F5 82            [12] 4055 	mov	dpl,a
      000EFE EA               [12] 4056 	mov	a,r2
      000EFF 35 51            [12] 4057 	addc	a,(_drawChar_x_65536_454 + 1)
      000F01 F5 83            [12] 4058 	mov	dph,a
      000F03 88 01            [24] 4059 	mov	ar1,r0
      000F05 7A 00            [12] 4060 	mov	r2,#0x00
      000F07 E9               [12] 4061 	mov	a,r1
      000F08 25 48            [12] 4062 	add	a,_drawChar_PARM_2
      000F0A F5 28            [12] 4063 	mov	_drawPixel_PARM_2,a
      000F0C EA               [12] 4064 	mov	a,r2
      000F0D 35 49            [12] 4065 	addc	a,(_drawChar_PARM_2 + 1)
      000F0F F5 29            [12] 4066 	mov	(_drawPixel_PARM_2 + 1),a
      000F11 85 4B 2A         [24] 4067 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000F14 85 4C 2B         [24] 4068 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000F17 C0 07            [24] 4069 	push	ar7
      000F19 C0 06            [24] 4070 	push	ar6
      000F1B C0 05            [24] 4071 	push	ar5
      000F1D C0 04            [24] 4072 	push	ar4
      000F1F C0 03            [24] 4073 	push	ar3
      000F21 C0 00            [24] 4074 	push	ar0
      000F23 12 07 D4         [24] 4075 	lcall	_drawPixel
      000F26 D0 00            [24] 4076 	pop	ar0
      000F28 D0 03            [24] 4077 	pop	ar3
      000F2A D0 04            [24] 4078 	pop	ar4
      000F2C D0 05            [24] 4079 	pop	ar5
      000F2E D0 06            [24] 4080 	pop	ar6
      000F30 D0 07            [24] 4081 	pop	ar7
      000F32 02 10 02         [24] 4082 	ljmp	00119$
      000F35                       4083 00110$:
                                   4084 ;	.\ecen4350_lcd_v4.c:692: fillRect(x + (i * size), y + (j * size), size, size, color);
      000F35 88 F0            [24] 4085 	mov	b,r0
      000F37 E5 4F            [12] 4086 	mov	a,_drawChar_PARM_6
      000F39 A4               [48] 4087 	mul	ab
      000F3A 25 48            [12] 4088 	add	a,_drawChar_PARM_2
      000F3C F5 40            [12] 4089 	mov	_fillRect_PARM_2,a
      000F3E E5 49            [12] 4090 	mov	a,(_drawChar_PARM_2 + 1)
      000F40 35 F0            [12] 4091 	addc	a,b
      000F42 F5 41            [12] 4092 	mov	(_fillRect_PARM_2 + 1),a
      000F44 A9 4F            [24] 4093 	mov	r1,_drawChar_PARM_6
      000F46 7A 00            [12] 4094 	mov	r2,#0x00
      000F48 89 42            [24] 4095 	mov	_fillRect_PARM_3,r1
      000F4A 8A 43            [24] 4096 	mov	(_fillRect_PARM_3 + 1),r2
      000F4C 89 44            [24] 4097 	mov	_fillRect_PARM_4,r1
      000F4E 8A 45            [24] 4098 	mov	(_fillRect_PARM_4 + 1),r2
      000F50 85 4B 46         [24] 4099 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000F53 85 4C 47         [24] 4100 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000F56 85 54 82         [24] 4101 	mov	dpl,_drawChar_sloc0_1_0
      000F59 85 55 83         [24] 4102 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000F5C C0 07            [24] 4103 	push	ar7
      000F5E C0 06            [24] 4104 	push	ar6
      000F60 C0 05            [24] 4105 	push	ar5
      000F62 C0 04            [24] 4106 	push	ar4
      000F64 C0 03            [24] 4107 	push	ar3
      000F66 C0 00            [24] 4108 	push	ar0
      000F68 12 0B 50         [24] 4109 	lcall	_fillRect
      000F6B D0 00            [24] 4110 	pop	ar0
      000F6D D0 03            [24] 4111 	pop	ar3
      000F6F D0 04            [24] 4112 	pop	ar4
      000F71 D0 05            [24] 4113 	pop	ar5
      000F73 D0 06            [24] 4114 	pop	ar6
      000F75 D0 07            [24] 4115 	pop	ar7
      000F77 02 10 02         [24] 4116 	ljmp	00119$
      000F7A                       4117 00118$:
                                   4118 ;	.\ecen4350_lcd_v4.c:695: else if (bg != color)
      000F7A EB               [12] 4119 	mov	a,r3
      000F7B 60 03            [24] 4120 	jz	00197$
      000F7D 02 10 02         [24] 4121 	ljmp	00119$
      000F80                       4122 00197$:
                                   4123 ;	.\ecen4350_lcd_v4.c:697: if (size == 1) // default size
      000F80 EC               [12] 4124 	mov	a,r4
      000F81 60 3F            [24] 4125 	jz	00113$
                                   4126 ;	.\ecen4350_lcd_v4.c:699: drawPixel(x + i, y + j, bg);
      000F83 A9 52            [24] 4127 	mov	r1,_drawChar_i_131072_457
      000F85 7A 00            [12] 4128 	mov	r2,#0x00
      000F87 E9               [12] 4129 	mov	a,r1
      000F88 25 50            [12] 4130 	add	a,_drawChar_x_65536_454
      000F8A F5 82            [12] 4131 	mov	dpl,a
      000F8C EA               [12] 4132 	mov	a,r2
      000F8D 35 51            [12] 4133 	addc	a,(_drawChar_x_65536_454 + 1)
      000F8F F5 83            [12] 4134 	mov	dph,a
      000F91 88 01            [24] 4135 	mov	ar1,r0
      000F93 7A 00            [12] 4136 	mov	r2,#0x00
      000F95 E9               [12] 4137 	mov	a,r1
      000F96 25 48            [12] 4138 	add	a,_drawChar_PARM_2
      000F98 F5 28            [12] 4139 	mov	_drawPixel_PARM_2,a
      000F9A EA               [12] 4140 	mov	a,r2
      000F9B 35 49            [12] 4141 	addc	a,(_drawChar_PARM_2 + 1)
      000F9D F5 29            [12] 4142 	mov	(_drawPixel_PARM_2 + 1),a
      000F9F 85 4D 2A         [24] 4143 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000FA2 85 4E 2B         [24] 4144 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000FA5 C0 07            [24] 4145 	push	ar7
      000FA7 C0 06            [24] 4146 	push	ar6
      000FA9 C0 05            [24] 4147 	push	ar5
      000FAB C0 04            [24] 4148 	push	ar4
      000FAD C0 03            [24] 4149 	push	ar3
      000FAF C0 00            [24] 4150 	push	ar0
      000FB1 12 07 D4         [24] 4151 	lcall	_drawPixel
      000FB4 D0 00            [24] 4152 	pop	ar0
      000FB6 D0 03            [24] 4153 	pop	ar3
      000FB8 D0 04            [24] 4154 	pop	ar4
      000FBA D0 05            [24] 4155 	pop	ar5
      000FBC D0 06            [24] 4156 	pop	ar6
      000FBE D0 07            [24] 4157 	pop	ar7
      000FC0 80 40            [24] 4158 	sjmp	00119$
      000FC2                       4159 00113$:
                                   4160 ;	.\ecen4350_lcd_v4.c:703: fillRect(x + i * size, y + j * size, size, size, bg);
      000FC2 88 F0            [24] 4161 	mov	b,r0
      000FC4 E5 4F            [12] 4162 	mov	a,_drawChar_PARM_6
      000FC6 A4               [48] 4163 	mul	ab
      000FC7 25 48            [12] 4164 	add	a,_drawChar_PARM_2
      000FC9 F5 40            [12] 4165 	mov	_fillRect_PARM_2,a
      000FCB E5 49            [12] 4166 	mov	a,(_drawChar_PARM_2 + 1)
      000FCD 35 F0            [12] 4167 	addc	a,b
      000FCF F5 41            [12] 4168 	mov	(_fillRect_PARM_2 + 1),a
      000FD1 A9 4F            [24] 4169 	mov	r1,_drawChar_PARM_6
      000FD3 7A 00            [12] 4170 	mov	r2,#0x00
      000FD5 89 42            [24] 4171 	mov	_fillRect_PARM_3,r1
      000FD7 8A 43            [24] 4172 	mov	(_fillRect_PARM_3 + 1),r2
      000FD9 89 44            [24] 4173 	mov	_fillRect_PARM_4,r1
      000FDB 8A 45            [24] 4174 	mov	(_fillRect_PARM_4 + 1),r2
      000FDD 85 4D 46         [24] 4175 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000FE0 85 4E 47         [24] 4176 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000FE3 8E 82            [24] 4177 	mov	dpl,r6
      000FE5 8F 83            [24] 4178 	mov	dph,r7
      000FE7 C0 07            [24] 4179 	push	ar7
      000FE9 C0 06            [24] 4180 	push	ar6
      000FEB C0 05            [24] 4181 	push	ar5
      000FED C0 04            [24] 4182 	push	ar4
      000FEF C0 03            [24] 4183 	push	ar3
      000FF1 C0 00            [24] 4184 	push	ar0
      000FF3 12 0B 50         [24] 4185 	lcall	_fillRect
      000FF6 D0 00            [24] 4186 	pop	ar0
      000FF8 D0 03            [24] 4187 	pop	ar3
      000FFA D0 04            [24] 4188 	pop	ar4
      000FFC D0 05            [24] 4189 	pop	ar5
      000FFE D0 06            [24] 4190 	pop	ar6
      001000 D0 07            [24] 4191 	pop	ar7
      001002                       4192 00119$:
                                   4193 ;	.\ecen4350_lcd_v4.c:707: line >>= 1;
      001002 E5 53            [12] 4194 	mov	a,_drawChar_line_196608_458
      001004 C3               [12] 4195 	clr	c
      001005 13               [12] 4196 	rrc	a
      001006 F5 53            [12] 4197 	mov	_drawChar_line_196608_458,a
                                   4198 ;	.\ecen4350_lcd_v4.c:682: for (char j = 0; j < 8; j++)
      001008 08               [12] 4199 	inc	r0
      001009 02 0E E2         [24] 4200 	ljmp	00123$
      00100C                       4201 00127$:
                                   4202 ;	.\ecen4350_lcd_v4.c:669: for (char i = 0; i < 6; i++)
      00100C 05 52            [12] 4203 	inc	_drawChar_i_131072_457
                                   4204 ;	.\ecen4350_lcd_v4.c:710: }
      00100E 02 0E 8C         [24] 4205 	ljmp	00126$
                                   4206 ;------------------------------------------------------------
                                   4207 ;Allocation info for local variables in function 'write'
                                   4208 ;------------------------------------------------------------
                                   4209 ;c                         Allocated to registers r7 
                                   4210 ;------------------------------------------------------------
                                   4211 ;	.\ecen4350_lcd_v4.c:712: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4212 ;	-----------------------------------------
                                   4213 ;	 function write
                                   4214 ;	-----------------------------------------
      001011                       4215 _write:
      001011 AF 82            [24] 4216 	mov	r7,dpl
                                   4217 ;	.\ecen4350_lcd_v4.c:714: if (c == '\n')
      001013 BF 0A 22         [24] 4218 	cjne	r7,#0x0a,00105$
                                   4219 ;	.\ecen4350_lcd_v4.c:716: cursor_y += textsize * 8;
      001016 AD 14            [24] 4220 	mov	r5,_textsize
      001018 E4               [12] 4221 	clr	a
      001019 C4               [12] 4222 	swap	a
      00101A 03               [12] 4223 	rr	a
      00101B 54 F8            [12] 4224 	anl	a,#0xf8
      00101D CD               [12] 4225 	xch	a,r5
      00101E C4               [12] 4226 	swap	a
      00101F 03               [12] 4227 	rr	a
      001020 CD               [12] 4228 	xch	a,r5
      001021 6D               [12] 4229 	xrl	a,r5
      001022 CD               [12] 4230 	xch	a,r5
      001023 54 F8            [12] 4231 	anl	a,#0xf8
      001025 CD               [12] 4232 	xch	a,r5
      001026 6D               [12] 4233 	xrl	a,r5
      001027 FE               [12] 4234 	mov	r6,a
      001028 ED               [12] 4235 	mov	a,r5
      001029 25 12            [12] 4236 	add	a,_cursor_y
      00102B F5 12            [12] 4237 	mov	_cursor_y,a
      00102D EE               [12] 4238 	mov	a,r6
      00102E 35 13            [12] 4239 	addc	a,(_cursor_y + 1)
      001030 F5 13            [12] 4240 	mov	(_cursor_y + 1),a
                                   4241 ;	.\ecen4350_lcd_v4.c:717: cursor_x = 0;
      001032 E4               [12] 4242 	clr	a
      001033 F5 10            [12] 4243 	mov	_cursor_x,a
      001035 F5 11            [12] 4244 	mov	(_cursor_x + 1),a
      001037 22               [24] 4245 	ret
      001038                       4246 00105$:
                                   4247 ;	.\ecen4350_lcd_v4.c:719: else if (c == '\r')
      001038 BF 0D 01         [24] 4248 	cjne	r7,#0x0d,00119$
      00103B 22               [24] 4249 	ret
      00103C                       4250 00119$:
                                   4251 ;	.\ecen4350_lcd_v4.c:725: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      00103C 85 12 48         [24] 4252 	mov	_drawChar_PARM_2,_cursor_y
      00103F 85 13 49         [24] 4253 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      001042 8F 4A            [24] 4254 	mov	_drawChar_PARM_3,r7
      001044 85 16 4B         [24] 4255 	mov	_drawChar_PARM_4,_textcolor
      001047 85 17 4C         [24] 4256 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      00104A 85 18 4D         [24] 4257 	mov	_drawChar_PARM_5,_textbgcolor
      00104D 85 19 4E         [24] 4258 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      001050 85 14 4F         [24] 4259 	mov	_drawChar_PARM_6,_textsize
      001053 85 10 82         [24] 4260 	mov	dpl,_cursor_x
      001056 85 11 83         [24] 4261 	mov	dph,(_cursor_x + 1)
      001059 12 0E 00         [24] 4262 	lcall	_drawChar
                                   4263 ;	.\ecen4350_lcd_v4.c:726: cursor_x += textsize * 6;
      00105C 85 14 6B         [24] 4264 	mov	__mulint_PARM_2,_textsize
      00105F 75 6C 00         [24] 4265 	mov	(__mulint_PARM_2 + 1),#0x00
      001062 90 00 06         [24] 4266 	mov	dptr,#0x0006
      001065 12 4E 93         [24] 4267 	lcall	__mulint
      001068 AE 82            [24] 4268 	mov	r6,dpl
      00106A AF 83            [24] 4269 	mov	r7,dph
      00106C EE               [12] 4270 	mov	a,r6
      00106D 25 10            [12] 4271 	add	a,_cursor_x
      00106F F5 10            [12] 4272 	mov	_cursor_x,a
      001071 EF               [12] 4273 	mov	a,r7
      001072 35 11            [12] 4274 	addc	a,(_cursor_x + 1)
      001074 F5 11            [12] 4275 	mov	(_cursor_x + 1),a
                                   4276 ;	.\ecen4350_lcd_v4.c:728: }
      001076 22               [24] 4277 	ret
                                   4278 ;------------------------------------------------------------
                                   4279 ;Allocation info for local variables in function 'LCD_string_write'
                                   4280 ;------------------------------------------------------------
                                   4281 ;str                       Allocated to registers r5 r6 r7 
                                   4282 ;i                         Allocated to registers r3 r4 
                                   4283 ;------------------------------------------------------------
                                   4284 ;	.\ecen4350_lcd_v4.c:729: void LCD_string_write(char *str)
                                   4285 ;	-----------------------------------------
                                   4286 ;	 function LCD_string_write
                                   4287 ;	-----------------------------------------
      001077                       4288 _LCD_string_write:
      001077 AD 82            [24] 4289 	mov	r5,dpl
      001079 AE 83            [24] 4290 	mov	r6,dph
      00107B AF F0            [24] 4291 	mov	r7,b
                                   4292 ;	.\ecen4350_lcd_v4.c:732: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      00107D 7B 00            [12] 4293 	mov	r3,#0x00
      00107F 7C 00            [12] 4294 	mov	r4,#0x00
      001081                       4295 00103$:
      001081 EB               [12] 4296 	mov	a,r3
      001082 2D               [12] 4297 	add	a,r5
      001083 F8               [12] 4298 	mov	r0,a
      001084 EC               [12] 4299 	mov	a,r4
      001085 3E               [12] 4300 	addc	a,r6
      001086 F9               [12] 4301 	mov	r1,a
      001087 8F 02            [24] 4302 	mov	ar2,r7
      001089 88 82            [24] 4303 	mov	dpl,r0
      00108B 89 83            [24] 4304 	mov	dph,r1
      00108D 8A F0            [24] 4305 	mov	b,r2
      00108F 12 4E FD         [24] 4306 	lcall	__gptrget
      001092 FA               [12] 4307 	mov	r2,a
      001093 60 20            [24] 4308 	jz	00105$
                                   4309 ;	.\ecen4350_lcd_v4.c:734: write(str[i]); /* Call transmit data function */
      001095 8A 82            [24] 4310 	mov	dpl,r2
      001097 C0 07            [24] 4311 	push	ar7
      001099 C0 06            [24] 4312 	push	ar6
      00109B C0 05            [24] 4313 	push	ar5
      00109D C0 04            [24] 4314 	push	ar4
      00109F C0 03            [24] 4315 	push	ar3
      0010A1 12 10 11         [24] 4316 	lcall	_write
      0010A4 D0 03            [24] 4317 	pop	ar3
      0010A6 D0 04            [24] 4318 	pop	ar4
      0010A8 D0 05            [24] 4319 	pop	ar5
      0010AA D0 06            [24] 4320 	pop	ar6
      0010AC D0 07            [24] 4321 	pop	ar7
                                   4322 ;	.\ecen4350_lcd_v4.c:732: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      0010AE 0B               [12] 4323 	inc	r3
      0010AF BB 00 CF         [24] 4324 	cjne	r3,#0x00,00103$
      0010B2 0C               [12] 4325 	inc	r4
      0010B3 80 CC            [24] 4326 	sjmp	00103$
      0010B5                       4327 00105$:
                                   4328 ;	.\ecen4350_lcd_v4.c:736: }
      0010B5 22               [24] 4329 	ret
                                   4330 ;------------------------------------------------------------
                                   4331 ;Allocation info for local variables in function 'writeNewLine'
                                   4332 ;------------------------------------------------------------
                                   4333 ;	.\ecen4350_lcd_v4.c:738: void writeNewLine(void)
                                   4334 ;	-----------------------------------------
                                   4335 ;	 function writeNewLine
                                   4336 ;	-----------------------------------------
      0010B6                       4337 _writeNewLine:
                                   4338 ;	.\ecen4350_lcd_v4.c:740: write('\n');
      0010B6 75 82 0A         [24] 4339 	mov	dpl,#0x0a
                                   4340 ;	.\ecen4350_lcd_v4.c:741: }
      0010B9 02 10 11         [24] 4341 	ljmp	_write
                                   4342 ;------------------------------------------------------------
                                   4343 ;Allocation info for local variables in function 'freeType'
                                   4344 ;------------------------------------------------------------
                                   4345 ;count                     Allocated to registers r7 
                                   4346 ;d                         Allocated to registers 
                                   4347 ;row                       Allocated to registers r6 
                                   4348 ;------------------------------------------------------------
                                   4349 ;	.\ecen4350_lcd_v4.c:743: void freeType()
                                   4350 ;	-----------------------------------------
                                   4351 ;	 function freeType
                                   4352 ;	-----------------------------------------
      0010BC                       4353 _freeType:
                                   4354 ;	.\ecen4350_lcd_v4.c:745: unsigned char count = 0;
      0010BC 7F 00            [12] 4355 	mov	r7,#0x00
                                   4356 ;	.\ecen4350_lcd_v4.c:747: u8 row = 1;
      0010BE 7E 01            [12] 4357 	mov	r6,#0x01
                                   4358 ;	.\ecen4350_lcd_v4.c:749: clearLCD();
      0010C0 C0 07            [24] 4359 	push	ar7
      0010C2 C0 06            [24] 4360 	push	ar6
      0010C4 12 0D FA         [24] 4361 	lcall	_clearLCD
                                   4362 ;	.\ecen4350_lcd_v4.c:750: setCursor(0,0);
      0010C7 E4               [12] 4363 	clr	a
      0010C8 F5 6B            [12] 4364 	mov	_setCursor_PARM_2,a
      0010CA F5 6C            [12] 4365 	mov	(_setCursor_PARM_2 + 1),a
      0010CC 90 00 00         [24] 4366 	mov	dptr,#0x0000
      0010CF 12 05 5D         [24] 4367 	lcall	_setCursor
                                   4368 ;	.\ecen4350_lcd_v4.c:751: setTextColor(colorSelect, colorBackground);
      0010D2 E4               [12] 4369 	clr	a
      0010D3 F5 6B            [12] 4370 	mov	_setTextColor_PARM_2,a
      0010D5 F5 6C            [12] 4371 	mov	(_setTextColor_PARM_2 + 1),a
      0010D7 90 F8 1F         [24] 4372 	mov	dptr,#0xf81f
      0010DA 12 05 6A         [24] 4373 	lcall	_setTextColor
                                   4374 ;	.\ecen4350_lcd_v4.c:752: LCD_string_write("Free Type: \n");
      0010DD 90 54 A7         [24] 4375 	mov	dptr,#___str_1
      0010E0 75 F0 80         [24] 4376 	mov	b,#0x80
      0010E3 12 10 77         [24] 4377 	lcall	_LCD_string_write
                                   4378 ;	.\ecen4350_lcd_v4.c:753: setTextColor(colorText, colorBackground);
      0010E6 E4               [12] 4379 	clr	a
      0010E7 F5 6B            [12] 4380 	mov	_setTextColor_PARM_2,a
      0010E9 F5 6C            [12] 4381 	mov	(_setTextColor_PARM_2 + 1),a
      0010EB 90 07 FF         [24] 4382 	mov	dptr,#0x07ff
      0010EE 12 05 6A         [24] 4383 	lcall	_setTextColor
                                   4384 ;	.\ecen4350_lcd_v4.c:754: LCD_string_write("0x");
      0010F1 90 54 B4         [24] 4385 	mov	dptr,#___str_2
      0010F4 75 F0 80         [24] 4386 	mov	b,#0x80
      0010F7 12 10 77         [24] 4387 	lcall	_LCD_string_write
      0010FA D0 06            [24] 4388 	pop	ar6
      0010FC D0 07            [24] 4389 	pop	ar7
                                   4390 ;	.\ecen4350_lcd_v4.c:755: while (1)
      0010FE                       4391 00108$:
                                   4392 ;	.\ecen4350_lcd_v4.c:758: if (count == 8)
      0010FE BF 08 02         [24] 4393 	cjne	r7,#0x08,00124$
      001101 80 03            [24] 4394 	sjmp	00125$
      001103                       4395 00124$:
      001103 02 11 83         [24] 4396 	ljmp	00105$
      001106                       4397 00125$:
                                   4398 ;	.\ecen4350_lcd_v4.c:761: count = 0;
      001106 7F 00            [12] 4399 	mov	r7,#0x00
                                   4400 ;	.\ecen4350_lcd_v4.c:762: write(d);
      001108 75 82 0A         [24] 4401 	mov	dpl,#0x0a
      00110B C0 07            [24] 4402 	push	ar7
      00110D C0 06            [24] 4403 	push	ar6
      00110F 12 10 11         [24] 4404 	lcall	_write
      001112 D0 06            [24] 4405 	pop	ar6
      001114 D0 07            [24] 4406 	pop	ar7
                                   4407 ;	.\ecen4350_lcd_v4.c:763: if (row == 4)
      001116 BE 04 55         [24] 4408 	cjne	r6,#0x04,00102$
                                   4409 ;	.\ecen4350_lcd_v4.c:765: delay(5);
      001119 90 00 05         [24] 4410 	mov	dptr,#0x0005
      00111C C0 07            [24] 4411 	push	ar7
      00111E 12 01 87         [24] 4412 	lcall	_delay
                                   4413 ;	.\ecen4350_lcd_v4.c:766: clearLCD();
      001121 12 0D FA         [24] 4414 	lcall	_clearLCD
                                   4415 ;	.\ecen4350_lcd_v4.c:767: setTextColor(colorSelect, colorBackground);
      001124 E4               [12] 4416 	clr	a
      001125 F5 6B            [12] 4417 	mov	_setTextColor_PARM_2,a
      001127 F5 6C            [12] 4418 	mov	(_setTextColor_PARM_2 + 1),a
      001129 90 F8 1F         [24] 4419 	mov	dptr,#0xf81f
      00112C 12 05 6A         [24] 4420 	lcall	_setTextColor
                                   4421 ;	.\ecen4350_lcd_v4.c:768: rtcPrint();
      00112F 12 04 4D         [24] 4422 	lcall	_rtcPrint
                                   4423 ;	.\ecen4350_lcd_v4.c:769: clearLCD();
      001132 12 0D FA         [24] 4424 	lcall	_clearLCD
                                   4425 ;	.\ecen4350_lcd_v4.c:770: setCursor(0,0);
      001135 E4               [12] 4426 	clr	a
      001136 F5 6B            [12] 4427 	mov	_setCursor_PARM_2,a
      001138 F5 6C            [12] 4428 	mov	(_setCursor_PARM_2 + 1),a
      00113A 90 00 00         [24] 4429 	mov	dptr,#0x0000
      00113D 12 05 5D         [24] 4430 	lcall	_setCursor
                                   4431 ;	.\ecen4350_lcd_v4.c:771: setTextColor(colorSelect, colorBackground);
      001140 E4               [12] 4432 	clr	a
      001141 F5 6B            [12] 4433 	mov	_setTextColor_PARM_2,a
      001143 F5 6C            [12] 4434 	mov	(_setTextColor_PARM_2 + 1),a
      001145 90 F8 1F         [24] 4435 	mov	dptr,#0xf81f
      001148 12 05 6A         [24] 4436 	lcall	_setTextColor
                                   4437 ;	.\ecen4350_lcd_v4.c:772: LCD_string_write("Free Type: \n");
      00114B 90 54 A7         [24] 4438 	mov	dptr,#___str_1
      00114E 75 F0 80         [24] 4439 	mov	b,#0x80
      001151 12 10 77         [24] 4440 	lcall	_LCD_string_write
                                   4441 ;	.\ecen4350_lcd_v4.c:773: setTextColor(colorText, colorBackground);
      001154 E4               [12] 4442 	clr	a
      001155 F5 6B            [12] 4443 	mov	_setTextColor_PARM_2,a
      001157 F5 6C            [12] 4444 	mov	(_setTextColor_PARM_2 + 1),a
      001159 90 07 FF         [24] 4445 	mov	dptr,#0x07ff
      00115C 12 05 6A         [24] 4446 	lcall	_setTextColor
                                   4447 ;	.\ecen4350_lcd_v4.c:774: LCD_string_write("0x");
      00115F 90 54 B4         [24] 4448 	mov	dptr,#___str_2
      001162 75 F0 80         [24] 4449 	mov	b,#0x80
      001165 12 10 77         [24] 4450 	lcall	_LCD_string_write
      001168 D0 07            [24] 4451 	pop	ar7
                                   4452 ;	.\ecen4350_lcd_v4.c:776: row = 1;
      00116A 7E 01            [12] 4453 	mov	r6,#0x01
      00116C 80 90            [24] 4454 	sjmp	00108$
      00116E                       4455 00102$:
                                   4456 ;	.\ecen4350_lcd_v4.c:779: LCD_string_write("0x");
      00116E 90 54 B4         [24] 4457 	mov	dptr,#___str_2
      001171 75 F0 80         [24] 4458 	mov	b,#0x80
      001174 C0 07            [24] 4459 	push	ar7
      001176 C0 06            [24] 4460 	push	ar6
      001178 12 10 77         [24] 4461 	lcall	_LCD_string_write
      00117B D0 06            [24] 4462 	pop	ar6
      00117D D0 07            [24] 4463 	pop	ar7
                                   4464 ;	.\ecen4350_lcd_v4.c:780: row++;
      00117F 0E               [12] 4465 	inc	r6
      001180 02 10 FE         [24] 4466 	ljmp	00108$
      001183                       4467 00105$:
                                   4468 ;	.\ecen4350_lcd_v4.c:785: d = keyDetect();
      001183 C0 07            [24] 4469 	push	ar7
      001185 C0 06            [24] 4470 	push	ar6
      001187 12 11 95         [24] 4471 	lcall	_keyDetect
                                   4472 ;	.\ecen4350_lcd_v4.c:786: write(d);
      00118A 12 10 11         [24] 4473 	lcall	_write
      00118D D0 06            [24] 4474 	pop	ar6
      00118F D0 07            [24] 4475 	pop	ar7
                                   4476 ;	.\ecen4350_lcd_v4.c:787: count++;
      001191 0F               [12] 4477 	inc	r7
                                   4478 ;	.\ecen4350_lcd_v4.c:792: }
      001192 02 10 FE         [24] 4479 	ljmp	00108$
                                   4480 ;------------------------------------------------------------
                                   4481 ;Allocation info for local variables in function 'keyDetect'
                                   4482 ;------------------------------------------------------------
                                   4483 ;portdata                  Allocated to registers r7 
                                   4484 ;------------------------------------------------------------
                                   4485 ;	.\ecen4350_lcd_v4.c:795: unsigned char keyDetect()
                                   4486 ;	-----------------------------------------
                                   4487 ;	 function keyDetect
                                   4488 ;	-----------------------------------------
      001195                       4489 _keyDetect:
                                   4490 ;	.\ecen4350_lcd_v4.c:798: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      001195 75 90 F0         [24] 4491 	mov	_P1,#0xf0
                                   4492 ;	.\ecen4350_lcd_v4.c:799: do 
      001198                       4493 00101$:
                                   4494 ;	.\ecen4350_lcd_v4.c:801: portdata = (__KEYPAD_PORT__ & 0xF0);
      001198 E5 90            [12] 4495 	mov	a,_P1
      00119A 54 F0            [12] 4496 	anl	a,#0xf0
      00119C FF               [12] 4497 	mov	r7,a
                                   4498 ;	.\ecen4350_lcd_v4.c:802: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      00119D BF F0 F8         [24] 4499 	cjne	r7,#0xf0,00101$
                                   4500 ;	.\ecen4350_lcd_v4.c:806: do
      0011A0                       4501 00105$:
                                   4502 ;	.\ecen4350_lcd_v4.c:809: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      0011A0 85 90 08         [24] 4503 	mov	_colloc,_P1
                                   4504 ;	.\ecen4350_lcd_v4.c:810: colloc &= 0xF0;		  									/* mask port for column read only */
      0011A3 53 08 F0         [24] 4505 	anl	_colloc,#0xf0
                                   4506 ;	.\ecen4350_lcd_v4.c:811: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      0011A6 74 F0            [12] 4507 	mov	a,#0xf0
      0011A8 B5 08 04         [24] 4508 	cjne	a,_colloc,00107$
      0011AB E5 0F            [12] 4509 	mov	a,_received_flag
      0011AD 60 F1            [24] 4510 	jz	00105$
      0011AF                       4511 00107$:
                                   4512 ;	.\ecen4350_lcd_v4.c:812: delay(10);													/* 15ms key debounce time */
      0011AF 90 00 0A         [24] 4513 	mov	dptr,#0x000a
      0011B2 12 01 87         [24] 4514 	lcall	_delay
                                   4515 ;	.\ecen4350_lcd_v4.c:813: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      0011B5 E5 90            [12] 4516 	mov	a,_P1
      0011B7 54 F0            [12] 4517 	anl	a,#0xf0
                                   4518 ;	.\ecen4350_lcd_v4.c:814: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      0011B9 FF               [12] 4519 	mov	r7,a
      0011BA B5 08 02         [24] 4520 	cjne	a,_colloc,00214$
      0011BD 80 04            [24] 4521 	sjmp	00123$
      0011BF                       4522 00214$:
      0011BF E5 0F            [12] 4523 	mov	a,_received_flag
      0011C1 60 DD            [24] 4524 	jz	00105$
                                   4525 ;	.\ecen4350_lcd_v4.c:816: while (1)
      0011C3                       4526 00123$:
                                   4527 ;	.\ecen4350_lcd_v4.c:818: if (received_flag == 1)											/* check for key input via serial interrupt */
      0011C3 74 01            [12] 4528 	mov	a,#0x01
      0011C5 B5 0F 09         [24] 4529 	cjne	a,_received_flag,00113$
                                   4530 ;	.\ecen4350_lcd_v4.c:820: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      0011C8 E5 0E            [12] 4531 	mov	a,_received_byte
      0011CA FF               [12] 4532 	mov	r7,a
      0011CB 24 C0            [12] 4533 	add	a,#0xc0
      0011CD F5 0E            [12] 4534 	mov	_received_byte,a
                                   4535 ;	.\ecen4350_lcd_v4.c:821: break;														/* break outside while() */
      0011CF 80 52            [24] 4536 	sjmp	00124$
      0011D1                       4537 00113$:
                                   4538 ;	.\ecen4350_lcd_v4.c:824: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      0011D1 75 90 FE         [24] 4539 	mov	_P1,#0xfe
                                   4540 ;	.\ecen4350_lcd_v4.c:825: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      0011D4 E5 90            [12] 4541 	mov	a,_P1
      0011D6 54 F0            [12] 4542 	anl	a,#0xf0
      0011D8 F5 08            [12] 4543 	mov	_colloc,a
                                   4544 ;	.\ecen4350_lcd_v4.c:826: if (colloc != 0xF0)
      0011DA 74 F0            [12] 4545 	mov	a,#0xf0
      0011DC B5 08 02         [24] 4546 	cjne	a,_colloc,00218$
      0011DF 80 05            [24] 4547 	sjmp	00115$
      0011E1                       4548 00218$:
                                   4549 ;	.\ecen4350_lcd_v4.c:828: rowloc = 0;
      0011E1 75 09 00         [24] 4550 	mov	_rowloc,#0x00
                                   4551 ;	.\ecen4350_lcd_v4.c:829: break;
      0011E4 80 3D            [24] 4552 	sjmp	00124$
      0011E6                       4553 00115$:
                                   4554 ;	.\ecen4350_lcd_v4.c:832: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      0011E6 75 90 FD         [24] 4555 	mov	_P1,#0xfd
                                   4556 ;	.\ecen4350_lcd_v4.c:833: colloc = (__KEYPAD_PORT__ & 0xF0);
      0011E9 E5 90            [12] 4557 	mov	a,_P1
      0011EB 54 F0            [12] 4558 	anl	a,#0xf0
      0011ED F5 08            [12] 4559 	mov	_colloc,a
                                   4560 ;	.\ecen4350_lcd_v4.c:834: if (colloc != 0xF0)
      0011EF 74 F0            [12] 4561 	mov	a,#0xf0
      0011F1 B5 08 02         [24] 4562 	cjne	a,_colloc,00219$
      0011F4 80 05            [24] 4563 	sjmp	00117$
      0011F6                       4564 00219$:
                                   4565 ;	.\ecen4350_lcd_v4.c:836: rowloc = 1;
      0011F6 75 09 01         [24] 4566 	mov	_rowloc,#0x01
                                   4567 ;	.\ecen4350_lcd_v4.c:837: break;
      0011F9 80 28            [24] 4568 	sjmp	00124$
      0011FB                       4569 00117$:
                                   4570 ;	.\ecen4350_lcd_v4.c:840: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      0011FB 75 90 FB         [24] 4571 	mov	_P1,#0xfb
                                   4572 ;	.\ecen4350_lcd_v4.c:841: colloc = (__KEYPAD_PORT__ & 0xF0);
      0011FE E5 90            [12] 4573 	mov	a,_P1
      001200 54 F0            [12] 4574 	anl	a,#0xf0
      001202 F5 08            [12] 4575 	mov	_colloc,a
                                   4576 ;	.\ecen4350_lcd_v4.c:842: if (colloc != 0xF0)
      001204 74 F0            [12] 4577 	mov	a,#0xf0
      001206 B5 08 02         [24] 4578 	cjne	a,_colloc,00220$
      001209 80 05            [24] 4579 	sjmp	00119$
      00120B                       4580 00220$:
                                   4581 ;	.\ecen4350_lcd_v4.c:844: rowloc = 2;
      00120B 75 09 02         [24] 4582 	mov	_rowloc,#0x02
                                   4583 ;	.\ecen4350_lcd_v4.c:845: break;
      00120E 80 13            [24] 4584 	sjmp	00124$
      001210                       4585 00119$:
                                   4586 ;	.\ecen4350_lcd_v4.c:848: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      001210 75 90 F7         [24] 4587 	mov	_P1,#0xf7
                                   4588 ;	.\ecen4350_lcd_v4.c:849: colloc = (__KEYPAD_PORT__ & 0xF0);
      001213 E5 90            [12] 4589 	mov	a,_P1
      001215 54 F0            [12] 4590 	anl	a,#0xf0
      001217 F5 08            [12] 4591 	mov	_colloc,a
                                   4592 ;	.\ecen4350_lcd_v4.c:850: if (colloc != 0xF0)
      001219 74 F0            [12] 4593 	mov	a,#0xf0
      00121B B5 08 02         [24] 4594 	cjne	a,_colloc,00221$
      00121E 80 A3            [24] 4595 	sjmp	00123$
      001220                       4596 00221$:
                                   4597 ;	.\ecen4350_lcd_v4.c:852: rowloc = 3;
      001220 75 09 03         [24] 4598 	mov	_rowloc,#0x03
                                   4599 ;	.\ecen4350_lcd_v4.c:853: break;
      001223                       4600 00124$:
                                   4601 ;	.\ecen4350_lcd_v4.c:857: if (received_flag == 1)
      001223 74 01            [12] 4602 	mov	a,#0x01
      001225 B5 0F 07         [24] 4603 	cjne	a,_received_flag,00135$
                                   4604 ;	.\ecen4350_lcd_v4.c:859: received_flag = 0;
      001228 75 0F 00         [24] 4605 	mov	_received_flag,#0x00
                                   4606 ;	.\ecen4350_lcd_v4.c:860: return received_byte;
      00122B 85 0E 82         [24] 4607 	mov	dpl,_received_byte
      00122E 22               [24] 4608 	ret
      00122F                       4609 00135$:
                                   4610 ;	.\ecen4350_lcd_v4.c:862: else if (colloc == 0xE0)
      00122F 74 E0            [12] 4611 	mov	a,#0xe0
      001231 B5 08 15         [24] 4612 	cjne	a,_colloc,00132$
                                   4613 ;	.\ecen4350_lcd_v4.c:864: return (keypad[rowloc][0]);
      001234 E5 09            [12] 4614 	mov	a,_rowloc
      001236 75 F0 04         [24] 4615 	mov	b,#0x04
      001239 A4               [48] 4616 	mul	ab
      00123A 24 86            [12] 4617 	add	a,#_keypad
      00123C F5 82            [12] 4618 	mov	dpl,a
      00123E 74 54            [12] 4619 	mov	a,#(_keypad >> 8)
      001240 35 F0            [12] 4620 	addc	a,b
      001242 F5 83            [12] 4621 	mov	dph,a
      001244 E4               [12] 4622 	clr	a
      001245 93               [24] 4623 	movc	a,@a+dptr
      001246 F5 82            [12] 4624 	mov	dpl,a
      001248 22               [24] 4625 	ret
      001249                       4626 00132$:
                                   4627 ;	.\ecen4350_lcd_v4.c:866: else if (colloc == 0xD0)
      001249 74 D0            [12] 4628 	mov	a,#0xd0
      00124B B5 08 18         [24] 4629 	cjne	a,_colloc,00129$
                                   4630 ;	.\ecen4350_lcd_v4.c:868: return (keypad[rowloc][1]);
      00124E E5 09            [12] 4631 	mov	a,_rowloc
      001250 75 F0 04         [24] 4632 	mov	b,#0x04
      001253 A4               [48] 4633 	mul	ab
      001254 24 86            [12] 4634 	add	a,#_keypad
      001256 FE               [12] 4635 	mov	r6,a
      001257 74 54            [12] 4636 	mov	a,#(_keypad >> 8)
      001259 35 F0            [12] 4637 	addc	a,b
      00125B FF               [12] 4638 	mov	r7,a
      00125C 8E 82            [24] 4639 	mov	dpl,r6
      00125E 8F 83            [24] 4640 	mov	dph,r7
      001260 A3               [24] 4641 	inc	dptr
      001261 E4               [12] 4642 	clr	a
      001262 93               [24] 4643 	movc	a,@a+dptr
      001263 F5 82            [12] 4644 	mov	dpl,a
      001265 22               [24] 4645 	ret
      001266                       4646 00129$:
                                   4647 ;	.\ecen4350_lcd_v4.c:870: else if (colloc == 0xB0)
      001266 74 B0            [12] 4648 	mov	a,#0xb0
      001268 B5 08 19         [24] 4649 	cjne	a,_colloc,00126$
                                   4650 ;	.\ecen4350_lcd_v4.c:872: return (keypad[rowloc][2]);
      00126B E5 09            [12] 4651 	mov	a,_rowloc
      00126D 75 F0 04         [24] 4652 	mov	b,#0x04
      001270 A4               [48] 4653 	mul	ab
      001271 24 86            [12] 4654 	add	a,#_keypad
      001273 FE               [12] 4655 	mov	r6,a
      001274 74 54            [12] 4656 	mov	a,#(_keypad >> 8)
      001276 35 F0            [12] 4657 	addc	a,b
      001278 FF               [12] 4658 	mov	r7,a
      001279 8E 82            [24] 4659 	mov	dpl,r6
      00127B 8F 83            [24] 4660 	mov	dph,r7
      00127D A3               [24] 4661 	inc	dptr
      00127E A3               [24] 4662 	inc	dptr
      00127F E4               [12] 4663 	clr	a
      001280 93               [24] 4664 	movc	a,@a+dptr
      001281 F5 82            [12] 4665 	mov	dpl,a
      001283 22               [24] 4666 	ret
      001284                       4667 00126$:
                                   4668 ;	.\ecen4350_lcd_v4.c:876: return (keypad[rowloc][3]);
      001284 E5 09            [12] 4669 	mov	a,_rowloc
      001286 75 F0 04         [24] 4670 	mov	b,#0x04
      001289 A4               [48] 4671 	mul	ab
      00128A 24 86            [12] 4672 	add	a,#_keypad
      00128C FE               [12] 4673 	mov	r6,a
      00128D 74 54            [12] 4674 	mov	a,#(_keypad >> 8)
      00128F 35 F0            [12] 4675 	addc	a,b
      001291 FF               [12] 4676 	mov	r7,a
      001292 8E 82            [24] 4677 	mov	dpl,r6
      001294 8F 83            [24] 4678 	mov	dph,r7
      001296 A3               [24] 4679 	inc	dptr
      001297 A3               [24] 4680 	inc	dptr
      001298 A3               [24] 4681 	inc	dptr
      001299 E4               [12] 4682 	clr	a
      00129A 93               [24] 4683 	movc	a,@a+dptr
                                   4684 ;	.\ecen4350_lcd_v4.c:878: }
      00129B F5 82            [12] 4685 	mov	dpl,a
      00129D 22               [24] 4686 	ret
                                   4687 ;------------------------------------------------------------
                                   4688 ;Allocation info for local variables in function 'reverse'
                                   4689 ;------------------------------------------------------------
                                   4690 ;d                         Allocated to registers r7 
                                   4691 ;rev                       Allocated to registers r5 r6 
                                   4692 ;val                       Allocated to registers r1 r2 
                                   4693 ;------------------------------------------------------------
                                   4694 ;	.\ecen4350_lcd_v4.c:880: unsigned int reverse(unsigned char d)
                                   4695 ;	-----------------------------------------
                                   4696 ;	 function reverse
                                   4697 ;	-----------------------------------------
      00129E                       4698 _reverse:
      00129E AF 82            [24] 4699 	mov	r7,dpl
                                   4700 ;	.\ecen4350_lcd_v4.c:882: unsigned int rev = 0;
      0012A0 7D 00            [12] 4701 	mov	r5,#0x00
      0012A2 7E 00            [12] 4702 	mov	r6,#0x00
                                   4703 ;	.\ecen4350_lcd_v4.c:884: while (d >= 1)
      0012A4                       4704 00101$:
      0012A4 BF 01 00         [24] 4705 	cjne	r7,#0x01,00114$
      0012A7                       4706 00114$:
      0012A7 40 60            [24] 4707 	jc	00103$
                                   4708 ;	.\ecen4350_lcd_v4.c:887: val = d % 10;
      0012A9 8F 03            [24] 4709 	mov	ar3,r7
      0012AB 7C 00            [12] 4710 	mov	r4,#0x00
      0012AD 75 6B 0A         [24] 4711 	mov	__modsint_PARM_2,#0x0a
                                   4712 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0012B0 8C 6C            [24] 4713 	mov	(__modsint_PARM_2 + 1),r4
      0012B2 8B 82            [24] 4714 	mov	dpl,r3
      0012B4 8C 83            [24] 4715 	mov	dph,r4
      0012B6 C0 06            [24] 4716 	push	ar6
      0012B8 C0 05            [24] 4717 	push	ar5
      0012BA C0 04            [24] 4718 	push	ar4
      0012BC C0 03            [24] 4719 	push	ar3
      0012BE 12 4F 19         [24] 4720 	lcall	__modsint
      0012C1 A9 82            [24] 4721 	mov	r1,dpl
      0012C3 AA 83            [24] 4722 	mov	r2,dph
      0012C5 D0 03            [24] 4723 	pop	ar3
      0012C7 D0 04            [24] 4724 	pop	ar4
                                   4725 ;	.\ecen4350_lcd_v4.c:888: d = d / 10;
      0012C9 75 6B 0A         [24] 4726 	mov	__divsint_PARM_2,#0x0a
      0012CC 75 6C 00         [24] 4727 	mov	(__divsint_PARM_2 + 1),#0x00
      0012CF 8B 82            [24] 4728 	mov	dpl,r3
      0012D1 8C 83            [24] 4729 	mov	dph,r4
      0012D3 C0 02            [24] 4730 	push	ar2
      0012D5 C0 01            [24] 4731 	push	ar1
      0012D7 12 4F 4F         [24] 4732 	lcall	__divsint
      0012DA AB 82            [24] 4733 	mov	r3,dpl
      0012DC D0 01            [24] 4734 	pop	ar1
      0012DE D0 02            [24] 4735 	pop	ar2
      0012E0 D0 05            [24] 4736 	pop	ar5
      0012E2 D0 06            [24] 4737 	pop	ar6
      0012E4 8B 07            [24] 4738 	mov	ar7,r3
                                   4739 ;	.\ecen4350_lcd_v4.c:889: rev = rev * 10 + val;
      0012E6 8D 6B            [24] 4740 	mov	__mulint_PARM_2,r5
      0012E8 8E 6C            [24] 4741 	mov	(__mulint_PARM_2 + 1),r6
      0012EA 90 00 0A         [24] 4742 	mov	dptr,#0x000a
      0012ED C0 07            [24] 4743 	push	ar7
      0012EF C0 02            [24] 4744 	push	ar2
      0012F1 C0 01            [24] 4745 	push	ar1
      0012F3 12 4E 93         [24] 4746 	lcall	__mulint
      0012F6 E5 82            [12] 4747 	mov	a,dpl
      0012F8 85 83 F0         [24] 4748 	mov	b,dph
      0012FB D0 01            [24] 4749 	pop	ar1
      0012FD D0 02            [24] 4750 	pop	ar2
      0012FF D0 07            [24] 4751 	pop	ar7
      001301 29               [12] 4752 	add	a,r1
      001302 FD               [12] 4753 	mov	r5,a
      001303 EA               [12] 4754 	mov	a,r2
      001304 35 F0            [12] 4755 	addc	a,b
      001306 FE               [12] 4756 	mov	r6,a
      001307 80 9B            [24] 4757 	sjmp	00101$
      001309                       4758 00103$:
                                   4759 ;	.\ecen4350_lcd_v4.c:891: return rev;
      001309 8D 82            [24] 4760 	mov	dpl,r5
      00130B 8E 83            [24] 4761 	mov	dph,r6
                                   4762 ;	.\ecen4350_lcd_v4.c:892: }
      00130D 22               [24] 4763 	ret
                                   4764 ;------------------------------------------------------------
                                   4765 ;Allocation info for local variables in function 'reverse16'
                                   4766 ;------------------------------------------------------------
                                   4767 ;d                         Allocated to registers r6 r7 
                                   4768 ;rev                       Allocated to registers r4 r5 
                                   4769 ;val                       Allocated to registers r2 r3 
                                   4770 ;------------------------------------------------------------
                                   4771 ;	.\ecen4350_lcd_v4.c:894: unsigned int reverse16(unsigned int d)
                                   4772 ;	-----------------------------------------
                                   4773 ;	 function reverse16
                                   4774 ;	-----------------------------------------
      00130E                       4775 _reverse16:
      00130E AE 82            [24] 4776 	mov	r6,dpl
      001310 AF 83            [24] 4777 	mov	r7,dph
                                   4778 ;	.\ecen4350_lcd_v4.c:896: unsigned int rev = 0;
      001312 7C 00            [12] 4779 	mov	r4,#0x00
      001314 7D 00            [12] 4780 	mov	r5,#0x00
                                   4781 ;	.\ecen4350_lcd_v4.c:898: while (d >= 1)
      001316                       4782 00101$:
      001316 C3               [12] 4783 	clr	c
      001317 EE               [12] 4784 	mov	a,r6
      001318 94 01            [12] 4785 	subb	a,#0x01
      00131A EF               [12] 4786 	mov	a,r7
      00131B 94 00            [12] 4787 	subb	a,#0x00
      00131D 40 69            [24] 4788 	jc	00103$
                                   4789 ;	.\ecen4350_lcd_v4.c:901: val = d % 10;
      00131F 75 6B 0A         [24] 4790 	mov	__moduint_PARM_2,#0x0a
      001322 75 6C 00         [24] 4791 	mov	(__moduint_PARM_2 + 1),#0x00
      001325 8E 82            [24] 4792 	mov	dpl,r6
      001327 8F 83            [24] 4793 	mov	dph,r7
      001329 C0 07            [24] 4794 	push	ar7
      00132B C0 06            [24] 4795 	push	ar6
      00132D C0 05            [24] 4796 	push	ar5
      00132F C0 04            [24] 4797 	push	ar4
      001331 12 4E B0         [24] 4798 	lcall	__moduint
      001334 AA 82            [24] 4799 	mov	r2,dpl
      001336 AB 83            [24] 4800 	mov	r3,dph
      001338 D0 04            [24] 4801 	pop	ar4
      00133A D0 05            [24] 4802 	pop	ar5
      00133C D0 06            [24] 4803 	pop	ar6
      00133E D0 07            [24] 4804 	pop	ar7
                                   4805 ;	.\ecen4350_lcd_v4.c:902: d = d / 10;
      001340 75 6B 0A         [24] 4806 	mov	__divuint_PARM_2,#0x0a
      001343 75 6C 00         [24] 4807 	mov	(__divuint_PARM_2 + 1),#0x00
      001346 8E 82            [24] 4808 	mov	dpl,r6
      001348 8F 83            [24] 4809 	mov	dph,r7
      00134A C0 05            [24] 4810 	push	ar5
      00134C C0 04            [24] 4811 	push	ar4
      00134E C0 03            [24] 4812 	push	ar3
      001350 C0 02            [24] 4813 	push	ar2
      001352 12 4E 6A         [24] 4814 	lcall	__divuint
      001355 AE 82            [24] 4815 	mov	r6,dpl
      001357 AF 83            [24] 4816 	mov	r7,dph
      001359 D0 02            [24] 4817 	pop	ar2
      00135B D0 03            [24] 4818 	pop	ar3
      00135D D0 04            [24] 4819 	pop	ar4
      00135F D0 05            [24] 4820 	pop	ar5
                                   4821 ;	.\ecen4350_lcd_v4.c:903: rev = rev * 10 + val;
      001361 8C 6B            [24] 4822 	mov	__mulint_PARM_2,r4
      001363 8D 6C            [24] 4823 	mov	(__mulint_PARM_2 + 1),r5
      001365 90 00 0A         [24] 4824 	mov	dptr,#0x000a
      001368 C0 07            [24] 4825 	push	ar7
      00136A C0 06            [24] 4826 	push	ar6
      00136C C0 03            [24] 4827 	push	ar3
      00136E C0 02            [24] 4828 	push	ar2
      001370 12 4E 93         [24] 4829 	lcall	__mulint
      001373 E5 82            [12] 4830 	mov	a,dpl
      001375 85 83 F0         [24] 4831 	mov	b,dph
      001378 D0 02            [24] 4832 	pop	ar2
      00137A D0 03            [24] 4833 	pop	ar3
      00137C D0 06            [24] 4834 	pop	ar6
      00137E D0 07            [24] 4835 	pop	ar7
      001380 2A               [12] 4836 	add	a,r2
      001381 FC               [12] 4837 	mov	r4,a
      001382 EB               [12] 4838 	mov	a,r3
      001383 35 F0            [12] 4839 	addc	a,b
      001385 FD               [12] 4840 	mov	r5,a
      001386 80 8E            [24] 4841 	sjmp	00101$
      001388                       4842 00103$:
                                   4843 ;	.\ecen4350_lcd_v4.c:905: return rev;
      001388 8C 82            [24] 4844 	mov	dpl,r4
      00138A 8D 83            [24] 4845 	mov	dph,r5
                                   4846 ;	.\ecen4350_lcd_v4.c:906: }
      00138C 22               [24] 4847 	ret
                                   4848 ;------------------------------------------------------------
                                   4849 ;Allocation info for local variables in function 'hexToASCII'
                                   4850 ;------------------------------------------------------------
                                   4851 ;key                       Allocated to registers r7 
                                   4852 ;------------------------------------------------------------
                                   4853 ;	.\ecen4350_lcd_v4.c:908: unsigned char hexToASCII(unsigned char key) {
                                   4854 ;	-----------------------------------------
                                   4855 ;	 function hexToASCII
                                   4856 ;	-----------------------------------------
      00138D                       4857 _hexToASCII:
                                   4858 ;	.\ecen4350_lcd_v4.c:909: if(key == 0x0) return '0';
      00138D E5 82            [12] 4859 	mov	a,dpl
      00138F FF               [12] 4860 	mov	r7,a
      001390 70 04            [24] 4861 	jnz	00102$
      001392 75 82 30         [24] 4862 	mov	dpl,#0x30
      001395 22               [24] 4863 	ret
      001396                       4864 00102$:
                                   4865 ;	.\ecen4350_lcd_v4.c:910: if(key == 0x1) return '1';
      001396 BF 01 04         [24] 4866 	cjne	r7,#0x01,00104$
      001399 75 82 31         [24] 4867 	mov	dpl,#0x31
      00139C 22               [24] 4868 	ret
      00139D                       4869 00104$:
                                   4870 ;	.\ecen4350_lcd_v4.c:911: if(key == 0x2) return '2';
      00139D BF 02 04         [24] 4871 	cjne	r7,#0x02,00106$
      0013A0 75 82 32         [24] 4872 	mov	dpl,#0x32
      0013A3 22               [24] 4873 	ret
      0013A4                       4874 00106$:
                                   4875 ;	.\ecen4350_lcd_v4.c:912: if(key == 0x3) return '3';
      0013A4 BF 03 04         [24] 4876 	cjne	r7,#0x03,00108$
      0013A7 75 82 33         [24] 4877 	mov	dpl,#0x33
      0013AA 22               [24] 4878 	ret
      0013AB                       4879 00108$:
                                   4880 ;	.\ecen4350_lcd_v4.c:913: if(key == 0x4) return '4';
      0013AB BF 04 04         [24] 4881 	cjne	r7,#0x04,00110$
      0013AE 75 82 34         [24] 4882 	mov	dpl,#0x34
      0013B1 22               [24] 4883 	ret
      0013B2                       4884 00110$:
                                   4885 ;	.\ecen4350_lcd_v4.c:914: if(key == 0x5) return '5';
      0013B2 BF 05 04         [24] 4886 	cjne	r7,#0x05,00112$
      0013B5 75 82 35         [24] 4887 	mov	dpl,#0x35
      0013B8 22               [24] 4888 	ret
      0013B9                       4889 00112$:
                                   4890 ;	.\ecen4350_lcd_v4.c:915: if(key == 0x6) return '6';
      0013B9 BF 06 04         [24] 4891 	cjne	r7,#0x06,00114$
      0013BC 75 82 36         [24] 4892 	mov	dpl,#0x36
      0013BF 22               [24] 4893 	ret
      0013C0                       4894 00114$:
                                   4895 ;	.\ecen4350_lcd_v4.c:916: if(key == 0x7) return '7';
      0013C0 BF 07 04         [24] 4896 	cjne	r7,#0x07,00116$
      0013C3 75 82 37         [24] 4897 	mov	dpl,#0x37
      0013C6 22               [24] 4898 	ret
      0013C7                       4899 00116$:
                                   4900 ;	.\ecen4350_lcd_v4.c:917: if(key == 0x8) return '8';
      0013C7 BF 08 04         [24] 4901 	cjne	r7,#0x08,00118$
      0013CA 75 82 38         [24] 4902 	mov	dpl,#0x38
      0013CD 22               [24] 4903 	ret
      0013CE                       4904 00118$:
                                   4905 ;	.\ecen4350_lcd_v4.c:918: if(key == 0x9) return '9';
      0013CE BF 09 04         [24] 4906 	cjne	r7,#0x09,00120$
      0013D1 75 82 39         [24] 4907 	mov	dpl,#0x39
      0013D4 22               [24] 4908 	ret
      0013D5                       4909 00120$:
                                   4910 ;	.\ecen4350_lcd_v4.c:919: if(key == 0xA) return 'A';
      0013D5 BF 0A 04         [24] 4911 	cjne	r7,#0x0a,00122$
      0013D8 75 82 41         [24] 4912 	mov	dpl,#0x41
      0013DB 22               [24] 4913 	ret
      0013DC                       4914 00122$:
                                   4915 ;	.\ecen4350_lcd_v4.c:920: if(key == 0xB) return 'B';
      0013DC BF 0B 04         [24] 4916 	cjne	r7,#0x0b,00124$
      0013DF 75 82 42         [24] 4917 	mov	dpl,#0x42
      0013E2 22               [24] 4918 	ret
      0013E3                       4919 00124$:
                                   4920 ;	.\ecen4350_lcd_v4.c:921: if(key == 0xC) return 'C';
      0013E3 BF 0C 04         [24] 4921 	cjne	r7,#0x0c,00126$
      0013E6 75 82 43         [24] 4922 	mov	dpl,#0x43
      0013E9 22               [24] 4923 	ret
      0013EA                       4924 00126$:
                                   4925 ;	.\ecen4350_lcd_v4.c:922: if(key == 0xD) return 'D';
      0013EA BF 0D 04         [24] 4926 	cjne	r7,#0x0d,00128$
      0013ED 75 82 44         [24] 4927 	mov	dpl,#0x44
      0013F0 22               [24] 4928 	ret
      0013F1                       4929 00128$:
                                   4930 ;	.\ecen4350_lcd_v4.c:923: if(key == 0xE) return 'E';
      0013F1 BF 0E 04         [24] 4931 	cjne	r7,#0x0e,00130$
      0013F4 75 82 45         [24] 4932 	mov	dpl,#0x45
      0013F7 22               [24] 4933 	ret
      0013F8                       4934 00130$:
                                   4935 ;	.\ecen4350_lcd_v4.c:924: if(key == 0xF) return 'F';
      0013F8 BF 0F 04         [24] 4936 	cjne	r7,#0x0f,00132$
      0013FB 75 82 46         [24] 4937 	mov	dpl,#0x46
      0013FE 22               [24] 4938 	ret
      0013FF                       4939 00132$:
                                   4940 ;	.\ecen4350_lcd_v4.c:926: return 0xff;
      0013FF 75 82 FF         [24] 4941 	mov	dpl,#0xff
                                   4942 ;	.\ecen4350_lcd_v4.c:927: }
      001402 22               [24] 4943 	ret
                                   4944 ;------------------------------------------------------------
                                   4945 ;Allocation info for local variables in function 'ASCIItoHex'
                                   4946 ;------------------------------------------------------------
                                   4947 ;key                       Allocated to registers r7 
                                   4948 ;------------------------------------------------------------
                                   4949 ;	.\ecen4350_lcd_v4.c:929: unsigned char ASCIItoHex(unsigned char key) {
                                   4950 ;	-----------------------------------------
                                   4951 ;	 function ASCIItoHex
                                   4952 ;	-----------------------------------------
      001403                       4953 _ASCIItoHex:
      001403 AF 82            [24] 4954 	mov	r7,dpl
                                   4955 ;	.\ecen4350_lcd_v4.c:930: if(key == '0') return 0x0;
      001405 BF 30 04         [24] 4956 	cjne	r7,#0x30,00102$
      001408 75 82 00         [24] 4957 	mov	dpl,#0x00
      00140B 22               [24] 4958 	ret
      00140C                       4959 00102$:
                                   4960 ;	.\ecen4350_lcd_v4.c:931: if(key == '1') return 0x1;
      00140C BF 31 04         [24] 4961 	cjne	r7,#0x31,00104$
      00140F 75 82 01         [24] 4962 	mov	dpl,#0x01
      001412 22               [24] 4963 	ret
      001413                       4964 00104$:
                                   4965 ;	.\ecen4350_lcd_v4.c:932: if(key == '2') return 0x2;
      001413 BF 32 04         [24] 4966 	cjne	r7,#0x32,00106$
      001416 75 82 02         [24] 4967 	mov	dpl,#0x02
      001419 22               [24] 4968 	ret
      00141A                       4969 00106$:
                                   4970 ;	.\ecen4350_lcd_v4.c:933: if(key == '3') return 0x3;
      00141A BF 33 04         [24] 4971 	cjne	r7,#0x33,00108$
      00141D 75 82 03         [24] 4972 	mov	dpl,#0x03
      001420 22               [24] 4973 	ret
      001421                       4974 00108$:
                                   4975 ;	.\ecen4350_lcd_v4.c:934: if(key == '4') return 0x4;
      001421 BF 34 04         [24] 4976 	cjne	r7,#0x34,00110$
      001424 75 82 04         [24] 4977 	mov	dpl,#0x04
      001427 22               [24] 4978 	ret
      001428                       4979 00110$:
                                   4980 ;	.\ecen4350_lcd_v4.c:935: if(key == '5') return 0x5;
      001428 BF 35 04         [24] 4981 	cjne	r7,#0x35,00112$
      00142B 75 82 05         [24] 4982 	mov	dpl,#0x05
      00142E 22               [24] 4983 	ret
      00142F                       4984 00112$:
                                   4985 ;	.\ecen4350_lcd_v4.c:936: if(key == '6') return 0x6;
      00142F BF 36 04         [24] 4986 	cjne	r7,#0x36,00114$
      001432 75 82 06         [24] 4987 	mov	dpl,#0x06
      001435 22               [24] 4988 	ret
      001436                       4989 00114$:
                                   4990 ;	.\ecen4350_lcd_v4.c:937: if(key == '7') return 0x7;
      001436 BF 37 04         [24] 4991 	cjne	r7,#0x37,00116$
      001439 75 82 07         [24] 4992 	mov	dpl,#0x07
      00143C 22               [24] 4993 	ret
      00143D                       4994 00116$:
                                   4995 ;	.\ecen4350_lcd_v4.c:938: if(key == '8') return 0x8;
      00143D BF 38 04         [24] 4996 	cjne	r7,#0x38,00118$
      001440 75 82 08         [24] 4997 	mov	dpl,#0x08
      001443 22               [24] 4998 	ret
      001444                       4999 00118$:
                                   5000 ;	.\ecen4350_lcd_v4.c:939: if(key == '9') return 0x9;
      001444 BF 39 04         [24] 5001 	cjne	r7,#0x39,00120$
      001447 75 82 09         [24] 5002 	mov	dpl,#0x09
      00144A 22               [24] 5003 	ret
      00144B                       5004 00120$:
                                   5005 ;	.\ecen4350_lcd_v4.c:940: if(key == 'A') return 0xA;
      00144B BF 41 04         [24] 5006 	cjne	r7,#0x41,00122$
      00144E 75 82 0A         [24] 5007 	mov	dpl,#0x0a
      001451 22               [24] 5008 	ret
      001452                       5009 00122$:
                                   5010 ;	.\ecen4350_lcd_v4.c:941: if(key == 'B') return 0xB;
      001452 BF 42 04         [24] 5011 	cjne	r7,#0x42,00124$
      001455 75 82 0B         [24] 5012 	mov	dpl,#0x0b
      001458 22               [24] 5013 	ret
      001459                       5014 00124$:
                                   5015 ;	.\ecen4350_lcd_v4.c:942: if(key == 'C') return 0xC;
      001459 BF 43 04         [24] 5016 	cjne	r7,#0x43,00126$
      00145C 75 82 0C         [24] 5017 	mov	dpl,#0x0c
      00145F 22               [24] 5018 	ret
      001460                       5019 00126$:
                                   5020 ;	.\ecen4350_lcd_v4.c:943: if(key == 'D') return 0xD;
      001460 BF 44 04         [24] 5021 	cjne	r7,#0x44,00128$
      001463 75 82 0D         [24] 5022 	mov	dpl,#0x0d
      001466 22               [24] 5023 	ret
      001467                       5024 00128$:
                                   5025 ;	.\ecen4350_lcd_v4.c:944: if(key == 'E') return 0xE;
      001467 BF 45 04         [24] 5026 	cjne	r7,#0x45,00130$
      00146A 75 82 0E         [24] 5027 	mov	dpl,#0x0e
      00146D 22               [24] 5028 	ret
      00146E                       5029 00130$:
                                   5030 ;	.\ecen4350_lcd_v4.c:945: if(key == 'F') return 0xF;
      00146E BF 46 04         [24] 5031 	cjne	r7,#0x46,00132$
      001471 75 82 0F         [24] 5032 	mov	dpl,#0x0f
      001474 22               [24] 5033 	ret
      001475                       5034 00132$:
                                   5035 ;	.\ecen4350_lcd_v4.c:947: return 0xff;
      001475 75 82 FF         [24] 5036 	mov	dpl,#0xff
                                   5037 ;	.\ecen4350_lcd_v4.c:948: }
      001478 22               [24] 5038 	ret
                                   5039 ;------------------------------------------------------------
                                   5040 ;Allocation info for local variables in function 'asciiToDec'
                                   5041 ;------------------------------------------------------------
                                   5042 ;d                         Allocated to registers 
                                   5043 ;val                       Allocated to registers r4 
                                   5044 ;id                        Allocated to registers r6 r7 
                                   5045 ;------------------------------------------------------------
                                   5046 ;	.\ecen4350_lcd_v4.c:950: void asciiToDec(unsigned char d)
                                   5047 ;	-----------------------------------------
                                   5048 ;	 function asciiToDec
                                   5049 ;	-----------------------------------------
      001479                       5050 _asciiToDec:
                                   5051 ;	.\ecen4350_lcd_v4.c:954: id = reverse(d);
      001479 12 12 9E         [24] 5052 	lcall	_reverse
      00147C AE 82            [24] 5053 	mov	r6,dpl
      00147E AF 83            [24] 5054 	mov	r7,dph
                                   5055 ;	.\ecen4350_lcd_v4.c:955: while (id >= 1)
      001480                       5056 00101$:
      001480 C3               [12] 5057 	clr	c
      001481 EE               [12] 5058 	mov	a,r6
      001482 94 01            [12] 5059 	subb	a,#0x01
      001484 EF               [12] 5060 	mov	a,r7
      001485 94 00            [12] 5061 	subb	a,#0x00
      001487 40 3E            [24] 5062 	jc	00103$
                                   5063 ;	.\ecen4350_lcd_v4.c:958: val = id % 10;
      001489 75 6B 0A         [24] 5064 	mov	__moduint_PARM_2,#0x0a
      00148C 75 6C 00         [24] 5065 	mov	(__moduint_PARM_2 + 1),#0x00
      00148F 8E 82            [24] 5066 	mov	dpl,r6
      001491 8F 83            [24] 5067 	mov	dph,r7
      001493 C0 07            [24] 5068 	push	ar7
      001495 C0 06            [24] 5069 	push	ar6
      001497 12 4E B0         [24] 5070 	lcall	__moduint
      00149A AC 82            [24] 5071 	mov	r4,dpl
      00149C D0 06            [24] 5072 	pop	ar6
      00149E D0 07            [24] 5073 	pop	ar7
                                   5074 ;	.\ecen4350_lcd_v4.c:959: id = id / 10;
      0014A0 75 6B 0A         [24] 5075 	mov	__divuint_PARM_2,#0x0a
      0014A3 75 6C 00         [24] 5076 	mov	(__divuint_PARM_2 + 1),#0x00
      0014A6 8E 82            [24] 5077 	mov	dpl,r6
      0014A8 8F 83            [24] 5078 	mov	dph,r7
      0014AA C0 04            [24] 5079 	push	ar4
      0014AC 12 4E 6A         [24] 5080 	lcall	__divuint
      0014AF AE 82            [24] 5081 	mov	r6,dpl
      0014B1 AF 83            [24] 5082 	mov	r7,dph
      0014B3 D0 04            [24] 5083 	pop	ar4
                                   5084 ;	.\ecen4350_lcd_v4.c:960: write(val + '0');
      0014B5 74 30            [12] 5085 	mov	a,#0x30
      0014B7 2C               [12] 5086 	add	a,r4
      0014B8 F5 82            [12] 5087 	mov	dpl,a
      0014BA C0 07            [24] 5088 	push	ar7
      0014BC C0 06            [24] 5089 	push	ar6
      0014BE 12 10 11         [24] 5090 	lcall	_write
      0014C1 D0 06            [24] 5091 	pop	ar6
      0014C3 D0 07            [24] 5092 	pop	ar7
      0014C5 80 B9            [24] 5093 	sjmp	00101$
      0014C7                       5094 00103$:
                                   5095 ;	.\ecen4350_lcd_v4.c:962: write('\n');
      0014C7 75 82 0A         [24] 5096 	mov	dpl,#0x0a
                                   5097 ;	.\ecen4350_lcd_v4.c:963: }
      0014CA 02 10 11         [24] 5098 	ljmp	_write
                                   5099 ;------------------------------------------------------------
                                   5100 ;Allocation info for local variables in function 'asciiToHex'
                                   5101 ;------------------------------------------------------------
                                   5102 ;d                         Allocated to registers r7 
                                   5103 ;val                       Allocated to registers r2 
                                   5104 ;store                     Allocated with name '_asciiToHex_store_65536_515'
                                   5105 ;i                         Allocated to registers r6 
                                   5106 ;------------------------------------------------------------
                                   5107 ;	.\ecen4350_lcd_v4.c:965: void asciiToHex(unsigned char d)
                                   5108 ;	-----------------------------------------
                                   5109 ;	 function asciiToHex
                                   5110 ;	-----------------------------------------
      0014CD                       5111 _asciiToHex:
      0014CD AF 82            [24] 5112 	mov	r7,dpl
                                   5113 ;	.\ecen4350_lcd_v4.c:970: store[0] = 0;
      0014CF 75 56 00         [24] 5114 	mov	_asciiToHex_store_65536_515,#0x00
                                   5115 ;	.\ecen4350_lcd_v4.c:971: store[1] = 0;
      0014D2 75 57 00         [24] 5116 	mov	(_asciiToHex_store_65536_515 + 0x0001),#0x00
                                   5117 ;	.\ecen4350_lcd_v4.c:972: while (d >= 1)
      0014D5 7E 00            [12] 5118 	mov	r6,#0x00
      0014D7                       5119 00104$:
      0014D7 BF 01 00         [24] 5120 	cjne	r7,#0x01,00122$
      0014DA                       5121 00122$:
      0014DA 40 5A            [24] 5122 	jc	00106$
                                   5123 ;	.\ecen4350_lcd_v4.c:975: val = d % 16;
      0014DC 8F 04            [24] 5124 	mov	ar4,r7
      0014DE 7D 00            [12] 5125 	mov	r5,#0x00
      0014E0 74 0F            [12] 5126 	mov	a,#0x0f
      0014E2 5C               [12] 5127 	anl	a,r4
      0014E3 FA               [12] 5128 	mov	r2,a
                                   5129 ;	.\ecen4350_lcd_v4.c:976: d = d / 16;
      0014E4 75 6B 10         [24] 5130 	mov	__divsint_PARM_2,#0x10
                                   5131 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0014E7 8D 6C            [24] 5132 	mov	(__divsint_PARM_2 + 1),r5
      0014E9 8C 82            [24] 5133 	mov	dpl,r4
      0014EB 8D 83            [24] 5134 	mov	dph,r5
      0014ED C0 06            [24] 5135 	push	ar6
      0014EF C0 02            [24] 5136 	push	ar2
      0014F1 12 4F 4F         [24] 5137 	lcall	__divsint
      0014F4 AC 82            [24] 5138 	mov	r4,dpl
      0014F6 D0 02            [24] 5139 	pop	ar2
      0014F8 D0 06            [24] 5140 	pop	ar6
      0014FA 8C 07            [24] 5141 	mov	ar7,r4
                                   5142 ;	.\ecen4350_lcd_v4.c:977: if (val <= 9)
      0014FC EA               [12] 5143 	mov	a,r2
      0014FD 24 F6            [12] 5144 	add	a,#0xff - 0x09
      0014FF 40 0C            [24] 5145 	jc	00102$
                                   5146 ;	.\ecen4350_lcd_v4.c:980: store[i] = val + '0';
      001501 EE               [12] 5147 	mov	a,r6
      001502 24 56            [12] 5148 	add	a,#_asciiToHex_store_65536_515
      001504 F9               [12] 5149 	mov	r1,a
      001505 8A 05            [24] 5150 	mov	ar5,r2
      001507 74 30            [12] 5151 	mov	a,#0x30
      001509 2D               [12] 5152 	add	a,r5
      00150A F7               [12] 5153 	mov	@r1,a
      00150B 80 26            [24] 5154 	sjmp	00103$
      00150D                       5155 00102$:
                                   5156 ;	.\ecen4350_lcd_v4.c:984: store[i] = (val % 10) + 'A';
      00150D EE               [12] 5157 	mov	a,r6
      00150E 24 56            [12] 5158 	add	a,#_asciiToHex_store_65536_515
      001510 F9               [12] 5159 	mov	r1,a
      001511 7D 00            [12] 5160 	mov	r5,#0x00
      001513 75 6B 0A         [24] 5161 	mov	__modsint_PARM_2,#0x0a
                                   5162 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001516 8D 6C            [24] 5163 	mov	(__modsint_PARM_2 + 1),r5
      001518 8A 82            [24] 5164 	mov	dpl,r2
      00151A 8D 83            [24] 5165 	mov	dph,r5
      00151C C0 07            [24] 5166 	push	ar7
      00151E C0 06            [24] 5167 	push	ar6
      001520 C0 01            [24] 5168 	push	ar1
      001522 12 4F 19         [24] 5169 	lcall	__modsint
      001525 AC 82            [24] 5170 	mov	r4,dpl
      001527 AD 83            [24] 5171 	mov	r5,dph
      001529 D0 01            [24] 5172 	pop	ar1
      00152B D0 06            [24] 5173 	pop	ar6
      00152D D0 07            [24] 5174 	pop	ar7
      00152F 74 41            [12] 5175 	mov	a,#0x41
      001531 2C               [12] 5176 	add	a,r4
      001532 F7               [12] 5177 	mov	@r1,a
      001533                       5178 00103$:
                                   5179 ;	.\ecen4350_lcd_v4.c:986: i++;
      001533 0E               [12] 5180 	inc	r6
      001534 80 A1            [24] 5181 	sjmp	00104$
      001536                       5182 00106$:
                                   5183 ;	.\ecen4350_lcd_v4.c:988: write(store[1]);
      001536 85 57 82         [24] 5184 	mov	dpl,(_asciiToHex_store_65536_515 + 0x0001)
      001539 12 10 11         [24] 5185 	lcall	_write
                                   5186 ;	.\ecen4350_lcd_v4.c:989: write(store[0]);
      00153C 85 56 82         [24] 5187 	mov	dpl,_asciiToHex_store_65536_515
                                   5188 ;	.\ecen4350_lcd_v4.c:991: }
      00153F 02 10 11         [24] 5189 	ljmp	_write
                                   5190 ;------------------------------------------------------------
                                   5191 ;Allocation info for local variables in function 'print4Hex'
                                   5192 ;------------------------------------------------------------
                                   5193 ;num                       Allocated to registers 
                                   5194 ;------------------------------------------------------------
                                   5195 ;	.\ecen4350_lcd_v4.c:994: void print4Hex(unsigned char num) {
                                   5196 ;	-----------------------------------------
                                   5197 ;	 function print4Hex
                                   5198 ;	-----------------------------------------
      001542                       5199 _print4Hex:
                                   5200 ;	.\ecen4350_lcd_v4.c:995: write((u8) hexToASCII(num));
      001542 12 13 8D         [24] 5201 	lcall	_hexToASCII
                                   5202 ;	.\ecen4350_lcd_v4.c:996: }
      001545 02 10 11         [24] 5203 	ljmp	_write
                                   5204 ;------------------------------------------------------------
                                   5205 ;Allocation info for local variables in function 'print8Hex'
                                   5206 ;------------------------------------------------------------
                                   5207 ;num                       Allocated to registers r7 
                                   5208 ;------------------------------------------------------------
                                   5209 ;	.\ecen4350_lcd_v4.c:998: void print8Hex(unsigned char num) {
                                   5210 ;	-----------------------------------------
                                   5211 ;	 function print8Hex
                                   5212 ;	-----------------------------------------
      001548                       5213 _print8Hex:
                                   5214 ;	.\ecen4350_lcd_v4.c:999: print4Hex(num >> 4);
      001548 E5 82            [12] 5215 	mov	a,dpl
      00154A FF               [12] 5216 	mov	r7,a
      00154B C4               [12] 5217 	swap	a
      00154C 54 0F            [12] 5218 	anl	a,#0x0f
      00154E F5 82            [12] 5219 	mov	dpl,a
      001550 C0 07            [24] 5220 	push	ar7
      001552 12 15 42         [24] 5221 	lcall	_print4Hex
      001555 D0 07            [24] 5222 	pop	ar7
                                   5223 ;	.\ecen4350_lcd_v4.c:1000: print4Hex(num & 0x0F);
      001557 74 0F            [12] 5224 	mov	a,#0x0f
      001559 5F               [12] 5225 	anl	a,r7
      00155A F5 82            [12] 5226 	mov	dpl,a
                                   5227 ;	.\ecen4350_lcd_v4.c:1001: }
      00155C 02 15 42         [24] 5228 	ljmp	_print4Hex
                                   5229 ;------------------------------------------------------------
                                   5230 ;Allocation info for local variables in function 'print16Hex'
                                   5231 ;------------------------------------------------------------
                                   5232 ;num                       Allocated to registers r6 r7 
                                   5233 ;------------------------------------------------------------
                                   5234 ;	.\ecen4350_lcd_v4.c:1003: void print16Hex(unsigned int num) {
                                   5235 ;	-----------------------------------------
                                   5236 ;	 function print16Hex
                                   5237 ;	-----------------------------------------
      00155F                       5238 _print16Hex:
      00155F AE 82            [24] 5239 	mov	r6,dpl
      001561 AF 83            [24] 5240 	mov	r7,dph
                                   5241 ;	.\ecen4350_lcd_v4.c:1004: print8Hex((unsigned char)(num >> 8));
      001563 8F 82            [24] 5242 	mov	dpl,r7
      001565 C0 07            [24] 5243 	push	ar7
      001567 C0 06            [24] 5244 	push	ar6
      001569 12 15 48         [24] 5245 	lcall	_print8Hex
      00156C D0 06            [24] 5246 	pop	ar6
      00156E D0 07            [24] 5247 	pop	ar7
                                   5248 ;	.\ecen4350_lcd_v4.c:1005: print8Hex((unsigned char)num);
      001570 8E 82            [24] 5249 	mov	dpl,r6
                                   5250 ;	.\ecen4350_lcd_v4.c:1006: }
      001572 02 15 48         [24] 5251 	ljmp	_print8Hex
                                   5252 ;------------------------------------------------------------
                                   5253 ;Allocation info for local variables in function 'print16Dec'
                                   5254 ;------------------------------------------------------------
                                   5255 ;num                       Allocated to registers 
                                   5256 ;val                       Allocated to registers r4 r5 
                                   5257 ;id                        Allocated to registers r6 r7 
                                   5258 ;------------------------------------------------------------
                                   5259 ;	.\ecen4350_lcd_v4.c:1008: void print16Dec(unsigned int num) {
                                   5260 ;	-----------------------------------------
                                   5261 ;	 function print16Dec
                                   5262 ;	-----------------------------------------
      001575                       5263 _print16Dec:
                                   5264 ;	.\ecen4350_lcd_v4.c:1011: id = reverse16(num);
      001575 12 13 0E         [24] 5265 	lcall	_reverse16
      001578 AE 82            [24] 5266 	mov	r6,dpl
      00157A AF 83            [24] 5267 	mov	r7,dph
                                   5268 ;	.\ecen4350_lcd_v4.c:1012: while (id >= 1) {
      00157C                       5269 00101$:
      00157C C3               [12] 5270 	clr	c
      00157D EE               [12] 5271 	mov	a,r6
      00157E 94 01            [12] 5272 	subb	a,#0x01
      001580 EF               [12] 5273 	mov	a,r7
      001581 94 00            [12] 5274 	subb	a,#0x00
      001583 40 44            [24] 5275 	jc	00104$
                                   5276 ;	.\ecen4350_lcd_v4.c:1013: val = id % 10;
      001585 75 6B 0A         [24] 5277 	mov	__moduint_PARM_2,#0x0a
      001588 75 6C 00         [24] 5278 	mov	(__moduint_PARM_2 + 1),#0x00
      00158B 8E 82            [24] 5279 	mov	dpl,r6
      00158D 8F 83            [24] 5280 	mov	dph,r7
      00158F C0 07            [24] 5281 	push	ar7
      001591 C0 06            [24] 5282 	push	ar6
      001593 12 4E B0         [24] 5283 	lcall	__moduint
      001596 AC 82            [24] 5284 	mov	r4,dpl
      001598 AD 83            [24] 5285 	mov	r5,dph
      00159A D0 06            [24] 5286 	pop	ar6
      00159C D0 07            [24] 5287 	pop	ar7
                                   5288 ;	.\ecen4350_lcd_v4.c:1014: id = id/10;
      00159E 75 6B 0A         [24] 5289 	mov	__divuint_PARM_2,#0x0a
      0015A1 75 6C 00         [24] 5290 	mov	(__divuint_PARM_2 + 1),#0x00
      0015A4 8E 82            [24] 5291 	mov	dpl,r6
      0015A6 8F 83            [24] 5292 	mov	dph,r7
      0015A8 C0 05            [24] 5293 	push	ar5
      0015AA C0 04            [24] 5294 	push	ar4
      0015AC 12 4E 6A         [24] 5295 	lcall	__divuint
      0015AF AE 82            [24] 5296 	mov	r6,dpl
      0015B1 AF 83            [24] 5297 	mov	r7,dph
      0015B3 D0 04            [24] 5298 	pop	ar4
      0015B5 D0 05            [24] 5299 	pop	ar5
                                   5300 ;	.\ecen4350_lcd_v4.c:1015: write(val + '0');
      0015B7 74 30            [12] 5301 	mov	a,#0x30
      0015B9 2C               [12] 5302 	add	a,r4
      0015BA F5 82            [12] 5303 	mov	dpl,a
      0015BC C0 07            [24] 5304 	push	ar7
      0015BE C0 06            [24] 5305 	push	ar6
      0015C0 12 10 11         [24] 5306 	lcall	_write
      0015C3 D0 06            [24] 5307 	pop	ar6
      0015C5 D0 07            [24] 5308 	pop	ar7
      0015C7 80 B3            [24] 5309 	sjmp	00101$
      0015C9                       5310 00104$:
                                   5311 ;	.\ecen4350_lcd_v4.c:1017: }
      0015C9 22               [24] 5312 	ret
                                   5313 ;------------------------------------------------------------
                                   5314 ;Allocation info for local variables in function 'print8ASCII'
                                   5315 ;------------------------------------------------------------
                                   5316 ;num                       Allocated to registers 
                                   5317 ;------------------------------------------------------------
                                   5318 ;	.\ecen4350_lcd_v4.c:1019: void print8ASCII(unsigned char num) {
                                   5319 ;	-----------------------------------------
                                   5320 ;	 function print8ASCII
                                   5321 ;	-----------------------------------------
      0015CA                       5322 _print8ASCII:
                                   5323 ;	.\ecen4350_lcd_v4.c:1020: write((u8)num);
                                   5324 ;	.\ecen4350_lcd_v4.c:1021: }
      0015CA 02 10 11         [24] 5325 	ljmp	_write
                                   5326 ;------------------------------------------------------------
                                   5327 ;Allocation info for local variables in function 'print16ASCII'
                                   5328 ;------------------------------------------------------------
                                   5329 ;num                       Allocated to registers r6 r7 
                                   5330 ;------------------------------------------------------------
                                   5331 ;	.\ecen4350_lcd_v4.c:1023: void print16ASCII(unsigned int num) {
                                   5332 ;	-----------------------------------------
                                   5333 ;	 function print16ASCII
                                   5334 ;	-----------------------------------------
      0015CD                       5335 _print16ASCII:
      0015CD AE 82            [24] 5336 	mov	r6,dpl
      0015CF AF 83            [24] 5337 	mov	r7,dph
                                   5338 ;	.\ecen4350_lcd_v4.c:1024: print8ASCII((unsigned char)(num >> 8));
      0015D1 8F 82            [24] 5339 	mov	dpl,r7
      0015D3 C0 07            [24] 5340 	push	ar7
      0015D5 C0 06            [24] 5341 	push	ar6
      0015D7 12 15 CA         [24] 5342 	lcall	_print8ASCII
      0015DA D0 06            [24] 5343 	pop	ar6
      0015DC D0 07            [24] 5344 	pop	ar7
                                   5345 ;	.\ecen4350_lcd_v4.c:1025: print8ASCII((unsigned char)num);
      0015DE 8E 82            [24] 5346 	mov	dpl,r6
                                   5347 ;	.\ecen4350_lcd_v4.c:1026: }
      0015E0 02 15 CA         [24] 5348 	ljmp	_print8ASCII
                                   5349 ;------------------------------------------------------------
                                   5350 ;Allocation info for local variables in function 'writeSomeLines'
                                   5351 ;------------------------------------------------------------
                                   5352 ;	.\ecen4350_lcd_v4.c:1029: void writeSomeLines()
                                   5353 ;	-----------------------------------------
                                   5354 ;	 function writeSomeLines
                                   5355 ;	-----------------------------------------
      0015E3                       5356 _writeSomeLines:
                                   5357 ;	.\ecen4350_lcd_v4.c:1031: setRotation(0);		//rotation 0 is for flat/flush LCD
      0015E3 75 82 00         [24] 5358 	mov	dpl,#0x00
      0015E6 12 05 8F         [24] 5359 	lcall	_setRotation
                                   5360 ;	.\ecen4350_lcd_v4.c:1033: fillScreen(CYAN);
      0015E9 90 07 FF         [24] 5361 	mov	dptr,#0x07ff
      0015EC 12 0D 13         [24] 5362 	lcall	_fillScreen
                                   5363 ;	.\ecen4350_lcd_v4.c:1034: fillTop(BLACK);
      0015EF 90 00 00         [24] 5364 	mov	dptr,#0x0000
      0015F2 12 0C 2D         [24] 5365 	lcall	_fillTop
                                   5366 ;	.\ecen4350_lcd_v4.c:1035: setTextSize(5);
      0015F5 75 82 05         [24] 5367 	mov	dpl,#0x05
      0015F8 12 05 77         [24] 5368 	lcall	_setTextSize
                                   5369 ;	.\ecen4350_lcd_v4.c:1036: setTextColor(CYAN, BLACK);
      0015FB E4               [12] 5370 	clr	a
      0015FC F5 6B            [12] 5371 	mov	_setTextColor_PARM_2,a
      0015FE F5 6C            [12] 5372 	mov	(_setTextColor_PARM_2 + 1),a
      001600 90 07 FF         [24] 5373 	mov	dptr,#0x07ff
      001603 12 05 6A         [24] 5374 	lcall	_setTextColor
                                   5375 ;	.\ecen4350_lcd_v4.c:1037: setCursor(10,0);
      001606 E4               [12] 5376 	clr	a
      001607 F5 6B            [12] 5377 	mov	_setCursor_PARM_2,a
      001609 F5 6C            [12] 5378 	mov	(_setCursor_PARM_2 + 1),a
      00160B 90 00 0A         [24] 5379 	mov	dptr,#0x000a
      00160E 12 05 5D         [24] 5380 	lcall	_setCursor
                                   5381 ;	.\ecen4350_lcd_v4.c:1038: LCD_string_write("Welcome\n");
      001611 90 54 B7         [24] 5382 	mov	dptr,#___str_3
      001614 75 F0 80         [24] 5383 	mov	b,#0x80
      001617 12 10 77         [24] 5384 	lcall	_LCD_string_write
                                   5385 ;	.\ecen4350_lcd_v4.c:1039: setTextSize(2);
      00161A 75 82 02         [24] 5386 	mov	dpl,#0x02
      00161D 12 05 77         [24] 5387 	lcall	_setTextSize
                                   5388 ;	.\ecen4350_lcd_v4.c:1040: setTextColor(BLACK, CYAN);
      001620 75 6B FF         [24] 5389 	mov	_setTextColor_PARM_2,#0xff
      001623 75 6C 07         [24] 5390 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001626 90 00 00         [24] 5391 	mov	dptr,#0x0000
      001629 12 05 6A         [24] 5392 	lcall	_setTextColor
                                   5393 ;	.\ecen4350_lcd_v4.c:1041: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      00162C 90 54 C0         [24] 5394 	mov	dptr,#___str_4
      00162F 75 F0 80         [24] 5395 	mov	b,#0x80
      001632 12 10 77         [24] 5396 	lcall	_LCD_string_write
                                   5397 ;	.\ecen4350_lcd_v4.c:1042: delay(40);
      001635 90 00 28         [24] 5398 	mov	dptr,#0x0028
                                   5399 ;	.\ecen4350_lcd_v4.c:1043: }
      001638 02 01 87         [24] 5400 	ljmp	_delay
                                   5401 ;------------------------------------------------------------
                                   5402 ;Allocation info for local variables in function 'setColorDefault'
                                   5403 ;------------------------------------------------------------
                                   5404 ;	.\ecen4350_lcd_v4.c:1046: void setColorDefault() {
                                   5405 ;	-----------------------------------------
                                   5406 ;	 function setColorDefault
                                   5407 ;	-----------------------------------------
      00163B                       5408 _setColorDefault:
                                   5409 ;	.\ecen4350_lcd_v4.c:1047: setTextColor(colorText, colorBackground);
      00163B E4               [12] 5410 	clr	a
      00163C F5 6B            [12] 5411 	mov	_setTextColor_PARM_2,a
      00163E F5 6C            [12] 5412 	mov	(_setTextColor_PARM_2 + 1),a
      001640 90 07 FF         [24] 5413 	mov	dptr,#0x07ff
                                   5414 ;	.\ecen4350_lcd_v4.c:1048: } 
      001643 02 05 6A         [24] 5415 	ljmp	_setTextColor
                                   5416 ;------------------------------------------------------------
                                   5417 ;Allocation info for local variables in function 'setColorSelect'
                                   5418 ;------------------------------------------------------------
                                   5419 ;	.\ecen4350_lcd_v4.c:1050: void setColorSelect() {
                                   5420 ;	-----------------------------------------
                                   5421 ;	 function setColorSelect
                                   5422 ;	-----------------------------------------
      001646                       5423 _setColorSelect:
                                   5424 ;	.\ecen4350_lcd_v4.c:1051: setTextColor(colorSelect, colorBackground);
      001646 E4               [12] 5425 	clr	a
      001647 F5 6B            [12] 5426 	mov	_setTextColor_PARM_2,a
      001649 F5 6C            [12] 5427 	mov	(_setTextColor_PARM_2 + 1),a
      00164B 90 F8 1F         [24] 5428 	mov	dptr,#0xf81f
                                   5429 ;	.\ecen4350_lcd_v4.c:1052: }
      00164E 02 05 6A         [24] 5430 	ljmp	_setTextColor
                                   5431 ;------------------------------------------------------------
                                   5432 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5433 ;------------------------------------------------------------
                                   5434 ;	.\ecen4350_lcd_v4.c:1054: void setColorHighlight1() {
                                   5435 ;	-----------------------------------------
                                   5436 ;	 function setColorHighlight1
                                   5437 ;	-----------------------------------------
      001651                       5438 _setColorHighlight1:
                                   5439 ;	.\ecen4350_lcd_v4.c:1055: setTextColor(colorSelect, CYAN);
      001651 75 6B FF         [24] 5440 	mov	_setTextColor_PARM_2,#0xff
      001654 75 6C 07         [24] 5441 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001657 90 F8 1F         [24] 5442 	mov	dptr,#0xf81f
                                   5443 ;	.\ecen4350_lcd_v4.c:1056: }
      00165A 02 05 6A         [24] 5444 	ljmp	_setTextColor
                                   5445 ;------------------------------------------------------------
                                   5446 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5447 ;------------------------------------------------------------
                                   5448 ;	.\ecen4350_lcd_v4.c:1058: void setColorHighlight2() {
                                   5449 ;	-----------------------------------------
                                   5450 ;	 function setColorHighlight2
                                   5451 ;	-----------------------------------------
      00165D                       5452 _setColorHighlight2:
                                   5453 ;	.\ecen4350_lcd_v4.c:1059: setTextColor(BLACK, CYAN);
      00165D 75 6B FF         [24] 5454 	mov	_setTextColor_PARM_2,#0xff
      001660 75 6C 07         [24] 5455 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001663 90 00 00         [24] 5456 	mov	dptr,#0x0000
                                   5457 ;	.\ecen4350_lcd_v4.c:1060: }
      001666 02 05 6A         [24] 5458 	ljmp	_setTextColor
                                   5459 ;------------------------------------------------------------
                                   5460 ;Allocation info for local variables in function 'setColorGray'
                                   5461 ;------------------------------------------------------------
                                   5462 ;	.\ecen4350_lcd_v4.c:1062: void setColorGray() {
                                   5463 ;	-----------------------------------------
                                   5464 ;	 function setColorGray
                                   5465 ;	-----------------------------------------
      001669                       5466 _setColorGray:
                                   5467 ;	.\ecen4350_lcd_v4.c:1063: setTextColor(GRAY, colorBackground);
      001669 E4               [12] 5468 	clr	a
      00166A F5 6B            [12] 5469 	mov	_setTextColor_PARM_2,a
      00166C F5 6C            [12] 5470 	mov	(_setTextColor_PARM_2 + 1),a
      00166E 90 D6 BA         [24] 5471 	mov	dptr,#0xd6ba
                                   5472 ;	.\ecen4350_lcd_v4.c:1064: }
      001671 02 05 6A         [24] 5473 	ljmp	_setTextColor
                                   5474 ;------------------------------------------------------------
                                   5475 ;Allocation info for local variables in function 'setColorMenu'
                                   5476 ;------------------------------------------------------------
                                   5477 ;	.\ecen4350_lcd_v4.c:1066: void setColorMenu() {
                                   5478 ;	-----------------------------------------
                                   5479 ;	 function setColorMenu
                                   5480 ;	-----------------------------------------
      001674                       5481 _setColorMenu:
                                   5482 ;	.\ecen4350_lcd_v4.c:1067: setTextColor(BLACK, GRAY);
      001674 75 6B BA         [24] 5483 	mov	_setTextColor_PARM_2,#0xba
      001677 75 6C D6         [24] 5484 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00167A 90 00 00         [24] 5485 	mov	dptr,#0x0000
                                   5486 ;	.\ecen4350_lcd_v4.c:1068: }
      00167D 02 05 6A         [24] 5487 	ljmp	_setTextColor
                                   5488 ;------------------------------------------------------------
                                   5489 ;Allocation info for local variables in function 'setColorRed'
                                   5490 ;------------------------------------------------------------
                                   5491 ;	.\ecen4350_lcd_v4.c:1070: void setColorRed() {
                                   5492 ;	-----------------------------------------
                                   5493 ;	 function setColorRed
                                   5494 ;	-----------------------------------------
      001680                       5495 _setColorRed:
                                   5496 ;	.\ecen4350_lcd_v4.c:1071: setTextColor(RED, colorBackground);
      001680 E4               [12] 5497 	clr	a
      001681 F5 6B            [12] 5498 	mov	_setTextColor_PARM_2,a
      001683 F5 6C            [12] 5499 	mov	(_setTextColor_PARM_2 + 1),a
      001685 90 F8 00         [24] 5500 	mov	dptr,#0xf800
                                   5501 ;	.\ecen4350_lcd_v4.c:1072: }
      001688 02 05 6A         [24] 5502 	ljmp	_setTextColor
                                   5503 ;------------------------------------------------------------
                                   5504 ;Allocation info for local variables in function 'setColorWhite'
                                   5505 ;------------------------------------------------------------
                                   5506 ;	.\ecen4350_lcd_v4.c:1074: void setColorWhite() {
                                   5507 ;	-----------------------------------------
                                   5508 ;	 function setColorWhite
                                   5509 ;	-----------------------------------------
      00168B                       5510 _setColorWhite:
                                   5511 ;	.\ecen4350_lcd_v4.c:1075: setTextColor(WHITE, colorBackground);
      00168B E4               [12] 5512 	clr	a
      00168C F5 6B            [12] 5513 	mov	_setTextColor_PARM_2,a
      00168E F5 6C            [12] 5514 	mov	(_setTextColor_PARM_2 + 1),a
      001690 90 FF FF         [24] 5515 	mov	dptr,#0xffff
                                   5516 ;	.\ecen4350_lcd_v4.c:1076: }
      001693 02 05 6A         [24] 5517 	ljmp	_setTextColor
                                   5518 ;------------------------------------------------------------
                                   5519 ;Allocation info for local variables in function 'setColorGreen'
                                   5520 ;------------------------------------------------------------
                                   5521 ;	.\ecen4350_lcd_v4.c:1078: void setColorGreen() {
                                   5522 ;	-----------------------------------------
                                   5523 ;	 function setColorGreen
                                   5524 ;	-----------------------------------------
      001696                       5525 _setColorGreen:
                                   5526 ;	.\ecen4350_lcd_v4.c:1079: setTextColor(GREEN, colorBackground);
      001696 E4               [12] 5527 	clr	a
      001697 F5 6B            [12] 5528 	mov	_setTextColor_PARM_2,a
      001699 F5 6C            [12] 5529 	mov	(_setTextColor_PARM_2 + 1),a
      00169B 90 07 E0         [24] 5530 	mov	dptr,#0x07e0
                                   5531 ;	.\ecen4350_lcd_v4.c:1080: }
      00169E 02 05 6A         [24] 5532 	ljmp	_setTextColor
                                   5533 ;------------------------------------------------------------
                                   5534 ;Allocation info for local variables in function 'setColorYellow'
                                   5535 ;------------------------------------------------------------
                                   5536 ;	.\ecen4350_lcd_v4.c:1082: void setColorYellow() {
                                   5537 ;	-----------------------------------------
                                   5538 ;	 function setColorYellow
                                   5539 ;	-----------------------------------------
      0016A1                       5540 _setColorYellow:
                                   5541 ;	.\ecen4350_lcd_v4.c:1083: setTextColor(YELLOW, colorBackground);
      0016A1 E4               [12] 5542 	clr	a
      0016A2 F5 6B            [12] 5543 	mov	_setTextColor_PARM_2,a
      0016A4 F5 6C            [12] 5544 	mov	(_setTextColor_PARM_2 + 1),a
      0016A6 90 FF E0         [24] 5545 	mov	dptr,#0xffe0
                                   5546 ;	.\ecen4350_lcd_v4.c:1084: }
      0016A9 02 05 6A         [24] 5547 	ljmp	_setTextColor
                                   5548 ;------------------------------------------------------------
                                   5549 ;Allocation info for local variables in function 'inputAddress'
                                   5550 ;------------------------------------------------------------
                                   5551 ;address                   Allocated to registers r7 r6 
                                   5552 ;input                     Allocated to registers r7 
                                   5553 ;------------------------------------------------------------
                                   5554 ;	.\ecen4350_lcd_v4.c:1086: unsigned int inputAddress()
                                   5555 ;	-----------------------------------------
                                   5556 ;	 function inputAddress
                                   5557 ;	-----------------------------------------
      0016AC                       5558 _inputAddress:
                                   5559 ;	.\ecen4350_lcd_v4.c:1091: input = keyDetect();					
      0016AC 12 11 95         [24] 5560 	lcall	_keyDetect
                                   5561 ;	.\ecen4350_lcd_v4.c:1094: write(input);									// Print to screen
      0016AF AF 82            [24] 5562 	mov  r7,dpl
      0016B1 C0 07            [24] 5563 	push	ar7
      0016B3 12 10 11         [24] 5564 	lcall	_write
      0016B6 D0 07            [24] 5565 	pop	ar7
                                   5566 ;	.\ecen4350_lcd_v4.c:1095: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      0016B8 8F 82            [24] 5567 	mov	dpl,r7
      0016BA 12 14 03         [24] 5568 	lcall	_ASCIItoHex
                                   5569 ;	.\ecen4350_lcd_v4.c:1096: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      0016BD E5 82            [12] 5570 	mov	a,dpl
      0016BF C4               [12] 5571 	swap	a
      0016C0 54 F0            [12] 5572 	anl	a,#0xf0
      0016C2 FE               [12] 5573 	mov	r6,a
      0016C3 7F 00            [12] 5574 	mov	r7,#0x00
                                   5575 ;	.\ecen4350_lcd_v4.c:1098: input = keyDetect();							// second highest address nibble
      0016C5 C0 07            [24] 5576 	push	ar7
      0016C7 C0 06            [24] 5577 	push	ar6
      0016C9 12 11 95         [24] 5578 	lcall	_keyDetect
                                   5579 ;	.\ecen4350_lcd_v4.c:1101: write(input);									// Print to screen
      0016CC AD 82            [24] 5580 	mov  r5,dpl
      0016CE C0 05            [24] 5581 	push	ar5
      0016D0 12 10 11         [24] 5582 	lcall	_write
      0016D3 D0 05            [24] 5583 	pop	ar5
                                   5584 ;	.\ecen4350_lcd_v4.c:1102: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      0016D5 8D 82            [24] 5585 	mov	dpl,r5
      0016D7 12 14 03         [24] 5586 	lcall	_ASCIItoHex
      0016DA AD 82            [24] 5587 	mov	r5,dpl
      0016DC D0 06            [24] 5588 	pop	ar6
      0016DE D0 07            [24] 5589 	pop	ar7
                                   5590 ;	.\ecen4350_lcd_v4.c:1103: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      0016E0 8D 04            [24] 5591 	mov	ar4,r5
      0016E2 7D 00            [12] 5592 	mov	r5,#0x00
      0016E4 EF               [12] 5593 	mov	a,r7
      0016E5 42 05            [12] 5594 	orl	ar5,a
      0016E7 EE               [12] 5595 	mov	a,r6
      0016E8 42 04            [12] 5596 	orl	ar4,a
                                   5597 ;	.\ecen4350_lcd_v4.c:1105: input = keyDetect();
      0016EA C0 05            [24] 5598 	push	ar5
      0016EC C0 04            [24] 5599 	push	ar4
      0016EE 12 11 95         [24] 5600 	lcall	_keyDetect
      0016F1 AF 82            [24] 5601 	mov	r7,dpl
      0016F3 D0 04            [24] 5602 	pop	ar4
      0016F5 D0 05            [24] 5603 	pop	ar5
                                   5604 ;	.\ecen4350_lcd_v4.c:1108: write(input);
      0016F7 8F 82            [24] 5605 	mov	dpl,r7
      0016F9 C0 07            [24] 5606 	push	ar7
      0016FB C0 05            [24] 5607 	push	ar5
      0016FD C0 04            [24] 5608 	push	ar4
      0016FF 12 10 11         [24] 5609 	lcall	_write
      001702 D0 04            [24] 5610 	pop	ar4
      001704 D0 05            [24] 5611 	pop	ar5
      001706 D0 07            [24] 5612 	pop	ar7
                                   5613 ;	.\ecen4350_lcd_v4.c:1109: input = ASCIItoHex(input);
      001708 8F 82            [24] 5614 	mov	dpl,r7
      00170A C0 05            [24] 5615 	push	ar5
      00170C C0 04            [24] 5616 	push	ar4
      00170E 12 14 03         [24] 5617 	lcall	_ASCIItoHex
      001711 AF 82            [24] 5618 	mov	r7,dpl
      001713 D0 04            [24] 5619 	pop	ar4
      001715 D0 05            [24] 5620 	pop	ar5
                                   5621 ;	.\ecen4350_lcd_v4.c:1110: address |= (int) input * 16;					// *0x0010
      001717 E4               [12] 5622 	clr	a
      001718 CF               [12] 5623 	xch	a,r7
      001719 C4               [12] 5624 	swap	a
      00171A CF               [12] 5625 	xch	a,r7
      00171B 6F               [12] 5626 	xrl	a,r7
      00171C CF               [12] 5627 	xch	a,r7
      00171D 54 F0            [12] 5628 	anl	a,#0xf0
      00171F CF               [12] 5629 	xch	a,r7
      001720 6F               [12] 5630 	xrl	a,r7
      001721 FE               [12] 5631 	mov	r6,a
      001722 ED               [12] 5632 	mov	a,r5
      001723 42 07            [12] 5633 	orl	ar7,a
      001725 EC               [12] 5634 	mov	a,r4
      001726 42 06            [12] 5635 	orl	ar6,a
                                   5636 ;	.\ecen4350_lcd_v4.c:1112: input = keyDetect();
      001728 C0 07            [24] 5637 	push	ar7
      00172A C0 06            [24] 5638 	push	ar6
      00172C 12 11 95         [24] 5639 	lcall	_keyDetect
                                   5640 ;	.\ecen4350_lcd_v4.c:1115: write(input);
      00172F AD 82            [24] 5641 	mov  r5,dpl
      001731 C0 05            [24] 5642 	push	ar5
      001733 12 10 11         [24] 5643 	lcall	_write
      001736 D0 05            [24] 5644 	pop	ar5
                                   5645 ;	.\ecen4350_lcd_v4.c:1116: input = ASCIItoHex(input);
      001738 8D 82            [24] 5646 	mov	dpl,r5
      00173A 12 14 03         [24] 5647 	lcall	_ASCIItoHex
      00173D AD 82            [24] 5648 	mov	r5,dpl
      00173F D0 06            [24] 5649 	pop	ar6
      001741 D0 07            [24] 5650 	pop	ar7
                                   5651 ;	.\ecen4350_lcd_v4.c:1117: address |= (int) input;							// *0x0001
      001743 7C 00            [12] 5652 	mov	r4,#0x00
      001745 ED               [12] 5653 	mov	a,r5
      001746 4F               [12] 5654 	orl	a,r7
      001747 F5 82            [12] 5655 	mov	dpl,a
      001749 EC               [12] 5656 	mov	a,r4
      00174A 4E               [12] 5657 	orl	a,r6
      00174B F5 83            [12] 5658 	mov	dph,a
                                   5659 ;	.\ecen4350_lcd_v4.c:1120: return address;									// yeet
                                   5660 ;	.\ecen4350_lcd_v4.c:1121: }
      00174D 22               [24] 5661 	ret
                                   5662 ;------------------------------------------------------------
                                   5663 ;Allocation info for local variables in function 'inputBlockType'
                                   5664 ;------------------------------------------------------------
                                   5665 ;blockType                 Allocated to registers 
                                   5666 ;invalidType               Allocated to registers 
                                   5667 ;------------------------------------------------------------
                                   5668 ;	.\ecen4350_lcd_v4.c:1123: unsigned char inputBlockType() {
                                   5669 ;	-----------------------------------------
                                   5670 ;	 function inputBlockType
                                   5671 ;	-----------------------------------------
      00174E                       5672 _inputBlockType:
                                   5673 ;	.\ecen4350_lcd_v4.c:1129: selection = keyDetect();
      00174E 12 11 95         [24] 5674 	lcall	_keyDetect
      001751 AF 82            [24] 5675 	mov	r7,dpl
      001753 78 71            [12] 5676 	mov	r0,#_selection
      001755 A6 07            [24] 5677 	mov	@r0,ar7
                                   5678 ;	.\ecen4350_lcd_v4.c:1130: blockType = ASCIItoHex(selection);
      001757 8F 82            [24] 5679 	mov	dpl,r7
                                   5680 ;	.\ecen4350_lcd_v4.c:1145: return blockType;
                                   5681 ;	.\ecen4350_lcd_v4.c:1146: }
      001759 02 14 03         [24] 5682 	ljmp	_ASCIItoHex
                                   5683 ;------------------------------------------------------------
                                   5684 ;Allocation info for local variables in function 'inputBlockSize'
                                   5685 ;------------------------------------------------------------
                                   5686 ;blockSize                 Allocated to registers 
                                   5687 ;------------------------------------------------------------
                                   5688 ;	.\ecen4350_lcd_v4.c:1148: unsigned char inputBlockSize() {
                                   5689 ;	-----------------------------------------
                                   5690 ;	 function inputBlockSize
                                   5691 ;	-----------------------------------------
      00175C                       5692 _inputBlockSize:
                                   5693 ;	.\ecen4350_lcd_v4.c:1151: selection = keyDetect();
      00175C 12 11 95         [24] 5694 	lcall	_keyDetect
      00175F AF 82            [24] 5695 	mov	r7,dpl
      001761 78 71            [12] 5696 	mov	r0,#_selection
      001763 A6 07            [24] 5697 	mov	@r0,ar7
                                   5698 ;	.\ecen4350_lcd_v4.c:1152: write(selection);
      001765 8F 82            [24] 5699 	mov	dpl,r7
      001767 12 10 11         [24] 5700 	lcall	_write
                                   5701 ;	.\ecen4350_lcd_v4.c:1153: selection = ASCIItoHex(selection);
      00176A 78 71            [12] 5702 	mov	r0,#_selection
      00176C 86 82            [24] 5703 	mov	dpl,@r0
      00176E 12 14 03         [24] 5704 	lcall	_ASCIItoHex
      001771 AF 82            [24] 5705 	mov	r7,dpl
      001773 78 71            [12] 5706 	mov	r0,#_selection
      001775 A6 07            [24] 5707 	mov	@r0,ar7
                                   5708 ;	.\ecen4350_lcd_v4.c:1154: blockSize |= selection * 16;
      001777 EF               [12] 5709 	mov	a,r7
      001778 C4               [12] 5710 	swap	a
      001779 54 F0            [12] 5711 	anl	a,#0xf0
      00177B FF               [12] 5712 	mov	r7,a
                                   5713 ;	.\ecen4350_lcd_v4.c:1155: selection = keyDetect();
      00177C C0 07            [24] 5714 	push	ar7
      00177E 12 11 95         [24] 5715 	lcall	_keyDetect
      001781 AE 82            [24] 5716 	mov	r6,dpl
      001783 78 71            [12] 5717 	mov	r0,#_selection
      001785 A6 06            [24] 5718 	mov	@r0,ar6
                                   5719 ;	.\ecen4350_lcd_v4.c:1156: write(selection);
      001787 8E 82            [24] 5720 	mov	dpl,r6
      001789 12 10 11         [24] 5721 	lcall	_write
                                   5722 ;	.\ecen4350_lcd_v4.c:1157: selection = ASCIItoHex(selection);
      00178C 78 71            [12] 5723 	mov	r0,#_selection
      00178E 86 82            [24] 5724 	mov	dpl,@r0
      001790 12 14 03         [24] 5725 	lcall	_ASCIItoHex
      001793 AE 82            [24] 5726 	mov	r6,dpl
      001795 D0 07            [24] 5727 	pop	ar7
      001797 78 71            [12] 5728 	mov	r0,#_selection
      001799 A6 06            [24] 5729 	mov	@r0,ar6
                                   5730 ;	.\ecen4350_lcd_v4.c:1158: blockSize |= selection;
      00179B EE               [12] 5731 	mov	a,r6
      00179C 4F               [12] 5732 	orl	a,r7
      00179D F5 82            [12] 5733 	mov	dpl,a
                                   5734 ;	.\ecen4350_lcd_v4.c:1159: return blockSize;
                                   5735 ;	.\ecen4350_lcd_v4.c:1160: }
      00179F 22               [24] 5736 	ret
                                   5737 ;------------------------------------------------------------
                                   5738 ;Allocation info for local variables in function 'printMenu'
                                   5739 ;------------------------------------------------------------
                                   5740 ;	.\ecen4350_lcd_v4.c:1163: void printMenu() {
                                   5741 ;	-----------------------------------------
                                   5742 ;	 function printMenu
                                   5743 ;	-----------------------------------------
      0017A0                       5744 _printMenu:
                                   5745 ;	.\ecen4350_lcd_v4.c:1165: if (UART_en == 1) goto withUART;
      0017A0 78 72            [12] 5746 	mov	r0,#_UART_en
      0017A2 B6 01 03         [24] 5747 	cjne	@r0,#0x01,00111$
      0017A5 02 18 DB         [24] 5748 	ljmp	00103$
      0017A8                       5749 00111$:
                                   5750 ;	.\ecen4350_lcd_v4.c:1166: setCursor(0,0);
      0017A8 E4               [12] 5751 	clr	a
      0017A9 F5 6B            [12] 5752 	mov	_setCursor_PARM_2,a
      0017AB F5 6C            [12] 5753 	mov	(_setCursor_PARM_2 + 1),a
      0017AD 90 00 00         [24] 5754 	mov	dptr,#0x0000
      0017B0 12 05 5D         [24] 5755 	lcall	_setCursor
                                   5756 ;	.\ecen4350_lcd_v4.c:1167: clearLCD();
      0017B3 12 0D FA         [24] 5757 	lcall	_clearLCD
                                   5758 ;	.\ecen4350_lcd_v4.c:1170: fillTop(GRAY);
      0017B6 90 D6 BA         [24] 5759 	mov	dptr,#0xd6ba
      0017B9 12 0C 2D         [24] 5760 	lcall	_fillTop
                                   5761 ;	.\ecen4350_lcd_v4.c:1171: setTextSize(5);
      0017BC 75 82 05         [24] 5762 	mov	dpl,#0x05
      0017BF 12 05 77         [24] 5763 	lcall	_setTextSize
                                   5764 ;	.\ecen4350_lcd_v4.c:1172: setColorMenu();
      0017C2 12 16 74         [24] 5765 	lcall	_setColorMenu
                                   5766 ;	.\ecen4350_lcd_v4.c:1173: setCursor(30, 0);
      0017C5 E4               [12] 5767 	clr	a
      0017C6 F5 6B            [12] 5768 	mov	_setCursor_PARM_2,a
      0017C8 F5 6C            [12] 5769 	mov	(_setCursor_PARM_2 + 1),a
      0017CA 90 00 1E         [24] 5770 	mov	dptr,#0x001e
      0017CD 12 05 5D         [24] 5771 	lcall	_setCursor
                                   5772 ;	.\ecen4350_lcd_v4.c:1174: LCD_string_write("<Menu>\n");
      0017D0 90 54 E7         [24] 5773 	mov	dptr,#___str_5
      0017D3 75 F0 80         [24] 5774 	mov	b,#0x80
      0017D6 12 10 77         [24] 5775 	lcall	_LCD_string_write
                                   5776 ;	.\ecen4350_lcd_v4.c:1176: setTextSize(2);
      0017D9 75 82 02         [24] 5777 	mov	dpl,#0x02
      0017DC 12 05 77         [24] 5778 	lcall	_setTextSize
                                   5779 ;	.\ecen4350_lcd_v4.c:1178: setCursor(0, 60);
      0017DF 75 6B 3C         [24] 5780 	mov	_setCursor_PARM_2,#0x3c
      0017E2 75 6C 00         [24] 5781 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017E5 90 00 00         [24] 5782 	mov	dptr,#0x0000
      0017E8 12 05 5D         [24] 5783 	lcall	_setCursor
                                   5784 ;	.\ecen4350_lcd_v4.c:1179: setColorWhite();
      0017EB 12 16 8B         [24] 5785 	lcall	_setColorWhite
                                   5786 ;	.\ecen4350_lcd_v4.c:1180: LCD_string_write(" <D>");
      0017EE 90 54 EF         [24] 5787 	mov	dptr,#___str_6
      0017F1 75 F0 80         [24] 5788 	mov	b,#0x80
      0017F4 12 10 77         [24] 5789 	lcall	_LCD_string_write
                                   5790 ;	.\ecen4350_lcd_v4.c:1181: setColorDefault();
      0017F7 12 16 3B         [24] 5791 	lcall	_setColorDefault
                                   5792 ;	.\ecen4350_lcd_v4.c:1182: LCD_string_write(" DUMP\n");
      0017FA 90 54 F4         [24] 5793 	mov	dptr,#___str_7
      0017FD 75 F0 80         [24] 5794 	mov	b,#0x80
      001800 12 10 77         [24] 5795 	lcall	_LCD_string_write
                                   5796 ;	.\ecen4350_lcd_v4.c:1184: setCursor(120, 60);
      001803 75 6B 3C         [24] 5797 	mov	_setCursor_PARM_2,#0x3c
      001806 75 6C 00         [24] 5798 	mov	(_setCursor_PARM_2 + 1),#0x00
      001809 90 00 78         [24] 5799 	mov	dptr,#0x0078
      00180C 12 05 5D         [24] 5800 	lcall	_setCursor
                                   5801 ;	.\ecen4350_lcd_v4.c:1185: setColorWhite();
      00180F 12 16 8B         [24] 5802 	lcall	_setColorWhite
                                   5803 ;	.\ecen4350_lcd_v4.c:1186: LCD_string_write(" <B>");
      001812 90 54 FB         [24] 5804 	mov	dptr,#___str_8
      001815 75 F0 80         [24] 5805 	mov	b,#0x80
      001818 12 10 77         [24] 5806 	lcall	_LCD_string_write
                                   5807 ;	.\ecen4350_lcd_v4.c:1187: setColorDefault();
      00181B 12 16 3B         [24] 5808 	lcall	_setColorDefault
                                   5809 ;	.\ecen4350_lcd_v4.c:1188: LCD_string_write(" MOVE\n");
      00181E 90 55 00         [24] 5810 	mov	dptr,#___str_9
      001821 75 F0 80         [24] 5811 	mov	b,#0x80
      001824 12 10 77         [24] 5812 	lcall	_LCD_string_write
                                   5813 ;	.\ecen4350_lcd_v4.c:1190: setCursor(0, 100);
      001827 75 6B 64         [24] 5814 	mov	_setCursor_PARM_2,#0x64
      00182A 75 6C 00         [24] 5815 	mov	(_setCursor_PARM_2 + 1),#0x00
      00182D 90 00 00         [24] 5816 	mov	dptr,#0x0000
      001830 12 05 5D         [24] 5817 	lcall	_setCursor
                                   5818 ;	.\ecen4350_lcd_v4.c:1191: setColorWhite();
      001833 12 16 8B         [24] 5819 	lcall	_setColorWhite
                                   5820 ;	.\ecen4350_lcd_v4.c:1192: LCD_string_write(" <E>");
      001836 90 55 07         [24] 5821 	mov	dptr,#___str_10
      001839 75 F0 80         [24] 5822 	mov	b,#0x80
      00183C 12 10 77         [24] 5823 	lcall	_LCD_string_write
                                   5824 ;	.\ecen4350_lcd_v4.c:1193: setColorDefault();
      00183F 12 16 3B         [24] 5825 	lcall	_setColorDefault
                                   5826 ;	.\ecen4350_lcd_v4.c:1194: LCD_string_write(" EDIT\n");
      001842 90 55 0C         [24] 5827 	mov	dptr,#___str_11
      001845 75 F0 80         [24] 5828 	mov	b,#0x80
      001848 12 10 77         [24] 5829 	lcall	_LCD_string_write
                                   5830 ;	.\ecen4350_lcd_v4.c:1196: setCursor(120, 100);
      00184B 75 6B 64         [24] 5831 	mov	_setCursor_PARM_2,#0x64
      00184E 75 6C 00         [24] 5832 	mov	(_setCursor_PARM_2 + 1),#0x00
      001851 90 00 78         [24] 5833 	mov	dptr,#0x0078
      001854 12 05 5D         [24] 5834 	lcall	_setCursor
                                   5835 ;	.\ecen4350_lcd_v4.c:1197: setColorWhite();
      001857 12 16 8B         [24] 5836 	lcall	_setColorWhite
                                   5837 ;	.\ecen4350_lcd_v4.c:1198: LCD_string_write(" <F>");
      00185A 90 55 13         [24] 5838 	mov	dptr,#___str_12
      00185D 75 F0 80         [24] 5839 	mov	b,#0x80
      001860 12 10 77         [24] 5840 	lcall	_LCD_string_write
                                   5841 ;	.\ecen4350_lcd_v4.c:1199: setColorDefault();
      001863 12 16 3B         [24] 5842 	lcall	_setColorDefault
                                   5843 ;	.\ecen4350_lcd_v4.c:1200: LCD_string_write(" FIND\n");
      001866 90 55 18         [24] 5844 	mov	dptr,#___str_13
      001869 75 F0 80         [24] 5845 	mov	b,#0x80
      00186C 12 10 77         [24] 5846 	lcall	_LCD_string_write
                                   5847 ;	.\ecen4350_lcd_v4.c:1202: setCursor(0, 140);
      00186F 75 6B 8C         [24] 5848 	mov	_setCursor_PARM_2,#0x8c
      001872 75 6C 00         [24] 5849 	mov	(_setCursor_PARM_2 + 1),#0x00
      001875 90 00 00         [24] 5850 	mov	dptr,#0x0000
      001878 12 05 5D         [24] 5851 	lcall	_setCursor
                                   5852 ;	.\ecen4350_lcd_v4.c:1203: setColorWhite();
      00187B 12 16 8B         [24] 5853 	lcall	_setColorWhite
                                   5854 ;	.\ecen4350_lcd_v4.c:1204: LCD_string_write(" <C>");
      00187E 90 55 1F         [24] 5855 	mov	dptr,#___str_14
      001881 75 F0 80         [24] 5856 	mov	b,#0x80
      001884 12 10 77         [24] 5857 	lcall	_LCD_string_write
                                   5858 ;	.\ecen4350_lcd_v4.c:1205: setColorDefault();
      001887 12 16 3B         [24] 5859 	lcall	_setColorDefault
                                   5860 ;	.\ecen4350_lcd_v4.c:1206: LCD_string_write(" COUNT\n");
      00188A 90 55 24         [24] 5861 	mov	dptr,#___str_15
      00188D 75 F0 80         [24] 5862 	mov	b,#0x80
      001890 12 10 77         [24] 5863 	lcall	_LCD_string_write
                                   5864 ;	.\ecen4350_lcd_v4.c:1208: setCursor(0, 180);
      001893 75 6B B4         [24] 5865 	mov	_setCursor_PARM_2,#0xb4
      001896 75 6C 00         [24] 5866 	mov	(_setCursor_PARM_2 + 1),#0x00
      001899 90 00 00         [24] 5867 	mov	dptr,#0x0000
      00189C 12 05 5D         [24] 5868 	lcall	_setCursor
                                   5869 ;	.\ecen4350_lcd_v4.c:1209: setColorWhite();
      00189F 12 16 8B         [24] 5870 	lcall	_setColorWhite
                                   5871 ;	.\ecen4350_lcd_v4.c:1210: LCD_string_write(" <A>");
      0018A2 90 55 2C         [24] 5872 	mov	dptr,#___str_16
      0018A5 75 F0 80         [24] 5873 	mov	b,#0x80
      0018A8 12 10 77         [24] 5874 	lcall	_LCD_string_write
                                   5875 ;	.\ecen4350_lcd_v4.c:1211: setColorDefault();
      0018AB 12 16 3B         [24] 5876 	lcall	_setColorDefault
                                   5877 ;	.\ecen4350_lcd_v4.c:1212: LCD_string_write(" MEM CHECK\n");
      0018AE 90 55 31         [24] 5878 	mov	dptr,#___str_17
      0018B1 75 F0 80         [24] 5879 	mov	b,#0x80
      0018B4 12 10 77         [24] 5880 	lcall	_LCD_string_write
                                   5881 ;	.\ecen4350_lcd_v4.c:1214: setCursor(0, 220);
      0018B7 75 6B DC         [24] 5882 	mov	_setCursor_PARM_2,#0xdc
      0018BA 75 6C 00         [24] 5883 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018BD 90 00 00         [24] 5884 	mov	dptr,#0x0000
      0018C0 12 05 5D         [24] 5885 	lcall	_setCursor
                                   5886 ;	.\ecen4350_lcd_v4.c:1215: setColorWhite();
      0018C3 12 16 8B         [24] 5887 	lcall	_setColorWhite
                                   5888 ;	.\ecen4350_lcd_v4.c:1216: LCD_string_write(" <1>");
      0018C6 90 55 3D         [24] 5889 	mov	dptr,#___str_18
      0018C9 75 F0 80         [24] 5890 	mov	b,#0x80
      0018CC 12 10 77         [24] 5891 	lcall	_LCD_string_write
                                   5892 ;	.\ecen4350_lcd_v4.c:1217: setColorDefault();
      0018CF 12 16 3B         [24] 5893 	lcall	_setColorDefault
                                   5894 ;	.\ecen4350_lcd_v4.c:1218: LCD_string_write(" UART [Disabled]");
      0018D2 90 55 42         [24] 5895 	mov	dptr,#___str_19
      0018D5 75 F0 80         [24] 5896 	mov	b,#0x80
                                   5897 ;	.\ecen4350_lcd_v4.c:1219: goto exit;
      0018D8 02 10 77         [24] 5898 	ljmp	_LCD_string_write
                                   5899 ;	.\ecen4350_lcd_v4.c:1221: withUART:
      0018DB                       5900 00103$:
                                   5901 ;	.\ecen4350_lcd_v4.c:1222: setCursor(0,0);
      0018DB E4               [12] 5902 	clr	a
      0018DC F5 6B            [12] 5903 	mov	_setCursor_PARM_2,a
      0018DE F5 6C            [12] 5904 	mov	(_setCursor_PARM_2 + 1),a
      0018E0 90 00 00         [24] 5905 	mov	dptr,#0x0000
      0018E3 12 05 5D         [24] 5906 	lcall	_setCursor
                                   5907 ;	.\ecen4350_lcd_v4.c:1223: clearLCD();
      0018E6 12 0D FA         [24] 5908 	lcall	_clearLCD
                                   5909 ;	.\ecen4350_lcd_v4.c:1226: fillTop(GRAY);
      0018E9 90 D6 BA         [24] 5910 	mov	dptr,#0xd6ba
      0018EC 12 0C 2D         [24] 5911 	lcall	_fillTop
                                   5912 ;	.\ecen4350_lcd_v4.c:1227: setTextSize(5);
      0018EF 75 82 05         [24] 5913 	mov	dpl,#0x05
      0018F2 12 05 77         [24] 5914 	lcall	_setTextSize
                                   5915 ;	.\ecen4350_lcd_v4.c:1228: setColorMenu();
      0018F5 12 16 74         [24] 5916 	lcall	_setColorMenu
                                   5917 ;	.\ecen4350_lcd_v4.c:1229: setCursor(30, 0);
      0018F8 E4               [12] 5918 	clr	a
      0018F9 F5 6B            [12] 5919 	mov	_setCursor_PARM_2,a
      0018FB F5 6C            [12] 5920 	mov	(_setCursor_PARM_2 + 1),a
      0018FD 90 00 1E         [24] 5921 	mov	dptr,#0x001e
      001900 12 05 5D         [24] 5922 	lcall	_setCursor
                                   5923 ;	.\ecen4350_lcd_v4.c:1230: LCD_string_write("<Menu>\n");
      001903 90 54 E7         [24] 5924 	mov	dptr,#___str_5
      001906 75 F0 80         [24] 5925 	mov	b,#0x80
      001909 12 10 77         [24] 5926 	lcall	_LCD_string_write
                                   5927 ;	.\ecen4350_lcd_v4.c:1232: setTextSize(2);
      00190C 75 82 02         [24] 5928 	mov	dpl,#0x02
      00190F 12 05 77         [24] 5929 	lcall	_setTextSize
                                   5930 ;	.\ecen4350_lcd_v4.c:1234: setCursor(0, 60);
      001912 75 6B 3C         [24] 5931 	mov	_setCursor_PARM_2,#0x3c
      001915 75 6C 00         [24] 5932 	mov	(_setCursor_PARM_2 + 1),#0x00
      001918 90 00 00         [24] 5933 	mov	dptr,#0x0000
      00191B 12 05 5D         [24] 5934 	lcall	_setCursor
                                   5935 ;	.\ecen4350_lcd_v4.c:1235: setColorWhite();
      00191E 12 16 8B         [24] 5936 	lcall	_setColorWhite
                                   5937 ;	.\ecen4350_lcd_v4.c:1236: LCD_string_write(" <D>");
      001921 90 54 EF         [24] 5938 	mov	dptr,#___str_6
      001924 75 F0 80         [24] 5939 	mov	b,#0x80
      001927 12 10 77         [24] 5940 	lcall	_LCD_string_write
                                   5941 ;	.\ecen4350_lcd_v4.c:1237: setColorDefault();
      00192A 12 16 3B         [24] 5942 	lcall	_setColorDefault
                                   5943 ;	.\ecen4350_lcd_v4.c:1238: LCD_string_write(" DUMP\n");
      00192D 90 54 F4         [24] 5944 	mov	dptr,#___str_7
      001930 75 F0 80         [24] 5945 	mov	b,#0x80
      001933 12 10 77         [24] 5946 	lcall	_LCD_string_write
                                   5947 ;	.\ecen4350_lcd_v4.c:1240: setCursor(120, 60);
      001936 75 6B 3C         [24] 5948 	mov	_setCursor_PARM_2,#0x3c
      001939 75 6C 00         [24] 5949 	mov	(_setCursor_PARM_2 + 1),#0x00
      00193C 90 00 78         [24] 5950 	mov	dptr,#0x0078
      00193F 12 05 5D         [24] 5951 	lcall	_setCursor
                                   5952 ;	.\ecen4350_lcd_v4.c:1241: setColorWhite();
      001942 12 16 8B         [24] 5953 	lcall	_setColorWhite
                                   5954 ;	.\ecen4350_lcd_v4.c:1242: LCD_string_write(" <B>");
      001945 90 54 FB         [24] 5955 	mov	dptr,#___str_8
      001948 75 F0 80         [24] 5956 	mov	b,#0x80
      00194B 12 10 77         [24] 5957 	lcall	_LCD_string_write
                                   5958 ;	.\ecen4350_lcd_v4.c:1243: setColorDefault();
      00194E 12 16 3B         [24] 5959 	lcall	_setColorDefault
                                   5960 ;	.\ecen4350_lcd_v4.c:1244: LCD_string_write(" MOVE\n");
      001951 90 55 00         [24] 5961 	mov	dptr,#___str_9
      001954 75 F0 80         [24] 5962 	mov	b,#0x80
      001957 12 10 77         [24] 5963 	lcall	_LCD_string_write
                                   5964 ;	.\ecen4350_lcd_v4.c:1246: setCursor(0, 100);
      00195A 75 6B 64         [24] 5965 	mov	_setCursor_PARM_2,#0x64
      00195D 75 6C 00         [24] 5966 	mov	(_setCursor_PARM_2 + 1),#0x00
      001960 90 00 00         [24] 5967 	mov	dptr,#0x0000
      001963 12 05 5D         [24] 5968 	lcall	_setCursor
                                   5969 ;	.\ecen4350_lcd_v4.c:1247: setColorWhite();
      001966 12 16 8B         [24] 5970 	lcall	_setColorWhite
                                   5971 ;	.\ecen4350_lcd_v4.c:1248: LCD_string_write(" <E>");
      001969 90 55 07         [24] 5972 	mov	dptr,#___str_10
      00196C 75 F0 80         [24] 5973 	mov	b,#0x80
      00196F 12 10 77         [24] 5974 	lcall	_LCD_string_write
                                   5975 ;	.\ecen4350_lcd_v4.c:1249: setColorDefault();
      001972 12 16 3B         [24] 5976 	lcall	_setColorDefault
                                   5977 ;	.\ecen4350_lcd_v4.c:1250: LCD_string_write(" EDIT\n");
      001975 90 55 0C         [24] 5978 	mov	dptr,#___str_11
      001978 75 F0 80         [24] 5979 	mov	b,#0x80
      00197B 12 10 77         [24] 5980 	lcall	_LCD_string_write
                                   5981 ;	.\ecen4350_lcd_v4.c:1252: setCursor(120, 100);
      00197E 75 6B 64         [24] 5982 	mov	_setCursor_PARM_2,#0x64
      001981 75 6C 00         [24] 5983 	mov	(_setCursor_PARM_2 + 1),#0x00
      001984 90 00 78         [24] 5984 	mov	dptr,#0x0078
      001987 12 05 5D         [24] 5985 	lcall	_setCursor
                                   5986 ;	.\ecen4350_lcd_v4.c:1253: setColorWhite();
      00198A 12 16 8B         [24] 5987 	lcall	_setColorWhite
                                   5988 ;	.\ecen4350_lcd_v4.c:1254: LCD_string_write(" <F>");
      00198D 90 55 13         [24] 5989 	mov	dptr,#___str_12
      001990 75 F0 80         [24] 5990 	mov	b,#0x80
      001993 12 10 77         [24] 5991 	lcall	_LCD_string_write
                                   5992 ;	.\ecen4350_lcd_v4.c:1255: setColorDefault();
      001996 12 16 3B         [24] 5993 	lcall	_setColorDefault
                                   5994 ;	.\ecen4350_lcd_v4.c:1256: LCD_string_write(" FIND\n");
      001999 90 55 18         [24] 5995 	mov	dptr,#___str_13
      00199C 75 F0 80         [24] 5996 	mov	b,#0x80
      00199F 12 10 77         [24] 5997 	lcall	_LCD_string_write
                                   5998 ;	.\ecen4350_lcd_v4.c:1258: setCursor(0, 140);
      0019A2 75 6B 8C         [24] 5999 	mov	_setCursor_PARM_2,#0x8c
      0019A5 75 6C 00         [24] 6000 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019A8 90 00 00         [24] 6001 	mov	dptr,#0x0000
      0019AB 12 05 5D         [24] 6002 	lcall	_setCursor
                                   6003 ;	.\ecen4350_lcd_v4.c:1259: setColorWhite();
      0019AE 12 16 8B         [24] 6004 	lcall	_setColorWhite
                                   6005 ;	.\ecen4350_lcd_v4.c:1260: LCD_string_write(" <C>");
      0019B1 90 55 1F         [24] 6006 	mov	dptr,#___str_14
      0019B4 75 F0 80         [24] 6007 	mov	b,#0x80
      0019B7 12 10 77         [24] 6008 	lcall	_LCD_string_write
                                   6009 ;	.\ecen4350_lcd_v4.c:1261: setColorDefault();
      0019BA 12 16 3B         [24] 6010 	lcall	_setColorDefault
                                   6011 ;	.\ecen4350_lcd_v4.c:1262: LCD_string_write(" COUNT\n");
      0019BD 90 55 24         [24] 6012 	mov	dptr,#___str_15
      0019C0 75 F0 80         [24] 6013 	mov	b,#0x80
      0019C3 12 10 77         [24] 6014 	lcall	_LCD_string_write
                                   6015 ;	.\ecen4350_lcd_v4.c:1264: setCursor(0, 180);
      0019C6 75 6B B4         [24] 6016 	mov	_setCursor_PARM_2,#0xb4
      0019C9 75 6C 00         [24] 6017 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019CC 90 00 00         [24] 6018 	mov	dptr,#0x0000
      0019CF 12 05 5D         [24] 6019 	lcall	_setCursor
                                   6020 ;	.\ecen4350_lcd_v4.c:1265: setColorWhite();
      0019D2 12 16 8B         [24] 6021 	lcall	_setColorWhite
                                   6022 ;	.\ecen4350_lcd_v4.c:1266: LCD_string_write(" <A>");
      0019D5 90 55 2C         [24] 6023 	mov	dptr,#___str_16
      0019D8 75 F0 80         [24] 6024 	mov	b,#0x80
      0019DB 12 10 77         [24] 6025 	lcall	_LCD_string_write
                                   6026 ;	.\ecen4350_lcd_v4.c:1267: setColorDefault();
      0019DE 12 16 3B         [24] 6027 	lcall	_setColorDefault
                                   6028 ;	.\ecen4350_lcd_v4.c:1268: LCD_string_write(" MEM CHECK\n");
      0019E1 90 55 31         [24] 6029 	mov	dptr,#___str_17
      0019E4 75 F0 80         [24] 6030 	mov	b,#0x80
      0019E7 12 10 77         [24] 6031 	lcall	_LCD_string_write
                                   6032 ;	.\ecen4350_lcd_v4.c:1270: setCursor(0, 220);
      0019EA 75 6B DC         [24] 6033 	mov	_setCursor_PARM_2,#0xdc
      0019ED 75 6C 00         [24] 6034 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019F0 90 00 00         [24] 6035 	mov	dptr,#0x0000
      0019F3 12 05 5D         [24] 6036 	lcall	_setCursor
                                   6037 ;	.\ecen4350_lcd_v4.c:1271: setColorWhite();
      0019F6 12 16 8B         [24] 6038 	lcall	_setColorWhite
                                   6039 ;	.\ecen4350_lcd_v4.c:1272: LCD_string_write(" <1>");
      0019F9 90 55 3D         [24] 6040 	mov	dptr,#___str_18
      0019FC 75 F0 80         [24] 6041 	mov	b,#0x80
      0019FF 12 10 77         [24] 6042 	lcall	_LCD_string_write
                                   6043 ;	.\ecen4350_lcd_v4.c:1273: setColorDefault();
      001A02 12 16 3B         [24] 6044 	lcall	_setColorDefault
                                   6045 ;	.\ecen4350_lcd_v4.c:1274: LCD_string_write(" UART [Enabled]");
      001A05 90 55 53         [24] 6046 	mov	dptr,#___str_20
      001A08 75 F0 80         [24] 6047 	mov	b,#0x80
      001A0B 12 10 77         [24] 6048 	lcall	_LCD_string_write
                                   6049 ;	.\ecen4350_lcd_v4.c:1275: exit: 
                                   6050 ;	.\ecen4350_lcd_v4.c:1276: return;
                                   6051 ;	.\ecen4350_lcd_v4.c:1277: }
      001A0E 22               [24] 6052 	ret
                                   6053 ;------------------------------------------------------------
                                   6054 ;Allocation info for local variables in function 'dump'
                                   6055 ;------------------------------------------------------------
                                   6056 ;d                         Allocated with name '_dump_d_65536_547'
                                   6057 ;__2621440106              Allocated to registers 
                                   6058 ;__2621440103              Allocated to registers 
                                   6059 ;__2621440104              Allocated to registers 
                                   6060 ;map_address               Allocated to registers 
                                   6061 ;d                         Allocated to registers 
                                   6062 ;__2621440107              Allocated to registers 
                                   6063 ;map_address               Allocated to registers 
                                   6064 ;d                         Allocated to registers 
                                   6065 ;__2621440118              Allocated to registers 
                                   6066 ;__2621440115              Allocated to registers 
                                   6067 ;__2621440112              Allocated to registers 
                                   6068 ;__2621440109              Allocated to registers 
                                   6069 ;__2621440110              Allocated to registers 
                                   6070 ;map_address               Allocated to registers 
                                   6071 ;d                         Allocated to registers 
                                   6072 ;__2621440113              Allocated to registers 
                                   6073 ;map_address               Allocated to registers 
                                   6074 ;d                         Allocated to registers 
                                   6075 ;__2621440116              Allocated to registers 
                                   6076 ;map_address               Allocated to registers 
                                   6077 ;d                         Allocated to registers 
                                   6078 ;__2621440119              Allocated to registers 
                                   6079 ;map_address               Allocated to registers 
                                   6080 ;d                         Allocated to registers 
                                   6081 ;__2621440142              Allocated to registers 
                                   6082 ;__2621440139              Allocated to registers 
                                   6083 ;__2621440136              Allocated to registers 
                                   6084 ;__2621440133              Allocated to registers 
                                   6085 ;__2621440130              Allocated to registers 
                                   6086 ;__2621440127              Allocated to registers 
                                   6087 ;__2621440124              Allocated to registers 
                                   6088 ;__2621440121              Allocated to registers 
                                   6089 ;__2621440122              Allocated to registers 
                                   6090 ;map_address               Allocated to registers 
                                   6091 ;d                         Allocated to registers 
                                   6092 ;__2621440125              Allocated to registers 
                                   6093 ;map_address               Allocated to registers 
                                   6094 ;d                         Allocated to registers 
                                   6095 ;__2621440128              Allocated to registers 
                                   6096 ;map_address               Allocated to registers 
                                   6097 ;d                         Allocated to registers 
                                   6098 ;__2621440131              Allocated to registers 
                                   6099 ;map_address               Allocated to registers 
                                   6100 ;d                         Allocated to registers r3 
                                   6101 ;__2621440134              Allocated to registers 
                                   6102 ;map_address               Allocated to registers 
                                   6103 ;d                         Allocated to registers 
                                   6104 ;__2621440137              Allocated to registers 
                                   6105 ;map_address               Allocated to registers 
                                   6106 ;d                         Allocated to registers 
                                   6107 ;__2621440140              Allocated to registers 
                                   6108 ;map_address               Allocated to registers 
                                   6109 ;d                         Allocated to registers 
                                   6110 ;__2621440143              Allocated to registers 
                                   6111 ;map_address               Allocated to registers 
                                   6112 ;d                         Allocated to registers 
                                   6113 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   6114 ;address                   Allocated with name '_dump_address_65536_547'
                                   6115 ;blockSize                 Allocated to registers r5 
                                   6116 ;blockType                 Allocated to registers r7 
                                   6117 ;exit                      Allocated with name '_dump_exit_65536_547'
                                   6118 ;invalidType               Allocated to registers r5 
                                   6119 ;invalidSize               Allocated to registers r3 
                                   6120 ;------------------------------------------------------------
                                   6121 ;	.\ecen4350_lcd_v4.c:1279: void dump()
                                   6122 ;	-----------------------------------------
                                   6123 ;	 function dump
                                   6124 ;	-----------------------------------------
      001A0F                       6125 _dump:
                                   6126 ;	.\ecen4350_lcd_v4.c:1284: __idata unsigned char blockType = 0;
      001A0F 7F 00            [12] 6127 	mov	r7,#0x00
                                   6128 ;	.\ecen4350_lcd_v4.c:1285: __idata unsigned char exit = 1;
      001A11 78 78            [12] 6129 	mov	r0,#_dump_exit_65536_547
      001A13 76 01            [12] 6130 	mov	@r0,#0x01
                                   6131 ;	.\ecen4350_lcd_v4.c:1286: __idata unsigned char invalidType = 1;
      001A15 7D 01            [12] 6132 	mov	r5,#0x01
                                   6133 ;	.\ecen4350_lcd_v4.c:1287: __idata unsigned char invalidSize = 1;
      001A17 7B 01            [12] 6134 	mov	r3,#0x01
                                   6135 ;	.\ecen4350_lcd_v4.c:1289: clearLCD();
      001A19 C0 07            [24] 6136 	push	ar7
      001A1B C0 05            [24] 6137 	push	ar5
      001A1D C0 03            [24] 6138 	push	ar3
      001A1F 12 0D FA         [24] 6139 	lcall	_clearLCD
                                   6140 ;	.\ecen4350_lcd_v4.c:1292: fillTop(GRAY);
      001A22 90 D6 BA         [24] 6141 	mov	dptr,#0xd6ba
      001A25 12 0C 2D         [24] 6142 	lcall	_fillTop
                                   6143 ;	.\ecen4350_lcd_v4.c:1293: setTextSize(5);
      001A28 75 82 05         [24] 6144 	mov	dpl,#0x05
      001A2B 12 05 77         [24] 6145 	lcall	_setTextSize
                                   6146 ;	.\ecen4350_lcd_v4.c:1294: setColorMenu();
      001A2E 12 16 74         [24] 6147 	lcall	_setColorMenu
                                   6148 ;	.\ecen4350_lcd_v4.c:1295: setCursor(30, 0);
      001A31 E4               [12] 6149 	clr	a
      001A32 F5 6B            [12] 6150 	mov	_setCursor_PARM_2,a
      001A34 F5 6C            [12] 6151 	mov	(_setCursor_PARM_2 + 1),a
      001A36 90 00 1E         [24] 6152 	mov	dptr,#0x001e
      001A39 12 05 5D         [24] 6153 	lcall	_setCursor
                                   6154 ;	.\ecen4350_lcd_v4.c:1296: LCD_string_write("[DUMP]\n");
      001A3C 90 55 63         [24] 6155 	mov	dptr,#___str_21
      001A3F 75 F0 80         [24] 6156 	mov	b,#0x80
      001A42 12 10 77         [24] 6157 	lcall	_LCD_string_write
                                   6158 ;	.\ecen4350_lcd_v4.c:1297: setColorDefault();
      001A45 12 16 3B         [24] 6159 	lcall	_setColorDefault
                                   6160 ;	.\ecen4350_lcd_v4.c:1298: setTextSize(2);
      001A48 75 82 02         [24] 6161 	mov	dpl,#0x02
      001A4B 12 05 77         [24] 6162 	lcall	_setTextSize
                                   6163 ;	.\ecen4350_lcd_v4.c:1299: setCursor(0, 60);
      001A4E 75 6B 3C         [24] 6164 	mov	_setCursor_PARM_2,#0x3c
      001A51 75 6C 00         [24] 6165 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A54 90 00 00         [24] 6166 	mov	dptr,#0x0000
      001A57 12 05 5D         [24] 6167 	lcall	_setCursor
                                   6168 ;	.\ecen4350_lcd_v4.c:1300: LCD_string_write(" Address Location:\n");
      001A5A 90 55 6B         [24] 6169 	mov	dptr,#___str_22
      001A5D 75 F0 80         [24] 6170 	mov	b,#0x80
      001A60 12 10 77         [24] 6171 	lcall	_LCD_string_write
                                   6172 ;	.\ecen4350_lcd_v4.c:1301: setCursor(0, 80);
      001A63 75 6B 50         [24] 6173 	mov	_setCursor_PARM_2,#0x50
      001A66 75 6C 00         [24] 6174 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A69 90 00 00         [24] 6175 	mov	dptr,#0x0000
      001A6C 12 05 5D         [24] 6176 	lcall	_setCursor
                                   6177 ;	.\ecen4350_lcd_v4.c:1302: setColorGray();
      001A6F 12 16 69         [24] 6178 	lcall	_setColorGray
                                   6179 ;	.\ecen4350_lcd_v4.c:1303: LCD_string_write(" 0x____");
      001A72 90 55 7F         [24] 6180 	mov	dptr,#___str_23
      001A75 75 F0 80         [24] 6181 	mov	b,#0x80
      001A78 12 10 77         [24] 6182 	lcall	_LCD_string_write
                                   6183 ;	.\ecen4350_lcd_v4.c:1304: setColorDefault();
      001A7B 12 16 3B         [24] 6184 	lcall	_setColorDefault
                                   6185 ;	.\ecen4350_lcd_v4.c:1305: setCursor(0, 140);
      001A7E 75 6B 8C         [24] 6186 	mov	_setCursor_PARM_2,#0x8c
      001A81 75 6C 00         [24] 6187 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A84 90 00 00         [24] 6188 	mov	dptr,#0x0000
      001A87 12 05 5D         [24] 6189 	lcall	_setCursor
                                   6190 ;	.\ecen4350_lcd_v4.c:1306: LCD_string_write(" Choose Block Type:\n");
      001A8A 90 55 87         [24] 6191 	mov	dptr,#___str_24
      001A8D 75 F0 80         [24] 6192 	mov	b,#0x80
      001A90 12 10 77         [24] 6193 	lcall	_LCD_string_write
                                   6194 ;	.\ecen4350_lcd_v4.c:1307: setCursor(0, 160); 
      001A93 75 6B A0         [24] 6195 	mov	_setCursor_PARM_2,#0xa0
      001A96 75 6C 00         [24] 6196 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A99 90 00 00         [24] 6197 	mov	dptr,#0x0000
      001A9C 12 05 5D         [24] 6198 	lcall	_setCursor
                                   6199 ;	.\ecen4350_lcd_v4.c:1308: setColorGray();
      001A9F 12 16 69         [24] 6200 	lcall	_setColorGray
                                   6201 ;	.\ecen4350_lcd_v4.c:1309: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001AA2 90 55 9C         [24] 6202 	mov	dptr,#___str_25
      001AA5 75 F0 80         [24] 6203 	mov	b,#0x80
      001AA8 12 10 77         [24] 6204 	lcall	_LCD_string_write
                                   6205 ;	.\ecen4350_lcd_v4.c:1310: setCursor(0, 240);
      001AAB 75 6B F0         [24] 6206 	mov	_setCursor_PARM_2,#0xf0
      001AAE 75 6C 00         [24] 6207 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AB1 90 00 00         [24] 6208 	mov	dptr,#0x0000
      001AB4 12 05 5D         [24] 6209 	lcall	_setCursor
                                   6210 ;	.\ecen4350_lcd_v4.c:1311: LCD_string_write(" Input Size:");
      001AB7 90 55 BE         [24] 6211 	mov	dptr,#___str_26
      001ABA 75 F0 80         [24] 6212 	mov	b,#0x80
      001ABD 12 10 77         [24] 6213 	lcall	_LCD_string_write
                                   6214 ;	.\ecen4350_lcd_v4.c:1312: setColorGray();
      001AC0 12 16 69         [24] 6215 	lcall	_setColorGray
                                   6216 ;	.\ecen4350_lcd_v4.c:1313: LCD_string_write(" _");
      001AC3 90 55 CB         [24] 6217 	mov	dptr,#___str_27
      001AC6 75 F0 80         [24] 6218 	mov	b,#0x80
      001AC9 12 10 77         [24] 6219 	lcall	_LCD_string_write
                                   6220 ;	.\ecen4350_lcd_v4.c:1320: setColorSelect();
      001ACC 12 16 46         [24] 6221 	lcall	_setColorSelect
                                   6222 ;	.\ecen4350_lcd_v4.c:1321: setCursor(0, 60);
      001ACF 75 6B 3C         [24] 6223 	mov	_setCursor_PARM_2,#0x3c
      001AD2 75 6C 00         [24] 6224 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AD5 90 00 00         [24] 6225 	mov	dptr,#0x0000
      001AD8 12 05 5D         [24] 6226 	lcall	_setCursor
                                   6227 ;	.\ecen4350_lcd_v4.c:1322: LCD_string_write(" Address Location:");
      001ADB 90 55 CE         [24] 6228 	mov	dptr,#___str_28
      001ADE 75 F0 80         [24] 6229 	mov	b,#0x80
      001AE1 12 10 77         [24] 6230 	lcall	_LCD_string_write
                                   6231 ;	.\ecen4350_lcd_v4.c:1323: setCursor(0, 80);
      001AE4 75 6B 50         [24] 6232 	mov	_setCursor_PARM_2,#0x50
      001AE7 75 6C 00         [24] 6233 	mov	(_setCursor_PARM_2 + 1),#0x00
      001AEA 90 00 00         [24] 6234 	mov	dptr,#0x0000
      001AED 12 05 5D         [24] 6235 	lcall	_setCursor
                                   6236 ;	.\ecen4350_lcd_v4.c:1324: LCD_string_write(" ");
      001AF0 90 55 E1         [24] 6237 	mov	dptr,#___str_29
      001AF3 75 F0 80         [24] 6238 	mov	b,#0x80
      001AF6 12 10 77         [24] 6239 	lcall	_LCD_string_write
                                   6240 ;	.\ecen4350_lcd_v4.c:1325: setColorHighlight1();
      001AF9 12 16 51         [24] 6241 	lcall	_setColorHighlight1
                                   6242 ;	.\ecen4350_lcd_v4.c:1326: LCD_string_write("0x");
      001AFC 90 54 B4         [24] 6243 	mov	dptr,#___str_2
      001AFF 75 F0 80         [24] 6244 	mov	b,#0x80
      001B02 12 10 77         [24] 6245 	lcall	_LCD_string_write
                                   6246 ;	.\ecen4350_lcd_v4.c:1327: address = inputAddress();				// input 16-bit address and store in memory
      001B05 12 16 AC         [24] 6247 	lcall	_inputAddress
      001B08 78 76            [12] 6248 	mov	r0,#_dump_address_65536_547
      001B0A A6 82            [24] 6249 	mov	@r0,dpl
      001B0C 08               [12] 6250 	inc	r0
      001B0D A6 83            [24] 6251 	mov	@r0,dph
      001B0F D0 03            [24] 6252 	pop	ar3
      001B11 D0 05            [24] 6253 	pop	ar5
                                   6254 ;	.\ecen4350_lcd_v4.c:1328: d = (unsigned char __xdata *)(address);
      001B13 78 76            [12] 6255 	mov	r0,#_dump_address_65536_547
      001B15 86 04            [24] 6256 	mov	ar4,@r0
      001B17 08               [12] 6257 	inc	r0
      001B18 86 06            [24] 6258 	mov	ar6,@r0
                                   6259 ;	.\ecen4350_lcd_v4.c:1331: setColorDefault();
      001B1A C0 06            [24] 6260 	push	ar6
      001B1C C0 05            [24] 6261 	push	ar5
      001B1E C0 04            [24] 6262 	push	ar4
      001B20 C0 03            [24] 6263 	push	ar3
      001B22 12 16 3B         [24] 6264 	lcall	_setColorDefault
                                   6265 ;	.\ecen4350_lcd_v4.c:1332: setCursor(0, 60);
      001B25 75 6B 3C         [24] 6266 	mov	_setCursor_PARM_2,#0x3c
      001B28 75 6C 00         [24] 6267 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B2B 90 00 00         [24] 6268 	mov	dptr,#0x0000
      001B2E 12 05 5D         [24] 6269 	lcall	_setCursor
                                   6270 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write(" Address Location:");
      001B31 90 55 CE         [24] 6271 	mov	dptr,#___str_28
      001B34 75 F0 80         [24] 6272 	mov	b,#0x80
      001B37 12 10 77         [24] 6273 	lcall	_LCD_string_write
                                   6274 ;	.\ecen4350_lcd_v4.c:1334: setCursor(0, 80);
      001B3A 75 6B 50         [24] 6275 	mov	_setCursor_PARM_2,#0x50
      001B3D 75 6C 00         [24] 6276 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B40 90 00 00         [24] 6277 	mov	dptr,#0x0000
      001B43 12 05 5D         [24] 6278 	lcall	_setCursor
                                   6279 ;	.\ecen4350_lcd_v4.c:1335: LCD_string_write(" ");
      001B46 90 55 E1         [24] 6280 	mov	dptr,#___str_29
      001B49 75 F0 80         [24] 6281 	mov	b,#0x80
      001B4C 12 10 77         [24] 6282 	lcall	_LCD_string_write
                                   6283 ;	.\ecen4350_lcd_v4.c:1336: setColorHighlight2();
      001B4F 12 16 5D         [24] 6284 	lcall	_setColorHighlight2
                                   6285 ;	.\ecen4350_lcd_v4.c:1337: LCD_string_write("0x");
      001B52 90 54 B4         [24] 6286 	mov	dptr,#___str_2
      001B55 75 F0 80         [24] 6287 	mov	b,#0x80
      001B58 12 10 77         [24] 6288 	lcall	_LCD_string_write
                                   6289 ;	.\ecen4350_lcd_v4.c:1338: print16Hex(address);					// print 16-bit address from stored memory
      001B5B 78 76            [12] 6290 	mov	r0,#_dump_address_65536_547
      001B5D 86 82            [24] 6291 	mov	dpl,@r0
      001B5F 08               [12] 6292 	inc	r0
      001B60 86 83            [24] 6293 	mov	dph,@r0
      001B62 12 15 5F         [24] 6294 	lcall	_print16Hex
                                   6295 ;	.\ecen4350_lcd_v4.c:1341: setColorSelect();
      001B65 12 16 46         [24] 6296 	lcall	_setColorSelect
                                   6297 ;	.\ecen4350_lcd_v4.c:1342: setCursor(0, 140);
      001B68 75 6B 8C         [24] 6298 	mov	_setCursor_PARM_2,#0x8c
      001B6B 75 6C 00         [24] 6299 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B6E 90 00 00         [24] 6300 	mov	dptr,#0x0000
      001B71 12 05 5D         [24] 6301 	lcall	_setCursor
                                   6302 ;	.\ecen4350_lcd_v4.c:1343: LCD_string_write(" Choose Block Type:");
      001B74 90 55 E3         [24] 6303 	mov	dptr,#___str_30
      001B77 75 F0 80         [24] 6304 	mov	b,#0x80
      001B7A 12 10 77         [24] 6305 	lcall	_LCD_string_write
                                   6306 ;	.\ecen4350_lcd_v4.c:1344: setCursor(0, 160); 
      001B7D 75 6B A0         [24] 6307 	mov	_setCursor_PARM_2,#0xa0
      001B80 75 6C 00         [24] 6308 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B83 90 00 00         [24] 6309 	mov	dptr,#0x0000
      001B86 12 05 5D         [24] 6310 	lcall	_setCursor
                                   6311 ;	.\ecen4350_lcd_v4.c:1345: setColorWhite();
      001B89 12 16 8B         [24] 6312 	lcall	_setColorWhite
                                   6313 ;	.\ecen4350_lcd_v4.c:1346: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001B8C 90 55 9C         [24] 6314 	mov	dptr,#___str_25
      001B8F 75 F0 80         [24] 6315 	mov	b,#0x80
      001B92 12 10 77         [24] 6316 	lcall	_LCD_string_write
      001B95 D0 03            [24] 6317 	pop	ar3
      001B97 D0 04            [24] 6318 	pop	ar4
      001B99 D0 05            [24] 6319 	pop	ar5
      001B9B D0 06            [24] 6320 	pop	ar6
      001B9D D0 07            [24] 6321 	pop	ar7
                                   6322 ;	.\ecen4350_lcd_v4.c:1349: while (invalidType) {
      001B9F                       6323 00109$:
      001B9F ED               [12] 6324 	mov	a,r5
      001BA0 70 03            [24] 6325 	jnz	00235$
      001BA2 02 1D 1B         [24] 6326 	ljmp	00153$
      001BA5                       6327 00235$:
                                   6328 ;	.\ecen4350_lcd_v4.c:1350: setCursor(0, 160);
      001BA5 75 6B A0         [24] 6329 	mov	_setCursor_PARM_2,#0xa0
      001BA8 75 6C 00         [24] 6330 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BAB 90 00 00         [24] 6331 	mov	dptr,#0x0000
      001BAE C0 06            [24] 6332 	push	ar6
      001BB0 C0 05            [24] 6333 	push	ar5
      001BB2 C0 04            [24] 6334 	push	ar4
      001BB4 C0 03            [24] 6335 	push	ar3
      001BB6 12 05 5D         [24] 6336 	lcall	_setCursor
                                   6337 ;	.\ecen4350_lcd_v4.c:1351: setColorWhite();
      001BB9 12 16 8B         [24] 6338 	lcall	_setColorWhite
                                   6339 ;	.\ecen4350_lcd_v4.c:1352: LCD_string_write("\n\n");
      001BBC 90 55 F7         [24] 6340 	mov	dptr,#___str_31
      001BBF 75 F0 80         [24] 6341 	mov	b,#0x80
      001BC2 12 10 77         [24] 6342 	lcall	_LCD_string_write
                                   6343 ;	.\ecen4350_lcd_v4.c:1354: blockType = inputBlockType();
      001BC5 12 17 4E         [24] 6344 	lcall	_inputBlockType
      001BC8 AF 82            [24] 6345 	mov	r7,dpl
      001BCA D0 03            [24] 6346 	pop	ar3
      001BCC D0 04            [24] 6347 	pop	ar4
      001BCE D0 05            [24] 6348 	pop	ar5
      001BD0 D0 06            [24] 6349 	pop	ar6
                                   6350 ;	.\ecen4350_lcd_v4.c:1356: if (blockType == 0x1) {
      001BD2 BF 01 5B         [24] 6351 	cjne	r7,#0x01,00102$
                                   6352 ;	.\ecen4350_lcd_v4.c:1357: invalidType = 0;
      001BD5 7D 00            [12] 6353 	mov	r5,#0x00
                                   6354 ;	.\ecen4350_lcd_v4.c:1359: setColorDefault();
      001BD7 C0 07            [24] 6355 	push	ar7
      001BD9 C0 06            [24] 6356 	push	ar6
      001BDB C0 05            [24] 6357 	push	ar5
      001BDD C0 04            [24] 6358 	push	ar4
      001BDF C0 03            [24] 6359 	push	ar3
      001BE1 12 16 3B         [24] 6360 	lcall	_setColorDefault
                                   6361 ;	.\ecen4350_lcd_v4.c:1360: setCursor(0, 140);
      001BE4 75 6B 8C         [24] 6362 	mov	_setCursor_PARM_2,#0x8c
      001BE7 75 6C 00         [24] 6363 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BEA 90 00 00         [24] 6364 	mov	dptr,#0x0000
      001BED 12 05 5D         [24] 6365 	lcall	_setCursor
                                   6366 ;	.\ecen4350_lcd_v4.c:1361: LCD_string_write(" Choose Block Type:");
      001BF0 90 55 E3         [24] 6367 	mov	dptr,#___str_30
      001BF3 75 F0 80         [24] 6368 	mov	b,#0x80
      001BF6 12 10 77         [24] 6369 	lcall	_LCD_string_write
                                   6370 ;	.\ecen4350_lcd_v4.c:1362: setCursor(0, 160);
      001BF9 75 6B A0         [24] 6371 	mov	_setCursor_PARM_2,#0xa0
      001BFC 75 6C 00         [24] 6372 	mov	(_setCursor_PARM_2 + 1),#0x00
      001BFF 90 00 00         [24] 6373 	mov	dptr,#0x0000
      001C02 12 05 5D         [24] 6374 	lcall	_setCursor
                                   6375 ;	.\ecen4350_lcd_v4.c:1363: LCD_string_write("  ");
      001C05 90 55 FA         [24] 6376 	mov	dptr,#___str_32
      001C08 75 F0 80         [24] 6377 	mov	b,#0x80
      001C0B 12 10 77         [24] 6378 	lcall	_LCD_string_write
                                   6379 ;	.\ecen4350_lcd_v4.c:1364: setColorHighlight2();
      001C0E 12 16 5D         [24] 6380 	lcall	_setColorHighlight2
                                   6381 ;	.\ecen4350_lcd_v4.c:1365: LCD_string_write("<1> BYTE\n");
      001C11 90 55 FD         [24] 6382 	mov	dptr,#___str_33
      001C14 75 F0 80         [24] 6383 	mov	b,#0x80
      001C17 12 10 77         [24] 6384 	lcall	_LCD_string_write
                                   6385 ;	.\ecen4350_lcd_v4.c:1366: setColorGray();
      001C1A 12 16 69         [24] 6386 	lcall	_setColorGray
                                   6387 ;	.\ecen4350_lcd_v4.c:1367: LCD_string_write("\n\n                \n                ");
      001C1D 90 56 07         [24] 6388 	mov	dptr,#___str_34
      001C20 75 F0 80         [24] 6389 	mov	b,#0x80
      001C23 12 10 77         [24] 6390 	lcall	_LCD_string_write
      001C26 D0 03            [24] 6391 	pop	ar3
      001C28 D0 04            [24] 6392 	pop	ar4
      001C2A D0 05            [24] 6393 	pop	ar5
      001C2C D0 06            [24] 6394 	pop	ar6
      001C2E D0 07            [24] 6395 	pop	ar7
      001C30                       6396 00102$:
                                   6397 ;	.\ecen4350_lcd_v4.c:1368: } if (blockType == 0x2) {
      001C30 BF 02 5E         [24] 6398 	cjne	r7,#0x02,00104$
                                   6399 ;	.\ecen4350_lcd_v4.c:1369: invalidType = 0;
      001C33 7D 00            [12] 6400 	mov	r5,#0x00
                                   6401 ;	.\ecen4350_lcd_v4.c:1371: setColorDefault();
      001C35 C0 07            [24] 6402 	push	ar7
      001C37 C0 06            [24] 6403 	push	ar6
      001C39 C0 05            [24] 6404 	push	ar5
      001C3B C0 04            [24] 6405 	push	ar4
      001C3D C0 03            [24] 6406 	push	ar3
      001C3F 12 16 3B         [24] 6407 	lcall	_setColorDefault
                                   6408 ;	.\ecen4350_lcd_v4.c:1372: setCursor(0, 140);
      001C42 75 6B 8C         [24] 6409 	mov	_setCursor_PARM_2,#0x8c
      001C45 75 6C 00         [24] 6410 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C48 90 00 00         [24] 6411 	mov	dptr,#0x0000
      001C4B 12 05 5D         [24] 6412 	lcall	_setCursor
                                   6413 ;	.\ecen4350_lcd_v4.c:1373: LCD_string_write(" Choose Block Type:");
      001C4E 90 55 E3         [24] 6414 	mov	dptr,#___str_30
      001C51 75 F0 80         [24] 6415 	mov	b,#0x80
      001C54 12 10 77         [24] 6416 	lcall	_LCD_string_write
                                   6417 ;	.\ecen4350_lcd_v4.c:1374: setCursor(0, 160);
      001C57 75 6B A0         [24] 6418 	mov	_setCursor_PARM_2,#0xa0
      001C5A 75 6C 00         [24] 6419 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C5D 90 00 00         [24] 6420 	mov	dptr,#0x0000
      001C60 12 05 5D         [24] 6421 	lcall	_setCursor
                                   6422 ;	.\ecen4350_lcd_v4.c:1375: setColorGray();
      001C63 12 16 69         [24] 6423 	lcall	_setColorGray
                                   6424 ;	.\ecen4350_lcd_v4.c:1376: LCD_string_write("\n  ");
      001C66 90 56 2B         [24] 6425 	mov	dptr,#___str_35
      001C69 75 F0 80         [24] 6426 	mov	b,#0x80
      001C6C 12 10 77         [24] 6427 	lcall	_LCD_string_write
                                   6428 ;	.\ecen4350_lcd_v4.c:1377: setColorHighlight2();
      001C6F 12 16 5D         [24] 6429 	lcall	_setColorHighlight2
                                   6430 ;	.\ecen4350_lcd_v4.c:1378: LCD_string_write("<2> WORD\n");
      001C72 90 56 2F         [24] 6431 	mov	dptr,#___str_36
      001C75 75 F0 80         [24] 6432 	mov	b,#0x80
      001C78 12 10 77         [24] 6433 	lcall	_LCD_string_write
                                   6434 ;	.\ecen4350_lcd_v4.c:1379: setColorGray();
      001C7B 12 16 69         [24] 6435 	lcall	_setColorGray
                                   6436 ;	.\ecen4350_lcd_v4.c:1380: LCD_string_write("\n                \n                ");
      001C7E 90 56 39         [24] 6437 	mov	dptr,#___str_37
      001C81 75 F0 80         [24] 6438 	mov	b,#0x80
      001C84 12 10 77         [24] 6439 	lcall	_LCD_string_write
      001C87 D0 03            [24] 6440 	pop	ar3
      001C89 D0 04            [24] 6441 	pop	ar4
      001C8B D0 05            [24] 6442 	pop	ar5
      001C8D D0 06            [24] 6443 	pop	ar6
      001C8F D0 07            [24] 6444 	pop	ar7
      001C91                       6445 00104$:
                                   6446 ;	.\ecen4350_lcd_v4.c:1381: } if (blockType == 0x4) {
      001C91 BF 04 5E         [24] 6447 	cjne	r7,#0x04,00106$
                                   6448 ;	.\ecen4350_lcd_v4.c:1382: invalidType = 0;
      001C94 7D 00            [12] 6449 	mov	r5,#0x00
                                   6450 ;	.\ecen4350_lcd_v4.c:1384: setColorDefault();
      001C96 C0 07            [24] 6451 	push	ar7
      001C98 C0 06            [24] 6452 	push	ar6
      001C9A C0 05            [24] 6453 	push	ar5
      001C9C C0 04            [24] 6454 	push	ar4
      001C9E C0 03            [24] 6455 	push	ar3
      001CA0 12 16 3B         [24] 6456 	lcall	_setColorDefault
                                   6457 ;	.\ecen4350_lcd_v4.c:1385: setCursor(0, 140);
      001CA3 75 6B 8C         [24] 6458 	mov	_setCursor_PARM_2,#0x8c
      001CA6 75 6C 00         [24] 6459 	mov	(_setCursor_PARM_2 + 1),#0x00
      001CA9 90 00 00         [24] 6460 	mov	dptr,#0x0000
      001CAC 12 05 5D         [24] 6461 	lcall	_setCursor
                                   6462 ;	.\ecen4350_lcd_v4.c:1386: LCD_string_write(" Choose Block Type:");
      001CAF 90 55 E3         [24] 6463 	mov	dptr,#___str_30
      001CB2 75 F0 80         [24] 6464 	mov	b,#0x80
      001CB5 12 10 77         [24] 6465 	lcall	_LCD_string_write
                                   6466 ;	.\ecen4350_lcd_v4.c:1387: setCursor(0, 160);
      001CB8 75 6B A0         [24] 6467 	mov	_setCursor_PARM_2,#0xa0
      001CBB 75 6C 00         [24] 6468 	mov	(_setCursor_PARM_2 + 1),#0x00
      001CBE 90 00 00         [24] 6469 	mov	dptr,#0x0000
      001CC1 12 05 5D         [24] 6470 	lcall	_setCursor
                                   6471 ;	.\ecen4350_lcd_v4.c:1388: setColorGray();
      001CC4 12 16 69         [24] 6472 	lcall	_setColorGray
                                   6473 ;	.\ecen4350_lcd_v4.c:1389: LCD_string_write("\n\n  ");
      001CC7 90 56 5C         [24] 6474 	mov	dptr,#___str_38
      001CCA 75 F0 80         [24] 6475 	mov	b,#0x80
      001CCD 12 10 77         [24] 6476 	lcall	_LCD_string_write
                                   6477 ;	.\ecen4350_lcd_v4.c:1390: setColorHighlight2();
      001CD0 12 16 5D         [24] 6478 	lcall	_setColorHighlight2
                                   6479 ;	.\ecen4350_lcd_v4.c:1391: LCD_string_write("<4> DWORD");
      001CD3 90 56 61         [24] 6480 	mov	dptr,#___str_39
      001CD6 75 F0 80         [24] 6481 	mov	b,#0x80
      001CD9 12 10 77         [24] 6482 	lcall	_LCD_string_write
                                   6483 ;	.\ecen4350_lcd_v4.c:1392: setColorGray();
      001CDC 12 16 69         [24] 6484 	lcall	_setColorGray
                                   6485 ;	.\ecen4350_lcd_v4.c:1393: LCD_string_write("\n                \n                ");
      001CDF 90 56 39         [24] 6486 	mov	dptr,#___str_37
      001CE2 75 F0 80         [24] 6487 	mov	b,#0x80
      001CE5 12 10 77         [24] 6488 	lcall	_LCD_string_write
      001CE8 D0 03            [24] 6489 	pop	ar3
      001CEA D0 04            [24] 6490 	pop	ar4
      001CEC D0 05            [24] 6491 	pop	ar5
      001CEE D0 06            [24] 6492 	pop	ar6
      001CF0 D0 07            [24] 6493 	pop	ar7
      001CF2                       6494 00106$:
                                   6495 ;	.\ecen4350_lcd_v4.c:1395: if (invalidType) {
      001CF2 ED               [12] 6496 	mov	a,r5
      001CF3 70 03            [24] 6497 	jnz	00242$
      001CF5 02 1B 9F         [24] 6498 	ljmp	00109$
      001CF8                       6499 00242$:
                                   6500 ;	.\ecen4350_lcd_v4.c:1396: setColorRed();
      001CF8 C0 07            [24] 6501 	push	ar7
      001CFA C0 06            [24] 6502 	push	ar6
      001CFC C0 05            [24] 6503 	push	ar5
      001CFE C0 04            [24] 6504 	push	ar4
      001D00 C0 03            [24] 6505 	push	ar3
      001D02 12 16 80         [24] 6506 	lcall	_setColorRed
                                   6507 ;	.\ecen4350_lcd_v4.c:1397: LCD_string_write("\n  Input Error\n  Try Again");
      001D05 90 56 6B         [24] 6508 	mov	dptr,#___str_40
      001D08 75 F0 80         [24] 6509 	mov	b,#0x80
      001D0B 12 10 77         [24] 6510 	lcall	_LCD_string_write
      001D0E D0 03            [24] 6511 	pop	ar3
      001D10 D0 04            [24] 6512 	pop	ar4
      001D12 D0 05            [24] 6513 	pop	ar5
      001D14 D0 06            [24] 6514 	pop	ar6
      001D16 D0 07            [24] 6515 	pop	ar7
      001D18 02 1B 9F         [24] 6516 	ljmp	00109$
                                   6517 ;	.\ecen4350_lcd_v4.c:1403: while (invalidSize)
      001D1B                       6518 00153$:
      001D1B                       6519 00115$:
      001D1B EB               [12] 6520 	mov	a,r3
      001D1C 70 03            [24] 6521 	jnz	00243$
      001D1E 02 1E 16         [24] 6522 	ljmp	00117$
      001D21                       6523 00243$:
                                   6524 ;	.\ecen4350_lcd_v4.c:1406: setCursor(0, 240);
      001D21 75 6B F0         [24] 6525 	mov	_setCursor_PARM_2,#0xf0
      001D24 75 6C 00         [24] 6526 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D27 90 00 00         [24] 6527 	mov	dptr,#0x0000
      001D2A C0 07            [24] 6528 	push	ar7
      001D2C C0 06            [24] 6529 	push	ar6
      001D2E C0 04            [24] 6530 	push	ar4
      001D30 C0 03            [24] 6531 	push	ar3
      001D32 12 05 5D         [24] 6532 	lcall	_setCursor
                                   6533 ;	.\ecen4350_lcd_v4.c:1407: setColorSelect();
      001D35 12 16 46         [24] 6534 	lcall	_setColorSelect
                                   6535 ;	.\ecen4350_lcd_v4.c:1408: LCD_string_write(" Input Size: ");
      001D38 90 56 86         [24] 6536 	mov	dptr,#___str_41
      001D3B 75 F0 80         [24] 6537 	mov	b,#0x80
      001D3E 12 10 77         [24] 6538 	lcall	_LCD_string_write
                                   6539 ;	.\ecen4350_lcd_v4.c:1409: setColorHighlight1();
      001D41 12 16 51         [24] 6540 	lcall	_setColorHighlight1
                                   6541 ;	.\ecen4350_lcd_v4.c:1410: selection = keyDetect();
      001D44 12 11 95         [24] 6542 	lcall	_keyDetect
      001D47 AD 82            [24] 6543 	mov	r5,dpl
      001D49 78 71            [12] 6544 	mov	r0,#_selection
      001D4B A6 05            [24] 6545 	mov	@r0,ar5
                                   6546 ;	.\ecen4350_lcd_v4.c:1411: write(selection);
      001D4D 8D 82            [24] 6547 	mov	dpl,r5
      001D4F 12 10 11         [24] 6548 	lcall	_write
                                   6549 ;	.\ecen4350_lcd_v4.c:1412: blockSize = ASCIItoHex(selection);
      001D52 78 71            [12] 6550 	mov	r0,#_selection
      001D54 86 82            [24] 6551 	mov	dpl,@r0
      001D56 12 14 03         [24] 6552 	lcall	_ASCIItoHex
      001D59 AD 82            [24] 6553 	mov	r5,dpl
      001D5B D0 03            [24] 6554 	pop	ar3
      001D5D D0 04            [24] 6555 	pop	ar4
                                   6556 ;	.\ecen4350_lcd_v4.c:1413: setColorDefault();
      001D5F C0 05            [24] 6557 	push	ar5
      001D61 C0 04            [24] 6558 	push	ar4
      001D63 C0 03            [24] 6559 	push	ar3
      001D65 12 16 3B         [24] 6560 	lcall	_setColorDefault
      001D68 D0 03            [24] 6561 	pop	ar3
      001D6A D0 04            [24] 6562 	pop	ar4
      001D6C D0 05            [24] 6563 	pop	ar5
      001D6E D0 06            [24] 6564 	pop	ar6
      001D70 D0 07            [24] 6565 	pop	ar7
                                   6566 ;	.\ecen4350_lcd_v4.c:1415: if (blockSize != blockType) {
      001D72 ED               [12] 6567 	mov	a,r5
      001D73 B5 07 02         [24] 6568 	cjne	a,ar7,00244$
      001D76 80 4F            [24] 6569 	sjmp	00113$
      001D78                       6570 00244$:
                                   6571 ;	.\ecen4350_lcd_v4.c:1416: setColorSelect();
      001D78 C0 07            [24] 6572 	push	ar7
      001D7A C0 06            [24] 6573 	push	ar6
      001D7C C0 04            [24] 6574 	push	ar4
      001D7E C0 03            [24] 6575 	push	ar3
      001D80 12 16 46         [24] 6576 	lcall	_setColorSelect
                                   6577 ;	.\ecen4350_lcd_v4.c:1417: LCD_string_write(" Input Size:");
      001D83 90 55 BE         [24] 6578 	mov	dptr,#___str_26
      001D86 75 F0 80         [24] 6579 	mov	b,#0x80
      001D89 12 10 77         [24] 6580 	lcall	_LCD_string_write
                                   6581 ;	.\ecen4350_lcd_v4.c:1418: setColorGray();
      001D8C 12 16 69         [24] 6582 	lcall	_setColorGray
                                   6583 ;	.\ecen4350_lcd_v4.c:1419: LCD_string_write(" _");
      001D8F 90 55 CB         [24] 6584 	mov	dptr,#___str_27
      001D92 75 F0 80         [24] 6585 	mov	b,#0x80
      001D95 12 10 77         [24] 6586 	lcall	_LCD_string_write
                                   6587 ;	.\ecen4350_lcd_v4.c:1420: setCursor(0,260);
      001D98 75 6B 04         [24] 6588 	mov	_setCursor_PARM_2,#0x04
      001D9B 75 6C 01         [24] 6589 	mov	(_setCursor_PARM_2 + 1),#0x01
      001D9E 90 00 00         [24] 6590 	mov	dptr,#0x0000
      001DA1 12 05 5D         [24] 6591 	lcall	_setCursor
                                   6592 ;	.\ecen4350_lcd_v4.c:1421: setColorRed();
      001DA4 12 16 80         [24] 6593 	lcall	_setColorRed
                                   6594 ;	.\ecen4350_lcd_v4.c:1422: LCD_string_write(" Mismatch Error\n Try Again");
      001DA7 90 56 94         [24] 6595 	mov	dptr,#___str_42
      001DAA 75 F0 80         [24] 6596 	mov	b,#0x80
      001DAD 12 10 77         [24] 6597 	lcall	_LCD_string_write
                                   6598 ;	.\ecen4350_lcd_v4.c:1423: setCursor(0, 240);
      001DB0 75 6B F0         [24] 6599 	mov	_setCursor_PARM_2,#0xf0
      001DB3 75 6C 00         [24] 6600 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DB6 90 00 00         [24] 6601 	mov	dptr,#0x0000
      001DB9 12 05 5D         [24] 6602 	lcall	_setCursor
      001DBC D0 03            [24] 6603 	pop	ar3
      001DBE D0 04            [24] 6604 	pop	ar4
      001DC0 D0 06            [24] 6605 	pop	ar6
      001DC2 D0 07            [24] 6606 	pop	ar7
      001DC4 02 1D 1B         [24] 6607 	ljmp	00115$
      001DC7                       6608 00113$:
                                   6609 ;	.\ecen4350_lcd_v4.c:1425: setCursor(0, 240);
      001DC7 75 6B F0         [24] 6610 	mov	_setCursor_PARM_2,#0xf0
      001DCA 75 6C 00         [24] 6611 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DCD 90 00 00         [24] 6612 	mov	dptr,#0x0000
      001DD0 C0 07            [24] 6613 	push	ar7
      001DD2 C0 06            [24] 6614 	push	ar6
      001DD4 C0 04            [24] 6615 	push	ar4
      001DD6 12 05 5D         [24] 6616 	lcall	_setCursor
                                   6617 ;	.\ecen4350_lcd_v4.c:1426: setColorDefault();
      001DD9 12 16 3B         [24] 6618 	lcall	_setColorDefault
                                   6619 ;	.\ecen4350_lcd_v4.c:1427: LCD_string_write(" Input Size: ");
      001DDC 90 56 86         [24] 6620 	mov	dptr,#___str_41
      001DDF 75 F0 80         [24] 6621 	mov	b,#0x80
      001DE2 12 10 77         [24] 6622 	lcall	_LCD_string_write
                                   6623 ;	.\ecen4350_lcd_v4.c:1428: setColorHighlight2();
      001DE5 12 16 5D         [24] 6624 	lcall	_setColorHighlight2
                                   6625 ;	.\ecen4350_lcd_v4.c:1429: write(selection);
      001DE8 78 71            [12] 6626 	mov	r0,#_selection
      001DEA 86 82            [24] 6627 	mov	dpl,@r0
      001DEC 12 10 11         [24] 6628 	lcall	_write
                                   6629 ;	.\ecen4350_lcd_v4.c:1430: invalidSize = 0;
      001DEF 7B 00            [12] 6630 	mov	r3,#0x00
                                   6631 ;	.\ecen4350_lcd_v4.c:1431: setCursor(0,260);
      001DF1 75 6B 04         [24] 6632 	mov	_setCursor_PARM_2,#0x04
      001DF4 75 6C 01         [24] 6633 	mov	(_setCursor_PARM_2 + 1),#0x01
      001DF7 90 00 00         [24] 6634 	mov	dptr,#0x0000
      001DFA C0 03            [24] 6635 	push	ar3
      001DFC 12 05 5D         [24] 6636 	lcall	_setCursor
                                   6637 ;	.\ecen4350_lcd_v4.c:1432: setColorGreen();
      001DFF 12 16 96         [24] 6638 	lcall	_setColorGreen
                                   6639 ;	.\ecen4350_lcd_v4.c:1433: LCD_string_write(" Match Confirmed\n                ");
      001E02 90 56 AF         [24] 6640 	mov	dptr,#___str_43
      001E05 75 F0 80         [24] 6641 	mov	b,#0x80
      001E08 12 10 77         [24] 6642 	lcall	_LCD_string_write
      001E0B D0 03            [24] 6643 	pop	ar3
      001E0D D0 04            [24] 6644 	pop	ar4
      001E0F D0 06            [24] 6645 	pop	ar6
      001E11 D0 07            [24] 6646 	pop	ar7
      001E13 02 1D 1B         [24] 6647 	ljmp	00115$
      001E16                       6648 00117$:
                                   6649 ;	.\ecen4350_lcd_v4.c:1437: delay(40);
      001E16 90 00 28         [24] 6650 	mov	dptr,#0x0028
      001E19 C0 07            [24] 6651 	push	ar7
      001E1B C0 06            [24] 6652 	push	ar6
      001E1D C0 04            [24] 6653 	push	ar4
      001E1F 12 01 87         [24] 6654 	lcall	_delay
                                   6655 ;	.\ecen4350_lcd_v4.c:1438: clearLCD();
      001E22 12 0D FA         [24] 6656 	lcall	_clearLCD
                                   6657 ;	.\ecen4350_lcd_v4.c:1439: fillTop(GRAY);
      001E25 90 D6 BA         [24] 6658 	mov	dptr,#0xd6ba
      001E28 12 0C 2D         [24] 6659 	lcall	_fillTop
                                   6660 ;	.\ecen4350_lcd_v4.c:1446: setTextSize(5);
      001E2B 75 82 05         [24] 6661 	mov	dpl,#0x05
      001E2E 12 05 77         [24] 6662 	lcall	_setTextSize
                                   6663 ;	.\ecen4350_lcd_v4.c:1447: setColorMenu();
      001E31 12 16 74         [24] 6664 	lcall	_setColorMenu
                                   6665 ;	.\ecen4350_lcd_v4.c:1448: setCursor(30, 0);
      001E34 E4               [12] 6666 	clr	a
      001E35 F5 6B            [12] 6667 	mov	_setCursor_PARM_2,a
      001E37 F5 6C            [12] 6668 	mov	(_setCursor_PARM_2 + 1),a
      001E39 90 00 1E         [24] 6669 	mov	dptr,#0x001e
      001E3C 12 05 5D         [24] 6670 	lcall	_setCursor
                                   6671 ;	.\ecen4350_lcd_v4.c:1449: LCD_string_write("[DUMP]\n");
      001E3F 90 55 63         [24] 6672 	mov	dptr,#___str_21
      001E42 75 F0 80         [24] 6673 	mov	b,#0x80
      001E45 12 10 77         [24] 6674 	lcall	_LCD_string_write
                                   6675 ;	.\ecen4350_lcd_v4.c:1450: setColorDefault();
      001E48 12 16 3B         [24] 6676 	lcall	_setColorDefault
      001E4B D0 04            [24] 6677 	pop	ar4
      001E4D D0 06            [24] 6678 	pop	ar6
      001E4F D0 07            [24] 6679 	pop	ar7
                                   6680 ;	.\ecen4350_lcd_v4.c:1452: while (exit) {
      001E51 BF 01 03         [24] 6681 	cjne	r7,#0x01,00245$
      001E54 EF               [12] 6682 	mov	a,r7
      001E55 80 01            [24] 6683 	sjmp	00246$
      001E57                       6684 00245$:
      001E57 E4               [12] 6685 	clr	a
      001E58                       6686 00246$:
      001E58 FD               [12] 6687 	mov	r5,a
      001E59 E4               [12] 6688 	clr	a
      001E5A BF 02 01         [24] 6689 	cjne	r7,#0x02,00247$
      001E5D 04               [12] 6690 	inc	a
      001E5E                       6691 00247$:
      001E5E F5 5A            [12] 6692 	mov	_dump_sloc0_1_0,a
      001E60 E4               [12] 6693 	clr	a
      001E61 BF 04 01         [24] 6694 	cjne	r7,#0x04,00249$
      001E64 04               [12] 6695 	inc	a
      001E65                       6696 00249$:
      001E65 FF               [12] 6697 	mov	r7,a
      001E66                       6698 00126$:
      001E66 78 78            [12] 6699 	mov	r0,#_dump_exit_65536_547
      001E68 E6               [12] 6700 	mov	a,@r0
      001E69 70 01            [24] 6701 	jnz	00251$
      001E6B 22               [24] 6702 	ret
      001E6C                       6703 00251$:
                                   6704 ;	.\ecen4350_lcd_v4.c:1453: setTextSize(2);
      001E6C 75 82 02         [24] 6705 	mov	dpl,#0x02
      001E6F C0 07            [24] 6706 	push	ar7
      001E71 C0 06            [24] 6707 	push	ar6
      001E73 C0 05            [24] 6708 	push	ar5
      001E75 C0 04            [24] 6709 	push	ar4
      001E77 12 05 77         [24] 6710 	lcall	_setTextSize
                                   6711 ;	.\ecen4350_lcd_v4.c:1454: setColorWhite();
      001E7A 12 16 8B         [24] 6712 	lcall	_setColorWhite
                                   6713 ;	.\ecen4350_lcd_v4.c:1455: setCursor(0, 60);
      001E7D 75 6B 3C         [24] 6714 	mov	_setCursor_PARM_2,#0x3c
      001E80 75 6C 00         [24] 6715 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E83 90 00 00         [24] 6716 	mov	dptr,#0x0000
      001E86 12 05 5D         [24] 6717 	lcall	_setCursor
                                   6718 ;	.\ecen4350_lcd_v4.c:1456: LCD_string_write(" Address:");
      001E89 90 56 D1         [24] 6719 	mov	dptr,#___str_44
      001E8C 75 F0 80         [24] 6720 	mov	b,#0x80
      001E8F 12 10 77         [24] 6721 	lcall	_LCD_string_write
                                   6722 ;	.\ecen4350_lcd_v4.c:1457: setColorDefault();
      001E92 12 16 3B         [24] 6723 	lcall	_setColorDefault
                                   6724 ;	.\ecen4350_lcd_v4.c:1458: setCursor(0, 80);
      001E95 75 6B 50         [24] 6725 	mov	_setCursor_PARM_2,#0x50
      001E98 75 6C 00         [24] 6726 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E9B 90 00 00         [24] 6727 	mov	dptr,#0x0000
      001E9E 12 05 5D         [24] 6728 	lcall	_setCursor
                                   6729 ;	.\ecen4350_lcd_v4.c:1459: LCD_string_write(" 0x");
      001EA1 90 56 DB         [24] 6730 	mov	dptr,#___str_45
      001EA4 75 F0 80         [24] 6731 	mov	b,#0x80
      001EA7 12 10 77         [24] 6732 	lcall	_LCD_string_write
                                   6733 ;	.\ecen4350_lcd_v4.c:1460: print16Hex(address);
      001EAA 78 76            [12] 6734 	mov	r0,#_dump_address_65536_547
      001EAC 86 82            [24] 6735 	mov	dpl,@r0
      001EAE 08               [12] 6736 	inc	r0
      001EAF 86 83            [24] 6737 	mov	dph,@r0
      001EB1 12 15 5F         [24] 6738 	lcall	_print16Hex
      001EB4 D0 04            [24] 6739 	pop	ar4
      001EB6 D0 05            [24] 6740 	pop	ar5
      001EB8 D0 06            [24] 6741 	pop	ar6
      001EBA D0 07            [24] 6742 	pop	ar7
                                   6743 ;	.\ecen4350_lcd_v4.c:1461: if (blockType == 0x1)
      001EBC ED               [12] 6744 	mov	a,r5
      001EBD 70 03            [24] 6745 	jnz	00252$
      001EBF 02 1F 84         [24] 6746 	ljmp	00119$
      001EC2                       6747 00252$:
                                   6748 ;	.\ecen4350_lcd_v4.c:1463: setCursor(0, 120);
      001EC2 75 6B 78         [24] 6749 	mov	_setCursor_PARM_2,#0x78
      001EC5 75 6C 00         [24] 6750 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EC8 90 00 00         [24] 6751 	mov	dptr,#0x0000
      001ECB C0 07            [24] 6752 	push	ar7
      001ECD C0 06            [24] 6753 	push	ar6
      001ECF C0 05            [24] 6754 	push	ar5
      001ED1 C0 04            [24] 6755 	push	ar4
      001ED3 12 05 5D         [24] 6756 	lcall	_setCursor
                                   6757 ;	.\ecen4350_lcd_v4.c:1464: setColorWhite();
      001ED6 12 16 8B         [24] 6758 	lcall	_setColorWhite
                                   6759 ;	.\ecen4350_lcd_v4.c:1465: LCD_string_write(" Hex Data:");
      001ED9 90 56 DF         [24] 6760 	mov	dptr,#___str_46
      001EDC 75 F0 80         [24] 6761 	mov	b,#0x80
      001EDF 12 10 77         [24] 6762 	lcall	_LCD_string_write
                                   6763 ;	.\ecen4350_lcd_v4.c:1466: setColorDefault();
      001EE2 12 16 3B         [24] 6764 	lcall	_setColorDefault
                                   6765 ;	.\ecen4350_lcd_v4.c:1467: setCursor(10, 140);
      001EE5 75 6B 8C         [24] 6766 	mov	_setCursor_PARM_2,#0x8c
      001EE8 75 6C 00         [24] 6767 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EEB 90 00 0A         [24] 6768 	mov	dptr,#0x000a
      001EEE 12 05 5D         [24] 6769 	lcall	_setCursor
      001EF1 D0 04            [24] 6770 	pop	ar4
      001EF3 D0 05            [24] 6771 	pop	ar5
      001EF5 D0 06            [24] 6772 	pop	ar6
                                   6773 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6774 ;	assignBit
      001EF7 C2 B5            [12] 6775 	clr	_P3_5
                                   6776 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001EF9 8C 82            [24] 6777 	mov	dpl,r4
      001EFB 8E 83            [24] 6778 	mov	dph,r6
      001EFD E0               [24] 6779 	movx	a,@dptr
      001EFE F5 82            [12] 6780 	mov	dpl,a
                                   6781 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6782 ;	assignBit
      001F00 D2 B5            [12] 6783 	setb	_P3_5
                                   6784 ;	.\ecen4350_lcd_v4.c:1468: print8Hex(ramRead8(d));
      001F02 C0 06            [24] 6785 	push	ar6
      001F04 C0 05            [24] 6786 	push	ar5
      001F06 C0 04            [24] 6787 	push	ar4
      001F08 12 15 48         [24] 6788 	lcall	_print8Hex
                                   6789 ;	.\ecen4350_lcd_v4.c:1470: setCursor(0, 180);
      001F0B 75 6B B4         [24] 6790 	mov	_setCursor_PARM_2,#0xb4
      001F0E 75 6C 00         [24] 6791 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F11 90 00 00         [24] 6792 	mov	dptr,#0x0000
      001F14 12 05 5D         [24] 6793 	lcall	_setCursor
                                   6794 ;	.\ecen4350_lcd_v4.c:1471: setColorWhite();
      001F17 12 16 8B         [24] 6795 	lcall	_setColorWhite
                                   6796 ;	.\ecen4350_lcd_v4.c:1472: LCD_string_write(" ASCII Data:");
      001F1A 90 56 EA         [24] 6797 	mov	dptr,#___str_47
      001F1D 75 F0 80         [24] 6798 	mov	b,#0x80
      001F20 12 10 77         [24] 6799 	lcall	_LCD_string_write
                                   6800 ;	.\ecen4350_lcd_v4.c:1473: setColorDefault();
      001F23 12 16 3B         [24] 6801 	lcall	_setColorDefault
                                   6802 ;	.\ecen4350_lcd_v4.c:1474: setCursor(10, 200);
      001F26 75 6B C8         [24] 6803 	mov	_setCursor_PARM_2,#0xc8
      001F29 75 6C 00         [24] 6804 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F2C 90 00 0A         [24] 6805 	mov	dptr,#0x000a
      001F2F 12 05 5D         [24] 6806 	lcall	_setCursor
      001F32 D0 04            [24] 6807 	pop	ar4
      001F34 D0 05            [24] 6808 	pop	ar5
      001F36 D0 06            [24] 6809 	pop	ar6
                                   6810 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6811 ;	assignBit
      001F38 C2 B5            [12] 6812 	clr	_P3_5
                                   6813 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001F3A 8C 82            [24] 6814 	mov	dpl,r4
      001F3C 8E 83            [24] 6815 	mov	dph,r6
      001F3E E0               [24] 6816 	movx	a,@dptr
      001F3F F5 82            [12] 6817 	mov	dpl,a
                                   6818 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6819 ;	assignBit
      001F41 D2 B5            [12] 6820 	setb	_P3_5
                                   6821 ;	.\ecen4350_lcd_v4.c:1475: print8ASCII(ramRead8(d));
      001F43 C0 06            [24] 6822 	push	ar6
      001F45 C0 05            [24] 6823 	push	ar5
      001F47 C0 04            [24] 6824 	push	ar4
      001F49 12 15 CA         [24] 6825 	lcall	_print8ASCII
                                   6826 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 240);
      001F4C 75 6B F0         [24] 6827 	mov	_setCursor_PARM_2,#0xf0
      001F4F 75 6C 00         [24] 6828 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F52 90 00 00         [24] 6829 	mov	dptr,#0x0000
      001F55 12 05 5D         [24] 6830 	lcall	_setCursor
                                   6831 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      001F58 12 16 8B         [24] 6832 	lcall	_setColorWhite
                                   6833 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" Data Type:");
      001F5B 90 56 F7         [24] 6834 	mov	dptr,#___str_48
      001F5E 75 F0 80         [24] 6835 	mov	b,#0x80
      001F61 12 10 77         [24] 6836 	lcall	_LCD_string_write
                                   6837 ;	.\ecen4350_lcd_v4.c:1480: setCursor(0, 260);
      001F64 75 6B 04         [24] 6838 	mov	_setCursor_PARM_2,#0x04
      001F67 75 6C 01         [24] 6839 	mov	(_setCursor_PARM_2 + 1),#0x01
      001F6A 90 00 00         [24] 6840 	mov	dptr,#0x0000
      001F6D 12 05 5D         [24] 6841 	lcall	_setCursor
                                   6842 ;	.\ecen4350_lcd_v4.c:1481: setColorDefault();
      001F70 12 16 3B         [24] 6843 	lcall	_setColorDefault
                                   6844 ;	.\ecen4350_lcd_v4.c:1482: LCD_string_write(" BYTE");
      001F73 90 57 03         [24] 6845 	mov	dptr,#___str_49
      001F76 75 F0 80         [24] 6846 	mov	b,#0x80
      001F79 12 10 77         [24] 6847 	lcall	_LCD_string_write
      001F7C D0 04            [24] 6848 	pop	ar4
      001F7E D0 05            [24] 6849 	pop	ar5
      001F80 D0 06            [24] 6850 	pop	ar6
      001F82 D0 07            [24] 6851 	pop	ar7
      001F84                       6852 00119$:
                                   6853 ;	.\ecen4350_lcd_v4.c:1484: if (blockType == 0x2)
      001F84 E5 5A            [12] 6854 	mov	a,_dump_sloc0_1_0
      001F86 70 03            [24] 6855 	jnz	00253$
      001F88 02 20 A8         [24] 6856 	ljmp	00121$
      001F8B                       6857 00253$:
                                   6858 ;	.\ecen4350_lcd_v4.c:1486: setCursor(0, 120);
      001F8B C0 07            [24] 6859 	push	ar7
      001F8D 75 6B 78         [24] 6860 	mov	_setCursor_PARM_2,#0x78
      001F90 75 6C 00         [24] 6861 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F93 90 00 00         [24] 6862 	mov	dptr,#0x0000
      001F96 C0 07            [24] 6863 	push	ar7
      001F98 C0 06            [24] 6864 	push	ar6
      001F9A C0 05            [24] 6865 	push	ar5
      001F9C C0 04            [24] 6866 	push	ar4
      001F9E 12 05 5D         [24] 6867 	lcall	_setCursor
                                   6868 ;	.\ecen4350_lcd_v4.c:1487: setColorWhite();
      001FA1 12 16 8B         [24] 6869 	lcall	_setColorWhite
                                   6870 ;	.\ecen4350_lcd_v4.c:1488: LCD_string_write(" Hex Data:");
      001FA4 90 56 DF         [24] 6871 	mov	dptr,#___str_46
      001FA7 75 F0 80         [24] 6872 	mov	b,#0x80
      001FAA 12 10 77         [24] 6873 	lcall	_LCD_string_write
                                   6874 ;	.\ecen4350_lcd_v4.c:1489: setColorDefault();
      001FAD 12 16 3B         [24] 6875 	lcall	_setColorDefault
                                   6876 ;	.\ecen4350_lcd_v4.c:1490: setCursor(10, 140);
      001FB0 75 6B 8C         [24] 6877 	mov	_setCursor_PARM_2,#0x8c
      001FB3 75 6C 00         [24] 6878 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FB6 90 00 0A         [24] 6879 	mov	dptr,#0x000a
      001FB9 12 05 5D         [24] 6880 	lcall	_setCursor
      001FBC D0 04            [24] 6881 	pop	ar4
      001FBE D0 05            [24] 6882 	pop	ar5
      001FC0 D0 06            [24] 6883 	pop	ar6
                                   6884 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6885 ;	assignBit
      001FC2 C2 B5            [12] 6886 	clr	_P3_5
                                   6887 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001FC4 8C 82            [24] 6888 	mov	dpl,r4
      001FC6 8E 83            [24] 6889 	mov	dph,r6
      001FC8 E0               [24] 6890 	movx	a,@dptr
      001FC9 F5 82            [12] 6891 	mov	dpl,a
                                   6892 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6893 ;	assignBit
      001FCB D2 B5            [12] 6894 	setb	_P3_5
                                   6895 ;	.\ecen4350_lcd_v4.c:1491: print8Hex(ramRead8(d));
      001FCD C0 06            [24] 6896 	push	ar6
      001FCF C0 05            [24] 6897 	push	ar5
      001FD1 C0 04            [24] 6898 	push	ar4
      001FD3 12 15 48         [24] 6899 	lcall	_print8Hex
      001FD6 D0 04            [24] 6900 	pop	ar4
      001FD8 D0 05            [24] 6901 	pop	ar5
      001FDA D0 06            [24] 6902 	pop	ar6
      001FDC D0 07            [24] 6903 	pop	ar7
                                   6904 ;	.\ecen4350_lcd_v4.c:1492: d++;
      001FDE 74 01            [12] 6905 	mov	a,#0x01
      001FE0 2C               [12] 6906 	add	a,r4
      001FE1 FB               [12] 6907 	mov	r3,a
      001FE2 E4               [12] 6908 	clr	a
      001FE3 3E               [12] 6909 	addc	a,r6
      001FE4 FF               [12] 6910 	mov	r7,a
                                   6911 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6912 ;	assignBit
      001FE5 C2 B5            [12] 6913 	clr	_P3_5
                                   6914 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      001FE7 8B 82            [24] 6915 	mov	dpl,r3
      001FE9 8F 83            [24] 6916 	mov	dph,r7
      001FEB E0               [24] 6917 	movx	a,@dptr
      001FEC F5 82            [12] 6918 	mov	dpl,a
                                   6919 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6920 ;	assignBit
      001FEE D2 B5            [12] 6921 	setb	_P3_5
                                   6922 ;	.\ecen4350_lcd_v4.c:1493: print8Hex(ramRead8(d));
      001FF0 C0 07            [24] 6923 	push	ar7
      001FF2 C0 05            [24] 6924 	push	ar5
      001FF4 C0 03            [24] 6925 	push	ar3
      001FF6 12 15 48         [24] 6926 	lcall	_print8Hex
      001FF9 D0 03            [24] 6927 	pop	ar3
      001FFB D0 05            [24] 6928 	pop	ar5
      001FFD D0 07            [24] 6929 	pop	ar7
                                   6930 ;	.\ecen4350_lcd_v4.c:1494: d--;
      001FFF 1B               [12] 6931 	dec	r3
      002000 BB FF 01         [24] 6932 	cjne	r3,#0xff,00254$
      002003 1F               [12] 6933 	dec	r7
      002004                       6934 00254$:
                                   6935 ;	.\ecen4350_lcd_v4.c:1496: setCursor(0, 180);
      002004 75 6B B4         [24] 6936 	mov	_setCursor_PARM_2,#0xb4
      002007 75 6C 00         [24] 6937 	mov	(_setCursor_PARM_2 + 1),#0x00
      00200A 90 00 00         [24] 6938 	mov	dptr,#0x0000
      00200D C0 07            [24] 6939 	push	ar7
      00200F C0 05            [24] 6940 	push	ar5
      002011 C0 03            [24] 6941 	push	ar3
      002013 12 05 5D         [24] 6942 	lcall	_setCursor
                                   6943 ;	.\ecen4350_lcd_v4.c:1497: setColorWhite();
      002016 12 16 8B         [24] 6944 	lcall	_setColorWhite
                                   6945 ;	.\ecen4350_lcd_v4.c:1498: LCD_string_write(" ASCII Data:");
      002019 90 56 EA         [24] 6946 	mov	dptr,#___str_47
      00201C 75 F0 80         [24] 6947 	mov	b,#0x80
      00201F 12 10 77         [24] 6948 	lcall	_LCD_string_write
                                   6949 ;	.\ecen4350_lcd_v4.c:1499: setColorDefault();
      002022 12 16 3B         [24] 6950 	lcall	_setColorDefault
                                   6951 ;	.\ecen4350_lcd_v4.c:1500: setCursor(10, 200);
      002025 75 6B C8         [24] 6952 	mov	_setCursor_PARM_2,#0xc8
      002028 75 6C 00         [24] 6953 	mov	(_setCursor_PARM_2 + 1),#0x00
      00202B 90 00 0A         [24] 6954 	mov	dptr,#0x000a
      00202E 12 05 5D         [24] 6955 	lcall	_setCursor
      002031 D0 03            [24] 6956 	pop	ar3
      002033 D0 05            [24] 6957 	pop	ar5
      002035 D0 07            [24] 6958 	pop	ar7
                                   6959 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6960 ;	assignBit
      002037 C2 B5            [12] 6961 	clr	_P3_5
                                   6962 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002039 8B 82            [24] 6963 	mov	dpl,r3
      00203B 8F 83            [24] 6964 	mov	dph,r7
      00203D E0               [24] 6965 	movx	a,@dptr
      00203E F5 82            [12] 6966 	mov	dpl,a
                                   6967 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6968 ;	assignBit
      002040 D2 B5            [12] 6969 	setb	_P3_5
                                   6970 ;	.\ecen4350_lcd_v4.c:1501: print8ASCII(ramRead8(d));
      002042 C0 07            [24] 6971 	push	ar7
      002044 C0 05            [24] 6972 	push	ar5
      002046 C0 03            [24] 6973 	push	ar3
      002048 12 15 CA         [24] 6974 	lcall	_print8ASCII
      00204B D0 03            [24] 6975 	pop	ar3
      00204D D0 05            [24] 6976 	pop	ar5
      00204F D0 07            [24] 6977 	pop	ar7
                                   6978 ;	.\ecen4350_lcd_v4.c:1502: d++;
      002051 74 01            [12] 6979 	mov	a,#0x01
      002053 2B               [12] 6980 	add	a,r3
      002054 FC               [12] 6981 	mov	r4,a
      002055 E4               [12] 6982 	clr	a
      002056 3F               [12] 6983 	addc	a,r7
      002057 FE               [12] 6984 	mov	r6,a
                                   6985 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   6986 ;	assignBit
      002058 C2 B5            [12] 6987 	clr	_P3_5
                                   6988 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00205A 8C 82            [24] 6989 	mov	dpl,r4
      00205C 8E 83            [24] 6990 	mov	dph,r6
      00205E E0               [24] 6991 	movx	a,@dptr
      00205F F5 82            [12] 6992 	mov	dpl,a
                                   6993 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   6994 ;	assignBit
      002061 D2 B5            [12] 6995 	setb	_P3_5
                                   6996 ;	.\ecen4350_lcd_v4.c:1503: print8ASCII(ramRead8(d));
      002063 C0 07            [24] 6997 	push	ar7
      002065 C0 06            [24] 6998 	push	ar6
      002067 C0 05            [24] 6999 	push	ar5
      002069 C0 04            [24] 7000 	push	ar4
      00206B 12 15 CA         [24] 7001 	lcall	_print8ASCII
                                   7002 ;	.\ecen4350_lcd_v4.c:1505: setCursor(0, 240);
      00206E 75 6B F0         [24] 7003 	mov	_setCursor_PARM_2,#0xf0
      002071 75 6C 00         [24] 7004 	mov	(_setCursor_PARM_2 + 1),#0x00
      002074 90 00 00         [24] 7005 	mov	dptr,#0x0000
      002077 12 05 5D         [24] 7006 	lcall	_setCursor
                                   7007 ;	.\ecen4350_lcd_v4.c:1506: setColorWhite();
      00207A 12 16 8B         [24] 7008 	lcall	_setColorWhite
                                   7009 ;	.\ecen4350_lcd_v4.c:1507: LCD_string_write(" Data Type:");
      00207D 90 56 F7         [24] 7010 	mov	dptr,#___str_48
      002080 75 F0 80         [24] 7011 	mov	b,#0x80
      002083 12 10 77         [24] 7012 	lcall	_LCD_string_write
                                   7013 ;	.\ecen4350_lcd_v4.c:1508: setColorDefault();
      002086 12 16 3B         [24] 7014 	lcall	_setColorDefault
                                   7015 ;	.\ecen4350_lcd_v4.c:1509: setCursor(0, 260);
      002089 75 6B 04         [24] 7016 	mov	_setCursor_PARM_2,#0x04
      00208C 75 6C 01         [24] 7017 	mov	(_setCursor_PARM_2 + 1),#0x01
      00208F 90 00 00         [24] 7018 	mov	dptr,#0x0000
      002092 12 05 5D         [24] 7019 	lcall	_setCursor
                                   7020 ;	.\ecen4350_lcd_v4.c:1510: LCD_string_write(" WORD");
      002095 90 57 09         [24] 7021 	mov	dptr,#___str_50
      002098 75 F0 80         [24] 7022 	mov	b,#0x80
      00209B 12 10 77         [24] 7023 	lcall	_LCD_string_write
      00209E D0 04            [24] 7024 	pop	ar4
      0020A0 D0 05            [24] 7025 	pop	ar5
      0020A2 D0 06            [24] 7026 	pop	ar6
      0020A4 D0 07            [24] 7027 	pop	ar7
                                   7028 ;	.\ecen4350_lcd_v4.c:1566: return;
      0020A6 D0 07            [24] 7029 	pop	ar7
                                   7030 ;	.\ecen4350_lcd_v4.c:1510: LCD_string_write(" WORD");
      0020A8                       7031 00121$:
                                   7032 ;	.\ecen4350_lcd_v4.c:1512: if (blockType == 0x4)
      0020A8 EF               [12] 7033 	mov	a,r7
      0020A9 70 03            [24] 7034 	jnz	00255$
      0020AB 02 22 55         [24] 7035 	ljmp	00123$
      0020AE                       7036 00255$:
                                   7037 ;	.\ecen4350_lcd_v4.c:1514: setCursor(0, 120);
      0020AE 75 6B 78         [24] 7038 	mov	_setCursor_PARM_2,#0x78
      0020B1 75 6C 00         [24] 7039 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020B4 90 00 00         [24] 7040 	mov	dptr,#0x0000
      0020B7 C0 07            [24] 7041 	push	ar7
      0020B9 C0 06            [24] 7042 	push	ar6
      0020BB C0 05            [24] 7043 	push	ar5
      0020BD C0 04            [24] 7044 	push	ar4
      0020BF 12 05 5D         [24] 7045 	lcall	_setCursor
                                   7046 ;	.\ecen4350_lcd_v4.c:1515: setColorWhite();
      0020C2 12 16 8B         [24] 7047 	lcall	_setColorWhite
                                   7048 ;	.\ecen4350_lcd_v4.c:1516: LCD_string_write(" Hex Data:");
      0020C5 90 56 DF         [24] 7049 	mov	dptr,#___str_46
      0020C8 75 F0 80         [24] 7050 	mov	b,#0x80
      0020CB 12 10 77         [24] 7051 	lcall	_LCD_string_write
                                   7052 ;	.\ecen4350_lcd_v4.c:1517: setColorDefault();
      0020CE 12 16 3B         [24] 7053 	lcall	_setColorDefault
                                   7054 ;	.\ecen4350_lcd_v4.c:1518: setCursor(10, 140);
      0020D1 75 6B 8C         [24] 7055 	mov	_setCursor_PARM_2,#0x8c
      0020D4 75 6C 00         [24] 7056 	mov	(_setCursor_PARM_2 + 1),#0x00
      0020D7 90 00 0A         [24] 7057 	mov	dptr,#0x000a
      0020DA 12 05 5D         [24] 7058 	lcall	_setCursor
      0020DD D0 04            [24] 7059 	pop	ar4
      0020DF D0 05            [24] 7060 	pop	ar5
      0020E1 D0 06            [24] 7061 	pop	ar6
                                   7062 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7063 ;	assignBit
      0020E3 C2 B5            [12] 7064 	clr	_P3_5
                                   7065 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0020E5 8C 82            [24] 7066 	mov	dpl,r4
      0020E7 8E 83            [24] 7067 	mov	dph,r6
      0020E9 E0               [24] 7068 	movx	a,@dptr
      0020EA F5 82            [12] 7069 	mov	dpl,a
                                   7070 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7071 ;	assignBit
      0020EC D2 B5            [12] 7072 	setb	_P3_5
                                   7073 ;	.\ecen4350_lcd_v4.c:1519: print8Hex(ramRead8(d));
      0020EE C0 06            [24] 7074 	push	ar6
      0020F0 C0 05            [24] 7075 	push	ar5
      0020F2 C0 04            [24] 7076 	push	ar4
      0020F4 12 15 48         [24] 7077 	lcall	_print8Hex
      0020F7 D0 04            [24] 7078 	pop	ar4
      0020F9 D0 05            [24] 7079 	pop	ar5
      0020FB D0 06            [24] 7080 	pop	ar6
                                   7081 ;	.\ecen4350_lcd_v4.c:1520: d++;
      0020FD 74 01            [12] 7082 	mov	a,#0x01
      0020FF 2C               [12] 7083 	add	a,r4
      002100 FA               [12] 7084 	mov	r2,a
      002101 E4               [12] 7085 	clr	a
      002102 3E               [12] 7086 	addc	a,r6
      002103 FB               [12] 7087 	mov	r3,a
                                   7088 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7089 ;	assignBit
      002104 C2 B5            [12] 7090 	clr	_P3_5
                                   7091 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002106 8A 82            [24] 7092 	mov	dpl,r2
      002108 8B 83            [24] 7093 	mov	dph,r3
      00210A E0               [24] 7094 	movx	a,@dptr
      00210B F5 82            [12] 7095 	mov	dpl,a
                                   7096 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7097 ;	assignBit
      00210D D2 B5            [12] 7098 	setb	_P3_5
                                   7099 ;	.\ecen4350_lcd_v4.c:1521: print8Hex(ramRead8(d));
      00210F C0 05            [24] 7100 	push	ar5
      002111 C0 03            [24] 7101 	push	ar3
      002113 C0 02            [24] 7102 	push	ar2
      002115 12 15 48         [24] 7103 	lcall	_print8Hex
      002118 D0 02            [24] 7104 	pop	ar2
      00211A D0 03            [24] 7105 	pop	ar3
      00211C D0 05            [24] 7106 	pop	ar5
      00211E D0 07            [24] 7107 	pop	ar7
                                   7108 ;	.\ecen4350_lcd_v4.c:1522: d++;
      002120 0A               [12] 7109 	inc	r2
      002121 BA 00 01         [24] 7110 	cjne	r2,#0x00,00256$
      002124 0B               [12] 7111 	inc	r3
      002125                       7112 00256$:
                                   7113 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7114 ;	assignBit
      002125 C2 B5            [12] 7115 	clr	_P3_5
                                   7116 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002127 8A 82            [24] 7117 	mov	dpl,r2
      002129 8B 83            [24] 7118 	mov	dph,r3
      00212B E0               [24] 7119 	movx	a,@dptr
      00212C F5 82            [12] 7120 	mov	dpl,a
                                   7121 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7122 ;	assignBit
      00212E D2 B5            [12] 7123 	setb	_P3_5
                                   7124 ;	.\ecen4350_lcd_v4.c:1523: print8Hex(ramRead8(d));
      002130 C0 07            [24] 7125 	push	ar7
      002132 C0 05            [24] 7126 	push	ar5
      002134 C0 03            [24] 7127 	push	ar3
      002136 C0 02            [24] 7128 	push	ar2
      002138 12 15 48         [24] 7129 	lcall	_print8Hex
      00213B D0 02            [24] 7130 	pop	ar2
      00213D D0 03            [24] 7131 	pop	ar3
                                   7132 ;	.\ecen4350_lcd_v4.c:1524: d++;
      00213F 74 01            [12] 7133 	mov	a,#0x01
      002141 2A               [12] 7134 	add	a,r2
      002142 F5 58            [12] 7135 	mov	_dump_d_65536_547,a
      002144 E4               [12] 7136 	clr	a
      002145 3B               [12] 7137 	addc	a,r3
      002146 F5 59            [12] 7138 	mov	(_dump_d_65536_547 + 1),a
                                   7139 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7140 ;	assignBit
      002148 C2 B5            [12] 7141 	clr	_P3_5
                                   7142 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00214A 85 58 82         [24] 7143 	mov	dpl,_dump_d_65536_547
      00214D 85 59 83         [24] 7144 	mov	dph,(_dump_d_65536_547 + 1)
      002150 E0               [24] 7145 	movx	a,@dptr
      002151 FB               [12] 7146 	mov	r3,a
                                   7147 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7148 ;	assignBit
      002152 D2 B5            [12] 7149 	setb	_P3_5
                                   7150 ;	.\ecen4350_lcd_v4.c:1525: print8Hex(ramRead8(d));
      002154 8B 82            [24] 7151 	mov	dpl,r3
      002156 12 15 48         [24] 7152 	lcall	_print8Hex
      002159 D0 05            [24] 7153 	pop	ar5
      00215B D0 07            [24] 7154 	pop	ar7
                                   7155 ;	.\ecen4350_lcd_v4.c:1526: d--;
      00215D E5 58            [12] 7156 	mov	a,_dump_d_65536_547
      00215F 24 FF            [12] 7157 	add	a,#0xff
      002161 FA               [12] 7158 	mov	r2,a
      002162 E5 59            [12] 7159 	mov	a,(_dump_d_65536_547 + 1)
      002164 34 FF            [12] 7160 	addc	a,#0xff
      002166 FB               [12] 7161 	mov	r3,a
                                   7162 ;	.\ecen4350_lcd_v4.c:1527: d--;
      002167 1A               [12] 7163 	dec	r2
      002168 BA FF 01         [24] 7164 	cjne	r2,#0xff,00257$
      00216B 1B               [12] 7165 	dec	r3
      00216C                       7166 00257$:
                                   7167 ;	.\ecen4350_lcd_v4.c:1528: d--;
      00216C 1A               [12] 7168 	dec	r2
      00216D BA FF 01         [24] 7169 	cjne	r2,#0xff,00258$
      002170 1B               [12] 7170 	dec	r3
      002171                       7171 00258$:
                                   7172 ;	.\ecen4350_lcd_v4.c:1530: setCursor(0, 180);
      002171 75 6B B4         [24] 7173 	mov	_setCursor_PARM_2,#0xb4
      002174 75 6C 00         [24] 7174 	mov	(_setCursor_PARM_2 + 1),#0x00
      002177 90 00 00         [24] 7175 	mov	dptr,#0x0000
      00217A C0 07            [24] 7176 	push	ar7
      00217C C0 05            [24] 7177 	push	ar5
      00217E C0 03            [24] 7178 	push	ar3
      002180 C0 02            [24] 7179 	push	ar2
      002182 12 05 5D         [24] 7180 	lcall	_setCursor
                                   7181 ;	.\ecen4350_lcd_v4.c:1531: setColorWhite();
      002185 12 16 8B         [24] 7182 	lcall	_setColorWhite
                                   7183 ;	.\ecen4350_lcd_v4.c:1532: LCD_string_write(" ASCII Data:");
      002188 90 56 EA         [24] 7184 	mov	dptr,#___str_47
      00218B 75 F0 80         [24] 7185 	mov	b,#0x80
      00218E 12 10 77         [24] 7186 	lcall	_LCD_string_write
                                   7187 ;	.\ecen4350_lcd_v4.c:1533: setColorDefault();
      002191 12 16 3B         [24] 7188 	lcall	_setColorDefault
                                   7189 ;	.\ecen4350_lcd_v4.c:1534: setCursor(10, 200);
      002194 75 6B C8         [24] 7190 	mov	_setCursor_PARM_2,#0xc8
      002197 75 6C 00         [24] 7191 	mov	(_setCursor_PARM_2 + 1),#0x00
      00219A 90 00 0A         [24] 7192 	mov	dptr,#0x000a
      00219D 12 05 5D         [24] 7193 	lcall	_setCursor
      0021A0 D0 02            [24] 7194 	pop	ar2
      0021A2 D0 03            [24] 7195 	pop	ar3
                                   7196 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7197 ;	assignBit
      0021A4 C2 B5            [12] 7198 	clr	_P3_5
                                   7199 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0021A6 8A 82            [24] 7200 	mov	dpl,r2
      0021A8 8B 83            [24] 7201 	mov	dph,r3
      0021AA E0               [24] 7202 	movx	a,@dptr
      0021AB F5 82            [12] 7203 	mov	dpl,a
                                   7204 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7205 ;	assignBit
      0021AD D2 B5            [12] 7206 	setb	_P3_5
                                   7207 ;	.\ecen4350_lcd_v4.c:1535: print8ASCII(ramRead8(d));
      0021AF C0 03            [24] 7208 	push	ar3
      0021B1 C0 02            [24] 7209 	push	ar2
      0021B3 12 15 CA         [24] 7210 	lcall	_print8ASCII
      0021B6 D0 02            [24] 7211 	pop	ar2
      0021B8 D0 03            [24] 7212 	pop	ar3
      0021BA D0 05            [24] 7213 	pop	ar5
      0021BC D0 07            [24] 7214 	pop	ar7
                                   7215 ;	.\ecen4350_lcd_v4.c:1536: d++;
      0021BE 0A               [12] 7216 	inc	r2
      0021BF BA 00 01         [24] 7217 	cjne	r2,#0x00,00259$
      0021C2 0B               [12] 7218 	inc	r3
      0021C3                       7219 00259$:
                                   7220 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7221 ;	assignBit
      0021C3 C2 B5            [12] 7222 	clr	_P3_5
                                   7223 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0021C5 8A 82            [24] 7224 	mov	dpl,r2
      0021C7 8B 83            [24] 7225 	mov	dph,r3
      0021C9 E0               [24] 7226 	movx	a,@dptr
      0021CA F5 82            [12] 7227 	mov	dpl,a
                                   7228 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7229 ;	assignBit
      0021CC D2 B5            [12] 7230 	setb	_P3_5
                                   7231 ;	.\ecen4350_lcd_v4.c:1537: print8ASCII(ramRead8(d));
      0021CE C0 07            [24] 7232 	push	ar7
      0021D0 C0 05            [24] 7233 	push	ar5
      0021D2 C0 03            [24] 7234 	push	ar3
      0021D4 C0 02            [24] 7235 	push	ar2
      0021D6 12 15 CA         [24] 7236 	lcall	_print8ASCII
      0021D9 D0 02            [24] 7237 	pop	ar2
      0021DB D0 03            [24] 7238 	pop	ar3
      0021DD D0 05            [24] 7239 	pop	ar5
      0021DF D0 07            [24] 7240 	pop	ar7
                                   7241 ;	.\ecen4350_lcd_v4.c:1538: d++;
      0021E1 0A               [12] 7242 	inc	r2
      0021E2 BA 00 01         [24] 7243 	cjne	r2,#0x00,00260$
      0021E5 0B               [12] 7244 	inc	r3
      0021E6                       7245 00260$:
                                   7246 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7247 ;	assignBit
      0021E6 C2 B5            [12] 7248 	clr	_P3_5
                                   7249 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0021E8 8A 82            [24] 7250 	mov	dpl,r2
      0021EA 8B 83            [24] 7251 	mov	dph,r3
      0021EC E0               [24] 7252 	movx	a,@dptr
      0021ED F5 82            [12] 7253 	mov	dpl,a
                                   7254 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7255 ;	assignBit
      0021EF D2 B5            [12] 7256 	setb	_P3_5
                                   7257 ;	.\ecen4350_lcd_v4.c:1539: print8ASCII(ramRead8(d));
      0021F1 C0 07            [24] 7258 	push	ar7
      0021F3 C0 05            [24] 7259 	push	ar5
      0021F5 C0 03            [24] 7260 	push	ar3
      0021F7 C0 02            [24] 7261 	push	ar2
      0021F9 12 15 CA         [24] 7262 	lcall	_print8ASCII
      0021FC D0 02            [24] 7263 	pop	ar2
      0021FE D0 03            [24] 7264 	pop	ar3
      002200 D0 05            [24] 7265 	pop	ar5
                                   7266 ;	.\ecen4350_lcd_v4.c:1540: d++;
      002202 74 01            [12] 7267 	mov	a,#0x01
      002204 2A               [12] 7268 	add	a,r2
      002205 FC               [12] 7269 	mov	r4,a
      002206 E4               [12] 7270 	clr	a
      002207 3B               [12] 7271 	addc	a,r3
      002208 FE               [12] 7272 	mov	r6,a
                                   7273 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   7274 ;	assignBit
      002209 C2 B5            [12] 7275 	clr	_P3_5
                                   7276 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00220B 8C 82            [24] 7277 	mov	dpl,r4
      00220D 8E 83            [24] 7278 	mov	dph,r6
      00220F E0               [24] 7279 	movx	a,@dptr
      002210 F5 82            [12] 7280 	mov	dpl,a
                                   7281 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   7282 ;	assignBit
      002212 D2 B5            [12] 7283 	setb	_P3_5
                                   7284 ;	.\ecen4350_lcd_v4.c:1541: print8ASCII(ramRead8(d));
      002214 C0 06            [24] 7285 	push	ar6
      002216 C0 05            [24] 7286 	push	ar5
      002218 C0 04            [24] 7287 	push	ar4
      00221A 12 15 CA         [24] 7288 	lcall	_print8ASCII
                                   7289 ;	.\ecen4350_lcd_v4.c:1543: setCursor(0, 240);
      00221D 75 6B F0         [24] 7290 	mov	_setCursor_PARM_2,#0xf0
      002220 75 6C 00         [24] 7291 	mov	(_setCursor_PARM_2 + 1),#0x00
      002223 90 00 00         [24] 7292 	mov	dptr,#0x0000
      002226 12 05 5D         [24] 7293 	lcall	_setCursor
                                   7294 ;	.\ecen4350_lcd_v4.c:1544: setColorWhite();
      002229 12 16 8B         [24] 7295 	lcall	_setColorWhite
                                   7296 ;	.\ecen4350_lcd_v4.c:1545: LCD_string_write(" Data Type:");
      00222C 90 56 F7         [24] 7297 	mov	dptr,#___str_48
      00222F 75 F0 80         [24] 7298 	mov	b,#0x80
      002232 12 10 77         [24] 7299 	lcall	_LCD_string_write
                                   7300 ;	.\ecen4350_lcd_v4.c:1546: setColorDefault();
      002235 12 16 3B         [24] 7301 	lcall	_setColorDefault
                                   7302 ;	.\ecen4350_lcd_v4.c:1547: setCursor(0, 260);
      002238 75 6B 04         [24] 7303 	mov	_setCursor_PARM_2,#0x04
      00223B 75 6C 01         [24] 7304 	mov	(_setCursor_PARM_2 + 1),#0x01
      00223E 90 00 00         [24] 7305 	mov	dptr,#0x0000
      002241 12 05 5D         [24] 7306 	lcall	_setCursor
                                   7307 ;	.\ecen4350_lcd_v4.c:1548: LCD_string_write(" DWORD");
      002244 90 57 0F         [24] 7308 	mov	dptr,#___str_51
      002247 75 F0 80         [24] 7309 	mov	b,#0x80
      00224A 12 10 77         [24] 7310 	lcall	_LCD_string_write
      00224D D0 04            [24] 7311 	pop	ar4
      00224F D0 05            [24] 7312 	pop	ar5
      002251 D0 06            [24] 7313 	pop	ar6
      002253 D0 07            [24] 7314 	pop	ar7
      002255                       7315 00123$:
                                   7316 ;	.\ecen4350_lcd_v4.c:1550: setCursor(50, 300);
      002255 75 6B 2C         [24] 7317 	mov	_setCursor_PARM_2,#0x2c
      002258 75 6C 01         [24] 7318 	mov	(_setCursor_PARM_2 + 1),#0x01
      00225B 90 00 32         [24] 7319 	mov	dptr,#0x0032
      00225E C0 07            [24] 7320 	push	ar7
      002260 C0 06            [24] 7321 	push	ar6
      002262 C0 05            [24] 7322 	push	ar5
      002264 C0 04            [24] 7323 	push	ar4
      002266 12 05 5D         [24] 7324 	lcall	_setCursor
                                   7325 ;	.\ecen4350_lcd_v4.c:1551: setColorWhite();
      002269 12 16 8B         [24] 7326 	lcall	_setColorWhite
                                   7327 ;	.\ecen4350_lcd_v4.c:1552: LCD_string_write(" <0> Exit\n");
      00226C 90 57 16         [24] 7328 	mov	dptr,#___str_52
      00226F 75 F0 80         [24] 7329 	mov	b,#0x80
      002272 12 10 77         [24] 7330 	lcall	_LCD_string_write
                                   7331 ;	.\ecen4350_lcd_v4.c:1554: selection = keyDetect();
      002275 12 11 95         [24] 7332 	lcall	_keyDetect
      002278 AB 82            [24] 7333 	mov	r3,dpl
      00227A D0 04            [24] 7334 	pop	ar4
      00227C D0 05            [24] 7335 	pop	ar5
      00227E D0 06            [24] 7336 	pop	ar6
      002280 D0 07            [24] 7337 	pop	ar7
      002282 78 71            [12] 7338 	mov	r0,#_selection
      002284 A6 03            [24] 7339 	mov	@r0,ar3
                                   7340 ;	.\ecen4350_lcd_v4.c:1556: if (selection == '0' ) {
      002286 BB 30 02         [24] 7341 	cjne	r3,#0x30,00261$
      002289 80 03            [24] 7342 	sjmp	00262$
      00228B                       7343 00261$:
      00228B 02 1E 66         [24] 7344 	ljmp	00126$
      00228E                       7345 00262$:
                                   7346 ;	.\ecen4350_lcd_v4.c:1557: exit = 0;
      00228E 78 78            [12] 7347 	mov	r0,#_dump_exit_65536_547
      002290 76 00            [12] 7348 	mov	@r0,#0x00
                                   7349 ;	.\ecen4350_lcd_v4.c:1558: setCursor(50, 300);
      002292 75 6B 2C         [24] 7350 	mov	_setCursor_PARM_2,#0x2c
      002295 75 6C 01         [24] 7351 	mov	(_setCursor_PARM_2 + 1),#0x01
      002298 90 00 32         [24] 7352 	mov	dptr,#0x0032
      00229B C0 07            [24] 7353 	push	ar7
      00229D C0 06            [24] 7354 	push	ar6
      00229F C0 05            [24] 7355 	push	ar5
      0022A1 C0 04            [24] 7356 	push	ar4
      0022A3 12 05 5D         [24] 7357 	lcall	_setCursor
                                   7358 ;	.\ecen4350_lcd_v4.c:1559: setColorSelect();
      0022A6 12 16 46         [24] 7359 	lcall	_setColorSelect
                                   7360 ;	.\ecen4350_lcd_v4.c:1560: LCD_string_write(" ");
      0022A9 90 55 E1         [24] 7361 	mov	dptr,#___str_29
      0022AC 75 F0 80         [24] 7362 	mov	b,#0x80
      0022AF 12 10 77         [24] 7363 	lcall	_LCD_string_write
                                   7364 ;	.\ecen4350_lcd_v4.c:1561: setColorHighlight2();
      0022B2 12 16 5D         [24] 7365 	lcall	_setColorHighlight2
                                   7366 ;	.\ecen4350_lcd_v4.c:1562: LCD_string_write("<0> Exit\n");
      0022B5 90 57 21         [24] 7367 	mov	dptr,#___str_53
      0022B8 75 F0 80         [24] 7368 	mov	b,#0x80
      0022BB 12 10 77         [24] 7369 	lcall	_LCD_string_write
                                   7370 ;	.\ecen4350_lcd_v4.c:1563: delay(40);
      0022BE 90 00 28         [24] 7371 	mov	dptr,#0x0028
      0022C1 12 01 87         [24] 7372 	lcall	_delay
      0022C4 D0 04            [24] 7373 	pop	ar4
      0022C6 D0 05            [24] 7374 	pop	ar5
      0022C8 D0 06            [24] 7375 	pop	ar6
      0022CA D0 07            [24] 7376 	pop	ar7
      0022CC 02 1E 66         [24] 7377 	ljmp	00126$
                                   7378 ;	.\ecen4350_lcd_v4.c:1566: return;
                                   7379 ;	.\ecen4350_lcd_v4.c:1567: }
      0022CF 22               [24] 7380 	ret
                                   7381 ;------------------------------------------------------------
                                   7382 ;Allocation info for local variables in function 'move'
                                   7383 ;------------------------------------------------------------
                                   7384 ;d                         Allocated with name '_move_d_65536_603'
                                   7385 ;i                         Allocated with name '_move_i_131072_612'
                                   7386 ;__2621440148              Allocated to registers 
                                   7387 ;__2621440145              Allocated to registers 
                                   7388 ;__2621440146              Allocated to registers 
                                   7389 ;__3276800149              Allocated to registers 
                                   7390 ;map_address               Allocated to registers 
                                   7391 ;d                         Allocated to registers r5 
                                   7392 ;map_address               Allocated to registers 
                                   7393 ;d                         Allocated to registers 
                                   7394 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_603'
                                   7395 ;destAddress               Allocated to registers r2 r3 
                                   7396 ;blockSize                 Allocated to registers r6 r7 
                                   7397 ;blockType                 Allocated to registers r5 
                                   7398 ;invalidType               Allocated to registers r4 
                                   7399 ;invalidSize               Allocated with name '_move_invalidSize_65536_603'
                                   7400 ;------------------------------------------------------------
                                   7401 ;	.\ecen4350_lcd_v4.c:1569: void move() {
                                   7402 ;	-----------------------------------------
                                   7403 ;	 function move
                                   7404 ;	-----------------------------------------
      0022D0                       7405 _move:
                                   7406 ;	.\ecen4350_lcd_v4.c:1573: __idata unsigned int blockSize = 0;
      0022D0 7E 00            [12] 7407 	mov	r6,#0x00
      0022D2 7F 00            [12] 7408 	mov	r7,#0x00
                                   7409 ;	.\ecen4350_lcd_v4.c:1574: __idata unsigned char blockType = 0;
      0022D4 7D 00            [12] 7410 	mov	r5,#0x00
                                   7411 ;	.\ecen4350_lcd_v4.c:1575: __idata unsigned char invalidType = 1;
      0022D6 7C 01            [12] 7412 	mov	r4,#0x01
                                   7413 ;	.\ecen4350_lcd_v4.c:1576: __idata unsigned char invalidSize = 1;
      0022D8 78 7B            [12] 7414 	mov	r0,#_move_invalidSize_65536_603
      0022DA 76 01            [12] 7415 	mov	@r0,#0x01
                                   7416 ;	.\ecen4350_lcd_v4.c:1578: clearLCD();
      0022DC C0 07            [24] 7417 	push	ar7
      0022DE C0 06            [24] 7418 	push	ar6
      0022E0 C0 05            [24] 7419 	push	ar5
      0022E2 C0 04            [24] 7420 	push	ar4
      0022E4 12 0D FA         [24] 7421 	lcall	_clearLCD
                                   7422 ;	.\ecen4350_lcd_v4.c:1581: fillTop(GRAY);
      0022E7 90 D6 BA         [24] 7423 	mov	dptr,#0xd6ba
      0022EA 12 0C 2D         [24] 7424 	lcall	_fillTop
                                   7425 ;	.\ecen4350_lcd_v4.c:1582: setTextSize(5);
      0022ED 75 82 05         [24] 7426 	mov	dpl,#0x05
      0022F0 12 05 77         [24] 7427 	lcall	_setTextSize
                                   7428 ;	.\ecen4350_lcd_v4.c:1583: setColorMenu();
      0022F3 12 16 74         [24] 7429 	lcall	_setColorMenu
                                   7430 ;	.\ecen4350_lcd_v4.c:1584: setCursor(30, 0);
      0022F6 E4               [12] 7431 	clr	a
      0022F7 F5 6B            [12] 7432 	mov	_setCursor_PARM_2,a
      0022F9 F5 6C            [12] 7433 	mov	(_setCursor_PARM_2 + 1),a
      0022FB 90 00 1E         [24] 7434 	mov	dptr,#0x001e
      0022FE 12 05 5D         [24] 7435 	lcall	_setCursor
                                   7436 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write("[MOVE]\n");
      002301 90 57 2B         [24] 7437 	mov	dptr,#___str_54
      002304 75 F0 80         [24] 7438 	mov	b,#0x80
      002307 12 10 77         [24] 7439 	lcall	_LCD_string_write
                                   7440 ;	.\ecen4350_lcd_v4.c:1586: setColorDefault();
      00230A 12 16 3B         [24] 7441 	lcall	_setColorDefault
                                   7442 ;	.\ecen4350_lcd_v4.c:1587: setTextSize(2);
      00230D 75 82 02         [24] 7443 	mov	dpl,#0x02
      002310 12 05 77         [24] 7444 	lcall	_setTextSize
                                   7445 ;	.\ecen4350_lcd_v4.c:1588: setCursor(0, 60);
      002313 75 6B 3C         [24] 7446 	mov	_setCursor_PARM_2,#0x3c
      002316 75 6C 00         [24] 7447 	mov	(_setCursor_PARM_2 + 1),#0x00
      002319 90 00 00         [24] 7448 	mov	dptr,#0x0000
      00231C 12 05 5D         [24] 7449 	lcall	_setCursor
                                   7450 ;	.\ecen4350_lcd_v4.c:1589: LCD_string_write(" Source Address:");
      00231F 90 57 33         [24] 7451 	mov	dptr,#___str_55
      002322 75 F0 80         [24] 7452 	mov	b,#0x80
      002325 12 10 77         [24] 7453 	lcall	_LCD_string_write
                                   7454 ;	.\ecen4350_lcd_v4.c:1590: setCursor(0, 80);
      002328 75 6B 50         [24] 7455 	mov	_setCursor_PARM_2,#0x50
      00232B 75 6C 00         [24] 7456 	mov	(_setCursor_PARM_2 + 1),#0x00
      00232E 90 00 00         [24] 7457 	mov	dptr,#0x0000
      002331 12 05 5D         [24] 7458 	lcall	_setCursor
                                   7459 ;	.\ecen4350_lcd_v4.c:1591: setColorGray();
      002334 12 16 69         [24] 7460 	lcall	_setColorGray
                                   7461 ;	.\ecen4350_lcd_v4.c:1592: LCD_string_write(" 0x____");
      002337 90 55 7F         [24] 7462 	mov	dptr,#___str_23
      00233A 75 F0 80         [24] 7463 	mov	b,#0x80
      00233D 12 10 77         [24] 7464 	lcall	_LCD_string_write
                                   7465 ;	.\ecen4350_lcd_v4.c:1593: setCursor(0, 110);
      002340 75 6B 6E         [24] 7466 	mov	_setCursor_PARM_2,#0x6e
      002343 75 6C 00         [24] 7467 	mov	(_setCursor_PARM_2 + 1),#0x00
      002346 90 00 00         [24] 7468 	mov	dptr,#0x0000
      002349 12 05 5D         [24] 7469 	lcall	_setCursor
                                   7470 ;	.\ecen4350_lcd_v4.c:1594: setColorDefault();
      00234C 12 16 3B         [24] 7471 	lcall	_setColorDefault
                                   7472 ;	.\ecen4350_lcd_v4.c:1595: LCD_string_write(" Destination:");
      00234F 90 57 44         [24] 7473 	mov	dptr,#___str_56
      002352 75 F0 80         [24] 7474 	mov	b,#0x80
      002355 12 10 77         [24] 7475 	lcall	_LCD_string_write
                                   7476 ;	.\ecen4350_lcd_v4.c:1596: setCursor(0, 130);
      002358 75 6B 82         [24] 7477 	mov	_setCursor_PARM_2,#0x82
      00235B 75 6C 00         [24] 7478 	mov	(_setCursor_PARM_2 + 1),#0x00
      00235E 90 00 00         [24] 7479 	mov	dptr,#0x0000
      002361 12 05 5D         [24] 7480 	lcall	_setCursor
                                   7481 ;	.\ecen4350_lcd_v4.c:1597: setColorGray();
      002364 12 16 69         [24] 7482 	lcall	_setColorGray
                                   7483 ;	.\ecen4350_lcd_v4.c:1598: LCD_string_write(" 0x____");
      002367 90 55 7F         [24] 7484 	mov	dptr,#___str_23
      00236A 75 F0 80         [24] 7485 	mov	b,#0x80
      00236D 12 10 77         [24] 7486 	lcall	_LCD_string_write
                                   7487 ;	.\ecen4350_lcd_v4.c:1599: setCursor(0, 160);
      002370 75 6B A0         [24] 7488 	mov	_setCursor_PARM_2,#0xa0
      002373 75 6C 00         [24] 7489 	mov	(_setCursor_PARM_2 + 1),#0x00
      002376 90 00 00         [24] 7490 	mov	dptr,#0x0000
      002379 12 05 5D         [24] 7491 	lcall	_setCursor
                                   7492 ;	.\ecen4350_lcd_v4.c:1600: setColorDefault();
      00237C 12 16 3B         [24] 7493 	lcall	_setColorDefault
                                   7494 ;	.\ecen4350_lcd_v4.c:1601: LCD_string_write(" Choose Block Type:");
      00237F 90 55 E3         [24] 7495 	mov	dptr,#___str_30
      002382 75 F0 80         [24] 7496 	mov	b,#0x80
      002385 12 10 77         [24] 7497 	lcall	_LCD_string_write
                                   7498 ;	.\ecen4350_lcd_v4.c:1602: setCursor(0, 180);
      002388 75 6B B4         [24] 7499 	mov	_setCursor_PARM_2,#0xb4
      00238B 75 6C 00         [24] 7500 	mov	(_setCursor_PARM_2 + 1),#0x00
      00238E 90 00 00         [24] 7501 	mov	dptr,#0x0000
      002391 12 05 5D         [24] 7502 	lcall	_setCursor
                                   7503 ;	.\ecen4350_lcd_v4.c:1603: setColorGray();
      002394 12 16 69         [24] 7504 	lcall	_setColorGray
                                   7505 ;	.\ecen4350_lcd_v4.c:1604: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      002397 90 55 9C         [24] 7506 	mov	dptr,#___str_25
      00239A 75 F0 80         [24] 7507 	mov	b,#0x80
      00239D 12 10 77         [24] 7508 	lcall	_LCD_string_write
                                   7509 ;	.\ecen4350_lcd_v4.c:1605: setCursor(0, 260);
      0023A0 75 6B 04         [24] 7510 	mov	_setCursor_PARM_2,#0x04
      0023A3 75 6C 01         [24] 7511 	mov	(_setCursor_PARM_2 + 1),#0x01
      0023A6 90 00 00         [24] 7512 	mov	dptr,#0x0000
      0023A9 12 05 5D         [24] 7513 	lcall	_setCursor
                                   7514 ;	.\ecen4350_lcd_v4.c:1606: setColorDefault();
      0023AC 12 16 3B         [24] 7515 	lcall	_setColorDefault
                                   7516 ;	.\ecen4350_lcd_v4.c:1607: LCD_string_write(" Input Size:");
      0023AF 90 55 BE         [24] 7517 	mov	dptr,#___str_26
      0023B2 75 F0 80         [24] 7518 	mov	b,#0x80
      0023B5 12 10 77         [24] 7519 	lcall	_LCD_string_write
                                   7520 ;	.\ecen4350_lcd_v4.c:1608: setColorGray();
      0023B8 12 16 69         [24] 7521 	lcall	_setColorGray
                                   7522 ;	.\ecen4350_lcd_v4.c:1609: LCD_string_write(" _");
      0023BB 90 55 CB         [24] 7523 	mov	dptr,#___str_27
      0023BE 75 F0 80         [24] 7524 	mov	b,#0x80
      0023C1 12 10 77         [24] 7525 	lcall	_LCD_string_write
                                   7526 ;	.\ecen4350_lcd_v4.c:1616: setCursor(0, 60);
      0023C4 75 6B 3C         [24] 7527 	mov	_setCursor_PARM_2,#0x3c
      0023C7 75 6C 00         [24] 7528 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023CA 90 00 00         [24] 7529 	mov	dptr,#0x0000
      0023CD 12 05 5D         [24] 7530 	lcall	_setCursor
                                   7531 ;	.\ecen4350_lcd_v4.c:1617: setColorSelect();
      0023D0 12 16 46         [24] 7532 	lcall	_setColorSelect
                                   7533 ;	.\ecen4350_lcd_v4.c:1618: LCD_string_write(" Source Address:");
      0023D3 90 57 33         [24] 7534 	mov	dptr,#___str_55
      0023D6 75 F0 80         [24] 7535 	mov	b,#0x80
      0023D9 12 10 77         [24] 7536 	lcall	_LCD_string_write
                                   7537 ;	.\ecen4350_lcd_v4.c:1619: setCursor(0, 80);
      0023DC 75 6B 50         [24] 7538 	mov	_setCursor_PARM_2,#0x50
      0023DF 75 6C 00         [24] 7539 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023E2 90 00 00         [24] 7540 	mov	dptr,#0x0000
      0023E5 12 05 5D         [24] 7541 	lcall	_setCursor
                                   7542 ;	.\ecen4350_lcd_v4.c:1620: LCD_string_write(" ");
      0023E8 90 55 E1         [24] 7543 	mov	dptr,#___str_29
      0023EB 75 F0 80         [24] 7544 	mov	b,#0x80
      0023EE 12 10 77         [24] 7545 	lcall	_LCD_string_write
                                   7546 ;	.\ecen4350_lcd_v4.c:1621: setColorHighlight1();
      0023F1 12 16 51         [24] 7547 	lcall	_setColorHighlight1
                                   7548 ;	.\ecen4350_lcd_v4.c:1622: LCD_string_write("0x");
      0023F4 90 54 B4         [24] 7549 	mov	dptr,#___str_2
      0023F7 75 F0 80         [24] 7550 	mov	b,#0x80
      0023FA 12 10 77         [24] 7551 	lcall	_LCD_string_write
                                   7552 ;	.\ecen4350_lcd_v4.c:1623: sourceAddress = inputAddress();
      0023FD 12 16 AC         [24] 7553 	lcall	_inputAddress
      002400 78 79            [12] 7554 	mov	r0,#_move_sourceAddress_65536_603
      002402 A6 82            [24] 7555 	mov	@r0,dpl
      002404 08               [12] 7556 	inc	r0
      002405 A6 83            [24] 7557 	mov	@r0,dph
                                   7558 ;	.\ecen4350_lcd_v4.c:1626: setColorDefault();
      002407 12 16 3B         [24] 7559 	lcall	_setColorDefault
                                   7560 ;	.\ecen4350_lcd_v4.c:1627: setCursor(0, 60);
      00240A 75 6B 3C         [24] 7561 	mov	_setCursor_PARM_2,#0x3c
      00240D 75 6C 00         [24] 7562 	mov	(_setCursor_PARM_2 + 1),#0x00
      002410 90 00 00         [24] 7563 	mov	dptr,#0x0000
      002413 12 05 5D         [24] 7564 	lcall	_setCursor
                                   7565 ;	.\ecen4350_lcd_v4.c:1628: LCD_string_write(" Source Address:");
      002416 90 57 33         [24] 7566 	mov	dptr,#___str_55
      002419 75 F0 80         [24] 7567 	mov	b,#0x80
      00241C 12 10 77         [24] 7568 	lcall	_LCD_string_write
                                   7569 ;	.\ecen4350_lcd_v4.c:1629: setCursor(0, 80);
      00241F 75 6B 50         [24] 7570 	mov	_setCursor_PARM_2,#0x50
      002422 75 6C 00         [24] 7571 	mov	(_setCursor_PARM_2 + 1),#0x00
      002425 90 00 00         [24] 7572 	mov	dptr,#0x0000
      002428 12 05 5D         [24] 7573 	lcall	_setCursor
                                   7574 ;	.\ecen4350_lcd_v4.c:1630: LCD_string_write(" ");
      00242B 90 55 E1         [24] 7575 	mov	dptr,#___str_29
      00242E 75 F0 80         [24] 7576 	mov	b,#0x80
      002431 12 10 77         [24] 7577 	lcall	_LCD_string_write
                                   7578 ;	.\ecen4350_lcd_v4.c:1631: setColorHighlight2();
      002434 12 16 5D         [24] 7579 	lcall	_setColorHighlight2
                                   7580 ;	.\ecen4350_lcd_v4.c:1632: LCD_string_write("0x");
      002437 90 54 B4         [24] 7581 	mov	dptr,#___str_2
      00243A 75 F0 80         [24] 7582 	mov	b,#0x80
      00243D 12 10 77         [24] 7583 	lcall	_LCD_string_write
                                   7584 ;	.\ecen4350_lcd_v4.c:1633: print16Hex(sourceAddress);
      002440 78 79            [12] 7585 	mov	r0,#_move_sourceAddress_65536_603
      002442 86 82            [24] 7586 	mov	dpl,@r0
      002444 08               [12] 7587 	inc	r0
      002445 86 83            [24] 7588 	mov	dph,@r0
      002447 12 15 5F         [24] 7589 	lcall	_print16Hex
                                   7590 ;	.\ecen4350_lcd_v4.c:1636: setCursor(0, 110);
      00244A 75 6B 6E         [24] 7591 	mov	_setCursor_PARM_2,#0x6e
      00244D 75 6C 00         [24] 7592 	mov	(_setCursor_PARM_2 + 1),#0x00
      002450 90 00 00         [24] 7593 	mov	dptr,#0x0000
      002453 12 05 5D         [24] 7594 	lcall	_setCursor
                                   7595 ;	.\ecen4350_lcd_v4.c:1637: setColorSelect();
      002456 12 16 46         [24] 7596 	lcall	_setColorSelect
                                   7597 ;	.\ecen4350_lcd_v4.c:1638: LCD_string_write(" Destination:");
      002459 90 57 44         [24] 7598 	mov	dptr,#___str_56
      00245C 75 F0 80         [24] 7599 	mov	b,#0x80
      00245F 12 10 77         [24] 7600 	lcall	_LCD_string_write
                                   7601 ;	.\ecen4350_lcd_v4.c:1639: setCursor(0, 130);
      002462 75 6B 82         [24] 7602 	mov	_setCursor_PARM_2,#0x82
      002465 75 6C 00         [24] 7603 	mov	(_setCursor_PARM_2 + 1),#0x00
      002468 90 00 00         [24] 7604 	mov	dptr,#0x0000
      00246B 12 05 5D         [24] 7605 	lcall	_setCursor
                                   7606 ;	.\ecen4350_lcd_v4.c:1640: LCD_string_write(" ");
      00246E 90 55 E1         [24] 7607 	mov	dptr,#___str_29
      002471 75 F0 80         [24] 7608 	mov	b,#0x80
      002474 12 10 77         [24] 7609 	lcall	_LCD_string_write
                                   7610 ;	.\ecen4350_lcd_v4.c:1641: setColorHighlight1();
      002477 12 16 51         [24] 7611 	lcall	_setColorHighlight1
                                   7612 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("0x");
      00247A 90 54 B4         [24] 7613 	mov	dptr,#___str_2
      00247D 75 F0 80         [24] 7614 	mov	b,#0x80
      002480 12 10 77         [24] 7615 	lcall	_LCD_string_write
                                   7616 ;	.\ecen4350_lcd_v4.c:1643: destAddress = inputAddress();
      002483 12 16 AC         [24] 7617 	lcall	_inputAddress
      002486 AA 82            [24] 7618 	mov	r2,dpl
      002488 AB 83            [24] 7619 	mov	r3,dph
                                   7620 ;	.\ecen4350_lcd_v4.c:1646: setColorDefault();
      00248A C0 03            [24] 7621 	push	ar3
      00248C C0 02            [24] 7622 	push	ar2
      00248E 12 16 3B         [24] 7623 	lcall	_setColorDefault
                                   7624 ;	.\ecen4350_lcd_v4.c:1647: setCursor(0, 110);
      002491 75 6B 6E         [24] 7625 	mov	_setCursor_PARM_2,#0x6e
      002494 75 6C 00         [24] 7626 	mov	(_setCursor_PARM_2 + 1),#0x00
      002497 90 00 00         [24] 7627 	mov	dptr,#0x0000
      00249A 12 05 5D         [24] 7628 	lcall	_setCursor
                                   7629 ;	.\ecen4350_lcd_v4.c:1648: LCD_string_write( " Destination:");
      00249D 90 57 44         [24] 7630 	mov	dptr,#___str_56
      0024A0 75 F0 80         [24] 7631 	mov	b,#0x80
      0024A3 12 10 77         [24] 7632 	lcall	_LCD_string_write
                                   7633 ;	.\ecen4350_lcd_v4.c:1649: setCursor(0, 130);
      0024A6 75 6B 82         [24] 7634 	mov	_setCursor_PARM_2,#0x82
      0024A9 75 6C 00         [24] 7635 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024AC 90 00 00         [24] 7636 	mov	dptr,#0x0000
      0024AF 12 05 5D         [24] 7637 	lcall	_setCursor
                                   7638 ;	.\ecen4350_lcd_v4.c:1650: LCD_string_write(" ");
      0024B2 90 55 E1         [24] 7639 	mov	dptr,#___str_29
      0024B5 75 F0 80         [24] 7640 	mov	b,#0x80
      0024B8 12 10 77         [24] 7641 	lcall	_LCD_string_write
                                   7642 ;	.\ecen4350_lcd_v4.c:1651: setColorHighlight2();
      0024BB 12 16 5D         [24] 7643 	lcall	_setColorHighlight2
                                   7644 ;	.\ecen4350_lcd_v4.c:1652: LCD_string_write("0x");
      0024BE 90 54 B4         [24] 7645 	mov	dptr,#___str_2
      0024C1 75 F0 80         [24] 7646 	mov	b,#0x80
      0024C4 12 10 77         [24] 7647 	lcall	_LCD_string_write
      0024C7 D0 02            [24] 7648 	pop	ar2
      0024C9 D0 03            [24] 7649 	pop	ar3
                                   7650 ;	.\ecen4350_lcd_v4.c:1653: print16Hex(destAddress);
      0024CB 8A 82            [24] 7651 	mov	dpl,r2
      0024CD 8B 83            [24] 7652 	mov	dph,r3
      0024CF C0 03            [24] 7653 	push	ar3
      0024D1 C0 02            [24] 7654 	push	ar2
      0024D3 12 15 5F         [24] 7655 	lcall	_print16Hex
                                   7656 ;	.\ecen4350_lcd_v4.c:1656: setCursor(0, 160);
      0024D6 75 6B A0         [24] 7657 	mov	_setCursor_PARM_2,#0xa0
      0024D9 75 6C 00         [24] 7658 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024DC 90 00 00         [24] 7659 	mov	dptr,#0x0000
      0024DF 12 05 5D         [24] 7660 	lcall	_setCursor
                                   7661 ;	.\ecen4350_lcd_v4.c:1657: setColorSelect();
      0024E2 12 16 46         [24] 7662 	lcall	_setColorSelect
                                   7663 ;	.\ecen4350_lcd_v4.c:1658: LCD_string_write(" Choose Block Type:");
      0024E5 90 55 E3         [24] 7664 	mov	dptr,#___str_30
      0024E8 75 F0 80         [24] 7665 	mov	b,#0x80
      0024EB 12 10 77         [24] 7666 	lcall	_LCD_string_write
                                   7667 ;	.\ecen4350_lcd_v4.c:1659: setCursor(0, 180);
      0024EE 75 6B B4         [24] 7668 	mov	_setCursor_PARM_2,#0xb4
      0024F1 75 6C 00         [24] 7669 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024F4 90 00 00         [24] 7670 	mov	dptr,#0x0000
      0024F7 12 05 5D         [24] 7671 	lcall	_setCursor
                                   7672 ;	.\ecen4350_lcd_v4.c:1660: setColorWhite();
      0024FA 12 16 8B         [24] 7673 	lcall	_setColorWhite
                                   7674 ;	.\ecen4350_lcd_v4.c:1661: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0024FD 90 55 9C         [24] 7675 	mov	dptr,#___str_25
      002500 75 F0 80         [24] 7676 	mov	b,#0x80
      002503 12 10 77         [24] 7677 	lcall	_LCD_string_write
      002506 D0 02            [24] 7678 	pop	ar2
      002508 D0 03            [24] 7679 	pop	ar3
      00250A D0 04            [24] 7680 	pop	ar4
      00250C D0 05            [24] 7681 	pop	ar5
      00250E D0 06            [24] 7682 	pop	ar6
      002510 D0 07            [24] 7683 	pop	ar7
                                   7684 ;	.\ecen4350_lcd_v4.c:1663: while (invalidType) {
      002512                       7685 00109$:
      002512 EC               [12] 7686 	mov	a,r4
      002513 70 03            [24] 7687 	jnz	00178$
      002515 02 26 A2         [24] 7688 	ljmp	00137$
      002518                       7689 00178$:
                                   7690 ;	.\ecen4350_lcd_v4.c:1664: setCursor(0, 180);
      002518 75 6B B4         [24] 7691 	mov	_setCursor_PARM_2,#0xb4
      00251B 75 6C 00         [24] 7692 	mov	(_setCursor_PARM_2 + 1),#0x00
      00251E 90 00 00         [24] 7693 	mov	dptr,#0x0000
      002521 C0 07            [24] 7694 	push	ar7
      002523 C0 06            [24] 7695 	push	ar6
      002525 C0 04            [24] 7696 	push	ar4
      002527 C0 03            [24] 7697 	push	ar3
      002529 C0 02            [24] 7698 	push	ar2
      00252B 12 05 5D         [24] 7699 	lcall	_setCursor
                                   7700 ;	.\ecen4350_lcd_v4.c:1665: setColorWhite();
      00252E 12 16 8B         [24] 7701 	lcall	_setColorWhite
                                   7702 ;	.\ecen4350_lcd_v4.c:1666: LCD_string_write("\n\n");
      002531 90 55 F7         [24] 7703 	mov	dptr,#___str_31
      002534 75 F0 80         [24] 7704 	mov	b,#0x80
      002537 12 10 77         [24] 7705 	lcall	_LCD_string_write
                                   7706 ;	.\ecen4350_lcd_v4.c:1668: blockType = inputBlockType();
      00253A 12 17 4E         [24] 7707 	lcall	_inputBlockType
      00253D AD 82            [24] 7708 	mov	r5,dpl
      00253F D0 02            [24] 7709 	pop	ar2
      002541 D0 03            [24] 7710 	pop	ar3
      002543 D0 04            [24] 7711 	pop	ar4
      002545 D0 06            [24] 7712 	pop	ar6
      002547 D0 07            [24] 7713 	pop	ar7
                                   7714 ;	.\ecen4350_lcd_v4.c:1670: if (blockType == 0x1) {
      002549 BD 01 5F         [24] 7715 	cjne	r5,#0x01,00102$
                                   7716 ;	.\ecen4350_lcd_v4.c:1671: invalidType = 0;
      00254C 7C 00            [12] 7717 	mov	r4,#0x00
                                   7718 ;	.\ecen4350_lcd_v4.c:1673: setColorDefault();
      00254E C0 07            [24] 7719 	push	ar7
      002550 C0 06            [24] 7720 	push	ar6
      002552 C0 05            [24] 7721 	push	ar5
      002554 C0 04            [24] 7722 	push	ar4
      002556 C0 03            [24] 7723 	push	ar3
      002558 C0 02            [24] 7724 	push	ar2
      00255A 12 16 3B         [24] 7725 	lcall	_setColorDefault
                                   7726 ;	.\ecen4350_lcd_v4.c:1674: setCursor(0, 160);
      00255D 75 6B A0         [24] 7727 	mov	_setCursor_PARM_2,#0xa0
      002560 75 6C 00         [24] 7728 	mov	(_setCursor_PARM_2 + 1),#0x00
      002563 90 00 00         [24] 7729 	mov	dptr,#0x0000
      002566 12 05 5D         [24] 7730 	lcall	_setCursor
                                   7731 ;	.\ecen4350_lcd_v4.c:1675: LCD_string_write(" Choose Block Type:");
      002569 90 55 E3         [24] 7732 	mov	dptr,#___str_30
      00256C 75 F0 80         [24] 7733 	mov	b,#0x80
      00256F 12 10 77         [24] 7734 	lcall	_LCD_string_write
                                   7735 ;	.\ecen4350_lcd_v4.c:1676: setCursor(0, 180);
      002572 75 6B B4         [24] 7736 	mov	_setCursor_PARM_2,#0xb4
      002575 75 6C 00         [24] 7737 	mov	(_setCursor_PARM_2 + 1),#0x00
      002578 90 00 00         [24] 7738 	mov	dptr,#0x0000
      00257B 12 05 5D         [24] 7739 	lcall	_setCursor
                                   7740 ;	.\ecen4350_lcd_v4.c:1677: LCD_string_write("  ");
      00257E 90 55 FA         [24] 7741 	mov	dptr,#___str_32
      002581 75 F0 80         [24] 7742 	mov	b,#0x80
      002584 12 10 77         [24] 7743 	lcall	_LCD_string_write
                                   7744 ;	.\ecen4350_lcd_v4.c:1678: setColorHighlight2();
      002587 12 16 5D         [24] 7745 	lcall	_setColorHighlight2
                                   7746 ;	.\ecen4350_lcd_v4.c:1679: LCD_string_write("<1> BYTE\n");
      00258A 90 55 FD         [24] 7747 	mov	dptr,#___str_33
      00258D 75 F0 80         [24] 7748 	mov	b,#0x80
      002590 12 10 77         [24] 7749 	lcall	_LCD_string_write
                                   7750 ;	.\ecen4350_lcd_v4.c:1680: setColorGray();
      002593 12 16 69         [24] 7751 	lcall	_setColorGray
                                   7752 ;	.\ecen4350_lcd_v4.c:1681: LCD_string_write("\n\n                \n                ");
      002596 90 56 07         [24] 7753 	mov	dptr,#___str_34
      002599 75 F0 80         [24] 7754 	mov	b,#0x80
      00259C 12 10 77         [24] 7755 	lcall	_LCD_string_write
      00259F D0 02            [24] 7756 	pop	ar2
      0025A1 D0 03            [24] 7757 	pop	ar3
      0025A3 D0 04            [24] 7758 	pop	ar4
      0025A5 D0 05            [24] 7759 	pop	ar5
      0025A7 D0 06            [24] 7760 	pop	ar6
      0025A9 D0 07            [24] 7761 	pop	ar7
      0025AB                       7762 00102$:
                                   7763 ;	.\ecen4350_lcd_v4.c:1683: } if (blockType == 0x2) {
      0025AB BD 02 62         [24] 7764 	cjne	r5,#0x02,00104$
                                   7765 ;	.\ecen4350_lcd_v4.c:1684: invalidType = 0;
      0025AE 7C 00            [12] 7766 	mov	r4,#0x00
                                   7767 ;	.\ecen4350_lcd_v4.c:1686: setColorDefault();
      0025B0 C0 07            [24] 7768 	push	ar7
      0025B2 C0 06            [24] 7769 	push	ar6
      0025B4 C0 05            [24] 7770 	push	ar5
      0025B6 C0 04            [24] 7771 	push	ar4
      0025B8 C0 03            [24] 7772 	push	ar3
      0025BA C0 02            [24] 7773 	push	ar2
      0025BC 12 16 3B         [24] 7774 	lcall	_setColorDefault
                                   7775 ;	.\ecen4350_lcd_v4.c:1687: setCursor(0, 160);
      0025BF 75 6B A0         [24] 7776 	mov	_setCursor_PARM_2,#0xa0
      0025C2 75 6C 00         [24] 7777 	mov	(_setCursor_PARM_2 + 1),#0x00
      0025C5 90 00 00         [24] 7778 	mov	dptr,#0x0000
      0025C8 12 05 5D         [24] 7779 	lcall	_setCursor
                                   7780 ;	.\ecen4350_lcd_v4.c:1688: LCD_string_write(" Choose Block Type:");
      0025CB 90 55 E3         [24] 7781 	mov	dptr,#___str_30
      0025CE 75 F0 80         [24] 7782 	mov	b,#0x80
      0025D1 12 10 77         [24] 7783 	lcall	_LCD_string_write
                                   7784 ;	.\ecen4350_lcd_v4.c:1689: setCursor(0, 180);
      0025D4 75 6B B4         [24] 7785 	mov	_setCursor_PARM_2,#0xb4
      0025D7 75 6C 00         [24] 7786 	mov	(_setCursor_PARM_2 + 1),#0x00
      0025DA 90 00 00         [24] 7787 	mov	dptr,#0x0000
      0025DD 12 05 5D         [24] 7788 	lcall	_setCursor
                                   7789 ;	.\ecen4350_lcd_v4.c:1690: setColorGray();
      0025E0 12 16 69         [24] 7790 	lcall	_setColorGray
                                   7791 ;	.\ecen4350_lcd_v4.c:1691: LCD_string_write("\n  ");
      0025E3 90 56 2B         [24] 7792 	mov	dptr,#___str_35
      0025E6 75 F0 80         [24] 7793 	mov	b,#0x80
      0025E9 12 10 77         [24] 7794 	lcall	_LCD_string_write
                                   7795 ;	.\ecen4350_lcd_v4.c:1692: setColorHighlight2();
      0025EC 12 16 5D         [24] 7796 	lcall	_setColorHighlight2
                                   7797 ;	.\ecen4350_lcd_v4.c:1693: LCD_string_write("<2> WORD\n");
      0025EF 90 56 2F         [24] 7798 	mov	dptr,#___str_36
      0025F2 75 F0 80         [24] 7799 	mov	b,#0x80
      0025F5 12 10 77         [24] 7800 	lcall	_LCD_string_write
                                   7801 ;	.\ecen4350_lcd_v4.c:1694: setColorGray();
      0025F8 12 16 69         [24] 7802 	lcall	_setColorGray
                                   7803 ;	.\ecen4350_lcd_v4.c:1695: LCD_string_write("\n                \n                ");
      0025FB 90 56 39         [24] 7804 	mov	dptr,#___str_37
      0025FE 75 F0 80         [24] 7805 	mov	b,#0x80
      002601 12 10 77         [24] 7806 	lcall	_LCD_string_write
      002604 D0 02            [24] 7807 	pop	ar2
      002606 D0 03            [24] 7808 	pop	ar3
      002608 D0 04            [24] 7809 	pop	ar4
      00260A D0 05            [24] 7810 	pop	ar5
      00260C D0 06            [24] 7811 	pop	ar6
      00260E D0 07            [24] 7812 	pop	ar7
      002610                       7813 00104$:
                                   7814 ;	.\ecen4350_lcd_v4.c:1696: } if (blockType == 0x4) {
      002610 BD 04 62         [24] 7815 	cjne	r5,#0x04,00106$
                                   7816 ;	.\ecen4350_lcd_v4.c:1697: invalidType = 0;
      002613 7C 00            [12] 7817 	mov	r4,#0x00
                                   7818 ;	.\ecen4350_lcd_v4.c:1699: setColorDefault();
      002615 C0 07            [24] 7819 	push	ar7
      002617 C0 06            [24] 7820 	push	ar6
      002619 C0 05            [24] 7821 	push	ar5
      00261B C0 04            [24] 7822 	push	ar4
      00261D C0 03            [24] 7823 	push	ar3
      00261F C0 02            [24] 7824 	push	ar2
      002621 12 16 3B         [24] 7825 	lcall	_setColorDefault
                                   7826 ;	.\ecen4350_lcd_v4.c:1700: setCursor(0, 160);
      002624 75 6B A0         [24] 7827 	mov	_setCursor_PARM_2,#0xa0
      002627 75 6C 00         [24] 7828 	mov	(_setCursor_PARM_2 + 1),#0x00
      00262A 90 00 00         [24] 7829 	mov	dptr,#0x0000
      00262D 12 05 5D         [24] 7830 	lcall	_setCursor
                                   7831 ;	.\ecen4350_lcd_v4.c:1701: LCD_string_write(" Choose Block Type:");
      002630 90 55 E3         [24] 7832 	mov	dptr,#___str_30
      002633 75 F0 80         [24] 7833 	mov	b,#0x80
      002636 12 10 77         [24] 7834 	lcall	_LCD_string_write
                                   7835 ;	.\ecen4350_lcd_v4.c:1702: setColorGray();
      002639 12 16 69         [24] 7836 	lcall	_setColorGray
                                   7837 ;	.\ecen4350_lcd_v4.c:1703: setCursor(0, 180);
      00263C 75 6B B4         [24] 7838 	mov	_setCursor_PARM_2,#0xb4
      00263F 75 6C 00         [24] 7839 	mov	(_setCursor_PARM_2 + 1),#0x00
      002642 90 00 00         [24] 7840 	mov	dptr,#0x0000
      002645 12 05 5D         [24] 7841 	lcall	_setCursor
                                   7842 ;	.\ecen4350_lcd_v4.c:1704: LCD_string_write("\n\n  ");
      002648 90 56 5C         [24] 7843 	mov	dptr,#___str_38
      00264B 75 F0 80         [24] 7844 	mov	b,#0x80
      00264E 12 10 77         [24] 7845 	lcall	_LCD_string_write
                                   7846 ;	.\ecen4350_lcd_v4.c:1705: setColorHighlight2();
      002651 12 16 5D         [24] 7847 	lcall	_setColorHighlight2
                                   7848 ;	.\ecen4350_lcd_v4.c:1706: LCD_string_write("<4> DWORD");
      002654 90 56 61         [24] 7849 	mov	dptr,#___str_39
      002657 75 F0 80         [24] 7850 	mov	b,#0x80
      00265A 12 10 77         [24] 7851 	lcall	_LCD_string_write
                                   7852 ;	.\ecen4350_lcd_v4.c:1707: setColorGray();
      00265D 12 16 69         [24] 7853 	lcall	_setColorGray
                                   7854 ;	.\ecen4350_lcd_v4.c:1708: LCD_string_write("\n                \n                ");
      002660 90 56 39         [24] 7855 	mov	dptr,#___str_37
      002663 75 F0 80         [24] 7856 	mov	b,#0x80
      002666 12 10 77         [24] 7857 	lcall	_LCD_string_write
      002669 D0 02            [24] 7858 	pop	ar2
      00266B D0 03            [24] 7859 	pop	ar3
      00266D D0 04            [24] 7860 	pop	ar4
      00266F D0 05            [24] 7861 	pop	ar5
      002671 D0 06            [24] 7862 	pop	ar6
      002673 D0 07            [24] 7863 	pop	ar7
      002675                       7864 00106$:
                                   7865 ;	.\ecen4350_lcd_v4.c:1710: if (invalidType) {
      002675 EC               [12] 7866 	mov	a,r4
      002676 70 03            [24] 7867 	jnz	00185$
      002678 02 25 12         [24] 7868 	ljmp	00109$
      00267B                       7869 00185$:
                                   7870 ;	.\ecen4350_lcd_v4.c:1711: setColorRed();
      00267B C0 07            [24] 7871 	push	ar7
      00267D C0 06            [24] 7872 	push	ar6
      00267F C0 05            [24] 7873 	push	ar5
      002681 C0 04            [24] 7874 	push	ar4
      002683 C0 03            [24] 7875 	push	ar3
      002685 C0 02            [24] 7876 	push	ar2
      002687 12 16 80         [24] 7877 	lcall	_setColorRed
                                   7878 ;	.\ecen4350_lcd_v4.c:1712: LCD_string_write("\n  Input Error\n  Try Again");
      00268A 90 56 6B         [24] 7879 	mov	dptr,#___str_40
      00268D 75 F0 80         [24] 7880 	mov	b,#0x80
      002690 12 10 77         [24] 7881 	lcall	_LCD_string_write
      002693 D0 02            [24] 7882 	pop	ar2
      002695 D0 03            [24] 7883 	pop	ar3
      002697 D0 04            [24] 7884 	pop	ar4
      002699 D0 05            [24] 7885 	pop	ar5
      00269B D0 06            [24] 7886 	pop	ar6
      00269D D0 07            [24] 7887 	pop	ar7
      00269F 02 25 12         [24] 7888 	ljmp	00109$
                                   7889 ;	.\ecen4350_lcd_v4.c:1718: while (invalidSize)
      0026A2                       7890 00137$:
      0026A2                       7891 00115$:
      0026A2 78 7B            [12] 7892 	mov	r0,#_move_invalidSize_65536_603
      0026A4 E6               [12] 7893 	mov	a,@r0
      0026A5 70 03            [24] 7894 	jnz	00186$
      0026A7 02 27 C6         [24] 7895 	ljmp	00140$
      0026AA                       7896 00186$:
                                   7897 ;	.\ecen4350_lcd_v4.c:1721: setCursor(0, 260);
      0026AA C0 02            [24] 7898 	push	ar2
      0026AC C0 03            [24] 7899 	push	ar3
      0026AE 75 6B 04         [24] 7900 	mov	_setCursor_PARM_2,#0x04
      0026B1 75 6C 01         [24] 7901 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026B4 90 00 00         [24] 7902 	mov	dptr,#0x0000
      0026B7 C0 05            [24] 7903 	push	ar5
      0026B9 C0 03            [24] 7904 	push	ar3
      0026BB C0 02            [24] 7905 	push	ar2
      0026BD 12 05 5D         [24] 7906 	lcall	_setCursor
                                   7907 ;	.\ecen4350_lcd_v4.c:1722: setColorSelect();
      0026C0 12 16 46         [24] 7908 	lcall	_setColorSelect
                                   7909 ;	.\ecen4350_lcd_v4.c:1723: LCD_string_write(" Input Size: ");
      0026C3 90 56 86         [24] 7910 	mov	dptr,#___str_41
      0026C6 75 F0 80         [24] 7911 	mov	b,#0x80
      0026C9 12 10 77         [24] 7912 	lcall	_LCD_string_write
                                   7913 ;	.\ecen4350_lcd_v4.c:1724: selection = keyDetect();
      0026CC 12 11 95         [24] 7914 	lcall	_keyDetect
      0026CF E5 82            [12] 7915 	mov	a,dpl
      0026D1 78 71            [12] 7916 	mov	r0,#_selection
      0026D3 F6               [12] 7917 	mov	@r0,a
                                   7918 ;	.\ecen4350_lcd_v4.c:1725: setColorHighlight1();
      0026D4 12 16 51         [24] 7919 	lcall	_setColorHighlight1
                                   7920 ;	.\ecen4350_lcd_v4.c:1726: write(selection);
      0026D7 78 71            [12] 7921 	mov	r0,#_selection
      0026D9 86 82            [24] 7922 	mov	dpl,@r0
      0026DB 12 10 11         [24] 7923 	lcall	_write
                                   7924 ;	.\ecen4350_lcd_v4.c:1727: blockSize = ASCIItoHex(selection);
      0026DE 78 71            [12] 7925 	mov	r0,#_selection
      0026E0 86 82            [24] 7926 	mov	dpl,@r0
      0026E2 12 14 03         [24] 7927 	lcall	_ASCIItoHex
      0026E5 AC 82            [24] 7928 	mov	r4,dpl
      0026E7 D0 02            [24] 7929 	pop	ar2
      0026E9 D0 03            [24] 7930 	pop	ar3
      0026EB D0 05            [24] 7931 	pop	ar5
      0026ED 8C 06            [24] 7932 	mov	ar6,r4
      0026EF 7F 00            [12] 7933 	mov	r7,#0x00
                                   7934 ;	.\ecen4350_lcd_v4.c:1728: setColorDefault();
      0026F1 C0 07            [24] 7935 	push	ar7
      0026F3 C0 06            [24] 7936 	push	ar6
      0026F5 C0 05            [24] 7937 	push	ar5
      0026F7 C0 03            [24] 7938 	push	ar3
      0026F9 C0 02            [24] 7939 	push	ar2
      0026FB 12 16 3B         [24] 7940 	lcall	_setColorDefault
      0026FE D0 02            [24] 7941 	pop	ar2
      002700 D0 03            [24] 7942 	pop	ar3
      002702 D0 05            [24] 7943 	pop	ar5
      002704 D0 06            [24] 7944 	pop	ar6
      002706 D0 07            [24] 7945 	pop	ar7
                                   7946 ;	.\ecen4350_lcd_v4.c:1730: if (blockSize != blockType) {
      002708 8D 03            [24] 7947 	mov	ar3,r5
      00270A 7C 00            [12] 7948 	mov	r4,#0x00
      00270C EE               [12] 7949 	mov	a,r6
      00270D B5 03 0A         [24] 7950 	cjne	a,ar3,00187$
      002710 EF               [12] 7951 	mov	a,r7
      002711 B5 04 06         [24] 7952 	cjne	a,ar4,00187$
      002714 D0 03            [24] 7953 	pop	ar3
      002716 D0 02            [24] 7954 	pop	ar2
      002718 80 57            [24] 7955 	sjmp	00113$
      00271A                       7956 00187$:
      00271A D0 03            [24] 7957 	pop	ar3
      00271C D0 02            [24] 7958 	pop	ar2
                                   7959 ;	.\ecen4350_lcd_v4.c:1731: setCursor(0,280);
      00271E 75 6B 18         [24] 7960 	mov	_setCursor_PARM_2,#0x18
      002721 75 6C 01         [24] 7961 	mov	(_setCursor_PARM_2 + 1),#0x01
      002724 90 00 00         [24] 7962 	mov	dptr,#0x0000
      002727 C0 07            [24] 7963 	push	ar7
      002729 C0 06            [24] 7964 	push	ar6
      00272B C0 05            [24] 7965 	push	ar5
      00272D C0 03            [24] 7966 	push	ar3
      00272F C0 02            [24] 7967 	push	ar2
      002731 12 05 5D         [24] 7968 	lcall	_setCursor
                                   7969 ;	.\ecen4350_lcd_v4.c:1732: setColorRed();
      002734 12 16 80         [24] 7970 	lcall	_setColorRed
                                   7971 ;	.\ecen4350_lcd_v4.c:1733: LCD_string_write(" Mismatch Error\n Try Again");
      002737 90 56 94         [24] 7972 	mov	dptr,#___str_42
      00273A 75 F0 80         [24] 7973 	mov	b,#0x80
      00273D 12 10 77         [24] 7974 	lcall	_LCD_string_write
                                   7975 ;	.\ecen4350_lcd_v4.c:1734: setCursor(0, 260);
      002740 75 6B 04         [24] 7976 	mov	_setCursor_PARM_2,#0x04
      002743 75 6C 01         [24] 7977 	mov	(_setCursor_PARM_2 + 1),#0x01
      002746 90 00 00         [24] 7978 	mov	dptr,#0x0000
      002749 12 05 5D         [24] 7979 	lcall	_setCursor
                                   7980 ;	.\ecen4350_lcd_v4.c:1735: setColorSelect();
      00274C 12 16 46         [24] 7981 	lcall	_setColorSelect
                                   7982 ;	.\ecen4350_lcd_v4.c:1736: LCD_string_write(" Input Size:");
      00274F 90 55 BE         [24] 7983 	mov	dptr,#___str_26
      002752 75 F0 80         [24] 7984 	mov	b,#0x80
      002755 12 10 77         [24] 7985 	lcall	_LCD_string_write
                                   7986 ;	.\ecen4350_lcd_v4.c:1737: setColorGray();
      002758 12 16 69         [24] 7987 	lcall	_setColorGray
                                   7988 ;	.\ecen4350_lcd_v4.c:1738: LCD_string_write(" _");
      00275B 90 55 CB         [24] 7989 	mov	dptr,#___str_27
      00275E 75 F0 80         [24] 7990 	mov	b,#0x80
      002761 12 10 77         [24] 7991 	lcall	_LCD_string_write
      002764 D0 02            [24] 7992 	pop	ar2
      002766 D0 03            [24] 7993 	pop	ar3
      002768 D0 05            [24] 7994 	pop	ar5
      00276A D0 06            [24] 7995 	pop	ar6
      00276C D0 07            [24] 7996 	pop	ar7
      00276E 02 26 A2         [24] 7997 	ljmp	00115$
      002771                       7998 00113$:
                                   7999 ;	.\ecen4350_lcd_v4.c:1740: setCursor(0, 260);
      002771 75 6B 04         [24] 8000 	mov	_setCursor_PARM_2,#0x04
      002774 75 6C 01         [24] 8001 	mov	(_setCursor_PARM_2 + 1),#0x01
      002777 90 00 00         [24] 8002 	mov	dptr,#0x0000
      00277A C0 07            [24] 8003 	push	ar7
      00277C C0 06            [24] 8004 	push	ar6
      00277E C0 05            [24] 8005 	push	ar5
      002780 C0 03            [24] 8006 	push	ar3
      002782 C0 02            [24] 8007 	push	ar2
      002784 12 05 5D         [24] 8008 	lcall	_setCursor
                                   8009 ;	.\ecen4350_lcd_v4.c:1741: setColorDefault();
      002787 12 16 3B         [24] 8010 	lcall	_setColorDefault
                                   8011 ;	.\ecen4350_lcd_v4.c:1742: LCD_string_write(" Input Size: ");
      00278A 90 56 86         [24] 8012 	mov	dptr,#___str_41
      00278D 75 F0 80         [24] 8013 	mov	b,#0x80
      002790 12 10 77         [24] 8014 	lcall	_LCD_string_write
                                   8015 ;	.\ecen4350_lcd_v4.c:1743: setColorHighlight2();
      002793 12 16 5D         [24] 8016 	lcall	_setColorHighlight2
                                   8017 ;	.\ecen4350_lcd_v4.c:1744: write(selection);
      002796 78 71            [12] 8018 	mov	r0,#_selection
      002798 86 82            [24] 8019 	mov	dpl,@r0
      00279A 12 10 11         [24] 8020 	lcall	_write
                                   8021 ;	.\ecen4350_lcd_v4.c:1745: invalidSize = 0;
      00279D 78 7B            [12] 8022 	mov	r0,#_move_invalidSize_65536_603
      00279F 76 00            [12] 8023 	mov	@r0,#0x00
                                   8024 ;	.\ecen4350_lcd_v4.c:1746: setCursor(0,280);
      0027A1 75 6B 18         [24] 8025 	mov	_setCursor_PARM_2,#0x18
      0027A4 75 6C 01         [24] 8026 	mov	(_setCursor_PARM_2 + 1),#0x01
      0027A7 90 00 00         [24] 8027 	mov	dptr,#0x0000
      0027AA 12 05 5D         [24] 8028 	lcall	_setCursor
                                   8029 ;	.\ecen4350_lcd_v4.c:1747: setColorGreen();
      0027AD 12 16 96         [24] 8030 	lcall	_setColorGreen
                                   8031 ;	.\ecen4350_lcd_v4.c:1748: LCD_string_write(" Match Confirmed\n                ");
      0027B0 90 56 AF         [24] 8032 	mov	dptr,#___str_43
      0027B3 75 F0 80         [24] 8033 	mov	b,#0x80
      0027B6 12 10 77         [24] 8034 	lcall	_LCD_string_write
      0027B9 D0 02            [24] 8035 	pop	ar2
      0027BB D0 03            [24] 8036 	pop	ar3
      0027BD D0 05            [24] 8037 	pop	ar5
      0027BF D0 06            [24] 8038 	pop	ar6
      0027C1 D0 07            [24] 8039 	pop	ar7
      0027C3 02 26 A2         [24] 8040 	ljmp	00115$
                                   8041 ;	.\ecen4350_lcd_v4.c:1754: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      0027C6                       8042 00140$:
      0027C6 78 79            [12] 8043 	mov	r0,#_move_sourceAddress_65536_603
      0027C8 EE               [12] 8044 	mov	a,r6
      0027C9 26               [12] 8045 	add	a,@r0
      0027CA FE               [12] 8046 	mov	r6,a
      0027CB EF               [12] 8047 	mov	a,r7
      0027CC 08               [12] 8048 	inc	r0
      0027CD 36               [12] 8049 	addc	a,@r0
      0027CE FF               [12] 8050 	mov	r7,a
      0027CF 78 79            [12] 8051 	mov	r0,#_move_sourceAddress_65536_603
      0027D1 86 5D            [24] 8052 	mov	_move_i_131072_612,@r0
      0027D3 08               [12] 8053 	inc	r0
      0027D4 86 5E            [24] 8054 	mov	(_move_i_131072_612 + 1),@r0
      0027D6                       8055 00125$:
      0027D6 C3               [12] 8056 	clr	c
      0027D7 E5 5D            [12] 8057 	mov	a,_move_i_131072_612
      0027D9 9E               [12] 8058 	subb	a,r6
      0027DA E5 5E            [12] 8059 	mov	a,(_move_i_131072_612 + 1)
      0027DC 9F               [12] 8060 	subb	a,r7
      0027DD 50 37            [24] 8061 	jnc	00121$
                                   8062 ;	.\ecen4350_lcd_v4.c:1755: d = (unsigned char __xdata*)(destAddress);
      0027DF 8A 5B            [24] 8063 	mov	_move_d_65536_603,r2
      0027E1 8B 5C            [24] 8064 	mov	(_move_d_65536_603 + 1),r3
                                   8065 ;	.\ecen4350_lcd_v4.c:1756: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      0027E3 85 5D 82         [24] 8066 	mov	dpl,_move_i_131072_612
      0027E6 85 5E 83         [24] 8067 	mov	dph,(_move_i_131072_612 + 1)
                                   8068 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8069 ;	assignBit
      0027E9 C2 B5            [12] 8070 	clr	_P3_5
                                   8071 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0027EB E0               [24] 8072 	movx	a,@dptr
      0027EC FD               [12] 8073 	mov	r5,a
                                   8074 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8075 ;	assignBit
      0027ED D2 B5            [12] 8076 	setb	_P3_5
                                   8077 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8078 ;	assignBit
      0027EF C2 B5            [12] 8079 	clr	_P3_5
                                   8080 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      0027F1 85 5B 82         [24] 8081 	mov	dpl,_move_d_65536_603
      0027F4 85 5C 83         [24] 8082 	mov	dph,(_move_d_65536_603 + 1)
      0027F7 ED               [12] 8083 	mov	a,r5
      0027F8 F0               [24] 8084 	movx	@dptr,a
                                   8085 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8086 ;	assignBit
      0027F9 D2 B5            [12] 8087 	setb	_P3_5
                                   8088 ;	.\ecen4350_lcd_v4.c:1757: if (destAddress == 0xFFFF) {						// check end of RAM
      0027FB BA FF 09         [24] 8089 	cjne	r2,#0xff,00119$
      0027FE BB FF 06         [24] 8090 	cjne	r3,#0xff,00119$
                                   8091 ;	.\ecen4350_lcd_v4.c:1758: destAddress = 0x0000;
      002801 7A 00            [12] 8092 	mov	r2,#0x00
      002803 7B 00            [12] 8093 	mov	r3,#0x00
      002805 80 05            [24] 8094 	sjmp	00126$
      002807                       8095 00119$:
                                   8096 ;	.\ecen4350_lcd_v4.c:1760: destAddress++;
      002807 0A               [12] 8097 	inc	r2
      002808 BA 00 01         [24] 8098 	cjne	r2,#0x00,00191$
      00280B 0B               [12] 8099 	inc	r3
      00280C                       8100 00191$:
      00280C                       8101 00126$:
                                   8102 ;	.\ecen4350_lcd_v4.c:1754: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      00280C 05 5D            [12] 8103 	inc	_move_i_131072_612
      00280E E4               [12] 8104 	clr	a
      00280F B5 5D C4         [24] 8105 	cjne	a,_move_i_131072_612,00125$
      002812 05 5E            [12] 8106 	inc	(_move_i_131072_612 + 1)
      002814 80 C0            [24] 8107 	sjmp	00125$
      002816                       8108 00121$:
                                   8109 ;	.\ecen4350_lcd_v4.c:1764: setCursor(0, 300);
      002816 75 6B 2C         [24] 8110 	mov	_setCursor_PARM_2,#0x2c
      002819 75 6C 01         [24] 8111 	mov	(_setCursor_PARM_2 + 1),#0x01
      00281C 90 00 00         [24] 8112 	mov	dptr,#0x0000
      00281F 12 05 5D         [24] 8113 	lcall	_setCursor
                                   8114 ;	.\ecen4350_lcd_v4.c:1765: setColorGreen();
      002822 12 16 96         [24] 8115 	lcall	_setColorGreen
                                   8116 ;	.\ecen4350_lcd_v4.c:1766: LCD_string_write(" Move Complete\n");
      002825 90 57 52         [24] 8117 	mov	dptr,#___str_57
      002828 75 F0 80         [24] 8118 	mov	b,#0x80
      00282B 12 10 77         [24] 8119 	lcall	_LCD_string_write
                                   8120 ;	.\ecen4350_lcd_v4.c:1767: delay(60);
      00282E 90 00 3C         [24] 8121 	mov	dptr,#0x003c
      002831 12 01 87         [24] 8122 	lcall	_delay
                                   8123 ;	.\ecen4350_lcd_v4.c:1768: selection = 'null';
      002834 78 71            [12] 8124 	mov	r0,#_selection
      002836 76 6E            [12] 8125 	mov	@r0,#0x6e
                                   8126 ;	.\ecen4350_lcd_v4.c:1769: return;
                                   8127 ;	.\ecen4350_lcd_v4.c:1770: }
      002838 22               [24] 8128 	ret
                                   8129 ;------------------------------------------------------------
                                   8130 ;Allocation info for local variables in function 'edit'
                                   8131 ;------------------------------------------------------------
                                   8132 ;__1310720151              Allocated to registers 
                                   8133 ;d                         Allocated with name '_edit_d_65536_622'
                                   8134 ;__1310720152              Allocated to registers 
                                   8135 ;map_address               Allocated to registers 
                                   8136 ;d                         Allocated to registers 
                                   8137 ;__1310720154              Allocated to registers 
                                   8138 ;__1310720155              Allocated to registers 
                                   8139 ;map_address               Allocated to registers 
                                   8140 ;d                         Allocated to registers 
                                   8141 ;__2621440157              Allocated to registers 
                                   8142 ;__2621440158              Allocated to registers 
                                   8143 ;map_address               Allocated to registers 
                                   8144 ;d                         Allocated to registers r2 
                                   8145 ;__2621440160              Allocated to registers 
                                   8146 ;__2621440161              Allocated to registers 
                                   8147 ;map_address               Allocated to registers 
                                   8148 ;d                         Allocated to registers 
                                   8149 ;__2621440163              Allocated to registers 
                                   8150 ;__2621440164              Allocated to registers 
                                   8151 ;map_address               Allocated to registers 
                                   8152 ;d                         Allocated to registers 
                                   8153 ;__2621440166              Allocated to registers 
                                   8154 ;__2621440167              Allocated to registers 
                                   8155 ;map_address               Allocated to registers 
                                   8156 ;d                         Allocated to registers 
                                   8157 ;address                   Allocated to registers r5 r6 
                                   8158 ;value                     Allocated to registers r7 
                                   8159 ;exit                      Allocated with name '_edit_exit_65536_622'
                                   8160 ;invalid                   Allocated with name '_edit_invalid_65536_622'
                                   8161 ;------------------------------------------------------------
                                   8162 ;	.\ecen4350_lcd_v4.c:1772: void edit(){
                                   8163 ;	-----------------------------------------
                                   8164 ;	 function edit
                                   8165 ;	-----------------------------------------
      002839                       8166 _edit:
                                   8167 ;	.\ecen4350_lcd_v4.c:1776: __idata unsigned char exit = 1;
      002839 78 7C            [12] 8168 	mov	r0,#_edit_exit_65536_622
      00283B 76 01            [12] 8169 	mov	@r0,#0x01
                                   8170 ;	.\ecen4350_lcd_v4.c:1779: clearLCD();
      00283D 12 0D FA         [24] 8171 	lcall	_clearLCD
                                   8172 ;	.\ecen4350_lcd_v4.c:1782: fillTop(GRAY);
      002840 90 D6 BA         [24] 8173 	mov	dptr,#0xd6ba
      002843 12 0C 2D         [24] 8174 	lcall	_fillTop
                                   8175 ;	.\ecen4350_lcd_v4.c:1783: setTextSize(5);
      002846 75 82 05         [24] 8176 	mov	dpl,#0x05
      002849 12 05 77         [24] 8177 	lcall	_setTextSize
                                   8178 ;	.\ecen4350_lcd_v4.c:1784: setColorMenu();
      00284C 12 16 74         [24] 8179 	lcall	_setColorMenu
                                   8180 ;	.\ecen4350_lcd_v4.c:1785: setCursor(30, 0);
      00284F E4               [12] 8181 	clr	a
      002850 F5 6B            [12] 8182 	mov	_setCursor_PARM_2,a
      002852 F5 6C            [12] 8183 	mov	(_setCursor_PARM_2 + 1),a
      002854 90 00 1E         [24] 8184 	mov	dptr,#0x001e
      002857 12 05 5D         [24] 8185 	lcall	_setCursor
                                   8186 ;	.\ecen4350_lcd_v4.c:1786: LCD_string_write("[EDIT]\n");
      00285A 90 57 62         [24] 8187 	mov	dptr,#___str_58
      00285D 75 F0 80         [24] 8188 	mov	b,#0x80
      002860 12 10 77         [24] 8189 	lcall	_LCD_string_write
                                   8190 ;	.\ecen4350_lcd_v4.c:1787: setTextSize(2);
      002863 75 82 02         [24] 8191 	mov	dpl,#0x02
      002866 12 05 77         [24] 8192 	lcall	_setTextSize
                                   8193 ;	.\ecen4350_lcd_v4.c:1788: setColorDefault();
      002869 12 16 3B         [24] 8194 	lcall	_setColorDefault
                                   8195 ;	.\ecen4350_lcd_v4.c:1789: setCursor(0, 60);
      00286C 75 6B 3C         [24] 8196 	mov	_setCursor_PARM_2,#0x3c
      00286F 75 6C 00         [24] 8197 	mov	(_setCursor_PARM_2 + 1),#0x00
      002872 90 00 00         [24] 8198 	mov	dptr,#0x0000
      002875 12 05 5D         [24] 8199 	lcall	_setCursor
                                   8200 ;	.\ecen4350_lcd_v4.c:1790: LCD_string_write(" Edit Address:");
      002878 90 57 6A         [24] 8201 	mov	dptr,#___str_59
      00287B 75 F0 80         [24] 8202 	mov	b,#0x80
      00287E 12 10 77         [24] 8203 	lcall	_LCD_string_write
                                   8204 ;	.\ecen4350_lcd_v4.c:1791: setCursor(0, 80);
      002881 75 6B 50         [24] 8205 	mov	_setCursor_PARM_2,#0x50
      002884 75 6C 00         [24] 8206 	mov	(_setCursor_PARM_2 + 1),#0x00
      002887 90 00 00         [24] 8207 	mov	dptr,#0x0000
      00288A 12 05 5D         [24] 8208 	lcall	_setCursor
                                   8209 ;	.\ecen4350_lcd_v4.c:1792: setColorGray();
      00288D 12 16 69         [24] 8210 	lcall	_setColorGray
                                   8211 ;	.\ecen4350_lcd_v4.c:1793: LCD_string_write(" 0x____");
      002890 90 55 7F         [24] 8212 	mov	dptr,#___str_23
      002893 75 F0 80         [24] 8213 	mov	b,#0x80
      002896 12 10 77         [24] 8214 	lcall	_LCD_string_write
                                   8215 ;	.\ecen4350_lcd_v4.c:1794: setCursor(0, 110);
      002899 75 6B 6E         [24] 8216 	mov	_setCursor_PARM_2,#0x6e
      00289C 75 6C 00         [24] 8217 	mov	(_setCursor_PARM_2 + 1),#0x00
      00289F 90 00 00         [24] 8218 	mov	dptr,#0x0000
      0028A2 12 05 5D         [24] 8219 	lcall	_setCursor
                                   8220 ;	.\ecen4350_lcd_v4.c:1795: setColorDefault();
      0028A5 12 16 3B         [24] 8221 	lcall	_setColorDefault
                                   8222 ;	.\ecen4350_lcd_v4.c:1796: LCD_string_write(" Location Contents:\n");
      0028A8 90 57 79         [24] 8223 	mov	dptr,#___str_60
      0028AB 75 F0 80         [24] 8224 	mov	b,#0x80
      0028AE 12 10 77         [24] 8225 	lcall	_LCD_string_write
                                   8226 ;	.\ecen4350_lcd_v4.c:1797: setColorGray();
      0028B1 12 16 69         [24] 8227 	lcall	_setColorGray
                                   8228 ;	.\ecen4350_lcd_v4.c:1798: LCD_string_write(" __");
      0028B4 90 57 8E         [24] 8229 	mov	dptr,#___str_61
      0028B7 75 F0 80         [24] 8230 	mov	b,#0x80
      0028BA 12 10 77         [24] 8231 	lcall	_LCD_string_write
                                   8232 ;	.\ecen4350_lcd_v4.c:1799: setCursor(0, 160);
      0028BD 75 6B A0         [24] 8233 	mov	_setCursor_PARM_2,#0xa0
      0028C0 75 6C 00         [24] 8234 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028C3 90 00 00         [24] 8235 	mov	dptr,#0x0000
      0028C6 12 05 5D         [24] 8236 	lcall	_setCursor
                                   8237 ;	.\ecen4350_lcd_v4.c:1800: setColorDefault();
      0028C9 12 16 3B         [24] 8238 	lcall	_setColorDefault
                                   8239 ;	.\ecen4350_lcd_v4.c:1801: LCD_string_write(" Enter New Value:\n");
      0028CC 90 57 92         [24] 8240 	mov	dptr,#___str_62
      0028CF 75 F0 80         [24] 8241 	mov	b,#0x80
      0028D2 12 10 77         [24] 8242 	lcall	_LCD_string_write
                                   8243 ;	.\ecen4350_lcd_v4.c:1802: setColorGray();
      0028D5 12 16 69         [24] 8244 	lcall	_setColorGray
                                   8245 ;	.\ecen4350_lcd_v4.c:1803: LCD_string_write(" __");
      0028D8 90 57 8E         [24] 8246 	mov	dptr,#___str_61
      0028DB 75 F0 80         [24] 8247 	mov	b,#0x80
      0028DE 12 10 77         [24] 8248 	lcall	_LCD_string_write
                                   8249 ;	.\ecen4350_lcd_v4.c:1804: setCursor(0,210);
      0028E1 75 6B D2         [24] 8250 	mov	_setCursor_PARM_2,#0xd2
      0028E4 75 6C 00         [24] 8251 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028E7 90 00 00         [24] 8252 	mov	dptr,#0x0000
      0028EA 12 05 5D         [24] 8253 	lcall	_setCursor
                                   8254 ;	.\ecen4350_lcd_v4.c:1805: setColorDefault();
      0028ED 12 16 3B         [24] 8255 	lcall	_setColorDefault
                                   8256 ;	.\ecen4350_lcd_v4.c:1806: LCD_string_write(" Choose Next Action:\n");
      0028F0 90 57 A5         [24] 8257 	mov	dptr,#___str_63
      0028F3 75 F0 80         [24] 8258 	mov	b,#0x80
      0028F6 12 10 77         [24] 8259 	lcall	_LCD_string_write
                                   8260 ;	.\ecen4350_lcd_v4.c:1807: setColorGray();
      0028F9 12 16 69         [24] 8261 	lcall	_setColorGray
                                   8262 ;	.\ecen4350_lcd_v4.c:1808: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      0028FC 90 57 BB         [24] 8263 	mov	dptr,#___str_64
      0028FF 75 F0 80         [24] 8264 	mov	b,#0x80
      002902 12 10 77         [24] 8265 	lcall	_LCD_string_write
                                   8266 ;	.\ecen4350_lcd_v4.c:1809: LCD_string_write("  <0> Exit");
      002905 90 57 E1         [24] 8267 	mov	dptr,#___str_65
      002908 75 F0 80         [24] 8268 	mov	b,#0x80
      00290B 12 10 77         [24] 8269 	lcall	_LCD_string_write
                                   8270 ;	.\ecen4350_lcd_v4.c:1816: setColorSelect();
      00290E 12 16 46         [24] 8271 	lcall	_setColorSelect
                                   8272 ;	.\ecen4350_lcd_v4.c:1817: setCursor(0, 60);
      002911 75 6B 3C         [24] 8273 	mov	_setCursor_PARM_2,#0x3c
      002914 75 6C 00         [24] 8274 	mov	(_setCursor_PARM_2 + 1),#0x00
      002917 90 00 00         [24] 8275 	mov	dptr,#0x0000
      00291A 12 05 5D         [24] 8276 	lcall	_setCursor
                                   8277 ;	.\ecen4350_lcd_v4.c:1818: LCD_string_write(" Edit Address:");
      00291D 90 57 6A         [24] 8278 	mov	dptr,#___str_59
      002920 75 F0 80         [24] 8279 	mov	b,#0x80
      002923 12 10 77         [24] 8280 	lcall	_LCD_string_write
                                   8281 ;	.\ecen4350_lcd_v4.c:1819: setCursor(0, 80);
      002926 75 6B 50         [24] 8282 	mov	_setCursor_PARM_2,#0x50
      002929 75 6C 00         [24] 8283 	mov	(_setCursor_PARM_2 + 1),#0x00
      00292C 90 00 00         [24] 8284 	mov	dptr,#0x0000
      00292F 12 05 5D         [24] 8285 	lcall	_setCursor
                                   8286 ;	.\ecen4350_lcd_v4.c:1820: LCD_string_write(" ");
      002932 90 55 E1         [24] 8287 	mov	dptr,#___str_29
      002935 75 F0 80         [24] 8288 	mov	b,#0x80
      002938 12 10 77         [24] 8289 	lcall	_LCD_string_write
                                   8290 ;	.\ecen4350_lcd_v4.c:1821: setColorHighlight1();
      00293B 12 16 51         [24] 8291 	lcall	_setColorHighlight1
                                   8292 ;	.\ecen4350_lcd_v4.c:1822: LCD_string_write("0x");
      00293E 90 54 B4         [24] 8293 	mov	dptr,#___str_2
      002941 75 F0 80         [24] 8294 	mov	b,#0x80
      002944 12 10 77         [24] 8295 	lcall	_LCD_string_write
                                   8296 ;	.\ecen4350_lcd_v4.c:1823: address = inputAddress();		// input 16-bit address and store in memory
      002947 12 16 AC         [24] 8297 	lcall	_inputAddress
      00294A AD 82            [24] 8298 	mov	r5,dpl
      00294C AE 83            [24] 8299 	mov	r6,dph
                                   8300 ;	.\ecen4350_lcd_v4.c:1824: d = (unsigned char __xdata*)address;
      00294E 8D 03            [24] 8301 	mov	ar3,r5
      002950 8E 04            [24] 8302 	mov	ar4,r6
                                   8303 ;	.\ecen4350_lcd_v4.c:1827: setColorDefault();
      002952 C0 06            [24] 8304 	push	ar6
      002954 C0 05            [24] 8305 	push	ar5
      002956 C0 04            [24] 8306 	push	ar4
      002958 C0 03            [24] 8307 	push	ar3
      00295A 12 16 3B         [24] 8308 	lcall	_setColorDefault
                                   8309 ;	.\ecen4350_lcd_v4.c:1828: setCursor(0, 60);
      00295D 75 6B 3C         [24] 8310 	mov	_setCursor_PARM_2,#0x3c
      002960 75 6C 00         [24] 8311 	mov	(_setCursor_PARM_2 + 1),#0x00
      002963 90 00 00         [24] 8312 	mov	dptr,#0x0000
      002966 12 05 5D         [24] 8313 	lcall	_setCursor
                                   8314 ;	.\ecen4350_lcd_v4.c:1829: LCD_string_write(" Edit Address:");
      002969 90 57 6A         [24] 8315 	mov	dptr,#___str_59
      00296C 75 F0 80         [24] 8316 	mov	b,#0x80
      00296F 12 10 77         [24] 8317 	lcall	_LCD_string_write
                                   8318 ;	.\ecen4350_lcd_v4.c:1830: setCursor(0, 80);
      002972 75 6B 50         [24] 8319 	mov	_setCursor_PARM_2,#0x50
      002975 75 6C 00         [24] 8320 	mov	(_setCursor_PARM_2 + 1),#0x00
      002978 90 00 00         [24] 8321 	mov	dptr,#0x0000
      00297B 12 05 5D         [24] 8322 	lcall	_setCursor
                                   8323 ;	.\ecen4350_lcd_v4.c:1831: LCD_string_write(" ");
      00297E 90 55 E1         [24] 8324 	mov	dptr,#___str_29
      002981 75 F0 80         [24] 8325 	mov	b,#0x80
      002984 12 10 77         [24] 8326 	lcall	_LCD_string_write
                                   8327 ;	.\ecen4350_lcd_v4.c:1832: setColorHighlight2();
      002987 12 16 5D         [24] 8328 	lcall	_setColorHighlight2
                                   8329 ;	.\ecen4350_lcd_v4.c:1833: LCD_string_write("0x");
      00298A 90 54 B4         [24] 8330 	mov	dptr,#___str_2
      00298D 75 F0 80         [24] 8331 	mov	b,#0x80
      002990 12 10 77         [24] 8332 	lcall	_LCD_string_write
      002993 D0 03            [24] 8333 	pop	ar3
      002995 D0 04            [24] 8334 	pop	ar4
      002997 D0 05            [24] 8335 	pop	ar5
      002999 D0 06            [24] 8336 	pop	ar6
                                   8337 ;	.\ecen4350_lcd_v4.c:1834: print16Hex(address);		// print 16-bit address from stored memory
      00299B 8D 82            [24] 8338 	mov	dpl,r5
      00299D 8E 83            [24] 8339 	mov	dph,r6
      00299F C0 06            [24] 8340 	push	ar6
      0029A1 C0 05            [24] 8341 	push	ar5
      0029A3 C0 04            [24] 8342 	push	ar4
      0029A5 C0 03            [24] 8343 	push	ar3
      0029A7 12 15 5F         [24] 8344 	lcall	_print16Hex
                                   8345 ;	.\ecen4350_lcd_v4.c:1837: setCursor(0, 110);
      0029AA 75 6B 6E         [24] 8346 	mov	_setCursor_PARM_2,#0x6e
      0029AD 75 6C 00         [24] 8347 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029B0 90 00 00         [24] 8348 	mov	dptr,#0x0000
      0029B3 12 05 5D         [24] 8349 	lcall	_setCursor
                                   8350 ;	.\ecen4350_lcd_v4.c:1838: setColorDefault();
      0029B6 12 16 3B         [24] 8351 	lcall	_setColorDefault
                                   8352 ;	.\ecen4350_lcd_v4.c:1839: LCD_string_write("\n ");
      0029B9 90 57 EC         [24] 8353 	mov	dptr,#___str_66
      0029BC 75 F0 80         [24] 8354 	mov	b,#0x80
      0029BF 12 10 77         [24] 8355 	lcall	_LCD_string_write
                                   8356 ;	.\ecen4350_lcd_v4.c:1840: setColorHighlight2();
      0029C2 12 16 5D         [24] 8357 	lcall	_setColorHighlight2
      0029C5 D0 03            [24] 8358 	pop	ar3
      0029C7 D0 04            [24] 8359 	pop	ar4
                                   8360 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8361 ;	assignBit
      0029C9 C2 B5            [12] 8362 	clr	_P3_5
                                   8363 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0029CB 8B 82            [24] 8364 	mov	dpl,r3
      0029CD 8C 83            [24] 8365 	mov	dph,r4
      0029CF E0               [24] 8366 	movx	a,@dptr
      0029D0 F5 82            [12] 8367 	mov	dpl,a
                                   8368 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8369 ;	assignBit
      0029D2 D2 B5            [12] 8370 	setb	_P3_5
                                   8371 ;	.\ecen4350_lcd_v4.c:1841: print8Hex(ramRead8(d));
      0029D4 C0 04            [24] 8372 	push	ar4
      0029D6 C0 03            [24] 8373 	push	ar3
      0029D8 12 15 48         [24] 8374 	lcall	_print8Hex
                                   8375 ;	.\ecen4350_lcd_v4.c:1844: setCursor(0, 160);
      0029DB 75 6B A0         [24] 8376 	mov	_setCursor_PARM_2,#0xa0
      0029DE 75 6C 00         [24] 8377 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029E1 90 00 00         [24] 8378 	mov	dptr,#0x0000
      0029E4 12 05 5D         [24] 8379 	lcall	_setCursor
                                   8380 ;	.\ecen4350_lcd_v4.c:1845: setColorSelect();
      0029E7 12 16 46         [24] 8381 	lcall	_setColorSelect
                                   8382 ;	.\ecen4350_lcd_v4.c:1846: LCD_string_write(" Enter New Value:\n ");
      0029EA 90 57 EF         [24] 8383 	mov	dptr,#___str_67
      0029ED 75 F0 80         [24] 8384 	mov	b,#0x80
      0029F0 12 10 77         [24] 8385 	lcall	_LCD_string_write
                                   8386 ;	.\ecen4350_lcd_v4.c:1847: setColorHighlight1();
      0029F3 12 16 51         [24] 8387 	lcall	_setColorHighlight1
                                   8388 ;	.\ecen4350_lcd_v4.c:1848: selection = keyDetect();
      0029F6 12 11 95         [24] 8389 	lcall	_keyDetect
      0029F9 AA 82            [24] 8390 	mov	r2,dpl
      0029FB 78 71            [12] 8391 	mov	r0,#_selection
      0029FD A6 02            [24] 8392 	mov	@r0,ar2
                                   8393 ;	.\ecen4350_lcd_v4.c:1849: write(selection);
      0029FF 8A 82            [24] 8394 	mov	dpl,r2
      002A01 12 10 11         [24] 8395 	lcall	_write
                                   8396 ;	.\ecen4350_lcd_v4.c:1850: selection = ASCIItoHex(selection);
      002A04 78 71            [12] 8397 	mov	r0,#_selection
      002A06 86 82            [24] 8398 	mov	dpl,@r0
      002A08 12 14 03         [24] 8399 	lcall	_ASCIItoHex
      002A0B AA 82            [24] 8400 	mov	r2,dpl
      002A0D 78 71            [12] 8401 	mov	r0,#_selection
      002A0F A6 02            [24] 8402 	mov	@r0,ar2
                                   8403 ;	.\ecen4350_lcd_v4.c:1851: value |= selection * 16;
      002A11 EA               [12] 8404 	mov	a,r2
      002A12 C4               [12] 8405 	swap	a
      002A13 54 F0            [12] 8406 	anl	a,#0xf0
      002A15 FA               [12] 8407 	mov	r2,a
                                   8408 ;	.\ecen4350_lcd_v4.c:1852: selection = keyDetect();
      002A16 C0 02            [24] 8409 	push	ar2
      002A18 12 11 95         [24] 8410 	lcall	_keyDetect
      002A1B AF 82            [24] 8411 	mov	r7,dpl
      002A1D 78 71            [12] 8412 	mov	r0,#_selection
      002A1F A6 07            [24] 8413 	mov	@r0,ar7
                                   8414 ;	.\ecen4350_lcd_v4.c:1853: write(selection);
      002A21 8F 82            [24] 8415 	mov	dpl,r7
      002A23 12 10 11         [24] 8416 	lcall	_write
                                   8417 ;	.\ecen4350_lcd_v4.c:1854: selection = ASCIItoHex(selection);
      002A26 78 71            [12] 8418 	mov	r0,#_selection
      002A28 86 82            [24] 8419 	mov	dpl,@r0
      002A2A 12 14 03         [24] 8420 	lcall	_ASCIItoHex
      002A2D AF 82            [24] 8421 	mov	r7,dpl
      002A2F D0 02            [24] 8422 	pop	ar2
      002A31 D0 03            [24] 8423 	pop	ar3
      002A33 D0 04            [24] 8424 	pop	ar4
      002A35 D0 05            [24] 8425 	pop	ar5
      002A37 D0 06            [24] 8426 	pop	ar6
      002A39 78 71            [12] 8427 	mov	r0,#_selection
      002A3B A6 07            [24] 8428 	mov	@r0,ar7
                                   8429 ;	.\ecen4350_lcd_v4.c:1855: value |= selection;
      002A3D EA               [12] 8430 	mov	a,r2
      002A3E 42 07            [12] 8431 	orl	ar7,a
                                   8432 ;	.\ecen4350_lcd_v4.c:1858: setColorDefault();
      002A40 C0 07            [24] 8433 	push	ar7
      002A42 C0 06            [24] 8434 	push	ar6
      002A44 C0 05            [24] 8435 	push	ar5
      002A46 C0 04            [24] 8436 	push	ar4
      002A48 C0 03            [24] 8437 	push	ar3
      002A4A 12 16 3B         [24] 8438 	lcall	_setColorDefault
                                   8439 ;	.\ecen4350_lcd_v4.c:1859: setCursor(0, 160);
      002A4D 75 6B A0         [24] 8440 	mov	_setCursor_PARM_2,#0xa0
      002A50 75 6C 00         [24] 8441 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A53 90 00 00         [24] 8442 	mov	dptr,#0x0000
      002A56 12 05 5D         [24] 8443 	lcall	_setCursor
                                   8444 ;	.\ecen4350_lcd_v4.c:1860: LCD_string_write(" Enter New Value:\n ");
      002A59 90 57 EF         [24] 8445 	mov	dptr,#___str_67
      002A5C 75 F0 80         [24] 8446 	mov	b,#0x80
      002A5F 12 10 77         [24] 8447 	lcall	_LCD_string_write
                                   8448 ;	.\ecen4350_lcd_v4.c:1861: setColorHighlight2();
      002A62 12 16 5D         [24] 8449 	lcall	_setColorHighlight2
      002A65 D0 03            [24] 8450 	pop	ar3
      002A67 D0 04            [24] 8451 	pop	ar4
      002A69 D0 05            [24] 8452 	pop	ar5
      002A6B D0 06            [24] 8453 	pop	ar6
      002A6D D0 07            [24] 8454 	pop	ar7
                                   8455 ;	.\ecen4350_lcd_v4.c:1862: print8Hex(value);
      002A6F 8F 82            [24] 8456 	mov	dpl,r7
      002A71 C0 07            [24] 8457 	push	ar7
      002A73 C0 06            [24] 8458 	push	ar6
      002A75 C0 05            [24] 8459 	push	ar5
      002A77 C0 04            [24] 8460 	push	ar4
      002A79 C0 03            [24] 8461 	push	ar3
      002A7B 12 15 48         [24] 8462 	lcall	_print8Hex
      002A7E D0 03            [24] 8463 	pop	ar3
      002A80 D0 04            [24] 8464 	pop	ar4
      002A82 D0 05            [24] 8465 	pop	ar5
      002A84 D0 06            [24] 8466 	pop	ar6
      002A86 D0 07            [24] 8467 	pop	ar7
                                   8468 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8469 ;	assignBit
      002A88 C2 B5            [12] 8470 	clr	_P3_5
                                   8471 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      002A8A 8B 82            [24] 8472 	mov	dpl,r3
      002A8C 8C 83            [24] 8473 	mov	dph,r4
      002A8E EF               [12] 8474 	mov	a,r7
      002A8F F0               [24] 8475 	movx	@dptr,a
                                   8476 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8477 ;	assignBit
      002A90 D2 B5            [12] 8478 	setb	_P3_5
                                   8479 ;	.\ecen4350_lcd_v4.c:1867: setCursor(0, 210);
      002A92 75 6B D2         [24] 8480 	mov	_setCursor_PARM_2,#0xd2
      002A95 75 6C 00         [24] 8481 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A98 90 00 00         [24] 8482 	mov	dptr,#0x0000
      002A9B C0 06            [24] 8483 	push	ar6
      002A9D C0 05            [24] 8484 	push	ar5
      002A9F 12 05 5D         [24] 8485 	lcall	_setCursor
                                   8486 ;	.\ecen4350_lcd_v4.c:1868: setColorSelect();
      002AA2 12 16 46         [24] 8487 	lcall	_setColorSelect
                                   8488 ;	.\ecen4350_lcd_v4.c:1869: LCD_string_write(" Choose Next Action:\n");
      002AA5 90 57 A5         [24] 8489 	mov	dptr,#___str_63
      002AA8 75 F0 80         [24] 8490 	mov	b,#0x80
      002AAB 12 10 77         [24] 8491 	lcall	_LCD_string_write
                                   8492 ;	.\ecen4350_lcd_v4.c:1870: setColorWhite();
      002AAE 12 16 8B         [24] 8493 	lcall	_setColorWhite
                                   8494 ;	.\ecen4350_lcd_v4.c:1871: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002AB1 90 57 BB         [24] 8495 	mov	dptr,#___str_64
      002AB4 75 F0 80         [24] 8496 	mov	b,#0x80
      002AB7 12 10 77         [24] 8497 	lcall	_LCD_string_write
                                   8498 ;	.\ecen4350_lcd_v4.c:1872: LCD_string_write("  <0> Exit");
      002ABA 90 57 E1         [24] 8499 	mov	dptr,#___str_65
      002ABD 75 F0 80         [24] 8500 	mov	b,#0x80
      002AC0 12 10 77         [24] 8501 	lcall	_LCD_string_write
      002AC3 D0 05            [24] 8502 	pop	ar5
      002AC5 D0 06            [24] 8503 	pop	ar6
                                   8504 ;	.\ecen4350_lcd_v4.c:1878: while(exit){
      002AC7                       8505 00109$:
      002AC7 78 7C            [12] 8506 	mov	r0,#_edit_exit_65536_622
      002AC9 E6               [12] 8507 	mov	a,@r0
      002ACA 70 01            [24] 8508 	jnz	00150$
      002ACC 22               [24] 8509 	ret
      002ACD                       8510 00150$:
                                   8511 ;	.\ecen4350_lcd_v4.c:1879: selection = keyDetect();
      002ACD C0 06            [24] 8512 	push	ar6
      002ACF C0 05            [24] 8513 	push	ar5
      002AD1 12 11 95         [24] 8514 	lcall	_keyDetect
      002AD4 AF 82            [24] 8515 	mov	r7,dpl
      002AD6 D0 05            [24] 8516 	pop	ar5
      002AD8 D0 06            [24] 8517 	pop	ar6
      002ADA 78 71            [12] 8518 	mov	r0,#_selection
      002ADC A6 07            [24] 8519 	mov	@r0,ar7
                                   8520 ;	.\ecen4350_lcd_v4.c:1880: invalid = 1;
      002ADE 78 7D            [12] 8521 	mov	r0,#_edit_invalid_65536_622
      002AE0 76 01            [12] 8522 	mov	@r0,#0x01
                                   8523 ;	.\ecen4350_lcd_v4.c:1881: if (selection == '1') {		/* Highlight choice and gray out others */
      002AE2 BF 31 02         [24] 8524 	cjne	r7,#0x31,00151$
      002AE5 80 03            [24] 8525 	sjmp	00152$
      002AE7                       8526 00151$:
      002AE7 02 2C C6         [24] 8527 	ljmp	00102$
      002AEA                       8528 00152$:
                                   8529 ;	.\ecen4350_lcd_v4.c:1882: invalid = 0;
      002AEA 78 7D            [12] 8530 	mov	r0,#_edit_invalid_65536_622
      002AEC 76 00            [12] 8531 	mov	@r0,#0x00
                                   8532 ;	.\ecen4350_lcd_v4.c:1884: setCursor(0, 210);
      002AEE 75 6B D2         [24] 8533 	mov	_setCursor_PARM_2,#0xd2
      002AF1 75 6C 00         [24] 8534 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AF4 90 00 00         [24] 8535 	mov	dptr,#0x0000
      002AF7 C0 06            [24] 8536 	push	ar6
      002AF9 C0 05            [24] 8537 	push	ar5
      002AFB 12 05 5D         [24] 8538 	lcall	_setCursor
                                   8539 ;	.\ecen4350_lcd_v4.c:1885: setColorDefault();
      002AFE 12 16 3B         [24] 8540 	lcall	_setColorDefault
                                   8541 ;	.\ecen4350_lcd_v4.c:1886: LCD_string_write("\n  ");
      002B01 90 56 2B         [24] 8542 	mov	dptr,#___str_35
      002B04 75 F0 80         [24] 8543 	mov	b,#0x80
      002B07 12 10 77         [24] 8544 	lcall	_LCD_string_write
                                   8545 ;	.\ecen4350_lcd_v4.c:1887: setColorHighlight2();
      002B0A 12 16 5D         [24] 8546 	lcall	_setColorHighlight2
                                   8547 ;	.\ecen4350_lcd_v4.c:1888: LCD_string_write("<1> Next Address\n");
      002B0D 90 58 03         [24] 8548 	mov	dptr,#___str_68
      002B10 75 F0 80         [24] 8549 	mov	b,#0x80
      002B13 12 10 77         [24] 8550 	lcall	_LCD_string_write
                                   8551 ;	.\ecen4350_lcd_v4.c:1889: setColorGray();
      002B16 12 16 69         [24] 8552 	lcall	_setColorGray
                                   8553 ;	.\ecen4350_lcd_v4.c:1890: LCD_string_write("\n\n               ");
      002B19 90 58 15         [24] 8554 	mov	dptr,#___str_69
      002B1C 75 F0 80         [24] 8555 	mov	b,#0x80
      002B1F 12 10 77         [24] 8556 	lcall	_LCD_string_write
                                   8557 ;	.\ecen4350_lcd_v4.c:1891: delay(60);
      002B22 90 00 3C         [24] 8558 	mov	dptr,#0x003c
      002B25 12 01 87         [24] 8559 	lcall	_delay
                                   8560 ;	.\ecen4350_lcd_v4.c:1894: setCursor(0, 80);
      002B28 75 6B 50         [24] 8561 	mov	_setCursor_PARM_2,#0x50
      002B2B 75 6C 00         [24] 8562 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B2E 90 00 00         [24] 8563 	mov	dptr,#0x0000
      002B31 12 05 5D         [24] 8564 	lcall	_setCursor
                                   8565 ;	.\ecen4350_lcd_v4.c:1895: setColorGray();
      002B34 12 16 69         [24] 8566 	lcall	_setColorGray
                                   8567 ;	.\ecen4350_lcd_v4.c:1896: LCD_string_write(" 0x____");
      002B37 90 55 7F         [24] 8568 	mov	dptr,#___str_23
      002B3A 75 F0 80         [24] 8569 	mov	b,#0x80
      002B3D 12 10 77         [24] 8570 	lcall	_LCD_string_write
                                   8571 ;	.\ecen4350_lcd_v4.c:1897: setCursor(0, 110);
      002B40 75 6B 6E         [24] 8572 	mov	_setCursor_PARM_2,#0x6e
      002B43 75 6C 00         [24] 8573 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B46 90 00 00         [24] 8574 	mov	dptr,#0x0000
      002B49 12 05 5D         [24] 8575 	lcall	_setCursor
                                   8576 ;	.\ecen4350_lcd_v4.c:1898: LCD_string_write("\n __");
      002B4C 90 58 27         [24] 8577 	mov	dptr,#___str_70
      002B4F 75 F0 80         [24] 8578 	mov	b,#0x80
      002B52 12 10 77         [24] 8579 	lcall	_LCD_string_write
                                   8580 ;	.\ecen4350_lcd_v4.c:1899: setCursor(0, 160);
      002B55 75 6B A0         [24] 8581 	mov	_setCursor_PARM_2,#0xa0
      002B58 75 6C 00         [24] 8582 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B5B 90 00 00         [24] 8583 	mov	dptr,#0x0000
      002B5E 12 05 5D         [24] 8584 	lcall	_setCursor
                                   8585 ;	.\ecen4350_lcd_v4.c:1900: LCD_string_write("\n __");
      002B61 90 58 27         [24] 8586 	mov	dptr,#___str_70
      002B64 75 F0 80         [24] 8587 	mov	b,#0x80
      002B67 12 10 77         [24] 8588 	lcall	_LCD_string_write
                                   8589 ;	.\ecen4350_lcd_v4.c:1901: setCursor(0, 210);
      002B6A 75 6B D2         [24] 8590 	mov	_setCursor_PARM_2,#0xd2
      002B6D 75 6C 00         [24] 8591 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B70 90 00 00         [24] 8592 	mov	dptr,#0x0000
      002B73 12 05 5D         [24] 8593 	lcall	_setCursor
                                   8594 ;	.\ecen4350_lcd_v4.c:1902: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002B76 90 58 2C         [24] 8595 	mov	dptr,#___str_71
      002B79 75 F0 80         [24] 8596 	mov	b,#0x80
      002B7C 12 10 77         [24] 8597 	lcall	_LCD_string_write
      002B7F D0 05            [24] 8598 	pop	ar5
      002B81 D0 06            [24] 8599 	pop	ar6
                                   8600 ;	.\ecen4350_lcd_v4.c:1905: address++;
      002B83 0D               [12] 8601 	inc	r5
      002B84 BD 00 01         [24] 8602 	cjne	r5,#0x00,00153$
      002B87 0E               [12] 8603 	inc	r6
      002B88                       8604 00153$:
                                   8605 ;	.\ecen4350_lcd_v4.c:1906: d = (unsigned char __xdata*)address;
      002B88 8D 5F            [24] 8606 	mov	_edit_d_65536_622,r5
      002B8A 8E 60            [24] 8607 	mov	(_edit_d_65536_622 + 1),r6
                                   8608 ;	.\ecen4350_lcd_v4.c:1907: setCursor(0, 80);
      002B8C 75 6B 50         [24] 8609 	mov	_setCursor_PARM_2,#0x50
      002B8F 75 6C 00         [24] 8610 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B92 90 00 00         [24] 8611 	mov	dptr,#0x0000
      002B95 C0 06            [24] 8612 	push	ar6
      002B97 C0 05            [24] 8613 	push	ar5
      002B99 12 05 5D         [24] 8614 	lcall	_setCursor
                                   8615 ;	.\ecen4350_lcd_v4.c:1908: LCD_string_write(" ");
      002B9C 90 55 E1         [24] 8616 	mov	dptr,#___str_29
      002B9F 75 F0 80         [24] 8617 	mov	b,#0x80
      002BA2 12 10 77         [24] 8618 	lcall	_LCD_string_write
                                   8619 ;	.\ecen4350_lcd_v4.c:1909: setColorHighlight2();
      002BA5 12 16 5D         [24] 8620 	lcall	_setColorHighlight2
                                   8621 ;	.\ecen4350_lcd_v4.c:1910: LCD_string_write("0x");
      002BA8 90 54 B4         [24] 8622 	mov	dptr,#___str_2
      002BAB 75 F0 80         [24] 8623 	mov	b,#0x80
      002BAE 12 10 77         [24] 8624 	lcall	_LCD_string_write
      002BB1 D0 05            [24] 8625 	pop	ar5
      002BB3 D0 06            [24] 8626 	pop	ar6
                                   8627 ;	.\ecen4350_lcd_v4.c:1911: print16Hex(address);		// print 16-bit address from stored memory
      002BB5 8D 82            [24] 8628 	mov	dpl,r5
      002BB7 8E 83            [24] 8629 	mov	dph,r6
      002BB9 C0 06            [24] 8630 	push	ar6
      002BBB C0 05            [24] 8631 	push	ar5
      002BBD 12 15 5F         [24] 8632 	lcall	_print16Hex
                                   8633 ;	.\ecen4350_lcd_v4.c:1914: setCursor(0, 110);
      002BC0 75 6B 6E         [24] 8634 	mov	_setCursor_PARM_2,#0x6e
      002BC3 75 6C 00         [24] 8635 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BC6 90 00 00         [24] 8636 	mov	dptr,#0x0000
      002BC9 12 05 5D         [24] 8637 	lcall	_setCursor
                                   8638 ;	.\ecen4350_lcd_v4.c:1915: setColorDefault();
      002BCC 12 16 3B         [24] 8639 	lcall	_setColorDefault
                                   8640 ;	.\ecen4350_lcd_v4.c:1916: LCD_string_write("\n ");
      002BCF 90 57 EC         [24] 8641 	mov	dptr,#___str_66
      002BD2 75 F0 80         [24] 8642 	mov	b,#0x80
      002BD5 12 10 77         [24] 8643 	lcall	_LCD_string_write
                                   8644 ;	.\ecen4350_lcd_v4.c:1917: setColorHighlight2();
      002BD8 12 16 5D         [24] 8645 	lcall	_setColorHighlight2
                                   8646 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8647 ;	assignBit
      002BDB C2 B5            [12] 8648 	clr	_P3_5
                                   8649 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002BDD 85 5F 82         [24] 8650 	mov	dpl,_edit_d_65536_622
      002BE0 85 60 83         [24] 8651 	mov	dph,(_edit_d_65536_622 + 1)
      002BE3 E0               [24] 8652 	movx	a,@dptr
      002BE4 FA               [12] 8653 	mov	r2,a
                                   8654 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8655 ;	assignBit
      002BE5 D2 B5            [12] 8656 	setb	_P3_5
                                   8657 ;	.\ecen4350_lcd_v4.c:1918: print8Hex(ramRead8(d));
      002BE7 8A 82            [24] 8658 	mov	dpl,r2
      002BE9 12 15 48         [24] 8659 	lcall	_print8Hex
                                   8660 ;	.\ecen4350_lcd_v4.c:1921: setCursor(0, 160);
      002BEC 75 6B A0         [24] 8661 	mov	_setCursor_PARM_2,#0xa0
      002BEF 75 6C 00         [24] 8662 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BF2 90 00 00         [24] 8663 	mov	dptr,#0x0000
      002BF5 12 05 5D         [24] 8664 	lcall	_setCursor
                                   8665 ;	.\ecen4350_lcd_v4.c:1922: setColorSelect();
      002BF8 12 16 46         [24] 8666 	lcall	_setColorSelect
                                   8667 ;	.\ecen4350_lcd_v4.c:1923: LCD_string_write(" Enter New Value:\n ");
      002BFB 90 57 EF         [24] 8668 	mov	dptr,#___str_67
      002BFE 75 F0 80         [24] 8669 	mov	b,#0x80
      002C01 12 10 77         [24] 8670 	lcall	_LCD_string_write
                                   8671 ;	.\ecen4350_lcd_v4.c:1924: setColorHighlight1();
      002C04 12 16 51         [24] 8672 	lcall	_setColorHighlight1
                                   8673 ;	.\ecen4350_lcd_v4.c:1925: selection = keyDetect();
      002C07 12 11 95         [24] 8674 	lcall	_keyDetect
      002C0A AA 82            [24] 8675 	mov	r2,dpl
      002C0C 78 71            [12] 8676 	mov	r0,#_selection
      002C0E A6 02            [24] 8677 	mov	@r0,ar2
                                   8678 ;	.\ecen4350_lcd_v4.c:1926: write(selection);
      002C10 8A 82            [24] 8679 	mov	dpl,r2
      002C12 12 10 11         [24] 8680 	lcall	_write
                                   8681 ;	.\ecen4350_lcd_v4.c:1927: selection = ASCIItoHex(selection);
      002C15 78 71            [12] 8682 	mov	r0,#_selection
      002C17 86 82            [24] 8683 	mov	dpl,@r0
      002C19 12 14 03         [24] 8684 	lcall	_ASCIItoHex
      002C1C AA 82            [24] 8685 	mov	r2,dpl
      002C1E 78 71            [12] 8686 	mov	r0,#_selection
      002C20 A6 02            [24] 8687 	mov	@r0,ar2
                                   8688 ;	.\ecen4350_lcd_v4.c:1928: value |= selection * 16;
      002C22 EA               [12] 8689 	mov	a,r2
      002C23 C4               [12] 8690 	swap	a
      002C24 54 F0            [12] 8691 	anl	a,#0xf0
      002C26 FA               [12] 8692 	mov	r2,a
                                   8693 ;	.\ecen4350_lcd_v4.c:1929: selection = keyDetect();
      002C27 C0 02            [24] 8694 	push	ar2
      002C29 12 11 95         [24] 8695 	lcall	_keyDetect
      002C2C AF 82            [24] 8696 	mov	r7,dpl
      002C2E 78 71            [12] 8697 	mov	r0,#_selection
      002C30 A6 07            [24] 8698 	mov	@r0,ar7
                                   8699 ;	.\ecen4350_lcd_v4.c:1930: write(selection);
      002C32 8F 82            [24] 8700 	mov	dpl,r7
      002C34 12 10 11         [24] 8701 	lcall	_write
                                   8702 ;	.\ecen4350_lcd_v4.c:1931: selection = ASCIItoHex(selection);
      002C37 78 71            [12] 8703 	mov	r0,#_selection
      002C39 86 82            [24] 8704 	mov	dpl,@r0
      002C3B 12 14 03         [24] 8705 	lcall	_ASCIItoHex
      002C3E AF 82            [24] 8706 	mov	r7,dpl
      002C40 D0 02            [24] 8707 	pop	ar2
      002C42 D0 05            [24] 8708 	pop	ar5
      002C44 D0 06            [24] 8709 	pop	ar6
      002C46 78 71            [12] 8710 	mov	r0,#_selection
      002C48 A6 07            [24] 8711 	mov	@r0,ar7
                                   8712 ;	.\ecen4350_lcd_v4.c:1932: value |= selection;
      002C4A EA               [12] 8713 	mov	a,r2
      002C4B 42 07            [12] 8714 	orl	ar7,a
                                   8715 ;	.\ecen4350_lcd_v4.c:1935: setColorDefault();
      002C4D C0 07            [24] 8716 	push	ar7
      002C4F C0 06            [24] 8717 	push	ar6
      002C51 C0 05            [24] 8718 	push	ar5
      002C53 12 16 3B         [24] 8719 	lcall	_setColorDefault
                                   8720 ;	.\ecen4350_lcd_v4.c:1936: setCursor(0, 160);
      002C56 75 6B A0         [24] 8721 	mov	_setCursor_PARM_2,#0xa0
      002C59 75 6C 00         [24] 8722 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C5C 90 00 00         [24] 8723 	mov	dptr,#0x0000
      002C5F 12 05 5D         [24] 8724 	lcall	_setCursor
                                   8725 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Enter New Value:\n ");
      002C62 90 57 EF         [24] 8726 	mov	dptr,#___str_67
      002C65 75 F0 80         [24] 8727 	mov	b,#0x80
      002C68 12 10 77         [24] 8728 	lcall	_LCD_string_write
                                   8729 ;	.\ecen4350_lcd_v4.c:1938: setColorHighlight2();
      002C6B 12 16 5D         [24] 8730 	lcall	_setColorHighlight2
      002C6E D0 05            [24] 8731 	pop	ar5
      002C70 D0 06            [24] 8732 	pop	ar6
      002C72 D0 07            [24] 8733 	pop	ar7
                                   8734 ;	.\ecen4350_lcd_v4.c:1939: print8Hex(value);
      002C74 8F 82            [24] 8735 	mov	dpl,r7
      002C76 C0 07            [24] 8736 	push	ar7
      002C78 C0 06            [24] 8737 	push	ar6
      002C7A C0 05            [24] 8738 	push	ar5
      002C7C 12 15 48         [24] 8739 	lcall	_print8Hex
      002C7F D0 05            [24] 8740 	pop	ar5
      002C81 D0 06            [24] 8741 	pop	ar6
      002C83 D0 07            [24] 8742 	pop	ar7
                                   8743 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   8744 ;	assignBit
      002C85 C2 B5            [12] 8745 	clr	_P3_5
                                   8746 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      002C87 85 5F 82         [24] 8747 	mov	dpl,_edit_d_65536_622
      002C8A 85 60 83         [24] 8748 	mov	dph,(_edit_d_65536_622 + 1)
      002C8D EF               [12] 8749 	mov	a,r7
      002C8E F0               [24] 8750 	movx	@dptr,a
                                   8751 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   8752 ;	assignBit
      002C8F D2 B5            [12] 8753 	setb	_P3_5
                                   8754 ;	.\ecen4350_lcd_v4.c:1944: setCursor(0, 210);
      002C91 75 6B D2         [24] 8755 	mov	_setCursor_PARM_2,#0xd2
      002C94 75 6C 00         [24] 8756 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C97 90 00 00         [24] 8757 	mov	dptr,#0x0000
      002C9A C0 06            [24] 8758 	push	ar6
      002C9C C0 05            [24] 8759 	push	ar5
      002C9E 12 05 5D         [24] 8760 	lcall	_setCursor
                                   8761 ;	.\ecen4350_lcd_v4.c:1945: setColorSelect();
      002CA1 12 16 46         [24] 8762 	lcall	_setColorSelect
                                   8763 ;	.\ecen4350_lcd_v4.c:1946: LCD_string_write(" Choose Next Action:\n");
      002CA4 90 57 A5         [24] 8764 	mov	dptr,#___str_63
      002CA7 75 F0 80         [24] 8765 	mov	b,#0x80
      002CAA 12 10 77         [24] 8766 	lcall	_LCD_string_write
                                   8767 ;	.\ecen4350_lcd_v4.c:1947: setColorWhite();
      002CAD 12 16 8B         [24] 8768 	lcall	_setColorWhite
                                   8769 ;	.\ecen4350_lcd_v4.c:1948: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002CB0 90 57 BB         [24] 8770 	mov	dptr,#___str_64
      002CB3 75 F0 80         [24] 8771 	mov	b,#0x80
      002CB6 12 10 77         [24] 8772 	lcall	_LCD_string_write
                                   8773 ;	.\ecen4350_lcd_v4.c:1949: LCD_string_write("  <0> Exit");
      002CB9 90 57 E1         [24] 8774 	mov	dptr,#___str_65
      002CBC 75 F0 80         [24] 8775 	mov	b,#0x80
      002CBF 12 10 77         [24] 8776 	lcall	_LCD_string_write
      002CC2 D0 05            [24] 8777 	pop	ar5
      002CC4 D0 06            [24] 8778 	pop	ar6
      002CC6                       8779 00102$:
                                   8780 ;	.\ecen4350_lcd_v4.c:1951: if (selection == '2') {			/* Highlight choice and gray out others*/
      002CC6 78 71            [12] 8781 	mov	r0,#_selection
      002CC8 B6 32 02         [24] 8782 	cjne	@r0,#0x32,00154$
      002CCB 80 03            [24] 8783 	sjmp	00155$
      002CCD                       8784 00154$:
      002CCD 02 2F 12         [24] 8785 	ljmp	00104$
      002CD0                       8786 00155$:
                                   8787 ;	.\ecen4350_lcd_v4.c:1952: invalid = 0;
      002CD0 78 7D            [12] 8788 	mov	r0,#_edit_invalid_65536_622
      002CD2 76 00            [12] 8789 	mov	@r0,#0x00
                                   8790 ;	.\ecen4350_lcd_v4.c:1954: setCursor(0, 210);
      002CD4 75 6B D2         [24] 8791 	mov	_setCursor_PARM_2,#0xd2
      002CD7 75 6C 00         [24] 8792 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CDA 90 00 00         [24] 8793 	mov	dptr,#0x0000
      002CDD 12 05 5D         [24] 8794 	lcall	_setCursor
                                   8795 ;	.\ecen4350_lcd_v4.c:1955: setColorDefault();
      002CE0 12 16 3B         [24] 8796 	lcall	_setColorDefault
                                   8797 ;	.\ecen4350_lcd_v4.c:1956: LCD_string_write(" Choose Next Action:\n  ");
      002CE3 90 58 5D         [24] 8798 	mov	dptr,#___str_72
      002CE6 75 F0 80         [24] 8799 	mov	b,#0x80
      002CE9 12 10 77         [24] 8800 	lcall	_LCD_string_write
                                   8801 ;	.\ecen4350_lcd_v4.c:1957: setColorGray();
      002CEC 12 16 69         [24] 8802 	lcall	_setColorGray
                                   8803 ;	.\ecen4350_lcd_v4.c:1958: LCD_string_write("\n  ");
      002CEF 90 56 2B         [24] 8804 	mov	dptr,#___str_35
      002CF2 75 F0 80         [24] 8805 	mov	b,#0x80
      002CF5 12 10 77         [24] 8806 	lcall	_LCD_string_write
                                   8807 ;	.\ecen4350_lcd_v4.c:1959: setColorHighlight2();
      002CF8 12 16 5D         [24] 8808 	lcall	_setColorHighlight2
                                   8809 ;	.\ecen4350_lcd_v4.c:1960: LCD_string_write("<2> New Address\n");
      002CFB 90 58 75         [24] 8810 	mov	dptr,#___str_73
      002CFE 75 F0 80         [24] 8811 	mov	b,#0x80
      002D01 12 10 77         [24] 8812 	lcall	_LCD_string_write
                                   8813 ;	.\ecen4350_lcd_v4.c:1961: setColorGray();
      002D04 12 16 69         [24] 8814 	lcall	_setColorGray
                                   8815 ;	.\ecen4350_lcd_v4.c:1962: LCD_string_write("\n               ");
      002D07 90 58 86         [24] 8816 	mov	dptr,#___str_74
      002D0A 75 F0 80         [24] 8817 	mov	b,#0x80
      002D0D 12 10 77         [24] 8818 	lcall	_LCD_string_write
                                   8819 ;	.\ecen4350_lcd_v4.c:1963: delay(60);
      002D10 90 00 3C         [24] 8820 	mov	dptr,#0x003c
      002D13 12 01 87         [24] 8821 	lcall	_delay
                                   8822 ;	.\ecen4350_lcd_v4.c:1966: setCursor(0, 80);
      002D16 75 6B 50         [24] 8823 	mov	_setCursor_PARM_2,#0x50
      002D19 75 6C 00         [24] 8824 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D1C 90 00 00         [24] 8825 	mov	dptr,#0x0000
      002D1F 12 05 5D         [24] 8826 	lcall	_setCursor
                                   8827 ;	.\ecen4350_lcd_v4.c:1967: setColorGray();
      002D22 12 16 69         [24] 8828 	lcall	_setColorGray
                                   8829 ;	.\ecen4350_lcd_v4.c:1968: LCD_string_write(" 0x____");
      002D25 90 55 7F         [24] 8830 	mov	dptr,#___str_23
      002D28 75 F0 80         [24] 8831 	mov	b,#0x80
      002D2B 12 10 77         [24] 8832 	lcall	_LCD_string_write
                                   8833 ;	.\ecen4350_lcd_v4.c:1969: setCursor(0, 110);
      002D2E 75 6B 6E         [24] 8834 	mov	_setCursor_PARM_2,#0x6e
      002D31 75 6C 00         [24] 8835 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D34 90 00 00         [24] 8836 	mov	dptr,#0x0000
      002D37 12 05 5D         [24] 8837 	lcall	_setCursor
                                   8838 ;	.\ecen4350_lcd_v4.c:1970: LCD_string_write("\n __");
      002D3A 90 58 27         [24] 8839 	mov	dptr,#___str_70
      002D3D 75 F0 80         [24] 8840 	mov	b,#0x80
      002D40 12 10 77         [24] 8841 	lcall	_LCD_string_write
                                   8842 ;	.\ecen4350_lcd_v4.c:1971: setCursor(0, 160);
      002D43 75 6B A0         [24] 8843 	mov	_setCursor_PARM_2,#0xa0
      002D46 75 6C 00         [24] 8844 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D49 90 00 00         [24] 8845 	mov	dptr,#0x0000
      002D4C 12 05 5D         [24] 8846 	lcall	_setCursor
                                   8847 ;	.\ecen4350_lcd_v4.c:1972: LCD_string_write("\n __");
      002D4F 90 58 27         [24] 8848 	mov	dptr,#___str_70
      002D52 75 F0 80         [24] 8849 	mov	b,#0x80
      002D55 12 10 77         [24] 8850 	lcall	_LCD_string_write
                                   8851 ;	.\ecen4350_lcd_v4.c:1973: setCursor(0, 210);
      002D58 75 6B D2         [24] 8852 	mov	_setCursor_PARM_2,#0xd2
      002D5B 75 6C 00         [24] 8853 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D5E 90 00 00         [24] 8854 	mov	dptr,#0x0000
      002D61 12 05 5D         [24] 8855 	lcall	_setCursor
                                   8856 ;	.\ecen4350_lcd_v4.c:1974: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002D64 90 58 2C         [24] 8857 	mov	dptr,#___str_71
      002D67 75 F0 80         [24] 8858 	mov	b,#0x80
      002D6A 12 10 77         [24] 8859 	lcall	_LCD_string_write
                                   8860 ;	.\ecen4350_lcd_v4.c:1977: setCursor(0, 60);
      002D6D 75 6B 3C         [24] 8861 	mov	_setCursor_PARM_2,#0x3c
      002D70 75 6C 00         [24] 8862 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D73 90 00 00         [24] 8863 	mov	dptr,#0x0000
      002D76 12 05 5D         [24] 8864 	lcall	_setCursor
                                   8865 ;	.\ecen4350_lcd_v4.c:1978: setColorSelect();
      002D79 12 16 46         [24] 8866 	lcall	_setColorSelect
                                   8867 ;	.\ecen4350_lcd_v4.c:1979: LCD_string_write(" Edit Address");
      002D7C 90 58 97         [24] 8868 	mov	dptr,#___str_75
      002D7F 75 F0 80         [24] 8869 	mov	b,#0x80
      002D82 12 10 77         [24] 8870 	lcall	_LCD_string_write
                                   8871 ;	.\ecen4350_lcd_v4.c:1980: setCursor(0, 80);
      002D85 75 6B 50         [24] 8872 	mov	_setCursor_PARM_2,#0x50
      002D88 75 6C 00         [24] 8873 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D8B 90 00 00         [24] 8874 	mov	dptr,#0x0000
      002D8E 12 05 5D         [24] 8875 	lcall	_setCursor
                                   8876 ;	.\ecen4350_lcd_v4.c:1981: LCD_string_write(" ");
      002D91 90 55 E1         [24] 8877 	mov	dptr,#___str_29
      002D94 75 F0 80         [24] 8878 	mov	b,#0x80
      002D97 12 10 77         [24] 8879 	lcall	_LCD_string_write
                                   8880 ;	.\ecen4350_lcd_v4.c:1982: setColorHighlight1();
      002D9A 12 16 51         [24] 8881 	lcall	_setColorHighlight1
                                   8882 ;	.\ecen4350_lcd_v4.c:1983: LCD_string_write("0x");
      002D9D 90 54 B4         [24] 8883 	mov	dptr,#___str_2
      002DA0 75 F0 80         [24] 8884 	mov	b,#0x80
      002DA3 12 10 77         [24] 8885 	lcall	_LCD_string_write
                                   8886 ;	.\ecen4350_lcd_v4.c:1984: address = inputAddress();		// input 16-bit address and store in memory
      002DA6 12 16 AC         [24] 8887 	lcall	_inputAddress
      002DA9 AD 82            [24] 8888 	mov	r5,dpl
      002DAB AE 83            [24] 8889 	mov	r6,dph
                                   8890 ;	.\ecen4350_lcd_v4.c:1985: d = (unsigned char __xdata*)address;
      002DAD 8D 03            [24] 8891 	mov	ar3,r5
      002DAF 8E 07            [24] 8892 	mov	ar7,r6
                                   8893 ;	.\ecen4350_lcd_v4.c:1988: setColorDefault();
      002DB1 C0 07            [24] 8894 	push	ar7
      002DB3 C0 06            [24] 8895 	push	ar6
      002DB5 C0 05            [24] 8896 	push	ar5
      002DB7 C0 03            [24] 8897 	push	ar3
      002DB9 12 16 3B         [24] 8898 	lcall	_setColorDefault
                                   8899 ;	.\ecen4350_lcd_v4.c:1989: setCursor(0, 60);
      002DBC 75 6B 3C         [24] 8900 	mov	_setCursor_PARM_2,#0x3c
      002DBF 75 6C 00         [24] 8901 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DC2 90 00 00         [24] 8902 	mov	dptr,#0x0000
      002DC5 12 05 5D         [24] 8903 	lcall	_setCursor
                                   8904 ;	.\ecen4350_lcd_v4.c:1990: LCD_string_write(" Edit Address:");
      002DC8 90 57 6A         [24] 8905 	mov	dptr,#___str_59
      002DCB 75 F0 80         [24] 8906 	mov	b,#0x80
      002DCE 12 10 77         [24] 8907 	lcall	_LCD_string_write
                                   8908 ;	.\ecen4350_lcd_v4.c:1991: setCursor(0, 80);
      002DD1 75 6B 50         [24] 8909 	mov	_setCursor_PARM_2,#0x50
      002DD4 75 6C 00         [24] 8910 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DD7 90 00 00         [24] 8911 	mov	dptr,#0x0000
      002DDA 12 05 5D         [24] 8912 	lcall	_setCursor
                                   8913 ;	.\ecen4350_lcd_v4.c:1992: LCD_string_write(" ");
      002DDD 90 55 E1         [24] 8914 	mov	dptr,#___str_29
      002DE0 75 F0 80         [24] 8915 	mov	b,#0x80
      002DE3 12 10 77         [24] 8916 	lcall	_LCD_string_write
                                   8917 ;	.\ecen4350_lcd_v4.c:1993: setColorHighlight2();
      002DE6 12 16 5D         [24] 8918 	lcall	_setColorHighlight2
                                   8919 ;	.\ecen4350_lcd_v4.c:1994: LCD_string_write("0x");
      002DE9 90 54 B4         [24] 8920 	mov	dptr,#___str_2
      002DEC 75 F0 80         [24] 8921 	mov	b,#0x80
      002DEF 12 10 77         [24] 8922 	lcall	_LCD_string_write
      002DF2 D0 03            [24] 8923 	pop	ar3
      002DF4 D0 05            [24] 8924 	pop	ar5
      002DF6 D0 06            [24] 8925 	pop	ar6
                                   8926 ;	.\ecen4350_lcd_v4.c:1995: print16Hex(address);		// print 16-bit address from stored memory
      002DF8 8D 82            [24] 8927 	mov	dpl,r5
      002DFA 8E 83            [24] 8928 	mov	dph,r6
      002DFC C0 06            [24] 8929 	push	ar6
      002DFE C0 05            [24] 8930 	push	ar5
      002E00 C0 03            [24] 8931 	push	ar3
      002E02 12 15 5F         [24] 8932 	lcall	_print16Hex
                                   8933 ;	.\ecen4350_lcd_v4.c:1998: setCursor(0, 110);
      002E05 75 6B 6E         [24] 8934 	mov	_setCursor_PARM_2,#0x6e
      002E08 75 6C 00         [24] 8935 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E0B 90 00 00         [24] 8936 	mov	dptr,#0x0000
      002E0E 12 05 5D         [24] 8937 	lcall	_setCursor
                                   8938 ;	.\ecen4350_lcd_v4.c:1999: setColorDefault();
      002E11 12 16 3B         [24] 8939 	lcall	_setColorDefault
                                   8940 ;	.\ecen4350_lcd_v4.c:2000: LCD_string_write("\n ");
      002E14 90 57 EC         [24] 8941 	mov	dptr,#___str_66
      002E17 75 F0 80         [24] 8942 	mov	b,#0x80
      002E1A 12 10 77         [24] 8943 	lcall	_LCD_string_write
                                   8944 ;	.\ecen4350_lcd_v4.c:2001: setColorHighlight2();
      002E1D 12 16 5D         [24] 8945 	lcall	_setColorHighlight2
      002E20 D0 03            [24] 8946 	pop	ar3
      002E22 D0 05            [24] 8947 	pop	ar5
      002E24 D0 06            [24] 8948 	pop	ar6
      002E26 D0 07            [24] 8949 	pop	ar7
                                   8950 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   8951 ;	assignBit
      002E28 C2 B5            [12] 8952 	clr	_P3_5
                                   8953 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      002E2A 8B 82            [24] 8954 	mov	dpl,r3
      002E2C 8F 83            [24] 8955 	mov	dph,r7
      002E2E E0               [24] 8956 	movx	a,@dptr
      002E2F F5 82            [12] 8957 	mov	dpl,a
                                   8958 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   8959 ;	assignBit
      002E31 D2 B5            [12] 8960 	setb	_P3_5
                                   8961 ;	.\ecen4350_lcd_v4.c:2002: print8Hex(ramRead8(d));
      002E33 C0 07            [24] 8962 	push	ar7
      002E35 C0 06            [24] 8963 	push	ar6
      002E37 C0 05            [24] 8964 	push	ar5
      002E39 C0 03            [24] 8965 	push	ar3
      002E3B 12 15 48         [24] 8966 	lcall	_print8Hex
                                   8967 ;	.\ecen4350_lcd_v4.c:2005: setCursor(0, 160);
      002E3E 75 6B A0         [24] 8968 	mov	_setCursor_PARM_2,#0xa0
      002E41 75 6C 00         [24] 8969 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E44 90 00 00         [24] 8970 	mov	dptr,#0x0000
      002E47 12 05 5D         [24] 8971 	lcall	_setCursor
                                   8972 ;	.\ecen4350_lcd_v4.c:2006: setColorSelect();
      002E4A 12 16 46         [24] 8973 	lcall	_setColorSelect
                                   8974 ;	.\ecen4350_lcd_v4.c:2007: LCD_string_write(" Enter New Value:\n ");
      002E4D 90 57 EF         [24] 8975 	mov	dptr,#___str_67
      002E50 75 F0 80         [24] 8976 	mov	b,#0x80
      002E53 12 10 77         [24] 8977 	lcall	_LCD_string_write
                                   8978 ;	.\ecen4350_lcd_v4.c:2008: setColorHighlight1();
      002E56 12 16 51         [24] 8979 	lcall	_setColorHighlight1
                                   8980 ;	.\ecen4350_lcd_v4.c:2009: selection = keyDetect();
      002E59 12 11 95         [24] 8981 	lcall	_keyDetect
      002E5C AA 82            [24] 8982 	mov	r2,dpl
      002E5E 78 71            [12] 8983 	mov	r0,#_selection
      002E60 A6 02            [24] 8984 	mov	@r0,ar2
                                   8985 ;	.\ecen4350_lcd_v4.c:2010: write(selection);
      002E62 8A 82            [24] 8986 	mov	dpl,r2
      002E64 12 10 11         [24] 8987 	lcall	_write
                                   8988 ;	.\ecen4350_lcd_v4.c:2011: selection = ASCIItoHex(selection);
      002E67 78 71            [12] 8989 	mov	r0,#_selection
      002E69 86 82            [24] 8990 	mov	dpl,@r0
      002E6B 12 14 03         [24] 8991 	lcall	_ASCIItoHex
      002E6E AA 82            [24] 8992 	mov	r2,dpl
      002E70 78 71            [12] 8993 	mov	r0,#_selection
      002E72 A6 02            [24] 8994 	mov	@r0,ar2
                                   8995 ;	.\ecen4350_lcd_v4.c:2012: value |= selection * 16;
      002E74 EA               [12] 8996 	mov	a,r2
      002E75 C4               [12] 8997 	swap	a
      002E76 54 F0            [12] 8998 	anl	a,#0xf0
      002E78 FA               [12] 8999 	mov	r2,a
                                   9000 ;	.\ecen4350_lcd_v4.c:2013: selection = keyDetect();
      002E79 C0 02            [24] 9001 	push	ar2
      002E7B 12 11 95         [24] 9002 	lcall	_keyDetect
      002E7E AC 82            [24] 9003 	mov	r4,dpl
      002E80 78 71            [12] 9004 	mov	r0,#_selection
      002E82 A6 04            [24] 9005 	mov	@r0,ar4
                                   9006 ;	.\ecen4350_lcd_v4.c:2014: write(selection);
      002E84 8C 82            [24] 9007 	mov	dpl,r4
      002E86 12 10 11         [24] 9008 	lcall	_write
                                   9009 ;	.\ecen4350_lcd_v4.c:2015: selection = ASCIItoHex(selection);
      002E89 78 71            [12] 9010 	mov	r0,#_selection
      002E8B 86 82            [24] 9011 	mov	dpl,@r0
      002E8D 12 14 03         [24] 9012 	lcall	_ASCIItoHex
      002E90 AC 82            [24] 9013 	mov	r4,dpl
      002E92 D0 02            [24] 9014 	pop	ar2
      002E94 D0 03            [24] 9015 	pop	ar3
      002E96 78 71            [12] 9016 	mov	r0,#_selection
      002E98 A6 04            [24] 9017 	mov	@r0,ar4
                                   9018 ;	.\ecen4350_lcd_v4.c:2016: value |= selection;
      002E9A EA               [12] 9019 	mov	a,r2
      002E9B 42 04            [12] 9020 	orl	ar4,a
                                   9021 ;	.\ecen4350_lcd_v4.c:2019: setColorDefault();
      002E9D C0 04            [24] 9022 	push	ar4
      002E9F C0 03            [24] 9023 	push	ar3
      002EA1 12 16 3B         [24] 9024 	lcall	_setColorDefault
                                   9025 ;	.\ecen4350_lcd_v4.c:2020: setCursor(0, 160);
      002EA4 75 6B A0         [24] 9026 	mov	_setCursor_PARM_2,#0xa0
      002EA7 75 6C 00         [24] 9027 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EAA 90 00 00         [24] 9028 	mov	dptr,#0x0000
      002EAD 12 05 5D         [24] 9029 	lcall	_setCursor
                                   9030 ;	.\ecen4350_lcd_v4.c:2021: LCD_string_write(" Enter New Value:\n ");
      002EB0 90 57 EF         [24] 9031 	mov	dptr,#___str_67
      002EB3 75 F0 80         [24] 9032 	mov	b,#0x80
      002EB6 12 10 77         [24] 9033 	lcall	_LCD_string_write
                                   9034 ;	.\ecen4350_lcd_v4.c:2022: setColorHighlight2();
      002EB9 12 16 5D         [24] 9035 	lcall	_setColorHighlight2
      002EBC D0 03            [24] 9036 	pop	ar3
      002EBE D0 04            [24] 9037 	pop	ar4
                                   9038 ;	.\ecen4350_lcd_v4.c:2023: print8Hex(value);
      002EC0 8C 82            [24] 9039 	mov	dpl,r4
      002EC2 C0 04            [24] 9040 	push	ar4
      002EC4 C0 03            [24] 9041 	push	ar3
      002EC6 12 15 48         [24] 9042 	lcall	_print8Hex
      002EC9 D0 03            [24] 9043 	pop	ar3
      002ECB D0 04            [24] 9044 	pop	ar4
      002ECD D0 05            [24] 9045 	pop	ar5
      002ECF D0 06            [24] 9046 	pop	ar6
      002ED1 D0 07            [24] 9047 	pop	ar7
                                   9048 ;	.\ecen4350_lcd_v4.c:109: IOM = 0;
                                   9049 ;	assignBit
      002ED3 C2 B5            [12] 9050 	clr	_P3_5
                                   9051 ;	.\ecen4350_lcd_v4.c:110: *map_address = d;
      002ED5 8B 82            [24] 9052 	mov	dpl,r3
      002ED7 8F 83            [24] 9053 	mov	dph,r7
      002ED9 EC               [12] 9054 	mov	a,r4
      002EDA F0               [24] 9055 	movx	@dptr,a
                                   9056 ;	.\ecen4350_lcd_v4.c:111: IOM = 1;
                                   9057 ;	assignBit
      002EDB D2 B5            [12] 9058 	setb	_P3_5
                                   9059 ;	.\ecen4350_lcd_v4.c:2028: setCursor(0, 210);
      002EDD 75 6B D2         [24] 9060 	mov	_setCursor_PARM_2,#0xd2
      002EE0 75 6C 00         [24] 9061 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EE3 90 00 00         [24] 9062 	mov	dptr,#0x0000
      002EE6 C0 06            [24] 9063 	push	ar6
      002EE8 C0 05            [24] 9064 	push	ar5
      002EEA 12 05 5D         [24] 9065 	lcall	_setCursor
                                   9066 ;	.\ecen4350_lcd_v4.c:2029: setColorSelect();
      002EED 12 16 46         [24] 9067 	lcall	_setColorSelect
                                   9068 ;	.\ecen4350_lcd_v4.c:2030: LCD_string_write(" Choose Next Action:\n");
      002EF0 90 57 A5         [24] 9069 	mov	dptr,#___str_63
      002EF3 75 F0 80         [24] 9070 	mov	b,#0x80
      002EF6 12 10 77         [24] 9071 	lcall	_LCD_string_write
                                   9072 ;	.\ecen4350_lcd_v4.c:2031: setColorWhite();
      002EF9 12 16 8B         [24] 9073 	lcall	_setColorWhite
                                   9074 ;	.\ecen4350_lcd_v4.c:2032: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002EFC 90 57 BB         [24] 9075 	mov	dptr,#___str_64
      002EFF 75 F0 80         [24] 9076 	mov	b,#0x80
      002F02 12 10 77         [24] 9077 	lcall	_LCD_string_write
                                   9078 ;	.\ecen4350_lcd_v4.c:2033: LCD_string_write("  <0> Exit");
      002F05 90 57 E1         [24] 9079 	mov	dptr,#___str_65
      002F08 75 F0 80         [24] 9080 	mov	b,#0x80
      002F0B 12 10 77         [24] 9081 	lcall	_LCD_string_write
      002F0E D0 05            [24] 9082 	pop	ar5
      002F10 D0 06            [24] 9083 	pop	ar6
      002F12                       9084 00104$:
                                   9085 ;	.\ecen4350_lcd_v4.c:2035: if (selection == '0') {			/* Highlight choice and gray out others */
      002F12 78 71            [12] 9086 	mov	r0,#_selection
      002F14 B6 30 52         [24] 9087 	cjne	@r0,#0x30,00106$
                                   9088 ;	.\ecen4350_lcd_v4.c:2036: exit = 0;
      002F17 78 7C            [12] 9089 	mov	r0,#_edit_exit_65536_622
      002F19 76 00            [12] 9090 	mov	@r0,#0x00
                                   9091 ;	.\ecen4350_lcd_v4.c:2037: invalid = 0;
      002F1B 78 7D            [12] 9092 	mov	r0,#_edit_invalid_65536_622
      002F1D 76 00            [12] 9093 	mov	@r0,#0x00
                                   9094 ;	.\ecen4350_lcd_v4.c:2038: setCursor(0, 210);
      002F1F 75 6B D2         [24] 9095 	mov	_setCursor_PARM_2,#0xd2
      002F22 75 6C 00         [24] 9096 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F25 90 00 00         [24] 9097 	mov	dptr,#0x0000
      002F28 C0 06            [24] 9098 	push	ar6
      002F2A C0 05            [24] 9099 	push	ar5
      002F2C 12 05 5D         [24] 9100 	lcall	_setCursor
                                   9101 ;	.\ecen4350_lcd_v4.c:2039: setColorDefault();
      002F2F 12 16 3B         [24] 9102 	lcall	_setColorDefault
                                   9103 ;	.\ecen4350_lcd_v4.c:2040: LCD_string_write("\n");
      002F32 90 58 A5         [24] 9104 	mov	dptr,#___str_76
      002F35 75 F0 80         [24] 9105 	mov	b,#0x80
      002F38 12 10 77         [24] 9106 	lcall	_LCD_string_write
                                   9107 ;	.\ecen4350_lcd_v4.c:2041: setColorGray();
      002F3B 12 16 69         [24] 9108 	lcall	_setColorGray
                                   9109 ;	.\ecen4350_lcd_v4.c:2042: LCD_string_write("\n\n  ");
      002F3E 90 56 5C         [24] 9110 	mov	dptr,#___str_38
      002F41 75 F0 80         [24] 9111 	mov	b,#0x80
      002F44 12 10 77         [24] 9112 	lcall	_LCD_string_write
                                   9113 ;	.\ecen4350_lcd_v4.c:2043: setColorHighlight2();
      002F47 12 16 5D         [24] 9114 	lcall	_setColorHighlight2
                                   9115 ;	.\ecen4350_lcd_v4.c:2044: LCD_string_write("<0> Exit");
      002F4A 90 58 A7         [24] 9116 	mov	dptr,#___str_77
      002F4D 75 F0 80         [24] 9117 	mov	b,#0x80
      002F50 12 10 77         [24] 9118 	lcall	_LCD_string_write
                                   9119 ;	.\ecen4350_lcd_v4.c:2045: setColorGray();
      002F53 12 16 69         [24] 9120 	lcall	_setColorGray
                                   9121 ;	.\ecen4350_lcd_v4.c:2046: LCD_string_write("\n               ");
      002F56 90 58 86         [24] 9122 	mov	dptr,#___str_74
      002F59 75 F0 80         [24] 9123 	mov	b,#0x80
      002F5C 12 10 77         [24] 9124 	lcall	_LCD_string_write
                                   9125 ;	.\ecen4350_lcd_v4.c:2047: delay(60);
      002F5F 90 00 3C         [24] 9126 	mov	dptr,#0x003c
      002F62 12 01 87         [24] 9127 	lcall	_delay
      002F65 D0 05            [24] 9128 	pop	ar5
      002F67 D0 06            [24] 9129 	pop	ar6
      002F69                       9130 00106$:
                                   9131 ;	.\ecen4350_lcd_v4.c:2049: if (invalid) {
      002F69 78 7D            [12] 9132 	mov	r0,#_edit_invalid_65536_622
      002F6B E6               [12] 9133 	mov	a,@r0
      002F6C 70 03            [24] 9134 	jnz	00158$
      002F6E 02 2A C7         [24] 9135 	ljmp	00109$
      002F71                       9136 00158$:
                                   9137 ;	.\ecen4350_lcd_v4.c:2050: setCursor(0, 210);
      002F71 75 6B D2         [24] 9138 	mov	_setCursor_PARM_2,#0xd2
      002F74 75 6C 00         [24] 9139 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F77 90 00 00         [24] 9140 	mov	dptr,#0x0000
      002F7A C0 06            [24] 9141 	push	ar6
      002F7C C0 05            [24] 9142 	push	ar5
      002F7E 12 05 5D         [24] 9143 	lcall	_setCursor
                                   9144 ;	.\ecen4350_lcd_v4.c:2051: setColorRed();
      002F81 12 16 80         [24] 9145 	lcall	_setColorRed
                                   9146 ;	.\ecen4350_lcd_v4.c:2052: LCD_string_write("\n\n\n\n Input Error ");
      002F84 90 58 B0         [24] 9147 	mov	dptr,#___str_78
      002F87 75 F0 80         [24] 9148 	mov	b,#0x80
      002F8A 12 10 77         [24] 9149 	lcall	_LCD_string_write
      002F8D D0 05            [24] 9150 	pop	ar5
      002F8F D0 06            [24] 9151 	pop	ar6
      002F91 02 2A C7         [24] 9152 	ljmp	00109$
                                   9153 ;	.\ecen4350_lcd_v4.c:2055: return;
                                   9154 ;	.\ecen4350_lcd_v4.c:2056: }
      002F94 22               [24] 9155 	ret
                                   9156 ;------------------------------------------------------------
                                   9157 ;Allocation info for local variables in function 'find'
                                   9158 ;------------------------------------------------------------
                                   9159 ;d                         Allocated to registers 
                                   9160 ;i                         Allocated with name '_find_i_262144_659'
                                   9161 ;__3932160169              Allocated to registers 
                                   9162 ;__3932160170              Allocated to registers 
                                   9163 ;map_address               Allocated to registers 
                                   9164 ;d                         Allocated to registers r4 
                                   9165 ;i                         Allocated to registers r4 r6 
                                   9166 ;__3932160172              Allocated to registers 
                                   9167 ;__3932160173              Allocated to registers 
                                   9168 ;map_address               Allocated to registers 
                                   9169 ;d                         Allocated to registers r3 
                                   9170 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9171 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9172 ;address                   Allocated with name '_find_address_65536_646'
                                   9173 ;destination               Allocated to registers 
                                   9174 ;blockSize                 Allocated with name '_find_blockSize_65536_646'
                                   9175 ;value                     Allocated with name '_find_value_65536_646'
                                   9176 ;scan                      Allocated with name '_find_scan_65536_646'
                                   9177 ;page                      Allocated to registers r5 
                                   9178 ;noneFound                 Allocated with name '_find_noneFound_65536_646'
                                   9179 ;invalidInput              Allocated to registers r7 
                                   9180 ;exit                      Allocated with name '_find_exit_65536_646'
                                   9181 ;------------------------------------------------------------
                                   9182 ;	.\ecen4350_lcd_v4.c:2058: void find() {
                                   9183 ;	-----------------------------------------
                                   9184 ;	 function find
                                   9185 ;	-----------------------------------------
      002F95                       9186 _find:
                                   9187 ;	.\ecen4350_lcd_v4.c:2062: __idata unsigned char blockSize = 0;
      002F95 78 80            [12] 9188 	mov	r0,#_find_blockSize_65536_646
      002F97 76 00            [12] 9189 	mov	@r0,#0x00
                                   9190 ;	.\ecen4350_lcd_v4.c:2064: __idata unsigned char scan = 0;
      002F99 78 82            [12] 9191 	mov	r0,#_find_scan_65536_646
      002F9B 76 00            [12] 9192 	mov	@r0,#0x00
                                   9193 ;	.\ecen4350_lcd_v4.c:2065: __idata unsigned char page = 0;
      002F9D 7D 00            [12] 9194 	mov	r5,#0x00
                                   9195 ;	.\ecen4350_lcd_v4.c:2066: __idata unsigned char noneFound = 1;
      002F9F 78 83            [12] 9196 	mov	r0,#_find_noneFound_65536_646
      002FA1 76 01            [12] 9197 	mov	@r0,#0x01
                                   9198 ;	.\ecen4350_lcd_v4.c:2067: __idata unsigned char invalidInput = 1;
      002FA3 7B 01            [12] 9199 	mov	r3,#0x01
                                   9200 ;	.\ecen4350_lcd_v4.c:2068: __idata unsigned char exit = 1;
      002FA5 78 84            [12] 9201 	mov	r0,#_find_exit_65536_646
      002FA7 76 01            [12] 9202 	mov	@r0,#0x01
                                   9203 ;	.\ecen4350_lcd_v4.c:2070: clearLCD();
      002FA9 C0 05            [24] 9204 	push	ar5
      002FAB C0 03            [24] 9205 	push	ar3
      002FAD 12 0D FA         [24] 9206 	lcall	_clearLCD
                                   9207 ;	.\ecen4350_lcd_v4.c:2073: setTextSize(5);
      002FB0 75 82 05         [24] 9208 	mov	dpl,#0x05
      002FB3 12 05 77         [24] 9209 	lcall	_setTextSize
                                   9210 ;	.\ecen4350_lcd_v4.c:2074: fillTop(GRAY);
      002FB6 90 D6 BA         [24] 9211 	mov	dptr,#0xd6ba
      002FB9 12 0C 2D         [24] 9212 	lcall	_fillTop
                                   9213 ;	.\ecen4350_lcd_v4.c:2075: setColorMenu();
      002FBC 12 16 74         [24] 9214 	lcall	_setColorMenu
                                   9215 ;	.\ecen4350_lcd_v4.c:2076: setCursor(30, 0);
      002FBF E4               [12] 9216 	clr	a
      002FC0 F5 6B            [12] 9217 	mov	_setCursor_PARM_2,a
      002FC2 F5 6C            [12] 9218 	mov	(_setCursor_PARM_2 + 1),a
      002FC4 90 00 1E         [24] 9219 	mov	dptr,#0x001e
      002FC7 12 05 5D         [24] 9220 	lcall	_setCursor
                                   9221 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write("[FIND]\n");
      002FCA 90 58 C2         [24] 9222 	mov	dptr,#___str_79
      002FCD 75 F0 80         [24] 9223 	mov	b,#0x80
      002FD0 12 10 77         [24] 9224 	lcall	_LCD_string_write
                                   9225 ;	.\ecen4350_lcd_v4.c:2078: setColorDefault();
      002FD3 12 16 3B         [24] 9226 	lcall	_setColorDefault
                                   9227 ;	.\ecen4350_lcd_v4.c:2079: setTextSize(2);
      002FD6 75 82 02         [24] 9228 	mov	dpl,#0x02
      002FD9 12 05 77         [24] 9229 	lcall	_setTextSize
                                   9230 ;	.\ecen4350_lcd_v4.c:2080: setCursor(0, 60);
      002FDC 75 6B 3C         [24] 9231 	mov	_setCursor_PARM_2,#0x3c
      002FDF 75 6C 00         [24] 9232 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FE2 90 00 00         [24] 9233 	mov	dptr,#0x0000
      002FE5 12 05 5D         [24] 9234 	lcall	_setCursor
                                   9235 ;	.\ecen4350_lcd_v4.c:2081: LCD_string_write(" Find Value:");
      002FE8 90 58 CA         [24] 9236 	mov	dptr,#___str_80
      002FEB 75 F0 80         [24] 9237 	mov	b,#0x80
      002FEE 12 10 77         [24] 9238 	lcall	_LCD_string_write
                                   9239 ;	.\ecen4350_lcd_v4.c:2082: setCursor(0, 80);
      002FF1 75 6B 50         [24] 9240 	mov	_setCursor_PARM_2,#0x50
      002FF4 75 6C 00         [24] 9241 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FF7 90 00 00         [24] 9242 	mov	dptr,#0x0000
      002FFA 12 05 5D         [24] 9243 	lcall	_setCursor
                                   9244 ;	.\ecen4350_lcd_v4.c:2083: setColorGray();
      002FFD 12 16 69         [24] 9245 	lcall	_setColorGray
                                   9246 ;	.\ecen4350_lcd_v4.c:2084: LCD_string_write(" __");
      003000 90 57 8E         [24] 9247 	mov	dptr,#___str_61
      003003 75 F0 80         [24] 9248 	mov	b,#0x80
      003006 12 10 77         [24] 9249 	lcall	_LCD_string_write
                                   9250 ;	.\ecen4350_lcd_v4.c:2085: setCursor(0, 110);
      003009 75 6B 6E         [24] 9251 	mov	_setCursor_PARM_2,#0x6e
      00300C 75 6C 00         [24] 9252 	mov	(_setCursor_PARM_2 + 1),#0x00
      00300F 90 00 00         [24] 9253 	mov	dptr,#0x0000
      003012 12 05 5D         [24] 9254 	lcall	_setCursor
                                   9255 ;	.\ecen4350_lcd_v4.c:2086: setColorDefault();
      003015 12 16 3B         [24] 9256 	lcall	_setColorDefault
                                   9257 ;	.\ecen4350_lcd_v4.c:2087: LCD_string_write(" Search Address:");
      003018 90 58 D7         [24] 9258 	mov	dptr,#___str_81
      00301B 75 F0 80         [24] 9259 	mov	b,#0x80
      00301E 12 10 77         [24] 9260 	lcall	_LCD_string_write
                                   9261 ;	.\ecen4350_lcd_v4.c:2088: setCursor(0, 130 );
      003021 75 6B 82         [24] 9262 	mov	_setCursor_PARM_2,#0x82
      003024 75 6C 00         [24] 9263 	mov	(_setCursor_PARM_2 + 1),#0x00
      003027 90 00 00         [24] 9264 	mov	dptr,#0x0000
      00302A 12 05 5D         [24] 9265 	lcall	_setCursor
                                   9266 ;	.\ecen4350_lcd_v4.c:2089: setColorGray();
      00302D 12 16 69         [24] 9267 	lcall	_setColorGray
                                   9268 ;	.\ecen4350_lcd_v4.c:2090: LCD_string_write(" 0x____");
      003030 90 55 7F         [24] 9269 	mov	dptr,#___str_23
      003033 75 F0 80         [24] 9270 	mov	b,#0x80
      003036 12 10 77         [24] 9271 	lcall	_LCD_string_write
                                   9272 ;	.\ecen4350_lcd_v4.c:2091: setCursor(0, 160);
      003039 75 6B A0         [24] 9273 	mov	_setCursor_PARM_2,#0xa0
      00303C 75 6C 00         [24] 9274 	mov	(_setCursor_PARM_2 + 1),#0x00
      00303F 90 00 00         [24] 9275 	mov	dptr,#0x0000
      003042 12 05 5D         [24] 9276 	lcall	_setCursor
                                   9277 ;	.\ecen4350_lcd_v4.c:2092: setColorDefault();
      003045 12 16 3B         [24] 9278 	lcall	_setColorDefault
                                   9279 ;	.\ecen4350_lcd_v4.c:2093: LCD_string_write(" Input Block Size:\n");
      003048 90 58 E8         [24] 9280 	mov	dptr,#___str_82
      00304B 75 F0 80         [24] 9281 	mov	b,#0x80
      00304E 12 10 77         [24] 9282 	lcall	_LCD_string_write
                                   9283 ;	.\ecen4350_lcd_v4.c:2094: setColorGray();
      003051 12 16 69         [24] 9284 	lcall	_setColorGray
                                   9285 ;	.\ecen4350_lcd_v4.c:2095: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003054 90 58 FC         [24] 9286 	mov	dptr,#___str_83
      003057 75 F0 80         [24] 9287 	mov	b,#0x80
      00305A 12 10 77         [24] 9288 	lcall	_LCD_string_write
                                   9289 ;	.\ecen4350_lcd_v4.c:2096: LCD_string_write("  <FF> (SCAN)");
      00305D 90 59 22         [24] 9290 	mov	dptr,#___str_84
      003060 75 F0 80         [24] 9291 	mov	b,#0x80
      003063 12 10 77         [24] 9292 	lcall	_LCD_string_write
                                   9293 ;	.\ecen4350_lcd_v4.c:2098: (0, 250);
      003066 75 6B FA         [24] 9294 	mov	_setCursor_PARM_2,#0xfa
      003069 75 6C 00         [24] 9295 	mov	(_setCursor_PARM_2 + 1),#0x00
      00306C 90 00 00         [24] 9296 	mov	dptr,#0x0000
      00306F 12 05 5D         [24] 9297 	lcall	_setCursor
                                   9298 ;	.\ecen4350_lcd_v4.c:2099: setColorGray();
      003072 12 16 69         [24] 9299 	lcall	_setColorGray
                                   9300 ;	.\ecen4350_lcd_v4.c:2100: LCD_string_write("   __");
      003075 90 59 30         [24] 9301 	mov	dptr,#___str_85
      003078 75 F0 80         [24] 9302 	mov	b,#0x80
      00307B 12 10 77         [24] 9303 	lcall	_LCD_string_write
                                   9304 ;	.\ecen4350_lcd_v4.c:2107: setColorSelect();
      00307E 12 16 46         [24] 9305 	lcall	_setColorSelect
                                   9306 ;	.\ecen4350_lcd_v4.c:2108: setCursor(0, 60);
      003081 75 6B 3C         [24] 9307 	mov	_setCursor_PARM_2,#0x3c
      003084 75 6C 00         [24] 9308 	mov	(_setCursor_PARM_2 + 1),#0x00
      003087 90 00 00         [24] 9309 	mov	dptr,#0x0000
      00308A 12 05 5D         [24] 9310 	lcall	_setCursor
                                   9311 ;	.\ecen4350_lcd_v4.c:2109: LCD_string_write(" Find Value:");
      00308D 90 58 CA         [24] 9312 	mov	dptr,#___str_80
      003090 75 F0 80         [24] 9313 	mov	b,#0x80
      003093 12 10 77         [24] 9314 	lcall	_LCD_string_write
                                   9315 ;	.\ecen4350_lcd_v4.c:2110: setCursor(0, 80);
      003096 75 6B 50         [24] 9316 	mov	_setCursor_PARM_2,#0x50
      003099 75 6C 00         [24] 9317 	mov	(_setCursor_PARM_2 + 1),#0x00
      00309C 90 00 00         [24] 9318 	mov	dptr,#0x0000
      00309F 12 05 5D         [24] 9319 	lcall	_setCursor
                                   9320 ;	.\ecen4350_lcd_v4.c:2111: setColorWhite();
      0030A2 12 16 8B         [24] 9321 	lcall	_setColorWhite
                                   9322 ;	.\ecen4350_lcd_v4.c:2112: setCursor(0, 80);
      0030A5 75 6B 50         [24] 9323 	mov	_setCursor_PARM_2,#0x50
      0030A8 75 6C 00         [24] 9324 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030AB 90 00 00         [24] 9325 	mov	dptr,#0x0000
      0030AE 12 05 5D         [24] 9326 	lcall	_setCursor
                                   9327 ;	.\ecen4350_lcd_v4.c:2113: LCD_string_write(" ");
      0030B1 90 55 E1         [24] 9328 	mov	dptr,#___str_29
      0030B4 75 F0 80         [24] 9329 	mov	b,#0x80
      0030B7 12 10 77         [24] 9330 	lcall	_LCD_string_write
                                   9331 ;	.\ecen4350_lcd_v4.c:2114: setColorHighlight1();
      0030BA 12 16 51         [24] 9332 	lcall	_setColorHighlight1
                                   9333 ;	.\ecen4350_lcd_v4.c:2115: selection = keyDetect();
      0030BD 12 11 95         [24] 9334 	lcall	_keyDetect
      0030C0 AC 82            [24] 9335 	mov	r4,dpl
      0030C2 78 71            [12] 9336 	mov	r0,#_selection
      0030C4 A6 04            [24] 9337 	mov	@r0,ar4
                                   9338 ;	.\ecen4350_lcd_v4.c:2116: write(selection);
      0030C6 8C 82            [24] 9339 	mov	dpl,r4
      0030C8 12 10 11         [24] 9340 	lcall	_write
                                   9341 ;	.\ecen4350_lcd_v4.c:2117: selection = ASCIItoHex(selection);
      0030CB 78 71            [12] 9342 	mov	r0,#_selection
      0030CD 86 82            [24] 9343 	mov	dpl,@r0
      0030CF 12 14 03         [24] 9344 	lcall	_ASCIItoHex
      0030D2 AC 82            [24] 9345 	mov	r4,dpl
      0030D4 D0 03            [24] 9346 	pop	ar3
      0030D6 78 71            [12] 9347 	mov	r0,#_selection
      0030D8 A6 04            [24] 9348 	mov	@r0,ar4
                                   9349 ;	.\ecen4350_lcd_v4.c:2118: value |= selection * 16;
      0030DA EC               [12] 9350 	mov	a,r4
      0030DB C4               [12] 9351 	swap	a
      0030DC 54 F0            [12] 9352 	anl	a,#0xf0
      0030DE FC               [12] 9353 	mov	r4,a
                                   9354 ;	.\ecen4350_lcd_v4.c:2119: selection = keyDetect();
      0030DF C0 04            [24] 9355 	push	ar4
      0030E1 C0 03            [24] 9356 	push	ar3
      0030E3 12 11 95         [24] 9357 	lcall	_keyDetect
      0030E6 AE 82            [24] 9358 	mov	r6,dpl
      0030E8 78 71            [12] 9359 	mov	r0,#_selection
      0030EA A6 06            [24] 9360 	mov	@r0,ar6
                                   9361 ;	.\ecen4350_lcd_v4.c:2120: write(selection);
      0030EC 8E 82            [24] 9362 	mov	dpl,r6
      0030EE 12 10 11         [24] 9363 	lcall	_write
                                   9364 ;	.\ecen4350_lcd_v4.c:2121: selection = ASCIItoHex(selection);
      0030F1 78 71            [12] 9365 	mov	r0,#_selection
      0030F3 86 82            [24] 9366 	mov	dpl,@r0
      0030F5 12 14 03         [24] 9367 	lcall	_ASCIItoHex
      0030F8 AE 82            [24] 9368 	mov	r6,dpl
      0030FA D0 03            [24] 9369 	pop	ar3
      0030FC D0 04            [24] 9370 	pop	ar4
      0030FE 78 71            [12] 9371 	mov	r0,#_selection
      003100 A6 06            [24] 9372 	mov	@r0,ar6
                                   9373 ;	.\ecen4350_lcd_v4.c:2122: value |= selection;
      003102 78 81            [12] 9374 	mov	r0,#_find_value_65536_646
      003104 EE               [12] 9375 	mov	a,r6
      003105 4C               [12] 9376 	orl	a,r4
      003106 F6               [12] 9377 	mov	@r0,a
                                   9378 ;	.\ecen4350_lcd_v4.c:2125: setColorDefault();
      003107 C0 03            [24] 9379 	push	ar3
      003109 12 16 3B         [24] 9380 	lcall	_setColorDefault
                                   9381 ;	.\ecen4350_lcd_v4.c:2126: setCursor(0, 60);
      00310C 75 6B 3C         [24] 9382 	mov	_setCursor_PARM_2,#0x3c
      00310F 75 6C 00         [24] 9383 	mov	(_setCursor_PARM_2 + 1),#0x00
      003112 90 00 00         [24] 9384 	mov	dptr,#0x0000
      003115 12 05 5D         [24] 9385 	lcall	_setCursor
                                   9386 ;	.\ecen4350_lcd_v4.c:2127: LCD_string_write(" Find Value:");
      003118 90 58 CA         [24] 9387 	mov	dptr,#___str_80
      00311B 75 F0 80         [24] 9388 	mov	b,#0x80
      00311E 12 10 77         [24] 9389 	lcall	_LCD_string_write
                                   9390 ;	.\ecen4350_lcd_v4.c:2128: setCursor(0, 80);
      003121 75 6B 50         [24] 9391 	mov	_setCursor_PARM_2,#0x50
      003124 75 6C 00         [24] 9392 	mov	(_setCursor_PARM_2 + 1),#0x00
      003127 90 00 00         [24] 9393 	mov	dptr,#0x0000
      00312A 12 05 5D         [24] 9394 	lcall	_setCursor
                                   9395 ;	.\ecen4350_lcd_v4.c:2129: setColorWhite();
      00312D 12 16 8B         [24] 9396 	lcall	_setColorWhite
                                   9397 ;	.\ecen4350_lcd_v4.c:2130: LCD_string_write(" ");
      003130 90 55 E1         [24] 9398 	mov	dptr,#___str_29
      003133 75 F0 80         [24] 9399 	mov	b,#0x80
      003136 12 10 77         [24] 9400 	lcall	_LCD_string_write
                                   9401 ;	.\ecen4350_lcd_v4.c:2131: setColorHighlight2();
      003139 12 16 5D         [24] 9402 	lcall	_setColorHighlight2
                                   9403 ;	.\ecen4350_lcd_v4.c:2132: print8Hex(value);
      00313C 78 81            [12] 9404 	mov	r0,#_find_value_65536_646
      00313E 86 82            [24] 9405 	mov	dpl,@r0
      003140 12 15 48         [24] 9406 	lcall	_print8Hex
                                   9407 ;	.\ecen4350_lcd_v4.c:2135: setColorSelect();
      003143 12 16 46         [24] 9408 	lcall	_setColorSelect
                                   9409 ;	.\ecen4350_lcd_v4.c:2136: setCursor(0, 110);
      003146 75 6B 6E         [24] 9410 	mov	_setCursor_PARM_2,#0x6e
      003149 75 6C 00         [24] 9411 	mov	(_setCursor_PARM_2 + 1),#0x00
      00314C 90 00 00         [24] 9412 	mov	dptr,#0x0000
      00314F 12 05 5D         [24] 9413 	lcall	_setCursor
                                   9414 ;	.\ecen4350_lcd_v4.c:2137: LCD_string_write(" Search Address:");
      003152 90 58 D7         [24] 9415 	mov	dptr,#___str_81
      003155 75 F0 80         [24] 9416 	mov	b,#0x80
      003158 12 10 77         [24] 9417 	lcall	_LCD_string_write
                                   9418 ;	.\ecen4350_lcd_v4.c:2138: setCursor(0, 130);
      00315B 75 6B 82         [24] 9419 	mov	_setCursor_PARM_2,#0x82
      00315E 75 6C 00         [24] 9420 	mov	(_setCursor_PARM_2 + 1),#0x00
      003161 90 00 00         [24] 9421 	mov	dptr,#0x0000
      003164 12 05 5D         [24] 9422 	lcall	_setCursor
                                   9423 ;	.\ecen4350_lcd_v4.c:2139: LCD_string_write(" ");
      003167 90 55 E1         [24] 9424 	mov	dptr,#___str_29
      00316A 75 F0 80         [24] 9425 	mov	b,#0x80
      00316D 12 10 77         [24] 9426 	lcall	_LCD_string_write
                                   9427 ;	.\ecen4350_lcd_v4.c:2140: setColorHighlight1();
      003170 12 16 51         [24] 9428 	lcall	_setColorHighlight1
                                   9429 ;	.\ecen4350_lcd_v4.c:2141: LCD_string_write("0x");
      003173 90 54 B4         [24] 9430 	mov	dptr,#___str_2
      003176 75 F0 80         [24] 9431 	mov	b,#0x80
      003179 12 10 77         [24] 9432 	lcall	_LCD_string_write
                                   9433 ;	.\ecen4350_lcd_v4.c:2142: address = inputAddress();
      00317C 12 16 AC         [24] 9434 	lcall	_inputAddress
      00317F 78 7E            [12] 9435 	mov	r0,#_find_address_65536_646
      003181 A6 82            [24] 9436 	mov	@r0,dpl
      003183 08               [12] 9437 	inc	r0
      003184 A6 83            [24] 9438 	mov	@r0,dph
                                   9439 ;	.\ecen4350_lcd_v4.c:2145: setColorDefault();
      003186 12 16 3B         [24] 9440 	lcall	_setColorDefault
                                   9441 ;	.\ecen4350_lcd_v4.c:2146: setCursor(0, 110);
      003189 75 6B 6E         [24] 9442 	mov	_setCursor_PARM_2,#0x6e
      00318C 75 6C 00         [24] 9443 	mov	(_setCursor_PARM_2 + 1),#0x00
      00318F 90 00 00         [24] 9444 	mov	dptr,#0x0000
      003192 12 05 5D         [24] 9445 	lcall	_setCursor
                                   9446 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write(" Search Address:");
      003195 90 58 D7         [24] 9447 	mov	dptr,#___str_81
      003198 75 F0 80         [24] 9448 	mov	b,#0x80
      00319B 12 10 77         [24] 9449 	lcall	_LCD_string_write
                                   9450 ;	.\ecen4350_lcd_v4.c:2148: setCursor(0, 130);
      00319E 75 6B 82         [24] 9451 	mov	_setCursor_PARM_2,#0x82
      0031A1 75 6C 00         [24] 9452 	mov	(_setCursor_PARM_2 + 1),#0x00
      0031A4 90 00 00         [24] 9453 	mov	dptr,#0x0000
      0031A7 12 05 5D         [24] 9454 	lcall	_setCursor
                                   9455 ;	.\ecen4350_lcd_v4.c:2149: LCD_string_write(" ");
      0031AA 90 55 E1         [24] 9456 	mov	dptr,#___str_29
      0031AD 75 F0 80         [24] 9457 	mov	b,#0x80
      0031B0 12 10 77         [24] 9458 	lcall	_LCD_string_write
                                   9459 ;	.\ecen4350_lcd_v4.c:2150: setColorHighlight2();
      0031B3 12 16 5D         [24] 9460 	lcall	_setColorHighlight2
                                   9461 ;	.\ecen4350_lcd_v4.c:2151: LCD_string_write("0x");
      0031B6 90 54 B4         [24] 9462 	mov	dptr,#___str_2
      0031B9 75 F0 80         [24] 9463 	mov	b,#0x80
      0031BC 12 10 77         [24] 9464 	lcall	_LCD_string_write
                                   9465 ;	.\ecen4350_lcd_v4.c:2152: print16Hex(address);
      0031BF 78 7E            [12] 9466 	mov	r0,#_find_address_65536_646
      0031C1 86 82            [24] 9467 	mov	dpl,@r0
      0031C3 08               [12] 9468 	inc	r0
      0031C4 86 83            [24] 9469 	mov	dph,@r0
      0031C6 12 15 5F         [24] 9470 	lcall	_print16Hex
                                   9471 ;	.\ecen4350_lcd_v4.c:2155: setColorSelect();
      0031C9 12 16 46         [24] 9472 	lcall	_setColorSelect
                                   9473 ;	.\ecen4350_lcd_v4.c:2156: setCursor(0, 160);
      0031CC 75 6B A0         [24] 9474 	mov	_setCursor_PARM_2,#0xa0
      0031CF 75 6C 00         [24] 9475 	mov	(_setCursor_PARM_2 + 1),#0x00
      0031D2 90 00 00         [24] 9476 	mov	dptr,#0x0000
      0031D5 12 05 5D         [24] 9477 	lcall	_setCursor
                                   9478 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write(" Input Block Size:\n");
      0031D8 90 58 E8         [24] 9479 	mov	dptr,#___str_82
      0031DB 75 F0 80         [24] 9480 	mov	b,#0x80
      0031DE 12 10 77         [24] 9481 	lcall	_LCD_string_write
                                   9482 ;	.\ecen4350_lcd_v4.c:2158: setColorWhite();
      0031E1 12 16 8B         [24] 9483 	lcall	_setColorWhite
                                   9484 ;	.\ecen4350_lcd_v4.c:2159: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      0031E4 90 58 FC         [24] 9485 	mov	dptr,#___str_83
      0031E7 75 F0 80         [24] 9486 	mov	b,#0x80
      0031EA 12 10 77         [24] 9487 	lcall	_LCD_string_write
                                   9488 ;	.\ecen4350_lcd_v4.c:2160: LCD_string_write("  <FF> (SCAN)");
      0031ED 90 59 22         [24] 9489 	mov	dptr,#___str_84
      0031F0 75 F0 80         [24] 9490 	mov	b,#0x80
      0031F3 12 10 77         [24] 9491 	lcall	_LCD_string_write
      0031F6 D0 03            [24] 9492 	pop	ar3
      0031F8 D0 05            [24] 9493 	pop	ar5
                                   9494 ;	.\ecen4350_lcd_v4.c:2161: while (invalidInput) {
      0031FA                       9495 00113$:
      0031FA EB               [12] 9496 	mov	a,r3
      0031FB 70 03            [24] 9497 	jnz	00539$
      0031FD 02 32 B9         [24] 9498 	ljmp	00115$
      003200                       9499 00539$:
                                   9500 ;	.\ecen4350_lcd_v4.c:2162: setCursor(0, 250);
      003200 75 6B FA         [24] 9501 	mov	_setCursor_PARM_2,#0xfa
      003203 75 6C 00         [24] 9502 	mov	(_setCursor_PARM_2 + 1),#0x00
      003206 90 00 00         [24] 9503 	mov	dptr,#0x0000
      003209 C0 05            [24] 9504 	push	ar5
      00320B C0 03            [24] 9505 	push	ar3
      00320D 12 05 5D         [24] 9506 	lcall	_setCursor
                                   9507 ;	.\ecen4350_lcd_v4.c:2163: setColorGray();
      003210 12 16 69         [24] 9508 	lcall	_setColorGray
                                   9509 ;	.\ecen4350_lcd_v4.c:2164: LCD_string_write("   __");
      003213 90 59 30         [24] 9510 	mov	dptr,#___str_85
      003216 75 F0 80         [24] 9511 	mov	b,#0x80
      003219 12 10 77         [24] 9512 	lcall	_LCD_string_write
                                   9513 ;	.\ecen4350_lcd_v4.c:2165: setCursor(0, 250);
      00321C 75 6B FA         [24] 9514 	mov	_setCursor_PARM_2,#0xfa
      00321F 75 6C 00         [24] 9515 	mov	(_setCursor_PARM_2 + 1),#0x00
      003222 90 00 00         [24] 9516 	mov	dptr,#0x0000
      003225 12 05 5D         [24] 9517 	lcall	_setCursor
                                   9518 ;	.\ecen4350_lcd_v4.c:2166: LCD_string_write("   ");
      003228 90 59 36         [24] 9519 	mov	dptr,#___str_86
      00322B 75 F0 80         [24] 9520 	mov	b,#0x80
      00322E 12 10 77         [24] 9521 	lcall	_LCD_string_write
                                   9522 ;	.\ecen4350_lcd_v4.c:2167: setColorHighlight1();
      003231 12 16 51         [24] 9523 	lcall	_setColorHighlight1
                                   9524 ;	.\ecen4350_lcd_v4.c:2168: blockSize = inputBlockSize();
      003234 12 17 5C         [24] 9525 	lcall	_inputBlockSize
      003237 78 80            [12] 9526 	mov	r0,#_find_blockSize_65536_646
      003239 A6 82            [24] 9527 	mov	@r0,dpl
      00323B D0 03            [24] 9528 	pop	ar3
      00323D D0 05            [24] 9529 	pop	ar5
                                   9530 ;	.\ecen4350_lcd_v4.c:2169: if (blockSize == 0x01) {
      00323F 78 80            [12] 9531 	mov	r0,#_find_blockSize_65536_646
      003241 B6 01 18         [24] 9532 	cjne	@r0,#0x01,00111$
                                   9533 ;	.\ecen4350_lcd_v4.c:2170: invalidInput = 0;
      003244 7B 00            [12] 9534 	mov	r3,#0x00
                                   9535 ;	.\ecen4350_lcd_v4.c:2171: setColorDefault();
      003246 C0 05            [24] 9536 	push	ar5
      003248 C0 03            [24] 9537 	push	ar3
      00324A 12 16 3B         [24] 9538 	lcall	_setColorDefault
                                   9539 ;	.\ecen4350_lcd_v4.c:2172: LCD_string_write("\n                ");
      00324D 90 59 3A         [24] 9540 	mov	dptr,#___str_87
      003250 75 F0 80         [24] 9541 	mov	b,#0x80
      003253 12 10 77         [24] 9542 	lcall	_LCD_string_write
      003256 D0 03            [24] 9543 	pop	ar3
      003258 D0 05            [24] 9544 	pop	ar5
      00325A 80 9E            [24] 9545 	sjmp	00113$
      00325C                       9546 00111$:
                                   9547 ;	.\ecen4350_lcd_v4.c:2173: } else if (blockSize == 0x02) {
      00325C 78 80            [12] 9548 	mov	r0,#_find_blockSize_65536_646
      00325E B6 02 19         [24] 9549 	cjne	@r0,#0x02,00108$
                                   9550 ;	.\ecen4350_lcd_v4.c:2174: invalidInput = 0;
      003261 7B 00            [12] 9551 	mov	r3,#0x00
                                   9552 ;	.\ecen4350_lcd_v4.c:2175: setColorDefault();
      003263 C0 05            [24] 9553 	push	ar5
      003265 C0 03            [24] 9554 	push	ar3
      003267 12 16 3B         [24] 9555 	lcall	_setColorDefault
                                   9556 ;	.\ecen4350_lcd_v4.c:2176: LCD_string_write("\n                ");
      00326A 90 59 3A         [24] 9557 	mov	dptr,#___str_87
      00326D 75 F0 80         [24] 9558 	mov	b,#0x80
      003270 12 10 77         [24] 9559 	lcall	_LCD_string_write
      003273 D0 03            [24] 9560 	pop	ar3
      003275 D0 05            [24] 9561 	pop	ar5
      003277 02 31 FA         [24] 9562 	ljmp	00113$
      00327A                       9563 00108$:
                                   9564 ;	.\ecen4350_lcd_v4.c:2177: } else if (blockSize == 0x04) {
      00327A 78 80            [12] 9565 	mov	r0,#_find_blockSize_65536_646
      00327C B6 04 19         [24] 9566 	cjne	@r0,#0x04,00105$
                                   9567 ;	.\ecen4350_lcd_v4.c:2178: invalidInput = 0;
      00327F 7B 00            [12] 9568 	mov	r3,#0x00
                                   9569 ;	.\ecen4350_lcd_v4.c:2179: setColorDefault();
      003281 C0 05            [24] 9570 	push	ar5
      003283 C0 03            [24] 9571 	push	ar3
      003285 12 16 3B         [24] 9572 	lcall	_setColorDefault
                                   9573 ;	.\ecen4350_lcd_v4.c:2180: LCD_string_write("\n                ");
      003288 90 59 3A         [24] 9574 	mov	dptr,#___str_87
      00328B 75 F0 80         [24] 9575 	mov	b,#0x80
      00328E 12 10 77         [24] 9576 	lcall	_LCD_string_write
      003291 D0 03            [24] 9577 	pop	ar3
      003293 D0 05            [24] 9578 	pop	ar5
      003295 02 31 FA         [24] 9579 	ljmp	00113$
      003298                       9580 00105$:
                                   9581 ;	.\ecen4350_lcd_v4.c:2181: } else if (blockSize == 0xFF) {
      003298 78 80            [12] 9582 	mov	r0,#_find_blockSize_65536_646
      00329A B6 FF 05         [24] 9583 	cjne	@r0,#0xff,00102$
                                   9584 ;	.\ecen4350_lcd_v4.c:2182: invalidInput = 0;
      00329D 7B 00            [12] 9585 	mov	r3,#0x00
      00329F 02 31 FA         [24] 9586 	ljmp	00113$
      0032A2                       9587 00102$:
                                   9588 ;	.\ecen4350_lcd_v4.c:2185: setColorRed();
      0032A2 C0 05            [24] 9589 	push	ar5
      0032A4 C0 03            [24] 9590 	push	ar3
      0032A6 12 16 80         [24] 9591 	lcall	_setColorRed
                                   9592 ;	.\ecen4350_lcd_v4.c:2186: LCD_string_write("\n Try again");
      0032A9 90 59 4C         [24] 9593 	mov	dptr,#___str_88
      0032AC 75 F0 80         [24] 9594 	mov	b,#0x80
      0032AF 12 10 77         [24] 9595 	lcall	_LCD_string_write
      0032B2 D0 03            [24] 9596 	pop	ar3
      0032B4 D0 05            [24] 9597 	pop	ar5
      0032B6 02 31 FA         [24] 9598 	ljmp	00113$
      0032B9                       9599 00115$:
                                   9600 ;	.\ecen4350_lcd_v4.c:2191: setCursor(0, 160);
      0032B9 75 6B A0         [24] 9601 	mov	_setCursor_PARM_2,#0xa0
      0032BC 75 6C 00         [24] 9602 	mov	(_setCursor_PARM_2 + 1),#0x00
      0032BF 90 00 00         [24] 9603 	mov	dptr,#0x0000
      0032C2 C0 05            [24] 9604 	push	ar5
      0032C4 12 05 5D         [24] 9605 	lcall	_setCursor
                                   9606 ;	.\ecen4350_lcd_v4.c:2192: setColorDefault();
      0032C7 12 16 3B         [24] 9607 	lcall	_setColorDefault
                                   9608 ;	.\ecen4350_lcd_v4.c:2193: LCD_string_write(" Input Block Size:\n");
      0032CA 90 58 E8         [24] 9609 	mov	dptr,#___str_82
      0032CD 75 F0 80         [24] 9610 	mov	b,#0x80
      0032D0 12 10 77         [24] 9611 	lcall	_LCD_string_write
      0032D3 D0 05            [24] 9612 	pop	ar5
                                   9613 ;	.\ecen4350_lcd_v4.c:2194: if (blockSize == 0x01){
      0032D5 78 80            [12] 9614 	mov	r0,#_find_blockSize_65536_646
      0032D7 B6 01 74         [24] 9615 	cjne	@r0,#0x01,00125$
                                   9616 ;	.\ecen4350_lcd_v4.c:2195: LCD_string_write("  ");
      0032DA 90 55 FA         [24] 9617 	mov	dptr,#___str_32
      0032DD 75 F0 80         [24] 9618 	mov	b,#0x80
      0032E0 C0 05            [24] 9619 	push	ar5
      0032E2 12 10 77         [24] 9620 	lcall	_LCD_string_write
                                   9621 ;	.\ecen4350_lcd_v4.c:2196: setColorHighlight2();
      0032E5 12 16 5D         [24] 9622 	lcall	_setColorHighlight2
                                   9623 ;	.\ecen4350_lcd_v4.c:2197: LCD_string_write("<01> BYTE\n");
      0032E8 90 59 58         [24] 9624 	mov	dptr,#___str_89
      0032EB 75 F0 80         [24] 9625 	mov	b,#0x80
      0032EE 12 10 77         [24] 9626 	lcall	_LCD_string_write
                                   9627 ;	.\ecen4350_lcd_v4.c:2198: setColorGray();
      0032F1 12 16 69         [24] 9628 	lcall	_setColorGray
                                   9629 ;	.\ecen4350_lcd_v4.c:2199: LCD_string_write("  <02> WORD\n");
      0032F4 90 59 63         [24] 9630 	mov	dptr,#___str_90
      0032F7 75 F0 80         [24] 9631 	mov	b,#0x80
      0032FA 12 10 77         [24] 9632 	lcall	_LCD_string_write
                                   9633 ;	.\ecen4350_lcd_v4.c:2200: LCD_string_write("  <04> DWORD\n");
      0032FD 90 59 70         [24] 9634 	mov	dptr,#___str_91
      003300 75 F0 80         [24] 9635 	mov	b,#0x80
      003303 12 10 77         [24] 9636 	lcall	_LCD_string_write
                                   9637 ;	.\ecen4350_lcd_v4.c:2201: LCD_string_write("  <FF> (SCAN)");
      003306 90 59 22         [24] 9638 	mov	dptr,#___str_84
      003309 75 F0 80         [24] 9639 	mov	b,#0x80
      00330C 12 10 77         [24] 9640 	lcall	_LCD_string_write
                                   9641 ;	.\ecen4350_lcd_v4.c:2202: setColorDefault();
      00330F 12 16 3B         [24] 9642 	lcall	_setColorDefault
                                   9643 ;	.\ecen4350_lcd_v4.c:2203: setCursor(0, 250);
      003312 75 6B FA         [24] 9644 	mov	_setCursor_PARM_2,#0xfa
      003315 75 6C 00         [24] 9645 	mov	(_setCursor_PARM_2 + 1),#0x00
      003318 90 00 00         [24] 9646 	mov	dptr,#0x0000
      00331B 12 05 5D         [24] 9647 	lcall	_setCursor
                                   9648 ;	.\ecen4350_lcd_v4.c:2204: LCD_string_write("   ");
      00331E 90 59 36         [24] 9649 	mov	dptr,#___str_86
      003321 75 F0 80         [24] 9650 	mov	b,#0x80
      003324 12 10 77         [24] 9651 	lcall	_LCD_string_write
                                   9652 ;	.\ecen4350_lcd_v4.c:2205: setColorHighlight2();
      003327 12 16 5D         [24] 9653 	lcall	_setColorHighlight2
                                   9654 ;	.\ecen4350_lcd_v4.c:2206: print8Hex(blockSize);
      00332A 78 80            [12] 9655 	mov	r0,#_find_blockSize_65536_646
      00332C 86 82            [24] 9656 	mov	dpl,@r0
      00332E 12 15 48         [24] 9657 	lcall	_print8Hex
                                   9658 ;	.\ecen4350_lcd_v4.c:2207: setColorDefault();
      003331 12 16 3B         [24] 9659 	lcall	_setColorDefault
                                   9660 ;	.\ecen4350_lcd_v4.c:2208: LCD_string_write("\n Search Size Limit:");
      003334 90 59 7E         [24] 9661 	mov	dptr,#___str_92
      003337 75 F0 80         [24] 9662 	mov	b,#0x80
      00333A 12 10 77         [24] 9663 	lcall	_LCD_string_write
                                   9664 ;	.\ecen4350_lcd_v4.c:2209: setColorWhite();
      00333D 12 16 8B         [24] 9665 	lcall	_setColorWhite
                                   9666 ;	.\ecen4350_lcd_v4.c:2210: LCD_string_write("\n BYTE [8 bits]");
      003340 90 59 93         [24] 9667 	mov	dptr,#___str_93
      003343 75 F0 80         [24] 9668 	mov	b,#0x80
      003346 12 10 77         [24] 9669 	lcall	_LCD_string_write
      003349 D0 05            [24] 9670 	pop	ar5
      00334B 02 34 92         [24] 9671 	ljmp	00126$
      00334E                       9672 00125$:
                                   9673 ;	.\ecen4350_lcd_v4.c:2211: } else if (blockSize == 0x02) {
      00334E 78 80            [12] 9674 	mov	r0,#_find_blockSize_65536_646
      003350 B6 02 6E         [24] 9675 	cjne	@r0,#0x02,00122$
                                   9676 ;	.\ecen4350_lcd_v4.c:2212: setColorGray();
      003353 C0 05            [24] 9677 	push	ar5
      003355 12 16 69         [24] 9678 	lcall	_setColorGray
                                   9679 ;	.\ecen4350_lcd_v4.c:2213: LCD_string_write("  <01> BYTE\n  ");
      003358 90 59 A3         [24] 9680 	mov	dptr,#___str_94
      00335B 75 F0 80         [24] 9681 	mov	b,#0x80
      00335E 12 10 77         [24] 9682 	lcall	_LCD_string_write
                                   9683 ;	.\ecen4350_lcd_v4.c:2214: setColorHighlight2();
      003361 12 16 5D         [24] 9684 	lcall	_setColorHighlight2
                                   9685 ;	.\ecen4350_lcd_v4.c:2215: LCD_string_write("<02> WORD\n");
      003364 90 59 B2         [24] 9686 	mov	dptr,#___str_95
      003367 75 F0 80         [24] 9687 	mov	b,#0x80
      00336A 12 10 77         [24] 9688 	lcall	_LCD_string_write
                                   9689 ;	.\ecen4350_lcd_v4.c:2216: setColorGray();
      00336D 12 16 69         [24] 9690 	lcall	_setColorGray
                                   9691 ;	.\ecen4350_lcd_v4.c:2217: LCD_string_write("  <04> DWORD\n");
      003370 90 59 70         [24] 9692 	mov	dptr,#___str_91
      003373 75 F0 80         [24] 9693 	mov	b,#0x80
      003376 12 10 77         [24] 9694 	lcall	_LCD_string_write
                                   9695 ;	.\ecen4350_lcd_v4.c:2218: LCD_string_write("  <FF> (SCAN)");
      003379 90 59 22         [24] 9696 	mov	dptr,#___str_84
      00337C 75 F0 80         [24] 9697 	mov	b,#0x80
      00337F 12 10 77         [24] 9698 	lcall	_LCD_string_write
                                   9699 ;	.\ecen4350_lcd_v4.c:2219: setColorDefault();
      003382 12 16 3B         [24] 9700 	lcall	_setColorDefault
                                   9701 ;	.\ecen4350_lcd_v4.c:2220: setCursor(0, 250);
      003385 75 6B FA         [24] 9702 	mov	_setCursor_PARM_2,#0xfa
      003388 75 6C 00         [24] 9703 	mov	(_setCursor_PARM_2 + 1),#0x00
      00338B 90 00 00         [24] 9704 	mov	dptr,#0x0000
      00338E 12 05 5D         [24] 9705 	lcall	_setCursor
                                   9706 ;	.\ecen4350_lcd_v4.c:2221: LCD_string_write("   ");
      003391 90 59 36         [24] 9707 	mov	dptr,#___str_86
      003394 75 F0 80         [24] 9708 	mov	b,#0x80
      003397 12 10 77         [24] 9709 	lcall	_LCD_string_write
                                   9710 ;	.\ecen4350_lcd_v4.c:2222: setColorHighlight2();
      00339A 12 16 5D         [24] 9711 	lcall	_setColorHighlight2
                                   9712 ;	.\ecen4350_lcd_v4.c:2223: print8Hex(blockSize);
      00339D 78 80            [12] 9713 	mov	r0,#_find_blockSize_65536_646
      00339F 86 82            [24] 9714 	mov	dpl,@r0
      0033A1 12 15 48         [24] 9715 	lcall	_print8Hex
                                   9716 ;	.\ecen4350_lcd_v4.c:2224: setColorDefault();
      0033A4 12 16 3B         [24] 9717 	lcall	_setColorDefault
                                   9718 ;	.\ecen4350_lcd_v4.c:2225: LCD_string_write("\n Search Size Limit:");
      0033A7 90 59 7E         [24] 9719 	mov	dptr,#___str_92
      0033AA 75 F0 80         [24] 9720 	mov	b,#0x80
      0033AD 12 10 77         [24] 9721 	lcall	_LCD_string_write
                                   9722 ;	.\ecen4350_lcd_v4.c:2226: setColorWhite();
      0033B0 12 16 8B         [24] 9723 	lcall	_setColorWhite
                                   9724 ;	.\ecen4350_lcd_v4.c:2227: LCD_string_write("\n WORD [16 bits]");
      0033B3 90 59 BD         [24] 9725 	mov	dptr,#___str_96
      0033B6 75 F0 80         [24] 9726 	mov	b,#0x80
      0033B9 12 10 77         [24] 9727 	lcall	_LCD_string_write
      0033BC D0 05            [24] 9728 	pop	ar5
      0033BE 02 34 92         [24] 9729 	ljmp	00126$
      0033C1                       9730 00122$:
                                   9731 ;	.\ecen4350_lcd_v4.c:2228: } else if (blockSize == 0x04) {
      0033C1 78 80            [12] 9732 	mov	r0,#_find_blockSize_65536_646
      0033C3 B6 04 64         [24] 9733 	cjne	@r0,#0x04,00119$
                                   9734 ;	.\ecen4350_lcd_v4.c:2229: setColorGray();
      0033C6 C0 05            [24] 9735 	push	ar5
      0033C8 12 16 69         [24] 9736 	lcall	_setColorGray
                                   9737 ;	.\ecen4350_lcd_v4.c:2230: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      0033CB 90 59 CE         [24] 9738 	mov	dptr,#___str_97
      0033CE 75 F0 80         [24] 9739 	mov	b,#0x80
      0033D1 12 10 77         [24] 9740 	lcall	_LCD_string_write
                                   9741 ;	.\ecen4350_lcd_v4.c:2231: setColorHighlight2();
      0033D4 12 16 5D         [24] 9742 	lcall	_setColorHighlight2
                                   9743 ;	.\ecen4350_lcd_v4.c:2232: LCD_string_write("<04> DWORD\n");
      0033D7 90 59 E9         [24] 9744 	mov	dptr,#___str_98
      0033DA 75 F0 80         [24] 9745 	mov	b,#0x80
      0033DD 12 10 77         [24] 9746 	lcall	_LCD_string_write
                                   9747 ;	.\ecen4350_lcd_v4.c:2233: setColorGray();
      0033E0 12 16 69         [24] 9748 	lcall	_setColorGray
                                   9749 ;	.\ecen4350_lcd_v4.c:2234: LCD_string_write("  <FF> (SCAN)");
      0033E3 90 59 22         [24] 9750 	mov	dptr,#___str_84
      0033E6 75 F0 80         [24] 9751 	mov	b,#0x80
      0033E9 12 10 77         [24] 9752 	lcall	_LCD_string_write
                                   9753 ;	.\ecen4350_lcd_v4.c:2235: setColorDefault();
      0033EC 12 16 3B         [24] 9754 	lcall	_setColorDefault
                                   9755 ;	.\ecen4350_lcd_v4.c:2236: setCursor(0, 250);
      0033EF 75 6B FA         [24] 9756 	mov	_setCursor_PARM_2,#0xfa
      0033F2 75 6C 00         [24] 9757 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033F5 90 00 00         [24] 9758 	mov	dptr,#0x0000
      0033F8 12 05 5D         [24] 9759 	lcall	_setCursor
                                   9760 ;	.\ecen4350_lcd_v4.c:2237: LCD_string_write("   ");
      0033FB 90 59 36         [24] 9761 	mov	dptr,#___str_86
      0033FE 75 F0 80         [24] 9762 	mov	b,#0x80
      003401 12 10 77         [24] 9763 	lcall	_LCD_string_write
                                   9764 ;	.\ecen4350_lcd_v4.c:2238: setColorHighlight2();
      003404 12 16 5D         [24] 9765 	lcall	_setColorHighlight2
                                   9766 ;	.\ecen4350_lcd_v4.c:2239: print8Hex(blockSize);
      003407 78 80            [12] 9767 	mov	r0,#_find_blockSize_65536_646
      003409 86 82            [24] 9768 	mov	dpl,@r0
      00340B 12 15 48         [24] 9769 	lcall	_print8Hex
                                   9770 ;	.\ecen4350_lcd_v4.c:2240: setColorDefault();
      00340E 12 16 3B         [24] 9771 	lcall	_setColorDefault
                                   9772 ;	.\ecen4350_lcd_v4.c:2241: LCD_string_write("\n Search Size Limit:");
      003411 90 59 7E         [24] 9773 	mov	dptr,#___str_92
      003414 75 F0 80         [24] 9774 	mov	b,#0x80
      003417 12 10 77         [24] 9775 	lcall	_LCD_string_write
                                   9776 ;	.\ecen4350_lcd_v4.c:2242: setColorWhite();
      00341A 12 16 8B         [24] 9777 	lcall	_setColorWhite
                                   9778 ;	.\ecen4350_lcd_v4.c:2243: LCD_string_write("\n DWORD [32 bits]");
      00341D 90 59 F5         [24] 9779 	mov	dptr,#___str_99
      003420 75 F0 80         [24] 9780 	mov	b,#0x80
      003423 12 10 77         [24] 9781 	lcall	_LCD_string_write
      003426 D0 05            [24] 9782 	pop	ar5
      003428 80 68            [24] 9783 	sjmp	00126$
      00342A                       9784 00119$:
                                   9785 ;	.\ecen4350_lcd_v4.c:2244: } else if (blockSize == 0xFF) {
      00342A 78 80            [12] 9786 	mov	r0,#_find_blockSize_65536_646
      00342C B6 FF 63         [24] 9787 	cjne	@r0,#0xff,00126$
                                   9788 ;	.\ecen4350_lcd_v4.c:2245: scan = 1;
      00342F 78 82            [12] 9789 	mov	r0,#_find_scan_65536_646
      003431 76 01            [12] 9790 	mov	@r0,#0x01
                                   9791 ;	.\ecen4350_lcd_v4.c:2246: setColorGray();
      003433 C0 05            [24] 9792 	push	ar5
      003435 12 16 69         [24] 9793 	lcall	_setColorGray
                                   9794 ;	.\ecen4350_lcd_v4.c:2247: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003438 90 59 CE         [24] 9795 	mov	dptr,#___str_97
      00343B 75 F0 80         [24] 9796 	mov	b,#0x80
      00343E 12 10 77         [24] 9797 	lcall	_LCD_string_write
                                   9798 ;	.\ecen4350_lcd_v4.c:2248: LCD_string_write("<04> DWORD\n  ");
      003441 90 5A 07         [24] 9799 	mov	dptr,#___str_100
      003444 75 F0 80         [24] 9800 	mov	b,#0x80
      003447 12 10 77         [24] 9801 	lcall	_LCD_string_write
                                   9802 ;	.\ecen4350_lcd_v4.c:2249: setColorHighlight2();
      00344A 12 16 5D         [24] 9803 	lcall	_setColorHighlight2
                                   9804 ;	.\ecen4350_lcd_v4.c:2250: LCD_string_write("<FF> (SCAN)");
      00344D 90 5A 15         [24] 9805 	mov	dptr,#___str_101
      003450 75 F0 80         [24] 9806 	mov	b,#0x80
      003453 12 10 77         [24] 9807 	lcall	_LCD_string_write
                                   9808 ;	.\ecen4350_lcd_v4.c:2251: setColorDefault();
      003456 12 16 3B         [24] 9809 	lcall	_setColorDefault
                                   9810 ;	.\ecen4350_lcd_v4.c:2252: setCursor(0, 250);
      003459 75 6B FA         [24] 9811 	mov	_setCursor_PARM_2,#0xfa
      00345C 75 6C 00         [24] 9812 	mov	(_setCursor_PARM_2 + 1),#0x00
      00345F 90 00 00         [24] 9813 	mov	dptr,#0x0000
      003462 12 05 5D         [24] 9814 	lcall	_setCursor
                                   9815 ;	.\ecen4350_lcd_v4.c:2253: LCD_string_write("   ");
      003465 90 59 36         [24] 9816 	mov	dptr,#___str_86
      003468 75 F0 80         [24] 9817 	mov	b,#0x80
      00346B 12 10 77         [24] 9818 	lcall	_LCD_string_write
                                   9819 ;	.\ecen4350_lcd_v4.c:2254: setColorHighlight2();
      00346E 12 16 5D         [24] 9820 	lcall	_setColorHighlight2
                                   9821 ;	.\ecen4350_lcd_v4.c:2255: print8Hex(blockSize);
      003471 78 80            [12] 9822 	mov	r0,#_find_blockSize_65536_646
      003473 86 82            [24] 9823 	mov	dpl,@r0
      003475 12 15 48         [24] 9824 	lcall	_print8Hex
                                   9825 ;	.\ecen4350_lcd_v4.c:2256: setColorDefault();
      003478 12 16 3B         [24] 9826 	lcall	_setColorDefault
                                   9827 ;	.\ecen4350_lcd_v4.c:2257: LCD_string_write("\n Search Size Limit:");
      00347B 90 59 7E         [24] 9828 	mov	dptr,#___str_92
      00347E 75 F0 80         [24] 9829 	mov	b,#0x80
      003481 12 10 77         [24] 9830 	lcall	_LCD_string_write
                                   9831 ;	.\ecen4350_lcd_v4.c:2258: setColorWhite();
      003484 12 16 8B         [24] 9832 	lcall	_setColorWhite
                                   9833 ;	.\ecen4350_lcd_v4.c:2259: LCD_string_write("\n [256 Blocks]");
      003487 90 5A 21         [24] 9834 	mov	dptr,#___str_102
      00348A 75 F0 80         [24] 9835 	mov	b,#0x80
      00348D 12 10 77         [24] 9836 	lcall	_LCD_string_write
      003490 D0 05            [24] 9837 	pop	ar5
      003492                       9838 00126$:
                                   9839 ;	.\ecen4350_lcd_v4.c:2263: delay(40);
      003492 90 00 28         [24] 9840 	mov	dptr,#0x0028
      003495 C0 05            [24] 9841 	push	ar5
      003497 12 01 87         [24] 9842 	lcall	_delay
                                   9843 ;	.\ecen4350_lcd_v4.c:2264: clearLCD();
      00349A 12 0D FA         [24] 9844 	lcall	_clearLCD
                                   9845 ;	.\ecen4350_lcd_v4.c:2265: fillTop(GRAY);
      00349D 90 D6 BA         [24] 9846 	mov	dptr,#0xd6ba
      0034A0 12 0C 2D         [24] 9847 	lcall	_fillTop
                                   9848 ;	.\ecen4350_lcd_v4.c:2266: setTextSize(5);
      0034A3 75 82 05         [24] 9849 	mov	dpl,#0x05
      0034A6 12 05 77         [24] 9850 	lcall	_setTextSize
                                   9851 ;	.\ecen4350_lcd_v4.c:2267: setColorMenu();
      0034A9 12 16 74         [24] 9852 	lcall	_setColorMenu
                                   9853 ;	.\ecen4350_lcd_v4.c:2268: setCursor(30,0);
      0034AC E4               [12] 9854 	clr	a
      0034AD F5 6B            [12] 9855 	mov	_setCursor_PARM_2,a
      0034AF F5 6C            [12] 9856 	mov	(_setCursor_PARM_2 + 1),a
      0034B1 90 00 1E         [24] 9857 	mov	dptr,#0x001e
      0034B4 12 05 5D         [24] 9858 	lcall	_setCursor
                                   9859 ;	.\ecen4350_lcd_v4.c:2269: LCD_string_write("[FIND]\n");
      0034B7 90 58 C2         [24] 9860 	mov	dptr,#___str_79
      0034BA 75 F0 80         [24] 9861 	mov	b,#0x80
      0034BD 12 10 77         [24] 9862 	lcall	_LCD_string_write
                                   9863 ;	.\ecen4350_lcd_v4.c:2270: setColorDefault();
      0034C0 12 16 3B         [24] 9864 	lcall	_setColorDefault
                                   9865 ;	.\ecen4350_lcd_v4.c:2271: setTextSize(2);
      0034C3 75 82 02         [24] 9866 	mov	dpl,#0x02
      0034C6 12 05 77         [24] 9867 	lcall	_setTextSize
      0034C9 D0 05            [24] 9868 	pop	ar5
                                   9869 ;	.\ecen4350_lcd_v4.c:2277: while (exit) {
      0034CB                       9870 00205$:
      0034CB 78 84            [12] 9871 	mov	r0,#_find_exit_65536_646
      0034CD E6               [12] 9872 	mov	a,@r0
      0034CE 70 03            [24] 9873 	jnz	00556$
      0034D0 02 3A 93         [24] 9874 	ljmp	00207$
      0034D3                       9875 00556$:
                                   9876 ;	.\ecen4350_lcd_v4.c:2279: if (scan) {	
      0034D3 78 82            [12] 9877 	mov	r0,#_find_scan_65536_646
      0034D5 E6               [12] 9878 	mov	a,@r0
      0034D6 70 03            [24] 9879 	jnz	00557$
      0034D8 02 35 B2         [24] 9880 	ljmp	00196$
      0034DB                       9881 00557$:
                                   9882 ;	.\ecen4350_lcd_v4.c:2280: setCursor(0, 60);
      0034DB 75 6B 3C         [24] 9883 	mov	_setCursor_PARM_2,#0x3c
      0034DE 75 6C 00         [24] 9884 	mov	(_setCursor_PARM_2 + 1),#0x00
      0034E1 90 00 00         [24] 9885 	mov	dptr,#0x0000
      0034E4 C0 05            [24] 9886 	push	ar5
      0034E6 12 05 5D         [24] 9887 	lcall	_setCursor
                                   9888 ;	.\ecen4350_lcd_v4.c:2281: setColorYellow();
      0034E9 12 16 A1         [24] 9889 	lcall	_setColorYellow
                                   9890 ;	.\ecen4350_lcd_v4.c:2282: LCD_string_write(" [Non-Interactive]\n");
      0034EC 90 5A 30         [24] 9891 	mov	dptr,#___str_103
      0034EF 75 F0 80         [24] 9892 	mov	b,#0x80
      0034F2 12 10 77         [24] 9893 	lcall	_LCD_string_write
                                   9894 ;	.\ecen4350_lcd_v4.c:2283: setColorWhite();
      0034F5 12 16 8B         [24] 9895 	lcall	_setColorWhite
                                   9896 ;	.\ecen4350_lcd_v4.c:2284: LCD_string_write(" Search Value:\n ");
      0034F8 90 5A 44         [24] 9897 	mov	dptr,#___str_104
      0034FB 75 F0 80         [24] 9898 	mov	b,#0x80
      0034FE 12 10 77         [24] 9899 	lcall	_LCD_string_write
                                   9900 ;	.\ecen4350_lcd_v4.c:2285: setColorDefault();
      003501 12 16 3B         [24] 9901 	lcall	_setColorDefault
                                   9902 ;	.\ecen4350_lcd_v4.c:2286: print8Hex(value);
      003504 78 81            [12] 9903 	mov	r0,#_find_value_65536_646
      003506 86 82            [24] 9904 	mov	dpl,@r0
      003508 12 15 48         [24] 9905 	lcall	_print8Hex
      00350B D0 05            [24] 9906 	pop	ar5
                                   9907 ;	.\ecen4350_lcd_v4.c:2287: for(unsigned int i = 0; i < blockSize; i++) {
      00350D 8D 03            [24] 9908 	mov	ar3,r5
      00350F E4               [12] 9909 	clr	a
      003510 F5 61            [12] 9910 	mov	_find_i_262144_659,a
      003512 F5 62            [12] 9911 	mov	(_find_i_262144_659 + 1),a
      003514                       9912 00211$:
      003514 78 80            [12] 9913 	mov	r0,#_find_blockSize_65536_646
      003516 86 02            [24] 9914 	mov	ar2,@r0
      003518 7E 00            [12] 9915 	mov	r6,#0x00
      00351A C3               [12] 9916 	clr	c
      00351B E5 61            [12] 9917 	mov	a,_find_i_262144_659
      00351D 9A               [12] 9918 	subb	a,r2
      00351E E5 62            [12] 9919 	mov	a,(_find_i_262144_659 + 1)
      003520 9E               [12] 9920 	subb	a,r6
      003521 40 03            [24] 9921 	jc	00558$
      003523 02 35 A9         [24] 9922 	ljmp	00271$
      003526                       9923 00558$:
                                   9924 ;	.\ecen4350_lcd_v4.c:2288: d = (unsigned char __xdata*)(i+address);
      003526 78 7E            [12] 9925 	mov	r0,#_find_address_65536_646
      003528 E6               [12] 9926 	mov	a,@r0
      003529 25 61            [12] 9927 	add	a,_find_i_262144_659
      00352B FC               [12] 9928 	mov	r4,a
      00352C 08               [12] 9929 	inc	r0
      00352D E6               [12] 9930 	mov	a,@r0
      00352E 35 62            [12] 9931 	addc	a,(_find_i_262144_659 + 1)
      003530 FE               [12] 9932 	mov	r6,a
                                   9933 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                   9934 ;	assignBit
      003531 C2 B5            [12] 9935 	clr	_P3_5
                                   9936 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      003533 8C 82            [24] 9937 	mov	dpl,r4
      003535 8E 83            [24] 9938 	mov	dph,r6
      003537 E0               [24] 9939 	movx	a,@dptr
      003538 FC               [12] 9940 	mov	r4,a
                                   9941 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                   9942 ;	assignBit
      003539 D2 B5            [12] 9943 	setb	_P3_5
                                   9944 ;	.\ecen4350_lcd_v4.c:2289: if(value == ramRead8(d)){
      00353B 78 81            [12] 9945 	mov	r0,#_find_value_65536_646
      00353D E6               [12] 9946 	mov	a,@r0
      00353E B5 04 5D         [24] 9947 	cjne	a,ar4,00212$
                                   9948 ;	.\ecen4350_lcd_v4.c:2290: noneFound = 0;
      003541 78 83            [12] 9949 	mov	r0,#_find_noneFound_65536_646
      003543 76 00            [12] 9950 	mov	@r0,#0x00
                                   9951 ;	.\ecen4350_lcd_v4.c:2292: if (page == 0) {		
      003545 EB               [12] 9952 	mov	a,r3
      003546 70 34            [24] 9953 	jnz	00128$
                                   9954 ;	.\ecen4350_lcd_v4.c:2293: setColorWhite();
      003548 C0 03            [24] 9955 	push	ar3
      00354A 12 16 8B         [24] 9956 	lcall	_setColorWhite
                                   9957 ;	.\ecen4350_lcd_v4.c:2294: setCursor(0, 120);
      00354D 75 6B 78         [24] 9958 	mov	_setCursor_PARM_2,#0x78
      003550 75 6C 00         [24] 9959 	mov	(_setCursor_PARM_2 + 1),#0x00
      003553 90 00 00         [24] 9960 	mov	dptr,#0x0000
      003556 12 05 5D         [24] 9961 	lcall	_setCursor
                                   9962 ;	.\ecen4350_lcd_v4.c:2295: LCD_string_write(" Found at Location:\n");
      003559 90 5A 55         [24] 9963 	mov	dptr,#___str_105
      00355C 75 F0 80         [24] 9964 	mov	b,#0x80
      00355F 12 10 77         [24] 9965 	lcall	_LCD_string_write
                                   9966 ;	.\ecen4350_lcd_v4.c:2296: setColorDefault();
      003562 12 16 3B         [24] 9967 	lcall	_setColorDefault
                                   9968 ;	.\ecen4350_lcd_v4.c:2297: LCD_string_write(" 0x");
      003565 90 56 DB         [24] 9969 	mov	dptr,#___str_45
      003568 75 F0 80         [24] 9970 	mov	b,#0x80
      00356B 12 10 77         [24] 9971 	lcall	_LCD_string_write
                                   9972 ;	.\ecen4350_lcd_v4.c:2298: print16Hex(i);
      00356E 85 61 82         [24] 9973 	mov	dpl,_find_i_262144_659
      003571 85 62 83         [24] 9974 	mov	dph,(_find_i_262144_659 + 1)
      003574 12 15 5F         [24] 9975 	lcall	_print16Hex
      003577 D0 03            [24] 9976 	pop	ar3
                                   9977 ;	.\ecen4350_lcd_v4.c:2299: page++;
      003579 0B               [12] 9978 	inc	r3
      00357A 80 22            [24] 9979 	sjmp	00212$
      00357C                       9980 00128$:
                                   9981 ;	.\ecen4350_lcd_v4.c:2301: setCursor(0, 120);
      00357C 75 6B 78         [24] 9982 	mov	_setCursor_PARM_2,#0x78
      00357F 75 6C 00         [24] 9983 	mov	(_setCursor_PARM_2 + 1),#0x00
      003582 90 00 00         [24] 9984 	mov	dptr,#0x0000
      003585 C0 03            [24] 9985 	push	ar3
      003587 12 05 5D         [24] 9986 	lcall	_setCursor
                                   9987 ;	.\ecen4350_lcd_v4.c:2302: LCD_string_write("\n 0x");
      00358A 90 5A 6A         [24] 9988 	mov	dptr,#___str_106
      00358D 75 F0 80         [24] 9989 	mov	b,#0x80
      003590 12 10 77         [24] 9990 	lcall	_LCD_string_write
                                   9991 ;	.\ecen4350_lcd_v4.c:2303: print16Hex(i);
      003593 85 61 82         [24] 9992 	mov	dpl,_find_i_262144_659
      003596 85 62 83         [24] 9993 	mov	dph,(_find_i_262144_659 + 1)
      003599 12 15 5F         [24] 9994 	lcall	_print16Hex
      00359C D0 03            [24] 9995 	pop	ar3
      00359E                       9996 00212$:
                                   9997 ;	.\ecen4350_lcd_v4.c:2287: for(unsigned int i = 0; i < blockSize; i++) {
      00359E 05 61            [12] 9998 	inc	_find_i_262144_659
      0035A0 E4               [12] 9999 	clr	a
      0035A1 B5 61 02         [24]10000 	cjne	a,_find_i_262144_659,00562$
      0035A4 05 62            [12]10001 	inc	(_find_i_262144_659 + 1)
      0035A6                      10002 00562$:
      0035A6 02 35 14         [24]10003 	ljmp	00211$
      0035A9                      10004 00271$:
      0035A9 8B 05            [24]10005 	mov	ar5,r3
                                  10006 ;	.\ecen4350_lcd_v4.c:2307: exit = 0;
      0035AB 78 84            [12]10007 	mov	r0,#_find_exit_65536_646
      0035AD 76 00            [12]10008 	mov	@r0,#0x00
      0035AF 02 3A 1A         [24]10009 	ljmp	00197$
      0035B2                      10010 00196$:
                                  10011 ;	.\ecen4350_lcd_v4.c:2309: setCursor(0, 60);
      0035B2 75 6B 3C         [24]10012 	mov	_setCursor_PARM_2,#0x3c
      0035B5 75 6C 00         [24]10013 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035B8 90 00 00         [24]10014 	mov	dptr,#0x0000
      0035BB C0 05            [24]10015 	push	ar5
      0035BD 12 05 5D         [24]10016 	lcall	_setCursor
                                  10017 ;	.\ecen4350_lcd_v4.c:2310: setColorYellow();
      0035C0 12 16 A1         [24]10018 	lcall	_setColorYellow
                                  10019 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write(" [Interactive]\n");
      0035C3 90 5A 6F         [24]10020 	mov	dptr,#___str_107
      0035C6 75 F0 80         [24]10021 	mov	b,#0x80
      0035C9 12 10 77         [24]10022 	lcall	_LCD_string_write
                                  10023 ;	.\ecen4350_lcd_v4.c:2312: setColorWhite();
      0035CC 12 16 8B         [24]10024 	lcall	_setColorWhite
                                  10025 ;	.\ecen4350_lcd_v4.c:2313: LCD_string_write(" Search Value:\n ");
      0035CF 90 5A 44         [24]10026 	mov	dptr,#___str_104
      0035D2 75 F0 80         [24]10027 	mov	b,#0x80
      0035D5 12 10 77         [24]10028 	lcall	_LCD_string_write
                                  10029 ;	.\ecen4350_lcd_v4.c:2314: setColorDefault();
      0035D8 12 16 3B         [24]10030 	lcall	_setColorDefault
                                  10031 ;	.\ecen4350_lcd_v4.c:2315: print8Hex(value);
      0035DB 78 81            [12]10032 	mov	r0,#_find_value_65536_646
      0035DD 86 82            [24]10033 	mov	dpl,@r0
      0035DF 12 15 48         [24]10034 	lcall	_print8Hex
      0035E2 D0 05            [24]10035 	pop	ar5
                                  10036 ;	.\ecen4350_lcd_v4.c:2318: for (unsigned int i = 0; i < blockSize; i++) {
      0035E4 E4               [12]10037 	clr	a
      0035E5 F5 64            [12]10038 	mov	_find_sloc1_1_0,a
      0035E7 F5 65            [12]10039 	mov	(_find_sloc1_1_0 + 1),a
      0035E9                      10040 00214$:
      0035E9 78 80            [12]10041 	mov	r0,#_find_blockSize_65536_646
      0035EB 86 02            [24]10042 	mov	ar2,@r0
      0035ED 7B 00            [12]10043 	mov	r3,#0x00
      0035EF C3               [12]10044 	clr	c
      0035F0 E5 64            [12]10045 	mov	a,_find_sloc1_1_0
      0035F2 9A               [12]10046 	subb	a,r2
      0035F3 E5 65            [12]10047 	mov	a,(_find_sloc1_1_0 + 1)
      0035F5 9B               [12]10048 	subb	a,r3
      0035F6 40 03            [24]10049 	jc	00563$
      0035F8 02 3A 1A         [24]10050 	ljmp	00197$
      0035FB                      10051 00563$:
                                  10052 ;	.\ecen4350_lcd_v4.c:2319: d = (unsigned char __xdata*)(i+address);
      0035FB 78 7E            [12]10053 	mov	r0,#_find_address_65536_646
      0035FD E6               [12]10054 	mov	a,@r0
      0035FE 25 64            [12]10055 	add	a,_find_sloc1_1_0
      003600 FA               [12]10056 	mov	r2,a
      003601 08               [12]10057 	inc	r0
      003602 E6               [12]10058 	mov	a,@r0
      003603 35 65            [12]10059 	addc	a,(_find_sloc1_1_0 + 1)
      003605 FB               [12]10060 	mov	r3,a
      003606 8A 82            [24]10061 	mov	dpl,r2
      003608 8B 83            [24]10062 	mov	dph,r3
                                  10063 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  10064 ;	assignBit
      00360A C2 B5            [12]10065 	clr	_P3_5
                                  10066 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      00360C E0               [24]10067 	movx	a,@dptr
      00360D FB               [12]10068 	mov	r3,a
                                  10069 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  10070 ;	assignBit
      00360E D2 B5            [12]10071 	setb	_P3_5
                                  10072 ;	.\ecen4350_lcd_v4.c:2320: if(value == ramRead8(d)){
      003610 78 81            [12]10073 	mov	r0,#_find_value_65536_646
      003612 E6               [12]10074 	mov	a,@r0
      003613 B5 03 02         [24]10075 	cjne	a,ar3,00564$
      003616 80 03            [24]10076 	sjmp	00565$
      003618                      10077 00564$:
      003618 02 3A 0F         [24]10078 	ljmp	00215$
      00361B                      10079 00565$:
                                  10080 ;	.\ecen4350_lcd_v4.c:2321: noneFound = 0;		// toggle flag
      00361B 78 83            [12]10081 	mov	r0,#_find_noneFound_65536_646
      00361D 76 00            [12]10082 	mov	@r0,#0x00
                                  10083 ;	.\ecen4350_lcd_v4.c:2322: setCursor(0, 120);
      00361F 75 6B 78         [24]10084 	mov	_setCursor_PARM_2,#0x78
      003622 75 6C 00         [24]10085 	mov	(_setCursor_PARM_2 + 1),#0x00
      003625 90 00 00         [24]10086 	mov	dptr,#0x0000
      003628 C0 05            [24]10087 	push	ar5
      00362A 12 05 5D         [24]10088 	lcall	_setCursor
                                  10089 ;	.\ecen4350_lcd_v4.c:2323: setColorWhite();
      00362D 12 16 8B         [24]10090 	lcall	_setColorWhite
                                  10091 ;	.\ecen4350_lcd_v4.c:2324: LCD_string_write(" Found at Location \n");
      003630 90 5A 7F         [24]10092 	mov	dptr,#___str_108
      003633 75 F0 80         [24]10093 	mov	b,#0x80
      003636 12 10 77         [24]10094 	lcall	_LCD_string_write
                                  10095 ;	.\ecen4350_lcd_v4.c:2325: setColorDefault();
      003639 12 16 3B         [24]10096 	lcall	_setColorDefault
                                  10097 ;	.\ecen4350_lcd_v4.c:2326: LCD_string_write(" 0x");
      00363C 90 56 DB         [24]10098 	mov	dptr,#___str_45
      00363F 75 F0 80         [24]10099 	mov	b,#0x80
      003642 12 10 77         [24]10100 	lcall	_LCD_string_write
      003645 D0 05            [24]10101 	pop	ar5
                                  10102 ;	.\ecen4350_lcd_v4.c:2327: print16Hex(page+address);
      003647 8D 02            [24]10103 	mov	ar2,r5
      003649 7B 00            [12]10104 	mov	r3,#0x00
      00364B 78 7E            [12]10105 	mov	r0,#_find_address_65536_646
      00364D E6               [12]10106 	mov	a,@r0
      00364E 2A               [12]10107 	add	a,r2
      00364F F5 82            [12]10108 	mov	dpl,a
      003651 08               [12]10109 	inc	r0
      003652 E6               [12]10110 	mov	a,@r0
      003653 3B               [12]10111 	addc	a,r3
      003654 F5 83            [12]10112 	mov	dph,a
      003656 C0 05            [24]10113 	push	ar5
      003658 12 15 5F         [24]10114 	lcall	_print16Hex
                                  10115 ;	.\ecen4350_lcd_v4.c:2328: setCursor(50, 300);
      00365B 75 6B 2C         [24]10116 	mov	_setCursor_PARM_2,#0x2c
      00365E 75 6C 01         [24]10117 	mov	(_setCursor_PARM_2 + 1),#0x01
      003661 90 00 32         [24]10118 	mov	dptr,#0x0032
      003664 12 05 5D         [24]10119 	lcall	_setCursor
                                  10120 ;	.\ecen4350_lcd_v4.c:2329: setColorGray();
      003667 12 16 69         [24]10121 	lcall	_setColorGray
                                  10122 ;	.\ecen4350_lcd_v4.c:2330: LCD_string_write("Page: ");
      00366A 90 5A 94         [24]10123 	mov	dptr,#___str_109
      00366D 75 F0 80         [24]10124 	mov	b,#0x80
      003670 12 10 77         [24]10125 	lcall	_LCD_string_write
                                  10126 ;	.\ecen4350_lcd_v4.c:2331: setColorHighlight2();
      003673 12 16 5D         [24]10127 	lcall	_setColorHighlight2
      003676 D0 05            [24]10128 	pop	ar5
                                  10129 ;	.\ecen4350_lcd_v4.c:2332: print8Hex(page+1);
      003678 8D 03            [24]10130 	mov	ar3,r5
      00367A EB               [12]10131 	mov	a,r3
      00367B 04               [12]10132 	inc	a
      00367C F5 82            [12]10133 	mov	dpl,a
      00367E C0 05            [24]10134 	push	ar5
      003680 12 15 48         [24]10135 	lcall	_print8Hex
      003683 D0 05            [24]10136 	pop	ar5
                                  10137 ;	.\ecen4350_lcd_v4.c:2336: if (i == 0) {					// At beginning, page <0>
      003685 E5 64            [12]10138 	mov	a,_find_sloc1_1_0
      003687 45 65            [12]10139 	orl	a,(_find_sloc1_1_0 + 1)
      003689 60 03            [24]10140 	jz	00566$
      00368B 02 37 BA         [24]10141 	ljmp	00190$
      00368E                      10142 00566$:
                                  10143 ;	.\ecen4350_lcd_v4.c:2337: if (i != blockSize - 1) {	// not at the end yet, no previous page
      00368E C0 05            [24]10144 	push	ar5
      003690 78 80            [12]10145 	mov	r0,#_find_blockSize_65536_646
      003692 86 02            [24]10146 	mov	ar2,@r0
      003694 7B 00            [12]10147 	mov	r3,#0x00
      003696 EA               [12]10148 	mov	a,r2
      003697 24 FF            [12]10149 	add	a,#0xff
      003699 FD               [12]10150 	mov	r5,a
      00369A EB               [12]10151 	mov	a,r3
      00369B 34 FF            [12]10152 	addc	a,#0xff
      00369D FF               [12]10153 	mov	r7,a
      00369E ED               [12]10154 	mov	a,r5
      00369F B5 64 09         [24]10155 	cjne	a,_find_sloc1_1_0,00567$
      0036A2 EF               [12]10156 	mov	a,r7
      0036A3 B5 65 05         [24]10157 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      0036A6 D0 05            [24]10158 	pop	ar5
      0036A8 02 37 3B         [24]10159 	ljmp	00148$
      0036AB                      10160 00567$:
                                  10161 ;	.\ecen4350_lcd_v4.c:2338: setCursor(0, 180);
      0036AB 75 6B B4         [24]10162 	mov	_setCursor_PARM_2,#0xb4
      0036AE 75 6C 00         [24]10163 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036B1 90 00 00         [24]10164 	mov	dptr,#0x0000
      0036B4 12 05 5D         [24]10165 	lcall	_setCursor
                                  10166 ;	.\ecen4350_lcd_v4.c:2339: setColorWhite();
      0036B7 12 16 8B         [24]10167 	lcall	_setColorWhite
                                  10168 ;	.\ecen4350_lcd_v4.c:2340: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      0036BA 90 5A 9B         [24]10169 	mov	dptr,#___str_110
      0036BD 75 F0 80         [24]10170 	mov	b,#0x80
      0036C0 12 10 77         [24]10171 	lcall	_LCD_string_write
      0036C3 D0 05            [24]10172 	pop	ar5
                                  10173 ;	.\ecen4350_lcd_v4.c:2341: invalidInput = 1;
      0036C5 7F 01            [12]10174 	mov	r7,#0x01
                                  10175 ;	.\ecen4350_lcd_v4.c:2342: while (invalidInput) {
      0036C7 8D 63            [24]10176 	mov	_find_sloc0_1_0,r5
      0036C9                      10177 00137$:
      0036C9 EF               [12]10178 	mov	a,r7
      0036CA 70 03            [24]10179 	jnz	00568$
      0036CC 02 37 AD         [24]10180 	ljmp	00272$
      0036CF                      10181 00568$:
                                  10182 ;	.\ecen4350_lcd_v4.c:2343: selection = keyDetect();
      0036CF C0 07            [24]10183 	push	ar7
      0036D1 12 11 95         [24]10184 	lcall	_keyDetect
      0036D4 AF 82            [24]10185 	mov	r7,dpl
      0036D6 78 71            [12]10186 	mov	r0,#_selection
      0036D8 A6 07            [24]10187 	mov	@r0,ar7
                                  10188 ;	.\ecen4350_lcd_v4.c:2344: if(selection == '1'){
      0036DA BF 31 02         [24]10189 	cjne	r7,#0x31,00569$
      0036DD 80 04            [24]10190 	sjmp	00570$
      0036DF                      10191 00569$:
      0036DF D0 07            [24]10192 	pop	ar7
      0036E1 80 27            [24]10193 	sjmp	00134$
      0036E3                      10194 00570$:
      0036E3 D0 07            [24]10195 	pop	ar7
                                  10196 ;	.\ecen4350_lcd_v4.c:2345: setCursor(0, 180);
      0036E5 75 6B B4         [24]10197 	mov	_setCursor_PARM_2,#0xb4
      0036E8 75 6C 00         [24]10198 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036EB 90 00 00         [24]10199 	mov	dptr,#0x0000
      0036EE 12 05 5D         [24]10200 	lcall	_setCursor
                                  10201 ;	.\ecen4350_lcd_v4.c:2346: LCD_string_write(" ");
      0036F1 90 55 E1         [24]10202 	mov	dptr,#___str_29
      0036F4 75 F0 80         [24]10203 	mov	b,#0x80
      0036F7 12 10 77         [24]10204 	lcall	_LCD_string_write
                                  10205 ;	.\ecen4350_lcd_v4.c:2347: setColorHighlight2();
      0036FA 12 16 5D         [24]10206 	lcall	_setColorHighlight2
                                  10207 ;	.\ecen4350_lcd_v4.c:2348: LCD_string_write("<1> Next");
      0036FD 90 5A BE         [24]10208 	mov	dptr,#___str_111
      003700 75 F0 80         [24]10209 	mov	b,#0x80
      003703 12 10 77         [24]10210 	lcall	_LCD_string_write
                                  10211 ;	.\ecen4350_lcd_v4.c:2349: invalidInput = 0;
      003706 7F 00            [12]10212 	mov	r7,#0x00
                                  10213 ;	.\ecen4350_lcd_v4.c:2350: page++;
      003708 05 63            [12]10214 	inc	_find_sloc0_1_0
      00370A                      10215 00134$:
                                  10216 ;	.\ecen4350_lcd_v4.c:2351: } if(selection == '0') {
      00370A 78 71            [12]10217 	mov	r0,#_selection
      00370C B6 30 BA         [24]10218 	cjne	@r0,#0x30,00137$
                                  10219 ;	.\ecen4350_lcd_v4.c:2352: setColorDefault();
      00370F 12 16 3B         [24]10220 	lcall	_setColorDefault
                                  10221 ;	.\ecen4350_lcd_v4.c:2353: setCursor(0, 180);
      003712 75 6B B4         [24]10222 	mov	_setCursor_PARM_2,#0xb4
      003715 75 6C 00         [24]10223 	mov	(_setCursor_PARM_2 + 1),#0x00
      003718 90 00 00         [24]10224 	mov	dptr,#0x0000
      00371B 12 05 5D         [24]10225 	lcall	_setCursor
                                  10226 ;	.\ecen4350_lcd_v4.c:2354: LCD_string_write("\n ");
      00371E 90 57 EC         [24]10227 	mov	dptr,#___str_66
      003721 75 F0 80         [24]10228 	mov	b,#0x80
      003724 12 10 77         [24]10229 	lcall	_LCD_string_write
                                  10230 ;	.\ecen4350_lcd_v4.c:2355: setColorHighlight2();
      003727 12 16 5D         [24]10231 	lcall	_setColorHighlight2
                                  10232 ;	.\ecen4350_lcd_v4.c:2356: LCD_string_write("<0> Exit");
      00372A 90 58 A7         [24]10233 	mov	dptr,#___str_77
      00372D 75 F0 80         [24]10234 	mov	b,#0x80
      003730 12 10 77         [24]10235 	lcall	_LCD_string_write
                                  10236 ;	.\ecen4350_lcd_v4.c:2357: exit = 0;		// set exit flag
      003733 78 84            [12]10237 	mov	r0,#_find_exit_65536_646
      003735 76 00            [12]10238 	mov	@r0,#0x00
                                  10239 ;	.\ecen4350_lcd_v4.c:2358: invalidInput = 0;
      003737 7F 00            [12]10240 	mov	r7,#0x00
      003739 80 8E            [24]10241 	sjmp	00137$
      00373B                      10242 00148$:
                                  10243 ;	.\ecen4350_lcd_v4.c:2361: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      00373B 1A               [12]10244 	dec	r2
      00373C BA FF 01         [24]10245 	cjne	r2,#0xff,00573$
      00373F 1B               [12]10246 	dec	r3
      003740                      10247 00573$:
      003740 EA               [12]10248 	mov	a,r2
      003741 B5 64 6B         [24]10249 	cjne	a,_find_sloc1_1_0,00149$
      003744 EB               [12]10250 	mov	a,r3
      003745 B5 65 67         [24]10251 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10252 ;	.\ecen4350_lcd_v4.c:2362: setCursor(0, 180);
      003748 75 6B B4         [24]10253 	mov	_setCursor_PARM_2,#0xb4
      00374B 75 6C 00         [24]10254 	mov	(_setCursor_PARM_2 + 1),#0x00
      00374E 90 00 00         [24]10255 	mov	dptr,#0x0000
      003751 C0 05            [24]10256 	push	ar5
      003753 12 05 5D         [24]10257 	lcall	_setCursor
                                  10258 ;	.\ecen4350_lcd_v4.c:2363: setColorWhite();
      003756 12 16 8B         [24]10259 	lcall	_setColorWhite
                                  10260 ;	.\ecen4350_lcd_v4.c:2364: LCD_string_write("          \n <0> Exit\n              ");
      003759 90 5A C7         [24]10261 	mov	dptr,#___str_112
      00375C 75 F0 80         [24]10262 	mov	b,#0x80
      00375F 12 10 77         [24]10263 	lcall	_LCD_string_write
      003762 D0 05            [24]10264 	pop	ar5
                                  10265 ;	.\ecen4350_lcd_v4.c:2365: invalidInput = 1;
      003764 7F 01            [12]10266 	mov	r7,#0x01
                                  10267 ;	.\ecen4350_lcd_v4.c:2366: while (invalidInput) {
      003766                      10268 00142$:
      003766 EF               [12]10269 	mov	a,r7
      003767 60 46            [24]10270 	jz	00149$
                                  10271 ;	.\ecen4350_lcd_v4.c:2367: selection = keyDetect();
      003769 C0 07            [24]10272 	push	ar7
      00376B C0 05            [24]10273 	push	ar5
      00376D 12 11 95         [24]10274 	lcall	_keyDetect
      003770 AB 82            [24]10275 	mov	r3,dpl
      003772 D0 05            [24]10276 	pop	ar5
      003774 D0 07            [24]10277 	pop	ar7
      003776 78 71            [12]10278 	mov	r0,#_selection
      003778 A6 03            [24]10279 	mov	@r0,ar3
                                  10280 ;	.\ecen4350_lcd_v4.c:2368: if(selection == '0') {
      00377A BB 30 E9         [24]10281 	cjne	r3,#0x30,00142$
                                  10282 ;	.\ecen4350_lcd_v4.c:2369: setColorDefault();
      00377D C0 05            [24]10283 	push	ar5
      00377F 12 16 3B         [24]10284 	lcall	_setColorDefault
                                  10285 ;	.\ecen4350_lcd_v4.c:2370: setCursor(0, 180);
      003782 75 6B B4         [24]10286 	mov	_setCursor_PARM_2,#0xb4
      003785 75 6C 00         [24]10287 	mov	(_setCursor_PARM_2 + 1),#0x00
      003788 90 00 00         [24]10288 	mov	dptr,#0x0000
      00378B 12 05 5D         [24]10289 	lcall	_setCursor
                                  10290 ;	.\ecen4350_lcd_v4.c:2371: LCD_string_write("\n ");
      00378E 90 57 EC         [24]10291 	mov	dptr,#___str_66
      003791 75 F0 80         [24]10292 	mov	b,#0x80
      003794 12 10 77         [24]10293 	lcall	_LCD_string_write
                                  10294 ;	.\ecen4350_lcd_v4.c:2372: setColorHighlight2();
      003797 12 16 5D         [24]10295 	lcall	_setColorHighlight2
                                  10296 ;	.\ecen4350_lcd_v4.c:2373: LCD_string_write("<0> Exit");
      00379A 90 58 A7         [24]10297 	mov	dptr,#___str_77
      00379D 75 F0 80         [24]10298 	mov	b,#0x80
      0037A0 12 10 77         [24]10299 	lcall	_LCD_string_write
      0037A3 D0 05            [24]10300 	pop	ar5
                                  10301 ;	.\ecen4350_lcd_v4.c:2374: exit = 0;		// set exit flag
      0037A5 78 84            [12]10302 	mov	r0,#_find_exit_65536_646
      0037A7 76 00            [12]10303 	mov	@r0,#0x00
                                  10304 ;	.\ecen4350_lcd_v4.c:2375: invalidInput = 0;
      0037A9 7F 00            [12]10305 	mov	r7,#0x00
      0037AB 80 B9            [24]10306 	sjmp	00142$
      0037AD                      10307 00272$:
      0037AD AD 63            [24]10308 	mov	r5,_find_sloc0_1_0
      0037AF                      10309 00149$:
                                  10310 ;	.\ecen4350_lcd_v4.c:2379: if (exit == 0) {	// check exit flag
      0037AF 78 84            [12]10311 	mov	r0,#_find_exit_65536_646
      0037B1 E6               [12]10312 	mov	a,@r0
      0037B2 60 03            [24]10313 	jz	00579$
      0037B4 02 3A 0F         [24]10314 	ljmp	00215$
      0037B7                      10315 00579$:
                                  10316 ;	.\ecen4350_lcd_v4.c:2380: break;			// break out of for loop iteration
      0037B7 02 3A 1A         [24]10317 	ljmp	00197$
      0037BA                      10318 00190$:
                                  10319 ;	.\ecen4350_lcd_v4.c:2385: else if (i == blockSize - 1) {		// At Page End 
      0037BA C0 05            [24]10320 	push	ar5
      0037BC 78 80            [12]10321 	mov	r0,#_find_blockSize_65536_646
      0037BE 86 03            [24]10322 	mov	ar3,@r0
      0037C0 7F 00            [12]10323 	mov	r7,#0x00
      0037C2 EB               [12]10324 	mov	a,r3
      0037C3 24 FF            [12]10325 	add	a,#0xff
      0037C5 FA               [12]10326 	mov	r2,a
      0037C6 EF               [12]10327 	mov	a,r7
      0037C7 34 FF            [12]10328 	addc	a,#0xff
      0037C9 FD               [12]10329 	mov	r5,a
      0037CA EA               [12]10330 	mov	a,r2
      0037CB B5 64 06         [24]10331 	cjne	a,_find_sloc1_1_0,00580$
      0037CE ED               [12]10332 	mov	a,r5
      0037CF B5 65 02         [24]10333 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      0037D2 80 05            [24]10334 	sjmp	00581$
      0037D4                      10335 00580$:
      0037D4 D0 05            [24]10336 	pop	ar5
      0037D6 02 39 06         [24]10337 	ljmp	00187$
      0037D9                      10338 00581$:
      0037D9 D0 05            [24]10339 	pop	ar5
                                  10340 ;	.\ecen4350_lcd_v4.c:2386: if (i != 0) {				// not at beginning, no next page
      0037DB E5 64            [12]10341 	mov	a,_find_sloc1_1_0
      0037DD 45 65            [12]10342 	orl	a,(_find_sloc1_1_0 + 1)
      0037DF 70 03            [24]10343 	jnz	00582$
      0037E1 02 38 8F         [24]10344 	ljmp	00167$
      0037E4                      10345 00582$:
                                  10346 ;	.\ecen4350_lcd_v4.c:2387: setCursor(0, 180);
      0037E4 75 6B B4         [24]10347 	mov	_setCursor_PARM_2,#0xb4
      0037E7 75 6C 00         [24]10348 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037EA 90 00 00         [24]10349 	mov	dptr,#0x0000
      0037ED C0 05            [24]10350 	push	ar5
      0037EF 12 05 5D         [24]10351 	lcall	_setCursor
                                  10352 ;	.\ecen4350_lcd_v4.c:2388: setColorWhite();
      0037F2 12 16 8B         [24]10353 	lcall	_setColorWhite
                                  10354 ;	.\ecen4350_lcd_v4.c:2389: LCD_string_write("          \n <0> Exit\n <2> Previous");
      0037F5 90 5A EB         [24]10355 	mov	dptr,#___str_113
      0037F8 75 F0 80         [24]10356 	mov	b,#0x80
      0037FB 12 10 77         [24]10357 	lcall	_LCD_string_write
      0037FE D0 05            [24]10358 	pop	ar5
                                  10359 ;	.\ecen4350_lcd_v4.c:2390: invalidInput = 1;
      003800 7F 01            [12]10360 	mov	r7,#0x01
                                  10361 ;	.\ecen4350_lcd_v4.c:2391: while (invalidInput) {
      003802 8D 63            [24]10362 	mov	_find_sloc0_1_0,r5
      003804                      10363 00156$:
      003804 EF               [12]10364 	mov	a,r7
      003805 70 03            [24]10365 	jnz	00583$
      003807 02 38 F9         [24]10366 	ljmp	00273$
      00380A                      10367 00583$:
                                  10368 ;	.\ecen4350_lcd_v4.c:2392: selection = keyDetect();
      00380A C0 07            [24]10369 	push	ar7
      00380C C0 07            [24]10370 	push	ar7
      00380E 12 11 95         [24]10371 	lcall	_keyDetect
      003811 AA 82            [24]10372 	mov	r2,dpl
      003813 D0 07            [24]10373 	pop	ar7
      003815 78 71            [12]10374 	mov	r0,#_selection
      003817 A6 02            [24]10375 	mov	@r0,ar2
                                  10376 ;	.\ecen4350_lcd_v4.c:2393: if(selection == '0'){
      003819 BA 30 02         [24]10377 	cjne	r2,#0x30,00584$
      00381C 80 04            [24]10378 	sjmp	00585$
      00381E                      10379 00584$:
      00381E D0 07            [24]10380 	pop	ar7
      003820 80 29            [24]10381 	sjmp	00153$
      003822                      10382 00585$:
      003822 D0 07            [24]10383 	pop	ar7
                                  10384 ;	.\ecen4350_lcd_v4.c:2394: setCursor(0, 180);
      003824 75 6B B4         [24]10385 	mov	_setCursor_PARM_2,#0xb4
      003827 75 6C 00         [24]10386 	mov	(_setCursor_PARM_2 + 1),#0x00
      00382A 90 00 00         [24]10387 	mov	dptr,#0x0000
      00382D 12 05 5D         [24]10388 	lcall	_setCursor
                                  10389 ;	.\ecen4350_lcd_v4.c:2395: LCD_string_write("\n ");
      003830 90 57 EC         [24]10390 	mov	dptr,#___str_66
      003833 75 F0 80         [24]10391 	mov	b,#0x80
      003836 12 10 77         [24]10392 	lcall	_LCD_string_write
                                  10393 ;	.\ecen4350_lcd_v4.c:2396: setColorHighlight2();
      003839 12 16 5D         [24]10394 	lcall	_setColorHighlight2
                                  10395 ;	.\ecen4350_lcd_v4.c:2397: LCD_string_write("<0> Exit\n");
      00383C 90 57 21         [24]10396 	mov	dptr,#___str_53
      00383F 75 F0 80         [24]10397 	mov	b,#0x80
      003842 12 10 77         [24]10398 	lcall	_LCD_string_write
                                  10399 ;	.\ecen4350_lcd_v4.c:2398: invalidInput = 0;
      003845 7F 00            [12]10400 	mov	r7,#0x00
                                  10401 ;	.\ecen4350_lcd_v4.c:2399: exit = 0;
      003847 78 84            [12]10402 	mov	r0,#_find_exit_65536_646
      003849 76 00            [12]10403 	mov	@r0,#0x00
      00384B                      10404 00153$:
                                  10405 ;	.\ecen4350_lcd_v4.c:2400: } if (selection == '2') {
      00384B 78 71            [12]10406 	mov	r0,#_selection
      00384D B6 32 B4         [24]10407 	cjne	@r0,#0x32,00156$
                                  10408 ;	.\ecen4350_lcd_v4.c:2401: setCursor(0, 180);
      003850 75 6B B4         [24]10409 	mov	_setCursor_PARM_2,#0xb4
      003853 75 6C 00         [24]10410 	mov	(_setCursor_PARM_2 + 1),#0x00
      003856 90 00 00         [24]10411 	mov	dptr,#0x0000
      003859 12 05 5D         [24]10412 	lcall	_setCursor
                                  10413 ;	.\ecen4350_lcd_v4.c:2402: setColorWhite();
      00385C 12 16 8B         [24]10414 	lcall	_setColorWhite
                                  10415 ;	.\ecen4350_lcd_v4.c:2403: LCD_string_write("\n\n ");
      00385F 90 5B 0E         [24]10416 	mov	dptr,#___str_114
      003862 75 F0 80         [24]10417 	mov	b,#0x80
      003865 12 10 77         [24]10418 	lcall	_LCD_string_write
                                  10419 ;	.\ecen4350_lcd_v4.c:2404: setColorHighlight2();
      003868 12 16 5D         [24]10420 	lcall	_setColorHighlight2
                                  10421 ;	.\ecen4350_lcd_v4.c:2405: LCD_string_write("<2> Previous");
      00386B 90 5B 12         [24]10422 	mov	dptr,#___str_115
      00386E 75 F0 80         [24]10423 	mov	b,#0x80
      003871 12 10 77         [24]10424 	lcall	_LCD_string_write
                                  10425 ;	.\ecen4350_lcd_v4.c:2406: invalidInput = 0;
      003874 7F 00            [12]10426 	mov	r7,#0x00
                                  10427 ;	.\ecen4350_lcd_v4.c:2407: i--;			// two decrements plus next loop increment is equal to one decrement
      003876 E5 64            [12]10428 	mov	a,_find_sloc1_1_0
      003878 24 FF            [12]10429 	add	a,#0xff
      00387A FA               [12]10430 	mov	r2,a
      00387B E5 65            [12]10431 	mov	a,(_find_sloc1_1_0 + 1)
      00387D 34 FF            [12]10432 	addc	a,#0xff
      00387F FE               [12]10433 	mov	r6,a
                                  10434 ;	.\ecen4350_lcd_v4.c:2408: i--;
      003880 EA               [12]10435 	mov	a,r2
      003881 24 FF            [12]10436 	add	a,#0xff
      003883 F5 64            [12]10437 	mov	_find_sloc1_1_0,a
      003885 EE               [12]10438 	mov	a,r6
      003886 34 FF            [12]10439 	addc	a,#0xff
      003888 F5 65            [12]10440 	mov	(_find_sloc1_1_0 + 1),a
                                  10441 ;	.\ecen4350_lcd_v4.c:2409: page--;			// decrement to previous page
      00388A 15 63            [12]10442 	dec	_find_sloc0_1_0
      00388C 02 38 04         [24]10443 	ljmp	00156$
      00388F                      10444 00167$:
                                  10445 ;	.\ecen4350_lcd_v4.c:2413: else if (i == 0){				// end at beginning, no next or previous
      00388F E5 64            [12]10446 	mov	a,_find_sloc1_1_0
      003891 45 65            [12]10447 	orl	a,(_find_sloc1_1_0 + 1)
                                  10448 ;	.\ecen4350_lcd_v4.c:2414: setCursor(0, 180);
      003893 70 66            [24]10449 	jnz	00168$
      003895 75 6B B4         [24]10450 	mov	_setCursor_PARM_2,#0xb4
      003898 F5 6C            [12]10451 	mov	(_setCursor_PARM_2 + 1),a
      00389A 90 00 00         [24]10452 	mov	dptr,#0x0000
      00389D C0 05            [24]10453 	push	ar5
      00389F 12 05 5D         [24]10454 	lcall	_setCursor
                                  10455 ;	.\ecen4350_lcd_v4.c:2415: setColorWhite();
      0038A2 12 16 8B         [24]10456 	lcall	_setColorWhite
                                  10457 ;	.\ecen4350_lcd_v4.c:2416: LCD_string_write("          \n <0> Exit\n              ");
      0038A5 90 5A C7         [24]10458 	mov	dptr,#___str_112
      0038A8 75 F0 80         [24]10459 	mov	b,#0x80
      0038AB 12 10 77         [24]10460 	lcall	_LCD_string_write
      0038AE D0 05            [24]10461 	pop	ar5
                                  10462 ;	.\ecen4350_lcd_v4.c:2417: invalidInput = 1;
      0038B0 7E 01            [12]10463 	mov	r6,#0x01
                                  10464 ;	.\ecen4350_lcd_v4.c:2418: while (invalidInput) {
      0038B2                      10465 00161$:
      0038B2 EE               [12]10466 	mov	a,r6
      0038B3 60 46            [24]10467 	jz	00168$
                                  10468 ;	.\ecen4350_lcd_v4.c:2419: selection = keyDetect();
      0038B5 C0 06            [24]10469 	push	ar6
      0038B7 C0 05            [24]10470 	push	ar5
      0038B9 12 11 95         [24]10471 	lcall	_keyDetect
      0038BC AC 82            [24]10472 	mov	r4,dpl
      0038BE D0 05            [24]10473 	pop	ar5
      0038C0 D0 06            [24]10474 	pop	ar6
      0038C2 78 71            [12]10475 	mov	r0,#_selection
      0038C4 A6 04            [24]10476 	mov	@r0,ar4
                                  10477 ;	.\ecen4350_lcd_v4.c:2420: if(selection == '0') {
      0038C6 BC 30 E9         [24]10478 	cjne	r4,#0x30,00161$
                                  10479 ;	.\ecen4350_lcd_v4.c:2421: setColorDefault();
      0038C9 C0 05            [24]10480 	push	ar5
      0038CB 12 16 3B         [24]10481 	lcall	_setColorDefault
                                  10482 ;	.\ecen4350_lcd_v4.c:2422: setCursor(0, 180);
      0038CE 75 6B B4         [24]10483 	mov	_setCursor_PARM_2,#0xb4
      0038D1 75 6C 00         [24]10484 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038D4 90 00 00         [24]10485 	mov	dptr,#0x0000
      0038D7 12 05 5D         [24]10486 	lcall	_setCursor
                                  10487 ;	.\ecen4350_lcd_v4.c:2423: LCD_string_write("\n ");
      0038DA 90 57 EC         [24]10488 	mov	dptr,#___str_66
      0038DD 75 F0 80         [24]10489 	mov	b,#0x80
      0038E0 12 10 77         [24]10490 	lcall	_LCD_string_write
                                  10491 ;	.\ecen4350_lcd_v4.c:2424: setColorHighlight2();
      0038E3 12 16 5D         [24]10492 	lcall	_setColorHighlight2
                                  10493 ;	.\ecen4350_lcd_v4.c:2425: LCD_string_write("<0> Exit");
      0038E6 90 58 A7         [24]10494 	mov	dptr,#___str_77
      0038E9 75 F0 80         [24]10495 	mov	b,#0x80
      0038EC 12 10 77         [24]10496 	lcall	_LCD_string_write
      0038EF D0 05            [24]10497 	pop	ar5
                                  10498 ;	.\ecen4350_lcd_v4.c:2426: exit = 0;		// set exit flag
      0038F1 78 84            [12]10499 	mov	r0,#_find_exit_65536_646
      0038F3 76 00            [12]10500 	mov	@r0,#0x00
                                  10501 ;	.\ecen4350_lcd_v4.c:2427: invalidInput = 0;
      0038F5 7E 00            [12]10502 	mov	r6,#0x00
      0038F7 80 B9            [24]10503 	sjmp	00161$
      0038F9                      10504 00273$:
      0038F9 AD 63            [24]10505 	mov	r5,_find_sloc0_1_0
      0038FB                      10506 00168$:
                                  10507 ;	.\ecen4350_lcd_v4.c:2431: if (exit == 0) {	// check exit flag
      0038FB 78 84            [12]10508 	mov	r0,#_find_exit_65536_646
      0038FD E6               [12]10509 	mov	a,@r0
      0038FE 60 03            [24]10510 	jz	00592$
      003900 02 3A 0F         [24]10511 	ljmp	00215$
      003903                      10512 00592$:
                                  10513 ;	.\ecen4350_lcd_v4.c:2432: break;			// break out of for loop iteration
      003903 02 3A 1A         [24]10514 	ljmp	00197$
      003906                      10515 00187$:
                                  10516 ;	.\ecen4350_lcd_v4.c:2437: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      003906 1B               [12]10517 	dec	r3
      003907 BB FF 01         [24]10518 	cjne	r3,#0xff,00593$
      00390A 1F               [12]10519 	dec	r7
      00390B                      10520 00593$:
      00390B EB               [12]10521 	mov	a,r3
      00390C B5 64 07         [24]10522 	cjne	a,_find_sloc1_1_0,00594$
      00390F EF               [12]10523 	mov	a,r7
      003910 B5 65 03         [24]10524 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      003913 02 3A 0F         [24]10525 	ljmp	00215$
      003916                      10526 00594$:
                                  10527 ;	.\ecen4350_lcd_v4.c:2438: if (i != 0) {
      003916 E5 64            [12]10528 	mov	a,_find_sloc1_1_0
      003918 45 65            [12]10529 	orl	a,(_find_sloc1_1_0 + 1)
      00391A 70 03            [24]10530 	jnz	00595$
      00391C 02 3A 0A         [24]10531 	ljmp	00181$
      00391F                      10532 00595$:
                                  10533 ;	.\ecen4350_lcd_v4.c:2439: setCursor(0, 180);
      00391F 75 6B B4         [24]10534 	mov	_setCursor_PARM_2,#0xb4
      003922 75 6C 00         [24]10535 	mov	(_setCursor_PARM_2 + 1),#0x00
      003925 90 00 00         [24]10536 	mov	dptr,#0x0000
      003928 C0 05            [24]10537 	push	ar5
      00392A 12 05 5D         [24]10538 	lcall	_setCursor
                                  10539 ;	.\ecen4350_lcd_v4.c:2440: setColorWhite();
      00392D 12 16 8B         [24]10540 	lcall	_setColorWhite
                                  10541 ;	.\ecen4350_lcd_v4.c:2441: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      003930 90 5B 1F         [24]10542 	mov	dptr,#___str_116
      003933 75 F0 80         [24]10543 	mov	b,#0x80
      003936 12 10 77         [24]10544 	lcall	_LCD_string_write
      003939 D0 05            [24]10545 	pop	ar5
                                  10546 ;	.\ecen4350_lcd_v4.c:2442: invalidInput = 1;
      00393B 7F 01            [12]10547 	mov	r7,#0x01
                                  10548 ;	.\ecen4350_lcd_v4.c:2443: while (invalidInput) {
      00393D                      10549 00177$:
      00393D EF               [12]10550 	mov	a,r7
      00393E 70 03            [24]10551 	jnz	00596$
      003940 02 3A 0A         [24]10552 	ljmp	00181$
      003943                      10553 00596$:
                                  10554 ;	.\ecen4350_lcd_v4.c:2444: selection = keyDetect();
      003943 C0 07            [24]10555 	push	ar7
      003945 C0 05            [24]10556 	push	ar5
      003947 12 11 95         [24]10557 	lcall	_keyDetect
      00394A AE 82            [24]10558 	mov	r6,dpl
      00394C D0 05            [24]10559 	pop	ar5
      00394E D0 07            [24]10560 	pop	ar7
      003950 78 71            [12]10561 	mov	r0,#_selection
      003952 A6 06            [24]10562 	mov	@r0,ar6
                                  10563 ;	.\ecen4350_lcd_v4.c:2445: if (selection == '1') {
      003954 BE 31 28         [24]10564 	cjne	r6,#0x31,00172$
                                  10565 ;	.\ecen4350_lcd_v4.c:2446: setCursor(0, 180);
      003957 75 6B B4         [24]10566 	mov	_setCursor_PARM_2,#0xb4
      00395A 75 6C 00         [24]10567 	mov	(_setCursor_PARM_2 + 1),#0x00
      00395D 90 00 00         [24]10568 	mov	dptr,#0x0000
      003960 C0 05            [24]10569 	push	ar5
      003962 12 05 5D         [24]10570 	lcall	_setCursor
                                  10571 ;	.\ecen4350_lcd_v4.c:2447: LCD_string_write(" ");
      003965 90 55 E1         [24]10572 	mov	dptr,#___str_29
      003968 75 F0 80         [24]10573 	mov	b,#0x80
      00396B 12 10 77         [24]10574 	lcall	_LCD_string_write
                                  10575 ;	.\ecen4350_lcd_v4.c:2448: setColorHighlight2();
      00396E 12 16 5D         [24]10576 	lcall	_setColorHighlight2
                                  10577 ;	.\ecen4350_lcd_v4.c:2449: LCD_string_write("<1> Next");
      003971 90 5A BE         [24]10578 	mov	dptr,#___str_111
      003974 75 F0 80         [24]10579 	mov	b,#0x80
      003977 12 10 77         [24]10580 	lcall	_LCD_string_write
      00397A D0 05            [24]10581 	pop	ar5
                                  10582 ;	.\ecen4350_lcd_v4.c:2450: invalidInput = 0;
      00397C 7F 00            [12]10583 	mov	r7,#0x00
                                  10584 ;	.\ecen4350_lcd_v4.c:2451: page++;
      00397E 0D               [12]10585 	inc	r5
      00397F                      10586 00172$:
                                  10587 ;	.\ecen4350_lcd_v4.c:2452: } if (selection == '2') {
      00397F 78 71            [12]10588 	mov	r0,#_selection
      003981 B6 32 3F         [24]10589 	cjne	@r0,#0x32,00174$
                                  10590 ;	.\ecen4350_lcd_v4.c:2453: setCursor(0, 180);
      003984 75 6B B4         [24]10591 	mov	_setCursor_PARM_2,#0xb4
      003987 75 6C 00         [24]10592 	mov	(_setCursor_PARM_2 + 1),#0x00
      00398A 90 00 00         [24]10593 	mov	dptr,#0x0000
      00398D C0 05            [24]10594 	push	ar5
      00398F 12 05 5D         [24]10595 	lcall	_setCursor
                                  10596 ;	.\ecen4350_lcd_v4.c:2454: setColorWhite();
      003992 12 16 8B         [24]10597 	lcall	_setColorWhite
                                  10598 ;	.\ecen4350_lcd_v4.c:2455: LCD_string_write("\n\n ");
      003995 90 5B 0E         [24]10599 	mov	dptr,#___str_114
      003998 75 F0 80         [24]10600 	mov	b,#0x80
      00399B 12 10 77         [24]10601 	lcall	_LCD_string_write
                                  10602 ;	.\ecen4350_lcd_v4.c:2456: setColorHighlight2();
      00399E 12 16 5D         [24]10603 	lcall	_setColorHighlight2
                                  10604 ;	.\ecen4350_lcd_v4.c:2457: LCD_string_write("<2> Previous");
      0039A1 90 5B 12         [24]10605 	mov	dptr,#___str_115
      0039A4 75 F0 80         [24]10606 	mov	b,#0x80
      0039A7 12 10 77         [24]10607 	lcall	_LCD_string_write
      0039AA D0 05            [24]10608 	pop	ar5
                                  10609 ;	.\ecen4350_lcd_v4.c:2458: invalidInput = 0;
      0039AC 7F 00            [12]10610 	mov	r7,#0x00
                                  10611 ;	.\ecen4350_lcd_v4.c:2459: i--;
      0039AE E5 64            [12]10612 	mov	a,_find_sloc1_1_0
      0039B0 24 FF            [12]10613 	add	a,#0xff
      0039B2 FC               [12]10614 	mov	r4,a
      0039B3 E5 65            [12]10615 	mov	a,(_find_sloc1_1_0 + 1)
      0039B5 34 FF            [12]10616 	addc	a,#0xff
      0039B7 FE               [12]10617 	mov	r6,a
                                  10618 ;	.\ecen4350_lcd_v4.c:2460: i--;		// two decrements plus next loop increment is equal to one decrement
      0039B8 EC               [12]10619 	mov	a,r4
      0039B9 24 FF            [12]10620 	add	a,#0xff
      0039BB F5 64            [12]10621 	mov	_find_sloc1_1_0,a
      0039BD EE               [12]10622 	mov	a,r6
      0039BE 34 FF            [12]10623 	addc	a,#0xff
      0039C0 F5 65            [12]10624 	mov	(_find_sloc1_1_0 + 1),a
                                  10625 ;	.\ecen4350_lcd_v4.c:2461: page--;		// decrement to previous page
      0039C2 1D               [12]10626 	dec	r5
      0039C3                      10627 00174$:
                                  10628 ;	.\ecen4350_lcd_v4.c:2462: } if (selection == '0') {
      0039C3 78 71            [12]10629 	mov	r0,#_selection
      0039C5 B6 30 02         [24]10630 	cjne	@r0,#0x30,00601$
      0039C8 80 03            [24]10631 	sjmp	00602$
      0039CA                      10632 00601$:
      0039CA 02 39 3D         [24]10633 	ljmp	00177$
      0039CD                      10634 00602$:
                                  10635 ;	.\ecen4350_lcd_v4.c:2463: setColorWhite();
      0039CD C0 05            [24]10636 	push	ar5
      0039CF 12 16 8B         [24]10637 	lcall	_setColorWhite
                                  10638 ;	.\ecen4350_lcd_v4.c:2464: setCursor(0, 180);
      0039D2 75 6B B4         [24]10639 	mov	_setCursor_PARM_2,#0xb4
      0039D5 75 6C 00         [24]10640 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039D8 90 00 00         [24]10641 	mov	dptr,#0x0000
      0039DB 12 05 5D         [24]10642 	lcall	_setCursor
                                  10643 ;	.\ecen4350_lcd_v4.c:2465: LCD_string_write(" <1> Next\n ");
      0039DE 90 5B 41         [24]10644 	mov	dptr,#___str_117
      0039E1 75 F0 80         [24]10645 	mov	b,#0x80
      0039E4 12 10 77         [24]10646 	lcall	_LCD_string_write
                                  10647 ;	.\ecen4350_lcd_v4.c:2466: setColorHighlight2();
      0039E7 12 16 5D         [24]10648 	lcall	_setColorHighlight2
                                  10649 ;	.\ecen4350_lcd_v4.c:2467: LCD_string_write("<0> Exit");
      0039EA 90 58 A7         [24]10650 	mov	dptr,#___str_77
      0039ED 75 F0 80         [24]10651 	mov	b,#0x80
      0039F0 12 10 77         [24]10652 	lcall	_LCD_string_write
                                  10653 ;	.\ecen4350_lcd_v4.c:2468: setColorWhite();
      0039F3 12 16 8B         [24]10654 	lcall	_setColorWhite
                                  10655 ;	.\ecen4350_lcd_v4.c:2469: LCD_string_write("\n <2> Previous");
      0039F6 90 5B 4D         [24]10656 	mov	dptr,#___str_118
      0039F9 75 F0 80         [24]10657 	mov	b,#0x80
      0039FC 12 10 77         [24]10658 	lcall	_LCD_string_write
      0039FF D0 05            [24]10659 	pop	ar5
                                  10660 ;	.\ecen4350_lcd_v4.c:2470: exit = 0;		// set exit flag
      003A01 78 84            [12]10661 	mov	r0,#_find_exit_65536_646
      003A03 76 00            [12]10662 	mov	@r0,#0x00
                                  10663 ;	.\ecen4350_lcd_v4.c:2471: invalidInput = 0;
      003A05 7F 00            [12]10664 	mov	r7,#0x00
      003A07 02 39 3D         [24]10665 	ljmp	00177$
      003A0A                      10666 00181$:
                                  10667 ;	.\ecen4350_lcd_v4.c:2475: if (exit == 0) {		// check exit flag
      003A0A 78 84            [12]10668 	mov	r0,#_find_exit_65536_646
      003A0C E6               [12]10669 	mov	a,@r0
      003A0D 60 0B            [24]10670 	jz	00197$
                                  10671 ;	.\ecen4350_lcd_v4.c:2476: break;			// break out the loop
      003A0F                      10672 00215$:
                                  10673 ;	.\ecen4350_lcd_v4.c:2318: for (unsigned int i = 0; i < blockSize; i++) {
      003A0F 05 64            [12]10674 	inc	_find_sloc1_1_0
      003A11 E4               [12]10675 	clr	a
      003A12 B5 64 02         [24]10676 	cjne	a,_find_sloc1_1_0,00604$
      003A15 05 65            [12]10677 	inc	(_find_sloc1_1_0 + 1)
      003A17                      10678 00604$:
      003A17 02 35 E9         [24]10679 	ljmp	00214$
      003A1A                      10680 00197$:
                                  10681 ;	.\ecen4350_lcd_v4.c:2482: if(noneFound) {
      003A1A 78 83            [12]10682 	mov	r0,#_find_noneFound_65536_646
      003A1C E6               [12]10683 	mov	a,@r0
      003A1D 70 03            [24]10684 	jnz	00605$
      003A1F 02 34 CB         [24]10685 	ljmp	00205$
      003A22                      10686 00605$:
                                  10687 ;	.\ecen4350_lcd_v4.c:2483: setColorRed();
      003A22 C0 05            [24]10688 	push	ar5
      003A24 12 16 80         [24]10689 	lcall	_setColorRed
                                  10690 ;	.\ecen4350_lcd_v4.c:2484: setCursor(0, 140);
      003A27 75 6B 8C         [24]10691 	mov	_setCursor_PARM_2,#0x8c
      003A2A 75 6C 00         [24]10692 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A2D 90 00 00         [24]10693 	mov	dptr,#0x0000
      003A30 12 05 5D         [24]10694 	lcall	_setCursor
                                  10695 ;	.\ecen4350_lcd_v4.c:2485: LCD_string_write(" Value Not Found\n Within Block\n ");
      003A33 90 5B 5C         [24]10696 	mov	dptr,#___str_119
      003A36 75 F0 80         [24]10697 	mov	b,#0x80
      003A39 12 10 77         [24]10698 	lcall	_LCD_string_write
                                  10699 ;	.\ecen4350_lcd_v4.c:2486: setColorWhite();
      003A3C 12 16 8B         [24]10700 	lcall	_setColorWhite
                                  10701 ;	.\ecen4350_lcd_v4.c:2487: LCD_string_write("\n <0> Exit");
      003A3F 90 5B 7D         [24]10702 	mov	dptr,#___str_120
      003A42 75 F0 80         [24]10703 	mov	b,#0x80
      003A45 12 10 77         [24]10704 	lcall	_LCD_string_write
      003A48 D0 05            [24]10705 	pop	ar5
                                  10706 ;	.\ecen4350_lcd_v4.c:2488: invalidInput = 1;
      003A4A 7F 01            [12]10707 	mov	r7,#0x01
                                  10708 ;	.\ecen4350_lcd_v4.c:2490: while (invalidInput) {
      003A4C                      10709 00200$:
      003A4C EF               [12]10710 	mov	a,r7
      003A4D 70 03            [24]10711 	jnz	00606$
      003A4F 02 34 CB         [24]10712 	ljmp	00205$
      003A52                      10713 00606$:
                                  10714 ;	.\ecen4350_lcd_v4.c:2491: selection = keyDetect();
      003A52 C0 07            [24]10715 	push	ar7
      003A54 C0 05            [24]10716 	push	ar5
      003A56 12 11 95         [24]10717 	lcall	_keyDetect
      003A59 AE 82            [24]10718 	mov	r6,dpl
      003A5B D0 05            [24]10719 	pop	ar5
      003A5D D0 07            [24]10720 	pop	ar7
      003A5F 78 71            [12]10721 	mov	r0,#_selection
      003A61 A6 06            [24]10722 	mov	@r0,ar6
                                  10723 ;	.\ecen4350_lcd_v4.c:2492: if (selection == '0'){
      003A63 BE 30 E6         [24]10724 	cjne	r6,#0x30,00200$
                                  10725 ;	.\ecen4350_lcd_v4.c:2493: setCursor(0, 140);
      003A66 75 6B 8C         [24]10726 	mov	_setCursor_PARM_2,#0x8c
      003A69 75 6C 00         [24]10727 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A6C 90 00 00         [24]10728 	mov	dptr,#0x0000
      003A6F C0 05            [24]10729 	push	ar5
      003A71 12 05 5D         [24]10730 	lcall	_setCursor
                                  10731 ;	.\ecen4350_lcd_v4.c:2494: LCD_string_write("\n\n\n ");
      003A74 90 5B 88         [24]10732 	mov	dptr,#___str_121
      003A77 75 F0 80         [24]10733 	mov	b,#0x80
      003A7A 12 10 77         [24]10734 	lcall	_LCD_string_write
                                  10735 ;	.\ecen4350_lcd_v4.c:2495: setColorHighlight2();
      003A7D 12 16 5D         [24]10736 	lcall	_setColorHighlight2
                                  10737 ;	.\ecen4350_lcd_v4.c:2496: LCD_string_write("<0> Exit");
      003A80 90 58 A7         [24]10738 	mov	dptr,#___str_77
      003A83 75 F0 80         [24]10739 	mov	b,#0x80
      003A86 12 10 77         [24]10740 	lcall	_LCD_string_write
      003A89 D0 05            [24]10741 	pop	ar5
                                  10742 ;	.\ecen4350_lcd_v4.c:2497: invalidInput = 0;
      003A8B 7F 00            [12]10743 	mov	r7,#0x00
                                  10744 ;	.\ecen4350_lcd_v4.c:2498: exit = 0;
      003A8D 78 84            [12]10745 	mov	r0,#_find_exit_65536_646
      003A8F 76 00            [12]10746 	mov	@r0,#0x00
      003A91 80 B9            [24]10747 	sjmp	00200$
      003A93                      10748 00207$:
                                  10749 ;	.\ecen4350_lcd_v4.c:2503: delay(80);
      003A93 90 00 50         [24]10750 	mov	dptr,#0x0050
                                  10751 ;	.\ecen4350_lcd_v4.c:2504: return;
                                  10752 ;	.\ecen4350_lcd_v4.c:2505: }
      003A96 02 01 87         [24]10753 	ljmp	_delay
                                  10754 ;------------------------------------------------------------
                                  10755 ;Allocation info for local variables in function 'count'
                                  10756 ;------------------------------------------------------------
                                  10757 ;d                         Allocated to registers 
                                  10758 ;i                         Allocated with name '_count_i_262144_715'
                                  10759 ;__3932160175              Allocated to registers 
                                  10760 ;__3932160176              Allocated to registers 
                                  10761 ;map_address               Allocated to registers 
                                  10762 ;d                         Allocated to registers r4 
                                  10763 ;i                         Allocated to registers r4 r6 
                                  10764 ;__3932160178              Allocated to registers 
                                  10765 ;__3932160179              Allocated to registers 
                                  10766 ;map_address               Allocated to registers 
                                  10767 ;d                         Allocated to registers r3 
                                  10768 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10769 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10770 ;address                   Allocated with name '_count_address_65536_702'
                                  10771 ;destination               Allocated to registers 
                                  10772 ;blockSize                 Allocated with name '_count_blockSize_65536_702'
                                  10773 ;value                     Allocated with name '_count_value_65536_702'
                                  10774 ;scan                      Allocated with name '_count_scan_65536_702'
                                  10775 ;page                      Allocated to registers r5 
                                  10776 ;noneFound                 Allocated with name '_count_noneFound_65536_702'
                                  10777 ;invalidInput              Allocated to registers r7 
                                  10778 ;exit                      Allocated with name '_count_exit_65536_702'
                                  10779 ;------------------------------------------------------------
                                  10780 ;	.\ecen4350_lcd_v4.c:2507: void count() {
                                  10781 ;	-----------------------------------------
                                  10782 ;	 function count
                                  10783 ;	-----------------------------------------
      003A99                      10784 _count:
                                  10785 ;	.\ecen4350_lcd_v4.c:2511: __idata unsigned char blockSize = 0;
      003A99 78 87            [12]10786 	mov	r0,#_count_blockSize_65536_702
      003A9B 76 00            [12]10787 	mov	@r0,#0x00
                                  10788 ;	.\ecen4350_lcd_v4.c:2513: __idata unsigned char scan = 0;
      003A9D 78 89            [12]10789 	mov	r0,#_count_scan_65536_702
      003A9F 76 00            [12]10790 	mov	@r0,#0x00
                                  10791 ;	.\ecen4350_lcd_v4.c:2514: __idata unsigned char page = 0;
      003AA1 7D 00            [12]10792 	mov	r5,#0x00
                                  10793 ;	.\ecen4350_lcd_v4.c:2515: __idata unsigned char noneFound = 1;
      003AA3 78 8A            [12]10794 	mov	r0,#_count_noneFound_65536_702
      003AA5 76 01            [12]10795 	mov	@r0,#0x01
                                  10796 ;	.\ecen4350_lcd_v4.c:2516: __idata unsigned char invalidInput = 1;
      003AA7 7B 01            [12]10797 	mov	r3,#0x01
                                  10798 ;	.\ecen4350_lcd_v4.c:2517: __idata unsigned char exit = 1;
      003AA9 78 8B            [12]10799 	mov	r0,#_count_exit_65536_702
      003AAB 76 01            [12]10800 	mov	@r0,#0x01
                                  10801 ;	.\ecen4350_lcd_v4.c:2519: clearLCD();
      003AAD C0 05            [24]10802 	push	ar5
      003AAF C0 03            [24]10803 	push	ar3
      003AB1 12 0D FA         [24]10804 	lcall	_clearLCD
                                  10805 ;	.\ecen4350_lcd_v4.c:2522: setTextSize(5);
      003AB4 75 82 05         [24]10806 	mov	dpl,#0x05
      003AB7 12 05 77         [24]10807 	lcall	_setTextSize
                                  10808 ;	.\ecen4350_lcd_v4.c:2523: fillTop(GRAY);
      003ABA 90 D6 BA         [24]10809 	mov	dptr,#0xd6ba
      003ABD 12 0C 2D         [24]10810 	lcall	_fillTop
                                  10811 ;	.\ecen4350_lcd_v4.c:2524: setColorMenu();
      003AC0 12 16 74         [24]10812 	lcall	_setColorMenu
                                  10813 ;	.\ecen4350_lcd_v4.c:2525: setCursor(15, 0);
      003AC3 E4               [12]10814 	clr	a
      003AC4 F5 6B            [12]10815 	mov	_setCursor_PARM_2,a
      003AC6 F5 6C            [12]10816 	mov	(_setCursor_PARM_2 + 1),a
      003AC8 90 00 0F         [24]10817 	mov	dptr,#0x000f
      003ACB 12 05 5D         [24]10818 	lcall	_setCursor
                                  10819 ;	.\ecen4350_lcd_v4.c:2526: LCD_string_write("[COUNT]\n");
      003ACE 90 5B 8D         [24]10820 	mov	dptr,#___str_122
      003AD1 75 F0 80         [24]10821 	mov	b,#0x80
      003AD4 12 10 77         [24]10822 	lcall	_LCD_string_write
                                  10823 ;	.\ecen4350_lcd_v4.c:2527: setColorDefault();
      003AD7 12 16 3B         [24]10824 	lcall	_setColorDefault
                                  10825 ;	.\ecen4350_lcd_v4.c:2528: setTextSize(2);
      003ADA 75 82 02         [24]10826 	mov	dpl,#0x02
      003ADD 12 05 77         [24]10827 	lcall	_setTextSize
                                  10828 ;	.\ecen4350_lcd_v4.c:2529: setCursor(0, 60);
      003AE0 75 6B 3C         [24]10829 	mov	_setCursor_PARM_2,#0x3c
      003AE3 75 6C 00         [24]10830 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AE6 90 00 00         [24]10831 	mov	dptr,#0x0000
      003AE9 12 05 5D         [24]10832 	lcall	_setCursor
                                  10833 ;	.\ecen4350_lcd_v4.c:2530: LCD_string_write(" Search Value:");
      003AEC 90 5B 96         [24]10834 	mov	dptr,#___str_123
      003AEF 75 F0 80         [24]10835 	mov	b,#0x80
      003AF2 12 10 77         [24]10836 	lcall	_LCD_string_write
                                  10837 ;	.\ecen4350_lcd_v4.c:2531: setCursor(0, 80);
      003AF5 75 6B 50         [24]10838 	mov	_setCursor_PARM_2,#0x50
      003AF8 75 6C 00         [24]10839 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AFB 90 00 00         [24]10840 	mov	dptr,#0x0000
      003AFE 12 05 5D         [24]10841 	lcall	_setCursor
                                  10842 ;	.\ecen4350_lcd_v4.c:2532: setColorGray();
      003B01 12 16 69         [24]10843 	lcall	_setColorGray
                                  10844 ;	.\ecen4350_lcd_v4.c:2533: LCD_string_write(" __");
      003B04 90 57 8E         [24]10845 	mov	dptr,#___str_61
      003B07 75 F0 80         [24]10846 	mov	b,#0x80
      003B0A 12 10 77         [24]10847 	lcall	_LCD_string_write
                                  10848 ;	.\ecen4350_lcd_v4.c:2534: setCursor(0, 110);
      003B0D 75 6B 6E         [24]10849 	mov	_setCursor_PARM_2,#0x6e
      003B10 75 6C 00         [24]10850 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B13 90 00 00         [24]10851 	mov	dptr,#0x0000
      003B16 12 05 5D         [24]10852 	lcall	_setCursor
                                  10853 ;	.\ecen4350_lcd_v4.c:2535: setColorDefault();
      003B19 12 16 3B         [24]10854 	lcall	_setColorDefault
                                  10855 ;	.\ecen4350_lcd_v4.c:2536: LCD_string_write(" Search Address:");
      003B1C 90 58 D7         [24]10856 	mov	dptr,#___str_81
      003B1F 75 F0 80         [24]10857 	mov	b,#0x80
      003B22 12 10 77         [24]10858 	lcall	_LCD_string_write
                                  10859 ;	.\ecen4350_lcd_v4.c:2537: setCursor(0, 130 );
      003B25 75 6B 82         [24]10860 	mov	_setCursor_PARM_2,#0x82
      003B28 75 6C 00         [24]10861 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B2B 90 00 00         [24]10862 	mov	dptr,#0x0000
      003B2E 12 05 5D         [24]10863 	lcall	_setCursor
                                  10864 ;	.\ecen4350_lcd_v4.c:2538: setColorGray();
      003B31 12 16 69         [24]10865 	lcall	_setColorGray
                                  10866 ;	.\ecen4350_lcd_v4.c:2539: LCD_string_write(" 0x____");
      003B34 90 55 7F         [24]10867 	mov	dptr,#___str_23
      003B37 75 F0 80         [24]10868 	mov	b,#0x80
      003B3A 12 10 77         [24]10869 	lcall	_LCD_string_write
                                  10870 ;	.\ecen4350_lcd_v4.c:2540: setCursor(0, 160);
      003B3D 75 6B A0         [24]10871 	mov	_setCursor_PARM_2,#0xa0
      003B40 75 6C 00         [24]10872 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B43 90 00 00         [24]10873 	mov	dptr,#0x0000
      003B46 12 05 5D         [24]10874 	lcall	_setCursor
                                  10875 ;	.\ecen4350_lcd_v4.c:2541: setColorDefault();
      003B49 12 16 3B         [24]10876 	lcall	_setColorDefault
                                  10877 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" Input Block Size:\n");
      003B4C 90 58 E8         [24]10878 	mov	dptr,#___str_82
      003B4F 75 F0 80         [24]10879 	mov	b,#0x80
      003B52 12 10 77         [24]10880 	lcall	_LCD_string_write
                                  10881 ;	.\ecen4350_lcd_v4.c:2543: setColorGray();
      003B55 12 16 69         [24]10882 	lcall	_setColorGray
                                  10883 ;	.\ecen4350_lcd_v4.c:2544: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003B58 90 58 FC         [24]10884 	mov	dptr,#___str_83
      003B5B 75 F0 80         [24]10885 	mov	b,#0x80
      003B5E 12 10 77         [24]10886 	lcall	_LCD_string_write
                                  10887 ;	.\ecen4350_lcd_v4.c:2545: LCD_string_write("  <FF> (SCAN)");
      003B61 90 59 22         [24]10888 	mov	dptr,#___str_84
      003B64 75 F0 80         [24]10889 	mov	b,#0x80
      003B67 12 10 77         [24]10890 	lcall	_LCD_string_write
                                  10891 ;	.\ecen4350_lcd_v4.c:2546: setCursor(0, 250);
      003B6A 75 6B FA         [24]10892 	mov	_setCursor_PARM_2,#0xfa
      003B6D 75 6C 00         [24]10893 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B70 90 00 00         [24]10894 	mov	dptr,#0x0000
      003B73 12 05 5D         [24]10895 	lcall	_setCursor
                                  10896 ;	.\ecen4350_lcd_v4.c:2547: setColorGray();
      003B76 12 16 69         [24]10897 	lcall	_setColorGray
                                  10898 ;	.\ecen4350_lcd_v4.c:2548: LCD_string_write("   __");
      003B79 90 59 30         [24]10899 	mov	dptr,#___str_85
      003B7C 75 F0 80         [24]10900 	mov	b,#0x80
      003B7F 12 10 77         [24]10901 	lcall	_LCD_string_write
                                  10902 ;	.\ecen4350_lcd_v4.c:2555: setColorSelect();
      003B82 12 16 46         [24]10903 	lcall	_setColorSelect
                                  10904 ;	.\ecen4350_lcd_v4.c:2556: setCursor(0, 60);
      003B85 75 6B 3C         [24]10905 	mov	_setCursor_PARM_2,#0x3c
      003B88 75 6C 00         [24]10906 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B8B 90 00 00         [24]10907 	mov	dptr,#0x0000
      003B8E 12 05 5D         [24]10908 	lcall	_setCursor
                                  10909 ;	.\ecen4350_lcd_v4.c:2557: LCD_string_write(" Search Value:");
      003B91 90 5B 96         [24]10910 	mov	dptr,#___str_123
      003B94 75 F0 80         [24]10911 	mov	b,#0x80
      003B97 12 10 77         [24]10912 	lcall	_LCD_string_write
                                  10913 ;	.\ecen4350_lcd_v4.c:2558: setCursor(0, 80);
      003B9A 75 6B 50         [24]10914 	mov	_setCursor_PARM_2,#0x50
      003B9D 75 6C 00         [24]10915 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BA0 90 00 00         [24]10916 	mov	dptr,#0x0000
      003BA3 12 05 5D         [24]10917 	lcall	_setCursor
                                  10918 ;	.\ecen4350_lcd_v4.c:2559: setColorWhite();
      003BA6 12 16 8B         [24]10919 	lcall	_setColorWhite
                                  10920 ;	.\ecen4350_lcd_v4.c:2560: setCursor(0, 80);
      003BA9 75 6B 50         [24]10921 	mov	_setCursor_PARM_2,#0x50
      003BAC 75 6C 00         [24]10922 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BAF 90 00 00         [24]10923 	mov	dptr,#0x0000
      003BB2 12 05 5D         [24]10924 	lcall	_setCursor
                                  10925 ;	.\ecen4350_lcd_v4.c:2561: LCD_string_write(" ");
      003BB5 90 55 E1         [24]10926 	mov	dptr,#___str_29
      003BB8 75 F0 80         [24]10927 	mov	b,#0x80
      003BBB 12 10 77         [24]10928 	lcall	_LCD_string_write
                                  10929 ;	.\ecen4350_lcd_v4.c:2562: setColorHighlight1();
      003BBE 12 16 51         [24]10930 	lcall	_setColorHighlight1
                                  10931 ;	.\ecen4350_lcd_v4.c:2563: selection = keyDetect();
      003BC1 12 11 95         [24]10932 	lcall	_keyDetect
      003BC4 AC 82            [24]10933 	mov	r4,dpl
      003BC6 78 71            [12]10934 	mov	r0,#_selection
      003BC8 A6 04            [24]10935 	mov	@r0,ar4
                                  10936 ;	.\ecen4350_lcd_v4.c:2564: write(selection);
      003BCA 8C 82            [24]10937 	mov	dpl,r4
      003BCC 12 10 11         [24]10938 	lcall	_write
                                  10939 ;	.\ecen4350_lcd_v4.c:2565: selection = ASCIItoHex(selection);
      003BCF 78 71            [12]10940 	mov	r0,#_selection
      003BD1 86 82            [24]10941 	mov	dpl,@r0
      003BD3 12 14 03         [24]10942 	lcall	_ASCIItoHex
      003BD6 AC 82            [24]10943 	mov	r4,dpl
      003BD8 D0 03            [24]10944 	pop	ar3
      003BDA 78 71            [12]10945 	mov	r0,#_selection
      003BDC A6 04            [24]10946 	mov	@r0,ar4
                                  10947 ;	.\ecen4350_lcd_v4.c:2566: value |= selection * 16;
      003BDE EC               [12]10948 	mov	a,r4
      003BDF C4               [12]10949 	swap	a
      003BE0 54 F0            [12]10950 	anl	a,#0xf0
      003BE2 FC               [12]10951 	mov	r4,a
                                  10952 ;	.\ecen4350_lcd_v4.c:2567: selection = keyDetect();
      003BE3 C0 04            [24]10953 	push	ar4
      003BE5 C0 03            [24]10954 	push	ar3
      003BE7 12 11 95         [24]10955 	lcall	_keyDetect
      003BEA AE 82            [24]10956 	mov	r6,dpl
      003BEC 78 71            [12]10957 	mov	r0,#_selection
      003BEE A6 06            [24]10958 	mov	@r0,ar6
                                  10959 ;	.\ecen4350_lcd_v4.c:2568: write(selection);
      003BF0 8E 82            [24]10960 	mov	dpl,r6
      003BF2 12 10 11         [24]10961 	lcall	_write
                                  10962 ;	.\ecen4350_lcd_v4.c:2569: selection = ASCIItoHex(selection);
      003BF5 78 71            [12]10963 	mov	r0,#_selection
      003BF7 86 82            [24]10964 	mov	dpl,@r0
      003BF9 12 14 03         [24]10965 	lcall	_ASCIItoHex
      003BFC AE 82            [24]10966 	mov	r6,dpl
      003BFE D0 03            [24]10967 	pop	ar3
      003C00 D0 04            [24]10968 	pop	ar4
      003C02 78 71            [12]10969 	mov	r0,#_selection
      003C04 A6 06            [24]10970 	mov	@r0,ar6
                                  10971 ;	.\ecen4350_lcd_v4.c:2570: value |= selection;
      003C06 78 88            [12]10972 	mov	r0,#_count_value_65536_702
      003C08 EE               [12]10973 	mov	a,r6
      003C09 4C               [12]10974 	orl	a,r4
      003C0A F6               [12]10975 	mov	@r0,a
                                  10976 ;	.\ecen4350_lcd_v4.c:2573: setColorDefault();
      003C0B C0 03            [24]10977 	push	ar3
      003C0D 12 16 3B         [24]10978 	lcall	_setColorDefault
                                  10979 ;	.\ecen4350_lcd_v4.c:2574: setCursor(0, 60);
      003C10 75 6B 3C         [24]10980 	mov	_setCursor_PARM_2,#0x3c
      003C13 75 6C 00         [24]10981 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C16 90 00 00         [24]10982 	mov	dptr,#0x0000
      003C19 12 05 5D         [24]10983 	lcall	_setCursor
                                  10984 ;	.\ecen4350_lcd_v4.c:2575: LCD_string_write(" Search Value:");
      003C1C 90 5B 96         [24]10985 	mov	dptr,#___str_123
      003C1F 75 F0 80         [24]10986 	mov	b,#0x80
      003C22 12 10 77         [24]10987 	lcall	_LCD_string_write
                                  10988 ;	.\ecen4350_lcd_v4.c:2576: setCursor(0, 80);
      003C25 75 6B 50         [24]10989 	mov	_setCursor_PARM_2,#0x50
      003C28 75 6C 00         [24]10990 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C2B 90 00 00         [24]10991 	mov	dptr,#0x0000
      003C2E 12 05 5D         [24]10992 	lcall	_setCursor
                                  10993 ;	.\ecen4350_lcd_v4.c:2577: setColorWhite();
      003C31 12 16 8B         [24]10994 	lcall	_setColorWhite
                                  10995 ;	.\ecen4350_lcd_v4.c:2578: LCD_string_write(" ");
      003C34 90 55 E1         [24]10996 	mov	dptr,#___str_29
      003C37 75 F0 80         [24]10997 	mov	b,#0x80
      003C3A 12 10 77         [24]10998 	lcall	_LCD_string_write
                                  10999 ;	.\ecen4350_lcd_v4.c:2579: setColorHighlight2();
      003C3D 12 16 5D         [24]11000 	lcall	_setColorHighlight2
                                  11001 ;	.\ecen4350_lcd_v4.c:2580: print8Hex(value);
      003C40 78 88            [12]11002 	mov	r0,#_count_value_65536_702
      003C42 86 82            [24]11003 	mov	dpl,@r0
      003C44 12 15 48         [24]11004 	lcall	_print8Hex
                                  11005 ;	.\ecen4350_lcd_v4.c:2583: setColorSelect();
      003C47 12 16 46         [24]11006 	lcall	_setColorSelect
                                  11007 ;	.\ecen4350_lcd_v4.c:2584: setCursor(0, 110);
      003C4A 75 6B 6E         [24]11008 	mov	_setCursor_PARM_2,#0x6e
      003C4D 75 6C 00         [24]11009 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C50 90 00 00         [24]11010 	mov	dptr,#0x0000
      003C53 12 05 5D         [24]11011 	lcall	_setCursor
                                  11012 ;	.\ecen4350_lcd_v4.c:2585: LCD_string_write(" Search Address:");
      003C56 90 58 D7         [24]11013 	mov	dptr,#___str_81
      003C59 75 F0 80         [24]11014 	mov	b,#0x80
      003C5C 12 10 77         [24]11015 	lcall	_LCD_string_write
                                  11016 ;	.\ecen4350_lcd_v4.c:2586: setCursor(0, 130);
      003C5F 75 6B 82         [24]11017 	mov	_setCursor_PARM_2,#0x82
      003C62 75 6C 00         [24]11018 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C65 90 00 00         [24]11019 	mov	dptr,#0x0000
      003C68 12 05 5D         [24]11020 	lcall	_setCursor
                                  11021 ;	.\ecen4350_lcd_v4.c:2587: LCD_string_write(" ");
      003C6B 90 55 E1         [24]11022 	mov	dptr,#___str_29
      003C6E 75 F0 80         [24]11023 	mov	b,#0x80
      003C71 12 10 77         [24]11024 	lcall	_LCD_string_write
                                  11025 ;	.\ecen4350_lcd_v4.c:2588: setColorHighlight1();
      003C74 12 16 51         [24]11026 	lcall	_setColorHighlight1
                                  11027 ;	.\ecen4350_lcd_v4.c:2589: LCD_string_write("0x");
      003C77 90 54 B4         [24]11028 	mov	dptr,#___str_2
      003C7A 75 F0 80         [24]11029 	mov	b,#0x80
      003C7D 12 10 77         [24]11030 	lcall	_LCD_string_write
                                  11031 ;	.\ecen4350_lcd_v4.c:2590: address = inputAddress();
      003C80 12 16 AC         [24]11032 	lcall	_inputAddress
      003C83 78 85            [12]11033 	mov	r0,#_count_address_65536_702
      003C85 A6 82            [24]11034 	mov	@r0,dpl
      003C87 08               [12]11035 	inc	r0
      003C88 A6 83            [24]11036 	mov	@r0,dph
                                  11037 ;	.\ecen4350_lcd_v4.c:2593: setColorDefault();
      003C8A 12 16 3B         [24]11038 	lcall	_setColorDefault
                                  11039 ;	.\ecen4350_lcd_v4.c:2594: setCursor(0, 110);
      003C8D 75 6B 6E         [24]11040 	mov	_setCursor_PARM_2,#0x6e
      003C90 75 6C 00         [24]11041 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C93 90 00 00         [24]11042 	mov	dptr,#0x0000
      003C96 12 05 5D         [24]11043 	lcall	_setCursor
                                  11044 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write(" Search Address:");
      003C99 90 58 D7         [24]11045 	mov	dptr,#___str_81
      003C9C 75 F0 80         [24]11046 	mov	b,#0x80
      003C9F 12 10 77         [24]11047 	lcall	_LCD_string_write
                                  11048 ;	.\ecen4350_lcd_v4.c:2596: setCursor(0, 130);
      003CA2 75 6B 82         [24]11049 	mov	_setCursor_PARM_2,#0x82
      003CA5 75 6C 00         [24]11050 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CA8 90 00 00         [24]11051 	mov	dptr,#0x0000
      003CAB 12 05 5D         [24]11052 	lcall	_setCursor
                                  11053 ;	.\ecen4350_lcd_v4.c:2597: LCD_string_write(" ");
      003CAE 90 55 E1         [24]11054 	mov	dptr,#___str_29
      003CB1 75 F0 80         [24]11055 	mov	b,#0x80
      003CB4 12 10 77         [24]11056 	lcall	_LCD_string_write
                                  11057 ;	.\ecen4350_lcd_v4.c:2598: setColorHighlight2();
      003CB7 12 16 5D         [24]11058 	lcall	_setColorHighlight2
                                  11059 ;	.\ecen4350_lcd_v4.c:2599: LCD_string_write("0x");
      003CBA 90 54 B4         [24]11060 	mov	dptr,#___str_2
      003CBD 75 F0 80         [24]11061 	mov	b,#0x80
      003CC0 12 10 77         [24]11062 	lcall	_LCD_string_write
                                  11063 ;	.\ecen4350_lcd_v4.c:2600: print16Hex(address);
      003CC3 78 85            [12]11064 	mov	r0,#_count_address_65536_702
      003CC5 86 82            [24]11065 	mov	dpl,@r0
      003CC7 08               [12]11066 	inc	r0
      003CC8 86 83            [24]11067 	mov	dph,@r0
      003CCA 12 15 5F         [24]11068 	lcall	_print16Hex
                                  11069 ;	.\ecen4350_lcd_v4.c:2603: setColorSelect();
      003CCD 12 16 46         [24]11070 	lcall	_setColorSelect
                                  11071 ;	.\ecen4350_lcd_v4.c:2604: setCursor(0, 160);
      003CD0 75 6B A0         [24]11072 	mov	_setCursor_PARM_2,#0xa0
      003CD3 75 6C 00         [24]11073 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CD6 90 00 00         [24]11074 	mov	dptr,#0x0000
      003CD9 12 05 5D         [24]11075 	lcall	_setCursor
                                  11076 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write(" Input Block Size:\n");
      003CDC 90 58 E8         [24]11077 	mov	dptr,#___str_82
      003CDF 75 F0 80         [24]11078 	mov	b,#0x80
      003CE2 12 10 77         [24]11079 	lcall	_LCD_string_write
                                  11080 ;	.\ecen4350_lcd_v4.c:2606: setColorWhite();
      003CE5 12 16 8B         [24]11081 	lcall	_setColorWhite
                                  11082 ;	.\ecen4350_lcd_v4.c:2607: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003CE8 90 58 FC         [24]11083 	mov	dptr,#___str_83
      003CEB 75 F0 80         [24]11084 	mov	b,#0x80
      003CEE 12 10 77         [24]11085 	lcall	_LCD_string_write
                                  11086 ;	.\ecen4350_lcd_v4.c:2608: LCD_string_write("  <FF> (SCAN)");
      003CF1 90 59 22         [24]11087 	mov	dptr,#___str_84
      003CF4 75 F0 80         [24]11088 	mov	b,#0x80
      003CF7 12 10 77         [24]11089 	lcall	_LCD_string_write
      003CFA D0 03            [24]11090 	pop	ar3
      003CFC D0 05            [24]11091 	pop	ar5
                                  11092 ;	.\ecen4350_lcd_v4.c:2609: while (invalidInput) {
      003CFE                      11093 00113$:
      003CFE EB               [12]11094 	mov	a,r3
      003CFF 70 03            [24]11095 	jnz	00530$
      003D01 02 3D BD         [24]11096 	ljmp	00115$
      003D04                      11097 00530$:
                                  11098 ;	.\ecen4350_lcd_v4.c:2610: setCursor(0, 250);
      003D04 75 6B FA         [24]11099 	mov	_setCursor_PARM_2,#0xfa
      003D07 75 6C 00         [24]11100 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D0A 90 00 00         [24]11101 	mov	dptr,#0x0000
      003D0D C0 05            [24]11102 	push	ar5
      003D0F C0 03            [24]11103 	push	ar3
      003D11 12 05 5D         [24]11104 	lcall	_setCursor
                                  11105 ;	.\ecen4350_lcd_v4.c:2611: setColorGray();
      003D14 12 16 69         [24]11106 	lcall	_setColorGray
                                  11107 ;	.\ecen4350_lcd_v4.c:2612: LCD_string_write("   __");
      003D17 90 59 30         [24]11108 	mov	dptr,#___str_85
      003D1A 75 F0 80         [24]11109 	mov	b,#0x80
      003D1D 12 10 77         [24]11110 	lcall	_LCD_string_write
                                  11111 ;	.\ecen4350_lcd_v4.c:2613: setCursor(0, 250);
      003D20 75 6B FA         [24]11112 	mov	_setCursor_PARM_2,#0xfa
      003D23 75 6C 00         [24]11113 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D26 90 00 00         [24]11114 	mov	dptr,#0x0000
      003D29 12 05 5D         [24]11115 	lcall	_setCursor
                                  11116 ;	.\ecen4350_lcd_v4.c:2614: LCD_string_write("   ");
      003D2C 90 59 36         [24]11117 	mov	dptr,#___str_86
      003D2F 75 F0 80         [24]11118 	mov	b,#0x80
      003D32 12 10 77         [24]11119 	lcall	_LCD_string_write
                                  11120 ;	.\ecen4350_lcd_v4.c:2615: setColorHighlight1();
      003D35 12 16 51         [24]11121 	lcall	_setColorHighlight1
                                  11122 ;	.\ecen4350_lcd_v4.c:2616: blockSize = inputBlockSize();
      003D38 12 17 5C         [24]11123 	lcall	_inputBlockSize
      003D3B 78 87            [12]11124 	mov	r0,#_count_blockSize_65536_702
      003D3D A6 82            [24]11125 	mov	@r0,dpl
      003D3F D0 03            [24]11126 	pop	ar3
      003D41 D0 05            [24]11127 	pop	ar5
                                  11128 ;	.\ecen4350_lcd_v4.c:2617: if (blockSize == 0x01) {
      003D43 78 87            [12]11129 	mov	r0,#_count_blockSize_65536_702
      003D45 B6 01 18         [24]11130 	cjne	@r0,#0x01,00111$
                                  11131 ;	.\ecen4350_lcd_v4.c:2618: invalidInput = 0;
      003D48 7B 00            [12]11132 	mov	r3,#0x00
                                  11133 ;	.\ecen4350_lcd_v4.c:2619: setColorDefault();
      003D4A C0 05            [24]11134 	push	ar5
      003D4C C0 03            [24]11135 	push	ar3
      003D4E 12 16 3B         [24]11136 	lcall	_setColorDefault
                                  11137 ;	.\ecen4350_lcd_v4.c:2620: LCD_string_write("\n                ");
      003D51 90 59 3A         [24]11138 	mov	dptr,#___str_87
      003D54 75 F0 80         [24]11139 	mov	b,#0x80
      003D57 12 10 77         [24]11140 	lcall	_LCD_string_write
      003D5A D0 03            [24]11141 	pop	ar3
      003D5C D0 05            [24]11142 	pop	ar5
      003D5E 80 9E            [24]11143 	sjmp	00113$
      003D60                      11144 00111$:
                                  11145 ;	.\ecen4350_lcd_v4.c:2621: } else if (blockSize == 0x02) {
      003D60 78 87            [12]11146 	mov	r0,#_count_blockSize_65536_702
      003D62 B6 02 19         [24]11147 	cjne	@r0,#0x02,00108$
                                  11148 ;	.\ecen4350_lcd_v4.c:2622: invalidInput = 0;
      003D65 7B 00            [12]11149 	mov	r3,#0x00
                                  11150 ;	.\ecen4350_lcd_v4.c:2623: setColorDefault();
      003D67 C0 05            [24]11151 	push	ar5
      003D69 C0 03            [24]11152 	push	ar3
      003D6B 12 16 3B         [24]11153 	lcall	_setColorDefault
                                  11154 ;	.\ecen4350_lcd_v4.c:2624: LCD_string_write("\n                ");
      003D6E 90 59 3A         [24]11155 	mov	dptr,#___str_87
      003D71 75 F0 80         [24]11156 	mov	b,#0x80
      003D74 12 10 77         [24]11157 	lcall	_LCD_string_write
      003D77 D0 03            [24]11158 	pop	ar3
      003D79 D0 05            [24]11159 	pop	ar5
      003D7B 02 3C FE         [24]11160 	ljmp	00113$
      003D7E                      11161 00108$:
                                  11162 ;	.\ecen4350_lcd_v4.c:2625: } else if (blockSize == 0x04) {
      003D7E 78 87            [12]11163 	mov	r0,#_count_blockSize_65536_702
      003D80 B6 04 19         [24]11164 	cjne	@r0,#0x04,00105$
                                  11165 ;	.\ecen4350_lcd_v4.c:2626: invalidInput = 0;
      003D83 7B 00            [12]11166 	mov	r3,#0x00
                                  11167 ;	.\ecen4350_lcd_v4.c:2627: setColorDefault();
      003D85 C0 05            [24]11168 	push	ar5
      003D87 C0 03            [24]11169 	push	ar3
      003D89 12 16 3B         [24]11170 	lcall	_setColorDefault
                                  11171 ;	.\ecen4350_lcd_v4.c:2628: LCD_string_write("\n                ");
      003D8C 90 59 3A         [24]11172 	mov	dptr,#___str_87
      003D8F 75 F0 80         [24]11173 	mov	b,#0x80
      003D92 12 10 77         [24]11174 	lcall	_LCD_string_write
      003D95 D0 03            [24]11175 	pop	ar3
      003D97 D0 05            [24]11176 	pop	ar5
      003D99 02 3C FE         [24]11177 	ljmp	00113$
      003D9C                      11178 00105$:
                                  11179 ;	.\ecen4350_lcd_v4.c:2629: } else if (blockSize == 0xFF) {
      003D9C 78 87            [12]11180 	mov	r0,#_count_blockSize_65536_702
      003D9E B6 FF 05         [24]11181 	cjne	@r0,#0xff,00102$
                                  11182 ;	.\ecen4350_lcd_v4.c:2630: invalidInput = 0;
      003DA1 7B 00            [12]11183 	mov	r3,#0x00
      003DA3 02 3C FE         [24]11184 	ljmp	00113$
      003DA6                      11185 00102$:
                                  11186 ;	.\ecen4350_lcd_v4.c:2633: setColorRed();
      003DA6 C0 05            [24]11187 	push	ar5
      003DA8 C0 03            [24]11188 	push	ar3
      003DAA 12 16 80         [24]11189 	lcall	_setColorRed
                                  11190 ;	.\ecen4350_lcd_v4.c:2634: LCD_string_write("\n Try again");
      003DAD 90 59 4C         [24]11191 	mov	dptr,#___str_88
      003DB0 75 F0 80         [24]11192 	mov	b,#0x80
      003DB3 12 10 77         [24]11193 	lcall	_LCD_string_write
      003DB6 D0 03            [24]11194 	pop	ar3
      003DB8 D0 05            [24]11195 	pop	ar5
      003DBA 02 3C FE         [24]11196 	ljmp	00113$
      003DBD                      11197 00115$:
                                  11198 ;	.\ecen4350_lcd_v4.c:2639: setCursor(0, 160);
      003DBD 75 6B A0         [24]11199 	mov	_setCursor_PARM_2,#0xa0
      003DC0 75 6C 00         [24]11200 	mov	(_setCursor_PARM_2 + 1),#0x00
      003DC3 90 00 00         [24]11201 	mov	dptr,#0x0000
      003DC6 C0 05            [24]11202 	push	ar5
      003DC8 12 05 5D         [24]11203 	lcall	_setCursor
                                  11204 ;	.\ecen4350_lcd_v4.c:2640: setColorDefault();
      003DCB 12 16 3B         [24]11205 	lcall	_setColorDefault
                                  11206 ;	.\ecen4350_lcd_v4.c:2641: LCD_string_write(" Input Block Size:\n");
      003DCE 90 58 E8         [24]11207 	mov	dptr,#___str_82
      003DD1 75 F0 80         [24]11208 	mov	b,#0x80
      003DD4 12 10 77         [24]11209 	lcall	_LCD_string_write
      003DD7 D0 05            [24]11210 	pop	ar5
                                  11211 ;	.\ecen4350_lcd_v4.c:2642: if (blockSize == 0x01){
      003DD9 78 87            [12]11212 	mov	r0,#_count_blockSize_65536_702
      003DDB B6 01 74         [24]11213 	cjne	@r0,#0x01,00125$
                                  11214 ;	.\ecen4350_lcd_v4.c:2643: LCD_string_write("  ");
      003DDE 90 55 FA         [24]11215 	mov	dptr,#___str_32
      003DE1 75 F0 80         [24]11216 	mov	b,#0x80
      003DE4 C0 05            [24]11217 	push	ar5
      003DE6 12 10 77         [24]11218 	lcall	_LCD_string_write
                                  11219 ;	.\ecen4350_lcd_v4.c:2644: setColorHighlight2();
      003DE9 12 16 5D         [24]11220 	lcall	_setColorHighlight2
                                  11221 ;	.\ecen4350_lcd_v4.c:2645: LCD_string_write("<01> BYTE\n");
      003DEC 90 59 58         [24]11222 	mov	dptr,#___str_89
      003DEF 75 F0 80         [24]11223 	mov	b,#0x80
      003DF2 12 10 77         [24]11224 	lcall	_LCD_string_write
                                  11225 ;	.\ecen4350_lcd_v4.c:2646: setColorGray();
      003DF5 12 16 69         [24]11226 	lcall	_setColorGray
                                  11227 ;	.\ecen4350_lcd_v4.c:2647: LCD_string_write("  <02> WORD\n");
      003DF8 90 59 63         [24]11228 	mov	dptr,#___str_90
      003DFB 75 F0 80         [24]11229 	mov	b,#0x80
      003DFE 12 10 77         [24]11230 	lcall	_LCD_string_write
                                  11231 ;	.\ecen4350_lcd_v4.c:2648: LCD_string_write("  <04> DWORD\n");
      003E01 90 59 70         [24]11232 	mov	dptr,#___str_91
      003E04 75 F0 80         [24]11233 	mov	b,#0x80
      003E07 12 10 77         [24]11234 	lcall	_LCD_string_write
                                  11235 ;	.\ecen4350_lcd_v4.c:2649: LCD_string_write("  <FF> (SCAN)");
      003E0A 90 59 22         [24]11236 	mov	dptr,#___str_84
      003E0D 75 F0 80         [24]11237 	mov	b,#0x80
      003E10 12 10 77         [24]11238 	lcall	_LCD_string_write
                                  11239 ;	.\ecen4350_lcd_v4.c:2650: setColorDefault();
      003E13 12 16 3B         [24]11240 	lcall	_setColorDefault
                                  11241 ;	.\ecen4350_lcd_v4.c:2651: setCursor(0, 250);
      003E16 75 6B FA         [24]11242 	mov	_setCursor_PARM_2,#0xfa
      003E19 75 6C 00         [24]11243 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E1C 90 00 00         [24]11244 	mov	dptr,#0x0000
      003E1F 12 05 5D         [24]11245 	lcall	_setCursor
                                  11246 ;	.\ecen4350_lcd_v4.c:2652: LCD_string_write("   ");
      003E22 90 59 36         [24]11247 	mov	dptr,#___str_86
      003E25 75 F0 80         [24]11248 	mov	b,#0x80
      003E28 12 10 77         [24]11249 	lcall	_LCD_string_write
                                  11250 ;	.\ecen4350_lcd_v4.c:2653: setColorHighlight2();
      003E2B 12 16 5D         [24]11251 	lcall	_setColorHighlight2
                                  11252 ;	.\ecen4350_lcd_v4.c:2654: print8Hex(blockSize);
      003E2E 78 87            [12]11253 	mov	r0,#_count_blockSize_65536_702
      003E30 86 82            [24]11254 	mov	dpl,@r0
      003E32 12 15 48         [24]11255 	lcall	_print8Hex
                                  11256 ;	.\ecen4350_lcd_v4.c:2655: setColorDefault();
      003E35 12 16 3B         [24]11257 	lcall	_setColorDefault
                                  11258 ;	.\ecen4350_lcd_v4.c:2656: LCD_string_write("\n Search Size Limit:");
      003E38 90 59 7E         [24]11259 	mov	dptr,#___str_92
      003E3B 75 F0 80         [24]11260 	mov	b,#0x80
      003E3E 12 10 77         [24]11261 	lcall	_LCD_string_write
                                  11262 ;	.\ecen4350_lcd_v4.c:2657: setColorWhite();
      003E41 12 16 8B         [24]11263 	lcall	_setColorWhite
                                  11264 ;	.\ecen4350_lcd_v4.c:2658: LCD_string_write("\n BYTE [8 bits]");
      003E44 90 59 93         [24]11265 	mov	dptr,#___str_93
      003E47 75 F0 80         [24]11266 	mov	b,#0x80
      003E4A 12 10 77         [24]11267 	lcall	_LCD_string_write
      003E4D D0 05            [24]11268 	pop	ar5
      003E4F 02 3F 96         [24]11269 	ljmp	00126$
      003E52                      11270 00125$:
                                  11271 ;	.\ecen4350_lcd_v4.c:2659: } else if (blockSize == 0x02) {
      003E52 78 87            [12]11272 	mov	r0,#_count_blockSize_65536_702
      003E54 B6 02 6E         [24]11273 	cjne	@r0,#0x02,00122$
                                  11274 ;	.\ecen4350_lcd_v4.c:2660: setColorGray();
      003E57 C0 05            [24]11275 	push	ar5
      003E59 12 16 69         [24]11276 	lcall	_setColorGray
                                  11277 ;	.\ecen4350_lcd_v4.c:2661: LCD_string_write("  <01> BYTE\n  ");
      003E5C 90 59 A3         [24]11278 	mov	dptr,#___str_94
      003E5F 75 F0 80         [24]11279 	mov	b,#0x80
      003E62 12 10 77         [24]11280 	lcall	_LCD_string_write
                                  11281 ;	.\ecen4350_lcd_v4.c:2662: setColorHighlight2();
      003E65 12 16 5D         [24]11282 	lcall	_setColorHighlight2
                                  11283 ;	.\ecen4350_lcd_v4.c:2663: LCD_string_write("<02> WORD\n");
      003E68 90 59 B2         [24]11284 	mov	dptr,#___str_95
      003E6B 75 F0 80         [24]11285 	mov	b,#0x80
      003E6E 12 10 77         [24]11286 	lcall	_LCD_string_write
                                  11287 ;	.\ecen4350_lcd_v4.c:2664: setColorGray();
      003E71 12 16 69         [24]11288 	lcall	_setColorGray
                                  11289 ;	.\ecen4350_lcd_v4.c:2665: LCD_string_write("  <04> DWORD\n");
      003E74 90 59 70         [24]11290 	mov	dptr,#___str_91
      003E77 75 F0 80         [24]11291 	mov	b,#0x80
      003E7A 12 10 77         [24]11292 	lcall	_LCD_string_write
                                  11293 ;	.\ecen4350_lcd_v4.c:2666: LCD_string_write("  <FF> (SCAN)");
      003E7D 90 59 22         [24]11294 	mov	dptr,#___str_84
      003E80 75 F0 80         [24]11295 	mov	b,#0x80
      003E83 12 10 77         [24]11296 	lcall	_LCD_string_write
                                  11297 ;	.\ecen4350_lcd_v4.c:2667: setColorDefault();
      003E86 12 16 3B         [24]11298 	lcall	_setColorDefault
                                  11299 ;	.\ecen4350_lcd_v4.c:2668: setCursor(0, 250);
      003E89 75 6B FA         [24]11300 	mov	_setCursor_PARM_2,#0xfa
      003E8C 75 6C 00         [24]11301 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E8F 90 00 00         [24]11302 	mov	dptr,#0x0000
      003E92 12 05 5D         [24]11303 	lcall	_setCursor
                                  11304 ;	.\ecen4350_lcd_v4.c:2669: LCD_string_write("   ");
      003E95 90 59 36         [24]11305 	mov	dptr,#___str_86
      003E98 75 F0 80         [24]11306 	mov	b,#0x80
      003E9B 12 10 77         [24]11307 	lcall	_LCD_string_write
                                  11308 ;	.\ecen4350_lcd_v4.c:2670: setColorHighlight2();
      003E9E 12 16 5D         [24]11309 	lcall	_setColorHighlight2
                                  11310 ;	.\ecen4350_lcd_v4.c:2671: print8Hex(blockSize);
      003EA1 78 87            [12]11311 	mov	r0,#_count_blockSize_65536_702
      003EA3 86 82            [24]11312 	mov	dpl,@r0
      003EA5 12 15 48         [24]11313 	lcall	_print8Hex
                                  11314 ;	.\ecen4350_lcd_v4.c:2672: setColorDefault();
      003EA8 12 16 3B         [24]11315 	lcall	_setColorDefault
                                  11316 ;	.\ecen4350_lcd_v4.c:2673: LCD_string_write("\n Search Size Limit:");
      003EAB 90 59 7E         [24]11317 	mov	dptr,#___str_92
      003EAE 75 F0 80         [24]11318 	mov	b,#0x80
      003EB1 12 10 77         [24]11319 	lcall	_LCD_string_write
                                  11320 ;	.\ecen4350_lcd_v4.c:2674: setColorWhite();
      003EB4 12 16 8B         [24]11321 	lcall	_setColorWhite
                                  11322 ;	.\ecen4350_lcd_v4.c:2675: LCD_string_write("\n WORD [16 bits]");
      003EB7 90 59 BD         [24]11323 	mov	dptr,#___str_96
      003EBA 75 F0 80         [24]11324 	mov	b,#0x80
      003EBD 12 10 77         [24]11325 	lcall	_LCD_string_write
      003EC0 D0 05            [24]11326 	pop	ar5
      003EC2 02 3F 96         [24]11327 	ljmp	00126$
      003EC5                      11328 00122$:
                                  11329 ;	.\ecen4350_lcd_v4.c:2676: } else if (blockSize == 0x04) {
      003EC5 78 87            [12]11330 	mov	r0,#_count_blockSize_65536_702
      003EC7 B6 04 64         [24]11331 	cjne	@r0,#0x04,00119$
                                  11332 ;	.\ecen4350_lcd_v4.c:2677: setColorGray();
      003ECA C0 05            [24]11333 	push	ar5
      003ECC 12 16 69         [24]11334 	lcall	_setColorGray
                                  11335 ;	.\ecen4350_lcd_v4.c:2678: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003ECF 90 59 CE         [24]11336 	mov	dptr,#___str_97
      003ED2 75 F0 80         [24]11337 	mov	b,#0x80
      003ED5 12 10 77         [24]11338 	lcall	_LCD_string_write
                                  11339 ;	.\ecen4350_lcd_v4.c:2679: setColorHighlight2();
      003ED8 12 16 5D         [24]11340 	lcall	_setColorHighlight2
                                  11341 ;	.\ecen4350_lcd_v4.c:2680: LCD_string_write("<04> DWORD\n");
      003EDB 90 59 E9         [24]11342 	mov	dptr,#___str_98
      003EDE 75 F0 80         [24]11343 	mov	b,#0x80
      003EE1 12 10 77         [24]11344 	lcall	_LCD_string_write
                                  11345 ;	.\ecen4350_lcd_v4.c:2681: setColorGray();
      003EE4 12 16 69         [24]11346 	lcall	_setColorGray
                                  11347 ;	.\ecen4350_lcd_v4.c:2682: LCD_string_write("  <FF> (SCAN)");
      003EE7 90 59 22         [24]11348 	mov	dptr,#___str_84
      003EEA 75 F0 80         [24]11349 	mov	b,#0x80
      003EED 12 10 77         [24]11350 	lcall	_LCD_string_write
                                  11351 ;	.\ecen4350_lcd_v4.c:2683: setColorDefault();
      003EF0 12 16 3B         [24]11352 	lcall	_setColorDefault
                                  11353 ;	.\ecen4350_lcd_v4.c:2684: setCursor(0, 250);
      003EF3 75 6B FA         [24]11354 	mov	_setCursor_PARM_2,#0xfa
      003EF6 75 6C 00         [24]11355 	mov	(_setCursor_PARM_2 + 1),#0x00
      003EF9 90 00 00         [24]11356 	mov	dptr,#0x0000
      003EFC 12 05 5D         [24]11357 	lcall	_setCursor
                                  11358 ;	.\ecen4350_lcd_v4.c:2685: LCD_string_write("   ");
      003EFF 90 59 36         [24]11359 	mov	dptr,#___str_86
      003F02 75 F0 80         [24]11360 	mov	b,#0x80
      003F05 12 10 77         [24]11361 	lcall	_LCD_string_write
                                  11362 ;	.\ecen4350_lcd_v4.c:2686: setColorHighlight2();
      003F08 12 16 5D         [24]11363 	lcall	_setColorHighlight2
                                  11364 ;	.\ecen4350_lcd_v4.c:2687: print8Hex(blockSize);
      003F0B 78 87            [12]11365 	mov	r0,#_count_blockSize_65536_702
      003F0D 86 82            [24]11366 	mov	dpl,@r0
      003F0F 12 15 48         [24]11367 	lcall	_print8Hex
                                  11368 ;	.\ecen4350_lcd_v4.c:2688: setColorDefault();
      003F12 12 16 3B         [24]11369 	lcall	_setColorDefault
                                  11370 ;	.\ecen4350_lcd_v4.c:2689: LCD_string_write("\n Search Size Limit:");
      003F15 90 59 7E         [24]11371 	mov	dptr,#___str_92
      003F18 75 F0 80         [24]11372 	mov	b,#0x80
      003F1B 12 10 77         [24]11373 	lcall	_LCD_string_write
                                  11374 ;	.\ecen4350_lcd_v4.c:2690: setColorWhite();
      003F1E 12 16 8B         [24]11375 	lcall	_setColorWhite
                                  11376 ;	.\ecen4350_lcd_v4.c:2691: LCD_string_write("\n DWORD [32 bits]");
      003F21 90 59 F5         [24]11377 	mov	dptr,#___str_99
      003F24 75 F0 80         [24]11378 	mov	b,#0x80
      003F27 12 10 77         [24]11379 	lcall	_LCD_string_write
      003F2A D0 05            [24]11380 	pop	ar5
      003F2C 80 68            [24]11381 	sjmp	00126$
      003F2E                      11382 00119$:
                                  11383 ;	.\ecen4350_lcd_v4.c:2692: } else if (blockSize == 0xFF) {
      003F2E 78 87            [12]11384 	mov	r0,#_count_blockSize_65536_702
      003F30 B6 FF 63         [24]11385 	cjne	@r0,#0xff,00126$
                                  11386 ;	.\ecen4350_lcd_v4.c:2693: scan = 1;
      003F33 78 89            [12]11387 	mov	r0,#_count_scan_65536_702
      003F35 76 01            [12]11388 	mov	@r0,#0x01
                                  11389 ;	.\ecen4350_lcd_v4.c:2694: setColorGray();
      003F37 C0 05            [24]11390 	push	ar5
      003F39 12 16 69         [24]11391 	lcall	_setColorGray
                                  11392 ;	.\ecen4350_lcd_v4.c:2695: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003F3C 90 59 CE         [24]11393 	mov	dptr,#___str_97
      003F3F 75 F0 80         [24]11394 	mov	b,#0x80
      003F42 12 10 77         [24]11395 	lcall	_LCD_string_write
                                  11396 ;	.\ecen4350_lcd_v4.c:2696: LCD_string_write("<04> DWORD\n  ");
      003F45 90 5A 07         [24]11397 	mov	dptr,#___str_100
      003F48 75 F0 80         [24]11398 	mov	b,#0x80
      003F4B 12 10 77         [24]11399 	lcall	_LCD_string_write
                                  11400 ;	.\ecen4350_lcd_v4.c:2697: setColorHighlight2();
      003F4E 12 16 5D         [24]11401 	lcall	_setColorHighlight2
                                  11402 ;	.\ecen4350_lcd_v4.c:2698: LCD_string_write("<FF> (SCAN)");
      003F51 90 5A 15         [24]11403 	mov	dptr,#___str_101
      003F54 75 F0 80         [24]11404 	mov	b,#0x80
      003F57 12 10 77         [24]11405 	lcall	_LCD_string_write
                                  11406 ;	.\ecen4350_lcd_v4.c:2699: setColorDefault();
      003F5A 12 16 3B         [24]11407 	lcall	_setColorDefault
                                  11408 ;	.\ecen4350_lcd_v4.c:2700: setCursor(0, 250);
      003F5D 75 6B FA         [24]11409 	mov	_setCursor_PARM_2,#0xfa
      003F60 75 6C 00         [24]11410 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F63 90 00 00         [24]11411 	mov	dptr,#0x0000
      003F66 12 05 5D         [24]11412 	lcall	_setCursor
                                  11413 ;	.\ecen4350_lcd_v4.c:2701: LCD_string_write("   ");
      003F69 90 59 36         [24]11414 	mov	dptr,#___str_86
      003F6C 75 F0 80         [24]11415 	mov	b,#0x80
      003F6F 12 10 77         [24]11416 	lcall	_LCD_string_write
                                  11417 ;	.\ecen4350_lcd_v4.c:2702: setColorHighlight2();
      003F72 12 16 5D         [24]11418 	lcall	_setColorHighlight2
                                  11419 ;	.\ecen4350_lcd_v4.c:2703: print8Hex(blockSize);
      003F75 78 87            [12]11420 	mov	r0,#_count_blockSize_65536_702
      003F77 86 82            [24]11421 	mov	dpl,@r0
      003F79 12 15 48         [24]11422 	lcall	_print8Hex
                                  11423 ;	.\ecen4350_lcd_v4.c:2704: setColorDefault();
      003F7C 12 16 3B         [24]11424 	lcall	_setColorDefault
                                  11425 ;	.\ecen4350_lcd_v4.c:2705: LCD_string_write("\n Search Size Limit:");
      003F7F 90 59 7E         [24]11426 	mov	dptr,#___str_92
      003F82 75 F0 80         [24]11427 	mov	b,#0x80
      003F85 12 10 77         [24]11428 	lcall	_LCD_string_write
                                  11429 ;	.\ecen4350_lcd_v4.c:2706: setColorWhite();
      003F88 12 16 8B         [24]11430 	lcall	_setColorWhite
                                  11431 ;	.\ecen4350_lcd_v4.c:2707: LCD_string_write("\n [256 Blocks]");
      003F8B 90 5A 21         [24]11432 	mov	dptr,#___str_102
      003F8E 75 F0 80         [24]11433 	mov	b,#0x80
      003F91 12 10 77         [24]11434 	lcall	_LCD_string_write
      003F94 D0 05            [24]11435 	pop	ar5
      003F96                      11436 00126$:
                                  11437 ;	.\ecen4350_lcd_v4.c:2711: delay(40);
      003F96 90 00 28         [24]11438 	mov	dptr,#0x0028
      003F99 C0 05            [24]11439 	push	ar5
      003F9B 12 01 87         [24]11440 	lcall	_delay
                                  11441 ;	.\ecen4350_lcd_v4.c:2712: clearLCD();
      003F9E 12 0D FA         [24]11442 	lcall	_clearLCD
                                  11443 ;	.\ecen4350_lcd_v4.c:2713: fillTop(GRAY);
      003FA1 90 D6 BA         [24]11444 	mov	dptr,#0xd6ba
      003FA4 12 0C 2D         [24]11445 	lcall	_fillTop
                                  11446 ;	.\ecen4350_lcd_v4.c:2714: setTextSize(5);
      003FA7 75 82 05         [24]11447 	mov	dpl,#0x05
      003FAA 12 05 77         [24]11448 	lcall	_setTextSize
                                  11449 ;	.\ecen4350_lcd_v4.c:2715: setColorMenu();
      003FAD 12 16 74         [24]11450 	lcall	_setColorMenu
                                  11451 ;	.\ecen4350_lcd_v4.c:2716: setCursor(15,0);
      003FB0 E4               [12]11452 	clr	a
      003FB1 F5 6B            [12]11453 	mov	_setCursor_PARM_2,a
      003FB3 F5 6C            [12]11454 	mov	(_setCursor_PARM_2 + 1),a
      003FB5 90 00 0F         [24]11455 	mov	dptr,#0x000f
      003FB8 12 05 5D         [24]11456 	lcall	_setCursor
                                  11457 ;	.\ecen4350_lcd_v4.c:2717: LCD_string_write("[COUNT]\n");
      003FBB 90 5B 8D         [24]11458 	mov	dptr,#___str_122
      003FBE 75 F0 80         [24]11459 	mov	b,#0x80
      003FC1 12 10 77         [24]11460 	lcall	_LCD_string_write
                                  11461 ;	.\ecen4350_lcd_v4.c:2718: setColorDefault();
      003FC4 12 16 3B         [24]11462 	lcall	_setColorDefault
                                  11463 ;	.\ecen4350_lcd_v4.c:2719: setTextSize(2);
      003FC7 75 82 02         [24]11464 	mov	dpl,#0x02
      003FCA 12 05 77         [24]11465 	lcall	_setTextSize
      003FCD D0 05            [24]11466 	pop	ar5
                                  11467 ;	.\ecen4350_lcd_v4.c:2725: while (exit) {
      003FCF                      11468 00202$:
      003FCF 78 8B            [12]11469 	mov	r0,#_count_exit_65536_702
      003FD1 E6               [12]11470 	mov	a,@r0
      003FD2 70 03            [24]11471 	jnz	00547$
      003FD4 02 45 6E         [24]11472 	ljmp	00204$
      003FD7                      11473 00547$:
                                  11474 ;	.\ecen4350_lcd_v4.c:2727: if (scan) {	
      003FD7 78 89            [12]11475 	mov	r0,#_count_scan_65536_702
      003FD9 E6               [12]11476 	mov	a,@r0
      003FDA 70 03            [24]11477 	jnz	00548$
      003FDC 02 40 94         [24]11478 	ljmp	00193$
      003FDF                      11479 00548$:
                                  11480 ;	.\ecen4350_lcd_v4.c:2728: setCursor(0, 60);
      003FDF 75 6B 3C         [24]11481 	mov	_setCursor_PARM_2,#0x3c
      003FE2 75 6C 00         [24]11482 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FE5 90 00 00         [24]11483 	mov	dptr,#0x0000
      003FE8 C0 05            [24]11484 	push	ar5
      003FEA 12 05 5D         [24]11485 	lcall	_setCursor
                                  11486 ;	.\ecen4350_lcd_v4.c:2729: setColorYellow();
      003FED 12 16 A1         [24]11487 	lcall	_setColorYellow
                                  11488 ;	.\ecen4350_lcd_v4.c:2730: LCD_string_write(" [Non-Interactive]\n");
      003FF0 90 5A 30         [24]11489 	mov	dptr,#___str_103
      003FF3 75 F0 80         [24]11490 	mov	b,#0x80
      003FF6 12 10 77         [24]11491 	lcall	_LCD_string_write
                                  11492 ;	.\ecen4350_lcd_v4.c:2731: setColorWhite();
      003FF9 12 16 8B         [24]11493 	lcall	_setColorWhite
                                  11494 ;	.\ecen4350_lcd_v4.c:2732: LCD_string_write(" Search Value:\n ");
      003FFC 90 5A 44         [24]11495 	mov	dptr,#___str_104
      003FFF 75 F0 80         [24]11496 	mov	b,#0x80
      004002 12 10 77         [24]11497 	lcall	_LCD_string_write
                                  11498 ;	.\ecen4350_lcd_v4.c:2733: setColorDefault();
      004005 12 16 3B         [24]11499 	lcall	_setColorDefault
                                  11500 ;	.\ecen4350_lcd_v4.c:2734: print8Hex(value);
      004008 78 88            [12]11501 	mov	r0,#_count_value_65536_702
      00400A 86 82            [24]11502 	mov	dpl,@r0
      00400C 12 15 48         [24]11503 	lcall	_print8Hex
      00400F D0 05            [24]11504 	pop	ar5
                                  11505 ;	.\ecen4350_lcd_v4.c:2735: for(unsigned int i = 0; i < blockSize; i++) {
      004011 8D 03            [24]11506 	mov	ar3,r5
      004013 E4               [12]11507 	clr	a
      004014 F5 66            [12]11508 	mov	_count_i_262144_715,a
      004016 F5 67            [12]11509 	mov	(_count_i_262144_715 + 1),a
      004018                      11510 00208$:
      004018 78 87            [12]11511 	mov	r0,#_count_blockSize_65536_702
      00401A 86 02            [24]11512 	mov	ar2,@r0
      00401C 7E 00            [12]11513 	mov	r6,#0x00
      00401E C3               [12]11514 	clr	c
      00401F E5 66            [12]11515 	mov	a,_count_i_262144_715
      004021 9A               [12]11516 	subb	a,r2
      004022 E5 67            [12]11517 	mov	a,(_count_i_262144_715 + 1)
      004024 9E               [12]11518 	subb	a,r6
      004025 50 2A            [24]11519 	jnc	00267$
                                  11520 ;	.\ecen4350_lcd_v4.c:2736: d = (unsigned char __xdata*)(i+address);
      004027 78 85            [12]11521 	mov	r0,#_count_address_65536_702
      004029 E6               [12]11522 	mov	a,@r0
      00402A 25 66            [12]11523 	add	a,_count_i_262144_715
      00402C FC               [12]11524 	mov	r4,a
      00402D 08               [12]11525 	inc	r0
      00402E E6               [12]11526 	mov	a,@r0
      00402F 35 67            [12]11527 	addc	a,(_count_i_262144_715 + 1)
      004031 FE               [12]11528 	mov	r6,a
                                  11529 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  11530 ;	assignBit
      004032 C2 B5            [12]11531 	clr	_P3_5
                                  11532 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      004034 8C 82            [24]11533 	mov	dpl,r4
      004036 8E 83            [24]11534 	mov	dph,r6
      004038 E0               [24]11535 	movx	a,@dptr
      004039 FC               [12]11536 	mov	r4,a
                                  11537 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  11538 ;	assignBit
      00403A D2 B5            [12]11539 	setb	_P3_5
                                  11540 ;	.\ecen4350_lcd_v4.c:2737: if(value == ramRead8(d)){
      00403C 78 88            [12]11541 	mov	r0,#_count_value_65536_702
      00403E E6               [12]11542 	mov	a,@r0
      00403F B5 04 05         [24]11543 	cjne	a,ar4,00209$
                                  11544 ;	.\ecen4350_lcd_v4.c:2738: noneFound = 0;
      004042 78 8A            [12]11545 	mov	r0,#_count_noneFound_65536_702
      004044 76 00            [12]11546 	mov	@r0,#0x00
                                  11547 ;	.\ecen4350_lcd_v4.c:2739: page++;
      004046 0B               [12]11548 	inc	r3
      004047                      11549 00209$:
                                  11550 ;	.\ecen4350_lcd_v4.c:2735: for(unsigned int i = 0; i < blockSize; i++) {
      004047 05 66            [12]11551 	inc	_count_i_262144_715
      004049 E4               [12]11552 	clr	a
      00404A B5 66 CB         [24]11553 	cjne	a,_count_i_262144_715,00208$
      00404D 05 67            [12]11554 	inc	(_count_i_262144_715 + 1)
      00404F 80 C7            [24]11555 	sjmp	00208$
      004051                      11556 00267$:
      004051 8B 05            [24]11557 	mov	ar5,r3
                                  11558 ;	.\ecen4350_lcd_v4.c:2742: setCursor(0, 120);
      004053 75 6B 78         [24]11559 	mov	_setCursor_PARM_2,#0x78
      004056 75 6C 00         [24]11560 	mov	(_setCursor_PARM_2 + 1),#0x00
      004059 90 00 00         [24]11561 	mov	dptr,#0x0000
      00405C C0 05            [24]11562 	push	ar5
      00405E C0 03            [24]11563 	push	ar3
      004060 12 05 5D         [24]11564 	lcall	_setCursor
                                  11565 ;	.\ecen4350_lcd_v4.c:2743: setColorWhite();
      004063 12 16 8B         [24]11566 	lcall	_setColorWhite
                                  11567 ;	.\ecen4350_lcd_v4.c:2744: LCD_string_write(" Found in\n ");
      004066 90 5B A5         [24]11568 	mov	dptr,#___str_124
      004069 75 F0 80         [24]11569 	mov	b,#0x80
      00406C 12 10 77         [24]11570 	lcall	_LCD_string_write
                                  11571 ;	.\ecen4350_lcd_v4.c:2745: setColorDefault();
      00406F 12 16 3B         [24]11572 	lcall	_setColorDefault
                                  11573 ;	.\ecen4350_lcd_v4.c:2746: LCD_string_write("0x");
      004072 90 54 B4         [24]11574 	mov	dptr,#___str_2
      004075 75 F0 80         [24]11575 	mov	b,#0x80
      004078 12 10 77         [24]11576 	lcall	_LCD_string_write
      00407B D0 03            [24]11577 	pop	ar3
                                  11578 ;	.\ecen4350_lcd_v4.c:2747: print8Hex(page);
      00407D 8B 82            [24]11579 	mov	dpl,r3
      00407F 12 15 48         [24]11580 	lcall	_print8Hex
                                  11581 ;	.\ecen4350_lcd_v4.c:2748: LCD_string_write(" Bytes (Hex)\n ");
      004082 90 5B B1         [24]11582 	mov	dptr,#___str_125
      004085 75 F0 80         [24]11583 	mov	b,#0x80
      004088 12 10 77         [24]11584 	lcall	_LCD_string_write
      00408B D0 05            [24]11585 	pop	ar5
                                  11586 ;	.\ecen4350_lcd_v4.c:2749: exit = 0;
      00408D 78 8B            [12]11587 	mov	r0,#_count_exit_65536_702
      00408F 76 00            [12]11588 	mov	@r0,#0x00
      004091 02 44 F5         [24]11589 	ljmp	00194$
      004094                      11590 00193$:
                                  11591 ;	.\ecen4350_lcd_v4.c:2751: setCursor(0, 60);
      004094 75 6B 3C         [24]11592 	mov	_setCursor_PARM_2,#0x3c
      004097 75 6C 00         [24]11593 	mov	(_setCursor_PARM_2 + 1),#0x00
      00409A 90 00 00         [24]11594 	mov	dptr,#0x0000
      00409D C0 05            [24]11595 	push	ar5
      00409F 12 05 5D         [24]11596 	lcall	_setCursor
                                  11597 ;	.\ecen4350_lcd_v4.c:2752: setColorYellow();
      0040A2 12 16 A1         [24]11598 	lcall	_setColorYellow
                                  11599 ;	.\ecen4350_lcd_v4.c:2753: LCD_string_write(" [Interactive]\n");
      0040A5 90 5A 6F         [24]11600 	mov	dptr,#___str_107
      0040A8 75 F0 80         [24]11601 	mov	b,#0x80
      0040AB 12 10 77         [24]11602 	lcall	_LCD_string_write
                                  11603 ;	.\ecen4350_lcd_v4.c:2754: setColorWhite();
      0040AE 12 16 8B         [24]11604 	lcall	_setColorWhite
                                  11605 ;	.\ecen4350_lcd_v4.c:2755: LCD_string_write(" Search Value:\n ");
      0040B1 90 5A 44         [24]11606 	mov	dptr,#___str_104
      0040B4 75 F0 80         [24]11607 	mov	b,#0x80
      0040B7 12 10 77         [24]11608 	lcall	_LCD_string_write
                                  11609 ;	.\ecen4350_lcd_v4.c:2756: setColorDefault();
      0040BA 12 16 3B         [24]11610 	lcall	_setColorDefault
      0040BD D0 05            [24]11611 	pop	ar5
                                  11612 ;	.\ecen4350_lcd_v4.c:2759: for (unsigned int i = 0; i < blockSize; i++) {
      0040BF E4               [12]11613 	clr	a
      0040C0 F5 69            [12]11614 	mov	_count_sloc1_1_0,a
      0040C2 F5 6A            [12]11615 	mov	(_count_sloc1_1_0 + 1),a
      0040C4                      11616 00211$:
      0040C4 78 87            [12]11617 	mov	r0,#_count_blockSize_65536_702
      0040C6 86 02            [24]11618 	mov	ar2,@r0
      0040C8 7B 00            [12]11619 	mov	r3,#0x00
      0040CA C3               [12]11620 	clr	c
      0040CB E5 69            [12]11621 	mov	a,_count_sloc1_1_0
      0040CD 9A               [12]11622 	subb	a,r2
      0040CE E5 6A            [12]11623 	mov	a,(_count_sloc1_1_0 + 1)
      0040D0 9B               [12]11624 	subb	a,r3
      0040D1 40 03            [24]11625 	jc	00553$
      0040D3 02 44 F5         [24]11626 	ljmp	00194$
      0040D6                      11627 00553$:
                                  11628 ;	.\ecen4350_lcd_v4.c:2760: d = (unsigned char __xdata*)(i+address);
      0040D6 78 85            [12]11629 	mov	r0,#_count_address_65536_702
      0040D8 E6               [12]11630 	mov	a,@r0
      0040D9 25 69            [12]11631 	add	a,_count_sloc1_1_0
      0040DB FA               [12]11632 	mov	r2,a
      0040DC 08               [12]11633 	inc	r0
      0040DD E6               [12]11634 	mov	a,@r0
      0040DE 35 6A            [12]11635 	addc	a,(_count_sloc1_1_0 + 1)
      0040E0 FB               [12]11636 	mov	r3,a
      0040E1 8A 82            [24]11637 	mov	dpl,r2
      0040E3 8B 83            [24]11638 	mov	dph,r3
                                  11639 ;	.\ecen4350_lcd_v4.c:117: IOM = 0;
                                  11640 ;	assignBit
      0040E5 C2 B5            [12]11641 	clr	_P3_5
                                  11642 ;	.\ecen4350_lcd_v4.c:118: d = *map_address;
      0040E7 E0               [24]11643 	movx	a,@dptr
      0040E8 FB               [12]11644 	mov	r3,a
                                  11645 ;	.\ecen4350_lcd_v4.c:119: IOM = 1;
                                  11646 ;	assignBit
      0040E9 D2 B5            [12]11647 	setb	_P3_5
                                  11648 ;	.\ecen4350_lcd_v4.c:2761: if(value == ramRead8(d)){
      0040EB 78 88            [12]11649 	mov	r0,#_count_value_65536_702
      0040ED E6               [12]11650 	mov	a,@r0
      0040EE B5 03 02         [24]11651 	cjne	a,ar3,00554$
      0040F1 80 03            [24]11652 	sjmp	00555$
      0040F3                      11653 00554$:
      0040F3 02 44 EA         [24]11654 	ljmp	00212$
      0040F6                      11655 00555$:
                                  11656 ;	.\ecen4350_lcd_v4.c:2762: noneFound = 0;		// toggle flag
      0040F6 78 8A            [12]11657 	mov	r0,#_count_noneFound_65536_702
      0040F8 76 00            [12]11658 	mov	@r0,#0x00
                                  11659 ;	.\ecen4350_lcd_v4.c:2763: setCursor(0, 120);
      0040FA 75 6B 78         [24]11660 	mov	_setCursor_PARM_2,#0x78
      0040FD 75 6C 00         [24]11661 	mov	(_setCursor_PARM_2 + 1),#0x00
      004100 90 00 00         [24]11662 	mov	dptr,#0x0000
      004103 C0 05            [24]11663 	push	ar5
      004105 12 05 5D         [24]11664 	lcall	_setCursor
                                  11665 ;	.\ecen4350_lcd_v4.c:2764: setColorWhite();
      004108 12 16 8B         [24]11666 	lcall	_setColorWhite
                                  11667 ;	.\ecen4350_lcd_v4.c:2765: LCD_string_write(" Found at Location \n");
      00410B 90 5A 7F         [24]11668 	mov	dptr,#___str_108
      00410E 75 F0 80         [24]11669 	mov	b,#0x80
      004111 12 10 77         [24]11670 	lcall	_LCD_string_write
                                  11671 ;	.\ecen4350_lcd_v4.c:2766: setColorDefault();
      004114 12 16 3B         [24]11672 	lcall	_setColorDefault
                                  11673 ;	.\ecen4350_lcd_v4.c:2767: LCD_string_write(" 0x");
      004117 90 56 DB         [24]11674 	mov	dptr,#___str_45
      00411A 75 F0 80         [24]11675 	mov	b,#0x80
      00411D 12 10 77         [24]11676 	lcall	_LCD_string_write
      004120 D0 05            [24]11677 	pop	ar5
                                  11678 ;	.\ecen4350_lcd_v4.c:2768: print16Hex(page+address);
      004122 8D 02            [24]11679 	mov	ar2,r5
      004124 7B 00            [12]11680 	mov	r3,#0x00
      004126 78 85            [12]11681 	mov	r0,#_count_address_65536_702
      004128 E6               [12]11682 	mov	a,@r0
      004129 2A               [12]11683 	add	a,r2
      00412A F5 82            [12]11684 	mov	dpl,a
      00412C 08               [12]11685 	inc	r0
      00412D E6               [12]11686 	mov	a,@r0
      00412E 3B               [12]11687 	addc	a,r3
      00412F F5 83            [12]11688 	mov	dph,a
      004131 C0 05            [24]11689 	push	ar5
      004133 12 15 5F         [24]11690 	lcall	_print16Hex
                                  11691 ;	.\ecen4350_lcd_v4.c:2769: setCursor(50, 300);
      004136 75 6B 2C         [24]11692 	mov	_setCursor_PARM_2,#0x2c
      004139 75 6C 01         [24]11693 	mov	(_setCursor_PARM_2 + 1),#0x01
      00413C 90 00 32         [24]11694 	mov	dptr,#0x0032
      00413F 12 05 5D         [24]11695 	lcall	_setCursor
                                  11696 ;	.\ecen4350_lcd_v4.c:2770: setColorGray();
      004142 12 16 69         [24]11697 	lcall	_setColorGray
                                  11698 ;	.\ecen4350_lcd_v4.c:2771: LCD_string_write("Count: ");
      004145 90 5B C0         [24]11699 	mov	dptr,#___str_126
      004148 75 F0 80         [24]11700 	mov	b,#0x80
      00414B 12 10 77         [24]11701 	lcall	_LCD_string_write
                                  11702 ;	.\ecen4350_lcd_v4.c:2772: setColorHighlight2();
      00414E 12 16 5D         [24]11703 	lcall	_setColorHighlight2
      004151 D0 05            [24]11704 	pop	ar5
                                  11705 ;	.\ecen4350_lcd_v4.c:2773: print8Hex(page+1);
      004153 8D 03            [24]11706 	mov	ar3,r5
      004155 EB               [12]11707 	mov	a,r3
      004156 04               [12]11708 	inc	a
      004157 F5 82            [12]11709 	mov	dpl,a
      004159 C0 05            [24]11710 	push	ar5
      00415B 12 15 48         [24]11711 	lcall	_print8Hex
      00415E D0 05            [24]11712 	pop	ar5
                                  11713 ;	.\ecen4350_lcd_v4.c:2777: if (i == 0) {					// At beginning, page <0>
      004160 E5 69            [12]11714 	mov	a,_count_sloc1_1_0
      004162 45 6A            [12]11715 	orl	a,(_count_sloc1_1_0 + 1)
      004164 60 03            [24]11716 	jz	00556$
      004166 02 42 95         [24]11717 	ljmp	00187$
      004169                      11718 00556$:
                                  11719 ;	.\ecen4350_lcd_v4.c:2778: if (i != blockSize - 1) {	// not at the end yet, no previous page
      004169 C0 05            [24]11720 	push	ar5
      00416B 78 87            [12]11721 	mov	r0,#_count_blockSize_65536_702
      00416D 86 02            [24]11722 	mov	ar2,@r0
      00416F 7B 00            [12]11723 	mov	r3,#0x00
      004171 EA               [12]11724 	mov	a,r2
      004172 24 FF            [12]11725 	add	a,#0xff
      004174 FD               [12]11726 	mov	r5,a
      004175 EB               [12]11727 	mov	a,r3
      004176 34 FF            [12]11728 	addc	a,#0xff
      004178 FF               [12]11729 	mov	r7,a
      004179 ED               [12]11730 	mov	a,r5
      00417A B5 69 09         [24]11731 	cjne	a,_count_sloc1_1_0,00557$
      00417D EF               [12]11732 	mov	a,r7
      00417E B5 6A 05         [24]11733 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      004181 D0 05            [24]11734 	pop	ar5
      004183 02 42 16         [24]11735 	ljmp	00145$
      004186                      11736 00557$:
                                  11737 ;	.\ecen4350_lcd_v4.c:2779: setCursor(0, 180);
      004186 75 6B B4         [24]11738 	mov	_setCursor_PARM_2,#0xb4
      004189 75 6C 00         [24]11739 	mov	(_setCursor_PARM_2 + 1),#0x00
      00418C 90 00 00         [24]11740 	mov	dptr,#0x0000
      00418F 12 05 5D         [24]11741 	lcall	_setCursor
                                  11742 ;	.\ecen4350_lcd_v4.c:2780: setColorWhite();
      004192 12 16 8B         [24]11743 	lcall	_setColorWhite
                                  11744 ;	.\ecen4350_lcd_v4.c:2781: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      004195 90 5A 9B         [24]11745 	mov	dptr,#___str_110
      004198 75 F0 80         [24]11746 	mov	b,#0x80
      00419B 12 10 77         [24]11747 	lcall	_LCD_string_write
      00419E D0 05            [24]11748 	pop	ar5
                                  11749 ;	.\ecen4350_lcd_v4.c:2782: invalidInput = 1;
      0041A0 7F 01            [12]11750 	mov	r7,#0x01
                                  11751 ;	.\ecen4350_lcd_v4.c:2783: while (invalidInput) {
      0041A2 8D 68            [24]11752 	mov	_count_sloc0_1_0,r5
      0041A4                      11753 00134$:
      0041A4 EF               [12]11754 	mov	a,r7
      0041A5 70 03            [24]11755 	jnz	00558$
      0041A7 02 42 88         [24]11756 	ljmp	00268$
      0041AA                      11757 00558$:
                                  11758 ;	.\ecen4350_lcd_v4.c:2784: selection = keyDetect();
      0041AA C0 07            [24]11759 	push	ar7
      0041AC 12 11 95         [24]11760 	lcall	_keyDetect
      0041AF AF 82            [24]11761 	mov	r7,dpl
      0041B1 78 71            [12]11762 	mov	r0,#_selection
      0041B3 A6 07            [24]11763 	mov	@r0,ar7
                                  11764 ;	.\ecen4350_lcd_v4.c:2785: if(selection == '1'){
      0041B5 BF 31 02         [24]11765 	cjne	r7,#0x31,00559$
      0041B8 80 04            [24]11766 	sjmp	00560$
      0041BA                      11767 00559$:
      0041BA D0 07            [24]11768 	pop	ar7
      0041BC 80 27            [24]11769 	sjmp	00131$
      0041BE                      11770 00560$:
      0041BE D0 07            [24]11771 	pop	ar7
                                  11772 ;	.\ecen4350_lcd_v4.c:2786: setCursor(0, 180);
      0041C0 75 6B B4         [24]11773 	mov	_setCursor_PARM_2,#0xb4
      0041C3 75 6C 00         [24]11774 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041C6 90 00 00         [24]11775 	mov	dptr,#0x0000
      0041C9 12 05 5D         [24]11776 	lcall	_setCursor
                                  11777 ;	.\ecen4350_lcd_v4.c:2787: LCD_string_write(" ");
      0041CC 90 55 E1         [24]11778 	mov	dptr,#___str_29
      0041CF 75 F0 80         [24]11779 	mov	b,#0x80
      0041D2 12 10 77         [24]11780 	lcall	_LCD_string_write
                                  11781 ;	.\ecen4350_lcd_v4.c:2788: setColorHighlight2();
      0041D5 12 16 5D         [24]11782 	lcall	_setColorHighlight2
                                  11783 ;	.\ecen4350_lcd_v4.c:2789: LCD_string_write("<1> Next");
      0041D8 90 5A BE         [24]11784 	mov	dptr,#___str_111
      0041DB 75 F0 80         [24]11785 	mov	b,#0x80
      0041DE 12 10 77         [24]11786 	lcall	_LCD_string_write
                                  11787 ;	.\ecen4350_lcd_v4.c:2790: invalidInput = 0;
      0041E1 7F 00            [12]11788 	mov	r7,#0x00
                                  11789 ;	.\ecen4350_lcd_v4.c:2791: page++;
      0041E3 05 68            [12]11790 	inc	_count_sloc0_1_0
      0041E5                      11791 00131$:
                                  11792 ;	.\ecen4350_lcd_v4.c:2792: } if(selection == '0') {
      0041E5 78 71            [12]11793 	mov	r0,#_selection
      0041E7 B6 30 BA         [24]11794 	cjne	@r0,#0x30,00134$
                                  11795 ;	.\ecen4350_lcd_v4.c:2793: setColorDefault();
      0041EA 12 16 3B         [24]11796 	lcall	_setColorDefault
                                  11797 ;	.\ecen4350_lcd_v4.c:2794: setCursor(0, 180);
      0041ED 75 6B B4         [24]11798 	mov	_setCursor_PARM_2,#0xb4
      0041F0 75 6C 00         [24]11799 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041F3 90 00 00         [24]11800 	mov	dptr,#0x0000
      0041F6 12 05 5D         [24]11801 	lcall	_setCursor
                                  11802 ;	.\ecen4350_lcd_v4.c:2795: LCD_string_write("\n ");
      0041F9 90 57 EC         [24]11803 	mov	dptr,#___str_66
      0041FC 75 F0 80         [24]11804 	mov	b,#0x80
      0041FF 12 10 77         [24]11805 	lcall	_LCD_string_write
                                  11806 ;	.\ecen4350_lcd_v4.c:2796: setColorHighlight2();
      004202 12 16 5D         [24]11807 	lcall	_setColorHighlight2
                                  11808 ;	.\ecen4350_lcd_v4.c:2797: LCD_string_write("<0> Exit");
      004205 90 58 A7         [24]11809 	mov	dptr,#___str_77
      004208 75 F0 80         [24]11810 	mov	b,#0x80
      00420B 12 10 77         [24]11811 	lcall	_LCD_string_write
                                  11812 ;	.\ecen4350_lcd_v4.c:2798: exit = 0;		// set exit flag
      00420E 78 8B            [12]11813 	mov	r0,#_count_exit_65536_702
      004210 76 00            [12]11814 	mov	@r0,#0x00
                                  11815 ;	.\ecen4350_lcd_v4.c:2799: invalidInput = 0;
      004212 7F 00            [12]11816 	mov	r7,#0x00
      004214 80 8E            [24]11817 	sjmp	00134$
      004216                      11818 00145$:
                                  11819 ;	.\ecen4350_lcd_v4.c:2802: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      004216 1A               [12]11820 	dec	r2
      004217 BA FF 01         [24]11821 	cjne	r2,#0xff,00563$
      00421A 1B               [12]11822 	dec	r3
      00421B                      11823 00563$:
      00421B EA               [12]11824 	mov	a,r2
      00421C B5 69 6B         [24]11825 	cjne	a,_count_sloc1_1_0,00146$
      00421F EB               [12]11826 	mov	a,r3
      004220 B5 6A 67         [24]11827 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11828 ;	.\ecen4350_lcd_v4.c:2803: setCursor(0, 180);
      004223 75 6B B4         [24]11829 	mov	_setCursor_PARM_2,#0xb4
      004226 75 6C 00         [24]11830 	mov	(_setCursor_PARM_2 + 1),#0x00
      004229 90 00 00         [24]11831 	mov	dptr,#0x0000
      00422C C0 05            [24]11832 	push	ar5
      00422E 12 05 5D         [24]11833 	lcall	_setCursor
                                  11834 ;	.\ecen4350_lcd_v4.c:2804: setColorWhite();
      004231 12 16 8B         [24]11835 	lcall	_setColorWhite
                                  11836 ;	.\ecen4350_lcd_v4.c:2805: LCD_string_write("          \n <0> Exit\n              ");
      004234 90 5A C7         [24]11837 	mov	dptr,#___str_112
      004237 75 F0 80         [24]11838 	mov	b,#0x80
      00423A 12 10 77         [24]11839 	lcall	_LCD_string_write
      00423D D0 05            [24]11840 	pop	ar5
                                  11841 ;	.\ecen4350_lcd_v4.c:2806: invalidInput = 1;
      00423F 7F 01            [12]11842 	mov	r7,#0x01
                                  11843 ;	.\ecen4350_lcd_v4.c:2807: while (invalidInput) {
      004241                      11844 00139$:
      004241 EF               [12]11845 	mov	a,r7
      004242 60 46            [24]11846 	jz	00146$
                                  11847 ;	.\ecen4350_lcd_v4.c:2808: selection = keyDetect();
      004244 C0 07            [24]11848 	push	ar7
      004246 C0 05            [24]11849 	push	ar5
      004248 12 11 95         [24]11850 	lcall	_keyDetect
      00424B AB 82            [24]11851 	mov	r3,dpl
      00424D D0 05            [24]11852 	pop	ar5
      00424F D0 07            [24]11853 	pop	ar7
      004251 78 71            [12]11854 	mov	r0,#_selection
      004253 A6 03            [24]11855 	mov	@r0,ar3
                                  11856 ;	.\ecen4350_lcd_v4.c:2809: if(selection == '0') {
      004255 BB 30 E9         [24]11857 	cjne	r3,#0x30,00139$
                                  11858 ;	.\ecen4350_lcd_v4.c:2810: setColorDefault();
      004258 C0 05            [24]11859 	push	ar5
      00425A 12 16 3B         [24]11860 	lcall	_setColorDefault
                                  11861 ;	.\ecen4350_lcd_v4.c:2811: setCursor(0, 180);
      00425D 75 6B B4         [24]11862 	mov	_setCursor_PARM_2,#0xb4
      004260 75 6C 00         [24]11863 	mov	(_setCursor_PARM_2 + 1),#0x00
      004263 90 00 00         [24]11864 	mov	dptr,#0x0000
      004266 12 05 5D         [24]11865 	lcall	_setCursor
                                  11866 ;	.\ecen4350_lcd_v4.c:2812: LCD_string_write("\n ");
      004269 90 57 EC         [24]11867 	mov	dptr,#___str_66
      00426C 75 F0 80         [24]11868 	mov	b,#0x80
      00426F 12 10 77         [24]11869 	lcall	_LCD_string_write
                                  11870 ;	.\ecen4350_lcd_v4.c:2813: setColorHighlight2();
      004272 12 16 5D         [24]11871 	lcall	_setColorHighlight2
                                  11872 ;	.\ecen4350_lcd_v4.c:2814: LCD_string_write("<0> Exit");
      004275 90 58 A7         [24]11873 	mov	dptr,#___str_77
      004278 75 F0 80         [24]11874 	mov	b,#0x80
      00427B 12 10 77         [24]11875 	lcall	_LCD_string_write
      00427E D0 05            [24]11876 	pop	ar5
                                  11877 ;	.\ecen4350_lcd_v4.c:2815: exit = 0;		// set exit flag
      004280 78 8B            [12]11878 	mov	r0,#_count_exit_65536_702
      004282 76 00            [12]11879 	mov	@r0,#0x00
                                  11880 ;	.\ecen4350_lcd_v4.c:2816: invalidInput = 0;
      004284 7F 00            [12]11881 	mov	r7,#0x00
      004286 80 B9            [24]11882 	sjmp	00139$
      004288                      11883 00268$:
      004288 AD 68            [24]11884 	mov	r5,_count_sloc0_1_0
      00428A                      11885 00146$:
                                  11886 ;	.\ecen4350_lcd_v4.c:2820: if (exit == 0) {	// check exit flag
      00428A 78 8B            [12]11887 	mov	r0,#_count_exit_65536_702
      00428C E6               [12]11888 	mov	a,@r0
      00428D 60 03            [24]11889 	jz	00569$
      00428F 02 44 EA         [24]11890 	ljmp	00212$
      004292                      11891 00569$:
                                  11892 ;	.\ecen4350_lcd_v4.c:2821: break;			// break out of for loop iteration
      004292 02 44 F5         [24]11893 	ljmp	00194$
      004295                      11894 00187$:
                                  11895 ;	.\ecen4350_lcd_v4.c:2826: else if (i == blockSize - 1) {		// At Page End 
      004295 C0 05            [24]11896 	push	ar5
      004297 78 87            [12]11897 	mov	r0,#_count_blockSize_65536_702
      004299 86 03            [24]11898 	mov	ar3,@r0
      00429B 7F 00            [12]11899 	mov	r7,#0x00
      00429D EB               [12]11900 	mov	a,r3
      00429E 24 FF            [12]11901 	add	a,#0xff
      0042A0 FA               [12]11902 	mov	r2,a
      0042A1 EF               [12]11903 	mov	a,r7
      0042A2 34 FF            [12]11904 	addc	a,#0xff
      0042A4 FD               [12]11905 	mov	r5,a
      0042A5 EA               [12]11906 	mov	a,r2
      0042A6 B5 69 06         [24]11907 	cjne	a,_count_sloc1_1_0,00570$
      0042A9 ED               [12]11908 	mov	a,r5
      0042AA B5 6A 02         [24]11909 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      0042AD 80 05            [24]11910 	sjmp	00571$
      0042AF                      11911 00570$:
      0042AF D0 05            [24]11912 	pop	ar5
      0042B1 02 43 E1         [24]11913 	ljmp	00184$
      0042B4                      11914 00571$:
      0042B4 D0 05            [24]11915 	pop	ar5
                                  11916 ;	.\ecen4350_lcd_v4.c:2827: if (i != 0) {				// not at beginning, no next page
      0042B6 E5 69            [12]11917 	mov	a,_count_sloc1_1_0
      0042B8 45 6A            [12]11918 	orl	a,(_count_sloc1_1_0 + 1)
      0042BA 70 03            [24]11919 	jnz	00572$
      0042BC 02 43 6A         [24]11920 	ljmp	00164$
      0042BF                      11921 00572$:
                                  11922 ;	.\ecen4350_lcd_v4.c:2828: setCursor(0, 180);
      0042BF 75 6B B4         [24]11923 	mov	_setCursor_PARM_2,#0xb4
      0042C2 75 6C 00         [24]11924 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042C5 90 00 00         [24]11925 	mov	dptr,#0x0000
      0042C8 C0 05            [24]11926 	push	ar5
      0042CA 12 05 5D         [24]11927 	lcall	_setCursor
                                  11928 ;	.\ecen4350_lcd_v4.c:2829: setColorWhite();
      0042CD 12 16 8B         [24]11929 	lcall	_setColorWhite
                                  11930 ;	.\ecen4350_lcd_v4.c:2830: LCD_string_write("          \n <0> Exit\n <2> Previous");
      0042D0 90 5A EB         [24]11931 	mov	dptr,#___str_113
      0042D3 75 F0 80         [24]11932 	mov	b,#0x80
      0042D6 12 10 77         [24]11933 	lcall	_LCD_string_write
      0042D9 D0 05            [24]11934 	pop	ar5
                                  11935 ;	.\ecen4350_lcd_v4.c:2831: invalidInput = 1;
      0042DB 7F 01            [12]11936 	mov	r7,#0x01
                                  11937 ;	.\ecen4350_lcd_v4.c:2832: while (invalidInput) {
      0042DD 8D 68            [24]11938 	mov	_count_sloc0_1_0,r5
      0042DF                      11939 00153$:
      0042DF EF               [12]11940 	mov	a,r7
      0042E0 70 03            [24]11941 	jnz	00573$
      0042E2 02 43 D4         [24]11942 	ljmp	00269$
      0042E5                      11943 00573$:
                                  11944 ;	.\ecen4350_lcd_v4.c:2833: selection = keyDetect();
      0042E5 C0 07            [24]11945 	push	ar7
      0042E7 C0 07            [24]11946 	push	ar7
      0042E9 12 11 95         [24]11947 	lcall	_keyDetect
      0042EC AA 82            [24]11948 	mov	r2,dpl
      0042EE D0 07            [24]11949 	pop	ar7
      0042F0 78 71            [12]11950 	mov	r0,#_selection
      0042F2 A6 02            [24]11951 	mov	@r0,ar2
                                  11952 ;	.\ecen4350_lcd_v4.c:2834: if(selection == '0'){
      0042F4 BA 30 02         [24]11953 	cjne	r2,#0x30,00574$
      0042F7 80 04            [24]11954 	sjmp	00575$
      0042F9                      11955 00574$:
      0042F9 D0 07            [24]11956 	pop	ar7
      0042FB 80 29            [24]11957 	sjmp	00150$
      0042FD                      11958 00575$:
      0042FD D0 07            [24]11959 	pop	ar7
                                  11960 ;	.\ecen4350_lcd_v4.c:2835: setCursor(0, 180);
      0042FF 75 6B B4         [24]11961 	mov	_setCursor_PARM_2,#0xb4
      004302 75 6C 00         [24]11962 	mov	(_setCursor_PARM_2 + 1),#0x00
      004305 90 00 00         [24]11963 	mov	dptr,#0x0000
      004308 12 05 5D         [24]11964 	lcall	_setCursor
                                  11965 ;	.\ecen4350_lcd_v4.c:2836: LCD_string_write("\n ");
      00430B 90 57 EC         [24]11966 	mov	dptr,#___str_66
      00430E 75 F0 80         [24]11967 	mov	b,#0x80
      004311 12 10 77         [24]11968 	lcall	_LCD_string_write
                                  11969 ;	.\ecen4350_lcd_v4.c:2837: setColorHighlight2();
      004314 12 16 5D         [24]11970 	lcall	_setColorHighlight2
                                  11971 ;	.\ecen4350_lcd_v4.c:2838: LCD_string_write("<0> Exit\n");
      004317 90 57 21         [24]11972 	mov	dptr,#___str_53
      00431A 75 F0 80         [24]11973 	mov	b,#0x80
      00431D 12 10 77         [24]11974 	lcall	_LCD_string_write
                                  11975 ;	.\ecen4350_lcd_v4.c:2839: invalidInput = 0;
      004320 7F 00            [12]11976 	mov	r7,#0x00
                                  11977 ;	.\ecen4350_lcd_v4.c:2840: exit = 0;
      004322 78 8B            [12]11978 	mov	r0,#_count_exit_65536_702
      004324 76 00            [12]11979 	mov	@r0,#0x00
      004326                      11980 00150$:
                                  11981 ;	.\ecen4350_lcd_v4.c:2841: } if (selection == '2') {
      004326 78 71            [12]11982 	mov	r0,#_selection
      004328 B6 32 B4         [24]11983 	cjne	@r0,#0x32,00153$
                                  11984 ;	.\ecen4350_lcd_v4.c:2842: setCursor(0, 180);
      00432B 75 6B B4         [24]11985 	mov	_setCursor_PARM_2,#0xb4
      00432E 75 6C 00         [24]11986 	mov	(_setCursor_PARM_2 + 1),#0x00
      004331 90 00 00         [24]11987 	mov	dptr,#0x0000
      004334 12 05 5D         [24]11988 	lcall	_setCursor
                                  11989 ;	.\ecen4350_lcd_v4.c:2843: setColorWhite();
      004337 12 16 8B         [24]11990 	lcall	_setColorWhite
                                  11991 ;	.\ecen4350_lcd_v4.c:2844: LCD_string_write("\n\n ");
      00433A 90 5B 0E         [24]11992 	mov	dptr,#___str_114
      00433D 75 F0 80         [24]11993 	mov	b,#0x80
      004340 12 10 77         [24]11994 	lcall	_LCD_string_write
                                  11995 ;	.\ecen4350_lcd_v4.c:2845: setColorHighlight2();
      004343 12 16 5D         [24]11996 	lcall	_setColorHighlight2
                                  11997 ;	.\ecen4350_lcd_v4.c:2846: LCD_string_write("<2> Previous");
      004346 90 5B 12         [24]11998 	mov	dptr,#___str_115
      004349 75 F0 80         [24]11999 	mov	b,#0x80
      00434C 12 10 77         [24]12000 	lcall	_LCD_string_write
                                  12001 ;	.\ecen4350_lcd_v4.c:2847: invalidInput = 0;
      00434F 7F 00            [12]12002 	mov	r7,#0x00
                                  12003 ;	.\ecen4350_lcd_v4.c:2848: i--;			// two decrements plus next loop increment is equal to one decrement
      004351 E5 69            [12]12004 	mov	a,_count_sloc1_1_0
      004353 24 FF            [12]12005 	add	a,#0xff
      004355 FA               [12]12006 	mov	r2,a
      004356 E5 6A            [12]12007 	mov	a,(_count_sloc1_1_0 + 1)
      004358 34 FF            [12]12008 	addc	a,#0xff
      00435A FE               [12]12009 	mov	r6,a
                                  12010 ;	.\ecen4350_lcd_v4.c:2849: i--;
      00435B EA               [12]12011 	mov	a,r2
      00435C 24 FF            [12]12012 	add	a,#0xff
      00435E F5 69            [12]12013 	mov	_count_sloc1_1_0,a
      004360 EE               [12]12014 	mov	a,r6
      004361 34 FF            [12]12015 	addc	a,#0xff
      004363 F5 6A            [12]12016 	mov	(_count_sloc1_1_0 + 1),a
                                  12017 ;	.\ecen4350_lcd_v4.c:2850: page--;			// decrement to previous page
      004365 15 68            [12]12018 	dec	_count_sloc0_1_0
      004367 02 42 DF         [24]12019 	ljmp	00153$
      00436A                      12020 00164$:
                                  12021 ;	.\ecen4350_lcd_v4.c:2854: else if (i == 0){				// end at beginning, no next or previous
      00436A E5 69            [12]12022 	mov	a,_count_sloc1_1_0
      00436C 45 6A            [12]12023 	orl	a,(_count_sloc1_1_0 + 1)
                                  12024 ;	.\ecen4350_lcd_v4.c:2855: setCursor(0, 180);
      00436E 70 66            [24]12025 	jnz	00165$
      004370 75 6B B4         [24]12026 	mov	_setCursor_PARM_2,#0xb4
      004373 F5 6C            [12]12027 	mov	(_setCursor_PARM_2 + 1),a
      004375 90 00 00         [24]12028 	mov	dptr,#0x0000
      004378 C0 05            [24]12029 	push	ar5
      00437A 12 05 5D         [24]12030 	lcall	_setCursor
                                  12031 ;	.\ecen4350_lcd_v4.c:2856: setColorWhite();
      00437D 12 16 8B         [24]12032 	lcall	_setColorWhite
                                  12033 ;	.\ecen4350_lcd_v4.c:2857: LCD_string_write("          \n <0> Exit\n              ");
      004380 90 5A C7         [24]12034 	mov	dptr,#___str_112
      004383 75 F0 80         [24]12035 	mov	b,#0x80
      004386 12 10 77         [24]12036 	lcall	_LCD_string_write
      004389 D0 05            [24]12037 	pop	ar5
                                  12038 ;	.\ecen4350_lcd_v4.c:2858: invalidInput = 1;
      00438B 7E 01            [12]12039 	mov	r6,#0x01
                                  12040 ;	.\ecen4350_lcd_v4.c:2859: while (invalidInput) {
      00438D                      12041 00158$:
      00438D EE               [12]12042 	mov	a,r6
      00438E 60 46            [24]12043 	jz	00165$
                                  12044 ;	.\ecen4350_lcd_v4.c:2860: selection = keyDetect();
      004390 C0 06            [24]12045 	push	ar6
      004392 C0 05            [24]12046 	push	ar5
      004394 12 11 95         [24]12047 	lcall	_keyDetect
      004397 AC 82            [24]12048 	mov	r4,dpl
      004399 D0 05            [24]12049 	pop	ar5
      00439B D0 06            [24]12050 	pop	ar6
      00439D 78 71            [12]12051 	mov	r0,#_selection
      00439F A6 04            [24]12052 	mov	@r0,ar4
                                  12053 ;	.\ecen4350_lcd_v4.c:2861: if(selection == '0') {
      0043A1 BC 30 E9         [24]12054 	cjne	r4,#0x30,00158$
                                  12055 ;	.\ecen4350_lcd_v4.c:2862: setColorDefault();
      0043A4 C0 05            [24]12056 	push	ar5
      0043A6 12 16 3B         [24]12057 	lcall	_setColorDefault
                                  12058 ;	.\ecen4350_lcd_v4.c:2863: setCursor(0, 180);
      0043A9 75 6B B4         [24]12059 	mov	_setCursor_PARM_2,#0xb4
      0043AC 75 6C 00         [24]12060 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043AF 90 00 00         [24]12061 	mov	dptr,#0x0000
      0043B2 12 05 5D         [24]12062 	lcall	_setCursor
                                  12063 ;	.\ecen4350_lcd_v4.c:2864: LCD_string_write("\n ");
      0043B5 90 57 EC         [24]12064 	mov	dptr,#___str_66
      0043B8 75 F0 80         [24]12065 	mov	b,#0x80
      0043BB 12 10 77         [24]12066 	lcall	_LCD_string_write
                                  12067 ;	.\ecen4350_lcd_v4.c:2865: setColorHighlight2();
      0043BE 12 16 5D         [24]12068 	lcall	_setColorHighlight2
                                  12069 ;	.\ecen4350_lcd_v4.c:2866: LCD_string_write("<0> Exit");
      0043C1 90 58 A7         [24]12070 	mov	dptr,#___str_77
      0043C4 75 F0 80         [24]12071 	mov	b,#0x80
      0043C7 12 10 77         [24]12072 	lcall	_LCD_string_write
      0043CA D0 05            [24]12073 	pop	ar5
                                  12074 ;	.\ecen4350_lcd_v4.c:2867: exit = 0;		// set exit flag
      0043CC 78 8B            [12]12075 	mov	r0,#_count_exit_65536_702
      0043CE 76 00            [12]12076 	mov	@r0,#0x00
                                  12077 ;	.\ecen4350_lcd_v4.c:2868: invalidInput = 0;
      0043D0 7E 00            [12]12078 	mov	r6,#0x00
      0043D2 80 B9            [24]12079 	sjmp	00158$
      0043D4                      12080 00269$:
      0043D4 AD 68            [24]12081 	mov	r5,_count_sloc0_1_0
      0043D6                      12082 00165$:
                                  12083 ;	.\ecen4350_lcd_v4.c:2872: if (exit == 0) {	// check exit flag
      0043D6 78 8B            [12]12084 	mov	r0,#_count_exit_65536_702
      0043D8 E6               [12]12085 	mov	a,@r0
      0043D9 60 03            [24]12086 	jz	00582$
      0043DB 02 44 EA         [24]12087 	ljmp	00212$
      0043DE                      12088 00582$:
                                  12089 ;	.\ecen4350_lcd_v4.c:2873: break;			// break out of for loop iteration
      0043DE 02 44 F5         [24]12090 	ljmp	00194$
      0043E1                      12091 00184$:
                                  12092 ;	.\ecen4350_lcd_v4.c:2878: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      0043E1 1B               [12]12093 	dec	r3
      0043E2 BB FF 01         [24]12094 	cjne	r3,#0xff,00583$
      0043E5 1F               [12]12095 	dec	r7
      0043E6                      12096 00583$:
      0043E6 EB               [12]12097 	mov	a,r3
      0043E7 B5 69 07         [24]12098 	cjne	a,_count_sloc1_1_0,00584$
      0043EA EF               [12]12099 	mov	a,r7
      0043EB B5 6A 03         [24]12100 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      0043EE 02 44 EA         [24]12101 	ljmp	00212$
      0043F1                      12102 00584$:
                                  12103 ;	.\ecen4350_lcd_v4.c:2879: if (i != 0) {
      0043F1 E5 69            [12]12104 	mov	a,_count_sloc1_1_0
      0043F3 45 6A            [12]12105 	orl	a,(_count_sloc1_1_0 + 1)
      0043F5 70 03            [24]12106 	jnz	00585$
      0043F7 02 44 E5         [24]12107 	ljmp	00178$
      0043FA                      12108 00585$:
                                  12109 ;	.\ecen4350_lcd_v4.c:2880: setCursor(0, 180);
      0043FA 75 6B B4         [24]12110 	mov	_setCursor_PARM_2,#0xb4
      0043FD 75 6C 00         [24]12111 	mov	(_setCursor_PARM_2 + 1),#0x00
      004400 90 00 00         [24]12112 	mov	dptr,#0x0000
      004403 C0 05            [24]12113 	push	ar5
      004405 12 05 5D         [24]12114 	lcall	_setCursor
                                  12115 ;	.\ecen4350_lcd_v4.c:2881: setColorWhite();
      004408 12 16 8B         [24]12116 	lcall	_setColorWhite
                                  12117 ;	.\ecen4350_lcd_v4.c:2882: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      00440B 90 5B 1F         [24]12118 	mov	dptr,#___str_116
      00440E 75 F0 80         [24]12119 	mov	b,#0x80
      004411 12 10 77         [24]12120 	lcall	_LCD_string_write
      004414 D0 05            [24]12121 	pop	ar5
                                  12122 ;	.\ecen4350_lcd_v4.c:2883: invalidInput = 1;
      004416 7F 01            [12]12123 	mov	r7,#0x01
                                  12124 ;	.\ecen4350_lcd_v4.c:2884: while (invalidInput) {
      004418                      12125 00174$:
      004418 EF               [12]12126 	mov	a,r7
      004419 70 03            [24]12127 	jnz	00586$
      00441B 02 44 E5         [24]12128 	ljmp	00178$
      00441E                      12129 00586$:
                                  12130 ;	.\ecen4350_lcd_v4.c:2885: selection = keyDetect();
      00441E C0 07            [24]12131 	push	ar7
      004420 C0 05            [24]12132 	push	ar5
      004422 12 11 95         [24]12133 	lcall	_keyDetect
      004425 AE 82            [24]12134 	mov	r6,dpl
      004427 D0 05            [24]12135 	pop	ar5
      004429 D0 07            [24]12136 	pop	ar7
      00442B 78 71            [12]12137 	mov	r0,#_selection
      00442D A6 06            [24]12138 	mov	@r0,ar6
                                  12139 ;	.\ecen4350_lcd_v4.c:2886: if (selection == '1') {
      00442F BE 31 28         [24]12140 	cjne	r6,#0x31,00169$
                                  12141 ;	.\ecen4350_lcd_v4.c:2887: setCursor(0, 180);
      004432 75 6B B4         [24]12142 	mov	_setCursor_PARM_2,#0xb4
      004435 75 6C 00         [24]12143 	mov	(_setCursor_PARM_2 + 1),#0x00
      004438 90 00 00         [24]12144 	mov	dptr,#0x0000
      00443B C0 05            [24]12145 	push	ar5
      00443D 12 05 5D         [24]12146 	lcall	_setCursor
                                  12147 ;	.\ecen4350_lcd_v4.c:2888: LCD_string_write(" ");
      004440 90 55 E1         [24]12148 	mov	dptr,#___str_29
      004443 75 F0 80         [24]12149 	mov	b,#0x80
      004446 12 10 77         [24]12150 	lcall	_LCD_string_write
                                  12151 ;	.\ecen4350_lcd_v4.c:2889: setColorHighlight2();
      004449 12 16 5D         [24]12152 	lcall	_setColorHighlight2
                                  12153 ;	.\ecen4350_lcd_v4.c:2890: LCD_string_write("<1> Next");
      00444C 90 5A BE         [24]12154 	mov	dptr,#___str_111
      00444F 75 F0 80         [24]12155 	mov	b,#0x80
      004452 12 10 77         [24]12156 	lcall	_LCD_string_write
      004455 D0 05            [24]12157 	pop	ar5
                                  12158 ;	.\ecen4350_lcd_v4.c:2891: invalidInput = 0;
      004457 7F 00            [12]12159 	mov	r7,#0x00
                                  12160 ;	.\ecen4350_lcd_v4.c:2892: page++;
      004459 0D               [12]12161 	inc	r5
      00445A                      12162 00169$:
                                  12163 ;	.\ecen4350_lcd_v4.c:2893: } if (selection == '2') {
      00445A 78 71            [12]12164 	mov	r0,#_selection
      00445C B6 32 3F         [24]12165 	cjne	@r0,#0x32,00171$
                                  12166 ;	.\ecen4350_lcd_v4.c:2894: setCursor(0, 180);
      00445F 75 6B B4         [24]12167 	mov	_setCursor_PARM_2,#0xb4
      004462 75 6C 00         [24]12168 	mov	(_setCursor_PARM_2 + 1),#0x00
      004465 90 00 00         [24]12169 	mov	dptr,#0x0000
      004468 C0 05            [24]12170 	push	ar5
      00446A 12 05 5D         [24]12171 	lcall	_setCursor
                                  12172 ;	.\ecen4350_lcd_v4.c:2895: setColorWhite();
      00446D 12 16 8B         [24]12173 	lcall	_setColorWhite
                                  12174 ;	.\ecen4350_lcd_v4.c:2896: LCD_string_write("\n\n ");
      004470 90 5B 0E         [24]12175 	mov	dptr,#___str_114
      004473 75 F0 80         [24]12176 	mov	b,#0x80
      004476 12 10 77         [24]12177 	lcall	_LCD_string_write
                                  12178 ;	.\ecen4350_lcd_v4.c:2897: setColorHighlight2();
      004479 12 16 5D         [24]12179 	lcall	_setColorHighlight2
                                  12180 ;	.\ecen4350_lcd_v4.c:2898: LCD_string_write("<2> Previous");
      00447C 90 5B 12         [24]12181 	mov	dptr,#___str_115
      00447F 75 F0 80         [24]12182 	mov	b,#0x80
      004482 12 10 77         [24]12183 	lcall	_LCD_string_write
      004485 D0 05            [24]12184 	pop	ar5
                                  12185 ;	.\ecen4350_lcd_v4.c:2899: invalidInput = 0;
      004487 7F 00            [12]12186 	mov	r7,#0x00
                                  12187 ;	.\ecen4350_lcd_v4.c:2900: i--;
      004489 E5 69            [12]12188 	mov	a,_count_sloc1_1_0
      00448B 24 FF            [12]12189 	add	a,#0xff
      00448D FC               [12]12190 	mov	r4,a
      00448E E5 6A            [12]12191 	mov	a,(_count_sloc1_1_0 + 1)
      004490 34 FF            [12]12192 	addc	a,#0xff
      004492 FE               [12]12193 	mov	r6,a
                                  12194 ;	.\ecen4350_lcd_v4.c:2901: i--;		// two decrements plus next loop increment is equal to one decrement
      004493 EC               [12]12195 	mov	a,r4
      004494 24 FF            [12]12196 	add	a,#0xff
      004496 F5 69            [12]12197 	mov	_count_sloc1_1_0,a
      004498 EE               [12]12198 	mov	a,r6
      004499 34 FF            [12]12199 	addc	a,#0xff
      00449B F5 6A            [12]12200 	mov	(_count_sloc1_1_0 + 1),a
                                  12201 ;	.\ecen4350_lcd_v4.c:2902: page--;		// decrement to previous page
      00449D 1D               [12]12202 	dec	r5
      00449E                      12203 00171$:
                                  12204 ;	.\ecen4350_lcd_v4.c:2903: } if (selection == '0') {
      00449E 78 71            [12]12205 	mov	r0,#_selection
      0044A0 B6 30 02         [24]12206 	cjne	@r0,#0x30,00591$
      0044A3 80 03            [24]12207 	sjmp	00592$
      0044A5                      12208 00591$:
      0044A5 02 44 18         [24]12209 	ljmp	00174$
      0044A8                      12210 00592$:
                                  12211 ;	.\ecen4350_lcd_v4.c:2904: setColorWhite();
      0044A8 C0 05            [24]12212 	push	ar5
      0044AA 12 16 8B         [24]12213 	lcall	_setColorWhite
                                  12214 ;	.\ecen4350_lcd_v4.c:2905: setCursor(0, 180);
      0044AD 75 6B B4         [24]12215 	mov	_setCursor_PARM_2,#0xb4
      0044B0 75 6C 00         [24]12216 	mov	(_setCursor_PARM_2 + 1),#0x00
      0044B3 90 00 00         [24]12217 	mov	dptr,#0x0000
      0044B6 12 05 5D         [24]12218 	lcall	_setCursor
                                  12219 ;	.\ecen4350_lcd_v4.c:2906: LCD_string_write(" <1> Next\n ");
      0044B9 90 5B 41         [24]12220 	mov	dptr,#___str_117
      0044BC 75 F0 80         [24]12221 	mov	b,#0x80
      0044BF 12 10 77         [24]12222 	lcall	_LCD_string_write
                                  12223 ;	.\ecen4350_lcd_v4.c:2907: setColorHighlight2();
      0044C2 12 16 5D         [24]12224 	lcall	_setColorHighlight2
                                  12225 ;	.\ecen4350_lcd_v4.c:2908: LCD_string_write("<0> Exit");
      0044C5 90 58 A7         [24]12226 	mov	dptr,#___str_77
      0044C8 75 F0 80         [24]12227 	mov	b,#0x80
      0044CB 12 10 77         [24]12228 	lcall	_LCD_string_write
                                  12229 ;	.\ecen4350_lcd_v4.c:2909: setColorWhite();
      0044CE 12 16 8B         [24]12230 	lcall	_setColorWhite
                                  12231 ;	.\ecen4350_lcd_v4.c:2910: LCD_string_write("\n <2> Previous");
      0044D1 90 5B 4D         [24]12232 	mov	dptr,#___str_118
      0044D4 75 F0 80         [24]12233 	mov	b,#0x80
      0044D7 12 10 77         [24]12234 	lcall	_LCD_string_write
      0044DA D0 05            [24]12235 	pop	ar5
                                  12236 ;	.\ecen4350_lcd_v4.c:2911: exit = 0;		// set exit flag
      0044DC 78 8B            [12]12237 	mov	r0,#_count_exit_65536_702
      0044DE 76 00            [12]12238 	mov	@r0,#0x00
                                  12239 ;	.\ecen4350_lcd_v4.c:2912: invalidInput = 0;
      0044E0 7F 00            [12]12240 	mov	r7,#0x00
      0044E2 02 44 18         [24]12241 	ljmp	00174$
      0044E5                      12242 00178$:
                                  12243 ;	.\ecen4350_lcd_v4.c:2916: if (exit == 0) {		// check exit flag
      0044E5 78 8B            [12]12244 	mov	r0,#_count_exit_65536_702
      0044E7 E6               [12]12245 	mov	a,@r0
      0044E8 60 0B            [24]12246 	jz	00194$
                                  12247 ;	.\ecen4350_lcd_v4.c:2917: break;			// break out the loop
      0044EA                      12248 00212$:
                                  12249 ;	.\ecen4350_lcd_v4.c:2759: for (unsigned int i = 0; i < blockSize; i++) {
      0044EA 05 69            [12]12250 	inc	_count_sloc1_1_0
      0044EC E4               [12]12251 	clr	a
      0044ED B5 69 02         [24]12252 	cjne	a,_count_sloc1_1_0,00594$
      0044F0 05 6A            [12]12253 	inc	(_count_sloc1_1_0 + 1)
      0044F2                      12254 00594$:
      0044F2 02 40 C4         [24]12255 	ljmp	00211$
      0044F5                      12256 00194$:
                                  12257 ;	.\ecen4350_lcd_v4.c:2923: if(noneFound) {
      0044F5 78 8A            [12]12258 	mov	r0,#_count_noneFound_65536_702
      0044F7 E6               [12]12259 	mov	a,@r0
      0044F8 70 03            [24]12260 	jnz	00595$
      0044FA 02 3F CF         [24]12261 	ljmp	00202$
      0044FD                      12262 00595$:
                                  12263 ;	.\ecen4350_lcd_v4.c:2924: setColorRed();
      0044FD C0 05            [24]12264 	push	ar5
      0044FF 12 16 80         [24]12265 	lcall	_setColorRed
                                  12266 ;	.\ecen4350_lcd_v4.c:2925: setCursor(0, 160);
      004502 75 6B A0         [24]12267 	mov	_setCursor_PARM_2,#0xa0
      004505 75 6C 00         [24]12268 	mov	(_setCursor_PARM_2 + 1),#0x00
      004508 90 00 00         [24]12269 	mov	dptr,#0x0000
      00450B 12 05 5D         [24]12270 	lcall	_setCursor
                                  12271 ;	.\ecen4350_lcd_v4.c:2926: LCD_string_write(" Value Not Found\n Within Block\n ");
      00450E 90 5B 5C         [24]12272 	mov	dptr,#___str_119
      004511 75 F0 80         [24]12273 	mov	b,#0x80
      004514 12 10 77         [24]12274 	lcall	_LCD_string_write
                                  12275 ;	.\ecen4350_lcd_v4.c:2927: setColorWhite();
      004517 12 16 8B         [24]12276 	lcall	_setColorWhite
                                  12277 ;	.\ecen4350_lcd_v4.c:2928: LCD_string_write("\n <0> Exit");
      00451A 90 5B 7D         [24]12278 	mov	dptr,#___str_120
      00451D 75 F0 80         [24]12279 	mov	b,#0x80
      004520 12 10 77         [24]12280 	lcall	_LCD_string_write
      004523 D0 05            [24]12281 	pop	ar5
                                  12282 ;	.\ecen4350_lcd_v4.c:2929: invalidInput = 1;
      004525 7F 01            [12]12283 	mov	r7,#0x01
                                  12284 ;	.\ecen4350_lcd_v4.c:2931: while (invalidInput) {
      004527                      12285 00197$:
      004527 EF               [12]12286 	mov	a,r7
      004528 70 03            [24]12287 	jnz	00596$
      00452A 02 3F CF         [24]12288 	ljmp	00202$
      00452D                      12289 00596$:
                                  12290 ;	.\ecen4350_lcd_v4.c:2932: selection = keyDetect();
      00452D C0 07            [24]12291 	push	ar7
      00452F C0 05            [24]12292 	push	ar5
      004531 12 11 95         [24]12293 	lcall	_keyDetect
      004534 AE 82            [24]12294 	mov	r6,dpl
      004536 D0 05            [24]12295 	pop	ar5
      004538 D0 07            [24]12296 	pop	ar7
      00453A 78 71            [12]12297 	mov	r0,#_selection
      00453C A6 06            [24]12298 	mov	@r0,ar6
                                  12299 ;	.\ecen4350_lcd_v4.c:2933: if (selection == '0'){
      00453E BE 30 E6         [24]12300 	cjne	r6,#0x30,00197$
                                  12301 ;	.\ecen4350_lcd_v4.c:2934: setCursor(0, 160);
      004541 75 6B A0         [24]12302 	mov	_setCursor_PARM_2,#0xa0
      004544 75 6C 00         [24]12303 	mov	(_setCursor_PARM_2 + 1),#0x00
      004547 90 00 00         [24]12304 	mov	dptr,#0x0000
      00454A C0 05            [24]12305 	push	ar5
      00454C 12 05 5D         [24]12306 	lcall	_setCursor
                                  12307 ;	.\ecen4350_lcd_v4.c:2935: LCD_string_write("\n\n\n ");
      00454F 90 5B 88         [24]12308 	mov	dptr,#___str_121
      004552 75 F0 80         [24]12309 	mov	b,#0x80
      004555 12 10 77         [24]12310 	lcall	_LCD_string_write
                                  12311 ;	.\ecen4350_lcd_v4.c:2936: setColorHighlight2();
      004558 12 16 5D         [24]12312 	lcall	_setColorHighlight2
                                  12313 ;	.\ecen4350_lcd_v4.c:2937: LCD_string_write("<0> Exit");
      00455B 90 58 A7         [24]12314 	mov	dptr,#___str_77
      00455E 75 F0 80         [24]12315 	mov	b,#0x80
      004561 12 10 77         [24]12316 	lcall	_LCD_string_write
      004564 D0 05            [24]12317 	pop	ar5
                                  12318 ;	.\ecen4350_lcd_v4.c:2938: invalidInput = 0;
      004566 7F 00            [12]12319 	mov	r7,#0x00
                                  12320 ;	.\ecen4350_lcd_v4.c:2939: exit = 0;
      004568 78 8B            [12]12321 	mov	r0,#_count_exit_65536_702
      00456A 76 00            [12]12322 	mov	@r0,#0x00
      00456C 80 B9            [24]12323 	sjmp	00197$
      00456E                      12324 00204$:
                                  12325 ;	.\ecen4350_lcd_v4.c:2944: delay(80);
      00456E 90 00 50         [24]12326 	mov	dptr,#0x0050
                                  12327 ;	.\ecen4350_lcd_v4.c:2945: return;
                                  12328 ;	.\ecen4350_lcd_v4.c:2946: }
      004571 02 01 87         [24]12329 	ljmp	_delay
                                  12330 ;------------------------------------------------------------
                                  12331 ;Allocation info for local variables in function 'check'
                                  12332 ;------------------------------------------------------------
                                  12333 ;temp                      Allocated to registers r7 
                                  12334 ;------------------------------------------------------------
                                  12335 ;	.\ecen4350_lcd_v4.c:2948: void check() {
                                  12336 ;	-----------------------------------------
                                  12337 ;	 function check
                                  12338 ;	-----------------------------------------
      004574                      12339 _check:
                                  12340 ;	.\ecen4350_lcd_v4.c:2950: clearLCD();
      004574 12 0D FA         [24]12341 	lcall	_clearLCD
                                  12342 ;	.\ecen4350_lcd_v4.c:2953: fillTop(GRAY);
      004577 90 D6 BA         [24]12343 	mov	dptr,#0xd6ba
      00457A 12 0C 2D         [24]12344 	lcall	_fillTop
                                  12345 ;	.\ecen4350_lcd_v4.c:2954: setTextSize(5);
      00457D 75 82 05         [24]12346 	mov	dpl,#0x05
      004580 12 05 77         [24]12347 	lcall	_setTextSize
                                  12348 ;	.\ecen4350_lcd_v4.c:2955: setColorMenu();
      004583 12 16 74         [24]12349 	lcall	_setColorMenu
                                  12350 ;	.\ecen4350_lcd_v4.c:2956: setCursor(15, 0);
      004586 E4               [12]12351 	clr	a
      004587 F5 6B            [12]12352 	mov	_setCursor_PARM_2,a
      004589 F5 6C            [12]12353 	mov	(_setCursor_PARM_2 + 1),a
      00458B 90 00 0F         [24]12354 	mov	dptr,#0x000f
      00458E 12 05 5D         [24]12355 	lcall	_setCursor
                                  12356 ;	.\ecen4350_lcd_v4.c:2957: LCD_string_write("[CHECK]\n");
      004591 90 5B C8         [24]12357 	mov	dptr,#___str_127
      004594 75 F0 80         [24]12358 	mov	b,#0x80
      004597 12 10 77         [24]12359 	lcall	_LCD_string_write
                                  12360 ;	.\ecen4350_lcd_v4.c:2958: setColorDefault();
      00459A 12 16 3B         [24]12361 	lcall	_setColorDefault
                                  12362 ;	.\ecen4350_lcd_v4.c:2959: setTextSize(2);
      00459D 75 82 02         [24]12363 	mov	dpl,#0x02
      0045A0 12 05 77         [24]12364 	lcall	_setTextSize
                                  12365 ;	.\ecen4350_lcd_v4.c:2960: setCursor(0, 60);
      0045A3 75 6B 3C         [24]12366 	mov	_setCursor_PARM_2,#0x3c
      0045A6 75 6C 00         [24]12367 	mov	(_setCursor_PARM_2 + 1),#0x00
      0045A9 90 00 00         [24]12368 	mov	dptr,#0x0000
      0045AC 12 05 5D         [24]12369 	lcall	_setCursor
                                  12370 ;	.\ecen4350_lcd_v4.c:2961: LCD_string_write(" Enter Value:\n");
      0045AF 90 5B D1         [24]12371 	mov	dptr,#___str_128
      0045B2 75 F0 80         [24]12372 	mov	b,#0x80
      0045B5 12 10 77         [24]12373 	lcall	_LCD_string_write
                                  12374 ;	.\ecen4350_lcd_v4.c:2962: setColorGray();
      0045B8 12 16 69         [24]12375 	lcall	_setColorGray
                                  12376 ;	.\ecen4350_lcd_v4.c:2963: LCD_string_write(" __");
      0045BB 90 57 8E         [24]12377 	mov	dptr,#___str_61
      0045BE 75 F0 80         [24]12378 	mov	b,#0x80
      0045C1 12 10 77         [24]12379 	lcall	_LCD_string_write
                                  12380 ;	.\ecen4350_lcd_v4.c:2965: setCursor(0,60);
      0045C4 75 6B 3C         [24]12381 	mov	_setCursor_PARM_2,#0x3c
      0045C7 75 6C 00         [24]12382 	mov	(_setCursor_PARM_2 + 1),#0x00
      0045CA 90 00 00         [24]12383 	mov	dptr,#0x0000
      0045CD 12 05 5D         [24]12384 	lcall	_setCursor
                                  12385 ;	.\ecen4350_lcd_v4.c:2966: LCD_string_write("\n ");
      0045D0 90 57 EC         [24]12386 	mov	dptr,#___str_66
      0045D3 75 F0 80         [24]12387 	mov	b,#0x80
      0045D6 12 10 77         [24]12388 	lcall	_LCD_string_write
                                  12389 ;	.\ecen4350_lcd_v4.c:2967: setColorHighlight1();
      0045D9 12 16 51         [24]12390 	lcall	_setColorHighlight1
                                  12391 ;	.\ecen4350_lcd_v4.c:2968: selection = 0;
      0045DC 78 71            [12]12392 	mov	r0,#_selection
      0045DE 76 00            [12]12393 	mov	@r0,#0x00
                                  12394 ;	.\ecen4350_lcd_v4.c:2969: temp = keyDetect();
      0045E0 12 11 95         [24]12395 	lcall	_keyDetect
                                  12396 ;	.\ecen4350_lcd_v4.c:2970: write(temp);
      0045E3 AF 82            [24]12397 	mov  r7,dpl
      0045E5 C0 07            [24]12398 	push	ar7
      0045E7 12 10 11         [24]12399 	lcall	_write
      0045EA D0 07            [24]12400 	pop	ar7
                                  12401 ;	.\ecen4350_lcd_v4.c:2971: temp = ASCIItoHex(temp);
      0045EC 8F 82            [24]12402 	mov	dpl,r7
      0045EE 12 14 03         [24]12403 	lcall	_ASCIItoHex
                                  12404 ;	.\ecen4350_lcd_v4.c:2972: selection |= temp * 16;
      0045F1 E5 82            [12]12405 	mov	a,dpl
      0045F3 C4               [12]12406 	swap	a
      0045F4 54 F0            [12]12407 	anl	a,#0xf0
      0045F6 FF               [12]12408 	mov	r7,a
      0045F7 78 71            [12]12409 	mov	r0,#_selection
      0045F9 E6               [12]12410 	mov	a,@r0
      0045FA 4F               [12]12411 	orl	a,r7
      0045FB 78 71            [12]12412 	mov	r0,#_selection
      0045FD F6               [12]12413 	mov	@r0,a
                                  12414 ;	.\ecen4350_lcd_v4.c:2973: temp = keyDetect();
      0045FE 12 11 95         [24]12415 	lcall	_keyDetect
                                  12416 ;	.\ecen4350_lcd_v4.c:2974: write(temp);
      004601 AF 82            [24]12417 	mov  r7,dpl
      004603 C0 07            [24]12418 	push	ar7
      004605 12 10 11         [24]12419 	lcall	_write
      004608 D0 07            [24]12420 	pop	ar7
                                  12421 ;	.\ecen4350_lcd_v4.c:2975: temp = ASCIItoHex(temp);
      00460A 8F 82            [24]12422 	mov	dpl,r7
      00460C 12 14 03         [24]12423 	lcall	_ASCIItoHex
      00460F AF 82            [24]12424 	mov	r7,dpl
                                  12425 ;	.\ecen4350_lcd_v4.c:2976: selection |= temp;
      004611 78 71            [12]12426 	mov	r0,#_selection
      004613 EF               [12]12427 	mov	a,r7
      004614 46               [12]12428 	orl	a,@r0
      004615 F6               [12]12429 	mov	@r0,a
                                  12430 ;	.\ecen4350_lcd_v4.c:2977: setColorDefault();
      004616 12 16 3B         [24]12431 	lcall	_setColorDefault
                                  12432 ;	.\ecen4350_lcd_v4.c:2978: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      004619 90 5B E0         [24]12433 	mov	dptr,#___str_129
      00461C 75 F0 80         [24]12434 	mov	b,#0x80
      00461F 12 10 77         [24]12435 	lcall	_LCD_string_write
                                  12436 ;	.\ecen4350_lcd_v4.c:2979: writeAllRAM(selection);
      004622 78 71            [12]12437 	mov	r0,#_selection
      004624 86 82            [24]12438 	mov	dpl,@r0
      004626 12 00 C9         [24]12439 	lcall	_writeAllRAM
                                  12440 ;	.\ecen4350_lcd_v4.c:2980: setColorWhite();
      004629 12 16 8B         [24]12441 	lcall	_setColorWhite
                                  12442 ;	.\ecen4350_lcd_v4.c:2981: LCD_string_write("\n Verifying write...");
      00462C 90 5C 0D         [24]12443 	mov	dptr,#___str_130
      00462F 75 F0 80         [24]12444 	mov	b,#0x80
      004632 12 10 77         [24]12445 	lcall	_LCD_string_write
                                  12446 ;	.\ecen4350_lcd_v4.c:2982: checkAllRAM(selection);
      004635 78 71            [12]12447 	mov	r0,#_selection
      004637 86 82            [24]12448 	mov	dpl,@r0
      004639 12 00 F8         [24]12449 	lcall	_checkAllRAM
                                  12450 ;	.\ecen4350_lcd_v4.c:2983: LCD_string_write("\n Complete.");
      00463C 90 5C 22         [24]12451 	mov	dptr,#___str_131
      00463F 75 F0 80         [24]12452 	mov	b,#0x80
      004642 12 10 77         [24]12453 	lcall	_LCD_string_write
                                  12454 ;	.\ecen4350_lcd_v4.c:2984: setTextColor(BLUE, colorBackground);
      004645 E4               [12]12455 	clr	a
      004646 F5 6B            [12]12456 	mov	_setTextColor_PARM_2,a
      004648 F5 6C            [12]12457 	mov	(_setTextColor_PARM_2 + 1),a
      00464A 90 00 1F         [24]12458 	mov	dptr,#0x001f
      00464D 12 05 6A         [24]12459 	lcall	_setTextColor
                                  12460 ;	.\ecen4350_lcd_v4.c:2985: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      004650 90 5C 2E         [24]12461 	mov	dptr,#___str_132
      004653 75 F0 80         [24]12462 	mov	b,#0x80
      004656 12 10 77         [24]12463 	lcall	_LCD_string_write
                                  12464 ;	.\ecen4350_lcd_v4.c:2986: selection = ~selection;
      004659 78 71            [12]12465 	mov	r0,#_selection
      00465B E6               [12]12466 	mov	a,@r0
      00465C F4               [12]12467 	cpl	a
      00465D F6               [12]12468 	mov	@r0,a
                                  12469 ;	.\ecen4350_lcd_v4.c:2987: setColorSelect();
      00465E 12 16 46         [24]12470 	lcall	_setColorSelect
                                  12471 ;	.\ecen4350_lcd_v4.c:2988: LCD_string_write("\n Writing new byte...");
      004661 90 5C 52         [24]12472 	mov	dptr,#___str_133
      004664 75 F0 80         [24]12473 	mov	b,#0x80
      004667 12 10 77         [24]12474 	lcall	_LCD_string_write
                                  12475 ;	.\ecen4350_lcd_v4.c:2989: writeAllRAM(selection);
      00466A 78 71            [12]12476 	mov	r0,#_selection
      00466C 86 82            [24]12477 	mov	dpl,@r0
      00466E 12 00 C9         [24]12478 	lcall	_writeAllRAM
                                  12479 ;	.\ecen4350_lcd_v4.c:2990: setColorYellow();
      004671 12 16 A1         [24]12480 	lcall	_setColorYellow
                                  12481 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write("\n Verifying write...");
      004674 90 5C 0D         [24]12482 	mov	dptr,#___str_130
      004677 75 F0 80         [24]12483 	mov	b,#0x80
      00467A 12 10 77         [24]12484 	lcall	_LCD_string_write
                                  12485 ;	.\ecen4350_lcd_v4.c:2992: checkAllRAM(selection);
      00467D 78 71            [12]12486 	mov	r0,#_selection
      00467F 86 82            [24]12487 	mov	dpl,@r0
      004681 12 00 F8         [24]12488 	lcall	_checkAllRAM
                                  12489 ;	.\ecen4350_lcd_v4.c:2993: setColorGreen();
      004684 12 16 96         [24]12490 	lcall	_setColorGreen
                                  12491 ;	.\ecen4350_lcd_v4.c:2994: LCD_string_write("\n\n Check Complete.");
      004687 90 5C 68         [24]12492 	mov	dptr,#___str_134
      00468A 75 F0 80         [24]12493 	mov	b,#0x80
      00468D 12 10 77         [24]12494 	lcall	_LCD_string_write
                                  12495 ;	.\ecen4350_lcd_v4.c:2995: delay(120);
      004690 90 00 78         [24]12496 	mov	dptr,#0x0078
                                  12497 ;	.\ecen4350_lcd_v4.c:2996: return;
                                  12498 ;	.\ecen4350_lcd_v4.c:2997: }
      004693 02 01 87         [24]12499 	ljmp	_delay
                                  12500 ;------------------------------------------------------------
                                  12501 ;Allocation info for local variables in function 'uart'
                                  12502 ;------------------------------------------------------------
                                  12503 ;	.\ecen4350_lcd_v4.c:2999: void uart() {
                                  12504 ;	-----------------------------------------
                                  12505 ;	 function uart
                                  12506 ;	-----------------------------------------
      004696                      12507 _uart:
                                  12508 ;	.\ecen4350_lcd_v4.c:3000: clearLCD();
      004696 12 0D FA         [24]12509 	lcall	_clearLCD
                                  12510 ;	.\ecen4350_lcd_v4.c:3001: fillTop(GRAY);
      004699 90 D6 BA         [24]12511 	mov	dptr,#0xd6ba
      00469C 12 0C 2D         [24]12512 	lcall	_fillTop
                                  12513 ;	.\ecen4350_lcd_v4.c:3002: setTextSize(5);
      00469F 75 82 05         [24]12514 	mov	dpl,#0x05
      0046A2 12 05 77         [24]12515 	lcall	_setTextSize
                                  12516 ;	.\ecen4350_lcd_v4.c:3003: setColorMenu();
      0046A5 12 16 74         [24]12517 	lcall	_setColorMenu
                                  12518 ;	.\ecen4350_lcd_v4.c:3004: setCursor(30, 0);
      0046A8 E4               [12]12519 	clr	a
      0046A9 F5 6B            [12]12520 	mov	_setCursor_PARM_2,a
      0046AB F5 6C            [12]12521 	mov	(_setCursor_PARM_2 + 1),a
      0046AD 90 00 1E         [24]12522 	mov	dptr,#0x001e
      0046B0 12 05 5D         [24]12523 	lcall	_setCursor
                                  12524 ;	.\ecen4350_lcd_v4.c:3005: LCD_string_write("[UART]\n");
      0046B3 90 5C 7B         [24]12525 	mov	dptr,#___str_135
      0046B6 75 F0 80         [24]12526 	mov	b,#0x80
      0046B9 12 10 77         [24]12527 	lcall	_LCD_string_write
                                  12528 ;	.\ecen4350_lcd_v4.c:3009: setTextSize(2);
      0046BC 75 82 02         [24]12529 	mov	dpl,#0x02
      0046BF 12 05 77         [24]12530 	lcall	_setTextSize
                                  12531 ;	.\ecen4350_lcd_v4.c:3010: setColorDefault();
      0046C2 12 16 3B         [24]12532 	lcall	_setColorDefault
                                  12533 ;	.\ecen4350_lcd_v4.c:3011: setCursor(0, 60);
      0046C5 75 6B 3C         [24]12534 	mov	_setCursor_PARM_2,#0x3c
      0046C8 75 6C 00         [24]12535 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046CB 90 00 00         [24]12536 	mov	dptr,#0x0000
      0046CE 12 05 5D         [24]12537 	lcall	_setCursor
                                  12538 ;	.\ecen4350_lcd_v4.c:3012: LCD_string_write(" <1> Data Rate Set\n");
      0046D1 90 5C 83         [24]12539 	mov	dptr,#___str_136
      0046D4 75 F0 80         [24]12540 	mov	b,#0x80
      0046D7 12 10 77         [24]12541 	lcall	_LCD_string_write
                                  12542 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 100);
      0046DA 75 6B 64         [24]12543 	mov	_setCursor_PARM_2,#0x64
      0046DD 75 6C 00         [24]12544 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046E0 90 00 00         [24]12545 	mov	dptr,#0x0000
      0046E3 12 05 5D         [24]12546 	lcall	_setCursor
                                  12547 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <2> Number of Bits\n    (8 or 9 bits)\n");
      0046E6 90 5C 97         [24]12548 	mov	dptr,#___str_137
      0046E9 75 F0 80         [24]12549 	mov	b,#0x80
      0046EC 12 10 77         [24]12550 	lcall	_LCD_string_write
                                  12551 ;	.\ecen4350_lcd_v4.c:3015: setCursor(0, 140);
      0046EF 75 6B 8C         [24]12552 	mov	_setCursor_PARM_2,#0x8c
      0046F2 75 6C 00         [24]12553 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046F5 90 00 00         [24]12554 	mov	dptr,#0x0000
      0046F8 12 05 5D         [24]12555 	lcall	_setCursor
                                  12556 ;	.\ecen4350_lcd_v4.c:3016: LCD_string_write(" <3> Parity\n    (Even/Odd/None)\n");
      0046FB 90 5C BE         [24]12557 	mov	dptr,#___str_138
      0046FE 75 F0 80         [24]12558 	mov	b,#0x80
      004701 12 10 77         [24]12559 	lcall	_LCD_string_write
                                  12560 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 160);
      004704 75 6B A0         [24]12561 	mov	_setCursor_PARM_2,#0xa0
      004707 75 6C 00         [24]12562 	mov	(_setCursor_PARM_2 + 1),#0x00
      00470A 90 00 00         [24]12563 	mov	dptr,#0x0000
      00470D 12 05 5D         [24]12564 	lcall	_setCursor
                                  12565 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <4> Enable UART\n");
      004710 90 5C DF         [24]12566 	mov	dptr,#___str_139
      004713 75 F0 80         [24]12567 	mov	b,#0x80
      004716 12 10 77         [24]12568 	lcall	_LCD_string_write
                                  12569 ;	.\ecen4350_lcd_v4.c:3019: keyInput:
      004719                      12570 00101$:
                                  12571 ;	.\ecen4350_lcd_v4.c:3020: selection = keyDetect();
      004719 12 11 95         [24]12572 	lcall	_keyDetect
      00471C AF 82            [24]12573 	mov	r7,dpl
      00471E 78 71            [12]12574 	mov	r0,#_selection
      004720 A6 07            [24]12575 	mov	@r0,ar7
                                  12576 ;	.\ecen4350_lcd_v4.c:3021: if (selection == '4') {
      004722 BF 34 02         [24]12577 	cjne	r7,#0x34,00234$
      004725 80 4D            [24]12578 	sjmp	00112$
      004727                      12579 00234$:
                                  12580 ;	.\ecen4350_lcd_v4.c:3024: if (selection == '1') {
      004727 BF 31 30         [24]12581 	cjne	r7,#0x31,00103$
                                  12582 ;	.\ecen4350_lcd_v4.c:3025: setCursor (0, 60);
      00472A 75 6B 3C         [24]12583 	mov	_setCursor_PARM_2,#0x3c
      00472D 75 6C 00         [24]12584 	mov	(_setCursor_PARM_2 + 1),#0x00
      004730 90 00 00         [24]12585 	mov	dptr,#0x0000
      004733 12 05 5D         [24]12586 	lcall	_setCursor
                                  12587 ;	.\ecen4350_lcd_v4.c:3026: LCD_string_write("  {");
      004736 90 5C F1         [24]12588 	mov	dptr,#___str_140
      004739 75 F0 80         [24]12589 	mov	b,#0x80
      00473C 12 10 77         [24]12590 	lcall	_LCD_string_write
                                  12591 ;	.\ecen4350_lcd_v4.c:3027: setColorHighlight1();
      00473F 12 16 51         [24]12592 	lcall	_setColorHighlight1
                                  12593 ;	.\ecen4350_lcd_v4.c:3028: LCD_string_write("<1> ");
      004742 90 5C F5         [24]12594 	mov	dptr,#___str_141
      004745 75 F0 80         [24]12595 	mov	b,#0x80
      004748 12 10 77         [24]12596 	lcall	_LCD_string_write
                                  12597 ;	.\ecen4350_lcd_v4.c:3029: setColorHighlight2();
      00474B 12 16 5D         [24]12598 	lcall	_setColorHighlight2
                                  12599 ;	.\ecen4350_lcd_v4.c:3030: LCD_string_write("Date Rate\n");
      00474E 90 5C FA         [24]12600 	mov	dptr,#___str_142
      004751 75 F0 80         [24]12601 	mov	b,#0x80
      004754 12 10 77         [24]12602 	lcall	_LCD_string_write
                                  12603 ;	.\ecen4350_lcd_v4.c:3031: goto baudInput;	
      004757 02 49 78         [24]12604 	ljmp	00133$
      00475A                      12605 00103$:
                                  12606 ;	.\ecen4350_lcd_v4.c:3033: if (selection == '2') {
      00475A BF 32 01         [24]12607 	cjne	r7,#0x32,00237$
      00475D 22               [24]12608 	ret
      00475E                      12609 00237$:
                                  12610 ;	.\ecen4350_lcd_v4.c:3035: } if (selection == '3') {
      00475E BF 33 08         [24]12611 	cjne	r7,#0x33,00107$
                                  12612 ;	.\ecen4350_lcd_v4.c:3036: delay(5);
      004761 90 00 05         [24]12613 	mov	dptr,#0x0005
      004764 12 01 87         [24]12614 	lcall	_delay
      004767 80 0B            [24]12615 	sjmp	00112$
      004769                      12616 00107$:
                                  12617 ;	.\ecen4350_lcd_v4.c:3038: LCD_string_write("\n\n Incorrect input\n  Try again.\n");
      004769 90 5D 05         [24]12618 	mov	dptr,#___str_143
      00476C 75 F0 80         [24]12619 	mov	b,#0x80
      00476F 12 10 77         [24]12620 	lcall	_LCD_string_write
                                  12621 ;	.\ecen4350_lcd_v4.c:3039: goto keyInput;
                                  12622 ;	.\ecen4350_lcd_v4.c:3043: verifyUART:	
      004772 80 A5            [24]12623 	sjmp	00101$
      004774                      12624 00112$:
                                  12625 ;	.\ecen4350_lcd_v4.c:3044: if (baudSet == 0) {
      004774 78 73            [12]12626 	mov	r0,#_baudSet
      004776 E6               [12]12627 	mov	a,@r0
      004777 70 15            [24]12628 	jnz	00114$
                                  12629 ;	.\ecen4350_lcd_v4.c:3045: LCD_string_write(" ERROR: No Baud Set\n");
      004779 90 5D 26         [24]12630 	mov	dptr,#___str_144
      00477C 75 F0 80         [24]12631 	mov	b,#0x80
      00477F 12 10 77         [24]12632 	lcall	_LCD_string_write
                                  12633 ;	.\ecen4350_lcd_v4.c:3046: LCD_string_write(" Please set a baud rate");
      004782 90 5D 3B         [24]12634 	mov	dptr,#___str_145
      004785 75 F0 80         [24]12635 	mov	b,#0x80
      004788 12 10 77         [24]12636 	lcall	_LCD_string_write
                                  12637 ;	.\ecen4350_lcd_v4.c:3047: goto keyInput;
      00478B 02 47 19         [24]12638 	ljmp	00101$
      00478E                      12639 00114$:
                                  12640 ;	.\ecen4350_lcd_v4.c:3048: } if (paritySet == 0) {
      00478E 78 74            [12]12641 	mov	r0,#_paritySet
      004790 E6               [12]12642 	mov	a,@r0
      004791 70 15            [24]12643 	jnz	00116$
                                  12644 ;	.\ecen4350_lcd_v4.c:3049: LCD_string_write(" ERROR: Not Parity Set\n");
      004793 90 5D 53         [24]12645 	mov	dptr,#___str_146
      004796 75 F0 80         [24]12646 	mov	b,#0x80
      004799 12 10 77         [24]12647 	lcall	_LCD_string_write
                                  12648 ;	.\ecen4350_lcd_v4.c:3050: LCD_string_write(" Please set parity");
      00479C 90 5D 6B         [24]12649 	mov	dptr,#___str_147
      00479F 75 F0 80         [24]12650 	mov	b,#0x80
      0047A2 12 10 77         [24]12651 	lcall	_LCD_string_write
                                  12652 ;	.\ecen4350_lcd_v4.c:3051: goto keyInput;
      0047A5 02 47 19         [24]12653 	ljmp	00101$
      0047A8                      12654 00116$:
                                  12655 ;	.\ecen4350_lcd_v4.c:3052: } if (baudSet == 0) {
      0047A8 78 73            [12]12656 	mov	r0,#_baudSet
      0047AA E6               [12]12657 	mov	a,@r0
      0047AB 70 15            [24]12658 	jnz	00122$
                                  12659 ;	.\ecen4350_lcd_v4.c:3053: LCD_string_write(" ERROR: No Baud Set\n");
      0047AD 90 5D 26         [24]12660 	mov	dptr,#___str_144
      0047B0 75 F0 80         [24]12661 	mov	b,#0x80
      0047B3 12 10 77         [24]12662 	lcall	_LCD_string_write
                                  12663 ;	.\ecen4350_lcd_v4.c:3054: LCD_string_write(" Please set a baud rate");
      0047B6 90 5D 3B         [24]12664 	mov	dptr,#___str_145
      0047B9 75 F0 80         [24]12665 	mov	b,#0x80
      0047BC 12 10 77         [24]12666 	lcall	_LCD_string_write
                                  12667 ;	.\ecen4350_lcd_v4.c:3055: goto keyInput;
      0047BF 02 47 19         [24]12668 	ljmp	00101$
      0047C2                      12669 00122$:
                                  12670 ;	.\ecen4350_lcd_v4.c:3057: if ((baudSet == 1) && (paritySet == 1) && (baudSet == 1)) {
      0047C2 78 73            [12]12671 	mov	r0,#_baudSet
      0047C4 E4               [12]12672 	clr	a
      0047C5 B6 01 01         [24]12673 	cjne	@r0,#0x01,00243$
      0047C8 04               [12]12674 	inc	a
      0047C9                      12675 00243$:
      0047C9 FF               [12]12676 	mov	r7,a
      0047CA 60 15            [24]12677 	jz	00124$
      0047CC 78 74            [12]12678 	mov	r0,#_paritySet
      0047CE B6 01 10         [24]12679 	cjne	@r0,#0x01,00124$
      0047D1 EF               [12]12680 	mov	a,r7
      0047D2 60 0D            [24]12681 	jz	00124$
                                  12682 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write(" Setttings Verified\n Enabling UART...");
      0047D4 90 5D 7E         [24]12683 	mov	dptr,#___str_148
      0047D7 75 F0 80         [24]12684 	mov	b,#0x80
      0047DA 12 10 77         [24]12685 	lcall	_LCD_string_write
                                  12686 ;	.\ecen4350_lcd_v4.c:3060: UART_en = 1;
      0047DD 78 72            [12]12687 	mov	r0,#_UART_en
      0047DF 76 01            [12]12688 	mov	@r0,#0x01
                                  12689 ;	.\ecen4350_lcd_v4.c:3065: keyValidation:
      0047E1                      12690 00124$:
                                  12691 ;	.\ecen4350_lcd_v4.c:3066: selection = keyDetect();
      0047E1 12 11 95         [24]12692 	lcall	_keyDetect
      0047E4 AF 82            [24]12693 	mov	r7,dpl
      0047E6 78 71            [12]12694 	mov	r0,#_selection
      0047E8 A6 07            [24]12695 	mov	@r0,ar7
                                  12696 ;	.\ecen4350_lcd_v4.c:3067: if (selection == '1'){
      0047EA BF 31 5C         [24]12697 	cjne	r7,#0x31,00126$
                                  12698 ;	.\ecen4350_lcd_v4.c:3068: setCursor(0,60);
      0047ED 75 6B 3C         [24]12699 	mov	_setCursor_PARM_2,#0x3c
      0047F0 75 6C 00         [24]12700 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047F3 90 00 00         [24]12701 	mov	dptr,#0x0000
      0047F6 12 05 5D         [24]12702 	lcall	_setCursor
                                  12703 ;	.\ecen4350_lcd_v4.c:3069: LCD_string_write(" ");
      0047F9 90 55 E1         [24]12704 	mov	dptr,#___str_29
      0047FC 75 F0 80         [24]12705 	mov	b,#0x80
      0047FF 12 10 77         [24]12706 	lcall	_LCD_string_write
                                  12707 ;	.\ecen4350_lcd_v4.c:3070: setColorHighlight1();
      004802 12 16 51         [24]12708 	lcall	_setColorHighlight1
                                  12709 ;	.\ecen4350_lcd_v4.c:3071: LCD_string_write("<1>");
      004805 90 5D A4         [24]12710 	mov	dptr,#___str_149
      004808 75 F0 80         [24]12711 	mov	b,#0x80
      00480B 12 10 77         [24]12712 	lcall	_LCD_string_write
                                  12713 ;	.\ecen4350_lcd_v4.c:3072: setColorHighlight2();
      00480E 12 16 5D         [24]12714 	lcall	_setColorHighlight2
                                  12715 ;	.\ecen4350_lcd_v4.c:3073: LCD_string_write(" Data Rate\n");
      004811 90 5D A8         [24]12716 	mov	dptr,#___str_150
      004814 75 F0 80         [24]12717 	mov	b,#0x80
      004817 12 10 77         [24]12718 	lcall	_LCD_string_write
                                  12719 ;	.\ecen4350_lcd_v4.c:3074: delay(40);
      00481A 90 00 28         [24]12720 	mov	dptr,#0x0028
      00481D 12 01 87         [24]12721 	lcall	_delay
                                  12722 ;	.\ecen4350_lcd_v4.c:3076: clearLCD();
      004820 12 0D FA         [24]12723 	lcall	_clearLCD
                                  12724 ;	.\ecen4350_lcd_v4.c:3077: fillTop(GRAY);
      004823 90 D6 BA         [24]12725 	mov	dptr,#0xd6ba
      004826 12 0C 2D         [24]12726 	lcall	_fillTop
                                  12727 ;	.\ecen4350_lcd_v4.c:3078: setTextSize(5);
      004829 75 82 05         [24]12728 	mov	dpl,#0x05
      00482C 12 05 77         [24]12729 	lcall	_setTextSize
                                  12730 ;	.\ecen4350_lcd_v4.c:3079: setColorMenu();
      00482F 12 16 74         [24]12731 	lcall	_setColorMenu
                                  12732 ;	.\ecen4350_lcd_v4.c:3080: setCursor(30, 0);
      004832 E4               [12]12733 	clr	a
      004833 F5 6B            [12]12734 	mov	_setCursor_PARM_2,a
      004835 F5 6C            [12]12735 	mov	(_setCursor_PARM_2 + 1),a
      004837 90 00 1E         [24]12736 	mov	dptr,#0x001e
      00483A 12 05 5D         [24]12737 	lcall	_setCursor
                                  12738 ;	.\ecen4350_lcd_v4.c:3081: LCD_string_write("[UART]\n");
      00483D 90 5C 7B         [24]12739 	mov	dptr,#___str_135
      004840 75 F0 80         [24]12740 	mov	b,#0x80
      004843 12 10 77         [24]12741 	lcall	_LCD_string_write
                                  12742 ;	.\ecen4350_lcd_v4.c:3082: goto setRate;
      004846 02 49 06         [24]12743 	ljmp	00132$
      004849                      12744 00126$:
                                  12745 ;	.\ecen4350_lcd_v4.c:3084: if (selection == '2') {
      004849 BF 32 59         [24]12746 	cjne	r7,#0x32,00128$
                                  12747 ;	.\ecen4350_lcd_v4.c:3085: setCursor(0,100);
      00484C 75 6B 64         [24]12748 	mov	_setCursor_PARM_2,#0x64
      00484F 75 6C 00         [24]12749 	mov	(_setCursor_PARM_2 + 1),#0x00
      004852 90 00 00         [24]12750 	mov	dptr,#0x0000
      004855 12 05 5D         [24]12751 	lcall	_setCursor
                                  12752 ;	.\ecen4350_lcd_v4.c:3086: LCD_string_write(" ");
      004858 90 55 E1         [24]12753 	mov	dptr,#___str_29
      00485B 75 F0 80         [24]12754 	mov	b,#0x80
      00485E 12 10 77         [24]12755 	lcall	_LCD_string_write
                                  12756 ;	.\ecen4350_lcd_v4.c:3087: setColorHighlight1();
      004861 12 16 51         [24]12757 	lcall	_setColorHighlight1
                                  12758 ;	.\ecen4350_lcd_v4.c:3088: LCD_string_write("<2>");
      004864 90 5D B4         [24]12759 	mov	dptr,#___str_151
      004867 75 F0 80         [24]12760 	mov	b,#0x80
      00486A 12 10 77         [24]12761 	lcall	_LCD_string_write
                                  12762 ;	.\ecen4350_lcd_v4.c:3089: setColorHighlight2();
      00486D 12 16 5D         [24]12763 	lcall	_setColorHighlight2
                                  12764 ;	.\ecen4350_lcd_v4.c:3090: LCD_string_write(" Number of Bits\n    (8 or 9 bits)\n");
      004870 90 5D B8         [24]12765 	mov	dptr,#___str_152
      004873 75 F0 80         [24]12766 	mov	b,#0x80
      004876 12 10 77         [24]12767 	lcall	_LCD_string_write
                                  12768 ;	.\ecen4350_lcd_v4.c:3091: delay(40);
      004879 90 00 28         [24]12769 	mov	dptr,#0x0028
      00487C 12 01 87         [24]12770 	lcall	_delay
                                  12771 ;	.\ecen4350_lcd_v4.c:3093: clearLCD();
      00487F 12 0D FA         [24]12772 	lcall	_clearLCD
                                  12773 ;	.\ecen4350_lcd_v4.c:3094: fillTop(GRAY);
      004882 90 D6 BA         [24]12774 	mov	dptr,#0xd6ba
      004885 12 0C 2D         [24]12775 	lcall	_fillTop
                                  12776 ;	.\ecen4350_lcd_v4.c:3095: setTextSize(5);
      004888 75 82 05         [24]12777 	mov	dpl,#0x05
      00488B 12 05 77         [24]12778 	lcall	_setTextSize
                                  12779 ;	.\ecen4350_lcd_v4.c:3096: setColorMenu();
      00488E 12 16 74         [24]12780 	lcall	_setColorMenu
                                  12781 ;	.\ecen4350_lcd_v4.c:3097: setCursor(30, 0);
      004891 E4               [12]12782 	clr	a
      004892 F5 6B            [12]12783 	mov	_setCursor_PARM_2,a
      004894 F5 6C            [12]12784 	mov	(_setCursor_PARM_2 + 1),a
      004896 90 00 1E         [24]12785 	mov	dptr,#0x001e
      004899 12 05 5D         [24]12786 	lcall	_setCursor
                                  12787 ;	.\ecen4350_lcd_v4.c:3098: LCD_string_write("[UART]\n");
      00489C 90 5C 7B         [24]12788 	mov	dptr,#___str_135
      00489F 75 F0 80         [24]12789 	mov	b,#0x80
                                  12790 ;	.\ecen4350_lcd_v4.c:3099: goto setBit;
      0048A2 02 10 77         [24]12791 	ljmp	_LCD_string_write
      0048A5                      12792 00128$:
                                  12793 ;	.\ecen4350_lcd_v4.c:3101: if (selection == '3') {
      0048A5 BF 33 02         [24]12794 	cjne	r7,#0x33,00253$
      0048A8 80 03            [24]12795 	sjmp	00254$
      0048AA                      12796 00253$:
      0048AA 02 47 E1         [24]12797 	ljmp	00124$
      0048AD                      12798 00254$:
                                  12799 ;	.\ecen4350_lcd_v4.c:3102: setCursor(0,140);
      0048AD 75 6B 8C         [24]12800 	mov	_setCursor_PARM_2,#0x8c
      0048B0 75 6C 00         [24]12801 	mov	(_setCursor_PARM_2 + 1),#0x00
      0048B3 90 00 00         [24]12802 	mov	dptr,#0x0000
      0048B6 12 05 5D         [24]12803 	lcall	_setCursor
                                  12804 ;	.\ecen4350_lcd_v4.c:3103: LCD_string_write(" ");
      0048B9 90 55 E1         [24]12805 	mov	dptr,#___str_29
      0048BC 75 F0 80         [24]12806 	mov	b,#0x80
      0048BF 12 10 77         [24]12807 	lcall	_LCD_string_write
                                  12808 ;	.\ecen4350_lcd_v4.c:3104: setColorHighlight1();
      0048C2 12 16 51         [24]12809 	lcall	_setColorHighlight1
                                  12810 ;	.\ecen4350_lcd_v4.c:3105: LCD_string_write("<3>");
      0048C5 90 5D DB         [24]12811 	mov	dptr,#___str_153
      0048C8 75 F0 80         [24]12812 	mov	b,#0x80
      0048CB 12 10 77         [24]12813 	lcall	_LCD_string_write
                                  12814 ;	.\ecen4350_lcd_v4.c:3106: setColorHighlight2();
      0048CE 12 16 5D         [24]12815 	lcall	_setColorHighlight2
                                  12816 ;	.\ecen4350_lcd_v4.c:3107: LCD_string_write(" Parity\n    (Even/Odd/None)\n");
      0048D1 90 5D DF         [24]12817 	mov	dptr,#___str_154
      0048D4 75 F0 80         [24]12818 	mov	b,#0x80
      0048D7 12 10 77         [24]12819 	lcall	_LCD_string_write
                                  12820 ;	.\ecen4350_lcd_v4.c:3108: delay(30);
      0048DA 90 00 1E         [24]12821 	mov	dptr,#0x001e
      0048DD 12 01 87         [24]12822 	lcall	_delay
                                  12823 ;	.\ecen4350_lcd_v4.c:3110: clearLCD();
      0048E0 12 0D FA         [24]12824 	lcall	_clearLCD
                                  12825 ;	.\ecen4350_lcd_v4.c:3111: fillTop(GRAY);
      0048E3 90 D6 BA         [24]12826 	mov	dptr,#0xd6ba
      0048E6 12 0C 2D         [24]12827 	lcall	_fillTop
                                  12828 ;	.\ecen4350_lcd_v4.c:3112: setTextSize(5);
      0048E9 75 82 05         [24]12829 	mov	dpl,#0x05
      0048EC 12 05 77         [24]12830 	lcall	_setTextSize
                                  12831 ;	.\ecen4350_lcd_v4.c:3113: setColorMenu();
      0048EF 12 16 74         [24]12832 	lcall	_setColorMenu
                                  12833 ;	.\ecen4350_lcd_v4.c:3114: setCursor(30, 0);
      0048F2 E4               [12]12834 	clr	a
      0048F3 F5 6B            [12]12835 	mov	_setCursor_PARM_2,a
      0048F5 F5 6C            [12]12836 	mov	(_setCursor_PARM_2 + 1),a
      0048F7 90 00 1E         [24]12837 	mov	dptr,#0x001e
      0048FA 12 05 5D         [24]12838 	lcall	_setCursor
                                  12839 ;	.\ecen4350_lcd_v4.c:3115: LCD_string_write("[UART]\n");
      0048FD 90 5C 7B         [24]12840 	mov	dptr,#___str_135
      004900 75 F0 80         [24]12841 	mov	b,#0x80
                                  12842 ;	.\ecen4350_lcd_v4.c:3116: goto setParity;
      004903 02 10 77         [24]12843 	ljmp	_LCD_string_write
                                  12844 ;	.\ecen4350_lcd_v4.c:3121: setRate: 
      004906                      12845 00132$:
                                  12846 ;	.\ecen4350_lcd_v4.c:3122: setTextSize(2);
      004906 75 82 02         [24]12847 	mov	dpl,#0x02
      004909 12 05 77         [24]12848 	lcall	_setTextSize
                                  12849 ;	.\ecen4350_lcd_v4.c:3123: setColorDefault();
      00490C 12 16 3B         [24]12850 	lcall	_setColorDefault
                                  12851 ;	.\ecen4350_lcd_v4.c:3124: setCursor(0, 60);
      00490F 75 6B 3C         [24]12852 	mov	_setCursor_PARM_2,#0x3c
      004912 75 6C 00         [24]12853 	mov	(_setCursor_PARM_2 + 1),#0x00
      004915 90 00 00         [24]12854 	mov	dptr,#0x0000
      004918 12 05 5D         [24]12855 	lcall	_setCursor
                                  12856 ;	.\ecen4350_lcd_v4.c:3125: LCD_string_write(" <1> 1200 Baud\n");
      00491B 90 5D FC         [24]12857 	mov	dptr,#___str_155
      00491E 75 F0 80         [24]12858 	mov	b,#0x80
      004921 12 10 77         [24]12859 	lcall	_LCD_string_write
                                  12860 ;	.\ecen4350_lcd_v4.c:3126: setCursor(0, 100);
      004924 75 6B 64         [24]12861 	mov	_setCursor_PARM_2,#0x64
      004927 75 6C 00         [24]12862 	mov	(_setCursor_PARM_2 + 1),#0x00
      00492A 90 00 00         [24]12863 	mov	dptr,#0x0000
      00492D 12 05 5D         [24]12864 	lcall	_setCursor
                                  12865 ;	.\ecen4350_lcd_v4.c:3127: LCD_string_write(" <2> 2400 Baud\n");
      004930 90 5E 0C         [24]12866 	mov	dptr,#___str_156
      004933 75 F0 80         [24]12867 	mov	b,#0x80
      004936 12 10 77         [24]12868 	lcall	_LCD_string_write
                                  12869 ;	.\ecen4350_lcd_v4.c:3128: setCursor(0, 140);
      004939 75 6B 8C         [24]12870 	mov	_setCursor_PARM_2,#0x8c
      00493C 75 6C 00         [24]12871 	mov	(_setCursor_PARM_2 + 1),#0x00
      00493F 90 00 00         [24]12872 	mov	dptr,#0x0000
      004942 12 05 5D         [24]12873 	lcall	_setCursor
                                  12874 ;	.\ecen4350_lcd_v4.c:3129: LCD_string_write(" <3> 4800 Baud\n");
      004945 90 5E 1C         [24]12875 	mov	dptr,#___str_157
      004948 75 F0 80         [24]12876 	mov	b,#0x80
      00494B 12 10 77         [24]12877 	lcall	_LCD_string_write
                                  12878 ;	.\ecen4350_lcd_v4.c:3130: setCursor(0, 180);
      00494E 75 6B B4         [24]12879 	mov	_setCursor_PARM_2,#0xb4
      004951 75 6C 00         [24]12880 	mov	(_setCursor_PARM_2 + 1),#0x00
      004954 90 00 00         [24]12881 	mov	dptr,#0x0000
      004957 12 05 5D         [24]12882 	lcall	_setCursor
                                  12883 ;	.\ecen4350_lcd_v4.c:3131: LCD_string_write(" <4> 9600 Baud\n");
      00495A 90 5E 2C         [24]12884 	mov	dptr,#___str_158
      00495D 75 F0 80         [24]12885 	mov	b,#0x80
      004960 12 10 77         [24]12886 	lcall	_LCD_string_write
                                  12887 ;	.\ecen4350_lcd_v4.c:3132: setCursor(0, 220);
      004963 75 6B DC         [24]12888 	mov	_setCursor_PARM_2,#0xdc
      004966 75 6C 00         [24]12889 	mov	(_setCursor_PARM_2 + 1),#0x00
      004969 90 00 00         [24]12890 	mov	dptr,#0x0000
      00496C 12 05 5D         [24]12891 	lcall	_setCursor
                                  12892 ;	.\ecen4350_lcd_v4.c:3133: LCD_string_write(" <5> 19200 Baud\n");
      00496F 90 5E 3C         [24]12893 	mov	dptr,#___str_159
      004972 75 F0 80         [24]12894 	mov	b,#0x80
      004975 12 10 77         [24]12895 	lcall	_LCD_string_write
                                  12896 ;	.\ecen4350_lcd_v4.c:3134: baudInput:
      004978                      12897 00133$:
                                  12898 ;	.\ecen4350_lcd_v4.c:3135: selection = keyDetect();
      004978 12 11 95         [24]12899 	lcall	_keyDetect
      00497B AF 82            [24]12900 	mov	r7,dpl
      00497D 78 71            [12]12901 	mov	r0,#_selection
      00497F A6 07            [24]12902 	mov	@r0,ar7
                                  12903 ;	.\ecen4350_lcd_v4.c:3136: if (selection == '1' ) {
      004981 BF 31 0A         [24]12904 	cjne	r7,#0x31,00135$
                                  12905 ;	.\ecen4350_lcd_v4.c:3137: TH1 = 0xE6;
      004984 75 8D E6         [24]12906 	mov	_TH1,#0xe6
                                  12907 ;	.\ecen4350_lcd_v4.c:3138: PCON = 0x00; //SMOD = 0
      004987 75 87 00         [24]12908 	mov	_PCON,#0x00
                                  12909 ;	.\ecen4350_lcd_v4.c:3139: baudSet = 1;
      00498A 78 73            [12]12910 	mov	r0,#_baudSet
      00498C 76 01            [12]12911 	mov	@r0,#0x01
      00498E                      12912 00135$:
                                  12913 ;	.\ecen4350_lcd_v4.c:3141: if (selection == '2' ) {
      00498E BF 32 0A         [24]12914 	cjne	r7,#0x32,00137$
                                  12915 ;	.\ecen4350_lcd_v4.c:3142: TH1 = 0xF3;
      004991 75 8D F3         [24]12916 	mov	_TH1,#0xf3
                                  12917 ;	.\ecen4350_lcd_v4.c:3143: PCON = 0x00; //SMOD = 0
      004994 75 87 00         [24]12918 	mov	_PCON,#0x00
                                  12919 ;	.\ecen4350_lcd_v4.c:3144: baudSet = 1;
      004997 78 73            [12]12920 	mov	r0,#_baudSet
      004999 76 01            [12]12921 	mov	@r0,#0x01
      00499B                      12922 00137$:
                                  12923 ;	.\ecen4350_lcd_v4.c:3146: if (selection == '3' ) {
      00499B BF 33 0A         [24]12924 	cjne	r7,#0x33,00139$
                                  12925 ;	.\ecen4350_lcd_v4.c:3147: TH1 = 0xF3;
      00499E 75 8D F3         [24]12926 	mov	_TH1,#0xf3
                                  12927 ;	.\ecen4350_lcd_v4.c:3148: PCON = 0x80; //SMOD 1
      0049A1 75 87 80         [24]12928 	mov	_PCON,#0x80
                                  12929 ;	.\ecen4350_lcd_v4.c:3149: baudSet = 1; 
      0049A4 78 73            [12]12930 	mov	r0,#_baudSet
      0049A6 76 01            [12]12931 	mov	@r0,#0x01
      0049A8                      12932 00139$:
                                  12933 ;	.\ecen4350_lcd_v4.c:3151: if (selection == '4' ) {
      0049A8 BF 34 0A         [24]12934 	cjne	r7,#0x34,00141$
                                  12935 ;	.\ecen4350_lcd_v4.c:3152: TH1 = 0xFD;
      0049AB 75 8D FD         [24]12936 	mov	_TH1,#0xfd
                                  12937 ;	.\ecen4350_lcd_v4.c:3153: PCON = 0x00; //SMOD 0
      0049AE 75 87 00         [24]12938 	mov	_PCON,#0x00
                                  12939 ;	.\ecen4350_lcd_v4.c:3154: baudSet = 1;
      0049B1 78 73            [12]12940 	mov	r0,#_baudSet
      0049B3 76 01            [12]12941 	mov	@r0,#0x01
      0049B5                      12942 00141$:
                                  12943 ;	.\ecen4350_lcd_v4.c:3156: if (selection == '5' ) {
      0049B5 BF 35 C0         [24]12944 	cjne	r7,#0x35,00133$
                                  12945 ;	.\ecen4350_lcd_v4.c:3157: TH1 = 0xFD;	
      0049B8 75 8D FD         [24]12946 	mov	_TH1,#0xfd
                                  12947 ;	.\ecen4350_lcd_v4.c:3158: PCON = 0x80; //SMOD 1
      0049BB 75 87 80         [24]12948 	mov	_PCON,#0x80
                                  12949 ;	.\ecen4350_lcd_v4.c:3159: baudSet = 1;
      0049BE 78 73            [12]12950 	mov	r0,#_baudSet
      0049C0 76 01            [12]12951 	mov	@r0,#0x01
                                  12952 ;	.\ecen4350_lcd_v4.c:3167: finish:
                                  12953 ;	.\ecen4350_lcd_v4.c:3168: return;
                                  12954 ;	.\ecen4350_lcd_v4.c:3169: }
      0049C2 22               [24]12955 	ret
                                  12956 ;------------------------------------------------------------
                                  12957 ;Allocation info for local variables in function 'main'
                                  12958 ;------------------------------------------------------------
                                  12959 ;__1310720181              Allocated to registers 
                                  12960 ;__1310720182              Allocated to registers 
                                  12961 ;map_address               Allocated to registers 
                                  12962 ;d                         Allocated to registers 
                                  12963 ;__1310720184              Allocated to registers 
                                  12964 ;__1310720185              Allocated to registers 
                                  12965 ;map_address               Allocated to registers 
                                  12966 ;d                         Allocated to registers 
                                  12967 ;__1310720187              Allocated to registers 
                                  12968 ;__1310720188              Allocated to registers 
                                  12969 ;map_address               Allocated to registers 
                                  12970 ;d                         Allocated to registers 
                                  12971 ;__1310720190              Allocated to registers 
                                  12972 ;__1310720191              Allocated to registers 
                                  12973 ;map_address               Allocated to registers 
                                  12974 ;d                         Allocated to registers 
                                  12975 ;__1966080193              Allocated to registers 
                                  12976 ;__1966080194              Allocated to registers 
                                  12977 ;map_address               Allocated to registers 
                                  12978 ;d                         Allocated to registers 
                                  12979 ;__2621440196              Allocated to registers 
                                  12980 ;__2621440197              Allocated to registers 
                                  12981 ;map_address               Allocated to registers 
                                  12982 ;d                         Allocated to registers 
                                  12983 ;__2621440199              Allocated to registers 
                                  12984 ;__2621440200              Allocated to registers 
                                  12985 ;map_address               Allocated to registers 
                                  12986 ;d                         Allocated to registers 
                                  12987 ;__2621440202              Allocated to registers 
                                  12988 ;__2621440203              Allocated to registers 
                                  12989 ;map_address               Allocated to registers 
                                  12990 ;d                         Allocated to registers 
                                  12991 ;__2621440205              Allocated to registers 
                                  12992 ;__2621440206              Allocated to registers 
                                  12993 ;map_address               Allocated to registers 
                                  12994 ;d                         Allocated to registers 
                                  12995 ;__2621440208              Allocated to registers 
                                  12996 ;__2621440209              Allocated to registers 
                                  12997 ;map_address               Allocated to registers 
                                  12998 ;d                         Allocated to registers 
                                  12999 ;__2621440211              Allocated to registers 
                                  13000 ;__2621440212              Allocated to registers 
                                  13001 ;map_address               Allocated to registers 
                                  13002 ;d                         Allocated to registers 
                                  13003 ;__2621440214              Allocated to registers 
                                  13004 ;__2621440215              Allocated to registers 
                                  13005 ;map_address               Allocated to registers 
                                  13006 ;d                         Allocated to registers 
                                  13007 ;__2621440217              Allocated to registers 
                                  13008 ;__2621440218              Allocated to registers 
                                  13009 ;map_address               Allocated to registers 
                                  13010 ;d                         Allocated to registers 
                                  13011 ;__2621440220              Allocated to registers 
                                  13012 ;__2621440221              Allocated to registers 
                                  13013 ;map_address               Allocated to registers 
                                  13014 ;d                         Allocated to registers 
                                  13015 ;__2621440223              Allocated to registers 
                                  13016 ;__2621440224              Allocated to registers 
                                  13017 ;map_address               Allocated to registers 
                                  13018 ;d                         Allocated to registers 
                                  13019 ;__2621440226              Allocated to registers 
                                  13020 ;__2621440227              Allocated to registers 
                                  13021 ;map_address               Allocated to registers 
                                  13022 ;d                         Allocated to registers 
                                  13023 ;__2621440229              Allocated to registers 
                                  13024 ;__2621440230              Allocated to registers 
                                  13025 ;map_address               Allocated to registers 
                                  13026 ;d                         Allocated to registers 
                                  13027 ;__3276800232              Allocated to registers 
                                  13028 ;__3276800233              Allocated to registers 
                                  13029 ;map_address               Allocated to registers 
                                  13030 ;d                         Allocated to registers 
                                  13031 ;__3276800235              Allocated to registers 
                                  13032 ;__3276800236              Allocated to registers 
                                  13033 ;map_address               Allocated to registers 
                                  13034 ;d                         Allocated to registers 
                                  13035 ;__3276800238              Allocated to registers 
                                  13036 ;__3276800239              Allocated to registers 
                                  13037 ;map_address               Allocated to registers 
                                  13038 ;d                         Allocated to registers 
                                  13039 ;__3276800241              Allocated to registers 
                                  13040 ;__3276800242              Allocated to registers 
                                  13041 ;map_address               Allocated to registers 
                                  13042 ;d                         Allocated to registers 
                                  13043 ;validKey                  Allocated to registers r7 
                                  13044 ;------------------------------------------------------------
                                  13045 ;	.\ecen4350_lcd_v4.c:3173: void main() {
                                  13046 ;	-----------------------------------------
                                  13047 ;	 function main
                                  13048 ;	-----------------------------------------
      0049C3                      13049 _main:
                                  13050 ;	.\ecen4350_lcd_v4.c:3174: __idata unsigned char validKey = 1;
      0049C3 7F 01            [12]13051 	mov	r7,#0x01
                                  13052 ;	.\ecen4350_lcd_v4.c:3176: delay(10);
      0049C5 90 00 0A         [24]13053 	mov	dptr,#0x000a
      0049C8 C0 07            [24]13054 	push	ar7
      0049CA 12 01 87         [24]13055 	lcall	_delay
                                  13056 ;	.\ecen4350_lcd_v4.c:3177: iowrite8(seg7_address, ON);
      0049CD 85 0C 82         [24]13057 	mov	dpl,_seg7_address
      0049D0 85 0D 83         [24]13058 	mov	dph,(_seg7_address + 1)
                                  13059 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13060 ;	assignBit
      0049D3 D2 B5            [12]13061 	setb	_P3_5
                                  13062 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0049D5 E4               [12]13063 	clr	a
      0049D6 F0               [24]13064 	movx	@dptr,a
                                  13065 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13066 ;	assignBit
      0049D7 C2 B5            [12]13067 	clr	_P3_5
                                  13068 ;	.\ecen4350_lcd_v4.c:3178: delay(5);
      0049D9 90 00 05         [24]13069 	mov	dptr,#0x0005
      0049DC 12 01 87         [24]13070 	lcall	_delay
                                  13071 ;	.\ecen4350_lcd_v4.c:3179: CD = 0;
                                  13072 ;	assignBit
      0049DF C2 B4            [12]13073 	clr	_P3_4
                                  13074 ;	.\ecen4350_lcd_v4.c:3180: IOM = 0;
                                  13075 ;	assignBit
      0049E1 C2 B5            [12]13076 	clr	_P3_5
                                  13077 ;	.\ecen4350_lcd_v4.c:3181: rtcInit();							// RTC init
      0049E3 12 03 9C         [24]13078 	lcall	_rtcInit
                                  13079 ;	.\ecen4350_lcd_v4.c:3183: TFT_LCD_INIT();						// LCD init
      0049E6 12 06 95         [24]13080 	lcall	_TFT_LCD_INIT
                                  13081 ;	.\ecen4350_lcd_v4.c:3184: iowrite8(seg7_address, SEG_H);		// [H]
      0049E9 85 0C 82         [24]13082 	mov	dpl,_seg7_address
      0049EC 85 0D 83         [24]13083 	mov	dph,(_seg7_address + 1)
                                  13084 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13085 ;	assignBit
      0049EF D2 B5            [12]13086 	setb	_P3_5
                                  13087 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      0049F1 74 89            [12]13088 	mov	a,#0x89
      0049F3 F0               [24]13089 	movx	@dptr,a
                                  13090 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13091 ;	assignBit
      0049F4 C2 B5            [12]13092 	clr	_P3_5
                                  13093 ;	.\ecen4350_lcd_v4.c:3185: delay(40);							
      0049F6 90 00 28         [24]13094 	mov	dptr,#0x0028
      0049F9 12 01 87         [24]13095 	lcall	_delay
                                  13096 ;	.\ecen4350_lcd_v4.c:3186: iowrite8(seg7_address, 0b01111011); // [i.]
      0049FC 85 0C 82         [24]13097 	mov	dpl,_seg7_address
      0049FF 85 0D 83         [24]13098 	mov	dph,(_seg7_address + 1)
                                  13099 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13100 ;	assignBit
      004A02 D2 B5            [12]13101 	setb	_P3_5
                                  13102 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A04 74 7B            [12]13103 	mov	a,#0x7b
      004A06 F0               [24]13104 	movx	@dptr,a
                                  13105 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13106 ;	assignBit
      004A07 C2 B5            [12]13107 	clr	_P3_5
                                  13108 ;	.\ecen4350_lcd_v4.c:3187: delay(40);
      004A09 90 00 28         [24]13109 	mov	dptr,#0x0028
      004A0C 12 01 87         [24]13110 	lcall	_delay
                                  13111 ;	.\ecen4350_lcd_v4.c:3188: iowrite8(seg7_address, OFF);
      004A0F 85 0C 82         [24]13112 	mov	dpl,_seg7_address
      004A12 85 0D 83         [24]13113 	mov	dph,(_seg7_address + 1)
                                  13114 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13115 ;	assignBit
      004A15 D2 B5            [12]13116 	setb	_P3_5
                                  13117 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A17 74 FF            [12]13118 	mov	a,#0xff
      004A19 F0               [24]13119 	movx	@dptr,a
                                  13120 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13121 ;	assignBit
      004A1A C2 B5            [12]13122 	clr	_P3_5
                                  13123 ;	.\ecen4350_lcd_v4.c:3189: delay(20);
      004A1C 90 00 14         [24]13124 	mov	dptr,#0x0014
      004A1F 12 01 87         [24]13125 	lcall	_delay
                                  13126 ;	.\ecen4350_lcd_v4.c:3190: seg7Test();
      004A22 12 02 41         [24]13127 	lcall	_seg7Test
                                  13128 ;	.\ecen4350_lcd_v4.c:3192: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      004A25 12 15 E3         [24]13129 	lcall	_writeSomeLines
                                  13130 ;	.\ecen4350_lcd_v4.c:3194: clearLCD();							// set LCD background
      004A28 12 0D FA         [24]13131 	lcall	_clearLCD
                                  13132 ;	.\ecen4350_lcd_v4.c:3195: setColorDefault();	// set text color
      004A2B 12 16 3B         [24]13133 	lcall	_setColorDefault
                                  13134 ;	.\ecen4350_lcd_v4.c:3196: setCursor(30, 120);				
      004A2E 75 6B 78         [24]13135 	mov	_setCursor_PARM_2,#0x78
      004A31 75 6C 00         [24]13136 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A34 90 00 1E         [24]13137 	mov	dptr,#0x001e
      004A37 12 05 5D         [24]13138 	lcall	_setCursor
      004A3A D0 07            [24]13139 	pop	ar7
                                  13140 ;	.\ecen4350_lcd_v4.c:3202: UART_en = 0;
      004A3C 78 72            [12]13141 	mov	r0,#_UART_en
      004A3E 76 00            [12]13142 	mov	@r0,#0x00
                                  13143 ;	.\ecen4350_lcd_v4.c:3205: loop:
      004A40                      13144 00101$:
                                  13145 ;	.\ecen4350_lcd_v4.c:3206: iowrite8(seg7_address, OFF);
      004A40 85 0C 82         [24]13146 	mov	dpl,_seg7_address
      004A43 85 0D 83         [24]13147 	mov	dph,(_seg7_address + 1)
                                  13148 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13149 ;	assignBit
      004A46 D2 B5            [12]13150 	setb	_P3_5
                                  13151 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A48 74 FF            [12]13152 	mov	a,#0xff
      004A4A F0               [24]13153 	movx	@dptr,a
                                  13154 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13155 ;	assignBit
      004A4B C2 B5            [12]13156 	clr	_P3_5
                                  13157 ;	.\ecen4350_lcd_v4.c:3207: clearLCD();
      004A4D C0 07            [24]13158 	push	ar7
      004A4F 12 0D FA         [24]13159 	lcall	_clearLCD
                                  13160 ;	.\ecen4350_lcd_v4.c:3208: setCursor(30, 120);
      004A52 75 6B 78         [24]13161 	mov	_setCursor_PARM_2,#0x78
      004A55 75 6C 00         [24]13162 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A58 90 00 1E         [24]13163 	mov	dptr,#0x001e
      004A5B 12 05 5D         [24]13164 	lcall	_setCursor
                                  13165 ;	.\ecen4350_lcd_v4.c:3209: setTextSize(3);
      004A5E 75 82 03         [24]13166 	mov	dpl,#0x03
      004A61 12 05 77         [24]13167 	lcall	_setTextSize
                                  13168 ;	.\ecen4350_lcd_v4.c:3210: setColorSelect();
      004A64 12 16 46         [24]13169 	lcall	_setColorSelect
                                  13170 ;	.\ecen4350_lcd_v4.c:3211: rtcPrint();
      004A67 12 04 4D         [24]13171 	lcall	_rtcPrint
                                  13172 ;	.\ecen4350_lcd_v4.c:3212: printMenu();
      004A6A 12 17 A0         [24]13173 	lcall	_printMenu
      004A6D D0 07            [24]13174 	pop	ar7
                                  13175 ;	.\ecen4350_lcd_v4.c:3213: inputKey:
      004A6F                      13176 00102$:
                                  13177 ;	.\ecen4350_lcd_v4.c:3214: selection = keyDetect();
      004A6F C0 07            [24]13178 	push	ar7
      004A71 12 11 95         [24]13179 	lcall	_keyDetect
      004A74 AE 82            [24]13180 	mov	r6,dpl
      004A76 D0 07            [24]13181 	pop	ar7
      004A78 78 71            [12]13182 	mov	r0,#_selection
      004A7A A6 06            [24]13183 	mov	@r0,ar6
                                  13184 ;	.\ecen4350_lcd_v4.c:3215: if (selection == 'D') {
      004A7C BE 44 70         [24]13185 	cjne	r6,#0x44,00106$
                                  13186 ;	.\ecen4350_lcd_v4.c:3216: iowrite8(seg7_address, ON);
      004A7F 85 0C 82         [24]13187 	mov	dpl,_seg7_address
      004A82 85 0D 83         [24]13188 	mov	dph,(_seg7_address + 1)
                                  13189 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13190 ;	assignBit
      004A85 D2 B5            [12]13191 	setb	_P3_5
                                  13192 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004A87 E4               [12]13193 	clr	a
      004A88 F0               [24]13194 	movx	@dptr,a
                                  13195 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13196 ;	assignBit
      004A89 C2 B5            [12]13197 	clr	_P3_5
                                  13198 ;	.\ecen4350_lcd_v4.c:3217: setCursor(10,60);
      004A8B 75 6B 3C         [24]13199 	mov	_setCursor_PARM_2,#0x3c
      004A8E 75 6C 00         [24]13200 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A91 90 00 0A         [24]13201 	mov	dptr,#0x000a
      004A94 C0 07            [24]13202 	push	ar7
      004A96 12 05 5D         [24]13203 	lcall	_setCursor
                                  13204 ;	.\ecen4350_lcd_v4.c:3218: setColorHighlight1();
      004A99 12 16 51         [24]13205 	lcall	_setColorHighlight1
                                  13206 ;	.\ecen4350_lcd_v4.c:3219: LCD_string_write("<D>");
      004A9C 90 5E 4D         [24]13207 	mov	dptr,#___str_160
      004A9F 75 F0 80         [24]13208 	mov	b,#0x80
      004AA2 12 10 77         [24]13209 	lcall	_LCD_string_write
                                  13210 ;	.\ecen4350_lcd_v4.c:3220: setColorHighlight2();
      004AA5 12 16 5D         [24]13211 	lcall	_setColorHighlight2
                                  13212 ;	.\ecen4350_lcd_v4.c:3221: LCD_string_write(" DUMP\n");
      004AA8 90 54 F4         [24]13213 	mov	dptr,#___str_7
      004AAB 75 F0 80         [24]13214 	mov	b,#0x80
      004AAE 12 10 77         [24]13215 	lcall	_LCD_string_write
                                  13216 ;	.\ecen4350_lcd_v4.c:3222: delay(20);
      004AB1 90 00 14         [24]13217 	mov	dptr,#0x0014
      004AB4 12 01 87         [24]13218 	lcall	_delay
      004AB7 D0 07            [24]13219 	pop	ar7
                                  13220 ;	.\ecen4350_lcd_v4.c:3223: iowrite8(seg7_address, SEG_D);
      004AB9 85 0C 82         [24]13221 	mov	dpl,_seg7_address
      004ABC 85 0D 83         [24]13222 	mov	dph,(_seg7_address + 1)
                                  13223 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13224 ;	assignBit
      004ABF D2 B5            [12]13225 	setb	_P3_5
                                  13226 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004AC1 74 A1            [12]13227 	mov	a,#0xa1
      004AC3 F0               [24]13228 	movx	@dptr,a
                                  13229 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13230 ;	assignBit
      004AC4 C2 B5            [12]13231 	clr	_P3_5
                                  13232 ;	.\ecen4350_lcd_v4.c:3224: if (validKey == 0) {
      004AC6 EF               [12]13233 	mov	a,r7
      004AC7 70 1C            [24]13234 	jnz	00104$
                                  13235 ;	.\ecen4350_lcd_v4.c:3225: setColorDefault();
      004AC9 C0 07            [24]13236 	push	ar7
      004ACB 12 16 3B         [24]13237 	lcall	_setColorDefault
                                  13238 ;	.\ecen4350_lcd_v4.c:3226: setCursor(60, 280);
      004ACE 75 6B 18         [24]13239 	mov	_setCursor_PARM_2,#0x18
      004AD1 75 6C 01         [24]13240 	mov	(_setCursor_PARM_2 + 1),#0x01
      004AD4 90 00 3C         [24]13241 	mov	dptr,#0x003c
      004AD7 12 05 5D         [24]13242 	lcall	_setCursor
                                  13243 ;	.\ecen4350_lcd_v4.c:3227: LCD_string_write("          ");
      004ADA 90 5E 51         [24]13244 	mov	dptr,#___str_161
      004ADD 75 F0 80         [24]13245 	mov	b,#0x80
      004AE0 12 10 77         [24]13246 	lcall	_LCD_string_write
      004AE3 D0 07            [24]13247 	pop	ar7
      004AE5                      13248 00104$:
                                  13249 ;	.\ecen4350_lcd_v4.c:3229: dump();
      004AE5 C0 07            [24]13250 	push	ar7
      004AE7 12 1A 0F         [24]13251 	lcall	_dump
      004AEA D0 07            [24]13252 	pop	ar7
                                  13253 ;	.\ecen4350_lcd_v4.c:3230: goto loop;
      004AEC 02 4A 40         [24]13254 	ljmp	00101$
      004AEF                      13255 00106$:
                                  13256 ;	.\ecen4350_lcd_v4.c:3231: } if(selection == 'B') {
      004AEF BE 42 70         [24]13257 	cjne	r6,#0x42,00110$
                                  13258 ;	.\ecen4350_lcd_v4.c:3232: iowrite8(seg7_address, ON);
      004AF2 85 0C 82         [24]13259 	mov	dpl,_seg7_address
      004AF5 85 0D 83         [24]13260 	mov	dph,(_seg7_address + 1)
                                  13261 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13262 ;	assignBit
      004AF8 D2 B5            [12]13263 	setb	_P3_5
                                  13264 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004AFA E4               [12]13265 	clr	a
      004AFB F0               [24]13266 	movx	@dptr,a
                                  13267 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13268 ;	assignBit
      004AFC C2 B5            [12]13269 	clr	_P3_5
                                  13270 ;	.\ecen4350_lcd_v4.c:3233: setCursor(130, 60);
      004AFE 75 6B 3C         [24]13271 	mov	_setCursor_PARM_2,#0x3c
      004B01 75 6C 00         [24]13272 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B04 90 00 82         [24]13273 	mov	dptr,#0x0082
      004B07 C0 07            [24]13274 	push	ar7
      004B09 12 05 5D         [24]13275 	lcall	_setCursor
                                  13276 ;	.\ecen4350_lcd_v4.c:3234: setColorHighlight1();
      004B0C 12 16 51         [24]13277 	lcall	_setColorHighlight1
                                  13278 ;	.\ecen4350_lcd_v4.c:3235: LCD_string_write("<B>");
      004B0F 90 5E 5C         [24]13279 	mov	dptr,#___str_162
      004B12 75 F0 80         [24]13280 	mov	b,#0x80
      004B15 12 10 77         [24]13281 	lcall	_LCD_string_write
                                  13282 ;	.\ecen4350_lcd_v4.c:3236: setColorHighlight2();
      004B18 12 16 5D         [24]13283 	lcall	_setColorHighlight2
                                  13284 ;	.\ecen4350_lcd_v4.c:3237: LCD_string_write(" MOVE\n");
      004B1B 90 55 00         [24]13285 	mov	dptr,#___str_9
      004B1E 75 F0 80         [24]13286 	mov	b,#0x80
      004B21 12 10 77         [24]13287 	lcall	_LCD_string_write
                                  13288 ;	.\ecen4350_lcd_v4.c:3238: delay(20);
      004B24 90 00 14         [24]13289 	mov	dptr,#0x0014
      004B27 12 01 87         [24]13290 	lcall	_delay
      004B2A D0 07            [24]13291 	pop	ar7
                                  13292 ;	.\ecen4350_lcd_v4.c:3239: iowrite8(seg7_address, SEG_B);
      004B2C 85 0C 82         [24]13293 	mov	dpl,_seg7_address
      004B2F 85 0D 83         [24]13294 	mov	dph,(_seg7_address + 1)
                                  13295 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13296 ;	assignBit
      004B32 D2 B5            [12]13297 	setb	_P3_5
                                  13298 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004B34 74 83            [12]13299 	mov	a,#0x83
      004B36 F0               [24]13300 	movx	@dptr,a
                                  13301 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13302 ;	assignBit
      004B37 C2 B5            [12]13303 	clr	_P3_5
                                  13304 ;	.\ecen4350_lcd_v4.c:3240: if (validKey == 0) {
      004B39 EF               [12]13305 	mov	a,r7
      004B3A 70 1C            [24]13306 	jnz	00108$
                                  13307 ;	.\ecen4350_lcd_v4.c:3241: setColorDefault();
      004B3C C0 07            [24]13308 	push	ar7
      004B3E 12 16 3B         [24]13309 	lcall	_setColorDefault
                                  13310 ;	.\ecen4350_lcd_v4.c:3242: setCursor(60, 280);
      004B41 75 6B 18         [24]13311 	mov	_setCursor_PARM_2,#0x18
      004B44 75 6C 01         [24]13312 	mov	(_setCursor_PARM_2 + 1),#0x01
      004B47 90 00 3C         [24]13313 	mov	dptr,#0x003c
      004B4A 12 05 5D         [24]13314 	lcall	_setCursor
                                  13315 ;	.\ecen4350_lcd_v4.c:3243: LCD_string_write("          ");
      004B4D 90 5E 51         [24]13316 	mov	dptr,#___str_161
      004B50 75 F0 80         [24]13317 	mov	b,#0x80
      004B53 12 10 77         [24]13318 	lcall	_LCD_string_write
      004B56 D0 07            [24]13319 	pop	ar7
      004B58                      13320 00108$:
                                  13321 ;	.\ecen4350_lcd_v4.c:3245: move();
      004B58 C0 07            [24]13322 	push	ar7
      004B5A 12 22 D0         [24]13323 	lcall	_move
      004B5D D0 07            [24]13324 	pop	ar7
                                  13325 ;	.\ecen4350_lcd_v4.c:3246: goto loop;
      004B5F 02 4A 40         [24]13326 	ljmp	00101$
      004B62                      13327 00110$:
                                  13328 ;	.\ecen4350_lcd_v4.c:3247: } if(selection == 'E') {
      004B62 BE 45 70         [24]13329 	cjne	r6,#0x45,00114$
                                  13330 ;	.\ecen4350_lcd_v4.c:3248: iowrite8(seg7_address, ON);
      004B65 85 0C 82         [24]13331 	mov	dpl,_seg7_address
      004B68 85 0D 83         [24]13332 	mov	dph,(_seg7_address + 1)
                                  13333 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13334 ;	assignBit
      004B6B D2 B5            [12]13335 	setb	_P3_5
                                  13336 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004B6D E4               [12]13337 	clr	a
      004B6E F0               [24]13338 	movx	@dptr,a
                                  13339 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13340 ;	assignBit
      004B6F C2 B5            [12]13341 	clr	_P3_5
                                  13342 ;	.\ecen4350_lcd_v4.c:3249: setCursor(10, 100);
      004B71 75 6B 64         [24]13343 	mov	_setCursor_PARM_2,#0x64
      004B74 75 6C 00         [24]13344 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B77 90 00 0A         [24]13345 	mov	dptr,#0x000a
      004B7A C0 07            [24]13346 	push	ar7
      004B7C 12 05 5D         [24]13347 	lcall	_setCursor
                                  13348 ;	.\ecen4350_lcd_v4.c:3250: setColorHighlight1();
      004B7F 12 16 51         [24]13349 	lcall	_setColorHighlight1
                                  13350 ;	.\ecen4350_lcd_v4.c:3251: LCD_string_write("<E>");
      004B82 90 5E 60         [24]13351 	mov	dptr,#___str_163
      004B85 75 F0 80         [24]13352 	mov	b,#0x80
      004B88 12 10 77         [24]13353 	lcall	_LCD_string_write
                                  13354 ;	.\ecen4350_lcd_v4.c:3252: setColorHighlight2();
      004B8B 12 16 5D         [24]13355 	lcall	_setColorHighlight2
                                  13356 ;	.\ecen4350_lcd_v4.c:3253: LCD_string_write(" EDIT\n");
      004B8E 90 55 0C         [24]13357 	mov	dptr,#___str_11
      004B91 75 F0 80         [24]13358 	mov	b,#0x80
      004B94 12 10 77         [24]13359 	lcall	_LCD_string_write
                                  13360 ;	.\ecen4350_lcd_v4.c:3254: delay(20);
      004B97 90 00 14         [24]13361 	mov	dptr,#0x0014
      004B9A 12 01 87         [24]13362 	lcall	_delay
      004B9D D0 07            [24]13363 	pop	ar7
                                  13364 ;	.\ecen4350_lcd_v4.c:3255: iowrite8(seg7_address, SEG_E);
      004B9F 85 0C 82         [24]13365 	mov	dpl,_seg7_address
      004BA2 85 0D 83         [24]13366 	mov	dph,(_seg7_address + 1)
                                  13367 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13368 ;	assignBit
      004BA5 D2 B5            [12]13369 	setb	_P3_5
                                  13370 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004BA7 74 86            [12]13371 	mov	a,#0x86
      004BA9 F0               [24]13372 	movx	@dptr,a
                                  13373 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13374 ;	assignBit
      004BAA C2 B5            [12]13375 	clr	_P3_5
                                  13376 ;	.\ecen4350_lcd_v4.c:3256: if (validKey == 0) {
      004BAC EF               [12]13377 	mov	a,r7
      004BAD 70 1C            [24]13378 	jnz	00112$
                                  13379 ;	.\ecen4350_lcd_v4.c:3257: setColorDefault();
      004BAF C0 07            [24]13380 	push	ar7
      004BB1 12 16 3B         [24]13381 	lcall	_setColorDefault
                                  13382 ;	.\ecen4350_lcd_v4.c:3258: setCursor(60, 280);
      004BB4 75 6B 18         [24]13383 	mov	_setCursor_PARM_2,#0x18
      004BB7 75 6C 01         [24]13384 	mov	(_setCursor_PARM_2 + 1),#0x01
      004BBA 90 00 3C         [24]13385 	mov	dptr,#0x003c
      004BBD 12 05 5D         [24]13386 	lcall	_setCursor
                                  13387 ;	.\ecen4350_lcd_v4.c:3259: LCD_string_write("          ");
      004BC0 90 5E 51         [24]13388 	mov	dptr,#___str_161
      004BC3 75 F0 80         [24]13389 	mov	b,#0x80
      004BC6 12 10 77         [24]13390 	lcall	_LCD_string_write
      004BC9 D0 07            [24]13391 	pop	ar7
      004BCB                      13392 00112$:
                                  13393 ;	.\ecen4350_lcd_v4.c:3261: edit();
      004BCB C0 07            [24]13394 	push	ar7
      004BCD 12 28 39         [24]13395 	lcall	_edit
      004BD0 D0 07            [24]13396 	pop	ar7
                                  13397 ;	.\ecen4350_lcd_v4.c:3262: goto loop;
      004BD2 02 4A 40         [24]13398 	ljmp	00101$
      004BD5                      13399 00114$:
                                  13400 ;	.\ecen4350_lcd_v4.c:3263: } if(selection == 'F') {
      004BD5 BE 46 70         [24]13401 	cjne	r6,#0x46,00118$
                                  13402 ;	.\ecen4350_lcd_v4.c:3264: iowrite8(seg7_address, ON);
      004BD8 85 0C 82         [24]13403 	mov	dpl,_seg7_address
      004BDB 85 0D 83         [24]13404 	mov	dph,(_seg7_address + 1)
                                  13405 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13406 ;	assignBit
      004BDE D2 B5            [12]13407 	setb	_P3_5
                                  13408 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004BE0 E4               [12]13409 	clr	a
      004BE1 F0               [24]13410 	movx	@dptr,a
                                  13411 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13412 ;	assignBit
      004BE2 C2 B5            [12]13413 	clr	_P3_5
                                  13414 ;	.\ecen4350_lcd_v4.c:3265: setCursor(130, 100);
      004BE4 75 6B 64         [24]13415 	mov	_setCursor_PARM_2,#0x64
      004BE7 75 6C 00         [24]13416 	mov	(_setCursor_PARM_2 + 1),#0x00
      004BEA 90 00 82         [24]13417 	mov	dptr,#0x0082
      004BED C0 07            [24]13418 	push	ar7
      004BEF 12 05 5D         [24]13419 	lcall	_setCursor
                                  13420 ;	.\ecen4350_lcd_v4.c:3266: setColorHighlight1();
      004BF2 12 16 51         [24]13421 	lcall	_setColorHighlight1
                                  13422 ;	.\ecen4350_lcd_v4.c:3267: LCD_string_write("<F>");
      004BF5 90 5E 64         [24]13423 	mov	dptr,#___str_164
      004BF8 75 F0 80         [24]13424 	mov	b,#0x80
      004BFB 12 10 77         [24]13425 	lcall	_LCD_string_write
                                  13426 ;	.\ecen4350_lcd_v4.c:3268: setColorHighlight2();
      004BFE 12 16 5D         [24]13427 	lcall	_setColorHighlight2
                                  13428 ;	.\ecen4350_lcd_v4.c:3269: LCD_string_write(" FIND\n");
      004C01 90 55 18         [24]13429 	mov	dptr,#___str_13
      004C04 75 F0 80         [24]13430 	mov	b,#0x80
      004C07 12 10 77         [24]13431 	lcall	_LCD_string_write
                                  13432 ;	.\ecen4350_lcd_v4.c:3270: delay(20);
      004C0A 90 00 14         [24]13433 	mov	dptr,#0x0014
      004C0D 12 01 87         [24]13434 	lcall	_delay
      004C10 D0 07            [24]13435 	pop	ar7
                                  13436 ;	.\ecen4350_lcd_v4.c:3271: iowrite8(seg7_address, SEG_F);
      004C12 85 0C 82         [24]13437 	mov	dpl,_seg7_address
      004C15 85 0D 83         [24]13438 	mov	dph,(_seg7_address + 1)
                                  13439 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13440 ;	assignBit
      004C18 D2 B5            [12]13441 	setb	_P3_5
                                  13442 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C1A 74 8E            [12]13443 	mov	a,#0x8e
      004C1C F0               [24]13444 	movx	@dptr,a
                                  13445 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13446 ;	assignBit
      004C1D C2 B5            [12]13447 	clr	_P3_5
                                  13448 ;	.\ecen4350_lcd_v4.c:3272: if (validKey == 0) {
      004C1F EF               [12]13449 	mov	a,r7
      004C20 70 1C            [24]13450 	jnz	00116$
                                  13451 ;	.\ecen4350_lcd_v4.c:3273: setColorDefault();
      004C22 C0 07            [24]13452 	push	ar7
      004C24 12 16 3B         [24]13453 	lcall	_setColorDefault
                                  13454 ;	.\ecen4350_lcd_v4.c:3274: setCursor(60, 280);
      004C27 75 6B 18         [24]13455 	mov	_setCursor_PARM_2,#0x18
      004C2A 75 6C 01         [24]13456 	mov	(_setCursor_PARM_2 + 1),#0x01
      004C2D 90 00 3C         [24]13457 	mov	dptr,#0x003c
      004C30 12 05 5D         [24]13458 	lcall	_setCursor
                                  13459 ;	.\ecen4350_lcd_v4.c:3275: LCD_string_write("          ");
      004C33 90 5E 51         [24]13460 	mov	dptr,#___str_161
      004C36 75 F0 80         [24]13461 	mov	b,#0x80
      004C39 12 10 77         [24]13462 	lcall	_LCD_string_write
      004C3C D0 07            [24]13463 	pop	ar7
      004C3E                      13464 00116$:
                                  13465 ;	.\ecen4350_lcd_v4.c:3277: find();
      004C3E C0 07            [24]13466 	push	ar7
      004C40 12 2F 95         [24]13467 	lcall	_find
      004C43 D0 07            [24]13468 	pop	ar7
                                  13469 ;	.\ecen4350_lcd_v4.c:3278: goto loop;
      004C45 02 4A 40         [24]13470 	ljmp	00101$
      004C48                      13471 00118$:
                                  13472 ;	.\ecen4350_lcd_v4.c:3279: } if(selection == 'C') {
      004C48 BE 43 70         [24]13473 	cjne	r6,#0x43,00122$
                                  13474 ;	.\ecen4350_lcd_v4.c:3280: iowrite8(seg7_address, ON);
      004C4B 85 0C 82         [24]13475 	mov	dpl,_seg7_address
      004C4E 85 0D 83         [24]13476 	mov	dph,(_seg7_address + 1)
                                  13477 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13478 ;	assignBit
      004C51 D2 B5            [12]13479 	setb	_P3_5
                                  13480 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C53 E4               [12]13481 	clr	a
      004C54 F0               [24]13482 	movx	@dptr,a
                                  13483 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13484 ;	assignBit
      004C55 C2 B5            [12]13485 	clr	_P3_5
                                  13486 ;	.\ecen4350_lcd_v4.c:3281: setCursor(10, 160);
      004C57 75 6B A0         [24]13487 	mov	_setCursor_PARM_2,#0xa0
      004C5A 75 6C 00         [24]13488 	mov	(_setCursor_PARM_2 + 1),#0x00
      004C5D 90 00 0A         [24]13489 	mov	dptr,#0x000a
      004C60 C0 07            [24]13490 	push	ar7
      004C62 12 05 5D         [24]13491 	lcall	_setCursor
                                  13492 ;	.\ecen4350_lcd_v4.c:3282: setColorHighlight1();
      004C65 12 16 51         [24]13493 	lcall	_setColorHighlight1
                                  13494 ;	.\ecen4350_lcd_v4.c:3283: LCD_string_write("<C>");
      004C68 90 5E 68         [24]13495 	mov	dptr,#___str_165
      004C6B 75 F0 80         [24]13496 	mov	b,#0x80
      004C6E 12 10 77         [24]13497 	lcall	_LCD_string_write
                                  13498 ;	.\ecen4350_lcd_v4.c:3284: setColorHighlight2();
      004C71 12 16 5D         [24]13499 	lcall	_setColorHighlight2
                                  13500 ;	.\ecen4350_lcd_v4.c:3285: LCD_string_write(" COUNT\n");
      004C74 90 55 24         [24]13501 	mov	dptr,#___str_15
      004C77 75 F0 80         [24]13502 	mov	b,#0x80
      004C7A 12 10 77         [24]13503 	lcall	_LCD_string_write
                                  13504 ;	.\ecen4350_lcd_v4.c:3286: delay(20);
      004C7D 90 00 14         [24]13505 	mov	dptr,#0x0014
      004C80 12 01 87         [24]13506 	lcall	_delay
      004C83 D0 07            [24]13507 	pop	ar7
                                  13508 ;	.\ecen4350_lcd_v4.c:3287: iowrite8(seg7_address, SEG_C);
      004C85 85 0C 82         [24]13509 	mov	dpl,_seg7_address
      004C88 85 0D 83         [24]13510 	mov	dph,(_seg7_address + 1)
                                  13511 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13512 ;	assignBit
      004C8B D2 B5            [12]13513 	setb	_P3_5
                                  13514 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004C8D 74 C6            [12]13515 	mov	a,#0xc6
      004C8F F0               [24]13516 	movx	@dptr,a
                                  13517 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13518 ;	assignBit
      004C90 C2 B5            [12]13519 	clr	_P3_5
                                  13520 ;	.\ecen4350_lcd_v4.c:3288: if (validKey == 0) {
      004C92 EF               [12]13521 	mov	a,r7
      004C93 70 1C            [24]13522 	jnz	00120$
                                  13523 ;	.\ecen4350_lcd_v4.c:3289: setColorDefault();
      004C95 C0 07            [24]13524 	push	ar7
      004C97 12 16 3B         [24]13525 	lcall	_setColorDefault
                                  13526 ;	.\ecen4350_lcd_v4.c:3290: setCursor(60, 280);
      004C9A 75 6B 18         [24]13527 	mov	_setCursor_PARM_2,#0x18
      004C9D 75 6C 01         [24]13528 	mov	(_setCursor_PARM_2 + 1),#0x01
      004CA0 90 00 3C         [24]13529 	mov	dptr,#0x003c
      004CA3 12 05 5D         [24]13530 	lcall	_setCursor
                                  13531 ;	.\ecen4350_lcd_v4.c:3291: LCD_string_write("          ");
      004CA6 90 5E 51         [24]13532 	mov	dptr,#___str_161
      004CA9 75 F0 80         [24]13533 	mov	b,#0x80
      004CAC 12 10 77         [24]13534 	lcall	_LCD_string_write
      004CAF D0 07            [24]13535 	pop	ar7
      004CB1                      13536 00120$:
                                  13537 ;	.\ecen4350_lcd_v4.c:3293: count();
      004CB1 C0 07            [24]13538 	push	ar7
      004CB3 12 3A 99         [24]13539 	lcall	_count
      004CB6 D0 07            [24]13540 	pop	ar7
                                  13541 ;	.\ecen4350_lcd_v4.c:3294: goto loop;
      004CB8 02 4A 40         [24]13542 	ljmp	00101$
      004CBB                      13543 00122$:
                                  13544 ;	.\ecen4350_lcd_v4.c:3295: } if(selection == 'A') {
      004CBB BE 41 70         [24]13545 	cjne	r6,#0x41,00126$
                                  13546 ;	.\ecen4350_lcd_v4.c:3296: iowrite8(seg7_address, ON);
      004CBE 85 0C 82         [24]13547 	mov	dpl,_seg7_address
      004CC1 85 0D 83         [24]13548 	mov	dph,(_seg7_address + 1)
                                  13549 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13550 ;	assignBit
      004CC4 D2 B5            [12]13551 	setb	_P3_5
                                  13552 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004CC6 E4               [12]13553 	clr	a
      004CC7 F0               [24]13554 	movx	@dptr,a
                                  13555 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13556 ;	assignBit
      004CC8 C2 B5            [12]13557 	clr	_P3_5
                                  13558 ;	.\ecen4350_lcd_v4.c:3297: setCursor(10, 180);
      004CCA 75 6B B4         [24]13559 	mov	_setCursor_PARM_2,#0xb4
      004CCD 75 6C 00         [24]13560 	mov	(_setCursor_PARM_2 + 1),#0x00
      004CD0 90 00 0A         [24]13561 	mov	dptr,#0x000a
      004CD3 C0 07            [24]13562 	push	ar7
      004CD5 12 05 5D         [24]13563 	lcall	_setCursor
                                  13564 ;	.\ecen4350_lcd_v4.c:3298: setColorHighlight1();
      004CD8 12 16 51         [24]13565 	lcall	_setColorHighlight1
                                  13566 ;	.\ecen4350_lcd_v4.c:3299: LCD_string_write("<A>");
      004CDB 90 5E 6C         [24]13567 	mov	dptr,#___str_166
      004CDE 75 F0 80         [24]13568 	mov	b,#0x80
      004CE1 12 10 77         [24]13569 	lcall	_LCD_string_write
                                  13570 ;	.\ecen4350_lcd_v4.c:3300: setColorHighlight2();
      004CE4 12 16 5D         [24]13571 	lcall	_setColorHighlight2
                                  13572 ;	.\ecen4350_lcd_v4.c:3301: LCD_string_write(" MEM CHECK\n");
      004CE7 90 55 31         [24]13573 	mov	dptr,#___str_17
      004CEA 75 F0 80         [24]13574 	mov	b,#0x80
      004CED 12 10 77         [24]13575 	lcall	_LCD_string_write
                                  13576 ;	.\ecen4350_lcd_v4.c:3302: delay(20);
      004CF0 90 00 14         [24]13577 	mov	dptr,#0x0014
      004CF3 12 01 87         [24]13578 	lcall	_delay
      004CF6 D0 07            [24]13579 	pop	ar7
                                  13580 ;	.\ecen4350_lcd_v4.c:3303: iowrite8(seg7_address, SEG_A);
      004CF8 85 0C 82         [24]13581 	mov	dpl,_seg7_address
      004CFB 85 0D 83         [24]13582 	mov	dph,(_seg7_address + 1)
                                  13583 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13584 ;	assignBit
      004CFE D2 B5            [12]13585 	setb	_P3_5
                                  13586 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004D00 74 88            [12]13587 	mov	a,#0x88
      004D02 F0               [24]13588 	movx	@dptr,a
                                  13589 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13590 ;	assignBit
      004D03 C2 B5            [12]13591 	clr	_P3_5
                                  13592 ;	.\ecen4350_lcd_v4.c:3304: if (validKey == 0) {
      004D05 EF               [12]13593 	mov	a,r7
      004D06 70 1C            [24]13594 	jnz	00124$
                                  13595 ;	.\ecen4350_lcd_v4.c:3305: setColorDefault();
      004D08 C0 07            [24]13596 	push	ar7
      004D0A 12 16 3B         [24]13597 	lcall	_setColorDefault
                                  13598 ;	.\ecen4350_lcd_v4.c:3306: setCursor(60, 280);
      004D0D 75 6B 18         [24]13599 	mov	_setCursor_PARM_2,#0x18
      004D10 75 6C 01         [24]13600 	mov	(_setCursor_PARM_2 + 1),#0x01
      004D13 90 00 3C         [24]13601 	mov	dptr,#0x003c
      004D16 12 05 5D         [24]13602 	lcall	_setCursor
                                  13603 ;	.\ecen4350_lcd_v4.c:3307: LCD_string_write("          ");
      004D19 90 5E 51         [24]13604 	mov	dptr,#___str_161
      004D1C 75 F0 80         [24]13605 	mov	b,#0x80
      004D1F 12 10 77         [24]13606 	lcall	_LCD_string_write
      004D22 D0 07            [24]13607 	pop	ar7
      004D24                      13608 00124$:
                                  13609 ;	.\ecen4350_lcd_v4.c:3309: check();
      004D24 C0 07            [24]13610 	push	ar7
      004D26 12 45 74         [24]13611 	lcall	_check
      004D29 D0 07            [24]13612 	pop	ar7
                                  13613 ;	.\ecen4350_lcd_v4.c:3310: goto loop;
      004D2B 02 4A 40         [24]13614 	ljmp	00101$
      004D2E                      13615 00126$:
                                  13616 ;	.\ecen4350_lcd_v4.c:3311: } if(selection == '1') {
      004D2E BE 31 02         [24]13617 	cjne	r6,#0x31,00253$
      004D31 80 03            [24]13618 	sjmp	00254$
      004D33                      13619 00253$:
      004D33 02 4E 16         [24]13620 	ljmp	00135$
      004D36                      13621 00254$:
                                  13622 ;	.\ecen4350_lcd_v4.c:3312: if (UART_en == 1) {
      004D36 78 72            [12]13623 	mov	r0,#_UART_en
      004D38 B6 01 6B         [24]13624 	cjne	@r0,#0x01,00132$
                                  13625 ;	.\ecen4350_lcd_v4.c:3313: iowrite8(seg7_address, ON);
      004D3B 85 0C 82         [24]13626 	mov	dpl,_seg7_address
      004D3E 85 0D 83         [24]13627 	mov	dph,(_seg7_address + 1)
                                  13628 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13629 ;	assignBit
      004D41 D2 B5            [12]13630 	setb	_P3_5
                                  13631 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004D43 E4               [12]13632 	clr	a
      004D44 F0               [24]13633 	movx	@dptr,a
                                  13634 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13635 ;	assignBit
      004D45 C2 B5            [12]13636 	clr	_P3_5
                                  13637 ;	.\ecen4350_lcd_v4.c:3314: setCursor(10, 220);
      004D47 75 6B DC         [24]13638 	mov	_setCursor_PARM_2,#0xdc
      004D4A 75 6C 00         [24]13639 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D4D 90 00 0A         [24]13640 	mov	dptr,#0x000a
      004D50 C0 07            [24]13641 	push	ar7
      004D52 12 05 5D         [24]13642 	lcall	_setCursor
                                  13643 ;	.\ecen4350_lcd_v4.c:3315: setColorHighlight1();
      004D55 12 16 51         [24]13644 	lcall	_setColorHighlight1
                                  13645 ;	.\ecen4350_lcd_v4.c:3316: LCD_string_write("<1>");
      004D58 90 5D A4         [24]13646 	mov	dptr,#___str_149
      004D5B 75 F0 80         [24]13647 	mov	b,#0x80
      004D5E 12 10 77         [24]13648 	lcall	_LCD_string_write
                                  13649 ;	.\ecen4350_lcd_v4.c:3317: setColorHighlight2();
      004D61 12 16 5D         [24]13650 	lcall	_setColorHighlight2
                                  13651 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write(" UART [Enabled]\n");
      004D64 90 5E 70         [24]13652 	mov	dptr,#___str_167
      004D67 75 F0 80         [24]13653 	mov	b,#0x80
      004D6A 12 10 77         [24]13654 	lcall	_LCD_string_write
                                  13655 ;	.\ecen4350_lcd_v4.c:3319: delay(20);
      004D6D 90 00 14         [24]13656 	mov	dptr,#0x0014
      004D70 12 01 87         [24]13657 	lcall	_delay
      004D73 D0 07            [24]13658 	pop	ar7
                                  13659 ;	.\ecen4350_lcd_v4.c:3320: iowrite8(seg7_address, SEG_U);
      004D75 85 0C 82         [24]13660 	mov	dpl,_seg7_address
      004D78 85 0D 83         [24]13661 	mov	dph,(_seg7_address + 1)
                                  13662 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13663 ;	assignBit
      004D7B D2 B5            [12]13664 	setb	_P3_5
                                  13665 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004D7D 74 C1            [12]13666 	mov	a,#0xc1
      004D7F F0               [24]13667 	movx	@dptr,a
                                  13668 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13669 ;	assignBit
      004D80 C2 B5            [12]13670 	clr	_P3_5
                                  13671 ;	.\ecen4350_lcd_v4.c:3321: if (validKey == 0) {
      004D82 EF               [12]13672 	mov	a,r7
      004D83 60 03            [24]13673 	jz	00257$
      004D85 02 4E 0C         [24]13674 	ljmp	00133$
      004D88                      13675 00257$:
                                  13676 ;	.\ecen4350_lcd_v4.c:3322: setColorDefault();
      004D88 C0 07            [24]13677 	push	ar7
      004D8A 12 16 3B         [24]13678 	lcall	_setColorDefault
                                  13679 ;	.\ecen4350_lcd_v4.c:3323: setCursor(60, 280);
      004D8D 75 6B 18         [24]13680 	mov	_setCursor_PARM_2,#0x18
      004D90 75 6C 01         [24]13681 	mov	(_setCursor_PARM_2 + 1),#0x01
      004D93 90 00 3C         [24]13682 	mov	dptr,#0x003c
      004D96 12 05 5D         [24]13683 	lcall	_setCursor
                                  13684 ;	.\ecen4350_lcd_v4.c:3324: LCD_string_write("          ");
      004D99 90 5E 51         [24]13685 	mov	dptr,#___str_161
      004D9C 75 F0 80         [24]13686 	mov	b,#0x80
      004D9F 12 10 77         [24]13687 	lcall	_LCD_string_write
      004DA2 D0 07            [24]13688 	pop	ar7
      004DA4 80 66            [24]13689 	sjmp	00133$
      004DA6                      13690 00132$:
                                  13691 ;	.\ecen4350_lcd_v4.c:3327: iowrite8(seg7_address, ON);
      004DA6 85 0C 82         [24]13692 	mov	dpl,_seg7_address
      004DA9 85 0D 83         [24]13693 	mov	dph,(_seg7_address + 1)
                                  13694 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13695 ;	assignBit
      004DAC D2 B5            [12]13696 	setb	_P3_5
                                  13697 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004DAE E4               [12]13698 	clr	a
      004DAF F0               [24]13699 	movx	@dptr,a
                                  13700 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13701 ;	assignBit
      004DB0 C2 B5            [12]13702 	clr	_P3_5
                                  13703 ;	.\ecen4350_lcd_v4.c:3328: setCursor(10, 220);
      004DB2 75 6B DC         [24]13704 	mov	_setCursor_PARM_2,#0xdc
      004DB5 75 6C 00         [24]13705 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DB8 90 00 0A         [24]13706 	mov	dptr,#0x000a
      004DBB C0 07            [24]13707 	push	ar7
      004DBD 12 05 5D         [24]13708 	lcall	_setCursor
                                  13709 ;	.\ecen4350_lcd_v4.c:3329: setColorHighlight1();
      004DC0 12 16 51         [24]13710 	lcall	_setColorHighlight1
                                  13711 ;	.\ecen4350_lcd_v4.c:3330: LCD_string_write("<1>");
      004DC3 90 5D A4         [24]13712 	mov	dptr,#___str_149
      004DC6 75 F0 80         [24]13713 	mov	b,#0x80
      004DC9 12 10 77         [24]13714 	lcall	_LCD_string_write
                                  13715 ;	.\ecen4350_lcd_v4.c:3331: setColorHighlight2();
      004DCC 12 16 5D         [24]13716 	lcall	_setColorHighlight2
                                  13717 ;	.\ecen4350_lcd_v4.c:3332: LCD_string_write(" UART [Disabled]\n");
      004DCF 90 5E 81         [24]13718 	mov	dptr,#___str_168
      004DD2 75 F0 80         [24]13719 	mov	b,#0x80
      004DD5 12 10 77         [24]13720 	lcall	_LCD_string_write
                                  13721 ;	.\ecen4350_lcd_v4.c:3333: delay(20);
      004DD8 90 00 14         [24]13722 	mov	dptr,#0x0014
      004DDB 12 01 87         [24]13723 	lcall	_delay
      004DDE D0 07            [24]13724 	pop	ar7
                                  13725 ;	.\ecen4350_lcd_v4.c:3334: iowrite8(seg7_address, SEG_U);
      004DE0 85 0C 82         [24]13726 	mov	dpl,_seg7_address
      004DE3 85 0D 83         [24]13727 	mov	dph,(_seg7_address + 1)
                                  13728 ;	.\ecen4350_lcd_v4.c:93: IOM = 1;
                                  13729 ;	assignBit
      004DE6 D2 B5            [12]13730 	setb	_P3_5
                                  13731 ;	.\ecen4350_lcd_v4.c:94: *map_address = d;
      004DE8 74 C1            [12]13732 	mov	a,#0xc1
      004DEA F0               [24]13733 	movx	@dptr,a
                                  13734 ;	.\ecen4350_lcd_v4.c:95: IOM = 0;
                                  13735 ;	assignBit
      004DEB C2 B5            [12]13736 	clr	_P3_5
                                  13737 ;	.\ecen4350_lcd_v4.c:3335: if (validKey == 0) {
      004DED EF               [12]13738 	mov	a,r7
      004DEE 70 1C            [24]13739 	jnz	00133$
                                  13740 ;	.\ecen4350_lcd_v4.c:3336: setColorDefault();
      004DF0 C0 07            [24]13741 	push	ar7
      004DF2 12 16 3B         [24]13742 	lcall	_setColorDefault
                                  13743 ;	.\ecen4350_lcd_v4.c:3337: setCursor(60, 280);
      004DF5 75 6B 18         [24]13744 	mov	_setCursor_PARM_2,#0x18
      004DF8 75 6C 01         [24]13745 	mov	(_setCursor_PARM_2 + 1),#0x01
      004DFB 90 00 3C         [24]13746 	mov	dptr,#0x003c
      004DFE 12 05 5D         [24]13747 	lcall	_setCursor
                                  13748 ;	.\ecen4350_lcd_v4.c:3338: LCD_string_write("          ");
      004E01 90 5E 51         [24]13749 	mov	dptr,#___str_161
      004E04 75 F0 80         [24]13750 	mov	b,#0x80
      004E07 12 10 77         [24]13751 	lcall	_LCD_string_write
      004E0A D0 07            [24]13752 	pop	ar7
      004E0C                      13753 00133$:
                                  13754 ;	.\ecen4350_lcd_v4.c:3341: uart();
      004E0C C0 07            [24]13755 	push	ar7
      004E0E 12 46 96         [24]13756 	lcall	_uart
      004E11 D0 07            [24]13757 	pop	ar7
                                  13758 ;	.\ecen4350_lcd_v4.c:3342: goto loop;
      004E13 02 4A 40         [24]13759 	ljmp	00101$
      004E16                      13760 00135$:
                                  13761 ;	.\ecen4350_lcd_v4.c:3344: setCursor(45, 260);
      004E16 75 6B 04         [24]13762 	mov	_setCursor_PARM_2,#0x04
      004E19 75 6C 01         [24]13763 	mov	(_setCursor_PARM_2 + 1),#0x01
      004E1C 90 00 2D         [24]13764 	mov	dptr,#0x002d
      004E1F 12 05 5D         [24]13765 	lcall	_setCursor
                                  13766 ;	.\ecen4350_lcd_v4.c:3345: setColorRed();
      004E22 12 16 80         [24]13767 	lcall	_setColorRed
                                  13768 ;	.\ecen4350_lcd_v4.c:3346: LCD_string_write("INVALID INPUT\n");
      004E25 90 5E 93         [24]13769 	mov	dptr,#___str_169
      004E28 75 F0 80         [24]13770 	mov	b,#0x80
      004E2B 12 10 77         [24]13771 	lcall	_LCD_string_write
                                  13772 ;	.\ecen4350_lcd_v4.c:3347: setCursor(60, 280);
      004E2E 75 6B 18         [24]13773 	mov	_setCursor_PARM_2,#0x18
      004E31 75 6C 01         [24]13774 	mov	(_setCursor_PARM_2 + 1),#0x01
      004E34 90 00 3C         [24]13775 	mov	dptr,#0x003c
      004E37 12 05 5D         [24]13776 	lcall	_setCursor
                                  13777 ;	.\ecen4350_lcd_v4.c:3348: LCD_string_write("Try again.");
      004E3A 90 5E A2         [24]13778 	mov	dptr,#___str_170
      004E3D 75 F0 80         [24]13779 	mov	b,#0x80
      004E40 12 10 77         [24]13780 	lcall	_LCD_string_write
                                  13781 ;	.\ecen4350_lcd_v4.c:3349: validKey = 0;
      004E43 7F 00            [12]13782 	mov	r7,#0x00
                                  13783 ;	.\ecen4350_lcd_v4.c:3350: delay(20);
      004E45 90 00 14         [24]13784 	mov	dptr,#0x0014
      004E48 C0 07            [24]13785 	push	ar7
      004E4A 12 01 87         [24]13786 	lcall	_delay
                                  13787 ;	.\ecen4350_lcd_v4.c:3351: setColorDefault();
      004E4D 12 16 3B         [24]13788 	lcall	_setColorDefault
                                  13789 ;	.\ecen4350_lcd_v4.c:3352: setCursor(45, 260);
      004E50 75 6B 04         [24]13790 	mov	_setCursor_PARM_2,#0x04
      004E53 75 6C 01         [24]13791 	mov	(_setCursor_PARM_2 + 1),#0x01
      004E56 90 00 2D         [24]13792 	mov	dptr,#0x002d
      004E59 12 05 5D         [24]13793 	lcall	_setCursor
                                  13794 ;	.\ecen4350_lcd_v4.c:3353: LCD_string_write("               \n");
      004E5C 90 5E AD         [24]13795 	mov	dptr,#___str_171
      004E5F 75 F0 80         [24]13796 	mov	b,#0x80
      004E62 12 10 77         [24]13797 	lcall	_LCD_string_write
      004E65 D0 07            [24]13798 	pop	ar7
                                  13799 ;	.\ecen4350_lcd_v4.c:3354: goto inputKey;
                                  13800 ;	.\ecen4350_lcd_v4.c:3357: }
      004E67 02 4A 6F         [24]13801 	ljmp	00102$
                                  13802 	.area CSEG    (CODE)
                                  13803 	.area CONST   (CODE)
      004F8B                      13804 _font:
      004F8B 00                   13805 	.db #0x00	; 0
      004F8C 00                   13806 	.db #0x00	; 0
      004F8D 00                   13807 	.db #0x00	; 0
      004F8E 00                   13808 	.db #0x00	; 0
      004F8F 00                   13809 	.db #0x00	; 0
      004F90 3E                   13810 	.db #0x3e	; 62
      004F91 5B                   13811 	.db #0x5b	; 91
      004F92 4F                   13812 	.db #0x4f	; 79	'O'
      004F93 5B                   13813 	.db #0x5b	; 91
      004F94 3E                   13814 	.db #0x3e	; 62
      004F95 3E                   13815 	.db #0x3e	; 62
      004F96 6B                   13816 	.db #0x6b	; 107	'k'
      004F97 4F                   13817 	.db #0x4f	; 79	'O'
      004F98 6B                   13818 	.db #0x6b	; 107	'k'
      004F99 3E                   13819 	.db #0x3e	; 62
      004F9A 1C                   13820 	.db #0x1c	; 28
      004F9B 3E                   13821 	.db #0x3e	; 62
      004F9C 7C                   13822 	.db #0x7c	; 124
      004F9D 3E                   13823 	.db #0x3e	; 62
      004F9E 1C                   13824 	.db #0x1c	; 28
      004F9F 18                   13825 	.db #0x18	; 24
      004FA0 3C                   13826 	.db #0x3c	; 60
      004FA1 7E                   13827 	.db #0x7e	; 126
      004FA2 3C                   13828 	.db #0x3c	; 60
      004FA3 18                   13829 	.db #0x18	; 24
      004FA4 1C                   13830 	.db #0x1c	; 28
      004FA5 57                   13831 	.db #0x57	; 87	'W'
      004FA6 7D                   13832 	.db #0x7d	; 125
      004FA7 57                   13833 	.db #0x57	; 87	'W'
      004FA8 1C                   13834 	.db #0x1c	; 28
      004FA9 1C                   13835 	.db #0x1c	; 28
      004FAA 5E                   13836 	.db #0x5e	; 94
      004FAB 7F                   13837 	.db #0x7f	; 127
      004FAC 5E                   13838 	.db #0x5e	; 94
      004FAD 1C                   13839 	.db #0x1c	; 28
      004FAE 00                   13840 	.db #0x00	; 0
      004FAF 18                   13841 	.db #0x18	; 24
      004FB0 3C                   13842 	.db #0x3c	; 60
      004FB1 18                   13843 	.db #0x18	; 24
      004FB2 00                   13844 	.db #0x00	; 0
      004FB3 FF                   13845 	.db #0xff	; 255
      004FB4 E7                   13846 	.db #0xe7	; 231
      004FB5 C3                   13847 	.db #0xc3	; 195
      004FB6 E7                   13848 	.db #0xe7	; 231
      004FB7 FF                   13849 	.db #0xff	; 255
      004FB8 00                   13850 	.db #0x00	; 0
      004FB9 18                   13851 	.db #0x18	; 24
      004FBA 24                   13852 	.db #0x24	; 36
      004FBB 18                   13853 	.db #0x18	; 24
      004FBC 00                   13854 	.db #0x00	; 0
      004FBD FF                   13855 	.db #0xff	; 255
      004FBE E7                   13856 	.db #0xe7	; 231
      004FBF DB                   13857 	.db #0xdb	; 219
      004FC0 E7                   13858 	.db #0xe7	; 231
      004FC1 FF                   13859 	.db #0xff	; 255
      004FC2 30                   13860 	.db #0x30	; 48	'0'
      004FC3 48                   13861 	.db #0x48	; 72	'H'
      004FC4 3A                   13862 	.db #0x3a	; 58
      004FC5 06                   13863 	.db #0x06	; 6
      004FC6 0E                   13864 	.db #0x0e	; 14
      004FC7 26                   13865 	.db #0x26	; 38
      004FC8 29                   13866 	.db #0x29	; 41
      004FC9 79                   13867 	.db #0x79	; 121	'y'
      004FCA 29                   13868 	.db #0x29	; 41
      004FCB 26                   13869 	.db #0x26	; 38
      004FCC 40                   13870 	.db #0x40	; 64
      004FCD 7F                   13871 	.db #0x7f	; 127
      004FCE 05                   13872 	.db #0x05	; 5
      004FCF 05                   13873 	.db #0x05	; 5
      004FD0 07                   13874 	.db #0x07	; 7
      004FD1 40                   13875 	.db #0x40	; 64
      004FD2 7F                   13876 	.db #0x7f	; 127
      004FD3 05                   13877 	.db #0x05	; 5
      004FD4 25                   13878 	.db #0x25	; 37
      004FD5 3F                   13879 	.db #0x3f	; 63
      004FD6 5A                   13880 	.db #0x5a	; 90	'Z'
      004FD7 3C                   13881 	.db #0x3c	; 60
      004FD8 E7                   13882 	.db #0xe7	; 231
      004FD9 3C                   13883 	.db #0x3c	; 60
      004FDA 5A                   13884 	.db #0x5a	; 90	'Z'
      004FDB 7F                   13885 	.db #0x7f	; 127
      004FDC 3E                   13886 	.db #0x3e	; 62
      004FDD 1C                   13887 	.db #0x1c	; 28
      004FDE 1C                   13888 	.db #0x1c	; 28
      004FDF 08                   13889 	.db #0x08	; 8
      004FE0 08                   13890 	.db #0x08	; 8
      004FE1 1C                   13891 	.db #0x1c	; 28
      004FE2 1C                   13892 	.db #0x1c	; 28
      004FE3 3E                   13893 	.db #0x3e	; 62
      004FE4 7F                   13894 	.db #0x7f	; 127
      004FE5 14                   13895 	.db #0x14	; 20
      004FE6 22                   13896 	.db #0x22	; 34
      004FE7 7F                   13897 	.db #0x7f	; 127
      004FE8 22                   13898 	.db #0x22	; 34
      004FE9 14                   13899 	.db #0x14	; 20
      004FEA 5F                   13900 	.db #0x5f	; 95
      004FEB 5F                   13901 	.db #0x5f	; 95
      004FEC 00                   13902 	.db #0x00	; 0
      004FED 5F                   13903 	.db #0x5f	; 95
      004FEE 5F                   13904 	.db #0x5f	; 95
      004FEF 06                   13905 	.db #0x06	; 6
      004FF0 09                   13906 	.db #0x09	; 9
      004FF1 7F                   13907 	.db #0x7f	; 127
      004FF2 01                   13908 	.db #0x01	; 1
      004FF3 7F                   13909 	.db #0x7f	; 127
      004FF4 00                   13910 	.db #0x00	; 0
      004FF5 66                   13911 	.db #0x66	; 102	'f'
      004FF6 89                   13912 	.db #0x89	; 137
      004FF7 95                   13913 	.db #0x95	; 149
      004FF8 6A                   13914 	.db #0x6a	; 106	'j'
      004FF9 60                   13915 	.db #0x60	; 96
      004FFA 60                   13916 	.db #0x60	; 96
      004FFB 60                   13917 	.db #0x60	; 96
      004FFC 60                   13918 	.db #0x60	; 96
      004FFD 60                   13919 	.db #0x60	; 96
      004FFE 94                   13920 	.db #0x94	; 148
      004FFF A2                   13921 	.db #0xa2	; 162
      005000 FF                   13922 	.db #0xff	; 255
      005001 A2                   13923 	.db #0xa2	; 162
      005002 94                   13924 	.db #0x94	; 148
      005003 08                   13925 	.db #0x08	; 8
      005004 04                   13926 	.db #0x04	; 4
      005005 7E                   13927 	.db #0x7e	; 126
      005006 04                   13928 	.db #0x04	; 4
      005007 08                   13929 	.db #0x08	; 8
      005008 10                   13930 	.db #0x10	; 16
      005009 20                   13931 	.db #0x20	; 32
      00500A 7E                   13932 	.db #0x7e	; 126
      00500B 20                   13933 	.db #0x20	; 32
      00500C 10                   13934 	.db #0x10	; 16
      00500D 08                   13935 	.db #0x08	; 8
      00500E 08                   13936 	.db #0x08	; 8
      00500F 2A                   13937 	.db #0x2a	; 42
      005010 1C                   13938 	.db #0x1c	; 28
      005011 08                   13939 	.db #0x08	; 8
      005012 08                   13940 	.db #0x08	; 8
      005013 1C                   13941 	.db #0x1c	; 28
      005014 2A                   13942 	.db #0x2a	; 42
      005015 08                   13943 	.db #0x08	; 8
      005016 08                   13944 	.db #0x08	; 8
      005017 1E                   13945 	.db #0x1e	; 30
      005018 10                   13946 	.db #0x10	; 16
      005019 10                   13947 	.db #0x10	; 16
      00501A 10                   13948 	.db #0x10	; 16
      00501B 10                   13949 	.db #0x10	; 16
      00501C 0C                   13950 	.db #0x0c	; 12
      00501D 1E                   13951 	.db #0x1e	; 30
      00501E 0C                   13952 	.db #0x0c	; 12
      00501F 1E                   13953 	.db #0x1e	; 30
      005020 0C                   13954 	.db #0x0c	; 12
      005021 30                   13955 	.db #0x30	; 48	'0'
      005022 38                   13956 	.db #0x38	; 56	'8'
      005023 3E                   13957 	.db #0x3e	; 62
      005024 38                   13958 	.db #0x38	; 56	'8'
      005025 30                   13959 	.db #0x30	; 48	'0'
      005026 06                   13960 	.db #0x06	; 6
      005027 0E                   13961 	.db #0x0e	; 14
      005028 3E                   13962 	.db #0x3e	; 62
      005029 0E                   13963 	.db #0x0e	; 14
      00502A 06                   13964 	.db #0x06	; 6
      00502B 00                   13965 	.db #0x00	; 0
      00502C 00                   13966 	.db #0x00	; 0
      00502D 00                   13967 	.db #0x00	; 0
      00502E 00                   13968 	.db #0x00	; 0
      00502F 00                   13969 	.db #0x00	; 0
      005030 00                   13970 	.db #0x00	; 0
      005031 00                   13971 	.db #0x00	; 0
      005032 5F                   13972 	.db #0x5f	; 95
      005033 00                   13973 	.db #0x00	; 0
      005034 00                   13974 	.db #0x00	; 0
      005035 00                   13975 	.db #0x00	; 0
      005036 07                   13976 	.db #0x07	; 7
      005037 00                   13977 	.db #0x00	; 0
      005038 07                   13978 	.db #0x07	; 7
      005039 00                   13979 	.db #0x00	; 0
      00503A 14                   13980 	.db #0x14	; 20
      00503B 7F                   13981 	.db #0x7f	; 127
      00503C 14                   13982 	.db #0x14	; 20
      00503D 7F                   13983 	.db #0x7f	; 127
      00503E 14                   13984 	.db #0x14	; 20
      00503F 24                   13985 	.db #0x24	; 36
      005040 2A                   13986 	.db #0x2a	; 42
      005041 7F                   13987 	.db #0x7f	; 127
      005042 2A                   13988 	.db #0x2a	; 42
      005043 12                   13989 	.db #0x12	; 18
      005044 23                   13990 	.db #0x23	; 35
      005045 13                   13991 	.db #0x13	; 19
      005046 08                   13992 	.db #0x08	; 8
      005047 64                   13993 	.db #0x64	; 100	'd'
      005048 62                   13994 	.db #0x62	; 98	'b'
      005049 36                   13995 	.db #0x36	; 54	'6'
      00504A 49                   13996 	.db #0x49	; 73	'I'
      00504B 56                   13997 	.db #0x56	; 86	'V'
      00504C 20                   13998 	.db #0x20	; 32
      00504D 50                   13999 	.db #0x50	; 80	'P'
      00504E 00                   14000 	.db #0x00	; 0
      00504F 08                   14001 	.db #0x08	; 8
      005050 07                   14002 	.db #0x07	; 7
      005051 03                   14003 	.db #0x03	; 3
      005052 00                   14004 	.db #0x00	; 0
      005053 00                   14005 	.db #0x00	; 0
      005054 1C                   14006 	.db #0x1c	; 28
      005055 22                   14007 	.db #0x22	; 34
      005056 41                   14008 	.db #0x41	; 65	'A'
      005057 00                   14009 	.db #0x00	; 0
      005058 00                   14010 	.db #0x00	; 0
      005059 41                   14011 	.db #0x41	; 65	'A'
      00505A 22                   14012 	.db #0x22	; 34
      00505B 1C                   14013 	.db #0x1c	; 28
      00505C 00                   14014 	.db #0x00	; 0
      00505D 2A                   14015 	.db #0x2a	; 42
      00505E 1C                   14016 	.db #0x1c	; 28
      00505F 7F                   14017 	.db #0x7f	; 127
      005060 1C                   14018 	.db #0x1c	; 28
      005061 2A                   14019 	.db #0x2a	; 42
      005062 08                   14020 	.db #0x08	; 8
      005063 08                   14021 	.db #0x08	; 8
      005064 3E                   14022 	.db #0x3e	; 62
      005065 08                   14023 	.db #0x08	; 8
      005066 08                   14024 	.db #0x08	; 8
      005067 00                   14025 	.db #0x00	; 0
      005068 80                   14026 	.db #0x80	; 128
      005069 70                   14027 	.db #0x70	; 112	'p'
      00506A 30                   14028 	.db #0x30	; 48	'0'
      00506B 00                   14029 	.db #0x00	; 0
      00506C 08                   14030 	.db #0x08	; 8
      00506D 08                   14031 	.db #0x08	; 8
      00506E 08                   14032 	.db #0x08	; 8
      00506F 08                   14033 	.db #0x08	; 8
      005070 08                   14034 	.db #0x08	; 8
      005071 00                   14035 	.db #0x00	; 0
      005072 00                   14036 	.db #0x00	; 0
      005073 60                   14037 	.db #0x60	; 96
      005074 60                   14038 	.db #0x60	; 96
      005075 00                   14039 	.db #0x00	; 0
      005076 20                   14040 	.db #0x20	; 32
      005077 10                   14041 	.db #0x10	; 16
      005078 08                   14042 	.db #0x08	; 8
      005079 04                   14043 	.db #0x04	; 4
      00507A 02                   14044 	.db #0x02	; 2
      00507B 3E                   14045 	.db #0x3e	; 62
      00507C 51                   14046 	.db #0x51	; 81	'Q'
      00507D 49                   14047 	.db #0x49	; 73	'I'
      00507E 45                   14048 	.db #0x45	; 69	'E'
      00507F 3E                   14049 	.db #0x3e	; 62
      005080 00                   14050 	.db #0x00	; 0
      005081 42                   14051 	.db #0x42	; 66	'B'
      005082 7F                   14052 	.db #0x7f	; 127
      005083 40                   14053 	.db #0x40	; 64
      005084 00                   14054 	.db #0x00	; 0
      005085 72                   14055 	.db #0x72	; 114	'r'
      005086 49                   14056 	.db #0x49	; 73	'I'
      005087 49                   14057 	.db #0x49	; 73	'I'
      005088 49                   14058 	.db #0x49	; 73	'I'
      005089 46                   14059 	.db #0x46	; 70	'F'
      00508A 21                   14060 	.db #0x21	; 33
      00508B 41                   14061 	.db #0x41	; 65	'A'
      00508C 49                   14062 	.db #0x49	; 73	'I'
      00508D 4D                   14063 	.db #0x4d	; 77	'M'
      00508E 33                   14064 	.db #0x33	; 51	'3'
      00508F 18                   14065 	.db #0x18	; 24
      005090 14                   14066 	.db #0x14	; 20
      005091 12                   14067 	.db #0x12	; 18
      005092 7F                   14068 	.db #0x7f	; 127
      005093 10                   14069 	.db #0x10	; 16
      005094 27                   14070 	.db #0x27	; 39
      005095 45                   14071 	.db #0x45	; 69	'E'
      005096 45                   14072 	.db #0x45	; 69	'E'
      005097 45                   14073 	.db #0x45	; 69	'E'
      005098 39                   14074 	.db #0x39	; 57	'9'
      005099 3C                   14075 	.db #0x3c	; 60
      00509A 4A                   14076 	.db #0x4a	; 74	'J'
      00509B 49                   14077 	.db #0x49	; 73	'I'
      00509C 49                   14078 	.db #0x49	; 73	'I'
      00509D 31                   14079 	.db #0x31	; 49	'1'
      00509E 41                   14080 	.db #0x41	; 65	'A'
      00509F 21                   14081 	.db #0x21	; 33
      0050A0 11                   14082 	.db #0x11	; 17
      0050A1 09                   14083 	.db #0x09	; 9
      0050A2 07                   14084 	.db #0x07	; 7
      0050A3 36                   14085 	.db #0x36	; 54	'6'
      0050A4 49                   14086 	.db #0x49	; 73	'I'
      0050A5 49                   14087 	.db #0x49	; 73	'I'
      0050A6 49                   14088 	.db #0x49	; 73	'I'
      0050A7 36                   14089 	.db #0x36	; 54	'6'
      0050A8 46                   14090 	.db #0x46	; 70	'F'
      0050A9 49                   14091 	.db #0x49	; 73	'I'
      0050AA 49                   14092 	.db #0x49	; 73	'I'
      0050AB 29                   14093 	.db #0x29	; 41
      0050AC 1E                   14094 	.db #0x1e	; 30
      0050AD 00                   14095 	.db #0x00	; 0
      0050AE 00                   14096 	.db #0x00	; 0
      0050AF 14                   14097 	.db #0x14	; 20
      0050B0 00                   14098 	.db #0x00	; 0
      0050B1 00                   14099 	.db #0x00	; 0
      0050B2 00                   14100 	.db #0x00	; 0
      0050B3 40                   14101 	.db #0x40	; 64
      0050B4 34                   14102 	.db #0x34	; 52	'4'
      0050B5 00                   14103 	.db #0x00	; 0
      0050B6 00                   14104 	.db #0x00	; 0
      0050B7 00                   14105 	.db #0x00	; 0
      0050B8 08                   14106 	.db #0x08	; 8
      0050B9 14                   14107 	.db #0x14	; 20
      0050BA 22                   14108 	.db #0x22	; 34
      0050BB 41                   14109 	.db #0x41	; 65	'A'
      0050BC 14                   14110 	.db #0x14	; 20
      0050BD 14                   14111 	.db #0x14	; 20
      0050BE 14                   14112 	.db #0x14	; 20
      0050BF 14                   14113 	.db #0x14	; 20
      0050C0 14                   14114 	.db #0x14	; 20
      0050C1 00                   14115 	.db #0x00	; 0
      0050C2 41                   14116 	.db #0x41	; 65	'A'
      0050C3 22                   14117 	.db #0x22	; 34
      0050C4 14                   14118 	.db #0x14	; 20
      0050C5 08                   14119 	.db #0x08	; 8
      0050C6 02                   14120 	.db #0x02	; 2
      0050C7 01                   14121 	.db #0x01	; 1
      0050C8 59                   14122 	.db #0x59	; 89	'Y'
      0050C9 09                   14123 	.db #0x09	; 9
      0050CA 06                   14124 	.db #0x06	; 6
      0050CB 3E                   14125 	.db #0x3e	; 62
      0050CC 41                   14126 	.db #0x41	; 65	'A'
      0050CD 5D                   14127 	.db #0x5d	; 93
      0050CE 59                   14128 	.db #0x59	; 89	'Y'
      0050CF 4E                   14129 	.db #0x4e	; 78	'N'
      0050D0 7C                   14130 	.db #0x7c	; 124
      0050D1 12                   14131 	.db #0x12	; 18
      0050D2 11                   14132 	.db #0x11	; 17
      0050D3 12                   14133 	.db #0x12	; 18
      0050D4 7C                   14134 	.db #0x7c	; 124
      0050D5 7F                   14135 	.db #0x7f	; 127
      0050D6 49                   14136 	.db #0x49	; 73	'I'
      0050D7 49                   14137 	.db #0x49	; 73	'I'
      0050D8 49                   14138 	.db #0x49	; 73	'I'
      0050D9 36                   14139 	.db #0x36	; 54	'6'
      0050DA 3E                   14140 	.db #0x3e	; 62
      0050DB 41                   14141 	.db #0x41	; 65	'A'
      0050DC 41                   14142 	.db #0x41	; 65	'A'
      0050DD 41                   14143 	.db #0x41	; 65	'A'
      0050DE 22                   14144 	.db #0x22	; 34
      0050DF 7F                   14145 	.db #0x7f	; 127
      0050E0 41                   14146 	.db #0x41	; 65	'A'
      0050E1 41                   14147 	.db #0x41	; 65	'A'
      0050E2 41                   14148 	.db #0x41	; 65	'A'
      0050E3 3E                   14149 	.db #0x3e	; 62
      0050E4 7F                   14150 	.db #0x7f	; 127
      0050E5 49                   14151 	.db #0x49	; 73	'I'
      0050E6 49                   14152 	.db #0x49	; 73	'I'
      0050E7 49                   14153 	.db #0x49	; 73	'I'
      0050E8 41                   14154 	.db #0x41	; 65	'A'
      0050E9 7F                   14155 	.db #0x7f	; 127
      0050EA 09                   14156 	.db #0x09	; 9
      0050EB 09                   14157 	.db #0x09	; 9
      0050EC 09                   14158 	.db #0x09	; 9
      0050ED 01                   14159 	.db #0x01	; 1
      0050EE 3E                   14160 	.db #0x3e	; 62
      0050EF 41                   14161 	.db #0x41	; 65	'A'
      0050F0 41                   14162 	.db #0x41	; 65	'A'
      0050F1 51                   14163 	.db #0x51	; 81	'Q'
      0050F2 73                   14164 	.db #0x73	; 115	's'
      0050F3 7F                   14165 	.db #0x7f	; 127
      0050F4 08                   14166 	.db #0x08	; 8
      0050F5 08                   14167 	.db #0x08	; 8
      0050F6 08                   14168 	.db #0x08	; 8
      0050F7 7F                   14169 	.db #0x7f	; 127
      0050F8 00                   14170 	.db #0x00	; 0
      0050F9 41                   14171 	.db #0x41	; 65	'A'
      0050FA 7F                   14172 	.db #0x7f	; 127
      0050FB 41                   14173 	.db #0x41	; 65	'A'
      0050FC 00                   14174 	.db #0x00	; 0
      0050FD 20                   14175 	.db #0x20	; 32
      0050FE 40                   14176 	.db #0x40	; 64
      0050FF 41                   14177 	.db #0x41	; 65	'A'
      005100 3F                   14178 	.db #0x3f	; 63
      005101 01                   14179 	.db #0x01	; 1
      005102 7F                   14180 	.db #0x7f	; 127
      005103 08                   14181 	.db #0x08	; 8
      005104 14                   14182 	.db #0x14	; 20
      005105 22                   14183 	.db #0x22	; 34
      005106 41                   14184 	.db #0x41	; 65	'A'
      005107 7F                   14185 	.db #0x7f	; 127
      005108 40                   14186 	.db #0x40	; 64
      005109 40                   14187 	.db #0x40	; 64
      00510A 40                   14188 	.db #0x40	; 64
      00510B 40                   14189 	.db #0x40	; 64
      00510C 7F                   14190 	.db #0x7f	; 127
      00510D 02                   14191 	.db #0x02	; 2
      00510E 1C                   14192 	.db #0x1c	; 28
      00510F 02                   14193 	.db #0x02	; 2
      005110 7F                   14194 	.db #0x7f	; 127
      005111 7F                   14195 	.db #0x7f	; 127
      005112 04                   14196 	.db #0x04	; 4
      005113 08                   14197 	.db #0x08	; 8
      005114 10                   14198 	.db #0x10	; 16
      005115 7F                   14199 	.db #0x7f	; 127
      005116 3E                   14200 	.db #0x3e	; 62
      005117 41                   14201 	.db #0x41	; 65	'A'
      005118 41                   14202 	.db #0x41	; 65	'A'
      005119 41                   14203 	.db #0x41	; 65	'A'
      00511A 3E                   14204 	.db #0x3e	; 62
      00511B 7F                   14205 	.db #0x7f	; 127
      00511C 09                   14206 	.db #0x09	; 9
      00511D 09                   14207 	.db #0x09	; 9
      00511E 09                   14208 	.db #0x09	; 9
      00511F 06                   14209 	.db #0x06	; 6
      005120 3E                   14210 	.db #0x3e	; 62
      005121 41                   14211 	.db #0x41	; 65	'A'
      005122 51                   14212 	.db #0x51	; 81	'Q'
      005123 21                   14213 	.db #0x21	; 33
      005124 5E                   14214 	.db #0x5e	; 94
      005125 7F                   14215 	.db #0x7f	; 127
      005126 09                   14216 	.db #0x09	; 9
      005127 19                   14217 	.db #0x19	; 25
      005128 29                   14218 	.db #0x29	; 41
      005129 46                   14219 	.db #0x46	; 70	'F'
      00512A 26                   14220 	.db #0x26	; 38
      00512B 49                   14221 	.db #0x49	; 73	'I'
      00512C 49                   14222 	.db #0x49	; 73	'I'
      00512D 49                   14223 	.db #0x49	; 73	'I'
      00512E 32                   14224 	.db #0x32	; 50	'2'
      00512F 03                   14225 	.db #0x03	; 3
      005130 01                   14226 	.db #0x01	; 1
      005131 7F                   14227 	.db #0x7f	; 127
      005132 01                   14228 	.db #0x01	; 1
      005133 03                   14229 	.db #0x03	; 3
      005134 3F                   14230 	.db #0x3f	; 63
      005135 40                   14231 	.db #0x40	; 64
      005136 40                   14232 	.db #0x40	; 64
      005137 40                   14233 	.db #0x40	; 64
      005138 3F                   14234 	.db #0x3f	; 63
      005139 1F                   14235 	.db #0x1f	; 31
      00513A 20                   14236 	.db #0x20	; 32
      00513B 40                   14237 	.db #0x40	; 64
      00513C 20                   14238 	.db #0x20	; 32
      00513D 1F                   14239 	.db #0x1f	; 31
      00513E 3F                   14240 	.db #0x3f	; 63
      00513F 40                   14241 	.db #0x40	; 64
      005140 38                   14242 	.db #0x38	; 56	'8'
      005141 40                   14243 	.db #0x40	; 64
      005142 3F                   14244 	.db #0x3f	; 63
      005143 63                   14245 	.db #0x63	; 99	'c'
      005144 14                   14246 	.db #0x14	; 20
      005145 08                   14247 	.db #0x08	; 8
      005146 14                   14248 	.db #0x14	; 20
      005147 63                   14249 	.db #0x63	; 99	'c'
      005148 03                   14250 	.db #0x03	; 3
      005149 04                   14251 	.db #0x04	; 4
      00514A 78                   14252 	.db #0x78	; 120	'x'
      00514B 04                   14253 	.db #0x04	; 4
      00514C 03                   14254 	.db #0x03	; 3
      00514D 61                   14255 	.db #0x61	; 97	'a'
      00514E 59                   14256 	.db #0x59	; 89	'Y'
      00514F 49                   14257 	.db #0x49	; 73	'I'
      005150 4D                   14258 	.db #0x4d	; 77	'M'
      005151 43                   14259 	.db #0x43	; 67	'C'
      005152 00                   14260 	.db #0x00	; 0
      005153 7F                   14261 	.db #0x7f	; 127
      005154 41                   14262 	.db #0x41	; 65	'A'
      005155 41                   14263 	.db #0x41	; 65	'A'
      005156 41                   14264 	.db #0x41	; 65	'A'
      005157 02                   14265 	.db #0x02	; 2
      005158 04                   14266 	.db #0x04	; 4
      005159 08                   14267 	.db #0x08	; 8
      00515A 10                   14268 	.db #0x10	; 16
      00515B 20                   14269 	.db #0x20	; 32
      00515C 00                   14270 	.db #0x00	; 0
      00515D 41                   14271 	.db #0x41	; 65	'A'
      00515E 41                   14272 	.db #0x41	; 65	'A'
      00515F 41                   14273 	.db #0x41	; 65	'A'
      005160 7F                   14274 	.db #0x7f	; 127
      005161 04                   14275 	.db #0x04	; 4
      005162 02                   14276 	.db #0x02	; 2
      005163 01                   14277 	.db #0x01	; 1
      005164 02                   14278 	.db #0x02	; 2
      005165 04                   14279 	.db #0x04	; 4
      005166 40                   14280 	.db #0x40	; 64
      005167 40                   14281 	.db #0x40	; 64
      005168 40                   14282 	.db #0x40	; 64
      005169 40                   14283 	.db #0x40	; 64
      00516A 40                   14284 	.db #0x40	; 64
      00516B 00                   14285 	.db #0x00	; 0
      00516C 03                   14286 	.db #0x03	; 3
      00516D 07                   14287 	.db #0x07	; 7
      00516E 08                   14288 	.db #0x08	; 8
      00516F 00                   14289 	.db #0x00	; 0
      005170 20                   14290 	.db #0x20	; 32
      005171 54                   14291 	.db #0x54	; 84	'T'
      005172 54                   14292 	.db #0x54	; 84	'T'
      005173 78                   14293 	.db #0x78	; 120	'x'
      005174 40                   14294 	.db #0x40	; 64
      005175 7F                   14295 	.db #0x7f	; 127
      005176 28                   14296 	.db #0x28	; 40
      005177 44                   14297 	.db #0x44	; 68	'D'
      005178 44                   14298 	.db #0x44	; 68	'D'
      005179 38                   14299 	.db #0x38	; 56	'8'
      00517A 38                   14300 	.db #0x38	; 56	'8'
      00517B 44                   14301 	.db #0x44	; 68	'D'
      00517C 44                   14302 	.db #0x44	; 68	'D'
      00517D 44                   14303 	.db #0x44	; 68	'D'
      00517E 28                   14304 	.db #0x28	; 40
      00517F 38                   14305 	.db #0x38	; 56	'8'
      005180 44                   14306 	.db #0x44	; 68	'D'
      005181 44                   14307 	.db #0x44	; 68	'D'
      005182 28                   14308 	.db #0x28	; 40
      005183 7F                   14309 	.db #0x7f	; 127
      005184 38                   14310 	.db #0x38	; 56	'8'
      005185 54                   14311 	.db #0x54	; 84	'T'
      005186 54                   14312 	.db #0x54	; 84	'T'
      005187 54                   14313 	.db #0x54	; 84	'T'
      005188 18                   14314 	.db #0x18	; 24
      005189 00                   14315 	.db #0x00	; 0
      00518A 08                   14316 	.db #0x08	; 8
      00518B 7E                   14317 	.db #0x7e	; 126
      00518C 09                   14318 	.db #0x09	; 9
      00518D 02                   14319 	.db #0x02	; 2
      00518E 18                   14320 	.db #0x18	; 24
      00518F A4                   14321 	.db #0xa4	; 164
      005190 A4                   14322 	.db #0xa4	; 164
      005191 9C                   14323 	.db #0x9c	; 156
      005192 78                   14324 	.db #0x78	; 120	'x'
      005193 7F                   14325 	.db #0x7f	; 127
      005194 08                   14326 	.db #0x08	; 8
      005195 04                   14327 	.db #0x04	; 4
      005196 04                   14328 	.db #0x04	; 4
      005197 78                   14329 	.db #0x78	; 120	'x'
      005198 00                   14330 	.db #0x00	; 0
      005199 44                   14331 	.db #0x44	; 68	'D'
      00519A 7D                   14332 	.db #0x7d	; 125
      00519B 40                   14333 	.db #0x40	; 64
      00519C 00                   14334 	.db #0x00	; 0
      00519D 20                   14335 	.db #0x20	; 32
      00519E 40                   14336 	.db #0x40	; 64
      00519F 40                   14337 	.db #0x40	; 64
      0051A0 3D                   14338 	.db #0x3d	; 61
      0051A1 00                   14339 	.db #0x00	; 0
      0051A2 7F                   14340 	.db #0x7f	; 127
      0051A3 10                   14341 	.db #0x10	; 16
      0051A4 28                   14342 	.db #0x28	; 40
      0051A5 44                   14343 	.db #0x44	; 68	'D'
      0051A6 00                   14344 	.db #0x00	; 0
      0051A7 00                   14345 	.db #0x00	; 0
      0051A8 41                   14346 	.db #0x41	; 65	'A'
      0051A9 7F                   14347 	.db #0x7f	; 127
      0051AA 40                   14348 	.db #0x40	; 64
      0051AB 00                   14349 	.db #0x00	; 0
      0051AC 7C                   14350 	.db #0x7c	; 124
      0051AD 04                   14351 	.db #0x04	; 4
      0051AE 78                   14352 	.db #0x78	; 120	'x'
      0051AF 04                   14353 	.db #0x04	; 4
      0051B0 78                   14354 	.db #0x78	; 120	'x'
      0051B1 7C                   14355 	.db #0x7c	; 124
      0051B2 08                   14356 	.db #0x08	; 8
      0051B3 04                   14357 	.db #0x04	; 4
      0051B4 04                   14358 	.db #0x04	; 4
      0051B5 78                   14359 	.db #0x78	; 120	'x'
      0051B6 38                   14360 	.db #0x38	; 56	'8'
      0051B7 44                   14361 	.db #0x44	; 68	'D'
      0051B8 44                   14362 	.db #0x44	; 68	'D'
      0051B9 44                   14363 	.db #0x44	; 68	'D'
      0051BA 38                   14364 	.db #0x38	; 56	'8'
      0051BB FC                   14365 	.db #0xfc	; 252
      0051BC 18                   14366 	.db #0x18	; 24
      0051BD 24                   14367 	.db #0x24	; 36
      0051BE 24                   14368 	.db #0x24	; 36
      0051BF 18                   14369 	.db #0x18	; 24
      0051C0 18                   14370 	.db #0x18	; 24
      0051C1 24                   14371 	.db #0x24	; 36
      0051C2 24                   14372 	.db #0x24	; 36
      0051C3 18                   14373 	.db #0x18	; 24
      0051C4 FC                   14374 	.db #0xfc	; 252
      0051C5 7C                   14375 	.db #0x7c	; 124
      0051C6 08                   14376 	.db #0x08	; 8
      0051C7 04                   14377 	.db #0x04	; 4
      0051C8 04                   14378 	.db #0x04	; 4
      0051C9 08                   14379 	.db #0x08	; 8
      0051CA 48                   14380 	.db #0x48	; 72	'H'
      0051CB 54                   14381 	.db #0x54	; 84	'T'
      0051CC 54                   14382 	.db #0x54	; 84	'T'
      0051CD 54                   14383 	.db #0x54	; 84	'T'
      0051CE 24                   14384 	.db #0x24	; 36
      0051CF 04                   14385 	.db #0x04	; 4
      0051D0 04                   14386 	.db #0x04	; 4
      0051D1 3F                   14387 	.db #0x3f	; 63
      0051D2 44                   14388 	.db #0x44	; 68	'D'
      0051D3 24                   14389 	.db #0x24	; 36
      0051D4 3C                   14390 	.db #0x3c	; 60
      0051D5 40                   14391 	.db #0x40	; 64
      0051D6 40                   14392 	.db #0x40	; 64
      0051D7 20                   14393 	.db #0x20	; 32
      0051D8 7C                   14394 	.db #0x7c	; 124
      0051D9 1C                   14395 	.db #0x1c	; 28
      0051DA 20                   14396 	.db #0x20	; 32
      0051DB 40                   14397 	.db #0x40	; 64
      0051DC 20                   14398 	.db #0x20	; 32
      0051DD 1C                   14399 	.db #0x1c	; 28
      0051DE 3C                   14400 	.db #0x3c	; 60
      0051DF 40                   14401 	.db #0x40	; 64
      0051E0 30                   14402 	.db #0x30	; 48	'0'
      0051E1 40                   14403 	.db #0x40	; 64
      0051E2 3C                   14404 	.db #0x3c	; 60
      0051E3 44                   14405 	.db #0x44	; 68	'D'
      0051E4 28                   14406 	.db #0x28	; 40
      0051E5 10                   14407 	.db #0x10	; 16
      0051E6 28                   14408 	.db #0x28	; 40
      0051E7 44                   14409 	.db #0x44	; 68	'D'
      0051E8 4C                   14410 	.db #0x4c	; 76	'L'
      0051E9 90                   14411 	.db #0x90	; 144
      0051EA 90                   14412 	.db #0x90	; 144
      0051EB 90                   14413 	.db #0x90	; 144
      0051EC 7C                   14414 	.db #0x7c	; 124
      0051ED 44                   14415 	.db #0x44	; 68	'D'
      0051EE 64                   14416 	.db #0x64	; 100	'd'
      0051EF 54                   14417 	.db #0x54	; 84	'T'
      0051F0 4C                   14418 	.db #0x4c	; 76	'L'
      0051F1 44                   14419 	.db #0x44	; 68	'D'
      0051F2 00                   14420 	.db #0x00	; 0
      0051F3 08                   14421 	.db #0x08	; 8
      0051F4 36                   14422 	.db #0x36	; 54	'6'
      0051F5 41                   14423 	.db #0x41	; 65	'A'
      0051F6 00                   14424 	.db #0x00	; 0
      0051F7 00                   14425 	.db #0x00	; 0
      0051F8 00                   14426 	.db #0x00	; 0
      0051F9 77                   14427 	.db #0x77	; 119	'w'
      0051FA 00                   14428 	.db #0x00	; 0
      0051FB 00                   14429 	.db #0x00	; 0
      0051FC 00                   14430 	.db #0x00	; 0
      0051FD 41                   14431 	.db #0x41	; 65	'A'
      0051FE 36                   14432 	.db #0x36	; 54	'6'
      0051FF 08                   14433 	.db #0x08	; 8
      005200 00                   14434 	.db #0x00	; 0
      005201 02                   14435 	.db #0x02	; 2
      005202 01                   14436 	.db #0x01	; 1
      005203 02                   14437 	.db #0x02	; 2
      005204 04                   14438 	.db #0x04	; 4
      005205 02                   14439 	.db #0x02	; 2
      005206 3C                   14440 	.db #0x3c	; 60
      005207 26                   14441 	.db #0x26	; 38
      005208 23                   14442 	.db #0x23	; 35
      005209 26                   14443 	.db #0x26	; 38
      00520A 3C                   14444 	.db #0x3c	; 60
      00520B 1E                   14445 	.db #0x1e	; 30
      00520C A1                   14446 	.db #0xa1	; 161
      00520D A1                   14447 	.db #0xa1	; 161
      00520E 61                   14448 	.db #0x61	; 97	'a'
      00520F 12                   14449 	.db #0x12	; 18
      005210 3A                   14450 	.db #0x3a	; 58
      005211 40                   14451 	.db #0x40	; 64
      005212 40                   14452 	.db #0x40	; 64
      005213 20                   14453 	.db #0x20	; 32
      005214 7A                   14454 	.db #0x7a	; 122	'z'
      005215 38                   14455 	.db #0x38	; 56	'8'
      005216 54                   14456 	.db #0x54	; 84	'T'
      005217 54                   14457 	.db #0x54	; 84	'T'
      005218 55                   14458 	.db #0x55	; 85	'U'
      005219 59                   14459 	.db #0x59	; 89	'Y'
      00521A 21                   14460 	.db #0x21	; 33
      00521B 55                   14461 	.db #0x55	; 85	'U'
      00521C 55                   14462 	.db #0x55	; 85	'U'
      00521D 79                   14463 	.db #0x79	; 121	'y'
      00521E 41                   14464 	.db #0x41	; 65	'A'
      00521F 22                   14465 	.db #0x22	; 34
      005220 54                   14466 	.db #0x54	; 84	'T'
      005221 54                   14467 	.db #0x54	; 84	'T'
      005222 78                   14468 	.db #0x78	; 120	'x'
      005223 42                   14469 	.db #0x42	; 66	'B'
      005224 21                   14470 	.db #0x21	; 33
      005225 55                   14471 	.db #0x55	; 85	'U'
      005226 54                   14472 	.db #0x54	; 84	'T'
      005227 78                   14473 	.db #0x78	; 120	'x'
      005228 40                   14474 	.db #0x40	; 64
      005229 20                   14475 	.db #0x20	; 32
      00522A 54                   14476 	.db #0x54	; 84	'T'
      00522B 55                   14477 	.db #0x55	; 85	'U'
      00522C 79                   14478 	.db #0x79	; 121	'y'
      00522D 40                   14479 	.db #0x40	; 64
      00522E 0C                   14480 	.db #0x0c	; 12
      00522F 1E                   14481 	.db #0x1e	; 30
      005230 52                   14482 	.db #0x52	; 82	'R'
      005231 72                   14483 	.db #0x72	; 114	'r'
      005232 12                   14484 	.db #0x12	; 18
      005233 39                   14485 	.db #0x39	; 57	'9'
      005234 55                   14486 	.db #0x55	; 85	'U'
      005235 55                   14487 	.db #0x55	; 85	'U'
      005236 55                   14488 	.db #0x55	; 85	'U'
      005237 59                   14489 	.db #0x59	; 89	'Y'
      005238 39                   14490 	.db #0x39	; 57	'9'
      005239 54                   14491 	.db #0x54	; 84	'T'
      00523A 54                   14492 	.db #0x54	; 84	'T'
      00523B 54                   14493 	.db #0x54	; 84	'T'
      00523C 59                   14494 	.db #0x59	; 89	'Y'
      00523D 39                   14495 	.db #0x39	; 57	'9'
      00523E 55                   14496 	.db #0x55	; 85	'U'
      00523F 54                   14497 	.db #0x54	; 84	'T'
      005240 54                   14498 	.db #0x54	; 84	'T'
      005241 58                   14499 	.db #0x58	; 88	'X'
      005242 00                   14500 	.db #0x00	; 0
      005243 00                   14501 	.db #0x00	; 0
      005244 45                   14502 	.db #0x45	; 69	'E'
      005245 7C                   14503 	.db #0x7c	; 124
      005246 41                   14504 	.db #0x41	; 65	'A'
      005247 00                   14505 	.db #0x00	; 0
      005248 02                   14506 	.db #0x02	; 2
      005249 45                   14507 	.db #0x45	; 69	'E'
      00524A 7D                   14508 	.db #0x7d	; 125
      00524B 42                   14509 	.db #0x42	; 66	'B'
      00524C 00                   14510 	.db #0x00	; 0
      00524D 01                   14511 	.db #0x01	; 1
      00524E 45                   14512 	.db #0x45	; 69	'E'
      00524F 7C                   14513 	.db #0x7c	; 124
      005250 40                   14514 	.db #0x40	; 64
      005251 7D                   14515 	.db #0x7d	; 125
      005252 12                   14516 	.db #0x12	; 18
      005253 11                   14517 	.db #0x11	; 17
      005254 12                   14518 	.db #0x12	; 18
      005255 7D                   14519 	.db #0x7d	; 125
      005256 F0                   14520 	.db #0xf0	; 240
      005257 28                   14521 	.db #0x28	; 40
      005258 25                   14522 	.db #0x25	; 37
      005259 28                   14523 	.db #0x28	; 40
      00525A F0                   14524 	.db #0xf0	; 240
      00525B 7C                   14525 	.db #0x7c	; 124
      00525C 54                   14526 	.db #0x54	; 84	'T'
      00525D 55                   14527 	.db #0x55	; 85	'U'
      00525E 45                   14528 	.db #0x45	; 69	'E'
      00525F 00                   14529 	.db #0x00	; 0
      005260 20                   14530 	.db #0x20	; 32
      005261 54                   14531 	.db #0x54	; 84	'T'
      005262 54                   14532 	.db #0x54	; 84	'T'
      005263 7C                   14533 	.db #0x7c	; 124
      005264 54                   14534 	.db #0x54	; 84	'T'
      005265 7C                   14535 	.db #0x7c	; 124
      005266 0A                   14536 	.db #0x0a	; 10
      005267 09                   14537 	.db #0x09	; 9
      005268 7F                   14538 	.db #0x7f	; 127
      005269 49                   14539 	.db #0x49	; 73	'I'
      00526A 32                   14540 	.db #0x32	; 50	'2'
      00526B 49                   14541 	.db #0x49	; 73	'I'
      00526C 49                   14542 	.db #0x49	; 73	'I'
      00526D 49                   14543 	.db #0x49	; 73	'I'
      00526E 32                   14544 	.db #0x32	; 50	'2'
      00526F 3A                   14545 	.db #0x3a	; 58
      005270 44                   14546 	.db #0x44	; 68	'D'
      005271 44                   14547 	.db #0x44	; 68	'D'
      005272 44                   14548 	.db #0x44	; 68	'D'
      005273 3A                   14549 	.db #0x3a	; 58
      005274 32                   14550 	.db #0x32	; 50	'2'
      005275 4A                   14551 	.db #0x4a	; 74	'J'
      005276 48                   14552 	.db #0x48	; 72	'H'
      005277 48                   14553 	.db #0x48	; 72	'H'
      005278 30                   14554 	.db #0x30	; 48	'0'
      005279 3A                   14555 	.db #0x3a	; 58
      00527A 41                   14556 	.db #0x41	; 65	'A'
      00527B 41                   14557 	.db #0x41	; 65	'A'
      00527C 21                   14558 	.db #0x21	; 33
      00527D 7A                   14559 	.db #0x7a	; 122	'z'
      00527E 3A                   14560 	.db #0x3a	; 58
      00527F 42                   14561 	.db #0x42	; 66	'B'
      005280 40                   14562 	.db #0x40	; 64
      005281 20                   14563 	.db #0x20	; 32
      005282 78                   14564 	.db #0x78	; 120	'x'
      005283 00                   14565 	.db #0x00	; 0
      005284 9D                   14566 	.db #0x9d	; 157
      005285 A0                   14567 	.db #0xa0	; 160
      005286 A0                   14568 	.db #0xa0	; 160
      005287 7D                   14569 	.db #0x7d	; 125
      005288 3D                   14570 	.db #0x3d	; 61
      005289 42                   14571 	.db #0x42	; 66	'B'
      00528A 42                   14572 	.db #0x42	; 66	'B'
      00528B 42                   14573 	.db #0x42	; 66	'B'
      00528C 3D                   14574 	.db #0x3d	; 61
      00528D 3D                   14575 	.db #0x3d	; 61
      00528E 40                   14576 	.db #0x40	; 64
      00528F 40                   14577 	.db #0x40	; 64
      005290 40                   14578 	.db #0x40	; 64
      005291 3D                   14579 	.db #0x3d	; 61
      005292 3C                   14580 	.db #0x3c	; 60
      005293 24                   14581 	.db #0x24	; 36
      005294 FF                   14582 	.db #0xff	; 255
      005295 24                   14583 	.db #0x24	; 36
      005296 24                   14584 	.db #0x24	; 36
      005297 48                   14585 	.db #0x48	; 72	'H'
      005298 7E                   14586 	.db #0x7e	; 126
      005299 49                   14587 	.db #0x49	; 73	'I'
      00529A 43                   14588 	.db #0x43	; 67	'C'
      00529B 66                   14589 	.db #0x66	; 102	'f'
      00529C 2B                   14590 	.db #0x2b	; 43
      00529D 2F                   14591 	.db #0x2f	; 47
      00529E FC                   14592 	.db #0xfc	; 252
      00529F 2F                   14593 	.db #0x2f	; 47
      0052A0 2B                   14594 	.db #0x2b	; 43
      0052A1 FF                   14595 	.db #0xff	; 255
      0052A2 09                   14596 	.db #0x09	; 9
      0052A3 29                   14597 	.db #0x29	; 41
      0052A4 F6                   14598 	.db #0xf6	; 246
      0052A5 20                   14599 	.db #0x20	; 32
      0052A6 C0                   14600 	.db #0xc0	; 192
      0052A7 88                   14601 	.db #0x88	; 136
      0052A8 7E                   14602 	.db #0x7e	; 126
      0052A9 09                   14603 	.db #0x09	; 9
      0052AA 03                   14604 	.db #0x03	; 3
      0052AB 20                   14605 	.db #0x20	; 32
      0052AC 54                   14606 	.db #0x54	; 84	'T'
      0052AD 54                   14607 	.db #0x54	; 84	'T'
      0052AE 79                   14608 	.db #0x79	; 121	'y'
      0052AF 41                   14609 	.db #0x41	; 65	'A'
      0052B0 00                   14610 	.db #0x00	; 0
      0052B1 00                   14611 	.db #0x00	; 0
      0052B2 44                   14612 	.db #0x44	; 68	'D'
      0052B3 7D                   14613 	.db #0x7d	; 125
      0052B4 41                   14614 	.db #0x41	; 65	'A'
      0052B5 30                   14615 	.db #0x30	; 48	'0'
      0052B6 48                   14616 	.db #0x48	; 72	'H'
      0052B7 48                   14617 	.db #0x48	; 72	'H'
      0052B8 4A                   14618 	.db #0x4a	; 74	'J'
      0052B9 32                   14619 	.db #0x32	; 50	'2'
      0052BA 38                   14620 	.db #0x38	; 56	'8'
      0052BB 40                   14621 	.db #0x40	; 64
      0052BC 40                   14622 	.db #0x40	; 64
      0052BD 22                   14623 	.db #0x22	; 34
      0052BE 7A                   14624 	.db #0x7a	; 122	'z'
      0052BF 00                   14625 	.db #0x00	; 0
      0052C0 7A                   14626 	.db #0x7a	; 122	'z'
      0052C1 0A                   14627 	.db #0x0a	; 10
      0052C2 0A                   14628 	.db #0x0a	; 10
      0052C3 72                   14629 	.db #0x72	; 114	'r'
      0052C4 7D                   14630 	.db #0x7d	; 125
      0052C5 0D                   14631 	.db #0x0d	; 13
      0052C6 19                   14632 	.db #0x19	; 25
      0052C7 31                   14633 	.db #0x31	; 49	'1'
      0052C8 7D                   14634 	.db #0x7d	; 125
      0052C9 26                   14635 	.db #0x26	; 38
      0052CA 29                   14636 	.db #0x29	; 41
      0052CB 29                   14637 	.db #0x29	; 41
      0052CC 2F                   14638 	.db #0x2f	; 47
      0052CD 28                   14639 	.db #0x28	; 40
      0052CE 26                   14640 	.db #0x26	; 38
      0052CF 29                   14641 	.db #0x29	; 41
      0052D0 29                   14642 	.db #0x29	; 41
      0052D1 29                   14643 	.db #0x29	; 41
      0052D2 26                   14644 	.db #0x26	; 38
      0052D3 30                   14645 	.db #0x30	; 48	'0'
      0052D4 48                   14646 	.db #0x48	; 72	'H'
      0052D5 4D                   14647 	.db #0x4d	; 77	'M'
      0052D6 40                   14648 	.db #0x40	; 64
      0052D7 20                   14649 	.db #0x20	; 32
      0052D8 38                   14650 	.db #0x38	; 56	'8'
      0052D9 08                   14651 	.db #0x08	; 8
      0052DA 08                   14652 	.db #0x08	; 8
      0052DB 08                   14653 	.db #0x08	; 8
      0052DC 08                   14654 	.db #0x08	; 8
      0052DD 08                   14655 	.db #0x08	; 8
      0052DE 08                   14656 	.db #0x08	; 8
      0052DF 08                   14657 	.db #0x08	; 8
      0052E0 08                   14658 	.db #0x08	; 8
      0052E1 38                   14659 	.db #0x38	; 56	'8'
      0052E2 2F                   14660 	.db #0x2f	; 47
      0052E3 10                   14661 	.db #0x10	; 16
      0052E4 C8                   14662 	.db #0xc8	; 200
      0052E5 AC                   14663 	.db #0xac	; 172
      0052E6 BA                   14664 	.db #0xba	; 186
      0052E7 2F                   14665 	.db #0x2f	; 47
      0052E8 10                   14666 	.db #0x10	; 16
      0052E9 28                   14667 	.db #0x28	; 40
      0052EA 34                   14668 	.db #0x34	; 52	'4'
      0052EB FA                   14669 	.db #0xfa	; 250
      0052EC 00                   14670 	.db #0x00	; 0
      0052ED 00                   14671 	.db #0x00	; 0
      0052EE 7B                   14672 	.db #0x7b	; 123
      0052EF 00                   14673 	.db #0x00	; 0
      0052F0 00                   14674 	.db #0x00	; 0
      0052F1 08                   14675 	.db #0x08	; 8
      0052F2 14                   14676 	.db #0x14	; 20
      0052F3 2A                   14677 	.db #0x2a	; 42
      0052F4 14                   14678 	.db #0x14	; 20
      0052F5 22                   14679 	.db #0x22	; 34
      0052F6 22                   14680 	.db #0x22	; 34
      0052F7 14                   14681 	.db #0x14	; 20
      0052F8 2A                   14682 	.db #0x2a	; 42
      0052F9 14                   14683 	.db #0x14	; 20
      0052FA 08                   14684 	.db #0x08	; 8
      0052FB AA                   14685 	.db #0xaa	; 170
      0052FC 00                   14686 	.db #0x00	; 0
      0052FD 55                   14687 	.db #0x55	; 85	'U'
      0052FE 00                   14688 	.db #0x00	; 0
      0052FF AA                   14689 	.db #0xaa	; 170
      005300 AA                   14690 	.db #0xaa	; 170
      005301 55                   14691 	.db #0x55	; 85	'U'
      005302 AA                   14692 	.db #0xaa	; 170
      005303 55                   14693 	.db #0x55	; 85	'U'
      005304 AA                   14694 	.db #0xaa	; 170
      005305 00                   14695 	.db #0x00	; 0
      005306 00                   14696 	.db #0x00	; 0
      005307 00                   14697 	.db #0x00	; 0
      005308 FF                   14698 	.db #0xff	; 255
      005309 00                   14699 	.db #0x00	; 0
      00530A 10                   14700 	.db #0x10	; 16
      00530B 10                   14701 	.db #0x10	; 16
      00530C 10                   14702 	.db #0x10	; 16
      00530D FF                   14703 	.db #0xff	; 255
      00530E 00                   14704 	.db #0x00	; 0
      00530F 14                   14705 	.db #0x14	; 20
      005310 14                   14706 	.db #0x14	; 20
      005311 14                   14707 	.db #0x14	; 20
      005312 FF                   14708 	.db #0xff	; 255
      005313 00                   14709 	.db #0x00	; 0
      005314 10                   14710 	.db #0x10	; 16
      005315 10                   14711 	.db #0x10	; 16
      005316 FF                   14712 	.db #0xff	; 255
      005317 00                   14713 	.db #0x00	; 0
      005318 FF                   14714 	.db #0xff	; 255
      005319 10                   14715 	.db #0x10	; 16
      00531A 10                   14716 	.db #0x10	; 16
      00531B F0                   14717 	.db #0xf0	; 240
      00531C 10                   14718 	.db #0x10	; 16
      00531D F0                   14719 	.db #0xf0	; 240
      00531E 14                   14720 	.db #0x14	; 20
      00531F 14                   14721 	.db #0x14	; 20
      005320 14                   14722 	.db #0x14	; 20
      005321 FC                   14723 	.db #0xfc	; 252
      005322 00                   14724 	.db #0x00	; 0
      005323 14                   14725 	.db #0x14	; 20
      005324 14                   14726 	.db #0x14	; 20
      005325 F7                   14727 	.db #0xf7	; 247
      005326 00                   14728 	.db #0x00	; 0
      005327 FF                   14729 	.db #0xff	; 255
      005328 00                   14730 	.db #0x00	; 0
      005329 00                   14731 	.db #0x00	; 0
      00532A FF                   14732 	.db #0xff	; 255
      00532B 00                   14733 	.db #0x00	; 0
      00532C FF                   14734 	.db #0xff	; 255
      00532D 14                   14735 	.db #0x14	; 20
      00532E 14                   14736 	.db #0x14	; 20
      00532F F4                   14737 	.db #0xf4	; 244
      005330 04                   14738 	.db #0x04	; 4
      005331 FC                   14739 	.db #0xfc	; 252
      005332 14                   14740 	.db #0x14	; 20
      005333 14                   14741 	.db #0x14	; 20
      005334 17                   14742 	.db #0x17	; 23
      005335 10                   14743 	.db #0x10	; 16
      005336 1F                   14744 	.db #0x1f	; 31
      005337 10                   14745 	.db #0x10	; 16
      005338 10                   14746 	.db #0x10	; 16
      005339 1F                   14747 	.db #0x1f	; 31
      00533A 10                   14748 	.db #0x10	; 16
      00533B 1F                   14749 	.db #0x1f	; 31
      00533C 14                   14750 	.db #0x14	; 20
      00533D 14                   14751 	.db #0x14	; 20
      00533E 14                   14752 	.db #0x14	; 20
      00533F 1F                   14753 	.db #0x1f	; 31
      005340 00                   14754 	.db #0x00	; 0
      005341 10                   14755 	.db #0x10	; 16
      005342 10                   14756 	.db #0x10	; 16
      005343 10                   14757 	.db #0x10	; 16
      005344 F0                   14758 	.db #0xf0	; 240
      005345 00                   14759 	.db #0x00	; 0
      005346 00                   14760 	.db #0x00	; 0
      005347 00                   14761 	.db #0x00	; 0
      005348 00                   14762 	.db #0x00	; 0
      005349 1F                   14763 	.db #0x1f	; 31
      00534A 10                   14764 	.db #0x10	; 16
      00534B 10                   14765 	.db #0x10	; 16
      00534C 10                   14766 	.db #0x10	; 16
      00534D 10                   14767 	.db #0x10	; 16
      00534E 1F                   14768 	.db #0x1f	; 31
      00534F 10                   14769 	.db #0x10	; 16
      005350 10                   14770 	.db #0x10	; 16
      005351 10                   14771 	.db #0x10	; 16
      005352 10                   14772 	.db #0x10	; 16
      005353 F0                   14773 	.db #0xf0	; 240
      005354 10                   14774 	.db #0x10	; 16
      005355 00                   14775 	.db #0x00	; 0
      005356 00                   14776 	.db #0x00	; 0
      005357 00                   14777 	.db #0x00	; 0
      005358 FF                   14778 	.db #0xff	; 255
      005359 10                   14779 	.db #0x10	; 16
      00535A 10                   14780 	.db #0x10	; 16
      00535B 10                   14781 	.db #0x10	; 16
      00535C 10                   14782 	.db #0x10	; 16
      00535D 10                   14783 	.db #0x10	; 16
      00535E 10                   14784 	.db #0x10	; 16
      00535F 10                   14785 	.db #0x10	; 16
      005360 10                   14786 	.db #0x10	; 16
      005361 10                   14787 	.db #0x10	; 16
      005362 FF                   14788 	.db #0xff	; 255
      005363 10                   14789 	.db #0x10	; 16
      005364 00                   14790 	.db #0x00	; 0
      005365 00                   14791 	.db #0x00	; 0
      005366 00                   14792 	.db #0x00	; 0
      005367 FF                   14793 	.db #0xff	; 255
      005368 14                   14794 	.db #0x14	; 20
      005369 00                   14795 	.db #0x00	; 0
      00536A 00                   14796 	.db #0x00	; 0
      00536B FF                   14797 	.db #0xff	; 255
      00536C 00                   14798 	.db #0x00	; 0
      00536D FF                   14799 	.db #0xff	; 255
      00536E 00                   14800 	.db #0x00	; 0
      00536F 00                   14801 	.db #0x00	; 0
      005370 1F                   14802 	.db #0x1f	; 31
      005371 10                   14803 	.db #0x10	; 16
      005372 17                   14804 	.db #0x17	; 23
      005373 00                   14805 	.db #0x00	; 0
      005374 00                   14806 	.db #0x00	; 0
      005375 FC                   14807 	.db #0xfc	; 252
      005376 04                   14808 	.db #0x04	; 4
      005377 F4                   14809 	.db #0xf4	; 244
      005378 14                   14810 	.db #0x14	; 20
      005379 14                   14811 	.db #0x14	; 20
      00537A 17                   14812 	.db #0x17	; 23
      00537B 10                   14813 	.db #0x10	; 16
      00537C 17                   14814 	.db #0x17	; 23
      00537D 14                   14815 	.db #0x14	; 20
      00537E 14                   14816 	.db #0x14	; 20
      00537F F4                   14817 	.db #0xf4	; 244
      005380 04                   14818 	.db #0x04	; 4
      005381 F4                   14819 	.db #0xf4	; 244
      005382 00                   14820 	.db #0x00	; 0
      005383 00                   14821 	.db #0x00	; 0
      005384 FF                   14822 	.db #0xff	; 255
      005385 00                   14823 	.db #0x00	; 0
      005386 F7                   14824 	.db #0xf7	; 247
      005387 14                   14825 	.db #0x14	; 20
      005388 14                   14826 	.db #0x14	; 20
      005389 14                   14827 	.db #0x14	; 20
      00538A 14                   14828 	.db #0x14	; 20
      00538B 14                   14829 	.db #0x14	; 20
      00538C 14                   14830 	.db #0x14	; 20
      00538D 14                   14831 	.db #0x14	; 20
      00538E F7                   14832 	.db #0xf7	; 247
      00538F 00                   14833 	.db #0x00	; 0
      005390 F7                   14834 	.db #0xf7	; 247
      005391 14                   14835 	.db #0x14	; 20
      005392 14                   14836 	.db #0x14	; 20
      005393 14                   14837 	.db #0x14	; 20
      005394 17                   14838 	.db #0x17	; 23
      005395 14                   14839 	.db #0x14	; 20
      005396 10                   14840 	.db #0x10	; 16
      005397 10                   14841 	.db #0x10	; 16
      005398 1F                   14842 	.db #0x1f	; 31
      005399 10                   14843 	.db #0x10	; 16
      00539A 1F                   14844 	.db #0x1f	; 31
      00539B 14                   14845 	.db #0x14	; 20
      00539C 14                   14846 	.db #0x14	; 20
      00539D 14                   14847 	.db #0x14	; 20
      00539E F4                   14848 	.db #0xf4	; 244
      00539F 14                   14849 	.db #0x14	; 20
      0053A0 10                   14850 	.db #0x10	; 16
      0053A1 10                   14851 	.db #0x10	; 16
      0053A2 F0                   14852 	.db #0xf0	; 240
      0053A3 10                   14853 	.db #0x10	; 16
      0053A4 F0                   14854 	.db #0xf0	; 240
      0053A5 00                   14855 	.db #0x00	; 0
      0053A6 00                   14856 	.db #0x00	; 0
      0053A7 1F                   14857 	.db #0x1f	; 31
      0053A8 10                   14858 	.db #0x10	; 16
      0053A9 1F                   14859 	.db #0x1f	; 31
      0053AA 00                   14860 	.db #0x00	; 0
      0053AB 00                   14861 	.db #0x00	; 0
      0053AC 00                   14862 	.db #0x00	; 0
      0053AD 1F                   14863 	.db #0x1f	; 31
      0053AE 14                   14864 	.db #0x14	; 20
      0053AF 00                   14865 	.db #0x00	; 0
      0053B0 00                   14866 	.db #0x00	; 0
      0053B1 00                   14867 	.db #0x00	; 0
      0053B2 FC                   14868 	.db #0xfc	; 252
      0053B3 14                   14869 	.db #0x14	; 20
      0053B4 00                   14870 	.db #0x00	; 0
      0053B5 00                   14871 	.db #0x00	; 0
      0053B6 F0                   14872 	.db #0xf0	; 240
      0053B7 10                   14873 	.db #0x10	; 16
      0053B8 F0                   14874 	.db #0xf0	; 240
      0053B9 10                   14875 	.db #0x10	; 16
      0053BA 10                   14876 	.db #0x10	; 16
      0053BB FF                   14877 	.db #0xff	; 255
      0053BC 10                   14878 	.db #0x10	; 16
      0053BD FF                   14879 	.db #0xff	; 255
      0053BE 14                   14880 	.db #0x14	; 20
      0053BF 14                   14881 	.db #0x14	; 20
      0053C0 14                   14882 	.db #0x14	; 20
      0053C1 FF                   14883 	.db #0xff	; 255
      0053C2 14                   14884 	.db #0x14	; 20
      0053C3 10                   14885 	.db #0x10	; 16
      0053C4 10                   14886 	.db #0x10	; 16
      0053C5 10                   14887 	.db #0x10	; 16
      0053C6 1F                   14888 	.db #0x1f	; 31
      0053C7 00                   14889 	.db #0x00	; 0
      0053C8 00                   14890 	.db #0x00	; 0
      0053C9 00                   14891 	.db #0x00	; 0
      0053CA 00                   14892 	.db #0x00	; 0
      0053CB F0                   14893 	.db #0xf0	; 240
      0053CC 10                   14894 	.db #0x10	; 16
      0053CD FF                   14895 	.db #0xff	; 255
      0053CE FF                   14896 	.db #0xff	; 255
      0053CF FF                   14897 	.db #0xff	; 255
      0053D0 FF                   14898 	.db #0xff	; 255
      0053D1 FF                   14899 	.db #0xff	; 255
      0053D2 F0                   14900 	.db #0xf0	; 240
      0053D3 F0                   14901 	.db #0xf0	; 240
      0053D4 F0                   14902 	.db #0xf0	; 240
      0053D5 F0                   14903 	.db #0xf0	; 240
      0053D6 F0                   14904 	.db #0xf0	; 240
      0053D7 FF                   14905 	.db #0xff	; 255
      0053D8 FF                   14906 	.db #0xff	; 255
      0053D9 FF                   14907 	.db #0xff	; 255
      0053DA 00                   14908 	.db #0x00	; 0
      0053DB 00                   14909 	.db #0x00	; 0
      0053DC 00                   14910 	.db #0x00	; 0
      0053DD 00                   14911 	.db #0x00	; 0
      0053DE 00                   14912 	.db #0x00	; 0
      0053DF FF                   14913 	.db #0xff	; 255
      0053E0 FF                   14914 	.db #0xff	; 255
      0053E1 0F                   14915 	.db #0x0f	; 15
      0053E2 0F                   14916 	.db #0x0f	; 15
      0053E3 0F                   14917 	.db #0x0f	; 15
      0053E4 0F                   14918 	.db #0x0f	; 15
      0053E5 0F                   14919 	.db #0x0f	; 15
      0053E6 38                   14920 	.db #0x38	; 56	'8'
      0053E7 44                   14921 	.db #0x44	; 68	'D'
      0053E8 44                   14922 	.db #0x44	; 68	'D'
      0053E9 38                   14923 	.db #0x38	; 56	'8'
      0053EA 44                   14924 	.db #0x44	; 68	'D'
      0053EB FC                   14925 	.db #0xfc	; 252
      0053EC 4A                   14926 	.db #0x4a	; 74	'J'
      0053ED 4A                   14927 	.db #0x4a	; 74	'J'
      0053EE 4A                   14928 	.db #0x4a	; 74	'J'
      0053EF 34                   14929 	.db #0x34	; 52	'4'
      0053F0 7E                   14930 	.db #0x7e	; 126
      0053F1 02                   14931 	.db #0x02	; 2
      0053F2 02                   14932 	.db #0x02	; 2
      0053F3 06                   14933 	.db #0x06	; 6
      0053F4 06                   14934 	.db #0x06	; 6
      0053F5 02                   14935 	.db #0x02	; 2
      0053F6 7E                   14936 	.db #0x7e	; 126
      0053F7 02                   14937 	.db #0x02	; 2
      0053F8 7E                   14938 	.db #0x7e	; 126
      0053F9 02                   14939 	.db #0x02	; 2
      0053FA 63                   14940 	.db #0x63	; 99	'c'
      0053FB 55                   14941 	.db #0x55	; 85	'U'
      0053FC 49                   14942 	.db #0x49	; 73	'I'
      0053FD 41                   14943 	.db #0x41	; 65	'A'
      0053FE 63                   14944 	.db #0x63	; 99	'c'
      0053FF 38                   14945 	.db #0x38	; 56	'8'
      005400 44                   14946 	.db #0x44	; 68	'D'
      005401 44                   14947 	.db #0x44	; 68	'D'
      005402 3C                   14948 	.db #0x3c	; 60
      005403 04                   14949 	.db #0x04	; 4
      005404 40                   14950 	.db #0x40	; 64
      005405 7E                   14951 	.db #0x7e	; 126
      005406 20                   14952 	.db #0x20	; 32
      005407 1E                   14953 	.db #0x1e	; 30
      005408 20                   14954 	.db #0x20	; 32
      005409 06                   14955 	.db #0x06	; 6
      00540A 02                   14956 	.db #0x02	; 2
      00540B 7E                   14957 	.db #0x7e	; 126
      00540C 02                   14958 	.db #0x02	; 2
      00540D 02                   14959 	.db #0x02	; 2
      00540E 99                   14960 	.db #0x99	; 153
      00540F A5                   14961 	.db #0xa5	; 165
      005410 E7                   14962 	.db #0xe7	; 231
      005411 A5                   14963 	.db #0xa5	; 165
      005412 99                   14964 	.db #0x99	; 153
      005413 1C                   14965 	.db #0x1c	; 28
      005414 2A                   14966 	.db #0x2a	; 42
      005415 49                   14967 	.db #0x49	; 73	'I'
      005416 2A                   14968 	.db #0x2a	; 42
      005417 1C                   14969 	.db #0x1c	; 28
      005418 4C                   14970 	.db #0x4c	; 76	'L'
      005419 72                   14971 	.db #0x72	; 114	'r'
      00541A 01                   14972 	.db #0x01	; 1
      00541B 72                   14973 	.db #0x72	; 114	'r'
      00541C 4C                   14974 	.db #0x4c	; 76	'L'
      00541D 30                   14975 	.db #0x30	; 48	'0'
      00541E 4A                   14976 	.db #0x4a	; 74	'J'
      00541F 4D                   14977 	.db #0x4d	; 77	'M'
      005420 4D                   14978 	.db #0x4d	; 77	'M'
      005421 30                   14979 	.db #0x30	; 48	'0'
      005422 30                   14980 	.db #0x30	; 48	'0'
      005423 48                   14981 	.db #0x48	; 72	'H'
      005424 78                   14982 	.db #0x78	; 120	'x'
      005425 48                   14983 	.db #0x48	; 72	'H'
      005426 30                   14984 	.db #0x30	; 48	'0'
      005427 BC                   14985 	.db #0xbc	; 188
      005428 62                   14986 	.db #0x62	; 98	'b'
      005429 5A                   14987 	.db #0x5a	; 90	'Z'
      00542A 46                   14988 	.db #0x46	; 70	'F'
      00542B 3D                   14989 	.db #0x3d	; 61
      00542C 3E                   14990 	.db #0x3e	; 62
      00542D 49                   14991 	.db #0x49	; 73	'I'
      00542E 49                   14992 	.db #0x49	; 73	'I'
      00542F 49                   14993 	.db #0x49	; 73	'I'
      005430 00                   14994 	.db #0x00	; 0
      005431 7E                   14995 	.db #0x7e	; 126
      005432 01                   14996 	.db #0x01	; 1
      005433 01                   14997 	.db #0x01	; 1
      005434 01                   14998 	.db #0x01	; 1
      005435 7E                   14999 	.db #0x7e	; 126
      005436 2A                   15000 	.db #0x2a	; 42
      005437 2A                   15001 	.db #0x2a	; 42
      005438 2A                   15002 	.db #0x2a	; 42
      005439 2A                   15003 	.db #0x2a	; 42
      00543A 2A                   15004 	.db #0x2a	; 42
      00543B 44                   15005 	.db #0x44	; 68	'D'
      00543C 44                   15006 	.db #0x44	; 68	'D'
      00543D 5F                   15007 	.db #0x5f	; 95
      00543E 44                   15008 	.db #0x44	; 68	'D'
      00543F 44                   15009 	.db #0x44	; 68	'D'
      005440 40                   15010 	.db #0x40	; 64
      005441 51                   15011 	.db #0x51	; 81	'Q'
      005442 4A                   15012 	.db #0x4a	; 74	'J'
      005443 44                   15013 	.db #0x44	; 68	'D'
      005444 40                   15014 	.db #0x40	; 64
      005445 40                   15015 	.db #0x40	; 64
      005446 44                   15016 	.db #0x44	; 68	'D'
      005447 4A                   15017 	.db #0x4a	; 74	'J'
      005448 51                   15018 	.db #0x51	; 81	'Q'
      005449 40                   15019 	.db #0x40	; 64
      00544A 00                   15020 	.db #0x00	; 0
      00544B 00                   15021 	.db #0x00	; 0
      00544C FF                   15022 	.db #0xff	; 255
      00544D 01                   15023 	.db #0x01	; 1
      00544E 03                   15024 	.db #0x03	; 3
      00544F E0                   15025 	.db #0xe0	; 224
      005450 80                   15026 	.db #0x80	; 128
      005451 FF                   15027 	.db #0xff	; 255
      005452 00                   15028 	.db #0x00	; 0
      005453 00                   15029 	.db #0x00	; 0
      005454 08                   15030 	.db #0x08	; 8
      005455 08                   15031 	.db #0x08	; 8
      005456 6B                   15032 	.db #0x6b	; 107	'k'
      005457 6B                   15033 	.db #0x6b	; 107	'k'
      005458 08                   15034 	.db #0x08	; 8
      005459 36                   15035 	.db #0x36	; 54	'6'
      00545A 12                   15036 	.db #0x12	; 18
      00545B 36                   15037 	.db #0x36	; 54	'6'
      00545C 24                   15038 	.db #0x24	; 36
      00545D 36                   15039 	.db #0x36	; 54	'6'
      00545E 06                   15040 	.db #0x06	; 6
      00545F 0F                   15041 	.db #0x0f	; 15
      005460 09                   15042 	.db #0x09	; 9
      005461 0F                   15043 	.db #0x0f	; 15
      005462 06                   15044 	.db #0x06	; 6
      005463 00                   15045 	.db #0x00	; 0
      005464 00                   15046 	.db #0x00	; 0
      005465 18                   15047 	.db #0x18	; 24
      005466 18                   15048 	.db #0x18	; 24
      005467 00                   15049 	.db #0x00	; 0
      005468 00                   15050 	.db #0x00	; 0
      005469 00                   15051 	.db #0x00	; 0
      00546A 10                   15052 	.db #0x10	; 16
      00546B 10                   15053 	.db #0x10	; 16
      00546C 00                   15054 	.db #0x00	; 0
      00546D 30                   15055 	.db #0x30	; 48	'0'
      00546E 40                   15056 	.db #0x40	; 64
      00546F FF                   15057 	.db #0xff	; 255
      005470 01                   15058 	.db #0x01	; 1
      005471 01                   15059 	.db #0x01	; 1
      005472 00                   15060 	.db #0x00	; 0
      005473 1F                   15061 	.db #0x1f	; 31
      005474 01                   15062 	.db #0x01	; 1
      005475 01                   15063 	.db #0x01	; 1
      005476 1E                   15064 	.db #0x1e	; 30
      005477 00                   15065 	.db #0x00	; 0
      005478 19                   15066 	.db #0x19	; 25
      005479 1D                   15067 	.db #0x1d	; 29
      00547A 17                   15068 	.db #0x17	; 23
      00547B 12                   15069 	.db #0x12	; 18
      00547C 00                   15070 	.db #0x00	; 0
      00547D 3C                   15071 	.db #0x3c	; 60
      00547E 3C                   15072 	.db #0x3c	; 60
      00547F 3C                   15073 	.db #0x3c	; 60
      005480 3C                   15074 	.db #0x3c	; 60
      005481 00                   15075 	.db #0x00	; 0
      005482 00                   15076 	.db #0x00	; 0
      005483 00                   15077 	.db #0x00	; 0
      005484 00                   15078 	.db #0x00	; 0
      005485 00                   15079 	.db #0x00	; 0
      005486                      15080 _keypad:
      005486 31                   15081 	.db #0x31	; 49	'1'
      005487 34                   15082 	.db #0x34	; 52	'4'
      005488 37                   15083 	.db #0x37	; 55	'7'
      005489 46                   15084 	.db #0x46	; 70	'F'
      00548A 32                   15085 	.db #0x32	; 50	'2'
      00548B 35                   15086 	.db #0x35	; 53	'5'
      00548C 38                   15087 	.db #0x38	; 56	'8'
      00548D 30                   15088 	.db #0x30	; 48	'0'
      00548E 33                   15089 	.db #0x33	; 51	'3'
      00548F 36                   15090 	.db #0x36	; 54	'6'
      005490 39                   15091 	.db #0x39	; 57	'9'
      005491 45                   15092 	.db #0x45	; 69	'E'
      005492 41                   15093 	.db #0x41	; 65	'A'
      005493 42                   15094 	.db #0x42	; 66	'B'
      005494 43                   15095 	.db #0x43	; 67	'C'
      005495 44                   15096 	.db #0x44	; 68	'D'
                                  15097 	.area CONST   (CODE)
      005496                      15098 ___str_0:
      005496 45 52 52 4F 52 20 46 15099 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      0054A6 00                   15100 	.db 0x00
                                  15101 	.area CSEG    (CODE)
                                  15102 	.area CONST   (CODE)
      0054A7                      15103 ___str_1:
      0054A7 46 72 65 65 20 54 79 15104 	.ascii "Free Type: "
             70 65 3A 20
      0054B2 0A                   15105 	.db 0x0a
      0054B3 00                   15106 	.db 0x00
                                  15107 	.area CSEG    (CODE)
                                  15108 	.area CONST   (CODE)
      0054B4                      15109 ___str_2:
      0054B4 30 78                15110 	.ascii "0x"
      0054B6 00                   15111 	.db 0x00
                                  15112 	.area CSEG    (CODE)
                                  15113 	.area CONST   (CODE)
      0054B7                      15114 ___str_3:
      0054B7 57 65 6C 63 6F 6D 65 15115 	.ascii "Welcome"
      0054BE 0A                   15116 	.db 0x0a
      0054BF 00                   15117 	.db 0x00
                                  15118 	.area CSEG    (CODE)
                                  15119 	.area CONST   (CODE)
      0054C0                      15120 ___str_4:
      0054C0 0A                   15121 	.db 0x0a
      0054C1 20 54 79 6C 65 72 20 15122 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      0054CE 0A                   15123 	.db 0x0a
      0054CF 20 20 45 43 45 4E 2D 15124 	.ascii "  ECEN-4350"
             34 33 35 30
      0054DA 0A                   15125 	.db 0x0a
      0054DB 20 20 46 61 6C 6C 20 15126 	.ascii "  Fall 2021"
             32 30 32 31
      0054E6 00                   15127 	.db 0x00
                                  15128 	.area CSEG    (CODE)
                                  15129 	.area CONST   (CODE)
      0054E7                      15130 ___str_5:
      0054E7 3C 4D 65 6E 75 3E    15131 	.ascii "<Menu>"
      0054ED 0A                   15132 	.db 0x0a
      0054EE 00                   15133 	.db 0x00
                                  15134 	.area CSEG    (CODE)
                                  15135 	.area CONST   (CODE)
      0054EF                      15136 ___str_6:
      0054EF 20 3C 44 3E          15137 	.ascii " <D>"
      0054F3 00                   15138 	.db 0x00
                                  15139 	.area CSEG    (CODE)
                                  15140 	.area CONST   (CODE)
      0054F4                      15141 ___str_7:
      0054F4 20 44 55 4D 50       15142 	.ascii " DUMP"
      0054F9 0A                   15143 	.db 0x0a
      0054FA 00                   15144 	.db 0x00
                                  15145 	.area CSEG    (CODE)
                                  15146 	.area CONST   (CODE)
      0054FB                      15147 ___str_8:
      0054FB 20 3C 42 3E          15148 	.ascii " <B>"
      0054FF 00                   15149 	.db 0x00
                                  15150 	.area CSEG    (CODE)
                                  15151 	.area CONST   (CODE)
      005500                      15152 ___str_9:
      005500 20 4D 4F 56 45       15153 	.ascii " MOVE"
      005505 0A                   15154 	.db 0x0a
      005506 00                   15155 	.db 0x00
                                  15156 	.area CSEG    (CODE)
                                  15157 	.area CONST   (CODE)
      005507                      15158 ___str_10:
      005507 20 3C 45 3E          15159 	.ascii " <E>"
      00550B 00                   15160 	.db 0x00
                                  15161 	.area CSEG    (CODE)
                                  15162 	.area CONST   (CODE)
      00550C                      15163 ___str_11:
      00550C 20 45 44 49 54       15164 	.ascii " EDIT"
      005511 0A                   15165 	.db 0x0a
      005512 00                   15166 	.db 0x00
                                  15167 	.area CSEG    (CODE)
                                  15168 	.area CONST   (CODE)
      005513                      15169 ___str_12:
      005513 20 3C 46 3E          15170 	.ascii " <F>"
      005517 00                   15171 	.db 0x00
                                  15172 	.area CSEG    (CODE)
                                  15173 	.area CONST   (CODE)
      005518                      15174 ___str_13:
      005518 20 46 49 4E 44       15175 	.ascii " FIND"
      00551D 0A                   15176 	.db 0x0a
      00551E 00                   15177 	.db 0x00
                                  15178 	.area CSEG    (CODE)
                                  15179 	.area CONST   (CODE)
      00551F                      15180 ___str_14:
      00551F 20 3C 43 3E          15181 	.ascii " <C>"
      005523 00                   15182 	.db 0x00
                                  15183 	.area CSEG    (CODE)
                                  15184 	.area CONST   (CODE)
      005524                      15185 ___str_15:
      005524 20 43 4F 55 4E 54    15186 	.ascii " COUNT"
      00552A 0A                   15187 	.db 0x0a
      00552B 00                   15188 	.db 0x00
                                  15189 	.area CSEG    (CODE)
                                  15190 	.area CONST   (CODE)
      00552C                      15191 ___str_16:
      00552C 20 3C 41 3E          15192 	.ascii " <A>"
      005530 00                   15193 	.db 0x00
                                  15194 	.area CSEG    (CODE)
                                  15195 	.area CONST   (CODE)
      005531                      15196 ___str_17:
      005531 20 4D 45 4D 20 43 48 15197 	.ascii " MEM CHECK"
             45 43 4B
      00553B 0A                   15198 	.db 0x0a
      00553C 00                   15199 	.db 0x00
                                  15200 	.area CSEG    (CODE)
                                  15201 	.area CONST   (CODE)
      00553D                      15202 ___str_18:
      00553D 20 3C 31 3E          15203 	.ascii " <1>"
      005541 00                   15204 	.db 0x00
                                  15205 	.area CSEG    (CODE)
                                  15206 	.area CONST   (CODE)
      005542                      15207 ___str_19:
      005542 20 55 41 52 54 20 5B 15208 	.ascii " UART [Disabled]"
             44 69 73 61 62 6C 65
             64 5D
      005552 00                   15209 	.db 0x00
                                  15210 	.area CSEG    (CODE)
                                  15211 	.area CONST   (CODE)
      005553                      15212 ___str_20:
      005553 20 55 41 52 54 20 5B 15213 	.ascii " UART [Enabled]"
             45 6E 61 62 6C 65 64
             5D
      005562 00                   15214 	.db 0x00
                                  15215 	.area CSEG    (CODE)
                                  15216 	.area CONST   (CODE)
      005563                      15217 ___str_21:
      005563 5B 44 55 4D 50 5D    15218 	.ascii "[DUMP]"
      005569 0A                   15219 	.db 0x0a
      00556A 00                   15220 	.db 0x00
                                  15221 	.area CSEG    (CODE)
                                  15222 	.area CONST   (CODE)
      00556B                      15223 ___str_22:
      00556B 20 41 64 64 72 65 73 15224 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      00557D 0A                   15225 	.db 0x0a
      00557E 00                   15226 	.db 0x00
                                  15227 	.area CSEG    (CODE)
                                  15228 	.area CONST   (CODE)
      00557F                      15229 ___str_23:
      00557F 20 30 78 5F 5F 5F 5F 15230 	.ascii " 0x____"
      005586 00                   15231 	.db 0x00
                                  15232 	.area CSEG    (CODE)
                                  15233 	.area CONST   (CODE)
      005587                      15234 ___str_24:
      005587 20 43 68 6F 6F 73 65 15235 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      00559A 0A                   15236 	.db 0x0a
      00559B 00                   15237 	.db 0x00
                                  15238 	.area CSEG    (CODE)
                                  15239 	.area CONST   (CODE)
      00559C                      15240 ___str_25:
      00559C 20 20 3C 31 3E 20 42 15241 	.ascii "  <1> BYTE"
             59 54 45
      0055A6 0A                   15242 	.db 0x0a
      0055A7 20 20 3C 32 3E 20 57 15243 	.ascii "  <2> WORD"
             4F 52 44
      0055B1 0A                   15244 	.db 0x0a
      0055B2 20 20 3C 34 3E 20 44 15245 	.ascii "  <4> DWORD"
             57 4F 52 44
      0055BD 00                   15246 	.db 0x00
                                  15247 	.area CSEG    (CODE)
                                  15248 	.area CONST   (CODE)
      0055BE                      15249 ___str_26:
      0055BE 20 49 6E 70 75 74 20 15250 	.ascii " Input Size:"
             53 69 7A 65 3A
      0055CA 00                   15251 	.db 0x00
                                  15252 	.area CSEG    (CODE)
                                  15253 	.area CONST   (CODE)
      0055CB                      15254 ___str_27:
      0055CB 20 5F                15255 	.ascii " _"
      0055CD 00                   15256 	.db 0x00
                                  15257 	.area CSEG    (CODE)
                                  15258 	.area CONST   (CODE)
      0055CE                      15259 ___str_28:
      0055CE 20 41 64 64 72 65 73 15260 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      0055E0 00                   15261 	.db 0x00
                                  15262 	.area CSEG    (CODE)
                                  15263 	.area CONST   (CODE)
      0055E1                      15264 ___str_29:
      0055E1 20                   15265 	.ascii " "
      0055E2 00                   15266 	.db 0x00
                                  15267 	.area CSEG    (CODE)
                                  15268 	.area CONST   (CODE)
      0055E3                      15269 ___str_30:
      0055E3 20 43 68 6F 6F 73 65 15270 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      0055F6 00                   15271 	.db 0x00
                                  15272 	.area CSEG    (CODE)
                                  15273 	.area CONST   (CODE)
      0055F7                      15274 ___str_31:
      0055F7 0A                   15275 	.db 0x0a
      0055F8 0A                   15276 	.db 0x0a
      0055F9 00                   15277 	.db 0x00
                                  15278 	.area CSEG    (CODE)
                                  15279 	.area CONST   (CODE)
      0055FA                      15280 ___str_32:
      0055FA 20 20                15281 	.ascii "  "
      0055FC 00                   15282 	.db 0x00
                                  15283 	.area CSEG    (CODE)
                                  15284 	.area CONST   (CODE)
      0055FD                      15285 ___str_33:
      0055FD 3C 31 3E 20 42 59 54 15286 	.ascii "<1> BYTE"
             45
      005605 0A                   15287 	.db 0x0a
      005606 00                   15288 	.db 0x00
                                  15289 	.area CSEG    (CODE)
                                  15290 	.area CONST   (CODE)
      005607                      15291 ___str_34:
      005607 0A                   15292 	.db 0x0a
      005608 0A                   15293 	.db 0x0a
      005609 20 20 20 20 20 20 20 15294 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005619 0A                   15295 	.db 0x0a
      00561A 20 20 20 20 20 20 20 15296 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00562A 00                   15297 	.db 0x00
                                  15298 	.area CSEG    (CODE)
                                  15299 	.area CONST   (CODE)
      00562B                      15300 ___str_35:
      00562B 0A                   15301 	.db 0x0a
      00562C 20 20                15302 	.ascii "  "
      00562E 00                   15303 	.db 0x00
                                  15304 	.area CSEG    (CODE)
                                  15305 	.area CONST   (CODE)
      00562F                      15306 ___str_36:
      00562F 3C 32 3E 20 57 4F 52 15307 	.ascii "<2> WORD"
             44
      005637 0A                   15308 	.db 0x0a
      005638 00                   15309 	.db 0x00
                                  15310 	.area CSEG    (CODE)
                                  15311 	.area CONST   (CODE)
      005639                      15312 ___str_37:
      005639 0A                   15313 	.db 0x0a
      00563A 20 20 20 20 20 20 20 15314 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00564A 0A                   15315 	.db 0x0a
      00564B 20 20 20 20 20 20 20 15316 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00565B 00                   15317 	.db 0x00
                                  15318 	.area CSEG    (CODE)
                                  15319 	.area CONST   (CODE)
      00565C                      15320 ___str_38:
      00565C 0A                   15321 	.db 0x0a
      00565D 0A                   15322 	.db 0x0a
      00565E 20 20                15323 	.ascii "  "
      005660 00                   15324 	.db 0x00
                                  15325 	.area CSEG    (CODE)
                                  15326 	.area CONST   (CODE)
      005661                      15327 ___str_39:
      005661 3C 34 3E 20 44 57 4F 15328 	.ascii "<4> DWORD"
             52 44
      00566A 00                   15329 	.db 0x00
                                  15330 	.area CSEG    (CODE)
                                  15331 	.area CONST   (CODE)
      00566B                      15332 ___str_40:
      00566B 0A                   15333 	.db 0x0a
      00566C 20 20 49 6E 70 75 74 15334 	.ascii "  Input Error"
             20 45 72 72 6F 72
      005679 0A                   15335 	.db 0x0a
      00567A 20 20 54 72 79 20 41 15336 	.ascii "  Try Again"
             67 61 69 6E
      005685 00                   15337 	.db 0x00
                                  15338 	.area CSEG    (CODE)
                                  15339 	.area CONST   (CODE)
      005686                      15340 ___str_41:
      005686 20 49 6E 70 75 74 20 15341 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      005693 00                   15342 	.db 0x00
                                  15343 	.area CSEG    (CODE)
                                  15344 	.area CONST   (CODE)
      005694                      15345 ___str_42:
      005694 20 4D 69 73 6D 61 74 15346 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      0056A3 0A                   15347 	.db 0x0a
      0056A4 20 54 72 79 20 41 67 15348 	.ascii " Try Again"
             61 69 6E
      0056AE 00                   15349 	.db 0x00
                                  15350 	.area CSEG    (CODE)
                                  15351 	.area CONST   (CODE)
      0056AF                      15352 ___str_43:
      0056AF 20 4D 61 74 63 68 20 15353 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      0056BF 0A                   15354 	.db 0x0a
      0056C0 20 20 20 20 20 20 20 15355 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      0056D0 00                   15356 	.db 0x00
                                  15357 	.area CSEG    (CODE)
                                  15358 	.area CONST   (CODE)
      0056D1                      15359 ___str_44:
      0056D1 20 41 64 64 72 65 73 15360 	.ascii " Address:"
             73 3A
      0056DA 00                   15361 	.db 0x00
                                  15362 	.area CSEG    (CODE)
                                  15363 	.area CONST   (CODE)
      0056DB                      15364 ___str_45:
      0056DB 20 30 78             15365 	.ascii " 0x"
      0056DE 00                   15366 	.db 0x00
                                  15367 	.area CSEG    (CODE)
                                  15368 	.area CONST   (CODE)
      0056DF                      15369 ___str_46:
      0056DF 20 48 65 78 20 44 61 15370 	.ascii " Hex Data:"
             74 61 3A
      0056E9 00                   15371 	.db 0x00
                                  15372 	.area CSEG    (CODE)
                                  15373 	.area CONST   (CODE)
      0056EA                      15374 ___str_47:
      0056EA 20 41 53 43 49 49 20 15375 	.ascii " ASCII Data:"
             44 61 74 61 3A
      0056F6 00                   15376 	.db 0x00
                                  15377 	.area CSEG    (CODE)
                                  15378 	.area CONST   (CODE)
      0056F7                      15379 ___str_48:
      0056F7 20 44 61 74 61 20 54 15380 	.ascii " Data Type:"
             79 70 65 3A
      005702 00                   15381 	.db 0x00
                                  15382 	.area CSEG    (CODE)
                                  15383 	.area CONST   (CODE)
      005703                      15384 ___str_49:
      005703 20 42 59 54 45       15385 	.ascii " BYTE"
      005708 00                   15386 	.db 0x00
                                  15387 	.area CSEG    (CODE)
                                  15388 	.area CONST   (CODE)
      005709                      15389 ___str_50:
      005709 20 57 4F 52 44       15390 	.ascii " WORD"
      00570E 00                   15391 	.db 0x00
                                  15392 	.area CSEG    (CODE)
                                  15393 	.area CONST   (CODE)
      00570F                      15394 ___str_51:
      00570F 20 44 57 4F 52 44    15395 	.ascii " DWORD"
      005715 00                   15396 	.db 0x00
                                  15397 	.area CSEG    (CODE)
                                  15398 	.area CONST   (CODE)
      005716                      15399 ___str_52:
      005716 20 3C 30 3E 20 45 78 15400 	.ascii " <0> Exit"
             69 74
      00571F 0A                   15401 	.db 0x0a
      005720 00                   15402 	.db 0x00
                                  15403 	.area CSEG    (CODE)
                                  15404 	.area CONST   (CODE)
      005721                      15405 ___str_53:
      005721 3C 30 3E 20 45 78 69 15406 	.ascii "<0> Exit"
             74
      005729 0A                   15407 	.db 0x0a
      00572A 00                   15408 	.db 0x00
                                  15409 	.area CSEG    (CODE)
                                  15410 	.area CONST   (CODE)
      00572B                      15411 ___str_54:
      00572B 5B 4D 4F 56 45 5D    15412 	.ascii "[MOVE]"
      005731 0A                   15413 	.db 0x0a
      005732 00                   15414 	.db 0x00
                                  15415 	.area CSEG    (CODE)
                                  15416 	.area CONST   (CODE)
      005733                      15417 ___str_55:
      005733 20 53 6F 75 72 63 65 15418 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      005743 00                   15419 	.db 0x00
                                  15420 	.area CSEG    (CODE)
                                  15421 	.area CONST   (CODE)
      005744                      15422 ___str_56:
      005744 20 44 65 73 74 69 6E 15423 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      005751 00                   15424 	.db 0x00
                                  15425 	.area CSEG    (CODE)
                                  15426 	.area CONST   (CODE)
      005752                      15427 ___str_57:
      005752 20 4D 6F 76 65 20 43 15428 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      005760 0A                   15429 	.db 0x0a
      005761 00                   15430 	.db 0x00
                                  15431 	.area CSEG    (CODE)
                                  15432 	.area CONST   (CODE)
      005762                      15433 ___str_58:
      005762 5B 45 44 49 54 5D    15434 	.ascii "[EDIT]"
      005768 0A                   15435 	.db 0x0a
      005769 00                   15436 	.db 0x00
                                  15437 	.area CSEG    (CODE)
                                  15438 	.area CONST   (CODE)
      00576A                      15439 ___str_59:
      00576A 20 45 64 69 74 20 41 15440 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      005778 00                   15441 	.db 0x00
                                  15442 	.area CSEG    (CODE)
                                  15443 	.area CONST   (CODE)
      005779                      15444 ___str_60:
      005779 20 4C 6F 63 61 74 69 15445 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      00578C 0A                   15446 	.db 0x0a
      00578D 00                   15447 	.db 0x00
                                  15448 	.area CSEG    (CODE)
                                  15449 	.area CONST   (CODE)
      00578E                      15450 ___str_61:
      00578E 20 5F 5F             15451 	.ascii " __"
      005791 00                   15452 	.db 0x00
                                  15453 	.area CSEG    (CODE)
                                  15454 	.area CONST   (CODE)
      005792                      15455 ___str_62:
      005792 20 45 6E 74 65 72 20 15456 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      0057A3 0A                   15457 	.db 0x0a
      0057A4 00                   15458 	.db 0x00
                                  15459 	.area CSEG    (CODE)
                                  15460 	.area CONST   (CODE)
      0057A5                      15461 ___str_63:
      0057A5 20 43 68 6F 6F 73 65 15462 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      0057B9 0A                   15463 	.db 0x0a
      0057BA 00                   15464 	.db 0x00
                                  15465 	.area CSEG    (CODE)
                                  15466 	.area CONST   (CODE)
      0057BB                      15467 ___str_64:
      0057BB 20 20 3C 31 3E 20 4E 15468 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0057CD 0A                   15469 	.db 0x0a
      0057CE 20 20 3C 32 3E 20 4E 15470 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0057DF 0A                   15471 	.db 0x0a
      0057E0 00                   15472 	.db 0x00
                                  15473 	.area CSEG    (CODE)
                                  15474 	.area CONST   (CODE)
      0057E1                      15475 ___str_65:
      0057E1 20 20 3C 30 3E 20 45 15476 	.ascii "  <0> Exit"
             78 69 74
      0057EB 00                   15477 	.db 0x00
                                  15478 	.area CSEG    (CODE)
                                  15479 	.area CONST   (CODE)
      0057EC                      15480 ___str_66:
      0057EC 0A                   15481 	.db 0x0a
      0057ED 20                   15482 	.ascii " "
      0057EE 00                   15483 	.db 0x00
                                  15484 	.area CSEG    (CODE)
                                  15485 	.area CONST   (CODE)
      0057EF                      15486 ___str_67:
      0057EF 20 45 6E 74 65 72 20 15487 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      005800 0A                   15488 	.db 0x0a
      005801 20                   15489 	.ascii " "
      005802 00                   15490 	.db 0x00
                                  15491 	.area CSEG    (CODE)
                                  15492 	.area CONST   (CODE)
      005803                      15493 ___str_68:
      005803 3C 31 3E 20 4E 65 78 15494 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      005813 0A                   15495 	.db 0x0a
      005814 00                   15496 	.db 0x00
                                  15497 	.area CSEG    (CODE)
                                  15498 	.area CONST   (CODE)
      005815                      15499 ___str_69:
      005815 0A                   15500 	.db 0x0a
      005816 0A                   15501 	.db 0x0a
      005817 20 20 20 20 20 20 20 15502 	.ascii "               "
             20 20 20 20 20 20 20
             20
      005826 00                   15503 	.db 0x00
                                  15504 	.area CSEG    (CODE)
                                  15505 	.area CONST   (CODE)
      005827                      15506 ___str_70:
      005827 0A                   15507 	.db 0x0a
      005828 20 5F 5F             15508 	.ascii " __"
      00582B 00                   15509 	.db 0x00
                                  15510 	.area CSEG    (CODE)
                                  15511 	.area CONST   (CODE)
      00582C                      15512 ___str_71:
      00582C 0A                   15513 	.db 0x0a
      00582D 20 20 3C 31 3E 20 4E 15514 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      00583F 0A                   15515 	.db 0x0a
      005840 20 20 3C 32 3E 20 4E 15516 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      005851 0A                   15517 	.db 0x0a
      005852 20 20 3C 30 3E 20 45 15518 	.ascii "  <0> Exit"
             78 69 74
      00585C 00                   15519 	.db 0x00
                                  15520 	.area CSEG    (CODE)
                                  15521 	.area CONST   (CODE)
      00585D                      15522 ___str_72:
      00585D 20 43 68 6F 6F 73 65 15523 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      005871 0A                   15524 	.db 0x0a
      005872 20 20                15525 	.ascii "  "
      005874 00                   15526 	.db 0x00
                                  15527 	.area CSEG    (CODE)
                                  15528 	.area CONST   (CODE)
      005875                      15529 ___str_73:
      005875 3C 32 3E 20 4E 65 77 15530 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      005884 0A                   15531 	.db 0x0a
      005885 00                   15532 	.db 0x00
                                  15533 	.area CSEG    (CODE)
                                  15534 	.area CONST   (CODE)
      005886                      15535 ___str_74:
      005886 0A                   15536 	.db 0x0a
      005887 20 20 20 20 20 20 20 15537 	.ascii "               "
             20 20 20 20 20 20 20
             20
      005896 00                   15538 	.db 0x00
                                  15539 	.area CSEG    (CODE)
                                  15540 	.area CONST   (CODE)
      005897                      15541 ___str_75:
      005897 20 45 64 69 74 20 41 15542 	.ascii " Edit Address"
             64 64 72 65 73 73
      0058A4 00                   15543 	.db 0x00
                                  15544 	.area CSEG    (CODE)
                                  15545 	.area CONST   (CODE)
      0058A5                      15546 ___str_76:
      0058A5 0A                   15547 	.db 0x0a
      0058A6 00                   15548 	.db 0x00
                                  15549 	.area CSEG    (CODE)
                                  15550 	.area CONST   (CODE)
      0058A7                      15551 ___str_77:
      0058A7 3C 30 3E 20 45 78 69 15552 	.ascii "<0> Exit"
             74
      0058AF 00                   15553 	.db 0x00
                                  15554 	.area CSEG    (CODE)
                                  15555 	.area CONST   (CODE)
      0058B0                      15556 ___str_78:
      0058B0 0A                   15557 	.db 0x0a
      0058B1 0A                   15558 	.db 0x0a
      0058B2 0A                   15559 	.db 0x0a
      0058B3 0A                   15560 	.db 0x0a
      0058B4 20 49 6E 70 75 74 20 15561 	.ascii " Input Error "
             45 72 72 6F 72 20
      0058C1 00                   15562 	.db 0x00
                                  15563 	.area CSEG    (CODE)
                                  15564 	.area CONST   (CODE)
      0058C2                      15565 ___str_79:
      0058C2 5B 46 49 4E 44 5D    15566 	.ascii "[FIND]"
      0058C8 0A                   15567 	.db 0x0a
      0058C9 00                   15568 	.db 0x00
                                  15569 	.area CSEG    (CODE)
                                  15570 	.area CONST   (CODE)
      0058CA                      15571 ___str_80:
      0058CA 20 46 69 6E 64 20 56 15572 	.ascii " Find Value:"
             61 6C 75 65 3A
      0058D6 00                   15573 	.db 0x00
                                  15574 	.area CSEG    (CODE)
                                  15575 	.area CONST   (CODE)
      0058D7                      15576 ___str_81:
      0058D7 20 53 65 61 72 63 68 15577 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      0058E7 00                   15578 	.db 0x00
                                  15579 	.area CSEG    (CODE)
                                  15580 	.area CONST   (CODE)
      0058E8                      15581 ___str_82:
      0058E8 20 49 6E 70 75 74 20 15582 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      0058FA 0A                   15583 	.db 0x0a
      0058FB 00                   15584 	.db 0x00
                                  15585 	.area CSEG    (CODE)
                                  15586 	.area CONST   (CODE)
      0058FC                      15587 ___str_83:
      0058FC 20 20 3C 30 31 3E 20 15588 	.ascii "  <01> BYTE"
             42 59 54 45
      005907 0A                   15589 	.db 0x0a
      005908 20 20 3C 30 32 3E 20 15590 	.ascii "  <02> WORD"
             57 4F 52 44
      005913 0A                   15591 	.db 0x0a
      005914 20 20 3C 30 34 3E 20 15592 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      005920 0A                   15593 	.db 0x0a
      005921 00                   15594 	.db 0x00
                                  15595 	.area CSEG    (CODE)
                                  15596 	.area CONST   (CODE)
      005922                      15597 ___str_84:
      005922 20 20 3C 46 46 3E 20 15598 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      00592F 00                   15599 	.db 0x00
                                  15600 	.area CSEG    (CODE)
                                  15601 	.area CONST   (CODE)
      005930                      15602 ___str_85:
      005930 20 20 20 5F 5F       15603 	.ascii "   __"
      005935 00                   15604 	.db 0x00
                                  15605 	.area CSEG    (CODE)
                                  15606 	.area CONST   (CODE)
      005936                      15607 ___str_86:
      005936 20 20 20             15608 	.ascii "   "
      005939 00                   15609 	.db 0x00
                                  15610 	.area CSEG    (CODE)
                                  15611 	.area CONST   (CODE)
      00593A                      15612 ___str_87:
      00593A 0A                   15613 	.db 0x0a
      00593B 20 20 20 20 20 20 20 15614 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      00594B 00                   15615 	.db 0x00
                                  15616 	.area CSEG    (CODE)
                                  15617 	.area CONST   (CODE)
      00594C                      15618 ___str_88:
      00594C 0A                   15619 	.db 0x0a
      00594D 20 54 72 79 20 61 67 15620 	.ascii " Try again"
             61 69 6E
      005957 00                   15621 	.db 0x00
                                  15622 	.area CSEG    (CODE)
                                  15623 	.area CONST   (CODE)
      005958                      15624 ___str_89:
      005958 3C 30 31 3E 20 42 59 15625 	.ascii "<01> BYTE"
             54 45
      005961 0A                   15626 	.db 0x0a
      005962 00                   15627 	.db 0x00
                                  15628 	.area CSEG    (CODE)
                                  15629 	.area CONST   (CODE)
      005963                      15630 ___str_90:
      005963 20 20 3C 30 32 3E 20 15631 	.ascii "  <02> WORD"
             57 4F 52 44
      00596E 0A                   15632 	.db 0x0a
      00596F 00                   15633 	.db 0x00
                                  15634 	.area CSEG    (CODE)
                                  15635 	.area CONST   (CODE)
      005970                      15636 ___str_91:
      005970 20 20 3C 30 34 3E 20 15637 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      00597C 0A                   15638 	.db 0x0a
      00597D 00                   15639 	.db 0x00
                                  15640 	.area CSEG    (CODE)
                                  15641 	.area CONST   (CODE)
      00597E                      15642 ___str_92:
      00597E 0A                   15643 	.db 0x0a
      00597F 20 53 65 61 72 63 68 15644 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      005992 00                   15645 	.db 0x00
                                  15646 	.area CSEG    (CODE)
                                  15647 	.area CONST   (CODE)
      005993                      15648 ___str_93:
      005993 0A                   15649 	.db 0x0a
      005994 20 42 59 54 45 20 5B 15650 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      0059A2 00                   15651 	.db 0x00
                                  15652 	.area CSEG    (CODE)
                                  15653 	.area CONST   (CODE)
      0059A3                      15654 ___str_94:
      0059A3 20 20 3C 30 31 3E 20 15655 	.ascii "  <01> BYTE"
             42 59 54 45
      0059AE 0A                   15656 	.db 0x0a
      0059AF 20 20                15657 	.ascii "  "
      0059B1 00                   15658 	.db 0x00
                                  15659 	.area CSEG    (CODE)
                                  15660 	.area CONST   (CODE)
      0059B2                      15661 ___str_95:
      0059B2 3C 30 32 3E 20 57 4F 15662 	.ascii "<02> WORD"
             52 44
      0059BB 0A                   15663 	.db 0x0a
      0059BC 00                   15664 	.db 0x00
                                  15665 	.area CSEG    (CODE)
                                  15666 	.area CONST   (CODE)
      0059BD                      15667 ___str_96:
      0059BD 0A                   15668 	.db 0x0a
      0059BE 20 57 4F 52 44 20 5B 15669 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      0059CD 00                   15670 	.db 0x00
                                  15671 	.area CSEG    (CODE)
                                  15672 	.area CONST   (CODE)
      0059CE                      15673 ___str_97:
      0059CE 20 20 3C 30 31 3E 20 15674 	.ascii "  <01> BYTE"
             42 59 54 45
      0059D9 0A                   15675 	.db 0x0a
      0059DA 20 20 3C 30 32 3E 20 15676 	.ascii "  <02> WORD"
             57 4F 52 44
      0059E5 0A                   15677 	.db 0x0a
      0059E6 20 20                15678 	.ascii "  "
      0059E8 00                   15679 	.db 0x00
                                  15680 	.area CSEG    (CODE)
                                  15681 	.area CONST   (CODE)
      0059E9                      15682 ___str_98:
      0059E9 3C 30 34 3E 20 44 57 15683 	.ascii "<04> DWORD"
             4F 52 44
      0059F3 0A                   15684 	.db 0x0a
      0059F4 00                   15685 	.db 0x00
                                  15686 	.area CSEG    (CODE)
                                  15687 	.area CONST   (CODE)
      0059F5                      15688 ___str_99:
      0059F5 0A                   15689 	.db 0x0a
      0059F6 20 44 57 4F 52 44 20 15690 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      005A06 00                   15691 	.db 0x00
                                  15692 	.area CSEG    (CODE)
                                  15693 	.area CONST   (CODE)
      005A07                      15694 ___str_100:
      005A07 3C 30 34 3E 20 44 57 15695 	.ascii "<04> DWORD"
             4F 52 44
      005A11 0A                   15696 	.db 0x0a
      005A12 20 20                15697 	.ascii "  "
      005A14 00                   15698 	.db 0x00
                                  15699 	.area CSEG    (CODE)
                                  15700 	.area CONST   (CODE)
      005A15                      15701 ___str_101:
      005A15 3C 46 46 3E 20 28 53 15702 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      005A20 00                   15703 	.db 0x00
                                  15704 	.area CSEG    (CODE)
                                  15705 	.area CONST   (CODE)
      005A21                      15706 ___str_102:
      005A21 0A                   15707 	.db 0x0a
      005A22 20 5B 32 35 36 20 42 15708 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      005A2F 00                   15709 	.db 0x00
                                  15710 	.area CSEG    (CODE)
                                  15711 	.area CONST   (CODE)
      005A30                      15712 ___str_103:
      005A30 20 5B 4E 6F 6E 2D 49 15713 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      005A42 0A                   15714 	.db 0x0a
      005A43 00                   15715 	.db 0x00
                                  15716 	.area CSEG    (CODE)
                                  15717 	.area CONST   (CODE)
      005A44                      15718 ___str_104:
      005A44 20 53 65 61 72 63 68 15719 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      005A52 0A                   15720 	.db 0x0a
      005A53 20                   15721 	.ascii " "
      005A54 00                   15722 	.db 0x00
                                  15723 	.area CSEG    (CODE)
                                  15724 	.area CONST   (CODE)
      005A55                      15725 ___str_105:
      005A55 20 46 6F 75 6E 64 20 15726 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      005A68 0A                   15727 	.db 0x0a
      005A69 00                   15728 	.db 0x00
                                  15729 	.area CSEG    (CODE)
                                  15730 	.area CONST   (CODE)
      005A6A                      15731 ___str_106:
      005A6A 0A                   15732 	.db 0x0a
      005A6B 20 30 78             15733 	.ascii " 0x"
      005A6E 00                   15734 	.db 0x00
                                  15735 	.area CSEG    (CODE)
                                  15736 	.area CONST   (CODE)
      005A6F                      15737 ___str_107:
      005A6F 20 5B 49 6E 74 65 72 15738 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      005A7D 0A                   15739 	.db 0x0a
      005A7E 00                   15740 	.db 0x00
                                  15741 	.area CSEG    (CODE)
                                  15742 	.area CONST   (CODE)
      005A7F                      15743 ___str_108:
      005A7F 20 46 6F 75 6E 64 20 15744 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      005A92 0A                   15745 	.db 0x0a
      005A93 00                   15746 	.db 0x00
                                  15747 	.area CSEG    (CODE)
                                  15748 	.area CONST   (CODE)
      005A94                      15749 ___str_109:
      005A94 50 61 67 65 3A 20    15750 	.ascii "Page: "
      005A9A 00                   15751 	.db 0x00
                                  15752 	.area CSEG    (CODE)
                                  15753 	.area CONST   (CODE)
      005A9B                      15754 ___str_110:
      005A9B 20 3C 31 3E 20 4E 65 15755 	.ascii " <1> Next"
             78 74
      005AA4 0A                   15756 	.db 0x0a
      005AA5 20 3C 30 3E 20 45 78 15757 	.ascii " <0> Exit"
             69 74
      005AAE 0A                   15758 	.db 0x0a
      005AAF 20 20 20 20 20 20 20 15759 	.ascii "              "
             20 20 20 20 20 20 20
      005ABD 00                   15760 	.db 0x00
                                  15761 	.area CSEG    (CODE)
                                  15762 	.area CONST   (CODE)
      005ABE                      15763 ___str_111:
      005ABE 3C 31 3E 20 4E 65 78 15764 	.ascii "<1> Next"
             74
      005AC6 00                   15765 	.db 0x00
                                  15766 	.area CSEG    (CODE)
                                  15767 	.area CONST   (CODE)
      005AC7                      15768 ___str_112:
      005AC7 20 20 20 20 20 20 20 15769 	.ascii "          "
             20 20 20
      005AD1 0A                   15770 	.db 0x0a
      005AD2 20 3C 30 3E 20 45 78 15771 	.ascii " <0> Exit"
             69 74
      005ADB 0A                   15772 	.db 0x0a
      005ADC 20 20 20 20 20 20 20 15773 	.ascii "              "
             20 20 20 20 20 20 20
      005AEA 00                   15774 	.db 0x00
                                  15775 	.area CSEG    (CODE)
                                  15776 	.area CONST   (CODE)
      005AEB                      15777 ___str_113:
      005AEB 20 20 20 20 20 20 20 15778 	.ascii "          "
             20 20 20
      005AF5 0A                   15779 	.db 0x0a
      005AF6 20 3C 30 3E 20 45 78 15780 	.ascii " <0> Exit"
             69 74
      005AFF 0A                   15781 	.db 0x0a
      005B00 20 3C 32 3E 20 50 72 15782 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      005B0D 00                   15783 	.db 0x00
                                  15784 	.area CSEG    (CODE)
                                  15785 	.area CONST   (CODE)
      005B0E                      15786 ___str_114:
      005B0E 0A                   15787 	.db 0x0a
      005B0F 0A                   15788 	.db 0x0a
      005B10 20                   15789 	.ascii " "
      005B11 00                   15790 	.db 0x00
                                  15791 	.area CSEG    (CODE)
                                  15792 	.area CONST   (CODE)
      005B12                      15793 ___str_115:
      005B12 3C 32 3E 20 50 72 65 15794 	.ascii "<2> Previous"
             76 69 6F 75 73
      005B1E 00                   15795 	.db 0x00
                                  15796 	.area CSEG    (CODE)
                                  15797 	.area CONST   (CODE)
      005B1F                      15798 ___str_116:
      005B1F 20 3C 31 3E 20 4E 65 15799 	.ascii " <1> Next"
             78 74
      005B28 0A                   15800 	.db 0x0a
      005B29 20 3C 30 3E 20 45 78 15801 	.ascii " <0> Exit"
             69 74
      005B32 0A                   15802 	.db 0x0a
      005B33 20 3C 32 3E 20 50 72 15803 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      005B40 00                   15804 	.db 0x00
                                  15805 	.area CSEG    (CODE)
                                  15806 	.area CONST   (CODE)
      005B41                      15807 ___str_117:
      005B41 20 3C 31 3E 20 4E 65 15808 	.ascii " <1> Next"
             78 74
      005B4A 0A                   15809 	.db 0x0a
      005B4B 20                   15810 	.ascii " "
      005B4C 00                   15811 	.db 0x00
                                  15812 	.area CSEG    (CODE)
                                  15813 	.area CONST   (CODE)
      005B4D                      15814 ___str_118:
      005B4D 0A                   15815 	.db 0x0a
      005B4E 20 3C 32 3E 20 50 72 15816 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      005B5B 00                   15817 	.db 0x00
                                  15818 	.area CSEG    (CODE)
                                  15819 	.area CONST   (CODE)
      005B5C                      15820 ___str_119:
      005B5C 20 56 61 6C 75 65 20 15821 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      005B6C 0A                   15822 	.db 0x0a
      005B6D 20 57 69 74 68 69 6E 15823 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      005B7A 0A                   15824 	.db 0x0a
      005B7B 20                   15825 	.ascii " "
      005B7C 00                   15826 	.db 0x00
                                  15827 	.area CSEG    (CODE)
                                  15828 	.area CONST   (CODE)
      005B7D                      15829 ___str_120:
      005B7D 0A                   15830 	.db 0x0a
      005B7E 20 3C 30 3E 20 45 78 15831 	.ascii " <0> Exit"
             69 74
      005B87 00                   15832 	.db 0x00
                                  15833 	.area CSEG    (CODE)
                                  15834 	.area CONST   (CODE)
      005B88                      15835 ___str_121:
      005B88 0A                   15836 	.db 0x0a
      005B89 0A                   15837 	.db 0x0a
      005B8A 0A                   15838 	.db 0x0a
      005B8B 20                   15839 	.ascii " "
      005B8C 00                   15840 	.db 0x00
                                  15841 	.area CSEG    (CODE)
                                  15842 	.area CONST   (CODE)
      005B8D                      15843 ___str_122:
      005B8D 5B 43 4F 55 4E 54 5D 15844 	.ascii "[COUNT]"
      005B94 0A                   15845 	.db 0x0a
      005B95 00                   15846 	.db 0x00
                                  15847 	.area CSEG    (CODE)
                                  15848 	.area CONST   (CODE)
      005B96                      15849 ___str_123:
      005B96 20 53 65 61 72 63 68 15850 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      005BA4 00                   15851 	.db 0x00
                                  15852 	.area CSEG    (CODE)
                                  15853 	.area CONST   (CODE)
      005BA5                      15854 ___str_124:
      005BA5 20 46 6F 75 6E 64 20 15855 	.ascii " Found in"
             69 6E
      005BAE 0A                   15856 	.db 0x0a
      005BAF 20                   15857 	.ascii " "
      005BB0 00                   15858 	.db 0x00
                                  15859 	.area CSEG    (CODE)
                                  15860 	.area CONST   (CODE)
      005BB1                      15861 ___str_125:
      005BB1 20 42 79 74 65 73 20 15862 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      005BBD 0A                   15863 	.db 0x0a
      005BBE 20                   15864 	.ascii " "
      005BBF 00                   15865 	.db 0x00
                                  15866 	.area CSEG    (CODE)
                                  15867 	.area CONST   (CODE)
      005BC0                      15868 ___str_126:
      005BC0 43 6F 75 6E 74 3A 20 15869 	.ascii "Count: "
      005BC7 00                   15870 	.db 0x00
                                  15871 	.area CSEG    (CODE)
                                  15872 	.area CONST   (CODE)
      005BC8                      15873 ___str_127:
      005BC8 5B 43 48 45 43 4B 5D 15874 	.ascii "[CHECK]"
      005BCF 0A                   15875 	.db 0x0a
      005BD0 00                   15876 	.db 0x00
                                  15877 	.area CSEG    (CODE)
                                  15878 	.area CONST   (CODE)
      005BD1                      15879 ___str_128:
      005BD1 20 45 6E 74 65 72 20 15880 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      005BDE 0A                   15881 	.db 0x0a
      005BDF 00                   15882 	.db 0x00
                                  15883 	.area CSEG    (CODE)
                                  15884 	.area CONST   (CODE)
      005BE0                      15885 ___str_129:
      005BE0 0A                   15886 	.db 0x0a
      005BE1 0A                   15887 	.db 0x0a
      005BE2 20 57 72 69 74 69 6E 15888 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      005BF2 0A                   15889 	.db 0x0a
      005BF3 20 61 6C 6C 20 6D 65 15890 	.ascii " all memory"
             6D 6F 72 79
      005BFE 0A                   15891 	.db 0x0a
      005BFF 20 6C 6F 63 61 74 69 15892 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      005C0C 00                   15893 	.db 0x00
                                  15894 	.area CSEG    (CODE)
                                  15895 	.area CONST   (CODE)
      005C0D                      15896 ___str_130:
      005C0D 0A                   15897 	.db 0x0a
      005C0E 20 56 65 72 69 66 79 15898 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      005C21 00                   15899 	.db 0x00
                                  15900 	.area CSEG    (CODE)
                                  15901 	.area CONST   (CODE)
      005C22                      15902 ___str_131:
      005C22 0A                   15903 	.db 0x0a
      005C23 20 43 6F 6D 70 6C 65 15904 	.ascii " Complete."
             74 65 2E
      005C2D 00                   15905 	.db 0x00
                                  15906 	.area CSEG    (CODE)
                                  15907 	.area CONST   (CODE)
      005C2E                      15908 ___str_132:
      005C2E 0A                   15909 	.db 0x0a
      005C2F 0A                   15910 	.db 0x0a
      005C30 20 54 6F 67 67 6C 69 15911 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      005C41 0A                   15912 	.db 0x0a
      005C42 20 65 61 63 68 20 6E 15913 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      005C51 00                   15914 	.db 0x00
                                  15915 	.area CSEG    (CODE)
                                  15916 	.area CONST   (CODE)
      005C52                      15917 ___str_133:
      005C52 0A                   15918 	.db 0x0a
      005C53 20 57 72 69 74 69 6E 15919 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      005C67 00                   15920 	.db 0x00
                                  15921 	.area CSEG    (CODE)
                                  15922 	.area CONST   (CODE)
      005C68                      15923 ___str_134:
      005C68 0A                   15924 	.db 0x0a
      005C69 0A                   15925 	.db 0x0a
      005C6A 20 43 68 65 63 6B 20 15926 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      005C7A 00                   15927 	.db 0x00
                                  15928 	.area CSEG    (CODE)
                                  15929 	.area CONST   (CODE)
      005C7B                      15930 ___str_135:
      005C7B 5B 55 41 52 54 5D    15931 	.ascii "[UART]"
      005C81 0A                   15932 	.db 0x0a
      005C82 00                   15933 	.db 0x00
                                  15934 	.area CSEG    (CODE)
                                  15935 	.area CONST   (CODE)
      005C83                      15936 ___str_136:
      005C83 20 3C 31 3E 20 44 61 15937 	.ascii " <1> Data Rate Set"
             74 61 20 52 61 74 65
             20 53 65 74
      005C95 0A                   15938 	.db 0x0a
      005C96 00                   15939 	.db 0x00
                                  15940 	.area CSEG    (CODE)
                                  15941 	.area CONST   (CODE)
      005C97                      15942 ___str_137:
      005C97 20 3C 32 3E 20 4E 75 15943 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      005CAA 0A                   15944 	.db 0x0a
      005CAB 20 20 20 20 28 38 20 15945 	.ascii "    (8 or 9 bits)"
             6F 72 20 39 20 62 69
             74 73 29
      005CBC 0A                   15946 	.db 0x0a
      005CBD 00                   15947 	.db 0x00
                                  15948 	.area CSEG    (CODE)
                                  15949 	.area CONST   (CODE)
      005CBE                      15950 ___str_138:
      005CBE 20 3C 33 3E 20 50 61 15951 	.ascii " <3> Parity"
             72 69 74 79
      005CC9 0A                   15952 	.db 0x0a
      005CCA 20 20 20 20 28 45 76 15953 	.ascii "    (Even/Odd/None)"
             65 6E 2F 4F 64 64 2F
             4E 6F 6E 65 29
      005CDD 0A                   15954 	.db 0x0a
      005CDE 00                   15955 	.db 0x00
                                  15956 	.area CSEG    (CODE)
                                  15957 	.area CONST   (CODE)
      005CDF                      15958 ___str_139:
      005CDF 20 3C 34 3E 20 45 6E 15959 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      005CEF 0A                   15960 	.db 0x0a
      005CF0 00                   15961 	.db 0x00
                                  15962 	.area CSEG    (CODE)
                                  15963 	.area CONST   (CODE)
      005CF1                      15964 ___str_140:
      005CF1 20 20 7B             15965 	.ascii "  {"
      005CF4 00                   15966 	.db 0x00
                                  15967 	.area CSEG    (CODE)
                                  15968 	.area CONST   (CODE)
      005CF5                      15969 ___str_141:
      005CF5 3C 31 3E 20          15970 	.ascii "<1> "
      005CF9 00                   15971 	.db 0x00
                                  15972 	.area CSEG    (CODE)
                                  15973 	.area CONST   (CODE)
      005CFA                      15974 ___str_142:
      005CFA 44 61 74 65 20 52 61 15975 	.ascii "Date Rate"
             74 65
      005D03 0A                   15976 	.db 0x0a
      005D04 00                   15977 	.db 0x00
                                  15978 	.area CSEG    (CODE)
                                  15979 	.area CONST   (CODE)
      005D05                      15980 ___str_143:
      005D05 0A                   15981 	.db 0x0a
      005D06 0A                   15982 	.db 0x0a
      005D07 20 49 6E 63 6F 72 72 15983 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      005D17 0A                   15984 	.db 0x0a
      005D18 20 20 54 72 79 20 61 15985 	.ascii "  Try again."
             67 61 69 6E 2E
      005D24 0A                   15986 	.db 0x0a
      005D25 00                   15987 	.db 0x00
                                  15988 	.area CSEG    (CODE)
                                  15989 	.area CONST   (CODE)
      005D26                      15990 ___str_144:
      005D26 20 45 52 52 4F 52 3A 15991 	.ascii " ERROR: No Baud Set"
             20 4E 6F 20 42 61 75
             64 20 53 65 74
      005D39 0A                   15992 	.db 0x0a
      005D3A 00                   15993 	.db 0x00
                                  15994 	.area CSEG    (CODE)
                                  15995 	.area CONST   (CODE)
      005D3B                      15996 ___str_145:
      005D3B 20 50 6C 65 61 73 65 15997 	.ascii " Please set a baud rate"
             20 73 65 74 20 61 20
             62 61 75 64 20 72 61
             74 65
      005D52 00                   15998 	.db 0x00
                                  15999 	.area CSEG    (CODE)
                                  16000 	.area CONST   (CODE)
      005D53                      16001 ___str_146:
      005D53 20 45 52 52 4F 52 3A 16002 	.ascii " ERROR: Not Parity Set"
             20 4E 6F 74 20 50 61
             72 69 74 79 20 53 65
             74
      005D69 0A                   16003 	.db 0x0a
      005D6A 00                   16004 	.db 0x00
                                  16005 	.area CSEG    (CODE)
                                  16006 	.area CONST   (CODE)
      005D6B                      16007 ___str_147:
      005D6B 20 50 6C 65 61 73 65 16008 	.ascii " Please set parity"
             20 73 65 74 20 70 61
             72 69 74 79
      005D7D 00                   16009 	.db 0x00
                                  16010 	.area CSEG    (CODE)
                                  16011 	.area CONST   (CODE)
      005D7E                      16012 ___str_148:
      005D7E 20 53 65 74 74 74 69 16013 	.ascii " Setttings Verified"
             6E 67 73 20 56 65 72
             69 66 69 65 64
      005D91 0A                   16014 	.db 0x0a
      005D92 20 45 6E 61 62 6C 69 16015 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      005DA3 00                   16016 	.db 0x00
                                  16017 	.area CSEG    (CODE)
                                  16018 	.area CONST   (CODE)
      005DA4                      16019 ___str_149:
      005DA4 3C 31 3E             16020 	.ascii "<1>"
      005DA7 00                   16021 	.db 0x00
                                  16022 	.area CSEG    (CODE)
                                  16023 	.area CONST   (CODE)
      005DA8                      16024 ___str_150:
      005DA8 20 44 61 74 61 20 52 16025 	.ascii " Data Rate"
             61 74 65
      005DB2 0A                   16026 	.db 0x0a
      005DB3 00                   16027 	.db 0x00
                                  16028 	.area CSEG    (CODE)
                                  16029 	.area CONST   (CODE)
      005DB4                      16030 ___str_151:
      005DB4 3C 32 3E             16031 	.ascii "<2>"
      005DB7 00                   16032 	.db 0x00
                                  16033 	.area CSEG    (CODE)
                                  16034 	.area CONST   (CODE)
      005DB8                      16035 ___str_152:
      005DB8 20 4E 75 6D 62 65 72 16036 	.ascii " Number of Bits"
             20 6F 66 20 42 69 74
             73
      005DC7 0A                   16037 	.db 0x0a
      005DC8 20 20 20 20 28 38 20 16038 	.ascii "    (8 or 9 bits)"
             6F 72 20 39 20 62 69
             74 73 29
      005DD9 0A                   16039 	.db 0x0a
      005DDA 00                   16040 	.db 0x00
                                  16041 	.area CSEG    (CODE)
                                  16042 	.area CONST   (CODE)
      005DDB                      16043 ___str_153:
      005DDB 3C 33 3E             16044 	.ascii "<3>"
      005DDE 00                   16045 	.db 0x00
                                  16046 	.area CSEG    (CODE)
                                  16047 	.area CONST   (CODE)
      005DDF                      16048 ___str_154:
      005DDF 20 50 61 72 69 74 79 16049 	.ascii " Parity"
      005DE6 0A                   16050 	.db 0x0a
      005DE7 20 20 20 20 28 45 76 16051 	.ascii "    (Even/Odd/None)"
             65 6E 2F 4F 64 64 2F
             4E 6F 6E 65 29
      005DFA 0A                   16052 	.db 0x0a
      005DFB 00                   16053 	.db 0x00
                                  16054 	.area CSEG    (CODE)
                                  16055 	.area CONST   (CODE)
      005DFC                      16056 ___str_155:
      005DFC 20 3C 31 3E 20 31 32 16057 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      005E0A 0A                   16058 	.db 0x0a
      005E0B 00                   16059 	.db 0x00
                                  16060 	.area CSEG    (CODE)
                                  16061 	.area CONST   (CODE)
      005E0C                      16062 ___str_156:
      005E0C 20 3C 32 3E 20 32 34 16063 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      005E1A 0A                   16064 	.db 0x0a
      005E1B 00                   16065 	.db 0x00
                                  16066 	.area CSEG    (CODE)
                                  16067 	.area CONST   (CODE)
      005E1C                      16068 ___str_157:
      005E1C 20 3C 33 3E 20 34 38 16069 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      005E2A 0A                   16070 	.db 0x0a
      005E2B 00                   16071 	.db 0x00
                                  16072 	.area CSEG    (CODE)
                                  16073 	.area CONST   (CODE)
      005E2C                      16074 ___str_158:
      005E2C 20 3C 34 3E 20 39 36 16075 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      005E3A 0A                   16076 	.db 0x0a
      005E3B 00                   16077 	.db 0x00
                                  16078 	.area CSEG    (CODE)
                                  16079 	.area CONST   (CODE)
      005E3C                      16080 ___str_159:
      005E3C 20 3C 35 3E 20 31 39 16081 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      005E4B 0A                   16082 	.db 0x0a
      005E4C 00                   16083 	.db 0x00
                                  16084 	.area CSEG    (CODE)
                                  16085 	.area CONST   (CODE)
      005E4D                      16086 ___str_160:
      005E4D 3C 44 3E             16087 	.ascii "<D>"
      005E50 00                   16088 	.db 0x00
                                  16089 	.area CSEG    (CODE)
                                  16090 	.area CONST   (CODE)
      005E51                      16091 ___str_161:
      005E51 20 20 20 20 20 20 20 16092 	.ascii "          "
             20 20 20
      005E5B 00                   16093 	.db 0x00
                                  16094 	.area CSEG    (CODE)
                                  16095 	.area CONST   (CODE)
      005E5C                      16096 ___str_162:
      005E5C 3C 42 3E             16097 	.ascii "<B>"
      005E5F 00                   16098 	.db 0x00
                                  16099 	.area CSEG    (CODE)
                                  16100 	.area CONST   (CODE)
      005E60                      16101 ___str_163:
      005E60 3C 45 3E             16102 	.ascii "<E>"
      005E63 00                   16103 	.db 0x00
                                  16104 	.area CSEG    (CODE)
                                  16105 	.area CONST   (CODE)
      005E64                      16106 ___str_164:
      005E64 3C 46 3E             16107 	.ascii "<F>"
      005E67 00                   16108 	.db 0x00
                                  16109 	.area CSEG    (CODE)
                                  16110 	.area CONST   (CODE)
      005E68                      16111 ___str_165:
      005E68 3C 43 3E             16112 	.ascii "<C>"
      005E6B 00                   16113 	.db 0x00
                                  16114 	.area CSEG    (CODE)
                                  16115 	.area CONST   (CODE)
      005E6C                      16116 ___str_166:
      005E6C 3C 41 3E             16117 	.ascii "<A>"
      005E6F 00                   16118 	.db 0x00
                                  16119 	.area CSEG    (CODE)
                                  16120 	.area CONST   (CODE)
      005E70                      16121 ___str_167:
      005E70 20 55 41 52 54 20 5B 16122 	.ascii " UART [Enabled]"
             45 6E 61 62 6C 65 64
             5D
      005E7F 0A                   16123 	.db 0x0a
      005E80 00                   16124 	.db 0x00
                                  16125 	.area CSEG    (CODE)
                                  16126 	.area CONST   (CODE)
      005E81                      16127 ___str_168:
      005E81 20 55 41 52 54 20 5B 16128 	.ascii " UART [Disabled]"
             44 69 73 61 62 6C 65
             64 5D
      005E91 0A                   16129 	.db 0x0a
      005E92 00                   16130 	.db 0x00
                                  16131 	.area CSEG    (CODE)
                                  16132 	.area CONST   (CODE)
      005E93                      16133 ___str_169:
      005E93 49 4E 56 41 4C 49 44 16134 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      005EA0 0A                   16135 	.db 0x0a
      005EA1 00                   16136 	.db 0x00
                                  16137 	.area CSEG    (CODE)
                                  16138 	.area CONST   (CODE)
      005EA2                      16139 ___str_170:
      005EA2 54 72 79 20 61 67 61 16140 	.ascii "Try again."
             69 6E 2E
      005EAC 00                   16141 	.db 0x00
                                  16142 	.area CSEG    (CODE)
                                  16143 	.area CONST   (CODE)
      005EAD                      16144 ___str_171:
      005EAD 20 20 20 20 20 20 20 16145 	.ascii "               "
             20 20 20 20 20 20 20
             20
      005EBC 0A                   16146 	.db 0x0a
      005EBD 00                   16147 	.db 0x00
                                  16148 	.area CSEG    (CODE)
                                  16149 	.area XINIT   (CODE)
                                  16150 	.area CABS    (ABS,CODE)
