                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4350_lcd_v4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _rtcCmd_PARM_2
                                     17 	.globl _writeRegister16_PARM_2
                                     18 	.globl _writeRegister8_PARM_2
                                     19 	.globl _ramWrite8_PARM_2
                                     20 	.globl _iowrite8_PARM_2
                                     21 	.globl _keypad
                                     22 	.globl _writeSomeLines
                                     23 	.globl _write
                                     24 	.globl _drawChar
                                     25 	.globl _setRotation
                                     26 	.globl _ISR_receive
                                     27 	.globl _UART_transmit
                                     28 	.globl _UART_Init
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _FL
                                     36 	.globl _P
                                     37 	.globl _TF2
                                     38 	.globl _EXF2
                                     39 	.globl _RCLK
                                     40 	.globl _TCLK
                                     41 	.globl _EXEN2
                                     42 	.globl _TR2
                                     43 	.globl _C_T2
                                     44 	.globl _CP_RL2
                                     45 	.globl _T2CON_7
                                     46 	.globl _T2CON_6
                                     47 	.globl _T2CON_5
                                     48 	.globl _T2CON_4
                                     49 	.globl _T2CON_3
                                     50 	.globl _T2CON_2
                                     51 	.globl _T2CON_1
                                     52 	.globl _T2CON_0
                                     53 	.globl _PT2
                                     54 	.globl _PS
                                     55 	.globl _PT1
                                     56 	.globl _PX1
                                     57 	.globl _PT0
                                     58 	.globl _PX0
                                     59 	.globl _RD
                                     60 	.globl _WR
                                     61 	.globl _T1
                                     62 	.globl _T0
                                     63 	.globl _INT1
                                     64 	.globl _INT0
                                     65 	.globl _TXD
                                     66 	.globl _RXD
                                     67 	.globl _P3_7
                                     68 	.globl _P3_6
                                     69 	.globl _P3_5
                                     70 	.globl _P3_4
                                     71 	.globl _P3_3
                                     72 	.globl _P3_2
                                     73 	.globl _P3_1
                                     74 	.globl _P3_0
                                     75 	.globl _EA
                                     76 	.globl _ET2
                                     77 	.globl _ES
                                     78 	.globl _ET1
                                     79 	.globl _EX1
                                     80 	.globl _ET0
                                     81 	.globl _EX0
                                     82 	.globl _P2_7
                                     83 	.globl _P2_6
                                     84 	.globl _P2_5
                                     85 	.globl _P2_4
                                     86 	.globl _P2_3
                                     87 	.globl _P2_2
                                     88 	.globl _P2_1
                                     89 	.globl _P2_0
                                     90 	.globl _SM0
                                     91 	.globl _SM1
                                     92 	.globl _SM2
                                     93 	.globl _REN
                                     94 	.globl _TB8
                                     95 	.globl _RB8
                                     96 	.globl _TI
                                     97 	.globl _RI
                                     98 	.globl _T2EX
                                     99 	.globl _T2
                                    100 	.globl _P1_7
                                    101 	.globl _P1_6
                                    102 	.globl _P1_5
                                    103 	.globl _P1_4
                                    104 	.globl _P1_3
                                    105 	.globl _P1_2
                                    106 	.globl _P1_1
                                    107 	.globl _P1_0
                                    108 	.globl _TF1
                                    109 	.globl _TR1
                                    110 	.globl _TF0
                                    111 	.globl _TR0
                                    112 	.globl _IE1
                                    113 	.globl _IT1
                                    114 	.globl _IE0
                                    115 	.globl _IT0
                                    116 	.globl _P0_7
                                    117 	.globl _P0_6
                                    118 	.globl _P0_5
                                    119 	.globl _P0_4
                                    120 	.globl _P0_3
                                    121 	.globl _P0_2
                                    122 	.globl _P0_1
                                    123 	.globl _P0_0
                                    124 	.globl _B
                                    125 	.globl _A
                                    126 	.globl _ACC
                                    127 	.globl _PSW
                                    128 	.globl _TH2
                                    129 	.globl _TL2
                                    130 	.globl _RCAP2H
                                    131 	.globl _RCAP2L
                                    132 	.globl _T2MOD
                                    133 	.globl _T2CON
                                    134 	.globl _IP
                                    135 	.globl _P3
                                    136 	.globl _IE
                                    137 	.globl _P2
                                    138 	.globl _SBUF
                                    139 	.globl _SCON
                                    140 	.globl _P1
                                    141 	.globl _TH1
                                    142 	.globl _TH0
                                    143 	.globl _TL1
                                    144 	.globl _TL0
                                    145 	.globl _TMOD
                                    146 	.globl _TCON
                                    147 	.globl _PCON
                                    148 	.globl _DPH
                                    149 	.globl _DPL
                                    150 	.globl _SP
                                    151 	.globl _P0
                                    152 	.globl _parityBit
                                    153 	.globl _paritySet
                                    154 	.globl _bitMode
                                    155 	.globl _bitSet
                                    156 	.globl _baudRate
                                    157 	.globl _baudSet
                                    158 	.globl _UART_en
                                    159 	.globl _selection
                                    160 	.globl _drawChar_PARM_6
                                    161 	.globl _drawChar_PARM_5
                                    162 	.globl _drawChar_PARM_4
                                    163 	.globl _drawChar_PARM_3
                                    164 	.globl _drawChar_PARM_2
                                    165 	.globl _fillRect_PARM_5
                                    166 	.globl _fillRect_PARM_4
                                    167 	.globl _fillRect_PARM_3
                                    168 	.globl _fillRect_PARM_2
                                    169 	.globl _testCircles_PARM_2
                                    170 	.globl _drawCircle_PARM_4
                                    171 	.globl _drawCircle_PARM_3
                                    172 	.globl _drawCircle_PARM_2
                                    173 	.globl _drawPixel_PARM_3
                                    174 	.globl _drawPixel_PARM_2
                                    175 	.globl _rtcWrite_PARM_2
                                    176 	.globl __height
                                    177 	.globl __width
                                    178 	.globl _textbgcolor
                                    179 	.globl _textcolor
                                    180 	.globl _rotation
                                    181 	.globl _textsize
                                    182 	.globl _cursor_y
                                    183 	.globl _cursor_x
                                    184 	.globl _received_flag
                                    185 	.globl _received_byte
                                    186 	.globl _seg7_address
                                    187 	.globl _lcd_address
                                    188 	.globl _rowloc
                                    189 	.globl _colloc
                                    190 	.globl _iowrite8
                                    191 	.globl _ioread8
                                    192 	.globl _ramWrite8
                                    193 	.globl _ramRead8
                                    194 	.globl _writeAllRAM
                                    195 	.globl _checkAllRAM
                                    196 	.globl _delay
                                    197 	.globl _writeRegister8
                                    198 	.globl _writeRegister16
                                    199 	.globl _seg7Test
                                    200 	.globl _rtcInit
                                    201 	.globl _rtcBusy
                                    202 	.globl _rtcCmd
                                    203 	.globl _rtcWrite
                                    204 	.globl _rtcRead
                                    205 	.globl _rtcPrint
                                    206 	.globl _setCursor
                                    207 	.globl _setTextColor
                                    208 	.globl _setTextSize
                                    209 	.globl _setAddress
                                    210 	.globl _TFT_LCD_INIT
                                    211 	.globl _drawPixel
                                    212 	.globl _drawCircle
                                    213 	.globl _testCircles
                                    214 	.globl _fillRect
                                    215 	.globl _fillTop
                                    216 	.globl _fillScreen
                                    217 	.globl _clearLCD
                                    218 	.globl _LCD_string_write
                                    219 	.globl _writeNewLine
                                    220 	.globl _freeType
                                    221 	.globl _keyDetect
                                    222 	.globl _reverse
                                    223 	.globl _reverse16
                                    224 	.globl _hexToASCII
                                    225 	.globl _ASCIItoHex
                                    226 	.globl _asciiToDec
                                    227 	.globl _asciiToHex
                                    228 	.globl _print4Hex
                                    229 	.globl _print8Hex
                                    230 	.globl _print16Hex
                                    231 	.globl _print16Dec
                                    232 	.globl _print8ASCII
                                    233 	.globl _print16ASCII
                                    234 	.globl _setColorDefault
                                    235 	.globl _setColorSelect
                                    236 	.globl _setColorHighlight1
                                    237 	.globl _setColorHighlight2
                                    238 	.globl _setColorGray
                                    239 	.globl _setColorMenu
                                    240 	.globl _setColorRed
                                    241 	.globl _setColorWhite
                                    242 	.globl _setColorGreen
                                    243 	.globl _setColorYellow
                                    244 	.globl _inputAddress
                                    245 	.globl _inputBlockType
                                    246 	.globl _inputBlockSize
                                    247 	.globl _printMenu
                                    248 	.globl _dump
                                    249 	.globl _move
                                    250 	.globl _edit
                                    251 	.globl _find
                                    252 	.globl _count
                                    253 	.globl _check
                                    254 	.globl _uart
                                    255 	.globl _main
                                    256 ;--------------------------------------------------------
                                    257 ; special function registers
                                    258 ;--------------------------------------------------------
                                    259 	.area RSEG    (ABS,DATA)
      000000                        260 	.org 0x0000
                           000080   261 _P0	=	0x0080
                           000081   262 _SP	=	0x0081
                           000082   263 _DPL	=	0x0082
                           000083   264 _DPH	=	0x0083
                           000087   265 _PCON	=	0x0087
                           000088   266 _TCON	=	0x0088
                           000089   267 _TMOD	=	0x0089
                           00008A   268 _TL0	=	0x008a
                           00008B   269 _TL1	=	0x008b
                           00008C   270 _TH0	=	0x008c
                           00008D   271 _TH1	=	0x008d
                           000090   272 _P1	=	0x0090
                           000098   273 _SCON	=	0x0098
                           000099   274 _SBUF	=	0x0099
                           0000A0   275 _P2	=	0x00a0
                           0000A8   276 _IE	=	0x00a8
                           0000B0   277 _P3	=	0x00b0
                           0000B8   278 _IP	=	0x00b8
                           0000C8   279 _T2CON	=	0x00c8
                           0000C9   280 _T2MOD	=	0x00c9
                           0000CA   281 _RCAP2L	=	0x00ca
                           0000CB   282 _RCAP2H	=	0x00cb
                           0000CC   283 _TL2	=	0x00cc
                           0000CD   284 _TH2	=	0x00cd
                           0000D0   285 _PSW	=	0x00d0
                           0000E0   286 _ACC	=	0x00e0
                           0000E0   287 _A	=	0x00e0
                           0000F0   288 _B	=	0x00f0
                                    289 ;--------------------------------------------------------
                                    290 ; special function bits
                                    291 ;--------------------------------------------------------
                                    292 	.area RSEG    (ABS,DATA)
      000000                        293 	.org 0x0000
                           000080   294 _P0_0	=	0x0080
                           000081   295 _P0_1	=	0x0081
                           000082   296 _P0_2	=	0x0082
                           000083   297 _P0_3	=	0x0083
                           000084   298 _P0_4	=	0x0084
                           000085   299 _P0_5	=	0x0085
                           000086   300 _P0_6	=	0x0086
                           000087   301 _P0_7	=	0x0087
                           000088   302 _IT0	=	0x0088
                           000089   303 _IE0	=	0x0089
                           00008A   304 _IT1	=	0x008a
                           00008B   305 _IE1	=	0x008b
                           00008C   306 _TR0	=	0x008c
                           00008D   307 _TF0	=	0x008d
                           00008E   308 _TR1	=	0x008e
                           00008F   309 _TF1	=	0x008f
                           000090   310 _P1_0	=	0x0090
                           000091   311 _P1_1	=	0x0091
                           000092   312 _P1_2	=	0x0092
                           000093   313 _P1_3	=	0x0093
                           000094   314 _P1_4	=	0x0094
                           000095   315 _P1_5	=	0x0095
                           000096   316 _P1_6	=	0x0096
                           000097   317 _P1_7	=	0x0097
                           000090   318 _T2	=	0x0090
                           000091   319 _T2EX	=	0x0091
                           000098   320 _RI	=	0x0098
                           000099   321 _TI	=	0x0099
                           00009A   322 _RB8	=	0x009a
                           00009B   323 _TB8	=	0x009b
                           00009C   324 _REN	=	0x009c
                           00009D   325 _SM2	=	0x009d
                           00009E   326 _SM1	=	0x009e
                           00009F   327 _SM0	=	0x009f
                           0000A0   328 _P2_0	=	0x00a0
                           0000A1   329 _P2_1	=	0x00a1
                           0000A2   330 _P2_2	=	0x00a2
                           0000A3   331 _P2_3	=	0x00a3
                           0000A4   332 _P2_4	=	0x00a4
                           0000A5   333 _P2_5	=	0x00a5
                           0000A6   334 _P2_6	=	0x00a6
                           0000A7   335 _P2_7	=	0x00a7
                           0000A8   336 _EX0	=	0x00a8
                           0000A9   337 _ET0	=	0x00a9
                           0000AA   338 _EX1	=	0x00aa
                           0000AB   339 _ET1	=	0x00ab
                           0000AC   340 _ES	=	0x00ac
                           0000AD   341 _ET2	=	0x00ad
                           0000AF   342 _EA	=	0x00af
                           0000B0   343 _P3_0	=	0x00b0
                           0000B1   344 _P3_1	=	0x00b1
                           0000B2   345 _P3_2	=	0x00b2
                           0000B3   346 _P3_3	=	0x00b3
                           0000B4   347 _P3_4	=	0x00b4
                           0000B5   348 _P3_5	=	0x00b5
                           0000B6   349 _P3_6	=	0x00b6
                           0000B7   350 _P3_7	=	0x00b7
                           0000B0   351 _RXD	=	0x00b0
                           0000B1   352 _TXD	=	0x00b1
                           0000B2   353 _INT0	=	0x00b2
                           0000B3   354 _INT1	=	0x00b3
                           0000B4   355 _T0	=	0x00b4
                           0000B5   356 _T1	=	0x00b5
                           0000B6   357 _WR	=	0x00b6
                           0000B7   358 _RD	=	0x00b7
                           0000B8   359 _PX0	=	0x00b8
                           0000B9   360 _PT0	=	0x00b9
                           0000BA   361 _PX1	=	0x00ba
                           0000BB   362 _PT1	=	0x00bb
                           0000BC   363 _PS	=	0x00bc
                           0000BD   364 _PT2	=	0x00bd
                           0000C8   365 _T2CON_0	=	0x00c8
                           0000C9   366 _T2CON_1	=	0x00c9
                           0000CA   367 _T2CON_2	=	0x00ca
                           0000CB   368 _T2CON_3	=	0x00cb
                           0000CC   369 _T2CON_4	=	0x00cc
                           0000CD   370 _T2CON_5	=	0x00cd
                           0000CE   371 _T2CON_6	=	0x00ce
                           0000CF   372 _T2CON_7	=	0x00cf
                           0000C8   373 _CP_RL2	=	0x00c8
                           0000C9   374 _C_T2	=	0x00c9
                           0000CA   375 _TR2	=	0x00ca
                           0000CB   376 _EXEN2	=	0x00cb
                           0000CC   377 _TCLK	=	0x00cc
                           0000CD   378 _RCLK	=	0x00cd
                           0000CE   379 _EXF2	=	0x00ce
                           0000CF   380 _TF2	=	0x00cf
                           0000D0   381 _P	=	0x00d0
                           0000D1   382 _FL	=	0x00d1
                           0000D2   383 _OV	=	0x00d2
                           0000D3   384 _RS0	=	0x00d3
                           0000D4   385 _RS1	=	0x00d4
                           0000D5   386 _F0	=	0x00d5
                           0000D6   387 _AC	=	0x00d6
                           0000D7   388 _CY	=	0x00d7
                                    389 ;--------------------------------------------------------
                                    390 ; overlayable register banks
                                    391 ;--------------------------------------------------------
                                    392 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        393 	.ds 8
                                    394 ;--------------------------------------------------------
                                    395 ; internal ram data
                                    396 ;--------------------------------------------------------
                                    397 	.area DSEG    (DATA)
      000008                        398 _colloc::
      000008                        399 	.ds 1
      000009                        400 _rowloc::
      000009                        401 	.ds 1
      00000A                        402 _lcd_address::
      00000A                        403 	.ds 2
      00000C                        404 _seg7_address::
      00000C                        405 	.ds 2
      00000E                        406 _received_byte::
      00000E                        407 	.ds 1
      00000F                        408 _received_flag::
      00000F                        409 	.ds 1
      000010                        410 _cursor_x::
      000010                        411 	.ds 2
      000012                        412 _cursor_y::
      000012                        413 	.ds 2
      000014                        414 _textsize::
      000014                        415 	.ds 1
      000015                        416 _rotation::
      000015                        417 	.ds 1
      000016                        418 _textcolor::
      000016                        419 	.ds 2
      000018                        420 _textbgcolor::
      000018                        421 	.ds 2
      00001A                        422 __width::
      00001A                        423 	.ds 2
      00001C                        424 __height::
      00001C                        425 	.ds 2
      00001E                        426 _rtcWrite_PARM_2:
      00001E                        427 	.ds 1
      00001F                        428 _rtcPrint_printval_65536_226:
      00001F                        429 	.ds 9
      000028                        430 _drawPixel_PARM_2:
      000028                        431 	.ds 2
      00002A                        432 _drawPixel_PARM_3:
      00002A                        433 	.ds 2
      00002C                        434 _drawCircle_PARM_2:
      00002C                        435 	.ds 2
      00002E                        436 _drawCircle_PARM_3:
      00002E                        437 	.ds 2
      000030                        438 _drawCircle_PARM_4:
      000030                        439 	.ds 2
      000032                        440 _drawCircle_x0_65536_393:
      000032                        441 	.ds 2
      000034                        442 _drawCircle_f_65536_394:
      000034                        443 	.ds 2
      000036                        444 _drawCircle_ddF_x_65536_394:
      000036                        445 	.ds 2
      000038                        446 _drawCircle_x_65536_394:
      000038                        447 	.ds 2
      00003A                        448 _testCircles_PARM_2:
      00003A                        449 	.ds 2
      00003C                        450 _testCircles_w_65536_398:
      00003C                        451 	.ds 2
      00003E                        452 _testCircles_h_65536_398:
      00003E                        453 	.ds 2
      000040                        454 _fillRect_PARM_2:
      000040                        455 	.ds 2
      000042                        456 _fillRect_PARM_3:
      000042                        457 	.ds 2
      000044                        458 _fillRect_PARM_4:
      000044                        459 	.ds 2
      000046                        460 _fillRect_PARM_5:
      000046                        461 	.ds 2
      000048                        462 _drawChar_PARM_2:
      000048                        463 	.ds 2
      00004A                        464 _drawChar_PARM_3:
      00004A                        465 	.ds 1
      00004B                        466 _drawChar_PARM_4:
      00004B                        467 	.ds 2
      00004D                        468 _drawChar_PARM_5:
      00004D                        469 	.ds 2
      00004F                        470 _drawChar_PARM_6:
      00004F                        471 	.ds 1
      000050                        472 _drawChar_x_65536_458:
      000050                        473 	.ds 2
      000052                        474 _drawChar_i_131072_461:
      000052                        475 	.ds 1
      000053                        476 _drawChar_line_196608_462:
      000053                        477 	.ds 1
      000054                        478 _drawChar_sloc0_1_0:
      000054                        479 	.ds 2
      000056                        480 _asciiToHex_store_65536_519:
      000056                        481 	.ds 2
      000058                        482 _dump_d_65536_553:
      000058                        483 	.ds 2
      00005A                        484 _dump_sloc0_1_0:
      00005A                        485 	.ds 1
      00005B                        486 _move_d_65536_609:
      00005B                        487 	.ds 2
      00005D                        488 _move_i_131072_618:
      00005D                        489 	.ds 2
      00005F                        490 _edit_d_65536_628:
      00005F                        491 	.ds 2
      000061                        492 _find_i_262144_665:
      000061                        493 	.ds 2
      000063                        494 _find_sloc0_1_0:
      000063                        495 	.ds 1
      000064                        496 _find_sloc1_1_0:
      000064                        497 	.ds 2
      000066                        498 _count_i_262144_721:
      000066                        499 	.ds 2
      000068                        500 _count_sloc0_1_0:
      000068                        501 	.ds 1
      000069                        502 _count_sloc1_1_0:
      000069                        503 	.ds 2
                                    504 ;--------------------------------------------------------
                                    505 ; overlayable items in internal ram 
                                    506 ;--------------------------------------------------------
                                    507 	.area	OSEG    (OVR,DATA)
      00006B                        508 _iowrite8_PARM_2:
      00006B                        509 	.ds 1
                                    510 	.area	OSEG    (OVR,DATA)
                                    511 	.area	OSEG    (OVR,DATA)
      00006B                        512 _ramWrite8_PARM_2:
      00006B                        513 	.ds 1
                                    514 	.area	OSEG    (OVR,DATA)
                                    515 	.area	OSEG    (OVR,DATA)
                                    516 	.area	OSEG    (OVR,DATA)
                                    517 	.area	OSEG    (OVR,DATA)
                                    518 	.area	OSEG    (OVR,DATA)
      00006B                        519 _writeRegister8_PARM_2:
      00006B                        520 	.ds 1
                                    521 	.area	OSEG    (OVR,DATA)
      00006B                        522 _writeRegister16_PARM_2:
      00006B                        523 	.ds 2
                                    524 	.area	OSEG    (OVR,DATA)
                                    525 	.area	OSEG    (OVR,DATA)
      00006B                        526 _rtcCmd_PARM_2:
      00006B                        527 	.ds 1
                                    528 	.area	OSEG    (OVR,DATA)
      00006B                        529 _setCursor_PARM_2:
      00006B                        530 	.ds 2
                                    531 	.area	OSEG    (OVR,DATA)
      00006B                        532 _setTextColor_PARM_2:
      00006B                        533 	.ds 2
                                    534 	.area	OSEG    (OVR,DATA)
                                    535 	.area	OSEG    (OVR,DATA)
      00006B                        536 _setAddress_PARM_2:
      00006B                        537 	.ds 2
      00006D                        538 _setAddress_PARM_3:
      00006D                        539 	.ds 2
      00006F                        540 _setAddress_PARM_4:
      00006F                        541 	.ds 2
                                    542 	.area	OSEG    (OVR,DATA)
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 ;--------------------------------------------------------
                                    545 ; Stack segment in internal ram 
                                    546 ;--------------------------------------------------------
                                    547 	.area	SSEG
      000091                        548 __start__stack:
      000091                        549 	.ds	1
                                    550 
                                    551 ;--------------------------------------------------------
                                    552 ; indirectly addressable internal ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area ISEG    (DATA)
      000071                        555 _selection::
      000071                        556 	.ds 1
      000072                        557 _UART_en::
      000072                        558 	.ds 1
      000073                        559 _baudSet::
      000073                        560 	.ds 1
      000074                        561 _baudRate::
      000074                        562 	.ds 2
      000076                        563 _bitSet::
      000076                        564 	.ds 1
      000077                        565 _bitMode::
      000077                        566 	.ds 1
      000078                        567 _paritySet::
      000078                        568 	.ds 1
      000079                        569 _parityBit::
      000079                        570 	.ds 1
      00007A                        571 _dump_address_65536_553:
      00007A                        572 	.ds 2
      00007C                        573 _dump_exit_65536_553:
      00007C                        574 	.ds 1
      00007D                        575 _move_sourceAddress_65536_609:
      00007D                        576 	.ds 2
      00007F                        577 _move_invalidSize_65536_609:
      00007F                        578 	.ds 1
      000080                        579 _edit_exit_65536_628:
      000080                        580 	.ds 1
      000081                        581 _edit_invalid_65536_628:
      000081                        582 	.ds 1
      000082                        583 _find_address_65536_652:
      000082                        584 	.ds 2
      000084                        585 _find_blockSize_65536_652:
      000084                        586 	.ds 1
      000085                        587 _find_value_65536_652:
      000085                        588 	.ds 1
      000086                        589 _find_scan_65536_652:
      000086                        590 	.ds 1
      000087                        591 _find_noneFound_65536_652:
      000087                        592 	.ds 1
      000088                        593 _find_exit_65536_652:
      000088                        594 	.ds 1
      000089                        595 _count_address_65536_708:
      000089                        596 	.ds 2
      00008B                        597 _count_blockSize_65536_708:
      00008B                        598 	.ds 1
      00008C                        599 _count_value_65536_708:
      00008C                        600 	.ds 1
      00008D                        601 _count_scan_65536_708:
      00008D                        602 	.ds 1
      00008E                        603 _count_noneFound_65536_708:
      00008E                        604 	.ds 1
      00008F                        605 _count_exit_65536_708:
      00008F                        606 	.ds 1
      000090                        607 _uart_baudType_65536_763:
      000090                        608 	.ds 1
                                    609 ;--------------------------------------------------------
                                    610 ; absolute internal ram data
                                    611 ;--------------------------------------------------------
                                    612 	.area IABS    (ABS,DATA)
                                    613 	.area IABS    (ABS,DATA)
                                    614 ;--------------------------------------------------------
                                    615 ; bit data
                                    616 ;--------------------------------------------------------
                                    617 	.area BSEG    (BIT)
                                    618 ;--------------------------------------------------------
                                    619 ; paged external ram data
                                    620 ;--------------------------------------------------------
                                    621 	.area PSEG    (PAG,XDATA)
                                    622 ;--------------------------------------------------------
                                    623 ; external ram data
                                    624 ;--------------------------------------------------------
                                    625 	.area XSEG    (XDATA)
                                    626 ;--------------------------------------------------------
                                    627 ; absolute external ram data
                                    628 ;--------------------------------------------------------
                                    629 	.area XABS    (ABS,XDATA)
                                    630 ;--------------------------------------------------------
                                    631 ; external initialized ram data
                                    632 ;--------------------------------------------------------
                                    633 	.area XISEG   (XDATA)
                                    634 	.area HOME    (CODE)
                                    635 	.area GSINIT0 (CODE)
                                    636 	.area GSINIT1 (CODE)
                                    637 	.area GSINIT2 (CODE)
                                    638 	.area GSINIT3 (CODE)
                                    639 	.area GSINIT4 (CODE)
                                    640 	.area GSINIT5 (CODE)
                                    641 	.area GSINIT  (CODE)
                                    642 	.area GSFINAL (CODE)
                                    643 	.area CSEG    (CODE)
                                    644 ;--------------------------------------------------------
                                    645 ; interrupt vector 
                                    646 ;--------------------------------------------------------
                                    647 	.area HOME    (CODE)
      000000                        648 __interrupt_vect:
      000000 02 00 29         [24]  649 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  650 	reti
      000004                        651 	.ds	7
      00000B 32               [24]  652 	reti
      00000C                        653 	.ds	7
      000013 32               [24]  654 	reti
      000014                        655 	.ds	7
      00001B 32               [24]  656 	reti
      00001C                        657 	.ds	7
      000023 02 01 C4         [24]  658 	ljmp	_ISR_receive
                                    659 ;--------------------------------------------------------
                                    660 ; global & static initialisations
                                    661 ;--------------------------------------------------------
                                    662 	.area HOME    (CODE)
                                    663 	.area GSINIT  (CODE)
                                    664 	.area GSFINAL (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.globl __sdcc_gsinit_startup
                                    667 	.globl __sdcc_program_startup
                                    668 	.globl __start__stack
                                    669 	.globl __mcs51_genXINIT
                                    670 	.globl __mcs51_genXRAMCLEAR
                                    671 	.globl __mcs51_genRAMCLEAR
                                    672 ;	.\ecen4350_lcd_v4.c:41: __xdata unsigned char *lcd_address = (unsigned char __xdata *)__LCD_ADDRESS__;			//LCD address pointer
      000082 75 0A 00         [24]  673 	mov	_lcd_address,#0x00
      000085 75 0B 40         [24]  674 	mov	(_lcd_address + 1),#0x40
                                    675 ;	.\ecen4350_lcd_v4.c:42: __xdata unsigned char *seg7_address = (unsigned char __xdata *)__SEG_7_ADDRESS__;		//7segment address poitner
      000088 75 0C 00         [24]  676 	mov	_seg7_address,#0x00
      00008B 75 0D 80         [24]  677 	mov	(_seg7_address + 1),#0x80
                                    678 ;	.\ecen4350_lcd_v4.c:44: volatile unsigned char received_byte = 0;
      00008E 75 0E 00         [24]  679 	mov	_received_byte,#0x00
                                    680 ;	.\ecen4350_lcd_v4.c:45: volatile unsigned char received_flag = 0;
      000091 75 0F 00         [24]  681 	mov	_received_flag,#0x00
                                    682 ;	.\ecen4350_lcd_v4.c:48: __idata unsigned char UART_en = 0;
      000094 78 72            [12]  683 	mov	r0,#_UART_en
      000096 76 00            [12]  684 	mov	@r0,#0x00
                                    685 ;	.\ecen4350_lcd_v4.c:49: __idata unsigned char baudSet = 0;
      000098 78 73            [12]  686 	mov	r0,#_baudSet
      00009A 76 00            [12]  687 	mov	@r0,#0x00
                                    688 ;	.\ecen4350_lcd_v4.c:51: __idata unsigned char bitSet = 0;
      00009C 78 76            [12]  689 	mov	r0,#_bitSet
      00009E 76 00            [12]  690 	mov	@r0,#0x00
                                    691 ;	.\ecen4350_lcd_v4.c:53: __idata unsigned char paritySet = 0;
      0000A0 78 78            [12]  692 	mov	r0,#_paritySet
      0000A2 76 00            [12]  693 	mov	@r0,#0x00
                                    694 	.area GSFINAL (CODE)
      0000A4 02 00 26         [24]  695 	ljmp	__sdcc_program_startup
                                    696 ;--------------------------------------------------------
                                    697 ; Home
                                    698 ;--------------------------------------------------------
                                    699 	.area HOME    (CODE)
                                    700 	.area HOME    (CODE)
      000026                        701 __sdcc_program_startup:
      000026 02 53 27         [24]  702 	ljmp	_main
                                    703 ;	return from main will return to caller
                                    704 ;--------------------------------------------------------
                                    705 ; code
                                    706 ;--------------------------------------------------------
                                    707 	.area CSEG    (CODE)
                                    708 ;------------------------------------------------------------
                                    709 ;Allocation info for local variables in function 'iowrite8'
                                    710 ;------------------------------------------------------------
                                    711 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    712 ;map_address               Allocated to registers 
                                    713 ;------------------------------------------------------------
                                    714 ;	.\ecen4350_lcd_v4.c:90: inline void iowrite8(unsigned char __xdata *map_address, unsigned char d) {
                                    715 ;	-----------------------------------------
                                    716 ;	 function iowrite8
                                    717 ;	-----------------------------------------
      0000A7                        718 _iowrite8:
                           000007   719 	ar7 = 0x07
                           000006   720 	ar6 = 0x06
                           000005   721 	ar5 = 0x05
                           000004   722 	ar4 = 0x04
                           000003   723 	ar3 = 0x03
                           000002   724 	ar2 = 0x02
                           000001   725 	ar1 = 0x01
                           000000   726 	ar0 = 0x00
                                    727 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    728 ;	assignBit
      0000A7 D2 B5            [12]  729 	setb	_P3_5
                                    730 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0000A9 E5 6B            [12]  731 	mov	a,_iowrite8_PARM_2
      0000AB F0               [24]  732 	movx	@dptr,a
                                    733 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    734 ;	assignBit
      0000AC C2 B5            [12]  735 	clr	_P3_5
                                    736 ;	.\ecen4350_lcd_v4.c:94: }
      0000AE 22               [24]  737 	ret
                                    738 ;------------------------------------------------------------
                                    739 ;Allocation info for local variables in function 'ioread8'
                                    740 ;------------------------------------------------------------
                                    741 ;map_address               Allocated to registers 
                                    742 ;d                         Allocated to registers r7 
                                    743 ;------------------------------------------------------------
                                    744 ;	.\ecen4350_lcd_v4.c:96: inline unsigned char ioread8(unsigned char __xdata *map_address)
                                    745 ;	-----------------------------------------
                                    746 ;	 function ioread8
                                    747 ;	-----------------------------------------
      0000AF                        748 _ioread8:
                                    749 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                    750 ;	assignBit
      0000AF D2 B5            [12]  751 	setb	_P3_5
                                    752 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0000B1 E0               [24]  753 	movx	a,@dptr
      0000B2 FF               [12]  754 	mov	r7,a
                                    755 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                    756 ;	assignBit
      0000B3 C2 B5            [12]  757 	clr	_P3_5
                                    758 ;	.\ecen4350_lcd_v4.c:102: return d;
      0000B5 8F 82            [24]  759 	mov	dpl,r7
                                    760 ;	.\ecen4350_lcd_v4.c:103: }
      0000B7 22               [24]  761 	ret
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'ramWrite8'
                                    764 ;------------------------------------------------------------
                                    765 ;d                         Allocated with name '_ramWrite8_PARM_2'
                                    766 ;map_address               Allocated to registers 
                                    767 ;------------------------------------------------------------
                                    768 ;	.\ecen4350_lcd_v4.c:105: inline void ramWrite8(unsigned char __xdata *map_address, unsigned char d)
                                    769 ;	-----------------------------------------
                                    770 ;	 function ramWrite8
                                    771 ;	-----------------------------------------
      0000B8                        772 _ramWrite8:
                                    773 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                    774 ;	assignBit
      0000B8 C2 B5            [12]  775 	clr	_P3_5
                                    776 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      0000BA E5 6B            [12]  777 	mov	a,_ramWrite8_PARM_2
      0000BC F0               [24]  778 	movx	@dptr,a
                                    779 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                    780 ;	assignBit
      0000BD D2 B5            [12]  781 	setb	_P3_5
                                    782 ;	.\ecen4350_lcd_v4.c:110: }
      0000BF 22               [24]  783 	ret
                                    784 ;------------------------------------------------------------
                                    785 ;Allocation info for local variables in function 'ramRead8'
                                    786 ;------------------------------------------------------------
                                    787 ;map_address               Allocated to registers 
                                    788 ;d                         Allocated to registers r7 
                                    789 ;------------------------------------------------------------
                                    790 ;	.\ecen4350_lcd_v4.c:112: inline unsigned char ramRead8(unsigned char __xdata *map_address)
                                    791 ;	-----------------------------------------
                                    792 ;	 function ramRead8
                                    793 ;	-----------------------------------------
      0000C0                        794 _ramRead8:
                                    795 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                    796 ;	assignBit
      0000C0 C2 B5            [12]  797 	clr	_P3_5
                                    798 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0000C2 E0               [24]  799 	movx	a,@dptr
      0000C3 FF               [12]  800 	mov	r7,a
                                    801 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                    802 ;	assignBit
      0000C4 D2 B5            [12]  803 	setb	_P3_5
                                    804 ;	.\ecen4350_lcd_v4.c:118: return d;
      0000C6 8F 82            [24]  805 	mov	dpl,r7
                                    806 ;	.\ecen4350_lcd_v4.c:119: }
      0000C8 22               [24]  807 	ret
                                    808 ;------------------------------------------------------------
                                    809 ;Allocation info for local variables in function 'writeAllRAM'
                                    810 ;------------------------------------------------------------
                                    811 ;d                         Allocated to registers r7 
                                    812 ;i                         Allocated to registers r3 r4 r5 r6 
                                    813 ;ram_address               Allocated to registers 
                                    814 ;------------------------------------------------------------
                                    815 ;	.\ecen4350_lcd_v4.c:121: void writeAllRAM(unsigned char d)
                                    816 ;	-----------------------------------------
                                    817 ;	 function writeAllRAM
                                    818 ;	-----------------------------------------
      0000C9                        819 _writeAllRAM:
      0000C9 AF 82            [24]  820 	mov	r7,dpl
                                    821 ;	.\ecen4350_lcd_v4.c:126: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000CB 7B 00            [12]  822 	mov	r3,#0x00
      0000CD 7C 00            [12]  823 	mov	r4,#0x00
      0000CF 7D 00            [12]  824 	mov	r5,#0x00
      0000D1 7E 00            [12]  825 	mov	r6,#0x00
      0000D3                        826 00102$:
                                    827 ;	.\ecen4350_lcd_v4.c:128: IOM = 0;
                                    828 ;	assignBit
      0000D3 C2 B5            [12]  829 	clr	_P3_5
                                    830 ;	.\ecen4350_lcd_v4.c:129: ram_address = (unsigned char __xdata *)(i);
      0000D5 8B 82            [24]  831 	mov	dpl,r3
      0000D7 8C 83            [24]  832 	mov	dph,r4
                                    833 ;	.\ecen4350_lcd_v4.c:130: *ram_address = d;
      0000D9 EF               [12]  834 	mov	a,r7
      0000DA F0               [24]  835 	movx	@dptr,a
                                    836 ;	.\ecen4350_lcd_v4.c:131: IOM = 1;
                                    837 ;	assignBit
      0000DB D2 B5            [12]  838 	setb	_P3_5
                                    839 ;	.\ecen4350_lcd_v4.c:126: for (i = (long) __START_RAM__; i <= (long) __END_RAM__; i++)
      0000DD 0B               [12]  840 	inc	r3
      0000DE BB 00 09         [24]  841 	cjne	r3,#0x00,00111$
      0000E1 0C               [12]  842 	inc	r4
      0000E2 BC 00 05         [24]  843 	cjne	r4,#0x00,00111$
      0000E5 0D               [12]  844 	inc	r5
      0000E6 BD 00 01         [24]  845 	cjne	r5,#0x00,00111$
      0000E9 0E               [12]  846 	inc	r6
      0000EA                        847 00111$:
      0000EA C3               [12]  848 	clr	c
      0000EB 74 FF            [12]  849 	mov	a,#0xff
      0000ED 9B               [12]  850 	subb	a,r3
      0000EE 74 FF            [12]  851 	mov	a,#0xff
      0000F0 9C               [12]  852 	subb	a,r4
      0000F1 E4               [12]  853 	clr	a
      0000F2 9D               [12]  854 	subb	a,r5
      0000F3 E4               [12]  855 	clr	a
      0000F4 9E               [12]  856 	subb	a,r6
      0000F5 50 DC            [24]  857 	jnc	00102$
                                    858 ;	.\ecen4350_lcd_v4.c:133: }
      0000F7 22               [24]  859 	ret
                                    860 ;------------------------------------------------------------
                                    861 ;Allocation info for local variables in function 'checkAllRAM'
                                    862 ;------------------------------------------------------------
                                    863 ;d                         Allocated to registers r7 
                                    864 ;ram_address               Allocated to registers 
                                    865 ;i                         Allocated to registers r3 r4 r5 r6 
                                    866 ;__3276800001              Allocated to registers 
                                    867 ;__3276800002              Allocated to registers 
                                    868 ;map_address               Allocated to registers 
                                    869 ;d                         Allocated to registers 
                                    870 ;__2621440004              Allocated to registers 
                                    871 ;__2621440005              Allocated to registers 
                                    872 ;map_address               Allocated to registers 
                                    873 ;d                         Allocated to registers 
                                    874 ;------------------------------------------------------------
                                    875 ;	.\ecen4350_lcd_v4.c:135: void checkAllRAM(unsigned char d)
                                    876 ;	-----------------------------------------
                                    877 ;	 function checkAllRAM
                                    878 ;	-----------------------------------------
      0000F8                        879 _checkAllRAM:
      0000F8 AF 82            [24]  880 	mov	r7,dpl
                                    881 ;	.\ecen4350_lcd_v4.c:138: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      0000FA 7B 00            [12]  882 	mov	r3,#0x00
      0000FC 7C 00            [12]  883 	mov	r4,#0x00
      0000FE 7D 00            [12]  884 	mov	r5,#0x00
      000100 7E 00            [12]  885 	mov	r6,#0x00
      000102                        886 00107$:
      000102 C3               [12]  887 	clr	c
      000103 74 FF            [12]  888 	mov	a,#0xff
      000105 9B               [12]  889 	subb	a,r3
      000106 74 FF            [12]  890 	mov	a,#0xff
      000108 9C               [12]  891 	subb	a,r4
      000109 E4               [12]  892 	clr	a
      00010A 9D               [12]  893 	subb	a,r5
      00010B E4               [12]  894 	clr	a
      00010C 9E               [12]  895 	subb	a,r6
      00010D 50 01            [24]  896 	jnc	00124$
      00010F 22               [24]  897 	ret
      000110                        898 00124$:
                                    899 ;	.\ecen4350_lcd_v4.c:139: IOM = 0;
                                    900 ;	assignBit
      000110 C2 B5            [12]  901 	clr	_P3_5
                                    902 ;	.\ecen4350_lcd_v4.c:140: ram_address = (unsigned char __xdata *)(i);
      000112 8B 82            [24]  903 	mov	dpl,r3
      000114 8C 83            [24]  904 	mov	dph,r4
                                    905 ;	.\ecen4350_lcd_v4.c:142: if(d != *ram_address) {
      000116 E0               [24]  906 	movx	a,@dptr
      000117 FA               [12]  907 	mov	r2,a
      000118 EF               [12]  908 	mov	a,r7
      000119 B5 02 02         [24]  909 	cjne	a,ar2,00125$
      00011C 80 4A            [24]  910 	sjmp	00102$
      00011E                        911 00125$:
                                    912 ;	.\ecen4350_lcd_v4.c:143: iowrite8(seg7_address, SEG_F);	// Write F to 7-segment; RAM test fail
      00011E 85 0C 82         [24]  913 	mov	dpl,_seg7_address
      000121 85 0D 83         [24]  914 	mov	dph,(_seg7_address + 1)
                                    915 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    916 ;	assignBit
      000124 D2 B5            [12]  917 	setb	_P3_5
                                    918 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000126 74 8E            [12]  919 	mov	a,#0x8e
      000128 F0               [24]  920 	movx	@dptr,a
                                    921 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    922 ;	assignBit
      000129 C2 B5            [12]  923 	clr	_P3_5
                                    924 ;	.\ecen4350_lcd_v4.c:144: setCursor(0,0);
      00012B E4               [12]  925 	clr	a
      00012C F5 6B            [12]  926 	mov	_setCursor_PARM_2,a
      00012E F5 6C            [12]  927 	mov	(_setCursor_PARM_2 + 1),a
      000130 90 00 00         [24]  928 	mov	dptr,#0x0000
      000133 C0 07            [24]  929 	push	ar7
      000135 C0 06            [24]  930 	push	ar6
      000137 C0 05            [24]  931 	push	ar5
      000139 C0 04            [24]  932 	push	ar4
      00013B C0 03            [24]  933 	push	ar3
      00013D 12 05 51         [24]  934 	lcall	_setCursor
                                    935 ;	.\ecen4350_lcd_v4.c:145: LCD_string_write("ERROR FOUND At: ");
      000140 90 5D 6F         [24]  936 	mov	dptr,#___str_0
      000143 75 F0 80         [24]  937 	mov	b,#0x80
      000146 12 10 6B         [24]  938 	lcall	_LCD_string_write
      000149 D0 03            [24]  939 	pop	ar3
      00014B D0 04            [24]  940 	pop	ar4
                                    941 ;	.\ecen4350_lcd_v4.c:146: print16Hex(i);
      00014D 8B 82            [24]  942 	mov	dpl,r3
      00014F 8C 83            [24]  943 	mov	dph,r4
      000151 C0 04            [24]  944 	push	ar4
      000153 C0 03            [24]  945 	push	ar3
      000155 12 15 53         [24]  946 	lcall	_print16Hex
                                    947 ;	.\ecen4350_lcd_v4.c:147: delay(40);
      000158 90 00 28         [24]  948 	mov	dptr,#0x0028
      00015B 12 01 87         [24]  949 	lcall	_delay
      00015E D0 03            [24]  950 	pop	ar3
      000160 D0 04            [24]  951 	pop	ar4
      000162 D0 05            [24]  952 	pop	ar5
      000164 D0 06            [24]  953 	pop	ar6
      000166 D0 07            [24]  954 	pop	ar7
      000168                        955 00102$:
                                    956 ;	.\ecen4350_lcd_v4.c:149: iowrite8(seg7_address, SEG_P);		// Write A to 7-segment
      000168 85 0C 82         [24]  957 	mov	dpl,_seg7_address
      00016B 85 0D 83         [24]  958 	mov	dph,(_seg7_address + 1)
                                    959 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                    960 ;	assignBit
      00016E D2 B5            [12]  961 	setb	_P3_5
                                    962 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000170 74 8C            [12]  963 	mov	a,#0x8c
      000172 F0               [24]  964 	movx	@dptr,a
                                    965 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                    966 ;	assignBit
      000173 C2 B5            [12]  967 	clr	_P3_5
                                    968 ;	.\ecen4350_lcd_v4.c:150: IOM = 1;
                                    969 ;	assignBit
      000175 D2 B5            [12]  970 	setb	_P3_5
                                    971 ;	.\ecen4350_lcd_v4.c:138: for (unsigned long i =(long) __START_RAM__; i<=(long)__END_RAM__; i++) {
      000177 0B               [12]  972 	inc	r3
      000178 BB 00 09         [24]  973 	cjne	r3,#0x00,00126$
      00017B 0C               [12]  974 	inc	r4
      00017C BC 00 05         [24]  975 	cjne	r4,#0x00,00126$
      00017F 0D               [12]  976 	inc	r5
      000180 BD 00 01         [24]  977 	cjne	r5,#0x00,00126$
      000183 0E               [12]  978 	inc	r6
      000184                        979 00126$:
                                    980 ;	.\ecen4350_lcd_v4.c:152: }
      000184 02 01 02         [24]  981 	ljmp	00107$
                                    982 ;------------------------------------------------------------
                                    983 ;Allocation info for local variables in function 'delay'
                                    984 ;------------------------------------------------------------
                                    985 ;d                         Allocated to registers r6 r7 
                                    986 ;i                         Allocated to registers r4 r5 
                                    987 ;j                         Allocated to registers r2 r3 
                                    988 ;------------------------------------------------------------
                                    989 ;	.\ecen4350_lcd_v4.c:154: void delay(int d) /// x 1ms
                                    990 ;	-----------------------------------------
                                    991 ;	 function delay
                                    992 ;	-----------------------------------------
      000187                        993 _delay:
      000187 AE 82            [24]  994 	mov	r6,dpl
      000189 AF 83            [24]  995 	mov	r7,dph
                                    996 ;	.\ecen4350_lcd_v4.c:157: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      00018B 7C 00            [12]  997 	mov	r4,#0x00
      00018D 7D 00            [12]  998 	mov	r5,#0x00
      00018F                        999 00107$:
      00018F C3               [12] 1000 	clr	c
      000190 EC               [12] 1001 	mov	a,r4
      000191 9E               [12] 1002 	subb	a,r6
      000192 ED               [12] 1003 	mov	a,r5
      000193 64 80            [12] 1004 	xrl	a,#0x80
      000195 8F F0            [24] 1005 	mov	b,r7
      000197 63 F0 80         [24] 1006 	xrl	b,#0x80
      00019A 95 F0            [12] 1007 	subb	a,b
      00019C 50 1B            [24] 1008 	jnc	00109$
                                   1009 ;	.\ecen4350_lcd_v4.c:159: for (j = 0; j < 1000; j++);
      00019E 7A E8            [12] 1010 	mov	r2,#0xe8
      0001A0 7B 03            [12] 1011 	mov	r3,#0x03
      0001A2                       1012 00105$:
      0001A2 EA               [12] 1013 	mov	a,r2
      0001A3 24 FF            [12] 1014 	add	a,#0xff
      0001A5 F8               [12] 1015 	mov	r0,a
      0001A6 EB               [12] 1016 	mov	a,r3
      0001A7 34 FF            [12] 1017 	addc	a,#0xff
      0001A9 F9               [12] 1018 	mov	r1,a
      0001AA 88 02            [24] 1019 	mov	ar2,r0
      0001AC 89 03            [24] 1020 	mov	ar3,r1
      0001AE E8               [12] 1021 	mov	a,r0
      0001AF 49               [12] 1022 	orl	a,r1
      0001B0 70 F0            [24] 1023 	jnz	00105$
                                   1024 ;	.\ecen4350_lcd_v4.c:157: for (i = 0; i < d; i++) /// this is For(); loop delay used to define delay value input Embedded C
      0001B2 0C               [12] 1025 	inc	r4
      0001B3 BC 00 D9         [24] 1026 	cjne	r4,#0x00,00107$
      0001B6 0D               [12] 1027 	inc	r5
      0001B7 80 D6            [24] 1028 	sjmp	00107$
      0001B9                       1029 00109$:
                                   1030 ;	.\ecen4350_lcd_v4.c:161: }
      0001B9 22               [24] 1031 	ret
                                   1032 ;------------------------------------------------------------
                                   1033 ;Allocation info for local variables in function 'UART_Init'
                                   1034 ;------------------------------------------------------------
                                   1035 ;	.\ecen4350_lcd_v4.c:163: void UART_Init(){
                                   1036 ;	-----------------------------------------
                                   1037 ;	 function UART_Init
                                   1038 ;	-----------------------------------------
      0001BA                       1039 _UART_Init:
                                   1040 ;	.\ecen4350_lcd_v4.c:169: }
      0001BA 22               [24] 1041 	ret
                                   1042 ;------------------------------------------------------------
                                   1043 ;Allocation info for local variables in function 'UART_transmit'
                                   1044 ;------------------------------------------------------------
                                   1045 ;byte                      Allocated to registers 
                                   1046 ;------------------------------------------------------------
                                   1047 ;	.\ecen4350_lcd_v4.c:172: void UART_transmit(unsigned char byte){
                                   1048 ;	-----------------------------------------
                                   1049 ;	 function UART_transmit
                                   1050 ;	-----------------------------------------
      0001BB                       1051 _UART_transmit:
      0001BB 85 82 99         [24] 1052 	mov	_SBUF,dpl
                                   1053 ;	.\ecen4350_lcd_v4.c:174: while(TI == 1);
      0001BE                       1054 00101$:
      0001BE 20 99 FD         [24] 1055 	jb	_TI,00101$
                                   1056 ;	.\ecen4350_lcd_v4.c:175: TI = 0;
                                   1057 ;	assignBit
      0001C1 C2 99            [12] 1058 	clr	_TI
                                   1059 ;	.\ecen4350_lcd_v4.c:176: }
      0001C3 22               [24] 1060 	ret
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'ISR_receive'
                                   1063 ;------------------------------------------------------------
                                   1064 ;	.\ecen4350_lcd_v4.c:178: void ISR_receive() __interrupt (4) {
                                   1065 ;	-----------------------------------------
                                   1066 ;	 function ISR_receive
                                   1067 ;	-----------------------------------------
      0001C4                       1068 _ISR_receive:
                                   1069 ;	.\ecen4350_lcd_v4.c:179: if (RI == 1){
      0001C4 30 98 08         [24] 1070 	jnb	_RI,00103$
                                   1071 ;	.\ecen4350_lcd_v4.c:180: received_byte = SBUF;
      0001C7 85 99 0E         [24] 1072 	mov	_received_byte,_SBUF
                                   1073 ;	.\ecen4350_lcd_v4.c:181: RI = 0;
                                   1074 ;	assignBit
      0001CA C2 98            [12] 1075 	clr	_RI
                                   1076 ;	.\ecen4350_lcd_v4.c:182: received_flag= 1;
      0001CC 75 0F 01         [24] 1077 	mov	_received_flag,#0x01
      0001CF                       1078 00103$:
                                   1079 ;	.\ecen4350_lcd_v4.c:184: }
      0001CF 32               [24] 1080 	reti
                                   1081 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1082 ;	eliminated unneeded push/pop psw
                                   1083 ;	eliminated unneeded push/pop dpl
                                   1084 ;	eliminated unneeded push/pop dph
                                   1085 ;	eliminated unneeded push/pop b
                                   1086 ;	eliminated unneeded push/pop acc
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'writeRegister8'
                                   1089 ;------------------------------------------------------------
                                   1090 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1091 ;address                   Allocated to registers r7 
                                   1092 ;------------------------------------------------------------
                                   1093 ;	.\ecen4350_lcd_v4.c:186: void writeRegister8(u8 address, u8 d)
                                   1094 ;	-----------------------------------------
                                   1095 ;	 function writeRegister8
                                   1096 ;	-----------------------------------------
      0001D0                       1097 _writeRegister8:
      0001D0 AF 82            [24] 1098 	mov	r7,dpl
                                   1099 ;	.\ecen4350_lcd_v4.c:189: CD = __CMD__;
                                   1100 ;	assignBit
      0001D2 C2 B4            [12] 1101 	clr	_P3_4
                                   1102 ;	.\ecen4350_lcd_v4.c:190: write8(address);
                                   1103 ;	assignBit
      0001D4 D2 B5            [12] 1104 	setb	_P3_5
      0001D6 85 0A 82         [24] 1105 	mov	dpl,_lcd_address
      0001D9 85 0B 83         [24] 1106 	mov	dph,(_lcd_address + 1)
      0001DC EF               [12] 1107 	mov	a,r7
      0001DD F0               [24] 1108 	movx	@dptr,a
                                   1109 ;	assignBit
      0001DE C2 B5            [12] 1110 	clr	_P3_5
                                   1111 ;	.\ecen4350_lcd_v4.c:191: CD = __DATA__;
                                   1112 ;	assignBit
      0001E0 D2 B4            [12] 1113 	setb	_P3_4
                                   1114 ;	.\ecen4350_lcd_v4.c:192: write8(d);
                                   1115 ;	assignBit
      0001E2 D2 B5            [12] 1116 	setb	_P3_5
      0001E4 85 0A 82         [24] 1117 	mov	dpl,_lcd_address
      0001E7 85 0B 83         [24] 1118 	mov	dph,(_lcd_address + 1)
      0001EA E5 6B            [12] 1119 	mov	a,_writeRegister8_PARM_2
      0001EC F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	assignBit
      0001ED C2 B5            [12] 1122 	clr	_P3_5
                                   1123 ;	.\ecen4350_lcd_v4.c:194: }
      0001EF 22               [24] 1124 	ret
                                   1125 ;------------------------------------------------------------
                                   1126 ;Allocation info for local variables in function 'writeRegister16'
                                   1127 ;------------------------------------------------------------
                                   1128 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1129 ;address                   Allocated to registers r6 r7 
                                   1130 ;hi                        Allocated to registers r6 r7 
                                   1131 ;lo                        Allocated to registers r4 r5 
                                   1132 ;------------------------------------------------------------
                                   1133 ;	.\ecen4350_lcd_v4.c:196: void writeRegister16(u16 address, u16 d)
                                   1134 ;	-----------------------------------------
                                   1135 ;	 function writeRegister16
                                   1136 ;	-----------------------------------------
      0001F0                       1137 _writeRegister16:
      0001F0 AE 82            [24] 1138 	mov	r6,dpl
      0001F2 AF 83            [24] 1139 	mov	r7,dph
                                   1140 ;	.\ecen4350_lcd_v4.c:199: hi = (address) >> 8;
      0001F4 8F 04            [24] 1141 	mov	ar4,r7
                                   1142 ;	.\ecen4350_lcd_v4.c:200: lo = (address);
                                   1143 ;	.\ecen4350_lcd_v4.c:203: write8Reg(hi);
                                   1144 ;	assignBit
      0001F6 C2 B4            [12] 1145 	clr	_P3_4
                                   1146 ;	assignBit
      0001F8 D2 B5            [12] 1147 	setb	_P3_5
      0001FA 85 0A 82         [24] 1148 	mov	dpl,_lcd_address
      0001FD 85 0B 83         [24] 1149 	mov	dph,(_lcd_address + 1)
      000200 EC               [12] 1150 	mov	a,r4
      000201 F0               [24] 1151 	movx	@dptr,a
                                   1152 ;	assignBit
      000202 C2 B5            [12] 1153 	clr	_P3_5
                                   1154 ;	.\ecen4350_lcd_v4.c:204: write8Reg(lo);
                                   1155 ;	assignBit
      000204 C2 B4            [12] 1156 	clr	_P3_4
                                   1157 ;	assignBit
      000206 D2 B5            [12] 1158 	setb	_P3_5
      000208 85 0A 82         [24] 1159 	mov	dpl,_lcd_address
      00020B 85 0B 83         [24] 1160 	mov	dph,(_lcd_address + 1)
      00020E EE               [12] 1161 	mov	a,r6
      00020F F0               [24] 1162 	movx	@dptr,a
                                   1163 ;	assignBit
      000210 C2 B5            [12] 1164 	clr	_P3_5
                                   1165 ;	.\ecen4350_lcd_v4.c:205: hi = (d) >> 8;
      000212 AE 6C            [24] 1166 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1167 ;	.\ecen4350_lcd_v4.c:206: lo = (d);
      000214 AC 6B            [24] 1168 	mov	r4,_writeRegister16_PARM_2
                                   1169 ;	.\ecen4350_lcd_v4.c:207: CD = 1;
                                   1170 ;	assignBit
      000216 D2 B4            [12] 1171 	setb	_P3_4
                                   1172 ;	.\ecen4350_lcd_v4.c:208: write8Data(hi);
                                   1173 ;	assignBit
      000218 D2 B4            [12] 1174 	setb	_P3_4
                                   1175 ;	assignBit
      00021A D2 B5            [12] 1176 	setb	_P3_5
      00021C 85 0A 82         [24] 1177 	mov	dpl,_lcd_address
      00021F 85 0B 83         [24] 1178 	mov	dph,(_lcd_address + 1)
      000222 EE               [12] 1179 	mov	a,r6
      000223 F0               [24] 1180 	movx	@dptr,a
                                   1181 ;	assignBit
      000224 C2 B5            [12] 1182 	clr	_P3_5
                                   1183 ;	.\ecen4350_lcd_v4.c:209: write8Data(lo);
                                   1184 ;	assignBit
      000226 D2 B4            [12] 1185 	setb	_P3_4
                                   1186 ;	assignBit
      000228 D2 B5            [12] 1187 	setb	_P3_5
      00022A 85 0A 82         [24] 1188 	mov	dpl,_lcd_address
      00022D 85 0B 83         [24] 1189 	mov	dph,(_lcd_address + 1)
      000230 EC               [12] 1190 	mov	a,r4
      000231 F0               [24] 1191 	movx	@dptr,a
                                   1192 ;	assignBit
      000232 C2 B5            [12] 1193 	clr	_P3_5
                                   1194 ;	.\ecen4350_lcd_v4.c:211: }
      000234 22               [24] 1195 	ret
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function 'seg7Test'
                                   1198 ;------------------------------------------------------------
                                   1199 ;__1310720007              Allocated to registers 
                                   1200 ;__1310720008              Allocated to registers 
                                   1201 ;map_address               Allocated to registers 
                                   1202 ;d                         Allocated to registers 
                                   1203 ;__1310720010              Allocated to registers 
                                   1204 ;__1310720011              Allocated to registers 
                                   1205 ;map_address               Allocated to registers 
                                   1206 ;d                         Allocated to registers 
                                   1207 ;__1310720013              Allocated to registers 
                                   1208 ;__1310720014              Allocated to registers 
                                   1209 ;map_address               Allocated to registers 
                                   1210 ;d                         Allocated to registers 
                                   1211 ;__1310720016              Allocated to registers 
                                   1212 ;__1310720017              Allocated to registers 
                                   1213 ;map_address               Allocated to registers 
                                   1214 ;d                         Allocated to registers 
                                   1215 ;__1310720019              Allocated to registers 
                                   1216 ;__1310720020              Allocated to registers 
                                   1217 ;map_address               Allocated to registers 
                                   1218 ;d                         Allocated to registers 
                                   1219 ;__1310720022              Allocated to registers 
                                   1220 ;__1310720023              Allocated to registers 
                                   1221 ;map_address               Allocated to registers 
                                   1222 ;d                         Allocated to registers 
                                   1223 ;__1310720025              Allocated to registers 
                                   1224 ;__1310720026              Allocated to registers 
                                   1225 ;map_address               Allocated to registers 
                                   1226 ;d                         Allocated to registers 
                                   1227 ;__1310720028              Allocated to registers 
                                   1228 ;__1310720029              Allocated to registers 
                                   1229 ;map_address               Allocated to registers 
                                   1230 ;d                         Allocated to registers 
                                   1231 ;__1310720031              Allocated to registers 
                                   1232 ;__1310720032              Allocated to registers 
                                   1233 ;map_address               Allocated to registers 
                                   1234 ;d                         Allocated to registers 
                                   1235 ;__1310720034              Allocated to registers 
                                   1236 ;__1310720035              Allocated to registers 
                                   1237 ;map_address               Allocated to registers 
                                   1238 ;d                         Allocated to registers 
                                   1239 ;__1310720037              Allocated to registers 
                                   1240 ;__1310720038              Allocated to registers 
                                   1241 ;map_address               Allocated to registers 
                                   1242 ;d                         Allocated to registers 
                                   1243 ;__1310720040              Allocated to registers 
                                   1244 ;__1310720041              Allocated to registers 
                                   1245 ;map_address               Allocated to registers 
                                   1246 ;d                         Allocated to registers 
                                   1247 ;__1310720043              Allocated to registers 
                                   1248 ;__1310720044              Allocated to registers 
                                   1249 ;map_address               Allocated to registers 
                                   1250 ;d                         Allocated to registers 
                                   1251 ;__1310720046              Allocated to registers 
                                   1252 ;__1310720047              Allocated to registers 
                                   1253 ;map_address               Allocated to registers 
                                   1254 ;d                         Allocated to registers 
                                   1255 ;__1310720049              Allocated to registers 
                                   1256 ;__1310720050              Allocated to registers 
                                   1257 ;map_address               Allocated to registers 
                                   1258 ;d                         Allocated to registers 
                                   1259 ;__1310720052              Allocated to registers 
                                   1260 ;__1310720053              Allocated to registers 
                                   1261 ;map_address               Allocated to registers 
                                   1262 ;d                         Allocated to registers 
                                   1263 ;__1310720055              Allocated to registers 
                                   1264 ;__1310720056              Allocated to registers 
                                   1265 ;map_address               Allocated to registers 
                                   1266 ;d                         Allocated to registers 
                                   1267 ;__1310720058              Allocated to registers 
                                   1268 ;__1310720059              Allocated to registers 
                                   1269 ;map_address               Allocated to registers 
                                   1270 ;d                         Allocated to registers 
                                   1271 ;------------------------------------------------------------
                                   1272 ;	.\ecen4350_lcd_v4.c:213: void seg7Test(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function seg7Test
                                   1275 ;	-----------------------------------------
      000235                       1276 _seg7Test:
                                   1277 ;	.\ecen4350_lcd_v4.c:215: delay(4);
      000235 90 00 04         [24] 1278 	mov	dptr,#0x0004
      000238 12 01 87         [24] 1279 	lcall	_delay
                                   1280 ;	.\ecen4350_lcd_v4.c:216: iowrite8(seg7_address, ON);
      00023B 85 0C 82         [24] 1281 	mov	dpl,_seg7_address
      00023E 85 0D 83         [24] 1282 	mov	dph,(_seg7_address + 1)
                                   1283 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1284 ;	assignBit
      000241 D2 B5            [12] 1285 	setb	_P3_5
                                   1286 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000243 E4               [12] 1287 	clr	a
      000244 F0               [24] 1288 	movx	@dptr,a
                                   1289 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1290 ;	assignBit
      000245 C2 B5            [12] 1291 	clr	_P3_5
                                   1292 ;	.\ecen4350_lcd_v4.c:217: delay(4);
      000247 90 00 04         [24] 1293 	mov	dptr,#0x0004
      00024A 12 01 87         [24] 1294 	lcall	_delay
                                   1295 ;	.\ecen4350_lcd_v4.c:218: iowrite8(seg7_address, ZERO);
      00024D 85 0C 82         [24] 1296 	mov	dpl,_seg7_address
      000250 85 0D 83         [24] 1297 	mov	dph,(_seg7_address + 1)
                                   1298 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1299 ;	assignBit
      000253 D2 B5            [12] 1300 	setb	_P3_5
                                   1301 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000255 74 C0            [12] 1302 	mov	a,#0xc0
      000257 F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1305 ;	assignBit
      000258 C2 B5            [12] 1306 	clr	_P3_5
                                   1307 ;	.\ecen4350_lcd_v4.c:219: delay(4);
      00025A 90 00 04         [24] 1308 	mov	dptr,#0x0004
      00025D 12 01 87         [24] 1309 	lcall	_delay
                                   1310 ;	.\ecen4350_lcd_v4.c:220: iowrite8(seg7_address, ONE);
      000260 85 0C 82         [24] 1311 	mov	dpl,_seg7_address
      000263 85 0D 83         [24] 1312 	mov	dph,(_seg7_address + 1)
                                   1313 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1314 ;	assignBit
      000266 D2 B5            [12] 1315 	setb	_P3_5
                                   1316 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000268 74 F9            [12] 1317 	mov	a,#0xf9
      00026A F0               [24] 1318 	movx	@dptr,a
                                   1319 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1320 ;	assignBit
      00026B C2 B5            [12] 1321 	clr	_P3_5
                                   1322 ;	.\ecen4350_lcd_v4.c:221: delay(4);
      00026D 90 00 04         [24] 1323 	mov	dptr,#0x0004
      000270 12 01 87         [24] 1324 	lcall	_delay
                                   1325 ;	.\ecen4350_lcd_v4.c:222: iowrite8(seg7_address, TWO);
      000273 85 0C 82         [24] 1326 	mov	dpl,_seg7_address
      000276 85 0D 83         [24] 1327 	mov	dph,(_seg7_address + 1)
                                   1328 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1329 ;	assignBit
      000279 D2 B5            [12] 1330 	setb	_P3_5
                                   1331 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00027B 74 A4            [12] 1332 	mov	a,#0xa4
      00027D F0               [24] 1333 	movx	@dptr,a
                                   1334 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1335 ;	assignBit
      00027E C2 B5            [12] 1336 	clr	_P3_5
                                   1337 ;	.\ecen4350_lcd_v4.c:223: delay(4);
      000280 90 00 04         [24] 1338 	mov	dptr,#0x0004
      000283 12 01 87         [24] 1339 	lcall	_delay
                                   1340 ;	.\ecen4350_lcd_v4.c:224: iowrite8(seg7_address, THREE);
      000286 85 0C 82         [24] 1341 	mov	dpl,_seg7_address
      000289 85 0D 83         [24] 1342 	mov	dph,(_seg7_address + 1)
                                   1343 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1344 ;	assignBit
      00028C D2 B5            [12] 1345 	setb	_P3_5
                                   1346 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00028E 74 B0            [12] 1347 	mov	a,#0xb0
      000290 F0               [24] 1348 	movx	@dptr,a
                                   1349 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1350 ;	assignBit
      000291 C2 B5            [12] 1351 	clr	_P3_5
                                   1352 ;	.\ecen4350_lcd_v4.c:225: delay(4);
      000293 90 00 04         [24] 1353 	mov	dptr,#0x0004
      000296 12 01 87         [24] 1354 	lcall	_delay
                                   1355 ;	.\ecen4350_lcd_v4.c:226: iowrite8(seg7_address, FOUR);
      000299 85 0C 82         [24] 1356 	mov	dpl,_seg7_address
      00029C 85 0D 83         [24] 1357 	mov	dph,(_seg7_address + 1)
                                   1358 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1359 ;	assignBit
      00029F D2 B5            [12] 1360 	setb	_P3_5
                                   1361 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002A1 74 99            [12] 1362 	mov	a,#0x99
      0002A3 F0               [24] 1363 	movx	@dptr,a
                                   1364 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1365 ;	assignBit
      0002A4 C2 B5            [12] 1366 	clr	_P3_5
                                   1367 ;	.\ecen4350_lcd_v4.c:227: delay(4);
      0002A6 90 00 04         [24] 1368 	mov	dptr,#0x0004
      0002A9 12 01 87         [24] 1369 	lcall	_delay
                                   1370 ;	.\ecen4350_lcd_v4.c:228: iowrite8(seg7_address, FIVE);
      0002AC 85 0C 82         [24] 1371 	mov	dpl,_seg7_address
      0002AF 85 0D 83         [24] 1372 	mov	dph,(_seg7_address + 1)
                                   1373 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1374 ;	assignBit
      0002B2 D2 B5            [12] 1375 	setb	_P3_5
                                   1376 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002B4 74 92            [12] 1377 	mov	a,#0x92
      0002B6 F0               [24] 1378 	movx	@dptr,a
                                   1379 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1380 ;	assignBit
      0002B7 C2 B5            [12] 1381 	clr	_P3_5
                                   1382 ;	.\ecen4350_lcd_v4.c:229: delay(4);
      0002B9 90 00 04         [24] 1383 	mov	dptr,#0x0004
      0002BC 12 01 87         [24] 1384 	lcall	_delay
                                   1385 ;	.\ecen4350_lcd_v4.c:230: iowrite8(seg7_address, SIX);
      0002BF 85 0C 82         [24] 1386 	mov	dpl,_seg7_address
      0002C2 85 0D 83         [24] 1387 	mov	dph,(_seg7_address + 1)
                                   1388 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1389 ;	assignBit
      0002C5 D2 B5            [12] 1390 	setb	_P3_5
                                   1391 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002C7 74 82            [12] 1392 	mov	a,#0x82
      0002C9 F0               [24] 1393 	movx	@dptr,a
                                   1394 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1395 ;	assignBit
      0002CA C2 B5            [12] 1396 	clr	_P3_5
                                   1397 ;	.\ecen4350_lcd_v4.c:231: delay(4);
      0002CC 90 00 04         [24] 1398 	mov	dptr,#0x0004
      0002CF 12 01 87         [24] 1399 	lcall	_delay
                                   1400 ;	.\ecen4350_lcd_v4.c:232: iowrite8(seg7_address, SEVEN);
      0002D2 85 0C 82         [24] 1401 	mov	dpl,_seg7_address
      0002D5 85 0D 83         [24] 1402 	mov	dph,(_seg7_address + 1)
                                   1403 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1404 ;	assignBit
      0002D8 D2 B5            [12] 1405 	setb	_P3_5
                                   1406 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002DA 74 F8            [12] 1407 	mov	a,#0xf8
      0002DC F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1410 ;	assignBit
      0002DD C2 B5            [12] 1411 	clr	_P3_5
                                   1412 ;	.\ecen4350_lcd_v4.c:233: delay(4);
      0002DF 90 00 04         [24] 1413 	mov	dptr,#0x0004
      0002E2 12 01 87         [24] 1414 	lcall	_delay
                                   1415 ;	.\ecen4350_lcd_v4.c:234: iowrite8(seg7_address, EIGHT);
      0002E5 85 0C 82         [24] 1416 	mov	dpl,_seg7_address
      0002E8 85 0D 83         [24] 1417 	mov	dph,(_seg7_address + 1)
                                   1418 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1419 ;	assignBit
      0002EB D2 B5            [12] 1420 	setb	_P3_5
                                   1421 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0002ED 74 80            [12] 1422 	mov	a,#0x80
      0002EF F0               [24] 1423 	movx	@dptr,a
                                   1424 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1425 ;	assignBit
      0002F0 C2 B5            [12] 1426 	clr	_P3_5
                                   1427 ;	.\ecen4350_lcd_v4.c:235: delay(4);
      0002F2 90 00 04         [24] 1428 	mov	dptr,#0x0004
      0002F5 12 01 87         [24] 1429 	lcall	_delay
                                   1430 ;	.\ecen4350_lcd_v4.c:236: iowrite8(seg7_address, NINE);
      0002F8 85 0C 82         [24] 1431 	mov	dpl,_seg7_address
      0002FB 85 0D 83         [24] 1432 	mov	dph,(_seg7_address + 1)
                                   1433 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1434 ;	assignBit
      0002FE D2 B5            [12] 1435 	setb	_P3_5
                                   1436 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000300 74 98            [12] 1437 	mov	a,#0x98
      000302 F0               [24] 1438 	movx	@dptr,a
                                   1439 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1440 ;	assignBit
      000303 C2 B5            [12] 1441 	clr	_P3_5
                                   1442 ;	.\ecen4350_lcd_v4.c:237: delay(4);
      000305 90 00 04         [24] 1443 	mov	dptr,#0x0004
      000308 12 01 87         [24] 1444 	lcall	_delay
                                   1445 ;	.\ecen4350_lcd_v4.c:238: iowrite8(seg7_address, SEG_A);
      00030B 85 0C 82         [24] 1446 	mov	dpl,_seg7_address
      00030E 85 0D 83         [24] 1447 	mov	dph,(_seg7_address + 1)
                                   1448 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1449 ;	assignBit
      000311 D2 B5            [12] 1450 	setb	_P3_5
                                   1451 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000313 74 88            [12] 1452 	mov	a,#0x88
      000315 F0               [24] 1453 	movx	@dptr,a
                                   1454 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1455 ;	assignBit
      000316 C2 B5            [12] 1456 	clr	_P3_5
                                   1457 ;	.\ecen4350_lcd_v4.c:239: delay(4);
      000318 90 00 04         [24] 1458 	mov	dptr,#0x0004
      00031B 12 01 87         [24] 1459 	lcall	_delay
                                   1460 ;	.\ecen4350_lcd_v4.c:240: iowrite8(seg7_address, SEG_B);
      00031E 85 0C 82         [24] 1461 	mov	dpl,_seg7_address
      000321 85 0D 83         [24] 1462 	mov	dph,(_seg7_address + 1)
                                   1463 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1464 ;	assignBit
      000324 D2 B5            [12] 1465 	setb	_P3_5
                                   1466 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000326 74 83            [12] 1467 	mov	a,#0x83
      000328 F0               [24] 1468 	movx	@dptr,a
                                   1469 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1470 ;	assignBit
      000329 C2 B5            [12] 1471 	clr	_P3_5
                                   1472 ;	.\ecen4350_lcd_v4.c:241: delay(4);
      00032B 90 00 04         [24] 1473 	mov	dptr,#0x0004
      00032E 12 01 87         [24] 1474 	lcall	_delay
                                   1475 ;	.\ecen4350_lcd_v4.c:242: iowrite8(seg7_address, SEG_C);
      000331 85 0C 82         [24] 1476 	mov	dpl,_seg7_address
      000334 85 0D 83         [24] 1477 	mov	dph,(_seg7_address + 1)
                                   1478 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1479 ;	assignBit
      000337 D2 B5            [12] 1480 	setb	_P3_5
                                   1481 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000339 74 C6            [12] 1482 	mov	a,#0xc6
      00033B F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1485 ;	assignBit
      00033C C2 B5            [12] 1486 	clr	_P3_5
                                   1487 ;	.\ecen4350_lcd_v4.c:243: delay(4);
      00033E 90 00 04         [24] 1488 	mov	dptr,#0x0004
      000341 12 01 87         [24] 1489 	lcall	_delay
                                   1490 ;	.\ecen4350_lcd_v4.c:244: iowrite8(seg7_address, SEG_D);
      000344 85 0C 82         [24] 1491 	mov	dpl,_seg7_address
      000347 85 0D 83         [24] 1492 	mov	dph,(_seg7_address + 1)
                                   1493 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1494 ;	assignBit
      00034A D2 B5            [12] 1495 	setb	_P3_5
                                   1496 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00034C 74 A1            [12] 1497 	mov	a,#0xa1
      00034E F0               [24] 1498 	movx	@dptr,a
                                   1499 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1500 ;	assignBit
      00034F C2 B5            [12] 1501 	clr	_P3_5
                                   1502 ;	.\ecen4350_lcd_v4.c:245: delay(4);
      000351 90 00 04         [24] 1503 	mov	dptr,#0x0004
      000354 12 01 87         [24] 1504 	lcall	_delay
                                   1505 ;	.\ecen4350_lcd_v4.c:246: iowrite8(seg7_address, SEG_E);
      000357 85 0C 82         [24] 1506 	mov	dpl,_seg7_address
      00035A 85 0D 83         [24] 1507 	mov	dph,(_seg7_address + 1)
                                   1508 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1509 ;	assignBit
      00035D D2 B5            [12] 1510 	setb	_P3_5
                                   1511 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00035F 74 86            [12] 1512 	mov	a,#0x86
      000361 F0               [24] 1513 	movx	@dptr,a
                                   1514 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1515 ;	assignBit
      000362 C2 B5            [12] 1516 	clr	_P3_5
                                   1517 ;	.\ecen4350_lcd_v4.c:247: delay(4);
      000364 90 00 04         [24] 1518 	mov	dptr,#0x0004
      000367 12 01 87         [24] 1519 	lcall	_delay
                                   1520 ;	.\ecen4350_lcd_v4.c:248: iowrite8(seg7_address, SEG_F);
      00036A 85 0C 82         [24] 1521 	mov	dpl,_seg7_address
      00036D 85 0D 83         [24] 1522 	mov	dph,(_seg7_address + 1)
                                   1523 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1524 ;	assignBit
      000370 D2 B5            [12] 1525 	setb	_P3_5
                                   1526 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000372 74 8E            [12] 1527 	mov	a,#0x8e
      000374 F0               [24] 1528 	movx	@dptr,a
                                   1529 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1530 ;	assignBit
      000375 C2 B5            [12] 1531 	clr	_P3_5
                                   1532 ;	.\ecen4350_lcd_v4.c:249: delay(4);
      000377 90 00 04         [24] 1533 	mov	dptr,#0x0004
      00037A 12 01 87         [24] 1534 	lcall	_delay
                                   1535 ;	.\ecen4350_lcd_v4.c:250: iowrite8(seg7_address, OFF);
      00037D 85 0C 82         [24] 1536 	mov	dpl,_seg7_address
      000380 85 0D 83         [24] 1537 	mov	dph,(_seg7_address + 1)
                                   1538 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1539 ;	assignBit
      000383 D2 B5            [12] 1540 	setb	_P3_5
                                   1541 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000385 74 FF            [12] 1542 	mov	a,#0xff
      000387 F0               [24] 1543 	movx	@dptr,a
                                   1544 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1545 ;	assignBit
      000388 C2 B5            [12] 1546 	clr	_P3_5
                                   1547 ;	.\ecen4350_lcd_v4.c:251: delay(4);
      00038A 90 00 04         [24] 1548 	mov	dptr,#0x0004
                                   1549 ;	.\ecen4350_lcd_v4.c:252: }
      00038D 02 01 87         [24] 1550 	ljmp	_delay
                                   1551 ;------------------------------------------------------------
                                   1552 ;Allocation info for local variables in function 'rtcInit'
                                   1553 ;------------------------------------------------------------
                                   1554 ;i                         Allocated to registers r6 r7 
                                   1555 ;------------------------------------------------------------
                                   1556 ;	.\ecen4350_lcd_v4.c:255: void rtcInit(void)
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function rtcInit
                                   1559 ;	-----------------------------------------
      000390                       1560 _rtcInit:
                                   1561 ;	.\ecen4350_lcd_v4.c:259: rtcCmd(__REG_F__, __HR_24__ | __STOP__ | __RESET__); // stop and reset
      000390 75 6B 07         [24] 1562 	mov	_rtcCmd_PARM_2,#0x07
      000393 90 00 0F         [24] 1563 	mov	dptr,#0x000f
      000396 12 03 D4         [24] 1564 	lcall	_rtcCmd
                                   1565 ;	.\ecen4350_lcd_v4.c:262: for (i = __S1_REG__; i < __REG_D__; i++)
      000399 7E 00            [12] 1566 	mov	r6,#0x00
      00039B 7F 00            [12] 1567 	mov	r7,#0x00
      00039D                       1568 00102$:
                                   1569 ;	.\ecen4350_lcd_v4.c:264: rtcWrite(i, 0x00);
      00039D 75 1E 00         [24] 1570 	mov	_rtcWrite_PARM_2,#0x00
      0003A0 8E 82            [24] 1571 	mov	dpl,r6
      0003A2 8F 83            [24] 1572 	mov	dph,r7
      0003A4 C0 07            [24] 1573 	push	ar7
      0003A6 C0 06            [24] 1574 	push	ar6
      0003A8 12 03 DD         [24] 1575 	lcall	_rtcWrite
      0003AB D0 06            [24] 1576 	pop	ar6
      0003AD D0 07            [24] 1577 	pop	ar7
                                   1578 ;	.\ecen4350_lcd_v4.c:262: for (i = __S1_REG__; i < __REG_D__; i++)
      0003AF 0E               [12] 1579 	inc	r6
      0003B0 BE 00 01         [24] 1580 	cjne	r6,#0x00,00115$
      0003B3 0F               [12] 1581 	inc	r7
      0003B4                       1582 00115$:
      0003B4 C3               [12] 1583 	clr	c
      0003B5 EE               [12] 1584 	mov	a,r6
      0003B6 94 0D            [12] 1585 	subb	a,#0x0d
      0003B8 EF               [12] 1586 	mov	a,r7
      0003B9 94 00            [12] 1587 	subb	a,#0x00
      0003BB 40 E0            [24] 1588 	jc	00102$
                                   1589 ;	.\ecen4350_lcd_v4.c:267: rtcCmd(__REG_F__, __HR_24__);
      0003BD 75 6B 04         [24] 1590 	mov	_rtcCmd_PARM_2,#0x04
      0003C0 90 00 0F         [24] 1591 	mov	dptr,#0x000f
                                   1592 ;	.\ecen4350_lcd_v4.c:268: }
      0003C3 02 03 D4         [24] 1593 	ljmp	_rtcCmd
                                   1594 ;------------------------------------------------------------
                                   1595 ;Allocation info for local variables in function 'rtcBusy'
                                   1596 ;------------------------------------------------------------
                                   1597 ;__1310720061              Allocated to registers 
                                   1598 ;map_address               Allocated to registers 
                                   1599 ;__1310720062              Allocated to registers 
                                   1600 ;map_address               Allocated to registers 
                                   1601 ;d                         Allocated to registers r7 
                                   1602 ;------------------------------------------------------------
                                   1603 ;	.\ecen4350_lcd_v4.c:270: void rtcBusy(void)
                                   1604 ;	-----------------------------------------
                                   1605 ;	 function rtcBusy
                                   1606 ;	-----------------------------------------
      0003C6                       1607 _rtcBusy:
                                   1608 ;	.\ecen4350_lcd_v4.c:273: while ((ioread8(map_address) & 0x02))		;
      0003C6                       1609 00101$:
                                   1610 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   1611 ;	assignBit
      0003C6 D2 B5            [12] 1612 	setb	_P3_5
                                   1613 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0003C8 90 00 0D         [24] 1614 	mov	dptr,#0x000d
      0003CB E0               [24] 1615 	movx	a,@dptr
      0003CC FF               [12] 1616 	mov	r7,a
                                   1617 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   1618 ;	assignBit
      0003CD C2 B5            [12] 1619 	clr	_P3_5
                                   1620 ;	.\ecen4350_lcd_v4.c:273: while ((ioread8(map_address) & 0x02))		;
      0003CF EF               [12] 1621 	mov	a,r7
      0003D0 20 E1 F3         [24] 1622 	jb	acc.1,00101$
                                   1623 ;	.\ecen4350_lcd_v4.c:274: }
      0003D3 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'rtcCmd'
                                   1627 ;------------------------------------------------------------
                                   1628 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1629 ;addr                      Allocated to registers r6 r7 
                                   1630 ;map_address               Allocated to registers 
                                   1631 ;__1310720064              Allocated to registers 
                                   1632 ;__1310720065              Allocated to registers r7 
                                   1633 ;map_address               Allocated to registers 
                                   1634 ;d                         Allocated to registers 
                                   1635 ;------------------------------------------------------------
                                   1636 ;	.\ecen4350_lcd_v4.c:276: inline void rtcCmd(unsigned int addr, unsigned char d)
                                   1637 ;	-----------------------------------------
                                   1638 ;	 function rtcCmd
                                   1639 ;	-----------------------------------------
      0003D4                       1640 _rtcCmd:
                                   1641 ;	.\ecen4350_lcd_v4.c:278: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1642 ;	.\ecen4350_lcd_v4.c:279: iowrite8(map_address, d);
      0003D4 AF 6B            [24] 1643 	mov	r7,_rtcCmd_PARM_2
                                   1644 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1645 ;	assignBit
      0003D6 D2 B5            [12] 1646 	setb	_P3_5
                                   1647 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003D8 EF               [12] 1648 	mov	a,r7
      0003D9 F0               [24] 1649 	movx	@dptr,a
                                   1650 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1651 ;	assignBit
      0003DA C2 B5            [12] 1652 	clr	_P3_5
                                   1653 ;	.\ecen4350_lcd_v4.c:279: iowrite8(map_address, d);
                                   1654 ;	.\ecen4350_lcd_v4.c:280: }
      0003DC 22               [24] 1655 	ret
                                   1656 ;------------------------------------------------------------
                                   1657 ;Allocation info for local variables in function 'rtcWrite'
                                   1658 ;------------------------------------------------------------
                                   1659 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1660 ;addr                      Allocated to registers r6 r7 
                                   1661 ;map_address               Allocated to registers r6 r7 
                                   1662 ;__1310720067              Allocated to registers 
                                   1663 ;__1310720068              Allocated to registers 
                                   1664 ;addr                      Allocated to registers 
                                   1665 ;d                         Allocated to registers 
                                   1666 ;map_address               Allocated to registers 
                                   1667 ;__1310720064              Allocated to registers 
                                   1668 ;__1310720065              Allocated to registers 
                                   1669 ;map_address               Allocated to registers 
                                   1670 ;d                         Allocated to registers 
                                   1671 ;__1310720070              Allocated to registers 
                                   1672 ;__1310720071              Allocated to registers 
                                   1673 ;map_address               Allocated to registers 
                                   1674 ;d                         Allocated to registers 
                                   1675 ;__1310720073              Allocated to registers 
                                   1676 ;__1310720074              Allocated to registers r7 
                                   1677 ;addr                      Allocated to registers 
                                   1678 ;d                         Allocated to registers 
                                   1679 ;map_address               Allocated to registers 
                                   1680 ;__1310720064              Allocated to registers 
                                   1681 ;__1310720065              Allocated to registers 
                                   1682 ;map_address               Allocated to registers 
                                   1683 ;d                         Allocated to registers 
                                   1684 ;------------------------------------------------------------
                                   1685 ;	.\ecen4350_lcd_v4.c:282: inline void rtcWrite(unsigned int addr, unsigned char d)
                                   1686 ;	-----------------------------------------
                                   1687 ;	 function rtcWrite
                                   1688 ;	-----------------------------------------
      0003DD                       1689 _rtcWrite:
      0003DD AE 82            [24] 1690 	mov	r6,dpl
      0003DF AF 83            [24] 1691 	mov	r7,dph
                                   1692 ;	.\ecen4350_lcd_v4.c:284: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1693 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1694 ;	assignBit
      0003E1 D2 B5            [12] 1695 	setb	_P3_5
                                   1696 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003E3 90 00 0D         [24] 1697 	mov	dptr,#0x000d
      0003E6 74 01            [12] 1698 	mov	a,#0x01
      0003E8 F0               [24] 1699 	movx	@dptr,a
                                   1700 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1701 ;	assignBit
      0003E9 C2 B5            [12] 1702 	clr	_P3_5
                                   1703 ;	.\ecen4350_lcd_v4.c:286: rtcBusy();
      0003EB C0 07            [24] 1704 	push	ar7
      0003ED C0 06            [24] 1705 	push	ar6
      0003EF 12 03 C6         [24] 1706 	lcall	_rtcBusy
      0003F2 D0 06            [24] 1707 	pop	ar6
      0003F4 D0 07            [24] 1708 	pop	ar7
                                   1709 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1710 ;	assignBit
      0003F6 D2 B5            [12] 1711 	setb	_P3_5
                                   1712 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0003F8 8E 82            [24] 1713 	mov	dpl,r6
      0003FA 8F 83            [24] 1714 	mov	dph,r7
      0003FC E4               [12] 1715 	clr	a
      0003FD F0               [24] 1716 	movx	@dptr,a
                                   1717 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1718 ;	assignBit
      0003FE C2 B5            [12] 1719 	clr	_P3_5
                                   1720 ;	.\ecen4350_lcd_v4.c:288: rtcCmd(__REG_D__, d);
      000400 AF 1E            [24] 1721 	mov	r7,_rtcWrite_PARM_2
                                   1722 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1723 ;	assignBit
      000402 D2 B5            [12] 1724 	setb	_P3_5
                                   1725 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000404 90 00 0D         [24] 1726 	mov	dptr,#0x000d
      000407 EF               [12] 1727 	mov	a,r7
      000408 F0               [24] 1728 	movx	@dptr,a
                                   1729 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1730 ;	assignBit
      000409 C2 B5            [12] 1731 	clr	_P3_5
                                   1732 ;	.\ecen4350_lcd_v4.c:288: rtcCmd(__REG_D__, d);
                                   1733 ;	.\ecen4350_lcd_v4.c:289: }
      00040B 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'rtcRead'
                                   1737 ;------------------------------------------------------------
                                   1738 ;addr                      Allocated to registers r6 r7 
                                   1739 ;__1310720079              Allocated to registers 
                                   1740 ;d                         Allocated to registers r7 
                                   1741 ;map_address               Allocated to registers r6 r7 
                                   1742 ;__1310720076              Allocated to registers 
                                   1743 ;__1310720077              Allocated to registers 
                                   1744 ;addr                      Allocated to registers 
                                   1745 ;d                         Allocated to registers 
                                   1746 ;map_address               Allocated to registers 
                                   1747 ;__1310720064              Allocated to registers 
                                   1748 ;__1310720065              Allocated to registers 
                                   1749 ;map_address               Allocated to registers 
                                   1750 ;d                         Allocated to registers 
                                   1751 ;__1310720080              Allocated to registers 
                                   1752 ;map_address               Allocated to registers 
                                   1753 ;d                         Allocated to registers r6 
                                   1754 ;__1310720082              Allocated to registers 
                                   1755 ;__1310720083              Allocated to registers 
                                   1756 ;addr                      Allocated to registers 
                                   1757 ;d                         Allocated to registers 
                                   1758 ;map_address               Allocated to registers 
                                   1759 ;__1310720064              Allocated to registers 
                                   1760 ;__1310720065              Allocated to registers 
                                   1761 ;map_address               Allocated to registers 
                                   1762 ;d                         Allocated to registers 
                                   1763 ;------------------------------------------------------------
                                   1764 ;	.\ecen4350_lcd_v4.c:291: inline unsigned char rtcRead(unsigned int addr)
                                   1765 ;	-----------------------------------------
                                   1766 ;	 function rtcRead
                                   1767 ;	-----------------------------------------
      00040C                       1768 _rtcRead:
      00040C AE 82            [24] 1769 	mov	r6,dpl
      00040E AF 83            [24] 1770 	mov	r7,dph
                                   1771 ;	.\ecen4350_lcd_v4.c:294: __xdata unsigned char *map_address = (unsigned char __xdata *)addr;
                                   1772 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1773 ;	assignBit
      000410 D2 B5            [12] 1774 	setb	_P3_5
                                   1775 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000412 90 00 0D         [24] 1776 	mov	dptr,#0x000d
      000415 74 01            [12] 1777 	mov	a,#0x01
      000417 F0               [24] 1778 	movx	@dptr,a
                                   1779 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1780 ;	assignBit
      000418 C2 B5            [12] 1781 	clr	_P3_5
                                   1782 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      00041A C0 07            [24] 1783 	push	ar7
      00041C C0 06            [24] 1784 	push	ar6
      00041E 12 03 C6         [24] 1785 	lcall	_rtcBusy
      000421 D0 06            [24] 1786 	pop	ar6
      000423 D0 07            [24] 1787 	pop	ar7
                                   1788 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   1789 ;	assignBit
      000425 D2 B5            [12] 1790 	setb	_P3_5
                                   1791 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000427 8E 82            [24] 1792 	mov	dpl,r6
      000429 8F 83            [24] 1793 	mov	dph,r7
      00042B E0               [24] 1794 	movx	a,@dptr
      00042C FE               [12] 1795 	mov	r6,a
                                   1796 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   1797 ;	assignBit
      00042D C2 B5            [12] 1798 	clr	_P3_5
                                   1799 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00042F 74 0F            [12] 1800 	mov	a,#0x0f
      000431 5E               [12] 1801 	anl	a,r6
      000432 44 30            [12] 1802 	orl	a,#0x30
      000434 FF               [12] 1803 	mov	r7,a
                                   1804 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   1805 ;	assignBit
      000435 D2 B5            [12] 1806 	setb	_P3_5
                                   1807 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000437 90 00 0D         [24] 1808 	mov	dptr,#0x000d
      00043A E4               [12] 1809 	clr	a
      00043B F0               [24] 1810 	movx	@dptr,a
                                   1811 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   1812 ;	assignBit
      00043C C2 B5            [12] 1813 	clr	_P3_5
                                   1814 ;	.\ecen4350_lcd_v4.c:301: return d;
      00043E 8F 82            [24] 1815 	mov	dpl,r7
                                   1816 ;	.\ecen4350_lcd_v4.c:302: }
      000440 22               [24] 1817 	ret
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'rtcPrint'
                                   1820 ;------------------------------------------------------------
                                   1821 ;__1310720100              Allocated to registers 
                                   1822 ;__1310720097              Allocated to registers 
                                   1823 ;__1310720094              Allocated to registers 
                                   1824 ;__1310720091              Allocated to registers 
                                   1825 ;__1310720088              Allocated to registers 
                                   1826 ;__1310720085              Allocated to registers 
                                   1827 ;mi1                       Allocated to registers 
                                   1828 ;mi10                      Allocated to registers 
                                   1829 ;s1                        Allocated to registers 
                                   1830 ;s10                       Allocated to registers 
                                   1831 ;h1                        Allocated to registers 
                                   1832 ;h10                       Allocated to registers 
                                   1833 ;printval                  Allocated with name '_rtcPrint_printval_65536_226'
                                   1834 ;__1310720086              Allocated to registers 
                                   1835 ;addr                      Allocated to registers 
                                   1836 ;__1310720079              Allocated to registers 
                                   1837 ;d                         Allocated to registers r7 
                                   1838 ;map_address               Allocated to registers 
                                   1839 ;__1310720076              Allocated to registers 
                                   1840 ;__1310720077              Allocated to registers 
                                   1841 ;addr                      Allocated to registers 
                                   1842 ;d                         Allocated to registers 
                                   1843 ;map_address               Allocated to registers 
                                   1844 ;__1310720064              Allocated to registers 
                                   1845 ;__1310720065              Allocated to registers 
                                   1846 ;map_address               Allocated to registers 
                                   1847 ;d                         Allocated to registers 
                                   1848 ;__1310720080              Allocated to registers 
                                   1849 ;map_address               Allocated to registers 
                                   1850 ;d                         Allocated to registers r7 
                                   1851 ;__1310720082              Allocated to registers 
                                   1852 ;__1310720083              Allocated to registers 
                                   1853 ;addr                      Allocated to registers 
                                   1854 ;d                         Allocated to registers 
                                   1855 ;map_address               Allocated to registers 
                                   1856 ;__1310720064              Allocated to registers 
                                   1857 ;__1310720065              Allocated to registers 
                                   1858 ;map_address               Allocated to registers 
                                   1859 ;d                         Allocated to registers 
                                   1860 ;__1310720089              Allocated to registers 
                                   1861 ;addr                      Allocated to registers 
                                   1862 ;__1310720079              Allocated to registers 
                                   1863 ;d                         Allocated to registers r6 
                                   1864 ;map_address               Allocated to registers 
                                   1865 ;__1310720076              Allocated to registers 
                                   1866 ;__1310720077              Allocated to registers 
                                   1867 ;addr                      Allocated to registers 
                                   1868 ;d                         Allocated to registers 
                                   1869 ;map_address               Allocated to registers 
                                   1870 ;__1310720064              Allocated to registers 
                                   1871 ;__1310720065              Allocated to registers 
                                   1872 ;map_address               Allocated to registers 
                                   1873 ;d                         Allocated to registers 
                                   1874 ;__1310720080              Allocated to registers 
                                   1875 ;map_address               Allocated to registers 
                                   1876 ;d                         Allocated to registers r6 
                                   1877 ;__1310720082              Allocated to registers 
                                   1878 ;__1310720083              Allocated to registers 
                                   1879 ;addr                      Allocated to registers 
                                   1880 ;d                         Allocated to registers 
                                   1881 ;map_address               Allocated to registers 
                                   1882 ;__1310720064              Allocated to registers 
                                   1883 ;__1310720065              Allocated to registers 
                                   1884 ;map_address               Allocated to registers 
                                   1885 ;d                         Allocated to registers 
                                   1886 ;__1310720092              Allocated to registers 
                                   1887 ;addr                      Allocated to registers 
                                   1888 ;__1310720079              Allocated to registers 
                                   1889 ;d                         Allocated to registers r5 
                                   1890 ;map_address               Allocated to registers 
                                   1891 ;__1310720076              Allocated to registers 
                                   1892 ;__1310720077              Allocated to registers 
                                   1893 ;addr                      Allocated to registers 
                                   1894 ;d                         Allocated to registers 
                                   1895 ;map_address               Allocated to registers 
                                   1896 ;__1310720064              Allocated to registers 
                                   1897 ;__1310720065              Allocated to registers 
                                   1898 ;map_address               Allocated to registers 
                                   1899 ;d                         Allocated to registers 
                                   1900 ;__1310720080              Allocated to registers 
                                   1901 ;map_address               Allocated to registers 
                                   1902 ;d                         Allocated to registers r5 
                                   1903 ;__1310720082              Allocated to registers 
                                   1904 ;__1310720083              Allocated to registers 
                                   1905 ;addr                      Allocated to registers 
                                   1906 ;d                         Allocated to registers 
                                   1907 ;map_address               Allocated to registers 
                                   1908 ;__1310720064              Allocated to registers 
                                   1909 ;__1310720065              Allocated to registers 
                                   1910 ;map_address               Allocated to registers 
                                   1911 ;d                         Allocated to registers 
                                   1912 ;__1310720095              Allocated to registers 
                                   1913 ;addr                      Allocated to registers 
                                   1914 ;__1310720079              Allocated to registers 
                                   1915 ;d                         Allocated to registers r4 
                                   1916 ;map_address               Allocated to registers 
                                   1917 ;__1310720076              Allocated to registers 
                                   1918 ;__1310720077              Allocated to registers 
                                   1919 ;addr                      Allocated to registers 
                                   1920 ;d                         Allocated to registers 
                                   1921 ;map_address               Allocated to registers 
                                   1922 ;__1310720064              Allocated to registers 
                                   1923 ;__1310720065              Allocated to registers 
                                   1924 ;map_address               Allocated to registers 
                                   1925 ;d                         Allocated to registers 
                                   1926 ;__1310720080              Allocated to registers 
                                   1927 ;map_address               Allocated to registers 
                                   1928 ;d                         Allocated to registers r4 
                                   1929 ;__1310720082              Allocated to registers 
                                   1930 ;__1310720083              Allocated to registers 
                                   1931 ;addr                      Allocated to registers 
                                   1932 ;d                         Allocated to registers 
                                   1933 ;map_address               Allocated to registers 
                                   1934 ;__1310720064              Allocated to registers 
                                   1935 ;__1310720065              Allocated to registers 
                                   1936 ;map_address               Allocated to registers 
                                   1937 ;d                         Allocated to registers 
                                   1938 ;__1310720098              Allocated to registers 
                                   1939 ;addr                      Allocated to registers 
                                   1940 ;__1310720079              Allocated to registers 
                                   1941 ;d                         Allocated to registers r3 
                                   1942 ;map_address               Allocated to registers 
                                   1943 ;__1310720076              Allocated to registers 
                                   1944 ;__1310720077              Allocated to registers 
                                   1945 ;addr                      Allocated to registers 
                                   1946 ;d                         Allocated to registers 
                                   1947 ;map_address               Allocated to registers 
                                   1948 ;__1310720064              Allocated to registers 
                                   1949 ;__1310720065              Allocated to registers 
                                   1950 ;map_address               Allocated to registers 
                                   1951 ;d                         Allocated to registers 
                                   1952 ;__1310720080              Allocated to registers 
                                   1953 ;map_address               Allocated to registers 
                                   1954 ;d                         Allocated to registers r3 
                                   1955 ;__1310720082              Allocated to registers 
                                   1956 ;__1310720083              Allocated to registers 
                                   1957 ;addr                      Allocated to registers 
                                   1958 ;d                         Allocated to registers 
                                   1959 ;map_address               Allocated to registers 
                                   1960 ;__1310720064              Allocated to registers 
                                   1961 ;__1310720065              Allocated to registers 
                                   1962 ;map_address               Allocated to registers 
                                   1963 ;d                         Allocated to registers 
                                   1964 ;__1310720101              Allocated to registers 
                                   1965 ;addr                      Allocated to registers 
                                   1966 ;__1310720079              Allocated to registers 
                                   1967 ;d                         Allocated to registers r2 
                                   1968 ;map_address               Allocated to registers 
                                   1969 ;__1310720076              Allocated to registers 
                                   1970 ;__1310720077              Allocated to registers 
                                   1971 ;addr                      Allocated to registers 
                                   1972 ;d                         Allocated to registers 
                                   1973 ;map_address               Allocated to registers 
                                   1974 ;__1310720064              Allocated to registers 
                                   1975 ;__1310720065              Allocated to registers 
                                   1976 ;map_address               Allocated to registers 
                                   1977 ;d                         Allocated to registers 
                                   1978 ;__1310720080              Allocated to registers 
                                   1979 ;map_address               Allocated to registers 
                                   1980 ;d                         Allocated to registers r2 
                                   1981 ;__1310720082              Allocated to registers 
                                   1982 ;__1310720083              Allocated to registers 
                                   1983 ;addr                      Allocated to registers 
                                   1984 ;d                         Allocated to registers 
                                   1985 ;map_address               Allocated to registers 
                                   1986 ;__1310720064              Allocated to registers 
                                   1987 ;__1310720065              Allocated to registers 
                                   1988 ;map_address               Allocated to registers 
                                   1989 ;d                         Allocated to registers 
                                   1990 ;------------------------------------------------------------
                                   1991 ;	.\ecen4350_lcd_v4.c:304: void rtcPrint(void)
                                   1992 ;	-----------------------------------------
                                   1993 ;	 function rtcPrint
                                   1994 ;	-----------------------------------------
      000441                       1995 _rtcPrint:
                                   1996 ;	.\ecen4350_lcd_v4.c:308: printval[8] = '\0'; // end with address null character for string
      000441 75 27 00         [24] 1997 	mov	(_rtcPrint_printval_65536_226 + 0x0008),#0x00
                                   1998 ;	.\ecen4350_lcd_v4.c:309: printval[2] = ':';
      000444 75 21 3A         [24] 1999 	mov	(_rtcPrint_printval_65536_226 + 0x0002),#0x3a
                                   2000 ;	.\ecen4350_lcd_v4.c:310: printval[5] = ':';
      000447 75 24 3A         [24] 2001 	mov	(_rtcPrint_printval_65536_226 + 0x0005),#0x3a
                                   2002 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2003 ;	assignBit
      00044A D2 B5            [12] 2004 	setb	_P3_5
                                   2005 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00044C 90 00 0D         [24] 2006 	mov	dptr,#0x000d
      00044F 74 01            [12] 2007 	mov	a,#0x01
      000451 F0               [24] 2008 	movx	@dptr,a
                                   2009 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2010 ;	assignBit
      000452 C2 B5            [12] 2011 	clr	_P3_5
                                   2012 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000454 12 03 C6         [24] 2013 	lcall	_rtcBusy
                                   2014 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2015 ;	assignBit
      000457 D2 B5            [12] 2016 	setb	_P3_5
                                   2017 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000459 90 00 02         [24] 2018 	mov	dptr,#0x0002
      00045C E0               [24] 2019 	movx	a,@dptr
      00045D FF               [12] 2020 	mov	r7,a
                                   2021 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2022 ;	assignBit
      00045E C2 B5            [12] 2023 	clr	_P3_5
                                   2024 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000460 74 0F            [12] 2025 	mov	a,#0x0f
      000462 5F               [12] 2026 	anl	a,r7
      000463 44 30            [12] 2027 	orl	a,#0x30
      000465 FF               [12] 2028 	mov	r7,a
                                   2029 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2030 ;	assignBit
      000466 D2 B5            [12] 2031 	setb	_P3_5
                                   2032 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000468 90 00 0D         [24] 2033 	mov	dptr,#0x000d
      00046B E4               [12] 2034 	clr	a
      00046C F0               [24] 2035 	movx	@dptr,a
                                   2036 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2037 ;	assignBit
      00046D C2 B5            [12] 2038 	clr	_P3_5
                                   2039 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2040 ;	assignBit
      00046F D2 B5            [12] 2041 	setb	_P3_5
                                   2042 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000471 90 00 0D         [24] 2043 	mov	dptr,#0x000d
      000474 74 01            [12] 2044 	mov	a,#0x01
      000476 F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2047 ;	assignBit
      000477 C2 B5            [12] 2048 	clr	_P3_5
                                   2049 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000479 C0 07            [24] 2050 	push	ar7
      00047B 12 03 C6         [24] 2051 	lcall	_rtcBusy
                                   2052 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2053 ;	assignBit
      00047E D2 B5            [12] 2054 	setb	_P3_5
                                   2055 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000480 90 00 03         [24] 2056 	mov	dptr,#0x0003
      000483 E0               [24] 2057 	movx	a,@dptr
      000484 FE               [12] 2058 	mov	r6,a
                                   2059 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2060 ;	assignBit
      000485 C2 B5            [12] 2061 	clr	_P3_5
                                   2062 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      000487 74 0F            [12] 2063 	mov	a,#0x0f
      000489 5E               [12] 2064 	anl	a,r6
      00048A 44 30            [12] 2065 	orl	a,#0x30
      00048C FE               [12] 2066 	mov	r6,a
                                   2067 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2068 ;	assignBit
      00048D D2 B5            [12] 2069 	setb	_P3_5
                                   2070 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00048F 90 00 0D         [24] 2071 	mov	dptr,#0x000d
      000492 E4               [12] 2072 	clr	a
      000493 F0               [24] 2073 	movx	@dptr,a
                                   2074 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2075 ;	assignBit
      000494 C2 B5            [12] 2076 	clr	_P3_5
                                   2077 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2078 ;	assignBit
      000496 D2 B5            [12] 2079 	setb	_P3_5
                                   2080 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000498 90 00 0D         [24] 2081 	mov	dptr,#0x000d
      00049B 74 01            [12] 2082 	mov	a,#0x01
      00049D F0               [24] 2083 	movx	@dptr,a
                                   2084 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2085 ;	assignBit
      00049E C2 B5            [12] 2086 	clr	_P3_5
                                   2087 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0004A0 C0 06            [24] 2088 	push	ar6
      0004A2 12 03 C6         [24] 2089 	lcall	_rtcBusy
                                   2090 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2091 ;	assignBit
      0004A5 D2 B5            [12] 2092 	setb	_P3_5
                                   2093 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0004A7 90 00 04         [24] 2094 	mov	dptr,#0x0004
      0004AA E0               [24] 2095 	movx	a,@dptr
      0004AB FD               [12] 2096 	mov	r5,a
                                   2097 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2098 ;	assignBit
      0004AC C2 B5            [12] 2099 	clr	_P3_5
                                   2100 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004AE 74 0F            [12] 2101 	mov	a,#0x0f
      0004B0 5D               [12] 2102 	anl	a,r5
      0004B1 44 30            [12] 2103 	orl	a,#0x30
      0004B3 FD               [12] 2104 	mov	r5,a
                                   2105 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2106 ;	assignBit
      0004B4 D2 B5            [12] 2107 	setb	_P3_5
                                   2108 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0004B6 90 00 0D         [24] 2109 	mov	dptr,#0x000d
      0004B9 E4               [12] 2110 	clr	a
      0004BA F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2113 ;	assignBit
      0004BB C2 B5            [12] 2114 	clr	_P3_5
                                   2115 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2116 ;	assignBit
      0004BD D2 B5            [12] 2117 	setb	_P3_5
                                   2118 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0004BF 90 00 0D         [24] 2119 	mov	dptr,#0x000d
      0004C2 74 01            [12] 2120 	mov	a,#0x01
      0004C4 F0               [24] 2121 	movx	@dptr,a
                                   2122 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2123 ;	assignBit
      0004C5 C2 B5            [12] 2124 	clr	_P3_5
                                   2125 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0004C7 C0 05            [24] 2126 	push	ar5
      0004C9 12 03 C6         [24] 2127 	lcall	_rtcBusy
                                   2128 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2129 ;	assignBit
      0004CC D2 B5            [12] 2130 	setb	_P3_5
                                   2131 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0004CE 90 00 05         [24] 2132 	mov	dptr,#0x0005
      0004D1 E0               [24] 2133 	movx	a,@dptr
      0004D2 FC               [12] 2134 	mov	r4,a
                                   2135 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2136 ;	assignBit
      0004D3 C2 B5            [12] 2137 	clr	_P3_5
                                   2138 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004D5 74 0F            [12] 2139 	mov	a,#0x0f
      0004D7 5C               [12] 2140 	anl	a,r4
      0004D8 44 30            [12] 2141 	orl	a,#0x30
      0004DA FC               [12] 2142 	mov	r4,a
                                   2143 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2144 ;	assignBit
      0004DB D2 B5            [12] 2145 	setb	_P3_5
                                   2146 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0004DD 90 00 0D         [24] 2147 	mov	dptr,#0x000d
      0004E0 E4               [12] 2148 	clr	a
      0004E1 F0               [24] 2149 	movx	@dptr,a
                                   2150 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2151 ;	assignBit
      0004E2 C2 B5            [12] 2152 	clr	_P3_5
                                   2153 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2154 ;	assignBit
      0004E4 D2 B5            [12] 2155 	setb	_P3_5
                                   2156 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0004E6 90 00 0D         [24] 2157 	mov	dptr,#0x000d
      0004E9 74 01            [12] 2158 	mov	a,#0x01
      0004EB F0               [24] 2159 	movx	@dptr,a
                                   2160 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2161 ;	assignBit
      0004EC C2 B5            [12] 2162 	clr	_P3_5
                                   2163 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      0004EE C0 04            [24] 2164 	push	ar4
      0004F0 12 03 C6         [24] 2165 	lcall	_rtcBusy
                                   2166 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2167 ;	assignBit
      0004F3 D2 B5            [12] 2168 	setb	_P3_5
                                   2169 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      0004F5 90 00 00         [24] 2170 	mov	dptr,#0x0000
      0004F8 E0               [24] 2171 	movx	a,@dptr
      0004F9 FB               [12] 2172 	mov	r3,a
                                   2173 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2174 ;	assignBit
      0004FA C2 B5            [12] 2175 	clr	_P3_5
                                   2176 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      0004FC 74 0F            [12] 2177 	mov	a,#0x0f
      0004FE 5B               [12] 2178 	anl	a,r3
      0004FF 44 30            [12] 2179 	orl	a,#0x30
      000501 FB               [12] 2180 	mov	r3,a
                                   2181 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2182 ;	assignBit
      000502 D2 B5            [12] 2183 	setb	_P3_5
                                   2184 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000504 90 00 0D         [24] 2185 	mov	dptr,#0x000d
      000507 E4               [12] 2186 	clr	a
      000508 F0               [24] 2187 	movx	@dptr,a
                                   2188 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2189 ;	assignBit
      000509 C2 B5            [12] 2190 	clr	_P3_5
                                   2191 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2192 ;	assignBit
      00050B D2 B5            [12] 2193 	setb	_P3_5
                                   2194 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00050D 90 00 0D         [24] 2195 	mov	dptr,#0x000d
      000510 74 01            [12] 2196 	mov	a,#0x01
      000512 F0               [24] 2197 	movx	@dptr,a
                                   2198 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2199 ;	assignBit
      000513 C2 B5            [12] 2200 	clr	_P3_5
                                   2201 ;	.\ecen4350_lcd_v4.c:296: rtcBusy();
      000515 C0 03            [24] 2202 	push	ar3
      000517 12 03 C6         [24] 2203 	lcall	_rtcBusy
      00051A D0 03            [24] 2204 	pop	ar3
      00051C D0 04            [24] 2205 	pop	ar4
      00051E D0 05            [24] 2206 	pop	ar5
      000520 D0 06            [24] 2207 	pop	ar6
      000522 D0 07            [24] 2208 	pop	ar7
                                   2209 ;	.\ecen4350_lcd_v4.c:99: IOM = 1;
                                   2210 ;	assignBit
      000524 D2 B5            [12] 2211 	setb	_P3_5
                                   2212 ;	.\ecen4350_lcd_v4.c:100: d = *map_address;
      000526 90 00 01         [24] 2213 	mov	dptr,#0x0001
      000529 E0               [24] 2214 	movx	a,@dptr
      00052A FA               [12] 2215 	mov	r2,a
                                   2216 ;	.\ecen4350_lcd_v4.c:101: IOM = 0;
                                   2217 ;	assignBit
      00052B C2 B5            [12] 2218 	clr	_P3_5
                                   2219 ;	.\ecen4350_lcd_v4.c:299: d = (d & 0x0f) | 0x30;	 // ascii the lower word
      00052D 74 0F            [12] 2220 	mov	a,#0x0f
      00052F 5A               [12] 2221 	anl	a,r2
      000530 44 30            [12] 2222 	orl	a,#0x30
      000532 FA               [12] 2223 	mov	r2,a
                                   2224 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                   2225 ;	assignBit
      000533 D2 B5            [12] 2226 	setb	_P3_5
                                   2227 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      000535 90 00 0D         [24] 2228 	mov	dptr,#0x000d
      000538 E4               [12] 2229 	clr	a
      000539 F0               [24] 2230 	movx	@dptr,a
                                   2231 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                   2232 ;	assignBit
      00053A C2 B5            [12] 2233 	clr	_P3_5
                                   2234 ;	.\ecen4350_lcd_v4.c:324: printval[0] = h10;
      00053C 8C 1F            [24] 2235 	mov	_rtcPrint_printval_65536_226,r4
                                   2236 ;	.\ecen4350_lcd_v4.c:325: printval[1] = h1;
      00053E 8D 20            [24] 2237 	mov	(_rtcPrint_printval_65536_226 + 0x0001),r5
                                   2238 ;	.\ecen4350_lcd_v4.c:326: printval[3] = mi10;
      000540 8E 22            [24] 2239 	mov	(_rtcPrint_printval_65536_226 + 0x0003),r6
                                   2240 ;	.\ecen4350_lcd_v4.c:327: printval[4] = mi1;
      000542 8F 23            [24] 2241 	mov	(_rtcPrint_printval_65536_226 + 0x0004),r7
                                   2242 ;	.\ecen4350_lcd_v4.c:328: printval[6] = s10;
      000544 8A 25            [24] 2243 	mov	(_rtcPrint_printval_65536_226 + 0x0006),r2
                                   2244 ;	.\ecen4350_lcd_v4.c:329: printval[7] = s1;
      000546 8B 26            [24] 2245 	mov	(_rtcPrint_printval_65536_226 + 0x0007),r3
                                   2246 ;	.\ecen4350_lcd_v4.c:330: LCD_string_write(printval);
      000548 90 00 1F         [24] 2247 	mov	dptr,#_rtcPrint_printval_65536_226
      00054B 75 F0 40         [24] 2248 	mov	b,#0x40
                                   2249 ;	.\ecen4350_lcd_v4.c:331: }
      00054E 02 10 6B         [24] 2250 	ljmp	_LCD_string_write
                                   2251 ;------------------------------------------------------------
                                   2252 ;Allocation info for local variables in function 'setCursor'
                                   2253 ;------------------------------------------------------------
                                   2254 ;y                         Allocated with name '_setCursor_PARM_2'
                                   2255 ;x                         Allocated to registers 
                                   2256 ;------------------------------------------------------------
                                   2257 ;	.\ecen4350_lcd_v4.c:333: void setCursor(u16 x, u16 y)
                                   2258 ;	-----------------------------------------
                                   2259 ;	 function setCursor
                                   2260 ;	-----------------------------------------
      000551                       2261 _setCursor:
      000551 85 82 10         [24] 2262 	mov	_cursor_x,dpl
      000554 85 83 11         [24] 2263 	mov	(_cursor_x + 1),dph
                                   2264 ;	.\ecen4350_lcd_v4.c:336: cursor_y = y;
      000557 85 6B 12         [24] 2265 	mov	_cursor_y,_setCursor_PARM_2
      00055A 85 6C 13         [24] 2266 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   2267 ;	.\ecen4350_lcd_v4.c:337: }
      00055D 22               [24] 2268 	ret
                                   2269 ;------------------------------------------------------------
                                   2270 ;Allocation info for local variables in function 'setTextColor'
                                   2271 ;------------------------------------------------------------
                                   2272 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   2273 ;x                         Allocated to registers 
                                   2274 ;------------------------------------------------------------
                                   2275 ;	.\ecen4350_lcd_v4.c:339: void setTextColor(u16 x, u16 y)
                                   2276 ;	-----------------------------------------
                                   2277 ;	 function setTextColor
                                   2278 ;	-----------------------------------------
      00055E                       2279 _setTextColor:
      00055E 85 82 16         [24] 2280 	mov	_textcolor,dpl
      000561 85 83 17         [24] 2281 	mov	(_textcolor + 1),dph
                                   2282 ;	.\ecen4350_lcd_v4.c:342: textbgcolor = y;
      000564 85 6B 18         [24] 2283 	mov	_textbgcolor,_setTextColor_PARM_2
      000567 85 6C 19         [24] 2284 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   2285 ;	.\ecen4350_lcd_v4.c:343: }
      00056A 22               [24] 2286 	ret
                                   2287 ;------------------------------------------------------------
                                   2288 ;Allocation info for local variables in function 'setTextSize'
                                   2289 ;------------------------------------------------------------
                                   2290 ;s                         Allocated to registers r7 
                                   2291 ;------------------------------------------------------------
                                   2292 ;	.\ecen4350_lcd_v4.c:346: void setTextSize(u8 s)
                                   2293 ;	-----------------------------------------
                                   2294 ;	 function setTextSize
                                   2295 ;	-----------------------------------------
      00056B                       2296 _setTextSize:
                                   2297 ;	.\ecen4350_lcd_v4.c:348: if (s > 8)
      00056B E5 82            [12] 2298 	mov	a,dpl
      00056D FF               [12] 2299 	mov	r7,a
      00056E 24 F7            [12] 2300 	add	a,#0xff - 0x08
      000570 50 01            [24] 2301 	jnc	00102$
                                   2302 ;	.\ecen4350_lcd_v4.c:349: return;
      000572 22               [24] 2303 	ret
      000573                       2304 00102$:
                                   2305 ;	.\ecen4350_lcd_v4.c:350: textsize = (s > 0) ? s : 1;
      000573 EF               [12] 2306 	mov	a,r7
      000574 60 06            [24] 2307 	jz	00105$
      000576 8F 06            [24] 2308 	mov	ar6,r7
      000578 7F 00            [12] 2309 	mov	r7,#0x00
      00057A 80 04            [24] 2310 	sjmp	00106$
      00057C                       2311 00105$:
      00057C 7E 01            [12] 2312 	mov	r6,#0x01
      00057E 7F 00            [12] 2313 	mov	r7,#0x00
      000580                       2314 00106$:
      000580 8E 14            [24] 2315 	mov	_textsize,r6
                                   2316 ;	.\ecen4350_lcd_v4.c:351: }
      000582 22               [24] 2317 	ret
                                   2318 ;------------------------------------------------------------
                                   2319 ;Allocation info for local variables in function 'setRotation'
                                   2320 ;------------------------------------------------------------
                                   2321 ;flag                      Allocated to registers r7 
                                   2322 ;------------------------------------------------------------
                                   2323 ;	.\ecen4350_lcd_v4.c:353: void setRotation(u8 flag)
                                   2324 ;	-----------------------------------------
                                   2325 ;	 function setRotation
                                   2326 ;	-----------------------------------------
      000583                       2327 _setRotation:
                                   2328 ;	.\ecen4350_lcd_v4.c:355: switch (flag)
      000583 E5 82            [12] 2329 	mov	a,dpl
      000585 FF               [12] 2330 	mov	r7,a
      000586 24 FC            [12] 2331 	add	a,#0xff - 0x03
      000588 40 4E            [24] 2332 	jc	00105$
      00058A EF               [12] 2333 	mov	a,r7
      00058B 2F               [12] 2334 	add	a,r7
                                   2335 ;	.\ecen4350_lcd_v4.c:357: case 0:
      00058C 90 05 90         [24] 2336 	mov	dptr,#00115$
      00058F 73               [24] 2337 	jmp	@a+dptr
      000590                       2338 00115$:
      000590 80 06            [24] 2339 	sjmp	00101$
      000592 80 14            [24] 2340 	sjmp	00102$
      000594 80 22            [24] 2341 	sjmp	00103$
      000596 80 30            [24] 2342 	sjmp	00104$
      000598                       2343 00101$:
                                   2344 ;	.\ecen4350_lcd_v4.c:358: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000598 7F 48            [12] 2345 	mov	r7,#0x48
                                   2346 ;	.\ecen4350_lcd_v4.c:359: _width = TFTWIDTH;
      00059A 75 1A F0         [24] 2347 	mov	__width,#0xf0
      00059D 75 1B 00         [24] 2348 	mov	(__width + 1),#0x00
                                   2349 ;	.\ecen4350_lcd_v4.c:360: _height = TFTHEIGHT;
      0005A0 75 1C 40         [24] 2350 	mov	__height,#0x40
      0005A3 75 1D 01         [24] 2351 	mov	(__height + 1),#0x01
                                   2352 ;	.\ecen4350_lcd_v4.c:361: break;
                                   2353 ;	.\ecen4350_lcd_v4.c:362: case 1:
      0005A6 80 3E            [24] 2354 	sjmp	00106$
      0005A8                       2355 00102$:
                                   2356 ;	.\ecen4350_lcd_v4.c:363: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0005A8 7F 28            [12] 2357 	mov	r7,#0x28
                                   2358 ;	.\ecen4350_lcd_v4.c:364: _width = TFTHEIGHT;
      0005AA 75 1A 40         [24] 2359 	mov	__width,#0x40
      0005AD 75 1B 01         [24] 2360 	mov	(__width + 1),#0x01
                                   2361 ;	.\ecen4350_lcd_v4.c:365: _height = TFTWIDTH;
      0005B0 75 1C F0         [24] 2362 	mov	__height,#0xf0
      0005B3 75 1D 00         [24] 2363 	mov	(__height + 1),#0x00
                                   2364 ;	.\ecen4350_lcd_v4.c:366: break;
                                   2365 ;	.\ecen4350_lcd_v4.c:367: case 2:
      0005B6 80 2E            [24] 2366 	sjmp	00106$
      0005B8                       2367 00103$:
                                   2368 ;	.\ecen4350_lcd_v4.c:368: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0005B8 7F 88            [12] 2369 	mov	r7,#0x88
                                   2370 ;	.\ecen4350_lcd_v4.c:369: _width = TFTWIDTH;
      0005BA 75 1A F0         [24] 2371 	mov	__width,#0xf0
      0005BD 75 1B 00         [24] 2372 	mov	(__width + 1),#0x00
                                   2373 ;	.\ecen4350_lcd_v4.c:370: _height = TFTHEIGHT;
      0005C0 75 1C 40         [24] 2374 	mov	__height,#0x40
      0005C3 75 1D 01         [24] 2375 	mov	(__height + 1),#0x01
                                   2376 ;	.\ecen4350_lcd_v4.c:371: break;
                                   2377 ;	.\ecen4350_lcd_v4.c:372: case 3:
      0005C6 80 1E            [24] 2378 	sjmp	00106$
      0005C8                       2379 00104$:
                                   2380 ;	.\ecen4350_lcd_v4.c:373: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0005C8 7F E8            [12] 2381 	mov	r7,#0xe8
                                   2382 ;	.\ecen4350_lcd_v4.c:374: _width = TFTHEIGHT;
      0005CA 75 1A 40         [24] 2383 	mov	__width,#0x40
      0005CD 75 1B 01         [24] 2384 	mov	(__width + 1),#0x01
                                   2385 ;	.\ecen4350_lcd_v4.c:375: _height = TFTWIDTH;
      0005D0 75 1C F0         [24] 2386 	mov	__height,#0xf0
      0005D3 75 1D 00         [24] 2387 	mov	(__height + 1),#0x00
                                   2388 ;	.\ecen4350_lcd_v4.c:376: break;
                                   2389 ;	.\ecen4350_lcd_v4.c:377: default:
      0005D6 80 0E            [24] 2390 	sjmp	00106$
      0005D8                       2391 00105$:
                                   2392 ;	.\ecen4350_lcd_v4.c:378: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0005D8 7F 48            [12] 2393 	mov	r7,#0x48
                                   2394 ;	.\ecen4350_lcd_v4.c:379: _width = TFTWIDTH;
      0005DA 75 1A F0         [24] 2395 	mov	__width,#0xf0
      0005DD 75 1B 00         [24] 2396 	mov	(__width + 1),#0x00
                                   2397 ;	.\ecen4350_lcd_v4.c:380: _height = TFTHEIGHT;
      0005E0 75 1C 40         [24] 2398 	mov	__height,#0x40
      0005E3 75 1D 01         [24] 2399 	mov	(__height + 1),#0x01
                                   2400 ;	.\ecen4350_lcd_v4.c:382: }
      0005E6                       2401 00106$:
                                   2402 ;	.\ecen4350_lcd_v4.c:383: writeRegister8(ILI9341_MEMCONTROL, flag);
      0005E6 8F 6B            [24] 2403 	mov	_writeRegister8_PARM_2,r7
      0005E8 75 82 36         [24] 2404 	mov	dpl,#0x36
                                   2405 ;	.\ecen4350_lcd_v4.c:384: }
      0005EB 02 01 D0         [24] 2406 	ljmp	_writeRegister8
                                   2407 ;------------------------------------------------------------
                                   2408 ;Allocation info for local variables in function 'setAddress'
                                   2409 ;------------------------------------------------------------
                                   2410 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2411 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2412 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2413 ;x1                        Allocated to registers r6 r7 
                                   2414 ;------------------------------------------------------------
                                   2415 ;	.\ecen4350_lcd_v4.c:387: void setAddress(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function setAddress
                                   2418 ;	-----------------------------------------
      0005EE                       2419 _setAddress:
      0005EE AE 82            [24] 2420 	mov	r6,dpl
      0005F0 AF 83            [24] 2421 	mov	r7,dph
                                   2422 ;	.\ecen4350_lcd_v4.c:390: write8Reg(0x2A);
                                   2423 ;	assignBit
      0005F2 C2 B4            [12] 2424 	clr	_P3_4
                                   2425 ;	assignBit
      0005F4 D2 B5            [12] 2426 	setb	_P3_5
      0005F6 85 0A 82         [24] 2427 	mov	dpl,_lcd_address
      0005F9 85 0B 83         [24] 2428 	mov	dph,(_lcd_address + 1)
      0005FC 74 2A            [12] 2429 	mov	a,#0x2a
      0005FE F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	assignBit
      0005FF C2 B5            [12] 2432 	clr	_P3_5
                                   2433 ;	.\ecen4350_lcd_v4.c:391: write8Data(x1 >> 8);
                                   2434 ;	assignBit
      000601 D2 B4            [12] 2435 	setb	_P3_4
                                   2436 ;	assignBit
      000603 D2 B5            [12] 2437 	setb	_P3_5
      000605 85 0A 82         [24] 2438 	mov	dpl,_lcd_address
      000608 85 0B 83         [24] 2439 	mov	dph,(_lcd_address + 1)
      00060B 8F 05            [24] 2440 	mov	ar5,r7
      00060D ED               [12] 2441 	mov	a,r5
      00060E F0               [24] 2442 	movx	@dptr,a
                                   2443 ;	assignBit
      00060F C2 B5            [12] 2444 	clr	_P3_5
                                   2445 ;	.\ecen4350_lcd_v4.c:392: write8Data(x1);
                                   2446 ;	assignBit
      000611 D2 B4            [12] 2447 	setb	_P3_4
                                   2448 ;	assignBit
      000613 D2 B5            [12] 2449 	setb	_P3_5
      000615 85 0A 82         [24] 2450 	mov	dpl,_lcd_address
      000618 85 0B 83         [24] 2451 	mov	dph,(_lcd_address + 1)
      00061B EE               [12] 2452 	mov	a,r6
      00061C F0               [24] 2453 	movx	@dptr,a
                                   2454 ;	assignBit
      00061D C2 B5            [12] 2455 	clr	_P3_5
                                   2456 ;	.\ecen4350_lcd_v4.c:393: write8Data(x2 >> 8);
                                   2457 ;	assignBit
      00061F D2 B4            [12] 2458 	setb	_P3_4
                                   2459 ;	assignBit
      000621 D2 B5            [12] 2460 	setb	_P3_5
      000623 85 0A 82         [24] 2461 	mov	dpl,_lcd_address
      000626 85 0B 83         [24] 2462 	mov	dph,(_lcd_address + 1)
      000629 E5 6E            [12] 2463 	mov	a,(_setAddress_PARM_3 + 1)
      00062B F0               [24] 2464 	movx	@dptr,a
                                   2465 ;	assignBit
      00062C C2 B5            [12] 2466 	clr	_P3_5
                                   2467 ;	.\ecen4350_lcd_v4.c:394: write8Data(x2);
                                   2468 ;	assignBit
      00062E D2 B4            [12] 2469 	setb	_P3_4
                                   2470 ;	assignBit
      000630 D2 B5            [12] 2471 	setb	_P3_5
      000632 85 0A 82         [24] 2472 	mov	dpl,_lcd_address
      000635 85 0B 83         [24] 2473 	mov	dph,(_lcd_address + 1)
      000638 E5 6D            [12] 2474 	mov	a,_setAddress_PARM_3
      00063A F0               [24] 2475 	movx	@dptr,a
                                   2476 ;	assignBit
      00063B C2 B5            [12] 2477 	clr	_P3_5
                                   2478 ;	.\ecen4350_lcd_v4.c:396: write8Reg(0x2B);
                                   2479 ;	assignBit
      00063D C2 B4            [12] 2480 	clr	_P3_4
                                   2481 ;	assignBit
      00063F D2 B5            [12] 2482 	setb	_P3_5
      000641 85 0A 82         [24] 2483 	mov	dpl,_lcd_address
      000644 85 0B 83         [24] 2484 	mov	dph,(_lcd_address + 1)
      000647 74 2B            [12] 2485 	mov	a,#0x2b
      000649 F0               [24] 2486 	movx	@dptr,a
                                   2487 ;	assignBit
      00064A C2 B5            [12] 2488 	clr	_P3_5
                                   2489 ;	.\ecen4350_lcd_v4.c:397: write8Data(y1 >> 8);
                                   2490 ;	assignBit
      00064C D2 B4            [12] 2491 	setb	_P3_4
                                   2492 ;	assignBit
      00064E D2 B5            [12] 2493 	setb	_P3_5
      000650 85 0A 82         [24] 2494 	mov	dpl,_lcd_address
      000653 85 0B 83         [24] 2495 	mov	dph,(_lcd_address + 1)
      000656 E5 6C            [12] 2496 	mov	a,(_setAddress_PARM_2 + 1)
      000658 F0               [24] 2497 	movx	@dptr,a
                                   2498 ;	assignBit
      000659 C2 B5            [12] 2499 	clr	_P3_5
                                   2500 ;	.\ecen4350_lcd_v4.c:398: write8Data(y1);
                                   2501 ;	assignBit
      00065B D2 B4            [12] 2502 	setb	_P3_4
                                   2503 ;	assignBit
      00065D D2 B5            [12] 2504 	setb	_P3_5
      00065F 85 0A 82         [24] 2505 	mov	dpl,_lcd_address
      000662 85 0B 83         [24] 2506 	mov	dph,(_lcd_address + 1)
      000665 E5 6B            [12] 2507 	mov	a,_setAddress_PARM_2
      000667 F0               [24] 2508 	movx	@dptr,a
                                   2509 ;	assignBit
      000668 C2 B5            [12] 2510 	clr	_P3_5
                                   2511 ;	.\ecen4350_lcd_v4.c:399: write8Data(y2 >> 8);
                                   2512 ;	assignBit
      00066A D2 B4            [12] 2513 	setb	_P3_4
                                   2514 ;	assignBit
      00066C D2 B5            [12] 2515 	setb	_P3_5
      00066E 85 0A 82         [24] 2516 	mov	dpl,_lcd_address
      000671 85 0B 83         [24] 2517 	mov	dph,(_lcd_address + 1)
      000674 E5 70            [12] 2518 	mov	a,(_setAddress_PARM_4 + 1)
      000676 F0               [24] 2519 	movx	@dptr,a
                                   2520 ;	assignBit
      000677 C2 B5            [12] 2521 	clr	_P3_5
                                   2522 ;	.\ecen4350_lcd_v4.c:400: write8Data(y2);
                                   2523 ;	assignBit
      000679 D2 B4            [12] 2524 	setb	_P3_4
                                   2525 ;	assignBit
      00067B D2 B5            [12] 2526 	setb	_P3_5
      00067D 85 0A 82         [24] 2527 	mov	dpl,_lcd_address
      000680 85 0B 83         [24] 2528 	mov	dph,(_lcd_address + 1)
      000683 E5 6F            [12] 2529 	mov	a,_setAddress_PARM_4
      000685 F0               [24] 2530 	movx	@dptr,a
                                   2531 ;	assignBit
      000686 C2 B5            [12] 2532 	clr	_P3_5
                                   2533 ;	.\ecen4350_lcd_v4.c:403: }
      000688 22               [24] 2534 	ret
                                   2535 ;------------------------------------------------------------
                                   2536 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2537 ;------------------------------------------------------------
                                   2538 ;	.\ecen4350_lcd_v4.c:405: void TFT_LCD_INIT(void)
                                   2539 ;	-----------------------------------------
                                   2540 ;	 function TFT_LCD_INIT
                                   2541 ;	-----------------------------------------
      000689                       2542 _TFT_LCD_INIT:
                                   2543 ;	.\ecen4350_lcd_v4.c:409: _width = TFTWIDTH;
      000689 75 1A F0         [24] 2544 	mov	__width,#0xf0
      00068C 75 1B 00         [24] 2545 	mov	(__width + 1),#0x00
                                   2546 ;	.\ecen4350_lcd_v4.c:410: _height = TFTHEIGHT;
      00068F 75 1C 40         [24] 2547 	mov	__height,#0x40
      000692 75 1D 01         [24] 2548 	mov	(__height + 1),#0x01
                                   2549 ;	.\ecen4350_lcd_v4.c:413: IOM = 0;
                                   2550 ;	assignBit
      000695 C2 B5            [12] 2551 	clr	_P3_5
                                   2552 ;	.\ecen4350_lcd_v4.c:415: CD = 1;
                                   2553 ;	assignBit
      000697 D2 B4            [12] 2554 	setb	_P3_4
                                   2555 ;	.\ecen4350_lcd_v4.c:417: write8Reg(0x00);
                                   2556 ;	assignBit
      000699 C2 B4            [12] 2557 	clr	_P3_4
                                   2558 ;	assignBit
      00069B D2 B5            [12] 2559 	setb	_P3_5
      00069D 85 0A 82         [24] 2560 	mov	dpl,_lcd_address
      0006A0 85 0B 83         [24] 2561 	mov	dph,(_lcd_address + 1)
      0006A3 E4               [12] 2562 	clr	a
      0006A4 F0               [24] 2563 	movx	@dptr,a
                                   2564 ;	assignBit
      0006A5 C2 B5            [12] 2565 	clr	_P3_5
                                   2566 ;	.\ecen4350_lcd_v4.c:418: write8Data(0x00);
                                   2567 ;	assignBit
      0006A7 D2 B4            [12] 2568 	setb	_P3_4
                                   2569 ;	assignBit
      0006A9 D2 B5            [12] 2570 	setb	_P3_5
      0006AB 85 0A 82         [24] 2571 	mov	dpl,_lcd_address
      0006AE 85 0B 83         [24] 2572 	mov	dph,(_lcd_address + 1)
      0006B1 E4               [12] 2573 	clr	a
      0006B2 F0               [24] 2574 	movx	@dptr,a
                                   2575 ;	assignBit
      0006B3 C2 B5            [12] 2576 	clr	_P3_5
                                   2577 ;	.\ecen4350_lcd_v4.c:419: write8Data(0x00);
                                   2578 ;	assignBit
      0006B5 D2 B4            [12] 2579 	setb	_P3_4
                                   2580 ;	assignBit
      0006B7 D2 B5            [12] 2581 	setb	_P3_5
      0006B9 85 0A 82         [24] 2582 	mov	dpl,_lcd_address
      0006BC 85 0B 83         [24] 2583 	mov	dph,(_lcd_address + 1)
      0006BF E4               [12] 2584 	clr	a
      0006C0 F0               [24] 2585 	movx	@dptr,a
                                   2586 ;	assignBit
      0006C1 C2 B5            [12] 2587 	clr	_P3_5
                                   2588 ;	.\ecen4350_lcd_v4.c:420: write8Data(0x00);
                                   2589 ;	assignBit
      0006C3 D2 B4            [12] 2590 	setb	_P3_4
                                   2591 ;	assignBit
      0006C5 D2 B5            [12] 2592 	setb	_P3_5
      0006C7 85 0A 82         [24] 2593 	mov	dpl,_lcd_address
      0006CA 85 0B 83         [24] 2594 	mov	dph,(_lcd_address + 1)
      0006CD E4               [12] 2595 	clr	a
      0006CE F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	assignBit
      0006CF C2 B5            [12] 2598 	clr	_P3_5
                                   2599 ;	.\ecen4350_lcd_v4.c:422: delay(100);						// changed from 200 to 100
      0006D1 90 00 64         [24] 2600 	mov	dptr,#0x0064
      0006D4 12 01 87         [24] 2601 	lcall	_delay
                                   2602 ;	.\ecen4350_lcd_v4.c:426: writeRegister8(ILI9341_SOFTRESET, 0);
      0006D7 75 6B 00         [24] 2603 	mov	_writeRegister8_PARM_2,#0x00
      0006DA 75 82 01         [24] 2604 	mov	dpl,#0x01
      0006DD 12 01 D0         [24] 2605 	lcall	_writeRegister8
                                   2606 ;	.\ecen4350_lcd_v4.c:427: delay(50);
      0006E0 90 00 32         [24] 2607 	mov	dptr,#0x0032
      0006E3 12 01 87         [24] 2608 	lcall	_delay
                                   2609 ;	.\ecen4350_lcd_v4.c:428: writeRegister8(ILI9341_DISPLAYOFF, 0);
      0006E6 75 6B 00         [24] 2610 	mov	_writeRegister8_PARM_2,#0x00
      0006E9 75 82 28         [24] 2611 	mov	dpl,#0x28
      0006EC 12 01 D0         [24] 2612 	lcall	_writeRegister8
                                   2613 ;	.\ecen4350_lcd_v4.c:429: delay(10);
      0006EF 90 00 0A         [24] 2614 	mov	dptr,#0x000a
      0006F2 12 01 87         [24] 2615 	lcall	_delay
                                   2616 ;	.\ecen4350_lcd_v4.c:431: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      0006F5 75 6B 23         [24] 2617 	mov	_writeRegister8_PARM_2,#0x23
      0006F8 75 82 C0         [24] 2618 	mov	dpl,#0xc0
      0006FB 12 01 D0         [24] 2619 	lcall	_writeRegister8
                                   2620 ;	.\ecen4350_lcd_v4.c:432: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      0006FE 75 6B 11         [24] 2621 	mov	_writeRegister8_PARM_2,#0x11
      000701 75 82 C1         [24] 2622 	mov	dpl,#0xc1
      000704 12 01 D0         [24] 2623 	lcall	_writeRegister8
                                   2624 ;	.\ecen4350_lcd_v4.c:433: write8Reg(ILI9341_VCOMCONTROL1);
                                   2625 ;	assignBit
      000707 C2 B4            [12] 2626 	clr	_P3_4
                                   2627 ;	assignBit
      000709 D2 B5            [12] 2628 	setb	_P3_5
      00070B 85 0A 82         [24] 2629 	mov	dpl,_lcd_address
      00070E 85 0B 83         [24] 2630 	mov	dph,(_lcd_address + 1)
      000711 74 C5            [12] 2631 	mov	a,#0xc5
      000713 F0               [24] 2632 	movx	@dptr,a
                                   2633 ;	assignBit
      000714 C2 B5            [12] 2634 	clr	_P3_5
                                   2635 ;	.\ecen4350_lcd_v4.c:434: write8Data(0x3d);
                                   2636 ;	assignBit
      000716 D2 B4            [12] 2637 	setb	_P3_4
                                   2638 ;	assignBit
      000718 D2 B5            [12] 2639 	setb	_P3_5
      00071A 85 0A 82         [24] 2640 	mov	dpl,_lcd_address
      00071D 85 0B 83         [24] 2641 	mov	dph,(_lcd_address + 1)
      000720 74 3D            [12] 2642 	mov	a,#0x3d
      000722 F0               [24] 2643 	movx	@dptr,a
                                   2644 ;	assignBit
      000723 C2 B5            [12] 2645 	clr	_P3_5
                                   2646 ;	.\ecen4350_lcd_v4.c:435: write8Data(0x30);
                                   2647 ;	assignBit
      000725 D2 B4            [12] 2648 	setb	_P3_4
                                   2649 ;	assignBit
      000727 D2 B5            [12] 2650 	setb	_P3_5
      000729 85 0A 82         [24] 2651 	mov	dpl,_lcd_address
      00072C 85 0B 83         [24] 2652 	mov	dph,(_lcd_address + 1)
      00072F 74 30            [12] 2653 	mov	a,#0x30
      000731 F0               [24] 2654 	movx	@dptr,a
                                   2655 ;	assignBit
      000732 C2 B5            [12] 2656 	clr	_P3_5
                                   2657 ;	.\ecen4350_lcd_v4.c:436: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000734 75 6B AA         [24] 2658 	mov	_writeRegister8_PARM_2,#0xaa
      000737 75 82 C7         [24] 2659 	mov	dpl,#0xc7
      00073A 12 01 D0         [24] 2660 	lcall	_writeRegister8
                                   2661 ;	.\ecen4350_lcd_v4.c:437: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00073D 75 6B 88         [24] 2662 	mov	_writeRegister8_PARM_2,#0x88
      000740 75 82 36         [24] 2663 	mov	dpl,#0x36
      000743 12 01 D0         [24] 2664 	lcall	_writeRegister8
                                   2665 ;	.\ecen4350_lcd_v4.c:438: write8Reg(ILI9341_PIXELFORMAT);
                                   2666 ;	assignBit
      000746 C2 B4            [12] 2667 	clr	_P3_4
                                   2668 ;	assignBit
      000748 D2 B5            [12] 2669 	setb	_P3_5
      00074A 85 0A 82         [24] 2670 	mov	dpl,_lcd_address
      00074D 85 0B 83         [24] 2671 	mov	dph,(_lcd_address + 1)
      000750 74 3A            [12] 2672 	mov	a,#0x3a
      000752 F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	assignBit
      000753 C2 B5            [12] 2675 	clr	_P3_5
                                   2676 ;	.\ecen4350_lcd_v4.c:439: write8Data(0x55);
                                   2677 ;	assignBit
      000755 D2 B4            [12] 2678 	setb	_P3_4
                                   2679 ;	assignBit
      000757 D2 B5            [12] 2680 	setb	_P3_5
      000759 85 0A 82         [24] 2681 	mov	dpl,_lcd_address
      00075C 85 0B 83         [24] 2682 	mov	dph,(_lcd_address + 1)
      00075F 74 55            [12] 2683 	mov	a,#0x55
      000761 F0               [24] 2684 	movx	@dptr,a
                                   2685 ;	assignBit
      000762 C2 B5            [12] 2686 	clr	_P3_5
                                   2687 ;	.\ecen4350_lcd_v4.c:440: write8Data(0x00);
                                   2688 ;	assignBit
      000764 D2 B4            [12] 2689 	setb	_P3_4
                                   2690 ;	assignBit
      000766 D2 B5            [12] 2691 	setb	_P3_5
      000768 85 0A 82         [24] 2692 	mov	dpl,_lcd_address
      00076B 85 0B 83         [24] 2693 	mov	dph,(_lcd_address + 1)
      00076E E4               [12] 2694 	clr	a
      00076F F0               [24] 2695 	movx	@dptr,a
                                   2696 ;	assignBit
      000770 C2 B5            [12] 2697 	clr	_P3_5
                                   2698 ;	.\ecen4350_lcd_v4.c:441: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000772 75 6B 1B         [24] 2699 	mov	_writeRegister16_PARM_2,#0x1b
      000775 75 6C 00         [24] 2700 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000778 90 00 B1         [24] 2701 	mov	dptr,#0x00b1
      00077B 12 01 F0         [24] 2702 	lcall	_writeRegister16
                                   2703 ;	.\ecen4350_lcd_v4.c:443: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00077E 75 6B 07         [24] 2704 	mov	_writeRegister8_PARM_2,#0x07
      000781 75 82 B7         [24] 2705 	mov	dpl,#0xb7
      000784 12 01 D0         [24] 2706 	lcall	_writeRegister8
                                   2707 ;	.\ecen4350_lcd_v4.c:446: writeRegister8(ILI9341_SLEEPOUT, 0);
      000787 75 6B 00         [24] 2708 	mov	_writeRegister8_PARM_2,#0x00
      00078A 75 82 11         [24] 2709 	mov	dpl,#0x11
      00078D 12 01 D0         [24] 2710 	lcall	_writeRegister8
                                   2711 ;	.\ecen4350_lcd_v4.c:447: delay(100);								// changed from 150 to 100
      000790 90 00 64         [24] 2712 	mov	dptr,#0x0064
      000793 12 01 87         [24] 2713 	lcall	_delay
                                   2714 ;	.\ecen4350_lcd_v4.c:448: writeRegister8(ILI9341_DISPLAYON, 0);
      000796 75 6B 00         [24] 2715 	mov	_writeRegister8_PARM_2,#0x00
      000799 75 82 29         [24] 2716 	mov	dpl,#0x29
      00079C 12 01 D0         [24] 2717 	lcall	_writeRegister8
                                   2718 ;	.\ecen4350_lcd_v4.c:449: delay(150);								// changed from 200 to 150
      00079F 90 00 96         [24] 2719 	mov	dptr,#0x0096
      0007A2 12 01 87         [24] 2720 	lcall	_delay
                                   2721 ;	.\ecen4350_lcd_v4.c:450: setAddress(0, 0, _width - 1, _height - 1);
      0007A5 E5 1A            [12] 2722 	mov	a,__width
      0007A7 24 FF            [12] 2723 	add	a,#0xff
      0007A9 F5 6D            [12] 2724 	mov	_setAddress_PARM_3,a
      0007AB E5 1B            [12] 2725 	mov	a,(__width + 1)
      0007AD 34 FF            [12] 2726 	addc	a,#0xff
      0007AF F5 6E            [12] 2727 	mov	(_setAddress_PARM_3 + 1),a
      0007B1 E5 1C            [12] 2728 	mov	a,__height
      0007B3 24 FF            [12] 2729 	add	a,#0xff
      0007B5 F5 6F            [12] 2730 	mov	_setAddress_PARM_4,a
      0007B7 E5 1D            [12] 2731 	mov	a,(__height + 1)
      0007B9 34 FF            [12] 2732 	addc	a,#0xff
      0007BB F5 70            [12] 2733 	mov	(_setAddress_PARM_4 + 1),a
      0007BD E4               [12] 2734 	clr	a
      0007BE F5 6B            [12] 2735 	mov	_setAddress_PARM_2,a
      0007C0 F5 6C            [12] 2736 	mov	(_setAddress_PARM_2 + 1),a
      0007C2 90 00 00         [24] 2737 	mov	dptr,#0x0000
                                   2738 ;	.\ecen4350_lcd_v4.c:454: }
      0007C5 02 05 EE         [24] 2739 	ljmp	_setAddress
                                   2740 ;------------------------------------------------------------
                                   2741 ;Allocation info for local variables in function 'drawPixel'
                                   2742 ;------------------------------------------------------------
                                   2743 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2744 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2745 ;x3                        Allocated to registers r6 r7 
                                   2746 ;------------------------------------------------------------
                                   2747 ;	.\ecen4350_lcd_v4.c:455: void drawPixel(u16 x3, u16 y3, u16 color1)
                                   2748 ;	-----------------------------------------
                                   2749 ;	 function drawPixel
                                   2750 ;	-----------------------------------------
      0007C8                       2751 _drawPixel:
      0007C8 AE 82            [24] 2752 	mov	r6,dpl
      0007CA AF 83            [24] 2753 	mov	r7,dph
                                   2754 ;	.\ecen4350_lcd_v4.c:463: setAddress(x3, y3, x3 + 1, y3 + 1);
      0007CC 74 01            [12] 2755 	mov	a,#0x01
      0007CE 2E               [12] 2756 	add	a,r6
      0007CF F5 6D            [12] 2757 	mov	_setAddress_PARM_3,a
      0007D1 E4               [12] 2758 	clr	a
      0007D2 3F               [12] 2759 	addc	a,r7
      0007D3 F5 6E            [12] 2760 	mov	(_setAddress_PARM_3 + 1),a
      0007D5 74 01            [12] 2761 	mov	a,#0x01
      0007D7 25 28            [12] 2762 	add	a,_drawPixel_PARM_2
      0007D9 F5 6F            [12] 2763 	mov	_setAddress_PARM_4,a
      0007DB E4               [12] 2764 	clr	a
      0007DC 35 29            [12] 2765 	addc	a,(_drawPixel_PARM_2 + 1)
      0007DE F5 70            [12] 2766 	mov	(_setAddress_PARM_4 + 1),a
      0007E0 85 28 6B         [24] 2767 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      0007E3 85 29 6C         [24] 2768 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      0007E6 8E 82            [24] 2769 	mov	dpl,r6
      0007E8 8F 83            [24] 2770 	mov	dph,r7
      0007EA 12 05 EE         [24] 2771 	lcall	_setAddress
                                   2772 ;	.\ecen4350_lcd_v4.c:467: CD = 0;
                                   2773 ;	assignBit
      0007ED C2 B4            [12] 2774 	clr	_P3_4
                                   2775 ;	.\ecen4350_lcd_v4.c:468: write8(0x2C);
                                   2776 ;	assignBit
      0007EF D2 B5            [12] 2777 	setb	_P3_5
      0007F1 85 0A 82         [24] 2778 	mov	dpl,_lcd_address
      0007F4 85 0B 83         [24] 2779 	mov	dph,(_lcd_address + 1)
      0007F7 74 2C            [12] 2780 	mov	a,#0x2c
      0007F9 F0               [24] 2781 	movx	@dptr,a
                                   2782 ;	assignBit
      0007FA C2 B5            [12] 2783 	clr	_P3_5
                                   2784 ;	.\ecen4350_lcd_v4.c:470: CD = 1;
                                   2785 ;	assignBit
      0007FC D2 B4            [12] 2786 	setb	_P3_4
                                   2787 ;	.\ecen4350_lcd_v4.c:471: write8(color1 >> 8);
                                   2788 ;	assignBit
      0007FE D2 B5            [12] 2789 	setb	_P3_5
      000800 85 0A 82         [24] 2790 	mov	dpl,_lcd_address
      000803 85 0B 83         [24] 2791 	mov	dph,(_lcd_address + 1)
      000806 E5 2B            [12] 2792 	mov	a,(_drawPixel_PARM_3 + 1)
      000808 F0               [24] 2793 	movx	@dptr,a
                                   2794 ;	assignBit
      000809 C2 B5            [12] 2795 	clr	_P3_5
                                   2796 ;	.\ecen4350_lcd_v4.c:472: write8(color1);
                                   2797 ;	assignBit
      00080B D2 B5            [12] 2798 	setb	_P3_5
      00080D 85 0A 82         [24] 2799 	mov	dpl,_lcd_address
      000810 85 0B 83         [24] 2800 	mov	dph,(_lcd_address + 1)
      000813 E5 2A            [12] 2801 	mov	a,_drawPixel_PARM_3
      000815 F0               [24] 2802 	movx	@dptr,a
                                   2803 ;	assignBit
      000816 C2 B5            [12] 2804 	clr	_P3_5
                                   2805 ;	.\ecen4350_lcd_v4.c:474: }
      000818 22               [24] 2806 	ret
                                   2807 ;------------------------------------------------------------
                                   2808 ;Allocation info for local variables in function 'drawCircle'
                                   2809 ;------------------------------------------------------------
                                   2810 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   2811 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   2812 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   2813 ;x0                        Allocated with name '_drawCircle_x0_65536_393'
                                   2814 ;f                         Allocated with name '_drawCircle_f_65536_394'
                                   2815 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_394'
                                   2816 ;ddF_y                     Allocated to registers r2 r3 
                                   2817 ;x                         Allocated with name '_drawCircle_x_65536_394'
                                   2818 ;y                         Allocated to registers r0 r1 
                                   2819 ;------------------------------------------------------------
                                   2820 ;	.\ecen4350_lcd_v4.c:478: void drawCircle(int x0, int y0, int r, u16 color)
                                   2821 ;	-----------------------------------------
                                   2822 ;	 function drawCircle
                                   2823 ;	-----------------------------------------
      000819                       2824 _drawCircle:
      000819 85 82 32         [24] 2825 	mov	_drawCircle_x0_65536_393,dpl
      00081C 85 83 33         [24] 2826 	mov	(_drawCircle_x0_65536_393 + 1),dph
                                   2827 ;	.\ecen4350_lcd_v4.c:480: int f = 1 - r;
      00081F 74 01            [12] 2828 	mov	a,#0x01
      000821 C3               [12] 2829 	clr	c
      000822 95 2E            [12] 2830 	subb	a,_drawCircle_PARM_3
      000824 F5 34            [12] 2831 	mov	_drawCircle_f_65536_394,a
      000826 E4               [12] 2832 	clr	a
      000827 95 2F            [12] 2833 	subb	a,(_drawCircle_PARM_3 + 1)
      000829 F5 35            [12] 2834 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2835 ;	.\ecen4350_lcd_v4.c:482: int ddF_y = -2 * r;
      00082B 85 2E 6B         [24] 2836 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00082E 85 2F 6C         [24] 2837 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      000831 90 FF FE         [24] 2838 	mov	dptr,#0xfffe
      000834 12 57 6C         [24] 2839 	lcall	__mulint
      000837 AA 82            [24] 2840 	mov	r2,dpl
      000839 AB 83            [24] 2841 	mov	r3,dph
                                   2842 ;	.\ecen4350_lcd_v4.c:484: int y = r;
      00083B A8 2E            [24] 2843 	mov	r0,_drawCircle_PARM_3
      00083D A9 2F            [24] 2844 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   2845 ;	.\ecen4350_lcd_v4.c:486: drawPixel(x0, y0 + r, color);
      00083F E8               [12] 2846 	mov	a,r0
      000840 25 2C            [12] 2847 	add	a,_drawCircle_PARM_2
      000842 F5 28            [12] 2848 	mov	_drawPixel_PARM_2,a
      000844 E9               [12] 2849 	mov	a,r1
      000845 35 2D            [12] 2850 	addc	a,(_drawCircle_PARM_2 + 1)
      000847 F5 29            [12] 2851 	mov	(_drawPixel_PARM_2 + 1),a
      000849 85 30 2A         [24] 2852 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00084C 85 31 2B         [24] 2853 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00084F 85 32 82         [24] 2854 	mov	dpl,_drawCircle_x0_65536_393
      000852 85 33 83         [24] 2855 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      000855 C0 03            [24] 2856 	push	ar3
      000857 C0 02            [24] 2857 	push	ar2
      000859 C0 01            [24] 2858 	push	ar1
      00085B C0 00            [24] 2859 	push	ar0
      00085D 12 07 C8         [24] 2860 	lcall	_drawPixel
      000860 D0 00            [24] 2861 	pop	ar0
      000862 D0 01            [24] 2862 	pop	ar1
                                   2863 ;	.\ecen4350_lcd_v4.c:487: drawPixel(x0, y0 - r, color);
      000864 E5 2C            [12] 2864 	mov	a,_drawCircle_PARM_2
      000866 C3               [12] 2865 	clr	c
      000867 98               [12] 2866 	subb	a,r0
      000868 F5 28            [12] 2867 	mov	_drawPixel_PARM_2,a
      00086A E5 2D            [12] 2868 	mov	a,(_drawCircle_PARM_2 + 1)
      00086C 99               [12] 2869 	subb	a,r1
      00086D F5 29            [12] 2870 	mov	(_drawPixel_PARM_2 + 1),a
      00086F 85 30 2A         [24] 2871 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000872 85 31 2B         [24] 2872 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000875 85 32 82         [24] 2873 	mov	dpl,_drawCircle_x0_65536_393
      000878 85 33 83         [24] 2874 	mov	dph,(_drawCircle_x0_65536_393 + 1)
      00087B C0 01            [24] 2875 	push	ar1
      00087D C0 00            [24] 2876 	push	ar0
      00087F 12 07 C8         [24] 2877 	lcall	_drawPixel
      000882 D0 00            [24] 2878 	pop	ar0
      000884 D0 01            [24] 2879 	pop	ar1
                                   2880 ;	.\ecen4350_lcd_v4.c:488: drawPixel(x0 + r, y0, color);
      000886 E8               [12] 2881 	mov	a,r0
      000887 25 32            [12] 2882 	add	a,_drawCircle_x0_65536_393
      000889 F5 82            [12] 2883 	mov	dpl,a
      00088B E9               [12] 2884 	mov	a,r1
      00088C 35 33            [12] 2885 	addc	a,(_drawCircle_x0_65536_393 + 1)
      00088E F5 83            [12] 2886 	mov	dph,a
      000890 85 2C 28         [24] 2887 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000893 85 2D 29         [24] 2888 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000896 85 30 2A         [24] 2889 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000899 85 31 2B         [24] 2890 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00089C C0 01            [24] 2891 	push	ar1
      00089E C0 00            [24] 2892 	push	ar0
      0008A0 12 07 C8         [24] 2893 	lcall	_drawPixel
      0008A3 D0 00            [24] 2894 	pop	ar0
      0008A5 D0 01            [24] 2895 	pop	ar1
                                   2896 ;	.\ecen4350_lcd_v4.c:489: drawPixel(x0 - r, y0, color);
      0008A7 E5 32            [12] 2897 	mov	a,_drawCircle_x0_65536_393
      0008A9 C3               [12] 2898 	clr	c
      0008AA 98               [12] 2899 	subb	a,r0
      0008AB F5 82            [12] 2900 	mov	dpl,a
      0008AD E5 33            [12] 2901 	mov	a,(_drawCircle_x0_65536_393 + 1)
      0008AF 99               [12] 2902 	subb	a,r1
      0008B0 F5 83            [12] 2903 	mov	dph,a
      0008B2 85 2C 28         [24] 2904 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0008B5 85 2D 29         [24] 2905 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0008B8 85 30 2A         [24] 2906 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0008BB 85 31 2B         [24] 2907 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0008BE C0 01            [24] 2908 	push	ar1
      0008C0 C0 00            [24] 2909 	push	ar0
      0008C2 12 07 C8         [24] 2910 	lcall	_drawPixel
      0008C5 D0 00            [24] 2911 	pop	ar0
      0008C7 D0 01            [24] 2912 	pop	ar1
      0008C9 D0 02            [24] 2913 	pop	ar2
      0008CB D0 03            [24] 2914 	pop	ar3
                                   2915 ;	.\ecen4350_lcd_v4.c:491: while (x < y)
      0008CD E4               [12] 2916 	clr	a
      0008CE F5 38            [12] 2917 	mov	_drawCircle_x_65536_394,a
      0008D0 F5 39            [12] 2918 	mov	(_drawCircle_x_65536_394 + 1),a
      0008D2 75 36 01         [24] 2919 	mov	_drawCircle_ddF_x_65536_394,#0x01
                                   2920 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_394 + 1),#0x00
      0008D5 F5 37            [12] 2921 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
      0008D7                       2922 00103$:
      0008D7 C3               [12] 2923 	clr	c
      0008D8 E5 38            [12] 2924 	mov	a,_drawCircle_x_65536_394
      0008DA 98               [12] 2925 	subb	a,r0
      0008DB E5 39            [12] 2926 	mov	a,(_drawCircle_x_65536_394 + 1)
      0008DD 64 80            [12] 2927 	xrl	a,#0x80
      0008DF 89 F0            [24] 2928 	mov	b,r1
      0008E1 63 F0 80         [24] 2929 	xrl	b,#0x80
      0008E4 95 F0            [12] 2930 	subb	a,b
      0008E6 40 01            [24] 2931 	jc	00121$
      0008E8 22               [24] 2932 	ret
      0008E9                       2933 00121$:
                                   2934 ;	.\ecen4350_lcd_v4.c:493: if (f >= 0)
      0008E9 E5 35            [12] 2935 	mov	a,(_drawCircle_f_65536_394 + 1)
      0008EB 20 E7 16         [24] 2936 	jb	acc.7,00102$
                                   2937 ;	.\ecen4350_lcd_v4.c:495: y--;
      0008EE 18               [12] 2938 	dec	r0
      0008EF B8 FF 01         [24] 2939 	cjne	r0,#0xff,00123$
      0008F2 19               [12] 2940 	dec	r1
      0008F3                       2941 00123$:
                                   2942 ;	.\ecen4350_lcd_v4.c:496: ddF_y += 2;
      0008F3 74 02            [12] 2943 	mov	a,#0x02
      0008F5 2A               [12] 2944 	add	a,r2
      0008F6 FA               [12] 2945 	mov	r2,a
      0008F7 E4               [12] 2946 	clr	a
      0008F8 3B               [12] 2947 	addc	a,r3
      0008F9 FB               [12] 2948 	mov	r3,a
                                   2949 ;	.\ecen4350_lcd_v4.c:497: f += ddF_y;
      0008FA EA               [12] 2950 	mov	a,r2
      0008FB 25 34            [12] 2951 	add	a,_drawCircle_f_65536_394
      0008FD F5 34            [12] 2952 	mov	_drawCircle_f_65536_394,a
      0008FF EB               [12] 2953 	mov	a,r3
      000900 35 35            [12] 2954 	addc	a,(_drawCircle_f_65536_394 + 1)
      000902 F5 35            [12] 2955 	mov	(_drawCircle_f_65536_394 + 1),a
      000904                       2956 00102$:
                                   2957 ;	.\ecen4350_lcd_v4.c:499: x++;
      000904 C0 02            [24] 2958 	push	ar2
      000906 C0 03            [24] 2959 	push	ar3
      000908 05 38            [12] 2960 	inc	_drawCircle_x_65536_394
      00090A E4               [12] 2961 	clr	a
      00090B B5 38 02         [24] 2962 	cjne	a,_drawCircle_x_65536_394,00124$
      00090E 05 39            [12] 2963 	inc	(_drawCircle_x_65536_394 + 1)
      000910                       2964 00124$:
                                   2965 ;	.\ecen4350_lcd_v4.c:500: ddF_x += 2;
      000910 74 02            [12] 2966 	mov	a,#0x02
      000912 25 36            [12] 2967 	add	a,_drawCircle_ddF_x_65536_394
      000914 F5 36            [12] 2968 	mov	_drawCircle_ddF_x_65536_394,a
      000916 E4               [12] 2969 	clr	a
      000917 35 37            [12] 2970 	addc	a,(_drawCircle_ddF_x_65536_394 + 1)
      000919 F5 37            [12] 2971 	mov	(_drawCircle_ddF_x_65536_394 + 1),a
                                   2972 ;	.\ecen4350_lcd_v4.c:501: f += ddF_x;
      00091B E5 36            [12] 2973 	mov	a,_drawCircle_ddF_x_65536_394
      00091D 25 34            [12] 2974 	add	a,_drawCircle_f_65536_394
      00091F F5 34            [12] 2975 	mov	_drawCircle_f_65536_394,a
      000921 E5 37            [12] 2976 	mov	a,(_drawCircle_ddF_x_65536_394 + 1)
      000923 35 35            [12] 2977 	addc	a,(_drawCircle_f_65536_394 + 1)
      000925 F5 35            [12] 2978 	mov	(_drawCircle_f_65536_394 + 1),a
                                   2979 ;	.\ecen4350_lcd_v4.c:503: drawPixel(x0 + x, y0 + y, color);
      000927 E5 38            [12] 2980 	mov	a,_drawCircle_x_65536_394
      000929 25 32            [12] 2981 	add	a,_drawCircle_x0_65536_393
      00092B FE               [12] 2982 	mov	r6,a
      00092C E5 39            [12] 2983 	mov	a,(_drawCircle_x_65536_394 + 1)
      00092E 35 33            [12] 2984 	addc	a,(_drawCircle_x0_65536_393 + 1)
      000930 FF               [12] 2985 	mov	r7,a
      000931 E8               [12] 2986 	mov	a,r0
      000932 25 2C            [12] 2987 	add	a,_drawCircle_PARM_2
      000934 FC               [12] 2988 	mov	r4,a
      000935 E9               [12] 2989 	mov	a,r1
      000936 35 2D            [12] 2990 	addc	a,(_drawCircle_PARM_2 + 1)
      000938 FD               [12] 2991 	mov	r5,a
      000939 8C 28            [24] 2992 	mov	_drawPixel_PARM_2,r4
      00093B 8D 29            [24] 2993 	mov	(_drawPixel_PARM_2 + 1),r5
      00093D 85 30 2A         [24] 2994 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000940 85 31 2B         [24] 2995 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000943 8E 82            [24] 2996 	mov	dpl,r6
      000945 8F 83            [24] 2997 	mov	dph,r7
      000947 C0 07            [24] 2998 	push	ar7
      000949 C0 06            [24] 2999 	push	ar6
      00094B C0 05            [24] 3000 	push	ar5
      00094D C0 04            [24] 3001 	push	ar4
      00094F C0 03            [24] 3002 	push	ar3
      000951 C0 02            [24] 3003 	push	ar2
      000953 C0 01            [24] 3004 	push	ar1
      000955 C0 00            [24] 3005 	push	ar0
      000957 12 07 C8         [24] 3006 	lcall	_drawPixel
      00095A D0 00            [24] 3007 	pop	ar0
      00095C D0 01            [24] 3008 	pop	ar1
      00095E D0 02            [24] 3009 	pop	ar2
      000960 D0 03            [24] 3010 	pop	ar3
      000962 D0 04            [24] 3011 	pop	ar4
      000964 D0 05            [24] 3012 	pop	ar5
                                   3013 ;	.\ecen4350_lcd_v4.c:504: drawPixel(x0 - x, y0 + y, color);
      000966 E5 32            [12] 3014 	mov	a,_drawCircle_x0_65536_393
      000968 C3               [12] 3015 	clr	c
      000969 95 38            [12] 3016 	subb	a,_drawCircle_x_65536_394
      00096B FA               [12] 3017 	mov	r2,a
      00096C E5 33            [12] 3018 	mov	a,(_drawCircle_x0_65536_393 + 1)
      00096E 95 39            [12] 3019 	subb	a,(_drawCircle_x_65536_394 + 1)
      000970 FB               [12] 3020 	mov	r3,a
      000971 8C 28            [24] 3021 	mov	_drawPixel_PARM_2,r4
      000973 8D 29            [24] 3022 	mov	(_drawPixel_PARM_2 + 1),r5
      000975 85 30 2A         [24] 3023 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000978 85 31 2B         [24] 3024 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00097B 8A 82            [24] 3025 	mov	dpl,r2
      00097D 8B 83            [24] 3026 	mov	dph,r3
      00097F C0 03            [24] 3027 	push	ar3
      000981 C0 02            [24] 3028 	push	ar2
      000983 C0 01            [24] 3029 	push	ar1
      000985 C0 00            [24] 3030 	push	ar0
      000987 12 07 C8         [24] 3031 	lcall	_drawPixel
      00098A D0 00            [24] 3032 	pop	ar0
      00098C D0 01            [24] 3033 	pop	ar1
      00098E D0 02            [24] 3034 	pop	ar2
      000990 D0 03            [24] 3035 	pop	ar3
      000992 D0 06            [24] 3036 	pop	ar6
      000994 D0 07            [24] 3037 	pop	ar7
                                   3038 ;	.\ecen4350_lcd_v4.c:505: drawPixel(x0 + x, y0 - y, color);
      000996 E5 2C            [12] 3039 	mov	a,_drawCircle_PARM_2
      000998 C3               [12] 3040 	clr	c
      000999 98               [12] 3041 	subb	a,r0
      00099A FC               [12] 3042 	mov	r4,a
      00099B E5 2D            [12] 3043 	mov	a,(_drawCircle_PARM_2 + 1)
      00099D 99               [12] 3044 	subb	a,r1
      00099E FD               [12] 3045 	mov	r5,a
      00099F 8C 28            [24] 3046 	mov	_drawPixel_PARM_2,r4
      0009A1 8D 29            [24] 3047 	mov	(_drawPixel_PARM_2 + 1),r5
      0009A3 85 30 2A         [24] 3048 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009A6 85 31 2B         [24] 3049 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009A9 8E 82            [24] 3050 	mov	dpl,r6
      0009AB 8F 83            [24] 3051 	mov	dph,r7
      0009AD C0 05            [24] 3052 	push	ar5
      0009AF C0 04            [24] 3053 	push	ar4
      0009B1 C0 03            [24] 3054 	push	ar3
      0009B3 C0 02            [24] 3055 	push	ar2
      0009B5 C0 01            [24] 3056 	push	ar1
      0009B7 C0 00            [24] 3057 	push	ar0
      0009B9 12 07 C8         [24] 3058 	lcall	_drawPixel
      0009BC D0 00            [24] 3059 	pop	ar0
      0009BE D0 01            [24] 3060 	pop	ar1
      0009C0 D0 02            [24] 3061 	pop	ar2
      0009C2 D0 03            [24] 3062 	pop	ar3
      0009C4 D0 04            [24] 3063 	pop	ar4
      0009C6 D0 05            [24] 3064 	pop	ar5
                                   3065 ;	.\ecen4350_lcd_v4.c:506: drawPixel(x0 - x, y0 - y, color);
      0009C8 8C 28            [24] 3066 	mov	_drawPixel_PARM_2,r4
      0009CA 8D 29            [24] 3067 	mov	(_drawPixel_PARM_2 + 1),r5
      0009CC 85 30 2A         [24] 3068 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0009CF 85 31 2B         [24] 3069 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0009D2 8A 82            [24] 3070 	mov	dpl,r2
      0009D4 8B 83            [24] 3071 	mov	dph,r3
      0009D6 C0 03            [24] 3072 	push	ar3
      0009D8 C0 02            [24] 3073 	push	ar2
      0009DA C0 01            [24] 3074 	push	ar1
      0009DC C0 00            [24] 3075 	push	ar0
      0009DE 12 07 C8         [24] 3076 	lcall	_drawPixel
      0009E1 D0 00            [24] 3077 	pop	ar0
      0009E3 D0 01            [24] 3078 	pop	ar1
      0009E5 D0 02            [24] 3079 	pop	ar2
      0009E7 D0 03            [24] 3080 	pop	ar3
                                   3081 ;	.\ecen4350_lcd_v4.c:507: drawPixel(x0 + y, y0 + x, color);
      0009E9 E8               [12] 3082 	mov	a,r0
      0009EA 25 32            [12] 3083 	add	a,_drawCircle_x0_65536_393
      0009EC FE               [12] 3084 	mov	r6,a
      0009ED E9               [12] 3085 	mov	a,r1
      0009EE 35 33            [12] 3086 	addc	a,(_drawCircle_x0_65536_393 + 1)
      0009F0 FF               [12] 3087 	mov	r7,a
      0009F1 E5 38            [12] 3088 	mov	a,_drawCircle_x_65536_394
      0009F3 25 2C            [12] 3089 	add	a,_drawCircle_PARM_2
      0009F5 FC               [12] 3090 	mov	r4,a
      0009F6 E5 39            [12] 3091 	mov	a,(_drawCircle_x_65536_394 + 1)
      0009F8 35 2D            [12] 3092 	addc	a,(_drawCircle_PARM_2 + 1)
      0009FA FD               [12] 3093 	mov	r5,a
      0009FB 8C 28            [24] 3094 	mov	_drawPixel_PARM_2,r4
      0009FD 8D 29            [24] 3095 	mov	(_drawPixel_PARM_2 + 1),r5
      0009FF 85 30 2A         [24] 3096 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A02 85 31 2B         [24] 3097 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A05 8E 82            [24] 3098 	mov	dpl,r6
      000A07 8F 83            [24] 3099 	mov	dph,r7
      000A09 C0 07            [24] 3100 	push	ar7
      000A0B C0 06            [24] 3101 	push	ar6
      000A0D C0 05            [24] 3102 	push	ar5
      000A0F C0 04            [24] 3103 	push	ar4
      000A11 C0 03            [24] 3104 	push	ar3
      000A13 C0 02            [24] 3105 	push	ar2
      000A15 C0 01            [24] 3106 	push	ar1
      000A17 C0 00            [24] 3107 	push	ar0
      000A19 12 07 C8         [24] 3108 	lcall	_drawPixel
      000A1C D0 00            [24] 3109 	pop	ar0
      000A1E D0 01            [24] 3110 	pop	ar1
      000A20 D0 02            [24] 3111 	pop	ar2
      000A22 D0 03            [24] 3112 	pop	ar3
      000A24 D0 04            [24] 3113 	pop	ar4
      000A26 D0 05            [24] 3114 	pop	ar5
                                   3115 ;	.\ecen4350_lcd_v4.c:508: drawPixel(x0 - y, y0 + x, color);
      000A28 E5 32            [12] 3116 	mov	a,_drawCircle_x0_65536_393
      000A2A C3               [12] 3117 	clr	c
      000A2B 98               [12] 3118 	subb	a,r0
      000A2C FA               [12] 3119 	mov	r2,a
      000A2D E5 33            [12] 3120 	mov	a,(_drawCircle_x0_65536_393 + 1)
      000A2F 99               [12] 3121 	subb	a,r1
      000A30 FB               [12] 3122 	mov	r3,a
      000A31 8C 28            [24] 3123 	mov	_drawPixel_PARM_2,r4
      000A33 8D 29            [24] 3124 	mov	(_drawPixel_PARM_2 + 1),r5
      000A35 85 30 2A         [24] 3125 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A38 85 31 2B         [24] 3126 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A3B 8A 82            [24] 3127 	mov	dpl,r2
      000A3D 8B 83            [24] 3128 	mov	dph,r3
      000A3F C0 03            [24] 3129 	push	ar3
      000A41 C0 02            [24] 3130 	push	ar2
      000A43 C0 01            [24] 3131 	push	ar1
      000A45 C0 00            [24] 3132 	push	ar0
      000A47 12 07 C8         [24] 3133 	lcall	_drawPixel
      000A4A D0 00            [24] 3134 	pop	ar0
      000A4C D0 01            [24] 3135 	pop	ar1
      000A4E D0 02            [24] 3136 	pop	ar2
      000A50 D0 03            [24] 3137 	pop	ar3
      000A52 D0 06            [24] 3138 	pop	ar6
      000A54 D0 07            [24] 3139 	pop	ar7
                                   3140 ;	.\ecen4350_lcd_v4.c:509: drawPixel(x0 + y, y0 - x, color);
      000A56 E5 2C            [12] 3141 	mov	a,_drawCircle_PARM_2
      000A58 C3               [12] 3142 	clr	c
      000A59 95 38            [12] 3143 	subb	a,_drawCircle_x_65536_394
      000A5B FC               [12] 3144 	mov	r4,a
      000A5C E5 2D            [12] 3145 	mov	a,(_drawCircle_PARM_2 + 1)
      000A5E 95 39            [12] 3146 	subb	a,(_drawCircle_x_65536_394 + 1)
      000A60 FD               [12] 3147 	mov	r5,a
      000A61 8C 28            [24] 3148 	mov	_drawPixel_PARM_2,r4
      000A63 8D 29            [24] 3149 	mov	(_drawPixel_PARM_2 + 1),r5
      000A65 85 30 2A         [24] 3150 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A68 85 31 2B         [24] 3151 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A6B 8E 82            [24] 3152 	mov	dpl,r6
      000A6D 8F 83            [24] 3153 	mov	dph,r7
      000A6F C0 05            [24] 3154 	push	ar5
      000A71 C0 04            [24] 3155 	push	ar4
      000A73 C0 03            [24] 3156 	push	ar3
      000A75 C0 02            [24] 3157 	push	ar2
      000A77 C0 01            [24] 3158 	push	ar1
      000A79 C0 00            [24] 3159 	push	ar0
      000A7B 12 07 C8         [24] 3160 	lcall	_drawPixel
      000A7E D0 00            [24] 3161 	pop	ar0
      000A80 D0 01            [24] 3162 	pop	ar1
      000A82 D0 02            [24] 3163 	pop	ar2
      000A84 D0 03            [24] 3164 	pop	ar3
      000A86 D0 04            [24] 3165 	pop	ar4
      000A88 D0 05            [24] 3166 	pop	ar5
                                   3167 ;	.\ecen4350_lcd_v4.c:510: drawPixel(x0 - y, y0 - x, color);
      000A8A 8C 28            [24] 3168 	mov	_drawPixel_PARM_2,r4
      000A8C 8D 29            [24] 3169 	mov	(_drawPixel_PARM_2 + 1),r5
      000A8E 85 30 2A         [24] 3170 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000A91 85 31 2B         [24] 3171 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000A94 8A 82            [24] 3172 	mov	dpl,r2
      000A96 8B 83            [24] 3173 	mov	dph,r3
      000A98 C0 03            [24] 3174 	push	ar3
      000A9A C0 02            [24] 3175 	push	ar2
      000A9C C0 01            [24] 3176 	push	ar1
      000A9E C0 00            [24] 3177 	push	ar0
      000AA0 12 07 C8         [24] 3178 	lcall	_drawPixel
      000AA3 D0 00            [24] 3179 	pop	ar0
      000AA5 D0 01            [24] 3180 	pop	ar1
      000AA7 D0 02            [24] 3181 	pop	ar2
      000AA9 D0 03            [24] 3182 	pop	ar3
      000AAB D0 03            [24] 3183 	pop	ar3
      000AAD D0 02            [24] 3184 	pop	ar2
                                   3185 ;	.\ecen4350_lcd_v4.c:512: }
      000AAF 02 08 D7         [24] 3186 	ljmp	00103$
                                   3187 ;------------------------------------------------------------
                                   3188 ;Allocation info for local variables in function 'testCircles'
                                   3189 ;------------------------------------------------------------
                                   3190 ;color                     Allocated with name '_testCircles_PARM_2'
                                   3191 ;radius                    Allocated to registers r7 
                                   3192 ;x                         Allocated to registers r0 r1 
                                   3193 ;y                         Allocated to registers r2 r3 
                                   3194 ;r2                        Allocated to registers r4 r5 
                                   3195 ;w                         Allocated with name '_testCircles_w_65536_398'
                                   3196 ;h                         Allocated with name '_testCircles_h_65536_398'
                                   3197 ;------------------------------------------------------------
                                   3198 ;	.\ecen4350_lcd_v4.c:514: void testCircles(u8 radius, u16 color)
                                   3199 ;	-----------------------------------------
                                   3200 ;	 function testCircles
                                   3201 ;	-----------------------------------------
      000AB2                       3202 _testCircles:
                                   3203 ;	.\ecen4350_lcd_v4.c:517: int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
      000AB2 AE 82            [24] 3204 	mov	r6,dpl
      000AB4 7F 00            [12] 3205 	mov	r7,#0x00
      000AB6 EE               [12] 3206 	mov	a,r6
      000AB7 2E               [12] 3207 	add	a,r6
      000AB8 FC               [12] 3208 	mov	r4,a
      000AB9 EF               [12] 3209 	mov	a,r7
      000ABA 33               [12] 3210 	rlc	a
      000ABB FD               [12] 3211 	mov	r5,a
      000ABC 8E 02            [24] 3212 	mov	ar2,r6
      000ABE 8F 03            [24] 3213 	mov	ar3,r7
      000AC0 EA               [12] 3214 	mov	a,r2
      000AC1 25 1A            [12] 3215 	add	a,__width
      000AC3 F5 3C            [12] 3216 	mov	_testCircles_w_65536_398,a
      000AC5 EB               [12] 3217 	mov	a,r3
      000AC6 35 1B            [12] 3218 	addc	a,(__width + 1)
      000AC8 F5 3D            [12] 3219 	mov	(_testCircles_w_65536_398 + 1),a
      000ACA EA               [12] 3220 	mov	a,r2
      000ACB 25 1C            [12] 3221 	add	a,__height
      000ACD F5 3E            [12] 3222 	mov	_testCircles_h_65536_398,a
      000ACF EB               [12] 3223 	mov	a,r3
      000AD0 35 1D            [12] 3224 	addc	a,(__height + 1)
      000AD2 F5 3F            [12] 3225 	mov	(_testCircles_h_65536_398 + 1),a
                                   3226 ;	.\ecen4350_lcd_v4.c:519: for (x = 0; x < w; x += r2)
      000AD4 78 00            [12] 3227 	mov	r0,#0x00
      000AD6 79 00            [12] 3228 	mov	r1,#0x00
      000AD8                       3229 00107$:
      000AD8 C3               [12] 3230 	clr	c
      000AD9 E8               [12] 3231 	mov	a,r0
      000ADA 95 3C            [12] 3232 	subb	a,_testCircles_w_65536_398
      000ADC E9               [12] 3233 	mov	a,r1
      000ADD 64 80            [12] 3234 	xrl	a,#0x80
      000ADF 85 3D F0         [24] 3235 	mov	b,(_testCircles_w_65536_398 + 1)
      000AE2 63 F0 80         [24] 3236 	xrl	b,#0x80
      000AE5 95 F0            [12] 3237 	subb	a,b
      000AE7 50 5A            [24] 3238 	jnc	00109$
                                   3239 ;	.\ecen4350_lcd_v4.c:521: for (y = 0; y < h; y += r2)
      000AE9 7A 00            [12] 3240 	mov	r2,#0x00
      000AEB 7B 00            [12] 3241 	mov	r3,#0x00
      000AED                       3242 00104$:
      000AED C3               [12] 3243 	clr	c
      000AEE EA               [12] 3244 	mov	a,r2
      000AEF 95 3E            [12] 3245 	subb	a,_testCircles_h_65536_398
      000AF1 EB               [12] 3246 	mov	a,r3
      000AF2 64 80            [12] 3247 	xrl	a,#0x80
      000AF4 85 3F F0         [24] 3248 	mov	b,(_testCircles_h_65536_398 + 1)
      000AF7 63 F0 80         [24] 3249 	xrl	b,#0x80
      000AFA 95 F0            [12] 3250 	subb	a,b
      000AFC 50 3D            [24] 3251 	jnc	00108$
                                   3252 ;	.\ecen4350_lcd_v4.c:523: drawCircle(x, y, radius, color);
      000AFE 8A 2C            [24] 3253 	mov	_drawCircle_PARM_2,r2
      000B00 8B 2D            [24] 3254 	mov	(_drawCircle_PARM_2 + 1),r3
      000B02 8E 2E            [24] 3255 	mov	_drawCircle_PARM_3,r6
      000B04 8F 2F            [24] 3256 	mov	(_drawCircle_PARM_3 + 1),r7
      000B06 85 3A 30         [24] 3257 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000B09 85 3B 31         [24] 3258 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000B0C 88 82            [24] 3259 	mov	dpl,r0
      000B0E 89 83            [24] 3260 	mov	dph,r1
      000B10 C0 07            [24] 3261 	push	ar7
      000B12 C0 06            [24] 3262 	push	ar6
      000B14 C0 05            [24] 3263 	push	ar5
      000B16 C0 04            [24] 3264 	push	ar4
      000B18 C0 03            [24] 3265 	push	ar3
      000B1A C0 02            [24] 3266 	push	ar2
      000B1C C0 01            [24] 3267 	push	ar1
      000B1E C0 00            [24] 3268 	push	ar0
      000B20 12 08 19         [24] 3269 	lcall	_drawCircle
      000B23 D0 00            [24] 3270 	pop	ar0
      000B25 D0 01            [24] 3271 	pop	ar1
      000B27 D0 02            [24] 3272 	pop	ar2
      000B29 D0 03            [24] 3273 	pop	ar3
      000B2B D0 04            [24] 3274 	pop	ar4
      000B2D D0 05            [24] 3275 	pop	ar5
      000B2F D0 06            [24] 3276 	pop	ar6
      000B31 D0 07            [24] 3277 	pop	ar7
                                   3278 ;	.\ecen4350_lcd_v4.c:521: for (y = 0; y < h; y += r2)
      000B33 EC               [12] 3279 	mov	a,r4
      000B34 2A               [12] 3280 	add	a,r2
      000B35 FA               [12] 3281 	mov	r2,a
      000B36 ED               [12] 3282 	mov	a,r5
      000B37 3B               [12] 3283 	addc	a,r3
      000B38 FB               [12] 3284 	mov	r3,a
      000B39 80 B2            [24] 3285 	sjmp	00104$
      000B3B                       3286 00108$:
                                   3287 ;	.\ecen4350_lcd_v4.c:519: for (x = 0; x < w; x += r2)
      000B3B EC               [12] 3288 	mov	a,r4
      000B3C 28               [12] 3289 	add	a,r0
      000B3D F8               [12] 3290 	mov	r0,a
      000B3E ED               [12] 3291 	mov	a,r5
      000B3F 39               [12] 3292 	addc	a,r1
      000B40 F9               [12] 3293 	mov	r1,a
      000B41 80 95            [24] 3294 	sjmp	00107$
      000B43                       3295 00109$:
                                   3296 ;	.\ecen4350_lcd_v4.c:526: }
      000B43 22               [24] 3297 	ret
                                   3298 ;------------------------------------------------------------
                                   3299 ;Allocation info for local variables in function 'fillRect'
                                   3300 ;------------------------------------------------------------
                                   3301 ;y                         Allocated with name '_fillRect_PARM_2'
                                   3302 ;w                         Allocated with name '_fillRect_PARM_3'
                                   3303 ;h                         Allocated with name '_fillRect_PARM_4'
                                   3304 ;color                     Allocated with name '_fillRect_PARM_5'
                                   3305 ;x                         Allocated to registers 
                                   3306 ;------------------------------------------------------------
                                   3307 ;	.\ecen4350_lcd_v4.c:527: void fillRect(u16 x, u16 y, u16 w, u16 h, u16 color)
                                   3308 ;	-----------------------------------------
                                   3309 ;	 function fillRect
                                   3310 ;	-----------------------------------------
      000B44                       3311 _fillRect:
      000B44 AE 82            [24] 3312 	mov	r6,dpl
      000B46 AF 83            [24] 3313 	mov	r7,dph
                                   3314 ;	.\ecen4350_lcd_v4.c:529: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000B48 C3               [12] 3315 	clr	c
      000B49 EE               [12] 3316 	mov	a,r6
      000B4A 94 F0            [12] 3317 	subb	a,#0xf0
      000B4C EF               [12] 3318 	mov	a,r7
      000B4D 94 00            [12] 3319 	subb	a,#0x00
      000B4F 50 0B            [24] 3320 	jnc	00101$
      000B51 C3               [12] 3321 	clr	c
      000B52 E5 40            [12] 3322 	mov	a,_fillRect_PARM_2
      000B54 94 40            [12] 3323 	subb	a,#0x40
      000B56 E5 41            [12] 3324 	mov	a,(_fillRect_PARM_2 + 1)
      000B58 94 01            [12] 3325 	subb	a,#0x01
      000B5A 40 01            [24] 3326 	jc	00102$
      000B5C                       3327 00101$:
                                   3328 ;	.\ecen4350_lcd_v4.c:531: return;
      000B5C 22               [24] 3329 	ret
      000B5D                       3330 00102$:
                                   3331 ;	.\ecen4350_lcd_v4.c:534: if ((x + w - 1) >= TFTWIDTH)
      000B5D E5 42            [12] 3332 	mov	a,_fillRect_PARM_3
      000B5F 2E               [12] 3333 	add	a,r6
      000B60 FC               [12] 3334 	mov	r4,a
      000B61 E5 43            [12] 3335 	mov	a,(_fillRect_PARM_3 + 1)
      000B63 3F               [12] 3336 	addc	a,r7
      000B64 FD               [12] 3337 	mov	r5,a
      000B65 1C               [12] 3338 	dec	r4
      000B66 BC FF 01         [24] 3339 	cjne	r4,#0xff,00161$
      000B69 1D               [12] 3340 	dec	r5
      000B6A                       3341 00161$:
      000B6A C3               [12] 3342 	clr	c
      000B6B EC               [12] 3343 	mov	a,r4
      000B6C 94 F0            [12] 3344 	subb	a,#0xf0
      000B6E ED               [12] 3345 	mov	a,r5
      000B6F 94 00            [12] 3346 	subb	a,#0x00
      000B71 40 0A            [24] 3347 	jc	00105$
                                   3348 ;	.\ecen4350_lcd_v4.c:536: w = TFTWIDTH - x;
      000B73 74 F0            [12] 3349 	mov	a,#0xf0
      000B75 C3               [12] 3350 	clr	c
      000B76 9E               [12] 3351 	subb	a,r6
      000B77 F5 42            [12] 3352 	mov	_fillRect_PARM_3,a
      000B79 E4               [12] 3353 	clr	a
      000B7A 9F               [12] 3354 	subb	a,r7
      000B7B F5 43            [12] 3355 	mov	(_fillRect_PARM_3 + 1),a
      000B7D                       3356 00105$:
                                   3357 ;	.\ecen4350_lcd_v4.c:539: if ((y + h - 1) >= TFTHEIGHT)
      000B7D E5 44            [12] 3358 	mov	a,_fillRect_PARM_4
      000B7F 25 40            [12] 3359 	add	a,_fillRect_PARM_2
      000B81 FC               [12] 3360 	mov	r4,a
      000B82 E5 45            [12] 3361 	mov	a,(_fillRect_PARM_4 + 1)
      000B84 35 41            [12] 3362 	addc	a,(_fillRect_PARM_2 + 1)
      000B86 FD               [12] 3363 	mov	r5,a
      000B87 1C               [12] 3364 	dec	r4
      000B88 BC FF 01         [24] 3365 	cjne	r4,#0xff,00163$
      000B8B 1D               [12] 3366 	dec	r5
      000B8C                       3367 00163$:
      000B8C C3               [12] 3368 	clr	c
      000B8D EC               [12] 3369 	mov	a,r4
      000B8E 94 40            [12] 3370 	subb	a,#0x40
      000B90 ED               [12] 3371 	mov	a,r5
      000B91 94 01            [12] 3372 	subb	a,#0x01
      000B93 40 0D            [24] 3373 	jc	00107$
                                   3374 ;	.\ecen4350_lcd_v4.c:541: h = TFTHEIGHT - y;
      000B95 74 40            [12] 3375 	mov	a,#0x40
      000B97 C3               [12] 3376 	clr	c
      000B98 95 40            [12] 3377 	subb	a,_fillRect_PARM_2
      000B9A F5 44            [12] 3378 	mov	_fillRect_PARM_4,a
      000B9C 74 01            [12] 3379 	mov	a,#0x01
      000B9E 95 41            [12] 3380 	subb	a,(_fillRect_PARM_2 + 1)
      000BA0 F5 45            [12] 3381 	mov	(_fillRect_PARM_4 + 1),a
      000BA2                       3382 00107$:
                                   3383 ;	.\ecen4350_lcd_v4.c:544: setAddress(x, y, x + w - 1, y + h - 1);
      000BA2 E5 42            [12] 3384 	mov	a,_fillRect_PARM_3
      000BA4 2E               [12] 3385 	add	a,r6
      000BA5 FC               [12] 3386 	mov	r4,a
      000BA6 E5 43            [12] 3387 	mov	a,(_fillRect_PARM_3 + 1)
      000BA8 3F               [12] 3388 	addc	a,r7
      000BA9 FD               [12] 3389 	mov	r5,a
      000BAA EC               [12] 3390 	mov	a,r4
      000BAB 24 FF            [12] 3391 	add	a,#0xff
      000BAD F5 6D            [12] 3392 	mov	_setAddress_PARM_3,a
      000BAF ED               [12] 3393 	mov	a,r5
      000BB0 34 FF            [12] 3394 	addc	a,#0xff
      000BB2 F5 6E            [12] 3395 	mov	(_setAddress_PARM_3 + 1),a
      000BB4 E5 44            [12] 3396 	mov	a,_fillRect_PARM_4
      000BB6 25 40            [12] 3397 	add	a,_fillRect_PARM_2
      000BB8 FC               [12] 3398 	mov	r4,a
      000BB9 E5 45            [12] 3399 	mov	a,(_fillRect_PARM_4 + 1)
      000BBB 35 41            [12] 3400 	addc	a,(_fillRect_PARM_2 + 1)
      000BBD FD               [12] 3401 	mov	r5,a
      000BBE EC               [12] 3402 	mov	a,r4
      000BBF 24 FF            [12] 3403 	add	a,#0xff
      000BC1 F5 6F            [12] 3404 	mov	_setAddress_PARM_4,a
      000BC3 ED               [12] 3405 	mov	a,r5
      000BC4 34 FF            [12] 3406 	addc	a,#0xff
      000BC6 F5 70            [12] 3407 	mov	(_setAddress_PARM_4 + 1),a
      000BC8 85 40 6B         [24] 3408 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000BCB 85 41 6C         [24] 3409 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000BCE 8E 82            [24] 3410 	mov	dpl,r6
      000BD0 8F 83            [24] 3411 	mov	dph,r7
      000BD2 12 05 EE         [24] 3412 	lcall	_setAddress
                                   3413 ;	.\ecen4350_lcd_v4.c:547: write8Reg(0x2C);
                                   3414 ;	assignBit
      000BD5 C2 B4            [12] 3415 	clr	_P3_4
                                   3416 ;	assignBit
      000BD7 D2 B5            [12] 3417 	setb	_P3_5
      000BD9 85 0A 82         [24] 3418 	mov	dpl,_lcd_address
      000BDC 85 0B 83         [24] 3419 	mov	dph,(_lcd_address + 1)
      000BDF 74 2C            [12] 3420 	mov	a,#0x2c
      000BE1 F0               [24] 3421 	movx	@dptr,a
                                   3422 ;	assignBit
      000BE2 C2 B5            [12] 3423 	clr	_P3_5
                                   3424 ;	.\ecen4350_lcd_v4.c:549: CD = 1;
                                   3425 ;	assignBit
      000BE4 D2 B4            [12] 3426 	setb	_P3_4
                                   3427 ;	.\ecen4350_lcd_v4.c:550: for (y = h; y > 0; y--)
      000BE6 AF 47            [24] 3428 	mov	r7,(_fillRect_PARM_5 + 1)
      000BE8 AD 44            [24] 3429 	mov	r5,_fillRect_PARM_4
      000BEA AE 45            [24] 3430 	mov	r6,(_fillRect_PARM_4 + 1)
      000BEC                       3431 00114$:
      000BEC ED               [12] 3432 	mov	a,r5
      000BED 4E               [12] 3433 	orl	a,r6
      000BEE 60 30            [24] 3434 	jz	00116$
                                   3435 ;	.\ecen4350_lcd_v4.c:552: for (x = w; x > 0; x--)
      000BF0 AB 42            [24] 3436 	mov	r3,_fillRect_PARM_3
      000BF2 AC 43            [24] 3437 	mov	r4,(_fillRect_PARM_3 + 1)
      000BF4                       3438 00111$:
      000BF4 EB               [12] 3439 	mov	a,r3
      000BF5 4C               [12] 3440 	orl	a,r4
      000BF6 60 21            [24] 3441 	jz	00115$
                                   3442 ;	.\ecen4350_lcd_v4.c:555: write8(color >> 8);
                                   3443 ;	assignBit
      000BF8 D2 B5            [12] 3444 	setb	_P3_5
      000BFA 85 0A 82         [24] 3445 	mov	dpl,_lcd_address
      000BFD 85 0B 83         [24] 3446 	mov	dph,(_lcd_address + 1)
      000C00 EF               [12] 3447 	mov	a,r7
      000C01 F0               [24] 3448 	movx	@dptr,a
                                   3449 ;	assignBit
      000C02 C2 B5            [12] 3450 	clr	_P3_5
                                   3451 ;	.\ecen4350_lcd_v4.c:556: write8(color);
                                   3452 ;	assignBit
      000C04 D2 B5            [12] 3453 	setb	_P3_5
      000C06 85 0A 82         [24] 3454 	mov	dpl,_lcd_address
      000C09 85 0B 83         [24] 3455 	mov	dph,(_lcd_address + 1)
      000C0C E5 46            [12] 3456 	mov	a,_fillRect_PARM_5
      000C0E FA               [12] 3457 	mov	r2,a
      000C0F F0               [24] 3458 	movx	@dptr,a
                                   3459 ;	assignBit
      000C10 C2 B5            [12] 3460 	clr	_P3_5
                                   3461 ;	.\ecen4350_lcd_v4.c:552: for (x = w; x > 0; x--)
      000C12 1B               [12] 3462 	dec	r3
      000C13 BB FF 01         [24] 3463 	cjne	r3,#0xff,00167$
      000C16 1C               [12] 3464 	dec	r4
      000C17                       3465 00167$:
      000C17 80 DB            [24] 3466 	sjmp	00111$
      000C19                       3467 00115$:
                                   3468 ;	.\ecen4350_lcd_v4.c:550: for (y = h; y > 0; y--)
      000C19 1D               [12] 3469 	dec	r5
      000C1A BD FF 01         [24] 3470 	cjne	r5,#0xff,00168$
      000C1D 1E               [12] 3471 	dec	r6
      000C1E                       3472 00168$:
      000C1E 80 CC            [24] 3473 	sjmp	00114$
      000C20                       3474 00116$:
                                   3475 ;	.\ecen4350_lcd_v4.c:560: }
      000C20 22               [24] 3476 	ret
                                   3477 ;------------------------------------------------------------
                                   3478 ;Allocation info for local variables in function 'fillTop'
                                   3479 ;------------------------------------------------------------
                                   3480 ;Color                     Allocated to registers r6 r7 
                                   3481 ;len                       Allocated to registers 
                                   3482 ;blocks                    Allocated to registers r4 r7 
                                   3483 ;i                         Allocated to registers r3 
                                   3484 ;hi                        Allocated to registers r5 
                                   3485 ;lo                        Allocated to registers r6 
                                   3486 ;------------------------------------------------------------
                                   3487 ;	.\ecen4350_lcd_v4.c:562: void fillTop(unsigned int Color) {
                                   3488 ;	-----------------------------------------
                                   3489 ;	 function fillTop
                                   3490 ;	-----------------------------------------
      000C21                       3491 _fillTop:
      000C21 AE 82            [24] 3492 	mov	r6,dpl
      000C23 AF 83            [24] 3493 	mov	r7,dph
                                   3494 ;	.\ecen4350_lcd_v4.c:566: unsigned char i, hi = Color >> 8, 
      000C25 8F 05            [24] 3495 	mov	ar5,r7
                                   3496 ;	.\ecen4350_lcd_v4.c:567: lo = Color;
                                   3497 ;	.\ecen4350_lcd_v4.c:570: setAddress(0, 0, TFTWIDTH - 1, 39);
      000C27 E4               [12] 3498 	clr	a
      000C28 F5 6B            [12] 3499 	mov	_setAddress_PARM_2,a
      000C2A F5 6C            [12] 3500 	mov	(_setAddress_PARM_2 + 1),a
      000C2C 75 6D EF         [24] 3501 	mov	_setAddress_PARM_3,#0xef
                                   3502 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000C2F F5 6E            [12] 3503 	mov	(_setAddress_PARM_3 + 1),a
      000C31 75 6F 27         [24] 3504 	mov	_setAddress_PARM_4,#0x27
                                   3505 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      000C34 F5 70            [12] 3506 	mov	(_setAddress_PARM_4 + 1),a
      000C36 90 00 00         [24] 3507 	mov	dptr,#0x0000
      000C39 C0 06            [24] 3508 	push	ar6
      000C3B C0 05            [24] 3509 	push	ar5
      000C3D 12 05 EE         [24] 3510 	lcall	_setAddress
      000C40 D0 05            [24] 3511 	pop	ar5
      000C42 D0 06            [24] 3512 	pop	ar6
                                   3513 ;	.\ecen4350_lcd_v4.c:572: write8Reg(0x2C);
                                   3514 ;	assignBit
      000C44 C2 B4            [12] 3515 	clr	_P3_4
                                   3516 ;	assignBit
      000C46 D2 B5            [12] 3517 	setb	_P3_5
      000C48 85 0A 82         [24] 3518 	mov	dpl,_lcd_address
      000C4B 85 0B 83         [24] 3519 	mov	dph,(_lcd_address + 1)
      000C4E 74 2C            [12] 3520 	mov	a,#0x2c
      000C50 F0               [24] 3521 	movx	@dptr,a
                                   3522 ;	assignBit
      000C51 C2 B5            [12] 3523 	clr	_P3_5
                                   3524 ;	.\ecen4350_lcd_v4.c:574: CD = 1;
                                   3525 ;	assignBit
      000C53 D2 B4            [12] 3526 	setb	_P3_4
                                   3527 ;	.\ecen4350_lcd_v4.c:575: write8(hi);
                                   3528 ;	assignBit
      000C55 D2 B5            [12] 3529 	setb	_P3_5
      000C57 85 0A 82         [24] 3530 	mov	dpl,_lcd_address
      000C5A 85 0B 83         [24] 3531 	mov	dph,(_lcd_address + 1)
      000C5D ED               [12] 3532 	mov	a,r5
      000C5E F0               [24] 3533 	movx	@dptr,a
                                   3534 ;	assignBit
      000C5F C2 B5            [12] 3535 	clr	_P3_5
                                   3536 ;	.\ecen4350_lcd_v4.c:576: write8(lo);
                                   3537 ;	assignBit
      000C61 D2 B5            [12] 3538 	setb	_P3_5
      000C63 85 0A 82         [24] 3539 	mov	dpl,_lcd_address
      000C66 85 0B 83         [24] 3540 	mov	dph,(_lcd_address + 1)
      000C69 EE               [12] 3541 	mov	a,r6
      000C6A F0               [24] 3542 	movx	@dptr,a
                                   3543 ;	assignBit
      000C6B C2 B5            [12] 3544 	clr	_P3_5
                                   3545 ;	.\ecen4350_lcd_v4.c:579: while (blocks--)
      000C6D 7C 96            [12] 3546 	mov	r4,#0x96
      000C6F 7F 00            [12] 3547 	mov	r7,#0x00
      000C71                       3548 00104$:
      000C71 8C 02            [24] 3549 	mov	ar2,r4
      000C73 8F 03            [24] 3550 	mov	ar3,r7
      000C75 1C               [12] 3551 	dec	r4
      000C76 BC FF 01         [24] 3552 	cjne	r4,#0xff,00140$
      000C79 1F               [12] 3553 	dec	r7
      000C7A                       3554 00140$:
      000C7A EA               [12] 3555 	mov	a,r2
      000C7B 4B               [12] 3556 	orl	a,r3
      000C7C 60 66            [24] 3557 	jz	00106$
                                   3558 ;	.\ecen4350_lcd_v4.c:582: do
      000C7E 7B 10            [12] 3559 	mov	r3,#0x10
      000C80                       3560 00101$:
                                   3561 ;	.\ecen4350_lcd_v4.c:585: write8(hi);
                                   3562 ;	assignBit
      000C80 D2 B5            [12] 3563 	setb	_P3_5
      000C82 85 0A 82         [24] 3564 	mov	dpl,_lcd_address
      000C85 85 0B 83         [24] 3565 	mov	dph,(_lcd_address + 1)
      000C88 ED               [12] 3566 	mov	a,r5
      000C89 F0               [24] 3567 	movx	@dptr,a
                                   3568 ;	assignBit
      000C8A C2 B5            [12] 3569 	clr	_P3_5
                                   3570 ;	.\ecen4350_lcd_v4.c:586: write8(lo);
                                   3571 ;	assignBit
      000C8C D2 B5            [12] 3572 	setb	_P3_5
      000C8E 85 0A 82         [24] 3573 	mov	dpl,_lcd_address
      000C91 85 0B 83         [24] 3574 	mov	dph,(_lcd_address + 1)
      000C94 EE               [12] 3575 	mov	a,r6
      000C95 F0               [24] 3576 	movx	@dptr,a
                                   3577 ;	assignBit
      000C96 C2 B5            [12] 3578 	clr	_P3_5
                                   3579 ;	.\ecen4350_lcd_v4.c:587: write8(hi);
                                   3580 ;	assignBit
      000C98 D2 B5            [12] 3581 	setb	_P3_5
      000C9A 85 0A 82         [24] 3582 	mov	dpl,_lcd_address
      000C9D 85 0B 83         [24] 3583 	mov	dph,(_lcd_address + 1)
      000CA0 ED               [12] 3584 	mov	a,r5
      000CA1 F0               [24] 3585 	movx	@dptr,a
                                   3586 ;	assignBit
      000CA2 C2 B5            [12] 3587 	clr	_P3_5
                                   3588 ;	.\ecen4350_lcd_v4.c:588: write8(lo);
                                   3589 ;	assignBit
      000CA4 D2 B5            [12] 3590 	setb	_P3_5
      000CA6 85 0A 82         [24] 3591 	mov	dpl,_lcd_address
      000CA9 85 0B 83         [24] 3592 	mov	dph,(_lcd_address + 1)
      000CAC EE               [12] 3593 	mov	a,r6
      000CAD F0               [24] 3594 	movx	@dptr,a
                                   3595 ;	assignBit
      000CAE C2 B5            [12] 3596 	clr	_P3_5
                                   3597 ;	.\ecen4350_lcd_v4.c:589: write8(hi);
                                   3598 ;	assignBit
      000CB0 D2 B5            [12] 3599 	setb	_P3_5
      000CB2 85 0A 82         [24] 3600 	mov	dpl,_lcd_address
      000CB5 85 0B 83         [24] 3601 	mov	dph,(_lcd_address + 1)
      000CB8 ED               [12] 3602 	mov	a,r5
      000CB9 F0               [24] 3603 	movx	@dptr,a
                                   3604 ;	assignBit
      000CBA C2 B5            [12] 3605 	clr	_P3_5
                                   3606 ;	.\ecen4350_lcd_v4.c:590: write8(lo);
                                   3607 ;	assignBit
      000CBC D2 B5            [12] 3608 	setb	_P3_5
      000CBE 85 0A 82         [24] 3609 	mov	dpl,_lcd_address
      000CC1 85 0B 83         [24] 3610 	mov	dph,(_lcd_address + 1)
      000CC4 EE               [12] 3611 	mov	a,r6
      000CC5 F0               [24] 3612 	movx	@dptr,a
                                   3613 ;	assignBit
      000CC6 C2 B5            [12] 3614 	clr	_P3_5
                                   3615 ;	.\ecen4350_lcd_v4.c:591: write8(hi);
                                   3616 ;	assignBit
      000CC8 D2 B5            [12] 3617 	setb	_P3_5
      000CCA 85 0A 82         [24] 3618 	mov	dpl,_lcd_address
      000CCD 85 0B 83         [24] 3619 	mov	dph,(_lcd_address + 1)
      000CD0 ED               [12] 3620 	mov	a,r5
      000CD1 F0               [24] 3621 	movx	@dptr,a
                                   3622 ;	assignBit
      000CD2 C2 B5            [12] 3623 	clr	_P3_5
                                   3624 ;	.\ecen4350_lcd_v4.c:592: write8(lo);
                                   3625 ;	assignBit
      000CD4 D2 B5            [12] 3626 	setb	_P3_5
      000CD6 85 0A 82         [24] 3627 	mov	dpl,_lcd_address
      000CD9 85 0B 83         [24] 3628 	mov	dph,(_lcd_address + 1)
      000CDC EE               [12] 3629 	mov	a,r6
      000CDD F0               [24] 3630 	movx	@dptr,a
                                   3631 ;	assignBit
      000CDE C2 B5            [12] 3632 	clr	_P3_5
                                   3633 ;	.\ecen4350_lcd_v4.c:593: } while (--i);
      000CE0 DB 9E            [24] 3634 	djnz	r3,00101$
      000CE2 80 8D            [24] 3635 	sjmp	00104$
      000CE4                       3636 00106$:
                                   3637 ;	.\ecen4350_lcd_v4.c:595: for (i = (char)len & 63; i--;)
      000CE4 7F 3F            [12] 3638 	mov	r7,#0x3f
      000CE6                       3639 00109$:
      000CE6 8F 04            [24] 3640 	mov	ar4,r7
      000CE8 1F               [12] 3641 	dec	r7
      000CE9 EC               [12] 3642 	mov	a,r4
      000CEA 60 1A            [24] 3643 	jz	00111$
                                   3644 ;	.\ecen4350_lcd_v4.c:598: write8(hi);
                                   3645 ;	assignBit
      000CEC D2 B5            [12] 3646 	setb	_P3_5
      000CEE 85 0A 82         [24] 3647 	mov	dpl,_lcd_address
      000CF1 85 0B 83         [24] 3648 	mov	dph,(_lcd_address + 1)
      000CF4 ED               [12] 3649 	mov	a,r5
      000CF5 F0               [24] 3650 	movx	@dptr,a
                                   3651 ;	assignBit
      000CF6 C2 B5            [12] 3652 	clr	_P3_5
                                   3653 ;	.\ecen4350_lcd_v4.c:599: write8(lo);
                                   3654 ;	assignBit
      000CF8 D2 B5            [12] 3655 	setb	_P3_5
      000CFA 85 0A 82         [24] 3656 	mov	dpl,_lcd_address
      000CFD 85 0B 83         [24] 3657 	mov	dph,(_lcd_address + 1)
      000D00 EE               [12] 3658 	mov	a,r6
      000D01 F0               [24] 3659 	movx	@dptr,a
                                   3660 ;	assignBit
      000D02 C2 B5            [12] 3661 	clr	_P3_5
      000D04 80 E0            [24] 3662 	sjmp	00109$
      000D06                       3663 00111$:
                                   3664 ;	.\ecen4350_lcd_v4.c:603: }
      000D06 22               [24] 3665 	ret
                                   3666 ;------------------------------------------------------------
                                   3667 ;Allocation info for local variables in function 'fillScreen'
                                   3668 ;------------------------------------------------------------
                                   3669 ;Color                     Allocated to registers r6 r7 
                                   3670 ;len                       Allocated to registers 
                                   3671 ;blocks                    Allocated to registers r4 r7 
                                   3672 ;i                         Allocated to registers r3 
                                   3673 ;hi                        Allocated to registers r5 
                                   3674 ;lo                        Allocated to registers r6 
                                   3675 ;------------------------------------------------------------
                                   3676 ;	.\ecen4350_lcd_v4.c:605: void fillScreen(unsigned int Color)
                                   3677 ;	-----------------------------------------
                                   3678 ;	 function fillScreen
                                   3679 ;	-----------------------------------------
      000D07                       3680 _fillScreen:
      000D07 AE 82            [24] 3681 	mov	r6,dpl
      000D09 AF 83            [24] 3682 	mov	r7,dph
                                   3683 ;	.\ecen4350_lcd_v4.c:612: unsigned char i, hi = Color >> 8,
      000D0B 8F 05            [24] 3684 	mov	ar5,r7
                                   3685 ;	.\ecen4350_lcd_v4.c:613: lo = Color;
                                   3686 ;	.\ecen4350_lcd_v4.c:616: setAddress(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
      000D0D E4               [12] 3687 	clr	a
      000D0E F5 6B            [12] 3688 	mov	_setAddress_PARM_2,a
      000D10 F5 6C            [12] 3689 	mov	(_setAddress_PARM_2 + 1),a
      000D12 75 6D EF         [24] 3690 	mov	_setAddress_PARM_3,#0xef
                                   3691 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000D15 F5 6E            [12] 3692 	mov	(_setAddress_PARM_3 + 1),a
      000D17 75 6F 3F         [24] 3693 	mov	_setAddress_PARM_4,#0x3f
      000D1A 75 70 01         [24] 3694 	mov	(_setAddress_PARM_4 + 1),#0x01
      000D1D 90 00 00         [24] 3695 	mov	dptr,#0x0000
      000D20 C0 06            [24] 3696 	push	ar6
      000D22 C0 05            [24] 3697 	push	ar5
      000D24 12 05 EE         [24] 3698 	lcall	_setAddress
      000D27 D0 05            [24] 3699 	pop	ar5
      000D29 D0 06            [24] 3700 	pop	ar6
                                   3701 ;	.\ecen4350_lcd_v4.c:620: write8Reg(0x2C);
                                   3702 ;	assignBit
      000D2B C2 B4            [12] 3703 	clr	_P3_4
                                   3704 ;	assignBit
      000D2D D2 B5            [12] 3705 	setb	_P3_5
      000D2F 85 0A 82         [24] 3706 	mov	dpl,_lcd_address
      000D32 85 0B 83         [24] 3707 	mov	dph,(_lcd_address + 1)
      000D35 74 2C            [12] 3708 	mov	a,#0x2c
      000D37 F0               [24] 3709 	movx	@dptr,a
                                   3710 ;	assignBit
      000D38 C2 B5            [12] 3711 	clr	_P3_5
                                   3712 ;	.\ecen4350_lcd_v4.c:622: CD = 1;
                                   3713 ;	assignBit
      000D3A D2 B4            [12] 3714 	setb	_P3_4
                                   3715 ;	.\ecen4350_lcd_v4.c:623: write8(hi);
                                   3716 ;	assignBit
      000D3C D2 B5            [12] 3717 	setb	_P3_5
      000D3E 85 0A 82         [24] 3718 	mov	dpl,_lcd_address
      000D41 85 0B 83         [24] 3719 	mov	dph,(_lcd_address + 1)
      000D44 ED               [12] 3720 	mov	a,r5
      000D45 F0               [24] 3721 	movx	@dptr,a
                                   3722 ;	assignBit
      000D46 C2 B5            [12] 3723 	clr	_P3_5
                                   3724 ;	.\ecen4350_lcd_v4.c:624: write8(lo);
                                   3725 ;	assignBit
      000D48 D2 B5            [12] 3726 	setb	_P3_5
      000D4A 85 0A 82         [24] 3727 	mov	dpl,_lcd_address
      000D4D 85 0B 83         [24] 3728 	mov	dph,(_lcd_address + 1)
      000D50 EE               [12] 3729 	mov	a,r6
      000D51 F0               [24] 3730 	movx	@dptr,a
                                   3731 ;	assignBit
      000D52 C2 B5            [12] 3732 	clr	_P3_5
                                   3733 ;	.\ecen4350_lcd_v4.c:627: while (blocks--)
      000D54 7C B0            [12] 3734 	mov	r4,#0xb0
      000D56 7F 04            [12] 3735 	mov	r7,#0x04
      000D58                       3736 00104$:
      000D58 8C 02            [24] 3737 	mov	ar2,r4
      000D5A 8F 03            [24] 3738 	mov	ar3,r7
      000D5C 1C               [12] 3739 	dec	r4
      000D5D BC FF 01         [24] 3740 	cjne	r4,#0xff,00140$
      000D60 1F               [12] 3741 	dec	r7
      000D61                       3742 00140$:
      000D61 EA               [12] 3743 	mov	a,r2
      000D62 4B               [12] 3744 	orl	a,r3
      000D63 60 66            [24] 3745 	jz	00106$
                                   3746 ;	.\ecen4350_lcd_v4.c:630: do
      000D65 7B 10            [12] 3747 	mov	r3,#0x10
      000D67                       3748 00101$:
                                   3749 ;	.\ecen4350_lcd_v4.c:633: write8(hi);
                                   3750 ;	assignBit
      000D67 D2 B5            [12] 3751 	setb	_P3_5
      000D69 85 0A 82         [24] 3752 	mov	dpl,_lcd_address
      000D6C 85 0B 83         [24] 3753 	mov	dph,(_lcd_address + 1)
      000D6F ED               [12] 3754 	mov	a,r5
      000D70 F0               [24] 3755 	movx	@dptr,a
                                   3756 ;	assignBit
      000D71 C2 B5            [12] 3757 	clr	_P3_5
                                   3758 ;	.\ecen4350_lcd_v4.c:634: write8(lo);
                                   3759 ;	assignBit
      000D73 D2 B5            [12] 3760 	setb	_P3_5
      000D75 85 0A 82         [24] 3761 	mov	dpl,_lcd_address
      000D78 85 0B 83         [24] 3762 	mov	dph,(_lcd_address + 1)
      000D7B EE               [12] 3763 	mov	a,r6
      000D7C F0               [24] 3764 	movx	@dptr,a
                                   3765 ;	assignBit
      000D7D C2 B5            [12] 3766 	clr	_P3_5
                                   3767 ;	.\ecen4350_lcd_v4.c:635: write8(hi);
                                   3768 ;	assignBit
      000D7F D2 B5            [12] 3769 	setb	_P3_5
      000D81 85 0A 82         [24] 3770 	mov	dpl,_lcd_address
      000D84 85 0B 83         [24] 3771 	mov	dph,(_lcd_address + 1)
      000D87 ED               [12] 3772 	mov	a,r5
      000D88 F0               [24] 3773 	movx	@dptr,a
                                   3774 ;	assignBit
      000D89 C2 B5            [12] 3775 	clr	_P3_5
                                   3776 ;	.\ecen4350_lcd_v4.c:636: write8(lo);
                                   3777 ;	assignBit
      000D8B D2 B5            [12] 3778 	setb	_P3_5
      000D8D 85 0A 82         [24] 3779 	mov	dpl,_lcd_address
      000D90 85 0B 83         [24] 3780 	mov	dph,(_lcd_address + 1)
      000D93 EE               [12] 3781 	mov	a,r6
      000D94 F0               [24] 3782 	movx	@dptr,a
                                   3783 ;	assignBit
      000D95 C2 B5            [12] 3784 	clr	_P3_5
                                   3785 ;	.\ecen4350_lcd_v4.c:637: write8(hi);
                                   3786 ;	assignBit
      000D97 D2 B5            [12] 3787 	setb	_P3_5
      000D99 85 0A 82         [24] 3788 	mov	dpl,_lcd_address
      000D9C 85 0B 83         [24] 3789 	mov	dph,(_lcd_address + 1)
      000D9F ED               [12] 3790 	mov	a,r5
      000DA0 F0               [24] 3791 	movx	@dptr,a
                                   3792 ;	assignBit
      000DA1 C2 B5            [12] 3793 	clr	_P3_5
                                   3794 ;	.\ecen4350_lcd_v4.c:638: write8(lo);
                                   3795 ;	assignBit
      000DA3 D2 B5            [12] 3796 	setb	_P3_5
      000DA5 85 0A 82         [24] 3797 	mov	dpl,_lcd_address
      000DA8 85 0B 83         [24] 3798 	mov	dph,(_lcd_address + 1)
      000DAB EE               [12] 3799 	mov	a,r6
      000DAC F0               [24] 3800 	movx	@dptr,a
                                   3801 ;	assignBit
      000DAD C2 B5            [12] 3802 	clr	_P3_5
                                   3803 ;	.\ecen4350_lcd_v4.c:639: write8(hi);
                                   3804 ;	assignBit
      000DAF D2 B5            [12] 3805 	setb	_P3_5
      000DB1 85 0A 82         [24] 3806 	mov	dpl,_lcd_address
      000DB4 85 0B 83         [24] 3807 	mov	dph,(_lcd_address + 1)
      000DB7 ED               [12] 3808 	mov	a,r5
      000DB8 F0               [24] 3809 	movx	@dptr,a
                                   3810 ;	assignBit
      000DB9 C2 B5            [12] 3811 	clr	_P3_5
                                   3812 ;	.\ecen4350_lcd_v4.c:640: write8(lo);
                                   3813 ;	assignBit
      000DBB D2 B5            [12] 3814 	setb	_P3_5
      000DBD 85 0A 82         [24] 3815 	mov	dpl,_lcd_address
      000DC0 85 0B 83         [24] 3816 	mov	dph,(_lcd_address + 1)
      000DC3 EE               [12] 3817 	mov	a,r6
      000DC4 F0               [24] 3818 	movx	@dptr,a
                                   3819 ;	assignBit
      000DC5 C2 B5            [12] 3820 	clr	_P3_5
                                   3821 ;	.\ecen4350_lcd_v4.c:641: } while (--i);
      000DC7 DB 9E            [24] 3822 	djnz	r3,00101$
      000DC9 80 8D            [24] 3823 	sjmp	00104$
      000DCB                       3824 00106$:
                                   3825 ;	.\ecen4350_lcd_v4.c:643: for (i = (char)len & 63; i--;)
      000DCB 7F 3F            [12] 3826 	mov	r7,#0x3f
      000DCD                       3827 00109$:
      000DCD 8F 04            [24] 3828 	mov	ar4,r7
      000DCF 1F               [12] 3829 	dec	r7
      000DD0 EC               [12] 3830 	mov	a,r4
      000DD1 60 1A            [24] 3831 	jz	00111$
                                   3832 ;	.\ecen4350_lcd_v4.c:646: write8(hi);
                                   3833 ;	assignBit
      000DD3 D2 B5            [12] 3834 	setb	_P3_5
      000DD5 85 0A 82         [24] 3835 	mov	dpl,_lcd_address
      000DD8 85 0B 83         [24] 3836 	mov	dph,(_lcd_address + 1)
      000DDB ED               [12] 3837 	mov	a,r5
      000DDC F0               [24] 3838 	movx	@dptr,a
                                   3839 ;	assignBit
      000DDD C2 B5            [12] 3840 	clr	_P3_5
                                   3841 ;	.\ecen4350_lcd_v4.c:647: write8(lo);
                                   3842 ;	assignBit
      000DDF D2 B5            [12] 3843 	setb	_P3_5
      000DE1 85 0A 82         [24] 3844 	mov	dpl,_lcd_address
      000DE4 85 0B 83         [24] 3845 	mov	dph,(_lcd_address + 1)
      000DE7 EE               [12] 3846 	mov	a,r6
      000DE8 F0               [24] 3847 	movx	@dptr,a
                                   3848 ;	assignBit
      000DE9 C2 B5            [12] 3849 	clr	_P3_5
      000DEB 80 E0            [24] 3850 	sjmp	00109$
      000DED                       3851 00111$:
                                   3852 ;	.\ecen4350_lcd_v4.c:651: }
      000DED 22               [24] 3853 	ret
                                   3854 ;------------------------------------------------------------
                                   3855 ;Allocation info for local variables in function 'clearLCD'
                                   3856 ;------------------------------------------------------------
                                   3857 ;	.\ecen4350_lcd_v4.c:653: void clearLCD (void)
                                   3858 ;	-----------------------------------------
                                   3859 ;	 function clearLCD
                                   3860 ;	-----------------------------------------
      000DEE                       3861 _clearLCD:
                                   3862 ;	.\ecen4350_lcd_v4.c:655: fillScreen(colorBackground);
      000DEE 90 00 00         [24] 3863 	mov	dptr,#0x0000
                                   3864 ;	.\ecen4350_lcd_v4.c:656: }
      000DF1 02 0D 07         [24] 3865 	ljmp	_fillScreen
                                   3866 ;------------------------------------------------------------
                                   3867 ;Allocation info for local variables in function 'drawChar'
                                   3868 ;------------------------------------------------------------
                                   3869 ;y                         Allocated with name '_drawChar_PARM_2'
                                   3870 ;c                         Allocated with name '_drawChar_PARM_3'
                                   3871 ;color                     Allocated with name '_drawChar_PARM_4'
                                   3872 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   3873 ;size                      Allocated with name '_drawChar_PARM_6'
                                   3874 ;x                         Allocated with name '_drawChar_x_65536_458'
                                   3875 ;i                         Allocated with name '_drawChar_i_131072_461'
                                   3876 ;line                      Allocated with name '_drawChar_line_196608_462'
                                   3877 ;j                         Allocated to registers r0 
                                   3878 ;sloc0                     Allocated with name '_drawChar_sloc0_1_0'
                                   3879 ;------------------------------------------------------------
                                   3880 ;	.\ecen4350_lcd_v4.c:657: void drawChar(int x, int y, unsigned char c, u16 color, u16 bg, u8 size)
                                   3881 ;	-----------------------------------------
                                   3882 ;	 function drawChar
                                   3883 ;	-----------------------------------------
      000DF4                       3884 _drawChar:
      000DF4 85 82 50         [24] 3885 	mov	_drawChar_x_65536_458,dpl
      000DF7 85 83 51         [24] 3886 	mov	(_drawChar_x_65536_458 + 1),dph
                                   3887 ;	.\ecen4350_lcd_v4.c:659: if ((x >= TFTWIDTH) ||			// Clip right
      000DFA C3               [12] 3888 	clr	c
      000DFB E5 50            [12] 3889 	mov	a,_drawChar_x_65536_458
      000DFD 94 F0            [12] 3890 	subb	a,#0xf0
      000DFF E5 51            [12] 3891 	mov	a,(_drawChar_x_65536_458 + 1)
      000E01 64 80            [12] 3892 	xrl	a,#0x80
      000E03 94 80            [12] 3893 	subb	a,#0x80
      000E05 50 59            [24] 3894 	jnc	00101$
                                   3895 ;	.\ecen4350_lcd_v4.c:660: (y >= TFTHEIGHT) ||			// Clip bottom
      000E07 C3               [12] 3896 	clr	c
      000E08 E5 48            [12] 3897 	mov	a,_drawChar_PARM_2
      000E0A 94 40            [12] 3898 	subb	a,#0x40
      000E0C E5 49            [12] 3899 	mov	a,(_drawChar_PARM_2 + 1)
      000E0E 64 80            [12] 3900 	xrl	a,#0x80
      000E10 94 81            [12] 3901 	subb	a,#0x81
      000E12 50 4C            [24] 3902 	jnc	00101$
                                   3903 ;	.\ecen4350_lcd_v4.c:661: ((x + 6 * size - 1) < 0) || // Clip left
      000E14 AC 4F            [24] 3904 	mov	r4,_drawChar_PARM_6
      000E16 7D 00            [12] 3905 	mov	r5,#0x00
      000E18 8C 6B            [24] 3906 	mov	__mulint_PARM_2,r4
      000E1A 8D 6C            [24] 3907 	mov	(__mulint_PARM_2 + 1),r5
      000E1C 90 00 06         [24] 3908 	mov	dptr,#0x0006
      000E1F C0 05            [24] 3909 	push	ar5
      000E21 C0 04            [24] 3910 	push	ar4
      000E23 12 57 6C         [24] 3911 	lcall	__mulint
      000E26 AA 82            [24] 3912 	mov	r2,dpl
      000E28 AB 83            [24] 3913 	mov	r3,dph
      000E2A D0 04            [24] 3914 	pop	ar4
      000E2C D0 05            [24] 3915 	pop	ar5
      000E2E EA               [12] 3916 	mov	a,r2
      000E2F 25 50            [12] 3917 	add	a,_drawChar_x_65536_458
      000E31 FA               [12] 3918 	mov	r2,a
      000E32 EB               [12] 3919 	mov	a,r3
      000E33 35 51            [12] 3920 	addc	a,(_drawChar_x_65536_458 + 1)
      000E35 FB               [12] 3921 	mov	r3,a
      000E36 1A               [12] 3922 	dec	r2
      000E37 BA FF 01         [24] 3923 	cjne	r2,#0xff,00182$
      000E3A 1B               [12] 3924 	dec	r3
      000E3B                       3925 00182$:
      000E3B EB               [12] 3926 	mov	a,r3
      000E3C 20 E7 21         [24] 3927 	jb	acc.7,00101$
                                   3928 ;	.\ecen4350_lcd_v4.c:662: ((y + 8 * size - 1) < 0))	// Clip top
      000E3F ED               [12] 3929 	mov	a,r5
      000E40 C4               [12] 3930 	swap	a
      000E41 03               [12] 3931 	rr	a
      000E42 54 F8            [12] 3932 	anl	a,#0xf8
      000E44 CC               [12] 3933 	xch	a,r4
      000E45 C4               [12] 3934 	swap	a
      000E46 03               [12] 3935 	rr	a
      000E47 CC               [12] 3936 	xch	a,r4
      000E48 6C               [12] 3937 	xrl	a,r4
      000E49 CC               [12] 3938 	xch	a,r4
      000E4A 54 F8            [12] 3939 	anl	a,#0xf8
      000E4C CC               [12] 3940 	xch	a,r4
      000E4D 6C               [12] 3941 	xrl	a,r4
      000E4E FD               [12] 3942 	mov	r5,a
      000E4F EC               [12] 3943 	mov	a,r4
      000E50 25 48            [12] 3944 	add	a,_drawChar_PARM_2
      000E52 FC               [12] 3945 	mov	r4,a
      000E53 ED               [12] 3946 	mov	a,r5
      000E54 35 49            [12] 3947 	addc	a,(_drawChar_PARM_2 + 1)
      000E56 FD               [12] 3948 	mov	r5,a
      000E57 1C               [12] 3949 	dec	r4
      000E58 BC FF 01         [24] 3950 	cjne	r4,#0xff,00184$
      000E5B 1D               [12] 3951 	dec	r5
      000E5C                       3952 00184$:
      000E5C ED               [12] 3953 	mov	a,r5
      000E5D 30 E7 01         [24] 3954 	jnb	acc.7,00141$
      000E60                       3955 00101$:
                                   3956 ;	.\ecen4350_lcd_v4.c:664: return;
      000E60 22               [24] 3957 	ret
                                   3958 ;	.\ecen4350_lcd_v4.c:667: for (char i = 0; i < 6; i++)
      000E61                       3959 00141$:
      000E61 74 01            [12] 3960 	mov	a,#0x01
      000E63 B5 4F 04         [24] 3961 	cjne	a,_drawChar_PARM_6,00186$
      000E66 74 01            [12] 3962 	mov	a,#0x01
      000E68 80 01            [24] 3963 	sjmp	00187$
      000E6A                       3964 00186$:
      000E6A E4               [12] 3965 	clr	a
      000E6B                       3966 00187$:
      000E6B FD               [12] 3967 	mov	r5,a
      000E6C FC               [12] 3968 	mov	r4,a
      000E6D E5 4B            [12] 3969 	mov	a,_drawChar_PARM_4
      000E6F B5 4D 09         [24] 3970 	cjne	a,_drawChar_PARM_5,00188$
      000E72 E5 4C            [12] 3971 	mov	a,(_drawChar_PARM_4 + 1)
      000E74 B5 4E 04         [24] 3972 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000E77 74 01            [12] 3973 	mov	a,#0x01
      000E79 80 01            [24] 3974 	sjmp	00189$
      000E7B                       3975 00188$:
      000E7B E4               [12] 3976 	clr	a
      000E7C                       3977 00189$:
      000E7C FB               [12] 3978 	mov	r3,a
      000E7D 75 52 00         [24] 3979 	mov	_drawChar_i_131072_461,#0x00
      000E80                       3980 00126$:
      000E80 74 FA            [12] 3981 	mov	a,#0x100 - 0x06
      000E82 25 52            [12] 3982 	add	a,_drawChar_i_131072_461
      000E84 50 01            [24] 3983 	jnc	00190$
      000E86 22               [24] 3984 	ret
      000E87                       3985 00190$:
                                   3986 ;	.\ecen4350_lcd_v4.c:671: if (i == 5)
      000E87 74 05            [12] 3987 	mov	a,#0x05
      000E89 B5 52 05         [24] 3988 	cjne	a,_drawChar_i_131072_461,00107$
                                   3989 ;	.\ecen4350_lcd_v4.c:673: line = 0x0;
      000E8C 75 53 00         [24] 3990 	mov	_drawChar_line_196608_462,#0x00
      000E8F 80 31            [24] 3991 	sjmp	00140$
      000E91                       3992 00107$:
                                   3993 ;	.\ecen4350_lcd_v4.c:677: line = pgm_read_byte(font + (c * 5) + i);
      000E91 85 4A 6B         [24] 3994 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000E94 75 6C 00         [24] 3995 	mov	(__mulint_PARM_2 + 1),#0x00
      000E97 90 00 05         [24] 3996 	mov	dptr,#0x0005
      000E9A C0 05            [24] 3997 	push	ar5
      000E9C C0 04            [24] 3998 	push	ar4
      000E9E C0 03            [24] 3999 	push	ar3
      000EA0 12 57 6C         [24] 4000 	lcall	__mulint
      000EA3 A8 82            [24] 4001 	mov	r0,dpl
      000EA5 AF 83            [24] 4002 	mov	r7,dph
      000EA7 D0 03            [24] 4003 	pop	ar3
      000EA9 D0 04            [24] 4004 	pop	ar4
      000EAB D0 05            [24] 4005 	pop	ar5
      000EAD E8               [12] 4006 	mov	a,r0
      000EAE 24 64            [12] 4007 	add	a,#_font
      000EB0 F8               [12] 4008 	mov	r0,a
      000EB1 EF               [12] 4009 	mov	a,r7
      000EB2 34 58            [12] 4010 	addc	a,#(_font >> 8)
      000EB4 FF               [12] 4011 	mov	r7,a
      000EB5 E5 52            [12] 4012 	mov	a,_drawChar_i_131072_461
      000EB7 28               [12] 4013 	add	a,r0
      000EB8 F5 82            [12] 4014 	mov	dpl,a
      000EBA E4               [12] 4015 	clr	a
      000EBB 3F               [12] 4016 	addc	a,r7
      000EBC F5 83            [12] 4017 	mov	dph,a
      000EBE E4               [12] 4018 	clr	a
      000EBF 93               [24] 4019 	movc	a,@a+dptr
      000EC0 F5 53            [12] 4020 	mov	_drawChar_line_196608_462,a
                                   4021 ;	.\ecen4350_lcd_v4.c:680: for (char j = 0; j < 8; j++)
      000EC2                       4022 00140$:
      000EC2 85 52 F0         [24] 4023 	mov	b,_drawChar_i_131072_461
      000EC5 E5 4F            [12] 4024 	mov	a,_drawChar_PARM_6
      000EC7 A4               [48] 4025 	mul	ab
      000EC8 25 50            [12] 4026 	add	a,_drawChar_x_65536_458
      000ECA FE               [12] 4027 	mov	r6,a
      000ECB E5 51            [12] 4028 	mov	a,(_drawChar_x_65536_458 + 1)
      000ECD 35 F0            [12] 4029 	addc	a,b
      000ECF FF               [12] 4030 	mov	r7,a
      000ED0 8E 54            [24] 4031 	mov	_drawChar_sloc0_1_0,r6
      000ED2 8F 55            [24] 4032 	mov	(_drawChar_sloc0_1_0 + 1),r7
      000ED4 78 00            [12] 4033 	mov	r0,#0x00
      000ED6                       4034 00123$:
      000ED6 B8 08 00         [24] 4035 	cjne	r0,#0x08,00193$
      000ED9                       4036 00193$:
      000ED9 40 03            [24] 4037 	jc	00194$
      000EDB 02 10 00         [24] 4038 	ljmp	00127$
      000EDE                       4039 00194$:
                                   4040 ;	.\ecen4350_lcd_v4.c:682: if (line & 0x1)
      000EDE E5 53            [12] 4041 	mov	a,_drawChar_line_196608_462
      000EE0 20 E0 03         [24] 4042 	jb	acc.0,00195$
      000EE3 02 0F 6E         [24] 4043 	ljmp	00118$
      000EE6                       4044 00195$:
                                   4045 ;	.\ecen4350_lcd_v4.c:684: if (size == 1) // default size
      000EE6 ED               [12] 4046 	mov	a,r5
      000EE7 60 40            [24] 4047 	jz	00110$
                                   4048 ;	.\ecen4350_lcd_v4.c:686: drawPixel(x + i, y + j, color);
      000EE9 A9 52            [24] 4049 	mov	r1,_drawChar_i_131072_461
      000EEB 7A 00            [12] 4050 	mov	r2,#0x00
      000EED E9               [12] 4051 	mov	a,r1
      000EEE 25 50            [12] 4052 	add	a,_drawChar_x_65536_458
      000EF0 F5 82            [12] 4053 	mov	dpl,a
      000EF2 EA               [12] 4054 	mov	a,r2
      000EF3 35 51            [12] 4055 	addc	a,(_drawChar_x_65536_458 + 1)
      000EF5 F5 83            [12] 4056 	mov	dph,a
      000EF7 88 01            [24] 4057 	mov	ar1,r0
      000EF9 7A 00            [12] 4058 	mov	r2,#0x00
      000EFB E9               [12] 4059 	mov	a,r1
      000EFC 25 48            [12] 4060 	add	a,_drawChar_PARM_2
      000EFE F5 28            [12] 4061 	mov	_drawPixel_PARM_2,a
      000F00 EA               [12] 4062 	mov	a,r2
      000F01 35 49            [12] 4063 	addc	a,(_drawChar_PARM_2 + 1)
      000F03 F5 29            [12] 4064 	mov	(_drawPixel_PARM_2 + 1),a
      000F05 85 4B 2A         [24] 4065 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000F08 85 4C 2B         [24] 4066 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000F0B C0 07            [24] 4067 	push	ar7
      000F0D C0 06            [24] 4068 	push	ar6
      000F0F C0 05            [24] 4069 	push	ar5
      000F11 C0 04            [24] 4070 	push	ar4
      000F13 C0 03            [24] 4071 	push	ar3
      000F15 C0 00            [24] 4072 	push	ar0
      000F17 12 07 C8         [24] 4073 	lcall	_drawPixel
      000F1A D0 00            [24] 4074 	pop	ar0
      000F1C D0 03            [24] 4075 	pop	ar3
      000F1E D0 04            [24] 4076 	pop	ar4
      000F20 D0 05            [24] 4077 	pop	ar5
      000F22 D0 06            [24] 4078 	pop	ar6
      000F24 D0 07            [24] 4079 	pop	ar7
      000F26 02 0F F6         [24] 4080 	ljmp	00119$
      000F29                       4081 00110$:
                                   4082 ;	.\ecen4350_lcd_v4.c:690: fillRect(x + (i * size), y + (j * size), size, size, color);
      000F29 88 F0            [24] 4083 	mov	b,r0
      000F2B E5 4F            [12] 4084 	mov	a,_drawChar_PARM_6
      000F2D A4               [48] 4085 	mul	ab
      000F2E 25 48            [12] 4086 	add	a,_drawChar_PARM_2
      000F30 F5 40            [12] 4087 	mov	_fillRect_PARM_2,a
      000F32 E5 49            [12] 4088 	mov	a,(_drawChar_PARM_2 + 1)
      000F34 35 F0            [12] 4089 	addc	a,b
      000F36 F5 41            [12] 4090 	mov	(_fillRect_PARM_2 + 1),a
      000F38 A9 4F            [24] 4091 	mov	r1,_drawChar_PARM_6
      000F3A 7A 00            [12] 4092 	mov	r2,#0x00
      000F3C 89 42            [24] 4093 	mov	_fillRect_PARM_3,r1
      000F3E 8A 43            [24] 4094 	mov	(_fillRect_PARM_3 + 1),r2
      000F40 89 44            [24] 4095 	mov	_fillRect_PARM_4,r1
      000F42 8A 45            [24] 4096 	mov	(_fillRect_PARM_4 + 1),r2
      000F44 85 4B 46         [24] 4097 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000F47 85 4C 47         [24] 4098 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000F4A 85 54 82         [24] 4099 	mov	dpl,_drawChar_sloc0_1_0
      000F4D 85 55 83         [24] 4100 	mov	dph,(_drawChar_sloc0_1_0 + 1)
      000F50 C0 07            [24] 4101 	push	ar7
      000F52 C0 06            [24] 4102 	push	ar6
      000F54 C0 05            [24] 4103 	push	ar5
      000F56 C0 04            [24] 4104 	push	ar4
      000F58 C0 03            [24] 4105 	push	ar3
      000F5A C0 00            [24] 4106 	push	ar0
      000F5C 12 0B 44         [24] 4107 	lcall	_fillRect
      000F5F D0 00            [24] 4108 	pop	ar0
      000F61 D0 03            [24] 4109 	pop	ar3
      000F63 D0 04            [24] 4110 	pop	ar4
      000F65 D0 05            [24] 4111 	pop	ar5
      000F67 D0 06            [24] 4112 	pop	ar6
      000F69 D0 07            [24] 4113 	pop	ar7
      000F6B 02 0F F6         [24] 4114 	ljmp	00119$
      000F6E                       4115 00118$:
                                   4116 ;	.\ecen4350_lcd_v4.c:693: else if (bg != color)
      000F6E EB               [12] 4117 	mov	a,r3
      000F6F 60 03            [24] 4118 	jz	00197$
      000F71 02 0F F6         [24] 4119 	ljmp	00119$
      000F74                       4120 00197$:
                                   4121 ;	.\ecen4350_lcd_v4.c:695: if (size == 1) // default size
      000F74 EC               [12] 4122 	mov	a,r4
      000F75 60 3F            [24] 4123 	jz	00113$
                                   4124 ;	.\ecen4350_lcd_v4.c:697: drawPixel(x + i, y + j, bg);
      000F77 A9 52            [24] 4125 	mov	r1,_drawChar_i_131072_461
      000F79 7A 00            [12] 4126 	mov	r2,#0x00
      000F7B E9               [12] 4127 	mov	a,r1
      000F7C 25 50            [12] 4128 	add	a,_drawChar_x_65536_458
      000F7E F5 82            [12] 4129 	mov	dpl,a
      000F80 EA               [12] 4130 	mov	a,r2
      000F81 35 51            [12] 4131 	addc	a,(_drawChar_x_65536_458 + 1)
      000F83 F5 83            [12] 4132 	mov	dph,a
      000F85 88 01            [24] 4133 	mov	ar1,r0
      000F87 7A 00            [12] 4134 	mov	r2,#0x00
      000F89 E9               [12] 4135 	mov	a,r1
      000F8A 25 48            [12] 4136 	add	a,_drawChar_PARM_2
      000F8C F5 28            [12] 4137 	mov	_drawPixel_PARM_2,a
      000F8E EA               [12] 4138 	mov	a,r2
      000F8F 35 49            [12] 4139 	addc	a,(_drawChar_PARM_2 + 1)
      000F91 F5 29            [12] 4140 	mov	(_drawPixel_PARM_2 + 1),a
      000F93 85 4D 2A         [24] 4141 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000F96 85 4E 2B         [24] 4142 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000F99 C0 07            [24] 4143 	push	ar7
      000F9B C0 06            [24] 4144 	push	ar6
      000F9D C0 05            [24] 4145 	push	ar5
      000F9F C0 04            [24] 4146 	push	ar4
      000FA1 C0 03            [24] 4147 	push	ar3
      000FA3 C0 00            [24] 4148 	push	ar0
      000FA5 12 07 C8         [24] 4149 	lcall	_drawPixel
      000FA8 D0 00            [24] 4150 	pop	ar0
      000FAA D0 03            [24] 4151 	pop	ar3
      000FAC D0 04            [24] 4152 	pop	ar4
      000FAE D0 05            [24] 4153 	pop	ar5
      000FB0 D0 06            [24] 4154 	pop	ar6
      000FB2 D0 07            [24] 4155 	pop	ar7
      000FB4 80 40            [24] 4156 	sjmp	00119$
      000FB6                       4157 00113$:
                                   4158 ;	.\ecen4350_lcd_v4.c:701: fillRect(x + i * size, y + j * size, size, size, bg);
      000FB6 88 F0            [24] 4159 	mov	b,r0
      000FB8 E5 4F            [12] 4160 	mov	a,_drawChar_PARM_6
      000FBA A4               [48] 4161 	mul	ab
      000FBB 25 48            [12] 4162 	add	a,_drawChar_PARM_2
      000FBD F5 40            [12] 4163 	mov	_fillRect_PARM_2,a
      000FBF E5 49            [12] 4164 	mov	a,(_drawChar_PARM_2 + 1)
      000FC1 35 F0            [12] 4165 	addc	a,b
      000FC3 F5 41            [12] 4166 	mov	(_fillRect_PARM_2 + 1),a
      000FC5 A9 4F            [24] 4167 	mov	r1,_drawChar_PARM_6
      000FC7 7A 00            [12] 4168 	mov	r2,#0x00
      000FC9 89 42            [24] 4169 	mov	_fillRect_PARM_3,r1
      000FCB 8A 43            [24] 4170 	mov	(_fillRect_PARM_3 + 1),r2
      000FCD 89 44            [24] 4171 	mov	_fillRect_PARM_4,r1
      000FCF 8A 45            [24] 4172 	mov	(_fillRect_PARM_4 + 1),r2
      000FD1 85 4D 46         [24] 4173 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000FD4 85 4E 47         [24] 4174 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000FD7 8E 82            [24] 4175 	mov	dpl,r6
      000FD9 8F 83            [24] 4176 	mov	dph,r7
      000FDB C0 07            [24] 4177 	push	ar7
      000FDD C0 06            [24] 4178 	push	ar6
      000FDF C0 05            [24] 4179 	push	ar5
      000FE1 C0 04            [24] 4180 	push	ar4
      000FE3 C0 03            [24] 4181 	push	ar3
      000FE5 C0 00            [24] 4182 	push	ar0
      000FE7 12 0B 44         [24] 4183 	lcall	_fillRect
      000FEA D0 00            [24] 4184 	pop	ar0
      000FEC D0 03            [24] 4185 	pop	ar3
      000FEE D0 04            [24] 4186 	pop	ar4
      000FF0 D0 05            [24] 4187 	pop	ar5
      000FF2 D0 06            [24] 4188 	pop	ar6
      000FF4 D0 07            [24] 4189 	pop	ar7
      000FF6                       4190 00119$:
                                   4191 ;	.\ecen4350_lcd_v4.c:705: line >>= 1;
      000FF6 E5 53            [12] 4192 	mov	a,_drawChar_line_196608_462
      000FF8 C3               [12] 4193 	clr	c
      000FF9 13               [12] 4194 	rrc	a
      000FFA F5 53            [12] 4195 	mov	_drawChar_line_196608_462,a
                                   4196 ;	.\ecen4350_lcd_v4.c:680: for (char j = 0; j < 8; j++)
      000FFC 08               [12] 4197 	inc	r0
      000FFD 02 0E D6         [24] 4198 	ljmp	00123$
      001000                       4199 00127$:
                                   4200 ;	.\ecen4350_lcd_v4.c:667: for (char i = 0; i < 6; i++)
      001000 05 52            [12] 4201 	inc	_drawChar_i_131072_461
                                   4202 ;	.\ecen4350_lcd_v4.c:708: }
      001002 02 0E 80         [24] 4203 	ljmp	00126$
                                   4204 ;------------------------------------------------------------
                                   4205 ;Allocation info for local variables in function 'write'
                                   4206 ;------------------------------------------------------------
                                   4207 ;c                         Allocated to registers r7 
                                   4208 ;------------------------------------------------------------
                                   4209 ;	.\ecen4350_lcd_v4.c:710: void write(u8 c) //write address character at setted coordinates after setting location and colour
                                   4210 ;	-----------------------------------------
                                   4211 ;	 function write
                                   4212 ;	-----------------------------------------
      001005                       4213 _write:
      001005 AF 82            [24] 4214 	mov	r7,dpl
                                   4215 ;	.\ecen4350_lcd_v4.c:712: if (c == '\n')
      001007 BF 0A 22         [24] 4216 	cjne	r7,#0x0a,00105$
                                   4217 ;	.\ecen4350_lcd_v4.c:714: cursor_y += textsize * 8;
      00100A AD 14            [24] 4218 	mov	r5,_textsize
      00100C E4               [12] 4219 	clr	a
      00100D C4               [12] 4220 	swap	a
      00100E 03               [12] 4221 	rr	a
      00100F 54 F8            [12] 4222 	anl	a,#0xf8
      001011 CD               [12] 4223 	xch	a,r5
      001012 C4               [12] 4224 	swap	a
      001013 03               [12] 4225 	rr	a
      001014 CD               [12] 4226 	xch	a,r5
      001015 6D               [12] 4227 	xrl	a,r5
      001016 CD               [12] 4228 	xch	a,r5
      001017 54 F8            [12] 4229 	anl	a,#0xf8
      001019 CD               [12] 4230 	xch	a,r5
      00101A 6D               [12] 4231 	xrl	a,r5
      00101B FE               [12] 4232 	mov	r6,a
      00101C ED               [12] 4233 	mov	a,r5
      00101D 25 12            [12] 4234 	add	a,_cursor_y
      00101F F5 12            [12] 4235 	mov	_cursor_y,a
      001021 EE               [12] 4236 	mov	a,r6
      001022 35 13            [12] 4237 	addc	a,(_cursor_y + 1)
      001024 F5 13            [12] 4238 	mov	(_cursor_y + 1),a
                                   4239 ;	.\ecen4350_lcd_v4.c:715: cursor_x = 0;
      001026 E4               [12] 4240 	clr	a
      001027 F5 10            [12] 4241 	mov	_cursor_x,a
      001029 F5 11            [12] 4242 	mov	(_cursor_x + 1),a
      00102B 22               [24] 4243 	ret
      00102C                       4244 00105$:
                                   4245 ;	.\ecen4350_lcd_v4.c:717: else if (c == '\r')
      00102C BF 0D 01         [24] 4246 	cjne	r7,#0x0d,00119$
      00102F 22               [24] 4247 	ret
      001030                       4248 00119$:
                                   4249 ;	.\ecen4350_lcd_v4.c:723: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      001030 85 12 48         [24] 4250 	mov	_drawChar_PARM_2,_cursor_y
      001033 85 13 49         [24] 4251 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      001036 8F 4A            [24] 4252 	mov	_drawChar_PARM_3,r7
      001038 85 16 4B         [24] 4253 	mov	_drawChar_PARM_4,_textcolor
      00103B 85 17 4C         [24] 4254 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      00103E 85 18 4D         [24] 4255 	mov	_drawChar_PARM_5,_textbgcolor
      001041 85 19 4E         [24] 4256 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      001044 85 14 4F         [24] 4257 	mov	_drawChar_PARM_6,_textsize
      001047 85 10 82         [24] 4258 	mov	dpl,_cursor_x
      00104A 85 11 83         [24] 4259 	mov	dph,(_cursor_x + 1)
      00104D 12 0D F4         [24] 4260 	lcall	_drawChar
                                   4261 ;	.\ecen4350_lcd_v4.c:724: cursor_x += textsize * 6;
      001050 85 14 6B         [24] 4262 	mov	__mulint_PARM_2,_textsize
      001053 75 6C 00         [24] 4263 	mov	(__mulint_PARM_2 + 1),#0x00
      001056 90 00 06         [24] 4264 	mov	dptr,#0x0006
      001059 12 57 6C         [24] 4265 	lcall	__mulint
      00105C AE 82            [24] 4266 	mov	r6,dpl
      00105E AF 83            [24] 4267 	mov	r7,dph
      001060 EE               [12] 4268 	mov	a,r6
      001061 25 10            [12] 4269 	add	a,_cursor_x
      001063 F5 10            [12] 4270 	mov	_cursor_x,a
      001065 EF               [12] 4271 	mov	a,r7
      001066 35 11            [12] 4272 	addc	a,(_cursor_x + 1)
      001068 F5 11            [12] 4273 	mov	(_cursor_x + 1),a
                                   4274 ;	.\ecen4350_lcd_v4.c:726: }
      00106A 22               [24] 4275 	ret
                                   4276 ;------------------------------------------------------------
                                   4277 ;Allocation info for local variables in function 'LCD_string_write'
                                   4278 ;------------------------------------------------------------
                                   4279 ;str                       Allocated to registers r5 r6 r7 
                                   4280 ;i                         Allocated to registers r3 r4 
                                   4281 ;------------------------------------------------------------
                                   4282 ;	.\ecen4350_lcd_v4.c:727: void LCD_string_write(char *str)
                                   4283 ;	-----------------------------------------
                                   4284 ;	 function LCD_string_write
                                   4285 ;	-----------------------------------------
      00106B                       4286 _LCD_string_write:
      00106B AD 82            [24] 4287 	mov	r5,dpl
      00106D AE 83            [24] 4288 	mov	r6,dph
      00106F AF F0            [24] 4289 	mov	r7,b
                                   4290 ;	.\ecen4350_lcd_v4.c:730: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      001071 7B 00            [12] 4291 	mov	r3,#0x00
      001073 7C 00            [12] 4292 	mov	r4,#0x00
      001075                       4293 00103$:
      001075 EB               [12] 4294 	mov	a,r3
      001076 2D               [12] 4295 	add	a,r5
      001077 F8               [12] 4296 	mov	r0,a
      001078 EC               [12] 4297 	mov	a,r4
      001079 3E               [12] 4298 	addc	a,r6
      00107A F9               [12] 4299 	mov	r1,a
      00107B 8F 02            [24] 4300 	mov	ar2,r7
      00107D 88 82            [24] 4301 	mov	dpl,r0
      00107F 89 83            [24] 4302 	mov	dph,r1
      001081 8A F0            [24] 4303 	mov	b,r2
      001083 12 57 D6         [24] 4304 	lcall	__gptrget
      001086 FA               [12] 4305 	mov	r2,a
      001087 60 20            [24] 4306 	jz	00105$
                                   4307 ;	.\ecen4350_lcd_v4.c:732: write(str[i]); /* Call transmit data function */
      001089 8A 82            [24] 4308 	mov	dpl,r2
      00108B C0 07            [24] 4309 	push	ar7
      00108D C0 06            [24] 4310 	push	ar6
      00108F C0 05            [24] 4311 	push	ar5
      001091 C0 04            [24] 4312 	push	ar4
      001093 C0 03            [24] 4313 	push	ar3
      001095 12 10 05         [24] 4314 	lcall	_write
      001098 D0 03            [24] 4315 	pop	ar3
      00109A D0 04            [24] 4316 	pop	ar4
      00109C D0 05            [24] 4317 	pop	ar5
      00109E D0 06            [24] 4318 	pop	ar6
      0010A0 D0 07            [24] 4319 	pop	ar7
                                   4320 ;	.\ecen4350_lcd_v4.c:730: for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
      0010A2 0B               [12] 4321 	inc	r3
      0010A3 BB 00 CF         [24] 4322 	cjne	r3,#0x00,00103$
      0010A6 0C               [12] 4323 	inc	r4
      0010A7 80 CC            [24] 4324 	sjmp	00103$
      0010A9                       4325 00105$:
                                   4326 ;	.\ecen4350_lcd_v4.c:734: }
      0010A9 22               [24] 4327 	ret
                                   4328 ;------------------------------------------------------------
                                   4329 ;Allocation info for local variables in function 'writeNewLine'
                                   4330 ;------------------------------------------------------------
                                   4331 ;	.\ecen4350_lcd_v4.c:736: void writeNewLine(void)
                                   4332 ;	-----------------------------------------
                                   4333 ;	 function writeNewLine
                                   4334 ;	-----------------------------------------
      0010AA                       4335 _writeNewLine:
                                   4336 ;	.\ecen4350_lcd_v4.c:738: write('\n');
      0010AA 75 82 0A         [24] 4337 	mov	dpl,#0x0a
                                   4338 ;	.\ecen4350_lcd_v4.c:739: }
      0010AD 02 10 05         [24] 4339 	ljmp	_write
                                   4340 ;------------------------------------------------------------
                                   4341 ;Allocation info for local variables in function 'freeType'
                                   4342 ;------------------------------------------------------------
                                   4343 ;count                     Allocated to registers r7 
                                   4344 ;d                         Allocated to registers 
                                   4345 ;row                       Allocated to registers r6 
                                   4346 ;------------------------------------------------------------
                                   4347 ;	.\ecen4350_lcd_v4.c:741: void freeType()
                                   4348 ;	-----------------------------------------
                                   4349 ;	 function freeType
                                   4350 ;	-----------------------------------------
      0010B0                       4351 _freeType:
                                   4352 ;	.\ecen4350_lcd_v4.c:743: unsigned char count = 0;
      0010B0 7F 00            [12] 4353 	mov	r7,#0x00
                                   4354 ;	.\ecen4350_lcd_v4.c:745: u8 row = 1;
      0010B2 7E 01            [12] 4355 	mov	r6,#0x01
                                   4356 ;	.\ecen4350_lcd_v4.c:747: clearLCD();
      0010B4 C0 07            [24] 4357 	push	ar7
      0010B6 C0 06            [24] 4358 	push	ar6
      0010B8 12 0D EE         [24] 4359 	lcall	_clearLCD
                                   4360 ;	.\ecen4350_lcd_v4.c:748: setCursor(0,0);
      0010BB E4               [12] 4361 	clr	a
      0010BC F5 6B            [12] 4362 	mov	_setCursor_PARM_2,a
      0010BE F5 6C            [12] 4363 	mov	(_setCursor_PARM_2 + 1),a
      0010C0 90 00 00         [24] 4364 	mov	dptr,#0x0000
      0010C3 12 05 51         [24] 4365 	lcall	_setCursor
                                   4366 ;	.\ecen4350_lcd_v4.c:749: setTextColor(colorSelect, colorBackground);
      0010C6 E4               [12] 4367 	clr	a
      0010C7 F5 6B            [12] 4368 	mov	_setTextColor_PARM_2,a
      0010C9 F5 6C            [12] 4369 	mov	(_setTextColor_PARM_2 + 1),a
      0010CB 90 F8 1F         [24] 4370 	mov	dptr,#0xf81f
      0010CE 12 05 5E         [24] 4371 	lcall	_setTextColor
                                   4372 ;	.\ecen4350_lcd_v4.c:750: LCD_string_write("Free Type: \n");
      0010D1 90 5D 80         [24] 4373 	mov	dptr,#___str_1
      0010D4 75 F0 80         [24] 4374 	mov	b,#0x80
      0010D7 12 10 6B         [24] 4375 	lcall	_LCD_string_write
                                   4376 ;	.\ecen4350_lcd_v4.c:751: setTextColor(colorText, colorBackground);
      0010DA E4               [12] 4377 	clr	a
      0010DB F5 6B            [12] 4378 	mov	_setTextColor_PARM_2,a
      0010DD F5 6C            [12] 4379 	mov	(_setTextColor_PARM_2 + 1),a
      0010DF 90 07 FF         [24] 4380 	mov	dptr,#0x07ff
      0010E2 12 05 5E         [24] 4381 	lcall	_setTextColor
                                   4382 ;	.\ecen4350_lcd_v4.c:752: LCD_string_write("0x");
      0010E5 90 5D 8D         [24] 4383 	mov	dptr,#___str_2
      0010E8 75 F0 80         [24] 4384 	mov	b,#0x80
      0010EB 12 10 6B         [24] 4385 	lcall	_LCD_string_write
      0010EE D0 06            [24] 4386 	pop	ar6
      0010F0 D0 07            [24] 4387 	pop	ar7
                                   4388 ;	.\ecen4350_lcd_v4.c:753: while (1)
      0010F2                       4389 00108$:
                                   4390 ;	.\ecen4350_lcd_v4.c:756: if (count == 8)
      0010F2 BF 08 02         [24] 4391 	cjne	r7,#0x08,00124$
      0010F5 80 03            [24] 4392 	sjmp	00125$
      0010F7                       4393 00124$:
      0010F7 02 11 77         [24] 4394 	ljmp	00105$
      0010FA                       4395 00125$:
                                   4396 ;	.\ecen4350_lcd_v4.c:759: count = 0;
      0010FA 7F 00            [12] 4397 	mov	r7,#0x00
                                   4398 ;	.\ecen4350_lcd_v4.c:760: write(d);
      0010FC 75 82 0A         [24] 4399 	mov	dpl,#0x0a
      0010FF C0 07            [24] 4400 	push	ar7
      001101 C0 06            [24] 4401 	push	ar6
      001103 12 10 05         [24] 4402 	lcall	_write
      001106 D0 06            [24] 4403 	pop	ar6
      001108 D0 07            [24] 4404 	pop	ar7
                                   4405 ;	.\ecen4350_lcd_v4.c:761: if (row == 4)
      00110A BE 04 55         [24] 4406 	cjne	r6,#0x04,00102$
                                   4407 ;	.\ecen4350_lcd_v4.c:763: delay(5);
      00110D 90 00 05         [24] 4408 	mov	dptr,#0x0005
      001110 C0 07            [24] 4409 	push	ar7
      001112 12 01 87         [24] 4410 	lcall	_delay
                                   4411 ;	.\ecen4350_lcd_v4.c:764: clearLCD();
      001115 12 0D EE         [24] 4412 	lcall	_clearLCD
                                   4413 ;	.\ecen4350_lcd_v4.c:765: setTextColor(colorSelect, colorBackground);
      001118 E4               [12] 4414 	clr	a
      001119 F5 6B            [12] 4415 	mov	_setTextColor_PARM_2,a
      00111B F5 6C            [12] 4416 	mov	(_setTextColor_PARM_2 + 1),a
      00111D 90 F8 1F         [24] 4417 	mov	dptr,#0xf81f
      001120 12 05 5E         [24] 4418 	lcall	_setTextColor
                                   4419 ;	.\ecen4350_lcd_v4.c:766: rtcPrint();
      001123 12 04 41         [24] 4420 	lcall	_rtcPrint
                                   4421 ;	.\ecen4350_lcd_v4.c:767: clearLCD();
      001126 12 0D EE         [24] 4422 	lcall	_clearLCD
                                   4423 ;	.\ecen4350_lcd_v4.c:768: setCursor(0,0);
      001129 E4               [12] 4424 	clr	a
      00112A F5 6B            [12] 4425 	mov	_setCursor_PARM_2,a
      00112C F5 6C            [12] 4426 	mov	(_setCursor_PARM_2 + 1),a
      00112E 90 00 00         [24] 4427 	mov	dptr,#0x0000
      001131 12 05 51         [24] 4428 	lcall	_setCursor
                                   4429 ;	.\ecen4350_lcd_v4.c:769: setTextColor(colorSelect, colorBackground);
      001134 E4               [12] 4430 	clr	a
      001135 F5 6B            [12] 4431 	mov	_setTextColor_PARM_2,a
      001137 F5 6C            [12] 4432 	mov	(_setTextColor_PARM_2 + 1),a
      001139 90 F8 1F         [24] 4433 	mov	dptr,#0xf81f
      00113C 12 05 5E         [24] 4434 	lcall	_setTextColor
                                   4435 ;	.\ecen4350_lcd_v4.c:770: LCD_string_write("Free Type: \n");
      00113F 90 5D 80         [24] 4436 	mov	dptr,#___str_1
      001142 75 F0 80         [24] 4437 	mov	b,#0x80
      001145 12 10 6B         [24] 4438 	lcall	_LCD_string_write
                                   4439 ;	.\ecen4350_lcd_v4.c:771: setTextColor(colorText, colorBackground);
      001148 E4               [12] 4440 	clr	a
      001149 F5 6B            [12] 4441 	mov	_setTextColor_PARM_2,a
      00114B F5 6C            [12] 4442 	mov	(_setTextColor_PARM_2 + 1),a
      00114D 90 07 FF         [24] 4443 	mov	dptr,#0x07ff
      001150 12 05 5E         [24] 4444 	lcall	_setTextColor
                                   4445 ;	.\ecen4350_lcd_v4.c:772: LCD_string_write("0x");
      001153 90 5D 8D         [24] 4446 	mov	dptr,#___str_2
      001156 75 F0 80         [24] 4447 	mov	b,#0x80
      001159 12 10 6B         [24] 4448 	lcall	_LCD_string_write
      00115C D0 07            [24] 4449 	pop	ar7
                                   4450 ;	.\ecen4350_lcd_v4.c:774: row = 1;
      00115E 7E 01            [12] 4451 	mov	r6,#0x01
      001160 80 90            [24] 4452 	sjmp	00108$
      001162                       4453 00102$:
                                   4454 ;	.\ecen4350_lcd_v4.c:777: LCD_string_write("0x");
      001162 90 5D 8D         [24] 4455 	mov	dptr,#___str_2
      001165 75 F0 80         [24] 4456 	mov	b,#0x80
      001168 C0 07            [24] 4457 	push	ar7
      00116A C0 06            [24] 4458 	push	ar6
      00116C 12 10 6B         [24] 4459 	lcall	_LCD_string_write
      00116F D0 06            [24] 4460 	pop	ar6
      001171 D0 07            [24] 4461 	pop	ar7
                                   4462 ;	.\ecen4350_lcd_v4.c:778: row++;
      001173 0E               [12] 4463 	inc	r6
      001174 02 10 F2         [24] 4464 	ljmp	00108$
      001177                       4465 00105$:
                                   4466 ;	.\ecen4350_lcd_v4.c:783: d = keyDetect();
      001177 C0 07            [24] 4467 	push	ar7
      001179 C0 06            [24] 4468 	push	ar6
      00117B 12 11 89         [24] 4469 	lcall	_keyDetect
                                   4470 ;	.\ecen4350_lcd_v4.c:784: write(d);
      00117E 12 10 05         [24] 4471 	lcall	_write
      001181 D0 06            [24] 4472 	pop	ar6
      001183 D0 07            [24] 4473 	pop	ar7
                                   4474 ;	.\ecen4350_lcd_v4.c:785: count++;
      001185 0F               [12] 4475 	inc	r7
                                   4476 ;	.\ecen4350_lcd_v4.c:790: }
      001186 02 10 F2         [24] 4477 	ljmp	00108$
                                   4478 ;------------------------------------------------------------
                                   4479 ;Allocation info for local variables in function 'keyDetect'
                                   4480 ;------------------------------------------------------------
                                   4481 ;portdata                  Allocated to registers r7 
                                   4482 ;------------------------------------------------------------
                                   4483 ;	.\ecen4350_lcd_v4.c:793: unsigned char keyDetect()
                                   4484 ;	-----------------------------------------
                                   4485 ;	 function keyDetect
                                   4486 ;	-----------------------------------------
      001189                       4487 _keyDetect:
                                   4488 ;	.\ecen4350_lcd_v4.c:796: __KEYPAD_PORT__ = 0xF0; 										/* set port direction as input-output */
      001189 75 90 F0         [24] 4489 	mov	_P1,#0xf0
                                   4490 ;	.\ecen4350_lcd_v4.c:797: do 
      00118C                       4491 00101$:
                                   4492 ;	.\ecen4350_lcd_v4.c:799: portdata = (__KEYPAD_PORT__ & 0xF0);
      00118C E5 90            [12] 4493 	mov	a,_P1
      00118E 54 F0            [12] 4494 	anl	a,#0xf0
      001190 FF               [12] 4495 	mov	r7,a
                                   4496 ;	.\ecen4350_lcd_v4.c:800: }	while (portdata != 0xF0);									/* wait until no buttons pressed to continue */
      001191 BF F0 F8         [24] 4497 	cjne	r7,#0xf0,00101$
                                   4498 ;	.\ecen4350_lcd_v4.c:804: do
      001194                       4499 00105$:
                                   4500 ;	.\ecen4350_lcd_v4.c:807: colloc = __KEYPAD_PORT__;								/* read back columns -> the grounded rows will ground address column bit when button pressed */
      001194 85 90 08         [24] 4501 	mov	_colloc,_P1
                                   4502 ;	.\ecen4350_lcd_v4.c:808: colloc &= 0xF0;		  									/* mask port for column read only */
      001197 53 08 F0         [24] 4503 	anl	_colloc,#0xf0
                                   4504 ;	.\ecen4350_lcd_v4.c:809: } while ((colloc == 0xF0) && (received_flag == 0)); 		/* read status of column repeatedly until key is pressed or serial interrupt received */
      00119A 74 F0            [12] 4505 	mov	a,#0xf0
      00119C B5 08 04         [24] 4506 	cjne	a,_colloc,00107$
      00119F E5 0F            [12] 4507 	mov	a,_received_flag
      0011A1 60 F1            [24] 4508 	jz	00105$
      0011A3                       4509 00107$:
                                   4510 ;	.\ecen4350_lcd_v4.c:810: delay(10);													/* 15ms key debounce time */
      0011A3 90 00 0A         [24] 4511 	mov	dptr,#0x000a
      0011A6 12 01 87         [24] 4512 	lcall	_delay
                                   4513 ;	.\ecen4350_lcd_v4.c:811: portdata = (__KEYPAD_PORT__ & 0xF0);						/* resample port data after debounce */
      0011A9 E5 90            [12] 4514 	mov	a,_P1
      0011AB 54 F0            [12] 4515 	anl	a,#0xf0
                                   4516 ;	.\ecen4350_lcd_v4.c:812: } while ((colloc != portdata) && (received_flag == 0));			/* repeat until input is clear to interpret */
      0011AD FF               [12] 4517 	mov	r7,a
      0011AE B5 08 02         [24] 4518 	cjne	a,_colloc,00214$
      0011B1 80 04            [24] 4519 	sjmp	00123$
      0011B3                       4520 00214$:
      0011B3 E5 0F            [12] 4521 	mov	a,_received_flag
      0011B5 60 DD            [24] 4522 	jz	00105$
                                   4523 ;	.\ecen4350_lcd_v4.c:814: while (1)
      0011B7                       4524 00123$:
                                   4525 ;	.\ecen4350_lcd_v4.c:816: if (received_flag == 1)											/* check for key input via serial interrupt */
      0011B7 74 01            [12] 4526 	mov	a,#0x01
      0011B9 B5 0F 09         [24] 4527 	cjne	a,_received_flag,00113$
                                   4528 ;	.\ecen4350_lcd_v4.c:818: received_byte -= 0x40;										/* For some reason received_byte needs 0x40 subtracted */
      0011BC E5 0E            [12] 4529 	mov	a,_received_byte
      0011BE FF               [12] 4530 	mov	r7,a
      0011BF 24 C0            [12] 4531 	add	a,#0xc0
      0011C1 F5 0E            [12] 4532 	mov	_received_byte,a
                                   4533 ;	.\ecen4350_lcd_v4.c:819: break;														/* break outside while() */
      0011C3 80 52            [24] 4534 	sjmp	00124$
      0011C5                       4535 00113$:
                                   4536 ;	.\ecen4350_lcd_v4.c:822: __KEYPAD_PORT__ = 0xFE; 										/* check for pressed key input 1st row -> (_KEYPAD_PORT_ == 0b11111110) */
      0011C5 75 90 FE         [24] 4537 	mov	_P1,#0xfe
                                   4538 ;	.\ecen4350_lcd_v4.c:823: colloc = (__KEYPAD_PORT__ & 0xF0);								/* (1111 1110) & (1111  0000) == (1111 0000) if 1st row free */
      0011C8 E5 90            [12] 4539 	mov	a,_P1
      0011CA 54 F0            [12] 4540 	anl	a,#0xf0
      0011CC F5 08            [12] 4541 	mov	_colloc,a
                                   4542 ;	.\ecen4350_lcd_v4.c:824: if (colloc != 0xF0)
      0011CE 74 F0            [12] 4543 	mov	a,#0xf0
      0011D0 B5 08 02         [24] 4544 	cjne	a,_colloc,00218$
      0011D3 80 05            [24] 4545 	sjmp	00115$
      0011D5                       4546 00218$:
                                   4547 ;	.\ecen4350_lcd_v4.c:826: rowloc = 0;
      0011D5 75 09 00         [24] 4548 	mov	_rowloc,#0x00
                                   4549 ;	.\ecen4350_lcd_v4.c:827: break;
      0011D8 80 3D            [24] 4550 	sjmp	00124$
      0011DA                       4551 00115$:
                                   4552 ;	.\ecen4350_lcd_v4.c:830: __KEYPAD_PORT__ = 0xFD; 										/* check for pressed key input 2nd row -> (_KEYPAD_PORT_ == 0b11111101) */
      0011DA 75 90 FD         [24] 4553 	mov	_P1,#0xfd
                                   4554 ;	.\ecen4350_lcd_v4.c:831: colloc = (__KEYPAD_PORT__ & 0xF0);
      0011DD E5 90            [12] 4555 	mov	a,_P1
      0011DF 54 F0            [12] 4556 	anl	a,#0xf0
      0011E1 F5 08            [12] 4557 	mov	_colloc,a
                                   4558 ;	.\ecen4350_lcd_v4.c:832: if (colloc != 0xF0)
      0011E3 74 F0            [12] 4559 	mov	a,#0xf0
      0011E5 B5 08 02         [24] 4560 	cjne	a,_colloc,00219$
      0011E8 80 05            [24] 4561 	sjmp	00117$
      0011EA                       4562 00219$:
                                   4563 ;	.\ecen4350_lcd_v4.c:834: rowloc = 1;
      0011EA 75 09 01         [24] 4564 	mov	_rowloc,#0x01
                                   4565 ;	.\ecen4350_lcd_v4.c:835: break;
      0011ED 80 28            [24] 4566 	sjmp	00124$
      0011EF                       4567 00117$:
                                   4568 ;	.\ecen4350_lcd_v4.c:838: __KEYPAD_PORT__ = 0xFB; 										/* check for pressed key input 3rd row -> (_KEYPAD_PORT_ == 0b11111011) */
      0011EF 75 90 FB         [24] 4569 	mov	_P1,#0xfb
                                   4570 ;	.\ecen4350_lcd_v4.c:839: colloc = (__KEYPAD_PORT__ & 0xF0);
      0011F2 E5 90            [12] 4571 	mov	a,_P1
      0011F4 54 F0            [12] 4572 	anl	a,#0xf0
      0011F6 F5 08            [12] 4573 	mov	_colloc,a
                                   4574 ;	.\ecen4350_lcd_v4.c:840: if (colloc != 0xF0)
      0011F8 74 F0            [12] 4575 	mov	a,#0xf0
      0011FA B5 08 02         [24] 4576 	cjne	a,_colloc,00220$
      0011FD 80 05            [24] 4577 	sjmp	00119$
      0011FF                       4578 00220$:
                                   4579 ;	.\ecen4350_lcd_v4.c:842: rowloc = 2;
      0011FF 75 09 02         [24] 4580 	mov	_rowloc,#0x02
                                   4581 ;	.\ecen4350_lcd_v4.c:843: break;
      001202 80 13            [24] 4582 	sjmp	00124$
      001204                       4583 00119$:
                                   4584 ;	.\ecen4350_lcd_v4.c:846: __KEYPAD_PORT__ = 0xF7; 										/* check for pressed key input 4th row -> (_KEYPAD_PORT_ == 0b11110111) */
      001204 75 90 F7         [24] 4585 	mov	_P1,#0xf7
                                   4586 ;	.\ecen4350_lcd_v4.c:847: colloc = (__KEYPAD_PORT__ & 0xF0);
      001207 E5 90            [12] 4587 	mov	a,_P1
      001209 54 F0            [12] 4588 	anl	a,#0xf0
      00120B F5 08            [12] 4589 	mov	_colloc,a
                                   4590 ;	.\ecen4350_lcd_v4.c:848: if (colloc != 0xF0)
      00120D 74 F0            [12] 4591 	mov	a,#0xf0
      00120F B5 08 02         [24] 4592 	cjne	a,_colloc,00221$
      001212 80 A3            [24] 4593 	sjmp	00123$
      001214                       4594 00221$:
                                   4595 ;	.\ecen4350_lcd_v4.c:850: rowloc = 3;
      001214 75 09 03         [24] 4596 	mov	_rowloc,#0x03
                                   4597 ;	.\ecen4350_lcd_v4.c:851: break;
      001217                       4598 00124$:
                                   4599 ;	.\ecen4350_lcd_v4.c:855: if (received_flag == 1)
      001217 74 01            [12] 4600 	mov	a,#0x01
      001219 B5 0F 07         [24] 4601 	cjne	a,_received_flag,00135$
                                   4602 ;	.\ecen4350_lcd_v4.c:857: received_flag = 0;
      00121C 75 0F 00         [24] 4603 	mov	_received_flag,#0x00
                                   4604 ;	.\ecen4350_lcd_v4.c:858: return received_byte;
      00121F 85 0E 82         [24] 4605 	mov	dpl,_received_byte
      001222 22               [24] 4606 	ret
      001223                       4607 00135$:
                                   4608 ;	.\ecen4350_lcd_v4.c:860: else if (colloc == 0xE0)
      001223 74 E0            [12] 4609 	mov	a,#0xe0
      001225 B5 08 15         [24] 4610 	cjne	a,_colloc,00132$
                                   4611 ;	.\ecen4350_lcd_v4.c:862: return (keypad[rowloc][0]);
      001228 E5 09            [12] 4612 	mov	a,_rowloc
      00122A 75 F0 04         [24] 4613 	mov	b,#0x04
      00122D A4               [48] 4614 	mul	ab
      00122E 24 5F            [12] 4615 	add	a,#_keypad
      001230 F5 82            [12] 4616 	mov	dpl,a
      001232 74 5D            [12] 4617 	mov	a,#(_keypad >> 8)
      001234 35 F0            [12] 4618 	addc	a,b
      001236 F5 83            [12] 4619 	mov	dph,a
      001238 E4               [12] 4620 	clr	a
      001239 93               [24] 4621 	movc	a,@a+dptr
      00123A F5 82            [12] 4622 	mov	dpl,a
      00123C 22               [24] 4623 	ret
      00123D                       4624 00132$:
                                   4625 ;	.\ecen4350_lcd_v4.c:864: else if (colloc == 0xD0)
      00123D 74 D0            [12] 4626 	mov	a,#0xd0
      00123F B5 08 18         [24] 4627 	cjne	a,_colloc,00129$
                                   4628 ;	.\ecen4350_lcd_v4.c:866: return (keypad[rowloc][1]);
      001242 E5 09            [12] 4629 	mov	a,_rowloc
      001244 75 F0 04         [24] 4630 	mov	b,#0x04
      001247 A4               [48] 4631 	mul	ab
      001248 24 5F            [12] 4632 	add	a,#_keypad
      00124A FE               [12] 4633 	mov	r6,a
      00124B 74 5D            [12] 4634 	mov	a,#(_keypad >> 8)
      00124D 35 F0            [12] 4635 	addc	a,b
      00124F FF               [12] 4636 	mov	r7,a
      001250 8E 82            [24] 4637 	mov	dpl,r6
      001252 8F 83            [24] 4638 	mov	dph,r7
      001254 A3               [24] 4639 	inc	dptr
      001255 E4               [12] 4640 	clr	a
      001256 93               [24] 4641 	movc	a,@a+dptr
      001257 F5 82            [12] 4642 	mov	dpl,a
      001259 22               [24] 4643 	ret
      00125A                       4644 00129$:
                                   4645 ;	.\ecen4350_lcd_v4.c:868: else if (colloc == 0xB0)
      00125A 74 B0            [12] 4646 	mov	a,#0xb0
      00125C B5 08 19         [24] 4647 	cjne	a,_colloc,00126$
                                   4648 ;	.\ecen4350_lcd_v4.c:870: return (keypad[rowloc][2]);
      00125F E5 09            [12] 4649 	mov	a,_rowloc
      001261 75 F0 04         [24] 4650 	mov	b,#0x04
      001264 A4               [48] 4651 	mul	ab
      001265 24 5F            [12] 4652 	add	a,#_keypad
      001267 FE               [12] 4653 	mov	r6,a
      001268 74 5D            [12] 4654 	mov	a,#(_keypad >> 8)
      00126A 35 F0            [12] 4655 	addc	a,b
      00126C FF               [12] 4656 	mov	r7,a
      00126D 8E 82            [24] 4657 	mov	dpl,r6
      00126F 8F 83            [24] 4658 	mov	dph,r7
      001271 A3               [24] 4659 	inc	dptr
      001272 A3               [24] 4660 	inc	dptr
      001273 E4               [12] 4661 	clr	a
      001274 93               [24] 4662 	movc	a,@a+dptr
      001275 F5 82            [12] 4663 	mov	dpl,a
      001277 22               [24] 4664 	ret
      001278                       4665 00126$:
                                   4666 ;	.\ecen4350_lcd_v4.c:874: return (keypad[rowloc][3]);
      001278 E5 09            [12] 4667 	mov	a,_rowloc
      00127A 75 F0 04         [24] 4668 	mov	b,#0x04
      00127D A4               [48] 4669 	mul	ab
      00127E 24 5F            [12] 4670 	add	a,#_keypad
      001280 FE               [12] 4671 	mov	r6,a
      001281 74 5D            [12] 4672 	mov	a,#(_keypad >> 8)
      001283 35 F0            [12] 4673 	addc	a,b
      001285 FF               [12] 4674 	mov	r7,a
      001286 8E 82            [24] 4675 	mov	dpl,r6
      001288 8F 83            [24] 4676 	mov	dph,r7
      00128A A3               [24] 4677 	inc	dptr
      00128B A3               [24] 4678 	inc	dptr
      00128C A3               [24] 4679 	inc	dptr
      00128D E4               [12] 4680 	clr	a
      00128E 93               [24] 4681 	movc	a,@a+dptr
                                   4682 ;	.\ecen4350_lcd_v4.c:876: }
      00128F F5 82            [12] 4683 	mov	dpl,a
      001291 22               [24] 4684 	ret
                                   4685 ;------------------------------------------------------------
                                   4686 ;Allocation info for local variables in function 'reverse'
                                   4687 ;------------------------------------------------------------
                                   4688 ;d                         Allocated to registers r7 
                                   4689 ;rev                       Allocated to registers r5 r6 
                                   4690 ;val                       Allocated to registers r1 r2 
                                   4691 ;------------------------------------------------------------
                                   4692 ;	.\ecen4350_lcd_v4.c:878: unsigned int reverse(unsigned char d)
                                   4693 ;	-----------------------------------------
                                   4694 ;	 function reverse
                                   4695 ;	-----------------------------------------
      001292                       4696 _reverse:
      001292 AF 82            [24] 4697 	mov	r7,dpl
                                   4698 ;	.\ecen4350_lcd_v4.c:880: unsigned int rev = 0;
      001294 7D 00            [12] 4699 	mov	r5,#0x00
      001296 7E 00            [12] 4700 	mov	r6,#0x00
                                   4701 ;	.\ecen4350_lcd_v4.c:882: while (d >= 1)
      001298                       4702 00101$:
      001298 BF 01 00         [24] 4703 	cjne	r7,#0x01,00114$
      00129B                       4704 00114$:
      00129B 40 60            [24] 4705 	jc	00103$
                                   4706 ;	.\ecen4350_lcd_v4.c:885: val = d % 10;
      00129D 8F 03            [24] 4707 	mov	ar3,r7
      00129F 7C 00            [12] 4708 	mov	r4,#0x00
      0012A1 75 6B 0A         [24] 4709 	mov	__modsint_PARM_2,#0x0a
                                   4710 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0012A4 8C 6C            [24] 4711 	mov	(__modsint_PARM_2 + 1),r4
      0012A6 8B 82            [24] 4712 	mov	dpl,r3
      0012A8 8C 83            [24] 4713 	mov	dph,r4
      0012AA C0 06            [24] 4714 	push	ar6
      0012AC C0 05            [24] 4715 	push	ar5
      0012AE C0 04            [24] 4716 	push	ar4
      0012B0 C0 03            [24] 4717 	push	ar3
      0012B2 12 57 F2         [24] 4718 	lcall	__modsint
      0012B5 A9 82            [24] 4719 	mov	r1,dpl
      0012B7 AA 83            [24] 4720 	mov	r2,dph
      0012B9 D0 03            [24] 4721 	pop	ar3
      0012BB D0 04            [24] 4722 	pop	ar4
                                   4723 ;	.\ecen4350_lcd_v4.c:886: d = d / 10;
      0012BD 75 6B 0A         [24] 4724 	mov	__divsint_PARM_2,#0x0a
      0012C0 75 6C 00         [24] 4725 	mov	(__divsint_PARM_2 + 1),#0x00
      0012C3 8B 82            [24] 4726 	mov	dpl,r3
      0012C5 8C 83            [24] 4727 	mov	dph,r4
      0012C7 C0 02            [24] 4728 	push	ar2
      0012C9 C0 01            [24] 4729 	push	ar1
      0012CB 12 58 28         [24] 4730 	lcall	__divsint
      0012CE AB 82            [24] 4731 	mov	r3,dpl
      0012D0 D0 01            [24] 4732 	pop	ar1
      0012D2 D0 02            [24] 4733 	pop	ar2
      0012D4 D0 05            [24] 4734 	pop	ar5
      0012D6 D0 06            [24] 4735 	pop	ar6
      0012D8 8B 07            [24] 4736 	mov	ar7,r3
                                   4737 ;	.\ecen4350_lcd_v4.c:887: rev = rev * 10 + val;
      0012DA 8D 6B            [24] 4738 	mov	__mulint_PARM_2,r5
      0012DC 8E 6C            [24] 4739 	mov	(__mulint_PARM_2 + 1),r6
      0012DE 90 00 0A         [24] 4740 	mov	dptr,#0x000a
      0012E1 C0 07            [24] 4741 	push	ar7
      0012E3 C0 02            [24] 4742 	push	ar2
      0012E5 C0 01            [24] 4743 	push	ar1
      0012E7 12 57 6C         [24] 4744 	lcall	__mulint
      0012EA E5 82            [12] 4745 	mov	a,dpl
      0012EC 85 83 F0         [24] 4746 	mov	b,dph
      0012EF D0 01            [24] 4747 	pop	ar1
      0012F1 D0 02            [24] 4748 	pop	ar2
      0012F3 D0 07            [24] 4749 	pop	ar7
      0012F5 29               [12] 4750 	add	a,r1
      0012F6 FD               [12] 4751 	mov	r5,a
      0012F7 EA               [12] 4752 	mov	a,r2
      0012F8 35 F0            [12] 4753 	addc	a,b
      0012FA FE               [12] 4754 	mov	r6,a
      0012FB 80 9B            [24] 4755 	sjmp	00101$
      0012FD                       4756 00103$:
                                   4757 ;	.\ecen4350_lcd_v4.c:889: return rev;
      0012FD 8D 82            [24] 4758 	mov	dpl,r5
      0012FF 8E 83            [24] 4759 	mov	dph,r6
                                   4760 ;	.\ecen4350_lcd_v4.c:890: }
      001301 22               [24] 4761 	ret
                                   4762 ;------------------------------------------------------------
                                   4763 ;Allocation info for local variables in function 'reverse16'
                                   4764 ;------------------------------------------------------------
                                   4765 ;d                         Allocated to registers r6 r7 
                                   4766 ;rev                       Allocated to registers r4 r5 
                                   4767 ;val                       Allocated to registers r2 r3 
                                   4768 ;------------------------------------------------------------
                                   4769 ;	.\ecen4350_lcd_v4.c:892: unsigned int reverse16(unsigned int d)
                                   4770 ;	-----------------------------------------
                                   4771 ;	 function reverse16
                                   4772 ;	-----------------------------------------
      001302                       4773 _reverse16:
      001302 AE 82            [24] 4774 	mov	r6,dpl
      001304 AF 83            [24] 4775 	mov	r7,dph
                                   4776 ;	.\ecen4350_lcd_v4.c:894: unsigned int rev = 0;
      001306 7C 00            [12] 4777 	mov	r4,#0x00
      001308 7D 00            [12] 4778 	mov	r5,#0x00
                                   4779 ;	.\ecen4350_lcd_v4.c:896: while (d >= 1)
      00130A                       4780 00101$:
      00130A C3               [12] 4781 	clr	c
      00130B EE               [12] 4782 	mov	a,r6
      00130C 94 01            [12] 4783 	subb	a,#0x01
      00130E EF               [12] 4784 	mov	a,r7
      00130F 94 00            [12] 4785 	subb	a,#0x00
      001311 40 69            [24] 4786 	jc	00103$
                                   4787 ;	.\ecen4350_lcd_v4.c:899: val = d % 10;
      001313 75 6B 0A         [24] 4788 	mov	__moduint_PARM_2,#0x0a
      001316 75 6C 00         [24] 4789 	mov	(__moduint_PARM_2 + 1),#0x00
      001319 8E 82            [24] 4790 	mov	dpl,r6
      00131B 8F 83            [24] 4791 	mov	dph,r7
      00131D C0 07            [24] 4792 	push	ar7
      00131F C0 06            [24] 4793 	push	ar6
      001321 C0 05            [24] 4794 	push	ar5
      001323 C0 04            [24] 4795 	push	ar4
      001325 12 57 89         [24] 4796 	lcall	__moduint
      001328 AA 82            [24] 4797 	mov	r2,dpl
      00132A AB 83            [24] 4798 	mov	r3,dph
      00132C D0 04            [24] 4799 	pop	ar4
      00132E D0 05            [24] 4800 	pop	ar5
      001330 D0 06            [24] 4801 	pop	ar6
      001332 D0 07            [24] 4802 	pop	ar7
                                   4803 ;	.\ecen4350_lcd_v4.c:900: d = d / 10;
      001334 75 6B 0A         [24] 4804 	mov	__divuint_PARM_2,#0x0a
      001337 75 6C 00         [24] 4805 	mov	(__divuint_PARM_2 + 1),#0x00
      00133A 8E 82            [24] 4806 	mov	dpl,r6
      00133C 8F 83            [24] 4807 	mov	dph,r7
      00133E C0 05            [24] 4808 	push	ar5
      001340 C0 04            [24] 4809 	push	ar4
      001342 C0 03            [24] 4810 	push	ar3
      001344 C0 02            [24] 4811 	push	ar2
      001346 12 57 43         [24] 4812 	lcall	__divuint
      001349 AE 82            [24] 4813 	mov	r6,dpl
      00134B AF 83            [24] 4814 	mov	r7,dph
      00134D D0 02            [24] 4815 	pop	ar2
      00134F D0 03            [24] 4816 	pop	ar3
      001351 D0 04            [24] 4817 	pop	ar4
      001353 D0 05            [24] 4818 	pop	ar5
                                   4819 ;	.\ecen4350_lcd_v4.c:901: rev = rev * 10 + val;
      001355 8C 6B            [24] 4820 	mov	__mulint_PARM_2,r4
      001357 8D 6C            [24] 4821 	mov	(__mulint_PARM_2 + 1),r5
      001359 90 00 0A         [24] 4822 	mov	dptr,#0x000a
      00135C C0 07            [24] 4823 	push	ar7
      00135E C0 06            [24] 4824 	push	ar6
      001360 C0 03            [24] 4825 	push	ar3
      001362 C0 02            [24] 4826 	push	ar2
      001364 12 57 6C         [24] 4827 	lcall	__mulint
      001367 E5 82            [12] 4828 	mov	a,dpl
      001369 85 83 F0         [24] 4829 	mov	b,dph
      00136C D0 02            [24] 4830 	pop	ar2
      00136E D0 03            [24] 4831 	pop	ar3
      001370 D0 06            [24] 4832 	pop	ar6
      001372 D0 07            [24] 4833 	pop	ar7
      001374 2A               [12] 4834 	add	a,r2
      001375 FC               [12] 4835 	mov	r4,a
      001376 EB               [12] 4836 	mov	a,r3
      001377 35 F0            [12] 4837 	addc	a,b
      001379 FD               [12] 4838 	mov	r5,a
      00137A 80 8E            [24] 4839 	sjmp	00101$
      00137C                       4840 00103$:
                                   4841 ;	.\ecen4350_lcd_v4.c:903: return rev;
      00137C 8C 82            [24] 4842 	mov	dpl,r4
      00137E 8D 83            [24] 4843 	mov	dph,r5
                                   4844 ;	.\ecen4350_lcd_v4.c:904: }
      001380 22               [24] 4845 	ret
                                   4846 ;------------------------------------------------------------
                                   4847 ;Allocation info for local variables in function 'hexToASCII'
                                   4848 ;------------------------------------------------------------
                                   4849 ;key                       Allocated to registers r7 
                                   4850 ;------------------------------------------------------------
                                   4851 ;	.\ecen4350_lcd_v4.c:906: unsigned char hexToASCII(unsigned char key) {
                                   4852 ;	-----------------------------------------
                                   4853 ;	 function hexToASCII
                                   4854 ;	-----------------------------------------
      001381                       4855 _hexToASCII:
                                   4856 ;	.\ecen4350_lcd_v4.c:907: if(key == 0x0) return '0';
      001381 E5 82            [12] 4857 	mov	a,dpl
      001383 FF               [12] 4858 	mov	r7,a
      001384 70 04            [24] 4859 	jnz	00102$
      001386 75 82 30         [24] 4860 	mov	dpl,#0x30
      001389 22               [24] 4861 	ret
      00138A                       4862 00102$:
                                   4863 ;	.\ecen4350_lcd_v4.c:908: if(key == 0x1) return '1';
      00138A BF 01 04         [24] 4864 	cjne	r7,#0x01,00104$
      00138D 75 82 31         [24] 4865 	mov	dpl,#0x31
      001390 22               [24] 4866 	ret
      001391                       4867 00104$:
                                   4868 ;	.\ecen4350_lcd_v4.c:909: if(key == 0x2) return '2';
      001391 BF 02 04         [24] 4869 	cjne	r7,#0x02,00106$
      001394 75 82 32         [24] 4870 	mov	dpl,#0x32
      001397 22               [24] 4871 	ret
      001398                       4872 00106$:
                                   4873 ;	.\ecen4350_lcd_v4.c:910: if(key == 0x3) return '3';
      001398 BF 03 04         [24] 4874 	cjne	r7,#0x03,00108$
      00139B 75 82 33         [24] 4875 	mov	dpl,#0x33
      00139E 22               [24] 4876 	ret
      00139F                       4877 00108$:
                                   4878 ;	.\ecen4350_lcd_v4.c:911: if(key == 0x4) return '4';
      00139F BF 04 04         [24] 4879 	cjne	r7,#0x04,00110$
      0013A2 75 82 34         [24] 4880 	mov	dpl,#0x34
      0013A5 22               [24] 4881 	ret
      0013A6                       4882 00110$:
                                   4883 ;	.\ecen4350_lcd_v4.c:912: if(key == 0x5) return '5';
      0013A6 BF 05 04         [24] 4884 	cjne	r7,#0x05,00112$
      0013A9 75 82 35         [24] 4885 	mov	dpl,#0x35
      0013AC 22               [24] 4886 	ret
      0013AD                       4887 00112$:
                                   4888 ;	.\ecen4350_lcd_v4.c:913: if(key == 0x6) return '6';
      0013AD BF 06 04         [24] 4889 	cjne	r7,#0x06,00114$
      0013B0 75 82 36         [24] 4890 	mov	dpl,#0x36
      0013B3 22               [24] 4891 	ret
      0013B4                       4892 00114$:
                                   4893 ;	.\ecen4350_lcd_v4.c:914: if(key == 0x7) return '7';
      0013B4 BF 07 04         [24] 4894 	cjne	r7,#0x07,00116$
      0013B7 75 82 37         [24] 4895 	mov	dpl,#0x37
      0013BA 22               [24] 4896 	ret
      0013BB                       4897 00116$:
                                   4898 ;	.\ecen4350_lcd_v4.c:915: if(key == 0x8) return '8';
      0013BB BF 08 04         [24] 4899 	cjne	r7,#0x08,00118$
      0013BE 75 82 38         [24] 4900 	mov	dpl,#0x38
      0013C1 22               [24] 4901 	ret
      0013C2                       4902 00118$:
                                   4903 ;	.\ecen4350_lcd_v4.c:916: if(key == 0x9) return '9';
      0013C2 BF 09 04         [24] 4904 	cjne	r7,#0x09,00120$
      0013C5 75 82 39         [24] 4905 	mov	dpl,#0x39
      0013C8 22               [24] 4906 	ret
      0013C9                       4907 00120$:
                                   4908 ;	.\ecen4350_lcd_v4.c:917: if(key == 0xA) return 'A';
      0013C9 BF 0A 04         [24] 4909 	cjne	r7,#0x0a,00122$
      0013CC 75 82 41         [24] 4910 	mov	dpl,#0x41
      0013CF 22               [24] 4911 	ret
      0013D0                       4912 00122$:
                                   4913 ;	.\ecen4350_lcd_v4.c:918: if(key == 0xB) return 'B';
      0013D0 BF 0B 04         [24] 4914 	cjne	r7,#0x0b,00124$
      0013D3 75 82 42         [24] 4915 	mov	dpl,#0x42
      0013D6 22               [24] 4916 	ret
      0013D7                       4917 00124$:
                                   4918 ;	.\ecen4350_lcd_v4.c:919: if(key == 0xC) return 'C';
      0013D7 BF 0C 04         [24] 4919 	cjne	r7,#0x0c,00126$
      0013DA 75 82 43         [24] 4920 	mov	dpl,#0x43
      0013DD 22               [24] 4921 	ret
      0013DE                       4922 00126$:
                                   4923 ;	.\ecen4350_lcd_v4.c:920: if(key == 0xD) return 'D';
      0013DE BF 0D 04         [24] 4924 	cjne	r7,#0x0d,00128$
      0013E1 75 82 44         [24] 4925 	mov	dpl,#0x44
      0013E4 22               [24] 4926 	ret
      0013E5                       4927 00128$:
                                   4928 ;	.\ecen4350_lcd_v4.c:921: if(key == 0xE) return 'E';
      0013E5 BF 0E 04         [24] 4929 	cjne	r7,#0x0e,00130$
      0013E8 75 82 45         [24] 4930 	mov	dpl,#0x45
      0013EB 22               [24] 4931 	ret
      0013EC                       4932 00130$:
                                   4933 ;	.\ecen4350_lcd_v4.c:922: if(key == 0xF) return 'F';
      0013EC BF 0F 04         [24] 4934 	cjne	r7,#0x0f,00132$
      0013EF 75 82 46         [24] 4935 	mov	dpl,#0x46
      0013F2 22               [24] 4936 	ret
      0013F3                       4937 00132$:
                                   4938 ;	.\ecen4350_lcd_v4.c:924: return 0xff;
      0013F3 75 82 FF         [24] 4939 	mov	dpl,#0xff
                                   4940 ;	.\ecen4350_lcd_v4.c:925: }
      0013F6 22               [24] 4941 	ret
                                   4942 ;------------------------------------------------------------
                                   4943 ;Allocation info for local variables in function 'ASCIItoHex'
                                   4944 ;------------------------------------------------------------
                                   4945 ;key                       Allocated to registers r7 
                                   4946 ;------------------------------------------------------------
                                   4947 ;	.\ecen4350_lcd_v4.c:927: unsigned char ASCIItoHex(unsigned char key) {
                                   4948 ;	-----------------------------------------
                                   4949 ;	 function ASCIItoHex
                                   4950 ;	-----------------------------------------
      0013F7                       4951 _ASCIItoHex:
      0013F7 AF 82            [24] 4952 	mov	r7,dpl
                                   4953 ;	.\ecen4350_lcd_v4.c:928: if(key == '0') return 0x0;
      0013F9 BF 30 04         [24] 4954 	cjne	r7,#0x30,00102$
      0013FC 75 82 00         [24] 4955 	mov	dpl,#0x00
      0013FF 22               [24] 4956 	ret
      001400                       4957 00102$:
                                   4958 ;	.\ecen4350_lcd_v4.c:929: if(key == '1') return 0x1;
      001400 BF 31 04         [24] 4959 	cjne	r7,#0x31,00104$
      001403 75 82 01         [24] 4960 	mov	dpl,#0x01
      001406 22               [24] 4961 	ret
      001407                       4962 00104$:
                                   4963 ;	.\ecen4350_lcd_v4.c:930: if(key == '2') return 0x2;
      001407 BF 32 04         [24] 4964 	cjne	r7,#0x32,00106$
      00140A 75 82 02         [24] 4965 	mov	dpl,#0x02
      00140D 22               [24] 4966 	ret
      00140E                       4967 00106$:
                                   4968 ;	.\ecen4350_lcd_v4.c:931: if(key == '3') return 0x3;
      00140E BF 33 04         [24] 4969 	cjne	r7,#0x33,00108$
      001411 75 82 03         [24] 4970 	mov	dpl,#0x03
      001414 22               [24] 4971 	ret
      001415                       4972 00108$:
                                   4973 ;	.\ecen4350_lcd_v4.c:932: if(key == '4') return 0x4;
      001415 BF 34 04         [24] 4974 	cjne	r7,#0x34,00110$
      001418 75 82 04         [24] 4975 	mov	dpl,#0x04
      00141B 22               [24] 4976 	ret
      00141C                       4977 00110$:
                                   4978 ;	.\ecen4350_lcd_v4.c:933: if(key == '5') return 0x5;
      00141C BF 35 04         [24] 4979 	cjne	r7,#0x35,00112$
      00141F 75 82 05         [24] 4980 	mov	dpl,#0x05
      001422 22               [24] 4981 	ret
      001423                       4982 00112$:
                                   4983 ;	.\ecen4350_lcd_v4.c:934: if(key == '6') return 0x6;
      001423 BF 36 04         [24] 4984 	cjne	r7,#0x36,00114$
      001426 75 82 06         [24] 4985 	mov	dpl,#0x06
      001429 22               [24] 4986 	ret
      00142A                       4987 00114$:
                                   4988 ;	.\ecen4350_lcd_v4.c:935: if(key == '7') return 0x7;
      00142A BF 37 04         [24] 4989 	cjne	r7,#0x37,00116$
      00142D 75 82 07         [24] 4990 	mov	dpl,#0x07
      001430 22               [24] 4991 	ret
      001431                       4992 00116$:
                                   4993 ;	.\ecen4350_lcd_v4.c:936: if(key == '8') return 0x8;
      001431 BF 38 04         [24] 4994 	cjne	r7,#0x38,00118$
      001434 75 82 08         [24] 4995 	mov	dpl,#0x08
      001437 22               [24] 4996 	ret
      001438                       4997 00118$:
                                   4998 ;	.\ecen4350_lcd_v4.c:937: if(key == '9') return 0x9;
      001438 BF 39 04         [24] 4999 	cjne	r7,#0x39,00120$
      00143B 75 82 09         [24] 5000 	mov	dpl,#0x09
      00143E 22               [24] 5001 	ret
      00143F                       5002 00120$:
                                   5003 ;	.\ecen4350_lcd_v4.c:938: if(key == 'A') return 0xA;
      00143F BF 41 04         [24] 5004 	cjne	r7,#0x41,00122$
      001442 75 82 0A         [24] 5005 	mov	dpl,#0x0a
      001445 22               [24] 5006 	ret
      001446                       5007 00122$:
                                   5008 ;	.\ecen4350_lcd_v4.c:939: if(key == 'B') return 0xB;
      001446 BF 42 04         [24] 5009 	cjne	r7,#0x42,00124$
      001449 75 82 0B         [24] 5010 	mov	dpl,#0x0b
      00144C 22               [24] 5011 	ret
      00144D                       5012 00124$:
                                   5013 ;	.\ecen4350_lcd_v4.c:940: if(key == 'C') return 0xC;
      00144D BF 43 04         [24] 5014 	cjne	r7,#0x43,00126$
      001450 75 82 0C         [24] 5015 	mov	dpl,#0x0c
      001453 22               [24] 5016 	ret
      001454                       5017 00126$:
                                   5018 ;	.\ecen4350_lcd_v4.c:941: if(key == 'D') return 0xD;
      001454 BF 44 04         [24] 5019 	cjne	r7,#0x44,00128$
      001457 75 82 0D         [24] 5020 	mov	dpl,#0x0d
      00145A 22               [24] 5021 	ret
      00145B                       5022 00128$:
                                   5023 ;	.\ecen4350_lcd_v4.c:942: if(key == 'E') return 0xE;
      00145B BF 45 04         [24] 5024 	cjne	r7,#0x45,00130$
      00145E 75 82 0E         [24] 5025 	mov	dpl,#0x0e
      001461 22               [24] 5026 	ret
      001462                       5027 00130$:
                                   5028 ;	.\ecen4350_lcd_v4.c:943: if(key == 'F') return 0xF;
      001462 BF 46 04         [24] 5029 	cjne	r7,#0x46,00132$
      001465 75 82 0F         [24] 5030 	mov	dpl,#0x0f
      001468 22               [24] 5031 	ret
      001469                       5032 00132$:
                                   5033 ;	.\ecen4350_lcd_v4.c:945: return 0xff;
      001469 75 82 FF         [24] 5034 	mov	dpl,#0xff
                                   5035 ;	.\ecen4350_lcd_v4.c:946: }
      00146C 22               [24] 5036 	ret
                                   5037 ;------------------------------------------------------------
                                   5038 ;Allocation info for local variables in function 'asciiToDec'
                                   5039 ;------------------------------------------------------------
                                   5040 ;d                         Allocated to registers 
                                   5041 ;val                       Allocated to registers r4 
                                   5042 ;id                        Allocated to registers r6 r7 
                                   5043 ;------------------------------------------------------------
                                   5044 ;	.\ecen4350_lcd_v4.c:948: void asciiToDec(unsigned char d)
                                   5045 ;	-----------------------------------------
                                   5046 ;	 function asciiToDec
                                   5047 ;	-----------------------------------------
      00146D                       5048 _asciiToDec:
                                   5049 ;	.\ecen4350_lcd_v4.c:952: id = reverse(d);
      00146D 12 12 92         [24] 5050 	lcall	_reverse
      001470 AE 82            [24] 5051 	mov	r6,dpl
      001472 AF 83            [24] 5052 	mov	r7,dph
                                   5053 ;	.\ecen4350_lcd_v4.c:953: while (id >= 1)
      001474                       5054 00101$:
      001474 C3               [12] 5055 	clr	c
      001475 EE               [12] 5056 	mov	a,r6
      001476 94 01            [12] 5057 	subb	a,#0x01
      001478 EF               [12] 5058 	mov	a,r7
      001479 94 00            [12] 5059 	subb	a,#0x00
      00147B 40 3E            [24] 5060 	jc	00103$
                                   5061 ;	.\ecen4350_lcd_v4.c:956: val = id % 10;
      00147D 75 6B 0A         [24] 5062 	mov	__moduint_PARM_2,#0x0a
      001480 75 6C 00         [24] 5063 	mov	(__moduint_PARM_2 + 1),#0x00
      001483 8E 82            [24] 5064 	mov	dpl,r6
      001485 8F 83            [24] 5065 	mov	dph,r7
      001487 C0 07            [24] 5066 	push	ar7
      001489 C0 06            [24] 5067 	push	ar6
      00148B 12 57 89         [24] 5068 	lcall	__moduint
      00148E AC 82            [24] 5069 	mov	r4,dpl
      001490 D0 06            [24] 5070 	pop	ar6
      001492 D0 07            [24] 5071 	pop	ar7
                                   5072 ;	.\ecen4350_lcd_v4.c:957: id = id / 10;
      001494 75 6B 0A         [24] 5073 	mov	__divuint_PARM_2,#0x0a
      001497 75 6C 00         [24] 5074 	mov	(__divuint_PARM_2 + 1),#0x00
      00149A 8E 82            [24] 5075 	mov	dpl,r6
      00149C 8F 83            [24] 5076 	mov	dph,r7
      00149E C0 04            [24] 5077 	push	ar4
      0014A0 12 57 43         [24] 5078 	lcall	__divuint
      0014A3 AE 82            [24] 5079 	mov	r6,dpl
      0014A5 AF 83            [24] 5080 	mov	r7,dph
      0014A7 D0 04            [24] 5081 	pop	ar4
                                   5082 ;	.\ecen4350_lcd_v4.c:958: write(val + '0');
      0014A9 74 30            [12] 5083 	mov	a,#0x30
      0014AB 2C               [12] 5084 	add	a,r4
      0014AC F5 82            [12] 5085 	mov	dpl,a
      0014AE C0 07            [24] 5086 	push	ar7
      0014B0 C0 06            [24] 5087 	push	ar6
      0014B2 12 10 05         [24] 5088 	lcall	_write
      0014B5 D0 06            [24] 5089 	pop	ar6
      0014B7 D0 07            [24] 5090 	pop	ar7
      0014B9 80 B9            [24] 5091 	sjmp	00101$
      0014BB                       5092 00103$:
                                   5093 ;	.\ecen4350_lcd_v4.c:960: write('\n');
      0014BB 75 82 0A         [24] 5094 	mov	dpl,#0x0a
                                   5095 ;	.\ecen4350_lcd_v4.c:961: }
      0014BE 02 10 05         [24] 5096 	ljmp	_write
                                   5097 ;------------------------------------------------------------
                                   5098 ;Allocation info for local variables in function 'asciiToHex'
                                   5099 ;------------------------------------------------------------
                                   5100 ;d                         Allocated to registers r7 
                                   5101 ;val                       Allocated to registers r2 
                                   5102 ;store                     Allocated with name '_asciiToHex_store_65536_519'
                                   5103 ;i                         Allocated to registers r6 
                                   5104 ;------------------------------------------------------------
                                   5105 ;	.\ecen4350_lcd_v4.c:963: void asciiToHex(unsigned char d)
                                   5106 ;	-----------------------------------------
                                   5107 ;	 function asciiToHex
                                   5108 ;	-----------------------------------------
      0014C1                       5109 _asciiToHex:
      0014C1 AF 82            [24] 5110 	mov	r7,dpl
                                   5111 ;	.\ecen4350_lcd_v4.c:968: store[0] = 0;
      0014C3 75 56 00         [24] 5112 	mov	_asciiToHex_store_65536_519,#0x00
                                   5113 ;	.\ecen4350_lcd_v4.c:969: store[1] = 0;
      0014C6 75 57 00         [24] 5114 	mov	(_asciiToHex_store_65536_519 + 0x0001),#0x00
                                   5115 ;	.\ecen4350_lcd_v4.c:970: while (d >= 1)
      0014C9 7E 00            [12] 5116 	mov	r6,#0x00
      0014CB                       5117 00104$:
      0014CB BF 01 00         [24] 5118 	cjne	r7,#0x01,00122$
      0014CE                       5119 00122$:
      0014CE 40 5A            [24] 5120 	jc	00106$
                                   5121 ;	.\ecen4350_lcd_v4.c:973: val = d % 16;
      0014D0 8F 04            [24] 5122 	mov	ar4,r7
      0014D2 7D 00            [12] 5123 	mov	r5,#0x00
      0014D4 74 0F            [12] 5124 	mov	a,#0x0f
      0014D6 5C               [12] 5125 	anl	a,r4
      0014D7 FA               [12] 5126 	mov	r2,a
                                   5127 ;	.\ecen4350_lcd_v4.c:974: d = d / 16;
      0014D8 75 6B 10         [24] 5128 	mov	__divsint_PARM_2,#0x10
                                   5129 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0014DB 8D 6C            [24] 5130 	mov	(__divsint_PARM_2 + 1),r5
      0014DD 8C 82            [24] 5131 	mov	dpl,r4
      0014DF 8D 83            [24] 5132 	mov	dph,r5
      0014E1 C0 06            [24] 5133 	push	ar6
      0014E3 C0 02            [24] 5134 	push	ar2
      0014E5 12 58 28         [24] 5135 	lcall	__divsint
      0014E8 AC 82            [24] 5136 	mov	r4,dpl
      0014EA D0 02            [24] 5137 	pop	ar2
      0014EC D0 06            [24] 5138 	pop	ar6
      0014EE 8C 07            [24] 5139 	mov	ar7,r4
                                   5140 ;	.\ecen4350_lcd_v4.c:975: if (val <= 9)
      0014F0 EA               [12] 5141 	mov	a,r2
      0014F1 24 F6            [12] 5142 	add	a,#0xff - 0x09
      0014F3 40 0C            [24] 5143 	jc	00102$
                                   5144 ;	.\ecen4350_lcd_v4.c:978: store[i] = val + '0';
      0014F5 EE               [12] 5145 	mov	a,r6
      0014F6 24 56            [12] 5146 	add	a,#_asciiToHex_store_65536_519
      0014F8 F9               [12] 5147 	mov	r1,a
      0014F9 8A 05            [24] 5148 	mov	ar5,r2
      0014FB 74 30            [12] 5149 	mov	a,#0x30
      0014FD 2D               [12] 5150 	add	a,r5
      0014FE F7               [12] 5151 	mov	@r1,a
      0014FF 80 26            [24] 5152 	sjmp	00103$
      001501                       5153 00102$:
                                   5154 ;	.\ecen4350_lcd_v4.c:982: store[i] = (val % 10) + 'A';
      001501 EE               [12] 5155 	mov	a,r6
      001502 24 56            [12] 5156 	add	a,#_asciiToHex_store_65536_519
      001504 F9               [12] 5157 	mov	r1,a
      001505 7D 00            [12] 5158 	mov	r5,#0x00
      001507 75 6B 0A         [24] 5159 	mov	__modsint_PARM_2,#0x0a
                                   5160 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00150A 8D 6C            [24] 5161 	mov	(__modsint_PARM_2 + 1),r5
      00150C 8A 82            [24] 5162 	mov	dpl,r2
      00150E 8D 83            [24] 5163 	mov	dph,r5
      001510 C0 07            [24] 5164 	push	ar7
      001512 C0 06            [24] 5165 	push	ar6
      001514 C0 01            [24] 5166 	push	ar1
      001516 12 57 F2         [24] 5167 	lcall	__modsint
      001519 AC 82            [24] 5168 	mov	r4,dpl
      00151B AD 83            [24] 5169 	mov	r5,dph
      00151D D0 01            [24] 5170 	pop	ar1
      00151F D0 06            [24] 5171 	pop	ar6
      001521 D0 07            [24] 5172 	pop	ar7
      001523 74 41            [12] 5173 	mov	a,#0x41
      001525 2C               [12] 5174 	add	a,r4
      001526 F7               [12] 5175 	mov	@r1,a
      001527                       5176 00103$:
                                   5177 ;	.\ecen4350_lcd_v4.c:984: i++;
      001527 0E               [12] 5178 	inc	r6
      001528 80 A1            [24] 5179 	sjmp	00104$
      00152A                       5180 00106$:
                                   5181 ;	.\ecen4350_lcd_v4.c:986: write(store[1]);
      00152A 85 57 82         [24] 5182 	mov	dpl,(_asciiToHex_store_65536_519 + 0x0001)
      00152D 12 10 05         [24] 5183 	lcall	_write
                                   5184 ;	.\ecen4350_lcd_v4.c:987: write(store[0]);
      001530 85 56 82         [24] 5185 	mov	dpl,_asciiToHex_store_65536_519
                                   5186 ;	.\ecen4350_lcd_v4.c:989: }
      001533 02 10 05         [24] 5187 	ljmp	_write
                                   5188 ;------------------------------------------------------------
                                   5189 ;Allocation info for local variables in function 'print4Hex'
                                   5190 ;------------------------------------------------------------
                                   5191 ;num                       Allocated to registers 
                                   5192 ;------------------------------------------------------------
                                   5193 ;	.\ecen4350_lcd_v4.c:992: void print4Hex(unsigned char num) {
                                   5194 ;	-----------------------------------------
                                   5195 ;	 function print4Hex
                                   5196 ;	-----------------------------------------
      001536                       5197 _print4Hex:
                                   5198 ;	.\ecen4350_lcd_v4.c:993: write((u8) hexToASCII(num));
      001536 12 13 81         [24] 5199 	lcall	_hexToASCII
                                   5200 ;	.\ecen4350_lcd_v4.c:994: }
      001539 02 10 05         [24] 5201 	ljmp	_write
                                   5202 ;------------------------------------------------------------
                                   5203 ;Allocation info for local variables in function 'print8Hex'
                                   5204 ;------------------------------------------------------------
                                   5205 ;num                       Allocated to registers r7 
                                   5206 ;------------------------------------------------------------
                                   5207 ;	.\ecen4350_lcd_v4.c:996: void print8Hex(unsigned char num) {
                                   5208 ;	-----------------------------------------
                                   5209 ;	 function print8Hex
                                   5210 ;	-----------------------------------------
      00153C                       5211 _print8Hex:
                                   5212 ;	.\ecen4350_lcd_v4.c:997: print4Hex(num >> 4);
      00153C E5 82            [12] 5213 	mov	a,dpl
      00153E FF               [12] 5214 	mov	r7,a
      00153F C4               [12] 5215 	swap	a
      001540 54 0F            [12] 5216 	anl	a,#0x0f
      001542 F5 82            [12] 5217 	mov	dpl,a
      001544 C0 07            [24] 5218 	push	ar7
      001546 12 15 36         [24] 5219 	lcall	_print4Hex
      001549 D0 07            [24] 5220 	pop	ar7
                                   5221 ;	.\ecen4350_lcd_v4.c:998: print4Hex(num & 0x0F);
      00154B 74 0F            [12] 5222 	mov	a,#0x0f
      00154D 5F               [12] 5223 	anl	a,r7
      00154E F5 82            [12] 5224 	mov	dpl,a
                                   5225 ;	.\ecen4350_lcd_v4.c:999: }
      001550 02 15 36         [24] 5226 	ljmp	_print4Hex
                                   5227 ;------------------------------------------------------------
                                   5228 ;Allocation info for local variables in function 'print16Hex'
                                   5229 ;------------------------------------------------------------
                                   5230 ;num                       Allocated to registers r6 r7 
                                   5231 ;------------------------------------------------------------
                                   5232 ;	.\ecen4350_lcd_v4.c:1001: void print16Hex(unsigned int num) {
                                   5233 ;	-----------------------------------------
                                   5234 ;	 function print16Hex
                                   5235 ;	-----------------------------------------
      001553                       5236 _print16Hex:
      001553 AE 82            [24] 5237 	mov	r6,dpl
      001555 AF 83            [24] 5238 	mov	r7,dph
                                   5239 ;	.\ecen4350_lcd_v4.c:1002: print8Hex((unsigned char)(num >> 8));
      001557 8F 82            [24] 5240 	mov	dpl,r7
      001559 C0 07            [24] 5241 	push	ar7
      00155B C0 06            [24] 5242 	push	ar6
      00155D 12 15 3C         [24] 5243 	lcall	_print8Hex
      001560 D0 06            [24] 5244 	pop	ar6
      001562 D0 07            [24] 5245 	pop	ar7
                                   5246 ;	.\ecen4350_lcd_v4.c:1003: print8Hex((unsigned char)num);
      001564 8E 82            [24] 5247 	mov	dpl,r6
                                   5248 ;	.\ecen4350_lcd_v4.c:1004: }
      001566 02 15 3C         [24] 5249 	ljmp	_print8Hex
                                   5250 ;------------------------------------------------------------
                                   5251 ;Allocation info for local variables in function 'print16Dec'
                                   5252 ;------------------------------------------------------------
                                   5253 ;num                       Allocated to registers 
                                   5254 ;val                       Allocated to registers r4 r5 
                                   5255 ;id                        Allocated to registers r6 r7 
                                   5256 ;------------------------------------------------------------
                                   5257 ;	.\ecen4350_lcd_v4.c:1006: void print16Dec(unsigned int num) {
                                   5258 ;	-----------------------------------------
                                   5259 ;	 function print16Dec
                                   5260 ;	-----------------------------------------
      001569                       5261 _print16Dec:
                                   5262 ;	.\ecen4350_lcd_v4.c:1009: id = reverse16(num);
      001569 12 13 02         [24] 5263 	lcall	_reverse16
      00156C AE 82            [24] 5264 	mov	r6,dpl
      00156E AF 83            [24] 5265 	mov	r7,dph
                                   5266 ;	.\ecen4350_lcd_v4.c:1010: while (id >= 1) {
      001570                       5267 00101$:
      001570 C3               [12] 5268 	clr	c
      001571 EE               [12] 5269 	mov	a,r6
      001572 94 01            [12] 5270 	subb	a,#0x01
      001574 EF               [12] 5271 	mov	a,r7
      001575 94 00            [12] 5272 	subb	a,#0x00
      001577 40 44            [24] 5273 	jc	00104$
                                   5274 ;	.\ecen4350_lcd_v4.c:1011: val = id % 10;
      001579 75 6B 0A         [24] 5275 	mov	__moduint_PARM_2,#0x0a
      00157C 75 6C 00         [24] 5276 	mov	(__moduint_PARM_2 + 1),#0x00
      00157F 8E 82            [24] 5277 	mov	dpl,r6
      001581 8F 83            [24] 5278 	mov	dph,r7
      001583 C0 07            [24] 5279 	push	ar7
      001585 C0 06            [24] 5280 	push	ar6
      001587 12 57 89         [24] 5281 	lcall	__moduint
      00158A AC 82            [24] 5282 	mov	r4,dpl
      00158C AD 83            [24] 5283 	mov	r5,dph
      00158E D0 06            [24] 5284 	pop	ar6
      001590 D0 07            [24] 5285 	pop	ar7
                                   5286 ;	.\ecen4350_lcd_v4.c:1012: id = id/10;
      001592 75 6B 0A         [24] 5287 	mov	__divuint_PARM_2,#0x0a
      001595 75 6C 00         [24] 5288 	mov	(__divuint_PARM_2 + 1),#0x00
      001598 8E 82            [24] 5289 	mov	dpl,r6
      00159A 8F 83            [24] 5290 	mov	dph,r7
      00159C C0 05            [24] 5291 	push	ar5
      00159E C0 04            [24] 5292 	push	ar4
      0015A0 12 57 43         [24] 5293 	lcall	__divuint
      0015A3 AE 82            [24] 5294 	mov	r6,dpl
      0015A5 AF 83            [24] 5295 	mov	r7,dph
      0015A7 D0 04            [24] 5296 	pop	ar4
      0015A9 D0 05            [24] 5297 	pop	ar5
                                   5298 ;	.\ecen4350_lcd_v4.c:1013: write(val + '0');
      0015AB 74 30            [12] 5299 	mov	a,#0x30
      0015AD 2C               [12] 5300 	add	a,r4
      0015AE F5 82            [12] 5301 	mov	dpl,a
      0015B0 C0 07            [24] 5302 	push	ar7
      0015B2 C0 06            [24] 5303 	push	ar6
      0015B4 12 10 05         [24] 5304 	lcall	_write
      0015B7 D0 06            [24] 5305 	pop	ar6
      0015B9 D0 07            [24] 5306 	pop	ar7
      0015BB 80 B3            [24] 5307 	sjmp	00101$
      0015BD                       5308 00104$:
                                   5309 ;	.\ecen4350_lcd_v4.c:1015: }
      0015BD 22               [24] 5310 	ret
                                   5311 ;------------------------------------------------------------
                                   5312 ;Allocation info for local variables in function 'print8ASCII'
                                   5313 ;------------------------------------------------------------
                                   5314 ;num                       Allocated to registers 
                                   5315 ;------------------------------------------------------------
                                   5316 ;	.\ecen4350_lcd_v4.c:1017: void print8ASCII(unsigned char num) {
                                   5317 ;	-----------------------------------------
                                   5318 ;	 function print8ASCII
                                   5319 ;	-----------------------------------------
      0015BE                       5320 _print8ASCII:
                                   5321 ;	.\ecen4350_lcd_v4.c:1018: write((u8)num);
                                   5322 ;	.\ecen4350_lcd_v4.c:1019: }
      0015BE 02 10 05         [24] 5323 	ljmp	_write
                                   5324 ;------------------------------------------------------------
                                   5325 ;Allocation info for local variables in function 'print16ASCII'
                                   5326 ;------------------------------------------------------------
                                   5327 ;num                       Allocated to registers r6 r7 
                                   5328 ;------------------------------------------------------------
                                   5329 ;	.\ecen4350_lcd_v4.c:1021: void print16ASCII(unsigned int num) {
                                   5330 ;	-----------------------------------------
                                   5331 ;	 function print16ASCII
                                   5332 ;	-----------------------------------------
      0015C1                       5333 _print16ASCII:
      0015C1 AE 82            [24] 5334 	mov	r6,dpl
      0015C3 AF 83            [24] 5335 	mov	r7,dph
                                   5336 ;	.\ecen4350_lcd_v4.c:1022: print8ASCII((unsigned char)(num >> 8));
      0015C5 8F 82            [24] 5337 	mov	dpl,r7
      0015C7 C0 07            [24] 5338 	push	ar7
      0015C9 C0 06            [24] 5339 	push	ar6
      0015CB 12 15 BE         [24] 5340 	lcall	_print8ASCII
      0015CE D0 06            [24] 5341 	pop	ar6
      0015D0 D0 07            [24] 5342 	pop	ar7
                                   5343 ;	.\ecen4350_lcd_v4.c:1023: print8ASCII((unsigned char)num);
      0015D2 8E 82            [24] 5344 	mov	dpl,r6
                                   5345 ;	.\ecen4350_lcd_v4.c:1024: }
      0015D4 02 15 BE         [24] 5346 	ljmp	_print8ASCII
                                   5347 ;------------------------------------------------------------
                                   5348 ;Allocation info for local variables in function 'writeSomeLines'
                                   5349 ;------------------------------------------------------------
                                   5350 ;	.\ecen4350_lcd_v4.c:1027: void writeSomeLines()
                                   5351 ;	-----------------------------------------
                                   5352 ;	 function writeSomeLines
                                   5353 ;	-----------------------------------------
      0015D7                       5354 _writeSomeLines:
                                   5355 ;	.\ecen4350_lcd_v4.c:1029: setRotation(0);		//rotation 0 is for flat/flush LCD
      0015D7 75 82 00         [24] 5356 	mov	dpl,#0x00
      0015DA 12 05 83         [24] 5357 	lcall	_setRotation
                                   5358 ;	.\ecen4350_lcd_v4.c:1031: fillScreen(CYAN);
      0015DD 90 07 FF         [24] 5359 	mov	dptr,#0x07ff
      0015E0 12 0D 07         [24] 5360 	lcall	_fillScreen
                                   5361 ;	.\ecen4350_lcd_v4.c:1032: fillTop(BLACK);
      0015E3 90 00 00         [24] 5362 	mov	dptr,#0x0000
      0015E6 12 0C 21         [24] 5363 	lcall	_fillTop
                                   5364 ;	.\ecen4350_lcd_v4.c:1033: setTextSize(5);
      0015E9 75 82 05         [24] 5365 	mov	dpl,#0x05
      0015EC 12 05 6B         [24] 5366 	lcall	_setTextSize
                                   5367 ;	.\ecen4350_lcd_v4.c:1034: setTextColor(CYAN, BLACK);
      0015EF E4               [12] 5368 	clr	a
      0015F0 F5 6B            [12] 5369 	mov	_setTextColor_PARM_2,a
      0015F2 F5 6C            [12] 5370 	mov	(_setTextColor_PARM_2 + 1),a
      0015F4 90 07 FF         [24] 5371 	mov	dptr,#0x07ff
      0015F7 12 05 5E         [24] 5372 	lcall	_setTextColor
                                   5373 ;	.\ecen4350_lcd_v4.c:1035: setCursor(10,0);
      0015FA E4               [12] 5374 	clr	a
      0015FB F5 6B            [12] 5375 	mov	_setCursor_PARM_2,a
      0015FD F5 6C            [12] 5376 	mov	(_setCursor_PARM_2 + 1),a
      0015FF 90 00 0A         [24] 5377 	mov	dptr,#0x000a
      001602 12 05 51         [24] 5378 	lcall	_setCursor
                                   5379 ;	.\ecen4350_lcd_v4.c:1036: LCD_string_write("Welcome\n");
      001605 90 5D 90         [24] 5380 	mov	dptr,#___str_3
      001608 75 F0 80         [24] 5381 	mov	b,#0x80
      00160B 12 10 6B         [24] 5382 	lcall	_LCD_string_write
                                   5383 ;	.\ecen4350_lcd_v4.c:1037: setTextSize(2);
      00160E 75 82 02         [24] 5384 	mov	dpl,#0x02
      001611 12 05 6B         [24] 5385 	lcall	_setTextSize
                                   5386 ;	.\ecen4350_lcd_v4.c:1038: setTextColor(BLACK, CYAN);
      001614 75 6B FF         [24] 5387 	mov	_setTextColor_PARM_2,#0xff
      001617 75 6C 07         [24] 5388 	mov	(_setTextColor_PARM_2 + 1),#0x07
      00161A 90 00 00         [24] 5389 	mov	dptr,#0x0000
      00161D 12 05 5E         [24] 5390 	lcall	_setTextColor
                                   5391 ;	.\ecen4350_lcd_v4.c:1039: LCD_string_write("\n Tyler Zoucha\n  ECEN-4350\n  Fall 2021");
      001620 90 5D 99         [24] 5392 	mov	dptr,#___str_4
      001623 75 F0 80         [24] 5393 	mov	b,#0x80
      001626 12 10 6B         [24] 5394 	lcall	_LCD_string_write
                                   5395 ;	.\ecen4350_lcd_v4.c:1040: delay(40);
      001629 90 00 28         [24] 5396 	mov	dptr,#0x0028
                                   5397 ;	.\ecen4350_lcd_v4.c:1041: }
      00162C 02 01 87         [24] 5398 	ljmp	_delay
                                   5399 ;------------------------------------------------------------
                                   5400 ;Allocation info for local variables in function 'setColorDefault'
                                   5401 ;------------------------------------------------------------
                                   5402 ;	.\ecen4350_lcd_v4.c:1044: void setColorDefault() {
                                   5403 ;	-----------------------------------------
                                   5404 ;	 function setColorDefault
                                   5405 ;	-----------------------------------------
      00162F                       5406 _setColorDefault:
                                   5407 ;	.\ecen4350_lcd_v4.c:1045: setTextColor(colorText, colorBackground);
      00162F E4               [12] 5408 	clr	a
      001630 F5 6B            [12] 5409 	mov	_setTextColor_PARM_2,a
      001632 F5 6C            [12] 5410 	mov	(_setTextColor_PARM_2 + 1),a
      001634 90 07 FF         [24] 5411 	mov	dptr,#0x07ff
                                   5412 ;	.\ecen4350_lcd_v4.c:1046: } 
      001637 02 05 5E         [24] 5413 	ljmp	_setTextColor
                                   5414 ;------------------------------------------------------------
                                   5415 ;Allocation info for local variables in function 'setColorSelect'
                                   5416 ;------------------------------------------------------------
                                   5417 ;	.\ecen4350_lcd_v4.c:1048: void setColorSelect() {
                                   5418 ;	-----------------------------------------
                                   5419 ;	 function setColorSelect
                                   5420 ;	-----------------------------------------
      00163A                       5421 _setColorSelect:
                                   5422 ;	.\ecen4350_lcd_v4.c:1049: setTextColor(colorSelect, colorBackground);
      00163A E4               [12] 5423 	clr	a
      00163B F5 6B            [12] 5424 	mov	_setTextColor_PARM_2,a
      00163D F5 6C            [12] 5425 	mov	(_setTextColor_PARM_2 + 1),a
      00163F 90 F8 1F         [24] 5426 	mov	dptr,#0xf81f
                                   5427 ;	.\ecen4350_lcd_v4.c:1050: }
      001642 02 05 5E         [24] 5428 	ljmp	_setTextColor
                                   5429 ;------------------------------------------------------------
                                   5430 ;Allocation info for local variables in function 'setColorHighlight1'
                                   5431 ;------------------------------------------------------------
                                   5432 ;	.\ecen4350_lcd_v4.c:1052: void setColorHighlight1() {
                                   5433 ;	-----------------------------------------
                                   5434 ;	 function setColorHighlight1
                                   5435 ;	-----------------------------------------
      001645                       5436 _setColorHighlight1:
                                   5437 ;	.\ecen4350_lcd_v4.c:1053: setTextColor(colorSelect, CYAN);
      001645 75 6B FF         [24] 5438 	mov	_setTextColor_PARM_2,#0xff
      001648 75 6C 07         [24] 5439 	mov	(_setTextColor_PARM_2 + 1),#0x07
      00164B 90 F8 1F         [24] 5440 	mov	dptr,#0xf81f
                                   5441 ;	.\ecen4350_lcd_v4.c:1054: }
      00164E 02 05 5E         [24] 5442 	ljmp	_setTextColor
                                   5443 ;------------------------------------------------------------
                                   5444 ;Allocation info for local variables in function 'setColorHighlight2'
                                   5445 ;------------------------------------------------------------
                                   5446 ;	.\ecen4350_lcd_v4.c:1056: void setColorHighlight2() {
                                   5447 ;	-----------------------------------------
                                   5448 ;	 function setColorHighlight2
                                   5449 ;	-----------------------------------------
      001651                       5450 _setColorHighlight2:
                                   5451 ;	.\ecen4350_lcd_v4.c:1057: setTextColor(BLACK, CYAN);
      001651 75 6B FF         [24] 5452 	mov	_setTextColor_PARM_2,#0xff
      001654 75 6C 07         [24] 5453 	mov	(_setTextColor_PARM_2 + 1),#0x07
      001657 90 00 00         [24] 5454 	mov	dptr,#0x0000
                                   5455 ;	.\ecen4350_lcd_v4.c:1058: }
      00165A 02 05 5E         [24] 5456 	ljmp	_setTextColor
                                   5457 ;------------------------------------------------------------
                                   5458 ;Allocation info for local variables in function 'setColorGray'
                                   5459 ;------------------------------------------------------------
                                   5460 ;	.\ecen4350_lcd_v4.c:1060: void setColorGray() {
                                   5461 ;	-----------------------------------------
                                   5462 ;	 function setColorGray
                                   5463 ;	-----------------------------------------
      00165D                       5464 _setColorGray:
                                   5465 ;	.\ecen4350_lcd_v4.c:1061: setTextColor(GRAY, colorBackground);
      00165D E4               [12] 5466 	clr	a
      00165E F5 6B            [12] 5467 	mov	_setTextColor_PARM_2,a
      001660 F5 6C            [12] 5468 	mov	(_setTextColor_PARM_2 + 1),a
      001662 90 D6 BA         [24] 5469 	mov	dptr,#0xd6ba
                                   5470 ;	.\ecen4350_lcd_v4.c:1062: }
      001665 02 05 5E         [24] 5471 	ljmp	_setTextColor
                                   5472 ;------------------------------------------------------------
                                   5473 ;Allocation info for local variables in function 'setColorMenu'
                                   5474 ;------------------------------------------------------------
                                   5475 ;	.\ecen4350_lcd_v4.c:1064: void setColorMenu() {
                                   5476 ;	-----------------------------------------
                                   5477 ;	 function setColorMenu
                                   5478 ;	-----------------------------------------
      001668                       5479 _setColorMenu:
                                   5480 ;	.\ecen4350_lcd_v4.c:1065: setTextColor(BLACK, GRAY);
      001668 75 6B BA         [24] 5481 	mov	_setTextColor_PARM_2,#0xba
      00166B 75 6C D6         [24] 5482 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00166E 90 00 00         [24] 5483 	mov	dptr,#0x0000
                                   5484 ;	.\ecen4350_lcd_v4.c:1066: }
      001671 02 05 5E         [24] 5485 	ljmp	_setTextColor
                                   5486 ;------------------------------------------------------------
                                   5487 ;Allocation info for local variables in function 'setColorRed'
                                   5488 ;------------------------------------------------------------
                                   5489 ;	.\ecen4350_lcd_v4.c:1068: void setColorRed() {
                                   5490 ;	-----------------------------------------
                                   5491 ;	 function setColorRed
                                   5492 ;	-----------------------------------------
      001674                       5493 _setColorRed:
                                   5494 ;	.\ecen4350_lcd_v4.c:1069: setTextColor(RED, colorBackground);
      001674 E4               [12] 5495 	clr	a
      001675 F5 6B            [12] 5496 	mov	_setTextColor_PARM_2,a
      001677 F5 6C            [12] 5497 	mov	(_setTextColor_PARM_2 + 1),a
      001679 90 F8 00         [24] 5498 	mov	dptr,#0xf800
                                   5499 ;	.\ecen4350_lcd_v4.c:1070: }
      00167C 02 05 5E         [24] 5500 	ljmp	_setTextColor
                                   5501 ;------------------------------------------------------------
                                   5502 ;Allocation info for local variables in function 'setColorWhite'
                                   5503 ;------------------------------------------------------------
                                   5504 ;	.\ecen4350_lcd_v4.c:1072: void setColorWhite() {
                                   5505 ;	-----------------------------------------
                                   5506 ;	 function setColorWhite
                                   5507 ;	-----------------------------------------
      00167F                       5508 _setColorWhite:
                                   5509 ;	.\ecen4350_lcd_v4.c:1073: setTextColor(WHITE, colorBackground);
      00167F E4               [12] 5510 	clr	a
      001680 F5 6B            [12] 5511 	mov	_setTextColor_PARM_2,a
      001682 F5 6C            [12] 5512 	mov	(_setTextColor_PARM_2 + 1),a
      001684 90 FF FF         [24] 5513 	mov	dptr,#0xffff
                                   5514 ;	.\ecen4350_lcd_v4.c:1074: }
      001687 02 05 5E         [24] 5515 	ljmp	_setTextColor
                                   5516 ;------------------------------------------------------------
                                   5517 ;Allocation info for local variables in function 'setColorGreen'
                                   5518 ;------------------------------------------------------------
                                   5519 ;	.\ecen4350_lcd_v4.c:1076: void setColorGreen() {
                                   5520 ;	-----------------------------------------
                                   5521 ;	 function setColorGreen
                                   5522 ;	-----------------------------------------
      00168A                       5523 _setColorGreen:
                                   5524 ;	.\ecen4350_lcd_v4.c:1077: setTextColor(GREEN, colorBackground);
      00168A E4               [12] 5525 	clr	a
      00168B F5 6B            [12] 5526 	mov	_setTextColor_PARM_2,a
      00168D F5 6C            [12] 5527 	mov	(_setTextColor_PARM_2 + 1),a
      00168F 90 07 E0         [24] 5528 	mov	dptr,#0x07e0
                                   5529 ;	.\ecen4350_lcd_v4.c:1078: }
      001692 02 05 5E         [24] 5530 	ljmp	_setTextColor
                                   5531 ;------------------------------------------------------------
                                   5532 ;Allocation info for local variables in function 'setColorYellow'
                                   5533 ;------------------------------------------------------------
                                   5534 ;	.\ecen4350_lcd_v4.c:1080: void setColorYellow() {
                                   5535 ;	-----------------------------------------
                                   5536 ;	 function setColorYellow
                                   5537 ;	-----------------------------------------
      001695                       5538 _setColorYellow:
                                   5539 ;	.\ecen4350_lcd_v4.c:1081: setTextColor(YELLOW, colorBackground);
      001695 E4               [12] 5540 	clr	a
      001696 F5 6B            [12] 5541 	mov	_setTextColor_PARM_2,a
      001698 F5 6C            [12] 5542 	mov	(_setTextColor_PARM_2 + 1),a
      00169A 90 FF E0         [24] 5543 	mov	dptr,#0xffe0
                                   5544 ;	.\ecen4350_lcd_v4.c:1082: }
      00169D 02 05 5E         [24] 5545 	ljmp	_setTextColor
                                   5546 ;------------------------------------------------------------
                                   5547 ;Allocation info for local variables in function 'inputAddress'
                                   5548 ;------------------------------------------------------------
                                   5549 ;address                   Allocated to registers r7 r6 
                                   5550 ;input                     Allocated to registers r7 
                                   5551 ;------------------------------------------------------------
                                   5552 ;	.\ecen4350_lcd_v4.c:1084: unsigned int inputAddress()
                                   5553 ;	-----------------------------------------
                                   5554 ;	 function inputAddress
                                   5555 ;	-----------------------------------------
      0016A0                       5556 _inputAddress:
                                   5557 ;	.\ecen4350_lcd_v4.c:1089: input = keyDetect();					
      0016A0 12 11 89         [24] 5558 	lcall	_keyDetect
                                   5559 ;	.\ecen4350_lcd_v4.c:1092: write(input);									// Print to screen
      0016A3 AF 82            [24] 5560 	mov  r7,dpl
      0016A5 C0 07            [24] 5561 	push	ar7
      0016A7 12 10 05         [24] 5562 	lcall	_write
      0016AA D0 07            [24] 5563 	pop	ar7
                                   5564 ;	.\ecen4350_lcd_v4.c:1093: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      0016AC 8F 82            [24] 5565 	mov	dpl,r7
      0016AE 12 13 F7         [24] 5566 	lcall	_ASCIItoHex
                                   5567 ;	.\ecen4350_lcd_v4.c:1094: address |= (int) input * 16 * 16 * 16;			// highest order nibble = (input) * 0x1000
      0016B1 E5 82            [12] 5568 	mov	a,dpl
      0016B3 C4               [12] 5569 	swap	a
      0016B4 54 F0            [12] 5570 	anl	a,#0xf0
      0016B6 FE               [12] 5571 	mov	r6,a
      0016B7 7F 00            [12] 5572 	mov	r7,#0x00
                                   5573 ;	.\ecen4350_lcd_v4.c:1096: input = keyDetect();							// second highest address nibble
      0016B9 C0 07            [24] 5574 	push	ar7
      0016BB C0 06            [24] 5575 	push	ar6
      0016BD 12 11 89         [24] 5576 	lcall	_keyDetect
                                   5577 ;	.\ecen4350_lcd_v4.c:1099: write(input);									// Print to screen
      0016C0 AD 82            [24] 5578 	mov  r5,dpl
      0016C2 C0 05            [24] 5579 	push	ar5
      0016C4 12 10 05         [24] 5580 	lcall	_write
      0016C7 D0 05            [24] 5581 	pop	ar5
                                   5582 ;	.\ecen4350_lcd_v4.c:1100: input = ASCIItoHex(input);						// Manipulate data as hex instead of ASCII
      0016C9 8D 82            [24] 5583 	mov	dpl,r5
      0016CB 12 13 F7         [24] 5584 	lcall	_ASCIItoHex
      0016CE AD 82            [24] 5585 	mov	r5,dpl
      0016D0 D0 06            [24] 5586 	pop	ar6
      0016D2 D0 07            [24] 5587 	pop	ar7
                                   5588 ;	.\ecen4350_lcd_v4.c:1101: address |= (int) input * 16 * 16;				// store nibble; (input) * 0x0100
      0016D4 8D 04            [24] 5589 	mov	ar4,r5
      0016D6 7D 00            [12] 5590 	mov	r5,#0x00
      0016D8 EF               [12] 5591 	mov	a,r7
      0016D9 42 05            [12] 5592 	orl	ar5,a
      0016DB EE               [12] 5593 	mov	a,r6
      0016DC 42 04            [12] 5594 	orl	ar4,a
                                   5595 ;	.\ecen4350_lcd_v4.c:1103: input = keyDetect();
      0016DE C0 05            [24] 5596 	push	ar5
      0016E0 C0 04            [24] 5597 	push	ar4
      0016E2 12 11 89         [24] 5598 	lcall	_keyDetect
      0016E5 AF 82            [24] 5599 	mov	r7,dpl
      0016E7 D0 04            [24] 5600 	pop	ar4
      0016E9 D0 05            [24] 5601 	pop	ar5
                                   5602 ;	.\ecen4350_lcd_v4.c:1106: write(input);
      0016EB 8F 82            [24] 5603 	mov	dpl,r7
      0016ED C0 07            [24] 5604 	push	ar7
      0016EF C0 05            [24] 5605 	push	ar5
      0016F1 C0 04            [24] 5606 	push	ar4
      0016F3 12 10 05         [24] 5607 	lcall	_write
      0016F6 D0 04            [24] 5608 	pop	ar4
      0016F8 D0 05            [24] 5609 	pop	ar5
      0016FA D0 07            [24] 5610 	pop	ar7
                                   5611 ;	.\ecen4350_lcd_v4.c:1107: input = ASCIItoHex(input);
      0016FC 8F 82            [24] 5612 	mov	dpl,r7
      0016FE C0 05            [24] 5613 	push	ar5
      001700 C0 04            [24] 5614 	push	ar4
      001702 12 13 F7         [24] 5615 	lcall	_ASCIItoHex
      001705 AF 82            [24] 5616 	mov	r7,dpl
      001707 D0 04            [24] 5617 	pop	ar4
      001709 D0 05            [24] 5618 	pop	ar5
                                   5619 ;	.\ecen4350_lcd_v4.c:1108: address |= (int) input * 16;					// *0x0010
      00170B E4               [12] 5620 	clr	a
      00170C CF               [12] 5621 	xch	a,r7
      00170D C4               [12] 5622 	swap	a
      00170E CF               [12] 5623 	xch	a,r7
      00170F 6F               [12] 5624 	xrl	a,r7
      001710 CF               [12] 5625 	xch	a,r7
      001711 54 F0            [12] 5626 	anl	a,#0xf0
      001713 CF               [12] 5627 	xch	a,r7
      001714 6F               [12] 5628 	xrl	a,r7
      001715 FE               [12] 5629 	mov	r6,a
      001716 ED               [12] 5630 	mov	a,r5
      001717 42 07            [12] 5631 	orl	ar7,a
      001719 EC               [12] 5632 	mov	a,r4
      00171A 42 06            [12] 5633 	orl	ar6,a
                                   5634 ;	.\ecen4350_lcd_v4.c:1110: input = keyDetect();
      00171C C0 07            [24] 5635 	push	ar7
      00171E C0 06            [24] 5636 	push	ar6
      001720 12 11 89         [24] 5637 	lcall	_keyDetect
                                   5638 ;	.\ecen4350_lcd_v4.c:1113: write(input);
      001723 AD 82            [24] 5639 	mov  r5,dpl
      001725 C0 05            [24] 5640 	push	ar5
      001727 12 10 05         [24] 5641 	lcall	_write
      00172A D0 05            [24] 5642 	pop	ar5
                                   5643 ;	.\ecen4350_lcd_v4.c:1114: input = ASCIItoHex(input);
      00172C 8D 82            [24] 5644 	mov	dpl,r5
      00172E 12 13 F7         [24] 5645 	lcall	_ASCIItoHex
      001731 AD 82            [24] 5646 	mov	r5,dpl
      001733 D0 06            [24] 5647 	pop	ar6
      001735 D0 07            [24] 5648 	pop	ar7
                                   5649 ;	.\ecen4350_lcd_v4.c:1115: address |= (int) input;							// *0x0001
      001737 7C 00            [12] 5650 	mov	r4,#0x00
      001739 ED               [12] 5651 	mov	a,r5
      00173A 4F               [12] 5652 	orl	a,r7
      00173B F5 82            [12] 5653 	mov	dpl,a
      00173D EC               [12] 5654 	mov	a,r4
      00173E 4E               [12] 5655 	orl	a,r6
      00173F F5 83            [12] 5656 	mov	dph,a
                                   5657 ;	.\ecen4350_lcd_v4.c:1118: return address;									// yeet
                                   5658 ;	.\ecen4350_lcd_v4.c:1119: }
      001741 22               [24] 5659 	ret
                                   5660 ;------------------------------------------------------------
                                   5661 ;Allocation info for local variables in function 'inputBlockType'
                                   5662 ;------------------------------------------------------------
                                   5663 ;blockType                 Allocated to registers 
                                   5664 ;invalidType               Allocated to registers 
                                   5665 ;------------------------------------------------------------
                                   5666 ;	.\ecen4350_lcd_v4.c:1121: unsigned char inputBlockType() {
                                   5667 ;	-----------------------------------------
                                   5668 ;	 function inputBlockType
                                   5669 ;	-----------------------------------------
      001742                       5670 _inputBlockType:
                                   5671 ;	.\ecen4350_lcd_v4.c:1127: selection = keyDetect();
      001742 12 11 89         [24] 5672 	lcall	_keyDetect
      001745 AF 82            [24] 5673 	mov	r7,dpl
      001747 78 71            [12] 5674 	mov	r0,#_selection
      001749 A6 07            [24] 5675 	mov	@r0,ar7
                                   5676 ;	.\ecen4350_lcd_v4.c:1128: blockType = ASCIItoHex(selection);
      00174B 8F 82            [24] 5677 	mov	dpl,r7
                                   5678 ;	.\ecen4350_lcd_v4.c:1143: return blockType;
                                   5679 ;	.\ecen4350_lcd_v4.c:1144: }
      00174D 02 13 F7         [24] 5680 	ljmp	_ASCIItoHex
                                   5681 ;------------------------------------------------------------
                                   5682 ;Allocation info for local variables in function 'inputBlockSize'
                                   5683 ;------------------------------------------------------------
                                   5684 ;blockSize                 Allocated to registers 
                                   5685 ;------------------------------------------------------------
                                   5686 ;	.\ecen4350_lcd_v4.c:1146: unsigned char inputBlockSize() {
                                   5687 ;	-----------------------------------------
                                   5688 ;	 function inputBlockSize
                                   5689 ;	-----------------------------------------
      001750                       5690 _inputBlockSize:
                                   5691 ;	.\ecen4350_lcd_v4.c:1149: selection = keyDetect();
      001750 12 11 89         [24] 5692 	lcall	_keyDetect
      001753 AF 82            [24] 5693 	mov	r7,dpl
      001755 78 71            [12] 5694 	mov	r0,#_selection
      001757 A6 07            [24] 5695 	mov	@r0,ar7
                                   5696 ;	.\ecen4350_lcd_v4.c:1150: write(selection);
      001759 8F 82            [24] 5697 	mov	dpl,r7
      00175B 12 10 05         [24] 5698 	lcall	_write
                                   5699 ;	.\ecen4350_lcd_v4.c:1151: selection = ASCIItoHex(selection);
      00175E 78 71            [12] 5700 	mov	r0,#_selection
      001760 86 82            [24] 5701 	mov	dpl,@r0
      001762 12 13 F7         [24] 5702 	lcall	_ASCIItoHex
      001765 AF 82            [24] 5703 	mov	r7,dpl
      001767 78 71            [12] 5704 	mov	r0,#_selection
      001769 A6 07            [24] 5705 	mov	@r0,ar7
                                   5706 ;	.\ecen4350_lcd_v4.c:1152: blockSize |= selection * 16;
      00176B EF               [12] 5707 	mov	a,r7
      00176C C4               [12] 5708 	swap	a
      00176D 54 F0            [12] 5709 	anl	a,#0xf0
      00176F FF               [12] 5710 	mov	r7,a
                                   5711 ;	.\ecen4350_lcd_v4.c:1153: selection = keyDetect();
      001770 C0 07            [24] 5712 	push	ar7
      001772 12 11 89         [24] 5713 	lcall	_keyDetect
      001775 AE 82            [24] 5714 	mov	r6,dpl
      001777 78 71            [12] 5715 	mov	r0,#_selection
      001779 A6 06            [24] 5716 	mov	@r0,ar6
                                   5717 ;	.\ecen4350_lcd_v4.c:1154: write(selection);
      00177B 8E 82            [24] 5718 	mov	dpl,r6
      00177D 12 10 05         [24] 5719 	lcall	_write
                                   5720 ;	.\ecen4350_lcd_v4.c:1155: selection = ASCIItoHex(selection);
      001780 78 71            [12] 5721 	mov	r0,#_selection
      001782 86 82            [24] 5722 	mov	dpl,@r0
      001784 12 13 F7         [24] 5723 	lcall	_ASCIItoHex
      001787 AE 82            [24] 5724 	mov	r6,dpl
      001789 D0 07            [24] 5725 	pop	ar7
      00178B 78 71            [12] 5726 	mov	r0,#_selection
      00178D A6 06            [24] 5727 	mov	@r0,ar6
                                   5728 ;	.\ecen4350_lcd_v4.c:1156: blockSize |= selection;
      00178F EE               [12] 5729 	mov	a,r6
      001790 4F               [12] 5730 	orl	a,r7
      001791 F5 82            [12] 5731 	mov	dpl,a
                                   5732 ;	.\ecen4350_lcd_v4.c:1157: return blockSize;
                                   5733 ;	.\ecen4350_lcd_v4.c:1158: }
      001793 22               [24] 5734 	ret
                                   5735 ;------------------------------------------------------------
                                   5736 ;Allocation info for local variables in function 'printMenu'
                                   5737 ;------------------------------------------------------------
                                   5738 ;	.\ecen4350_lcd_v4.c:1161: void printMenu() {
                                   5739 ;	-----------------------------------------
                                   5740 ;	 function printMenu
                                   5741 ;	-----------------------------------------
      001794                       5742 _printMenu:
                                   5743 ;	.\ecen4350_lcd_v4.c:1163: setCursor(0,0);
      001794 E4               [12] 5744 	clr	a
      001795 F5 6B            [12] 5745 	mov	_setCursor_PARM_2,a
      001797 F5 6C            [12] 5746 	mov	(_setCursor_PARM_2 + 1),a
      001799 90 00 00         [24] 5747 	mov	dptr,#0x0000
      00179C 12 05 51         [24] 5748 	lcall	_setCursor
                                   5749 ;	.\ecen4350_lcd_v4.c:1164: clearLCD();
      00179F 12 0D EE         [24] 5750 	lcall	_clearLCD
                                   5751 ;	.\ecen4350_lcd_v4.c:1167: fillTop(GRAY);
      0017A2 90 D6 BA         [24] 5752 	mov	dptr,#0xd6ba
      0017A5 12 0C 21         [24] 5753 	lcall	_fillTop
                                   5754 ;	.\ecen4350_lcd_v4.c:1168: setTextSize(5);
      0017A8 75 82 05         [24] 5755 	mov	dpl,#0x05
      0017AB 12 05 6B         [24] 5756 	lcall	_setTextSize
                                   5757 ;	.\ecen4350_lcd_v4.c:1169: setColorMenu();
      0017AE 12 16 68         [24] 5758 	lcall	_setColorMenu
                                   5759 ;	.\ecen4350_lcd_v4.c:1170: setCursor(30, 0);
      0017B1 E4               [12] 5760 	clr	a
      0017B2 F5 6B            [12] 5761 	mov	_setCursor_PARM_2,a
      0017B4 F5 6C            [12] 5762 	mov	(_setCursor_PARM_2 + 1),a
      0017B6 90 00 1E         [24] 5763 	mov	dptr,#0x001e
      0017B9 12 05 51         [24] 5764 	lcall	_setCursor
                                   5765 ;	.\ecen4350_lcd_v4.c:1171: LCD_string_write("<Menu>\n");
      0017BC 90 5D C0         [24] 5766 	mov	dptr,#___str_5
      0017BF 75 F0 80         [24] 5767 	mov	b,#0x80
      0017C2 12 10 6B         [24] 5768 	lcall	_LCD_string_write
                                   5769 ;	.\ecen4350_lcd_v4.c:1173: setTextSize(2);
      0017C5 75 82 02         [24] 5770 	mov	dpl,#0x02
      0017C8 12 05 6B         [24] 5771 	lcall	_setTextSize
                                   5772 ;	.\ecen4350_lcd_v4.c:1175: setCursor(0, 60);
      0017CB 75 6B 3C         [24] 5773 	mov	_setCursor_PARM_2,#0x3c
      0017CE 75 6C 00         [24] 5774 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017D1 90 00 00         [24] 5775 	mov	dptr,#0x0000
      0017D4 12 05 51         [24] 5776 	lcall	_setCursor
                                   5777 ;	.\ecen4350_lcd_v4.c:1176: setColorWhite();
      0017D7 12 16 7F         [24] 5778 	lcall	_setColorWhite
                                   5779 ;	.\ecen4350_lcd_v4.c:1177: LCD_string_write(" <D>");
      0017DA 90 5D C8         [24] 5780 	mov	dptr,#___str_6
      0017DD 75 F0 80         [24] 5781 	mov	b,#0x80
      0017E0 12 10 6B         [24] 5782 	lcall	_LCD_string_write
                                   5783 ;	.\ecen4350_lcd_v4.c:1178: setColorDefault();
      0017E3 12 16 2F         [24] 5784 	lcall	_setColorDefault
                                   5785 ;	.\ecen4350_lcd_v4.c:1179: LCD_string_write(" DUMP\n");
      0017E6 90 5D CD         [24] 5786 	mov	dptr,#___str_7
      0017E9 75 F0 80         [24] 5787 	mov	b,#0x80
      0017EC 12 10 6B         [24] 5788 	lcall	_LCD_string_write
                                   5789 ;	.\ecen4350_lcd_v4.c:1181: setCursor(120, 60);
      0017EF 75 6B 3C         [24] 5790 	mov	_setCursor_PARM_2,#0x3c
      0017F2 75 6C 00         [24] 5791 	mov	(_setCursor_PARM_2 + 1),#0x00
      0017F5 90 00 78         [24] 5792 	mov	dptr,#0x0078
      0017F8 12 05 51         [24] 5793 	lcall	_setCursor
                                   5794 ;	.\ecen4350_lcd_v4.c:1182: setColorWhite();
      0017FB 12 16 7F         [24] 5795 	lcall	_setColorWhite
                                   5796 ;	.\ecen4350_lcd_v4.c:1183: LCD_string_write(" <B>");
      0017FE 90 5D D4         [24] 5797 	mov	dptr,#___str_8
      001801 75 F0 80         [24] 5798 	mov	b,#0x80
      001804 12 10 6B         [24] 5799 	lcall	_LCD_string_write
                                   5800 ;	.\ecen4350_lcd_v4.c:1184: setColorDefault();
      001807 12 16 2F         [24] 5801 	lcall	_setColorDefault
                                   5802 ;	.\ecen4350_lcd_v4.c:1185: LCD_string_write(" MOVE\n");
      00180A 90 5D D9         [24] 5803 	mov	dptr,#___str_9
      00180D 75 F0 80         [24] 5804 	mov	b,#0x80
      001810 12 10 6B         [24] 5805 	lcall	_LCD_string_write
                                   5806 ;	.\ecen4350_lcd_v4.c:1187: setCursor(0, 100);
      001813 75 6B 64         [24] 5807 	mov	_setCursor_PARM_2,#0x64
      001816 75 6C 00         [24] 5808 	mov	(_setCursor_PARM_2 + 1),#0x00
      001819 90 00 00         [24] 5809 	mov	dptr,#0x0000
      00181C 12 05 51         [24] 5810 	lcall	_setCursor
                                   5811 ;	.\ecen4350_lcd_v4.c:1188: setColorWhite();
      00181F 12 16 7F         [24] 5812 	lcall	_setColorWhite
                                   5813 ;	.\ecen4350_lcd_v4.c:1189: LCD_string_write(" <E>");
      001822 90 5D E0         [24] 5814 	mov	dptr,#___str_10
      001825 75 F0 80         [24] 5815 	mov	b,#0x80
      001828 12 10 6B         [24] 5816 	lcall	_LCD_string_write
                                   5817 ;	.\ecen4350_lcd_v4.c:1190: setColorDefault();
      00182B 12 16 2F         [24] 5818 	lcall	_setColorDefault
                                   5819 ;	.\ecen4350_lcd_v4.c:1191: LCD_string_write(" EDIT\n");
      00182E 90 5D E5         [24] 5820 	mov	dptr,#___str_11
      001831 75 F0 80         [24] 5821 	mov	b,#0x80
      001834 12 10 6B         [24] 5822 	lcall	_LCD_string_write
                                   5823 ;	.\ecen4350_lcd_v4.c:1193: setCursor(120, 100);
      001837 75 6B 64         [24] 5824 	mov	_setCursor_PARM_2,#0x64
      00183A 75 6C 00         [24] 5825 	mov	(_setCursor_PARM_2 + 1),#0x00
      00183D 90 00 78         [24] 5826 	mov	dptr,#0x0078
      001840 12 05 51         [24] 5827 	lcall	_setCursor
                                   5828 ;	.\ecen4350_lcd_v4.c:1194: setColorWhite();
      001843 12 16 7F         [24] 5829 	lcall	_setColorWhite
                                   5830 ;	.\ecen4350_lcd_v4.c:1195: LCD_string_write(" <F>");
      001846 90 5D EC         [24] 5831 	mov	dptr,#___str_12
      001849 75 F0 80         [24] 5832 	mov	b,#0x80
      00184C 12 10 6B         [24] 5833 	lcall	_LCD_string_write
                                   5834 ;	.\ecen4350_lcd_v4.c:1196: setColorDefault();
      00184F 12 16 2F         [24] 5835 	lcall	_setColorDefault
                                   5836 ;	.\ecen4350_lcd_v4.c:1197: LCD_string_write(" FIND\n");
      001852 90 5D F1         [24] 5837 	mov	dptr,#___str_13
      001855 75 F0 80         [24] 5838 	mov	b,#0x80
      001858 12 10 6B         [24] 5839 	lcall	_LCD_string_write
                                   5840 ;	.\ecen4350_lcd_v4.c:1199: setCursor(0, 140);
      00185B 75 6B 8C         [24] 5841 	mov	_setCursor_PARM_2,#0x8c
      00185E 75 6C 00         [24] 5842 	mov	(_setCursor_PARM_2 + 1),#0x00
      001861 90 00 00         [24] 5843 	mov	dptr,#0x0000
      001864 12 05 51         [24] 5844 	lcall	_setCursor
                                   5845 ;	.\ecen4350_lcd_v4.c:1200: setColorWhite();
      001867 12 16 7F         [24] 5846 	lcall	_setColorWhite
                                   5847 ;	.\ecen4350_lcd_v4.c:1201: LCD_string_write(" <C>");
      00186A 90 5D F8         [24] 5848 	mov	dptr,#___str_14
      00186D 75 F0 80         [24] 5849 	mov	b,#0x80
      001870 12 10 6B         [24] 5850 	lcall	_LCD_string_write
                                   5851 ;	.\ecen4350_lcd_v4.c:1202: setColorDefault();
      001873 12 16 2F         [24] 5852 	lcall	_setColorDefault
                                   5853 ;	.\ecen4350_lcd_v4.c:1203: LCD_string_write(" COUNT\n");
      001876 90 5D FD         [24] 5854 	mov	dptr,#___str_15
      001879 75 F0 80         [24] 5855 	mov	b,#0x80
      00187C 12 10 6B         [24] 5856 	lcall	_LCD_string_write
                                   5857 ;	.\ecen4350_lcd_v4.c:1205: setCursor(0, 180);
      00187F 75 6B B4         [24] 5858 	mov	_setCursor_PARM_2,#0xb4
      001882 75 6C 00         [24] 5859 	mov	(_setCursor_PARM_2 + 1),#0x00
      001885 90 00 00         [24] 5860 	mov	dptr,#0x0000
      001888 12 05 51         [24] 5861 	lcall	_setCursor
                                   5862 ;	.\ecen4350_lcd_v4.c:1206: setColorWhite();
      00188B 12 16 7F         [24] 5863 	lcall	_setColorWhite
                                   5864 ;	.\ecen4350_lcd_v4.c:1207: LCD_string_write(" <A>");
      00188E 90 5E 05         [24] 5865 	mov	dptr,#___str_16
      001891 75 F0 80         [24] 5866 	mov	b,#0x80
      001894 12 10 6B         [24] 5867 	lcall	_LCD_string_write
                                   5868 ;	.\ecen4350_lcd_v4.c:1208: setColorDefault();
      001897 12 16 2F         [24] 5869 	lcall	_setColorDefault
                                   5870 ;	.\ecen4350_lcd_v4.c:1209: LCD_string_write(" MEM CHECK\n");
      00189A 90 5E 0A         [24] 5871 	mov	dptr,#___str_17
      00189D 75 F0 80         [24] 5872 	mov	b,#0x80
      0018A0 12 10 6B         [24] 5873 	lcall	_LCD_string_write
                                   5874 ;	.\ecen4350_lcd_v4.c:1211: setCursor(0, 220);
      0018A3 75 6B DC         [24] 5875 	mov	_setCursor_PARM_2,#0xdc
      0018A6 75 6C 00         [24] 5876 	mov	(_setCursor_PARM_2 + 1),#0x00
      0018A9 90 00 00         [24] 5877 	mov	dptr,#0x0000
      0018AC 12 05 51         [24] 5878 	lcall	_setCursor
                                   5879 ;	.\ecen4350_lcd_v4.c:1212: setColorWhite();
      0018AF 12 16 7F         [24] 5880 	lcall	_setColorWhite
                                   5881 ;	.\ecen4350_lcd_v4.c:1213: LCD_string_write(" <1>");
      0018B2 90 5E 16         [24] 5882 	mov	dptr,#___str_18
      0018B5 75 F0 80         [24] 5883 	mov	b,#0x80
      0018B8 12 10 6B         [24] 5884 	lcall	_LCD_string_write
                                   5885 ;	.\ecen4350_lcd_v4.c:1214: setColorDefault();
      0018BB 12 16 2F         [24] 5886 	lcall	_setColorDefault
                                   5887 ;	.\ecen4350_lcd_v4.c:1215: LCD_string_write(" UART");
      0018BE 90 5E 1B         [24] 5888 	mov	dptr,#___str_19
      0018C1 75 F0 80         [24] 5889 	mov	b,#0x80
      0018C4 12 10 6B         [24] 5890 	lcall	_LCD_string_write
                                   5891 ;	.\ecen4350_lcd_v4.c:1216: setTextSize(1);
      0018C7 75 82 01         [24] 5892 	mov	dpl,#0x01
      0018CA 12 05 6B         [24] 5893 	lcall	_setTextSize
                                   5894 ;	.\ecen4350_lcd_v4.c:1217: if (UART_en == 0) {
      0018CD 78 72            [12] 5895 	mov	r0,#_UART_en
      0018CF E6               [12] 5896 	mov	a,@r0
      0018D0 70 09            [24] 5897 	jnz	00102$
                                   5898 ;	.\ecen4350_lcd_v4.c:1218: LCD_string_write(" [Disabled]\n");
      0018D2 90 5E 21         [24] 5899 	mov	dptr,#___str_20
      0018D5 75 F0 80         [24] 5900 	mov	b,#0x80
      0018D8 12 10 6B         [24] 5901 	lcall	_LCD_string_write
      0018DB                       5902 00102$:
                                   5903 ;	.\ecen4350_lcd_v4.c:1219: } if (UART_en == 1) {
      0018DB 78 72            [12] 5904 	mov	r0,#_UART_en
      0018DD B6 01 09         [24] 5905 	cjne	@r0,#0x01,00104$
                                   5906 ;	.\ecen4350_lcd_v4.c:1220: LCD_string_write(" [Enabled]\n");
      0018E0 90 5E 2E         [24] 5907 	mov	dptr,#___str_21
      0018E3 75 F0 80         [24] 5908 	mov	b,#0x80
      0018E6 12 10 6B         [24] 5909 	lcall	_LCD_string_write
      0018E9                       5910 00104$:
                                   5911 ;	.\ecen4350_lcd_v4.c:1222: setTextSize(2);
      0018E9 75 82 02         [24] 5912 	mov	dpl,#0x02
                                   5913 ;	.\ecen4350_lcd_v4.c:1223: return;
                                   5914 ;	.\ecen4350_lcd_v4.c:1224: }
      0018EC 02 05 6B         [24] 5915 	ljmp	_setTextSize
                                   5916 ;------------------------------------------------------------
                                   5917 ;Allocation info for local variables in function 'dump'
                                   5918 ;------------------------------------------------------------
                                   5919 ;d                         Allocated with name '_dump_d_65536_553'
                                   5920 ;__2621440106              Allocated to registers 
                                   5921 ;__2621440103              Allocated to registers 
                                   5922 ;__2621440104              Allocated to registers 
                                   5923 ;map_address               Allocated to registers 
                                   5924 ;d                         Allocated to registers 
                                   5925 ;__2621440107              Allocated to registers 
                                   5926 ;map_address               Allocated to registers 
                                   5927 ;d                         Allocated to registers 
                                   5928 ;__2621440118              Allocated to registers 
                                   5929 ;__2621440115              Allocated to registers 
                                   5930 ;__2621440112              Allocated to registers 
                                   5931 ;__2621440109              Allocated to registers 
                                   5932 ;__2621440110              Allocated to registers 
                                   5933 ;map_address               Allocated to registers 
                                   5934 ;d                         Allocated to registers 
                                   5935 ;__2621440113              Allocated to registers 
                                   5936 ;map_address               Allocated to registers 
                                   5937 ;d                         Allocated to registers 
                                   5938 ;__2621440116              Allocated to registers 
                                   5939 ;map_address               Allocated to registers 
                                   5940 ;d                         Allocated to registers 
                                   5941 ;__2621440119              Allocated to registers 
                                   5942 ;map_address               Allocated to registers 
                                   5943 ;d                         Allocated to registers 
                                   5944 ;__2621440142              Allocated to registers 
                                   5945 ;__2621440139              Allocated to registers 
                                   5946 ;__2621440136              Allocated to registers 
                                   5947 ;__2621440133              Allocated to registers 
                                   5948 ;__2621440130              Allocated to registers 
                                   5949 ;__2621440127              Allocated to registers 
                                   5950 ;__2621440124              Allocated to registers 
                                   5951 ;__2621440121              Allocated to registers 
                                   5952 ;__2621440122              Allocated to registers 
                                   5953 ;map_address               Allocated to registers 
                                   5954 ;d                         Allocated to registers 
                                   5955 ;__2621440125              Allocated to registers 
                                   5956 ;map_address               Allocated to registers 
                                   5957 ;d                         Allocated to registers 
                                   5958 ;__2621440128              Allocated to registers 
                                   5959 ;map_address               Allocated to registers 
                                   5960 ;d                         Allocated to registers 
                                   5961 ;__2621440131              Allocated to registers 
                                   5962 ;map_address               Allocated to registers 
                                   5963 ;d                         Allocated to registers r3 
                                   5964 ;__2621440134              Allocated to registers 
                                   5965 ;map_address               Allocated to registers 
                                   5966 ;d                         Allocated to registers 
                                   5967 ;__2621440137              Allocated to registers 
                                   5968 ;map_address               Allocated to registers 
                                   5969 ;d                         Allocated to registers 
                                   5970 ;__2621440140              Allocated to registers 
                                   5971 ;map_address               Allocated to registers 
                                   5972 ;d                         Allocated to registers 
                                   5973 ;__2621440143              Allocated to registers 
                                   5974 ;map_address               Allocated to registers 
                                   5975 ;d                         Allocated to registers 
                                   5976 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   5977 ;address                   Allocated with name '_dump_address_65536_553'
                                   5978 ;blockSize                 Allocated to registers r5 
                                   5979 ;blockType                 Allocated to registers r7 
                                   5980 ;exit                      Allocated with name '_dump_exit_65536_553'
                                   5981 ;invalidType               Allocated to registers r5 
                                   5982 ;invalidSize               Allocated to registers r3 
                                   5983 ;------------------------------------------------------------
                                   5984 ;	.\ecen4350_lcd_v4.c:1226: void dump()
                                   5985 ;	-----------------------------------------
                                   5986 ;	 function dump
                                   5987 ;	-----------------------------------------
      0018EF                       5988 _dump:
                                   5989 ;	.\ecen4350_lcd_v4.c:1231: __idata unsigned char blockType = 0;
      0018EF 7F 00            [12] 5990 	mov	r7,#0x00
                                   5991 ;	.\ecen4350_lcd_v4.c:1232: __idata unsigned char exit = 1;
      0018F1 78 7C            [12] 5992 	mov	r0,#_dump_exit_65536_553
      0018F3 76 01            [12] 5993 	mov	@r0,#0x01
                                   5994 ;	.\ecen4350_lcd_v4.c:1233: __idata unsigned char invalidType = 1;
      0018F5 7D 01            [12] 5995 	mov	r5,#0x01
                                   5996 ;	.\ecen4350_lcd_v4.c:1234: __idata unsigned char invalidSize = 1;
      0018F7 7B 01            [12] 5997 	mov	r3,#0x01
                                   5998 ;	.\ecen4350_lcd_v4.c:1236: clearLCD();
      0018F9 C0 07            [24] 5999 	push	ar7
      0018FB C0 05            [24] 6000 	push	ar5
      0018FD C0 03            [24] 6001 	push	ar3
      0018FF 12 0D EE         [24] 6002 	lcall	_clearLCD
                                   6003 ;	.\ecen4350_lcd_v4.c:1239: fillTop(GRAY);
      001902 90 D6 BA         [24] 6004 	mov	dptr,#0xd6ba
      001905 12 0C 21         [24] 6005 	lcall	_fillTop
                                   6006 ;	.\ecen4350_lcd_v4.c:1240: setTextSize(5);
      001908 75 82 05         [24] 6007 	mov	dpl,#0x05
      00190B 12 05 6B         [24] 6008 	lcall	_setTextSize
                                   6009 ;	.\ecen4350_lcd_v4.c:1241: setColorMenu();
      00190E 12 16 68         [24] 6010 	lcall	_setColorMenu
                                   6011 ;	.\ecen4350_lcd_v4.c:1242: setCursor(30, 0);
      001911 E4               [12] 6012 	clr	a
      001912 F5 6B            [12] 6013 	mov	_setCursor_PARM_2,a
      001914 F5 6C            [12] 6014 	mov	(_setCursor_PARM_2 + 1),a
      001916 90 00 1E         [24] 6015 	mov	dptr,#0x001e
      001919 12 05 51         [24] 6016 	lcall	_setCursor
                                   6017 ;	.\ecen4350_lcd_v4.c:1243: LCD_string_write("[DUMP]\n");
      00191C 90 5E 3A         [24] 6018 	mov	dptr,#___str_22
      00191F 75 F0 80         [24] 6019 	mov	b,#0x80
      001922 12 10 6B         [24] 6020 	lcall	_LCD_string_write
                                   6021 ;	.\ecen4350_lcd_v4.c:1244: setColorDefault();
      001925 12 16 2F         [24] 6022 	lcall	_setColorDefault
                                   6023 ;	.\ecen4350_lcd_v4.c:1245: setTextSize(2);
      001928 75 82 02         [24] 6024 	mov	dpl,#0x02
      00192B 12 05 6B         [24] 6025 	lcall	_setTextSize
                                   6026 ;	.\ecen4350_lcd_v4.c:1246: setCursor(0, 60);
      00192E 75 6B 3C         [24] 6027 	mov	_setCursor_PARM_2,#0x3c
      001931 75 6C 00         [24] 6028 	mov	(_setCursor_PARM_2 + 1),#0x00
      001934 90 00 00         [24] 6029 	mov	dptr,#0x0000
      001937 12 05 51         [24] 6030 	lcall	_setCursor
                                   6031 ;	.\ecen4350_lcd_v4.c:1247: LCD_string_write(" Address Location:\n");
      00193A 90 5E 42         [24] 6032 	mov	dptr,#___str_23
      00193D 75 F0 80         [24] 6033 	mov	b,#0x80
      001940 12 10 6B         [24] 6034 	lcall	_LCD_string_write
                                   6035 ;	.\ecen4350_lcd_v4.c:1248: setCursor(0, 80);
      001943 75 6B 50         [24] 6036 	mov	_setCursor_PARM_2,#0x50
      001946 75 6C 00         [24] 6037 	mov	(_setCursor_PARM_2 + 1),#0x00
      001949 90 00 00         [24] 6038 	mov	dptr,#0x0000
      00194C 12 05 51         [24] 6039 	lcall	_setCursor
                                   6040 ;	.\ecen4350_lcd_v4.c:1249: setColorGray();
      00194F 12 16 5D         [24] 6041 	lcall	_setColorGray
                                   6042 ;	.\ecen4350_lcd_v4.c:1250: LCD_string_write(" 0x____");
      001952 90 5E 56         [24] 6043 	mov	dptr,#___str_24
      001955 75 F0 80         [24] 6044 	mov	b,#0x80
      001958 12 10 6B         [24] 6045 	lcall	_LCD_string_write
                                   6046 ;	.\ecen4350_lcd_v4.c:1251: setColorDefault();
      00195B 12 16 2F         [24] 6047 	lcall	_setColorDefault
                                   6048 ;	.\ecen4350_lcd_v4.c:1252: setCursor(0, 140);
      00195E 75 6B 8C         [24] 6049 	mov	_setCursor_PARM_2,#0x8c
      001961 75 6C 00         [24] 6050 	mov	(_setCursor_PARM_2 + 1),#0x00
      001964 90 00 00         [24] 6051 	mov	dptr,#0x0000
      001967 12 05 51         [24] 6052 	lcall	_setCursor
                                   6053 ;	.\ecen4350_lcd_v4.c:1253: LCD_string_write(" Choose Block Type:\n");
      00196A 90 5E 5E         [24] 6054 	mov	dptr,#___str_25
      00196D 75 F0 80         [24] 6055 	mov	b,#0x80
      001970 12 10 6B         [24] 6056 	lcall	_LCD_string_write
                                   6057 ;	.\ecen4350_lcd_v4.c:1254: setCursor(0, 160); 
      001973 75 6B A0         [24] 6058 	mov	_setCursor_PARM_2,#0xa0
      001976 75 6C 00         [24] 6059 	mov	(_setCursor_PARM_2 + 1),#0x00
      001979 90 00 00         [24] 6060 	mov	dptr,#0x0000
      00197C 12 05 51         [24] 6061 	lcall	_setCursor
                                   6062 ;	.\ecen4350_lcd_v4.c:1255: setColorGray();
      00197F 12 16 5D         [24] 6063 	lcall	_setColorGray
                                   6064 ;	.\ecen4350_lcd_v4.c:1256: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001982 90 5E 73         [24] 6065 	mov	dptr,#___str_26
      001985 75 F0 80         [24] 6066 	mov	b,#0x80
      001988 12 10 6B         [24] 6067 	lcall	_LCD_string_write
                                   6068 ;	.\ecen4350_lcd_v4.c:1257: setCursor(0, 240);
      00198B 75 6B F0         [24] 6069 	mov	_setCursor_PARM_2,#0xf0
      00198E 75 6C 00         [24] 6070 	mov	(_setCursor_PARM_2 + 1),#0x00
      001991 90 00 00         [24] 6071 	mov	dptr,#0x0000
      001994 12 05 51         [24] 6072 	lcall	_setCursor
                                   6073 ;	.\ecen4350_lcd_v4.c:1258: LCD_string_write(" Input Size:");
      001997 90 5E 95         [24] 6074 	mov	dptr,#___str_27
      00199A 75 F0 80         [24] 6075 	mov	b,#0x80
      00199D 12 10 6B         [24] 6076 	lcall	_LCD_string_write
                                   6077 ;	.\ecen4350_lcd_v4.c:1259: setColorGray();
      0019A0 12 16 5D         [24] 6078 	lcall	_setColorGray
                                   6079 ;	.\ecen4350_lcd_v4.c:1260: LCD_string_write(" _");
      0019A3 90 5E A2         [24] 6080 	mov	dptr,#___str_28
      0019A6 75 F0 80         [24] 6081 	mov	b,#0x80
      0019A9 12 10 6B         [24] 6082 	lcall	_LCD_string_write
                                   6083 ;	.\ecen4350_lcd_v4.c:1267: setColorSelect();
      0019AC 12 16 3A         [24] 6084 	lcall	_setColorSelect
                                   6085 ;	.\ecen4350_lcd_v4.c:1268: setCursor(0, 60);
      0019AF 75 6B 3C         [24] 6086 	mov	_setCursor_PARM_2,#0x3c
      0019B2 75 6C 00         [24] 6087 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019B5 90 00 00         [24] 6088 	mov	dptr,#0x0000
      0019B8 12 05 51         [24] 6089 	lcall	_setCursor
                                   6090 ;	.\ecen4350_lcd_v4.c:1269: LCD_string_write(" Address Location:");
      0019BB 90 5E A5         [24] 6091 	mov	dptr,#___str_29
      0019BE 75 F0 80         [24] 6092 	mov	b,#0x80
      0019C1 12 10 6B         [24] 6093 	lcall	_LCD_string_write
                                   6094 ;	.\ecen4350_lcd_v4.c:1270: setCursor(0, 80);
      0019C4 75 6B 50         [24] 6095 	mov	_setCursor_PARM_2,#0x50
      0019C7 75 6C 00         [24] 6096 	mov	(_setCursor_PARM_2 + 1),#0x00
      0019CA 90 00 00         [24] 6097 	mov	dptr,#0x0000
      0019CD 12 05 51         [24] 6098 	lcall	_setCursor
                                   6099 ;	.\ecen4350_lcd_v4.c:1271: LCD_string_write(" ");
      0019D0 90 5E B8         [24] 6100 	mov	dptr,#___str_30
      0019D3 75 F0 80         [24] 6101 	mov	b,#0x80
      0019D6 12 10 6B         [24] 6102 	lcall	_LCD_string_write
                                   6103 ;	.\ecen4350_lcd_v4.c:1272: setColorHighlight1();
      0019D9 12 16 45         [24] 6104 	lcall	_setColorHighlight1
                                   6105 ;	.\ecen4350_lcd_v4.c:1273: LCD_string_write("0x");
      0019DC 90 5D 8D         [24] 6106 	mov	dptr,#___str_2
      0019DF 75 F0 80         [24] 6107 	mov	b,#0x80
      0019E2 12 10 6B         [24] 6108 	lcall	_LCD_string_write
                                   6109 ;	.\ecen4350_lcd_v4.c:1274: address = inputAddress();				// input 16-bit address and store in memory
      0019E5 12 16 A0         [24] 6110 	lcall	_inputAddress
      0019E8 78 7A            [12] 6111 	mov	r0,#_dump_address_65536_553
      0019EA A6 82            [24] 6112 	mov	@r0,dpl
      0019EC 08               [12] 6113 	inc	r0
      0019ED A6 83            [24] 6114 	mov	@r0,dph
      0019EF D0 03            [24] 6115 	pop	ar3
      0019F1 D0 05            [24] 6116 	pop	ar5
                                   6117 ;	.\ecen4350_lcd_v4.c:1275: d = (unsigned char __xdata *)(address);
      0019F3 78 7A            [12] 6118 	mov	r0,#_dump_address_65536_553
      0019F5 86 04            [24] 6119 	mov	ar4,@r0
      0019F7 08               [12] 6120 	inc	r0
      0019F8 86 06            [24] 6121 	mov	ar6,@r0
                                   6122 ;	.\ecen4350_lcd_v4.c:1278: setColorDefault();
      0019FA C0 06            [24] 6123 	push	ar6
      0019FC C0 05            [24] 6124 	push	ar5
      0019FE C0 04            [24] 6125 	push	ar4
      001A00 C0 03            [24] 6126 	push	ar3
      001A02 12 16 2F         [24] 6127 	lcall	_setColorDefault
                                   6128 ;	.\ecen4350_lcd_v4.c:1279: setCursor(0, 60);
      001A05 75 6B 3C         [24] 6129 	mov	_setCursor_PARM_2,#0x3c
      001A08 75 6C 00         [24] 6130 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A0B 90 00 00         [24] 6131 	mov	dptr,#0x0000
      001A0E 12 05 51         [24] 6132 	lcall	_setCursor
                                   6133 ;	.\ecen4350_lcd_v4.c:1280: LCD_string_write(" Address Location:");
      001A11 90 5E A5         [24] 6134 	mov	dptr,#___str_29
      001A14 75 F0 80         [24] 6135 	mov	b,#0x80
      001A17 12 10 6B         [24] 6136 	lcall	_LCD_string_write
                                   6137 ;	.\ecen4350_lcd_v4.c:1281: setCursor(0, 80);
      001A1A 75 6B 50         [24] 6138 	mov	_setCursor_PARM_2,#0x50
      001A1D 75 6C 00         [24] 6139 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A20 90 00 00         [24] 6140 	mov	dptr,#0x0000
      001A23 12 05 51         [24] 6141 	lcall	_setCursor
                                   6142 ;	.\ecen4350_lcd_v4.c:1282: LCD_string_write(" ");
      001A26 90 5E B8         [24] 6143 	mov	dptr,#___str_30
      001A29 75 F0 80         [24] 6144 	mov	b,#0x80
      001A2C 12 10 6B         [24] 6145 	lcall	_LCD_string_write
                                   6146 ;	.\ecen4350_lcd_v4.c:1283: setColorHighlight2();
      001A2F 12 16 51         [24] 6147 	lcall	_setColorHighlight2
                                   6148 ;	.\ecen4350_lcd_v4.c:1284: LCD_string_write("0x");
      001A32 90 5D 8D         [24] 6149 	mov	dptr,#___str_2
      001A35 75 F0 80         [24] 6150 	mov	b,#0x80
      001A38 12 10 6B         [24] 6151 	lcall	_LCD_string_write
                                   6152 ;	.\ecen4350_lcd_v4.c:1285: print16Hex(address);					// print 16-bit address from stored memory
      001A3B 78 7A            [12] 6153 	mov	r0,#_dump_address_65536_553
      001A3D 86 82            [24] 6154 	mov	dpl,@r0
      001A3F 08               [12] 6155 	inc	r0
      001A40 86 83            [24] 6156 	mov	dph,@r0
      001A42 12 15 53         [24] 6157 	lcall	_print16Hex
                                   6158 ;	.\ecen4350_lcd_v4.c:1288: setColorSelect();
      001A45 12 16 3A         [24] 6159 	lcall	_setColorSelect
                                   6160 ;	.\ecen4350_lcd_v4.c:1289: setCursor(0, 140);
      001A48 75 6B 8C         [24] 6161 	mov	_setCursor_PARM_2,#0x8c
      001A4B 75 6C 00         [24] 6162 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A4E 90 00 00         [24] 6163 	mov	dptr,#0x0000
      001A51 12 05 51         [24] 6164 	lcall	_setCursor
                                   6165 ;	.\ecen4350_lcd_v4.c:1290: LCD_string_write(" Choose Block Type:");
      001A54 90 5E BA         [24] 6166 	mov	dptr,#___str_31
      001A57 75 F0 80         [24] 6167 	mov	b,#0x80
      001A5A 12 10 6B         [24] 6168 	lcall	_LCD_string_write
                                   6169 ;	.\ecen4350_lcd_v4.c:1291: setCursor(0, 160); 
      001A5D 75 6B A0         [24] 6170 	mov	_setCursor_PARM_2,#0xa0
      001A60 75 6C 00         [24] 6171 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A63 90 00 00         [24] 6172 	mov	dptr,#0x0000
      001A66 12 05 51         [24] 6173 	lcall	_setCursor
                                   6174 ;	.\ecen4350_lcd_v4.c:1292: setColorWhite();
      001A69 12 16 7F         [24] 6175 	lcall	_setColorWhite
                                   6176 ;	.\ecen4350_lcd_v4.c:1293: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      001A6C 90 5E 73         [24] 6177 	mov	dptr,#___str_26
      001A6F 75 F0 80         [24] 6178 	mov	b,#0x80
      001A72 12 10 6B         [24] 6179 	lcall	_LCD_string_write
      001A75 D0 03            [24] 6180 	pop	ar3
      001A77 D0 04            [24] 6181 	pop	ar4
      001A79 D0 05            [24] 6182 	pop	ar5
      001A7B D0 06            [24] 6183 	pop	ar6
      001A7D D0 07            [24] 6184 	pop	ar7
                                   6185 ;	.\ecen4350_lcd_v4.c:1296: while (invalidType) {
      001A7F                       6186 00109$:
      001A7F ED               [12] 6187 	mov	a,r5
      001A80 70 03            [24] 6188 	jnz	00235$
      001A82 02 1B FB         [24] 6189 	ljmp	00153$
      001A85                       6190 00235$:
                                   6191 ;	.\ecen4350_lcd_v4.c:1297: setCursor(0, 160);
      001A85 75 6B A0         [24] 6192 	mov	_setCursor_PARM_2,#0xa0
      001A88 75 6C 00         [24] 6193 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A8B 90 00 00         [24] 6194 	mov	dptr,#0x0000
      001A8E C0 06            [24] 6195 	push	ar6
      001A90 C0 05            [24] 6196 	push	ar5
      001A92 C0 04            [24] 6197 	push	ar4
      001A94 C0 03            [24] 6198 	push	ar3
      001A96 12 05 51         [24] 6199 	lcall	_setCursor
                                   6200 ;	.\ecen4350_lcd_v4.c:1298: setColorWhite();
      001A99 12 16 7F         [24] 6201 	lcall	_setColorWhite
                                   6202 ;	.\ecen4350_lcd_v4.c:1299: LCD_string_write("\n\n");
      001A9C 90 5E CE         [24] 6203 	mov	dptr,#___str_32
      001A9F 75 F0 80         [24] 6204 	mov	b,#0x80
      001AA2 12 10 6B         [24] 6205 	lcall	_LCD_string_write
                                   6206 ;	.\ecen4350_lcd_v4.c:1301: blockType = inputBlockType();
      001AA5 12 17 42         [24] 6207 	lcall	_inputBlockType
      001AA8 AF 82            [24] 6208 	mov	r7,dpl
      001AAA D0 03            [24] 6209 	pop	ar3
      001AAC D0 04            [24] 6210 	pop	ar4
      001AAE D0 05            [24] 6211 	pop	ar5
      001AB0 D0 06            [24] 6212 	pop	ar6
                                   6213 ;	.\ecen4350_lcd_v4.c:1303: if (blockType == 0x1) {
      001AB2 BF 01 5B         [24] 6214 	cjne	r7,#0x01,00102$
                                   6215 ;	.\ecen4350_lcd_v4.c:1304: invalidType = 0;
      001AB5 7D 00            [12] 6216 	mov	r5,#0x00
                                   6217 ;	.\ecen4350_lcd_v4.c:1306: setColorDefault();
      001AB7 C0 07            [24] 6218 	push	ar7
      001AB9 C0 06            [24] 6219 	push	ar6
      001ABB C0 05            [24] 6220 	push	ar5
      001ABD C0 04            [24] 6221 	push	ar4
      001ABF C0 03            [24] 6222 	push	ar3
      001AC1 12 16 2F         [24] 6223 	lcall	_setColorDefault
                                   6224 ;	.\ecen4350_lcd_v4.c:1307: setCursor(0, 140);
      001AC4 75 6B 8C         [24] 6225 	mov	_setCursor_PARM_2,#0x8c
      001AC7 75 6C 00         [24] 6226 	mov	(_setCursor_PARM_2 + 1),#0x00
      001ACA 90 00 00         [24] 6227 	mov	dptr,#0x0000
      001ACD 12 05 51         [24] 6228 	lcall	_setCursor
                                   6229 ;	.\ecen4350_lcd_v4.c:1308: LCD_string_write(" Choose Block Type:");
      001AD0 90 5E BA         [24] 6230 	mov	dptr,#___str_31
      001AD3 75 F0 80         [24] 6231 	mov	b,#0x80
      001AD6 12 10 6B         [24] 6232 	lcall	_LCD_string_write
                                   6233 ;	.\ecen4350_lcd_v4.c:1309: setCursor(0, 160);
      001AD9 75 6B A0         [24] 6234 	mov	_setCursor_PARM_2,#0xa0
      001ADC 75 6C 00         [24] 6235 	mov	(_setCursor_PARM_2 + 1),#0x00
      001ADF 90 00 00         [24] 6236 	mov	dptr,#0x0000
      001AE2 12 05 51         [24] 6237 	lcall	_setCursor
                                   6238 ;	.\ecen4350_lcd_v4.c:1310: LCD_string_write("  ");
      001AE5 90 5E D1         [24] 6239 	mov	dptr,#___str_33
      001AE8 75 F0 80         [24] 6240 	mov	b,#0x80
      001AEB 12 10 6B         [24] 6241 	lcall	_LCD_string_write
                                   6242 ;	.\ecen4350_lcd_v4.c:1311: setColorHighlight2();
      001AEE 12 16 51         [24] 6243 	lcall	_setColorHighlight2
                                   6244 ;	.\ecen4350_lcd_v4.c:1312: LCD_string_write("<1> BYTE\n");
      001AF1 90 5E D4         [24] 6245 	mov	dptr,#___str_34
      001AF4 75 F0 80         [24] 6246 	mov	b,#0x80
      001AF7 12 10 6B         [24] 6247 	lcall	_LCD_string_write
                                   6248 ;	.\ecen4350_lcd_v4.c:1313: setColorGray();
      001AFA 12 16 5D         [24] 6249 	lcall	_setColorGray
                                   6250 ;	.\ecen4350_lcd_v4.c:1314: LCD_string_write("\n\n                \n                ");
      001AFD 90 5E DE         [24] 6251 	mov	dptr,#___str_35
      001B00 75 F0 80         [24] 6252 	mov	b,#0x80
      001B03 12 10 6B         [24] 6253 	lcall	_LCD_string_write
      001B06 D0 03            [24] 6254 	pop	ar3
      001B08 D0 04            [24] 6255 	pop	ar4
      001B0A D0 05            [24] 6256 	pop	ar5
      001B0C D0 06            [24] 6257 	pop	ar6
      001B0E D0 07            [24] 6258 	pop	ar7
      001B10                       6259 00102$:
                                   6260 ;	.\ecen4350_lcd_v4.c:1315: } if (blockType == 0x2) {
      001B10 BF 02 5E         [24] 6261 	cjne	r7,#0x02,00104$
                                   6262 ;	.\ecen4350_lcd_v4.c:1316: invalidType = 0;
      001B13 7D 00            [12] 6263 	mov	r5,#0x00
                                   6264 ;	.\ecen4350_lcd_v4.c:1318: setColorDefault();
      001B15 C0 07            [24] 6265 	push	ar7
      001B17 C0 06            [24] 6266 	push	ar6
      001B19 C0 05            [24] 6267 	push	ar5
      001B1B C0 04            [24] 6268 	push	ar4
      001B1D C0 03            [24] 6269 	push	ar3
      001B1F 12 16 2F         [24] 6270 	lcall	_setColorDefault
                                   6271 ;	.\ecen4350_lcd_v4.c:1319: setCursor(0, 140);
      001B22 75 6B 8C         [24] 6272 	mov	_setCursor_PARM_2,#0x8c
      001B25 75 6C 00         [24] 6273 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B28 90 00 00         [24] 6274 	mov	dptr,#0x0000
      001B2B 12 05 51         [24] 6275 	lcall	_setCursor
                                   6276 ;	.\ecen4350_lcd_v4.c:1320: LCD_string_write(" Choose Block Type:");
      001B2E 90 5E BA         [24] 6277 	mov	dptr,#___str_31
      001B31 75 F0 80         [24] 6278 	mov	b,#0x80
      001B34 12 10 6B         [24] 6279 	lcall	_LCD_string_write
                                   6280 ;	.\ecen4350_lcd_v4.c:1321: setCursor(0, 160);
      001B37 75 6B A0         [24] 6281 	mov	_setCursor_PARM_2,#0xa0
      001B3A 75 6C 00         [24] 6282 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B3D 90 00 00         [24] 6283 	mov	dptr,#0x0000
      001B40 12 05 51         [24] 6284 	lcall	_setCursor
                                   6285 ;	.\ecen4350_lcd_v4.c:1322: setColorGray();
      001B43 12 16 5D         [24] 6286 	lcall	_setColorGray
                                   6287 ;	.\ecen4350_lcd_v4.c:1323: LCD_string_write("\n  ");
      001B46 90 5F 02         [24] 6288 	mov	dptr,#___str_36
      001B49 75 F0 80         [24] 6289 	mov	b,#0x80
      001B4C 12 10 6B         [24] 6290 	lcall	_LCD_string_write
                                   6291 ;	.\ecen4350_lcd_v4.c:1324: setColorHighlight2();
      001B4F 12 16 51         [24] 6292 	lcall	_setColorHighlight2
                                   6293 ;	.\ecen4350_lcd_v4.c:1325: LCD_string_write("<2> WORD\n");
      001B52 90 5F 06         [24] 6294 	mov	dptr,#___str_37
      001B55 75 F0 80         [24] 6295 	mov	b,#0x80
      001B58 12 10 6B         [24] 6296 	lcall	_LCD_string_write
                                   6297 ;	.\ecen4350_lcd_v4.c:1326: setColorGray();
      001B5B 12 16 5D         [24] 6298 	lcall	_setColorGray
                                   6299 ;	.\ecen4350_lcd_v4.c:1327: LCD_string_write("\n                \n                ");
      001B5E 90 5F 10         [24] 6300 	mov	dptr,#___str_38
      001B61 75 F0 80         [24] 6301 	mov	b,#0x80
      001B64 12 10 6B         [24] 6302 	lcall	_LCD_string_write
      001B67 D0 03            [24] 6303 	pop	ar3
      001B69 D0 04            [24] 6304 	pop	ar4
      001B6B D0 05            [24] 6305 	pop	ar5
      001B6D D0 06            [24] 6306 	pop	ar6
      001B6F D0 07            [24] 6307 	pop	ar7
      001B71                       6308 00104$:
                                   6309 ;	.\ecen4350_lcd_v4.c:1328: } if (blockType == 0x4) {
      001B71 BF 04 5E         [24] 6310 	cjne	r7,#0x04,00106$
                                   6311 ;	.\ecen4350_lcd_v4.c:1329: invalidType = 0;
      001B74 7D 00            [12] 6312 	mov	r5,#0x00
                                   6313 ;	.\ecen4350_lcd_v4.c:1331: setColorDefault();
      001B76 C0 07            [24] 6314 	push	ar7
      001B78 C0 06            [24] 6315 	push	ar6
      001B7A C0 05            [24] 6316 	push	ar5
      001B7C C0 04            [24] 6317 	push	ar4
      001B7E C0 03            [24] 6318 	push	ar3
      001B80 12 16 2F         [24] 6319 	lcall	_setColorDefault
                                   6320 ;	.\ecen4350_lcd_v4.c:1332: setCursor(0, 140);
      001B83 75 6B 8C         [24] 6321 	mov	_setCursor_PARM_2,#0x8c
      001B86 75 6C 00         [24] 6322 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B89 90 00 00         [24] 6323 	mov	dptr,#0x0000
      001B8C 12 05 51         [24] 6324 	lcall	_setCursor
                                   6325 ;	.\ecen4350_lcd_v4.c:1333: LCD_string_write(" Choose Block Type:");
      001B8F 90 5E BA         [24] 6326 	mov	dptr,#___str_31
      001B92 75 F0 80         [24] 6327 	mov	b,#0x80
      001B95 12 10 6B         [24] 6328 	lcall	_LCD_string_write
                                   6329 ;	.\ecen4350_lcd_v4.c:1334: setCursor(0, 160);
      001B98 75 6B A0         [24] 6330 	mov	_setCursor_PARM_2,#0xa0
      001B9B 75 6C 00         [24] 6331 	mov	(_setCursor_PARM_2 + 1),#0x00
      001B9E 90 00 00         [24] 6332 	mov	dptr,#0x0000
      001BA1 12 05 51         [24] 6333 	lcall	_setCursor
                                   6334 ;	.\ecen4350_lcd_v4.c:1335: setColorGray();
      001BA4 12 16 5D         [24] 6335 	lcall	_setColorGray
                                   6336 ;	.\ecen4350_lcd_v4.c:1336: LCD_string_write("\n\n  ");
      001BA7 90 5F 33         [24] 6337 	mov	dptr,#___str_39
      001BAA 75 F0 80         [24] 6338 	mov	b,#0x80
      001BAD 12 10 6B         [24] 6339 	lcall	_LCD_string_write
                                   6340 ;	.\ecen4350_lcd_v4.c:1337: setColorHighlight2();
      001BB0 12 16 51         [24] 6341 	lcall	_setColorHighlight2
                                   6342 ;	.\ecen4350_lcd_v4.c:1338: LCD_string_write("<4> DWORD");
      001BB3 90 5F 38         [24] 6343 	mov	dptr,#___str_40
      001BB6 75 F0 80         [24] 6344 	mov	b,#0x80
      001BB9 12 10 6B         [24] 6345 	lcall	_LCD_string_write
                                   6346 ;	.\ecen4350_lcd_v4.c:1339: setColorGray();
      001BBC 12 16 5D         [24] 6347 	lcall	_setColorGray
                                   6348 ;	.\ecen4350_lcd_v4.c:1340: LCD_string_write("\n                \n                ");
      001BBF 90 5F 10         [24] 6349 	mov	dptr,#___str_38
      001BC2 75 F0 80         [24] 6350 	mov	b,#0x80
      001BC5 12 10 6B         [24] 6351 	lcall	_LCD_string_write
      001BC8 D0 03            [24] 6352 	pop	ar3
      001BCA D0 04            [24] 6353 	pop	ar4
      001BCC D0 05            [24] 6354 	pop	ar5
      001BCE D0 06            [24] 6355 	pop	ar6
      001BD0 D0 07            [24] 6356 	pop	ar7
      001BD2                       6357 00106$:
                                   6358 ;	.\ecen4350_lcd_v4.c:1342: if (invalidType) {
      001BD2 ED               [12] 6359 	mov	a,r5
      001BD3 70 03            [24] 6360 	jnz	00242$
      001BD5 02 1A 7F         [24] 6361 	ljmp	00109$
      001BD8                       6362 00242$:
                                   6363 ;	.\ecen4350_lcd_v4.c:1343: setColorRed();
      001BD8 C0 07            [24] 6364 	push	ar7
      001BDA C0 06            [24] 6365 	push	ar6
      001BDC C0 05            [24] 6366 	push	ar5
      001BDE C0 04            [24] 6367 	push	ar4
      001BE0 C0 03            [24] 6368 	push	ar3
      001BE2 12 16 74         [24] 6369 	lcall	_setColorRed
                                   6370 ;	.\ecen4350_lcd_v4.c:1344: LCD_string_write("\n  Input Error\n  Try Again");
      001BE5 90 5F 42         [24] 6371 	mov	dptr,#___str_41
      001BE8 75 F0 80         [24] 6372 	mov	b,#0x80
      001BEB 12 10 6B         [24] 6373 	lcall	_LCD_string_write
      001BEE D0 03            [24] 6374 	pop	ar3
      001BF0 D0 04            [24] 6375 	pop	ar4
      001BF2 D0 05            [24] 6376 	pop	ar5
      001BF4 D0 06            [24] 6377 	pop	ar6
      001BF6 D0 07            [24] 6378 	pop	ar7
      001BF8 02 1A 7F         [24] 6379 	ljmp	00109$
                                   6380 ;	.\ecen4350_lcd_v4.c:1350: while (invalidSize)
      001BFB                       6381 00153$:
      001BFB                       6382 00115$:
      001BFB EB               [12] 6383 	mov	a,r3
      001BFC 70 03            [24] 6384 	jnz	00243$
      001BFE 02 1C F6         [24] 6385 	ljmp	00117$
      001C01                       6386 00243$:
                                   6387 ;	.\ecen4350_lcd_v4.c:1353: setCursor(0, 240);
      001C01 75 6B F0         [24] 6388 	mov	_setCursor_PARM_2,#0xf0
      001C04 75 6C 00         [24] 6389 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C07 90 00 00         [24] 6390 	mov	dptr,#0x0000
      001C0A C0 07            [24] 6391 	push	ar7
      001C0C C0 06            [24] 6392 	push	ar6
      001C0E C0 04            [24] 6393 	push	ar4
      001C10 C0 03            [24] 6394 	push	ar3
      001C12 12 05 51         [24] 6395 	lcall	_setCursor
                                   6396 ;	.\ecen4350_lcd_v4.c:1354: setColorSelect();
      001C15 12 16 3A         [24] 6397 	lcall	_setColorSelect
                                   6398 ;	.\ecen4350_lcd_v4.c:1355: LCD_string_write(" Input Size: ");
      001C18 90 5F 5D         [24] 6399 	mov	dptr,#___str_42
      001C1B 75 F0 80         [24] 6400 	mov	b,#0x80
      001C1E 12 10 6B         [24] 6401 	lcall	_LCD_string_write
                                   6402 ;	.\ecen4350_lcd_v4.c:1356: setColorHighlight1();
      001C21 12 16 45         [24] 6403 	lcall	_setColorHighlight1
                                   6404 ;	.\ecen4350_lcd_v4.c:1357: selection = keyDetect();
      001C24 12 11 89         [24] 6405 	lcall	_keyDetect
      001C27 AD 82            [24] 6406 	mov	r5,dpl
      001C29 78 71            [12] 6407 	mov	r0,#_selection
      001C2B A6 05            [24] 6408 	mov	@r0,ar5
                                   6409 ;	.\ecen4350_lcd_v4.c:1358: write(selection);
      001C2D 8D 82            [24] 6410 	mov	dpl,r5
      001C2F 12 10 05         [24] 6411 	lcall	_write
                                   6412 ;	.\ecen4350_lcd_v4.c:1359: blockSize = ASCIItoHex(selection);
      001C32 78 71            [12] 6413 	mov	r0,#_selection
      001C34 86 82            [24] 6414 	mov	dpl,@r0
      001C36 12 13 F7         [24] 6415 	lcall	_ASCIItoHex
      001C39 AD 82            [24] 6416 	mov	r5,dpl
      001C3B D0 03            [24] 6417 	pop	ar3
      001C3D D0 04            [24] 6418 	pop	ar4
                                   6419 ;	.\ecen4350_lcd_v4.c:1360: setColorDefault();
      001C3F C0 05            [24] 6420 	push	ar5
      001C41 C0 04            [24] 6421 	push	ar4
      001C43 C0 03            [24] 6422 	push	ar3
      001C45 12 16 2F         [24] 6423 	lcall	_setColorDefault
      001C48 D0 03            [24] 6424 	pop	ar3
      001C4A D0 04            [24] 6425 	pop	ar4
      001C4C D0 05            [24] 6426 	pop	ar5
      001C4E D0 06            [24] 6427 	pop	ar6
      001C50 D0 07            [24] 6428 	pop	ar7
                                   6429 ;	.\ecen4350_lcd_v4.c:1362: if (blockSize != blockType) {
      001C52 ED               [12] 6430 	mov	a,r5
      001C53 B5 07 02         [24] 6431 	cjne	a,ar7,00244$
      001C56 80 4F            [24] 6432 	sjmp	00113$
      001C58                       6433 00244$:
                                   6434 ;	.\ecen4350_lcd_v4.c:1363: setColorSelect();
      001C58 C0 07            [24] 6435 	push	ar7
      001C5A C0 06            [24] 6436 	push	ar6
      001C5C C0 04            [24] 6437 	push	ar4
      001C5E C0 03            [24] 6438 	push	ar3
      001C60 12 16 3A         [24] 6439 	lcall	_setColorSelect
                                   6440 ;	.\ecen4350_lcd_v4.c:1364: LCD_string_write(" Input Size:");
      001C63 90 5E 95         [24] 6441 	mov	dptr,#___str_27
      001C66 75 F0 80         [24] 6442 	mov	b,#0x80
      001C69 12 10 6B         [24] 6443 	lcall	_LCD_string_write
                                   6444 ;	.\ecen4350_lcd_v4.c:1365: setColorGray();
      001C6C 12 16 5D         [24] 6445 	lcall	_setColorGray
                                   6446 ;	.\ecen4350_lcd_v4.c:1366: LCD_string_write(" _");
      001C6F 90 5E A2         [24] 6447 	mov	dptr,#___str_28
      001C72 75 F0 80         [24] 6448 	mov	b,#0x80
      001C75 12 10 6B         [24] 6449 	lcall	_LCD_string_write
                                   6450 ;	.\ecen4350_lcd_v4.c:1367: setCursor(0,260);
      001C78 75 6B 04         [24] 6451 	mov	_setCursor_PARM_2,#0x04
      001C7B 75 6C 01         [24] 6452 	mov	(_setCursor_PARM_2 + 1),#0x01
      001C7E 90 00 00         [24] 6453 	mov	dptr,#0x0000
      001C81 12 05 51         [24] 6454 	lcall	_setCursor
                                   6455 ;	.\ecen4350_lcd_v4.c:1368: setColorRed();
      001C84 12 16 74         [24] 6456 	lcall	_setColorRed
                                   6457 ;	.\ecen4350_lcd_v4.c:1369: LCD_string_write(" Mismatch Error\n Try Again");
      001C87 90 5F 6B         [24] 6458 	mov	dptr,#___str_43
      001C8A 75 F0 80         [24] 6459 	mov	b,#0x80
      001C8D 12 10 6B         [24] 6460 	lcall	_LCD_string_write
                                   6461 ;	.\ecen4350_lcd_v4.c:1370: setCursor(0, 240);
      001C90 75 6B F0         [24] 6462 	mov	_setCursor_PARM_2,#0xf0
      001C93 75 6C 00         [24] 6463 	mov	(_setCursor_PARM_2 + 1),#0x00
      001C96 90 00 00         [24] 6464 	mov	dptr,#0x0000
      001C99 12 05 51         [24] 6465 	lcall	_setCursor
      001C9C D0 03            [24] 6466 	pop	ar3
      001C9E D0 04            [24] 6467 	pop	ar4
      001CA0 D0 06            [24] 6468 	pop	ar6
      001CA2 D0 07            [24] 6469 	pop	ar7
      001CA4 02 1B FB         [24] 6470 	ljmp	00115$
      001CA7                       6471 00113$:
                                   6472 ;	.\ecen4350_lcd_v4.c:1372: setCursor(0, 240);
      001CA7 75 6B F0         [24] 6473 	mov	_setCursor_PARM_2,#0xf0
      001CAA 75 6C 00         [24] 6474 	mov	(_setCursor_PARM_2 + 1),#0x00
      001CAD 90 00 00         [24] 6475 	mov	dptr,#0x0000
      001CB0 C0 07            [24] 6476 	push	ar7
      001CB2 C0 06            [24] 6477 	push	ar6
      001CB4 C0 04            [24] 6478 	push	ar4
      001CB6 12 05 51         [24] 6479 	lcall	_setCursor
                                   6480 ;	.\ecen4350_lcd_v4.c:1373: setColorDefault();
      001CB9 12 16 2F         [24] 6481 	lcall	_setColorDefault
                                   6482 ;	.\ecen4350_lcd_v4.c:1374: LCD_string_write(" Input Size: ");
      001CBC 90 5F 5D         [24] 6483 	mov	dptr,#___str_42
      001CBF 75 F0 80         [24] 6484 	mov	b,#0x80
      001CC2 12 10 6B         [24] 6485 	lcall	_LCD_string_write
                                   6486 ;	.\ecen4350_lcd_v4.c:1375: setColorHighlight2();
      001CC5 12 16 51         [24] 6487 	lcall	_setColorHighlight2
                                   6488 ;	.\ecen4350_lcd_v4.c:1376: write(selection);
      001CC8 78 71            [12] 6489 	mov	r0,#_selection
      001CCA 86 82            [24] 6490 	mov	dpl,@r0
      001CCC 12 10 05         [24] 6491 	lcall	_write
                                   6492 ;	.\ecen4350_lcd_v4.c:1377: invalidSize = 0;
      001CCF 7B 00            [12] 6493 	mov	r3,#0x00
                                   6494 ;	.\ecen4350_lcd_v4.c:1378: setCursor(0,260);
      001CD1 75 6B 04         [24] 6495 	mov	_setCursor_PARM_2,#0x04
      001CD4 75 6C 01         [24] 6496 	mov	(_setCursor_PARM_2 + 1),#0x01
      001CD7 90 00 00         [24] 6497 	mov	dptr,#0x0000
      001CDA C0 03            [24] 6498 	push	ar3
      001CDC 12 05 51         [24] 6499 	lcall	_setCursor
                                   6500 ;	.\ecen4350_lcd_v4.c:1379: setColorGreen();
      001CDF 12 16 8A         [24] 6501 	lcall	_setColorGreen
                                   6502 ;	.\ecen4350_lcd_v4.c:1380: LCD_string_write(" Match Confirmed\n                ");
      001CE2 90 5F 86         [24] 6503 	mov	dptr,#___str_44
      001CE5 75 F0 80         [24] 6504 	mov	b,#0x80
      001CE8 12 10 6B         [24] 6505 	lcall	_LCD_string_write
      001CEB D0 03            [24] 6506 	pop	ar3
      001CED D0 04            [24] 6507 	pop	ar4
      001CEF D0 06            [24] 6508 	pop	ar6
      001CF1 D0 07            [24] 6509 	pop	ar7
      001CF3 02 1B FB         [24] 6510 	ljmp	00115$
      001CF6                       6511 00117$:
                                   6512 ;	.\ecen4350_lcd_v4.c:1384: delay(40);
      001CF6 90 00 28         [24] 6513 	mov	dptr,#0x0028
      001CF9 C0 07            [24] 6514 	push	ar7
      001CFB C0 06            [24] 6515 	push	ar6
      001CFD C0 04            [24] 6516 	push	ar4
      001CFF 12 01 87         [24] 6517 	lcall	_delay
                                   6518 ;	.\ecen4350_lcd_v4.c:1385: clearLCD();
      001D02 12 0D EE         [24] 6519 	lcall	_clearLCD
                                   6520 ;	.\ecen4350_lcd_v4.c:1386: fillTop(GRAY);
      001D05 90 D6 BA         [24] 6521 	mov	dptr,#0xd6ba
      001D08 12 0C 21         [24] 6522 	lcall	_fillTop
                                   6523 ;	.\ecen4350_lcd_v4.c:1393: setTextSize(5);
      001D0B 75 82 05         [24] 6524 	mov	dpl,#0x05
      001D0E 12 05 6B         [24] 6525 	lcall	_setTextSize
                                   6526 ;	.\ecen4350_lcd_v4.c:1394: setColorMenu();
      001D11 12 16 68         [24] 6527 	lcall	_setColorMenu
                                   6528 ;	.\ecen4350_lcd_v4.c:1395: setCursor(30, 0);
      001D14 E4               [12] 6529 	clr	a
      001D15 F5 6B            [12] 6530 	mov	_setCursor_PARM_2,a
      001D17 F5 6C            [12] 6531 	mov	(_setCursor_PARM_2 + 1),a
      001D19 90 00 1E         [24] 6532 	mov	dptr,#0x001e
      001D1C 12 05 51         [24] 6533 	lcall	_setCursor
                                   6534 ;	.\ecen4350_lcd_v4.c:1396: LCD_string_write("[DUMP]\n");
      001D1F 90 5E 3A         [24] 6535 	mov	dptr,#___str_22
      001D22 75 F0 80         [24] 6536 	mov	b,#0x80
      001D25 12 10 6B         [24] 6537 	lcall	_LCD_string_write
                                   6538 ;	.\ecen4350_lcd_v4.c:1397: setColorDefault();
      001D28 12 16 2F         [24] 6539 	lcall	_setColorDefault
      001D2B D0 04            [24] 6540 	pop	ar4
      001D2D D0 06            [24] 6541 	pop	ar6
      001D2F D0 07            [24] 6542 	pop	ar7
                                   6543 ;	.\ecen4350_lcd_v4.c:1399: while (exit) {
      001D31 BF 01 03         [24] 6544 	cjne	r7,#0x01,00245$
      001D34 EF               [12] 6545 	mov	a,r7
      001D35 80 01            [24] 6546 	sjmp	00246$
      001D37                       6547 00245$:
      001D37 E4               [12] 6548 	clr	a
      001D38                       6549 00246$:
      001D38 FD               [12] 6550 	mov	r5,a
      001D39 E4               [12] 6551 	clr	a
      001D3A BF 02 01         [24] 6552 	cjne	r7,#0x02,00247$
      001D3D 04               [12] 6553 	inc	a
      001D3E                       6554 00247$:
      001D3E F5 5A            [12] 6555 	mov	_dump_sloc0_1_0,a
      001D40 E4               [12] 6556 	clr	a
      001D41 BF 04 01         [24] 6557 	cjne	r7,#0x04,00249$
      001D44 04               [12] 6558 	inc	a
      001D45                       6559 00249$:
      001D45 FF               [12] 6560 	mov	r7,a
      001D46                       6561 00126$:
      001D46 78 7C            [12] 6562 	mov	r0,#_dump_exit_65536_553
      001D48 E6               [12] 6563 	mov	a,@r0
      001D49 70 01            [24] 6564 	jnz	00251$
      001D4B 22               [24] 6565 	ret
      001D4C                       6566 00251$:
                                   6567 ;	.\ecen4350_lcd_v4.c:1400: setTextSize(2);
      001D4C 75 82 02         [24] 6568 	mov	dpl,#0x02
      001D4F C0 07            [24] 6569 	push	ar7
      001D51 C0 06            [24] 6570 	push	ar6
      001D53 C0 05            [24] 6571 	push	ar5
      001D55 C0 04            [24] 6572 	push	ar4
      001D57 12 05 6B         [24] 6573 	lcall	_setTextSize
                                   6574 ;	.\ecen4350_lcd_v4.c:1401: setColorWhite();
      001D5A 12 16 7F         [24] 6575 	lcall	_setColorWhite
                                   6576 ;	.\ecen4350_lcd_v4.c:1402: setCursor(0, 60);
      001D5D 75 6B 3C         [24] 6577 	mov	_setCursor_PARM_2,#0x3c
      001D60 75 6C 00         [24] 6578 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D63 90 00 00         [24] 6579 	mov	dptr,#0x0000
      001D66 12 05 51         [24] 6580 	lcall	_setCursor
                                   6581 ;	.\ecen4350_lcd_v4.c:1403: LCD_string_write(" Address:");
      001D69 90 5F A8         [24] 6582 	mov	dptr,#___str_45
      001D6C 75 F0 80         [24] 6583 	mov	b,#0x80
      001D6F 12 10 6B         [24] 6584 	lcall	_LCD_string_write
                                   6585 ;	.\ecen4350_lcd_v4.c:1404: setColorDefault();
      001D72 12 16 2F         [24] 6586 	lcall	_setColorDefault
                                   6587 ;	.\ecen4350_lcd_v4.c:1405: setCursor(0, 80);
      001D75 75 6B 50         [24] 6588 	mov	_setCursor_PARM_2,#0x50
      001D78 75 6C 00         [24] 6589 	mov	(_setCursor_PARM_2 + 1),#0x00
      001D7B 90 00 00         [24] 6590 	mov	dptr,#0x0000
      001D7E 12 05 51         [24] 6591 	lcall	_setCursor
                                   6592 ;	.\ecen4350_lcd_v4.c:1406: LCD_string_write(" 0x");
      001D81 90 5F B2         [24] 6593 	mov	dptr,#___str_46
      001D84 75 F0 80         [24] 6594 	mov	b,#0x80
      001D87 12 10 6B         [24] 6595 	lcall	_LCD_string_write
                                   6596 ;	.\ecen4350_lcd_v4.c:1407: print16Hex(address);
      001D8A 78 7A            [12] 6597 	mov	r0,#_dump_address_65536_553
      001D8C 86 82            [24] 6598 	mov	dpl,@r0
      001D8E 08               [12] 6599 	inc	r0
      001D8F 86 83            [24] 6600 	mov	dph,@r0
      001D91 12 15 53         [24] 6601 	lcall	_print16Hex
      001D94 D0 04            [24] 6602 	pop	ar4
      001D96 D0 05            [24] 6603 	pop	ar5
      001D98 D0 06            [24] 6604 	pop	ar6
      001D9A D0 07            [24] 6605 	pop	ar7
                                   6606 ;	.\ecen4350_lcd_v4.c:1408: if (blockType == 0x1)
      001D9C ED               [12] 6607 	mov	a,r5
      001D9D 70 03            [24] 6608 	jnz	00252$
      001D9F 02 1E 64         [24] 6609 	ljmp	00119$
      001DA2                       6610 00252$:
                                   6611 ;	.\ecen4350_lcd_v4.c:1410: setCursor(0, 120);
      001DA2 75 6B 78         [24] 6612 	mov	_setCursor_PARM_2,#0x78
      001DA5 75 6C 00         [24] 6613 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DA8 90 00 00         [24] 6614 	mov	dptr,#0x0000
      001DAB C0 07            [24] 6615 	push	ar7
      001DAD C0 06            [24] 6616 	push	ar6
      001DAF C0 05            [24] 6617 	push	ar5
      001DB1 C0 04            [24] 6618 	push	ar4
      001DB3 12 05 51         [24] 6619 	lcall	_setCursor
                                   6620 ;	.\ecen4350_lcd_v4.c:1411: setColorWhite();
      001DB6 12 16 7F         [24] 6621 	lcall	_setColorWhite
                                   6622 ;	.\ecen4350_lcd_v4.c:1412: LCD_string_write(" Hex Data:");
      001DB9 90 5F B6         [24] 6623 	mov	dptr,#___str_47
      001DBC 75 F0 80         [24] 6624 	mov	b,#0x80
      001DBF 12 10 6B         [24] 6625 	lcall	_LCD_string_write
                                   6626 ;	.\ecen4350_lcd_v4.c:1413: setColorDefault();
      001DC2 12 16 2F         [24] 6627 	lcall	_setColorDefault
                                   6628 ;	.\ecen4350_lcd_v4.c:1414: setCursor(10, 140);
      001DC5 75 6B 8C         [24] 6629 	mov	_setCursor_PARM_2,#0x8c
      001DC8 75 6C 00         [24] 6630 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DCB 90 00 0A         [24] 6631 	mov	dptr,#0x000a
      001DCE 12 05 51         [24] 6632 	lcall	_setCursor
      001DD1 D0 04            [24] 6633 	pop	ar4
      001DD3 D0 05            [24] 6634 	pop	ar5
      001DD5 D0 06            [24] 6635 	pop	ar6
                                   6636 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6637 ;	assignBit
      001DD7 C2 B5            [12] 6638 	clr	_P3_5
                                   6639 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001DD9 8C 82            [24] 6640 	mov	dpl,r4
      001DDB 8E 83            [24] 6641 	mov	dph,r6
      001DDD E0               [24] 6642 	movx	a,@dptr
      001DDE F5 82            [12] 6643 	mov	dpl,a
                                   6644 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6645 ;	assignBit
      001DE0 D2 B5            [12] 6646 	setb	_P3_5
                                   6647 ;	.\ecen4350_lcd_v4.c:1415: print8Hex(ramRead8(d));
      001DE2 C0 06            [24] 6648 	push	ar6
      001DE4 C0 05            [24] 6649 	push	ar5
      001DE6 C0 04            [24] 6650 	push	ar4
      001DE8 12 15 3C         [24] 6651 	lcall	_print8Hex
                                   6652 ;	.\ecen4350_lcd_v4.c:1417: setCursor(0, 180);
      001DEB 75 6B B4         [24] 6653 	mov	_setCursor_PARM_2,#0xb4
      001DEE 75 6C 00         [24] 6654 	mov	(_setCursor_PARM_2 + 1),#0x00
      001DF1 90 00 00         [24] 6655 	mov	dptr,#0x0000
      001DF4 12 05 51         [24] 6656 	lcall	_setCursor
                                   6657 ;	.\ecen4350_lcd_v4.c:1418: setColorWhite();
      001DF7 12 16 7F         [24] 6658 	lcall	_setColorWhite
                                   6659 ;	.\ecen4350_lcd_v4.c:1419: LCD_string_write(" ASCII Data:");
      001DFA 90 5F C1         [24] 6660 	mov	dptr,#___str_48
      001DFD 75 F0 80         [24] 6661 	mov	b,#0x80
      001E00 12 10 6B         [24] 6662 	lcall	_LCD_string_write
                                   6663 ;	.\ecen4350_lcd_v4.c:1420: setColorDefault();
      001E03 12 16 2F         [24] 6664 	lcall	_setColorDefault
                                   6665 ;	.\ecen4350_lcd_v4.c:1421: setCursor(10, 200);
      001E06 75 6B C8         [24] 6666 	mov	_setCursor_PARM_2,#0xc8
      001E09 75 6C 00         [24] 6667 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E0C 90 00 0A         [24] 6668 	mov	dptr,#0x000a
      001E0F 12 05 51         [24] 6669 	lcall	_setCursor
      001E12 D0 04            [24] 6670 	pop	ar4
      001E14 D0 05            [24] 6671 	pop	ar5
      001E16 D0 06            [24] 6672 	pop	ar6
                                   6673 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6674 ;	assignBit
      001E18 C2 B5            [12] 6675 	clr	_P3_5
                                   6676 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001E1A 8C 82            [24] 6677 	mov	dpl,r4
      001E1C 8E 83            [24] 6678 	mov	dph,r6
      001E1E E0               [24] 6679 	movx	a,@dptr
      001E1F F5 82            [12] 6680 	mov	dpl,a
                                   6681 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6682 ;	assignBit
      001E21 D2 B5            [12] 6683 	setb	_P3_5
                                   6684 ;	.\ecen4350_lcd_v4.c:1422: print8ASCII(ramRead8(d));
      001E23 C0 06            [24] 6685 	push	ar6
      001E25 C0 05            [24] 6686 	push	ar5
      001E27 C0 04            [24] 6687 	push	ar4
      001E29 12 15 BE         [24] 6688 	lcall	_print8ASCII
                                   6689 ;	.\ecen4350_lcd_v4.c:1424: setCursor(0, 240);
      001E2C 75 6B F0         [24] 6690 	mov	_setCursor_PARM_2,#0xf0
      001E2F 75 6C 00         [24] 6691 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E32 90 00 00         [24] 6692 	mov	dptr,#0x0000
      001E35 12 05 51         [24] 6693 	lcall	_setCursor
                                   6694 ;	.\ecen4350_lcd_v4.c:1425: setColorWhite();
      001E38 12 16 7F         [24] 6695 	lcall	_setColorWhite
                                   6696 ;	.\ecen4350_lcd_v4.c:1426: LCD_string_write(" Data Type:");
      001E3B 90 5F CE         [24] 6697 	mov	dptr,#___str_49
      001E3E 75 F0 80         [24] 6698 	mov	b,#0x80
      001E41 12 10 6B         [24] 6699 	lcall	_LCD_string_write
                                   6700 ;	.\ecen4350_lcd_v4.c:1427: setCursor(0, 260);
      001E44 75 6B 04         [24] 6701 	mov	_setCursor_PARM_2,#0x04
      001E47 75 6C 01         [24] 6702 	mov	(_setCursor_PARM_2 + 1),#0x01
      001E4A 90 00 00         [24] 6703 	mov	dptr,#0x0000
      001E4D 12 05 51         [24] 6704 	lcall	_setCursor
                                   6705 ;	.\ecen4350_lcd_v4.c:1428: setColorDefault();
      001E50 12 16 2F         [24] 6706 	lcall	_setColorDefault
                                   6707 ;	.\ecen4350_lcd_v4.c:1429: LCD_string_write(" BYTE");
      001E53 90 5F DA         [24] 6708 	mov	dptr,#___str_50
      001E56 75 F0 80         [24] 6709 	mov	b,#0x80
      001E59 12 10 6B         [24] 6710 	lcall	_LCD_string_write
      001E5C D0 04            [24] 6711 	pop	ar4
      001E5E D0 05            [24] 6712 	pop	ar5
      001E60 D0 06            [24] 6713 	pop	ar6
      001E62 D0 07            [24] 6714 	pop	ar7
      001E64                       6715 00119$:
                                   6716 ;	.\ecen4350_lcd_v4.c:1431: if (blockType == 0x2)
      001E64 E5 5A            [12] 6717 	mov	a,_dump_sloc0_1_0
      001E66 70 03            [24] 6718 	jnz	00253$
      001E68 02 1F 88         [24] 6719 	ljmp	00121$
      001E6B                       6720 00253$:
                                   6721 ;	.\ecen4350_lcd_v4.c:1433: setCursor(0, 120);
      001E6B C0 07            [24] 6722 	push	ar7
      001E6D 75 6B 78         [24] 6723 	mov	_setCursor_PARM_2,#0x78
      001E70 75 6C 00         [24] 6724 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E73 90 00 00         [24] 6725 	mov	dptr,#0x0000
      001E76 C0 07            [24] 6726 	push	ar7
      001E78 C0 06            [24] 6727 	push	ar6
      001E7A C0 05            [24] 6728 	push	ar5
      001E7C C0 04            [24] 6729 	push	ar4
      001E7E 12 05 51         [24] 6730 	lcall	_setCursor
                                   6731 ;	.\ecen4350_lcd_v4.c:1434: setColorWhite();
      001E81 12 16 7F         [24] 6732 	lcall	_setColorWhite
                                   6733 ;	.\ecen4350_lcd_v4.c:1435: LCD_string_write(" Hex Data:");
      001E84 90 5F B6         [24] 6734 	mov	dptr,#___str_47
      001E87 75 F0 80         [24] 6735 	mov	b,#0x80
      001E8A 12 10 6B         [24] 6736 	lcall	_LCD_string_write
                                   6737 ;	.\ecen4350_lcd_v4.c:1436: setColorDefault();
      001E8D 12 16 2F         [24] 6738 	lcall	_setColorDefault
                                   6739 ;	.\ecen4350_lcd_v4.c:1437: setCursor(10, 140);
      001E90 75 6B 8C         [24] 6740 	mov	_setCursor_PARM_2,#0x8c
      001E93 75 6C 00         [24] 6741 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E96 90 00 0A         [24] 6742 	mov	dptr,#0x000a
      001E99 12 05 51         [24] 6743 	lcall	_setCursor
      001E9C D0 04            [24] 6744 	pop	ar4
      001E9E D0 05            [24] 6745 	pop	ar5
      001EA0 D0 06            [24] 6746 	pop	ar6
                                   6747 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6748 ;	assignBit
      001EA2 C2 B5            [12] 6749 	clr	_P3_5
                                   6750 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001EA4 8C 82            [24] 6751 	mov	dpl,r4
      001EA6 8E 83            [24] 6752 	mov	dph,r6
      001EA8 E0               [24] 6753 	movx	a,@dptr
      001EA9 F5 82            [12] 6754 	mov	dpl,a
                                   6755 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6756 ;	assignBit
      001EAB D2 B5            [12] 6757 	setb	_P3_5
                                   6758 ;	.\ecen4350_lcd_v4.c:1438: print8Hex(ramRead8(d));
      001EAD C0 06            [24] 6759 	push	ar6
      001EAF C0 05            [24] 6760 	push	ar5
      001EB1 C0 04            [24] 6761 	push	ar4
      001EB3 12 15 3C         [24] 6762 	lcall	_print8Hex
      001EB6 D0 04            [24] 6763 	pop	ar4
      001EB8 D0 05            [24] 6764 	pop	ar5
      001EBA D0 06            [24] 6765 	pop	ar6
      001EBC D0 07            [24] 6766 	pop	ar7
                                   6767 ;	.\ecen4350_lcd_v4.c:1439: d++;
      001EBE 74 01            [12] 6768 	mov	a,#0x01
      001EC0 2C               [12] 6769 	add	a,r4
      001EC1 FB               [12] 6770 	mov	r3,a
      001EC2 E4               [12] 6771 	clr	a
      001EC3 3E               [12] 6772 	addc	a,r6
      001EC4 FF               [12] 6773 	mov	r7,a
                                   6774 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6775 ;	assignBit
      001EC5 C2 B5            [12] 6776 	clr	_P3_5
                                   6777 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001EC7 8B 82            [24] 6778 	mov	dpl,r3
      001EC9 8F 83            [24] 6779 	mov	dph,r7
      001ECB E0               [24] 6780 	movx	a,@dptr
      001ECC F5 82            [12] 6781 	mov	dpl,a
                                   6782 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6783 ;	assignBit
      001ECE D2 B5            [12] 6784 	setb	_P3_5
                                   6785 ;	.\ecen4350_lcd_v4.c:1440: print8Hex(ramRead8(d));
      001ED0 C0 07            [24] 6786 	push	ar7
      001ED2 C0 05            [24] 6787 	push	ar5
      001ED4 C0 03            [24] 6788 	push	ar3
      001ED6 12 15 3C         [24] 6789 	lcall	_print8Hex
      001ED9 D0 03            [24] 6790 	pop	ar3
      001EDB D0 05            [24] 6791 	pop	ar5
      001EDD D0 07            [24] 6792 	pop	ar7
                                   6793 ;	.\ecen4350_lcd_v4.c:1441: d--;
      001EDF 1B               [12] 6794 	dec	r3
      001EE0 BB FF 01         [24] 6795 	cjne	r3,#0xff,00254$
      001EE3 1F               [12] 6796 	dec	r7
      001EE4                       6797 00254$:
                                   6798 ;	.\ecen4350_lcd_v4.c:1443: setCursor(0, 180);
      001EE4 75 6B B4         [24] 6799 	mov	_setCursor_PARM_2,#0xb4
      001EE7 75 6C 00         [24] 6800 	mov	(_setCursor_PARM_2 + 1),#0x00
      001EEA 90 00 00         [24] 6801 	mov	dptr,#0x0000
      001EED C0 07            [24] 6802 	push	ar7
      001EEF C0 05            [24] 6803 	push	ar5
      001EF1 C0 03            [24] 6804 	push	ar3
      001EF3 12 05 51         [24] 6805 	lcall	_setCursor
                                   6806 ;	.\ecen4350_lcd_v4.c:1444: setColorWhite();
      001EF6 12 16 7F         [24] 6807 	lcall	_setColorWhite
                                   6808 ;	.\ecen4350_lcd_v4.c:1445: LCD_string_write(" ASCII Data:");
      001EF9 90 5F C1         [24] 6809 	mov	dptr,#___str_48
      001EFC 75 F0 80         [24] 6810 	mov	b,#0x80
      001EFF 12 10 6B         [24] 6811 	lcall	_LCD_string_write
                                   6812 ;	.\ecen4350_lcd_v4.c:1446: setColorDefault();
      001F02 12 16 2F         [24] 6813 	lcall	_setColorDefault
                                   6814 ;	.\ecen4350_lcd_v4.c:1447: setCursor(10, 200);
      001F05 75 6B C8         [24] 6815 	mov	_setCursor_PARM_2,#0xc8
      001F08 75 6C 00         [24] 6816 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F0B 90 00 0A         [24] 6817 	mov	dptr,#0x000a
      001F0E 12 05 51         [24] 6818 	lcall	_setCursor
      001F11 D0 03            [24] 6819 	pop	ar3
      001F13 D0 05            [24] 6820 	pop	ar5
      001F15 D0 07            [24] 6821 	pop	ar7
                                   6822 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6823 ;	assignBit
      001F17 C2 B5            [12] 6824 	clr	_P3_5
                                   6825 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F19 8B 82            [24] 6826 	mov	dpl,r3
      001F1B 8F 83            [24] 6827 	mov	dph,r7
      001F1D E0               [24] 6828 	movx	a,@dptr
      001F1E F5 82            [12] 6829 	mov	dpl,a
                                   6830 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6831 ;	assignBit
      001F20 D2 B5            [12] 6832 	setb	_P3_5
                                   6833 ;	.\ecen4350_lcd_v4.c:1448: print8ASCII(ramRead8(d));
      001F22 C0 07            [24] 6834 	push	ar7
      001F24 C0 05            [24] 6835 	push	ar5
      001F26 C0 03            [24] 6836 	push	ar3
      001F28 12 15 BE         [24] 6837 	lcall	_print8ASCII
      001F2B D0 03            [24] 6838 	pop	ar3
      001F2D D0 05            [24] 6839 	pop	ar5
      001F2F D0 07            [24] 6840 	pop	ar7
                                   6841 ;	.\ecen4350_lcd_v4.c:1449: d++;
      001F31 74 01            [12] 6842 	mov	a,#0x01
      001F33 2B               [12] 6843 	add	a,r3
      001F34 FC               [12] 6844 	mov	r4,a
      001F35 E4               [12] 6845 	clr	a
      001F36 3F               [12] 6846 	addc	a,r7
      001F37 FE               [12] 6847 	mov	r6,a
                                   6848 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6849 ;	assignBit
      001F38 C2 B5            [12] 6850 	clr	_P3_5
                                   6851 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001F3A 8C 82            [24] 6852 	mov	dpl,r4
      001F3C 8E 83            [24] 6853 	mov	dph,r6
      001F3E E0               [24] 6854 	movx	a,@dptr
      001F3F F5 82            [12] 6855 	mov	dpl,a
                                   6856 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6857 ;	assignBit
      001F41 D2 B5            [12] 6858 	setb	_P3_5
                                   6859 ;	.\ecen4350_lcd_v4.c:1450: print8ASCII(ramRead8(d));
      001F43 C0 07            [24] 6860 	push	ar7
      001F45 C0 06            [24] 6861 	push	ar6
      001F47 C0 05            [24] 6862 	push	ar5
      001F49 C0 04            [24] 6863 	push	ar4
      001F4B 12 15 BE         [24] 6864 	lcall	_print8ASCII
                                   6865 ;	.\ecen4350_lcd_v4.c:1452: setCursor(0, 240);
      001F4E 75 6B F0         [24] 6866 	mov	_setCursor_PARM_2,#0xf0
      001F51 75 6C 00         [24] 6867 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F54 90 00 00         [24] 6868 	mov	dptr,#0x0000
      001F57 12 05 51         [24] 6869 	lcall	_setCursor
                                   6870 ;	.\ecen4350_lcd_v4.c:1453: setColorWhite();
      001F5A 12 16 7F         [24] 6871 	lcall	_setColorWhite
                                   6872 ;	.\ecen4350_lcd_v4.c:1454: LCD_string_write(" Data Type:");
      001F5D 90 5F CE         [24] 6873 	mov	dptr,#___str_49
      001F60 75 F0 80         [24] 6874 	mov	b,#0x80
      001F63 12 10 6B         [24] 6875 	lcall	_LCD_string_write
                                   6876 ;	.\ecen4350_lcd_v4.c:1455: setColorDefault();
      001F66 12 16 2F         [24] 6877 	lcall	_setColorDefault
                                   6878 ;	.\ecen4350_lcd_v4.c:1456: setCursor(0, 260);
      001F69 75 6B 04         [24] 6879 	mov	_setCursor_PARM_2,#0x04
      001F6C 75 6C 01         [24] 6880 	mov	(_setCursor_PARM_2 + 1),#0x01
      001F6F 90 00 00         [24] 6881 	mov	dptr,#0x0000
      001F72 12 05 51         [24] 6882 	lcall	_setCursor
                                   6883 ;	.\ecen4350_lcd_v4.c:1457: LCD_string_write(" WORD");
      001F75 90 5F E0         [24] 6884 	mov	dptr,#___str_51
      001F78 75 F0 80         [24] 6885 	mov	b,#0x80
      001F7B 12 10 6B         [24] 6886 	lcall	_LCD_string_write
      001F7E D0 04            [24] 6887 	pop	ar4
      001F80 D0 05            [24] 6888 	pop	ar5
      001F82 D0 06            [24] 6889 	pop	ar6
      001F84 D0 07            [24] 6890 	pop	ar7
                                   6891 ;	.\ecen4350_lcd_v4.c:1513: return;
      001F86 D0 07            [24] 6892 	pop	ar7
                                   6893 ;	.\ecen4350_lcd_v4.c:1457: LCD_string_write(" WORD");
      001F88                       6894 00121$:
                                   6895 ;	.\ecen4350_lcd_v4.c:1459: if (blockType == 0x4)
      001F88 EF               [12] 6896 	mov	a,r7
      001F89 70 03            [24] 6897 	jnz	00255$
      001F8B 02 21 35         [24] 6898 	ljmp	00123$
      001F8E                       6899 00255$:
                                   6900 ;	.\ecen4350_lcd_v4.c:1461: setCursor(0, 120);
      001F8E 75 6B 78         [24] 6901 	mov	_setCursor_PARM_2,#0x78
      001F91 75 6C 00         [24] 6902 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F94 90 00 00         [24] 6903 	mov	dptr,#0x0000
      001F97 C0 07            [24] 6904 	push	ar7
      001F99 C0 06            [24] 6905 	push	ar6
      001F9B C0 05            [24] 6906 	push	ar5
      001F9D C0 04            [24] 6907 	push	ar4
      001F9F 12 05 51         [24] 6908 	lcall	_setCursor
                                   6909 ;	.\ecen4350_lcd_v4.c:1462: setColorWhite();
      001FA2 12 16 7F         [24] 6910 	lcall	_setColorWhite
                                   6911 ;	.\ecen4350_lcd_v4.c:1463: LCD_string_write(" Hex Data:");
      001FA5 90 5F B6         [24] 6912 	mov	dptr,#___str_47
      001FA8 75 F0 80         [24] 6913 	mov	b,#0x80
      001FAB 12 10 6B         [24] 6914 	lcall	_LCD_string_write
                                   6915 ;	.\ecen4350_lcd_v4.c:1464: setColorDefault();
      001FAE 12 16 2F         [24] 6916 	lcall	_setColorDefault
                                   6917 ;	.\ecen4350_lcd_v4.c:1465: setCursor(10, 140);
      001FB1 75 6B 8C         [24] 6918 	mov	_setCursor_PARM_2,#0x8c
      001FB4 75 6C 00         [24] 6919 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FB7 90 00 0A         [24] 6920 	mov	dptr,#0x000a
      001FBA 12 05 51         [24] 6921 	lcall	_setCursor
      001FBD D0 04            [24] 6922 	pop	ar4
      001FBF D0 05            [24] 6923 	pop	ar5
      001FC1 D0 06            [24] 6924 	pop	ar6
                                   6925 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6926 ;	assignBit
      001FC3 C2 B5            [12] 6927 	clr	_P3_5
                                   6928 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001FC5 8C 82            [24] 6929 	mov	dpl,r4
      001FC7 8E 83            [24] 6930 	mov	dph,r6
      001FC9 E0               [24] 6931 	movx	a,@dptr
      001FCA F5 82            [12] 6932 	mov	dpl,a
                                   6933 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6934 ;	assignBit
      001FCC D2 B5            [12] 6935 	setb	_P3_5
                                   6936 ;	.\ecen4350_lcd_v4.c:1466: print8Hex(ramRead8(d));
      001FCE C0 06            [24] 6937 	push	ar6
      001FD0 C0 05            [24] 6938 	push	ar5
      001FD2 C0 04            [24] 6939 	push	ar4
      001FD4 12 15 3C         [24] 6940 	lcall	_print8Hex
      001FD7 D0 04            [24] 6941 	pop	ar4
      001FD9 D0 05            [24] 6942 	pop	ar5
      001FDB D0 06            [24] 6943 	pop	ar6
                                   6944 ;	.\ecen4350_lcd_v4.c:1467: d++;
      001FDD 74 01            [12] 6945 	mov	a,#0x01
      001FDF 2C               [12] 6946 	add	a,r4
      001FE0 FA               [12] 6947 	mov	r2,a
      001FE1 E4               [12] 6948 	clr	a
      001FE2 3E               [12] 6949 	addc	a,r6
      001FE3 FB               [12] 6950 	mov	r3,a
                                   6951 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6952 ;	assignBit
      001FE4 C2 B5            [12] 6953 	clr	_P3_5
                                   6954 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      001FE6 8A 82            [24] 6955 	mov	dpl,r2
      001FE8 8B 83            [24] 6956 	mov	dph,r3
      001FEA E0               [24] 6957 	movx	a,@dptr
      001FEB F5 82            [12] 6958 	mov	dpl,a
                                   6959 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6960 ;	assignBit
      001FED D2 B5            [12] 6961 	setb	_P3_5
                                   6962 ;	.\ecen4350_lcd_v4.c:1468: print8Hex(ramRead8(d));
      001FEF C0 05            [24] 6963 	push	ar5
      001FF1 C0 03            [24] 6964 	push	ar3
      001FF3 C0 02            [24] 6965 	push	ar2
      001FF5 12 15 3C         [24] 6966 	lcall	_print8Hex
      001FF8 D0 02            [24] 6967 	pop	ar2
      001FFA D0 03            [24] 6968 	pop	ar3
      001FFC D0 05            [24] 6969 	pop	ar5
      001FFE D0 07            [24] 6970 	pop	ar7
                                   6971 ;	.\ecen4350_lcd_v4.c:1469: d++;
      002000 0A               [12] 6972 	inc	r2
      002001 BA 00 01         [24] 6973 	cjne	r2,#0x00,00256$
      002004 0B               [12] 6974 	inc	r3
      002005                       6975 00256$:
                                   6976 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   6977 ;	assignBit
      002005 C2 B5            [12] 6978 	clr	_P3_5
                                   6979 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002007 8A 82            [24] 6980 	mov	dpl,r2
      002009 8B 83            [24] 6981 	mov	dph,r3
      00200B E0               [24] 6982 	movx	a,@dptr
      00200C F5 82            [12] 6983 	mov	dpl,a
                                   6984 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   6985 ;	assignBit
      00200E D2 B5            [12] 6986 	setb	_P3_5
                                   6987 ;	.\ecen4350_lcd_v4.c:1470: print8Hex(ramRead8(d));
      002010 C0 07            [24] 6988 	push	ar7
      002012 C0 05            [24] 6989 	push	ar5
      002014 C0 03            [24] 6990 	push	ar3
      002016 C0 02            [24] 6991 	push	ar2
      002018 12 15 3C         [24] 6992 	lcall	_print8Hex
      00201B D0 02            [24] 6993 	pop	ar2
      00201D D0 03            [24] 6994 	pop	ar3
                                   6995 ;	.\ecen4350_lcd_v4.c:1471: d++;
      00201F 74 01            [12] 6996 	mov	a,#0x01
      002021 2A               [12] 6997 	add	a,r2
      002022 F5 58            [12] 6998 	mov	_dump_d_65536_553,a
      002024 E4               [12] 6999 	clr	a
      002025 3B               [12] 7000 	addc	a,r3
      002026 F5 59            [12] 7001 	mov	(_dump_d_65536_553 + 1),a
                                   7002 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7003 ;	assignBit
      002028 C2 B5            [12] 7004 	clr	_P3_5
                                   7005 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      00202A 85 58 82         [24] 7006 	mov	dpl,_dump_d_65536_553
      00202D 85 59 83         [24] 7007 	mov	dph,(_dump_d_65536_553 + 1)
      002030 E0               [24] 7008 	movx	a,@dptr
      002031 FB               [12] 7009 	mov	r3,a
                                   7010 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7011 ;	assignBit
      002032 D2 B5            [12] 7012 	setb	_P3_5
                                   7013 ;	.\ecen4350_lcd_v4.c:1472: print8Hex(ramRead8(d));
      002034 8B 82            [24] 7014 	mov	dpl,r3
      002036 12 15 3C         [24] 7015 	lcall	_print8Hex
      002039 D0 05            [24] 7016 	pop	ar5
      00203B D0 07            [24] 7017 	pop	ar7
                                   7018 ;	.\ecen4350_lcd_v4.c:1473: d--;
      00203D E5 58            [12] 7019 	mov	a,_dump_d_65536_553
      00203F 24 FF            [12] 7020 	add	a,#0xff
      002041 FA               [12] 7021 	mov	r2,a
      002042 E5 59            [12] 7022 	mov	a,(_dump_d_65536_553 + 1)
      002044 34 FF            [12] 7023 	addc	a,#0xff
      002046 FB               [12] 7024 	mov	r3,a
                                   7025 ;	.\ecen4350_lcd_v4.c:1474: d--;
      002047 1A               [12] 7026 	dec	r2
      002048 BA FF 01         [24] 7027 	cjne	r2,#0xff,00257$
      00204B 1B               [12] 7028 	dec	r3
      00204C                       7029 00257$:
                                   7030 ;	.\ecen4350_lcd_v4.c:1475: d--;
      00204C 1A               [12] 7031 	dec	r2
      00204D BA FF 01         [24] 7032 	cjne	r2,#0xff,00258$
      002050 1B               [12] 7033 	dec	r3
      002051                       7034 00258$:
                                   7035 ;	.\ecen4350_lcd_v4.c:1477: setCursor(0, 180);
      002051 75 6B B4         [24] 7036 	mov	_setCursor_PARM_2,#0xb4
      002054 75 6C 00         [24] 7037 	mov	(_setCursor_PARM_2 + 1),#0x00
      002057 90 00 00         [24] 7038 	mov	dptr,#0x0000
      00205A C0 07            [24] 7039 	push	ar7
      00205C C0 05            [24] 7040 	push	ar5
      00205E C0 03            [24] 7041 	push	ar3
      002060 C0 02            [24] 7042 	push	ar2
      002062 12 05 51         [24] 7043 	lcall	_setCursor
                                   7044 ;	.\ecen4350_lcd_v4.c:1478: setColorWhite();
      002065 12 16 7F         [24] 7045 	lcall	_setColorWhite
                                   7046 ;	.\ecen4350_lcd_v4.c:1479: LCD_string_write(" ASCII Data:");
      002068 90 5F C1         [24] 7047 	mov	dptr,#___str_48
      00206B 75 F0 80         [24] 7048 	mov	b,#0x80
      00206E 12 10 6B         [24] 7049 	lcall	_LCD_string_write
                                   7050 ;	.\ecen4350_lcd_v4.c:1480: setColorDefault();
      002071 12 16 2F         [24] 7051 	lcall	_setColorDefault
                                   7052 ;	.\ecen4350_lcd_v4.c:1481: setCursor(10, 200);
      002074 75 6B C8         [24] 7053 	mov	_setCursor_PARM_2,#0xc8
      002077 75 6C 00         [24] 7054 	mov	(_setCursor_PARM_2 + 1),#0x00
      00207A 90 00 0A         [24] 7055 	mov	dptr,#0x000a
      00207D 12 05 51         [24] 7056 	lcall	_setCursor
      002080 D0 02            [24] 7057 	pop	ar2
      002082 D0 03            [24] 7058 	pop	ar3
                                   7059 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7060 ;	assignBit
      002084 C2 B5            [12] 7061 	clr	_P3_5
                                   7062 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002086 8A 82            [24] 7063 	mov	dpl,r2
      002088 8B 83            [24] 7064 	mov	dph,r3
      00208A E0               [24] 7065 	movx	a,@dptr
      00208B F5 82            [12] 7066 	mov	dpl,a
                                   7067 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7068 ;	assignBit
      00208D D2 B5            [12] 7069 	setb	_P3_5
                                   7070 ;	.\ecen4350_lcd_v4.c:1482: print8ASCII(ramRead8(d));
      00208F C0 03            [24] 7071 	push	ar3
      002091 C0 02            [24] 7072 	push	ar2
      002093 12 15 BE         [24] 7073 	lcall	_print8ASCII
      002096 D0 02            [24] 7074 	pop	ar2
      002098 D0 03            [24] 7075 	pop	ar3
      00209A D0 05            [24] 7076 	pop	ar5
      00209C D0 07            [24] 7077 	pop	ar7
                                   7078 ;	.\ecen4350_lcd_v4.c:1483: d++;
      00209E 0A               [12] 7079 	inc	r2
      00209F BA 00 01         [24] 7080 	cjne	r2,#0x00,00259$
      0020A2 0B               [12] 7081 	inc	r3
      0020A3                       7082 00259$:
                                   7083 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7084 ;	assignBit
      0020A3 C2 B5            [12] 7085 	clr	_P3_5
                                   7086 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0020A5 8A 82            [24] 7087 	mov	dpl,r2
      0020A7 8B 83            [24] 7088 	mov	dph,r3
      0020A9 E0               [24] 7089 	movx	a,@dptr
      0020AA F5 82            [12] 7090 	mov	dpl,a
                                   7091 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7092 ;	assignBit
      0020AC D2 B5            [12] 7093 	setb	_P3_5
                                   7094 ;	.\ecen4350_lcd_v4.c:1484: print8ASCII(ramRead8(d));
      0020AE C0 07            [24] 7095 	push	ar7
      0020B0 C0 05            [24] 7096 	push	ar5
      0020B2 C0 03            [24] 7097 	push	ar3
      0020B4 C0 02            [24] 7098 	push	ar2
      0020B6 12 15 BE         [24] 7099 	lcall	_print8ASCII
      0020B9 D0 02            [24] 7100 	pop	ar2
      0020BB D0 03            [24] 7101 	pop	ar3
      0020BD D0 05            [24] 7102 	pop	ar5
      0020BF D0 07            [24] 7103 	pop	ar7
                                   7104 ;	.\ecen4350_lcd_v4.c:1485: d++;
      0020C1 0A               [12] 7105 	inc	r2
      0020C2 BA 00 01         [24] 7106 	cjne	r2,#0x00,00260$
      0020C5 0B               [12] 7107 	inc	r3
      0020C6                       7108 00260$:
                                   7109 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7110 ;	assignBit
      0020C6 C2 B5            [12] 7111 	clr	_P3_5
                                   7112 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0020C8 8A 82            [24] 7113 	mov	dpl,r2
      0020CA 8B 83            [24] 7114 	mov	dph,r3
      0020CC E0               [24] 7115 	movx	a,@dptr
      0020CD F5 82            [12] 7116 	mov	dpl,a
                                   7117 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7118 ;	assignBit
      0020CF D2 B5            [12] 7119 	setb	_P3_5
                                   7120 ;	.\ecen4350_lcd_v4.c:1486: print8ASCII(ramRead8(d));
      0020D1 C0 07            [24] 7121 	push	ar7
      0020D3 C0 05            [24] 7122 	push	ar5
      0020D5 C0 03            [24] 7123 	push	ar3
      0020D7 C0 02            [24] 7124 	push	ar2
      0020D9 12 15 BE         [24] 7125 	lcall	_print8ASCII
      0020DC D0 02            [24] 7126 	pop	ar2
      0020DE D0 03            [24] 7127 	pop	ar3
      0020E0 D0 05            [24] 7128 	pop	ar5
                                   7129 ;	.\ecen4350_lcd_v4.c:1487: d++;
      0020E2 74 01            [12] 7130 	mov	a,#0x01
      0020E4 2A               [12] 7131 	add	a,r2
      0020E5 FC               [12] 7132 	mov	r4,a
      0020E6 E4               [12] 7133 	clr	a
      0020E7 3B               [12] 7134 	addc	a,r3
      0020E8 FE               [12] 7135 	mov	r6,a
                                   7136 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7137 ;	assignBit
      0020E9 C2 B5            [12] 7138 	clr	_P3_5
                                   7139 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0020EB 8C 82            [24] 7140 	mov	dpl,r4
      0020ED 8E 83            [24] 7141 	mov	dph,r6
      0020EF E0               [24] 7142 	movx	a,@dptr
      0020F0 F5 82            [12] 7143 	mov	dpl,a
                                   7144 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7145 ;	assignBit
      0020F2 D2 B5            [12] 7146 	setb	_P3_5
                                   7147 ;	.\ecen4350_lcd_v4.c:1488: print8ASCII(ramRead8(d));
      0020F4 C0 06            [24] 7148 	push	ar6
      0020F6 C0 05            [24] 7149 	push	ar5
      0020F8 C0 04            [24] 7150 	push	ar4
      0020FA 12 15 BE         [24] 7151 	lcall	_print8ASCII
                                   7152 ;	.\ecen4350_lcd_v4.c:1490: setCursor(0, 240);
      0020FD 75 6B F0         [24] 7153 	mov	_setCursor_PARM_2,#0xf0
      002100 75 6C 00         [24] 7154 	mov	(_setCursor_PARM_2 + 1),#0x00
      002103 90 00 00         [24] 7155 	mov	dptr,#0x0000
      002106 12 05 51         [24] 7156 	lcall	_setCursor
                                   7157 ;	.\ecen4350_lcd_v4.c:1491: setColorWhite();
      002109 12 16 7F         [24] 7158 	lcall	_setColorWhite
                                   7159 ;	.\ecen4350_lcd_v4.c:1492: LCD_string_write(" Data Type:");
      00210C 90 5F CE         [24] 7160 	mov	dptr,#___str_49
      00210F 75 F0 80         [24] 7161 	mov	b,#0x80
      002112 12 10 6B         [24] 7162 	lcall	_LCD_string_write
                                   7163 ;	.\ecen4350_lcd_v4.c:1493: setColorDefault();
      002115 12 16 2F         [24] 7164 	lcall	_setColorDefault
                                   7165 ;	.\ecen4350_lcd_v4.c:1494: setCursor(0, 260);
      002118 75 6B 04         [24] 7166 	mov	_setCursor_PARM_2,#0x04
      00211B 75 6C 01         [24] 7167 	mov	(_setCursor_PARM_2 + 1),#0x01
      00211E 90 00 00         [24] 7168 	mov	dptr,#0x0000
      002121 12 05 51         [24] 7169 	lcall	_setCursor
                                   7170 ;	.\ecen4350_lcd_v4.c:1495: LCD_string_write(" DWORD");
      002124 90 5F E6         [24] 7171 	mov	dptr,#___str_52
      002127 75 F0 80         [24] 7172 	mov	b,#0x80
      00212A 12 10 6B         [24] 7173 	lcall	_LCD_string_write
      00212D D0 04            [24] 7174 	pop	ar4
      00212F D0 05            [24] 7175 	pop	ar5
      002131 D0 06            [24] 7176 	pop	ar6
      002133 D0 07            [24] 7177 	pop	ar7
      002135                       7178 00123$:
                                   7179 ;	.\ecen4350_lcd_v4.c:1497: setCursor(50, 300);
      002135 75 6B 2C         [24] 7180 	mov	_setCursor_PARM_2,#0x2c
      002138 75 6C 01         [24] 7181 	mov	(_setCursor_PARM_2 + 1),#0x01
      00213B 90 00 32         [24] 7182 	mov	dptr,#0x0032
      00213E C0 07            [24] 7183 	push	ar7
      002140 C0 06            [24] 7184 	push	ar6
      002142 C0 05            [24] 7185 	push	ar5
      002144 C0 04            [24] 7186 	push	ar4
      002146 12 05 51         [24] 7187 	lcall	_setCursor
                                   7188 ;	.\ecen4350_lcd_v4.c:1498: setColorWhite();
      002149 12 16 7F         [24] 7189 	lcall	_setColorWhite
                                   7190 ;	.\ecen4350_lcd_v4.c:1499: LCD_string_write(" <0> Exit\n");
      00214C 90 5F ED         [24] 7191 	mov	dptr,#___str_53
      00214F 75 F0 80         [24] 7192 	mov	b,#0x80
      002152 12 10 6B         [24] 7193 	lcall	_LCD_string_write
                                   7194 ;	.\ecen4350_lcd_v4.c:1501: selection = keyDetect();
      002155 12 11 89         [24] 7195 	lcall	_keyDetect
      002158 AB 82            [24] 7196 	mov	r3,dpl
      00215A D0 04            [24] 7197 	pop	ar4
      00215C D0 05            [24] 7198 	pop	ar5
      00215E D0 06            [24] 7199 	pop	ar6
      002160 D0 07            [24] 7200 	pop	ar7
      002162 78 71            [12] 7201 	mov	r0,#_selection
      002164 A6 03            [24] 7202 	mov	@r0,ar3
                                   7203 ;	.\ecen4350_lcd_v4.c:1503: if (selection == '0' ) {
      002166 BB 30 02         [24] 7204 	cjne	r3,#0x30,00261$
      002169 80 03            [24] 7205 	sjmp	00262$
      00216B                       7206 00261$:
      00216B 02 1D 46         [24] 7207 	ljmp	00126$
      00216E                       7208 00262$:
                                   7209 ;	.\ecen4350_lcd_v4.c:1504: exit = 0;
      00216E 78 7C            [12] 7210 	mov	r0,#_dump_exit_65536_553
      002170 76 00            [12] 7211 	mov	@r0,#0x00
                                   7212 ;	.\ecen4350_lcd_v4.c:1505: setCursor(50, 300);
      002172 75 6B 2C         [24] 7213 	mov	_setCursor_PARM_2,#0x2c
      002175 75 6C 01         [24] 7214 	mov	(_setCursor_PARM_2 + 1),#0x01
      002178 90 00 32         [24] 7215 	mov	dptr,#0x0032
      00217B C0 07            [24] 7216 	push	ar7
      00217D C0 06            [24] 7217 	push	ar6
      00217F C0 05            [24] 7218 	push	ar5
      002181 C0 04            [24] 7219 	push	ar4
      002183 12 05 51         [24] 7220 	lcall	_setCursor
                                   7221 ;	.\ecen4350_lcd_v4.c:1506: setColorSelect();
      002186 12 16 3A         [24] 7222 	lcall	_setColorSelect
                                   7223 ;	.\ecen4350_lcd_v4.c:1507: LCD_string_write(" ");
      002189 90 5E B8         [24] 7224 	mov	dptr,#___str_30
      00218C 75 F0 80         [24] 7225 	mov	b,#0x80
      00218F 12 10 6B         [24] 7226 	lcall	_LCD_string_write
                                   7227 ;	.\ecen4350_lcd_v4.c:1508: setColorHighlight2();
      002192 12 16 51         [24] 7228 	lcall	_setColorHighlight2
                                   7229 ;	.\ecen4350_lcd_v4.c:1509: LCD_string_write("<0> Exit\n");
      002195 90 5F F8         [24] 7230 	mov	dptr,#___str_54
      002198 75 F0 80         [24] 7231 	mov	b,#0x80
      00219B 12 10 6B         [24] 7232 	lcall	_LCD_string_write
                                   7233 ;	.\ecen4350_lcd_v4.c:1510: delay(40);
      00219E 90 00 28         [24] 7234 	mov	dptr,#0x0028
      0021A1 12 01 87         [24] 7235 	lcall	_delay
      0021A4 D0 04            [24] 7236 	pop	ar4
      0021A6 D0 05            [24] 7237 	pop	ar5
      0021A8 D0 06            [24] 7238 	pop	ar6
      0021AA D0 07            [24] 7239 	pop	ar7
      0021AC 02 1D 46         [24] 7240 	ljmp	00126$
                                   7241 ;	.\ecen4350_lcd_v4.c:1513: return;
                                   7242 ;	.\ecen4350_lcd_v4.c:1514: }
      0021AF 22               [24] 7243 	ret
                                   7244 ;------------------------------------------------------------
                                   7245 ;Allocation info for local variables in function 'move'
                                   7246 ;------------------------------------------------------------
                                   7247 ;d                         Allocated with name '_move_d_65536_609'
                                   7248 ;i                         Allocated with name '_move_i_131072_618'
                                   7249 ;__2621440148              Allocated to registers 
                                   7250 ;__2621440145              Allocated to registers 
                                   7251 ;__2621440146              Allocated to registers 
                                   7252 ;__3276800149              Allocated to registers 
                                   7253 ;map_address               Allocated to registers 
                                   7254 ;d                         Allocated to registers r5 
                                   7255 ;map_address               Allocated to registers 
                                   7256 ;d                         Allocated to registers 
                                   7257 ;sourceAddress             Allocated with name '_move_sourceAddress_65536_609'
                                   7258 ;destAddress               Allocated to registers r2 r3 
                                   7259 ;blockSize                 Allocated to registers r6 r7 
                                   7260 ;blockType                 Allocated to registers r5 
                                   7261 ;invalidType               Allocated to registers r4 
                                   7262 ;invalidSize               Allocated with name '_move_invalidSize_65536_609'
                                   7263 ;------------------------------------------------------------
                                   7264 ;	.\ecen4350_lcd_v4.c:1516: void move() {
                                   7265 ;	-----------------------------------------
                                   7266 ;	 function move
                                   7267 ;	-----------------------------------------
      0021B0                       7268 _move:
                                   7269 ;	.\ecen4350_lcd_v4.c:1520: __idata unsigned int blockSize = 0;
      0021B0 7E 00            [12] 7270 	mov	r6,#0x00
      0021B2 7F 00            [12] 7271 	mov	r7,#0x00
                                   7272 ;	.\ecen4350_lcd_v4.c:1521: __idata unsigned char blockType = 0;
      0021B4 7D 00            [12] 7273 	mov	r5,#0x00
                                   7274 ;	.\ecen4350_lcd_v4.c:1522: __idata unsigned char invalidType = 1;
      0021B6 7C 01            [12] 7275 	mov	r4,#0x01
                                   7276 ;	.\ecen4350_lcd_v4.c:1523: __idata unsigned char invalidSize = 1;
      0021B8 78 7F            [12] 7277 	mov	r0,#_move_invalidSize_65536_609
      0021BA 76 01            [12] 7278 	mov	@r0,#0x01
                                   7279 ;	.\ecen4350_lcd_v4.c:1525: clearLCD();
      0021BC C0 07            [24] 7280 	push	ar7
      0021BE C0 06            [24] 7281 	push	ar6
      0021C0 C0 05            [24] 7282 	push	ar5
      0021C2 C0 04            [24] 7283 	push	ar4
      0021C4 12 0D EE         [24] 7284 	lcall	_clearLCD
                                   7285 ;	.\ecen4350_lcd_v4.c:1528: fillTop(GRAY);
      0021C7 90 D6 BA         [24] 7286 	mov	dptr,#0xd6ba
      0021CA 12 0C 21         [24] 7287 	lcall	_fillTop
                                   7288 ;	.\ecen4350_lcd_v4.c:1529: setTextSize(5);
      0021CD 75 82 05         [24] 7289 	mov	dpl,#0x05
      0021D0 12 05 6B         [24] 7290 	lcall	_setTextSize
                                   7291 ;	.\ecen4350_lcd_v4.c:1530: setColorMenu();
      0021D3 12 16 68         [24] 7292 	lcall	_setColorMenu
                                   7293 ;	.\ecen4350_lcd_v4.c:1531: setCursor(30, 0);
      0021D6 E4               [12] 7294 	clr	a
      0021D7 F5 6B            [12] 7295 	mov	_setCursor_PARM_2,a
      0021D9 F5 6C            [12] 7296 	mov	(_setCursor_PARM_2 + 1),a
      0021DB 90 00 1E         [24] 7297 	mov	dptr,#0x001e
      0021DE 12 05 51         [24] 7298 	lcall	_setCursor
                                   7299 ;	.\ecen4350_lcd_v4.c:1532: LCD_string_write("[MOVE]\n");
      0021E1 90 60 02         [24] 7300 	mov	dptr,#___str_55
      0021E4 75 F0 80         [24] 7301 	mov	b,#0x80
      0021E7 12 10 6B         [24] 7302 	lcall	_LCD_string_write
                                   7303 ;	.\ecen4350_lcd_v4.c:1533: setColorDefault();
      0021EA 12 16 2F         [24] 7304 	lcall	_setColorDefault
                                   7305 ;	.\ecen4350_lcd_v4.c:1534: setTextSize(2);
      0021ED 75 82 02         [24] 7306 	mov	dpl,#0x02
      0021F0 12 05 6B         [24] 7307 	lcall	_setTextSize
                                   7308 ;	.\ecen4350_lcd_v4.c:1535: setCursor(0, 60);
      0021F3 75 6B 3C         [24] 7309 	mov	_setCursor_PARM_2,#0x3c
      0021F6 75 6C 00         [24] 7310 	mov	(_setCursor_PARM_2 + 1),#0x00
      0021F9 90 00 00         [24] 7311 	mov	dptr,#0x0000
      0021FC 12 05 51         [24] 7312 	lcall	_setCursor
                                   7313 ;	.\ecen4350_lcd_v4.c:1536: LCD_string_write(" Source Address:");
      0021FF 90 60 0A         [24] 7314 	mov	dptr,#___str_56
      002202 75 F0 80         [24] 7315 	mov	b,#0x80
      002205 12 10 6B         [24] 7316 	lcall	_LCD_string_write
                                   7317 ;	.\ecen4350_lcd_v4.c:1537: setCursor(0, 80);
      002208 75 6B 50         [24] 7318 	mov	_setCursor_PARM_2,#0x50
      00220B 75 6C 00         [24] 7319 	mov	(_setCursor_PARM_2 + 1),#0x00
      00220E 90 00 00         [24] 7320 	mov	dptr,#0x0000
      002211 12 05 51         [24] 7321 	lcall	_setCursor
                                   7322 ;	.\ecen4350_lcd_v4.c:1538: setColorGray();
      002214 12 16 5D         [24] 7323 	lcall	_setColorGray
                                   7324 ;	.\ecen4350_lcd_v4.c:1539: LCD_string_write(" 0x____");
      002217 90 5E 56         [24] 7325 	mov	dptr,#___str_24
      00221A 75 F0 80         [24] 7326 	mov	b,#0x80
      00221D 12 10 6B         [24] 7327 	lcall	_LCD_string_write
                                   7328 ;	.\ecen4350_lcd_v4.c:1540: setCursor(0, 110);
      002220 75 6B 6E         [24] 7329 	mov	_setCursor_PARM_2,#0x6e
      002223 75 6C 00         [24] 7330 	mov	(_setCursor_PARM_2 + 1),#0x00
      002226 90 00 00         [24] 7331 	mov	dptr,#0x0000
      002229 12 05 51         [24] 7332 	lcall	_setCursor
                                   7333 ;	.\ecen4350_lcd_v4.c:1541: setColorDefault();
      00222C 12 16 2F         [24] 7334 	lcall	_setColorDefault
                                   7335 ;	.\ecen4350_lcd_v4.c:1542: LCD_string_write(" Destination:");
      00222F 90 60 1B         [24] 7336 	mov	dptr,#___str_57
      002232 75 F0 80         [24] 7337 	mov	b,#0x80
      002235 12 10 6B         [24] 7338 	lcall	_LCD_string_write
                                   7339 ;	.\ecen4350_lcd_v4.c:1543: setCursor(0, 130);
      002238 75 6B 82         [24] 7340 	mov	_setCursor_PARM_2,#0x82
      00223B 75 6C 00         [24] 7341 	mov	(_setCursor_PARM_2 + 1),#0x00
      00223E 90 00 00         [24] 7342 	mov	dptr,#0x0000
      002241 12 05 51         [24] 7343 	lcall	_setCursor
                                   7344 ;	.\ecen4350_lcd_v4.c:1544: setColorGray();
      002244 12 16 5D         [24] 7345 	lcall	_setColorGray
                                   7346 ;	.\ecen4350_lcd_v4.c:1545: LCD_string_write(" 0x____");
      002247 90 5E 56         [24] 7347 	mov	dptr,#___str_24
      00224A 75 F0 80         [24] 7348 	mov	b,#0x80
      00224D 12 10 6B         [24] 7349 	lcall	_LCD_string_write
                                   7350 ;	.\ecen4350_lcd_v4.c:1546: setCursor(0, 160);
      002250 75 6B A0         [24] 7351 	mov	_setCursor_PARM_2,#0xa0
      002253 75 6C 00         [24] 7352 	mov	(_setCursor_PARM_2 + 1),#0x00
      002256 90 00 00         [24] 7353 	mov	dptr,#0x0000
      002259 12 05 51         [24] 7354 	lcall	_setCursor
                                   7355 ;	.\ecen4350_lcd_v4.c:1547: setColorDefault();
      00225C 12 16 2F         [24] 7356 	lcall	_setColorDefault
                                   7357 ;	.\ecen4350_lcd_v4.c:1548: LCD_string_write(" Choose Block Type:");
      00225F 90 5E BA         [24] 7358 	mov	dptr,#___str_31
      002262 75 F0 80         [24] 7359 	mov	b,#0x80
      002265 12 10 6B         [24] 7360 	lcall	_LCD_string_write
                                   7361 ;	.\ecen4350_lcd_v4.c:1549: setCursor(0, 180);
      002268 75 6B B4         [24] 7362 	mov	_setCursor_PARM_2,#0xb4
      00226B 75 6C 00         [24] 7363 	mov	(_setCursor_PARM_2 + 1),#0x00
      00226E 90 00 00         [24] 7364 	mov	dptr,#0x0000
      002271 12 05 51         [24] 7365 	lcall	_setCursor
                                   7366 ;	.\ecen4350_lcd_v4.c:1550: setColorGray();
      002274 12 16 5D         [24] 7367 	lcall	_setColorGray
                                   7368 ;	.\ecen4350_lcd_v4.c:1551: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      002277 90 5E 73         [24] 7369 	mov	dptr,#___str_26
      00227A 75 F0 80         [24] 7370 	mov	b,#0x80
      00227D 12 10 6B         [24] 7371 	lcall	_LCD_string_write
                                   7372 ;	.\ecen4350_lcd_v4.c:1552: setCursor(0, 260);
      002280 75 6B 04         [24] 7373 	mov	_setCursor_PARM_2,#0x04
      002283 75 6C 01         [24] 7374 	mov	(_setCursor_PARM_2 + 1),#0x01
      002286 90 00 00         [24] 7375 	mov	dptr,#0x0000
      002289 12 05 51         [24] 7376 	lcall	_setCursor
                                   7377 ;	.\ecen4350_lcd_v4.c:1553: setColorDefault();
      00228C 12 16 2F         [24] 7378 	lcall	_setColorDefault
                                   7379 ;	.\ecen4350_lcd_v4.c:1554: LCD_string_write(" Input Size:");
      00228F 90 5E 95         [24] 7380 	mov	dptr,#___str_27
      002292 75 F0 80         [24] 7381 	mov	b,#0x80
      002295 12 10 6B         [24] 7382 	lcall	_LCD_string_write
                                   7383 ;	.\ecen4350_lcd_v4.c:1555: setColorGray();
      002298 12 16 5D         [24] 7384 	lcall	_setColorGray
                                   7385 ;	.\ecen4350_lcd_v4.c:1556: LCD_string_write(" _");
      00229B 90 5E A2         [24] 7386 	mov	dptr,#___str_28
      00229E 75 F0 80         [24] 7387 	mov	b,#0x80
      0022A1 12 10 6B         [24] 7388 	lcall	_LCD_string_write
                                   7389 ;	.\ecen4350_lcd_v4.c:1563: setCursor(0, 60);
      0022A4 75 6B 3C         [24] 7390 	mov	_setCursor_PARM_2,#0x3c
      0022A7 75 6C 00         [24] 7391 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022AA 90 00 00         [24] 7392 	mov	dptr,#0x0000
      0022AD 12 05 51         [24] 7393 	lcall	_setCursor
                                   7394 ;	.\ecen4350_lcd_v4.c:1564: setColorSelect();
      0022B0 12 16 3A         [24] 7395 	lcall	_setColorSelect
                                   7396 ;	.\ecen4350_lcd_v4.c:1565: LCD_string_write(" Source Address:");
      0022B3 90 60 0A         [24] 7397 	mov	dptr,#___str_56
      0022B6 75 F0 80         [24] 7398 	mov	b,#0x80
      0022B9 12 10 6B         [24] 7399 	lcall	_LCD_string_write
                                   7400 ;	.\ecen4350_lcd_v4.c:1566: setCursor(0, 80);
      0022BC 75 6B 50         [24] 7401 	mov	_setCursor_PARM_2,#0x50
      0022BF 75 6C 00         [24] 7402 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022C2 90 00 00         [24] 7403 	mov	dptr,#0x0000
      0022C5 12 05 51         [24] 7404 	lcall	_setCursor
                                   7405 ;	.\ecen4350_lcd_v4.c:1567: LCD_string_write(" ");
      0022C8 90 5E B8         [24] 7406 	mov	dptr,#___str_30
      0022CB 75 F0 80         [24] 7407 	mov	b,#0x80
      0022CE 12 10 6B         [24] 7408 	lcall	_LCD_string_write
                                   7409 ;	.\ecen4350_lcd_v4.c:1568: setColorHighlight1();
      0022D1 12 16 45         [24] 7410 	lcall	_setColorHighlight1
                                   7411 ;	.\ecen4350_lcd_v4.c:1569: LCD_string_write("0x");
      0022D4 90 5D 8D         [24] 7412 	mov	dptr,#___str_2
      0022D7 75 F0 80         [24] 7413 	mov	b,#0x80
      0022DA 12 10 6B         [24] 7414 	lcall	_LCD_string_write
                                   7415 ;	.\ecen4350_lcd_v4.c:1570: sourceAddress = inputAddress();
      0022DD 12 16 A0         [24] 7416 	lcall	_inputAddress
      0022E0 78 7D            [12] 7417 	mov	r0,#_move_sourceAddress_65536_609
      0022E2 A6 82            [24] 7418 	mov	@r0,dpl
      0022E4 08               [12] 7419 	inc	r0
      0022E5 A6 83            [24] 7420 	mov	@r0,dph
                                   7421 ;	.\ecen4350_lcd_v4.c:1573: setColorDefault();
      0022E7 12 16 2F         [24] 7422 	lcall	_setColorDefault
                                   7423 ;	.\ecen4350_lcd_v4.c:1574: setCursor(0, 60);
      0022EA 75 6B 3C         [24] 7424 	mov	_setCursor_PARM_2,#0x3c
      0022ED 75 6C 00         [24] 7425 	mov	(_setCursor_PARM_2 + 1),#0x00
      0022F0 90 00 00         [24] 7426 	mov	dptr,#0x0000
      0022F3 12 05 51         [24] 7427 	lcall	_setCursor
                                   7428 ;	.\ecen4350_lcd_v4.c:1575: LCD_string_write(" Source Address:");
      0022F6 90 60 0A         [24] 7429 	mov	dptr,#___str_56
      0022F9 75 F0 80         [24] 7430 	mov	b,#0x80
      0022FC 12 10 6B         [24] 7431 	lcall	_LCD_string_write
                                   7432 ;	.\ecen4350_lcd_v4.c:1576: setCursor(0, 80);
      0022FF 75 6B 50         [24] 7433 	mov	_setCursor_PARM_2,#0x50
      002302 75 6C 00         [24] 7434 	mov	(_setCursor_PARM_2 + 1),#0x00
      002305 90 00 00         [24] 7435 	mov	dptr,#0x0000
      002308 12 05 51         [24] 7436 	lcall	_setCursor
                                   7437 ;	.\ecen4350_lcd_v4.c:1577: LCD_string_write(" ");
      00230B 90 5E B8         [24] 7438 	mov	dptr,#___str_30
      00230E 75 F0 80         [24] 7439 	mov	b,#0x80
      002311 12 10 6B         [24] 7440 	lcall	_LCD_string_write
                                   7441 ;	.\ecen4350_lcd_v4.c:1578: setColorHighlight2();
      002314 12 16 51         [24] 7442 	lcall	_setColorHighlight2
                                   7443 ;	.\ecen4350_lcd_v4.c:1579: LCD_string_write("0x");
      002317 90 5D 8D         [24] 7444 	mov	dptr,#___str_2
      00231A 75 F0 80         [24] 7445 	mov	b,#0x80
      00231D 12 10 6B         [24] 7446 	lcall	_LCD_string_write
                                   7447 ;	.\ecen4350_lcd_v4.c:1580: print16Hex(sourceAddress);
      002320 78 7D            [12] 7448 	mov	r0,#_move_sourceAddress_65536_609
      002322 86 82            [24] 7449 	mov	dpl,@r0
      002324 08               [12] 7450 	inc	r0
      002325 86 83            [24] 7451 	mov	dph,@r0
      002327 12 15 53         [24] 7452 	lcall	_print16Hex
                                   7453 ;	.\ecen4350_lcd_v4.c:1583: setCursor(0, 110);
      00232A 75 6B 6E         [24] 7454 	mov	_setCursor_PARM_2,#0x6e
      00232D 75 6C 00         [24] 7455 	mov	(_setCursor_PARM_2 + 1),#0x00
      002330 90 00 00         [24] 7456 	mov	dptr,#0x0000
      002333 12 05 51         [24] 7457 	lcall	_setCursor
                                   7458 ;	.\ecen4350_lcd_v4.c:1584: setColorSelect();
      002336 12 16 3A         [24] 7459 	lcall	_setColorSelect
                                   7460 ;	.\ecen4350_lcd_v4.c:1585: LCD_string_write(" Destination:");
      002339 90 60 1B         [24] 7461 	mov	dptr,#___str_57
      00233C 75 F0 80         [24] 7462 	mov	b,#0x80
      00233F 12 10 6B         [24] 7463 	lcall	_LCD_string_write
                                   7464 ;	.\ecen4350_lcd_v4.c:1586: setCursor(0, 130);
      002342 75 6B 82         [24] 7465 	mov	_setCursor_PARM_2,#0x82
      002345 75 6C 00         [24] 7466 	mov	(_setCursor_PARM_2 + 1),#0x00
      002348 90 00 00         [24] 7467 	mov	dptr,#0x0000
      00234B 12 05 51         [24] 7468 	lcall	_setCursor
                                   7469 ;	.\ecen4350_lcd_v4.c:1587: LCD_string_write(" ");
      00234E 90 5E B8         [24] 7470 	mov	dptr,#___str_30
      002351 75 F0 80         [24] 7471 	mov	b,#0x80
      002354 12 10 6B         [24] 7472 	lcall	_LCD_string_write
                                   7473 ;	.\ecen4350_lcd_v4.c:1588: setColorHighlight1();
      002357 12 16 45         [24] 7474 	lcall	_setColorHighlight1
                                   7475 ;	.\ecen4350_lcd_v4.c:1589: LCD_string_write("0x");
      00235A 90 5D 8D         [24] 7476 	mov	dptr,#___str_2
      00235D 75 F0 80         [24] 7477 	mov	b,#0x80
      002360 12 10 6B         [24] 7478 	lcall	_LCD_string_write
                                   7479 ;	.\ecen4350_lcd_v4.c:1590: destAddress = inputAddress();
      002363 12 16 A0         [24] 7480 	lcall	_inputAddress
      002366 AA 82            [24] 7481 	mov	r2,dpl
      002368 AB 83            [24] 7482 	mov	r3,dph
                                   7483 ;	.\ecen4350_lcd_v4.c:1593: setColorDefault();
      00236A C0 03            [24] 7484 	push	ar3
      00236C C0 02            [24] 7485 	push	ar2
      00236E 12 16 2F         [24] 7486 	lcall	_setColorDefault
                                   7487 ;	.\ecen4350_lcd_v4.c:1594: setCursor(0, 110);
      002371 75 6B 6E         [24] 7488 	mov	_setCursor_PARM_2,#0x6e
      002374 75 6C 00         [24] 7489 	mov	(_setCursor_PARM_2 + 1),#0x00
      002377 90 00 00         [24] 7490 	mov	dptr,#0x0000
      00237A 12 05 51         [24] 7491 	lcall	_setCursor
                                   7492 ;	.\ecen4350_lcd_v4.c:1595: LCD_string_write( " Destination:");
      00237D 90 60 1B         [24] 7493 	mov	dptr,#___str_57
      002380 75 F0 80         [24] 7494 	mov	b,#0x80
      002383 12 10 6B         [24] 7495 	lcall	_LCD_string_write
                                   7496 ;	.\ecen4350_lcd_v4.c:1596: setCursor(0, 130);
      002386 75 6B 82         [24] 7497 	mov	_setCursor_PARM_2,#0x82
      002389 75 6C 00         [24] 7498 	mov	(_setCursor_PARM_2 + 1),#0x00
      00238C 90 00 00         [24] 7499 	mov	dptr,#0x0000
      00238F 12 05 51         [24] 7500 	lcall	_setCursor
                                   7501 ;	.\ecen4350_lcd_v4.c:1597: LCD_string_write(" ");
      002392 90 5E B8         [24] 7502 	mov	dptr,#___str_30
      002395 75 F0 80         [24] 7503 	mov	b,#0x80
      002398 12 10 6B         [24] 7504 	lcall	_LCD_string_write
                                   7505 ;	.\ecen4350_lcd_v4.c:1598: setColorHighlight2();
      00239B 12 16 51         [24] 7506 	lcall	_setColorHighlight2
                                   7507 ;	.\ecen4350_lcd_v4.c:1599: LCD_string_write("0x");
      00239E 90 5D 8D         [24] 7508 	mov	dptr,#___str_2
      0023A1 75 F0 80         [24] 7509 	mov	b,#0x80
      0023A4 12 10 6B         [24] 7510 	lcall	_LCD_string_write
      0023A7 D0 02            [24] 7511 	pop	ar2
      0023A9 D0 03            [24] 7512 	pop	ar3
                                   7513 ;	.\ecen4350_lcd_v4.c:1600: print16Hex(destAddress);
      0023AB 8A 82            [24] 7514 	mov	dpl,r2
      0023AD 8B 83            [24] 7515 	mov	dph,r3
      0023AF C0 03            [24] 7516 	push	ar3
      0023B1 C0 02            [24] 7517 	push	ar2
      0023B3 12 15 53         [24] 7518 	lcall	_print16Hex
                                   7519 ;	.\ecen4350_lcd_v4.c:1603: setCursor(0, 160);
      0023B6 75 6B A0         [24] 7520 	mov	_setCursor_PARM_2,#0xa0
      0023B9 75 6C 00         [24] 7521 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023BC 90 00 00         [24] 7522 	mov	dptr,#0x0000
      0023BF 12 05 51         [24] 7523 	lcall	_setCursor
                                   7524 ;	.\ecen4350_lcd_v4.c:1604: setColorSelect();
      0023C2 12 16 3A         [24] 7525 	lcall	_setColorSelect
                                   7526 ;	.\ecen4350_lcd_v4.c:1605: LCD_string_write(" Choose Block Type:");
      0023C5 90 5E BA         [24] 7527 	mov	dptr,#___str_31
      0023C8 75 F0 80         [24] 7528 	mov	b,#0x80
      0023CB 12 10 6B         [24] 7529 	lcall	_LCD_string_write
                                   7530 ;	.\ecen4350_lcd_v4.c:1606: setCursor(0, 180);
      0023CE 75 6B B4         [24] 7531 	mov	_setCursor_PARM_2,#0xb4
      0023D1 75 6C 00         [24] 7532 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023D4 90 00 00         [24] 7533 	mov	dptr,#0x0000
      0023D7 12 05 51         [24] 7534 	lcall	_setCursor
                                   7535 ;	.\ecen4350_lcd_v4.c:1607: setColorWhite();
      0023DA 12 16 7F         [24] 7536 	lcall	_setColorWhite
                                   7537 ;	.\ecen4350_lcd_v4.c:1608: LCD_string_write("  <1> BYTE\n  <2> WORD\n  <4> DWORD");
      0023DD 90 5E 73         [24] 7538 	mov	dptr,#___str_26
      0023E0 75 F0 80         [24] 7539 	mov	b,#0x80
      0023E3 12 10 6B         [24] 7540 	lcall	_LCD_string_write
      0023E6 D0 02            [24] 7541 	pop	ar2
      0023E8 D0 03            [24] 7542 	pop	ar3
      0023EA D0 04            [24] 7543 	pop	ar4
      0023EC D0 05            [24] 7544 	pop	ar5
      0023EE D0 06            [24] 7545 	pop	ar6
      0023F0 D0 07            [24] 7546 	pop	ar7
                                   7547 ;	.\ecen4350_lcd_v4.c:1610: while (invalidType) {
      0023F2                       7548 00109$:
      0023F2 EC               [12] 7549 	mov	a,r4
      0023F3 70 03            [24] 7550 	jnz	00178$
      0023F5 02 25 82         [24] 7551 	ljmp	00137$
      0023F8                       7552 00178$:
                                   7553 ;	.\ecen4350_lcd_v4.c:1611: setCursor(0, 180);
      0023F8 75 6B B4         [24] 7554 	mov	_setCursor_PARM_2,#0xb4
      0023FB 75 6C 00         [24] 7555 	mov	(_setCursor_PARM_2 + 1),#0x00
      0023FE 90 00 00         [24] 7556 	mov	dptr,#0x0000
      002401 C0 07            [24] 7557 	push	ar7
      002403 C0 06            [24] 7558 	push	ar6
      002405 C0 04            [24] 7559 	push	ar4
      002407 C0 03            [24] 7560 	push	ar3
      002409 C0 02            [24] 7561 	push	ar2
      00240B 12 05 51         [24] 7562 	lcall	_setCursor
                                   7563 ;	.\ecen4350_lcd_v4.c:1612: setColorWhite();
      00240E 12 16 7F         [24] 7564 	lcall	_setColorWhite
                                   7565 ;	.\ecen4350_lcd_v4.c:1613: LCD_string_write("\n\n");
      002411 90 5E CE         [24] 7566 	mov	dptr,#___str_32
      002414 75 F0 80         [24] 7567 	mov	b,#0x80
      002417 12 10 6B         [24] 7568 	lcall	_LCD_string_write
                                   7569 ;	.\ecen4350_lcd_v4.c:1615: blockType = inputBlockType();
      00241A 12 17 42         [24] 7570 	lcall	_inputBlockType
      00241D AD 82            [24] 7571 	mov	r5,dpl
      00241F D0 02            [24] 7572 	pop	ar2
      002421 D0 03            [24] 7573 	pop	ar3
      002423 D0 04            [24] 7574 	pop	ar4
      002425 D0 06            [24] 7575 	pop	ar6
      002427 D0 07            [24] 7576 	pop	ar7
                                   7577 ;	.\ecen4350_lcd_v4.c:1617: if (blockType == 0x1) {
      002429 BD 01 5F         [24] 7578 	cjne	r5,#0x01,00102$
                                   7579 ;	.\ecen4350_lcd_v4.c:1618: invalidType = 0;
      00242C 7C 00            [12] 7580 	mov	r4,#0x00
                                   7581 ;	.\ecen4350_lcd_v4.c:1620: setColorDefault();
      00242E C0 07            [24] 7582 	push	ar7
      002430 C0 06            [24] 7583 	push	ar6
      002432 C0 05            [24] 7584 	push	ar5
      002434 C0 04            [24] 7585 	push	ar4
      002436 C0 03            [24] 7586 	push	ar3
      002438 C0 02            [24] 7587 	push	ar2
      00243A 12 16 2F         [24] 7588 	lcall	_setColorDefault
                                   7589 ;	.\ecen4350_lcd_v4.c:1621: setCursor(0, 160);
      00243D 75 6B A0         [24] 7590 	mov	_setCursor_PARM_2,#0xa0
      002440 75 6C 00         [24] 7591 	mov	(_setCursor_PARM_2 + 1),#0x00
      002443 90 00 00         [24] 7592 	mov	dptr,#0x0000
      002446 12 05 51         [24] 7593 	lcall	_setCursor
                                   7594 ;	.\ecen4350_lcd_v4.c:1622: LCD_string_write(" Choose Block Type:");
      002449 90 5E BA         [24] 7595 	mov	dptr,#___str_31
      00244C 75 F0 80         [24] 7596 	mov	b,#0x80
      00244F 12 10 6B         [24] 7597 	lcall	_LCD_string_write
                                   7598 ;	.\ecen4350_lcd_v4.c:1623: setCursor(0, 180);
      002452 75 6B B4         [24] 7599 	mov	_setCursor_PARM_2,#0xb4
      002455 75 6C 00         [24] 7600 	mov	(_setCursor_PARM_2 + 1),#0x00
      002458 90 00 00         [24] 7601 	mov	dptr,#0x0000
      00245B 12 05 51         [24] 7602 	lcall	_setCursor
                                   7603 ;	.\ecen4350_lcd_v4.c:1624: LCD_string_write("  ");
      00245E 90 5E D1         [24] 7604 	mov	dptr,#___str_33
      002461 75 F0 80         [24] 7605 	mov	b,#0x80
      002464 12 10 6B         [24] 7606 	lcall	_LCD_string_write
                                   7607 ;	.\ecen4350_lcd_v4.c:1625: setColorHighlight2();
      002467 12 16 51         [24] 7608 	lcall	_setColorHighlight2
                                   7609 ;	.\ecen4350_lcd_v4.c:1626: LCD_string_write("<1> BYTE\n");
      00246A 90 5E D4         [24] 7610 	mov	dptr,#___str_34
      00246D 75 F0 80         [24] 7611 	mov	b,#0x80
      002470 12 10 6B         [24] 7612 	lcall	_LCD_string_write
                                   7613 ;	.\ecen4350_lcd_v4.c:1627: setColorGray();
      002473 12 16 5D         [24] 7614 	lcall	_setColorGray
                                   7615 ;	.\ecen4350_lcd_v4.c:1628: LCD_string_write("\n\n                \n                ");
      002476 90 5E DE         [24] 7616 	mov	dptr,#___str_35
      002479 75 F0 80         [24] 7617 	mov	b,#0x80
      00247C 12 10 6B         [24] 7618 	lcall	_LCD_string_write
      00247F D0 02            [24] 7619 	pop	ar2
      002481 D0 03            [24] 7620 	pop	ar3
      002483 D0 04            [24] 7621 	pop	ar4
      002485 D0 05            [24] 7622 	pop	ar5
      002487 D0 06            [24] 7623 	pop	ar6
      002489 D0 07            [24] 7624 	pop	ar7
      00248B                       7625 00102$:
                                   7626 ;	.\ecen4350_lcd_v4.c:1630: } if (blockType == 0x2) {
      00248B BD 02 62         [24] 7627 	cjne	r5,#0x02,00104$
                                   7628 ;	.\ecen4350_lcd_v4.c:1631: invalidType = 0;
      00248E 7C 00            [12] 7629 	mov	r4,#0x00
                                   7630 ;	.\ecen4350_lcd_v4.c:1633: setColorDefault();
      002490 C0 07            [24] 7631 	push	ar7
      002492 C0 06            [24] 7632 	push	ar6
      002494 C0 05            [24] 7633 	push	ar5
      002496 C0 04            [24] 7634 	push	ar4
      002498 C0 03            [24] 7635 	push	ar3
      00249A C0 02            [24] 7636 	push	ar2
      00249C 12 16 2F         [24] 7637 	lcall	_setColorDefault
                                   7638 ;	.\ecen4350_lcd_v4.c:1634: setCursor(0, 160);
      00249F 75 6B A0         [24] 7639 	mov	_setCursor_PARM_2,#0xa0
      0024A2 75 6C 00         [24] 7640 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024A5 90 00 00         [24] 7641 	mov	dptr,#0x0000
      0024A8 12 05 51         [24] 7642 	lcall	_setCursor
                                   7643 ;	.\ecen4350_lcd_v4.c:1635: LCD_string_write(" Choose Block Type:");
      0024AB 90 5E BA         [24] 7644 	mov	dptr,#___str_31
      0024AE 75 F0 80         [24] 7645 	mov	b,#0x80
      0024B1 12 10 6B         [24] 7646 	lcall	_LCD_string_write
                                   7647 ;	.\ecen4350_lcd_v4.c:1636: setCursor(0, 180);
      0024B4 75 6B B4         [24] 7648 	mov	_setCursor_PARM_2,#0xb4
      0024B7 75 6C 00         [24] 7649 	mov	(_setCursor_PARM_2 + 1),#0x00
      0024BA 90 00 00         [24] 7650 	mov	dptr,#0x0000
      0024BD 12 05 51         [24] 7651 	lcall	_setCursor
                                   7652 ;	.\ecen4350_lcd_v4.c:1637: setColorGray();
      0024C0 12 16 5D         [24] 7653 	lcall	_setColorGray
                                   7654 ;	.\ecen4350_lcd_v4.c:1638: LCD_string_write("\n  ");
      0024C3 90 5F 02         [24] 7655 	mov	dptr,#___str_36
      0024C6 75 F0 80         [24] 7656 	mov	b,#0x80
      0024C9 12 10 6B         [24] 7657 	lcall	_LCD_string_write
                                   7658 ;	.\ecen4350_lcd_v4.c:1639: setColorHighlight2();
      0024CC 12 16 51         [24] 7659 	lcall	_setColorHighlight2
                                   7660 ;	.\ecen4350_lcd_v4.c:1640: LCD_string_write("<2> WORD\n");
      0024CF 90 5F 06         [24] 7661 	mov	dptr,#___str_37
      0024D2 75 F0 80         [24] 7662 	mov	b,#0x80
      0024D5 12 10 6B         [24] 7663 	lcall	_LCD_string_write
                                   7664 ;	.\ecen4350_lcd_v4.c:1641: setColorGray();
      0024D8 12 16 5D         [24] 7665 	lcall	_setColorGray
                                   7666 ;	.\ecen4350_lcd_v4.c:1642: LCD_string_write("\n                \n                ");
      0024DB 90 5F 10         [24] 7667 	mov	dptr,#___str_38
      0024DE 75 F0 80         [24] 7668 	mov	b,#0x80
      0024E1 12 10 6B         [24] 7669 	lcall	_LCD_string_write
      0024E4 D0 02            [24] 7670 	pop	ar2
      0024E6 D0 03            [24] 7671 	pop	ar3
      0024E8 D0 04            [24] 7672 	pop	ar4
      0024EA D0 05            [24] 7673 	pop	ar5
      0024EC D0 06            [24] 7674 	pop	ar6
      0024EE D0 07            [24] 7675 	pop	ar7
      0024F0                       7676 00104$:
                                   7677 ;	.\ecen4350_lcd_v4.c:1643: } if (blockType == 0x4) {
      0024F0 BD 04 62         [24] 7678 	cjne	r5,#0x04,00106$
                                   7679 ;	.\ecen4350_lcd_v4.c:1644: invalidType = 0;
      0024F3 7C 00            [12] 7680 	mov	r4,#0x00
                                   7681 ;	.\ecen4350_lcd_v4.c:1646: setColorDefault();
      0024F5 C0 07            [24] 7682 	push	ar7
      0024F7 C0 06            [24] 7683 	push	ar6
      0024F9 C0 05            [24] 7684 	push	ar5
      0024FB C0 04            [24] 7685 	push	ar4
      0024FD C0 03            [24] 7686 	push	ar3
      0024FF C0 02            [24] 7687 	push	ar2
      002501 12 16 2F         [24] 7688 	lcall	_setColorDefault
                                   7689 ;	.\ecen4350_lcd_v4.c:1647: setCursor(0, 160);
      002504 75 6B A0         [24] 7690 	mov	_setCursor_PARM_2,#0xa0
      002507 75 6C 00         [24] 7691 	mov	(_setCursor_PARM_2 + 1),#0x00
      00250A 90 00 00         [24] 7692 	mov	dptr,#0x0000
      00250D 12 05 51         [24] 7693 	lcall	_setCursor
                                   7694 ;	.\ecen4350_lcd_v4.c:1648: LCD_string_write(" Choose Block Type:");
      002510 90 5E BA         [24] 7695 	mov	dptr,#___str_31
      002513 75 F0 80         [24] 7696 	mov	b,#0x80
      002516 12 10 6B         [24] 7697 	lcall	_LCD_string_write
                                   7698 ;	.\ecen4350_lcd_v4.c:1649: setColorGray();
      002519 12 16 5D         [24] 7699 	lcall	_setColorGray
                                   7700 ;	.\ecen4350_lcd_v4.c:1650: setCursor(0, 180);
      00251C 75 6B B4         [24] 7701 	mov	_setCursor_PARM_2,#0xb4
      00251F 75 6C 00         [24] 7702 	mov	(_setCursor_PARM_2 + 1),#0x00
      002522 90 00 00         [24] 7703 	mov	dptr,#0x0000
      002525 12 05 51         [24] 7704 	lcall	_setCursor
                                   7705 ;	.\ecen4350_lcd_v4.c:1651: LCD_string_write("\n\n  ");
      002528 90 5F 33         [24] 7706 	mov	dptr,#___str_39
      00252B 75 F0 80         [24] 7707 	mov	b,#0x80
      00252E 12 10 6B         [24] 7708 	lcall	_LCD_string_write
                                   7709 ;	.\ecen4350_lcd_v4.c:1652: setColorHighlight2();
      002531 12 16 51         [24] 7710 	lcall	_setColorHighlight2
                                   7711 ;	.\ecen4350_lcd_v4.c:1653: LCD_string_write("<4> DWORD");
      002534 90 5F 38         [24] 7712 	mov	dptr,#___str_40
      002537 75 F0 80         [24] 7713 	mov	b,#0x80
      00253A 12 10 6B         [24] 7714 	lcall	_LCD_string_write
                                   7715 ;	.\ecen4350_lcd_v4.c:1654: setColorGray();
      00253D 12 16 5D         [24] 7716 	lcall	_setColorGray
                                   7717 ;	.\ecen4350_lcd_v4.c:1655: LCD_string_write("\n                \n                ");
      002540 90 5F 10         [24] 7718 	mov	dptr,#___str_38
      002543 75 F0 80         [24] 7719 	mov	b,#0x80
      002546 12 10 6B         [24] 7720 	lcall	_LCD_string_write
      002549 D0 02            [24] 7721 	pop	ar2
      00254B D0 03            [24] 7722 	pop	ar3
      00254D D0 04            [24] 7723 	pop	ar4
      00254F D0 05            [24] 7724 	pop	ar5
      002551 D0 06            [24] 7725 	pop	ar6
      002553 D0 07            [24] 7726 	pop	ar7
      002555                       7727 00106$:
                                   7728 ;	.\ecen4350_lcd_v4.c:1657: if (invalidType) {
      002555 EC               [12] 7729 	mov	a,r4
      002556 70 03            [24] 7730 	jnz	00185$
      002558 02 23 F2         [24] 7731 	ljmp	00109$
      00255B                       7732 00185$:
                                   7733 ;	.\ecen4350_lcd_v4.c:1658: setColorRed();
      00255B C0 07            [24] 7734 	push	ar7
      00255D C0 06            [24] 7735 	push	ar6
      00255F C0 05            [24] 7736 	push	ar5
      002561 C0 04            [24] 7737 	push	ar4
      002563 C0 03            [24] 7738 	push	ar3
      002565 C0 02            [24] 7739 	push	ar2
      002567 12 16 74         [24] 7740 	lcall	_setColorRed
                                   7741 ;	.\ecen4350_lcd_v4.c:1659: LCD_string_write("\n  Input Error\n  Try Again");
      00256A 90 5F 42         [24] 7742 	mov	dptr,#___str_41
      00256D 75 F0 80         [24] 7743 	mov	b,#0x80
      002570 12 10 6B         [24] 7744 	lcall	_LCD_string_write
      002573 D0 02            [24] 7745 	pop	ar2
      002575 D0 03            [24] 7746 	pop	ar3
      002577 D0 04            [24] 7747 	pop	ar4
      002579 D0 05            [24] 7748 	pop	ar5
      00257B D0 06            [24] 7749 	pop	ar6
      00257D D0 07            [24] 7750 	pop	ar7
      00257F 02 23 F2         [24] 7751 	ljmp	00109$
                                   7752 ;	.\ecen4350_lcd_v4.c:1665: while (invalidSize)
      002582                       7753 00137$:
      002582                       7754 00115$:
      002582 78 7F            [12] 7755 	mov	r0,#_move_invalidSize_65536_609
      002584 E6               [12] 7756 	mov	a,@r0
      002585 70 03            [24] 7757 	jnz	00186$
      002587 02 26 A6         [24] 7758 	ljmp	00140$
      00258A                       7759 00186$:
                                   7760 ;	.\ecen4350_lcd_v4.c:1668: setCursor(0, 260);
      00258A C0 02            [24] 7761 	push	ar2
      00258C C0 03            [24] 7762 	push	ar3
      00258E 75 6B 04         [24] 7763 	mov	_setCursor_PARM_2,#0x04
      002591 75 6C 01         [24] 7764 	mov	(_setCursor_PARM_2 + 1),#0x01
      002594 90 00 00         [24] 7765 	mov	dptr,#0x0000
      002597 C0 05            [24] 7766 	push	ar5
      002599 C0 03            [24] 7767 	push	ar3
      00259B C0 02            [24] 7768 	push	ar2
      00259D 12 05 51         [24] 7769 	lcall	_setCursor
                                   7770 ;	.\ecen4350_lcd_v4.c:1669: setColorSelect();
      0025A0 12 16 3A         [24] 7771 	lcall	_setColorSelect
                                   7772 ;	.\ecen4350_lcd_v4.c:1670: LCD_string_write(" Input Size: ");
      0025A3 90 5F 5D         [24] 7773 	mov	dptr,#___str_42
      0025A6 75 F0 80         [24] 7774 	mov	b,#0x80
      0025A9 12 10 6B         [24] 7775 	lcall	_LCD_string_write
                                   7776 ;	.\ecen4350_lcd_v4.c:1671: selection = keyDetect();
      0025AC 12 11 89         [24] 7777 	lcall	_keyDetect
      0025AF E5 82            [12] 7778 	mov	a,dpl
      0025B1 78 71            [12] 7779 	mov	r0,#_selection
      0025B3 F6               [12] 7780 	mov	@r0,a
                                   7781 ;	.\ecen4350_lcd_v4.c:1672: setColorHighlight1();
      0025B4 12 16 45         [24] 7782 	lcall	_setColorHighlight1
                                   7783 ;	.\ecen4350_lcd_v4.c:1673: write(selection);
      0025B7 78 71            [12] 7784 	mov	r0,#_selection
      0025B9 86 82            [24] 7785 	mov	dpl,@r0
      0025BB 12 10 05         [24] 7786 	lcall	_write
                                   7787 ;	.\ecen4350_lcd_v4.c:1674: blockSize = ASCIItoHex(selection);
      0025BE 78 71            [12] 7788 	mov	r0,#_selection
      0025C0 86 82            [24] 7789 	mov	dpl,@r0
      0025C2 12 13 F7         [24] 7790 	lcall	_ASCIItoHex
      0025C5 AC 82            [24] 7791 	mov	r4,dpl
      0025C7 D0 02            [24] 7792 	pop	ar2
      0025C9 D0 03            [24] 7793 	pop	ar3
      0025CB D0 05            [24] 7794 	pop	ar5
      0025CD 8C 06            [24] 7795 	mov	ar6,r4
      0025CF 7F 00            [12] 7796 	mov	r7,#0x00
                                   7797 ;	.\ecen4350_lcd_v4.c:1675: setColorDefault();
      0025D1 C0 07            [24] 7798 	push	ar7
      0025D3 C0 06            [24] 7799 	push	ar6
      0025D5 C0 05            [24] 7800 	push	ar5
      0025D7 C0 03            [24] 7801 	push	ar3
      0025D9 C0 02            [24] 7802 	push	ar2
      0025DB 12 16 2F         [24] 7803 	lcall	_setColorDefault
      0025DE D0 02            [24] 7804 	pop	ar2
      0025E0 D0 03            [24] 7805 	pop	ar3
      0025E2 D0 05            [24] 7806 	pop	ar5
      0025E4 D0 06            [24] 7807 	pop	ar6
      0025E6 D0 07            [24] 7808 	pop	ar7
                                   7809 ;	.\ecen4350_lcd_v4.c:1677: if (blockSize != blockType) {
      0025E8 8D 03            [24] 7810 	mov	ar3,r5
      0025EA 7C 00            [12] 7811 	mov	r4,#0x00
      0025EC EE               [12] 7812 	mov	a,r6
      0025ED B5 03 0A         [24] 7813 	cjne	a,ar3,00187$
      0025F0 EF               [12] 7814 	mov	a,r7
      0025F1 B5 04 06         [24] 7815 	cjne	a,ar4,00187$
      0025F4 D0 03            [24] 7816 	pop	ar3
      0025F6 D0 02            [24] 7817 	pop	ar2
      0025F8 80 57            [24] 7818 	sjmp	00113$
      0025FA                       7819 00187$:
      0025FA D0 03            [24] 7820 	pop	ar3
      0025FC D0 02            [24] 7821 	pop	ar2
                                   7822 ;	.\ecen4350_lcd_v4.c:1678: setCursor(0,280);
      0025FE 75 6B 18         [24] 7823 	mov	_setCursor_PARM_2,#0x18
      002601 75 6C 01         [24] 7824 	mov	(_setCursor_PARM_2 + 1),#0x01
      002604 90 00 00         [24] 7825 	mov	dptr,#0x0000
      002607 C0 07            [24] 7826 	push	ar7
      002609 C0 06            [24] 7827 	push	ar6
      00260B C0 05            [24] 7828 	push	ar5
      00260D C0 03            [24] 7829 	push	ar3
      00260F C0 02            [24] 7830 	push	ar2
      002611 12 05 51         [24] 7831 	lcall	_setCursor
                                   7832 ;	.\ecen4350_lcd_v4.c:1679: setColorRed();
      002614 12 16 74         [24] 7833 	lcall	_setColorRed
                                   7834 ;	.\ecen4350_lcd_v4.c:1680: LCD_string_write(" Mismatch Error\n Try Again");
      002617 90 5F 6B         [24] 7835 	mov	dptr,#___str_43
      00261A 75 F0 80         [24] 7836 	mov	b,#0x80
      00261D 12 10 6B         [24] 7837 	lcall	_LCD_string_write
                                   7838 ;	.\ecen4350_lcd_v4.c:1681: setCursor(0, 260);
      002620 75 6B 04         [24] 7839 	mov	_setCursor_PARM_2,#0x04
      002623 75 6C 01         [24] 7840 	mov	(_setCursor_PARM_2 + 1),#0x01
      002626 90 00 00         [24] 7841 	mov	dptr,#0x0000
      002629 12 05 51         [24] 7842 	lcall	_setCursor
                                   7843 ;	.\ecen4350_lcd_v4.c:1682: setColorSelect();
      00262C 12 16 3A         [24] 7844 	lcall	_setColorSelect
                                   7845 ;	.\ecen4350_lcd_v4.c:1683: LCD_string_write(" Input Size:");
      00262F 90 5E 95         [24] 7846 	mov	dptr,#___str_27
      002632 75 F0 80         [24] 7847 	mov	b,#0x80
      002635 12 10 6B         [24] 7848 	lcall	_LCD_string_write
                                   7849 ;	.\ecen4350_lcd_v4.c:1684: setColorGray();
      002638 12 16 5D         [24] 7850 	lcall	_setColorGray
                                   7851 ;	.\ecen4350_lcd_v4.c:1685: LCD_string_write(" _");
      00263B 90 5E A2         [24] 7852 	mov	dptr,#___str_28
      00263E 75 F0 80         [24] 7853 	mov	b,#0x80
      002641 12 10 6B         [24] 7854 	lcall	_LCD_string_write
      002644 D0 02            [24] 7855 	pop	ar2
      002646 D0 03            [24] 7856 	pop	ar3
      002648 D0 05            [24] 7857 	pop	ar5
      00264A D0 06            [24] 7858 	pop	ar6
      00264C D0 07            [24] 7859 	pop	ar7
      00264E 02 25 82         [24] 7860 	ljmp	00115$
      002651                       7861 00113$:
                                   7862 ;	.\ecen4350_lcd_v4.c:1687: setCursor(0, 260);
      002651 75 6B 04         [24] 7863 	mov	_setCursor_PARM_2,#0x04
      002654 75 6C 01         [24] 7864 	mov	(_setCursor_PARM_2 + 1),#0x01
      002657 90 00 00         [24] 7865 	mov	dptr,#0x0000
      00265A C0 07            [24] 7866 	push	ar7
      00265C C0 06            [24] 7867 	push	ar6
      00265E C0 05            [24] 7868 	push	ar5
      002660 C0 03            [24] 7869 	push	ar3
      002662 C0 02            [24] 7870 	push	ar2
      002664 12 05 51         [24] 7871 	lcall	_setCursor
                                   7872 ;	.\ecen4350_lcd_v4.c:1688: setColorDefault();
      002667 12 16 2F         [24] 7873 	lcall	_setColorDefault
                                   7874 ;	.\ecen4350_lcd_v4.c:1689: LCD_string_write(" Input Size: ");
      00266A 90 5F 5D         [24] 7875 	mov	dptr,#___str_42
      00266D 75 F0 80         [24] 7876 	mov	b,#0x80
      002670 12 10 6B         [24] 7877 	lcall	_LCD_string_write
                                   7878 ;	.\ecen4350_lcd_v4.c:1690: setColorHighlight2();
      002673 12 16 51         [24] 7879 	lcall	_setColorHighlight2
                                   7880 ;	.\ecen4350_lcd_v4.c:1691: write(selection);
      002676 78 71            [12] 7881 	mov	r0,#_selection
      002678 86 82            [24] 7882 	mov	dpl,@r0
      00267A 12 10 05         [24] 7883 	lcall	_write
                                   7884 ;	.\ecen4350_lcd_v4.c:1692: invalidSize = 0;
      00267D 78 7F            [12] 7885 	mov	r0,#_move_invalidSize_65536_609
      00267F 76 00            [12] 7886 	mov	@r0,#0x00
                                   7887 ;	.\ecen4350_lcd_v4.c:1693: setCursor(0,280);
      002681 75 6B 18         [24] 7888 	mov	_setCursor_PARM_2,#0x18
      002684 75 6C 01         [24] 7889 	mov	(_setCursor_PARM_2 + 1),#0x01
      002687 90 00 00         [24] 7890 	mov	dptr,#0x0000
      00268A 12 05 51         [24] 7891 	lcall	_setCursor
                                   7892 ;	.\ecen4350_lcd_v4.c:1694: setColorGreen();
      00268D 12 16 8A         [24] 7893 	lcall	_setColorGreen
                                   7894 ;	.\ecen4350_lcd_v4.c:1695: LCD_string_write(" Match Confirmed\n                ");
      002690 90 5F 86         [24] 7895 	mov	dptr,#___str_44
      002693 75 F0 80         [24] 7896 	mov	b,#0x80
      002696 12 10 6B         [24] 7897 	lcall	_LCD_string_write
      002699 D0 02            [24] 7898 	pop	ar2
      00269B D0 03            [24] 7899 	pop	ar3
      00269D D0 05            [24] 7900 	pop	ar5
      00269F D0 06            [24] 7901 	pop	ar6
      0026A1 D0 07            [24] 7902 	pop	ar7
      0026A3 02 25 82         [24] 7903 	ljmp	00115$
                                   7904 ;	.\ecen4350_lcd_v4.c:1701: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      0026A6                       7905 00140$:
      0026A6 78 7D            [12] 7906 	mov	r0,#_move_sourceAddress_65536_609
      0026A8 EE               [12] 7907 	mov	a,r6
      0026A9 26               [12] 7908 	add	a,@r0
      0026AA FE               [12] 7909 	mov	r6,a
      0026AB EF               [12] 7910 	mov	a,r7
      0026AC 08               [12] 7911 	inc	r0
      0026AD 36               [12] 7912 	addc	a,@r0
      0026AE FF               [12] 7913 	mov	r7,a
      0026AF 78 7D            [12] 7914 	mov	r0,#_move_sourceAddress_65536_609
      0026B1 86 5D            [24] 7915 	mov	_move_i_131072_618,@r0
      0026B3 08               [12] 7916 	inc	r0
      0026B4 86 5E            [24] 7917 	mov	(_move_i_131072_618 + 1),@r0
      0026B6                       7918 00125$:
      0026B6 C3               [12] 7919 	clr	c
      0026B7 E5 5D            [12] 7920 	mov	a,_move_i_131072_618
      0026B9 9E               [12] 7921 	subb	a,r6
      0026BA E5 5E            [12] 7922 	mov	a,(_move_i_131072_618 + 1)
      0026BC 9F               [12] 7923 	subb	a,r7
      0026BD 50 37            [24] 7924 	jnc	00121$
                                   7925 ;	.\ecen4350_lcd_v4.c:1702: d = (unsigned char __xdata*)(destAddress);
      0026BF 8A 5B            [24] 7926 	mov	_move_d_65536_609,r2
      0026C1 8B 5C            [24] 7927 	mov	(_move_d_65536_609 + 1),r3
                                   7928 ;	.\ecen4350_lcd_v4.c:1703: ramWrite8(d,ramRead8((unsigned char __xdata*)i));
      0026C3 85 5D 82         [24] 7929 	mov	dpl,_move_i_131072_618
      0026C6 85 5E 83         [24] 7930 	mov	dph,(_move_i_131072_618 + 1)
                                   7931 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   7932 ;	assignBit
      0026C9 C2 B5            [12] 7933 	clr	_P3_5
                                   7934 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0026CB E0               [24] 7935 	movx	a,@dptr
      0026CC FD               [12] 7936 	mov	r5,a
                                   7937 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   7938 ;	assignBit
      0026CD D2 B5            [12] 7939 	setb	_P3_5
                                   7940 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   7941 ;	assignBit
      0026CF C2 B5            [12] 7942 	clr	_P3_5
                                   7943 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      0026D1 85 5B 82         [24] 7944 	mov	dpl,_move_d_65536_609
      0026D4 85 5C 83         [24] 7945 	mov	dph,(_move_d_65536_609 + 1)
      0026D7 ED               [12] 7946 	mov	a,r5
      0026D8 F0               [24] 7947 	movx	@dptr,a
                                   7948 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   7949 ;	assignBit
      0026D9 D2 B5            [12] 7950 	setb	_P3_5
                                   7951 ;	.\ecen4350_lcd_v4.c:1704: if (destAddress == 0xFFFF) {						// check end of RAM
      0026DB BA FF 09         [24] 7952 	cjne	r2,#0xff,00119$
      0026DE BB FF 06         [24] 7953 	cjne	r3,#0xff,00119$
                                   7954 ;	.\ecen4350_lcd_v4.c:1705: destAddress = 0x0000;
      0026E1 7A 00            [12] 7955 	mov	r2,#0x00
      0026E3 7B 00            [12] 7956 	mov	r3,#0x00
      0026E5 80 05            [24] 7957 	sjmp	00126$
      0026E7                       7958 00119$:
                                   7959 ;	.\ecen4350_lcd_v4.c:1707: destAddress++;
      0026E7 0A               [12] 7960 	inc	r2
      0026E8 BA 00 01         [24] 7961 	cjne	r2,#0x00,00191$
      0026EB 0B               [12] 7962 	inc	r3
      0026EC                       7963 00191$:
      0026EC                       7964 00126$:
                                   7965 ;	.\ecen4350_lcd_v4.c:1701: for(unsigned int i = sourceAddress; i < (sourceAddress + blockSize); i++) {
      0026EC 05 5D            [12] 7966 	inc	_move_i_131072_618
      0026EE E4               [12] 7967 	clr	a
      0026EF B5 5D C4         [24] 7968 	cjne	a,_move_i_131072_618,00125$
      0026F2 05 5E            [12] 7969 	inc	(_move_i_131072_618 + 1)
      0026F4 80 C0            [24] 7970 	sjmp	00125$
      0026F6                       7971 00121$:
                                   7972 ;	.\ecen4350_lcd_v4.c:1711: setCursor(0, 300);
      0026F6 75 6B 2C         [24] 7973 	mov	_setCursor_PARM_2,#0x2c
      0026F9 75 6C 01         [24] 7974 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026FC 90 00 00         [24] 7975 	mov	dptr,#0x0000
      0026FF 12 05 51         [24] 7976 	lcall	_setCursor
                                   7977 ;	.\ecen4350_lcd_v4.c:1712: setColorGreen();
      002702 12 16 8A         [24] 7978 	lcall	_setColorGreen
                                   7979 ;	.\ecen4350_lcd_v4.c:1713: LCD_string_write(" Move Complete\n");
      002705 90 60 29         [24] 7980 	mov	dptr,#___str_58
      002708 75 F0 80         [24] 7981 	mov	b,#0x80
      00270B 12 10 6B         [24] 7982 	lcall	_LCD_string_write
                                   7983 ;	.\ecen4350_lcd_v4.c:1714: delay(60);
      00270E 90 00 3C         [24] 7984 	mov	dptr,#0x003c
      002711 12 01 87         [24] 7985 	lcall	_delay
                                   7986 ;	.\ecen4350_lcd_v4.c:1715: selection = 'null';
      002714 78 71            [12] 7987 	mov	r0,#_selection
      002716 76 6E            [12] 7988 	mov	@r0,#0x6e
                                   7989 ;	.\ecen4350_lcd_v4.c:1716: return;
                                   7990 ;	.\ecen4350_lcd_v4.c:1717: }
      002718 22               [24] 7991 	ret
                                   7992 ;------------------------------------------------------------
                                   7993 ;Allocation info for local variables in function 'edit'
                                   7994 ;------------------------------------------------------------
                                   7995 ;__1310720151              Allocated to registers 
                                   7996 ;d                         Allocated with name '_edit_d_65536_628'
                                   7997 ;__1310720152              Allocated to registers 
                                   7998 ;map_address               Allocated to registers 
                                   7999 ;d                         Allocated to registers 
                                   8000 ;__1310720154              Allocated to registers 
                                   8001 ;__1310720155              Allocated to registers 
                                   8002 ;map_address               Allocated to registers 
                                   8003 ;d                         Allocated to registers 
                                   8004 ;__2621440157              Allocated to registers 
                                   8005 ;__2621440158              Allocated to registers 
                                   8006 ;map_address               Allocated to registers 
                                   8007 ;d                         Allocated to registers r2 
                                   8008 ;__2621440160              Allocated to registers 
                                   8009 ;__2621440161              Allocated to registers 
                                   8010 ;map_address               Allocated to registers 
                                   8011 ;d                         Allocated to registers 
                                   8012 ;__2621440163              Allocated to registers 
                                   8013 ;__2621440164              Allocated to registers 
                                   8014 ;map_address               Allocated to registers 
                                   8015 ;d                         Allocated to registers 
                                   8016 ;__2621440166              Allocated to registers 
                                   8017 ;__2621440167              Allocated to registers 
                                   8018 ;map_address               Allocated to registers 
                                   8019 ;d                         Allocated to registers 
                                   8020 ;address                   Allocated to registers r5 r6 
                                   8021 ;value                     Allocated to registers r7 
                                   8022 ;exit                      Allocated with name '_edit_exit_65536_628'
                                   8023 ;invalid                   Allocated with name '_edit_invalid_65536_628'
                                   8024 ;------------------------------------------------------------
                                   8025 ;	.\ecen4350_lcd_v4.c:1719: void edit(){
                                   8026 ;	-----------------------------------------
                                   8027 ;	 function edit
                                   8028 ;	-----------------------------------------
      002719                       8029 _edit:
                                   8030 ;	.\ecen4350_lcd_v4.c:1723: __idata unsigned char exit = 1;
      002719 78 80            [12] 8031 	mov	r0,#_edit_exit_65536_628
      00271B 76 01            [12] 8032 	mov	@r0,#0x01
                                   8033 ;	.\ecen4350_lcd_v4.c:1726: clearLCD();
      00271D 12 0D EE         [24] 8034 	lcall	_clearLCD
                                   8035 ;	.\ecen4350_lcd_v4.c:1729: fillTop(GRAY);
      002720 90 D6 BA         [24] 8036 	mov	dptr,#0xd6ba
      002723 12 0C 21         [24] 8037 	lcall	_fillTop
                                   8038 ;	.\ecen4350_lcd_v4.c:1730: setTextSize(5);
      002726 75 82 05         [24] 8039 	mov	dpl,#0x05
      002729 12 05 6B         [24] 8040 	lcall	_setTextSize
                                   8041 ;	.\ecen4350_lcd_v4.c:1731: setColorMenu();
      00272C 12 16 68         [24] 8042 	lcall	_setColorMenu
                                   8043 ;	.\ecen4350_lcd_v4.c:1732: setCursor(30, 0);
      00272F E4               [12] 8044 	clr	a
      002730 F5 6B            [12] 8045 	mov	_setCursor_PARM_2,a
      002732 F5 6C            [12] 8046 	mov	(_setCursor_PARM_2 + 1),a
      002734 90 00 1E         [24] 8047 	mov	dptr,#0x001e
      002737 12 05 51         [24] 8048 	lcall	_setCursor
                                   8049 ;	.\ecen4350_lcd_v4.c:1733: LCD_string_write("[EDIT]\n");
      00273A 90 60 39         [24] 8050 	mov	dptr,#___str_59
      00273D 75 F0 80         [24] 8051 	mov	b,#0x80
      002740 12 10 6B         [24] 8052 	lcall	_LCD_string_write
                                   8053 ;	.\ecen4350_lcd_v4.c:1734: setTextSize(2);
      002743 75 82 02         [24] 8054 	mov	dpl,#0x02
      002746 12 05 6B         [24] 8055 	lcall	_setTextSize
                                   8056 ;	.\ecen4350_lcd_v4.c:1735: setColorDefault();
      002749 12 16 2F         [24] 8057 	lcall	_setColorDefault
                                   8058 ;	.\ecen4350_lcd_v4.c:1736: setCursor(0, 60);
      00274C 75 6B 3C         [24] 8059 	mov	_setCursor_PARM_2,#0x3c
      00274F 75 6C 00         [24] 8060 	mov	(_setCursor_PARM_2 + 1),#0x00
      002752 90 00 00         [24] 8061 	mov	dptr,#0x0000
      002755 12 05 51         [24] 8062 	lcall	_setCursor
                                   8063 ;	.\ecen4350_lcd_v4.c:1737: LCD_string_write(" Edit Address:");
      002758 90 60 41         [24] 8064 	mov	dptr,#___str_60
      00275B 75 F0 80         [24] 8065 	mov	b,#0x80
      00275E 12 10 6B         [24] 8066 	lcall	_LCD_string_write
                                   8067 ;	.\ecen4350_lcd_v4.c:1738: setCursor(0, 80);
      002761 75 6B 50         [24] 8068 	mov	_setCursor_PARM_2,#0x50
      002764 75 6C 00         [24] 8069 	mov	(_setCursor_PARM_2 + 1),#0x00
      002767 90 00 00         [24] 8070 	mov	dptr,#0x0000
      00276A 12 05 51         [24] 8071 	lcall	_setCursor
                                   8072 ;	.\ecen4350_lcd_v4.c:1739: setColorGray();
      00276D 12 16 5D         [24] 8073 	lcall	_setColorGray
                                   8074 ;	.\ecen4350_lcd_v4.c:1740: LCD_string_write(" 0x____");
      002770 90 5E 56         [24] 8075 	mov	dptr,#___str_24
      002773 75 F0 80         [24] 8076 	mov	b,#0x80
      002776 12 10 6B         [24] 8077 	lcall	_LCD_string_write
                                   8078 ;	.\ecen4350_lcd_v4.c:1741: setCursor(0, 110);
      002779 75 6B 6E         [24] 8079 	mov	_setCursor_PARM_2,#0x6e
      00277C 75 6C 00         [24] 8080 	mov	(_setCursor_PARM_2 + 1),#0x00
      00277F 90 00 00         [24] 8081 	mov	dptr,#0x0000
      002782 12 05 51         [24] 8082 	lcall	_setCursor
                                   8083 ;	.\ecen4350_lcd_v4.c:1742: setColorDefault();
      002785 12 16 2F         [24] 8084 	lcall	_setColorDefault
                                   8085 ;	.\ecen4350_lcd_v4.c:1743: LCD_string_write(" Location Contents:\n");
      002788 90 60 50         [24] 8086 	mov	dptr,#___str_61
      00278B 75 F0 80         [24] 8087 	mov	b,#0x80
      00278E 12 10 6B         [24] 8088 	lcall	_LCD_string_write
                                   8089 ;	.\ecen4350_lcd_v4.c:1744: setColorGray();
      002791 12 16 5D         [24] 8090 	lcall	_setColorGray
                                   8091 ;	.\ecen4350_lcd_v4.c:1745: LCD_string_write(" __");
      002794 90 60 65         [24] 8092 	mov	dptr,#___str_62
      002797 75 F0 80         [24] 8093 	mov	b,#0x80
      00279A 12 10 6B         [24] 8094 	lcall	_LCD_string_write
                                   8095 ;	.\ecen4350_lcd_v4.c:1746: setCursor(0, 160);
      00279D 75 6B A0         [24] 8096 	mov	_setCursor_PARM_2,#0xa0
      0027A0 75 6C 00         [24] 8097 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027A3 90 00 00         [24] 8098 	mov	dptr,#0x0000
      0027A6 12 05 51         [24] 8099 	lcall	_setCursor
                                   8100 ;	.\ecen4350_lcd_v4.c:1747: setColorDefault();
      0027A9 12 16 2F         [24] 8101 	lcall	_setColorDefault
                                   8102 ;	.\ecen4350_lcd_v4.c:1748: LCD_string_write(" Enter New Value:\n");
      0027AC 90 60 69         [24] 8103 	mov	dptr,#___str_63
      0027AF 75 F0 80         [24] 8104 	mov	b,#0x80
      0027B2 12 10 6B         [24] 8105 	lcall	_LCD_string_write
                                   8106 ;	.\ecen4350_lcd_v4.c:1749: setColorGray();
      0027B5 12 16 5D         [24] 8107 	lcall	_setColorGray
                                   8108 ;	.\ecen4350_lcd_v4.c:1750: LCD_string_write(" __");
      0027B8 90 60 65         [24] 8109 	mov	dptr,#___str_62
      0027BB 75 F0 80         [24] 8110 	mov	b,#0x80
      0027BE 12 10 6B         [24] 8111 	lcall	_LCD_string_write
                                   8112 ;	.\ecen4350_lcd_v4.c:1751: setCursor(0,210);
      0027C1 75 6B D2         [24] 8113 	mov	_setCursor_PARM_2,#0xd2
      0027C4 75 6C 00         [24] 8114 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027C7 90 00 00         [24] 8115 	mov	dptr,#0x0000
      0027CA 12 05 51         [24] 8116 	lcall	_setCursor
                                   8117 ;	.\ecen4350_lcd_v4.c:1752: setColorDefault();
      0027CD 12 16 2F         [24] 8118 	lcall	_setColorDefault
                                   8119 ;	.\ecen4350_lcd_v4.c:1753: LCD_string_write(" Choose Next Action:\n");
      0027D0 90 60 7C         [24] 8120 	mov	dptr,#___str_64
      0027D3 75 F0 80         [24] 8121 	mov	b,#0x80
      0027D6 12 10 6B         [24] 8122 	lcall	_LCD_string_write
                                   8123 ;	.\ecen4350_lcd_v4.c:1754: setColorGray();
      0027D9 12 16 5D         [24] 8124 	lcall	_setColorGray
                                   8125 ;	.\ecen4350_lcd_v4.c:1755: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      0027DC 90 60 92         [24] 8126 	mov	dptr,#___str_65
      0027DF 75 F0 80         [24] 8127 	mov	b,#0x80
      0027E2 12 10 6B         [24] 8128 	lcall	_LCD_string_write
                                   8129 ;	.\ecen4350_lcd_v4.c:1756: LCD_string_write("  <0> Exit");
      0027E5 90 60 B8         [24] 8130 	mov	dptr,#___str_66
      0027E8 75 F0 80         [24] 8131 	mov	b,#0x80
      0027EB 12 10 6B         [24] 8132 	lcall	_LCD_string_write
                                   8133 ;	.\ecen4350_lcd_v4.c:1763: setColorSelect();
      0027EE 12 16 3A         [24] 8134 	lcall	_setColorSelect
                                   8135 ;	.\ecen4350_lcd_v4.c:1764: setCursor(0, 60);
      0027F1 75 6B 3C         [24] 8136 	mov	_setCursor_PARM_2,#0x3c
      0027F4 75 6C 00         [24] 8137 	mov	(_setCursor_PARM_2 + 1),#0x00
      0027F7 90 00 00         [24] 8138 	mov	dptr,#0x0000
      0027FA 12 05 51         [24] 8139 	lcall	_setCursor
                                   8140 ;	.\ecen4350_lcd_v4.c:1765: LCD_string_write(" Edit Address:");
      0027FD 90 60 41         [24] 8141 	mov	dptr,#___str_60
      002800 75 F0 80         [24] 8142 	mov	b,#0x80
      002803 12 10 6B         [24] 8143 	lcall	_LCD_string_write
                                   8144 ;	.\ecen4350_lcd_v4.c:1766: setCursor(0, 80);
      002806 75 6B 50         [24] 8145 	mov	_setCursor_PARM_2,#0x50
      002809 75 6C 00         [24] 8146 	mov	(_setCursor_PARM_2 + 1),#0x00
      00280C 90 00 00         [24] 8147 	mov	dptr,#0x0000
      00280F 12 05 51         [24] 8148 	lcall	_setCursor
                                   8149 ;	.\ecen4350_lcd_v4.c:1767: LCD_string_write(" ");
      002812 90 5E B8         [24] 8150 	mov	dptr,#___str_30
      002815 75 F0 80         [24] 8151 	mov	b,#0x80
      002818 12 10 6B         [24] 8152 	lcall	_LCD_string_write
                                   8153 ;	.\ecen4350_lcd_v4.c:1768: setColorHighlight1();
      00281B 12 16 45         [24] 8154 	lcall	_setColorHighlight1
                                   8155 ;	.\ecen4350_lcd_v4.c:1769: LCD_string_write("0x");
      00281E 90 5D 8D         [24] 8156 	mov	dptr,#___str_2
      002821 75 F0 80         [24] 8157 	mov	b,#0x80
      002824 12 10 6B         [24] 8158 	lcall	_LCD_string_write
                                   8159 ;	.\ecen4350_lcd_v4.c:1770: address = inputAddress();		// input 16-bit address and store in memory
      002827 12 16 A0         [24] 8160 	lcall	_inputAddress
      00282A AD 82            [24] 8161 	mov	r5,dpl
      00282C AE 83            [24] 8162 	mov	r6,dph
                                   8163 ;	.\ecen4350_lcd_v4.c:1771: d = (unsigned char __xdata*)address;
      00282E 8D 03            [24] 8164 	mov	ar3,r5
      002830 8E 04            [24] 8165 	mov	ar4,r6
                                   8166 ;	.\ecen4350_lcd_v4.c:1774: setColorDefault();
      002832 C0 06            [24] 8167 	push	ar6
      002834 C0 05            [24] 8168 	push	ar5
      002836 C0 04            [24] 8169 	push	ar4
      002838 C0 03            [24] 8170 	push	ar3
      00283A 12 16 2F         [24] 8171 	lcall	_setColorDefault
                                   8172 ;	.\ecen4350_lcd_v4.c:1775: setCursor(0, 60);
      00283D 75 6B 3C         [24] 8173 	mov	_setCursor_PARM_2,#0x3c
      002840 75 6C 00         [24] 8174 	mov	(_setCursor_PARM_2 + 1),#0x00
      002843 90 00 00         [24] 8175 	mov	dptr,#0x0000
      002846 12 05 51         [24] 8176 	lcall	_setCursor
                                   8177 ;	.\ecen4350_lcd_v4.c:1776: LCD_string_write(" Edit Address:");
      002849 90 60 41         [24] 8178 	mov	dptr,#___str_60
      00284C 75 F0 80         [24] 8179 	mov	b,#0x80
      00284F 12 10 6B         [24] 8180 	lcall	_LCD_string_write
                                   8181 ;	.\ecen4350_lcd_v4.c:1777: setCursor(0, 80);
      002852 75 6B 50         [24] 8182 	mov	_setCursor_PARM_2,#0x50
      002855 75 6C 00         [24] 8183 	mov	(_setCursor_PARM_2 + 1),#0x00
      002858 90 00 00         [24] 8184 	mov	dptr,#0x0000
      00285B 12 05 51         [24] 8185 	lcall	_setCursor
                                   8186 ;	.\ecen4350_lcd_v4.c:1778: LCD_string_write(" ");
      00285E 90 5E B8         [24] 8187 	mov	dptr,#___str_30
      002861 75 F0 80         [24] 8188 	mov	b,#0x80
      002864 12 10 6B         [24] 8189 	lcall	_LCD_string_write
                                   8190 ;	.\ecen4350_lcd_v4.c:1779: setColorHighlight2();
      002867 12 16 51         [24] 8191 	lcall	_setColorHighlight2
                                   8192 ;	.\ecen4350_lcd_v4.c:1780: LCD_string_write("0x");
      00286A 90 5D 8D         [24] 8193 	mov	dptr,#___str_2
      00286D 75 F0 80         [24] 8194 	mov	b,#0x80
      002870 12 10 6B         [24] 8195 	lcall	_LCD_string_write
      002873 D0 03            [24] 8196 	pop	ar3
      002875 D0 04            [24] 8197 	pop	ar4
      002877 D0 05            [24] 8198 	pop	ar5
      002879 D0 06            [24] 8199 	pop	ar6
                                   8200 ;	.\ecen4350_lcd_v4.c:1781: print16Hex(address);		// print 16-bit address from stored memory
      00287B 8D 82            [24] 8201 	mov	dpl,r5
      00287D 8E 83            [24] 8202 	mov	dph,r6
      00287F C0 06            [24] 8203 	push	ar6
      002881 C0 05            [24] 8204 	push	ar5
      002883 C0 04            [24] 8205 	push	ar4
      002885 C0 03            [24] 8206 	push	ar3
      002887 12 15 53         [24] 8207 	lcall	_print16Hex
                                   8208 ;	.\ecen4350_lcd_v4.c:1784: setCursor(0, 110);
      00288A 75 6B 6E         [24] 8209 	mov	_setCursor_PARM_2,#0x6e
      00288D 75 6C 00         [24] 8210 	mov	(_setCursor_PARM_2 + 1),#0x00
      002890 90 00 00         [24] 8211 	mov	dptr,#0x0000
      002893 12 05 51         [24] 8212 	lcall	_setCursor
                                   8213 ;	.\ecen4350_lcd_v4.c:1785: setColorDefault();
      002896 12 16 2F         [24] 8214 	lcall	_setColorDefault
                                   8215 ;	.\ecen4350_lcd_v4.c:1786: LCD_string_write("\n ");
      002899 90 60 C3         [24] 8216 	mov	dptr,#___str_67
      00289C 75 F0 80         [24] 8217 	mov	b,#0x80
      00289F 12 10 6B         [24] 8218 	lcall	_LCD_string_write
                                   8219 ;	.\ecen4350_lcd_v4.c:1787: setColorHighlight2();
      0028A2 12 16 51         [24] 8220 	lcall	_setColorHighlight2
      0028A5 D0 03            [24] 8221 	pop	ar3
      0028A7 D0 04            [24] 8222 	pop	ar4
                                   8223 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8224 ;	assignBit
      0028A9 C2 B5            [12] 8225 	clr	_P3_5
                                   8226 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0028AB 8B 82            [24] 8227 	mov	dpl,r3
      0028AD 8C 83            [24] 8228 	mov	dph,r4
      0028AF E0               [24] 8229 	movx	a,@dptr
      0028B0 F5 82            [12] 8230 	mov	dpl,a
                                   8231 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8232 ;	assignBit
      0028B2 D2 B5            [12] 8233 	setb	_P3_5
                                   8234 ;	.\ecen4350_lcd_v4.c:1788: print8Hex(ramRead8(d));
      0028B4 C0 04            [24] 8235 	push	ar4
      0028B6 C0 03            [24] 8236 	push	ar3
      0028B8 12 15 3C         [24] 8237 	lcall	_print8Hex
                                   8238 ;	.\ecen4350_lcd_v4.c:1791: setCursor(0, 160);
      0028BB 75 6B A0         [24] 8239 	mov	_setCursor_PARM_2,#0xa0
      0028BE 75 6C 00         [24] 8240 	mov	(_setCursor_PARM_2 + 1),#0x00
      0028C1 90 00 00         [24] 8241 	mov	dptr,#0x0000
      0028C4 12 05 51         [24] 8242 	lcall	_setCursor
                                   8243 ;	.\ecen4350_lcd_v4.c:1792: setColorSelect();
      0028C7 12 16 3A         [24] 8244 	lcall	_setColorSelect
                                   8245 ;	.\ecen4350_lcd_v4.c:1793: LCD_string_write(" Enter New Value:\n ");
      0028CA 90 60 C6         [24] 8246 	mov	dptr,#___str_68
      0028CD 75 F0 80         [24] 8247 	mov	b,#0x80
      0028D0 12 10 6B         [24] 8248 	lcall	_LCD_string_write
                                   8249 ;	.\ecen4350_lcd_v4.c:1794: setColorHighlight1();
      0028D3 12 16 45         [24] 8250 	lcall	_setColorHighlight1
                                   8251 ;	.\ecen4350_lcd_v4.c:1795: selection = keyDetect();
      0028D6 12 11 89         [24] 8252 	lcall	_keyDetect
      0028D9 AA 82            [24] 8253 	mov	r2,dpl
      0028DB 78 71            [12] 8254 	mov	r0,#_selection
      0028DD A6 02            [24] 8255 	mov	@r0,ar2
                                   8256 ;	.\ecen4350_lcd_v4.c:1796: write(selection);
      0028DF 8A 82            [24] 8257 	mov	dpl,r2
      0028E1 12 10 05         [24] 8258 	lcall	_write
                                   8259 ;	.\ecen4350_lcd_v4.c:1797: selection = ASCIItoHex(selection);
      0028E4 78 71            [12] 8260 	mov	r0,#_selection
      0028E6 86 82            [24] 8261 	mov	dpl,@r0
      0028E8 12 13 F7         [24] 8262 	lcall	_ASCIItoHex
      0028EB AA 82            [24] 8263 	mov	r2,dpl
      0028ED 78 71            [12] 8264 	mov	r0,#_selection
      0028EF A6 02            [24] 8265 	mov	@r0,ar2
                                   8266 ;	.\ecen4350_lcd_v4.c:1798: value |= selection * 16;
      0028F1 EA               [12] 8267 	mov	a,r2
      0028F2 C4               [12] 8268 	swap	a
      0028F3 54 F0            [12] 8269 	anl	a,#0xf0
      0028F5 FA               [12] 8270 	mov	r2,a
                                   8271 ;	.\ecen4350_lcd_v4.c:1799: selection = keyDetect();
      0028F6 C0 02            [24] 8272 	push	ar2
      0028F8 12 11 89         [24] 8273 	lcall	_keyDetect
      0028FB AF 82            [24] 8274 	mov	r7,dpl
      0028FD 78 71            [12] 8275 	mov	r0,#_selection
      0028FF A6 07            [24] 8276 	mov	@r0,ar7
                                   8277 ;	.\ecen4350_lcd_v4.c:1800: write(selection);
      002901 8F 82            [24] 8278 	mov	dpl,r7
      002903 12 10 05         [24] 8279 	lcall	_write
                                   8280 ;	.\ecen4350_lcd_v4.c:1801: selection = ASCIItoHex(selection);
      002906 78 71            [12] 8281 	mov	r0,#_selection
      002908 86 82            [24] 8282 	mov	dpl,@r0
      00290A 12 13 F7         [24] 8283 	lcall	_ASCIItoHex
      00290D AF 82            [24] 8284 	mov	r7,dpl
      00290F D0 02            [24] 8285 	pop	ar2
      002911 D0 03            [24] 8286 	pop	ar3
      002913 D0 04            [24] 8287 	pop	ar4
      002915 D0 05            [24] 8288 	pop	ar5
      002917 D0 06            [24] 8289 	pop	ar6
      002919 78 71            [12] 8290 	mov	r0,#_selection
      00291B A6 07            [24] 8291 	mov	@r0,ar7
                                   8292 ;	.\ecen4350_lcd_v4.c:1802: value |= selection;
      00291D EA               [12] 8293 	mov	a,r2
      00291E 42 07            [12] 8294 	orl	ar7,a
                                   8295 ;	.\ecen4350_lcd_v4.c:1805: setColorDefault();
      002920 C0 07            [24] 8296 	push	ar7
      002922 C0 06            [24] 8297 	push	ar6
      002924 C0 05            [24] 8298 	push	ar5
      002926 C0 04            [24] 8299 	push	ar4
      002928 C0 03            [24] 8300 	push	ar3
      00292A 12 16 2F         [24] 8301 	lcall	_setColorDefault
                                   8302 ;	.\ecen4350_lcd_v4.c:1806: setCursor(0, 160);
      00292D 75 6B A0         [24] 8303 	mov	_setCursor_PARM_2,#0xa0
      002930 75 6C 00         [24] 8304 	mov	(_setCursor_PARM_2 + 1),#0x00
      002933 90 00 00         [24] 8305 	mov	dptr,#0x0000
      002936 12 05 51         [24] 8306 	lcall	_setCursor
                                   8307 ;	.\ecen4350_lcd_v4.c:1807: LCD_string_write(" Enter New Value:\n ");
      002939 90 60 C6         [24] 8308 	mov	dptr,#___str_68
      00293C 75 F0 80         [24] 8309 	mov	b,#0x80
      00293F 12 10 6B         [24] 8310 	lcall	_LCD_string_write
                                   8311 ;	.\ecen4350_lcd_v4.c:1808: setColorHighlight2();
      002942 12 16 51         [24] 8312 	lcall	_setColorHighlight2
      002945 D0 03            [24] 8313 	pop	ar3
      002947 D0 04            [24] 8314 	pop	ar4
      002949 D0 05            [24] 8315 	pop	ar5
      00294B D0 06            [24] 8316 	pop	ar6
      00294D D0 07            [24] 8317 	pop	ar7
                                   8318 ;	.\ecen4350_lcd_v4.c:1809: print8Hex(value);
      00294F 8F 82            [24] 8319 	mov	dpl,r7
      002951 C0 07            [24] 8320 	push	ar7
      002953 C0 06            [24] 8321 	push	ar6
      002955 C0 05            [24] 8322 	push	ar5
      002957 C0 04            [24] 8323 	push	ar4
      002959 C0 03            [24] 8324 	push	ar3
      00295B 12 15 3C         [24] 8325 	lcall	_print8Hex
      00295E D0 03            [24] 8326 	pop	ar3
      002960 D0 04            [24] 8327 	pop	ar4
      002962 D0 05            [24] 8328 	pop	ar5
      002964 D0 06            [24] 8329 	pop	ar6
      002966 D0 07            [24] 8330 	pop	ar7
                                   8331 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8332 ;	assignBit
      002968 C2 B5            [12] 8333 	clr	_P3_5
                                   8334 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      00296A 8B 82            [24] 8335 	mov	dpl,r3
      00296C 8C 83            [24] 8336 	mov	dph,r4
      00296E EF               [12] 8337 	mov	a,r7
      00296F F0               [24] 8338 	movx	@dptr,a
                                   8339 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8340 ;	assignBit
      002970 D2 B5            [12] 8341 	setb	_P3_5
                                   8342 ;	.\ecen4350_lcd_v4.c:1814: setCursor(0, 210);
      002972 75 6B D2         [24] 8343 	mov	_setCursor_PARM_2,#0xd2
      002975 75 6C 00         [24] 8344 	mov	(_setCursor_PARM_2 + 1),#0x00
      002978 90 00 00         [24] 8345 	mov	dptr,#0x0000
      00297B C0 06            [24] 8346 	push	ar6
      00297D C0 05            [24] 8347 	push	ar5
      00297F 12 05 51         [24] 8348 	lcall	_setCursor
                                   8349 ;	.\ecen4350_lcd_v4.c:1815: setColorSelect();
      002982 12 16 3A         [24] 8350 	lcall	_setColorSelect
                                   8351 ;	.\ecen4350_lcd_v4.c:1816: LCD_string_write(" Choose Next Action:\n");
      002985 90 60 7C         [24] 8352 	mov	dptr,#___str_64
      002988 75 F0 80         [24] 8353 	mov	b,#0x80
      00298B 12 10 6B         [24] 8354 	lcall	_LCD_string_write
                                   8355 ;	.\ecen4350_lcd_v4.c:1817: setColorWhite();
      00298E 12 16 7F         [24] 8356 	lcall	_setColorWhite
                                   8357 ;	.\ecen4350_lcd_v4.c:1818: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002991 90 60 92         [24] 8358 	mov	dptr,#___str_65
      002994 75 F0 80         [24] 8359 	mov	b,#0x80
      002997 12 10 6B         [24] 8360 	lcall	_LCD_string_write
                                   8361 ;	.\ecen4350_lcd_v4.c:1819: LCD_string_write("  <0> Exit");
      00299A 90 60 B8         [24] 8362 	mov	dptr,#___str_66
      00299D 75 F0 80         [24] 8363 	mov	b,#0x80
      0029A0 12 10 6B         [24] 8364 	lcall	_LCD_string_write
      0029A3 D0 05            [24] 8365 	pop	ar5
      0029A5 D0 06            [24] 8366 	pop	ar6
                                   8367 ;	.\ecen4350_lcd_v4.c:1825: while(exit){
      0029A7                       8368 00109$:
      0029A7 78 80            [12] 8369 	mov	r0,#_edit_exit_65536_628
      0029A9 E6               [12] 8370 	mov	a,@r0
      0029AA 70 01            [24] 8371 	jnz	00150$
      0029AC 22               [24] 8372 	ret
      0029AD                       8373 00150$:
                                   8374 ;	.\ecen4350_lcd_v4.c:1826: selection = keyDetect();
      0029AD C0 06            [24] 8375 	push	ar6
      0029AF C0 05            [24] 8376 	push	ar5
      0029B1 12 11 89         [24] 8377 	lcall	_keyDetect
      0029B4 AF 82            [24] 8378 	mov	r7,dpl
      0029B6 D0 05            [24] 8379 	pop	ar5
      0029B8 D0 06            [24] 8380 	pop	ar6
      0029BA 78 71            [12] 8381 	mov	r0,#_selection
      0029BC A6 07            [24] 8382 	mov	@r0,ar7
                                   8383 ;	.\ecen4350_lcd_v4.c:1827: invalid = 1;
      0029BE 78 81            [12] 8384 	mov	r0,#_edit_invalid_65536_628
      0029C0 76 01            [12] 8385 	mov	@r0,#0x01
                                   8386 ;	.\ecen4350_lcd_v4.c:1828: if (selection == '1') {		/* Highlight choice and gray out others */
      0029C2 BF 31 02         [24] 8387 	cjne	r7,#0x31,00151$
      0029C5 80 03            [24] 8388 	sjmp	00152$
      0029C7                       8389 00151$:
      0029C7 02 2B A6         [24] 8390 	ljmp	00102$
      0029CA                       8391 00152$:
                                   8392 ;	.\ecen4350_lcd_v4.c:1829: invalid = 0;
      0029CA 78 81            [12] 8393 	mov	r0,#_edit_invalid_65536_628
      0029CC 76 00            [12] 8394 	mov	@r0,#0x00
                                   8395 ;	.\ecen4350_lcd_v4.c:1831: setCursor(0, 210);
      0029CE 75 6B D2         [24] 8396 	mov	_setCursor_PARM_2,#0xd2
      0029D1 75 6C 00         [24] 8397 	mov	(_setCursor_PARM_2 + 1),#0x00
      0029D4 90 00 00         [24] 8398 	mov	dptr,#0x0000
      0029D7 C0 06            [24] 8399 	push	ar6
      0029D9 C0 05            [24] 8400 	push	ar5
      0029DB 12 05 51         [24] 8401 	lcall	_setCursor
                                   8402 ;	.\ecen4350_lcd_v4.c:1832: setColorDefault();
      0029DE 12 16 2F         [24] 8403 	lcall	_setColorDefault
                                   8404 ;	.\ecen4350_lcd_v4.c:1833: LCD_string_write("\n  ");
      0029E1 90 5F 02         [24] 8405 	mov	dptr,#___str_36
      0029E4 75 F0 80         [24] 8406 	mov	b,#0x80
      0029E7 12 10 6B         [24] 8407 	lcall	_LCD_string_write
                                   8408 ;	.\ecen4350_lcd_v4.c:1834: setColorHighlight2();
      0029EA 12 16 51         [24] 8409 	lcall	_setColorHighlight2
                                   8410 ;	.\ecen4350_lcd_v4.c:1835: LCD_string_write("<1> Next Address\n");
      0029ED 90 60 DA         [24] 8411 	mov	dptr,#___str_69
      0029F0 75 F0 80         [24] 8412 	mov	b,#0x80
      0029F3 12 10 6B         [24] 8413 	lcall	_LCD_string_write
                                   8414 ;	.\ecen4350_lcd_v4.c:1836: setColorGray();
      0029F6 12 16 5D         [24] 8415 	lcall	_setColorGray
                                   8416 ;	.\ecen4350_lcd_v4.c:1837: LCD_string_write("\n\n               ");
      0029F9 90 60 EC         [24] 8417 	mov	dptr,#___str_70
      0029FC 75 F0 80         [24] 8418 	mov	b,#0x80
      0029FF 12 10 6B         [24] 8419 	lcall	_LCD_string_write
                                   8420 ;	.\ecen4350_lcd_v4.c:1838: delay(60);
      002A02 90 00 3C         [24] 8421 	mov	dptr,#0x003c
      002A05 12 01 87         [24] 8422 	lcall	_delay
                                   8423 ;	.\ecen4350_lcd_v4.c:1841: setCursor(0, 80);
      002A08 75 6B 50         [24] 8424 	mov	_setCursor_PARM_2,#0x50
      002A0B 75 6C 00         [24] 8425 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A0E 90 00 00         [24] 8426 	mov	dptr,#0x0000
      002A11 12 05 51         [24] 8427 	lcall	_setCursor
                                   8428 ;	.\ecen4350_lcd_v4.c:1842: setColorGray();
      002A14 12 16 5D         [24] 8429 	lcall	_setColorGray
                                   8430 ;	.\ecen4350_lcd_v4.c:1843: LCD_string_write(" 0x____");
      002A17 90 5E 56         [24] 8431 	mov	dptr,#___str_24
      002A1A 75 F0 80         [24] 8432 	mov	b,#0x80
      002A1D 12 10 6B         [24] 8433 	lcall	_LCD_string_write
                                   8434 ;	.\ecen4350_lcd_v4.c:1844: setCursor(0, 110);
      002A20 75 6B 6E         [24] 8435 	mov	_setCursor_PARM_2,#0x6e
      002A23 75 6C 00         [24] 8436 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A26 90 00 00         [24] 8437 	mov	dptr,#0x0000
      002A29 12 05 51         [24] 8438 	lcall	_setCursor
                                   8439 ;	.\ecen4350_lcd_v4.c:1845: LCD_string_write("\n __");
      002A2C 90 60 FE         [24] 8440 	mov	dptr,#___str_71
      002A2F 75 F0 80         [24] 8441 	mov	b,#0x80
      002A32 12 10 6B         [24] 8442 	lcall	_LCD_string_write
                                   8443 ;	.\ecen4350_lcd_v4.c:1846: setCursor(0, 160);
      002A35 75 6B A0         [24] 8444 	mov	_setCursor_PARM_2,#0xa0
      002A38 75 6C 00         [24] 8445 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A3B 90 00 00         [24] 8446 	mov	dptr,#0x0000
      002A3E 12 05 51         [24] 8447 	lcall	_setCursor
                                   8448 ;	.\ecen4350_lcd_v4.c:1847: LCD_string_write("\n __");
      002A41 90 60 FE         [24] 8449 	mov	dptr,#___str_71
      002A44 75 F0 80         [24] 8450 	mov	b,#0x80
      002A47 12 10 6B         [24] 8451 	lcall	_LCD_string_write
                                   8452 ;	.\ecen4350_lcd_v4.c:1848: setCursor(0, 210);
      002A4A 75 6B D2         [24] 8453 	mov	_setCursor_PARM_2,#0xd2
      002A4D 75 6C 00         [24] 8454 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A50 90 00 00         [24] 8455 	mov	dptr,#0x0000
      002A53 12 05 51         [24] 8456 	lcall	_setCursor
                                   8457 ;	.\ecen4350_lcd_v4.c:1849: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002A56 90 61 03         [24] 8458 	mov	dptr,#___str_72
      002A59 75 F0 80         [24] 8459 	mov	b,#0x80
      002A5C 12 10 6B         [24] 8460 	lcall	_LCD_string_write
      002A5F D0 05            [24] 8461 	pop	ar5
      002A61 D0 06            [24] 8462 	pop	ar6
                                   8463 ;	.\ecen4350_lcd_v4.c:1852: address++;
      002A63 0D               [12] 8464 	inc	r5
      002A64 BD 00 01         [24] 8465 	cjne	r5,#0x00,00153$
      002A67 0E               [12] 8466 	inc	r6
      002A68                       8467 00153$:
                                   8468 ;	.\ecen4350_lcd_v4.c:1853: d = (unsigned char __xdata*)address;
      002A68 8D 5F            [24] 8469 	mov	_edit_d_65536_628,r5
      002A6A 8E 60            [24] 8470 	mov	(_edit_d_65536_628 + 1),r6
                                   8471 ;	.\ecen4350_lcd_v4.c:1854: setCursor(0, 80);
      002A6C 75 6B 50         [24] 8472 	mov	_setCursor_PARM_2,#0x50
      002A6F 75 6C 00         [24] 8473 	mov	(_setCursor_PARM_2 + 1),#0x00
      002A72 90 00 00         [24] 8474 	mov	dptr,#0x0000
      002A75 C0 06            [24] 8475 	push	ar6
      002A77 C0 05            [24] 8476 	push	ar5
      002A79 12 05 51         [24] 8477 	lcall	_setCursor
                                   8478 ;	.\ecen4350_lcd_v4.c:1855: LCD_string_write(" ");
      002A7C 90 5E B8         [24] 8479 	mov	dptr,#___str_30
      002A7F 75 F0 80         [24] 8480 	mov	b,#0x80
      002A82 12 10 6B         [24] 8481 	lcall	_LCD_string_write
                                   8482 ;	.\ecen4350_lcd_v4.c:1856: setColorHighlight2();
      002A85 12 16 51         [24] 8483 	lcall	_setColorHighlight2
                                   8484 ;	.\ecen4350_lcd_v4.c:1857: LCD_string_write("0x");
      002A88 90 5D 8D         [24] 8485 	mov	dptr,#___str_2
      002A8B 75 F0 80         [24] 8486 	mov	b,#0x80
      002A8E 12 10 6B         [24] 8487 	lcall	_LCD_string_write
      002A91 D0 05            [24] 8488 	pop	ar5
      002A93 D0 06            [24] 8489 	pop	ar6
                                   8490 ;	.\ecen4350_lcd_v4.c:1858: print16Hex(address);		// print 16-bit address from stored memory
      002A95 8D 82            [24] 8491 	mov	dpl,r5
      002A97 8E 83            [24] 8492 	mov	dph,r6
      002A99 C0 06            [24] 8493 	push	ar6
      002A9B C0 05            [24] 8494 	push	ar5
      002A9D 12 15 53         [24] 8495 	lcall	_print16Hex
                                   8496 ;	.\ecen4350_lcd_v4.c:1861: setCursor(0, 110);
      002AA0 75 6B 6E         [24] 8497 	mov	_setCursor_PARM_2,#0x6e
      002AA3 75 6C 00         [24] 8498 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AA6 90 00 00         [24] 8499 	mov	dptr,#0x0000
      002AA9 12 05 51         [24] 8500 	lcall	_setCursor
                                   8501 ;	.\ecen4350_lcd_v4.c:1862: setColorDefault();
      002AAC 12 16 2F         [24] 8502 	lcall	_setColorDefault
                                   8503 ;	.\ecen4350_lcd_v4.c:1863: LCD_string_write("\n ");
      002AAF 90 60 C3         [24] 8504 	mov	dptr,#___str_67
      002AB2 75 F0 80         [24] 8505 	mov	b,#0x80
      002AB5 12 10 6B         [24] 8506 	lcall	_LCD_string_write
                                   8507 ;	.\ecen4350_lcd_v4.c:1864: setColorHighlight2();
      002AB8 12 16 51         [24] 8508 	lcall	_setColorHighlight2
                                   8509 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8510 ;	assignBit
      002ABB C2 B5            [12] 8511 	clr	_P3_5
                                   8512 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002ABD 85 5F 82         [24] 8513 	mov	dpl,_edit_d_65536_628
      002AC0 85 60 83         [24] 8514 	mov	dph,(_edit_d_65536_628 + 1)
      002AC3 E0               [24] 8515 	movx	a,@dptr
      002AC4 FA               [12] 8516 	mov	r2,a
                                   8517 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8518 ;	assignBit
      002AC5 D2 B5            [12] 8519 	setb	_P3_5
                                   8520 ;	.\ecen4350_lcd_v4.c:1865: print8Hex(ramRead8(d));
      002AC7 8A 82            [24] 8521 	mov	dpl,r2
      002AC9 12 15 3C         [24] 8522 	lcall	_print8Hex
                                   8523 ;	.\ecen4350_lcd_v4.c:1868: setCursor(0, 160);
      002ACC 75 6B A0         [24] 8524 	mov	_setCursor_PARM_2,#0xa0
      002ACF 75 6C 00         [24] 8525 	mov	(_setCursor_PARM_2 + 1),#0x00
      002AD2 90 00 00         [24] 8526 	mov	dptr,#0x0000
      002AD5 12 05 51         [24] 8527 	lcall	_setCursor
                                   8528 ;	.\ecen4350_lcd_v4.c:1869: setColorSelect();
      002AD8 12 16 3A         [24] 8529 	lcall	_setColorSelect
                                   8530 ;	.\ecen4350_lcd_v4.c:1870: LCD_string_write(" Enter New Value:\n ");
      002ADB 90 60 C6         [24] 8531 	mov	dptr,#___str_68
      002ADE 75 F0 80         [24] 8532 	mov	b,#0x80
      002AE1 12 10 6B         [24] 8533 	lcall	_LCD_string_write
                                   8534 ;	.\ecen4350_lcd_v4.c:1871: setColorHighlight1();
      002AE4 12 16 45         [24] 8535 	lcall	_setColorHighlight1
                                   8536 ;	.\ecen4350_lcd_v4.c:1872: selection = keyDetect();
      002AE7 12 11 89         [24] 8537 	lcall	_keyDetect
      002AEA AA 82            [24] 8538 	mov	r2,dpl
      002AEC 78 71            [12] 8539 	mov	r0,#_selection
      002AEE A6 02            [24] 8540 	mov	@r0,ar2
                                   8541 ;	.\ecen4350_lcd_v4.c:1873: write(selection);
      002AF0 8A 82            [24] 8542 	mov	dpl,r2
      002AF2 12 10 05         [24] 8543 	lcall	_write
                                   8544 ;	.\ecen4350_lcd_v4.c:1874: selection = ASCIItoHex(selection);
      002AF5 78 71            [12] 8545 	mov	r0,#_selection
      002AF7 86 82            [24] 8546 	mov	dpl,@r0
      002AF9 12 13 F7         [24] 8547 	lcall	_ASCIItoHex
      002AFC AA 82            [24] 8548 	mov	r2,dpl
      002AFE 78 71            [12] 8549 	mov	r0,#_selection
      002B00 A6 02            [24] 8550 	mov	@r0,ar2
                                   8551 ;	.\ecen4350_lcd_v4.c:1875: value |= selection * 16;
      002B02 EA               [12] 8552 	mov	a,r2
      002B03 C4               [12] 8553 	swap	a
      002B04 54 F0            [12] 8554 	anl	a,#0xf0
      002B06 FA               [12] 8555 	mov	r2,a
                                   8556 ;	.\ecen4350_lcd_v4.c:1876: selection = keyDetect();
      002B07 C0 02            [24] 8557 	push	ar2
      002B09 12 11 89         [24] 8558 	lcall	_keyDetect
      002B0C AF 82            [24] 8559 	mov	r7,dpl
      002B0E 78 71            [12] 8560 	mov	r0,#_selection
      002B10 A6 07            [24] 8561 	mov	@r0,ar7
                                   8562 ;	.\ecen4350_lcd_v4.c:1877: write(selection);
      002B12 8F 82            [24] 8563 	mov	dpl,r7
      002B14 12 10 05         [24] 8564 	lcall	_write
                                   8565 ;	.\ecen4350_lcd_v4.c:1878: selection = ASCIItoHex(selection);
      002B17 78 71            [12] 8566 	mov	r0,#_selection
      002B19 86 82            [24] 8567 	mov	dpl,@r0
      002B1B 12 13 F7         [24] 8568 	lcall	_ASCIItoHex
      002B1E AF 82            [24] 8569 	mov	r7,dpl
      002B20 D0 02            [24] 8570 	pop	ar2
      002B22 D0 05            [24] 8571 	pop	ar5
      002B24 D0 06            [24] 8572 	pop	ar6
      002B26 78 71            [12] 8573 	mov	r0,#_selection
      002B28 A6 07            [24] 8574 	mov	@r0,ar7
                                   8575 ;	.\ecen4350_lcd_v4.c:1879: value |= selection;
      002B2A EA               [12] 8576 	mov	a,r2
      002B2B 42 07            [12] 8577 	orl	ar7,a
                                   8578 ;	.\ecen4350_lcd_v4.c:1882: setColorDefault();
      002B2D C0 07            [24] 8579 	push	ar7
      002B2F C0 06            [24] 8580 	push	ar6
      002B31 C0 05            [24] 8581 	push	ar5
      002B33 12 16 2F         [24] 8582 	lcall	_setColorDefault
                                   8583 ;	.\ecen4350_lcd_v4.c:1883: setCursor(0, 160);
      002B36 75 6B A0         [24] 8584 	mov	_setCursor_PARM_2,#0xa0
      002B39 75 6C 00         [24] 8585 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B3C 90 00 00         [24] 8586 	mov	dptr,#0x0000
      002B3F 12 05 51         [24] 8587 	lcall	_setCursor
                                   8588 ;	.\ecen4350_lcd_v4.c:1884: LCD_string_write(" Enter New Value:\n ");
      002B42 90 60 C6         [24] 8589 	mov	dptr,#___str_68
      002B45 75 F0 80         [24] 8590 	mov	b,#0x80
      002B48 12 10 6B         [24] 8591 	lcall	_LCD_string_write
                                   8592 ;	.\ecen4350_lcd_v4.c:1885: setColorHighlight2();
      002B4B 12 16 51         [24] 8593 	lcall	_setColorHighlight2
      002B4E D0 05            [24] 8594 	pop	ar5
      002B50 D0 06            [24] 8595 	pop	ar6
      002B52 D0 07            [24] 8596 	pop	ar7
                                   8597 ;	.\ecen4350_lcd_v4.c:1886: print8Hex(value);
      002B54 8F 82            [24] 8598 	mov	dpl,r7
      002B56 C0 07            [24] 8599 	push	ar7
      002B58 C0 06            [24] 8600 	push	ar6
      002B5A C0 05            [24] 8601 	push	ar5
      002B5C 12 15 3C         [24] 8602 	lcall	_print8Hex
      002B5F D0 05            [24] 8603 	pop	ar5
      002B61 D0 06            [24] 8604 	pop	ar6
      002B63 D0 07            [24] 8605 	pop	ar7
                                   8606 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8607 ;	assignBit
      002B65 C2 B5            [12] 8608 	clr	_P3_5
                                   8609 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      002B67 85 5F 82         [24] 8610 	mov	dpl,_edit_d_65536_628
      002B6A 85 60 83         [24] 8611 	mov	dph,(_edit_d_65536_628 + 1)
      002B6D EF               [12] 8612 	mov	a,r7
      002B6E F0               [24] 8613 	movx	@dptr,a
                                   8614 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8615 ;	assignBit
      002B6F D2 B5            [12] 8616 	setb	_P3_5
                                   8617 ;	.\ecen4350_lcd_v4.c:1891: setCursor(0, 210);
      002B71 75 6B D2         [24] 8618 	mov	_setCursor_PARM_2,#0xd2
      002B74 75 6C 00         [24] 8619 	mov	(_setCursor_PARM_2 + 1),#0x00
      002B77 90 00 00         [24] 8620 	mov	dptr,#0x0000
      002B7A C0 06            [24] 8621 	push	ar6
      002B7C C0 05            [24] 8622 	push	ar5
      002B7E 12 05 51         [24] 8623 	lcall	_setCursor
                                   8624 ;	.\ecen4350_lcd_v4.c:1892: setColorSelect();
      002B81 12 16 3A         [24] 8625 	lcall	_setColorSelect
                                   8626 ;	.\ecen4350_lcd_v4.c:1893: LCD_string_write(" Choose Next Action:\n");
      002B84 90 60 7C         [24] 8627 	mov	dptr,#___str_64
      002B87 75 F0 80         [24] 8628 	mov	b,#0x80
      002B8A 12 10 6B         [24] 8629 	lcall	_LCD_string_write
                                   8630 ;	.\ecen4350_lcd_v4.c:1894: setColorWhite();
      002B8D 12 16 7F         [24] 8631 	lcall	_setColorWhite
                                   8632 ;	.\ecen4350_lcd_v4.c:1895: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002B90 90 60 92         [24] 8633 	mov	dptr,#___str_65
      002B93 75 F0 80         [24] 8634 	mov	b,#0x80
      002B96 12 10 6B         [24] 8635 	lcall	_LCD_string_write
                                   8636 ;	.\ecen4350_lcd_v4.c:1896: LCD_string_write("  <0> Exit");
      002B99 90 60 B8         [24] 8637 	mov	dptr,#___str_66
      002B9C 75 F0 80         [24] 8638 	mov	b,#0x80
      002B9F 12 10 6B         [24] 8639 	lcall	_LCD_string_write
      002BA2 D0 05            [24] 8640 	pop	ar5
      002BA4 D0 06            [24] 8641 	pop	ar6
      002BA6                       8642 00102$:
                                   8643 ;	.\ecen4350_lcd_v4.c:1898: if (selection == '2') {			/* Highlight choice and gray out others*/
      002BA6 78 71            [12] 8644 	mov	r0,#_selection
      002BA8 B6 32 02         [24] 8645 	cjne	@r0,#0x32,00154$
      002BAB 80 03            [24] 8646 	sjmp	00155$
      002BAD                       8647 00154$:
      002BAD 02 2D F2         [24] 8648 	ljmp	00104$
      002BB0                       8649 00155$:
                                   8650 ;	.\ecen4350_lcd_v4.c:1899: invalid = 0;
      002BB0 78 81            [12] 8651 	mov	r0,#_edit_invalid_65536_628
      002BB2 76 00            [12] 8652 	mov	@r0,#0x00
                                   8653 ;	.\ecen4350_lcd_v4.c:1901: setCursor(0, 210);
      002BB4 75 6B D2         [24] 8654 	mov	_setCursor_PARM_2,#0xd2
      002BB7 75 6C 00         [24] 8655 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BBA 90 00 00         [24] 8656 	mov	dptr,#0x0000
      002BBD 12 05 51         [24] 8657 	lcall	_setCursor
                                   8658 ;	.\ecen4350_lcd_v4.c:1902: setColorDefault();
      002BC0 12 16 2F         [24] 8659 	lcall	_setColorDefault
                                   8660 ;	.\ecen4350_lcd_v4.c:1903: LCD_string_write(" Choose Next Action:\n  ");
      002BC3 90 61 34         [24] 8661 	mov	dptr,#___str_73
      002BC6 75 F0 80         [24] 8662 	mov	b,#0x80
      002BC9 12 10 6B         [24] 8663 	lcall	_LCD_string_write
                                   8664 ;	.\ecen4350_lcd_v4.c:1904: setColorGray();
      002BCC 12 16 5D         [24] 8665 	lcall	_setColorGray
                                   8666 ;	.\ecen4350_lcd_v4.c:1905: LCD_string_write("\n  ");
      002BCF 90 5F 02         [24] 8667 	mov	dptr,#___str_36
      002BD2 75 F0 80         [24] 8668 	mov	b,#0x80
      002BD5 12 10 6B         [24] 8669 	lcall	_LCD_string_write
                                   8670 ;	.\ecen4350_lcd_v4.c:1906: setColorHighlight2();
      002BD8 12 16 51         [24] 8671 	lcall	_setColorHighlight2
                                   8672 ;	.\ecen4350_lcd_v4.c:1907: LCD_string_write("<2> New Address\n");
      002BDB 90 61 4C         [24] 8673 	mov	dptr,#___str_74
      002BDE 75 F0 80         [24] 8674 	mov	b,#0x80
      002BE1 12 10 6B         [24] 8675 	lcall	_LCD_string_write
                                   8676 ;	.\ecen4350_lcd_v4.c:1908: setColorGray();
      002BE4 12 16 5D         [24] 8677 	lcall	_setColorGray
                                   8678 ;	.\ecen4350_lcd_v4.c:1909: LCD_string_write("\n               ");
      002BE7 90 61 5D         [24] 8679 	mov	dptr,#___str_75
      002BEA 75 F0 80         [24] 8680 	mov	b,#0x80
      002BED 12 10 6B         [24] 8681 	lcall	_LCD_string_write
                                   8682 ;	.\ecen4350_lcd_v4.c:1910: delay(60);
      002BF0 90 00 3C         [24] 8683 	mov	dptr,#0x003c
      002BF3 12 01 87         [24] 8684 	lcall	_delay
                                   8685 ;	.\ecen4350_lcd_v4.c:1913: setCursor(0, 80);
      002BF6 75 6B 50         [24] 8686 	mov	_setCursor_PARM_2,#0x50
      002BF9 75 6C 00         [24] 8687 	mov	(_setCursor_PARM_2 + 1),#0x00
      002BFC 90 00 00         [24] 8688 	mov	dptr,#0x0000
      002BFF 12 05 51         [24] 8689 	lcall	_setCursor
                                   8690 ;	.\ecen4350_lcd_v4.c:1914: setColorGray();
      002C02 12 16 5D         [24] 8691 	lcall	_setColorGray
                                   8692 ;	.\ecen4350_lcd_v4.c:1915: LCD_string_write(" 0x____");
      002C05 90 5E 56         [24] 8693 	mov	dptr,#___str_24
      002C08 75 F0 80         [24] 8694 	mov	b,#0x80
      002C0B 12 10 6B         [24] 8695 	lcall	_LCD_string_write
                                   8696 ;	.\ecen4350_lcd_v4.c:1916: setCursor(0, 110);
      002C0E 75 6B 6E         [24] 8697 	mov	_setCursor_PARM_2,#0x6e
      002C11 75 6C 00         [24] 8698 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C14 90 00 00         [24] 8699 	mov	dptr,#0x0000
      002C17 12 05 51         [24] 8700 	lcall	_setCursor
                                   8701 ;	.\ecen4350_lcd_v4.c:1917: LCD_string_write("\n __");
      002C1A 90 60 FE         [24] 8702 	mov	dptr,#___str_71
      002C1D 75 F0 80         [24] 8703 	mov	b,#0x80
      002C20 12 10 6B         [24] 8704 	lcall	_LCD_string_write
                                   8705 ;	.\ecen4350_lcd_v4.c:1918: setCursor(0, 160);
      002C23 75 6B A0         [24] 8706 	mov	_setCursor_PARM_2,#0xa0
      002C26 75 6C 00         [24] 8707 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C29 90 00 00         [24] 8708 	mov	dptr,#0x0000
      002C2C 12 05 51         [24] 8709 	lcall	_setCursor
                                   8710 ;	.\ecen4350_lcd_v4.c:1919: LCD_string_write("\n __");
      002C2F 90 60 FE         [24] 8711 	mov	dptr,#___str_71
      002C32 75 F0 80         [24] 8712 	mov	b,#0x80
      002C35 12 10 6B         [24] 8713 	lcall	_LCD_string_write
                                   8714 ;	.\ecen4350_lcd_v4.c:1920: setCursor(0, 210);
      002C38 75 6B D2         [24] 8715 	mov	_setCursor_PARM_2,#0xd2
      002C3B 75 6C 00         [24] 8716 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C3E 90 00 00         [24] 8717 	mov	dptr,#0x0000
      002C41 12 05 51         [24] 8718 	lcall	_setCursor
                                   8719 ;	.\ecen4350_lcd_v4.c:1921: LCD_string_write("\n  <1> Next Address\n  <2> New Address\n  <0> Exit");
      002C44 90 61 03         [24] 8720 	mov	dptr,#___str_72
      002C47 75 F0 80         [24] 8721 	mov	b,#0x80
      002C4A 12 10 6B         [24] 8722 	lcall	_LCD_string_write
                                   8723 ;	.\ecen4350_lcd_v4.c:1924: setCursor(0, 60);
      002C4D 75 6B 3C         [24] 8724 	mov	_setCursor_PARM_2,#0x3c
      002C50 75 6C 00         [24] 8725 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C53 90 00 00         [24] 8726 	mov	dptr,#0x0000
      002C56 12 05 51         [24] 8727 	lcall	_setCursor
                                   8728 ;	.\ecen4350_lcd_v4.c:1925: setColorSelect();
      002C59 12 16 3A         [24] 8729 	lcall	_setColorSelect
                                   8730 ;	.\ecen4350_lcd_v4.c:1926: LCD_string_write(" Edit Address");
      002C5C 90 61 6E         [24] 8731 	mov	dptr,#___str_76
      002C5F 75 F0 80         [24] 8732 	mov	b,#0x80
      002C62 12 10 6B         [24] 8733 	lcall	_LCD_string_write
                                   8734 ;	.\ecen4350_lcd_v4.c:1927: setCursor(0, 80);
      002C65 75 6B 50         [24] 8735 	mov	_setCursor_PARM_2,#0x50
      002C68 75 6C 00         [24] 8736 	mov	(_setCursor_PARM_2 + 1),#0x00
      002C6B 90 00 00         [24] 8737 	mov	dptr,#0x0000
      002C6E 12 05 51         [24] 8738 	lcall	_setCursor
                                   8739 ;	.\ecen4350_lcd_v4.c:1928: LCD_string_write(" ");
      002C71 90 5E B8         [24] 8740 	mov	dptr,#___str_30
      002C74 75 F0 80         [24] 8741 	mov	b,#0x80
      002C77 12 10 6B         [24] 8742 	lcall	_LCD_string_write
                                   8743 ;	.\ecen4350_lcd_v4.c:1929: setColorHighlight1();
      002C7A 12 16 45         [24] 8744 	lcall	_setColorHighlight1
                                   8745 ;	.\ecen4350_lcd_v4.c:1930: LCD_string_write("0x");
      002C7D 90 5D 8D         [24] 8746 	mov	dptr,#___str_2
      002C80 75 F0 80         [24] 8747 	mov	b,#0x80
      002C83 12 10 6B         [24] 8748 	lcall	_LCD_string_write
                                   8749 ;	.\ecen4350_lcd_v4.c:1931: address = inputAddress();		// input 16-bit address and store in memory
      002C86 12 16 A0         [24] 8750 	lcall	_inputAddress
      002C89 AD 82            [24] 8751 	mov	r5,dpl
      002C8B AE 83            [24] 8752 	mov	r6,dph
                                   8753 ;	.\ecen4350_lcd_v4.c:1932: d = (unsigned char __xdata*)address;
      002C8D 8D 03            [24] 8754 	mov	ar3,r5
      002C8F 8E 07            [24] 8755 	mov	ar7,r6
                                   8756 ;	.\ecen4350_lcd_v4.c:1935: setColorDefault();
      002C91 C0 07            [24] 8757 	push	ar7
      002C93 C0 06            [24] 8758 	push	ar6
      002C95 C0 05            [24] 8759 	push	ar5
      002C97 C0 03            [24] 8760 	push	ar3
      002C99 12 16 2F         [24] 8761 	lcall	_setColorDefault
                                   8762 ;	.\ecen4350_lcd_v4.c:1936: setCursor(0, 60);
      002C9C 75 6B 3C         [24] 8763 	mov	_setCursor_PARM_2,#0x3c
      002C9F 75 6C 00         [24] 8764 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CA2 90 00 00         [24] 8765 	mov	dptr,#0x0000
      002CA5 12 05 51         [24] 8766 	lcall	_setCursor
                                   8767 ;	.\ecen4350_lcd_v4.c:1937: LCD_string_write(" Edit Address:");
      002CA8 90 60 41         [24] 8768 	mov	dptr,#___str_60
      002CAB 75 F0 80         [24] 8769 	mov	b,#0x80
      002CAE 12 10 6B         [24] 8770 	lcall	_LCD_string_write
                                   8771 ;	.\ecen4350_lcd_v4.c:1938: setCursor(0, 80);
      002CB1 75 6B 50         [24] 8772 	mov	_setCursor_PARM_2,#0x50
      002CB4 75 6C 00         [24] 8773 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CB7 90 00 00         [24] 8774 	mov	dptr,#0x0000
      002CBA 12 05 51         [24] 8775 	lcall	_setCursor
                                   8776 ;	.\ecen4350_lcd_v4.c:1939: LCD_string_write(" ");
      002CBD 90 5E B8         [24] 8777 	mov	dptr,#___str_30
      002CC0 75 F0 80         [24] 8778 	mov	b,#0x80
      002CC3 12 10 6B         [24] 8779 	lcall	_LCD_string_write
                                   8780 ;	.\ecen4350_lcd_v4.c:1940: setColorHighlight2();
      002CC6 12 16 51         [24] 8781 	lcall	_setColorHighlight2
                                   8782 ;	.\ecen4350_lcd_v4.c:1941: LCD_string_write("0x");
      002CC9 90 5D 8D         [24] 8783 	mov	dptr,#___str_2
      002CCC 75 F0 80         [24] 8784 	mov	b,#0x80
      002CCF 12 10 6B         [24] 8785 	lcall	_LCD_string_write
      002CD2 D0 03            [24] 8786 	pop	ar3
      002CD4 D0 05            [24] 8787 	pop	ar5
      002CD6 D0 06            [24] 8788 	pop	ar6
                                   8789 ;	.\ecen4350_lcd_v4.c:1942: print16Hex(address);		// print 16-bit address from stored memory
      002CD8 8D 82            [24] 8790 	mov	dpl,r5
      002CDA 8E 83            [24] 8791 	mov	dph,r6
      002CDC C0 06            [24] 8792 	push	ar6
      002CDE C0 05            [24] 8793 	push	ar5
      002CE0 C0 03            [24] 8794 	push	ar3
      002CE2 12 15 53         [24] 8795 	lcall	_print16Hex
                                   8796 ;	.\ecen4350_lcd_v4.c:1945: setCursor(0, 110);
      002CE5 75 6B 6E         [24] 8797 	mov	_setCursor_PARM_2,#0x6e
      002CE8 75 6C 00         [24] 8798 	mov	(_setCursor_PARM_2 + 1),#0x00
      002CEB 90 00 00         [24] 8799 	mov	dptr,#0x0000
      002CEE 12 05 51         [24] 8800 	lcall	_setCursor
                                   8801 ;	.\ecen4350_lcd_v4.c:1946: setColorDefault();
      002CF1 12 16 2F         [24] 8802 	lcall	_setColorDefault
                                   8803 ;	.\ecen4350_lcd_v4.c:1947: LCD_string_write("\n ");
      002CF4 90 60 C3         [24] 8804 	mov	dptr,#___str_67
      002CF7 75 F0 80         [24] 8805 	mov	b,#0x80
      002CFA 12 10 6B         [24] 8806 	lcall	_LCD_string_write
                                   8807 ;	.\ecen4350_lcd_v4.c:1948: setColorHighlight2();
      002CFD 12 16 51         [24] 8808 	lcall	_setColorHighlight2
      002D00 D0 03            [24] 8809 	pop	ar3
      002D02 D0 05            [24] 8810 	pop	ar5
      002D04 D0 06            [24] 8811 	pop	ar6
      002D06 D0 07            [24] 8812 	pop	ar7
                                   8813 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   8814 ;	assignBit
      002D08 C2 B5            [12] 8815 	clr	_P3_5
                                   8816 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      002D0A 8B 82            [24] 8817 	mov	dpl,r3
      002D0C 8F 83            [24] 8818 	mov	dph,r7
      002D0E E0               [24] 8819 	movx	a,@dptr
      002D0F F5 82            [12] 8820 	mov	dpl,a
                                   8821 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   8822 ;	assignBit
      002D11 D2 B5            [12] 8823 	setb	_P3_5
                                   8824 ;	.\ecen4350_lcd_v4.c:1949: print8Hex(ramRead8(d));
      002D13 C0 07            [24] 8825 	push	ar7
      002D15 C0 06            [24] 8826 	push	ar6
      002D17 C0 05            [24] 8827 	push	ar5
      002D19 C0 03            [24] 8828 	push	ar3
      002D1B 12 15 3C         [24] 8829 	lcall	_print8Hex
                                   8830 ;	.\ecen4350_lcd_v4.c:1952: setCursor(0, 160);
      002D1E 75 6B A0         [24] 8831 	mov	_setCursor_PARM_2,#0xa0
      002D21 75 6C 00         [24] 8832 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D24 90 00 00         [24] 8833 	mov	dptr,#0x0000
      002D27 12 05 51         [24] 8834 	lcall	_setCursor
                                   8835 ;	.\ecen4350_lcd_v4.c:1953: setColorSelect();
      002D2A 12 16 3A         [24] 8836 	lcall	_setColorSelect
                                   8837 ;	.\ecen4350_lcd_v4.c:1954: LCD_string_write(" Enter New Value:\n ");
      002D2D 90 60 C6         [24] 8838 	mov	dptr,#___str_68
      002D30 75 F0 80         [24] 8839 	mov	b,#0x80
      002D33 12 10 6B         [24] 8840 	lcall	_LCD_string_write
                                   8841 ;	.\ecen4350_lcd_v4.c:1955: setColorHighlight1();
      002D36 12 16 45         [24] 8842 	lcall	_setColorHighlight1
                                   8843 ;	.\ecen4350_lcd_v4.c:1956: selection = keyDetect();
      002D39 12 11 89         [24] 8844 	lcall	_keyDetect
      002D3C AA 82            [24] 8845 	mov	r2,dpl
      002D3E 78 71            [12] 8846 	mov	r0,#_selection
      002D40 A6 02            [24] 8847 	mov	@r0,ar2
                                   8848 ;	.\ecen4350_lcd_v4.c:1957: write(selection);
      002D42 8A 82            [24] 8849 	mov	dpl,r2
      002D44 12 10 05         [24] 8850 	lcall	_write
                                   8851 ;	.\ecen4350_lcd_v4.c:1958: selection = ASCIItoHex(selection);
      002D47 78 71            [12] 8852 	mov	r0,#_selection
      002D49 86 82            [24] 8853 	mov	dpl,@r0
      002D4B 12 13 F7         [24] 8854 	lcall	_ASCIItoHex
      002D4E AA 82            [24] 8855 	mov	r2,dpl
      002D50 78 71            [12] 8856 	mov	r0,#_selection
      002D52 A6 02            [24] 8857 	mov	@r0,ar2
                                   8858 ;	.\ecen4350_lcd_v4.c:1959: value |= selection * 16;
      002D54 EA               [12] 8859 	mov	a,r2
      002D55 C4               [12] 8860 	swap	a
      002D56 54 F0            [12] 8861 	anl	a,#0xf0
      002D58 FA               [12] 8862 	mov	r2,a
                                   8863 ;	.\ecen4350_lcd_v4.c:1960: selection = keyDetect();
      002D59 C0 02            [24] 8864 	push	ar2
      002D5B 12 11 89         [24] 8865 	lcall	_keyDetect
      002D5E AC 82            [24] 8866 	mov	r4,dpl
      002D60 78 71            [12] 8867 	mov	r0,#_selection
      002D62 A6 04            [24] 8868 	mov	@r0,ar4
                                   8869 ;	.\ecen4350_lcd_v4.c:1961: write(selection);
      002D64 8C 82            [24] 8870 	mov	dpl,r4
      002D66 12 10 05         [24] 8871 	lcall	_write
                                   8872 ;	.\ecen4350_lcd_v4.c:1962: selection = ASCIItoHex(selection);
      002D69 78 71            [12] 8873 	mov	r0,#_selection
      002D6B 86 82            [24] 8874 	mov	dpl,@r0
      002D6D 12 13 F7         [24] 8875 	lcall	_ASCIItoHex
      002D70 AC 82            [24] 8876 	mov	r4,dpl
      002D72 D0 02            [24] 8877 	pop	ar2
      002D74 D0 03            [24] 8878 	pop	ar3
      002D76 78 71            [12] 8879 	mov	r0,#_selection
      002D78 A6 04            [24] 8880 	mov	@r0,ar4
                                   8881 ;	.\ecen4350_lcd_v4.c:1963: value |= selection;
      002D7A EA               [12] 8882 	mov	a,r2
      002D7B 42 04            [12] 8883 	orl	ar4,a
                                   8884 ;	.\ecen4350_lcd_v4.c:1966: setColorDefault();
      002D7D C0 04            [24] 8885 	push	ar4
      002D7F C0 03            [24] 8886 	push	ar3
      002D81 12 16 2F         [24] 8887 	lcall	_setColorDefault
                                   8888 ;	.\ecen4350_lcd_v4.c:1967: setCursor(0, 160);
      002D84 75 6B A0         [24] 8889 	mov	_setCursor_PARM_2,#0xa0
      002D87 75 6C 00         [24] 8890 	mov	(_setCursor_PARM_2 + 1),#0x00
      002D8A 90 00 00         [24] 8891 	mov	dptr,#0x0000
      002D8D 12 05 51         [24] 8892 	lcall	_setCursor
                                   8893 ;	.\ecen4350_lcd_v4.c:1968: LCD_string_write(" Enter New Value:\n ");
      002D90 90 60 C6         [24] 8894 	mov	dptr,#___str_68
      002D93 75 F0 80         [24] 8895 	mov	b,#0x80
      002D96 12 10 6B         [24] 8896 	lcall	_LCD_string_write
                                   8897 ;	.\ecen4350_lcd_v4.c:1969: setColorHighlight2();
      002D99 12 16 51         [24] 8898 	lcall	_setColorHighlight2
      002D9C D0 03            [24] 8899 	pop	ar3
      002D9E D0 04            [24] 8900 	pop	ar4
                                   8901 ;	.\ecen4350_lcd_v4.c:1970: print8Hex(value);
      002DA0 8C 82            [24] 8902 	mov	dpl,r4
      002DA2 C0 04            [24] 8903 	push	ar4
      002DA4 C0 03            [24] 8904 	push	ar3
      002DA6 12 15 3C         [24] 8905 	lcall	_print8Hex
      002DA9 D0 03            [24] 8906 	pop	ar3
      002DAB D0 04            [24] 8907 	pop	ar4
      002DAD D0 05            [24] 8908 	pop	ar5
      002DAF D0 06            [24] 8909 	pop	ar6
      002DB1 D0 07            [24] 8910 	pop	ar7
                                   8911 ;	.\ecen4350_lcd_v4.c:107: IOM = 0;
                                   8912 ;	assignBit
      002DB3 C2 B5            [12] 8913 	clr	_P3_5
                                   8914 ;	.\ecen4350_lcd_v4.c:108: *map_address = d;
      002DB5 8B 82            [24] 8915 	mov	dpl,r3
      002DB7 8F 83            [24] 8916 	mov	dph,r7
      002DB9 EC               [12] 8917 	mov	a,r4
      002DBA F0               [24] 8918 	movx	@dptr,a
                                   8919 ;	.\ecen4350_lcd_v4.c:109: IOM = 1;
                                   8920 ;	assignBit
      002DBB D2 B5            [12] 8921 	setb	_P3_5
                                   8922 ;	.\ecen4350_lcd_v4.c:1975: setCursor(0, 210);
      002DBD 75 6B D2         [24] 8923 	mov	_setCursor_PARM_2,#0xd2
      002DC0 75 6C 00         [24] 8924 	mov	(_setCursor_PARM_2 + 1),#0x00
      002DC3 90 00 00         [24] 8925 	mov	dptr,#0x0000
      002DC6 C0 06            [24] 8926 	push	ar6
      002DC8 C0 05            [24] 8927 	push	ar5
      002DCA 12 05 51         [24] 8928 	lcall	_setCursor
                                   8929 ;	.\ecen4350_lcd_v4.c:1976: setColorSelect();
      002DCD 12 16 3A         [24] 8930 	lcall	_setColorSelect
                                   8931 ;	.\ecen4350_lcd_v4.c:1977: LCD_string_write(" Choose Next Action:\n");
      002DD0 90 60 7C         [24] 8932 	mov	dptr,#___str_64
      002DD3 75 F0 80         [24] 8933 	mov	b,#0x80
      002DD6 12 10 6B         [24] 8934 	lcall	_LCD_string_write
                                   8935 ;	.\ecen4350_lcd_v4.c:1978: setColorWhite();
      002DD9 12 16 7F         [24] 8936 	lcall	_setColorWhite
                                   8937 ;	.\ecen4350_lcd_v4.c:1979: LCD_string_write("  <1> Next Address\n  <2> New Address\n");
      002DDC 90 60 92         [24] 8938 	mov	dptr,#___str_65
      002DDF 75 F0 80         [24] 8939 	mov	b,#0x80
      002DE2 12 10 6B         [24] 8940 	lcall	_LCD_string_write
                                   8941 ;	.\ecen4350_lcd_v4.c:1980: LCD_string_write("  <0> Exit");
      002DE5 90 60 B8         [24] 8942 	mov	dptr,#___str_66
      002DE8 75 F0 80         [24] 8943 	mov	b,#0x80
      002DEB 12 10 6B         [24] 8944 	lcall	_LCD_string_write
      002DEE D0 05            [24] 8945 	pop	ar5
      002DF0 D0 06            [24] 8946 	pop	ar6
      002DF2                       8947 00104$:
                                   8948 ;	.\ecen4350_lcd_v4.c:1982: if (selection == '0') {			/* Highlight choice and gray out others */
      002DF2 78 71            [12] 8949 	mov	r0,#_selection
      002DF4 B6 30 52         [24] 8950 	cjne	@r0,#0x30,00106$
                                   8951 ;	.\ecen4350_lcd_v4.c:1983: exit = 0;
      002DF7 78 80            [12] 8952 	mov	r0,#_edit_exit_65536_628
      002DF9 76 00            [12] 8953 	mov	@r0,#0x00
                                   8954 ;	.\ecen4350_lcd_v4.c:1984: invalid = 0;
      002DFB 78 81            [12] 8955 	mov	r0,#_edit_invalid_65536_628
      002DFD 76 00            [12] 8956 	mov	@r0,#0x00
                                   8957 ;	.\ecen4350_lcd_v4.c:1985: setCursor(0, 210);
      002DFF 75 6B D2         [24] 8958 	mov	_setCursor_PARM_2,#0xd2
      002E02 75 6C 00         [24] 8959 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E05 90 00 00         [24] 8960 	mov	dptr,#0x0000
      002E08 C0 06            [24] 8961 	push	ar6
      002E0A C0 05            [24] 8962 	push	ar5
      002E0C 12 05 51         [24] 8963 	lcall	_setCursor
                                   8964 ;	.\ecen4350_lcd_v4.c:1986: setColorDefault();
      002E0F 12 16 2F         [24] 8965 	lcall	_setColorDefault
                                   8966 ;	.\ecen4350_lcd_v4.c:1987: LCD_string_write("\n");
      002E12 90 61 7C         [24] 8967 	mov	dptr,#___str_77
      002E15 75 F0 80         [24] 8968 	mov	b,#0x80
      002E18 12 10 6B         [24] 8969 	lcall	_LCD_string_write
                                   8970 ;	.\ecen4350_lcd_v4.c:1988: setColorGray();
      002E1B 12 16 5D         [24] 8971 	lcall	_setColorGray
                                   8972 ;	.\ecen4350_lcd_v4.c:1989: LCD_string_write("\n\n  ");
      002E1E 90 5F 33         [24] 8973 	mov	dptr,#___str_39
      002E21 75 F0 80         [24] 8974 	mov	b,#0x80
      002E24 12 10 6B         [24] 8975 	lcall	_LCD_string_write
                                   8976 ;	.\ecen4350_lcd_v4.c:1990: setColorHighlight2();
      002E27 12 16 51         [24] 8977 	lcall	_setColorHighlight2
                                   8978 ;	.\ecen4350_lcd_v4.c:1991: LCD_string_write("<0> Exit");
      002E2A 90 61 7E         [24] 8979 	mov	dptr,#___str_78
      002E2D 75 F0 80         [24] 8980 	mov	b,#0x80
      002E30 12 10 6B         [24] 8981 	lcall	_LCD_string_write
                                   8982 ;	.\ecen4350_lcd_v4.c:1992: setColorGray();
      002E33 12 16 5D         [24] 8983 	lcall	_setColorGray
                                   8984 ;	.\ecen4350_lcd_v4.c:1993: LCD_string_write("\n               ");
      002E36 90 61 5D         [24] 8985 	mov	dptr,#___str_75
      002E39 75 F0 80         [24] 8986 	mov	b,#0x80
      002E3C 12 10 6B         [24] 8987 	lcall	_LCD_string_write
                                   8988 ;	.\ecen4350_lcd_v4.c:1994: delay(60);
      002E3F 90 00 3C         [24] 8989 	mov	dptr,#0x003c
      002E42 12 01 87         [24] 8990 	lcall	_delay
      002E45 D0 05            [24] 8991 	pop	ar5
      002E47 D0 06            [24] 8992 	pop	ar6
      002E49                       8993 00106$:
                                   8994 ;	.\ecen4350_lcd_v4.c:1996: if (invalid) {
      002E49 78 81            [12] 8995 	mov	r0,#_edit_invalid_65536_628
      002E4B E6               [12] 8996 	mov	a,@r0
      002E4C 70 03            [24] 8997 	jnz	00158$
      002E4E 02 29 A7         [24] 8998 	ljmp	00109$
      002E51                       8999 00158$:
                                   9000 ;	.\ecen4350_lcd_v4.c:1997: setCursor(0, 210);
      002E51 75 6B D2         [24] 9001 	mov	_setCursor_PARM_2,#0xd2
      002E54 75 6C 00         [24] 9002 	mov	(_setCursor_PARM_2 + 1),#0x00
      002E57 90 00 00         [24] 9003 	mov	dptr,#0x0000
      002E5A C0 06            [24] 9004 	push	ar6
      002E5C C0 05            [24] 9005 	push	ar5
      002E5E 12 05 51         [24] 9006 	lcall	_setCursor
                                   9007 ;	.\ecen4350_lcd_v4.c:1998: setColorRed();
      002E61 12 16 74         [24] 9008 	lcall	_setColorRed
                                   9009 ;	.\ecen4350_lcd_v4.c:1999: LCD_string_write("\n\n\n\n Input Error ");
      002E64 90 61 87         [24] 9010 	mov	dptr,#___str_79
      002E67 75 F0 80         [24] 9011 	mov	b,#0x80
      002E6A 12 10 6B         [24] 9012 	lcall	_LCD_string_write
      002E6D D0 05            [24] 9013 	pop	ar5
      002E6F D0 06            [24] 9014 	pop	ar6
      002E71 02 29 A7         [24] 9015 	ljmp	00109$
                                   9016 ;	.\ecen4350_lcd_v4.c:2002: return;
                                   9017 ;	.\ecen4350_lcd_v4.c:2003: }
      002E74 22               [24] 9018 	ret
                                   9019 ;------------------------------------------------------------
                                   9020 ;Allocation info for local variables in function 'find'
                                   9021 ;------------------------------------------------------------
                                   9022 ;d                         Allocated to registers 
                                   9023 ;i                         Allocated with name '_find_i_262144_665'
                                   9024 ;__3932160169              Allocated to registers 
                                   9025 ;__3932160170              Allocated to registers 
                                   9026 ;map_address               Allocated to registers 
                                   9027 ;d                         Allocated to registers r4 
                                   9028 ;i                         Allocated to registers r4 r6 
                                   9029 ;__3932160172              Allocated to registers 
                                   9030 ;__3932160173              Allocated to registers 
                                   9031 ;map_address               Allocated to registers 
                                   9032 ;d                         Allocated to registers r3 
                                   9033 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   9034 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   9035 ;address                   Allocated with name '_find_address_65536_652'
                                   9036 ;destination               Allocated to registers 
                                   9037 ;blockSize                 Allocated with name '_find_blockSize_65536_652'
                                   9038 ;value                     Allocated with name '_find_value_65536_652'
                                   9039 ;scan                      Allocated with name '_find_scan_65536_652'
                                   9040 ;page                      Allocated to registers r5 
                                   9041 ;noneFound                 Allocated with name '_find_noneFound_65536_652'
                                   9042 ;invalidInput              Allocated to registers r7 
                                   9043 ;exit                      Allocated with name '_find_exit_65536_652'
                                   9044 ;------------------------------------------------------------
                                   9045 ;	.\ecen4350_lcd_v4.c:2005: void find() {
                                   9046 ;	-----------------------------------------
                                   9047 ;	 function find
                                   9048 ;	-----------------------------------------
      002E75                       9049 _find:
                                   9050 ;	.\ecen4350_lcd_v4.c:2009: __idata unsigned char blockSize = 0;
      002E75 78 84            [12] 9051 	mov	r0,#_find_blockSize_65536_652
      002E77 76 00            [12] 9052 	mov	@r0,#0x00
                                   9053 ;	.\ecen4350_lcd_v4.c:2011: __idata unsigned char scan = 0;
      002E79 78 86            [12] 9054 	mov	r0,#_find_scan_65536_652
      002E7B 76 00            [12] 9055 	mov	@r0,#0x00
                                   9056 ;	.\ecen4350_lcd_v4.c:2012: __idata unsigned char page = 0;
      002E7D 7D 00            [12] 9057 	mov	r5,#0x00
                                   9058 ;	.\ecen4350_lcd_v4.c:2013: __idata unsigned char noneFound = 1;
      002E7F 78 87            [12] 9059 	mov	r0,#_find_noneFound_65536_652
      002E81 76 01            [12] 9060 	mov	@r0,#0x01
                                   9061 ;	.\ecen4350_lcd_v4.c:2014: __idata unsigned char invalidInput = 1;
      002E83 7B 01            [12] 9062 	mov	r3,#0x01
                                   9063 ;	.\ecen4350_lcd_v4.c:2015: __idata unsigned char exit = 1;
      002E85 78 88            [12] 9064 	mov	r0,#_find_exit_65536_652
      002E87 76 01            [12] 9065 	mov	@r0,#0x01
                                   9066 ;	.\ecen4350_lcd_v4.c:2017: clearLCD();
      002E89 C0 05            [24] 9067 	push	ar5
      002E8B C0 03            [24] 9068 	push	ar3
      002E8D 12 0D EE         [24] 9069 	lcall	_clearLCD
                                   9070 ;	.\ecen4350_lcd_v4.c:2020: setTextSize(5);
      002E90 75 82 05         [24] 9071 	mov	dpl,#0x05
      002E93 12 05 6B         [24] 9072 	lcall	_setTextSize
                                   9073 ;	.\ecen4350_lcd_v4.c:2021: fillTop(GRAY);
      002E96 90 D6 BA         [24] 9074 	mov	dptr,#0xd6ba
      002E99 12 0C 21         [24] 9075 	lcall	_fillTop
                                   9076 ;	.\ecen4350_lcd_v4.c:2022: setColorMenu();
      002E9C 12 16 68         [24] 9077 	lcall	_setColorMenu
                                   9078 ;	.\ecen4350_lcd_v4.c:2023: setCursor(30, 0);
      002E9F E4               [12] 9079 	clr	a
      002EA0 F5 6B            [12] 9080 	mov	_setCursor_PARM_2,a
      002EA2 F5 6C            [12] 9081 	mov	(_setCursor_PARM_2 + 1),a
      002EA4 90 00 1E         [24] 9082 	mov	dptr,#0x001e
      002EA7 12 05 51         [24] 9083 	lcall	_setCursor
                                   9084 ;	.\ecen4350_lcd_v4.c:2024: LCD_string_write("[FIND]\n");
      002EAA 90 61 99         [24] 9085 	mov	dptr,#___str_80
      002EAD 75 F0 80         [24] 9086 	mov	b,#0x80
      002EB0 12 10 6B         [24] 9087 	lcall	_LCD_string_write
                                   9088 ;	.\ecen4350_lcd_v4.c:2025: setColorDefault();
      002EB3 12 16 2F         [24] 9089 	lcall	_setColorDefault
                                   9090 ;	.\ecen4350_lcd_v4.c:2026: setTextSize(2);
      002EB6 75 82 02         [24] 9091 	mov	dpl,#0x02
      002EB9 12 05 6B         [24] 9092 	lcall	_setTextSize
                                   9093 ;	.\ecen4350_lcd_v4.c:2027: setCursor(0, 60);
      002EBC 75 6B 3C         [24] 9094 	mov	_setCursor_PARM_2,#0x3c
      002EBF 75 6C 00         [24] 9095 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EC2 90 00 00         [24] 9096 	mov	dptr,#0x0000
      002EC5 12 05 51         [24] 9097 	lcall	_setCursor
                                   9098 ;	.\ecen4350_lcd_v4.c:2028: LCD_string_write(" Find Value:");
      002EC8 90 61 A1         [24] 9099 	mov	dptr,#___str_81
      002ECB 75 F0 80         [24] 9100 	mov	b,#0x80
      002ECE 12 10 6B         [24] 9101 	lcall	_LCD_string_write
                                   9102 ;	.\ecen4350_lcd_v4.c:2029: setCursor(0, 80);
      002ED1 75 6B 50         [24] 9103 	mov	_setCursor_PARM_2,#0x50
      002ED4 75 6C 00         [24] 9104 	mov	(_setCursor_PARM_2 + 1),#0x00
      002ED7 90 00 00         [24] 9105 	mov	dptr,#0x0000
      002EDA 12 05 51         [24] 9106 	lcall	_setCursor
                                   9107 ;	.\ecen4350_lcd_v4.c:2030: setColorGray();
      002EDD 12 16 5D         [24] 9108 	lcall	_setColorGray
                                   9109 ;	.\ecen4350_lcd_v4.c:2031: LCD_string_write(" __");
      002EE0 90 60 65         [24] 9110 	mov	dptr,#___str_62
      002EE3 75 F0 80         [24] 9111 	mov	b,#0x80
      002EE6 12 10 6B         [24] 9112 	lcall	_LCD_string_write
                                   9113 ;	.\ecen4350_lcd_v4.c:2032: setCursor(0, 110);
      002EE9 75 6B 6E         [24] 9114 	mov	_setCursor_PARM_2,#0x6e
      002EEC 75 6C 00         [24] 9115 	mov	(_setCursor_PARM_2 + 1),#0x00
      002EEF 90 00 00         [24] 9116 	mov	dptr,#0x0000
      002EF2 12 05 51         [24] 9117 	lcall	_setCursor
                                   9118 ;	.\ecen4350_lcd_v4.c:2033: setColorDefault();
      002EF5 12 16 2F         [24] 9119 	lcall	_setColorDefault
                                   9120 ;	.\ecen4350_lcd_v4.c:2034: LCD_string_write(" Search Address:");
      002EF8 90 61 AE         [24] 9121 	mov	dptr,#___str_82
      002EFB 75 F0 80         [24] 9122 	mov	b,#0x80
      002EFE 12 10 6B         [24] 9123 	lcall	_LCD_string_write
                                   9124 ;	.\ecen4350_lcd_v4.c:2035: setCursor(0, 130 );
      002F01 75 6B 82         [24] 9125 	mov	_setCursor_PARM_2,#0x82
      002F04 75 6C 00         [24] 9126 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F07 90 00 00         [24] 9127 	mov	dptr,#0x0000
      002F0A 12 05 51         [24] 9128 	lcall	_setCursor
                                   9129 ;	.\ecen4350_lcd_v4.c:2036: setColorGray();
      002F0D 12 16 5D         [24] 9130 	lcall	_setColorGray
                                   9131 ;	.\ecen4350_lcd_v4.c:2037: LCD_string_write(" 0x____");
      002F10 90 5E 56         [24] 9132 	mov	dptr,#___str_24
      002F13 75 F0 80         [24] 9133 	mov	b,#0x80
      002F16 12 10 6B         [24] 9134 	lcall	_LCD_string_write
                                   9135 ;	.\ecen4350_lcd_v4.c:2038: setCursor(0, 160);
      002F19 75 6B A0         [24] 9136 	mov	_setCursor_PARM_2,#0xa0
      002F1C 75 6C 00         [24] 9137 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F1F 90 00 00         [24] 9138 	mov	dptr,#0x0000
      002F22 12 05 51         [24] 9139 	lcall	_setCursor
                                   9140 ;	.\ecen4350_lcd_v4.c:2039: setColorDefault();
      002F25 12 16 2F         [24] 9141 	lcall	_setColorDefault
                                   9142 ;	.\ecen4350_lcd_v4.c:2040: LCD_string_write(" Input Block Size:\n");
      002F28 90 61 BF         [24] 9143 	mov	dptr,#___str_83
      002F2B 75 F0 80         [24] 9144 	mov	b,#0x80
      002F2E 12 10 6B         [24] 9145 	lcall	_LCD_string_write
                                   9146 ;	.\ecen4350_lcd_v4.c:2041: setColorGray();
      002F31 12 16 5D         [24] 9147 	lcall	_setColorGray
                                   9148 ;	.\ecen4350_lcd_v4.c:2042: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      002F34 90 61 D3         [24] 9149 	mov	dptr,#___str_84
      002F37 75 F0 80         [24] 9150 	mov	b,#0x80
      002F3A 12 10 6B         [24] 9151 	lcall	_LCD_string_write
                                   9152 ;	.\ecen4350_lcd_v4.c:2043: LCD_string_write("  <FF> (SCAN)");
      002F3D 90 61 F9         [24] 9153 	mov	dptr,#___str_85
      002F40 75 F0 80         [24] 9154 	mov	b,#0x80
      002F43 12 10 6B         [24] 9155 	lcall	_LCD_string_write
                                   9156 ;	.\ecen4350_lcd_v4.c:2045: (0, 250);
      002F46 75 6B FA         [24] 9157 	mov	_setCursor_PARM_2,#0xfa
      002F49 75 6C 00         [24] 9158 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F4C 90 00 00         [24] 9159 	mov	dptr,#0x0000
      002F4F 12 05 51         [24] 9160 	lcall	_setCursor
                                   9161 ;	.\ecen4350_lcd_v4.c:2046: setColorGray();
      002F52 12 16 5D         [24] 9162 	lcall	_setColorGray
                                   9163 ;	.\ecen4350_lcd_v4.c:2047: LCD_string_write("   __");
      002F55 90 62 07         [24] 9164 	mov	dptr,#___str_86
      002F58 75 F0 80         [24] 9165 	mov	b,#0x80
      002F5B 12 10 6B         [24] 9166 	lcall	_LCD_string_write
                                   9167 ;	.\ecen4350_lcd_v4.c:2054: setColorSelect();
      002F5E 12 16 3A         [24] 9168 	lcall	_setColorSelect
                                   9169 ;	.\ecen4350_lcd_v4.c:2055: setCursor(0, 60);
      002F61 75 6B 3C         [24] 9170 	mov	_setCursor_PARM_2,#0x3c
      002F64 75 6C 00         [24] 9171 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F67 90 00 00         [24] 9172 	mov	dptr,#0x0000
      002F6A 12 05 51         [24] 9173 	lcall	_setCursor
                                   9174 ;	.\ecen4350_lcd_v4.c:2056: LCD_string_write(" Find Value:");
      002F6D 90 61 A1         [24] 9175 	mov	dptr,#___str_81
      002F70 75 F0 80         [24] 9176 	mov	b,#0x80
      002F73 12 10 6B         [24] 9177 	lcall	_LCD_string_write
                                   9178 ;	.\ecen4350_lcd_v4.c:2057: setCursor(0, 80);
      002F76 75 6B 50         [24] 9179 	mov	_setCursor_PARM_2,#0x50
      002F79 75 6C 00         [24] 9180 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F7C 90 00 00         [24] 9181 	mov	dptr,#0x0000
      002F7F 12 05 51         [24] 9182 	lcall	_setCursor
                                   9183 ;	.\ecen4350_lcd_v4.c:2058: setColorWhite();
      002F82 12 16 7F         [24] 9184 	lcall	_setColorWhite
                                   9185 ;	.\ecen4350_lcd_v4.c:2059: setCursor(0, 80);
      002F85 75 6B 50         [24] 9186 	mov	_setCursor_PARM_2,#0x50
      002F88 75 6C 00         [24] 9187 	mov	(_setCursor_PARM_2 + 1),#0x00
      002F8B 90 00 00         [24] 9188 	mov	dptr,#0x0000
      002F8E 12 05 51         [24] 9189 	lcall	_setCursor
                                   9190 ;	.\ecen4350_lcd_v4.c:2060: LCD_string_write(" ");
      002F91 90 5E B8         [24] 9191 	mov	dptr,#___str_30
      002F94 75 F0 80         [24] 9192 	mov	b,#0x80
      002F97 12 10 6B         [24] 9193 	lcall	_LCD_string_write
                                   9194 ;	.\ecen4350_lcd_v4.c:2061: setColorHighlight1();
      002F9A 12 16 45         [24] 9195 	lcall	_setColorHighlight1
                                   9196 ;	.\ecen4350_lcd_v4.c:2062: selection = keyDetect();
      002F9D 12 11 89         [24] 9197 	lcall	_keyDetect
      002FA0 AC 82            [24] 9198 	mov	r4,dpl
      002FA2 78 71            [12] 9199 	mov	r0,#_selection
      002FA4 A6 04            [24] 9200 	mov	@r0,ar4
                                   9201 ;	.\ecen4350_lcd_v4.c:2063: write(selection);
      002FA6 8C 82            [24] 9202 	mov	dpl,r4
      002FA8 12 10 05         [24] 9203 	lcall	_write
                                   9204 ;	.\ecen4350_lcd_v4.c:2064: selection = ASCIItoHex(selection);
      002FAB 78 71            [12] 9205 	mov	r0,#_selection
      002FAD 86 82            [24] 9206 	mov	dpl,@r0
      002FAF 12 13 F7         [24] 9207 	lcall	_ASCIItoHex
      002FB2 AC 82            [24] 9208 	mov	r4,dpl
      002FB4 D0 03            [24] 9209 	pop	ar3
      002FB6 78 71            [12] 9210 	mov	r0,#_selection
      002FB8 A6 04            [24] 9211 	mov	@r0,ar4
                                   9212 ;	.\ecen4350_lcd_v4.c:2065: value |= selection * 16;
      002FBA EC               [12] 9213 	mov	a,r4
      002FBB C4               [12] 9214 	swap	a
      002FBC 54 F0            [12] 9215 	anl	a,#0xf0
      002FBE FC               [12] 9216 	mov	r4,a
                                   9217 ;	.\ecen4350_lcd_v4.c:2066: selection = keyDetect();
      002FBF C0 04            [24] 9218 	push	ar4
      002FC1 C0 03            [24] 9219 	push	ar3
      002FC3 12 11 89         [24] 9220 	lcall	_keyDetect
      002FC6 AE 82            [24] 9221 	mov	r6,dpl
      002FC8 78 71            [12] 9222 	mov	r0,#_selection
      002FCA A6 06            [24] 9223 	mov	@r0,ar6
                                   9224 ;	.\ecen4350_lcd_v4.c:2067: write(selection);
      002FCC 8E 82            [24] 9225 	mov	dpl,r6
      002FCE 12 10 05         [24] 9226 	lcall	_write
                                   9227 ;	.\ecen4350_lcd_v4.c:2068: selection = ASCIItoHex(selection);
      002FD1 78 71            [12] 9228 	mov	r0,#_selection
      002FD3 86 82            [24] 9229 	mov	dpl,@r0
      002FD5 12 13 F7         [24] 9230 	lcall	_ASCIItoHex
      002FD8 AE 82            [24] 9231 	mov	r6,dpl
      002FDA D0 03            [24] 9232 	pop	ar3
      002FDC D0 04            [24] 9233 	pop	ar4
      002FDE 78 71            [12] 9234 	mov	r0,#_selection
      002FE0 A6 06            [24] 9235 	mov	@r0,ar6
                                   9236 ;	.\ecen4350_lcd_v4.c:2069: value |= selection;
      002FE2 78 85            [12] 9237 	mov	r0,#_find_value_65536_652
      002FE4 EE               [12] 9238 	mov	a,r6
      002FE5 4C               [12] 9239 	orl	a,r4
      002FE6 F6               [12] 9240 	mov	@r0,a
                                   9241 ;	.\ecen4350_lcd_v4.c:2072: setColorDefault();
      002FE7 C0 03            [24] 9242 	push	ar3
      002FE9 12 16 2F         [24] 9243 	lcall	_setColorDefault
                                   9244 ;	.\ecen4350_lcd_v4.c:2073: setCursor(0, 60);
      002FEC 75 6B 3C         [24] 9245 	mov	_setCursor_PARM_2,#0x3c
      002FEF 75 6C 00         [24] 9246 	mov	(_setCursor_PARM_2 + 1),#0x00
      002FF2 90 00 00         [24] 9247 	mov	dptr,#0x0000
      002FF5 12 05 51         [24] 9248 	lcall	_setCursor
                                   9249 ;	.\ecen4350_lcd_v4.c:2074: LCD_string_write(" Find Value:");
      002FF8 90 61 A1         [24] 9250 	mov	dptr,#___str_81
      002FFB 75 F0 80         [24] 9251 	mov	b,#0x80
      002FFE 12 10 6B         [24] 9252 	lcall	_LCD_string_write
                                   9253 ;	.\ecen4350_lcd_v4.c:2075: setCursor(0, 80);
      003001 75 6B 50         [24] 9254 	mov	_setCursor_PARM_2,#0x50
      003004 75 6C 00         [24] 9255 	mov	(_setCursor_PARM_2 + 1),#0x00
      003007 90 00 00         [24] 9256 	mov	dptr,#0x0000
      00300A 12 05 51         [24] 9257 	lcall	_setCursor
                                   9258 ;	.\ecen4350_lcd_v4.c:2076: setColorWhite();
      00300D 12 16 7F         [24] 9259 	lcall	_setColorWhite
                                   9260 ;	.\ecen4350_lcd_v4.c:2077: LCD_string_write(" ");
      003010 90 5E B8         [24] 9261 	mov	dptr,#___str_30
      003013 75 F0 80         [24] 9262 	mov	b,#0x80
      003016 12 10 6B         [24] 9263 	lcall	_LCD_string_write
                                   9264 ;	.\ecen4350_lcd_v4.c:2078: setColorHighlight2();
      003019 12 16 51         [24] 9265 	lcall	_setColorHighlight2
                                   9266 ;	.\ecen4350_lcd_v4.c:2079: print8Hex(value);
      00301C 78 85            [12] 9267 	mov	r0,#_find_value_65536_652
      00301E 86 82            [24] 9268 	mov	dpl,@r0
      003020 12 15 3C         [24] 9269 	lcall	_print8Hex
                                   9270 ;	.\ecen4350_lcd_v4.c:2082: setColorSelect();
      003023 12 16 3A         [24] 9271 	lcall	_setColorSelect
                                   9272 ;	.\ecen4350_lcd_v4.c:2083: setCursor(0, 110);
      003026 75 6B 6E         [24] 9273 	mov	_setCursor_PARM_2,#0x6e
      003029 75 6C 00         [24] 9274 	mov	(_setCursor_PARM_2 + 1),#0x00
      00302C 90 00 00         [24] 9275 	mov	dptr,#0x0000
      00302F 12 05 51         [24] 9276 	lcall	_setCursor
                                   9277 ;	.\ecen4350_lcd_v4.c:2084: LCD_string_write(" Search Address:");
      003032 90 61 AE         [24] 9278 	mov	dptr,#___str_82
      003035 75 F0 80         [24] 9279 	mov	b,#0x80
      003038 12 10 6B         [24] 9280 	lcall	_LCD_string_write
                                   9281 ;	.\ecen4350_lcd_v4.c:2085: setCursor(0, 130);
      00303B 75 6B 82         [24] 9282 	mov	_setCursor_PARM_2,#0x82
      00303E 75 6C 00         [24] 9283 	mov	(_setCursor_PARM_2 + 1),#0x00
      003041 90 00 00         [24] 9284 	mov	dptr,#0x0000
      003044 12 05 51         [24] 9285 	lcall	_setCursor
                                   9286 ;	.\ecen4350_lcd_v4.c:2086: LCD_string_write(" ");
      003047 90 5E B8         [24] 9287 	mov	dptr,#___str_30
      00304A 75 F0 80         [24] 9288 	mov	b,#0x80
      00304D 12 10 6B         [24] 9289 	lcall	_LCD_string_write
                                   9290 ;	.\ecen4350_lcd_v4.c:2087: setColorHighlight1();
      003050 12 16 45         [24] 9291 	lcall	_setColorHighlight1
                                   9292 ;	.\ecen4350_lcd_v4.c:2088: LCD_string_write("0x");
      003053 90 5D 8D         [24] 9293 	mov	dptr,#___str_2
      003056 75 F0 80         [24] 9294 	mov	b,#0x80
      003059 12 10 6B         [24] 9295 	lcall	_LCD_string_write
                                   9296 ;	.\ecen4350_lcd_v4.c:2089: address = inputAddress();
      00305C 12 16 A0         [24] 9297 	lcall	_inputAddress
      00305F 78 82            [12] 9298 	mov	r0,#_find_address_65536_652
      003061 A6 82            [24] 9299 	mov	@r0,dpl
      003063 08               [12] 9300 	inc	r0
      003064 A6 83            [24] 9301 	mov	@r0,dph
                                   9302 ;	.\ecen4350_lcd_v4.c:2092: setColorDefault();
      003066 12 16 2F         [24] 9303 	lcall	_setColorDefault
                                   9304 ;	.\ecen4350_lcd_v4.c:2093: setCursor(0, 110);
      003069 75 6B 6E         [24] 9305 	mov	_setCursor_PARM_2,#0x6e
      00306C 75 6C 00         [24] 9306 	mov	(_setCursor_PARM_2 + 1),#0x00
      00306F 90 00 00         [24] 9307 	mov	dptr,#0x0000
      003072 12 05 51         [24] 9308 	lcall	_setCursor
                                   9309 ;	.\ecen4350_lcd_v4.c:2094: LCD_string_write(" Search Address:");
      003075 90 61 AE         [24] 9310 	mov	dptr,#___str_82
      003078 75 F0 80         [24] 9311 	mov	b,#0x80
      00307B 12 10 6B         [24] 9312 	lcall	_LCD_string_write
                                   9313 ;	.\ecen4350_lcd_v4.c:2095: setCursor(0, 130);
      00307E 75 6B 82         [24] 9314 	mov	_setCursor_PARM_2,#0x82
      003081 75 6C 00         [24] 9315 	mov	(_setCursor_PARM_2 + 1),#0x00
      003084 90 00 00         [24] 9316 	mov	dptr,#0x0000
      003087 12 05 51         [24] 9317 	lcall	_setCursor
                                   9318 ;	.\ecen4350_lcd_v4.c:2096: LCD_string_write(" ");
      00308A 90 5E B8         [24] 9319 	mov	dptr,#___str_30
      00308D 75 F0 80         [24] 9320 	mov	b,#0x80
      003090 12 10 6B         [24] 9321 	lcall	_LCD_string_write
                                   9322 ;	.\ecen4350_lcd_v4.c:2097: setColorHighlight2();
      003093 12 16 51         [24] 9323 	lcall	_setColorHighlight2
                                   9324 ;	.\ecen4350_lcd_v4.c:2098: LCD_string_write("0x");
      003096 90 5D 8D         [24] 9325 	mov	dptr,#___str_2
      003099 75 F0 80         [24] 9326 	mov	b,#0x80
      00309C 12 10 6B         [24] 9327 	lcall	_LCD_string_write
                                   9328 ;	.\ecen4350_lcd_v4.c:2099: print16Hex(address);
      00309F 78 82            [12] 9329 	mov	r0,#_find_address_65536_652
      0030A1 86 82            [24] 9330 	mov	dpl,@r0
      0030A3 08               [12] 9331 	inc	r0
      0030A4 86 83            [24] 9332 	mov	dph,@r0
      0030A6 12 15 53         [24] 9333 	lcall	_print16Hex
                                   9334 ;	.\ecen4350_lcd_v4.c:2102: setColorSelect();
      0030A9 12 16 3A         [24] 9335 	lcall	_setColorSelect
                                   9336 ;	.\ecen4350_lcd_v4.c:2103: setCursor(0, 160);
      0030AC 75 6B A0         [24] 9337 	mov	_setCursor_PARM_2,#0xa0
      0030AF 75 6C 00         [24] 9338 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030B2 90 00 00         [24] 9339 	mov	dptr,#0x0000
      0030B5 12 05 51         [24] 9340 	lcall	_setCursor
                                   9341 ;	.\ecen4350_lcd_v4.c:2104: LCD_string_write(" Input Block Size:\n");
      0030B8 90 61 BF         [24] 9342 	mov	dptr,#___str_83
      0030BB 75 F0 80         [24] 9343 	mov	b,#0x80
      0030BE 12 10 6B         [24] 9344 	lcall	_LCD_string_write
                                   9345 ;	.\ecen4350_lcd_v4.c:2105: setColorWhite();
      0030C1 12 16 7F         [24] 9346 	lcall	_setColorWhite
                                   9347 ;	.\ecen4350_lcd_v4.c:2106: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      0030C4 90 61 D3         [24] 9348 	mov	dptr,#___str_84
      0030C7 75 F0 80         [24] 9349 	mov	b,#0x80
      0030CA 12 10 6B         [24] 9350 	lcall	_LCD_string_write
                                   9351 ;	.\ecen4350_lcd_v4.c:2107: LCD_string_write("  <FF> (SCAN)");
      0030CD 90 61 F9         [24] 9352 	mov	dptr,#___str_85
      0030D0 75 F0 80         [24] 9353 	mov	b,#0x80
      0030D3 12 10 6B         [24] 9354 	lcall	_LCD_string_write
      0030D6 D0 03            [24] 9355 	pop	ar3
      0030D8 D0 05            [24] 9356 	pop	ar5
                                   9357 ;	.\ecen4350_lcd_v4.c:2108: while (invalidInput) {
      0030DA                       9358 00113$:
      0030DA EB               [12] 9359 	mov	a,r3
      0030DB 70 03            [24] 9360 	jnz	00539$
      0030DD 02 31 99         [24] 9361 	ljmp	00115$
      0030E0                       9362 00539$:
                                   9363 ;	.\ecen4350_lcd_v4.c:2109: setCursor(0, 250);
      0030E0 75 6B FA         [24] 9364 	mov	_setCursor_PARM_2,#0xfa
      0030E3 75 6C 00         [24] 9365 	mov	(_setCursor_PARM_2 + 1),#0x00
      0030E6 90 00 00         [24] 9366 	mov	dptr,#0x0000
      0030E9 C0 05            [24] 9367 	push	ar5
      0030EB C0 03            [24] 9368 	push	ar3
      0030ED 12 05 51         [24] 9369 	lcall	_setCursor
                                   9370 ;	.\ecen4350_lcd_v4.c:2110: setColorGray();
      0030F0 12 16 5D         [24] 9371 	lcall	_setColorGray
                                   9372 ;	.\ecen4350_lcd_v4.c:2111: LCD_string_write("   __");
      0030F3 90 62 07         [24] 9373 	mov	dptr,#___str_86
      0030F6 75 F0 80         [24] 9374 	mov	b,#0x80
      0030F9 12 10 6B         [24] 9375 	lcall	_LCD_string_write
                                   9376 ;	.\ecen4350_lcd_v4.c:2112: setCursor(0, 250);
      0030FC 75 6B FA         [24] 9377 	mov	_setCursor_PARM_2,#0xfa
      0030FF 75 6C 00         [24] 9378 	mov	(_setCursor_PARM_2 + 1),#0x00
      003102 90 00 00         [24] 9379 	mov	dptr,#0x0000
      003105 12 05 51         [24] 9380 	lcall	_setCursor
                                   9381 ;	.\ecen4350_lcd_v4.c:2113: LCD_string_write("   ");
      003108 90 62 0D         [24] 9382 	mov	dptr,#___str_87
      00310B 75 F0 80         [24] 9383 	mov	b,#0x80
      00310E 12 10 6B         [24] 9384 	lcall	_LCD_string_write
                                   9385 ;	.\ecen4350_lcd_v4.c:2114: setColorHighlight1();
      003111 12 16 45         [24] 9386 	lcall	_setColorHighlight1
                                   9387 ;	.\ecen4350_lcd_v4.c:2115: blockSize = inputBlockSize();
      003114 12 17 50         [24] 9388 	lcall	_inputBlockSize
      003117 78 84            [12] 9389 	mov	r0,#_find_blockSize_65536_652
      003119 A6 82            [24] 9390 	mov	@r0,dpl
      00311B D0 03            [24] 9391 	pop	ar3
      00311D D0 05            [24] 9392 	pop	ar5
                                   9393 ;	.\ecen4350_lcd_v4.c:2116: if (blockSize == 0x01) {
      00311F 78 84            [12] 9394 	mov	r0,#_find_blockSize_65536_652
      003121 B6 01 18         [24] 9395 	cjne	@r0,#0x01,00111$
                                   9396 ;	.\ecen4350_lcd_v4.c:2117: invalidInput = 0;
      003124 7B 00            [12] 9397 	mov	r3,#0x00
                                   9398 ;	.\ecen4350_lcd_v4.c:2118: setColorDefault();
      003126 C0 05            [24] 9399 	push	ar5
      003128 C0 03            [24] 9400 	push	ar3
      00312A 12 16 2F         [24] 9401 	lcall	_setColorDefault
                                   9402 ;	.\ecen4350_lcd_v4.c:2119: LCD_string_write("\n                ");
      00312D 90 62 11         [24] 9403 	mov	dptr,#___str_88
      003130 75 F0 80         [24] 9404 	mov	b,#0x80
      003133 12 10 6B         [24] 9405 	lcall	_LCD_string_write
      003136 D0 03            [24] 9406 	pop	ar3
      003138 D0 05            [24] 9407 	pop	ar5
      00313A 80 9E            [24] 9408 	sjmp	00113$
      00313C                       9409 00111$:
                                   9410 ;	.\ecen4350_lcd_v4.c:2120: } else if (blockSize == 0x02) {
      00313C 78 84            [12] 9411 	mov	r0,#_find_blockSize_65536_652
      00313E B6 02 19         [24] 9412 	cjne	@r0,#0x02,00108$
                                   9413 ;	.\ecen4350_lcd_v4.c:2121: invalidInput = 0;
      003141 7B 00            [12] 9414 	mov	r3,#0x00
                                   9415 ;	.\ecen4350_lcd_v4.c:2122: setColorDefault();
      003143 C0 05            [24] 9416 	push	ar5
      003145 C0 03            [24] 9417 	push	ar3
      003147 12 16 2F         [24] 9418 	lcall	_setColorDefault
                                   9419 ;	.\ecen4350_lcd_v4.c:2123: LCD_string_write("\n                ");
      00314A 90 62 11         [24] 9420 	mov	dptr,#___str_88
      00314D 75 F0 80         [24] 9421 	mov	b,#0x80
      003150 12 10 6B         [24] 9422 	lcall	_LCD_string_write
      003153 D0 03            [24] 9423 	pop	ar3
      003155 D0 05            [24] 9424 	pop	ar5
      003157 02 30 DA         [24] 9425 	ljmp	00113$
      00315A                       9426 00108$:
                                   9427 ;	.\ecen4350_lcd_v4.c:2124: } else if (blockSize == 0x04) {
      00315A 78 84            [12] 9428 	mov	r0,#_find_blockSize_65536_652
      00315C B6 04 19         [24] 9429 	cjne	@r0,#0x04,00105$
                                   9430 ;	.\ecen4350_lcd_v4.c:2125: invalidInput = 0;
      00315F 7B 00            [12] 9431 	mov	r3,#0x00
                                   9432 ;	.\ecen4350_lcd_v4.c:2126: setColorDefault();
      003161 C0 05            [24] 9433 	push	ar5
      003163 C0 03            [24] 9434 	push	ar3
      003165 12 16 2F         [24] 9435 	lcall	_setColorDefault
                                   9436 ;	.\ecen4350_lcd_v4.c:2127: LCD_string_write("\n                ");
      003168 90 62 11         [24] 9437 	mov	dptr,#___str_88
      00316B 75 F0 80         [24] 9438 	mov	b,#0x80
      00316E 12 10 6B         [24] 9439 	lcall	_LCD_string_write
      003171 D0 03            [24] 9440 	pop	ar3
      003173 D0 05            [24] 9441 	pop	ar5
      003175 02 30 DA         [24] 9442 	ljmp	00113$
      003178                       9443 00105$:
                                   9444 ;	.\ecen4350_lcd_v4.c:2128: } else if (blockSize == 0xFF) {
      003178 78 84            [12] 9445 	mov	r0,#_find_blockSize_65536_652
      00317A B6 FF 05         [24] 9446 	cjne	@r0,#0xff,00102$
                                   9447 ;	.\ecen4350_lcd_v4.c:2129: invalidInput = 0;
      00317D 7B 00            [12] 9448 	mov	r3,#0x00
      00317F 02 30 DA         [24] 9449 	ljmp	00113$
      003182                       9450 00102$:
                                   9451 ;	.\ecen4350_lcd_v4.c:2132: setColorRed();
      003182 C0 05            [24] 9452 	push	ar5
      003184 C0 03            [24] 9453 	push	ar3
      003186 12 16 74         [24] 9454 	lcall	_setColorRed
                                   9455 ;	.\ecen4350_lcd_v4.c:2133: LCD_string_write("\n Try again");
      003189 90 62 23         [24] 9456 	mov	dptr,#___str_89
      00318C 75 F0 80         [24] 9457 	mov	b,#0x80
      00318F 12 10 6B         [24] 9458 	lcall	_LCD_string_write
      003192 D0 03            [24] 9459 	pop	ar3
      003194 D0 05            [24] 9460 	pop	ar5
      003196 02 30 DA         [24] 9461 	ljmp	00113$
      003199                       9462 00115$:
                                   9463 ;	.\ecen4350_lcd_v4.c:2138: setCursor(0, 160);
      003199 75 6B A0         [24] 9464 	mov	_setCursor_PARM_2,#0xa0
      00319C 75 6C 00         [24] 9465 	mov	(_setCursor_PARM_2 + 1),#0x00
      00319F 90 00 00         [24] 9466 	mov	dptr,#0x0000
      0031A2 C0 05            [24] 9467 	push	ar5
      0031A4 12 05 51         [24] 9468 	lcall	_setCursor
                                   9469 ;	.\ecen4350_lcd_v4.c:2139: setColorDefault();
      0031A7 12 16 2F         [24] 9470 	lcall	_setColorDefault
                                   9471 ;	.\ecen4350_lcd_v4.c:2140: LCD_string_write(" Input Block Size:\n");
      0031AA 90 61 BF         [24] 9472 	mov	dptr,#___str_83
      0031AD 75 F0 80         [24] 9473 	mov	b,#0x80
      0031B0 12 10 6B         [24] 9474 	lcall	_LCD_string_write
      0031B3 D0 05            [24] 9475 	pop	ar5
                                   9476 ;	.\ecen4350_lcd_v4.c:2141: if (blockSize == 0x01){
      0031B5 78 84            [12] 9477 	mov	r0,#_find_blockSize_65536_652
      0031B7 B6 01 74         [24] 9478 	cjne	@r0,#0x01,00125$
                                   9479 ;	.\ecen4350_lcd_v4.c:2142: LCD_string_write("  ");
      0031BA 90 5E D1         [24] 9480 	mov	dptr,#___str_33
      0031BD 75 F0 80         [24] 9481 	mov	b,#0x80
      0031C0 C0 05            [24] 9482 	push	ar5
      0031C2 12 10 6B         [24] 9483 	lcall	_LCD_string_write
                                   9484 ;	.\ecen4350_lcd_v4.c:2143: setColorHighlight2();
      0031C5 12 16 51         [24] 9485 	lcall	_setColorHighlight2
                                   9486 ;	.\ecen4350_lcd_v4.c:2144: LCD_string_write("<01> BYTE\n");
      0031C8 90 62 2F         [24] 9487 	mov	dptr,#___str_90
      0031CB 75 F0 80         [24] 9488 	mov	b,#0x80
      0031CE 12 10 6B         [24] 9489 	lcall	_LCD_string_write
                                   9490 ;	.\ecen4350_lcd_v4.c:2145: setColorGray();
      0031D1 12 16 5D         [24] 9491 	lcall	_setColorGray
                                   9492 ;	.\ecen4350_lcd_v4.c:2146: LCD_string_write("  <02> WORD\n");
      0031D4 90 62 3A         [24] 9493 	mov	dptr,#___str_91
      0031D7 75 F0 80         [24] 9494 	mov	b,#0x80
      0031DA 12 10 6B         [24] 9495 	lcall	_LCD_string_write
                                   9496 ;	.\ecen4350_lcd_v4.c:2147: LCD_string_write("  <04> DWORD\n");
      0031DD 90 62 47         [24] 9497 	mov	dptr,#___str_92
      0031E0 75 F0 80         [24] 9498 	mov	b,#0x80
      0031E3 12 10 6B         [24] 9499 	lcall	_LCD_string_write
                                   9500 ;	.\ecen4350_lcd_v4.c:2148: LCD_string_write("  <FF> (SCAN)");
      0031E6 90 61 F9         [24] 9501 	mov	dptr,#___str_85
      0031E9 75 F0 80         [24] 9502 	mov	b,#0x80
      0031EC 12 10 6B         [24] 9503 	lcall	_LCD_string_write
                                   9504 ;	.\ecen4350_lcd_v4.c:2149: setColorDefault();
      0031EF 12 16 2F         [24] 9505 	lcall	_setColorDefault
                                   9506 ;	.\ecen4350_lcd_v4.c:2150: setCursor(0, 250);
      0031F2 75 6B FA         [24] 9507 	mov	_setCursor_PARM_2,#0xfa
      0031F5 75 6C 00         [24] 9508 	mov	(_setCursor_PARM_2 + 1),#0x00
      0031F8 90 00 00         [24] 9509 	mov	dptr,#0x0000
      0031FB 12 05 51         [24] 9510 	lcall	_setCursor
                                   9511 ;	.\ecen4350_lcd_v4.c:2151: LCD_string_write("   ");
      0031FE 90 62 0D         [24] 9512 	mov	dptr,#___str_87
      003201 75 F0 80         [24] 9513 	mov	b,#0x80
      003204 12 10 6B         [24] 9514 	lcall	_LCD_string_write
                                   9515 ;	.\ecen4350_lcd_v4.c:2152: setColorHighlight2();
      003207 12 16 51         [24] 9516 	lcall	_setColorHighlight2
                                   9517 ;	.\ecen4350_lcd_v4.c:2153: print8Hex(blockSize);
      00320A 78 84            [12] 9518 	mov	r0,#_find_blockSize_65536_652
      00320C 86 82            [24] 9519 	mov	dpl,@r0
      00320E 12 15 3C         [24] 9520 	lcall	_print8Hex
                                   9521 ;	.\ecen4350_lcd_v4.c:2154: setColorDefault();
      003211 12 16 2F         [24] 9522 	lcall	_setColorDefault
                                   9523 ;	.\ecen4350_lcd_v4.c:2155: LCD_string_write("\n Search Size Limit:");
      003214 90 62 55         [24] 9524 	mov	dptr,#___str_93
      003217 75 F0 80         [24] 9525 	mov	b,#0x80
      00321A 12 10 6B         [24] 9526 	lcall	_LCD_string_write
                                   9527 ;	.\ecen4350_lcd_v4.c:2156: setColorWhite();
      00321D 12 16 7F         [24] 9528 	lcall	_setColorWhite
                                   9529 ;	.\ecen4350_lcd_v4.c:2157: LCD_string_write("\n BYTE [8 bits]");
      003220 90 62 6A         [24] 9530 	mov	dptr,#___str_94
      003223 75 F0 80         [24] 9531 	mov	b,#0x80
      003226 12 10 6B         [24] 9532 	lcall	_LCD_string_write
      003229 D0 05            [24] 9533 	pop	ar5
      00322B 02 33 72         [24] 9534 	ljmp	00126$
      00322E                       9535 00125$:
                                   9536 ;	.\ecen4350_lcd_v4.c:2158: } else if (blockSize == 0x02) {
      00322E 78 84            [12] 9537 	mov	r0,#_find_blockSize_65536_652
      003230 B6 02 6E         [24] 9538 	cjne	@r0,#0x02,00122$
                                   9539 ;	.\ecen4350_lcd_v4.c:2159: setColorGray();
      003233 C0 05            [24] 9540 	push	ar5
      003235 12 16 5D         [24] 9541 	lcall	_setColorGray
                                   9542 ;	.\ecen4350_lcd_v4.c:2160: LCD_string_write("  <01> BYTE\n  ");
      003238 90 62 7A         [24] 9543 	mov	dptr,#___str_95
      00323B 75 F0 80         [24] 9544 	mov	b,#0x80
      00323E 12 10 6B         [24] 9545 	lcall	_LCD_string_write
                                   9546 ;	.\ecen4350_lcd_v4.c:2161: setColorHighlight2();
      003241 12 16 51         [24] 9547 	lcall	_setColorHighlight2
                                   9548 ;	.\ecen4350_lcd_v4.c:2162: LCD_string_write("<02> WORD\n");
      003244 90 62 89         [24] 9549 	mov	dptr,#___str_96
      003247 75 F0 80         [24] 9550 	mov	b,#0x80
      00324A 12 10 6B         [24] 9551 	lcall	_LCD_string_write
                                   9552 ;	.\ecen4350_lcd_v4.c:2163: setColorGray();
      00324D 12 16 5D         [24] 9553 	lcall	_setColorGray
                                   9554 ;	.\ecen4350_lcd_v4.c:2164: LCD_string_write("  <04> DWORD\n");
      003250 90 62 47         [24] 9555 	mov	dptr,#___str_92
      003253 75 F0 80         [24] 9556 	mov	b,#0x80
      003256 12 10 6B         [24] 9557 	lcall	_LCD_string_write
                                   9558 ;	.\ecen4350_lcd_v4.c:2165: LCD_string_write("  <FF> (SCAN)");
      003259 90 61 F9         [24] 9559 	mov	dptr,#___str_85
      00325C 75 F0 80         [24] 9560 	mov	b,#0x80
      00325F 12 10 6B         [24] 9561 	lcall	_LCD_string_write
                                   9562 ;	.\ecen4350_lcd_v4.c:2166: setColorDefault();
      003262 12 16 2F         [24] 9563 	lcall	_setColorDefault
                                   9564 ;	.\ecen4350_lcd_v4.c:2167: setCursor(0, 250);
      003265 75 6B FA         [24] 9565 	mov	_setCursor_PARM_2,#0xfa
      003268 75 6C 00         [24] 9566 	mov	(_setCursor_PARM_2 + 1),#0x00
      00326B 90 00 00         [24] 9567 	mov	dptr,#0x0000
      00326E 12 05 51         [24] 9568 	lcall	_setCursor
                                   9569 ;	.\ecen4350_lcd_v4.c:2168: LCD_string_write("   ");
      003271 90 62 0D         [24] 9570 	mov	dptr,#___str_87
      003274 75 F0 80         [24] 9571 	mov	b,#0x80
      003277 12 10 6B         [24] 9572 	lcall	_LCD_string_write
                                   9573 ;	.\ecen4350_lcd_v4.c:2169: setColorHighlight2();
      00327A 12 16 51         [24] 9574 	lcall	_setColorHighlight2
                                   9575 ;	.\ecen4350_lcd_v4.c:2170: print8Hex(blockSize);
      00327D 78 84            [12] 9576 	mov	r0,#_find_blockSize_65536_652
      00327F 86 82            [24] 9577 	mov	dpl,@r0
      003281 12 15 3C         [24] 9578 	lcall	_print8Hex
                                   9579 ;	.\ecen4350_lcd_v4.c:2171: setColorDefault();
      003284 12 16 2F         [24] 9580 	lcall	_setColorDefault
                                   9581 ;	.\ecen4350_lcd_v4.c:2172: LCD_string_write("\n Search Size Limit:");
      003287 90 62 55         [24] 9582 	mov	dptr,#___str_93
      00328A 75 F0 80         [24] 9583 	mov	b,#0x80
      00328D 12 10 6B         [24] 9584 	lcall	_LCD_string_write
                                   9585 ;	.\ecen4350_lcd_v4.c:2173: setColorWhite();
      003290 12 16 7F         [24] 9586 	lcall	_setColorWhite
                                   9587 ;	.\ecen4350_lcd_v4.c:2174: LCD_string_write("\n WORD [16 bits]");
      003293 90 62 94         [24] 9588 	mov	dptr,#___str_97
      003296 75 F0 80         [24] 9589 	mov	b,#0x80
      003299 12 10 6B         [24] 9590 	lcall	_LCD_string_write
      00329C D0 05            [24] 9591 	pop	ar5
      00329E 02 33 72         [24] 9592 	ljmp	00126$
      0032A1                       9593 00122$:
                                   9594 ;	.\ecen4350_lcd_v4.c:2175: } else if (blockSize == 0x04) {
      0032A1 78 84            [12] 9595 	mov	r0,#_find_blockSize_65536_652
      0032A3 B6 04 64         [24] 9596 	cjne	@r0,#0x04,00119$
                                   9597 ;	.\ecen4350_lcd_v4.c:2176: setColorGray();
      0032A6 C0 05            [24] 9598 	push	ar5
      0032A8 12 16 5D         [24] 9599 	lcall	_setColorGray
                                   9600 ;	.\ecen4350_lcd_v4.c:2177: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      0032AB 90 62 A5         [24] 9601 	mov	dptr,#___str_98
      0032AE 75 F0 80         [24] 9602 	mov	b,#0x80
      0032B1 12 10 6B         [24] 9603 	lcall	_LCD_string_write
                                   9604 ;	.\ecen4350_lcd_v4.c:2178: setColorHighlight2();
      0032B4 12 16 51         [24] 9605 	lcall	_setColorHighlight2
                                   9606 ;	.\ecen4350_lcd_v4.c:2179: LCD_string_write("<04> DWORD\n");
      0032B7 90 62 C0         [24] 9607 	mov	dptr,#___str_99
      0032BA 75 F0 80         [24] 9608 	mov	b,#0x80
      0032BD 12 10 6B         [24] 9609 	lcall	_LCD_string_write
                                   9610 ;	.\ecen4350_lcd_v4.c:2180: setColorGray();
      0032C0 12 16 5D         [24] 9611 	lcall	_setColorGray
                                   9612 ;	.\ecen4350_lcd_v4.c:2181: LCD_string_write("  <FF> (SCAN)");
      0032C3 90 61 F9         [24] 9613 	mov	dptr,#___str_85
      0032C6 75 F0 80         [24] 9614 	mov	b,#0x80
      0032C9 12 10 6B         [24] 9615 	lcall	_LCD_string_write
                                   9616 ;	.\ecen4350_lcd_v4.c:2182: setColorDefault();
      0032CC 12 16 2F         [24] 9617 	lcall	_setColorDefault
                                   9618 ;	.\ecen4350_lcd_v4.c:2183: setCursor(0, 250);
      0032CF 75 6B FA         [24] 9619 	mov	_setCursor_PARM_2,#0xfa
      0032D2 75 6C 00         [24] 9620 	mov	(_setCursor_PARM_2 + 1),#0x00
      0032D5 90 00 00         [24] 9621 	mov	dptr,#0x0000
      0032D8 12 05 51         [24] 9622 	lcall	_setCursor
                                   9623 ;	.\ecen4350_lcd_v4.c:2184: LCD_string_write("   ");
      0032DB 90 62 0D         [24] 9624 	mov	dptr,#___str_87
      0032DE 75 F0 80         [24] 9625 	mov	b,#0x80
      0032E1 12 10 6B         [24] 9626 	lcall	_LCD_string_write
                                   9627 ;	.\ecen4350_lcd_v4.c:2185: setColorHighlight2();
      0032E4 12 16 51         [24] 9628 	lcall	_setColorHighlight2
                                   9629 ;	.\ecen4350_lcd_v4.c:2186: print8Hex(blockSize);
      0032E7 78 84            [12] 9630 	mov	r0,#_find_blockSize_65536_652
      0032E9 86 82            [24] 9631 	mov	dpl,@r0
      0032EB 12 15 3C         [24] 9632 	lcall	_print8Hex
                                   9633 ;	.\ecen4350_lcd_v4.c:2187: setColorDefault();
      0032EE 12 16 2F         [24] 9634 	lcall	_setColorDefault
                                   9635 ;	.\ecen4350_lcd_v4.c:2188: LCD_string_write("\n Search Size Limit:");
      0032F1 90 62 55         [24] 9636 	mov	dptr,#___str_93
      0032F4 75 F0 80         [24] 9637 	mov	b,#0x80
      0032F7 12 10 6B         [24] 9638 	lcall	_LCD_string_write
                                   9639 ;	.\ecen4350_lcd_v4.c:2189: setColorWhite();
      0032FA 12 16 7F         [24] 9640 	lcall	_setColorWhite
                                   9641 ;	.\ecen4350_lcd_v4.c:2190: LCD_string_write("\n DWORD [32 bits]");
      0032FD 90 62 CC         [24] 9642 	mov	dptr,#___str_100
      003300 75 F0 80         [24] 9643 	mov	b,#0x80
      003303 12 10 6B         [24] 9644 	lcall	_LCD_string_write
      003306 D0 05            [24] 9645 	pop	ar5
      003308 80 68            [24] 9646 	sjmp	00126$
      00330A                       9647 00119$:
                                   9648 ;	.\ecen4350_lcd_v4.c:2191: } else if (blockSize == 0xFF) {
      00330A 78 84            [12] 9649 	mov	r0,#_find_blockSize_65536_652
      00330C B6 FF 63         [24] 9650 	cjne	@r0,#0xff,00126$
                                   9651 ;	.\ecen4350_lcd_v4.c:2192: scan = 1;
      00330F 78 86            [12] 9652 	mov	r0,#_find_scan_65536_652
      003311 76 01            [12] 9653 	mov	@r0,#0x01
                                   9654 ;	.\ecen4350_lcd_v4.c:2193: setColorGray();
      003313 C0 05            [24] 9655 	push	ar5
      003315 12 16 5D         [24] 9656 	lcall	_setColorGray
                                   9657 ;	.\ecen4350_lcd_v4.c:2194: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003318 90 62 A5         [24] 9658 	mov	dptr,#___str_98
      00331B 75 F0 80         [24] 9659 	mov	b,#0x80
      00331E 12 10 6B         [24] 9660 	lcall	_LCD_string_write
                                   9661 ;	.\ecen4350_lcd_v4.c:2195: LCD_string_write("<04> DWORD\n  ");
      003321 90 62 DE         [24] 9662 	mov	dptr,#___str_101
      003324 75 F0 80         [24] 9663 	mov	b,#0x80
      003327 12 10 6B         [24] 9664 	lcall	_LCD_string_write
                                   9665 ;	.\ecen4350_lcd_v4.c:2196: setColorHighlight2();
      00332A 12 16 51         [24] 9666 	lcall	_setColorHighlight2
                                   9667 ;	.\ecen4350_lcd_v4.c:2197: LCD_string_write("<FF> (SCAN)");
      00332D 90 62 EC         [24] 9668 	mov	dptr,#___str_102
      003330 75 F0 80         [24] 9669 	mov	b,#0x80
      003333 12 10 6B         [24] 9670 	lcall	_LCD_string_write
                                   9671 ;	.\ecen4350_lcd_v4.c:2198: setColorDefault();
      003336 12 16 2F         [24] 9672 	lcall	_setColorDefault
                                   9673 ;	.\ecen4350_lcd_v4.c:2199: setCursor(0, 250);
      003339 75 6B FA         [24] 9674 	mov	_setCursor_PARM_2,#0xfa
      00333C 75 6C 00         [24] 9675 	mov	(_setCursor_PARM_2 + 1),#0x00
      00333F 90 00 00         [24] 9676 	mov	dptr,#0x0000
      003342 12 05 51         [24] 9677 	lcall	_setCursor
                                   9678 ;	.\ecen4350_lcd_v4.c:2200: LCD_string_write("   ");
      003345 90 62 0D         [24] 9679 	mov	dptr,#___str_87
      003348 75 F0 80         [24] 9680 	mov	b,#0x80
      00334B 12 10 6B         [24] 9681 	lcall	_LCD_string_write
                                   9682 ;	.\ecen4350_lcd_v4.c:2201: setColorHighlight2();
      00334E 12 16 51         [24] 9683 	lcall	_setColorHighlight2
                                   9684 ;	.\ecen4350_lcd_v4.c:2202: print8Hex(blockSize);
      003351 78 84            [12] 9685 	mov	r0,#_find_blockSize_65536_652
      003353 86 82            [24] 9686 	mov	dpl,@r0
      003355 12 15 3C         [24] 9687 	lcall	_print8Hex
                                   9688 ;	.\ecen4350_lcd_v4.c:2203: setColorDefault();
      003358 12 16 2F         [24] 9689 	lcall	_setColorDefault
                                   9690 ;	.\ecen4350_lcd_v4.c:2204: LCD_string_write("\n Search Size Limit:");
      00335B 90 62 55         [24] 9691 	mov	dptr,#___str_93
      00335E 75 F0 80         [24] 9692 	mov	b,#0x80
      003361 12 10 6B         [24] 9693 	lcall	_LCD_string_write
                                   9694 ;	.\ecen4350_lcd_v4.c:2205: setColorWhite();
      003364 12 16 7F         [24] 9695 	lcall	_setColorWhite
                                   9696 ;	.\ecen4350_lcd_v4.c:2206: LCD_string_write("\n [256 Blocks]");
      003367 90 62 F8         [24] 9697 	mov	dptr,#___str_103
      00336A 75 F0 80         [24] 9698 	mov	b,#0x80
      00336D 12 10 6B         [24] 9699 	lcall	_LCD_string_write
      003370 D0 05            [24] 9700 	pop	ar5
      003372                       9701 00126$:
                                   9702 ;	.\ecen4350_lcd_v4.c:2210: delay(40);
      003372 90 00 28         [24] 9703 	mov	dptr,#0x0028
      003375 C0 05            [24] 9704 	push	ar5
      003377 12 01 87         [24] 9705 	lcall	_delay
                                   9706 ;	.\ecen4350_lcd_v4.c:2211: clearLCD();
      00337A 12 0D EE         [24] 9707 	lcall	_clearLCD
                                   9708 ;	.\ecen4350_lcd_v4.c:2212: fillTop(GRAY);
      00337D 90 D6 BA         [24] 9709 	mov	dptr,#0xd6ba
      003380 12 0C 21         [24] 9710 	lcall	_fillTop
                                   9711 ;	.\ecen4350_lcd_v4.c:2213: setTextSize(5);
      003383 75 82 05         [24] 9712 	mov	dpl,#0x05
      003386 12 05 6B         [24] 9713 	lcall	_setTextSize
                                   9714 ;	.\ecen4350_lcd_v4.c:2214: setColorMenu();
      003389 12 16 68         [24] 9715 	lcall	_setColorMenu
                                   9716 ;	.\ecen4350_lcd_v4.c:2215: setCursor(30,0);
      00338C E4               [12] 9717 	clr	a
      00338D F5 6B            [12] 9718 	mov	_setCursor_PARM_2,a
      00338F F5 6C            [12] 9719 	mov	(_setCursor_PARM_2 + 1),a
      003391 90 00 1E         [24] 9720 	mov	dptr,#0x001e
      003394 12 05 51         [24] 9721 	lcall	_setCursor
                                   9722 ;	.\ecen4350_lcd_v4.c:2216: LCD_string_write("[FIND]\n");
      003397 90 61 99         [24] 9723 	mov	dptr,#___str_80
      00339A 75 F0 80         [24] 9724 	mov	b,#0x80
      00339D 12 10 6B         [24] 9725 	lcall	_LCD_string_write
                                   9726 ;	.\ecen4350_lcd_v4.c:2217: setColorDefault();
      0033A0 12 16 2F         [24] 9727 	lcall	_setColorDefault
                                   9728 ;	.\ecen4350_lcd_v4.c:2218: setTextSize(2);
      0033A3 75 82 02         [24] 9729 	mov	dpl,#0x02
      0033A6 12 05 6B         [24] 9730 	lcall	_setTextSize
      0033A9 D0 05            [24] 9731 	pop	ar5
                                   9732 ;	.\ecen4350_lcd_v4.c:2224: while (exit) {
      0033AB                       9733 00205$:
      0033AB 78 88            [12] 9734 	mov	r0,#_find_exit_65536_652
      0033AD E6               [12] 9735 	mov	a,@r0
      0033AE 70 03            [24] 9736 	jnz	00556$
      0033B0 02 39 73         [24] 9737 	ljmp	00207$
      0033B3                       9738 00556$:
                                   9739 ;	.\ecen4350_lcd_v4.c:2226: if (scan) {	
      0033B3 78 86            [12] 9740 	mov	r0,#_find_scan_65536_652
      0033B5 E6               [12] 9741 	mov	a,@r0
      0033B6 70 03            [24] 9742 	jnz	00557$
      0033B8 02 34 92         [24] 9743 	ljmp	00196$
      0033BB                       9744 00557$:
                                   9745 ;	.\ecen4350_lcd_v4.c:2227: setCursor(0, 60);
      0033BB 75 6B 3C         [24] 9746 	mov	_setCursor_PARM_2,#0x3c
      0033BE 75 6C 00         [24] 9747 	mov	(_setCursor_PARM_2 + 1),#0x00
      0033C1 90 00 00         [24] 9748 	mov	dptr,#0x0000
      0033C4 C0 05            [24] 9749 	push	ar5
      0033C6 12 05 51         [24] 9750 	lcall	_setCursor
                                   9751 ;	.\ecen4350_lcd_v4.c:2228: setColorYellow();
      0033C9 12 16 95         [24] 9752 	lcall	_setColorYellow
                                   9753 ;	.\ecen4350_lcd_v4.c:2229: LCD_string_write(" [Non-Interactive]\n");
      0033CC 90 63 07         [24] 9754 	mov	dptr,#___str_104
      0033CF 75 F0 80         [24] 9755 	mov	b,#0x80
      0033D2 12 10 6B         [24] 9756 	lcall	_LCD_string_write
                                   9757 ;	.\ecen4350_lcd_v4.c:2230: setColorWhite();
      0033D5 12 16 7F         [24] 9758 	lcall	_setColorWhite
                                   9759 ;	.\ecen4350_lcd_v4.c:2231: LCD_string_write(" Search Value:\n ");
      0033D8 90 63 1B         [24] 9760 	mov	dptr,#___str_105
      0033DB 75 F0 80         [24] 9761 	mov	b,#0x80
      0033DE 12 10 6B         [24] 9762 	lcall	_LCD_string_write
                                   9763 ;	.\ecen4350_lcd_v4.c:2232: setColorDefault();
      0033E1 12 16 2F         [24] 9764 	lcall	_setColorDefault
                                   9765 ;	.\ecen4350_lcd_v4.c:2233: print8Hex(value);
      0033E4 78 85            [12] 9766 	mov	r0,#_find_value_65536_652
      0033E6 86 82            [24] 9767 	mov	dpl,@r0
      0033E8 12 15 3C         [24] 9768 	lcall	_print8Hex
      0033EB D0 05            [24] 9769 	pop	ar5
                                   9770 ;	.\ecen4350_lcd_v4.c:2234: for(unsigned int i = 0; i < blockSize; i++) {
      0033ED 8D 03            [24] 9771 	mov	ar3,r5
      0033EF E4               [12] 9772 	clr	a
      0033F0 F5 61            [12] 9773 	mov	_find_i_262144_665,a
      0033F2 F5 62            [12] 9774 	mov	(_find_i_262144_665 + 1),a
      0033F4                       9775 00211$:
      0033F4 78 84            [12] 9776 	mov	r0,#_find_blockSize_65536_652
      0033F6 86 02            [24] 9777 	mov	ar2,@r0
      0033F8 7E 00            [12] 9778 	mov	r6,#0x00
      0033FA C3               [12] 9779 	clr	c
      0033FB E5 61            [12] 9780 	mov	a,_find_i_262144_665
      0033FD 9A               [12] 9781 	subb	a,r2
      0033FE E5 62            [12] 9782 	mov	a,(_find_i_262144_665 + 1)
      003400 9E               [12] 9783 	subb	a,r6
      003401 40 03            [24] 9784 	jc	00558$
      003403 02 34 89         [24] 9785 	ljmp	00271$
      003406                       9786 00558$:
                                   9787 ;	.\ecen4350_lcd_v4.c:2235: d = (unsigned char __xdata*)(i+address);
      003406 78 82            [12] 9788 	mov	r0,#_find_address_65536_652
      003408 E6               [12] 9789 	mov	a,@r0
      003409 25 61            [12] 9790 	add	a,_find_i_262144_665
      00340B FC               [12] 9791 	mov	r4,a
      00340C 08               [12] 9792 	inc	r0
      00340D E6               [12] 9793 	mov	a,@r0
      00340E 35 62            [12] 9794 	addc	a,(_find_i_262144_665 + 1)
      003410 FE               [12] 9795 	mov	r6,a
                                   9796 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   9797 ;	assignBit
      003411 C2 B5            [12] 9798 	clr	_P3_5
                                   9799 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003413 8C 82            [24] 9800 	mov	dpl,r4
      003415 8E 83            [24] 9801 	mov	dph,r6
      003417 E0               [24] 9802 	movx	a,@dptr
      003418 FC               [12] 9803 	mov	r4,a
                                   9804 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   9805 ;	assignBit
      003419 D2 B5            [12] 9806 	setb	_P3_5
                                   9807 ;	.\ecen4350_lcd_v4.c:2236: if(value == ramRead8(d)){
      00341B 78 85            [12] 9808 	mov	r0,#_find_value_65536_652
      00341D E6               [12] 9809 	mov	a,@r0
      00341E B5 04 5D         [24] 9810 	cjne	a,ar4,00212$
                                   9811 ;	.\ecen4350_lcd_v4.c:2237: noneFound = 0;
      003421 78 87            [12] 9812 	mov	r0,#_find_noneFound_65536_652
      003423 76 00            [12] 9813 	mov	@r0,#0x00
                                   9814 ;	.\ecen4350_lcd_v4.c:2239: if (page == 0) {		
      003425 EB               [12] 9815 	mov	a,r3
      003426 70 34            [24] 9816 	jnz	00128$
                                   9817 ;	.\ecen4350_lcd_v4.c:2240: setColorWhite();
      003428 C0 03            [24] 9818 	push	ar3
      00342A 12 16 7F         [24] 9819 	lcall	_setColorWhite
                                   9820 ;	.\ecen4350_lcd_v4.c:2241: setCursor(0, 120);
      00342D 75 6B 78         [24] 9821 	mov	_setCursor_PARM_2,#0x78
      003430 75 6C 00         [24] 9822 	mov	(_setCursor_PARM_2 + 1),#0x00
      003433 90 00 00         [24] 9823 	mov	dptr,#0x0000
      003436 12 05 51         [24] 9824 	lcall	_setCursor
                                   9825 ;	.\ecen4350_lcd_v4.c:2242: LCD_string_write(" Found at Location:\n");
      003439 90 63 2C         [24] 9826 	mov	dptr,#___str_106
      00343C 75 F0 80         [24] 9827 	mov	b,#0x80
      00343F 12 10 6B         [24] 9828 	lcall	_LCD_string_write
                                   9829 ;	.\ecen4350_lcd_v4.c:2243: setColorDefault();
      003442 12 16 2F         [24] 9830 	lcall	_setColorDefault
                                   9831 ;	.\ecen4350_lcd_v4.c:2244: LCD_string_write(" 0x");
      003445 90 5F B2         [24] 9832 	mov	dptr,#___str_46
      003448 75 F0 80         [24] 9833 	mov	b,#0x80
      00344B 12 10 6B         [24] 9834 	lcall	_LCD_string_write
                                   9835 ;	.\ecen4350_lcd_v4.c:2245: print16Hex(i);
      00344E 85 61 82         [24] 9836 	mov	dpl,_find_i_262144_665
      003451 85 62 83         [24] 9837 	mov	dph,(_find_i_262144_665 + 1)
      003454 12 15 53         [24] 9838 	lcall	_print16Hex
      003457 D0 03            [24] 9839 	pop	ar3
                                   9840 ;	.\ecen4350_lcd_v4.c:2246: page++;
      003459 0B               [12] 9841 	inc	r3
      00345A 80 22            [24] 9842 	sjmp	00212$
      00345C                       9843 00128$:
                                   9844 ;	.\ecen4350_lcd_v4.c:2248: setCursor(0, 120);
      00345C 75 6B 78         [24] 9845 	mov	_setCursor_PARM_2,#0x78
      00345F 75 6C 00         [24] 9846 	mov	(_setCursor_PARM_2 + 1),#0x00
      003462 90 00 00         [24] 9847 	mov	dptr,#0x0000
      003465 C0 03            [24] 9848 	push	ar3
      003467 12 05 51         [24] 9849 	lcall	_setCursor
                                   9850 ;	.\ecen4350_lcd_v4.c:2249: LCD_string_write("\n 0x");
      00346A 90 63 41         [24] 9851 	mov	dptr,#___str_107
      00346D 75 F0 80         [24] 9852 	mov	b,#0x80
      003470 12 10 6B         [24] 9853 	lcall	_LCD_string_write
                                   9854 ;	.\ecen4350_lcd_v4.c:2250: print16Hex(i);
      003473 85 61 82         [24] 9855 	mov	dpl,_find_i_262144_665
      003476 85 62 83         [24] 9856 	mov	dph,(_find_i_262144_665 + 1)
      003479 12 15 53         [24] 9857 	lcall	_print16Hex
      00347C D0 03            [24] 9858 	pop	ar3
      00347E                       9859 00212$:
                                   9860 ;	.\ecen4350_lcd_v4.c:2234: for(unsigned int i = 0; i < blockSize; i++) {
      00347E 05 61            [12] 9861 	inc	_find_i_262144_665
      003480 E4               [12] 9862 	clr	a
      003481 B5 61 02         [24] 9863 	cjne	a,_find_i_262144_665,00562$
      003484 05 62            [12] 9864 	inc	(_find_i_262144_665 + 1)
      003486                       9865 00562$:
      003486 02 33 F4         [24] 9866 	ljmp	00211$
      003489                       9867 00271$:
      003489 8B 05            [24] 9868 	mov	ar5,r3
                                   9869 ;	.\ecen4350_lcd_v4.c:2254: exit = 0;
      00348B 78 88            [12] 9870 	mov	r0,#_find_exit_65536_652
      00348D 76 00            [12] 9871 	mov	@r0,#0x00
      00348F 02 38 FA         [24] 9872 	ljmp	00197$
      003492                       9873 00196$:
                                   9874 ;	.\ecen4350_lcd_v4.c:2256: setCursor(0, 60);
      003492 75 6B 3C         [24] 9875 	mov	_setCursor_PARM_2,#0x3c
      003495 75 6C 00         [24] 9876 	mov	(_setCursor_PARM_2 + 1),#0x00
      003498 90 00 00         [24] 9877 	mov	dptr,#0x0000
      00349B C0 05            [24] 9878 	push	ar5
      00349D 12 05 51         [24] 9879 	lcall	_setCursor
                                   9880 ;	.\ecen4350_lcd_v4.c:2257: setColorYellow();
      0034A0 12 16 95         [24] 9881 	lcall	_setColorYellow
                                   9882 ;	.\ecen4350_lcd_v4.c:2258: LCD_string_write(" [Interactive]\n");
      0034A3 90 63 46         [24] 9883 	mov	dptr,#___str_108
      0034A6 75 F0 80         [24] 9884 	mov	b,#0x80
      0034A9 12 10 6B         [24] 9885 	lcall	_LCD_string_write
                                   9886 ;	.\ecen4350_lcd_v4.c:2259: setColorWhite();
      0034AC 12 16 7F         [24] 9887 	lcall	_setColorWhite
                                   9888 ;	.\ecen4350_lcd_v4.c:2260: LCD_string_write(" Search Value:\n ");
      0034AF 90 63 1B         [24] 9889 	mov	dptr,#___str_105
      0034B2 75 F0 80         [24] 9890 	mov	b,#0x80
      0034B5 12 10 6B         [24] 9891 	lcall	_LCD_string_write
                                   9892 ;	.\ecen4350_lcd_v4.c:2261: setColorDefault();
      0034B8 12 16 2F         [24] 9893 	lcall	_setColorDefault
                                   9894 ;	.\ecen4350_lcd_v4.c:2262: print8Hex(value);
      0034BB 78 85            [12] 9895 	mov	r0,#_find_value_65536_652
      0034BD 86 82            [24] 9896 	mov	dpl,@r0
      0034BF 12 15 3C         [24] 9897 	lcall	_print8Hex
      0034C2 D0 05            [24] 9898 	pop	ar5
                                   9899 ;	.\ecen4350_lcd_v4.c:2265: for (unsigned int i = 0; i < blockSize; i++) {
      0034C4 E4               [12] 9900 	clr	a
      0034C5 F5 64            [12] 9901 	mov	_find_sloc1_1_0,a
      0034C7 F5 65            [12] 9902 	mov	(_find_sloc1_1_0 + 1),a
      0034C9                       9903 00214$:
      0034C9 78 84            [12] 9904 	mov	r0,#_find_blockSize_65536_652
      0034CB 86 02            [24] 9905 	mov	ar2,@r0
      0034CD 7B 00            [12] 9906 	mov	r3,#0x00
      0034CF C3               [12] 9907 	clr	c
      0034D0 E5 64            [12] 9908 	mov	a,_find_sloc1_1_0
      0034D2 9A               [12] 9909 	subb	a,r2
      0034D3 E5 65            [12] 9910 	mov	a,(_find_sloc1_1_0 + 1)
      0034D5 9B               [12] 9911 	subb	a,r3
      0034D6 40 03            [24] 9912 	jc	00563$
      0034D8 02 38 FA         [24] 9913 	ljmp	00197$
      0034DB                       9914 00563$:
                                   9915 ;	.\ecen4350_lcd_v4.c:2266: d = (unsigned char __xdata*)(i+address);
      0034DB 78 82            [12] 9916 	mov	r0,#_find_address_65536_652
      0034DD E6               [12] 9917 	mov	a,@r0
      0034DE 25 64            [12] 9918 	add	a,_find_sloc1_1_0
      0034E0 FA               [12] 9919 	mov	r2,a
      0034E1 08               [12] 9920 	inc	r0
      0034E2 E6               [12] 9921 	mov	a,@r0
      0034E3 35 65            [12] 9922 	addc	a,(_find_sloc1_1_0 + 1)
      0034E5 FB               [12] 9923 	mov	r3,a
      0034E6 8A 82            [24] 9924 	mov	dpl,r2
      0034E8 8B 83            [24] 9925 	mov	dph,r3
                                   9926 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                   9927 ;	assignBit
      0034EA C2 B5            [12] 9928 	clr	_P3_5
                                   9929 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      0034EC E0               [24] 9930 	movx	a,@dptr
      0034ED FB               [12] 9931 	mov	r3,a
                                   9932 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                   9933 ;	assignBit
      0034EE D2 B5            [12] 9934 	setb	_P3_5
                                   9935 ;	.\ecen4350_lcd_v4.c:2267: if(value == ramRead8(d)){
      0034F0 78 85            [12] 9936 	mov	r0,#_find_value_65536_652
      0034F2 E6               [12] 9937 	mov	a,@r0
      0034F3 B5 03 02         [24] 9938 	cjne	a,ar3,00564$
      0034F6 80 03            [24] 9939 	sjmp	00565$
      0034F8                       9940 00564$:
      0034F8 02 38 EF         [24] 9941 	ljmp	00215$
      0034FB                       9942 00565$:
                                   9943 ;	.\ecen4350_lcd_v4.c:2268: noneFound = 0;		// toggle flag
      0034FB 78 87            [12] 9944 	mov	r0,#_find_noneFound_65536_652
      0034FD 76 00            [12] 9945 	mov	@r0,#0x00
                                   9946 ;	.\ecen4350_lcd_v4.c:2269: setCursor(0, 120);
      0034FF 75 6B 78         [24] 9947 	mov	_setCursor_PARM_2,#0x78
      003502 75 6C 00         [24] 9948 	mov	(_setCursor_PARM_2 + 1),#0x00
      003505 90 00 00         [24] 9949 	mov	dptr,#0x0000
      003508 C0 05            [24] 9950 	push	ar5
      00350A 12 05 51         [24] 9951 	lcall	_setCursor
                                   9952 ;	.\ecen4350_lcd_v4.c:2270: setColorWhite();
      00350D 12 16 7F         [24] 9953 	lcall	_setColorWhite
                                   9954 ;	.\ecen4350_lcd_v4.c:2271: LCD_string_write(" Found at Location \n");
      003510 90 63 56         [24] 9955 	mov	dptr,#___str_109
      003513 75 F0 80         [24] 9956 	mov	b,#0x80
      003516 12 10 6B         [24] 9957 	lcall	_LCD_string_write
                                   9958 ;	.\ecen4350_lcd_v4.c:2272: setColorDefault();
      003519 12 16 2F         [24] 9959 	lcall	_setColorDefault
                                   9960 ;	.\ecen4350_lcd_v4.c:2273: LCD_string_write(" 0x");
      00351C 90 5F B2         [24] 9961 	mov	dptr,#___str_46
      00351F 75 F0 80         [24] 9962 	mov	b,#0x80
      003522 12 10 6B         [24] 9963 	lcall	_LCD_string_write
      003525 D0 05            [24] 9964 	pop	ar5
                                   9965 ;	.\ecen4350_lcd_v4.c:2274: print16Hex(page+address);
      003527 8D 02            [24] 9966 	mov	ar2,r5
      003529 7B 00            [12] 9967 	mov	r3,#0x00
      00352B 78 82            [12] 9968 	mov	r0,#_find_address_65536_652
      00352D E6               [12] 9969 	mov	a,@r0
      00352E 2A               [12] 9970 	add	a,r2
      00352F F5 82            [12] 9971 	mov	dpl,a
      003531 08               [12] 9972 	inc	r0
      003532 E6               [12] 9973 	mov	a,@r0
      003533 3B               [12] 9974 	addc	a,r3
      003534 F5 83            [12] 9975 	mov	dph,a
      003536 C0 05            [24] 9976 	push	ar5
      003538 12 15 53         [24] 9977 	lcall	_print16Hex
                                   9978 ;	.\ecen4350_lcd_v4.c:2275: setCursor(50, 300);
      00353B 75 6B 2C         [24] 9979 	mov	_setCursor_PARM_2,#0x2c
      00353E 75 6C 01         [24] 9980 	mov	(_setCursor_PARM_2 + 1),#0x01
      003541 90 00 32         [24] 9981 	mov	dptr,#0x0032
      003544 12 05 51         [24] 9982 	lcall	_setCursor
                                   9983 ;	.\ecen4350_lcd_v4.c:2276: setColorGray();
      003547 12 16 5D         [24] 9984 	lcall	_setColorGray
                                   9985 ;	.\ecen4350_lcd_v4.c:2277: LCD_string_write("Page: ");
      00354A 90 63 6B         [24] 9986 	mov	dptr,#___str_110
      00354D 75 F0 80         [24] 9987 	mov	b,#0x80
      003550 12 10 6B         [24] 9988 	lcall	_LCD_string_write
                                   9989 ;	.\ecen4350_lcd_v4.c:2278: setColorHighlight2();
      003553 12 16 51         [24] 9990 	lcall	_setColorHighlight2
      003556 D0 05            [24] 9991 	pop	ar5
                                   9992 ;	.\ecen4350_lcd_v4.c:2279: print8Hex(page+1);
      003558 8D 03            [24] 9993 	mov	ar3,r5
      00355A EB               [12] 9994 	mov	a,r3
      00355B 04               [12] 9995 	inc	a
      00355C F5 82            [12] 9996 	mov	dpl,a
      00355E C0 05            [24] 9997 	push	ar5
      003560 12 15 3C         [24] 9998 	lcall	_print8Hex
      003563 D0 05            [24] 9999 	pop	ar5
                                  10000 ;	.\ecen4350_lcd_v4.c:2283: if (i == 0) {					// At beginning, page <0>
      003565 E5 64            [12]10001 	mov	a,_find_sloc1_1_0
      003567 45 65            [12]10002 	orl	a,(_find_sloc1_1_0 + 1)
      003569 60 03            [24]10003 	jz	00566$
      00356B 02 36 9A         [24]10004 	ljmp	00190$
      00356E                      10005 00566$:
                                  10006 ;	.\ecen4350_lcd_v4.c:2284: if (i != blockSize - 1) {	// not at the end yet, no previous page
      00356E C0 05            [24]10007 	push	ar5
      003570 78 84            [12]10008 	mov	r0,#_find_blockSize_65536_652
      003572 86 02            [24]10009 	mov	ar2,@r0
      003574 7B 00            [12]10010 	mov	r3,#0x00
      003576 EA               [12]10011 	mov	a,r2
      003577 24 FF            [12]10012 	add	a,#0xff
      003579 FD               [12]10013 	mov	r5,a
      00357A EB               [12]10014 	mov	a,r3
      00357B 34 FF            [12]10015 	addc	a,#0xff
      00357D FF               [12]10016 	mov	r7,a
      00357E ED               [12]10017 	mov	a,r5
      00357F B5 64 09         [24]10018 	cjne	a,_find_sloc1_1_0,00567$
      003582 EF               [12]10019 	mov	a,r7
      003583 B5 65 05         [24]10020 	cjne	a,(_find_sloc1_1_0 + 1),00567$
      003586 D0 05            [24]10021 	pop	ar5
      003588 02 36 1B         [24]10022 	ljmp	00148$
      00358B                      10023 00567$:
                                  10024 ;	.\ecen4350_lcd_v4.c:2285: setCursor(0, 180);
      00358B 75 6B B4         [24]10025 	mov	_setCursor_PARM_2,#0xb4
      00358E 75 6C 00         [24]10026 	mov	(_setCursor_PARM_2 + 1),#0x00
      003591 90 00 00         [24]10027 	mov	dptr,#0x0000
      003594 12 05 51         [24]10028 	lcall	_setCursor
                                  10029 ;	.\ecen4350_lcd_v4.c:2286: setColorWhite();
      003597 12 16 7F         [24]10030 	lcall	_setColorWhite
                                  10031 ;	.\ecen4350_lcd_v4.c:2287: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      00359A 90 63 72         [24]10032 	mov	dptr,#___str_111
      00359D 75 F0 80         [24]10033 	mov	b,#0x80
      0035A0 12 10 6B         [24]10034 	lcall	_LCD_string_write
      0035A3 D0 05            [24]10035 	pop	ar5
                                  10036 ;	.\ecen4350_lcd_v4.c:2288: invalidInput = 1;
      0035A5 7F 01            [12]10037 	mov	r7,#0x01
                                  10038 ;	.\ecen4350_lcd_v4.c:2289: while (invalidInput) {
      0035A7 8D 63            [24]10039 	mov	_find_sloc0_1_0,r5
      0035A9                      10040 00137$:
      0035A9 EF               [12]10041 	mov	a,r7
      0035AA 70 03            [24]10042 	jnz	00568$
      0035AC 02 36 8D         [24]10043 	ljmp	00272$
      0035AF                      10044 00568$:
                                  10045 ;	.\ecen4350_lcd_v4.c:2290: selection = keyDetect();
      0035AF C0 07            [24]10046 	push	ar7
      0035B1 12 11 89         [24]10047 	lcall	_keyDetect
      0035B4 AF 82            [24]10048 	mov	r7,dpl
      0035B6 78 71            [12]10049 	mov	r0,#_selection
      0035B8 A6 07            [24]10050 	mov	@r0,ar7
                                  10051 ;	.\ecen4350_lcd_v4.c:2291: if(selection == '1'){
      0035BA BF 31 02         [24]10052 	cjne	r7,#0x31,00569$
      0035BD 80 04            [24]10053 	sjmp	00570$
      0035BF                      10054 00569$:
      0035BF D0 07            [24]10055 	pop	ar7
      0035C1 80 27            [24]10056 	sjmp	00134$
      0035C3                      10057 00570$:
      0035C3 D0 07            [24]10058 	pop	ar7
                                  10059 ;	.\ecen4350_lcd_v4.c:2292: setCursor(0, 180);
      0035C5 75 6B B4         [24]10060 	mov	_setCursor_PARM_2,#0xb4
      0035C8 75 6C 00         [24]10061 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035CB 90 00 00         [24]10062 	mov	dptr,#0x0000
      0035CE 12 05 51         [24]10063 	lcall	_setCursor
                                  10064 ;	.\ecen4350_lcd_v4.c:2293: LCD_string_write(" ");
      0035D1 90 5E B8         [24]10065 	mov	dptr,#___str_30
      0035D4 75 F0 80         [24]10066 	mov	b,#0x80
      0035D7 12 10 6B         [24]10067 	lcall	_LCD_string_write
                                  10068 ;	.\ecen4350_lcd_v4.c:2294: setColorHighlight2();
      0035DA 12 16 51         [24]10069 	lcall	_setColorHighlight2
                                  10070 ;	.\ecen4350_lcd_v4.c:2295: LCD_string_write("<1> Next");
      0035DD 90 63 95         [24]10071 	mov	dptr,#___str_112
      0035E0 75 F0 80         [24]10072 	mov	b,#0x80
      0035E3 12 10 6B         [24]10073 	lcall	_LCD_string_write
                                  10074 ;	.\ecen4350_lcd_v4.c:2296: invalidInput = 0;
      0035E6 7F 00            [12]10075 	mov	r7,#0x00
                                  10076 ;	.\ecen4350_lcd_v4.c:2297: page++;
      0035E8 05 63            [12]10077 	inc	_find_sloc0_1_0
      0035EA                      10078 00134$:
                                  10079 ;	.\ecen4350_lcd_v4.c:2298: } if(selection == '0') {
      0035EA 78 71            [12]10080 	mov	r0,#_selection
      0035EC B6 30 BA         [24]10081 	cjne	@r0,#0x30,00137$
                                  10082 ;	.\ecen4350_lcd_v4.c:2299: setColorDefault();
      0035EF 12 16 2F         [24]10083 	lcall	_setColorDefault
                                  10084 ;	.\ecen4350_lcd_v4.c:2300: setCursor(0, 180);
      0035F2 75 6B B4         [24]10085 	mov	_setCursor_PARM_2,#0xb4
      0035F5 75 6C 00         [24]10086 	mov	(_setCursor_PARM_2 + 1),#0x00
      0035F8 90 00 00         [24]10087 	mov	dptr,#0x0000
      0035FB 12 05 51         [24]10088 	lcall	_setCursor
                                  10089 ;	.\ecen4350_lcd_v4.c:2301: LCD_string_write("\n ");
      0035FE 90 60 C3         [24]10090 	mov	dptr,#___str_67
      003601 75 F0 80         [24]10091 	mov	b,#0x80
      003604 12 10 6B         [24]10092 	lcall	_LCD_string_write
                                  10093 ;	.\ecen4350_lcd_v4.c:2302: setColorHighlight2();
      003607 12 16 51         [24]10094 	lcall	_setColorHighlight2
                                  10095 ;	.\ecen4350_lcd_v4.c:2303: LCD_string_write("<0> Exit");
      00360A 90 61 7E         [24]10096 	mov	dptr,#___str_78
      00360D 75 F0 80         [24]10097 	mov	b,#0x80
      003610 12 10 6B         [24]10098 	lcall	_LCD_string_write
                                  10099 ;	.\ecen4350_lcd_v4.c:2304: exit = 0;		// set exit flag
      003613 78 88            [12]10100 	mov	r0,#_find_exit_65536_652
      003615 76 00            [12]10101 	mov	@r0,#0x00
                                  10102 ;	.\ecen4350_lcd_v4.c:2305: invalidInput = 0;
      003617 7F 00            [12]10103 	mov	r7,#0x00
      003619 80 8E            [24]10104 	sjmp	00137$
      00361B                      10105 00148$:
                                  10106 ;	.\ecen4350_lcd_v4.c:2308: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      00361B 1A               [12]10107 	dec	r2
      00361C BA FF 01         [24]10108 	cjne	r2,#0xff,00573$
      00361F 1B               [12]10109 	dec	r3
      003620                      10110 00573$:
      003620 EA               [12]10111 	mov	a,r2
      003621 B5 64 6B         [24]10112 	cjne	a,_find_sloc1_1_0,00149$
      003624 EB               [12]10113 	mov	a,r3
      003625 B5 65 67         [24]10114 	cjne	a,(_find_sloc1_1_0 + 1),00149$
                                  10115 ;	.\ecen4350_lcd_v4.c:2309: setCursor(0, 180);
      003628 75 6B B4         [24]10116 	mov	_setCursor_PARM_2,#0xb4
      00362B 75 6C 00         [24]10117 	mov	(_setCursor_PARM_2 + 1),#0x00
      00362E 90 00 00         [24]10118 	mov	dptr,#0x0000
      003631 C0 05            [24]10119 	push	ar5
      003633 12 05 51         [24]10120 	lcall	_setCursor
                                  10121 ;	.\ecen4350_lcd_v4.c:2310: setColorWhite();
      003636 12 16 7F         [24]10122 	lcall	_setColorWhite
                                  10123 ;	.\ecen4350_lcd_v4.c:2311: LCD_string_write("          \n <0> Exit\n              ");
      003639 90 63 9E         [24]10124 	mov	dptr,#___str_113
      00363C 75 F0 80         [24]10125 	mov	b,#0x80
      00363F 12 10 6B         [24]10126 	lcall	_LCD_string_write
      003642 D0 05            [24]10127 	pop	ar5
                                  10128 ;	.\ecen4350_lcd_v4.c:2312: invalidInput = 1;
      003644 7F 01            [12]10129 	mov	r7,#0x01
                                  10130 ;	.\ecen4350_lcd_v4.c:2313: while (invalidInput) {
      003646                      10131 00142$:
      003646 EF               [12]10132 	mov	a,r7
      003647 60 46            [24]10133 	jz	00149$
                                  10134 ;	.\ecen4350_lcd_v4.c:2314: selection = keyDetect();
      003649 C0 07            [24]10135 	push	ar7
      00364B C0 05            [24]10136 	push	ar5
      00364D 12 11 89         [24]10137 	lcall	_keyDetect
      003650 AB 82            [24]10138 	mov	r3,dpl
      003652 D0 05            [24]10139 	pop	ar5
      003654 D0 07            [24]10140 	pop	ar7
      003656 78 71            [12]10141 	mov	r0,#_selection
      003658 A6 03            [24]10142 	mov	@r0,ar3
                                  10143 ;	.\ecen4350_lcd_v4.c:2315: if(selection == '0') {
      00365A BB 30 E9         [24]10144 	cjne	r3,#0x30,00142$
                                  10145 ;	.\ecen4350_lcd_v4.c:2316: setColorDefault();
      00365D C0 05            [24]10146 	push	ar5
      00365F 12 16 2F         [24]10147 	lcall	_setColorDefault
                                  10148 ;	.\ecen4350_lcd_v4.c:2317: setCursor(0, 180);
      003662 75 6B B4         [24]10149 	mov	_setCursor_PARM_2,#0xb4
      003665 75 6C 00         [24]10150 	mov	(_setCursor_PARM_2 + 1),#0x00
      003668 90 00 00         [24]10151 	mov	dptr,#0x0000
      00366B 12 05 51         [24]10152 	lcall	_setCursor
                                  10153 ;	.\ecen4350_lcd_v4.c:2318: LCD_string_write("\n ");
      00366E 90 60 C3         [24]10154 	mov	dptr,#___str_67
      003671 75 F0 80         [24]10155 	mov	b,#0x80
      003674 12 10 6B         [24]10156 	lcall	_LCD_string_write
                                  10157 ;	.\ecen4350_lcd_v4.c:2319: setColorHighlight2();
      003677 12 16 51         [24]10158 	lcall	_setColorHighlight2
                                  10159 ;	.\ecen4350_lcd_v4.c:2320: LCD_string_write("<0> Exit");
      00367A 90 61 7E         [24]10160 	mov	dptr,#___str_78
      00367D 75 F0 80         [24]10161 	mov	b,#0x80
      003680 12 10 6B         [24]10162 	lcall	_LCD_string_write
      003683 D0 05            [24]10163 	pop	ar5
                                  10164 ;	.\ecen4350_lcd_v4.c:2321: exit = 0;		// set exit flag
      003685 78 88            [12]10165 	mov	r0,#_find_exit_65536_652
      003687 76 00            [12]10166 	mov	@r0,#0x00
                                  10167 ;	.\ecen4350_lcd_v4.c:2322: invalidInput = 0;
      003689 7F 00            [12]10168 	mov	r7,#0x00
      00368B 80 B9            [24]10169 	sjmp	00142$
      00368D                      10170 00272$:
      00368D AD 63            [24]10171 	mov	r5,_find_sloc0_1_0
      00368F                      10172 00149$:
                                  10173 ;	.\ecen4350_lcd_v4.c:2326: if (exit == 0) {	// check exit flag
      00368F 78 88            [12]10174 	mov	r0,#_find_exit_65536_652
      003691 E6               [12]10175 	mov	a,@r0
      003692 60 03            [24]10176 	jz	00579$
      003694 02 38 EF         [24]10177 	ljmp	00215$
      003697                      10178 00579$:
                                  10179 ;	.\ecen4350_lcd_v4.c:2327: break;			// break out of for loop iteration
      003697 02 38 FA         [24]10180 	ljmp	00197$
      00369A                      10181 00190$:
                                  10182 ;	.\ecen4350_lcd_v4.c:2332: else if (i == blockSize - 1) {		// At Page End 
      00369A C0 05            [24]10183 	push	ar5
      00369C 78 84            [12]10184 	mov	r0,#_find_blockSize_65536_652
      00369E 86 03            [24]10185 	mov	ar3,@r0
      0036A0 7F 00            [12]10186 	mov	r7,#0x00
      0036A2 EB               [12]10187 	mov	a,r3
      0036A3 24 FF            [12]10188 	add	a,#0xff
      0036A5 FA               [12]10189 	mov	r2,a
      0036A6 EF               [12]10190 	mov	a,r7
      0036A7 34 FF            [12]10191 	addc	a,#0xff
      0036A9 FD               [12]10192 	mov	r5,a
      0036AA EA               [12]10193 	mov	a,r2
      0036AB B5 64 06         [24]10194 	cjne	a,_find_sloc1_1_0,00580$
      0036AE ED               [12]10195 	mov	a,r5
      0036AF B5 65 02         [24]10196 	cjne	a,(_find_sloc1_1_0 + 1),00580$
      0036B2 80 05            [24]10197 	sjmp	00581$
      0036B4                      10198 00580$:
      0036B4 D0 05            [24]10199 	pop	ar5
      0036B6 02 37 E6         [24]10200 	ljmp	00187$
      0036B9                      10201 00581$:
      0036B9 D0 05            [24]10202 	pop	ar5
                                  10203 ;	.\ecen4350_lcd_v4.c:2333: if (i != 0) {				// not at beginning, no next page
      0036BB E5 64            [12]10204 	mov	a,_find_sloc1_1_0
      0036BD 45 65            [12]10205 	orl	a,(_find_sloc1_1_0 + 1)
      0036BF 70 03            [24]10206 	jnz	00582$
      0036C1 02 37 6F         [24]10207 	ljmp	00167$
      0036C4                      10208 00582$:
                                  10209 ;	.\ecen4350_lcd_v4.c:2334: setCursor(0, 180);
      0036C4 75 6B B4         [24]10210 	mov	_setCursor_PARM_2,#0xb4
      0036C7 75 6C 00         [24]10211 	mov	(_setCursor_PARM_2 + 1),#0x00
      0036CA 90 00 00         [24]10212 	mov	dptr,#0x0000
      0036CD C0 05            [24]10213 	push	ar5
      0036CF 12 05 51         [24]10214 	lcall	_setCursor
                                  10215 ;	.\ecen4350_lcd_v4.c:2335: setColorWhite();
      0036D2 12 16 7F         [24]10216 	lcall	_setColorWhite
                                  10217 ;	.\ecen4350_lcd_v4.c:2336: LCD_string_write("          \n <0> Exit\n <2> Previous");
      0036D5 90 63 C2         [24]10218 	mov	dptr,#___str_114
      0036D8 75 F0 80         [24]10219 	mov	b,#0x80
      0036DB 12 10 6B         [24]10220 	lcall	_LCD_string_write
      0036DE D0 05            [24]10221 	pop	ar5
                                  10222 ;	.\ecen4350_lcd_v4.c:2337: invalidInput = 1;
      0036E0 7F 01            [12]10223 	mov	r7,#0x01
                                  10224 ;	.\ecen4350_lcd_v4.c:2338: while (invalidInput) {
      0036E2 8D 63            [24]10225 	mov	_find_sloc0_1_0,r5
      0036E4                      10226 00156$:
      0036E4 EF               [12]10227 	mov	a,r7
      0036E5 70 03            [24]10228 	jnz	00583$
      0036E7 02 37 D9         [24]10229 	ljmp	00273$
      0036EA                      10230 00583$:
                                  10231 ;	.\ecen4350_lcd_v4.c:2339: selection = keyDetect();
      0036EA C0 07            [24]10232 	push	ar7
      0036EC C0 07            [24]10233 	push	ar7
      0036EE 12 11 89         [24]10234 	lcall	_keyDetect
      0036F1 AA 82            [24]10235 	mov	r2,dpl
      0036F3 D0 07            [24]10236 	pop	ar7
      0036F5 78 71            [12]10237 	mov	r0,#_selection
      0036F7 A6 02            [24]10238 	mov	@r0,ar2
                                  10239 ;	.\ecen4350_lcd_v4.c:2340: if(selection == '0'){
      0036F9 BA 30 02         [24]10240 	cjne	r2,#0x30,00584$
      0036FC 80 04            [24]10241 	sjmp	00585$
      0036FE                      10242 00584$:
      0036FE D0 07            [24]10243 	pop	ar7
      003700 80 29            [24]10244 	sjmp	00153$
      003702                      10245 00585$:
      003702 D0 07            [24]10246 	pop	ar7
                                  10247 ;	.\ecen4350_lcd_v4.c:2341: setCursor(0, 180);
      003704 75 6B B4         [24]10248 	mov	_setCursor_PARM_2,#0xb4
      003707 75 6C 00         [24]10249 	mov	(_setCursor_PARM_2 + 1),#0x00
      00370A 90 00 00         [24]10250 	mov	dptr,#0x0000
      00370D 12 05 51         [24]10251 	lcall	_setCursor
                                  10252 ;	.\ecen4350_lcd_v4.c:2342: LCD_string_write("\n ");
      003710 90 60 C3         [24]10253 	mov	dptr,#___str_67
      003713 75 F0 80         [24]10254 	mov	b,#0x80
      003716 12 10 6B         [24]10255 	lcall	_LCD_string_write
                                  10256 ;	.\ecen4350_lcd_v4.c:2343: setColorHighlight2();
      003719 12 16 51         [24]10257 	lcall	_setColorHighlight2
                                  10258 ;	.\ecen4350_lcd_v4.c:2344: LCD_string_write("<0> Exit\n");
      00371C 90 5F F8         [24]10259 	mov	dptr,#___str_54
      00371F 75 F0 80         [24]10260 	mov	b,#0x80
      003722 12 10 6B         [24]10261 	lcall	_LCD_string_write
                                  10262 ;	.\ecen4350_lcd_v4.c:2345: invalidInput = 0;
      003725 7F 00            [12]10263 	mov	r7,#0x00
                                  10264 ;	.\ecen4350_lcd_v4.c:2346: exit = 0;
      003727 78 88            [12]10265 	mov	r0,#_find_exit_65536_652
      003729 76 00            [12]10266 	mov	@r0,#0x00
      00372B                      10267 00153$:
                                  10268 ;	.\ecen4350_lcd_v4.c:2347: } if (selection == '2') {
      00372B 78 71            [12]10269 	mov	r0,#_selection
      00372D B6 32 B4         [24]10270 	cjne	@r0,#0x32,00156$
                                  10271 ;	.\ecen4350_lcd_v4.c:2348: setCursor(0, 180);
      003730 75 6B B4         [24]10272 	mov	_setCursor_PARM_2,#0xb4
      003733 75 6C 00         [24]10273 	mov	(_setCursor_PARM_2 + 1),#0x00
      003736 90 00 00         [24]10274 	mov	dptr,#0x0000
      003739 12 05 51         [24]10275 	lcall	_setCursor
                                  10276 ;	.\ecen4350_lcd_v4.c:2349: setColorWhite();
      00373C 12 16 7F         [24]10277 	lcall	_setColorWhite
                                  10278 ;	.\ecen4350_lcd_v4.c:2350: LCD_string_write("\n\n ");
      00373F 90 63 E5         [24]10279 	mov	dptr,#___str_115
      003742 75 F0 80         [24]10280 	mov	b,#0x80
      003745 12 10 6B         [24]10281 	lcall	_LCD_string_write
                                  10282 ;	.\ecen4350_lcd_v4.c:2351: setColorHighlight2();
      003748 12 16 51         [24]10283 	lcall	_setColorHighlight2
                                  10284 ;	.\ecen4350_lcd_v4.c:2352: LCD_string_write("<2> Previous");
      00374B 90 63 E9         [24]10285 	mov	dptr,#___str_116
      00374E 75 F0 80         [24]10286 	mov	b,#0x80
      003751 12 10 6B         [24]10287 	lcall	_LCD_string_write
                                  10288 ;	.\ecen4350_lcd_v4.c:2353: invalidInput = 0;
      003754 7F 00            [12]10289 	mov	r7,#0x00
                                  10290 ;	.\ecen4350_lcd_v4.c:2354: i--;			// two decrements plus next loop increment is equal to one decrement
      003756 E5 64            [12]10291 	mov	a,_find_sloc1_1_0
      003758 24 FF            [12]10292 	add	a,#0xff
      00375A FA               [12]10293 	mov	r2,a
      00375B E5 65            [12]10294 	mov	a,(_find_sloc1_1_0 + 1)
      00375D 34 FF            [12]10295 	addc	a,#0xff
      00375F FE               [12]10296 	mov	r6,a
                                  10297 ;	.\ecen4350_lcd_v4.c:2355: i--;
      003760 EA               [12]10298 	mov	a,r2
      003761 24 FF            [12]10299 	add	a,#0xff
      003763 F5 64            [12]10300 	mov	_find_sloc1_1_0,a
      003765 EE               [12]10301 	mov	a,r6
      003766 34 FF            [12]10302 	addc	a,#0xff
      003768 F5 65            [12]10303 	mov	(_find_sloc1_1_0 + 1),a
                                  10304 ;	.\ecen4350_lcd_v4.c:2356: page--;			// decrement to previous page
      00376A 15 63            [12]10305 	dec	_find_sloc0_1_0
      00376C 02 36 E4         [24]10306 	ljmp	00156$
      00376F                      10307 00167$:
                                  10308 ;	.\ecen4350_lcd_v4.c:2360: else if (i == 0){				// end at beginning, no next or previous
      00376F E5 64            [12]10309 	mov	a,_find_sloc1_1_0
      003771 45 65            [12]10310 	orl	a,(_find_sloc1_1_0 + 1)
                                  10311 ;	.\ecen4350_lcd_v4.c:2361: setCursor(0, 180);
      003773 70 66            [24]10312 	jnz	00168$
      003775 75 6B B4         [24]10313 	mov	_setCursor_PARM_2,#0xb4
      003778 F5 6C            [12]10314 	mov	(_setCursor_PARM_2 + 1),a
      00377A 90 00 00         [24]10315 	mov	dptr,#0x0000
      00377D C0 05            [24]10316 	push	ar5
      00377F 12 05 51         [24]10317 	lcall	_setCursor
                                  10318 ;	.\ecen4350_lcd_v4.c:2362: setColorWhite();
      003782 12 16 7F         [24]10319 	lcall	_setColorWhite
                                  10320 ;	.\ecen4350_lcd_v4.c:2363: LCD_string_write("          \n <0> Exit\n              ");
      003785 90 63 9E         [24]10321 	mov	dptr,#___str_113
      003788 75 F0 80         [24]10322 	mov	b,#0x80
      00378B 12 10 6B         [24]10323 	lcall	_LCD_string_write
      00378E D0 05            [24]10324 	pop	ar5
                                  10325 ;	.\ecen4350_lcd_v4.c:2364: invalidInput = 1;
      003790 7E 01            [12]10326 	mov	r6,#0x01
                                  10327 ;	.\ecen4350_lcd_v4.c:2365: while (invalidInput) {
      003792                      10328 00161$:
      003792 EE               [12]10329 	mov	a,r6
      003793 60 46            [24]10330 	jz	00168$
                                  10331 ;	.\ecen4350_lcd_v4.c:2366: selection = keyDetect();
      003795 C0 06            [24]10332 	push	ar6
      003797 C0 05            [24]10333 	push	ar5
      003799 12 11 89         [24]10334 	lcall	_keyDetect
      00379C AC 82            [24]10335 	mov	r4,dpl
      00379E D0 05            [24]10336 	pop	ar5
      0037A0 D0 06            [24]10337 	pop	ar6
      0037A2 78 71            [12]10338 	mov	r0,#_selection
      0037A4 A6 04            [24]10339 	mov	@r0,ar4
                                  10340 ;	.\ecen4350_lcd_v4.c:2367: if(selection == '0') {
      0037A6 BC 30 E9         [24]10341 	cjne	r4,#0x30,00161$
                                  10342 ;	.\ecen4350_lcd_v4.c:2368: setColorDefault();
      0037A9 C0 05            [24]10343 	push	ar5
      0037AB 12 16 2F         [24]10344 	lcall	_setColorDefault
                                  10345 ;	.\ecen4350_lcd_v4.c:2369: setCursor(0, 180);
      0037AE 75 6B B4         [24]10346 	mov	_setCursor_PARM_2,#0xb4
      0037B1 75 6C 00         [24]10347 	mov	(_setCursor_PARM_2 + 1),#0x00
      0037B4 90 00 00         [24]10348 	mov	dptr,#0x0000
      0037B7 12 05 51         [24]10349 	lcall	_setCursor
                                  10350 ;	.\ecen4350_lcd_v4.c:2370: LCD_string_write("\n ");
      0037BA 90 60 C3         [24]10351 	mov	dptr,#___str_67
      0037BD 75 F0 80         [24]10352 	mov	b,#0x80
      0037C0 12 10 6B         [24]10353 	lcall	_LCD_string_write
                                  10354 ;	.\ecen4350_lcd_v4.c:2371: setColorHighlight2();
      0037C3 12 16 51         [24]10355 	lcall	_setColorHighlight2
                                  10356 ;	.\ecen4350_lcd_v4.c:2372: LCD_string_write("<0> Exit");
      0037C6 90 61 7E         [24]10357 	mov	dptr,#___str_78
      0037C9 75 F0 80         [24]10358 	mov	b,#0x80
      0037CC 12 10 6B         [24]10359 	lcall	_LCD_string_write
      0037CF D0 05            [24]10360 	pop	ar5
                                  10361 ;	.\ecen4350_lcd_v4.c:2373: exit = 0;		// set exit flag
      0037D1 78 88            [12]10362 	mov	r0,#_find_exit_65536_652
      0037D3 76 00            [12]10363 	mov	@r0,#0x00
                                  10364 ;	.\ecen4350_lcd_v4.c:2374: invalidInput = 0;
      0037D5 7E 00            [12]10365 	mov	r6,#0x00
      0037D7 80 B9            [24]10366 	sjmp	00161$
      0037D9                      10367 00273$:
      0037D9 AD 63            [24]10368 	mov	r5,_find_sloc0_1_0
      0037DB                      10369 00168$:
                                  10370 ;	.\ecen4350_lcd_v4.c:2378: if (exit == 0) {	// check exit flag
      0037DB 78 88            [12]10371 	mov	r0,#_find_exit_65536_652
      0037DD E6               [12]10372 	mov	a,@r0
      0037DE 60 03            [24]10373 	jz	00592$
      0037E0 02 38 EF         [24]10374 	ljmp	00215$
      0037E3                      10375 00592$:
                                  10376 ;	.\ecen4350_lcd_v4.c:2379: break;			// break out of for loop iteration
      0037E3 02 38 FA         [24]10377 	ljmp	00197$
      0037E6                      10378 00187$:
                                  10379 ;	.\ecen4350_lcd_v4.c:2384: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      0037E6 1B               [12]10380 	dec	r3
      0037E7 BB FF 01         [24]10381 	cjne	r3,#0xff,00593$
      0037EA 1F               [12]10382 	dec	r7
      0037EB                      10383 00593$:
      0037EB EB               [12]10384 	mov	a,r3
      0037EC B5 64 07         [24]10385 	cjne	a,_find_sloc1_1_0,00594$
      0037EF EF               [12]10386 	mov	a,r7
      0037F0 B5 65 03         [24]10387 	cjne	a,(_find_sloc1_1_0 + 1),00594$
      0037F3 02 38 EF         [24]10388 	ljmp	00215$
      0037F6                      10389 00594$:
                                  10390 ;	.\ecen4350_lcd_v4.c:2385: if (i != 0) {
      0037F6 E5 64            [12]10391 	mov	a,_find_sloc1_1_0
      0037F8 45 65            [12]10392 	orl	a,(_find_sloc1_1_0 + 1)
      0037FA 70 03            [24]10393 	jnz	00595$
      0037FC 02 38 EA         [24]10394 	ljmp	00181$
      0037FF                      10395 00595$:
                                  10396 ;	.\ecen4350_lcd_v4.c:2386: setCursor(0, 180);
      0037FF 75 6B B4         [24]10397 	mov	_setCursor_PARM_2,#0xb4
      003802 75 6C 00         [24]10398 	mov	(_setCursor_PARM_2 + 1),#0x00
      003805 90 00 00         [24]10399 	mov	dptr,#0x0000
      003808 C0 05            [24]10400 	push	ar5
      00380A 12 05 51         [24]10401 	lcall	_setCursor
                                  10402 ;	.\ecen4350_lcd_v4.c:2387: setColorWhite();
      00380D 12 16 7F         [24]10403 	lcall	_setColorWhite
                                  10404 ;	.\ecen4350_lcd_v4.c:2388: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      003810 90 63 F6         [24]10405 	mov	dptr,#___str_117
      003813 75 F0 80         [24]10406 	mov	b,#0x80
      003816 12 10 6B         [24]10407 	lcall	_LCD_string_write
      003819 D0 05            [24]10408 	pop	ar5
                                  10409 ;	.\ecen4350_lcd_v4.c:2389: invalidInput = 1;
      00381B 7F 01            [12]10410 	mov	r7,#0x01
                                  10411 ;	.\ecen4350_lcd_v4.c:2390: while (invalidInput) {
      00381D                      10412 00177$:
      00381D EF               [12]10413 	mov	a,r7
      00381E 70 03            [24]10414 	jnz	00596$
      003820 02 38 EA         [24]10415 	ljmp	00181$
      003823                      10416 00596$:
                                  10417 ;	.\ecen4350_lcd_v4.c:2391: selection = keyDetect();
      003823 C0 07            [24]10418 	push	ar7
      003825 C0 05            [24]10419 	push	ar5
      003827 12 11 89         [24]10420 	lcall	_keyDetect
      00382A AE 82            [24]10421 	mov	r6,dpl
      00382C D0 05            [24]10422 	pop	ar5
      00382E D0 07            [24]10423 	pop	ar7
      003830 78 71            [12]10424 	mov	r0,#_selection
      003832 A6 06            [24]10425 	mov	@r0,ar6
                                  10426 ;	.\ecen4350_lcd_v4.c:2392: if (selection == '1') {
      003834 BE 31 28         [24]10427 	cjne	r6,#0x31,00172$
                                  10428 ;	.\ecen4350_lcd_v4.c:2393: setCursor(0, 180);
      003837 75 6B B4         [24]10429 	mov	_setCursor_PARM_2,#0xb4
      00383A 75 6C 00         [24]10430 	mov	(_setCursor_PARM_2 + 1),#0x00
      00383D 90 00 00         [24]10431 	mov	dptr,#0x0000
      003840 C0 05            [24]10432 	push	ar5
      003842 12 05 51         [24]10433 	lcall	_setCursor
                                  10434 ;	.\ecen4350_lcd_v4.c:2394: LCD_string_write(" ");
      003845 90 5E B8         [24]10435 	mov	dptr,#___str_30
      003848 75 F0 80         [24]10436 	mov	b,#0x80
      00384B 12 10 6B         [24]10437 	lcall	_LCD_string_write
                                  10438 ;	.\ecen4350_lcd_v4.c:2395: setColorHighlight2();
      00384E 12 16 51         [24]10439 	lcall	_setColorHighlight2
                                  10440 ;	.\ecen4350_lcd_v4.c:2396: LCD_string_write("<1> Next");
      003851 90 63 95         [24]10441 	mov	dptr,#___str_112
      003854 75 F0 80         [24]10442 	mov	b,#0x80
      003857 12 10 6B         [24]10443 	lcall	_LCD_string_write
      00385A D0 05            [24]10444 	pop	ar5
                                  10445 ;	.\ecen4350_lcd_v4.c:2397: invalidInput = 0;
      00385C 7F 00            [12]10446 	mov	r7,#0x00
                                  10447 ;	.\ecen4350_lcd_v4.c:2398: page++;
      00385E 0D               [12]10448 	inc	r5
      00385F                      10449 00172$:
                                  10450 ;	.\ecen4350_lcd_v4.c:2399: } if (selection == '2') {
      00385F 78 71            [12]10451 	mov	r0,#_selection
      003861 B6 32 3F         [24]10452 	cjne	@r0,#0x32,00174$
                                  10453 ;	.\ecen4350_lcd_v4.c:2400: setCursor(0, 180);
      003864 75 6B B4         [24]10454 	mov	_setCursor_PARM_2,#0xb4
      003867 75 6C 00         [24]10455 	mov	(_setCursor_PARM_2 + 1),#0x00
      00386A 90 00 00         [24]10456 	mov	dptr,#0x0000
      00386D C0 05            [24]10457 	push	ar5
      00386F 12 05 51         [24]10458 	lcall	_setCursor
                                  10459 ;	.\ecen4350_lcd_v4.c:2401: setColorWhite();
      003872 12 16 7F         [24]10460 	lcall	_setColorWhite
                                  10461 ;	.\ecen4350_lcd_v4.c:2402: LCD_string_write("\n\n ");
      003875 90 63 E5         [24]10462 	mov	dptr,#___str_115
      003878 75 F0 80         [24]10463 	mov	b,#0x80
      00387B 12 10 6B         [24]10464 	lcall	_LCD_string_write
                                  10465 ;	.\ecen4350_lcd_v4.c:2403: setColorHighlight2();
      00387E 12 16 51         [24]10466 	lcall	_setColorHighlight2
                                  10467 ;	.\ecen4350_lcd_v4.c:2404: LCD_string_write("<2> Previous");
      003881 90 63 E9         [24]10468 	mov	dptr,#___str_116
      003884 75 F0 80         [24]10469 	mov	b,#0x80
      003887 12 10 6B         [24]10470 	lcall	_LCD_string_write
      00388A D0 05            [24]10471 	pop	ar5
                                  10472 ;	.\ecen4350_lcd_v4.c:2405: invalidInput = 0;
      00388C 7F 00            [12]10473 	mov	r7,#0x00
                                  10474 ;	.\ecen4350_lcd_v4.c:2406: i--;
      00388E E5 64            [12]10475 	mov	a,_find_sloc1_1_0
      003890 24 FF            [12]10476 	add	a,#0xff
      003892 FC               [12]10477 	mov	r4,a
      003893 E5 65            [12]10478 	mov	a,(_find_sloc1_1_0 + 1)
      003895 34 FF            [12]10479 	addc	a,#0xff
      003897 FE               [12]10480 	mov	r6,a
                                  10481 ;	.\ecen4350_lcd_v4.c:2407: i--;		// two decrements plus next loop increment is equal to one decrement
      003898 EC               [12]10482 	mov	a,r4
      003899 24 FF            [12]10483 	add	a,#0xff
      00389B F5 64            [12]10484 	mov	_find_sloc1_1_0,a
      00389D EE               [12]10485 	mov	a,r6
      00389E 34 FF            [12]10486 	addc	a,#0xff
      0038A0 F5 65            [12]10487 	mov	(_find_sloc1_1_0 + 1),a
                                  10488 ;	.\ecen4350_lcd_v4.c:2408: page--;		// decrement to previous page
      0038A2 1D               [12]10489 	dec	r5
      0038A3                      10490 00174$:
                                  10491 ;	.\ecen4350_lcd_v4.c:2409: } if (selection == '0') {
      0038A3 78 71            [12]10492 	mov	r0,#_selection
      0038A5 B6 30 02         [24]10493 	cjne	@r0,#0x30,00601$
      0038A8 80 03            [24]10494 	sjmp	00602$
      0038AA                      10495 00601$:
      0038AA 02 38 1D         [24]10496 	ljmp	00177$
      0038AD                      10497 00602$:
                                  10498 ;	.\ecen4350_lcd_v4.c:2410: setColorWhite();
      0038AD C0 05            [24]10499 	push	ar5
      0038AF 12 16 7F         [24]10500 	lcall	_setColorWhite
                                  10501 ;	.\ecen4350_lcd_v4.c:2411: setCursor(0, 180);
      0038B2 75 6B B4         [24]10502 	mov	_setCursor_PARM_2,#0xb4
      0038B5 75 6C 00         [24]10503 	mov	(_setCursor_PARM_2 + 1),#0x00
      0038B8 90 00 00         [24]10504 	mov	dptr,#0x0000
      0038BB 12 05 51         [24]10505 	lcall	_setCursor
                                  10506 ;	.\ecen4350_lcd_v4.c:2412: LCD_string_write(" <1> Next\n ");
      0038BE 90 64 18         [24]10507 	mov	dptr,#___str_118
      0038C1 75 F0 80         [24]10508 	mov	b,#0x80
      0038C4 12 10 6B         [24]10509 	lcall	_LCD_string_write
                                  10510 ;	.\ecen4350_lcd_v4.c:2413: setColorHighlight2();
      0038C7 12 16 51         [24]10511 	lcall	_setColorHighlight2
                                  10512 ;	.\ecen4350_lcd_v4.c:2414: LCD_string_write("<0> Exit");
      0038CA 90 61 7E         [24]10513 	mov	dptr,#___str_78
      0038CD 75 F0 80         [24]10514 	mov	b,#0x80
      0038D0 12 10 6B         [24]10515 	lcall	_LCD_string_write
                                  10516 ;	.\ecen4350_lcd_v4.c:2415: setColorWhite();
      0038D3 12 16 7F         [24]10517 	lcall	_setColorWhite
                                  10518 ;	.\ecen4350_lcd_v4.c:2416: LCD_string_write("\n <2> Previous");
      0038D6 90 64 24         [24]10519 	mov	dptr,#___str_119
      0038D9 75 F0 80         [24]10520 	mov	b,#0x80
      0038DC 12 10 6B         [24]10521 	lcall	_LCD_string_write
      0038DF D0 05            [24]10522 	pop	ar5
                                  10523 ;	.\ecen4350_lcd_v4.c:2417: exit = 0;		// set exit flag
      0038E1 78 88            [12]10524 	mov	r0,#_find_exit_65536_652
      0038E3 76 00            [12]10525 	mov	@r0,#0x00
                                  10526 ;	.\ecen4350_lcd_v4.c:2418: invalidInput = 0;
      0038E5 7F 00            [12]10527 	mov	r7,#0x00
      0038E7 02 38 1D         [24]10528 	ljmp	00177$
      0038EA                      10529 00181$:
                                  10530 ;	.\ecen4350_lcd_v4.c:2422: if (exit == 0) {		// check exit flag
      0038EA 78 88            [12]10531 	mov	r0,#_find_exit_65536_652
      0038EC E6               [12]10532 	mov	a,@r0
      0038ED 60 0B            [24]10533 	jz	00197$
                                  10534 ;	.\ecen4350_lcd_v4.c:2423: break;			// break out the loop
      0038EF                      10535 00215$:
                                  10536 ;	.\ecen4350_lcd_v4.c:2265: for (unsigned int i = 0; i < blockSize; i++) {
      0038EF 05 64            [12]10537 	inc	_find_sloc1_1_0
      0038F1 E4               [12]10538 	clr	a
      0038F2 B5 64 02         [24]10539 	cjne	a,_find_sloc1_1_0,00604$
      0038F5 05 65            [12]10540 	inc	(_find_sloc1_1_0 + 1)
      0038F7                      10541 00604$:
      0038F7 02 34 C9         [24]10542 	ljmp	00214$
      0038FA                      10543 00197$:
                                  10544 ;	.\ecen4350_lcd_v4.c:2429: if(noneFound) {
      0038FA 78 87            [12]10545 	mov	r0,#_find_noneFound_65536_652
      0038FC E6               [12]10546 	mov	a,@r0
      0038FD 70 03            [24]10547 	jnz	00605$
      0038FF 02 33 AB         [24]10548 	ljmp	00205$
      003902                      10549 00605$:
                                  10550 ;	.\ecen4350_lcd_v4.c:2430: setColorRed();
      003902 C0 05            [24]10551 	push	ar5
      003904 12 16 74         [24]10552 	lcall	_setColorRed
                                  10553 ;	.\ecen4350_lcd_v4.c:2431: setCursor(0, 140);
      003907 75 6B 8C         [24]10554 	mov	_setCursor_PARM_2,#0x8c
      00390A 75 6C 00         [24]10555 	mov	(_setCursor_PARM_2 + 1),#0x00
      00390D 90 00 00         [24]10556 	mov	dptr,#0x0000
      003910 12 05 51         [24]10557 	lcall	_setCursor
                                  10558 ;	.\ecen4350_lcd_v4.c:2432: LCD_string_write(" Value Not Found\n Within Block\n ");
      003913 90 64 33         [24]10559 	mov	dptr,#___str_120
      003916 75 F0 80         [24]10560 	mov	b,#0x80
      003919 12 10 6B         [24]10561 	lcall	_LCD_string_write
                                  10562 ;	.\ecen4350_lcd_v4.c:2433: setColorWhite();
      00391C 12 16 7F         [24]10563 	lcall	_setColorWhite
                                  10564 ;	.\ecen4350_lcd_v4.c:2434: LCD_string_write("\n <0> Exit");
      00391F 90 64 54         [24]10565 	mov	dptr,#___str_121
      003922 75 F0 80         [24]10566 	mov	b,#0x80
      003925 12 10 6B         [24]10567 	lcall	_LCD_string_write
      003928 D0 05            [24]10568 	pop	ar5
                                  10569 ;	.\ecen4350_lcd_v4.c:2435: invalidInput = 1;
      00392A 7F 01            [12]10570 	mov	r7,#0x01
                                  10571 ;	.\ecen4350_lcd_v4.c:2437: while (invalidInput) {
      00392C                      10572 00200$:
      00392C EF               [12]10573 	mov	a,r7
      00392D 70 03            [24]10574 	jnz	00606$
      00392F 02 33 AB         [24]10575 	ljmp	00205$
      003932                      10576 00606$:
                                  10577 ;	.\ecen4350_lcd_v4.c:2438: selection = keyDetect();
      003932 C0 07            [24]10578 	push	ar7
      003934 C0 05            [24]10579 	push	ar5
      003936 12 11 89         [24]10580 	lcall	_keyDetect
      003939 AE 82            [24]10581 	mov	r6,dpl
      00393B D0 05            [24]10582 	pop	ar5
      00393D D0 07            [24]10583 	pop	ar7
      00393F 78 71            [12]10584 	mov	r0,#_selection
      003941 A6 06            [24]10585 	mov	@r0,ar6
                                  10586 ;	.\ecen4350_lcd_v4.c:2439: if (selection == '0'){
      003943 BE 30 E6         [24]10587 	cjne	r6,#0x30,00200$
                                  10588 ;	.\ecen4350_lcd_v4.c:2440: setCursor(0, 140);
      003946 75 6B 8C         [24]10589 	mov	_setCursor_PARM_2,#0x8c
      003949 75 6C 00         [24]10590 	mov	(_setCursor_PARM_2 + 1),#0x00
      00394C 90 00 00         [24]10591 	mov	dptr,#0x0000
      00394F C0 05            [24]10592 	push	ar5
      003951 12 05 51         [24]10593 	lcall	_setCursor
                                  10594 ;	.\ecen4350_lcd_v4.c:2441: LCD_string_write("\n\n\n ");
      003954 90 64 5F         [24]10595 	mov	dptr,#___str_122
      003957 75 F0 80         [24]10596 	mov	b,#0x80
      00395A 12 10 6B         [24]10597 	lcall	_LCD_string_write
                                  10598 ;	.\ecen4350_lcd_v4.c:2442: setColorHighlight2();
      00395D 12 16 51         [24]10599 	lcall	_setColorHighlight2
                                  10600 ;	.\ecen4350_lcd_v4.c:2443: LCD_string_write("<0> Exit");
      003960 90 61 7E         [24]10601 	mov	dptr,#___str_78
      003963 75 F0 80         [24]10602 	mov	b,#0x80
      003966 12 10 6B         [24]10603 	lcall	_LCD_string_write
      003969 D0 05            [24]10604 	pop	ar5
                                  10605 ;	.\ecen4350_lcd_v4.c:2444: invalidInput = 0;
      00396B 7F 00            [12]10606 	mov	r7,#0x00
                                  10607 ;	.\ecen4350_lcd_v4.c:2445: exit = 0;
      00396D 78 88            [12]10608 	mov	r0,#_find_exit_65536_652
      00396F 76 00            [12]10609 	mov	@r0,#0x00
      003971 80 B9            [24]10610 	sjmp	00200$
      003973                      10611 00207$:
                                  10612 ;	.\ecen4350_lcd_v4.c:2450: delay(80);
      003973 90 00 50         [24]10613 	mov	dptr,#0x0050
                                  10614 ;	.\ecen4350_lcd_v4.c:2451: return;
                                  10615 ;	.\ecen4350_lcd_v4.c:2452: }
      003976 02 01 87         [24]10616 	ljmp	_delay
                                  10617 ;------------------------------------------------------------
                                  10618 ;Allocation info for local variables in function 'count'
                                  10619 ;------------------------------------------------------------
                                  10620 ;d                         Allocated to registers 
                                  10621 ;i                         Allocated with name '_count_i_262144_721'
                                  10622 ;__3932160175              Allocated to registers 
                                  10623 ;__3932160176              Allocated to registers 
                                  10624 ;map_address               Allocated to registers 
                                  10625 ;d                         Allocated to registers r4 
                                  10626 ;i                         Allocated to registers r4 r6 
                                  10627 ;__3932160178              Allocated to registers 
                                  10628 ;__3932160179              Allocated to registers 
                                  10629 ;map_address               Allocated to registers 
                                  10630 ;d                         Allocated to registers r3 
                                  10631 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                  10632 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                  10633 ;address                   Allocated with name '_count_address_65536_708'
                                  10634 ;destination               Allocated to registers 
                                  10635 ;blockSize                 Allocated with name '_count_blockSize_65536_708'
                                  10636 ;value                     Allocated with name '_count_value_65536_708'
                                  10637 ;scan                      Allocated with name '_count_scan_65536_708'
                                  10638 ;page                      Allocated to registers r5 
                                  10639 ;noneFound                 Allocated with name '_count_noneFound_65536_708'
                                  10640 ;invalidInput              Allocated to registers r7 
                                  10641 ;exit                      Allocated with name '_count_exit_65536_708'
                                  10642 ;------------------------------------------------------------
                                  10643 ;	.\ecen4350_lcd_v4.c:2454: void count() {
                                  10644 ;	-----------------------------------------
                                  10645 ;	 function count
                                  10646 ;	-----------------------------------------
      003979                      10647 _count:
                                  10648 ;	.\ecen4350_lcd_v4.c:2458: __idata unsigned char blockSize = 0;
      003979 78 8B            [12]10649 	mov	r0,#_count_blockSize_65536_708
      00397B 76 00            [12]10650 	mov	@r0,#0x00
                                  10651 ;	.\ecen4350_lcd_v4.c:2460: __idata unsigned char scan = 0;
      00397D 78 8D            [12]10652 	mov	r0,#_count_scan_65536_708
      00397F 76 00            [12]10653 	mov	@r0,#0x00
                                  10654 ;	.\ecen4350_lcd_v4.c:2461: __idata unsigned char page = 0;
      003981 7D 00            [12]10655 	mov	r5,#0x00
                                  10656 ;	.\ecen4350_lcd_v4.c:2462: __idata unsigned char noneFound = 1;
      003983 78 8E            [12]10657 	mov	r0,#_count_noneFound_65536_708
      003985 76 01            [12]10658 	mov	@r0,#0x01
                                  10659 ;	.\ecen4350_lcd_v4.c:2463: __idata unsigned char invalidInput = 1;
      003987 7B 01            [12]10660 	mov	r3,#0x01
                                  10661 ;	.\ecen4350_lcd_v4.c:2464: __idata unsigned char exit = 1;
      003989 78 8F            [12]10662 	mov	r0,#_count_exit_65536_708
      00398B 76 01            [12]10663 	mov	@r0,#0x01
                                  10664 ;	.\ecen4350_lcd_v4.c:2466: clearLCD();
      00398D C0 05            [24]10665 	push	ar5
      00398F C0 03            [24]10666 	push	ar3
      003991 12 0D EE         [24]10667 	lcall	_clearLCD
                                  10668 ;	.\ecen4350_lcd_v4.c:2469: setTextSize(5);
      003994 75 82 05         [24]10669 	mov	dpl,#0x05
      003997 12 05 6B         [24]10670 	lcall	_setTextSize
                                  10671 ;	.\ecen4350_lcd_v4.c:2470: fillTop(GRAY);
      00399A 90 D6 BA         [24]10672 	mov	dptr,#0xd6ba
      00399D 12 0C 21         [24]10673 	lcall	_fillTop
                                  10674 ;	.\ecen4350_lcd_v4.c:2471: setColorMenu();
      0039A0 12 16 68         [24]10675 	lcall	_setColorMenu
                                  10676 ;	.\ecen4350_lcd_v4.c:2472: setCursor(15, 0);
      0039A3 E4               [12]10677 	clr	a
      0039A4 F5 6B            [12]10678 	mov	_setCursor_PARM_2,a
      0039A6 F5 6C            [12]10679 	mov	(_setCursor_PARM_2 + 1),a
      0039A8 90 00 0F         [24]10680 	mov	dptr,#0x000f
      0039AB 12 05 51         [24]10681 	lcall	_setCursor
                                  10682 ;	.\ecen4350_lcd_v4.c:2473: LCD_string_write("[COUNT]\n");
      0039AE 90 64 64         [24]10683 	mov	dptr,#___str_123
      0039B1 75 F0 80         [24]10684 	mov	b,#0x80
      0039B4 12 10 6B         [24]10685 	lcall	_LCD_string_write
                                  10686 ;	.\ecen4350_lcd_v4.c:2474: setColorDefault();
      0039B7 12 16 2F         [24]10687 	lcall	_setColorDefault
                                  10688 ;	.\ecen4350_lcd_v4.c:2475: setTextSize(2);
      0039BA 75 82 02         [24]10689 	mov	dpl,#0x02
      0039BD 12 05 6B         [24]10690 	lcall	_setTextSize
                                  10691 ;	.\ecen4350_lcd_v4.c:2476: setCursor(0, 60);
      0039C0 75 6B 3C         [24]10692 	mov	_setCursor_PARM_2,#0x3c
      0039C3 75 6C 00         [24]10693 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039C6 90 00 00         [24]10694 	mov	dptr,#0x0000
      0039C9 12 05 51         [24]10695 	lcall	_setCursor
                                  10696 ;	.\ecen4350_lcd_v4.c:2477: LCD_string_write(" Search Value:");
      0039CC 90 64 6D         [24]10697 	mov	dptr,#___str_124
      0039CF 75 F0 80         [24]10698 	mov	b,#0x80
      0039D2 12 10 6B         [24]10699 	lcall	_LCD_string_write
                                  10700 ;	.\ecen4350_lcd_v4.c:2478: setCursor(0, 80);
      0039D5 75 6B 50         [24]10701 	mov	_setCursor_PARM_2,#0x50
      0039D8 75 6C 00         [24]10702 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039DB 90 00 00         [24]10703 	mov	dptr,#0x0000
      0039DE 12 05 51         [24]10704 	lcall	_setCursor
                                  10705 ;	.\ecen4350_lcd_v4.c:2479: setColorGray();
      0039E1 12 16 5D         [24]10706 	lcall	_setColorGray
                                  10707 ;	.\ecen4350_lcd_v4.c:2480: LCD_string_write(" __");
      0039E4 90 60 65         [24]10708 	mov	dptr,#___str_62
      0039E7 75 F0 80         [24]10709 	mov	b,#0x80
      0039EA 12 10 6B         [24]10710 	lcall	_LCD_string_write
                                  10711 ;	.\ecen4350_lcd_v4.c:2481: setCursor(0, 110);
      0039ED 75 6B 6E         [24]10712 	mov	_setCursor_PARM_2,#0x6e
      0039F0 75 6C 00         [24]10713 	mov	(_setCursor_PARM_2 + 1),#0x00
      0039F3 90 00 00         [24]10714 	mov	dptr,#0x0000
      0039F6 12 05 51         [24]10715 	lcall	_setCursor
                                  10716 ;	.\ecen4350_lcd_v4.c:2482: setColorDefault();
      0039F9 12 16 2F         [24]10717 	lcall	_setColorDefault
                                  10718 ;	.\ecen4350_lcd_v4.c:2483: LCD_string_write(" Search Address:");
      0039FC 90 61 AE         [24]10719 	mov	dptr,#___str_82
      0039FF 75 F0 80         [24]10720 	mov	b,#0x80
      003A02 12 10 6B         [24]10721 	lcall	_LCD_string_write
                                  10722 ;	.\ecen4350_lcd_v4.c:2484: setCursor(0, 130 );
      003A05 75 6B 82         [24]10723 	mov	_setCursor_PARM_2,#0x82
      003A08 75 6C 00         [24]10724 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A0B 90 00 00         [24]10725 	mov	dptr,#0x0000
      003A0E 12 05 51         [24]10726 	lcall	_setCursor
                                  10727 ;	.\ecen4350_lcd_v4.c:2485: setColorGray();
      003A11 12 16 5D         [24]10728 	lcall	_setColorGray
                                  10729 ;	.\ecen4350_lcd_v4.c:2486: LCD_string_write(" 0x____");
      003A14 90 5E 56         [24]10730 	mov	dptr,#___str_24
      003A17 75 F0 80         [24]10731 	mov	b,#0x80
      003A1A 12 10 6B         [24]10732 	lcall	_LCD_string_write
                                  10733 ;	.\ecen4350_lcd_v4.c:2487: setCursor(0, 160);
      003A1D 75 6B A0         [24]10734 	mov	_setCursor_PARM_2,#0xa0
      003A20 75 6C 00         [24]10735 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A23 90 00 00         [24]10736 	mov	dptr,#0x0000
      003A26 12 05 51         [24]10737 	lcall	_setCursor
                                  10738 ;	.\ecen4350_lcd_v4.c:2488: setColorDefault();
      003A29 12 16 2F         [24]10739 	lcall	_setColorDefault
                                  10740 ;	.\ecen4350_lcd_v4.c:2489: LCD_string_write(" Input Block Size:\n");
      003A2C 90 61 BF         [24]10741 	mov	dptr,#___str_83
      003A2F 75 F0 80         [24]10742 	mov	b,#0x80
      003A32 12 10 6B         [24]10743 	lcall	_LCD_string_write
                                  10744 ;	.\ecen4350_lcd_v4.c:2490: setColorGray();
      003A35 12 16 5D         [24]10745 	lcall	_setColorGray
                                  10746 ;	.\ecen4350_lcd_v4.c:2491: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003A38 90 61 D3         [24]10747 	mov	dptr,#___str_84
      003A3B 75 F0 80         [24]10748 	mov	b,#0x80
      003A3E 12 10 6B         [24]10749 	lcall	_LCD_string_write
                                  10750 ;	.\ecen4350_lcd_v4.c:2492: LCD_string_write("  <FF> (SCAN)");
      003A41 90 61 F9         [24]10751 	mov	dptr,#___str_85
      003A44 75 F0 80         [24]10752 	mov	b,#0x80
      003A47 12 10 6B         [24]10753 	lcall	_LCD_string_write
                                  10754 ;	.\ecen4350_lcd_v4.c:2493: setCursor(0, 250);
      003A4A 75 6B FA         [24]10755 	mov	_setCursor_PARM_2,#0xfa
      003A4D 75 6C 00         [24]10756 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A50 90 00 00         [24]10757 	mov	dptr,#0x0000
      003A53 12 05 51         [24]10758 	lcall	_setCursor
                                  10759 ;	.\ecen4350_lcd_v4.c:2494: setColorGray();
      003A56 12 16 5D         [24]10760 	lcall	_setColorGray
                                  10761 ;	.\ecen4350_lcd_v4.c:2495: LCD_string_write("   __");
      003A59 90 62 07         [24]10762 	mov	dptr,#___str_86
      003A5C 75 F0 80         [24]10763 	mov	b,#0x80
      003A5F 12 10 6B         [24]10764 	lcall	_LCD_string_write
                                  10765 ;	.\ecen4350_lcd_v4.c:2502: setColorSelect();
      003A62 12 16 3A         [24]10766 	lcall	_setColorSelect
                                  10767 ;	.\ecen4350_lcd_v4.c:2503: setCursor(0, 60);
      003A65 75 6B 3C         [24]10768 	mov	_setCursor_PARM_2,#0x3c
      003A68 75 6C 00         [24]10769 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A6B 90 00 00         [24]10770 	mov	dptr,#0x0000
      003A6E 12 05 51         [24]10771 	lcall	_setCursor
                                  10772 ;	.\ecen4350_lcd_v4.c:2504: LCD_string_write(" Search Value:");
      003A71 90 64 6D         [24]10773 	mov	dptr,#___str_124
      003A74 75 F0 80         [24]10774 	mov	b,#0x80
      003A77 12 10 6B         [24]10775 	lcall	_LCD_string_write
                                  10776 ;	.\ecen4350_lcd_v4.c:2505: setCursor(0, 80);
      003A7A 75 6B 50         [24]10777 	mov	_setCursor_PARM_2,#0x50
      003A7D 75 6C 00         [24]10778 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A80 90 00 00         [24]10779 	mov	dptr,#0x0000
      003A83 12 05 51         [24]10780 	lcall	_setCursor
                                  10781 ;	.\ecen4350_lcd_v4.c:2506: setColorWhite();
      003A86 12 16 7F         [24]10782 	lcall	_setColorWhite
                                  10783 ;	.\ecen4350_lcd_v4.c:2507: setCursor(0, 80);
      003A89 75 6B 50         [24]10784 	mov	_setCursor_PARM_2,#0x50
      003A8C 75 6C 00         [24]10785 	mov	(_setCursor_PARM_2 + 1),#0x00
      003A8F 90 00 00         [24]10786 	mov	dptr,#0x0000
      003A92 12 05 51         [24]10787 	lcall	_setCursor
                                  10788 ;	.\ecen4350_lcd_v4.c:2508: LCD_string_write(" ");
      003A95 90 5E B8         [24]10789 	mov	dptr,#___str_30
      003A98 75 F0 80         [24]10790 	mov	b,#0x80
      003A9B 12 10 6B         [24]10791 	lcall	_LCD_string_write
                                  10792 ;	.\ecen4350_lcd_v4.c:2509: setColorHighlight1();
      003A9E 12 16 45         [24]10793 	lcall	_setColorHighlight1
                                  10794 ;	.\ecen4350_lcd_v4.c:2510: selection = keyDetect();
      003AA1 12 11 89         [24]10795 	lcall	_keyDetect
      003AA4 AC 82            [24]10796 	mov	r4,dpl
      003AA6 78 71            [12]10797 	mov	r0,#_selection
      003AA8 A6 04            [24]10798 	mov	@r0,ar4
                                  10799 ;	.\ecen4350_lcd_v4.c:2511: write(selection);
      003AAA 8C 82            [24]10800 	mov	dpl,r4
      003AAC 12 10 05         [24]10801 	lcall	_write
                                  10802 ;	.\ecen4350_lcd_v4.c:2512: selection = ASCIItoHex(selection);
      003AAF 78 71            [12]10803 	mov	r0,#_selection
      003AB1 86 82            [24]10804 	mov	dpl,@r0
      003AB3 12 13 F7         [24]10805 	lcall	_ASCIItoHex
      003AB6 AC 82            [24]10806 	mov	r4,dpl
      003AB8 D0 03            [24]10807 	pop	ar3
      003ABA 78 71            [12]10808 	mov	r0,#_selection
      003ABC A6 04            [24]10809 	mov	@r0,ar4
                                  10810 ;	.\ecen4350_lcd_v4.c:2513: value |= selection * 16;
      003ABE EC               [12]10811 	mov	a,r4
      003ABF C4               [12]10812 	swap	a
      003AC0 54 F0            [12]10813 	anl	a,#0xf0
      003AC2 FC               [12]10814 	mov	r4,a
                                  10815 ;	.\ecen4350_lcd_v4.c:2514: selection = keyDetect();
      003AC3 C0 04            [24]10816 	push	ar4
      003AC5 C0 03            [24]10817 	push	ar3
      003AC7 12 11 89         [24]10818 	lcall	_keyDetect
      003ACA AE 82            [24]10819 	mov	r6,dpl
      003ACC 78 71            [12]10820 	mov	r0,#_selection
      003ACE A6 06            [24]10821 	mov	@r0,ar6
                                  10822 ;	.\ecen4350_lcd_v4.c:2515: write(selection);
      003AD0 8E 82            [24]10823 	mov	dpl,r6
      003AD2 12 10 05         [24]10824 	lcall	_write
                                  10825 ;	.\ecen4350_lcd_v4.c:2516: selection = ASCIItoHex(selection);
      003AD5 78 71            [12]10826 	mov	r0,#_selection
      003AD7 86 82            [24]10827 	mov	dpl,@r0
      003AD9 12 13 F7         [24]10828 	lcall	_ASCIItoHex
      003ADC AE 82            [24]10829 	mov	r6,dpl
      003ADE D0 03            [24]10830 	pop	ar3
      003AE0 D0 04            [24]10831 	pop	ar4
      003AE2 78 71            [12]10832 	mov	r0,#_selection
      003AE4 A6 06            [24]10833 	mov	@r0,ar6
                                  10834 ;	.\ecen4350_lcd_v4.c:2517: value |= selection;
      003AE6 78 8C            [12]10835 	mov	r0,#_count_value_65536_708
      003AE8 EE               [12]10836 	mov	a,r6
      003AE9 4C               [12]10837 	orl	a,r4
      003AEA F6               [12]10838 	mov	@r0,a
                                  10839 ;	.\ecen4350_lcd_v4.c:2520: setColorDefault();
      003AEB C0 03            [24]10840 	push	ar3
      003AED 12 16 2F         [24]10841 	lcall	_setColorDefault
                                  10842 ;	.\ecen4350_lcd_v4.c:2521: setCursor(0, 60);
      003AF0 75 6B 3C         [24]10843 	mov	_setCursor_PARM_2,#0x3c
      003AF3 75 6C 00         [24]10844 	mov	(_setCursor_PARM_2 + 1),#0x00
      003AF6 90 00 00         [24]10845 	mov	dptr,#0x0000
      003AF9 12 05 51         [24]10846 	lcall	_setCursor
                                  10847 ;	.\ecen4350_lcd_v4.c:2522: LCD_string_write(" Search Value:");
      003AFC 90 64 6D         [24]10848 	mov	dptr,#___str_124
      003AFF 75 F0 80         [24]10849 	mov	b,#0x80
      003B02 12 10 6B         [24]10850 	lcall	_LCD_string_write
                                  10851 ;	.\ecen4350_lcd_v4.c:2523: setCursor(0, 80);
      003B05 75 6B 50         [24]10852 	mov	_setCursor_PARM_2,#0x50
      003B08 75 6C 00         [24]10853 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B0B 90 00 00         [24]10854 	mov	dptr,#0x0000
      003B0E 12 05 51         [24]10855 	lcall	_setCursor
                                  10856 ;	.\ecen4350_lcd_v4.c:2524: setColorWhite();
      003B11 12 16 7F         [24]10857 	lcall	_setColorWhite
                                  10858 ;	.\ecen4350_lcd_v4.c:2525: LCD_string_write(" ");
      003B14 90 5E B8         [24]10859 	mov	dptr,#___str_30
      003B17 75 F0 80         [24]10860 	mov	b,#0x80
      003B1A 12 10 6B         [24]10861 	lcall	_LCD_string_write
                                  10862 ;	.\ecen4350_lcd_v4.c:2526: setColorHighlight2();
      003B1D 12 16 51         [24]10863 	lcall	_setColorHighlight2
                                  10864 ;	.\ecen4350_lcd_v4.c:2527: print8Hex(value);
      003B20 78 8C            [12]10865 	mov	r0,#_count_value_65536_708
      003B22 86 82            [24]10866 	mov	dpl,@r0
      003B24 12 15 3C         [24]10867 	lcall	_print8Hex
                                  10868 ;	.\ecen4350_lcd_v4.c:2530: setColorSelect();
      003B27 12 16 3A         [24]10869 	lcall	_setColorSelect
                                  10870 ;	.\ecen4350_lcd_v4.c:2531: setCursor(0, 110);
      003B2A 75 6B 6E         [24]10871 	mov	_setCursor_PARM_2,#0x6e
      003B2D 75 6C 00         [24]10872 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B30 90 00 00         [24]10873 	mov	dptr,#0x0000
      003B33 12 05 51         [24]10874 	lcall	_setCursor
                                  10875 ;	.\ecen4350_lcd_v4.c:2532: LCD_string_write(" Search Address:");
      003B36 90 61 AE         [24]10876 	mov	dptr,#___str_82
      003B39 75 F0 80         [24]10877 	mov	b,#0x80
      003B3C 12 10 6B         [24]10878 	lcall	_LCD_string_write
                                  10879 ;	.\ecen4350_lcd_v4.c:2533: setCursor(0, 130);
      003B3F 75 6B 82         [24]10880 	mov	_setCursor_PARM_2,#0x82
      003B42 75 6C 00         [24]10881 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B45 90 00 00         [24]10882 	mov	dptr,#0x0000
      003B48 12 05 51         [24]10883 	lcall	_setCursor
                                  10884 ;	.\ecen4350_lcd_v4.c:2534: LCD_string_write(" ");
      003B4B 90 5E B8         [24]10885 	mov	dptr,#___str_30
      003B4E 75 F0 80         [24]10886 	mov	b,#0x80
      003B51 12 10 6B         [24]10887 	lcall	_LCD_string_write
                                  10888 ;	.\ecen4350_lcd_v4.c:2535: setColorHighlight1();
      003B54 12 16 45         [24]10889 	lcall	_setColorHighlight1
                                  10890 ;	.\ecen4350_lcd_v4.c:2536: LCD_string_write("0x");
      003B57 90 5D 8D         [24]10891 	mov	dptr,#___str_2
      003B5A 75 F0 80         [24]10892 	mov	b,#0x80
      003B5D 12 10 6B         [24]10893 	lcall	_LCD_string_write
                                  10894 ;	.\ecen4350_lcd_v4.c:2537: address = inputAddress();
      003B60 12 16 A0         [24]10895 	lcall	_inputAddress
      003B63 78 89            [12]10896 	mov	r0,#_count_address_65536_708
      003B65 A6 82            [24]10897 	mov	@r0,dpl
      003B67 08               [12]10898 	inc	r0
      003B68 A6 83            [24]10899 	mov	@r0,dph
                                  10900 ;	.\ecen4350_lcd_v4.c:2540: setColorDefault();
      003B6A 12 16 2F         [24]10901 	lcall	_setColorDefault
                                  10902 ;	.\ecen4350_lcd_v4.c:2541: setCursor(0, 110);
      003B6D 75 6B 6E         [24]10903 	mov	_setCursor_PARM_2,#0x6e
      003B70 75 6C 00         [24]10904 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B73 90 00 00         [24]10905 	mov	dptr,#0x0000
      003B76 12 05 51         [24]10906 	lcall	_setCursor
                                  10907 ;	.\ecen4350_lcd_v4.c:2542: LCD_string_write(" Search Address:");
      003B79 90 61 AE         [24]10908 	mov	dptr,#___str_82
      003B7C 75 F0 80         [24]10909 	mov	b,#0x80
      003B7F 12 10 6B         [24]10910 	lcall	_LCD_string_write
                                  10911 ;	.\ecen4350_lcd_v4.c:2543: setCursor(0, 130);
      003B82 75 6B 82         [24]10912 	mov	_setCursor_PARM_2,#0x82
      003B85 75 6C 00         [24]10913 	mov	(_setCursor_PARM_2 + 1),#0x00
      003B88 90 00 00         [24]10914 	mov	dptr,#0x0000
      003B8B 12 05 51         [24]10915 	lcall	_setCursor
                                  10916 ;	.\ecen4350_lcd_v4.c:2544: LCD_string_write(" ");
      003B8E 90 5E B8         [24]10917 	mov	dptr,#___str_30
      003B91 75 F0 80         [24]10918 	mov	b,#0x80
      003B94 12 10 6B         [24]10919 	lcall	_LCD_string_write
                                  10920 ;	.\ecen4350_lcd_v4.c:2545: setColorHighlight2();
      003B97 12 16 51         [24]10921 	lcall	_setColorHighlight2
                                  10922 ;	.\ecen4350_lcd_v4.c:2546: LCD_string_write("0x");
      003B9A 90 5D 8D         [24]10923 	mov	dptr,#___str_2
      003B9D 75 F0 80         [24]10924 	mov	b,#0x80
      003BA0 12 10 6B         [24]10925 	lcall	_LCD_string_write
                                  10926 ;	.\ecen4350_lcd_v4.c:2547: print16Hex(address);
      003BA3 78 89            [12]10927 	mov	r0,#_count_address_65536_708
      003BA5 86 82            [24]10928 	mov	dpl,@r0
      003BA7 08               [12]10929 	inc	r0
      003BA8 86 83            [24]10930 	mov	dph,@r0
      003BAA 12 15 53         [24]10931 	lcall	_print16Hex
                                  10932 ;	.\ecen4350_lcd_v4.c:2550: setColorSelect();
      003BAD 12 16 3A         [24]10933 	lcall	_setColorSelect
                                  10934 ;	.\ecen4350_lcd_v4.c:2551: setCursor(0, 160);
      003BB0 75 6B A0         [24]10935 	mov	_setCursor_PARM_2,#0xa0
      003BB3 75 6C 00         [24]10936 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BB6 90 00 00         [24]10937 	mov	dptr,#0x0000
      003BB9 12 05 51         [24]10938 	lcall	_setCursor
                                  10939 ;	.\ecen4350_lcd_v4.c:2552: LCD_string_write(" Input Block Size:\n");
      003BBC 90 61 BF         [24]10940 	mov	dptr,#___str_83
      003BBF 75 F0 80         [24]10941 	mov	b,#0x80
      003BC2 12 10 6B         [24]10942 	lcall	_LCD_string_write
                                  10943 ;	.\ecen4350_lcd_v4.c:2553: setColorWhite();
      003BC5 12 16 7F         [24]10944 	lcall	_setColorWhite
                                  10945 ;	.\ecen4350_lcd_v4.c:2554: LCD_string_write("  <01> BYTE\n  <02> WORD\n  <04> DWORD\n");
      003BC8 90 61 D3         [24]10946 	mov	dptr,#___str_84
      003BCB 75 F0 80         [24]10947 	mov	b,#0x80
      003BCE 12 10 6B         [24]10948 	lcall	_LCD_string_write
                                  10949 ;	.\ecen4350_lcd_v4.c:2555: LCD_string_write("  <FF> (SCAN)");
      003BD1 90 61 F9         [24]10950 	mov	dptr,#___str_85
      003BD4 75 F0 80         [24]10951 	mov	b,#0x80
      003BD7 12 10 6B         [24]10952 	lcall	_LCD_string_write
      003BDA D0 03            [24]10953 	pop	ar3
      003BDC D0 05            [24]10954 	pop	ar5
                                  10955 ;	.\ecen4350_lcd_v4.c:2556: while (invalidInput) {
      003BDE                      10956 00113$:
      003BDE EB               [12]10957 	mov	a,r3
      003BDF 70 03            [24]10958 	jnz	00530$
      003BE1 02 3C 9D         [24]10959 	ljmp	00115$
      003BE4                      10960 00530$:
                                  10961 ;	.\ecen4350_lcd_v4.c:2557: setCursor(0, 250);
      003BE4 75 6B FA         [24]10962 	mov	_setCursor_PARM_2,#0xfa
      003BE7 75 6C 00         [24]10963 	mov	(_setCursor_PARM_2 + 1),#0x00
      003BEA 90 00 00         [24]10964 	mov	dptr,#0x0000
      003BED C0 05            [24]10965 	push	ar5
      003BEF C0 03            [24]10966 	push	ar3
      003BF1 12 05 51         [24]10967 	lcall	_setCursor
                                  10968 ;	.\ecen4350_lcd_v4.c:2558: setColorGray();
      003BF4 12 16 5D         [24]10969 	lcall	_setColorGray
                                  10970 ;	.\ecen4350_lcd_v4.c:2559: LCD_string_write("   __");
      003BF7 90 62 07         [24]10971 	mov	dptr,#___str_86
      003BFA 75 F0 80         [24]10972 	mov	b,#0x80
      003BFD 12 10 6B         [24]10973 	lcall	_LCD_string_write
                                  10974 ;	.\ecen4350_lcd_v4.c:2560: setCursor(0, 250);
      003C00 75 6B FA         [24]10975 	mov	_setCursor_PARM_2,#0xfa
      003C03 75 6C 00         [24]10976 	mov	(_setCursor_PARM_2 + 1),#0x00
      003C06 90 00 00         [24]10977 	mov	dptr,#0x0000
      003C09 12 05 51         [24]10978 	lcall	_setCursor
                                  10979 ;	.\ecen4350_lcd_v4.c:2561: LCD_string_write("   ");
      003C0C 90 62 0D         [24]10980 	mov	dptr,#___str_87
      003C0F 75 F0 80         [24]10981 	mov	b,#0x80
      003C12 12 10 6B         [24]10982 	lcall	_LCD_string_write
                                  10983 ;	.\ecen4350_lcd_v4.c:2562: setColorHighlight1();
      003C15 12 16 45         [24]10984 	lcall	_setColorHighlight1
                                  10985 ;	.\ecen4350_lcd_v4.c:2563: blockSize = inputBlockSize();
      003C18 12 17 50         [24]10986 	lcall	_inputBlockSize
      003C1B 78 8B            [12]10987 	mov	r0,#_count_blockSize_65536_708
      003C1D A6 82            [24]10988 	mov	@r0,dpl
      003C1F D0 03            [24]10989 	pop	ar3
      003C21 D0 05            [24]10990 	pop	ar5
                                  10991 ;	.\ecen4350_lcd_v4.c:2564: if (blockSize == 0x01) {
      003C23 78 8B            [12]10992 	mov	r0,#_count_blockSize_65536_708
      003C25 B6 01 18         [24]10993 	cjne	@r0,#0x01,00111$
                                  10994 ;	.\ecen4350_lcd_v4.c:2565: invalidInput = 0;
      003C28 7B 00            [12]10995 	mov	r3,#0x00
                                  10996 ;	.\ecen4350_lcd_v4.c:2566: setColorDefault();
      003C2A C0 05            [24]10997 	push	ar5
      003C2C C0 03            [24]10998 	push	ar3
      003C2E 12 16 2F         [24]10999 	lcall	_setColorDefault
                                  11000 ;	.\ecen4350_lcd_v4.c:2567: LCD_string_write("\n                ");
      003C31 90 62 11         [24]11001 	mov	dptr,#___str_88
      003C34 75 F0 80         [24]11002 	mov	b,#0x80
      003C37 12 10 6B         [24]11003 	lcall	_LCD_string_write
      003C3A D0 03            [24]11004 	pop	ar3
      003C3C D0 05            [24]11005 	pop	ar5
      003C3E 80 9E            [24]11006 	sjmp	00113$
      003C40                      11007 00111$:
                                  11008 ;	.\ecen4350_lcd_v4.c:2568: } else if (blockSize == 0x02) {
      003C40 78 8B            [12]11009 	mov	r0,#_count_blockSize_65536_708
      003C42 B6 02 19         [24]11010 	cjne	@r0,#0x02,00108$
                                  11011 ;	.\ecen4350_lcd_v4.c:2569: invalidInput = 0;
      003C45 7B 00            [12]11012 	mov	r3,#0x00
                                  11013 ;	.\ecen4350_lcd_v4.c:2570: setColorDefault();
      003C47 C0 05            [24]11014 	push	ar5
      003C49 C0 03            [24]11015 	push	ar3
      003C4B 12 16 2F         [24]11016 	lcall	_setColorDefault
                                  11017 ;	.\ecen4350_lcd_v4.c:2571: LCD_string_write("\n                ");
      003C4E 90 62 11         [24]11018 	mov	dptr,#___str_88
      003C51 75 F0 80         [24]11019 	mov	b,#0x80
      003C54 12 10 6B         [24]11020 	lcall	_LCD_string_write
      003C57 D0 03            [24]11021 	pop	ar3
      003C59 D0 05            [24]11022 	pop	ar5
      003C5B 02 3B DE         [24]11023 	ljmp	00113$
      003C5E                      11024 00108$:
                                  11025 ;	.\ecen4350_lcd_v4.c:2572: } else if (blockSize == 0x04) {
      003C5E 78 8B            [12]11026 	mov	r0,#_count_blockSize_65536_708
      003C60 B6 04 19         [24]11027 	cjne	@r0,#0x04,00105$
                                  11028 ;	.\ecen4350_lcd_v4.c:2573: invalidInput = 0;
      003C63 7B 00            [12]11029 	mov	r3,#0x00
                                  11030 ;	.\ecen4350_lcd_v4.c:2574: setColorDefault();
      003C65 C0 05            [24]11031 	push	ar5
      003C67 C0 03            [24]11032 	push	ar3
      003C69 12 16 2F         [24]11033 	lcall	_setColorDefault
                                  11034 ;	.\ecen4350_lcd_v4.c:2575: LCD_string_write("\n                ");
      003C6C 90 62 11         [24]11035 	mov	dptr,#___str_88
      003C6F 75 F0 80         [24]11036 	mov	b,#0x80
      003C72 12 10 6B         [24]11037 	lcall	_LCD_string_write
      003C75 D0 03            [24]11038 	pop	ar3
      003C77 D0 05            [24]11039 	pop	ar5
      003C79 02 3B DE         [24]11040 	ljmp	00113$
      003C7C                      11041 00105$:
                                  11042 ;	.\ecen4350_lcd_v4.c:2576: } else if (blockSize == 0xFF) {
      003C7C 78 8B            [12]11043 	mov	r0,#_count_blockSize_65536_708
      003C7E B6 FF 05         [24]11044 	cjne	@r0,#0xff,00102$
                                  11045 ;	.\ecen4350_lcd_v4.c:2577: invalidInput = 0;
      003C81 7B 00            [12]11046 	mov	r3,#0x00
      003C83 02 3B DE         [24]11047 	ljmp	00113$
      003C86                      11048 00102$:
                                  11049 ;	.\ecen4350_lcd_v4.c:2580: setColorRed();
      003C86 C0 05            [24]11050 	push	ar5
      003C88 C0 03            [24]11051 	push	ar3
      003C8A 12 16 74         [24]11052 	lcall	_setColorRed
                                  11053 ;	.\ecen4350_lcd_v4.c:2581: LCD_string_write("\n Try again");
      003C8D 90 62 23         [24]11054 	mov	dptr,#___str_89
      003C90 75 F0 80         [24]11055 	mov	b,#0x80
      003C93 12 10 6B         [24]11056 	lcall	_LCD_string_write
      003C96 D0 03            [24]11057 	pop	ar3
      003C98 D0 05            [24]11058 	pop	ar5
      003C9A 02 3B DE         [24]11059 	ljmp	00113$
      003C9D                      11060 00115$:
                                  11061 ;	.\ecen4350_lcd_v4.c:2586: setCursor(0, 160);
      003C9D 75 6B A0         [24]11062 	mov	_setCursor_PARM_2,#0xa0
      003CA0 75 6C 00         [24]11063 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CA3 90 00 00         [24]11064 	mov	dptr,#0x0000
      003CA6 C0 05            [24]11065 	push	ar5
      003CA8 12 05 51         [24]11066 	lcall	_setCursor
                                  11067 ;	.\ecen4350_lcd_v4.c:2587: setColorDefault();
      003CAB 12 16 2F         [24]11068 	lcall	_setColorDefault
                                  11069 ;	.\ecen4350_lcd_v4.c:2588: LCD_string_write(" Input Block Size:\n");
      003CAE 90 61 BF         [24]11070 	mov	dptr,#___str_83
      003CB1 75 F0 80         [24]11071 	mov	b,#0x80
      003CB4 12 10 6B         [24]11072 	lcall	_LCD_string_write
      003CB7 D0 05            [24]11073 	pop	ar5
                                  11074 ;	.\ecen4350_lcd_v4.c:2589: if (blockSize == 0x01){
      003CB9 78 8B            [12]11075 	mov	r0,#_count_blockSize_65536_708
      003CBB B6 01 74         [24]11076 	cjne	@r0,#0x01,00125$
                                  11077 ;	.\ecen4350_lcd_v4.c:2590: LCD_string_write("  ");
      003CBE 90 5E D1         [24]11078 	mov	dptr,#___str_33
      003CC1 75 F0 80         [24]11079 	mov	b,#0x80
      003CC4 C0 05            [24]11080 	push	ar5
      003CC6 12 10 6B         [24]11081 	lcall	_LCD_string_write
                                  11082 ;	.\ecen4350_lcd_v4.c:2591: setColorHighlight2();
      003CC9 12 16 51         [24]11083 	lcall	_setColorHighlight2
                                  11084 ;	.\ecen4350_lcd_v4.c:2592: LCD_string_write("<01> BYTE\n");
      003CCC 90 62 2F         [24]11085 	mov	dptr,#___str_90
      003CCF 75 F0 80         [24]11086 	mov	b,#0x80
      003CD2 12 10 6B         [24]11087 	lcall	_LCD_string_write
                                  11088 ;	.\ecen4350_lcd_v4.c:2593: setColorGray();
      003CD5 12 16 5D         [24]11089 	lcall	_setColorGray
                                  11090 ;	.\ecen4350_lcd_v4.c:2594: LCD_string_write("  <02> WORD\n");
      003CD8 90 62 3A         [24]11091 	mov	dptr,#___str_91
      003CDB 75 F0 80         [24]11092 	mov	b,#0x80
      003CDE 12 10 6B         [24]11093 	lcall	_LCD_string_write
                                  11094 ;	.\ecen4350_lcd_v4.c:2595: LCD_string_write("  <04> DWORD\n");
      003CE1 90 62 47         [24]11095 	mov	dptr,#___str_92
      003CE4 75 F0 80         [24]11096 	mov	b,#0x80
      003CE7 12 10 6B         [24]11097 	lcall	_LCD_string_write
                                  11098 ;	.\ecen4350_lcd_v4.c:2596: LCD_string_write("  <FF> (SCAN)");
      003CEA 90 61 F9         [24]11099 	mov	dptr,#___str_85
      003CED 75 F0 80         [24]11100 	mov	b,#0x80
      003CF0 12 10 6B         [24]11101 	lcall	_LCD_string_write
                                  11102 ;	.\ecen4350_lcd_v4.c:2597: setColorDefault();
      003CF3 12 16 2F         [24]11103 	lcall	_setColorDefault
                                  11104 ;	.\ecen4350_lcd_v4.c:2598: setCursor(0, 250);
      003CF6 75 6B FA         [24]11105 	mov	_setCursor_PARM_2,#0xfa
      003CF9 75 6C 00         [24]11106 	mov	(_setCursor_PARM_2 + 1),#0x00
      003CFC 90 00 00         [24]11107 	mov	dptr,#0x0000
      003CFF 12 05 51         [24]11108 	lcall	_setCursor
                                  11109 ;	.\ecen4350_lcd_v4.c:2599: LCD_string_write("   ");
      003D02 90 62 0D         [24]11110 	mov	dptr,#___str_87
      003D05 75 F0 80         [24]11111 	mov	b,#0x80
      003D08 12 10 6B         [24]11112 	lcall	_LCD_string_write
                                  11113 ;	.\ecen4350_lcd_v4.c:2600: setColorHighlight2();
      003D0B 12 16 51         [24]11114 	lcall	_setColorHighlight2
                                  11115 ;	.\ecen4350_lcd_v4.c:2601: print8Hex(blockSize);
      003D0E 78 8B            [12]11116 	mov	r0,#_count_blockSize_65536_708
      003D10 86 82            [24]11117 	mov	dpl,@r0
      003D12 12 15 3C         [24]11118 	lcall	_print8Hex
                                  11119 ;	.\ecen4350_lcd_v4.c:2602: setColorDefault();
      003D15 12 16 2F         [24]11120 	lcall	_setColorDefault
                                  11121 ;	.\ecen4350_lcd_v4.c:2603: LCD_string_write("\n Search Size Limit:");
      003D18 90 62 55         [24]11122 	mov	dptr,#___str_93
      003D1B 75 F0 80         [24]11123 	mov	b,#0x80
      003D1E 12 10 6B         [24]11124 	lcall	_LCD_string_write
                                  11125 ;	.\ecen4350_lcd_v4.c:2604: setColorWhite();
      003D21 12 16 7F         [24]11126 	lcall	_setColorWhite
                                  11127 ;	.\ecen4350_lcd_v4.c:2605: LCD_string_write("\n BYTE [8 bits]");
      003D24 90 62 6A         [24]11128 	mov	dptr,#___str_94
      003D27 75 F0 80         [24]11129 	mov	b,#0x80
      003D2A 12 10 6B         [24]11130 	lcall	_LCD_string_write
      003D2D D0 05            [24]11131 	pop	ar5
      003D2F 02 3E 76         [24]11132 	ljmp	00126$
      003D32                      11133 00125$:
                                  11134 ;	.\ecen4350_lcd_v4.c:2606: } else if (blockSize == 0x02) {
      003D32 78 8B            [12]11135 	mov	r0,#_count_blockSize_65536_708
      003D34 B6 02 6E         [24]11136 	cjne	@r0,#0x02,00122$
                                  11137 ;	.\ecen4350_lcd_v4.c:2607: setColorGray();
      003D37 C0 05            [24]11138 	push	ar5
      003D39 12 16 5D         [24]11139 	lcall	_setColorGray
                                  11140 ;	.\ecen4350_lcd_v4.c:2608: LCD_string_write("  <01> BYTE\n  ");
      003D3C 90 62 7A         [24]11141 	mov	dptr,#___str_95
      003D3F 75 F0 80         [24]11142 	mov	b,#0x80
      003D42 12 10 6B         [24]11143 	lcall	_LCD_string_write
                                  11144 ;	.\ecen4350_lcd_v4.c:2609: setColorHighlight2();
      003D45 12 16 51         [24]11145 	lcall	_setColorHighlight2
                                  11146 ;	.\ecen4350_lcd_v4.c:2610: LCD_string_write("<02> WORD\n");
      003D48 90 62 89         [24]11147 	mov	dptr,#___str_96
      003D4B 75 F0 80         [24]11148 	mov	b,#0x80
      003D4E 12 10 6B         [24]11149 	lcall	_LCD_string_write
                                  11150 ;	.\ecen4350_lcd_v4.c:2611: setColorGray();
      003D51 12 16 5D         [24]11151 	lcall	_setColorGray
                                  11152 ;	.\ecen4350_lcd_v4.c:2612: LCD_string_write("  <04> DWORD\n");
      003D54 90 62 47         [24]11153 	mov	dptr,#___str_92
      003D57 75 F0 80         [24]11154 	mov	b,#0x80
      003D5A 12 10 6B         [24]11155 	lcall	_LCD_string_write
                                  11156 ;	.\ecen4350_lcd_v4.c:2613: LCD_string_write("  <FF> (SCAN)");
      003D5D 90 61 F9         [24]11157 	mov	dptr,#___str_85
      003D60 75 F0 80         [24]11158 	mov	b,#0x80
      003D63 12 10 6B         [24]11159 	lcall	_LCD_string_write
                                  11160 ;	.\ecen4350_lcd_v4.c:2614: setColorDefault();
      003D66 12 16 2F         [24]11161 	lcall	_setColorDefault
                                  11162 ;	.\ecen4350_lcd_v4.c:2615: setCursor(0, 250);
      003D69 75 6B FA         [24]11163 	mov	_setCursor_PARM_2,#0xfa
      003D6C 75 6C 00         [24]11164 	mov	(_setCursor_PARM_2 + 1),#0x00
      003D6F 90 00 00         [24]11165 	mov	dptr,#0x0000
      003D72 12 05 51         [24]11166 	lcall	_setCursor
                                  11167 ;	.\ecen4350_lcd_v4.c:2616: LCD_string_write("   ");
      003D75 90 62 0D         [24]11168 	mov	dptr,#___str_87
      003D78 75 F0 80         [24]11169 	mov	b,#0x80
      003D7B 12 10 6B         [24]11170 	lcall	_LCD_string_write
                                  11171 ;	.\ecen4350_lcd_v4.c:2617: setColorHighlight2();
      003D7E 12 16 51         [24]11172 	lcall	_setColorHighlight2
                                  11173 ;	.\ecen4350_lcd_v4.c:2618: print8Hex(blockSize);
      003D81 78 8B            [12]11174 	mov	r0,#_count_blockSize_65536_708
      003D83 86 82            [24]11175 	mov	dpl,@r0
      003D85 12 15 3C         [24]11176 	lcall	_print8Hex
                                  11177 ;	.\ecen4350_lcd_v4.c:2619: setColorDefault();
      003D88 12 16 2F         [24]11178 	lcall	_setColorDefault
                                  11179 ;	.\ecen4350_lcd_v4.c:2620: LCD_string_write("\n Search Size Limit:");
      003D8B 90 62 55         [24]11180 	mov	dptr,#___str_93
      003D8E 75 F0 80         [24]11181 	mov	b,#0x80
      003D91 12 10 6B         [24]11182 	lcall	_LCD_string_write
                                  11183 ;	.\ecen4350_lcd_v4.c:2621: setColorWhite();
      003D94 12 16 7F         [24]11184 	lcall	_setColorWhite
                                  11185 ;	.\ecen4350_lcd_v4.c:2622: LCD_string_write("\n WORD [16 bits]");
      003D97 90 62 94         [24]11186 	mov	dptr,#___str_97
      003D9A 75 F0 80         [24]11187 	mov	b,#0x80
      003D9D 12 10 6B         [24]11188 	lcall	_LCD_string_write
      003DA0 D0 05            [24]11189 	pop	ar5
      003DA2 02 3E 76         [24]11190 	ljmp	00126$
      003DA5                      11191 00122$:
                                  11192 ;	.\ecen4350_lcd_v4.c:2623: } else if (blockSize == 0x04) {
      003DA5 78 8B            [12]11193 	mov	r0,#_count_blockSize_65536_708
      003DA7 B6 04 64         [24]11194 	cjne	@r0,#0x04,00119$
                                  11195 ;	.\ecen4350_lcd_v4.c:2624: setColorGray();
      003DAA C0 05            [24]11196 	push	ar5
      003DAC 12 16 5D         [24]11197 	lcall	_setColorGray
                                  11198 ;	.\ecen4350_lcd_v4.c:2625: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003DAF 90 62 A5         [24]11199 	mov	dptr,#___str_98
      003DB2 75 F0 80         [24]11200 	mov	b,#0x80
      003DB5 12 10 6B         [24]11201 	lcall	_LCD_string_write
                                  11202 ;	.\ecen4350_lcd_v4.c:2626: setColorHighlight2();
      003DB8 12 16 51         [24]11203 	lcall	_setColorHighlight2
                                  11204 ;	.\ecen4350_lcd_v4.c:2627: LCD_string_write("<04> DWORD\n");
      003DBB 90 62 C0         [24]11205 	mov	dptr,#___str_99
      003DBE 75 F0 80         [24]11206 	mov	b,#0x80
      003DC1 12 10 6B         [24]11207 	lcall	_LCD_string_write
                                  11208 ;	.\ecen4350_lcd_v4.c:2628: setColorGray();
      003DC4 12 16 5D         [24]11209 	lcall	_setColorGray
                                  11210 ;	.\ecen4350_lcd_v4.c:2629: LCD_string_write("  <FF> (SCAN)");
      003DC7 90 61 F9         [24]11211 	mov	dptr,#___str_85
      003DCA 75 F0 80         [24]11212 	mov	b,#0x80
      003DCD 12 10 6B         [24]11213 	lcall	_LCD_string_write
                                  11214 ;	.\ecen4350_lcd_v4.c:2630: setColorDefault();
      003DD0 12 16 2F         [24]11215 	lcall	_setColorDefault
                                  11216 ;	.\ecen4350_lcd_v4.c:2631: setCursor(0, 250);
      003DD3 75 6B FA         [24]11217 	mov	_setCursor_PARM_2,#0xfa
      003DD6 75 6C 00         [24]11218 	mov	(_setCursor_PARM_2 + 1),#0x00
      003DD9 90 00 00         [24]11219 	mov	dptr,#0x0000
      003DDC 12 05 51         [24]11220 	lcall	_setCursor
                                  11221 ;	.\ecen4350_lcd_v4.c:2632: LCD_string_write("   ");
      003DDF 90 62 0D         [24]11222 	mov	dptr,#___str_87
      003DE2 75 F0 80         [24]11223 	mov	b,#0x80
      003DE5 12 10 6B         [24]11224 	lcall	_LCD_string_write
                                  11225 ;	.\ecen4350_lcd_v4.c:2633: setColorHighlight2();
      003DE8 12 16 51         [24]11226 	lcall	_setColorHighlight2
                                  11227 ;	.\ecen4350_lcd_v4.c:2634: print8Hex(blockSize);
      003DEB 78 8B            [12]11228 	mov	r0,#_count_blockSize_65536_708
      003DED 86 82            [24]11229 	mov	dpl,@r0
      003DEF 12 15 3C         [24]11230 	lcall	_print8Hex
                                  11231 ;	.\ecen4350_lcd_v4.c:2635: setColorDefault();
      003DF2 12 16 2F         [24]11232 	lcall	_setColorDefault
                                  11233 ;	.\ecen4350_lcd_v4.c:2636: LCD_string_write("\n Search Size Limit:");
      003DF5 90 62 55         [24]11234 	mov	dptr,#___str_93
      003DF8 75 F0 80         [24]11235 	mov	b,#0x80
      003DFB 12 10 6B         [24]11236 	lcall	_LCD_string_write
                                  11237 ;	.\ecen4350_lcd_v4.c:2637: setColorWhite();
      003DFE 12 16 7F         [24]11238 	lcall	_setColorWhite
                                  11239 ;	.\ecen4350_lcd_v4.c:2638: LCD_string_write("\n DWORD [32 bits]");
      003E01 90 62 CC         [24]11240 	mov	dptr,#___str_100
      003E04 75 F0 80         [24]11241 	mov	b,#0x80
      003E07 12 10 6B         [24]11242 	lcall	_LCD_string_write
      003E0A D0 05            [24]11243 	pop	ar5
      003E0C 80 68            [24]11244 	sjmp	00126$
      003E0E                      11245 00119$:
                                  11246 ;	.\ecen4350_lcd_v4.c:2639: } else if (blockSize == 0xFF) {
      003E0E 78 8B            [12]11247 	mov	r0,#_count_blockSize_65536_708
      003E10 B6 FF 63         [24]11248 	cjne	@r0,#0xff,00126$
                                  11249 ;	.\ecen4350_lcd_v4.c:2640: scan = 1;
      003E13 78 8D            [12]11250 	mov	r0,#_count_scan_65536_708
      003E15 76 01            [12]11251 	mov	@r0,#0x01
                                  11252 ;	.\ecen4350_lcd_v4.c:2641: setColorGray();
      003E17 C0 05            [24]11253 	push	ar5
      003E19 12 16 5D         [24]11254 	lcall	_setColorGray
                                  11255 ;	.\ecen4350_lcd_v4.c:2642: LCD_string_write("  <01> BYTE\n  <02> WORD\n  ");
      003E1C 90 62 A5         [24]11256 	mov	dptr,#___str_98
      003E1F 75 F0 80         [24]11257 	mov	b,#0x80
      003E22 12 10 6B         [24]11258 	lcall	_LCD_string_write
                                  11259 ;	.\ecen4350_lcd_v4.c:2643: LCD_string_write("<04> DWORD\n  ");
      003E25 90 62 DE         [24]11260 	mov	dptr,#___str_101
      003E28 75 F0 80         [24]11261 	mov	b,#0x80
      003E2B 12 10 6B         [24]11262 	lcall	_LCD_string_write
                                  11263 ;	.\ecen4350_lcd_v4.c:2644: setColorHighlight2();
      003E2E 12 16 51         [24]11264 	lcall	_setColorHighlight2
                                  11265 ;	.\ecen4350_lcd_v4.c:2645: LCD_string_write("<FF> (SCAN)");
      003E31 90 62 EC         [24]11266 	mov	dptr,#___str_102
      003E34 75 F0 80         [24]11267 	mov	b,#0x80
      003E37 12 10 6B         [24]11268 	lcall	_LCD_string_write
                                  11269 ;	.\ecen4350_lcd_v4.c:2646: setColorDefault();
      003E3A 12 16 2F         [24]11270 	lcall	_setColorDefault
                                  11271 ;	.\ecen4350_lcd_v4.c:2647: setCursor(0, 250);
      003E3D 75 6B FA         [24]11272 	mov	_setCursor_PARM_2,#0xfa
      003E40 75 6C 00         [24]11273 	mov	(_setCursor_PARM_2 + 1),#0x00
      003E43 90 00 00         [24]11274 	mov	dptr,#0x0000
      003E46 12 05 51         [24]11275 	lcall	_setCursor
                                  11276 ;	.\ecen4350_lcd_v4.c:2648: LCD_string_write("   ");
      003E49 90 62 0D         [24]11277 	mov	dptr,#___str_87
      003E4C 75 F0 80         [24]11278 	mov	b,#0x80
      003E4F 12 10 6B         [24]11279 	lcall	_LCD_string_write
                                  11280 ;	.\ecen4350_lcd_v4.c:2649: setColorHighlight2();
      003E52 12 16 51         [24]11281 	lcall	_setColorHighlight2
                                  11282 ;	.\ecen4350_lcd_v4.c:2650: print8Hex(blockSize);
      003E55 78 8B            [12]11283 	mov	r0,#_count_blockSize_65536_708
      003E57 86 82            [24]11284 	mov	dpl,@r0
      003E59 12 15 3C         [24]11285 	lcall	_print8Hex
                                  11286 ;	.\ecen4350_lcd_v4.c:2651: setColorDefault();
      003E5C 12 16 2F         [24]11287 	lcall	_setColorDefault
                                  11288 ;	.\ecen4350_lcd_v4.c:2652: LCD_string_write("\n Search Size Limit:");
      003E5F 90 62 55         [24]11289 	mov	dptr,#___str_93
      003E62 75 F0 80         [24]11290 	mov	b,#0x80
      003E65 12 10 6B         [24]11291 	lcall	_LCD_string_write
                                  11292 ;	.\ecen4350_lcd_v4.c:2653: setColorWhite();
      003E68 12 16 7F         [24]11293 	lcall	_setColorWhite
                                  11294 ;	.\ecen4350_lcd_v4.c:2654: LCD_string_write("\n [256 Blocks]");
      003E6B 90 62 F8         [24]11295 	mov	dptr,#___str_103
      003E6E 75 F0 80         [24]11296 	mov	b,#0x80
      003E71 12 10 6B         [24]11297 	lcall	_LCD_string_write
      003E74 D0 05            [24]11298 	pop	ar5
      003E76                      11299 00126$:
                                  11300 ;	.\ecen4350_lcd_v4.c:2658: delay(40);
      003E76 90 00 28         [24]11301 	mov	dptr,#0x0028
      003E79 C0 05            [24]11302 	push	ar5
      003E7B 12 01 87         [24]11303 	lcall	_delay
                                  11304 ;	.\ecen4350_lcd_v4.c:2659: clearLCD();
      003E7E 12 0D EE         [24]11305 	lcall	_clearLCD
                                  11306 ;	.\ecen4350_lcd_v4.c:2660: fillTop(GRAY);
      003E81 90 D6 BA         [24]11307 	mov	dptr,#0xd6ba
      003E84 12 0C 21         [24]11308 	lcall	_fillTop
                                  11309 ;	.\ecen4350_lcd_v4.c:2661: setTextSize(5);
      003E87 75 82 05         [24]11310 	mov	dpl,#0x05
      003E8A 12 05 6B         [24]11311 	lcall	_setTextSize
                                  11312 ;	.\ecen4350_lcd_v4.c:2662: setColorMenu();
      003E8D 12 16 68         [24]11313 	lcall	_setColorMenu
                                  11314 ;	.\ecen4350_lcd_v4.c:2663: setCursor(15,0);
      003E90 E4               [12]11315 	clr	a
      003E91 F5 6B            [12]11316 	mov	_setCursor_PARM_2,a
      003E93 F5 6C            [12]11317 	mov	(_setCursor_PARM_2 + 1),a
      003E95 90 00 0F         [24]11318 	mov	dptr,#0x000f
      003E98 12 05 51         [24]11319 	lcall	_setCursor
                                  11320 ;	.\ecen4350_lcd_v4.c:2664: LCD_string_write("[COUNT]\n");
      003E9B 90 64 64         [24]11321 	mov	dptr,#___str_123
      003E9E 75 F0 80         [24]11322 	mov	b,#0x80
      003EA1 12 10 6B         [24]11323 	lcall	_LCD_string_write
                                  11324 ;	.\ecen4350_lcd_v4.c:2665: setColorDefault();
      003EA4 12 16 2F         [24]11325 	lcall	_setColorDefault
                                  11326 ;	.\ecen4350_lcd_v4.c:2666: setTextSize(2);
      003EA7 75 82 02         [24]11327 	mov	dpl,#0x02
      003EAA 12 05 6B         [24]11328 	lcall	_setTextSize
      003EAD D0 05            [24]11329 	pop	ar5
                                  11330 ;	.\ecen4350_lcd_v4.c:2672: while (exit) {
      003EAF                      11331 00202$:
      003EAF 78 8F            [12]11332 	mov	r0,#_count_exit_65536_708
      003EB1 E6               [12]11333 	mov	a,@r0
      003EB2 70 03            [24]11334 	jnz	00547$
      003EB4 02 44 4E         [24]11335 	ljmp	00204$
      003EB7                      11336 00547$:
                                  11337 ;	.\ecen4350_lcd_v4.c:2674: if (scan) {	
      003EB7 78 8D            [12]11338 	mov	r0,#_count_scan_65536_708
      003EB9 E6               [12]11339 	mov	a,@r0
      003EBA 70 03            [24]11340 	jnz	00548$
      003EBC 02 3F 74         [24]11341 	ljmp	00193$
      003EBF                      11342 00548$:
                                  11343 ;	.\ecen4350_lcd_v4.c:2675: setCursor(0, 60);
      003EBF 75 6B 3C         [24]11344 	mov	_setCursor_PARM_2,#0x3c
      003EC2 75 6C 00         [24]11345 	mov	(_setCursor_PARM_2 + 1),#0x00
      003EC5 90 00 00         [24]11346 	mov	dptr,#0x0000
      003EC8 C0 05            [24]11347 	push	ar5
      003ECA 12 05 51         [24]11348 	lcall	_setCursor
                                  11349 ;	.\ecen4350_lcd_v4.c:2676: setColorYellow();
      003ECD 12 16 95         [24]11350 	lcall	_setColorYellow
                                  11351 ;	.\ecen4350_lcd_v4.c:2677: LCD_string_write(" [Non-Interactive]\n");
      003ED0 90 63 07         [24]11352 	mov	dptr,#___str_104
      003ED3 75 F0 80         [24]11353 	mov	b,#0x80
      003ED6 12 10 6B         [24]11354 	lcall	_LCD_string_write
                                  11355 ;	.\ecen4350_lcd_v4.c:2678: setColorWhite();
      003ED9 12 16 7F         [24]11356 	lcall	_setColorWhite
                                  11357 ;	.\ecen4350_lcd_v4.c:2679: LCD_string_write(" Search Value:\n ");
      003EDC 90 63 1B         [24]11358 	mov	dptr,#___str_105
      003EDF 75 F0 80         [24]11359 	mov	b,#0x80
      003EE2 12 10 6B         [24]11360 	lcall	_LCD_string_write
                                  11361 ;	.\ecen4350_lcd_v4.c:2680: setColorDefault();
      003EE5 12 16 2F         [24]11362 	lcall	_setColorDefault
                                  11363 ;	.\ecen4350_lcd_v4.c:2681: print8Hex(value);
      003EE8 78 8C            [12]11364 	mov	r0,#_count_value_65536_708
      003EEA 86 82            [24]11365 	mov	dpl,@r0
      003EEC 12 15 3C         [24]11366 	lcall	_print8Hex
      003EEF D0 05            [24]11367 	pop	ar5
                                  11368 ;	.\ecen4350_lcd_v4.c:2682: for(unsigned int i = 0; i < blockSize; i++) {
      003EF1 8D 03            [24]11369 	mov	ar3,r5
      003EF3 E4               [12]11370 	clr	a
      003EF4 F5 66            [12]11371 	mov	_count_i_262144_721,a
      003EF6 F5 67            [12]11372 	mov	(_count_i_262144_721 + 1),a
      003EF8                      11373 00208$:
      003EF8 78 8B            [12]11374 	mov	r0,#_count_blockSize_65536_708
      003EFA 86 02            [24]11375 	mov	ar2,@r0
      003EFC 7E 00            [12]11376 	mov	r6,#0x00
      003EFE C3               [12]11377 	clr	c
      003EFF E5 66            [12]11378 	mov	a,_count_i_262144_721
      003F01 9A               [12]11379 	subb	a,r2
      003F02 E5 67            [12]11380 	mov	a,(_count_i_262144_721 + 1)
      003F04 9E               [12]11381 	subb	a,r6
      003F05 50 2A            [24]11382 	jnc	00267$
                                  11383 ;	.\ecen4350_lcd_v4.c:2683: d = (unsigned char __xdata*)(i+address);
      003F07 78 89            [12]11384 	mov	r0,#_count_address_65536_708
      003F09 E6               [12]11385 	mov	a,@r0
      003F0A 25 66            [12]11386 	add	a,_count_i_262144_721
      003F0C FC               [12]11387 	mov	r4,a
      003F0D 08               [12]11388 	inc	r0
      003F0E E6               [12]11389 	mov	a,@r0
      003F0F 35 67            [12]11390 	addc	a,(_count_i_262144_721 + 1)
      003F11 FE               [12]11391 	mov	r6,a
                                  11392 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                  11393 ;	assignBit
      003F12 C2 B5            [12]11394 	clr	_P3_5
                                  11395 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003F14 8C 82            [24]11396 	mov	dpl,r4
      003F16 8E 83            [24]11397 	mov	dph,r6
      003F18 E0               [24]11398 	movx	a,@dptr
      003F19 FC               [12]11399 	mov	r4,a
                                  11400 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                  11401 ;	assignBit
      003F1A D2 B5            [12]11402 	setb	_P3_5
                                  11403 ;	.\ecen4350_lcd_v4.c:2684: if(value == ramRead8(d)){
      003F1C 78 8C            [12]11404 	mov	r0,#_count_value_65536_708
      003F1E E6               [12]11405 	mov	a,@r0
      003F1F B5 04 05         [24]11406 	cjne	a,ar4,00209$
                                  11407 ;	.\ecen4350_lcd_v4.c:2685: noneFound = 0;
      003F22 78 8E            [12]11408 	mov	r0,#_count_noneFound_65536_708
      003F24 76 00            [12]11409 	mov	@r0,#0x00
                                  11410 ;	.\ecen4350_lcd_v4.c:2686: page++;
      003F26 0B               [12]11411 	inc	r3
      003F27                      11412 00209$:
                                  11413 ;	.\ecen4350_lcd_v4.c:2682: for(unsigned int i = 0; i < blockSize; i++) {
      003F27 05 66            [12]11414 	inc	_count_i_262144_721
      003F29 E4               [12]11415 	clr	a
      003F2A B5 66 CB         [24]11416 	cjne	a,_count_i_262144_721,00208$
      003F2D 05 67            [12]11417 	inc	(_count_i_262144_721 + 1)
      003F2F 80 C7            [24]11418 	sjmp	00208$
      003F31                      11419 00267$:
      003F31 8B 05            [24]11420 	mov	ar5,r3
                                  11421 ;	.\ecen4350_lcd_v4.c:2689: setCursor(0, 120);
      003F33 75 6B 78         [24]11422 	mov	_setCursor_PARM_2,#0x78
      003F36 75 6C 00         [24]11423 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F39 90 00 00         [24]11424 	mov	dptr,#0x0000
      003F3C C0 05            [24]11425 	push	ar5
      003F3E C0 03            [24]11426 	push	ar3
      003F40 12 05 51         [24]11427 	lcall	_setCursor
                                  11428 ;	.\ecen4350_lcd_v4.c:2690: setColorWhite();
      003F43 12 16 7F         [24]11429 	lcall	_setColorWhite
                                  11430 ;	.\ecen4350_lcd_v4.c:2691: LCD_string_write(" Found in\n ");
      003F46 90 64 7C         [24]11431 	mov	dptr,#___str_125
      003F49 75 F0 80         [24]11432 	mov	b,#0x80
      003F4C 12 10 6B         [24]11433 	lcall	_LCD_string_write
                                  11434 ;	.\ecen4350_lcd_v4.c:2692: setColorDefault();
      003F4F 12 16 2F         [24]11435 	lcall	_setColorDefault
                                  11436 ;	.\ecen4350_lcd_v4.c:2693: LCD_string_write("0x");
      003F52 90 5D 8D         [24]11437 	mov	dptr,#___str_2
      003F55 75 F0 80         [24]11438 	mov	b,#0x80
      003F58 12 10 6B         [24]11439 	lcall	_LCD_string_write
      003F5B D0 03            [24]11440 	pop	ar3
                                  11441 ;	.\ecen4350_lcd_v4.c:2694: print8Hex(page);
      003F5D 8B 82            [24]11442 	mov	dpl,r3
      003F5F 12 15 3C         [24]11443 	lcall	_print8Hex
                                  11444 ;	.\ecen4350_lcd_v4.c:2695: LCD_string_write(" Bytes (Hex)\n ");
      003F62 90 64 88         [24]11445 	mov	dptr,#___str_126
      003F65 75 F0 80         [24]11446 	mov	b,#0x80
      003F68 12 10 6B         [24]11447 	lcall	_LCD_string_write
      003F6B D0 05            [24]11448 	pop	ar5
                                  11449 ;	.\ecen4350_lcd_v4.c:2696: exit = 0;
      003F6D 78 8F            [12]11450 	mov	r0,#_count_exit_65536_708
      003F6F 76 00            [12]11451 	mov	@r0,#0x00
      003F71 02 43 D5         [24]11452 	ljmp	00194$
      003F74                      11453 00193$:
                                  11454 ;	.\ecen4350_lcd_v4.c:2698: setCursor(0, 60);
      003F74 75 6B 3C         [24]11455 	mov	_setCursor_PARM_2,#0x3c
      003F77 75 6C 00         [24]11456 	mov	(_setCursor_PARM_2 + 1),#0x00
      003F7A 90 00 00         [24]11457 	mov	dptr,#0x0000
      003F7D C0 05            [24]11458 	push	ar5
      003F7F 12 05 51         [24]11459 	lcall	_setCursor
                                  11460 ;	.\ecen4350_lcd_v4.c:2699: setColorYellow();
      003F82 12 16 95         [24]11461 	lcall	_setColorYellow
                                  11462 ;	.\ecen4350_lcd_v4.c:2700: LCD_string_write(" [Interactive]\n");
      003F85 90 63 46         [24]11463 	mov	dptr,#___str_108
      003F88 75 F0 80         [24]11464 	mov	b,#0x80
      003F8B 12 10 6B         [24]11465 	lcall	_LCD_string_write
                                  11466 ;	.\ecen4350_lcd_v4.c:2701: setColorWhite();
      003F8E 12 16 7F         [24]11467 	lcall	_setColorWhite
                                  11468 ;	.\ecen4350_lcd_v4.c:2702: LCD_string_write(" Search Value:\n ");
      003F91 90 63 1B         [24]11469 	mov	dptr,#___str_105
      003F94 75 F0 80         [24]11470 	mov	b,#0x80
      003F97 12 10 6B         [24]11471 	lcall	_LCD_string_write
                                  11472 ;	.\ecen4350_lcd_v4.c:2703: setColorDefault();
      003F9A 12 16 2F         [24]11473 	lcall	_setColorDefault
      003F9D D0 05            [24]11474 	pop	ar5
                                  11475 ;	.\ecen4350_lcd_v4.c:2706: for (unsigned int i = 0; i < blockSize; i++) {
      003F9F E4               [12]11476 	clr	a
      003FA0 F5 69            [12]11477 	mov	_count_sloc1_1_0,a
      003FA2 F5 6A            [12]11478 	mov	(_count_sloc1_1_0 + 1),a
      003FA4                      11479 00211$:
      003FA4 78 8B            [12]11480 	mov	r0,#_count_blockSize_65536_708
      003FA6 86 02            [24]11481 	mov	ar2,@r0
      003FA8 7B 00            [12]11482 	mov	r3,#0x00
      003FAA C3               [12]11483 	clr	c
      003FAB E5 69            [12]11484 	mov	a,_count_sloc1_1_0
      003FAD 9A               [12]11485 	subb	a,r2
      003FAE E5 6A            [12]11486 	mov	a,(_count_sloc1_1_0 + 1)
      003FB0 9B               [12]11487 	subb	a,r3
      003FB1 40 03            [24]11488 	jc	00553$
      003FB3 02 43 D5         [24]11489 	ljmp	00194$
      003FB6                      11490 00553$:
                                  11491 ;	.\ecen4350_lcd_v4.c:2707: d = (unsigned char __xdata*)(i+address);
      003FB6 78 89            [12]11492 	mov	r0,#_count_address_65536_708
      003FB8 E6               [12]11493 	mov	a,@r0
      003FB9 25 69            [12]11494 	add	a,_count_sloc1_1_0
      003FBB FA               [12]11495 	mov	r2,a
      003FBC 08               [12]11496 	inc	r0
      003FBD E6               [12]11497 	mov	a,@r0
      003FBE 35 6A            [12]11498 	addc	a,(_count_sloc1_1_0 + 1)
      003FC0 FB               [12]11499 	mov	r3,a
      003FC1 8A 82            [24]11500 	mov	dpl,r2
      003FC3 8B 83            [24]11501 	mov	dph,r3
                                  11502 ;	.\ecen4350_lcd_v4.c:115: IOM = 0;
                                  11503 ;	assignBit
      003FC5 C2 B5            [12]11504 	clr	_P3_5
                                  11505 ;	.\ecen4350_lcd_v4.c:116: d = *map_address;
      003FC7 E0               [24]11506 	movx	a,@dptr
      003FC8 FB               [12]11507 	mov	r3,a
                                  11508 ;	.\ecen4350_lcd_v4.c:117: IOM = 1;
                                  11509 ;	assignBit
      003FC9 D2 B5            [12]11510 	setb	_P3_5
                                  11511 ;	.\ecen4350_lcd_v4.c:2708: if(value == ramRead8(d)){
      003FCB 78 8C            [12]11512 	mov	r0,#_count_value_65536_708
      003FCD E6               [12]11513 	mov	a,@r0
      003FCE B5 03 02         [24]11514 	cjne	a,ar3,00554$
      003FD1 80 03            [24]11515 	sjmp	00555$
      003FD3                      11516 00554$:
      003FD3 02 43 CA         [24]11517 	ljmp	00212$
      003FD6                      11518 00555$:
                                  11519 ;	.\ecen4350_lcd_v4.c:2709: noneFound = 0;		// toggle flag
      003FD6 78 8E            [12]11520 	mov	r0,#_count_noneFound_65536_708
      003FD8 76 00            [12]11521 	mov	@r0,#0x00
                                  11522 ;	.\ecen4350_lcd_v4.c:2710: setCursor(0, 120);
      003FDA 75 6B 78         [24]11523 	mov	_setCursor_PARM_2,#0x78
      003FDD 75 6C 00         [24]11524 	mov	(_setCursor_PARM_2 + 1),#0x00
      003FE0 90 00 00         [24]11525 	mov	dptr,#0x0000
      003FE3 C0 05            [24]11526 	push	ar5
      003FE5 12 05 51         [24]11527 	lcall	_setCursor
                                  11528 ;	.\ecen4350_lcd_v4.c:2711: setColorWhite();
      003FE8 12 16 7F         [24]11529 	lcall	_setColorWhite
                                  11530 ;	.\ecen4350_lcd_v4.c:2712: LCD_string_write(" Found at Location \n");
      003FEB 90 63 56         [24]11531 	mov	dptr,#___str_109
      003FEE 75 F0 80         [24]11532 	mov	b,#0x80
      003FF1 12 10 6B         [24]11533 	lcall	_LCD_string_write
                                  11534 ;	.\ecen4350_lcd_v4.c:2713: setColorDefault();
      003FF4 12 16 2F         [24]11535 	lcall	_setColorDefault
                                  11536 ;	.\ecen4350_lcd_v4.c:2714: LCD_string_write(" 0x");
      003FF7 90 5F B2         [24]11537 	mov	dptr,#___str_46
      003FFA 75 F0 80         [24]11538 	mov	b,#0x80
      003FFD 12 10 6B         [24]11539 	lcall	_LCD_string_write
      004000 D0 05            [24]11540 	pop	ar5
                                  11541 ;	.\ecen4350_lcd_v4.c:2715: print16Hex(page+address);
      004002 8D 02            [24]11542 	mov	ar2,r5
      004004 7B 00            [12]11543 	mov	r3,#0x00
      004006 78 89            [12]11544 	mov	r0,#_count_address_65536_708
      004008 E6               [12]11545 	mov	a,@r0
      004009 2A               [12]11546 	add	a,r2
      00400A F5 82            [12]11547 	mov	dpl,a
      00400C 08               [12]11548 	inc	r0
      00400D E6               [12]11549 	mov	a,@r0
      00400E 3B               [12]11550 	addc	a,r3
      00400F F5 83            [12]11551 	mov	dph,a
      004011 C0 05            [24]11552 	push	ar5
      004013 12 15 53         [24]11553 	lcall	_print16Hex
                                  11554 ;	.\ecen4350_lcd_v4.c:2716: setCursor(50, 300);
      004016 75 6B 2C         [24]11555 	mov	_setCursor_PARM_2,#0x2c
      004019 75 6C 01         [24]11556 	mov	(_setCursor_PARM_2 + 1),#0x01
      00401C 90 00 32         [24]11557 	mov	dptr,#0x0032
      00401F 12 05 51         [24]11558 	lcall	_setCursor
                                  11559 ;	.\ecen4350_lcd_v4.c:2717: setColorGray();
      004022 12 16 5D         [24]11560 	lcall	_setColorGray
                                  11561 ;	.\ecen4350_lcd_v4.c:2718: LCD_string_write("Count: ");
      004025 90 64 97         [24]11562 	mov	dptr,#___str_127
      004028 75 F0 80         [24]11563 	mov	b,#0x80
      00402B 12 10 6B         [24]11564 	lcall	_LCD_string_write
                                  11565 ;	.\ecen4350_lcd_v4.c:2719: setColorHighlight2();
      00402E 12 16 51         [24]11566 	lcall	_setColorHighlight2
      004031 D0 05            [24]11567 	pop	ar5
                                  11568 ;	.\ecen4350_lcd_v4.c:2720: print8Hex(page+1);
      004033 8D 03            [24]11569 	mov	ar3,r5
      004035 EB               [12]11570 	mov	a,r3
      004036 04               [12]11571 	inc	a
      004037 F5 82            [12]11572 	mov	dpl,a
      004039 C0 05            [24]11573 	push	ar5
      00403B 12 15 3C         [24]11574 	lcall	_print8Hex
      00403E D0 05            [24]11575 	pop	ar5
                                  11576 ;	.\ecen4350_lcd_v4.c:2724: if (i == 0) {					// At beginning, page <0>
      004040 E5 69            [12]11577 	mov	a,_count_sloc1_1_0
      004042 45 6A            [12]11578 	orl	a,(_count_sloc1_1_0 + 1)
      004044 60 03            [24]11579 	jz	00556$
      004046 02 41 75         [24]11580 	ljmp	00187$
      004049                      11581 00556$:
                                  11582 ;	.\ecen4350_lcd_v4.c:2725: if (i != blockSize - 1) {	// not at the end yet, no previous page
      004049 C0 05            [24]11583 	push	ar5
      00404B 78 8B            [12]11584 	mov	r0,#_count_blockSize_65536_708
      00404D 86 02            [24]11585 	mov	ar2,@r0
      00404F 7B 00            [12]11586 	mov	r3,#0x00
      004051 EA               [12]11587 	mov	a,r2
      004052 24 FF            [12]11588 	add	a,#0xff
      004054 FD               [12]11589 	mov	r5,a
      004055 EB               [12]11590 	mov	a,r3
      004056 34 FF            [12]11591 	addc	a,#0xff
      004058 FF               [12]11592 	mov	r7,a
      004059 ED               [12]11593 	mov	a,r5
      00405A B5 69 09         [24]11594 	cjne	a,_count_sloc1_1_0,00557$
      00405D EF               [12]11595 	mov	a,r7
      00405E B5 6A 05         [24]11596 	cjne	a,(_count_sloc1_1_0 + 1),00557$
      004061 D0 05            [24]11597 	pop	ar5
      004063 02 40 F6         [24]11598 	ljmp	00145$
      004066                      11599 00557$:
                                  11600 ;	.\ecen4350_lcd_v4.c:2726: setCursor(0, 180);
      004066 75 6B B4         [24]11601 	mov	_setCursor_PARM_2,#0xb4
      004069 75 6C 00         [24]11602 	mov	(_setCursor_PARM_2 + 1),#0x00
      00406C 90 00 00         [24]11603 	mov	dptr,#0x0000
      00406F 12 05 51         [24]11604 	lcall	_setCursor
                                  11605 ;	.\ecen4350_lcd_v4.c:2727: setColorWhite();
      004072 12 16 7F         [24]11606 	lcall	_setColorWhite
                                  11607 ;	.\ecen4350_lcd_v4.c:2728: LCD_string_write(" <1> Next\n <0> Exit\n              ");
      004075 90 63 72         [24]11608 	mov	dptr,#___str_111
      004078 75 F0 80         [24]11609 	mov	b,#0x80
      00407B 12 10 6B         [24]11610 	lcall	_LCD_string_write
      00407E D0 05            [24]11611 	pop	ar5
                                  11612 ;	.\ecen4350_lcd_v4.c:2729: invalidInput = 1;
      004080 7F 01            [12]11613 	mov	r7,#0x01
                                  11614 ;	.\ecen4350_lcd_v4.c:2730: while (invalidInput) {
      004082 8D 68            [24]11615 	mov	_count_sloc0_1_0,r5
      004084                      11616 00134$:
      004084 EF               [12]11617 	mov	a,r7
      004085 70 03            [24]11618 	jnz	00558$
      004087 02 41 68         [24]11619 	ljmp	00268$
      00408A                      11620 00558$:
                                  11621 ;	.\ecen4350_lcd_v4.c:2731: selection = keyDetect();
      00408A C0 07            [24]11622 	push	ar7
      00408C 12 11 89         [24]11623 	lcall	_keyDetect
      00408F AF 82            [24]11624 	mov	r7,dpl
      004091 78 71            [12]11625 	mov	r0,#_selection
      004093 A6 07            [24]11626 	mov	@r0,ar7
                                  11627 ;	.\ecen4350_lcd_v4.c:2732: if(selection == '1'){
      004095 BF 31 02         [24]11628 	cjne	r7,#0x31,00559$
      004098 80 04            [24]11629 	sjmp	00560$
      00409A                      11630 00559$:
      00409A D0 07            [24]11631 	pop	ar7
      00409C 80 27            [24]11632 	sjmp	00131$
      00409E                      11633 00560$:
      00409E D0 07            [24]11634 	pop	ar7
                                  11635 ;	.\ecen4350_lcd_v4.c:2733: setCursor(0, 180);
      0040A0 75 6B B4         [24]11636 	mov	_setCursor_PARM_2,#0xb4
      0040A3 75 6C 00         [24]11637 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040A6 90 00 00         [24]11638 	mov	dptr,#0x0000
      0040A9 12 05 51         [24]11639 	lcall	_setCursor
                                  11640 ;	.\ecen4350_lcd_v4.c:2734: LCD_string_write(" ");
      0040AC 90 5E B8         [24]11641 	mov	dptr,#___str_30
      0040AF 75 F0 80         [24]11642 	mov	b,#0x80
      0040B2 12 10 6B         [24]11643 	lcall	_LCD_string_write
                                  11644 ;	.\ecen4350_lcd_v4.c:2735: setColorHighlight2();
      0040B5 12 16 51         [24]11645 	lcall	_setColorHighlight2
                                  11646 ;	.\ecen4350_lcd_v4.c:2736: LCD_string_write("<1> Next");
      0040B8 90 63 95         [24]11647 	mov	dptr,#___str_112
      0040BB 75 F0 80         [24]11648 	mov	b,#0x80
      0040BE 12 10 6B         [24]11649 	lcall	_LCD_string_write
                                  11650 ;	.\ecen4350_lcd_v4.c:2737: invalidInput = 0;
      0040C1 7F 00            [12]11651 	mov	r7,#0x00
                                  11652 ;	.\ecen4350_lcd_v4.c:2738: page++;
      0040C3 05 68            [12]11653 	inc	_count_sloc0_1_0
      0040C5                      11654 00131$:
                                  11655 ;	.\ecen4350_lcd_v4.c:2739: } if(selection == '0') {
      0040C5 78 71            [12]11656 	mov	r0,#_selection
      0040C7 B6 30 BA         [24]11657 	cjne	@r0,#0x30,00134$
                                  11658 ;	.\ecen4350_lcd_v4.c:2740: setColorDefault();
      0040CA 12 16 2F         [24]11659 	lcall	_setColorDefault
                                  11660 ;	.\ecen4350_lcd_v4.c:2741: setCursor(0, 180);
      0040CD 75 6B B4         [24]11661 	mov	_setCursor_PARM_2,#0xb4
      0040D0 75 6C 00         [24]11662 	mov	(_setCursor_PARM_2 + 1),#0x00
      0040D3 90 00 00         [24]11663 	mov	dptr,#0x0000
      0040D6 12 05 51         [24]11664 	lcall	_setCursor
                                  11665 ;	.\ecen4350_lcd_v4.c:2742: LCD_string_write("\n ");
      0040D9 90 60 C3         [24]11666 	mov	dptr,#___str_67
      0040DC 75 F0 80         [24]11667 	mov	b,#0x80
      0040DF 12 10 6B         [24]11668 	lcall	_LCD_string_write
                                  11669 ;	.\ecen4350_lcd_v4.c:2743: setColorHighlight2();
      0040E2 12 16 51         [24]11670 	lcall	_setColorHighlight2
                                  11671 ;	.\ecen4350_lcd_v4.c:2744: LCD_string_write("<0> Exit");
      0040E5 90 61 7E         [24]11672 	mov	dptr,#___str_78
      0040E8 75 F0 80         [24]11673 	mov	b,#0x80
      0040EB 12 10 6B         [24]11674 	lcall	_LCD_string_write
                                  11675 ;	.\ecen4350_lcd_v4.c:2745: exit = 0;		// set exit flag
      0040EE 78 8F            [12]11676 	mov	r0,#_count_exit_65536_708
      0040F0 76 00            [12]11677 	mov	@r0,#0x00
                                  11678 ;	.\ecen4350_lcd_v4.c:2746: invalidInput = 0;
      0040F2 7F 00            [12]11679 	mov	r7,#0x00
      0040F4 80 8E            [24]11680 	sjmp	00134$
      0040F6                      11681 00145$:
                                  11682 ;	.\ecen4350_lcd_v4.c:2749: } else if (i == blockSize - 1) {	// starts at the end, no previous or next page
      0040F6 1A               [12]11683 	dec	r2
      0040F7 BA FF 01         [24]11684 	cjne	r2,#0xff,00563$
      0040FA 1B               [12]11685 	dec	r3
      0040FB                      11686 00563$:
      0040FB EA               [12]11687 	mov	a,r2
      0040FC B5 69 6B         [24]11688 	cjne	a,_count_sloc1_1_0,00146$
      0040FF EB               [12]11689 	mov	a,r3
      004100 B5 6A 67         [24]11690 	cjne	a,(_count_sloc1_1_0 + 1),00146$
                                  11691 ;	.\ecen4350_lcd_v4.c:2750: setCursor(0, 180);
      004103 75 6B B4         [24]11692 	mov	_setCursor_PARM_2,#0xb4
      004106 75 6C 00         [24]11693 	mov	(_setCursor_PARM_2 + 1),#0x00
      004109 90 00 00         [24]11694 	mov	dptr,#0x0000
      00410C C0 05            [24]11695 	push	ar5
      00410E 12 05 51         [24]11696 	lcall	_setCursor
                                  11697 ;	.\ecen4350_lcd_v4.c:2751: setColorWhite();
      004111 12 16 7F         [24]11698 	lcall	_setColorWhite
                                  11699 ;	.\ecen4350_lcd_v4.c:2752: LCD_string_write("          \n <0> Exit\n              ");
      004114 90 63 9E         [24]11700 	mov	dptr,#___str_113
      004117 75 F0 80         [24]11701 	mov	b,#0x80
      00411A 12 10 6B         [24]11702 	lcall	_LCD_string_write
      00411D D0 05            [24]11703 	pop	ar5
                                  11704 ;	.\ecen4350_lcd_v4.c:2753: invalidInput = 1;
      00411F 7F 01            [12]11705 	mov	r7,#0x01
                                  11706 ;	.\ecen4350_lcd_v4.c:2754: while (invalidInput) {
      004121                      11707 00139$:
      004121 EF               [12]11708 	mov	a,r7
      004122 60 46            [24]11709 	jz	00146$
                                  11710 ;	.\ecen4350_lcd_v4.c:2755: selection = keyDetect();
      004124 C0 07            [24]11711 	push	ar7
      004126 C0 05            [24]11712 	push	ar5
      004128 12 11 89         [24]11713 	lcall	_keyDetect
      00412B AB 82            [24]11714 	mov	r3,dpl
      00412D D0 05            [24]11715 	pop	ar5
      00412F D0 07            [24]11716 	pop	ar7
      004131 78 71            [12]11717 	mov	r0,#_selection
      004133 A6 03            [24]11718 	mov	@r0,ar3
                                  11719 ;	.\ecen4350_lcd_v4.c:2756: if(selection == '0') {
      004135 BB 30 E9         [24]11720 	cjne	r3,#0x30,00139$
                                  11721 ;	.\ecen4350_lcd_v4.c:2757: setColorDefault();
      004138 C0 05            [24]11722 	push	ar5
      00413A 12 16 2F         [24]11723 	lcall	_setColorDefault
                                  11724 ;	.\ecen4350_lcd_v4.c:2758: setCursor(0, 180);
      00413D 75 6B B4         [24]11725 	mov	_setCursor_PARM_2,#0xb4
      004140 75 6C 00         [24]11726 	mov	(_setCursor_PARM_2 + 1),#0x00
      004143 90 00 00         [24]11727 	mov	dptr,#0x0000
      004146 12 05 51         [24]11728 	lcall	_setCursor
                                  11729 ;	.\ecen4350_lcd_v4.c:2759: LCD_string_write("\n ");
      004149 90 60 C3         [24]11730 	mov	dptr,#___str_67
      00414C 75 F0 80         [24]11731 	mov	b,#0x80
      00414F 12 10 6B         [24]11732 	lcall	_LCD_string_write
                                  11733 ;	.\ecen4350_lcd_v4.c:2760: setColorHighlight2();
      004152 12 16 51         [24]11734 	lcall	_setColorHighlight2
                                  11735 ;	.\ecen4350_lcd_v4.c:2761: LCD_string_write("<0> Exit");
      004155 90 61 7E         [24]11736 	mov	dptr,#___str_78
      004158 75 F0 80         [24]11737 	mov	b,#0x80
      00415B 12 10 6B         [24]11738 	lcall	_LCD_string_write
      00415E D0 05            [24]11739 	pop	ar5
                                  11740 ;	.\ecen4350_lcd_v4.c:2762: exit = 0;		// set exit flag
      004160 78 8F            [12]11741 	mov	r0,#_count_exit_65536_708
      004162 76 00            [12]11742 	mov	@r0,#0x00
                                  11743 ;	.\ecen4350_lcd_v4.c:2763: invalidInput = 0;
      004164 7F 00            [12]11744 	mov	r7,#0x00
      004166 80 B9            [24]11745 	sjmp	00139$
      004168                      11746 00268$:
      004168 AD 68            [24]11747 	mov	r5,_count_sloc0_1_0
      00416A                      11748 00146$:
                                  11749 ;	.\ecen4350_lcd_v4.c:2767: if (exit == 0) {	// check exit flag
      00416A 78 8F            [12]11750 	mov	r0,#_count_exit_65536_708
      00416C E6               [12]11751 	mov	a,@r0
      00416D 60 03            [24]11752 	jz	00569$
      00416F 02 43 CA         [24]11753 	ljmp	00212$
      004172                      11754 00569$:
                                  11755 ;	.\ecen4350_lcd_v4.c:2768: break;			// break out of for loop iteration
      004172 02 43 D5         [24]11756 	ljmp	00194$
      004175                      11757 00187$:
                                  11758 ;	.\ecen4350_lcd_v4.c:2773: else if (i == blockSize - 1) {		// At Page End 
      004175 C0 05            [24]11759 	push	ar5
      004177 78 8B            [12]11760 	mov	r0,#_count_blockSize_65536_708
      004179 86 03            [24]11761 	mov	ar3,@r0
      00417B 7F 00            [12]11762 	mov	r7,#0x00
      00417D EB               [12]11763 	mov	a,r3
      00417E 24 FF            [12]11764 	add	a,#0xff
      004180 FA               [12]11765 	mov	r2,a
      004181 EF               [12]11766 	mov	a,r7
      004182 34 FF            [12]11767 	addc	a,#0xff
      004184 FD               [12]11768 	mov	r5,a
      004185 EA               [12]11769 	mov	a,r2
      004186 B5 69 06         [24]11770 	cjne	a,_count_sloc1_1_0,00570$
      004189 ED               [12]11771 	mov	a,r5
      00418A B5 6A 02         [24]11772 	cjne	a,(_count_sloc1_1_0 + 1),00570$
      00418D 80 05            [24]11773 	sjmp	00571$
      00418F                      11774 00570$:
      00418F D0 05            [24]11775 	pop	ar5
      004191 02 42 C1         [24]11776 	ljmp	00184$
      004194                      11777 00571$:
      004194 D0 05            [24]11778 	pop	ar5
                                  11779 ;	.\ecen4350_lcd_v4.c:2774: if (i != 0) {				// not at beginning, no next page
      004196 E5 69            [12]11780 	mov	a,_count_sloc1_1_0
      004198 45 6A            [12]11781 	orl	a,(_count_sloc1_1_0 + 1)
      00419A 70 03            [24]11782 	jnz	00572$
      00419C 02 42 4A         [24]11783 	ljmp	00164$
      00419F                      11784 00572$:
                                  11785 ;	.\ecen4350_lcd_v4.c:2775: setCursor(0, 180);
      00419F 75 6B B4         [24]11786 	mov	_setCursor_PARM_2,#0xb4
      0041A2 75 6C 00         [24]11787 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041A5 90 00 00         [24]11788 	mov	dptr,#0x0000
      0041A8 C0 05            [24]11789 	push	ar5
      0041AA 12 05 51         [24]11790 	lcall	_setCursor
                                  11791 ;	.\ecen4350_lcd_v4.c:2776: setColorWhite();
      0041AD 12 16 7F         [24]11792 	lcall	_setColorWhite
                                  11793 ;	.\ecen4350_lcd_v4.c:2777: LCD_string_write("          \n <0> Exit\n <2> Previous");
      0041B0 90 63 C2         [24]11794 	mov	dptr,#___str_114
      0041B3 75 F0 80         [24]11795 	mov	b,#0x80
      0041B6 12 10 6B         [24]11796 	lcall	_LCD_string_write
      0041B9 D0 05            [24]11797 	pop	ar5
                                  11798 ;	.\ecen4350_lcd_v4.c:2778: invalidInput = 1;
      0041BB 7F 01            [12]11799 	mov	r7,#0x01
                                  11800 ;	.\ecen4350_lcd_v4.c:2779: while (invalidInput) {
      0041BD 8D 68            [24]11801 	mov	_count_sloc0_1_0,r5
      0041BF                      11802 00153$:
      0041BF EF               [12]11803 	mov	a,r7
      0041C0 70 03            [24]11804 	jnz	00573$
      0041C2 02 42 B4         [24]11805 	ljmp	00269$
      0041C5                      11806 00573$:
                                  11807 ;	.\ecen4350_lcd_v4.c:2780: selection = keyDetect();
      0041C5 C0 07            [24]11808 	push	ar7
      0041C7 C0 07            [24]11809 	push	ar7
      0041C9 12 11 89         [24]11810 	lcall	_keyDetect
      0041CC AA 82            [24]11811 	mov	r2,dpl
      0041CE D0 07            [24]11812 	pop	ar7
      0041D0 78 71            [12]11813 	mov	r0,#_selection
      0041D2 A6 02            [24]11814 	mov	@r0,ar2
                                  11815 ;	.\ecen4350_lcd_v4.c:2781: if(selection == '0'){
      0041D4 BA 30 02         [24]11816 	cjne	r2,#0x30,00574$
      0041D7 80 04            [24]11817 	sjmp	00575$
      0041D9                      11818 00574$:
      0041D9 D0 07            [24]11819 	pop	ar7
      0041DB 80 29            [24]11820 	sjmp	00150$
      0041DD                      11821 00575$:
      0041DD D0 07            [24]11822 	pop	ar7
                                  11823 ;	.\ecen4350_lcd_v4.c:2782: setCursor(0, 180);
      0041DF 75 6B B4         [24]11824 	mov	_setCursor_PARM_2,#0xb4
      0041E2 75 6C 00         [24]11825 	mov	(_setCursor_PARM_2 + 1),#0x00
      0041E5 90 00 00         [24]11826 	mov	dptr,#0x0000
      0041E8 12 05 51         [24]11827 	lcall	_setCursor
                                  11828 ;	.\ecen4350_lcd_v4.c:2783: LCD_string_write("\n ");
      0041EB 90 60 C3         [24]11829 	mov	dptr,#___str_67
      0041EE 75 F0 80         [24]11830 	mov	b,#0x80
      0041F1 12 10 6B         [24]11831 	lcall	_LCD_string_write
                                  11832 ;	.\ecen4350_lcd_v4.c:2784: setColorHighlight2();
      0041F4 12 16 51         [24]11833 	lcall	_setColorHighlight2
                                  11834 ;	.\ecen4350_lcd_v4.c:2785: LCD_string_write("<0> Exit\n");
      0041F7 90 5F F8         [24]11835 	mov	dptr,#___str_54
      0041FA 75 F0 80         [24]11836 	mov	b,#0x80
      0041FD 12 10 6B         [24]11837 	lcall	_LCD_string_write
                                  11838 ;	.\ecen4350_lcd_v4.c:2786: invalidInput = 0;
      004200 7F 00            [12]11839 	mov	r7,#0x00
                                  11840 ;	.\ecen4350_lcd_v4.c:2787: exit = 0;
      004202 78 8F            [12]11841 	mov	r0,#_count_exit_65536_708
      004204 76 00            [12]11842 	mov	@r0,#0x00
      004206                      11843 00150$:
                                  11844 ;	.\ecen4350_lcd_v4.c:2788: } if (selection == '2') {
      004206 78 71            [12]11845 	mov	r0,#_selection
      004208 B6 32 B4         [24]11846 	cjne	@r0,#0x32,00153$
                                  11847 ;	.\ecen4350_lcd_v4.c:2789: setCursor(0, 180);
      00420B 75 6B B4         [24]11848 	mov	_setCursor_PARM_2,#0xb4
      00420E 75 6C 00         [24]11849 	mov	(_setCursor_PARM_2 + 1),#0x00
      004211 90 00 00         [24]11850 	mov	dptr,#0x0000
      004214 12 05 51         [24]11851 	lcall	_setCursor
                                  11852 ;	.\ecen4350_lcd_v4.c:2790: setColorWhite();
      004217 12 16 7F         [24]11853 	lcall	_setColorWhite
                                  11854 ;	.\ecen4350_lcd_v4.c:2791: LCD_string_write("\n\n ");
      00421A 90 63 E5         [24]11855 	mov	dptr,#___str_115
      00421D 75 F0 80         [24]11856 	mov	b,#0x80
      004220 12 10 6B         [24]11857 	lcall	_LCD_string_write
                                  11858 ;	.\ecen4350_lcd_v4.c:2792: setColorHighlight2();
      004223 12 16 51         [24]11859 	lcall	_setColorHighlight2
                                  11860 ;	.\ecen4350_lcd_v4.c:2793: LCD_string_write("<2> Previous");
      004226 90 63 E9         [24]11861 	mov	dptr,#___str_116
      004229 75 F0 80         [24]11862 	mov	b,#0x80
      00422C 12 10 6B         [24]11863 	lcall	_LCD_string_write
                                  11864 ;	.\ecen4350_lcd_v4.c:2794: invalidInput = 0;
      00422F 7F 00            [12]11865 	mov	r7,#0x00
                                  11866 ;	.\ecen4350_lcd_v4.c:2795: i--;			// two decrements plus next loop increment is equal to one decrement
      004231 E5 69            [12]11867 	mov	a,_count_sloc1_1_0
      004233 24 FF            [12]11868 	add	a,#0xff
      004235 FA               [12]11869 	mov	r2,a
      004236 E5 6A            [12]11870 	mov	a,(_count_sloc1_1_0 + 1)
      004238 34 FF            [12]11871 	addc	a,#0xff
      00423A FE               [12]11872 	mov	r6,a
                                  11873 ;	.\ecen4350_lcd_v4.c:2796: i--;
      00423B EA               [12]11874 	mov	a,r2
      00423C 24 FF            [12]11875 	add	a,#0xff
      00423E F5 69            [12]11876 	mov	_count_sloc1_1_0,a
      004240 EE               [12]11877 	mov	a,r6
      004241 34 FF            [12]11878 	addc	a,#0xff
      004243 F5 6A            [12]11879 	mov	(_count_sloc1_1_0 + 1),a
                                  11880 ;	.\ecen4350_lcd_v4.c:2797: page--;			// decrement to previous page
      004245 15 68            [12]11881 	dec	_count_sloc0_1_0
      004247 02 41 BF         [24]11882 	ljmp	00153$
      00424A                      11883 00164$:
                                  11884 ;	.\ecen4350_lcd_v4.c:2801: else if (i == 0){				// end at beginning, no next or previous
      00424A E5 69            [12]11885 	mov	a,_count_sloc1_1_0
      00424C 45 6A            [12]11886 	orl	a,(_count_sloc1_1_0 + 1)
                                  11887 ;	.\ecen4350_lcd_v4.c:2802: setCursor(0, 180);
      00424E 70 66            [24]11888 	jnz	00165$
      004250 75 6B B4         [24]11889 	mov	_setCursor_PARM_2,#0xb4
      004253 F5 6C            [12]11890 	mov	(_setCursor_PARM_2 + 1),a
      004255 90 00 00         [24]11891 	mov	dptr,#0x0000
      004258 C0 05            [24]11892 	push	ar5
      00425A 12 05 51         [24]11893 	lcall	_setCursor
                                  11894 ;	.\ecen4350_lcd_v4.c:2803: setColorWhite();
      00425D 12 16 7F         [24]11895 	lcall	_setColorWhite
                                  11896 ;	.\ecen4350_lcd_v4.c:2804: LCD_string_write("          \n <0> Exit\n              ");
      004260 90 63 9E         [24]11897 	mov	dptr,#___str_113
      004263 75 F0 80         [24]11898 	mov	b,#0x80
      004266 12 10 6B         [24]11899 	lcall	_LCD_string_write
      004269 D0 05            [24]11900 	pop	ar5
                                  11901 ;	.\ecen4350_lcd_v4.c:2805: invalidInput = 1;
      00426B 7E 01            [12]11902 	mov	r6,#0x01
                                  11903 ;	.\ecen4350_lcd_v4.c:2806: while (invalidInput) {
      00426D                      11904 00158$:
      00426D EE               [12]11905 	mov	a,r6
      00426E 60 46            [24]11906 	jz	00165$
                                  11907 ;	.\ecen4350_lcd_v4.c:2807: selection = keyDetect();
      004270 C0 06            [24]11908 	push	ar6
      004272 C0 05            [24]11909 	push	ar5
      004274 12 11 89         [24]11910 	lcall	_keyDetect
      004277 AC 82            [24]11911 	mov	r4,dpl
      004279 D0 05            [24]11912 	pop	ar5
      00427B D0 06            [24]11913 	pop	ar6
      00427D 78 71            [12]11914 	mov	r0,#_selection
      00427F A6 04            [24]11915 	mov	@r0,ar4
                                  11916 ;	.\ecen4350_lcd_v4.c:2808: if(selection == '0') {
      004281 BC 30 E9         [24]11917 	cjne	r4,#0x30,00158$
                                  11918 ;	.\ecen4350_lcd_v4.c:2809: setColorDefault();
      004284 C0 05            [24]11919 	push	ar5
      004286 12 16 2F         [24]11920 	lcall	_setColorDefault
                                  11921 ;	.\ecen4350_lcd_v4.c:2810: setCursor(0, 180);
      004289 75 6B B4         [24]11922 	mov	_setCursor_PARM_2,#0xb4
      00428C 75 6C 00         [24]11923 	mov	(_setCursor_PARM_2 + 1),#0x00
      00428F 90 00 00         [24]11924 	mov	dptr,#0x0000
      004292 12 05 51         [24]11925 	lcall	_setCursor
                                  11926 ;	.\ecen4350_lcd_v4.c:2811: LCD_string_write("\n ");
      004295 90 60 C3         [24]11927 	mov	dptr,#___str_67
      004298 75 F0 80         [24]11928 	mov	b,#0x80
      00429B 12 10 6B         [24]11929 	lcall	_LCD_string_write
                                  11930 ;	.\ecen4350_lcd_v4.c:2812: setColorHighlight2();
      00429E 12 16 51         [24]11931 	lcall	_setColorHighlight2
                                  11932 ;	.\ecen4350_lcd_v4.c:2813: LCD_string_write("<0> Exit");
      0042A1 90 61 7E         [24]11933 	mov	dptr,#___str_78
      0042A4 75 F0 80         [24]11934 	mov	b,#0x80
      0042A7 12 10 6B         [24]11935 	lcall	_LCD_string_write
      0042AA D0 05            [24]11936 	pop	ar5
                                  11937 ;	.\ecen4350_lcd_v4.c:2814: exit = 0;		// set exit flag
      0042AC 78 8F            [12]11938 	mov	r0,#_count_exit_65536_708
      0042AE 76 00            [12]11939 	mov	@r0,#0x00
                                  11940 ;	.\ecen4350_lcd_v4.c:2815: invalidInput = 0;
      0042B0 7E 00            [12]11941 	mov	r6,#0x00
      0042B2 80 B9            [24]11942 	sjmp	00158$
      0042B4                      11943 00269$:
      0042B4 AD 68            [24]11944 	mov	r5,_count_sloc0_1_0
      0042B6                      11945 00165$:
                                  11946 ;	.\ecen4350_lcd_v4.c:2819: if (exit == 0) {	// check exit flag
      0042B6 78 8F            [12]11947 	mov	r0,#_count_exit_65536_708
      0042B8 E6               [12]11948 	mov	a,@r0
      0042B9 60 03            [24]11949 	jz	00582$
      0042BB 02 43 CA         [24]11950 	ljmp	00212$
      0042BE                      11951 00582$:
                                  11952 ;	.\ecen4350_lcd_v4.c:2820: break;			// break out of for loop iteration
      0042BE 02 43 D5         [24]11953 	ljmp	00194$
      0042C1                      11954 00184$:
                                  11955 ;	.\ecen4350_lcd_v4.c:2825: else if (i != blockSize - 1)  {	// in mid page, with previous and next options
      0042C1 1B               [12]11956 	dec	r3
      0042C2 BB FF 01         [24]11957 	cjne	r3,#0xff,00583$
      0042C5 1F               [12]11958 	dec	r7
      0042C6                      11959 00583$:
      0042C6 EB               [12]11960 	mov	a,r3
      0042C7 B5 69 07         [24]11961 	cjne	a,_count_sloc1_1_0,00584$
      0042CA EF               [12]11962 	mov	a,r7
      0042CB B5 6A 03         [24]11963 	cjne	a,(_count_sloc1_1_0 + 1),00584$
      0042CE 02 43 CA         [24]11964 	ljmp	00212$
      0042D1                      11965 00584$:
                                  11966 ;	.\ecen4350_lcd_v4.c:2826: if (i != 0) {
      0042D1 E5 69            [12]11967 	mov	a,_count_sloc1_1_0
      0042D3 45 6A            [12]11968 	orl	a,(_count_sloc1_1_0 + 1)
      0042D5 70 03            [24]11969 	jnz	00585$
      0042D7 02 43 C5         [24]11970 	ljmp	00178$
      0042DA                      11971 00585$:
                                  11972 ;	.\ecen4350_lcd_v4.c:2827: setCursor(0, 180);
      0042DA 75 6B B4         [24]11973 	mov	_setCursor_PARM_2,#0xb4
      0042DD 75 6C 00         [24]11974 	mov	(_setCursor_PARM_2 + 1),#0x00
      0042E0 90 00 00         [24]11975 	mov	dptr,#0x0000
      0042E3 C0 05            [24]11976 	push	ar5
      0042E5 12 05 51         [24]11977 	lcall	_setCursor
                                  11978 ;	.\ecen4350_lcd_v4.c:2828: setColorWhite();
      0042E8 12 16 7F         [24]11979 	lcall	_setColorWhite
                                  11980 ;	.\ecen4350_lcd_v4.c:2829: LCD_string_write(" <1> Next\n <0> Exit\n <2> Previous");
      0042EB 90 63 F6         [24]11981 	mov	dptr,#___str_117
      0042EE 75 F0 80         [24]11982 	mov	b,#0x80
      0042F1 12 10 6B         [24]11983 	lcall	_LCD_string_write
      0042F4 D0 05            [24]11984 	pop	ar5
                                  11985 ;	.\ecen4350_lcd_v4.c:2830: invalidInput = 1;
      0042F6 7F 01            [12]11986 	mov	r7,#0x01
                                  11987 ;	.\ecen4350_lcd_v4.c:2831: while (invalidInput) {
      0042F8                      11988 00174$:
      0042F8 EF               [12]11989 	mov	a,r7
      0042F9 70 03            [24]11990 	jnz	00586$
      0042FB 02 43 C5         [24]11991 	ljmp	00178$
      0042FE                      11992 00586$:
                                  11993 ;	.\ecen4350_lcd_v4.c:2832: selection = keyDetect();
      0042FE C0 07            [24]11994 	push	ar7
      004300 C0 05            [24]11995 	push	ar5
      004302 12 11 89         [24]11996 	lcall	_keyDetect
      004305 AE 82            [24]11997 	mov	r6,dpl
      004307 D0 05            [24]11998 	pop	ar5
      004309 D0 07            [24]11999 	pop	ar7
      00430B 78 71            [12]12000 	mov	r0,#_selection
      00430D A6 06            [24]12001 	mov	@r0,ar6
                                  12002 ;	.\ecen4350_lcd_v4.c:2833: if (selection == '1') {
      00430F BE 31 28         [24]12003 	cjne	r6,#0x31,00169$
                                  12004 ;	.\ecen4350_lcd_v4.c:2834: setCursor(0, 180);
      004312 75 6B B4         [24]12005 	mov	_setCursor_PARM_2,#0xb4
      004315 75 6C 00         [24]12006 	mov	(_setCursor_PARM_2 + 1),#0x00
      004318 90 00 00         [24]12007 	mov	dptr,#0x0000
      00431B C0 05            [24]12008 	push	ar5
      00431D 12 05 51         [24]12009 	lcall	_setCursor
                                  12010 ;	.\ecen4350_lcd_v4.c:2835: LCD_string_write(" ");
      004320 90 5E B8         [24]12011 	mov	dptr,#___str_30
      004323 75 F0 80         [24]12012 	mov	b,#0x80
      004326 12 10 6B         [24]12013 	lcall	_LCD_string_write
                                  12014 ;	.\ecen4350_lcd_v4.c:2836: setColorHighlight2();
      004329 12 16 51         [24]12015 	lcall	_setColorHighlight2
                                  12016 ;	.\ecen4350_lcd_v4.c:2837: LCD_string_write("<1> Next");
      00432C 90 63 95         [24]12017 	mov	dptr,#___str_112
      00432F 75 F0 80         [24]12018 	mov	b,#0x80
      004332 12 10 6B         [24]12019 	lcall	_LCD_string_write
      004335 D0 05            [24]12020 	pop	ar5
                                  12021 ;	.\ecen4350_lcd_v4.c:2838: invalidInput = 0;
      004337 7F 00            [12]12022 	mov	r7,#0x00
                                  12023 ;	.\ecen4350_lcd_v4.c:2839: page++;
      004339 0D               [12]12024 	inc	r5
      00433A                      12025 00169$:
                                  12026 ;	.\ecen4350_lcd_v4.c:2840: } if (selection == '2') {
      00433A 78 71            [12]12027 	mov	r0,#_selection
      00433C B6 32 3F         [24]12028 	cjne	@r0,#0x32,00171$
                                  12029 ;	.\ecen4350_lcd_v4.c:2841: setCursor(0, 180);
      00433F 75 6B B4         [24]12030 	mov	_setCursor_PARM_2,#0xb4
      004342 75 6C 00         [24]12031 	mov	(_setCursor_PARM_2 + 1),#0x00
      004345 90 00 00         [24]12032 	mov	dptr,#0x0000
      004348 C0 05            [24]12033 	push	ar5
      00434A 12 05 51         [24]12034 	lcall	_setCursor
                                  12035 ;	.\ecen4350_lcd_v4.c:2842: setColorWhite();
      00434D 12 16 7F         [24]12036 	lcall	_setColorWhite
                                  12037 ;	.\ecen4350_lcd_v4.c:2843: LCD_string_write("\n\n ");
      004350 90 63 E5         [24]12038 	mov	dptr,#___str_115
      004353 75 F0 80         [24]12039 	mov	b,#0x80
      004356 12 10 6B         [24]12040 	lcall	_LCD_string_write
                                  12041 ;	.\ecen4350_lcd_v4.c:2844: setColorHighlight2();
      004359 12 16 51         [24]12042 	lcall	_setColorHighlight2
                                  12043 ;	.\ecen4350_lcd_v4.c:2845: LCD_string_write("<2> Previous");
      00435C 90 63 E9         [24]12044 	mov	dptr,#___str_116
      00435F 75 F0 80         [24]12045 	mov	b,#0x80
      004362 12 10 6B         [24]12046 	lcall	_LCD_string_write
      004365 D0 05            [24]12047 	pop	ar5
                                  12048 ;	.\ecen4350_lcd_v4.c:2846: invalidInput = 0;
      004367 7F 00            [12]12049 	mov	r7,#0x00
                                  12050 ;	.\ecen4350_lcd_v4.c:2847: i--;
      004369 E5 69            [12]12051 	mov	a,_count_sloc1_1_0
      00436B 24 FF            [12]12052 	add	a,#0xff
      00436D FC               [12]12053 	mov	r4,a
      00436E E5 6A            [12]12054 	mov	a,(_count_sloc1_1_0 + 1)
      004370 34 FF            [12]12055 	addc	a,#0xff
      004372 FE               [12]12056 	mov	r6,a
                                  12057 ;	.\ecen4350_lcd_v4.c:2848: i--;		// two decrements plus next loop increment is equal to one decrement
      004373 EC               [12]12058 	mov	a,r4
      004374 24 FF            [12]12059 	add	a,#0xff
      004376 F5 69            [12]12060 	mov	_count_sloc1_1_0,a
      004378 EE               [12]12061 	mov	a,r6
      004379 34 FF            [12]12062 	addc	a,#0xff
      00437B F5 6A            [12]12063 	mov	(_count_sloc1_1_0 + 1),a
                                  12064 ;	.\ecen4350_lcd_v4.c:2849: page--;		// decrement to previous page
      00437D 1D               [12]12065 	dec	r5
      00437E                      12066 00171$:
                                  12067 ;	.\ecen4350_lcd_v4.c:2850: } if (selection == '0') {
      00437E 78 71            [12]12068 	mov	r0,#_selection
      004380 B6 30 02         [24]12069 	cjne	@r0,#0x30,00591$
      004383 80 03            [24]12070 	sjmp	00592$
      004385                      12071 00591$:
      004385 02 42 F8         [24]12072 	ljmp	00174$
      004388                      12073 00592$:
                                  12074 ;	.\ecen4350_lcd_v4.c:2851: setColorWhite();
      004388 C0 05            [24]12075 	push	ar5
      00438A 12 16 7F         [24]12076 	lcall	_setColorWhite
                                  12077 ;	.\ecen4350_lcd_v4.c:2852: setCursor(0, 180);
      00438D 75 6B B4         [24]12078 	mov	_setCursor_PARM_2,#0xb4
      004390 75 6C 00         [24]12079 	mov	(_setCursor_PARM_2 + 1),#0x00
      004393 90 00 00         [24]12080 	mov	dptr,#0x0000
      004396 12 05 51         [24]12081 	lcall	_setCursor
                                  12082 ;	.\ecen4350_lcd_v4.c:2853: LCD_string_write(" <1> Next\n ");
      004399 90 64 18         [24]12083 	mov	dptr,#___str_118
      00439C 75 F0 80         [24]12084 	mov	b,#0x80
      00439F 12 10 6B         [24]12085 	lcall	_LCD_string_write
                                  12086 ;	.\ecen4350_lcd_v4.c:2854: setColorHighlight2();
      0043A2 12 16 51         [24]12087 	lcall	_setColorHighlight2
                                  12088 ;	.\ecen4350_lcd_v4.c:2855: LCD_string_write("<0> Exit");
      0043A5 90 61 7E         [24]12089 	mov	dptr,#___str_78
      0043A8 75 F0 80         [24]12090 	mov	b,#0x80
      0043AB 12 10 6B         [24]12091 	lcall	_LCD_string_write
                                  12092 ;	.\ecen4350_lcd_v4.c:2856: setColorWhite();
      0043AE 12 16 7F         [24]12093 	lcall	_setColorWhite
                                  12094 ;	.\ecen4350_lcd_v4.c:2857: LCD_string_write("\n <2> Previous");
      0043B1 90 64 24         [24]12095 	mov	dptr,#___str_119
      0043B4 75 F0 80         [24]12096 	mov	b,#0x80
      0043B7 12 10 6B         [24]12097 	lcall	_LCD_string_write
      0043BA D0 05            [24]12098 	pop	ar5
                                  12099 ;	.\ecen4350_lcd_v4.c:2858: exit = 0;		// set exit flag
      0043BC 78 8F            [12]12100 	mov	r0,#_count_exit_65536_708
      0043BE 76 00            [12]12101 	mov	@r0,#0x00
                                  12102 ;	.\ecen4350_lcd_v4.c:2859: invalidInput = 0;
      0043C0 7F 00            [12]12103 	mov	r7,#0x00
      0043C2 02 42 F8         [24]12104 	ljmp	00174$
      0043C5                      12105 00178$:
                                  12106 ;	.\ecen4350_lcd_v4.c:2863: if (exit == 0) {		// check exit flag
      0043C5 78 8F            [12]12107 	mov	r0,#_count_exit_65536_708
      0043C7 E6               [12]12108 	mov	a,@r0
      0043C8 60 0B            [24]12109 	jz	00194$
                                  12110 ;	.\ecen4350_lcd_v4.c:2864: break;			// break out the loop
      0043CA                      12111 00212$:
                                  12112 ;	.\ecen4350_lcd_v4.c:2706: for (unsigned int i = 0; i < blockSize; i++) {
      0043CA 05 69            [12]12113 	inc	_count_sloc1_1_0
      0043CC E4               [12]12114 	clr	a
      0043CD B5 69 02         [24]12115 	cjne	a,_count_sloc1_1_0,00594$
      0043D0 05 6A            [12]12116 	inc	(_count_sloc1_1_0 + 1)
      0043D2                      12117 00594$:
      0043D2 02 3F A4         [24]12118 	ljmp	00211$
      0043D5                      12119 00194$:
                                  12120 ;	.\ecen4350_lcd_v4.c:2870: if(noneFound) {
      0043D5 78 8E            [12]12121 	mov	r0,#_count_noneFound_65536_708
      0043D7 E6               [12]12122 	mov	a,@r0
      0043D8 70 03            [24]12123 	jnz	00595$
      0043DA 02 3E AF         [24]12124 	ljmp	00202$
      0043DD                      12125 00595$:
                                  12126 ;	.\ecen4350_lcd_v4.c:2871: setColorRed();
      0043DD C0 05            [24]12127 	push	ar5
      0043DF 12 16 74         [24]12128 	lcall	_setColorRed
                                  12129 ;	.\ecen4350_lcd_v4.c:2872: setCursor(0, 160);
      0043E2 75 6B A0         [24]12130 	mov	_setCursor_PARM_2,#0xa0
      0043E5 75 6C 00         [24]12131 	mov	(_setCursor_PARM_2 + 1),#0x00
      0043E8 90 00 00         [24]12132 	mov	dptr,#0x0000
      0043EB 12 05 51         [24]12133 	lcall	_setCursor
                                  12134 ;	.\ecen4350_lcd_v4.c:2873: LCD_string_write(" Value Not Found\n Within Block\n ");
      0043EE 90 64 33         [24]12135 	mov	dptr,#___str_120
      0043F1 75 F0 80         [24]12136 	mov	b,#0x80
      0043F4 12 10 6B         [24]12137 	lcall	_LCD_string_write
                                  12138 ;	.\ecen4350_lcd_v4.c:2874: setColorWhite();
      0043F7 12 16 7F         [24]12139 	lcall	_setColorWhite
                                  12140 ;	.\ecen4350_lcd_v4.c:2875: LCD_string_write("\n <0> Exit");
      0043FA 90 64 54         [24]12141 	mov	dptr,#___str_121
      0043FD 75 F0 80         [24]12142 	mov	b,#0x80
      004400 12 10 6B         [24]12143 	lcall	_LCD_string_write
      004403 D0 05            [24]12144 	pop	ar5
                                  12145 ;	.\ecen4350_lcd_v4.c:2876: invalidInput = 1;
      004405 7F 01            [12]12146 	mov	r7,#0x01
                                  12147 ;	.\ecen4350_lcd_v4.c:2878: while (invalidInput) {
      004407                      12148 00197$:
      004407 EF               [12]12149 	mov	a,r7
      004408 70 03            [24]12150 	jnz	00596$
      00440A 02 3E AF         [24]12151 	ljmp	00202$
      00440D                      12152 00596$:
                                  12153 ;	.\ecen4350_lcd_v4.c:2879: selection = keyDetect();
      00440D C0 07            [24]12154 	push	ar7
      00440F C0 05            [24]12155 	push	ar5
      004411 12 11 89         [24]12156 	lcall	_keyDetect
      004414 AE 82            [24]12157 	mov	r6,dpl
      004416 D0 05            [24]12158 	pop	ar5
      004418 D0 07            [24]12159 	pop	ar7
      00441A 78 71            [12]12160 	mov	r0,#_selection
      00441C A6 06            [24]12161 	mov	@r0,ar6
                                  12162 ;	.\ecen4350_lcd_v4.c:2880: if (selection == '0'){
      00441E BE 30 E6         [24]12163 	cjne	r6,#0x30,00197$
                                  12164 ;	.\ecen4350_lcd_v4.c:2881: setCursor(0, 160);
      004421 75 6B A0         [24]12165 	mov	_setCursor_PARM_2,#0xa0
      004424 75 6C 00         [24]12166 	mov	(_setCursor_PARM_2 + 1),#0x00
      004427 90 00 00         [24]12167 	mov	dptr,#0x0000
      00442A C0 05            [24]12168 	push	ar5
      00442C 12 05 51         [24]12169 	lcall	_setCursor
                                  12170 ;	.\ecen4350_lcd_v4.c:2882: LCD_string_write("\n\n\n ");
      00442F 90 64 5F         [24]12171 	mov	dptr,#___str_122
      004432 75 F0 80         [24]12172 	mov	b,#0x80
      004435 12 10 6B         [24]12173 	lcall	_LCD_string_write
                                  12174 ;	.\ecen4350_lcd_v4.c:2883: setColorHighlight2();
      004438 12 16 51         [24]12175 	lcall	_setColorHighlight2
                                  12176 ;	.\ecen4350_lcd_v4.c:2884: LCD_string_write("<0> Exit");
      00443B 90 61 7E         [24]12177 	mov	dptr,#___str_78
      00443E 75 F0 80         [24]12178 	mov	b,#0x80
      004441 12 10 6B         [24]12179 	lcall	_LCD_string_write
      004444 D0 05            [24]12180 	pop	ar5
                                  12181 ;	.\ecen4350_lcd_v4.c:2885: invalidInput = 0;
      004446 7F 00            [12]12182 	mov	r7,#0x00
                                  12183 ;	.\ecen4350_lcd_v4.c:2886: exit = 0;
      004448 78 8F            [12]12184 	mov	r0,#_count_exit_65536_708
      00444A 76 00            [12]12185 	mov	@r0,#0x00
      00444C 80 B9            [24]12186 	sjmp	00197$
      00444E                      12187 00204$:
                                  12188 ;	.\ecen4350_lcd_v4.c:2891: delay(80);
      00444E 90 00 50         [24]12189 	mov	dptr,#0x0050
                                  12190 ;	.\ecen4350_lcd_v4.c:2892: return;
                                  12191 ;	.\ecen4350_lcd_v4.c:2893: }
      004451 02 01 87         [24]12192 	ljmp	_delay
                                  12193 ;------------------------------------------------------------
                                  12194 ;Allocation info for local variables in function 'check'
                                  12195 ;------------------------------------------------------------
                                  12196 ;temp                      Allocated to registers r7 
                                  12197 ;------------------------------------------------------------
                                  12198 ;	.\ecen4350_lcd_v4.c:2895: void check() {
                                  12199 ;	-----------------------------------------
                                  12200 ;	 function check
                                  12201 ;	-----------------------------------------
      004454                      12202 _check:
                                  12203 ;	.\ecen4350_lcd_v4.c:2897: clearLCD();
      004454 12 0D EE         [24]12204 	lcall	_clearLCD
                                  12205 ;	.\ecen4350_lcd_v4.c:2900: fillTop(GRAY);
      004457 90 D6 BA         [24]12206 	mov	dptr,#0xd6ba
      00445A 12 0C 21         [24]12207 	lcall	_fillTop
                                  12208 ;	.\ecen4350_lcd_v4.c:2901: setTextSize(5);
      00445D 75 82 05         [24]12209 	mov	dpl,#0x05
      004460 12 05 6B         [24]12210 	lcall	_setTextSize
                                  12211 ;	.\ecen4350_lcd_v4.c:2902: setColorMenu();
      004463 12 16 68         [24]12212 	lcall	_setColorMenu
                                  12213 ;	.\ecen4350_lcd_v4.c:2903: setCursor(15, 0);
      004466 E4               [12]12214 	clr	a
      004467 F5 6B            [12]12215 	mov	_setCursor_PARM_2,a
      004469 F5 6C            [12]12216 	mov	(_setCursor_PARM_2 + 1),a
      00446B 90 00 0F         [24]12217 	mov	dptr,#0x000f
      00446E 12 05 51         [24]12218 	lcall	_setCursor
                                  12219 ;	.\ecen4350_lcd_v4.c:2904: LCD_string_write("[CHECK]\n");
      004471 90 64 9F         [24]12220 	mov	dptr,#___str_128
      004474 75 F0 80         [24]12221 	mov	b,#0x80
      004477 12 10 6B         [24]12222 	lcall	_LCD_string_write
                                  12223 ;	.\ecen4350_lcd_v4.c:2905: setColorDefault();
      00447A 12 16 2F         [24]12224 	lcall	_setColorDefault
                                  12225 ;	.\ecen4350_lcd_v4.c:2906: setTextSize(2);
      00447D 75 82 02         [24]12226 	mov	dpl,#0x02
      004480 12 05 6B         [24]12227 	lcall	_setTextSize
                                  12228 ;	.\ecen4350_lcd_v4.c:2907: setCursor(0, 60);
      004483 75 6B 3C         [24]12229 	mov	_setCursor_PARM_2,#0x3c
      004486 75 6C 00         [24]12230 	mov	(_setCursor_PARM_2 + 1),#0x00
      004489 90 00 00         [24]12231 	mov	dptr,#0x0000
      00448C 12 05 51         [24]12232 	lcall	_setCursor
                                  12233 ;	.\ecen4350_lcd_v4.c:2908: LCD_string_write(" Enter Value:\n");
      00448F 90 64 A8         [24]12234 	mov	dptr,#___str_129
      004492 75 F0 80         [24]12235 	mov	b,#0x80
      004495 12 10 6B         [24]12236 	lcall	_LCD_string_write
                                  12237 ;	.\ecen4350_lcd_v4.c:2909: setColorGray();
      004498 12 16 5D         [24]12238 	lcall	_setColorGray
                                  12239 ;	.\ecen4350_lcd_v4.c:2910: LCD_string_write(" __");
      00449B 90 60 65         [24]12240 	mov	dptr,#___str_62
      00449E 75 F0 80         [24]12241 	mov	b,#0x80
      0044A1 12 10 6B         [24]12242 	lcall	_LCD_string_write
                                  12243 ;	.\ecen4350_lcd_v4.c:2912: setCursor(0,60);
      0044A4 75 6B 3C         [24]12244 	mov	_setCursor_PARM_2,#0x3c
      0044A7 75 6C 00         [24]12245 	mov	(_setCursor_PARM_2 + 1),#0x00
      0044AA 90 00 00         [24]12246 	mov	dptr,#0x0000
      0044AD 12 05 51         [24]12247 	lcall	_setCursor
                                  12248 ;	.\ecen4350_lcd_v4.c:2913: LCD_string_write("\n ");
      0044B0 90 60 C3         [24]12249 	mov	dptr,#___str_67
      0044B3 75 F0 80         [24]12250 	mov	b,#0x80
      0044B6 12 10 6B         [24]12251 	lcall	_LCD_string_write
                                  12252 ;	.\ecen4350_lcd_v4.c:2914: setColorHighlight1();
      0044B9 12 16 45         [24]12253 	lcall	_setColorHighlight1
                                  12254 ;	.\ecen4350_lcd_v4.c:2915: selection = 0;
      0044BC 78 71            [12]12255 	mov	r0,#_selection
      0044BE 76 00            [12]12256 	mov	@r0,#0x00
                                  12257 ;	.\ecen4350_lcd_v4.c:2916: temp = keyDetect();
      0044C0 12 11 89         [24]12258 	lcall	_keyDetect
                                  12259 ;	.\ecen4350_lcd_v4.c:2917: write(temp);
      0044C3 AF 82            [24]12260 	mov  r7,dpl
      0044C5 C0 07            [24]12261 	push	ar7
      0044C7 12 10 05         [24]12262 	lcall	_write
      0044CA D0 07            [24]12263 	pop	ar7
                                  12264 ;	.\ecen4350_lcd_v4.c:2918: temp = ASCIItoHex(temp);
      0044CC 8F 82            [24]12265 	mov	dpl,r7
      0044CE 12 13 F7         [24]12266 	lcall	_ASCIItoHex
                                  12267 ;	.\ecen4350_lcd_v4.c:2919: selection |= temp * 16;
      0044D1 E5 82            [12]12268 	mov	a,dpl
      0044D3 C4               [12]12269 	swap	a
      0044D4 54 F0            [12]12270 	anl	a,#0xf0
      0044D6 FF               [12]12271 	mov	r7,a
      0044D7 78 71            [12]12272 	mov	r0,#_selection
      0044D9 E6               [12]12273 	mov	a,@r0
      0044DA 4F               [12]12274 	orl	a,r7
      0044DB 78 71            [12]12275 	mov	r0,#_selection
      0044DD F6               [12]12276 	mov	@r0,a
                                  12277 ;	.\ecen4350_lcd_v4.c:2920: temp = keyDetect();
      0044DE 12 11 89         [24]12278 	lcall	_keyDetect
                                  12279 ;	.\ecen4350_lcd_v4.c:2921: write(temp);
      0044E1 AF 82            [24]12280 	mov  r7,dpl
      0044E3 C0 07            [24]12281 	push	ar7
      0044E5 12 10 05         [24]12282 	lcall	_write
      0044E8 D0 07            [24]12283 	pop	ar7
                                  12284 ;	.\ecen4350_lcd_v4.c:2922: temp = ASCIItoHex(temp);
      0044EA 8F 82            [24]12285 	mov	dpl,r7
      0044EC 12 13 F7         [24]12286 	lcall	_ASCIItoHex
      0044EF AF 82            [24]12287 	mov	r7,dpl
                                  12288 ;	.\ecen4350_lcd_v4.c:2923: selection |= temp;
      0044F1 78 71            [12]12289 	mov	r0,#_selection
      0044F3 EF               [12]12290 	mov	a,r7
      0044F4 46               [12]12291 	orl	a,@r0
      0044F5 F6               [12]12292 	mov	@r0,a
                                  12293 ;	.\ecen4350_lcd_v4.c:2924: setColorDefault();
      0044F6 12 16 2F         [24]12294 	lcall	_setColorDefault
                                  12295 ;	.\ecen4350_lcd_v4.c:2925: LCD_string_write("\n\n Writing byte to\n all memory\n locations...");
      0044F9 90 64 B7         [24]12296 	mov	dptr,#___str_130
      0044FC 75 F0 80         [24]12297 	mov	b,#0x80
      0044FF 12 10 6B         [24]12298 	lcall	_LCD_string_write
                                  12299 ;	.\ecen4350_lcd_v4.c:2926: writeAllRAM(selection);
      004502 78 71            [12]12300 	mov	r0,#_selection
      004504 86 82            [24]12301 	mov	dpl,@r0
      004506 12 00 C9         [24]12302 	lcall	_writeAllRAM
                                  12303 ;	.\ecen4350_lcd_v4.c:2927: setColorWhite();
      004509 12 16 7F         [24]12304 	lcall	_setColorWhite
                                  12305 ;	.\ecen4350_lcd_v4.c:2928: LCD_string_write("\n Verifying write...");
      00450C 90 64 E4         [24]12306 	mov	dptr,#___str_131
      00450F 75 F0 80         [24]12307 	mov	b,#0x80
      004512 12 10 6B         [24]12308 	lcall	_LCD_string_write
                                  12309 ;	.\ecen4350_lcd_v4.c:2929: checkAllRAM(selection);
      004515 78 71            [12]12310 	mov	r0,#_selection
      004517 86 82            [24]12311 	mov	dpl,@r0
      004519 12 00 F8         [24]12312 	lcall	_checkAllRAM
                                  12313 ;	.\ecen4350_lcd_v4.c:2930: LCD_string_write("\n Complete.");
      00451C 90 64 F9         [24]12314 	mov	dptr,#___str_132
      00451F 75 F0 80         [24]12315 	mov	b,#0x80
      004522 12 10 6B         [24]12316 	lcall	_LCD_string_write
                                  12317 ;	.\ecen4350_lcd_v4.c:2931: setTextColor(BLUE, colorBackground);
      004525 E4               [12]12318 	clr	a
      004526 F5 6B            [12]12319 	mov	_setTextColor_PARM_2,a
      004528 F5 6C            [12]12320 	mov	(_setTextColor_PARM_2 + 1),a
      00452A 90 00 1F         [24]12321 	mov	dptr,#0x001f
      00452D 12 05 5E         [24]12322 	lcall	_setTextColor
                                  12323 ;	.\ecen4350_lcd_v4.c:2932: LCD_string_write("\n\n Toggling bits in\n each nibble...");
      004530 90 65 05         [24]12324 	mov	dptr,#___str_133
      004533 75 F0 80         [24]12325 	mov	b,#0x80
      004536 12 10 6B         [24]12326 	lcall	_LCD_string_write
                                  12327 ;	.\ecen4350_lcd_v4.c:2933: selection = ~selection;
      004539 78 71            [12]12328 	mov	r0,#_selection
      00453B E6               [12]12329 	mov	a,@r0
      00453C F4               [12]12330 	cpl	a
      00453D F6               [12]12331 	mov	@r0,a
                                  12332 ;	.\ecen4350_lcd_v4.c:2934: setColorSelect();
      00453E 12 16 3A         [24]12333 	lcall	_setColorSelect
                                  12334 ;	.\ecen4350_lcd_v4.c:2935: LCD_string_write("\n Writing new byte...");
      004541 90 65 29         [24]12335 	mov	dptr,#___str_134
      004544 75 F0 80         [24]12336 	mov	b,#0x80
      004547 12 10 6B         [24]12337 	lcall	_LCD_string_write
                                  12338 ;	.\ecen4350_lcd_v4.c:2936: writeAllRAM(selection);
      00454A 78 71            [12]12339 	mov	r0,#_selection
      00454C 86 82            [24]12340 	mov	dpl,@r0
      00454E 12 00 C9         [24]12341 	lcall	_writeAllRAM
                                  12342 ;	.\ecen4350_lcd_v4.c:2937: setColorYellow();
      004551 12 16 95         [24]12343 	lcall	_setColorYellow
                                  12344 ;	.\ecen4350_lcd_v4.c:2938: LCD_string_write("\n Verifying write...");
      004554 90 64 E4         [24]12345 	mov	dptr,#___str_131
      004557 75 F0 80         [24]12346 	mov	b,#0x80
      00455A 12 10 6B         [24]12347 	lcall	_LCD_string_write
                                  12348 ;	.\ecen4350_lcd_v4.c:2939: checkAllRAM(selection);
      00455D 78 71            [12]12349 	mov	r0,#_selection
      00455F 86 82            [24]12350 	mov	dpl,@r0
      004561 12 00 F8         [24]12351 	lcall	_checkAllRAM
                                  12352 ;	.\ecen4350_lcd_v4.c:2940: setColorGreen();
      004564 12 16 8A         [24]12353 	lcall	_setColorGreen
                                  12354 ;	.\ecen4350_lcd_v4.c:2941: LCD_string_write("\n\n Check Complete.");
      004567 90 65 3F         [24]12355 	mov	dptr,#___str_135
      00456A 75 F0 80         [24]12356 	mov	b,#0x80
      00456D 12 10 6B         [24]12357 	lcall	_LCD_string_write
                                  12358 ;	.\ecen4350_lcd_v4.c:2942: delay(120);
      004570 90 00 78         [24]12359 	mov	dptr,#0x0078
                                  12360 ;	.\ecen4350_lcd_v4.c:2943: return;
                                  12361 ;	.\ecen4350_lcd_v4.c:2944: }
      004573 02 01 87         [24]12362 	ljmp	_delay
                                  12363 ;------------------------------------------------------------
                                  12364 ;Allocation info for local variables in function 'uart'
                                  12365 ;------------------------------------------------------------
                                  12366 ;initLock                  Allocated to registers r2 
                                  12367 ;temp                      Allocated to registers r7 
                                  12368 ;baudType                  Allocated with name '_uart_baudType_65536_763'
                                  12369 ;_8b                       Allocated to registers r5 
                                  12370 ;frame_NES                 Allocated to registers r3 r4 
                                  12371 ;------------------------------------------------------------
                                  12372 ;	.\ecen4350_lcd_v4.c:2946: void uart() {
                                  12373 ;	-----------------------------------------
                                  12374 ;	 function uart
                                  12375 ;	-----------------------------------------
      004576                      12376 _uart:
                                  12377 ;	.\ecen4350_lcd_v4.c:2948: __idata u8 temp = 0;
      004576 7F 00            [12]12378 	mov	r7,#0x00
                                  12379 ;	.\ecen4350_lcd_v4.c:2949: __idata u8 baudType = 0;
      004578 78 90            [12]12380 	mov	r0,#_uart_baudType_65536_763
      00457A 76 00            [12]12381 	mov	@r0,#0x00
                                  12382 ;	.\ecen4350_lcd_v4.c:2950: __idata u8 _8b = 0;
      00457C 7D 00            [12]12383 	mov	r5,#0x00
                                  12384 ;	.\ecen4350_lcd_v4.c:2951: __idata u16 frame_NES = 0;		//	bitMode | Even/odd | Set/not
      00457E 7B 00            [12]12385 	mov	r3,#0x00
      004580 7C 00            [12]12386 	mov	r4,#0x00
                                  12387 ;	.\ecen4350_lcd_v4.c:2962: uartMenu:
      004582                      12388 00101$:
                                  12389 ;	.\ecen4350_lcd_v4.c:2963: clearLCD();
      004582 C0 07            [24]12390 	push	ar7
      004584 C0 05            [24]12391 	push	ar5
      004586 C0 04            [24]12392 	push	ar4
      004588 C0 03            [24]12393 	push	ar3
      00458A 12 0D EE         [24]12394 	lcall	_clearLCD
                                  12395 ;	.\ecen4350_lcd_v4.c:2964: fillTop(GRAY);
      00458D 90 D6 BA         [24]12396 	mov	dptr,#0xd6ba
      004590 12 0C 21         [24]12397 	lcall	_fillTop
                                  12398 ;	.\ecen4350_lcd_v4.c:2965: setTextSize(5);
      004593 75 82 05         [24]12399 	mov	dpl,#0x05
      004596 12 05 6B         [24]12400 	lcall	_setTextSize
                                  12401 ;	.\ecen4350_lcd_v4.c:2966: setColorMenu();
      004599 12 16 68         [24]12402 	lcall	_setColorMenu
                                  12403 ;	.\ecen4350_lcd_v4.c:2967: setCursor(30, 0);
      00459C E4               [12]12404 	clr	a
      00459D F5 6B            [12]12405 	mov	_setCursor_PARM_2,a
      00459F F5 6C            [12]12406 	mov	(_setCursor_PARM_2 + 1),a
      0045A1 90 00 1E         [24]12407 	mov	dptr,#0x001e
      0045A4 12 05 51         [24]12408 	lcall	_setCursor
                                  12409 ;	.\ecen4350_lcd_v4.c:2968: LCD_string_write("[UART]\n");
      0045A7 90 65 52         [24]12410 	mov	dptr,#___str_136
      0045AA 75 F0 80         [24]12411 	mov	b,#0x80
      0045AD 12 10 6B         [24]12412 	lcall	_LCD_string_write
      0045B0 D0 03            [24]12413 	pop	ar3
      0045B2 D0 04            [24]12414 	pop	ar4
      0045B4 D0 05            [24]12415 	pop	ar5
      0045B6 D0 07            [24]12416 	pop	ar7
                                  12417 ;	.\ecen4350_lcd_v4.c:2971: initLock = 0;
      0045B8 7A 00            [12]12418 	mov	r2,#0x00
                                  12419 ;	.\ecen4350_lcd_v4.c:2972: if (UART_en == 1){
      0045BA 78 72            [12]12420 	mov	r0,#_UART_en
      0045BC B6 01 02         [24]12421 	cjne	@r0,#0x01,00513$
      0045BF 80 03            [24]12422 	sjmp	00514$
      0045C1                      12423 00513$:
      0045C1 02 47 6B         [24]12424 	ljmp	00118$
      0045C4                      12425 00514$:
                                  12426 ;	.\ecen4350_lcd_v4.c:2973: setTextSize(2);
      0045C4 75 82 02         [24]12427 	mov	dpl,#0x02
      0045C7 C0 07            [24]12428 	push	ar7
      0045C9 C0 05            [24]12429 	push	ar5
      0045CB C0 04            [24]12430 	push	ar4
      0045CD C0 03            [24]12431 	push	ar3
      0045CF C0 02            [24]12432 	push	ar2
      0045D1 12 05 6B         [24]12433 	lcall	_setTextSize
                                  12434 ;	.\ecen4350_lcd_v4.c:2974: setColorDefault();
      0045D4 12 16 2F         [24]12435 	lcall	_setColorDefault
                                  12436 ;	.\ecen4350_lcd_v4.c:2975: setCursor(0, 60);
      0045D7 75 6B 3C         [24]12437 	mov	_setCursor_PARM_2,#0x3c
      0045DA 75 6C 00         [24]12438 	mov	(_setCursor_PARM_2 + 1),#0x00
      0045DD 90 00 00         [24]12439 	mov	dptr,#0x0000
      0045E0 12 05 51         [24]12440 	lcall	_setCursor
                                  12441 ;	.\ecen4350_lcd_v4.c:2976: LCD_string_write(" <1> ");
      0045E3 90 65 5A         [24]12442 	mov	dptr,#___str_137
      0045E6 75 F0 80         [24]12443 	mov	b,#0x80
      0045E9 12 10 6B         [24]12444 	lcall	_LCD_string_write
      0045EC D0 02            [24]12445 	pop	ar2
      0045EE D0 03            [24]12446 	pop	ar3
      0045F0 D0 04            [24]12447 	pop	ar4
      0045F2 D0 05            [24]12448 	pop	ar5
      0045F4 D0 07            [24]12449 	pop	ar7
                                  12450 ;	.\ecen4350_lcd_v4.c:2977: if (baudType == 0x1) {
      0045F6 78 90            [12]12451 	mov	r0,#_uart_baudType_65536_763
      0045F8 B6 01 1D         [24]12452 	cjne	@r0,#0x01,00104$
                                  12453 ;	.\ecen4350_lcd_v4.c:2978: LCD_string_write("1200");
      0045FB 90 65 60         [24]12454 	mov	dptr,#___str_138
      0045FE 75 F0 80         [24]12455 	mov	b,#0x80
      004601 C0 07            [24]12456 	push	ar7
      004603 C0 05            [24]12457 	push	ar5
      004605 C0 04            [24]12458 	push	ar4
      004607 C0 03            [24]12459 	push	ar3
      004609 C0 02            [24]12460 	push	ar2
      00460B 12 10 6B         [24]12461 	lcall	_LCD_string_write
      00460E D0 02            [24]12462 	pop	ar2
      004610 D0 03            [24]12463 	pop	ar3
      004612 D0 04            [24]12464 	pop	ar4
      004614 D0 05            [24]12465 	pop	ar5
      004616 D0 07            [24]12466 	pop	ar7
      004618                      12467 00104$:
                                  12468 ;	.\ecen4350_lcd_v4.c:2980: if (baudType == 0x2) {
      004618 78 90            [12]12469 	mov	r0,#_uart_baudType_65536_763
      00461A B6 02 1D         [24]12470 	cjne	@r0,#0x02,00106$
                                  12471 ;	.\ecen4350_lcd_v4.c:2981: LCD_string_write("2400");
      00461D 90 65 65         [24]12472 	mov	dptr,#___str_139
      004620 75 F0 80         [24]12473 	mov	b,#0x80
      004623 C0 07            [24]12474 	push	ar7
      004625 C0 05            [24]12475 	push	ar5
      004627 C0 04            [24]12476 	push	ar4
      004629 C0 03            [24]12477 	push	ar3
      00462B C0 02            [24]12478 	push	ar2
      00462D 12 10 6B         [24]12479 	lcall	_LCD_string_write
      004630 D0 02            [24]12480 	pop	ar2
      004632 D0 03            [24]12481 	pop	ar3
      004634 D0 04            [24]12482 	pop	ar4
      004636 D0 05            [24]12483 	pop	ar5
      004638 D0 07            [24]12484 	pop	ar7
      00463A                      12485 00106$:
                                  12486 ;	.\ecen4350_lcd_v4.c:2982: } if (baudType == 0x3){
      00463A 78 90            [12]12487 	mov	r0,#_uart_baudType_65536_763
      00463C B6 03 1D         [24]12488 	cjne	@r0,#0x03,00108$
                                  12489 ;	.\ecen4350_lcd_v4.c:2983: LCD_string_write("4800");
      00463F 90 65 6A         [24]12490 	mov	dptr,#___str_140
      004642 75 F0 80         [24]12491 	mov	b,#0x80
      004645 C0 07            [24]12492 	push	ar7
      004647 C0 05            [24]12493 	push	ar5
      004649 C0 04            [24]12494 	push	ar4
      00464B C0 03            [24]12495 	push	ar3
      00464D C0 02            [24]12496 	push	ar2
      00464F 12 10 6B         [24]12497 	lcall	_LCD_string_write
      004652 D0 02            [24]12498 	pop	ar2
      004654 D0 03            [24]12499 	pop	ar3
      004656 D0 04            [24]12500 	pop	ar4
      004658 D0 05            [24]12501 	pop	ar5
      00465A D0 07            [24]12502 	pop	ar7
      00465C                      12503 00108$:
                                  12504 ;	.\ecen4350_lcd_v4.c:2984: } if (baudType == 0x4){
      00465C 78 90            [12]12505 	mov	r0,#_uart_baudType_65536_763
      00465E B6 04 1D         [24]12506 	cjne	@r0,#0x04,00110$
                                  12507 ;	.\ecen4350_lcd_v4.c:2985: LCD_string_write("9600");
      004661 90 65 6F         [24]12508 	mov	dptr,#___str_141
      004664 75 F0 80         [24]12509 	mov	b,#0x80
      004667 C0 07            [24]12510 	push	ar7
      004669 C0 05            [24]12511 	push	ar5
      00466B C0 04            [24]12512 	push	ar4
      00466D C0 03            [24]12513 	push	ar3
      00466F C0 02            [24]12514 	push	ar2
      004671 12 10 6B         [24]12515 	lcall	_LCD_string_write
      004674 D0 02            [24]12516 	pop	ar2
      004676 D0 03            [24]12517 	pop	ar3
      004678 D0 04            [24]12518 	pop	ar4
      00467A D0 05            [24]12519 	pop	ar5
      00467C D0 07            [24]12520 	pop	ar7
      00467E                      12521 00110$:
                                  12522 ;	.\ecen4350_lcd_v4.c:2986: } if (baudType == 0x5) {
      00467E 78 90            [12]12523 	mov	r0,#_uart_baudType_65536_763
      004680 B6 05 1D         [24]12524 	cjne	@r0,#0x05,00112$
                                  12525 ;	.\ecen4350_lcd_v4.c:2987: LCD_string_write("19200");
      004683 90 65 74         [24]12526 	mov	dptr,#___str_142
      004686 75 F0 80         [24]12527 	mov	b,#0x80
      004689 C0 07            [24]12528 	push	ar7
      00468B C0 05            [24]12529 	push	ar5
      00468D C0 04            [24]12530 	push	ar4
      00468F C0 03            [24]12531 	push	ar3
      004691 C0 02            [24]12532 	push	ar2
      004693 12 10 6B         [24]12533 	lcall	_LCD_string_write
      004696 D0 02            [24]12534 	pop	ar2
      004698 D0 03            [24]12535 	pop	ar3
      00469A D0 04            [24]12536 	pop	ar4
      00469C D0 05            [24]12537 	pop	ar5
      00469E D0 07            [24]12538 	pop	ar7
      0046A0                      12539 00112$:
                                  12540 ;	.\ecen4350_lcd_v4.c:2989: LCD_string_write(" baud\n");
      0046A0 90 65 7A         [24]12541 	mov	dptr,#___str_143
      0046A3 75 F0 80         [24]12542 	mov	b,#0x80
      0046A6 C0 07            [24]12543 	push	ar7
      0046A8 C0 05            [24]12544 	push	ar5
      0046AA C0 04            [24]12545 	push	ar4
      0046AC C0 03            [24]12546 	push	ar3
      0046AE C0 02            [24]12547 	push	ar2
      0046B0 12 10 6B         [24]12548 	lcall	_LCD_string_write
                                  12549 ;	.\ecen4350_lcd_v4.c:2990: setCursor(0, 100);
      0046B3 75 6B 64         [24]12550 	mov	_setCursor_PARM_2,#0x64
      0046B6 75 6C 00         [24]12551 	mov	(_setCursor_PARM_2 + 1),#0x00
      0046B9 90 00 00         [24]12552 	mov	dptr,#0x0000
      0046BC 12 05 51         [24]12553 	lcall	_setCursor
                                  12554 ;	.\ecen4350_lcd_v4.c:2991: LCD_string_write(" <2> ");
      0046BF 90 65 81         [24]12555 	mov	dptr,#___str_144
      0046C2 75 F0 80         [24]12556 	mov	b,#0x80
      0046C5 12 10 6B         [24]12557 	lcall	_LCD_string_write
      0046C8 D0 02            [24]12558 	pop	ar2
      0046CA D0 03            [24]12559 	pop	ar3
      0046CC D0 04            [24]12560 	pop	ar4
      0046CE D0 05            [24]12561 	pop	ar5
      0046D0 D0 07            [24]12562 	pop	ar7
                                  12563 ;	.\ecen4350_lcd_v4.c:2992: if (_8b == 1) {
      0046D2 BD 01 1D         [24]12564 	cjne	r5,#0x01,00114$
                                  12565 ;	.\ecen4350_lcd_v4.c:2993: LCD_string_write("8");
      0046D5 90 65 87         [24]12566 	mov	dptr,#___str_145
      0046D8 75 F0 80         [24]12567 	mov	b,#0x80
      0046DB C0 07            [24]12568 	push	ar7
      0046DD C0 05            [24]12569 	push	ar5
      0046DF C0 04            [24]12570 	push	ar4
      0046E1 C0 03            [24]12571 	push	ar3
      0046E3 C0 02            [24]12572 	push	ar2
      0046E5 12 10 6B         [24]12573 	lcall	_LCD_string_write
      0046E8 D0 02            [24]12574 	pop	ar2
      0046EA D0 03            [24]12575 	pop	ar3
      0046EC D0 04            [24]12576 	pop	ar4
      0046EE D0 05            [24]12577 	pop	ar5
      0046F0 D0 07            [24]12578 	pop	ar7
      0046F2                      12579 00114$:
                                  12580 ;	.\ecen4350_lcd_v4.c:2994: } if (_8b == 0) {
      0046F2 ED               [12]12581 	mov	a,r5
      0046F3 70 1D            [24]12582 	jnz	00116$
                                  12583 ;	.\ecen4350_lcd_v4.c:2995: LCD_string_write("9");
      0046F5 90 65 89         [24]12584 	mov	dptr,#___str_146
      0046F8 75 F0 80         [24]12585 	mov	b,#0x80
      0046FB C0 07            [24]12586 	push	ar7
      0046FD C0 05            [24]12587 	push	ar5
      0046FF C0 04            [24]12588 	push	ar4
      004701 C0 03            [24]12589 	push	ar3
      004703 C0 02            [24]12590 	push	ar2
      004705 12 10 6B         [24]12591 	lcall	_LCD_string_write
      004708 D0 02            [24]12592 	pop	ar2
      00470A D0 03            [24]12593 	pop	ar3
      00470C D0 04            [24]12594 	pop	ar4
      00470E D0 05            [24]12595 	pop	ar5
      004710 D0 07            [24]12596 	pop	ar7
      004712                      12597 00116$:
                                  12598 ;	.\ecen4350_lcd_v4.c:2997: LCD_string_write("-bit Mode\n");
      004712 90 65 8B         [24]12599 	mov	dptr,#___str_147
      004715 75 F0 80         [24]12600 	mov	b,#0x80
      004718 C0 07            [24]12601 	push	ar7
      00471A C0 05            [24]12602 	push	ar5
      00471C C0 04            [24]12603 	push	ar4
      00471E C0 03            [24]12604 	push	ar3
      004720 C0 02            [24]12605 	push	ar2
      004722 12 10 6B         [24]12606 	lcall	_LCD_string_write
                                  12607 ;	.\ecen4350_lcd_v4.c:2998: setCursor(0, 140);
      004725 75 6B 8C         [24]12608 	mov	_setCursor_PARM_2,#0x8c
      004728 75 6C 00         [24]12609 	mov	(_setCursor_PARM_2 + 1),#0x00
      00472B 90 00 00         [24]12610 	mov	dptr,#0x0000
      00472E 12 05 51         [24]12611 	lcall	_setCursor
                                  12612 ;	.\ecen4350_lcd_v4.c:2999: LCD_string_write(" <3> ");
      004731 90 65 96         [24]12613 	mov	dptr,#___str_148
      004734 75 F0 80         [24]12614 	mov	b,#0x80
      004737 12 10 6B         [24]12615 	lcall	_LCD_string_write
                                  12616 ;	.\ecen4350_lcd_v4.c:3000: LCD_string_write(" Parity");
      00473A 90 65 9C         [24]12617 	mov	dptr,#___str_149
      00473D 75 F0 80         [24]12618 	mov	b,#0x80
      004740 12 10 6B         [24]12619 	lcall	_LCD_string_write
                                  12620 ;	.\ecen4350_lcd_v4.c:3001: setCursor(0, 180);
      004743 75 6B B4         [24]12621 	mov	_setCursor_PARM_2,#0xb4
      004746 75 6C 00         [24]12622 	mov	(_setCursor_PARM_2 + 1),#0x00
      004749 90 00 00         [24]12623 	mov	dptr,#0x0000
      00474C 12 05 51         [24]12624 	lcall	_setCursor
                                  12625 ;	.\ecen4350_lcd_v4.c:3002: LCD_string_write(" <4> Disable UART\n");
      00474F 90 65 A4         [24]12626 	mov	dptr,#___str_150
      004752 75 F0 80         [24]12627 	mov	b,#0x80
      004755 12 10 6B         [24]12628 	lcall	_LCD_string_write
                                  12629 ;	.\ecen4350_lcd_v4.c:3003: LCD_string_write("     (Enabled)\n");
      004758 90 65 B7         [24]12630 	mov	dptr,#___str_151
      00475B 75 F0 80         [24]12631 	mov	b,#0x80
      00475E 12 10 6B         [24]12632 	lcall	_LCD_string_write
      004761 D0 02            [24]12633 	pop	ar2
      004763 D0 03            [24]12634 	pop	ar3
      004765 D0 04            [24]12635 	pop	ar4
      004767 D0 05            [24]12636 	pop	ar5
      004769 D0 07            [24]12637 	pop	ar7
      00476B                      12638 00118$:
                                  12639 ;	.\ecen4350_lcd_v4.c:3004: } if (UART_en == 0) {
      00476B 78 72            [12]12640 	mov	r0,#_UART_en
      00476D E6               [12]12641 	mov	a,@r0
      00476E 70 7A            [24]12642 	jnz	00120$
                                  12643 ;	.\ecen4350_lcd_v4.c:3005: setTextSize(2);
      004770 75 82 02         [24]12644 	mov	dpl,#0x02
      004773 C0 07            [24]12645 	push	ar7
      004775 C0 05            [24]12646 	push	ar5
      004777 C0 04            [24]12647 	push	ar4
      004779 C0 03            [24]12648 	push	ar3
      00477B C0 02            [24]12649 	push	ar2
      00477D 12 05 6B         [24]12650 	lcall	_setTextSize
                                  12651 ;	.\ecen4350_lcd_v4.c:3006: setColorDefault();
      004780 12 16 2F         [24]12652 	lcall	_setColorDefault
                                  12653 ;	.\ecen4350_lcd_v4.c:3007: setCursor(0, 60);
      004783 75 6B 3C         [24]12654 	mov	_setCursor_PARM_2,#0x3c
      004786 75 6C 00         [24]12655 	mov	(_setCursor_PARM_2 + 1),#0x00
      004789 90 00 00         [24]12656 	mov	dptr,#0x0000
      00478C 12 05 51         [24]12657 	lcall	_setCursor
                                  12658 ;	.\ecen4350_lcd_v4.c:3008: LCD_string_write(" <1> Set Data Rate\n");
      00478F 90 65 C7         [24]12659 	mov	dptr,#___str_152
      004792 75 F0 80         [24]12660 	mov	b,#0x80
      004795 12 10 6B         [24]12661 	lcall	_LCD_string_write
                                  12662 ;	.\ecen4350_lcd_v4.c:3009: setCursor(0, 100);
      004798 75 6B 64         [24]12663 	mov	_setCursor_PARM_2,#0x64
      00479B 75 6C 00         [24]12664 	mov	(_setCursor_PARM_2 + 1),#0x00
      00479E 90 00 00         [24]12665 	mov	dptr,#0x0000
      0047A1 12 05 51         [24]12666 	lcall	_setCursor
                                  12667 ;	.\ecen4350_lcd_v4.c:3010: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      0047A4 90 65 DB         [24]12668 	mov	dptr,#___str_153
      0047A7 75 F0 80         [24]12669 	mov	b,#0x80
      0047AA 12 10 6B         [24]12670 	lcall	_LCD_string_write
                                  12671 ;	.\ecen4350_lcd_v4.c:3011: setCursor(0, 140);
      0047AD 75 6B 8C         [24]12672 	mov	_setCursor_PARM_2,#0x8c
      0047B0 75 6C 00         [24]12673 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047B3 90 00 00         [24]12674 	mov	dptr,#0x0000
      0047B6 12 05 51         [24]12675 	lcall	_setCursor
                                  12676 ;	.\ecen4350_lcd_v4.c:3012: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      0047B9 90 66 03         [24]12677 	mov	dptr,#___str_154
      0047BC 75 F0 80         [24]12678 	mov	b,#0x80
      0047BF 12 10 6B         [24]12679 	lcall	_LCD_string_write
                                  12680 ;	.\ecen4350_lcd_v4.c:3013: setCursor(0, 180);
      0047C2 75 6B B4         [24]12681 	mov	_setCursor_PARM_2,#0xb4
      0047C5 75 6C 00         [24]12682 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047C8 90 00 00         [24]12683 	mov	dptr,#0x0000
      0047CB 12 05 51         [24]12684 	lcall	_setCursor
                                  12685 ;	.\ecen4350_lcd_v4.c:3014: LCD_string_write(" <4> Enable UART\n");
      0047CE 90 66 27         [24]12686 	mov	dptr,#___str_155
      0047D1 75 F0 80         [24]12687 	mov	b,#0x80
      0047D4 12 10 6B         [24]12688 	lcall	_LCD_string_write
                                  12689 ;	.\ecen4350_lcd_v4.c:3015: LCD_string_write("     (Disabled)\n");
      0047D7 90 66 39         [24]12690 	mov	dptr,#___str_156
      0047DA 75 F0 80         [24]12691 	mov	b,#0x80
      0047DD 12 10 6B         [24]12692 	lcall	_LCD_string_write
      0047E0 D0 02            [24]12693 	pop	ar2
      0047E2 D0 03            [24]12694 	pop	ar3
      0047E4 D0 04            [24]12695 	pop	ar4
      0047E6 D0 05            [24]12696 	pop	ar5
      0047E8 D0 07            [24]12697 	pop	ar7
      0047EA                      12698 00120$:
                                  12699 ;	.\ecen4350_lcd_v4.c:3017: setCursor(0, 240);
      0047EA 75 6B F0         [24]12700 	mov	_setCursor_PARM_2,#0xf0
      0047ED 75 6C 00         [24]12701 	mov	(_setCursor_PARM_2 + 1),#0x00
      0047F0 90 00 00         [24]12702 	mov	dptr,#0x0000
      0047F3 C0 07            [24]12703 	push	ar7
      0047F5 C0 05            [24]12704 	push	ar5
      0047F7 C0 04            [24]12705 	push	ar4
      0047F9 C0 03            [24]12706 	push	ar3
      0047FB C0 02            [24]12707 	push	ar2
      0047FD 12 05 51         [24]12708 	lcall	_setCursor
                                  12709 ;	.\ecen4350_lcd_v4.c:3018: LCD_string_write(" <0> Exit \n");
      004800 90 66 4A         [24]12710 	mov	dptr,#___str_157
      004803 75 F0 80         [24]12711 	mov	b,#0x80
      004806 12 10 6B         [24]12712 	lcall	_LCD_string_write
      004809 D0 02            [24]12713 	pop	ar2
      00480B D0 03            [24]12714 	pop	ar3
      00480D D0 04            [24]12715 	pop	ar4
      00480F D0 05            [24]12716 	pop	ar5
      004811 D0 07            [24]12717 	pop	ar7
                                  12718 ;	.\ecen4350_lcd_v4.c:3020: mainInput:
      004813                      12719 00121$:
                                  12720 ;	.\ecen4350_lcd_v4.c:3021: selection = keyDetect();
      004813 C0 07            [24]12721 	push	ar7
      004815 C0 05            [24]12722 	push	ar5
      004817 C0 04            [24]12723 	push	ar4
      004819 C0 03            [24]12724 	push	ar3
      00481B C0 02            [24]12725 	push	ar2
      00481D 12 11 89         [24]12726 	lcall	_keyDetect
      004820 AE 82            [24]12727 	mov	r6,dpl
      004822 D0 02            [24]12728 	pop	ar2
      004824 D0 03            [24]12729 	pop	ar3
      004826 D0 04            [24]12730 	pop	ar4
      004828 D0 05            [24]12731 	pop	ar5
      00482A D0 07            [24]12732 	pop	ar7
      00482C 78 71            [12]12733 	mov	r0,#_selection
      00482E A6 06            [24]12734 	mov	@r0,ar6
                                  12735 ;	.\ecen4350_lcd_v4.c:3022: if (selection =='0') {
      004830 BE 30 33         [24]12736 	cjne	r6,#0x30,00123$
                                  12737 ;	.\ecen4350_lcd_v4.c:3023: setCursor (0, 240);
      004833 75 6B F0         [24]12738 	mov	_setCursor_PARM_2,#0xf0
      004836 75 6C 00         [24]12739 	mov	(_setCursor_PARM_2 + 1),#0x00
      004839 90 00 00         [24]12740 	mov	dptr,#0x0000
      00483C 12 05 51         [24]12741 	lcall	_setCursor
                                  12742 ;	.\ecen4350_lcd_v4.c:3024: LCD_string_write(" ");
      00483F 90 5E B8         [24]12743 	mov	dptr,#___str_30
      004842 75 F0 80         [24]12744 	mov	b,#0x80
      004845 12 10 6B         [24]12745 	lcall	_LCD_string_write
                                  12746 ;	.\ecen4350_lcd_v4.c:3025: setColorHighlight1();
      004848 12 16 45         [24]12747 	lcall	_setColorHighlight1
                                  12748 ;	.\ecen4350_lcd_v4.c:3026: LCD_string_write("<0> ");
      00484B 90 66 56         [24]12749 	mov	dptr,#___str_158
      00484E 75 F0 80         [24]12750 	mov	b,#0x80
      004851 12 10 6B         [24]12751 	lcall	_LCD_string_write
                                  12752 ;	.\ecen4350_lcd_v4.c:3027: setColorHighlight2();
      004854 12 16 51         [24]12753 	lcall	_setColorHighlight2
                                  12754 ;	.\ecen4350_lcd_v4.c:3028: LCD_string_write("Exit\n");
      004857 90 66 5B         [24]12755 	mov	dptr,#___str_159
      00485A 75 F0 80         [24]12756 	mov	b,#0x80
      00485D 12 10 6B         [24]12757 	lcall	_LCD_string_write
                                  12758 ;	.\ecen4350_lcd_v4.c:3029: delay(20);
      004860 90 00 14         [24]12759 	mov	dptr,#0x0014
                                  12760 ;	.\ecen4350_lcd_v4.c:3030: goto finish;
      004863 02 01 87         [24]12761 	ljmp	_delay
      004866                      12762 00123$:
                                  12763 ;	.\ecen4350_lcd_v4.c:3032: if (selection == '4') {
      004866 BE 34 02         [24]12764 	cjne	r6,#0x34,00531$
      004869 80 03            [24]12765 	sjmp	00532$
      00486B                      12766 00531$:
      00486B 02 49 3C         [24]12767 	ljmp	00129$
      00486E                      12768 00532$:
                                  12769 ;	.\ecen4350_lcd_v4.c:3033: setCursor (0, 180);
      00486E 75 6B B4         [24]12770 	mov	_setCursor_PARM_2,#0xb4
      004871 75 6C 00         [24]12771 	mov	(_setCursor_PARM_2 + 1),#0x00
      004874 90 00 00         [24]12772 	mov	dptr,#0x0000
      004877 C0 07            [24]12773 	push	ar7
      004879 C0 05            [24]12774 	push	ar5
      00487B C0 04            [24]12775 	push	ar4
      00487D C0 03            [24]12776 	push	ar3
      00487F 12 05 51         [24]12777 	lcall	_setCursor
                                  12778 ;	.\ecen4350_lcd_v4.c:3034: LCD_string_write(" ");
      004882 90 5E B8         [24]12779 	mov	dptr,#___str_30
      004885 75 F0 80         [24]12780 	mov	b,#0x80
      004888 12 10 6B         [24]12781 	lcall	_LCD_string_write
                                  12782 ;	.\ecen4350_lcd_v4.c:3035: setColorHighlight1();
      00488B 12 16 45         [24]12783 	lcall	_setColorHighlight1
                                  12784 ;	.\ecen4350_lcd_v4.c:3036: LCD_string_write("<4> ");
      00488E 90 66 61         [24]12785 	mov	dptr,#___str_160
      004891 75 F0 80         [24]12786 	mov	b,#0x80
      004894 12 10 6B         [24]12787 	lcall	_LCD_string_write
                                  12788 ;	.\ecen4350_lcd_v4.c:3037: setColorHighlight2();
      004897 12 16 51         [24]12789 	lcall	_setColorHighlight2
      00489A D0 03            [24]12790 	pop	ar3
      00489C D0 04            [24]12791 	pop	ar4
      00489E D0 05            [24]12792 	pop	ar5
      0048A0 D0 07            [24]12793 	pop	ar7
                                  12794 ;	.\ecen4350_lcd_v4.c:3038: if (UART_en == 1) {
      0048A2 78 72            [12]12795 	mov	r0,#_UART_en
      0048A4 B6 01 41         [24]12796 	cjne	@r0,#0x01,00125$
                                  12797 ;	.\ecen4350_lcd_v4.c:3039: LCD_string_write("Disable UART\n");
      0048A7 90 66 66         [24]12798 	mov	dptr,#___str_161
      0048AA 75 F0 80         [24]12799 	mov	b,#0x80
      0048AD 12 10 6B         [24]12800 	lcall	_LCD_string_write
                                  12801 ;	.\ecen4350_lcd_v4.c:3040: setColorDefault();
      0048B0 12 16 2F         [24]12802 	lcall	_setColorDefault
                                  12803 ;	.\ecen4350_lcd_v4.c:3041: LCD_string_write("     ");
      0048B3 90 66 74         [24]12804 	mov	dptr,#___str_162
      0048B6 75 F0 80         [24]12805 	mov	b,#0x80
      0048B9 12 10 6B         [24]12806 	lcall	_LCD_string_write
                                  12807 ;	.\ecen4350_lcd_v4.c:3042: setColorHighlight1();
      0048BC 12 16 45         [24]12808 	lcall	_setColorHighlight1
                                  12809 ;	.\ecen4350_lcd_v4.c:3043: LCD_string_write("(Enabled)");
      0048BF 90 66 7A         [24]12810 	mov	dptr,#___str_163
      0048C2 75 F0 80         [24]12811 	mov	b,#0x80
      0048C5 12 10 6B         [24]12812 	lcall	_LCD_string_write
                                  12813 ;	.\ecen4350_lcd_v4.c:3044: setColorDefault();
      0048C8 12 16 2F         [24]12814 	lcall	_setColorDefault
                                  12815 ;	.\ecen4350_lcd_v4.c:3045: initLock = 0;
      0048CB 7A 00            [12]12816 	mov	r2,#0x00
                                  12817 ;	.\ecen4350_lcd_v4.c:3047: _8b = 'null';
      0048CD 7D 6E            [12]12818 	mov	r5,#0x6e
                                  12819 ;	.\ecen4350_lcd_v4.c:3048: frame_NES = 0;
      0048CF 7B 00            [12]12820 	mov	r3,#0x00
      0048D1 7C 00            [12]12821 	mov	r4,#0x00
                                  12822 ;	.\ecen4350_lcd_v4.c:3049: temp = 0;
      0048D3 7F 00            [12]12823 	mov	r7,#0x00
                                  12824 ;	.\ecen4350_lcd_v4.c:3050: UART_en = 0;
      0048D5 78 72            [12]12825 	mov	r0,#_UART_en
      0048D7 76 00            [12]12826 	mov	@r0,#0x00
                                  12827 ;	.\ecen4350_lcd_v4.c:3051: baudSet = 0;
      0048D9 78 73            [12]12828 	mov	r0,#_baudSet
      0048DB 76 00            [12]12829 	mov	@r0,#0x00
                                  12830 ;	.\ecen4350_lcd_v4.c:3052: bitSet = 0;
      0048DD 78 76            [12]12831 	mov	r0,#_bitSet
      0048DF 76 00            [12]12832 	mov	@r0,#0x00
                                  12833 ;	.\ecen4350_lcd_v4.c:3053: paritySet = 0;
      0048E1 78 78            [12]12834 	mov	r0,#_paritySet
      0048E3 76 00            [12]12835 	mov	@r0,#0x00
                                  12836 ;	.\ecen4350_lcd_v4.c:3054: goto mainInput;
      0048E5 02 48 13         [24]12837 	ljmp	00121$
      0048E8                      12838 00125$:
                                  12839 ;	.\ecen4350_lcd_v4.c:3055: } if (UART_en == 0 ){
      0048E8 78 72            [12]12840 	mov	r0,#_UART_en
      0048EA E6               [12]12841 	mov	a,@r0
      0048EB 70 34            [24]12842 	jnz	00127$
                                  12843 ;	.\ecen4350_lcd_v4.c:3056: LCD_string_write("Enable UART\n");
      0048ED 90 66 84         [24]12844 	mov	dptr,#___str_164
      0048F0 75 F0 80         [24]12845 	mov	b,#0x80
      0048F3 C0 07            [24]12846 	push	ar7
      0048F5 C0 05            [24]12847 	push	ar5
      0048F7 C0 04            [24]12848 	push	ar4
      0048F9 C0 03            [24]12849 	push	ar3
      0048FB 12 10 6B         [24]12850 	lcall	_LCD_string_write
                                  12851 ;	.\ecen4350_lcd_v4.c:3057: setColorDefault();
      0048FE 12 16 2F         [24]12852 	lcall	_setColorDefault
                                  12853 ;	.\ecen4350_lcd_v4.c:3058: LCD_string_write("     ");
      004901 90 66 74         [24]12854 	mov	dptr,#___str_162
      004904 75 F0 80         [24]12855 	mov	b,#0x80
      004907 12 10 6B         [24]12856 	lcall	_LCD_string_write
                                  12857 ;	.\ecen4350_lcd_v4.c:3059: setColorHighlight1();
      00490A 12 16 45         [24]12858 	lcall	_setColorHighlight1
                                  12859 ;	.\ecen4350_lcd_v4.c:3060: LCD_string_write("(Disabled)");
      00490D 90 66 91         [24]12860 	mov	dptr,#___str_165
      004910 75 F0 80         [24]12861 	mov	b,#0x80
      004913 12 10 6B         [24]12862 	lcall	_LCD_string_write
                                  12863 ;	.\ecen4350_lcd_v4.c:3061: setColorDefault();
      004916 12 16 2F         [24]12864 	lcall	_setColorDefault
      004919 D0 03            [24]12865 	pop	ar3
      00491B D0 04            [24]12866 	pop	ar4
      00491D D0 05            [24]12867 	pop	ar5
      00491F D0 07            [24]12868 	pop	ar7
      004921                      12869 00127$:
                                  12870 ;	.\ecen4350_lcd_v4.c:3063: delay(40);
      004921 90 00 28         [24]12871 	mov	dptr,#0x0028
      004924 C0 07            [24]12872 	push	ar7
      004926 C0 05            [24]12873 	push	ar5
      004928 C0 04            [24]12874 	push	ar4
      00492A C0 03            [24]12875 	push	ar3
      00492C 12 01 87         [24]12876 	lcall	_delay
      00492F D0 03            [24]12877 	pop	ar3
      004931 D0 04            [24]12878 	pop	ar4
      004933 D0 05            [24]12879 	pop	ar5
      004935 D0 07            [24]12880 	pop	ar7
                                  12881 ;	.\ecen4350_lcd_v4.c:3064: initLock = 1;
      004937 7A 01            [12]12882 	mov	r2,#0x01
                                  12883 ;	.\ecen4350_lcd_v4.c:3065: goto verifyUART;
      004939 02 4B 8B         [24]12884 	ljmp	00149$
      00493C                      12885 00129$:
                                  12886 ;	.\ecen4350_lcd_v4.c:3066: } if (selection == '1') {
      00493C BE 31 02         [24]12887 	cjne	r6,#0x31,00536$
      00493F 80 03            [24]12888 	sjmp	00537$
      004941                      12889 00536$:
      004941 02 49 DF         [24]12890 	ljmp	00135$
      004944                      12891 00537$:
                                  12892 ;	.\ecen4350_lcd_v4.c:3067: setCursor (0, 60);
      004944 75 6B 3C         [24]12893 	mov	_setCursor_PARM_2,#0x3c
      004947 75 6C 00         [24]12894 	mov	(_setCursor_PARM_2 + 1),#0x00
      00494A 90 00 00         [24]12895 	mov	dptr,#0x0000
      00494D C0 07            [24]12896 	push	ar7
      00494F C0 05            [24]12897 	push	ar5
      004951 C0 04            [24]12898 	push	ar4
      004953 C0 03            [24]12899 	push	ar3
      004955 C0 02            [24]12900 	push	ar2
      004957 12 05 51         [24]12901 	lcall	_setCursor
                                  12902 ;	.\ecen4350_lcd_v4.c:3068: LCD_string_write(" ");
      00495A 90 5E B8         [24]12903 	mov	dptr,#___str_30
      00495D 75 F0 80         [24]12904 	mov	b,#0x80
      004960 12 10 6B         [24]12905 	lcall	_LCD_string_write
                                  12906 ;	.\ecen4350_lcd_v4.c:3069: setColorHighlight1();
      004963 12 16 45         [24]12907 	lcall	_setColorHighlight1
                                  12908 ;	.\ecen4350_lcd_v4.c:3070: LCD_string_write("<1> ");
      004966 90 66 9C         [24]12909 	mov	dptr,#___str_166
      004969 75 F0 80         [24]12910 	mov	b,#0x80
      00496C 12 10 6B         [24]12911 	lcall	_LCD_string_write
                                  12912 ;	.\ecen4350_lcd_v4.c:3071: setColorHighlight2();
      00496F 12 16 51         [24]12913 	lcall	_setColorHighlight2
                                  12914 ;	.\ecen4350_lcd_v4.c:3072: LCD_string_write("Set Data Rate\n");
      004972 90 66 A1         [24]12915 	mov	dptr,#___str_167
      004975 75 F0 80         [24]12916 	mov	b,#0x80
      004978 12 10 6B         [24]12917 	lcall	_LCD_string_write
                                  12918 ;	.\ecen4350_lcd_v4.c:3073: delay(20);
      00497B 90 00 14         [24]12919 	mov	dptr,#0x0014
      00497E 12 01 87         [24]12920 	lcall	_delay
      004981 D0 02            [24]12921 	pop	ar2
      004983 D0 03            [24]12922 	pop	ar3
      004985 D0 04            [24]12923 	pop	ar4
      004987 D0 05            [24]12924 	pop	ar5
      004989 D0 07            [24]12925 	pop	ar7
                                  12926 ;	.\ecen4350_lcd_v4.c:3074: if (UART_en == 1) {
      00498B 78 72            [12]12927 	mov	r0,#_UART_en
      00498D B6 01 47         [24]12928 	cjne	@r0,#0x01,00131$
                                  12929 ;	.\ecen4350_lcd_v4.c:3075: setCursor(0, 200);
      004990 75 6B C8         [24]12930 	mov	_setCursor_PARM_2,#0xc8
      004993 75 6C 00         [24]12931 	mov	(_setCursor_PARM_2 + 1),#0x00
      004996 90 00 00         [24]12932 	mov	dptr,#0x0000
      004999 C0 07            [24]12933 	push	ar7
      00499B C0 05            [24]12934 	push	ar5
      00499D C0 04            [24]12935 	push	ar4
      00499F C0 03            [24]12936 	push	ar3
      0049A1 C0 02            [24]12937 	push	ar2
      0049A3 12 05 51         [24]12938 	lcall	_setCursor
                                  12939 ;	.\ecen4350_lcd_v4.c:3076: setColorRed();
      0049A6 12 16 74         [24]12940 	lcall	_setColorRed
                                  12941 ;	.\ecen4350_lcd_v4.c:3077: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      0049A9 90 66 B0         [24]12942 	mov	dptr,#___str_168
      0049AC 75 F0 80         [24]12943 	mov	b,#0x80
      0049AF 12 10 6B         [24]12944 	lcall	_LCD_string_write
                                  12945 ;	.\ecen4350_lcd_v4.c:3078: setColorDefault();
      0049B2 12 16 2F         [24]12946 	lcall	_setColorDefault
                                  12947 ;	.\ecen4350_lcd_v4.c:3079: setCursor(0, 60);
      0049B5 75 6B 3C         [24]12948 	mov	_setCursor_PARM_2,#0x3c
      0049B8 75 6C 00         [24]12949 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049BB 90 00 00         [24]12950 	mov	dptr,#0x0000
      0049BE 12 05 51         [24]12951 	lcall	_setCursor
                                  12952 ;	.\ecen4350_lcd_v4.c:3080: LCD_string_write(" <1> Set Data Rate\n");
      0049C1 90 65 C7         [24]12953 	mov	dptr,#___str_152
      0049C4 75 F0 80         [24]12954 	mov	b,#0x80
      0049C7 12 10 6B         [24]12955 	lcall	_LCD_string_write
      0049CA D0 02            [24]12956 	pop	ar2
      0049CC D0 03            [24]12957 	pop	ar3
      0049CE D0 04            [24]12958 	pop	ar4
      0049D0 D0 05            [24]12959 	pop	ar5
      0049D2 D0 07            [24]12960 	pop	ar7
                                  12961 ;	.\ecen4350_lcd_v4.c:3081: goto mainInput;
      0049D4 02 48 13         [24]12962 	ljmp	00121$
      0049D7                      12963 00131$:
                                  12964 ;	.\ecen4350_lcd_v4.c:3082: } if (UART_en == 0) {
      0049D7 78 72            [12]12965 	mov	r0,#_UART_en
      0049D9 E6               [12]12966 	mov	a,@r0
      0049DA 70 03            [24]12967 	jnz	00540$
      0049DC 02 4C E7         [24]12968 	ljmp	00168$
      0049DF                      12969 00540$:
                                  12970 ;	.\ecen4350_lcd_v4.c:3083: goto setRate;
      0049DF                      12971 00135$:
                                  12972 ;	.\ecen4350_lcd_v4.c:3086: if (selection == '2') {
      0049DF 78 71            [12]12973 	mov	r0,#_selection
      0049E1 B6 32 02         [24]12974 	cjne	@r0,#0x32,00541$
      0049E4 80 03            [24]12975 	sjmp	00542$
      0049E6                      12976 00541$:
      0049E6 02 4A 96         [24]12977 	ljmp	00141$
      0049E9                      12978 00542$:
                                  12979 ;	.\ecen4350_lcd_v4.c:3087: setCursor (0, 100);
      0049E9 75 6B 64         [24]12980 	mov	_setCursor_PARM_2,#0x64
      0049EC 75 6C 00         [24]12981 	mov	(_setCursor_PARM_2 + 1),#0x00
      0049EF 90 00 00         [24]12982 	mov	dptr,#0x0000
      0049F2 C0 07            [24]12983 	push	ar7
      0049F4 C0 05            [24]12984 	push	ar5
      0049F6 C0 04            [24]12985 	push	ar4
      0049F8 C0 03            [24]12986 	push	ar3
      0049FA C0 02            [24]12987 	push	ar2
      0049FC 12 05 51         [24]12988 	lcall	_setCursor
                                  12989 ;	.\ecen4350_lcd_v4.c:3088: LCD_string_write(" ");
      0049FF 90 5E B8         [24]12990 	mov	dptr,#___str_30
      004A02 75 F0 80         [24]12991 	mov	b,#0x80
      004A05 12 10 6B         [24]12992 	lcall	_LCD_string_write
                                  12993 ;	.\ecen4350_lcd_v4.c:3089: setColorHighlight1();
      004A08 12 16 45         [24]12994 	lcall	_setColorHighlight1
                                  12995 ;	.\ecen4350_lcd_v4.c:3090: LCD_string_write("<2> ");
      004A0B 90 66 D2         [24]12996 	mov	dptr,#___str_169
      004A0E 75 F0 80         [24]12997 	mov	b,#0x80
      004A11 12 10 6B         [24]12998 	lcall	_LCD_string_write
                                  12999 ;	.\ecen4350_lcd_v4.c:3091: setColorHighlight2();
      004A14 12 16 51         [24]13000 	lcall	_setColorHighlight2
                                  13001 ;	.\ecen4350_lcd_v4.c:3092: LCD_string_write("Number of Bits\n");
      004A17 90 66 D7         [24]13002 	mov	dptr,#___str_170
      004A1A 75 F0 80         [24]13003 	mov	b,#0x80
      004A1D 12 10 6B         [24]13004 	lcall	_LCD_string_write
                                  13005 ;	.\ecen4350_lcd_v4.c:3093: setColorDefault();
      004A20 12 16 2F         [24]13006 	lcall	_setColorDefault
                                  13007 ;	.\ecen4350_lcd_v4.c:3094: LCD_string_write("     ");
      004A23 90 66 74         [24]13008 	mov	dptr,#___str_162
      004A26 75 F0 80         [24]13009 	mov	b,#0x80
      004A29 12 10 6B         [24]13010 	lcall	_LCD_string_write
                                  13011 ;	.\ecen4350_lcd_v4.c:3095: setColorHighlight1();
      004A2C 12 16 45         [24]13012 	lcall	_setColorHighlight1
                                  13013 ;	.\ecen4350_lcd_v4.c:3096: LCD_string_write("(8 or 9 bits)\n");
      004A2F 90 66 E7         [24]13014 	mov	dptr,#___str_171
      004A32 75 F0 80         [24]13015 	mov	b,#0x80
      004A35 12 10 6B         [24]13016 	lcall	_LCD_string_write
      004A38 D0 02            [24]13017 	pop	ar2
      004A3A D0 03            [24]13018 	pop	ar3
      004A3C D0 04            [24]13019 	pop	ar4
      004A3E D0 05            [24]13020 	pop	ar5
      004A40 D0 07            [24]13021 	pop	ar7
                                  13022 ;	.\ecen4350_lcd_v4.c:3097: if (UART_en == 1) {
      004A42 78 72            [12]13023 	mov	r0,#_UART_en
      004A44 B6 01 47         [24]13024 	cjne	@r0,#0x01,00137$
                                  13025 ;	.\ecen4350_lcd_v4.c:3098: setCursor(0, 200);
      004A47 75 6B C8         [24]13026 	mov	_setCursor_PARM_2,#0xc8
      004A4A 75 6C 00         [24]13027 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A4D 90 00 00         [24]13028 	mov	dptr,#0x0000
      004A50 C0 07            [24]13029 	push	ar7
      004A52 C0 05            [24]13030 	push	ar5
      004A54 C0 04            [24]13031 	push	ar4
      004A56 C0 03            [24]13032 	push	ar3
      004A58 C0 02            [24]13033 	push	ar2
      004A5A 12 05 51         [24]13034 	lcall	_setCursor
                                  13035 ;	.\ecen4350_lcd_v4.c:3099: setColorRed();
      004A5D 12 16 74         [24]13036 	lcall	_setColorRed
                                  13037 ;	.\ecen4350_lcd_v4.c:3100: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004A60 90 66 B0         [24]13038 	mov	dptr,#___str_168
      004A63 75 F0 80         [24]13039 	mov	b,#0x80
      004A66 12 10 6B         [24]13040 	lcall	_LCD_string_write
                                  13041 ;	.\ecen4350_lcd_v4.c:3101: setColorDefault();
      004A69 12 16 2F         [24]13042 	lcall	_setColorDefault
                                  13043 ;	.\ecen4350_lcd_v4.c:3102: setCursor(0, 100);		
      004A6C 75 6B 64         [24]13044 	mov	_setCursor_PARM_2,#0x64
      004A6F 75 6C 00         [24]13045 	mov	(_setCursor_PARM_2 + 1),#0x00
      004A72 90 00 00         [24]13046 	mov	dptr,#0x0000
      004A75 12 05 51         [24]13047 	lcall	_setCursor
                                  13048 ;	.\ecen4350_lcd_v4.c:3103: LCD_string_write(" <2> Number of Bits\n     (8 or 9 bits)\n");
      004A78 90 65 DB         [24]13049 	mov	dptr,#___str_153
      004A7B 75 F0 80         [24]13050 	mov	b,#0x80
      004A7E 12 10 6B         [24]13051 	lcall	_LCD_string_write
      004A81 D0 02            [24]13052 	pop	ar2
      004A83 D0 03            [24]13053 	pop	ar3
      004A85 D0 04            [24]13054 	pop	ar4
      004A87 D0 05            [24]13055 	pop	ar5
      004A89 D0 07            [24]13056 	pop	ar7
                                  13057 ;	.\ecen4350_lcd_v4.c:3104: goto mainInput;
      004A8B 02 48 13         [24]13058 	ljmp	00121$
      004A8E                      13059 00137$:
                                  13060 ;	.\ecen4350_lcd_v4.c:3105: } if (UART_en == 0) goto setBit;
      004A8E 78 72            [12]13061 	mov	r0,#_UART_en
      004A90 E6               [12]13062 	mov	a,@r0
      004A91 70 03            [24]13063 	jnz	00545$
      004A93 02 4F 9A         [24]13064 	ljmp	00195$
      004A96                      13065 00545$:
      004A96                      13066 00141$:
                                  13067 ;	.\ecen4350_lcd_v4.c:3106: } if (selection == '3') {
      004A96 78 71            [12]13068 	mov	r0,#_selection
      004A98 B6 33 02         [24]13069 	cjne	@r0,#0x33,00546$
      004A9B 80 03            [24]13070 	sjmp	00547$
      004A9D                      13071 00546$:
      004A9D 02 4B 59         [24]13072 	ljmp	00147$
      004AA0                      13073 00547$:
                                  13074 ;	.\ecen4350_lcd_v4.c:3107: setCursor (0, 140);
      004AA0 75 6B 8C         [24]13075 	mov	_setCursor_PARM_2,#0x8c
      004AA3 75 6C 00         [24]13076 	mov	(_setCursor_PARM_2 + 1),#0x00
      004AA6 90 00 00         [24]13077 	mov	dptr,#0x0000
      004AA9 C0 07            [24]13078 	push	ar7
      004AAB C0 05            [24]13079 	push	ar5
      004AAD C0 04            [24]13080 	push	ar4
      004AAF C0 03            [24]13081 	push	ar3
      004AB1 C0 02            [24]13082 	push	ar2
      004AB3 12 05 51         [24]13083 	lcall	_setCursor
                                  13084 ;	.\ecen4350_lcd_v4.c:3108: LCD_string_write(" ");
      004AB6 90 5E B8         [24]13085 	mov	dptr,#___str_30
      004AB9 75 F0 80         [24]13086 	mov	b,#0x80
      004ABC 12 10 6B         [24]13087 	lcall	_LCD_string_write
                                  13088 ;	.\ecen4350_lcd_v4.c:3109: setColorHighlight1();
      004ABF 12 16 45         [24]13089 	lcall	_setColorHighlight1
                                  13090 ;	.\ecen4350_lcd_v4.c:3110: LCD_string_write("<3> ");
      004AC2 90 66 F6         [24]13091 	mov	dptr,#___str_172
      004AC5 75 F0 80         [24]13092 	mov	b,#0x80
      004AC8 12 10 6B         [24]13093 	lcall	_LCD_string_write
                                  13094 ;	.\ecen4350_lcd_v4.c:3111: setColorHighlight2();
      004ACB 12 16 51         [24]13095 	lcall	_setColorHighlight2
                                  13096 ;	.\ecen4350_lcd_v4.c:3112: LCD_string_write("Parity ");
      004ACE 90 66 FB         [24]13097 	mov	dptr,#___str_173
      004AD1 75 F0 80         [24]13098 	mov	b,#0x80
      004AD4 12 10 6B         [24]13099 	lcall	_LCD_string_write
                                  13100 ;	.\ecen4350_lcd_v4.c:3113: setColorHighlight1();
      004AD7 12 16 45         [24]13101 	lcall	_setColorHighlight1
                                  13102 ;	.\ecen4350_lcd_v4.c:3114: LCD_string_write("(Even/\n");
      004ADA 90 67 03         [24]13103 	mov	dptr,#___str_174
      004ADD 75 F0 80         [24]13104 	mov	b,#0x80
      004AE0 12 10 6B         [24]13105 	lcall	_LCD_string_write
                                  13106 ;	.\ecen4350_lcd_v4.c:3115: setColorDefault();
      004AE3 12 16 2F         [24]13107 	lcall	_setColorDefault
                                  13108 ;	.\ecen4350_lcd_v4.c:3116: LCD_string_write("     ");
      004AE6 90 66 74         [24]13109 	mov	dptr,#___str_162
      004AE9 75 F0 80         [24]13110 	mov	b,#0x80
      004AEC 12 10 6B         [24]13111 	lcall	_LCD_string_write
                                  13112 ;	.\ecen4350_lcd_v4.c:3117: setColorHighlight1();
      004AEF 12 16 45         [24]13113 	lcall	_setColorHighlight1
                                  13114 ;	.\ecen4350_lcd_v4.c:3118: LCD_string_write("(Odd/None)\n");
      004AF2 90 67 0B         [24]13115 	mov	dptr,#___str_175
      004AF5 75 F0 80         [24]13116 	mov	b,#0x80
      004AF8 12 10 6B         [24]13117 	lcall	_LCD_string_write
      004AFB D0 02            [24]13118 	pop	ar2
      004AFD D0 03            [24]13119 	pop	ar3
      004AFF D0 04            [24]13120 	pop	ar4
      004B01 D0 05            [24]13121 	pop	ar5
      004B03 D0 07            [24]13122 	pop	ar7
                                  13123 ;	.\ecen4350_lcd_v4.c:3119: if (UART_en == 1) {
      004B05 78 72            [12]13124 	mov	r0,#_UART_en
      004B07 B6 01 47         [24]13125 	cjne	@r0,#0x01,00143$
                                  13126 ;	.\ecen4350_lcd_v4.c:3120: setCursor(0, 200);
      004B0A 75 6B C8         [24]13127 	mov	_setCursor_PARM_2,#0xc8
      004B0D 75 6C 00         [24]13128 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B10 90 00 00         [24]13129 	mov	dptr,#0x0000
      004B13 C0 07            [24]13130 	push	ar7
      004B15 C0 05            [24]13131 	push	ar5
      004B17 C0 04            [24]13132 	push	ar4
      004B19 C0 03            [24]13133 	push	ar3
      004B1B C0 02            [24]13134 	push	ar2
      004B1D 12 05 51         [24]13135 	lcall	_setCursor
                                  13136 ;	.\ecen4350_lcd_v4.c:3121: setColorRed();
      004B20 12 16 74         [24]13137 	lcall	_setColorRed
                                  13138 ;	.\ecen4350_lcd_v4.c:3122: LCD_string_write("\n\n\n\n Please disable\n UART first.\n");
      004B23 90 66 B0         [24]13139 	mov	dptr,#___str_168
      004B26 75 F0 80         [24]13140 	mov	b,#0x80
      004B29 12 10 6B         [24]13141 	lcall	_LCD_string_write
                                  13142 ;	.\ecen4350_lcd_v4.c:3123: setColorDefault();
      004B2C 12 16 2F         [24]13143 	lcall	_setColorDefault
                                  13144 ;	.\ecen4350_lcd_v4.c:3124: setCursor(0, 140);
      004B2F 75 6B 8C         [24]13145 	mov	_setCursor_PARM_2,#0x8c
      004B32 75 6C 00         [24]13146 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B35 90 00 00         [24]13147 	mov	dptr,#0x0000
      004B38 12 05 51         [24]13148 	lcall	_setCursor
                                  13149 ;	.\ecen4350_lcd_v4.c:3125: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      004B3B 90 66 03         [24]13150 	mov	dptr,#___str_154
      004B3E 75 F0 80         [24]13151 	mov	b,#0x80
      004B41 12 10 6B         [24]13152 	lcall	_LCD_string_write
      004B44 D0 02            [24]13153 	pop	ar2
      004B46 D0 03            [24]13154 	pop	ar3
      004B48 D0 04            [24]13155 	pop	ar4
      004B4A D0 05            [24]13156 	pop	ar5
      004B4C D0 07            [24]13157 	pop	ar7
                                  13158 ;	.\ecen4350_lcd_v4.c:3126: goto mainInput;
      004B4E 02 48 13         [24]13159 	ljmp	00121$
      004B51                      13160 00143$:
                                  13161 ;	.\ecen4350_lcd_v4.c:3127: } if (UART_en == 0) goto setParity;
      004B51 78 72            [12]13162 	mov	r0,#_UART_en
      004B53 E6               [12]13163 	mov	a,@r0
      004B54 70 35            [24]13164 	jnz	00149$
      004B56 02 50 A9         [24]13165 	ljmp	00202$
      004B59                      13166 00147$:
                                  13167 ;	.\ecen4350_lcd_v4.c:3129: setColorRed();
      004B59 C0 07            [24]13168 	push	ar7
      004B5B C0 05            [24]13169 	push	ar5
      004B5D C0 04            [24]13170 	push	ar4
      004B5F C0 03            [24]13171 	push	ar3
      004B61 C0 02            [24]13172 	push	ar2
      004B63 12 16 74         [24]13173 	lcall	_setColorRed
                                  13174 ;	.\ecen4350_lcd_v4.c:3130: setCursor(0, 200);
      004B66 75 6B C8         [24]13175 	mov	_setCursor_PARM_2,#0xc8
      004B69 75 6C 00         [24]13176 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B6C 90 00 00         [24]13177 	mov	dptr,#0x0000
      004B6F 12 05 51         [24]13178 	lcall	_setCursor
                                  13179 ;	.\ecen4350_lcd_v4.c:3131: LCD_string_write("\n\n\n\n Incorrect input\n  Try again.\n");
      004B72 90 67 17         [24]13180 	mov	dptr,#___str_176
      004B75 75 F0 80         [24]13181 	mov	b,#0x80
      004B78 12 10 6B         [24]13182 	lcall	_LCD_string_write
                                  13183 ;	.\ecen4350_lcd_v4.c:3132: setColorDefault();
      004B7B 12 16 2F         [24]13184 	lcall	_setColorDefault
      004B7E D0 02            [24]13185 	pop	ar2
      004B80 D0 03            [24]13186 	pop	ar3
      004B82 D0 04            [24]13187 	pop	ar4
      004B84 D0 05            [24]13188 	pop	ar5
      004B86 D0 07            [24]13189 	pop	ar7
                                  13190 ;	.\ecen4350_lcd_v4.c:3133: goto mainInput;
      004B88 02 48 13         [24]13191 	ljmp	00121$
                                  13192 ;	.\ecen4350_lcd_v4.c:3136: verifyUART:
      004B8B                      13193 00149$:
                                  13194 ;	.\ecen4350_lcd_v4.c:3137: clearLCD();
      004B8B C0 07            [24]13195 	push	ar7
      004B8D C0 05            [24]13196 	push	ar5
      004B8F C0 04            [24]13197 	push	ar4
      004B91 C0 03            [24]13198 	push	ar3
      004B93 C0 02            [24]13199 	push	ar2
      004B95 12 0D EE         [24]13200 	lcall	_clearLCD
                                  13201 ;	.\ecen4350_lcd_v4.c:3138: setCursor(0, 120);
      004B98 75 6B 78         [24]13202 	mov	_setCursor_PARM_2,#0x78
      004B9B 75 6C 00         [24]13203 	mov	(_setCursor_PARM_2 + 1),#0x00
      004B9E 90 00 00         [24]13204 	mov	dptr,#0x0000
      004BA1 12 05 51         [24]13205 	lcall	_setCursor
      004BA4 D0 02            [24]13206 	pop	ar2
      004BA6 D0 03            [24]13207 	pop	ar3
      004BA8 D0 04            [24]13208 	pop	ar4
      004BAA D0 05            [24]13209 	pop	ar5
      004BAC D0 07            [24]13210 	pop	ar7
                                  13211 ;	.\ecen4350_lcd_v4.c:3139: if (initLock == 1) {
      004BAE BA 01 02         [24]13212 	cjne	r2,#0x01,00551$
      004BB1 80 03            [24]13213 	sjmp	00552$
      004BB3                      13214 00551$:
      004BB3 02 45 82         [24]13215 	ljmp	00101$
      004BB6                      13216 00552$:
                                  13217 ;	.\ecen4350_lcd_v4.c:3140: if (UART_en == 1) {
      004BB6 78 72            [12]13218 	mov	r0,#_UART_en
      004BB8 B6 01 3B         [24]13219 	cjne	@r0,#0x01,00151$
                                  13220 ;	.\ecen4350_lcd_v4.c:3141: setColorGreen();
      004BBB C0 07            [24]13221 	push	ar7
      004BBD C0 05            [24]13222 	push	ar5
      004BBF C0 04            [24]13223 	push	ar4
      004BC1 C0 03            [24]13224 	push	ar3
      004BC3 12 16 8A         [24]13225 	lcall	_setColorGreen
                                  13226 ;	.\ecen4350_lcd_v4.c:3142: LCD_string_write("\n Disabling UART...\n");
      004BC6 90 67 3A         [24]13227 	mov	dptr,#___str_177
      004BC9 75 F0 80         [24]13228 	mov	b,#0x80
      004BCC 12 10 6B         [24]13229 	lcall	_LCD_string_write
                                  13230 ;	.\ecen4350_lcd_v4.c:3143: setColorDefault();
      004BCF 12 16 2F         [24]13231 	lcall	_setColorDefault
                                  13232 ;	.\ecen4350_lcd_v4.c:3144: delay(40);
      004BD2 90 00 28         [24]13233 	mov	dptr,#0x0028
      004BD5 12 01 87         [24]13234 	lcall	_delay
                                  13235 ;	.\ecen4350_lcd_v4.c:3145: UART_en = 0;
      004BD8 78 72            [12]13236 	mov	r0,#_UART_en
      004BDA 76 00            [12]13237 	mov	@r0,#0x00
                                  13238 ;	.\ecen4350_lcd_v4.c:3146: bitSet = 0;
      004BDC 78 76            [12]13239 	mov	r0,#_bitSet
      004BDE 76 00            [12]13240 	mov	@r0,#0x00
                                  13241 ;	.\ecen4350_lcd_v4.c:3147: paritySet = 0;
      004BE0 78 78            [12]13242 	mov	r0,#_paritySet
      004BE2 76 00            [12]13243 	mov	@r0,#0x00
                                  13244 ;	.\ecen4350_lcd_v4.c:3148: baudSet = 0;
      004BE4 78 73            [12]13245 	mov	r0,#_baudSet
      004BE6 76 00            [12]13246 	mov	@r0,#0x00
                                  13247 ;	.\ecen4350_lcd_v4.c:3149: setColorDefault();
      004BE8 12 16 2F         [24]13248 	lcall	_setColorDefault
      004BEB D0 03            [24]13249 	pop	ar3
      004BED D0 04            [24]13250 	pop	ar4
      004BEF D0 05            [24]13251 	pop	ar5
      004BF1 D0 07            [24]13252 	pop	ar7
                                  13253 ;	.\ecen4350_lcd_v4.c:3150: goto uartMenu;
      004BF3 02 45 82         [24]13254 	ljmp	00101$
      004BF6                      13255 00151$:
                                  13256 ;	.\ecen4350_lcd_v4.c:3151: } if (UART_en == 0) {
      004BF6 78 72            [12]13257 	mov	r0,#_UART_en
      004BF8 E6               [12]13258 	mov	a,@r0
      004BF9 60 03            [24]13259 	jz	00555$
      004BFB 02 4C E7         [24]13260 	ljmp	00168$
      004BFE                      13261 00555$:
                                  13262 ;	.\ecen4350_lcd_v4.c:3152: if ((baudSet == 1) && (paritySet == 1) && (bitSet == 1)) {
      004BFE 78 73            [12]13263 	mov	r0,#_baudSet
      004C00 B6 01 3F         [24]13264 	cjne	@r0,#0x01,00159$
      004C03 78 78            [12]13265 	mov	r0,#_paritySet
      004C05 B6 01 3A         [24]13266 	cjne	@r0,#0x01,00159$
      004C08 78 76            [12]13267 	mov	r0,#_bitSet
      004C0A B6 01 35         [24]13268 	cjne	@r0,#0x01,00159$
                                  13269 ;	.\ecen4350_lcd_v4.c:3153: setColorSelect();
      004C0D C0 07            [24]13270 	push	ar7
      004C0F C0 05            [24]13271 	push	ar5
      004C11 C0 04            [24]13272 	push	ar4
      004C13 C0 03            [24]13273 	push	ar3
      004C15 12 16 3A         [24]13274 	lcall	_setColorSelect
                                  13275 ;	.\ecen4350_lcd_v4.c:3154: LCD_string_write("\n Settings Verified:\n");
      004C18 90 67 4F         [24]13276 	mov	dptr,#___str_178
      004C1B 75 F0 80         [24]13277 	mov	b,#0x80
      004C1E 12 10 6B         [24]13278 	lcall	_LCD_string_write
                                  13279 ;	.\ecen4350_lcd_v4.c:3155: setColorDefault();
      004C21 12 16 2F         [24]13280 	lcall	_setColorDefault
                                  13281 ;	.\ecen4350_lcd_v4.c:3156: LCD_string_write(" Enabling UART...");
      004C24 90 67 65         [24]13282 	mov	dptr,#___str_179
      004C27 75 F0 80         [24]13283 	mov	b,#0x80
      004C2A 12 10 6B         [24]13284 	lcall	_LCD_string_write
                                  13285 ;	.\ecen4350_lcd_v4.c:3158: UART_en = 1;
      004C2D 78 72            [12]13286 	mov	r0,#_UART_en
      004C2F 76 01            [12]13287 	mov	@r0,#0x01
                                  13288 ;	.\ecen4350_lcd_v4.c:3160: delay(40);
      004C31 90 00 28         [24]13289 	mov	dptr,#0x0028
      004C34 12 01 87         [24]13290 	lcall	_delay
      004C37 D0 03            [24]13291 	pop	ar3
      004C39 D0 04            [24]13292 	pop	ar4
      004C3B D0 05            [24]13293 	pop	ar5
      004C3D D0 07            [24]13294 	pop	ar7
                                  13295 ;	.\ecen4350_lcd_v4.c:3161: goto uartMenu;
      004C3F 02 45 82         [24]13296 	ljmp	00101$
      004C42                      13297 00159$:
                                  13298 ;	.\ecen4350_lcd_v4.c:3163: if (baudSet == 0) {
      004C42 78 73            [12]13299 	mov	r0,#_baudSet
      004C44 E6               [12]13300 	mov	a,@r0
      004C45 70 34            [24]13301 	jnz	00153$
                                  13302 ;	.\ecen4350_lcd_v4.c:3164: setColorRed();
      004C47 C0 07            [24]13303 	push	ar7
      004C49 C0 05            [24]13304 	push	ar5
      004C4B C0 04            [24]13305 	push	ar4
      004C4D C0 03            [24]13306 	push	ar3
      004C4F C0 02            [24]13307 	push	ar2
      004C51 12 16 74         [24]13308 	lcall	_setColorRed
                                  13309 ;	.\ecen4350_lcd_v4.c:3165: LCD_string_write(" BAUD ERROR\n");
      004C54 90 67 77         [24]13310 	mov	dptr,#___str_180
      004C57 75 F0 80         [24]13311 	mov	b,#0x80
      004C5A 12 10 6B         [24]13312 	lcall	_LCD_string_write
                                  13313 ;	.\ecen4350_lcd_v4.c:3166: setColorDefault();
      004C5D 12 16 2F         [24]13314 	lcall	_setColorDefault
                                  13315 ;	.\ecen4350_lcd_v4.c:3167: LCD_string_write(" Entering Baud...\n");
      004C60 90 67 84         [24]13316 	mov	dptr,#___str_181
      004C63 75 F0 80         [24]13317 	mov	b,#0x80
      004C66 12 10 6B         [24]13318 	lcall	_LCD_string_write
                                  13319 ;	.\ecen4350_lcd_v4.c:3168: delay(40);
      004C69 90 00 28         [24]13320 	mov	dptr,#0x0028
      004C6C 12 01 87         [24]13321 	lcall	_delay
      004C6F D0 02            [24]13322 	pop	ar2
      004C71 D0 03            [24]13323 	pop	ar3
      004C73 D0 04            [24]13324 	pop	ar4
      004C75 D0 05            [24]13325 	pop	ar5
      004C77 D0 07            [24]13326 	pop	ar7
                                  13327 ;	.\ecen4350_lcd_v4.c:3169: goto setRate;
      004C79 80 6C            [24]13328 	sjmp	00168$
      004C7B                      13329 00153$:
                                  13330 ;	.\ecen4350_lcd_v4.c:3170: } if (bitSet == 0) {
      004C7B 78 76            [12]13331 	mov	r0,#_bitSet
      004C7D E6               [12]13332 	mov	a,@r0
      004C7E 70 2D            [24]13333 	jnz	00155$
                                  13334 ;	.\ecen4350_lcd_v4.c:3171: setColorRed();
      004C80 C0 04            [24]13335 	push	ar4
      004C82 C0 03            [24]13336 	push	ar3
      004C84 C0 02            [24]13337 	push	ar2
      004C86 12 16 74         [24]13338 	lcall	_setColorRed
                                  13339 ;	.\ecen4350_lcd_v4.c:3172: LCD_string_write(" BIT ERROR\n");
      004C89 90 67 97         [24]13340 	mov	dptr,#___str_182
      004C8C 75 F0 80         [24]13341 	mov	b,#0x80
      004C8F 12 10 6B         [24]13342 	lcall	_LCD_string_write
                                  13343 ;	.\ecen4350_lcd_v4.c:3173: setColorDefault();
      004C92 12 16 2F         [24]13344 	lcall	_setColorDefault
                                  13345 ;	.\ecen4350_lcd_v4.c:3174: LCD_string_write(" Entering Bits...\n");
      004C95 90 67 A3         [24]13346 	mov	dptr,#___str_183
      004C98 75 F0 80         [24]13347 	mov	b,#0x80
      004C9B 12 10 6B         [24]13348 	lcall	_LCD_string_write
                                  13349 ;	.\ecen4350_lcd_v4.c:3175: delay(40);
      004C9E 90 00 28         [24]13350 	mov	dptr,#0x0028
      004CA1 12 01 87         [24]13351 	lcall	_delay
      004CA4 D0 02            [24]13352 	pop	ar2
      004CA6 D0 03            [24]13353 	pop	ar3
      004CA8 D0 04            [24]13354 	pop	ar4
                                  13355 ;	.\ecen4350_lcd_v4.c:3176: goto setBit;
      004CAA 02 4F 9A         [24]13356 	ljmp	00195$
      004CAD                      13357 00155$:
                                  13358 ;	.\ecen4350_lcd_v4.c:3177: } if (paritySet == 0) {
      004CAD 78 78            [12]13359 	mov	r0,#_paritySet
      004CAF E6               [12]13360 	mov	a,@r0
      004CB0 70 35            [24]13361 	jnz	00168$
                                  13362 ;	.\ecen4350_lcd_v4.c:3178: setColorRed();
      004CB2 C0 07            [24]13363 	push	ar7
      004CB4 C0 05            [24]13364 	push	ar5
      004CB6 C0 04            [24]13365 	push	ar4
      004CB8 C0 03            [24]13366 	push	ar3
      004CBA C0 02            [24]13367 	push	ar2
      004CBC 12 16 74         [24]13368 	lcall	_setColorRed
                                  13369 ;	.\ecen4350_lcd_v4.c:3179: LCD_string_write(" PARITY ERROR\n");
      004CBF 90 67 B6         [24]13370 	mov	dptr,#___str_184
      004CC2 75 F0 80         [24]13371 	mov	b,#0x80
      004CC5 12 10 6B         [24]13372 	lcall	_LCD_string_write
                                  13373 ;	.\ecen4350_lcd_v4.c:3180: setColorDefault();
      004CC8 12 16 2F         [24]13374 	lcall	_setColorDefault
                                  13375 ;	.\ecen4350_lcd_v4.c:3181: LCD_string_write(" Entering Parity...\n");
      004CCB 90 67 C5         [24]13376 	mov	dptr,#___str_185
      004CCE 75 F0 80         [24]13377 	mov	b,#0x80
      004CD1 12 10 6B         [24]13378 	lcall	_LCD_string_write
                                  13379 ;	.\ecen4350_lcd_v4.c:3182: delay(40);
      004CD4 90 00 28         [24]13380 	mov	dptr,#0x0028
      004CD7 12 01 87         [24]13381 	lcall	_delay
      004CDA D0 02            [24]13382 	pop	ar2
      004CDC D0 03            [24]13383 	pop	ar3
      004CDE D0 04            [24]13384 	pop	ar4
      004CE0 D0 05            [24]13385 	pop	ar5
      004CE2 D0 07            [24]13386 	pop	ar7
                                  13387 ;	.\ecen4350_lcd_v4.c:3183: goto setParity;
      004CE4 02 50 A9         [24]13388 	ljmp	00202$
                                  13389 ;	.\ecen4350_lcd_v4.c:3189: setRate: 
      004CE7                      13390 00168$:
                                  13391 ;	.\ecen4350_lcd_v4.c:3190: clearLCD();
      004CE7 C0 07            [24]13392 	push	ar7
      004CE9 C0 05            [24]13393 	push	ar5
      004CEB C0 04            [24]13394 	push	ar4
      004CED C0 03            [24]13395 	push	ar3
      004CEF C0 02            [24]13396 	push	ar2
      004CF1 12 0D EE         [24]13397 	lcall	_clearLCD
                                  13398 ;	.\ecen4350_lcd_v4.c:3191: fillTop(GRAY);
      004CF4 90 D6 BA         [24]13399 	mov	dptr,#0xd6ba
      004CF7 12 0C 21         [24]13400 	lcall	_fillTop
                                  13401 ;	.\ecen4350_lcd_v4.c:3192: setTextSize(5);
      004CFA 75 82 05         [24]13402 	mov	dpl,#0x05
      004CFD 12 05 6B         [24]13403 	lcall	_setTextSize
                                  13404 ;	.\ecen4350_lcd_v4.c:3193: setColorMenu();
      004D00 12 16 68         [24]13405 	lcall	_setColorMenu
                                  13406 ;	.\ecen4350_lcd_v4.c:3194: setCursor(30, 0);
      004D03 E4               [12]13407 	clr	a
      004D04 F5 6B            [12]13408 	mov	_setCursor_PARM_2,a
      004D06 F5 6C            [12]13409 	mov	(_setCursor_PARM_2 + 1),a
      004D08 90 00 1E         [24]13410 	mov	dptr,#0x001e
      004D0B 12 05 51         [24]13411 	lcall	_setCursor
                                  13412 ;	.\ecen4350_lcd_v4.c:3195: LCD_string_write("[UART]\n");
      004D0E 90 65 52         [24]13413 	mov	dptr,#___str_136
      004D11 75 F0 80         [24]13414 	mov	b,#0x80
      004D14 12 10 6B         [24]13415 	lcall	_LCD_string_write
                                  13416 ;	.\ecen4350_lcd_v4.c:3196: setTextSize(2);
      004D17 75 82 02         [24]13417 	mov	dpl,#0x02
      004D1A 12 05 6B         [24]13418 	lcall	_setTextSize
                                  13419 ;	.\ecen4350_lcd_v4.c:3197: setColorDefault();
      004D1D 12 16 2F         [24]13420 	lcall	_setColorDefault
                                  13421 ;	.\ecen4350_lcd_v4.c:3198: setCursor(0, 60);
      004D20 75 6B 3C         [24]13422 	mov	_setCursor_PARM_2,#0x3c
      004D23 75 6C 00         [24]13423 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D26 90 00 00         [24]13424 	mov	dptr,#0x0000
      004D29 12 05 51         [24]13425 	lcall	_setCursor
                                  13426 ;	.\ecen4350_lcd_v4.c:3199: LCD_string_write(" <1> 1200 Baud\n");
      004D2C 90 67 DA         [24]13427 	mov	dptr,#___str_186
      004D2F 75 F0 80         [24]13428 	mov	b,#0x80
      004D32 12 10 6B         [24]13429 	lcall	_LCD_string_write
                                  13430 ;	.\ecen4350_lcd_v4.c:3200: setCursor(0, 100);
      004D35 75 6B 64         [24]13431 	mov	_setCursor_PARM_2,#0x64
      004D38 75 6C 00         [24]13432 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D3B 90 00 00         [24]13433 	mov	dptr,#0x0000
      004D3E 12 05 51         [24]13434 	lcall	_setCursor
                                  13435 ;	.\ecen4350_lcd_v4.c:3201: LCD_string_write(" <2> 2400 Baud\n");
      004D41 90 67 EA         [24]13436 	mov	dptr,#___str_187
      004D44 75 F0 80         [24]13437 	mov	b,#0x80
      004D47 12 10 6B         [24]13438 	lcall	_LCD_string_write
                                  13439 ;	.\ecen4350_lcd_v4.c:3202: setCursor(0, 140);
      004D4A 75 6B 8C         [24]13440 	mov	_setCursor_PARM_2,#0x8c
      004D4D 75 6C 00         [24]13441 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D50 90 00 00         [24]13442 	mov	dptr,#0x0000
      004D53 12 05 51         [24]13443 	lcall	_setCursor
                                  13444 ;	.\ecen4350_lcd_v4.c:3203: LCD_string_write(" <3> 4800 Baud\n");
      004D56 90 67 FA         [24]13445 	mov	dptr,#___str_188
      004D59 75 F0 80         [24]13446 	mov	b,#0x80
      004D5C 12 10 6B         [24]13447 	lcall	_LCD_string_write
                                  13448 ;	.\ecen4350_lcd_v4.c:3204: setCursor(0, 180);
      004D5F 75 6B B4         [24]13449 	mov	_setCursor_PARM_2,#0xb4
      004D62 75 6C 00         [24]13450 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D65 90 00 00         [24]13451 	mov	dptr,#0x0000
      004D68 12 05 51         [24]13452 	lcall	_setCursor
                                  13453 ;	.\ecen4350_lcd_v4.c:3205: LCD_string_write(" <4> 9600 Baud\n");
      004D6B 90 68 0A         [24]13454 	mov	dptr,#___str_189
      004D6E 75 F0 80         [24]13455 	mov	b,#0x80
      004D71 12 10 6B         [24]13456 	lcall	_LCD_string_write
                                  13457 ;	.\ecen4350_lcd_v4.c:3206: setCursor(0, 220);
      004D74 75 6B DC         [24]13458 	mov	_setCursor_PARM_2,#0xdc
      004D77 75 6C 00         [24]13459 	mov	(_setCursor_PARM_2 + 1),#0x00
      004D7A 90 00 00         [24]13460 	mov	dptr,#0x0000
      004D7D 12 05 51         [24]13461 	lcall	_setCursor
                                  13462 ;	.\ecen4350_lcd_v4.c:3207: LCD_string_write(" <5> 19200 Baud\n");
      004D80 90 68 1A         [24]13463 	mov	dptr,#___str_190
      004D83 75 F0 80         [24]13464 	mov	b,#0x80
      004D86 12 10 6B         [24]13465 	lcall	_LCD_string_write
                                  13466 ;	.\ecen4350_lcd_v4.c:3209: selection = keyDetect();
      004D89 12 11 89         [24]13467 	lcall	_keyDetect
      004D8C AE 82            [24]13468 	mov	r6,dpl
      004D8E D0 02            [24]13469 	pop	ar2
      004D90 D0 03            [24]13470 	pop	ar3
      004D92 D0 04            [24]13471 	pop	ar4
      004D94 D0 05            [24]13472 	pop	ar5
      004D96 D0 07            [24]13473 	pop	ar7
      004D98 78 71            [12]13474 	mov	r0,#_selection
      004D9A A6 06            [24]13475 	mov	@r0,ar6
                                  13476 ;	.\ecen4350_lcd_v4.c:3210: if (selection == '1' ) {
      004D9C BE 31 5A         [24]13477 	cjne	r6,#0x31,00174$
                                  13478 ;	.\ecen4350_lcd_v4.c:3211: setCursor(0, 60);
      004D9F 75 6B 3C         [24]13479 	mov	_setCursor_PARM_2,#0x3c
      004DA2 75 6C 00         [24]13480 	mov	(_setCursor_PARM_2 + 1),#0x00
      004DA5 90 00 00         [24]13481 	mov	dptr,#0x0000
      004DA8 C0 07            [24]13482 	push	ar7
      004DAA C0 05            [24]13483 	push	ar5
      004DAC C0 04            [24]13484 	push	ar4
      004DAE C0 03            [24]13485 	push	ar3
      004DB0 C0 02            [24]13486 	push	ar2
      004DB2 12 05 51         [24]13487 	lcall	_setCursor
                                  13488 ;	.\ecen4350_lcd_v4.c:3212: LCD_string_write(" ");
      004DB5 90 5E B8         [24]13489 	mov	dptr,#___str_30
      004DB8 75 F0 80         [24]13490 	mov	b,#0x80
      004DBB 12 10 6B         [24]13491 	lcall	_LCD_string_write
                                  13492 ;	.\ecen4350_lcd_v4.c:3213: setColorHighlight1();
      004DBE 12 16 45         [24]13493 	lcall	_setColorHighlight1
                                  13494 ;	.\ecen4350_lcd_v4.c:3214: LCD_string_write("<1> ");
      004DC1 90 66 9C         [24]13495 	mov	dptr,#___str_166
      004DC4 75 F0 80         [24]13496 	mov	b,#0x80
      004DC7 12 10 6B         [24]13497 	lcall	_LCD_string_write
                                  13498 ;	.\ecen4350_lcd_v4.c:3215: setColorHighlight2();
      004DCA 12 16 51         [24]13499 	lcall	_setColorHighlight2
                                  13500 ;	.\ecen4350_lcd_v4.c:3216: LCD_string_write("1200 Baud\n");
      004DCD 90 68 2B         [24]13501 	mov	dptr,#___str_191
      004DD0 75 F0 80         [24]13502 	mov	b,#0x80
      004DD3 12 10 6B         [24]13503 	lcall	_LCD_string_write
      004DD6 D0 02            [24]13504 	pop	ar2
      004DD8 D0 03            [24]13505 	pop	ar3
      004DDA D0 04            [24]13506 	pop	ar4
      004DDC D0 05            [24]13507 	pop	ar5
      004DDE D0 07            [24]13508 	pop	ar7
                                  13509 ;	.\ecen4350_lcd_v4.c:3217: TH1 = 0xE6;	// 1200 baud
      004DE0 75 8D E6         [24]13510 	mov	_TH1,#0xe6
                                  13511 ;	.\ecen4350_lcd_v4.c:3218: PCON = 0x00; //SMOD = 0
      004DE3 75 87 00         [24]13512 	mov	_PCON,#0x00
                                  13513 ;	.\ecen4350_lcd_v4.c:3219: baudSet = 1;
      004DE6 78 73            [12]13514 	mov	r0,#_baudSet
      004DE8 76 01            [12]13515 	mov	@r0,#0x01
                                  13516 ;	.\ecen4350_lcd_v4.c:3220: baudType = 0x1;
      004DEA 78 90            [12]13517 	mov	r0,#_uart_baudType_65536_763
      004DEC 76 01            [12]13518 	mov	@r0,#0x01
                                  13519 ;	.\ecen4350_lcd_v4.c:3221: if (initLock == 1) goto verifyUART;
      004DEE BA 01 02         [24]13520 	cjne	r2,#0x01,00567$
      004DF1 80 03            [24]13521 	sjmp	00568$
      004DF3                      13522 00567$:
      004DF3 02 45 82         [24]13523 	ljmp	00101$
      004DF6                      13524 00568$:
      004DF6 02 4B 8B         [24]13525 	ljmp	00149$
                                  13526 ;	.\ecen4350_lcd_v4.c:3222: else goto uartMenu;
      004DF9                      13527 00174$:
                                  13528 ;	.\ecen4350_lcd_v4.c:3224: if (selection == '2' ) {
      004DF9 BE 32 5A         [24]13529 	cjne	r6,#0x32,00179$
                                  13530 ;	.\ecen4350_lcd_v4.c:3225: setCursor(0, 100);
      004DFC 75 6B 64         [24]13531 	mov	_setCursor_PARM_2,#0x64
      004DFF 75 6C 00         [24]13532 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E02 90 00 00         [24]13533 	mov	dptr,#0x0000
      004E05 C0 07            [24]13534 	push	ar7
      004E07 C0 05            [24]13535 	push	ar5
      004E09 C0 04            [24]13536 	push	ar4
      004E0B C0 03            [24]13537 	push	ar3
      004E0D C0 02            [24]13538 	push	ar2
      004E0F 12 05 51         [24]13539 	lcall	_setCursor
                                  13540 ;	.\ecen4350_lcd_v4.c:3226: LCD_string_write(" ");
      004E12 90 5E B8         [24]13541 	mov	dptr,#___str_30
      004E15 75 F0 80         [24]13542 	mov	b,#0x80
      004E18 12 10 6B         [24]13543 	lcall	_LCD_string_write
                                  13544 ;	.\ecen4350_lcd_v4.c:3227: setColorHighlight1();
      004E1B 12 16 45         [24]13545 	lcall	_setColorHighlight1
                                  13546 ;	.\ecen4350_lcd_v4.c:3228: LCD_string_write("<2> ");
      004E1E 90 66 D2         [24]13547 	mov	dptr,#___str_169
      004E21 75 F0 80         [24]13548 	mov	b,#0x80
      004E24 12 10 6B         [24]13549 	lcall	_LCD_string_write
                                  13550 ;	.\ecen4350_lcd_v4.c:3229: setColorHighlight2();
      004E27 12 16 51         [24]13551 	lcall	_setColorHighlight2
                                  13552 ;	.\ecen4350_lcd_v4.c:3230: LCD_string_write("2400 Baud\n");
      004E2A 90 68 36         [24]13553 	mov	dptr,#___str_192
      004E2D 75 F0 80         [24]13554 	mov	b,#0x80
      004E30 12 10 6B         [24]13555 	lcall	_LCD_string_write
      004E33 D0 02            [24]13556 	pop	ar2
      004E35 D0 03            [24]13557 	pop	ar3
      004E37 D0 04            [24]13558 	pop	ar4
      004E39 D0 05            [24]13559 	pop	ar5
      004E3B D0 07            [24]13560 	pop	ar7
                                  13561 ;	.\ecen4350_lcd_v4.c:3231: TH1 = 0xF3; // 2400 baud
      004E3D 75 8D F3         [24]13562 	mov	_TH1,#0xf3
                                  13563 ;	.\ecen4350_lcd_v4.c:3232: PCON = 0x00; //SMOD = 0
      004E40 75 87 00         [24]13564 	mov	_PCON,#0x00
                                  13565 ;	.\ecen4350_lcd_v4.c:3233: baudSet = 1;
      004E43 78 73            [12]13566 	mov	r0,#_baudSet
      004E45 76 01            [12]13567 	mov	@r0,#0x01
                                  13568 ;	.\ecen4350_lcd_v4.c:3234: baudType = 0x2;
      004E47 78 90            [12]13569 	mov	r0,#_uart_baudType_65536_763
      004E49 76 02            [12]13570 	mov	@r0,#0x02
                                  13571 ;	.\ecen4350_lcd_v4.c:3235: if (initLock == 1) goto verifyUART;
      004E4B BA 01 02         [24]13572 	cjne	r2,#0x01,00571$
      004E4E 80 03            [24]13573 	sjmp	00572$
      004E50                      13574 00571$:
      004E50 02 45 82         [24]13575 	ljmp	00101$
      004E53                      13576 00572$:
      004E53 02 4B 8B         [24]13577 	ljmp	00149$
                                  13578 ;	.\ecen4350_lcd_v4.c:3236: else goto uartMenu;
      004E56                      13579 00179$:
                                  13580 ;	.\ecen4350_lcd_v4.c:3238: if (selection == '3' ) {
      004E56 BE 33 5A         [24]13581 	cjne	r6,#0x33,00184$
                                  13582 ;	.\ecen4350_lcd_v4.c:3239: setCursor(0, 140);
      004E59 75 6B 8C         [24]13583 	mov	_setCursor_PARM_2,#0x8c
      004E5C 75 6C 00         [24]13584 	mov	(_setCursor_PARM_2 + 1),#0x00
      004E5F 90 00 00         [24]13585 	mov	dptr,#0x0000
      004E62 C0 07            [24]13586 	push	ar7
      004E64 C0 05            [24]13587 	push	ar5
      004E66 C0 04            [24]13588 	push	ar4
      004E68 C0 03            [24]13589 	push	ar3
      004E6A C0 02            [24]13590 	push	ar2
      004E6C 12 05 51         [24]13591 	lcall	_setCursor
                                  13592 ;	.\ecen4350_lcd_v4.c:3240: LCD_string_write(" ");
      004E6F 90 5E B8         [24]13593 	mov	dptr,#___str_30
      004E72 75 F0 80         [24]13594 	mov	b,#0x80
      004E75 12 10 6B         [24]13595 	lcall	_LCD_string_write
                                  13596 ;	.\ecen4350_lcd_v4.c:3241: setColorHighlight1();
      004E78 12 16 45         [24]13597 	lcall	_setColorHighlight1
                                  13598 ;	.\ecen4350_lcd_v4.c:3242: LCD_string_write("<3> ");
      004E7B 90 66 F6         [24]13599 	mov	dptr,#___str_172
      004E7E 75 F0 80         [24]13600 	mov	b,#0x80
      004E81 12 10 6B         [24]13601 	lcall	_LCD_string_write
                                  13602 ;	.\ecen4350_lcd_v4.c:3243: setColorHighlight2();
      004E84 12 16 51         [24]13603 	lcall	_setColorHighlight2
                                  13604 ;	.\ecen4350_lcd_v4.c:3244: LCD_string_write("4800 Baud\n");
      004E87 90 68 41         [24]13605 	mov	dptr,#___str_193
      004E8A 75 F0 80         [24]13606 	mov	b,#0x80
      004E8D 12 10 6B         [24]13607 	lcall	_LCD_string_write
      004E90 D0 02            [24]13608 	pop	ar2
      004E92 D0 03            [24]13609 	pop	ar3
      004E94 D0 04            [24]13610 	pop	ar4
      004E96 D0 05            [24]13611 	pop	ar5
      004E98 D0 07            [24]13612 	pop	ar7
                                  13613 ;	.\ecen4350_lcd_v4.c:3245: TH1 = 0xF3; //4800 baud
      004E9A 75 8D F3         [24]13614 	mov	_TH1,#0xf3
                                  13615 ;	.\ecen4350_lcd_v4.c:3246: PCON = 0x80; //SMOD 1
      004E9D 75 87 80         [24]13616 	mov	_PCON,#0x80
                                  13617 ;	.\ecen4350_lcd_v4.c:3247: baudSet = 1; 
      004EA0 78 73            [12]13618 	mov	r0,#_baudSet
      004EA2 76 01            [12]13619 	mov	@r0,#0x01
                                  13620 ;	.\ecen4350_lcd_v4.c:3248: baudType = 0x3;
      004EA4 78 90            [12]13621 	mov	r0,#_uart_baudType_65536_763
      004EA6 76 03            [12]13622 	mov	@r0,#0x03
                                  13623 ;	.\ecen4350_lcd_v4.c:3249: if (initLock == 1) goto verifyUART;
      004EA8 BA 01 02         [24]13624 	cjne	r2,#0x01,00575$
      004EAB 80 03            [24]13625 	sjmp	00576$
      004EAD                      13626 00575$:
      004EAD 02 45 82         [24]13627 	ljmp	00101$
      004EB0                      13628 00576$:
      004EB0 02 4B 8B         [24]13629 	ljmp	00149$
                                  13630 ;	.\ecen4350_lcd_v4.c:3250: else goto uartMenu;
      004EB3                      13631 00184$:
                                  13632 ;	.\ecen4350_lcd_v4.c:3252: if (selection == '4' ) {
      004EB3 BE 34 5A         [24]13633 	cjne	r6,#0x34,00189$
                                  13634 ;	.\ecen4350_lcd_v4.c:3253: setCursor(0, 180);
      004EB6 75 6B B4         [24]13635 	mov	_setCursor_PARM_2,#0xb4
      004EB9 75 6C 00         [24]13636 	mov	(_setCursor_PARM_2 + 1),#0x00
      004EBC 90 00 00         [24]13637 	mov	dptr,#0x0000
      004EBF C0 07            [24]13638 	push	ar7
      004EC1 C0 05            [24]13639 	push	ar5
      004EC3 C0 04            [24]13640 	push	ar4
      004EC5 C0 03            [24]13641 	push	ar3
      004EC7 C0 02            [24]13642 	push	ar2
      004EC9 12 05 51         [24]13643 	lcall	_setCursor
                                  13644 ;	.\ecen4350_lcd_v4.c:3254: LCD_string_write(" ");
      004ECC 90 5E B8         [24]13645 	mov	dptr,#___str_30
      004ECF 75 F0 80         [24]13646 	mov	b,#0x80
      004ED2 12 10 6B         [24]13647 	lcall	_LCD_string_write
                                  13648 ;	.\ecen4350_lcd_v4.c:3255: setColorHighlight1();
      004ED5 12 16 45         [24]13649 	lcall	_setColorHighlight1
                                  13650 ;	.\ecen4350_lcd_v4.c:3256: LCD_string_write("<4> ");
      004ED8 90 66 61         [24]13651 	mov	dptr,#___str_160
      004EDB 75 F0 80         [24]13652 	mov	b,#0x80
      004EDE 12 10 6B         [24]13653 	lcall	_LCD_string_write
                                  13654 ;	.\ecen4350_lcd_v4.c:3257: setColorHighlight2();
      004EE1 12 16 51         [24]13655 	lcall	_setColorHighlight2
                                  13656 ;	.\ecen4350_lcd_v4.c:3258: LCD_string_write("9600 Baud\n");
      004EE4 90 68 4C         [24]13657 	mov	dptr,#___str_194
      004EE7 75 F0 80         [24]13658 	mov	b,#0x80
      004EEA 12 10 6B         [24]13659 	lcall	_LCD_string_write
      004EED D0 02            [24]13660 	pop	ar2
      004EEF D0 03            [24]13661 	pop	ar3
      004EF1 D0 04            [24]13662 	pop	ar4
      004EF3 D0 05            [24]13663 	pop	ar5
      004EF5 D0 07            [24]13664 	pop	ar7
                                  13665 ;	.\ecen4350_lcd_v4.c:3259: TH1 = 0xFD; //9600 baud
      004EF7 75 8D FD         [24]13666 	mov	_TH1,#0xfd
                                  13667 ;	.\ecen4350_lcd_v4.c:3260: PCON = 0x00; //SMOD 0
      004EFA 75 87 00         [24]13668 	mov	_PCON,#0x00
                                  13669 ;	.\ecen4350_lcd_v4.c:3261: baudSet = 1;
      004EFD 78 73            [12]13670 	mov	r0,#_baudSet
      004EFF 76 01            [12]13671 	mov	@r0,#0x01
                                  13672 ;	.\ecen4350_lcd_v4.c:3262: baudType = 0x4;
      004F01 78 90            [12]13673 	mov	r0,#_uart_baudType_65536_763
      004F03 76 04            [12]13674 	mov	@r0,#0x04
                                  13675 ;	.\ecen4350_lcd_v4.c:3263: if (initLock == 1) goto verifyUART;
      004F05 BA 01 02         [24]13676 	cjne	r2,#0x01,00579$
      004F08 80 03            [24]13677 	sjmp	00580$
      004F0A                      13678 00579$:
      004F0A 02 45 82         [24]13679 	ljmp	00101$
      004F0D                      13680 00580$:
      004F0D 02 4B 8B         [24]13681 	ljmp	00149$
                                  13682 ;	.\ecen4350_lcd_v4.c:3264: else goto uartMenu;
      004F10                      13683 00189$:
                                  13684 ;	.\ecen4350_lcd_v4.c:3266: if (selection == '5' ) {
      004F10 BE 35 55         [24]13685 	cjne	r6,#0x35,00193$
                                  13686 ;	.\ecen4350_lcd_v4.c:3267: setCursor(0, 220);
      004F13 75 6B DC         [24]13687 	mov	_setCursor_PARM_2,#0xdc
      004F16 75 6C 00         [24]13688 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F19 90 00 00         [24]13689 	mov	dptr,#0x0000
      004F1C C0 07            [24]13690 	push	ar7
      004F1E C0 05            [24]13691 	push	ar5
      004F20 C0 04            [24]13692 	push	ar4
      004F22 C0 03            [24]13693 	push	ar3
      004F24 C0 02            [24]13694 	push	ar2
      004F26 12 05 51         [24]13695 	lcall	_setCursor
                                  13696 ;	.\ecen4350_lcd_v4.c:3268: LCD_string_write(" ");
      004F29 90 5E B8         [24]13697 	mov	dptr,#___str_30
      004F2C 75 F0 80         [24]13698 	mov	b,#0x80
      004F2F 12 10 6B         [24]13699 	lcall	_LCD_string_write
                                  13700 ;	.\ecen4350_lcd_v4.c:3269: setColorHighlight1();
      004F32 12 16 45         [24]13701 	lcall	_setColorHighlight1
                                  13702 ;	.\ecen4350_lcd_v4.c:3270: LCD_string_write("<5> ");
      004F35 90 68 57         [24]13703 	mov	dptr,#___str_195
      004F38 75 F0 80         [24]13704 	mov	b,#0x80
      004F3B 12 10 6B         [24]13705 	lcall	_LCD_string_write
                                  13706 ;	.\ecen4350_lcd_v4.c:3271: setColorHighlight2();
      004F3E 12 16 51         [24]13707 	lcall	_setColorHighlight2
                                  13708 ;	.\ecen4350_lcd_v4.c:3272: LCD_string_write("19200 Baud\n");
      004F41 90 68 5C         [24]13709 	mov	dptr,#___str_196
      004F44 75 F0 80         [24]13710 	mov	b,#0x80
      004F47 12 10 6B         [24]13711 	lcall	_LCD_string_write
      004F4A D0 02            [24]13712 	pop	ar2
      004F4C D0 03            [24]13713 	pop	ar3
      004F4E D0 04            [24]13714 	pop	ar4
      004F50 D0 05            [24]13715 	pop	ar5
      004F52 D0 07            [24]13716 	pop	ar7
                                  13717 ;	.\ecen4350_lcd_v4.c:3273: TH1 = 0xFD;	//19200 baud
      004F54 75 8D FD         [24]13718 	mov	_TH1,#0xfd
                                  13719 ;	.\ecen4350_lcd_v4.c:3274: PCON = 0x80; //SMOD 1
      004F57 75 87 80         [24]13720 	mov	_PCON,#0x80
                                  13721 ;	.\ecen4350_lcd_v4.c:3275: baudSet = 1;
      004F5A 78 73            [12]13722 	mov	r0,#_baudSet
      004F5C 76 01            [12]13723 	mov	@r0,#0x01
                                  13724 ;	.\ecen4350_lcd_v4.c:3276: baudType = 0x5;
      004F5E 78 90            [12]13725 	mov	r0,#_uart_baudType_65536_763
      004F60 76 05            [12]13726 	mov	@r0,#0x05
                                  13727 ;	.\ecen4350_lcd_v4.c:3277: if (initLock == 1) goto verifyUART;
      004F62 BA 01 35         [24]13728 	cjne	r2,#0x01,00195$
      004F65 02 4B 8B         [24]13729 	ljmp	00149$
      004F68                      13730 00193$:
                                  13731 ;	.\ecen4350_lcd_v4.c:3279: setColorRed();
      004F68 C0 07            [24]13732 	push	ar7
      004F6A C0 05            [24]13733 	push	ar5
      004F6C C0 04            [24]13734 	push	ar4
      004F6E C0 03            [24]13735 	push	ar3
      004F70 C0 02            [24]13736 	push	ar2
      004F72 12 16 74         [24]13737 	lcall	_setColorRed
                                  13738 ;	.\ecen4350_lcd_v4.c:3280: setCursor(0, 240);
      004F75 75 6B F0         [24]13739 	mov	_setCursor_PARM_2,#0xf0
      004F78 75 6C 00         [24]13740 	mov	(_setCursor_PARM_2 + 1),#0x00
      004F7B 90 00 00         [24]13741 	mov	dptr,#0x0000
      004F7E 12 05 51         [24]13742 	lcall	_setCursor
                                  13743 ;	.\ecen4350_lcd_v4.c:3281: LCD_string_write(" INPUT ERROR");
      004F81 90 68 68         [24]13744 	mov	dptr,#___str_197
      004F84 75 F0 80         [24]13745 	mov	b,#0x80
      004F87 12 10 6B         [24]13746 	lcall	_LCD_string_write
                                  13747 ;	.\ecen4350_lcd_v4.c:3282: setColorDefault();
      004F8A 12 16 2F         [24]13748 	lcall	_setColorDefault
      004F8D D0 02            [24]13749 	pop	ar2
      004F8F D0 03            [24]13750 	pop	ar3
      004F91 D0 04            [24]13751 	pop	ar4
      004F93 D0 05            [24]13752 	pop	ar5
      004F95 D0 07            [24]13753 	pop	ar7
                                  13754 ;	.\ecen4350_lcd_v4.c:3283: goto mainInput;
      004F97 02 48 13         [24]13755 	ljmp	00121$
                                  13756 ;	.\ecen4350_lcd_v4.c:3286: setBit:
      004F9A                      13757 00195$:
                                  13758 ;	.\ecen4350_lcd_v4.c:3287: clearLCD();
      004F9A C0 04            [24]13759 	push	ar4
      004F9C C0 03            [24]13760 	push	ar3
      004F9E C0 02            [24]13761 	push	ar2
      004FA0 12 0D EE         [24]13762 	lcall	_clearLCD
                                  13763 ;	.\ecen4350_lcd_v4.c:3288: fillTop(GRAY);
      004FA3 90 D6 BA         [24]13764 	mov	dptr,#0xd6ba
      004FA6 12 0C 21         [24]13765 	lcall	_fillTop
                                  13766 ;	.\ecen4350_lcd_v4.c:3289: setTextSize(5);
      004FA9 75 82 05         [24]13767 	mov	dpl,#0x05
      004FAC 12 05 6B         [24]13768 	lcall	_setTextSize
                                  13769 ;	.\ecen4350_lcd_v4.c:3290: setColorMenu();
      004FAF 12 16 68         [24]13770 	lcall	_setColorMenu
                                  13771 ;	.\ecen4350_lcd_v4.c:3291: setCursor(30, 0);
      004FB2 E4               [12]13772 	clr	a
      004FB3 F5 6B            [12]13773 	mov	_setCursor_PARM_2,a
      004FB5 F5 6C            [12]13774 	mov	(_setCursor_PARM_2 + 1),a
      004FB7 90 00 1E         [24]13775 	mov	dptr,#0x001e
      004FBA 12 05 51         [24]13776 	lcall	_setCursor
                                  13777 ;	.\ecen4350_lcd_v4.c:3292: LCD_string_write("[UART]\n");
      004FBD 90 65 52         [24]13778 	mov	dptr,#___str_136
      004FC0 75 F0 80         [24]13779 	mov	b,#0x80
      004FC3 12 10 6B         [24]13780 	lcall	_LCD_string_write
                                  13781 ;	.\ecen4350_lcd_v4.c:3293: setTextSize(2);
      004FC6 75 82 02         [24]13782 	mov	dpl,#0x02
      004FC9 12 05 6B         [24]13783 	lcall	_setTextSize
                                  13784 ;	.\ecen4350_lcd_v4.c:3294: setColorDefault();
      004FCC 12 16 2F         [24]13785 	lcall	_setColorDefault
                                  13786 ;	.\ecen4350_lcd_v4.c:3295: setCursor(0, 60);
      004FCF 75 6B 3C         [24]13787 	mov	_setCursor_PARM_2,#0x3c
      004FD2 75 6C 00         [24]13788 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FD5 90 00 00         [24]13789 	mov	dptr,#0x0000
      004FD8 12 05 51         [24]13790 	lcall	_setCursor
                                  13791 ;	.\ecen4350_lcd_v4.c:3296: LCD_string_write(" <1> 8-bit Mode\n");
      004FDB 90 68 75         [24]13792 	mov	dptr,#___str_198
      004FDE 75 F0 80         [24]13793 	mov	b,#0x80
      004FE1 12 10 6B         [24]13794 	lcall	_LCD_string_write
                                  13795 ;	.\ecen4350_lcd_v4.c:3297: setCursor(0, 100);
      004FE4 75 6B 64         [24]13796 	mov	_setCursor_PARM_2,#0x64
      004FE7 75 6C 00         [24]13797 	mov	(_setCursor_PARM_2 + 1),#0x00
      004FEA 90 00 00         [24]13798 	mov	dptr,#0x0000
      004FED 12 05 51         [24]13799 	lcall	_setCursor
                                  13800 ;	.\ecen4350_lcd_v4.c:3298: LCD_string_write(" <2> 9-bit Mode\n");
      004FF0 90 68 86         [24]13801 	mov	dptr,#___str_199
      004FF3 75 F0 80         [24]13802 	mov	b,#0x80
      004FF6 12 10 6B         [24]13803 	lcall	_LCD_string_write
      004FF9 D0 02            [24]13804 	pop	ar2
      004FFB D0 03            [24]13805 	pop	ar3
      004FFD D0 04            [24]13806 	pop	ar4
                                  13807 ;	.\ecen4350_lcd_v4.c:3299: sel:
      004FFF                      13808 00196$:
                                  13809 ;	.\ecen4350_lcd_v4.c:3300: selection = keyDetect();
      004FFF C0 04            [24]13810 	push	ar4
      005001 C0 03            [24]13811 	push	ar3
      005003 C0 02            [24]13812 	push	ar2
      005005 12 11 89         [24]13813 	lcall	_keyDetect
      005008 AE 82            [24]13814 	mov	r6,dpl
      00500A D0 02            [24]13815 	pop	ar2
      00500C D0 03            [24]13816 	pop	ar3
      00500E D0 04            [24]13817 	pop	ar4
      005010 78 71            [12]13818 	mov	r0,#_selection
      005012 A6 06            [24]13819 	mov	@r0,ar6
                                  13820 ;	.\ecen4350_lcd_v4.c:3301: if (selection == '1') {
      005014 BE 31 44         [24]13821 	cjne	r6,#0x31,00198$
                                  13822 ;	.\ecen4350_lcd_v4.c:3302: setCursor(0, 60);
      005017 75 6B 3C         [24]13823 	mov	_setCursor_PARM_2,#0x3c
      00501A 75 6C 00         [24]13824 	mov	(_setCursor_PARM_2 + 1),#0x00
      00501D 90 00 00         [24]13825 	mov	dptr,#0x0000
      005020 C0 04            [24]13826 	push	ar4
      005022 C0 03            [24]13827 	push	ar3
      005024 C0 02            [24]13828 	push	ar2
      005026 12 05 51         [24]13829 	lcall	_setCursor
                                  13830 ;	.\ecen4350_lcd_v4.c:3303: LCD_string_write(" ");
      005029 90 5E B8         [24]13831 	mov	dptr,#___str_30
      00502C 75 F0 80         [24]13832 	mov	b,#0x80
      00502F 12 10 6B         [24]13833 	lcall	_LCD_string_write
                                  13834 ;	.\ecen4350_lcd_v4.c:3304: setColorHighlight1();
      005032 12 16 45         [24]13835 	lcall	_setColorHighlight1
                                  13836 ;	.\ecen4350_lcd_v4.c:3305: LCD_string_write("<1> ");
      005035 90 66 9C         [24]13837 	mov	dptr,#___str_166
      005038 75 F0 80         [24]13838 	mov	b,#0x80
      00503B 12 10 6B         [24]13839 	lcall	_LCD_string_write
                                  13840 ;	.\ecen4350_lcd_v4.c:3306: setColorHighlight2();
      00503E 12 16 51         [24]13841 	lcall	_setColorHighlight2
                                  13842 ;	.\ecen4350_lcd_v4.c:3307: LCD_string_write("8-bit Mode\n");
      005041 90 68 97         [24]13843 	mov	dptr,#___str_200
      005044 75 F0 80         [24]13844 	mov	b,#0x80
      005047 12 10 6B         [24]13845 	lcall	_LCD_string_write
      00504A D0 02            [24]13846 	pop	ar2
      00504C D0 03            [24]13847 	pop	ar3
      00504E D0 04            [24]13848 	pop	ar4
                                  13849 ;	.\ecen4350_lcd_v4.c:3308: bitSet = 1;
      005050 78 76            [12]13850 	mov	r0,#_bitSet
      005052 76 01            [12]13851 	mov	@r0,#0x01
                                  13852 ;	.\ecen4350_lcd_v4.c:3309: _8b = 1;
      005054 7D 01            [12]13853 	mov	r5,#0x01
                                  13854 ;	.\ecen4350_lcd_v4.c:3310: temp = 1;
      005056 7F 01            [12]13855 	mov	r7,#0x01
                                  13856 ;	.\ecen4350_lcd_v4.c:3311: goto cont;
      005058 02 53 1B         [24]13857 	ljmp	00242$
      00505B                      13858 00198$:
                                  13859 ;	.\ecen4350_lcd_v4.c:3312: } if (selection == '2') {
      00505B BE 32 44         [24]13860 	cjne	r6,#0x32,00200$
                                  13861 ;	.\ecen4350_lcd_v4.c:3313: setCursor(0, 100);
      00505E 75 6B 64         [24]13862 	mov	_setCursor_PARM_2,#0x64
      005061 75 6C 00         [24]13863 	mov	(_setCursor_PARM_2 + 1),#0x00
      005064 90 00 00         [24]13864 	mov	dptr,#0x0000
      005067 C0 04            [24]13865 	push	ar4
      005069 C0 03            [24]13866 	push	ar3
      00506B C0 02            [24]13867 	push	ar2
      00506D 12 05 51         [24]13868 	lcall	_setCursor
                                  13869 ;	.\ecen4350_lcd_v4.c:3314: LCD_string_write(" ");
      005070 90 5E B8         [24]13870 	mov	dptr,#___str_30
      005073 75 F0 80         [24]13871 	mov	b,#0x80
      005076 12 10 6B         [24]13872 	lcall	_LCD_string_write
                                  13873 ;	.\ecen4350_lcd_v4.c:3315: setColorHighlight1();
      005079 12 16 45         [24]13874 	lcall	_setColorHighlight1
                                  13875 ;	.\ecen4350_lcd_v4.c:3316: LCD_string_write("<2> ");
      00507C 90 66 D2         [24]13876 	mov	dptr,#___str_169
      00507F 75 F0 80         [24]13877 	mov	b,#0x80
      005082 12 10 6B         [24]13878 	lcall	_LCD_string_write
                                  13879 ;	.\ecen4350_lcd_v4.c:3317: setColorHighlight2();
      005085 12 16 51         [24]13880 	lcall	_setColorHighlight2
                                  13881 ;	.\ecen4350_lcd_v4.c:3318: LCD_string_write("9-bit Mode\n");
      005088 90 68 A3         [24]13882 	mov	dptr,#___str_201
      00508B 75 F0 80         [24]13883 	mov	b,#0x80
      00508E 12 10 6B         [24]13884 	lcall	_LCD_string_write
      005091 D0 02            [24]13885 	pop	ar2
      005093 D0 03            [24]13886 	pop	ar3
      005095 D0 04            [24]13887 	pop	ar4
                                  13888 ;	.\ecen4350_lcd_v4.c:3319: bitSet = 1;
      005097 78 76            [12]13889 	mov	r0,#_bitSet
      005099 76 01            [12]13890 	mov	@r0,#0x01
                                  13891 ;	.\ecen4350_lcd_v4.c:3320: _8b = 0;
      00509B 7D 00            [12]13892 	mov	r5,#0x00
                                  13893 ;	.\ecen4350_lcd_v4.c:3321: temp = 2;
      00509D 7F 02            [12]13894 	mov	r7,#0x02
                                  13895 ;	.\ecen4350_lcd_v4.c:3322: goto cont;
      00509F 02 53 1B         [24]13896 	ljmp	00242$
      0050A2                      13897 00200$:
                                  13898 ;	.\ecen4350_lcd_v4.c:3324: bitSet = 0;
      0050A2 78 76            [12]13899 	mov	r0,#_bitSet
      0050A4 76 00            [12]13900 	mov	@r0,#0x00
                                  13901 ;	.\ecen4350_lcd_v4.c:3325: goto sel;
      0050A6 02 4F FF         [24]13902 	ljmp	00196$
                                  13903 ;	.\ecen4350_lcd_v4.c:3328: setParity:
      0050A9                      13904 00202$:
                                  13905 ;	.\ecen4350_lcd_v4.c:3329: if (temp == 0) {
      0050A9 EF               [12]13906 	mov	a,r7
                                  13907 ;	.\ecen4350_lcd_v4.c:3330: setCursor(0, 240);
      0050AA 70 49            [24]13908 	jnz	00204$
      0050AC 75 6B F0         [24]13909 	mov	_setCursor_PARM_2,#0xf0
      0050AF F5 6C            [12]13910 	mov	(_setCursor_PARM_2 + 1),a
      0050B1 90 00 00         [24]13911 	mov	dptr,#0x0000
      0050B4 C0 07            [24]13912 	push	ar7
      0050B6 C0 05            [24]13913 	push	ar5
      0050B8 C0 04            [24]13914 	push	ar4
      0050BA C0 03            [24]13915 	push	ar3
      0050BC C0 02            [24]13916 	push	ar2
      0050BE 12 05 51         [24]13917 	lcall	_setCursor
                                  13918 ;	.\ecen4350_lcd_v4.c:3331: setColorRed();
      0050C1 12 16 74         [24]13919 	lcall	_setColorRed
                                  13920 ;	.\ecen4350_lcd_v4.c:3332: writeNewLine();
      0050C4 12 10 AA         [24]13921 	lcall	_writeNewLine
                                  13922 ;	.\ecen4350_lcd_v4.c:3333: LCD_string_write("\n Please set the\n  bit mode first.\n");
      0050C7 90 68 AF         [24]13923 	mov	dptr,#___str_202
      0050CA 75 F0 80         [24]13924 	mov	b,#0x80
      0050CD 12 10 6B         [24]13925 	lcall	_LCD_string_write
                                  13926 ;	.\ecen4350_lcd_v4.c:3334: setColorDefault();
      0050D0 12 16 2F         [24]13927 	lcall	_setColorDefault
                                  13928 ;	.\ecen4350_lcd_v4.c:3335: setCursor(0, 140);
      0050D3 75 6B 8C         [24]13929 	mov	_setCursor_PARM_2,#0x8c
      0050D6 75 6C 00         [24]13930 	mov	(_setCursor_PARM_2 + 1),#0x00
      0050D9 90 00 00         [24]13931 	mov	dptr,#0x0000
      0050DC 12 05 51         [24]13932 	lcall	_setCursor
                                  13933 ;	.\ecen4350_lcd_v4.c:3336: LCD_string_write(" <3> Parity (Even)\n     (Odd/None)\n");
      0050DF 90 66 03         [24]13934 	mov	dptr,#___str_154
      0050E2 75 F0 80         [24]13935 	mov	b,#0x80
      0050E5 12 10 6B         [24]13936 	lcall	_LCD_string_write
      0050E8 D0 02            [24]13937 	pop	ar2
      0050EA D0 03            [24]13938 	pop	ar3
      0050EC D0 04            [24]13939 	pop	ar4
      0050EE D0 05            [24]13940 	pop	ar5
      0050F0 D0 07            [24]13941 	pop	ar7
                                  13942 ;	.\ecen4350_lcd_v4.c:3337: goto mainInput;
      0050F2 02 48 13         [24]13943 	ljmp	00121$
      0050F5                      13944 00204$:
                                  13945 ;	.\ecen4350_lcd_v4.c:3338: } if (temp == 1) {
      0050F5 BF 01 02         [24]13946 	cjne	r7,#0x01,00206$
                                  13947 ;	.\ecen4350_lcd_v4.c:3339: _8b = 1;
      0050F8 7D 01            [12]13948 	mov	r5,#0x01
      0050FA                      13949 00206$:
                                  13950 ;	.\ecen4350_lcd_v4.c:3340: } if (temp == 2) {
      0050FA BF 02 02         [24]13951 	cjne	r7,#0x02,00208$
                                  13952 ;	.\ecen4350_lcd_v4.c:3341: _8b = 0;
      0050FD 7D 00            [12]13953 	mov	r5,#0x00
      0050FF                      13954 00208$:
                                  13955 ;	.\ecen4350_lcd_v4.c:3343: clearLCD();
      0050FF C0 07            [24]13956 	push	ar7
      005101 C0 05            [24]13957 	push	ar5
      005103 C0 04            [24]13958 	push	ar4
      005105 C0 03            [24]13959 	push	ar3
      005107 C0 02            [24]13960 	push	ar2
      005109 12 0D EE         [24]13961 	lcall	_clearLCD
                                  13962 ;	.\ecen4350_lcd_v4.c:3344: fillTop(GRAY);
      00510C 90 D6 BA         [24]13963 	mov	dptr,#0xd6ba
      00510F 12 0C 21         [24]13964 	lcall	_fillTop
                                  13965 ;	.\ecen4350_lcd_v4.c:3345: setTextSize(5);
      005112 75 82 05         [24]13966 	mov	dpl,#0x05
      005115 12 05 6B         [24]13967 	lcall	_setTextSize
                                  13968 ;	.\ecen4350_lcd_v4.c:3346: setColorMenu();
      005118 12 16 68         [24]13969 	lcall	_setColorMenu
                                  13970 ;	.\ecen4350_lcd_v4.c:3347: setCursor(30, 0);
      00511B E4               [12]13971 	clr	a
      00511C F5 6B            [12]13972 	mov	_setCursor_PARM_2,a
      00511E F5 6C            [12]13973 	mov	(_setCursor_PARM_2 + 1),a
      005120 90 00 1E         [24]13974 	mov	dptr,#0x001e
      005123 12 05 51         [24]13975 	lcall	_setCursor
                                  13976 ;	.\ecen4350_lcd_v4.c:3348: LCD_string_write("[UART]\n");
      005126 90 65 52         [24]13977 	mov	dptr,#___str_136
      005129 75 F0 80         [24]13978 	mov	b,#0x80
      00512C 12 10 6B         [24]13979 	lcall	_LCD_string_write
                                  13980 ;	.\ecen4350_lcd_v4.c:3349: setTextSize(2);
      00512F 75 82 02         [24]13981 	mov	dpl,#0x02
      005132 12 05 6B         [24]13982 	lcall	_setTextSize
                                  13983 ;	.\ecen4350_lcd_v4.c:3350: setColorDefault();
      005135 12 16 2F         [24]13984 	lcall	_setColorDefault
                                  13985 ;	.\ecen4350_lcd_v4.c:3351: setCursor(0, 60);
      005138 75 6B 3C         [24]13986 	mov	_setCursor_PARM_2,#0x3c
      00513B 75 6C 00         [24]13987 	mov	(_setCursor_PARM_2 + 1),#0x00
      00513E 90 00 00         [24]13988 	mov	dptr,#0x0000
      005141 12 05 51         [24]13989 	lcall	_setCursor
                                  13990 ;	.\ecen4350_lcd_v4.c:3352: LCD_string_write(" <1> Even Parity\n");
      005144 90 68 D3         [24]13991 	mov	dptr,#___str_203
      005147 75 F0 80         [24]13992 	mov	b,#0x80
      00514A 12 10 6B         [24]13993 	lcall	_LCD_string_write
                                  13994 ;	.\ecen4350_lcd_v4.c:3353: setCursor(0, 100);
      00514D 75 6B 64         [24]13995 	mov	_setCursor_PARM_2,#0x64
      005150 75 6C 00         [24]13996 	mov	(_setCursor_PARM_2 + 1),#0x00
      005153 90 00 00         [24]13997 	mov	dptr,#0x0000
      005156 12 05 51         [24]13998 	lcall	_setCursor
                                  13999 ;	.\ecen4350_lcd_v4.c:3354: LCD_string_write(" <2> Odd Parity\n");
      005159 90 68 E5         [24]14000 	mov	dptr,#___str_204
      00515C 75 F0 80         [24]14001 	mov	b,#0x80
      00515F 12 10 6B         [24]14002 	lcall	_LCD_string_write
                                  14003 ;	.\ecen4350_lcd_v4.c:3355: setCursor(0, 140);
      005162 75 6B 8C         [24]14004 	mov	_setCursor_PARM_2,#0x8c
      005165 75 6C 00         [24]14005 	mov	(_setCursor_PARM_2 + 1),#0x00
      005168 90 00 00         [24]14006 	mov	dptr,#0x0000
      00516B 12 05 51         [24]14007 	lcall	_setCursor
                                  14008 ;	.\ecen4350_lcd_v4.c:3356: LCD_string_write(" <3> No Parity");
      00516E 90 68 F6         [24]14009 	mov	dptr,#___str_205
      005171 75 F0 80         [24]14010 	mov	b,#0x80
      005174 12 10 6B         [24]14011 	lcall	_LCD_string_write
      005177 D0 02            [24]14012 	pop	ar2
      005179 D0 03            [24]14013 	pop	ar3
      00517B D0 04            [24]14014 	pop	ar4
      00517D D0 05            [24]14015 	pop	ar5
      00517F D0 07            [24]14016 	pop	ar7
                                  14017 ;	.\ecen4350_lcd_v4.c:3358: boop: 
      005181                      14018 00209$:
                                  14019 ;	.\ecen4350_lcd_v4.c:3359: selection = keyDetect();
      005181 C0 07            [24]14020 	push	ar7
      005183 C0 05            [24]14021 	push	ar5
      005185 C0 04            [24]14022 	push	ar4
      005187 C0 03            [24]14023 	push	ar3
      005189 C0 02            [24]14024 	push	ar2
      00518B 12 11 89         [24]14025 	lcall	_keyDetect
      00518E AE 82            [24]14026 	mov	r6,dpl
      005190 D0 02            [24]14027 	pop	ar2
      005192 D0 03            [24]14028 	pop	ar3
      005194 D0 04            [24]14029 	pop	ar4
      005196 D0 05            [24]14030 	pop	ar5
      005198 D0 07            [24]14031 	pop	ar7
      00519A 78 71            [12]14032 	mov	r0,#_selection
      00519C A6 06            [24]14033 	mov	@r0,ar6
                                  14034 ;	.\ecen4350_lcd_v4.c:3360: if (selection == '1') {
      00519E BE 31 58         [24]14035 	cjne	r6,#0x31,00216$
                                  14036 ;	.\ecen4350_lcd_v4.c:3361: setCursor(0, 60);
      0051A1 75 6B 3C         [24]14037 	mov	_setCursor_PARM_2,#0x3c
      0051A4 75 6C 00         [24]14038 	mov	(_setCursor_PARM_2 + 1),#0x00
      0051A7 90 00 00         [24]14039 	mov	dptr,#0x0000
      0051AA C0 07            [24]14040 	push	ar7
      0051AC C0 05            [24]14041 	push	ar5
      0051AE C0 02            [24]14042 	push	ar2
      0051B0 12 05 51         [24]14043 	lcall	_setCursor
                                  14044 ;	.\ecen4350_lcd_v4.c:3362: LCD_string_write(" ");
      0051B3 90 5E B8         [24]14045 	mov	dptr,#___str_30
      0051B6 75 F0 80         [24]14046 	mov	b,#0x80
      0051B9 12 10 6B         [24]14047 	lcall	_LCD_string_write
                                  14048 ;	.\ecen4350_lcd_v4.c:3363: setColorHighlight1();
      0051BC 12 16 45         [24]14049 	lcall	_setColorHighlight1
                                  14050 ;	.\ecen4350_lcd_v4.c:3364: LCD_string_write("<1> ");
      0051BF 90 66 9C         [24]14051 	mov	dptr,#___str_166
      0051C2 75 F0 80         [24]14052 	mov	b,#0x80
      0051C5 12 10 6B         [24]14053 	lcall	_LCD_string_write
                                  14054 ;	.\ecen4350_lcd_v4.c:3365: setColorHighlight2();
      0051C8 12 16 51         [24]14055 	lcall	_setColorHighlight2
                                  14056 ;	.\ecen4350_lcd_v4.c:3366: LCD_string_write("Even Parity\n");
      0051CB 90 69 05         [24]14057 	mov	dptr,#___str_206
      0051CE 75 F0 80         [24]14058 	mov	b,#0x80
      0051D1 12 10 6B         [24]14059 	lcall	_LCD_string_write
      0051D4 D0 02            [24]14060 	pop	ar2
      0051D6 D0 05            [24]14061 	pop	ar5
      0051D8 D0 07            [24]14062 	pop	ar7
                                  14063 ;	.\ecen4350_lcd_v4.c:3367: if(_8b == 0) {
      0051DA ED               [12]14064 	mov	a,r5
      0051DB 70 0B            [24]14065 	jnz	00211$
                                  14066 ;	.\ecen4350_lcd_v4.c:3368: frame_NES = 0x111;	//9 bit, Even, Parity Set
      0051DD 7B 11            [12]14067 	mov	r3,#0x11
      0051DF 7C 01            [12]14068 	mov	r4,#0x01
                                  14069 ;	.\ecen4350_lcd_v4.c:3369: bitSet = 1;
      0051E1 78 76            [12]14070 	mov	r0,#_bitSet
      0051E3 76 01            [12]14071 	mov	@r0,#0x01
                                  14072 ;	.\ecen4350_lcd_v4.c:3370: goto setFrame;
      0051E5 02 52 B2         [24]14073 	ljmp	00231$
      0051E8                      14074 00211$:
                                  14075 ;	.\ecen4350_lcd_v4.c:3371: } if (_8b == 1){
      0051E8 BD 01 02         [24]14076 	cjne	r5,#0x01,00597$
      0051EB 80 01            [24]14077 	sjmp	00598$
      0051ED                      14078 00597$:
      0051ED 22               [24]14079 	ret
      0051EE                      14080 00598$:
                                  14081 ;	.\ecen4350_lcd_v4.c:3372: frame_NES = 0x011;	//8 bit, even, Parity Set
      0051EE 7B 11            [12]14082 	mov	r3,#0x11
      0051F0 7C 00            [12]14083 	mov	r4,#0x00
                                  14084 ;	.\ecen4350_lcd_v4.c:3373: bitSet = 1;
      0051F2 78 76            [12]14085 	mov	r0,#_bitSet
      0051F4 76 01            [12]14086 	mov	@r0,#0x01
                                  14087 ;	.\ecen4350_lcd_v4.c:3374: goto setFrame;
      0051F6 02 52 B2         [24]14088 	ljmp	00231$
                                  14089 ;	.\ecen4350_lcd_v4.c:3377: goto finish;
      0051F9                      14090 00216$:
                                  14091 ;	.\ecen4350_lcd_v4.c:3379: } if (selection == '2') {
      0051F9 BE 32 56         [24]14092 	cjne	r6,#0x32,00223$
                                  14093 ;	.\ecen4350_lcd_v4.c:3380: setCursor(0, 100);
      0051FC 75 6B 64         [24]14094 	mov	_setCursor_PARM_2,#0x64
      0051FF 75 6C 00         [24]14095 	mov	(_setCursor_PARM_2 + 1),#0x00
      005202 90 00 00         [24]14096 	mov	dptr,#0x0000
      005205 C0 07            [24]14097 	push	ar7
      005207 C0 05            [24]14098 	push	ar5
      005209 C0 02            [24]14099 	push	ar2
      00520B 12 05 51         [24]14100 	lcall	_setCursor
                                  14101 ;	.\ecen4350_lcd_v4.c:3381: LCD_string_write(" ");
      00520E 90 5E B8         [24]14102 	mov	dptr,#___str_30
      005211 75 F0 80         [24]14103 	mov	b,#0x80
      005214 12 10 6B         [24]14104 	lcall	_LCD_string_write
                                  14105 ;	.\ecen4350_lcd_v4.c:3382: setColorHighlight1();
      005217 12 16 45         [24]14106 	lcall	_setColorHighlight1
                                  14107 ;	.\ecen4350_lcd_v4.c:3383: LCD_string_write("<2> ");
      00521A 90 66 D2         [24]14108 	mov	dptr,#___str_169
      00521D 75 F0 80         [24]14109 	mov	b,#0x80
      005220 12 10 6B         [24]14110 	lcall	_LCD_string_write
                                  14111 ;	.\ecen4350_lcd_v4.c:3384: setColorHighlight2();
      005223 12 16 51         [24]14112 	lcall	_setColorHighlight2
                                  14113 ;	.\ecen4350_lcd_v4.c:3385: LCD_string_write("Odd Parity\n");
      005226 90 69 12         [24]14114 	mov	dptr,#___str_207
      005229 75 F0 80         [24]14115 	mov	b,#0x80
      00522C 12 10 6B         [24]14116 	lcall	_LCD_string_write
      00522F D0 02            [24]14117 	pop	ar2
      005231 D0 05            [24]14118 	pop	ar5
      005233 D0 07            [24]14119 	pop	ar7
                                  14120 ;	.\ecen4350_lcd_v4.c:3387: if (_8b == 0) {
      005235 ED               [12]14121 	mov	a,r5
      005236 70 0A            [24]14122 	jnz	00218$
                                  14123 ;	.\ecen4350_lcd_v4.c:3388: frame_NES = 0x101;		//9 bit, odd, parity set
      005238 7B 01            [12]14124 	mov	r3,#0x01
      00523A 7C 01            [12]14125 	mov	r4,#0x01
                                  14126 ;	.\ecen4350_lcd_v4.c:3389: bitSet = 1;
      00523C 78 76            [12]14127 	mov	r0,#_bitSet
      00523E 76 01            [12]14128 	mov	@r0,#0x01
                                  14129 ;	.\ecen4350_lcd_v4.c:3390: goto setFrame;
      005240 80 70            [24]14130 	sjmp	00231$
      005242                      14131 00218$:
                                  14132 ;	.\ecen4350_lcd_v4.c:3391: } if (_8b == 1) {
      005242 BD 01 02         [24]14133 	cjne	r5,#0x01,00602$
      005245 80 01            [24]14134 	sjmp	00603$
      005247                      14135 00602$:
      005247 22               [24]14136 	ret
      005248                      14137 00603$:
                                  14138 ;	.\ecen4350_lcd_v4.c:3392: frame_NES = 0x001;		//8 bit, odd, parity set
      005248 7B 01            [12]14139 	mov	r3,#0x01
      00524A 7C 00            [12]14140 	mov	r4,#0x00
                                  14141 ;	.\ecen4350_lcd_v4.c:3393: bitSet = 1;
      00524C 78 76            [12]14142 	mov	r0,#_bitSet
      00524E 76 01            [12]14143 	mov	@r0,#0x01
                                  14144 ;	.\ecen4350_lcd_v4.c:3394: goto setFrame;
                                  14145 ;	.\ecen4350_lcd_v4.c:3397: goto finish;
      005250 80 60            [24]14146 	sjmp	00231$
      005252                      14147 00223$:
                                  14148 ;	.\ecen4350_lcd_v4.c:3399: } if (selection == '3') {
      005252 BE 33 02         [24]14149 	cjne	r6,#0x33,00604$
      005255 80 03            [24]14150 	sjmp	00605$
      005257                      14151 00604$:
      005257 02 51 81         [24]14152 	ljmp	00209$
      00525A                      14153 00605$:
                                  14154 ;	.\ecen4350_lcd_v4.c:3400: setCursor(0, 140);
      00525A 75 6B 8C         [24]14155 	mov	_setCursor_PARM_2,#0x8c
      00525D 75 6C 00         [24]14156 	mov	(_setCursor_PARM_2 + 1),#0x00
      005260 90 00 00         [24]14157 	mov	dptr,#0x0000
      005263 C0 07            [24]14158 	push	ar7
      005265 C0 05            [24]14159 	push	ar5
      005267 C0 04            [24]14160 	push	ar4
      005269 C0 03            [24]14161 	push	ar3
      00526B C0 02            [24]14162 	push	ar2
      00526D 12 05 51         [24]14163 	lcall	_setCursor
                                  14164 ;	.\ecen4350_lcd_v4.c:3401: LCD_string_write(" ");
      005270 90 5E B8         [24]14165 	mov	dptr,#___str_30
      005273 75 F0 80         [24]14166 	mov	b,#0x80
      005276 12 10 6B         [24]14167 	lcall	_LCD_string_write
                                  14168 ;	.\ecen4350_lcd_v4.c:3402: setColorHighlight1();
      005279 12 16 45         [24]14169 	lcall	_setColorHighlight1
                                  14170 ;	.\ecen4350_lcd_v4.c:3403: LCD_string_write("<3> ");
      00527C 90 66 F6         [24]14171 	mov	dptr,#___str_172
      00527F 75 F0 80         [24]14172 	mov	b,#0x80
      005282 12 10 6B         [24]14173 	lcall	_LCD_string_write
                                  14174 ;	.\ecen4350_lcd_v4.c:3404: setColorHighlight2();
      005285 12 16 51         [24]14175 	lcall	_setColorHighlight2
                                  14176 ;	.\ecen4350_lcd_v4.c:3405: LCD_string_write("No Parity\n");
      005288 90 69 1E         [24]14177 	mov	dptr,#___str_208
      00528B 75 F0 80         [24]14178 	mov	b,#0x80
      00528E 12 10 6B         [24]14179 	lcall	_LCD_string_write
      005291 D0 02            [24]14180 	pop	ar2
      005293 D0 03            [24]14181 	pop	ar3
      005295 D0 04            [24]14182 	pop	ar4
      005297 D0 05            [24]14183 	pop	ar5
      005299 D0 07            [24]14184 	pop	ar7
                                  14185 ;	.\ecen4350_lcd_v4.c:3407: if (_8b == 0) {
      00529B ED               [12]14186 	mov	a,r5
                                  14187 ;	.\ecen4350_lcd_v4.c:3408: frame_NES = 0x100; 			//9 bit, odd, no parity
      00529C 70 09            [24]14188 	jnz	00225$
      00529E FB               [12]14189 	mov	r3,a
      00529F 7C 01            [12]14190 	mov	r4,#0x01
                                  14191 ;	.\ecen4350_lcd_v4.c:3409: bitSet = 1;
      0052A1 78 76            [12]14192 	mov	r0,#_bitSet
      0052A3 76 01            [12]14193 	mov	@r0,#0x01
                                  14194 ;	.\ecen4350_lcd_v4.c:3410: goto setFrame;
      0052A5 80 0B            [24]14195 	sjmp	00231$
      0052A7                      14196 00225$:
                                  14197 ;	.\ecen4350_lcd_v4.c:3411: } if (_8b == 1) {
      0052A7 BD 01 08         [24]14198 	cjne	r5,#0x01,00231$
                                  14199 ;	.\ecen4350_lcd_v4.c:3412: frame_NES = 0x000;		 	//8 bit, odd, no parity
      0052AA 7B 00            [12]14200 	mov	r3,#0x00
      0052AC 7C 00            [12]14201 	mov	r4,#0x00
                                  14202 ;	.\ecen4350_lcd_v4.c:3413: bitSet = 1;
      0052AE 78 76            [12]14203 	mov	r0,#_bitSet
      0052B0 76 01            [12]14204 	mov	@r0,#0x01
                                  14205 ;	.\ecen4350_lcd_v4.c:3418: setFrame:	
      0052B2                      14206 00231$:
                                  14207 ;	.\ecen4350_lcd_v4.c:3419: if ((frame_NES == 0x000) || 	//8 bit, odd, no parity
      0052B2 EB               [12]14208 	mov	a,r3
      0052B3 4C               [12]14209 	orl	a,r4
      0052B4 60 36            [24]14210 	jz	00232$
                                  14211 ;	.\ecen4350_lcd_v4.c:3420: (frame_NES == 0x001) ||		//8 bit, odd, parity set
      0052B6 BB 01 05         [24]14212 	cjne	r3,#0x01,00610$
      0052B9 BC 00 02         [24]14213 	cjne	r4,#0x00,00610$
      0052BC 80 2E            [24]14214 	sjmp	00232$
      0052BE                      14215 00610$:
                                  14216 ;	.\ecen4350_lcd_v4.c:3421: (frame_NES == 0x010) ||
      0052BE BB 10 05         [24]14217 	cjne	r3,#0x10,00611$
      0052C1 BC 00 02         [24]14218 	cjne	r4,#0x00,00611$
      0052C4 80 26            [24]14219 	sjmp	00232$
      0052C6                      14220 00611$:
                                  14221 ;	.\ecen4350_lcd_v4.c:3422: (frame_NES == 0x011) ||
      0052C6 BB 11 05         [24]14222 	cjne	r3,#0x11,00612$
      0052C9 BC 00 02         [24]14223 	cjne	r4,#0x00,00612$
      0052CC 80 1E            [24]14224 	sjmp	00232$
      0052CE                      14225 00612$:
                                  14226 ;	.\ecen4350_lcd_v4.c:3423: (frame_NES == 0x100) ||
      0052CE BB 00 05         [24]14227 	cjne	r3,#0x00,00613$
      0052D1 BC 01 02         [24]14228 	cjne	r4,#0x01,00613$
      0052D4 80 16            [24]14229 	sjmp	00232$
      0052D6                      14230 00613$:
                                  14231 ;	.\ecen4350_lcd_v4.c:3424: (frame_NES == 0x101) ||
      0052D6 BB 01 05         [24]14232 	cjne	r3,#0x01,00614$
      0052D9 BC 01 02         [24]14233 	cjne	r4,#0x01,00614$
      0052DC 80 0E            [24]14234 	sjmp	00232$
      0052DE                      14235 00614$:
                                  14236 ;	.\ecen4350_lcd_v4.c:3425: (frame_NES == 0x110) ||
      0052DE BB 10 05         [24]14237 	cjne	r3,#0x10,00615$
      0052E1 BC 01 02         [24]14238 	cjne	r4,#0x01,00615$
      0052E4 80 06            [24]14239 	sjmp	00232$
      0052E6                      14240 00615$:
                                  14241 ;	.\ecen4350_lcd_v4.c:3426: (frame_NES == 0x111)) {
      0052E6 BB 11 09         [24]14242 	cjne	r3,#0x11,00233$
      0052E9 BC 01 06         [24]14243 	cjne	r4,#0x01,00233$
      0052EC                      14244 00232$:
                                  14245 ;	.\ecen4350_lcd_v4.c:3427: paritySet = 1;
      0052EC 78 78            [12]14246 	mov	r0,#_paritySet
      0052EE 76 01            [12]14247 	mov	@r0,#0x01
                                  14248 ;	.\ecen4350_lcd_v4.c:3428: goto cont;
      0052F0 80 29            [24]14249 	sjmp	00242$
      0052F2                      14250 00233$:
                                  14251 ;	.\ecen4350_lcd_v4.c:3431: writeNewLine();
      0052F2 C0 07            [24]14252 	push	ar7
      0052F4 C0 05            [24]14253 	push	ar5
      0052F6 C0 04            [24]14254 	push	ar4
      0052F8 C0 03            [24]14255 	push	ar3
      0052FA 12 10 AA         [24]14256 	lcall	_writeNewLine
                                  14257 ;	.\ecen4350_lcd_v4.c:3432: LCD_string_write(" Something is wrong.");
      0052FD 90 69 29         [24]14258 	mov	dptr,#___str_209
      005300 75 F0 80         [24]14259 	mov	b,#0x80
      005303 12 10 6B         [24]14260 	lcall	_LCD_string_write
                                  14261 ;	.\ecen4350_lcd_v4.c:3433: delay(80);
      005306 90 00 50         [24]14262 	mov	dptr,#0x0050
      005309 12 01 87         [24]14263 	lcall	_delay
      00530C D0 03            [24]14264 	pop	ar3
      00530E D0 04            [24]14265 	pop	ar4
      005310 D0 05            [24]14266 	pop	ar5
      005312 D0 07            [24]14267 	pop	ar7
                                  14268 ;	.\ecen4350_lcd_v4.c:3434: bitSet = 0;
      005314 78 76            [12]14269 	mov	r0,#_bitSet
      005316 76 00            [12]14270 	mov	@r0,#0x00
                                  14271 ;	.\ecen4350_lcd_v4.c:3435: goto uartMenu;
      005318 02 45 82         [24]14272 	ljmp	00101$
                                  14273 ;	.\ecen4350_lcd_v4.c:3437: cont:
      00531B                      14274 00242$:
                                  14275 ;	.\ecen4350_lcd_v4.c:3438: if (initLock == 1) goto verifyUART;
      00531B BA 01 02         [24]14276 	cjne	r2,#0x01,00618$
      00531E 80 03            [24]14277 	sjmp	00619$
      005320                      14278 00618$:
      005320 02 45 82         [24]14279 	ljmp	00101$
      005323                      14280 00619$:
      005323 02 4B 8B         [24]14281 	ljmp	00149$
                                  14282 ;	.\ecen4350_lcd_v4.c:3440: finish:
                                  14283 ;	.\ecen4350_lcd_v4.c:3441: return;
                                  14284 ;	.\ecen4350_lcd_v4.c:3443: }
      005326 22               [24]14285 	ret
                                  14286 ;------------------------------------------------------------
                                  14287 ;Allocation info for local variables in function 'main'
                                  14288 ;------------------------------------------------------------
                                  14289 ;__1310720181              Allocated to registers 
                                  14290 ;__1310720182              Allocated to registers 
                                  14291 ;map_address               Allocated to registers 
                                  14292 ;d                         Allocated to registers 
                                  14293 ;__1310720184              Allocated to registers 
                                  14294 ;__1310720185              Allocated to registers 
                                  14295 ;map_address               Allocated to registers 
                                  14296 ;d                         Allocated to registers 
                                  14297 ;__1310720187              Allocated to registers 
                                  14298 ;__1310720188              Allocated to registers 
                                  14299 ;map_address               Allocated to registers 
                                  14300 ;d                         Allocated to registers 
                                  14301 ;__1310720190              Allocated to registers 
                                  14302 ;__1310720191              Allocated to registers 
                                  14303 ;map_address               Allocated to registers 
                                  14304 ;d                         Allocated to registers 
                                  14305 ;__1966080193              Allocated to registers 
                                  14306 ;__1966080194              Allocated to registers 
                                  14307 ;map_address               Allocated to registers 
                                  14308 ;d                         Allocated to registers 
                                  14309 ;__2621440196              Allocated to registers 
                                  14310 ;__2621440197              Allocated to registers 
                                  14311 ;map_address               Allocated to registers 
                                  14312 ;d                         Allocated to registers 
                                  14313 ;__2621440199              Allocated to registers 
                                  14314 ;__2621440200              Allocated to registers 
                                  14315 ;map_address               Allocated to registers 
                                  14316 ;d                         Allocated to registers 
                                  14317 ;__2621440202              Allocated to registers 
                                  14318 ;__2621440203              Allocated to registers 
                                  14319 ;map_address               Allocated to registers 
                                  14320 ;d                         Allocated to registers 
                                  14321 ;__2621440205              Allocated to registers 
                                  14322 ;__2621440206              Allocated to registers 
                                  14323 ;map_address               Allocated to registers 
                                  14324 ;d                         Allocated to registers 
                                  14325 ;__2621440208              Allocated to registers 
                                  14326 ;__2621440209              Allocated to registers 
                                  14327 ;map_address               Allocated to registers 
                                  14328 ;d                         Allocated to registers 
                                  14329 ;__2621440211              Allocated to registers 
                                  14330 ;__2621440212              Allocated to registers 
                                  14331 ;map_address               Allocated to registers 
                                  14332 ;d                         Allocated to registers 
                                  14333 ;__2621440214              Allocated to registers 
                                  14334 ;__2621440215              Allocated to registers 
                                  14335 ;map_address               Allocated to registers 
                                  14336 ;d                         Allocated to registers 
                                  14337 ;__2621440217              Allocated to registers 
                                  14338 ;__2621440218              Allocated to registers 
                                  14339 ;map_address               Allocated to registers 
                                  14340 ;d                         Allocated to registers 
                                  14341 ;__2621440220              Allocated to registers 
                                  14342 ;__2621440221              Allocated to registers 
                                  14343 ;map_address               Allocated to registers 
                                  14344 ;d                         Allocated to registers 
                                  14345 ;__2621440223              Allocated to registers 
                                  14346 ;__2621440224              Allocated to registers 
                                  14347 ;map_address               Allocated to registers 
                                  14348 ;d                         Allocated to registers 
                                  14349 ;__2621440226              Allocated to registers 
                                  14350 ;__2621440227              Allocated to registers 
                                  14351 ;map_address               Allocated to registers 
                                  14352 ;d                         Allocated to registers 
                                  14353 ;__2621440229              Allocated to registers 
                                  14354 ;__2621440230              Allocated to registers 
                                  14355 ;map_address               Allocated to registers 
                                  14356 ;d                         Allocated to registers 
                                  14357 ;__2621440232              Allocated to registers 
                                  14358 ;__2621440233              Allocated to registers 
                                  14359 ;map_address               Allocated to registers 
                                  14360 ;d                         Allocated to registers 
                                  14361 ;__2621440235              Allocated to registers 
                                  14362 ;__2621440236              Allocated to registers 
                                  14363 ;map_address               Allocated to registers 
                                  14364 ;d                         Allocated to registers 
                                  14365 ;validKey                  Allocated to registers r7 
                                  14366 ;------------------------------------------------------------
                                  14367 ;	.\ecen4350_lcd_v4.c:3446: void main() {
                                  14368 ;	-----------------------------------------
                                  14369 ;	 function main
                                  14370 ;	-----------------------------------------
      005327                      14371 _main:
                                  14372 ;	.\ecen4350_lcd_v4.c:3450: delay(10);
      005327 90 00 0A         [24]14373 	mov	dptr,#0x000a
      00532A 12 01 87         [24]14374 	lcall	_delay
                                  14375 ;	.\ecen4350_lcd_v4.c:3451: iowrite8(seg7_address, ON);
      00532D 85 0C 82         [24]14376 	mov	dpl,_seg7_address
      005330 85 0D 83         [24]14377 	mov	dph,(_seg7_address + 1)
                                  14378 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14379 ;	assignBit
      005333 D2 B5            [12]14380 	setb	_P3_5
                                  14381 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005335 E4               [12]14382 	clr	a
      005336 F0               [24]14383 	movx	@dptr,a
                                  14384 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14385 ;	assignBit
      005337 C2 B5            [12]14386 	clr	_P3_5
                                  14387 ;	.\ecen4350_lcd_v4.c:3452: delay(5);
      005339 90 00 05         [24]14388 	mov	dptr,#0x0005
      00533C 12 01 87         [24]14389 	lcall	_delay
                                  14390 ;	.\ecen4350_lcd_v4.c:3453: CD = 0;
                                  14391 ;	assignBit
      00533F C2 B4            [12]14392 	clr	_P3_4
                                  14393 ;	.\ecen4350_lcd_v4.c:3454: IOM = 0;
                                  14394 ;	assignBit
      005341 C2 B5            [12]14395 	clr	_P3_5
                                  14396 ;	.\ecen4350_lcd_v4.c:3455: rtcInit();							// RTC init
      005343 12 03 90         [24]14397 	lcall	_rtcInit
                                  14398 ;	.\ecen4350_lcd_v4.c:3457: TFT_LCD_INIT();						// LCD init
      005346 12 06 89         [24]14399 	lcall	_TFT_LCD_INIT
                                  14400 ;	.\ecen4350_lcd_v4.c:3458: iowrite8(seg7_address, SEG_H);		// [H]
      005349 85 0C 82         [24]14401 	mov	dpl,_seg7_address
      00534C 85 0D 83         [24]14402 	mov	dph,(_seg7_address + 1)
                                  14403 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14404 ;	assignBit
      00534F D2 B5            [12]14405 	setb	_P3_5
                                  14406 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005351 74 89            [12]14407 	mov	a,#0x89
      005353 F0               [24]14408 	movx	@dptr,a
                                  14409 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14410 ;	assignBit
      005354 C2 B5            [12]14411 	clr	_P3_5
                                  14412 ;	.\ecen4350_lcd_v4.c:3459: delay(40);							
      005356 90 00 28         [24]14413 	mov	dptr,#0x0028
      005359 12 01 87         [24]14414 	lcall	_delay
                                  14415 ;	.\ecen4350_lcd_v4.c:3460: iowrite8(seg7_address, 0b01111011); // [i.]
      00535C 85 0C 82         [24]14416 	mov	dpl,_seg7_address
      00535F 85 0D 83         [24]14417 	mov	dph,(_seg7_address + 1)
                                  14418 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14419 ;	assignBit
      005362 D2 B5            [12]14420 	setb	_P3_5
                                  14421 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005364 74 7B            [12]14422 	mov	a,#0x7b
      005366 F0               [24]14423 	movx	@dptr,a
                                  14424 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14425 ;	assignBit
      005367 C2 B5            [12]14426 	clr	_P3_5
                                  14427 ;	.\ecen4350_lcd_v4.c:3461: delay(40);
      005369 90 00 28         [24]14428 	mov	dptr,#0x0028
      00536C 12 01 87         [24]14429 	lcall	_delay
                                  14430 ;	.\ecen4350_lcd_v4.c:3462: iowrite8(seg7_address, OFF);
      00536F 85 0C 82         [24]14431 	mov	dpl,_seg7_address
      005372 85 0D 83         [24]14432 	mov	dph,(_seg7_address + 1)
                                  14433 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14434 ;	assignBit
      005375 D2 B5            [12]14435 	setb	_P3_5
                                  14436 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005377 74 FF            [12]14437 	mov	a,#0xff
      005379 F0               [24]14438 	movx	@dptr,a
                                  14439 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14440 ;	assignBit
      00537A C2 B5            [12]14441 	clr	_P3_5
                                  14442 ;	.\ecen4350_lcd_v4.c:3463: delay(20);
      00537C 90 00 14         [24]14443 	mov	dptr,#0x0014
      00537F 12 01 87         [24]14444 	lcall	_delay
                                  14445 ;	.\ecen4350_lcd_v4.c:3466: writeSomeLines();					// LCD Power On Self-Test and Welcome message
      005382 12 15 D7         [24]14446 	lcall	_writeSomeLines
                                  14447 ;	.\ecen4350_lcd_v4.c:3468: clearLCD();							// set LCD background
      005385 12 0D EE         [24]14448 	lcall	_clearLCD
                                  14449 ;	.\ecen4350_lcd_v4.c:3469: setColorDefault();	// set text color
      005388 12 16 2F         [24]14450 	lcall	_setColorDefault
                                  14451 ;	.\ecen4350_lcd_v4.c:3479: loop:
      00538B                      14452 00101$:
                                  14453 ;	.\ecen4350_lcd_v4.c:3480: validKey = 1;
      00538B 7F 01            [12]14454 	mov	r7,#0x01
                                  14455 ;	.\ecen4350_lcd_v4.c:3481: iowrite8(seg7_address, OFF);
      00538D 85 0C 82         [24]14456 	mov	dpl,_seg7_address
      005390 85 0D 83         [24]14457 	mov	dph,(_seg7_address + 1)
                                  14458 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14459 ;	assignBit
      005393 D2 B5            [12]14460 	setb	_P3_5
                                  14461 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005395 74 FF            [12]14462 	mov	a,#0xff
      005397 F0               [24]14463 	movx	@dptr,a
                                  14464 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14465 ;	assignBit
      005398 C2 B5            [12]14466 	clr	_P3_5
                                  14467 ;	.\ecen4350_lcd_v4.c:3482: clearLCD();
      00539A C0 07            [24]14468 	push	ar7
      00539C 12 0D EE         [24]14469 	lcall	_clearLCD
                                  14470 ;	.\ecen4350_lcd_v4.c:3483: setCursor(30, 120);
      00539F 75 6B 78         [24]14471 	mov	_setCursor_PARM_2,#0x78
      0053A2 75 6C 00         [24]14472 	mov	(_setCursor_PARM_2 + 1),#0x00
      0053A5 90 00 1E         [24]14473 	mov	dptr,#0x001e
      0053A8 12 05 51         [24]14474 	lcall	_setCursor
                                  14475 ;	.\ecen4350_lcd_v4.c:3484: setTextSize(3);
      0053AB 75 82 03         [24]14476 	mov	dpl,#0x03
      0053AE 12 05 6B         [24]14477 	lcall	_setTextSize
                                  14478 ;	.\ecen4350_lcd_v4.c:3485: setColorSelect();
      0053B1 12 16 3A         [24]14479 	lcall	_setColorSelect
                                  14480 ;	.\ecen4350_lcd_v4.c:3486: rtcPrint();
      0053B4 12 04 41         [24]14481 	lcall	_rtcPrint
                                  14482 ;	.\ecen4350_lcd_v4.c:3487: printMenu();
      0053B7 12 17 94         [24]14483 	lcall	_printMenu
      0053BA D0 07            [24]14484 	pop	ar7
                                  14485 ;	.\ecen4350_lcd_v4.c:3488: inputKey:
      0053BC                      14486 00102$:
                                  14487 ;	.\ecen4350_lcd_v4.c:3489: selection = keyDetect();
      0053BC C0 07            [24]14488 	push	ar7
      0053BE 12 11 89         [24]14489 	lcall	_keyDetect
      0053C1 AE 82            [24]14490 	mov	r6,dpl
      0053C3 D0 07            [24]14491 	pop	ar7
      0053C5 78 71            [12]14492 	mov	r0,#_selection
      0053C7 A6 06            [24]14493 	mov	@r0,ar6
                                  14494 ;	.\ecen4350_lcd_v4.c:3490: if (selection == 'D') {
      0053C9 BE 44 68         [24]14495 	cjne	r6,#0x44,00106$
                                  14496 ;	.\ecen4350_lcd_v4.c:3491: iowrite8(seg7_address, ON);
      0053CC 85 0C 82         [24]14497 	mov	dpl,_seg7_address
      0053CF 85 0D 83         [24]14498 	mov	dph,(_seg7_address + 1)
                                  14499 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14500 ;	assignBit
      0053D2 D2 B5            [12]14501 	setb	_P3_5
                                  14502 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0053D4 E4               [12]14503 	clr	a
      0053D5 F0               [24]14504 	movx	@dptr,a
                                  14505 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14506 ;	assignBit
      0053D6 C2 B5            [12]14507 	clr	_P3_5
                                  14508 ;	.\ecen4350_lcd_v4.c:3492: setCursor(10, 60);
      0053D8 75 6B 3C         [24]14509 	mov	_setCursor_PARM_2,#0x3c
      0053DB 75 6C 00         [24]14510 	mov	(_setCursor_PARM_2 + 1),#0x00
      0053DE 90 00 0A         [24]14511 	mov	dptr,#0x000a
      0053E1 C0 07            [24]14512 	push	ar7
      0053E3 12 05 51         [24]14513 	lcall	_setCursor
                                  14514 ;	.\ecen4350_lcd_v4.c:3493: setColorHighlight1();
      0053E6 12 16 45         [24]14515 	lcall	_setColorHighlight1
                                  14516 ;	.\ecen4350_lcd_v4.c:3494: LCD_string_write("<D>");
      0053E9 90 69 3E         [24]14517 	mov	dptr,#___str_210
      0053EC 75 F0 80         [24]14518 	mov	b,#0x80
      0053EF 12 10 6B         [24]14519 	lcall	_LCD_string_write
                                  14520 ;	.\ecen4350_lcd_v4.c:3495: setColorHighlight2();
      0053F2 12 16 51         [24]14521 	lcall	_setColorHighlight2
                                  14522 ;	.\ecen4350_lcd_v4.c:3496: LCD_string_write(" DUMP\n");
      0053F5 90 5D CD         [24]14523 	mov	dptr,#___str_7
      0053F8 75 F0 80         [24]14524 	mov	b,#0x80
      0053FB 12 10 6B         [24]14525 	lcall	_LCD_string_write
                                  14526 ;	.\ecen4350_lcd_v4.c:3497: delay(20);
      0053FE 90 00 14         [24]14527 	mov	dptr,#0x0014
      005401 12 01 87         [24]14528 	lcall	_delay
      005404 D0 07            [24]14529 	pop	ar7
                                  14530 ;	.\ecen4350_lcd_v4.c:3498: iowrite8(seg7_address, SEG_D);
      005406 85 0C 82         [24]14531 	mov	dpl,_seg7_address
      005409 85 0D 83         [24]14532 	mov	dph,(_seg7_address + 1)
                                  14533 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14534 ;	assignBit
      00540C D2 B5            [12]14535 	setb	_P3_5
                                  14536 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00540E 74 A1            [12]14537 	mov	a,#0xa1
      005410 F0               [24]14538 	movx	@dptr,a
                                  14539 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14540 ;	assignBit
      005411 C2 B5            [12]14541 	clr	_P3_5
                                  14542 ;	.\ecen4350_lcd_v4.c:3499: if (validKey == 0) {
      005413 EF               [12]14543 	mov	a,r7
      005414 70 18            [24]14544 	jnz	00104$
                                  14545 ;	.\ecen4350_lcd_v4.c:3500: setColorDefault();
      005416 12 16 2F         [24]14546 	lcall	_setColorDefault
                                  14547 ;	.\ecen4350_lcd_v4.c:3501: setCursor(60, 280);
      005419 75 6B 18         [24]14548 	mov	_setCursor_PARM_2,#0x18
      00541C 75 6C 01         [24]14549 	mov	(_setCursor_PARM_2 + 1),#0x01
      00541F 90 00 3C         [24]14550 	mov	dptr,#0x003c
      005422 12 05 51         [24]14551 	lcall	_setCursor
                                  14552 ;	.\ecen4350_lcd_v4.c:3502: LCD_string_write("          ");
      005425 90 69 42         [24]14553 	mov	dptr,#___str_211
      005428 75 F0 80         [24]14554 	mov	b,#0x80
      00542B 12 10 6B         [24]14555 	lcall	_LCD_string_write
      00542E                      14556 00104$:
                                  14557 ;	.\ecen4350_lcd_v4.c:3504: dump();
      00542E 12 18 EF         [24]14558 	lcall	_dump
                                  14559 ;	.\ecen4350_lcd_v4.c:3505: goto loop;
      005431 02 53 8B         [24]14560 	ljmp	00101$
      005434                      14561 00106$:
                                  14562 ;	.\ecen4350_lcd_v4.c:3506: } if(selection == 'B') {
      005434 BE 42 68         [24]14563 	cjne	r6,#0x42,00110$
                                  14564 ;	.\ecen4350_lcd_v4.c:3507: iowrite8(seg7_address, ON);
      005437 85 0C 82         [24]14565 	mov	dpl,_seg7_address
      00543A 85 0D 83         [24]14566 	mov	dph,(_seg7_address + 1)
                                  14567 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14568 ;	assignBit
      00543D D2 B5            [12]14569 	setb	_P3_5
                                  14570 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00543F E4               [12]14571 	clr	a
      005440 F0               [24]14572 	movx	@dptr,a
                                  14573 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14574 ;	assignBit
      005441 C2 B5            [12]14575 	clr	_P3_5
                                  14576 ;	.\ecen4350_lcd_v4.c:3508: setCursor(130, 60);
      005443 75 6B 3C         [24]14577 	mov	_setCursor_PARM_2,#0x3c
      005446 75 6C 00         [24]14578 	mov	(_setCursor_PARM_2 + 1),#0x00
      005449 90 00 82         [24]14579 	mov	dptr,#0x0082
      00544C C0 07            [24]14580 	push	ar7
      00544E 12 05 51         [24]14581 	lcall	_setCursor
                                  14582 ;	.\ecen4350_lcd_v4.c:3509: setColorHighlight1();
      005451 12 16 45         [24]14583 	lcall	_setColorHighlight1
                                  14584 ;	.\ecen4350_lcd_v4.c:3510: LCD_string_write("<B>");
      005454 90 69 4D         [24]14585 	mov	dptr,#___str_212
      005457 75 F0 80         [24]14586 	mov	b,#0x80
      00545A 12 10 6B         [24]14587 	lcall	_LCD_string_write
                                  14588 ;	.\ecen4350_lcd_v4.c:3511: setColorHighlight2();
      00545D 12 16 51         [24]14589 	lcall	_setColorHighlight2
                                  14590 ;	.\ecen4350_lcd_v4.c:3512: LCD_string_write(" MOVE\n");
      005460 90 5D D9         [24]14591 	mov	dptr,#___str_9
      005463 75 F0 80         [24]14592 	mov	b,#0x80
      005466 12 10 6B         [24]14593 	lcall	_LCD_string_write
                                  14594 ;	.\ecen4350_lcd_v4.c:3513: delay(20);
      005469 90 00 14         [24]14595 	mov	dptr,#0x0014
      00546C 12 01 87         [24]14596 	lcall	_delay
      00546F D0 07            [24]14597 	pop	ar7
                                  14598 ;	.\ecen4350_lcd_v4.c:3514: iowrite8(seg7_address, SEG_B);
      005471 85 0C 82         [24]14599 	mov	dpl,_seg7_address
      005474 85 0D 83         [24]14600 	mov	dph,(_seg7_address + 1)
                                  14601 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14602 ;	assignBit
      005477 D2 B5            [12]14603 	setb	_P3_5
                                  14604 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005479 74 83            [12]14605 	mov	a,#0x83
      00547B F0               [24]14606 	movx	@dptr,a
                                  14607 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14608 ;	assignBit
      00547C C2 B5            [12]14609 	clr	_P3_5
                                  14610 ;	.\ecen4350_lcd_v4.c:3515: if (validKey == 0) {
      00547E EF               [12]14611 	mov	a,r7
      00547F 70 18            [24]14612 	jnz	00108$
                                  14613 ;	.\ecen4350_lcd_v4.c:3516: setColorDefault();
      005481 12 16 2F         [24]14614 	lcall	_setColorDefault
                                  14615 ;	.\ecen4350_lcd_v4.c:3517: setCursor(60, 280);
      005484 75 6B 18         [24]14616 	mov	_setCursor_PARM_2,#0x18
      005487 75 6C 01         [24]14617 	mov	(_setCursor_PARM_2 + 1),#0x01
      00548A 90 00 3C         [24]14618 	mov	dptr,#0x003c
      00548D 12 05 51         [24]14619 	lcall	_setCursor
                                  14620 ;	.\ecen4350_lcd_v4.c:3518: LCD_string_write("          ");
      005490 90 69 42         [24]14621 	mov	dptr,#___str_211
      005493 75 F0 80         [24]14622 	mov	b,#0x80
      005496 12 10 6B         [24]14623 	lcall	_LCD_string_write
      005499                      14624 00108$:
                                  14625 ;	.\ecen4350_lcd_v4.c:3520: move();
      005499 12 21 B0         [24]14626 	lcall	_move
                                  14627 ;	.\ecen4350_lcd_v4.c:3521: goto loop;
      00549C 02 53 8B         [24]14628 	ljmp	00101$
      00549F                      14629 00110$:
                                  14630 ;	.\ecen4350_lcd_v4.c:3522: } if(selection == 'E') {
      00549F BE 45 68         [24]14631 	cjne	r6,#0x45,00114$
                                  14632 ;	.\ecen4350_lcd_v4.c:3523: iowrite8(seg7_address, ON);
      0054A2 85 0C 82         [24]14633 	mov	dpl,_seg7_address
      0054A5 85 0D 83         [24]14634 	mov	dph,(_seg7_address + 1)
                                  14635 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14636 ;	assignBit
      0054A8 D2 B5            [12]14637 	setb	_P3_5
                                  14638 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0054AA E4               [12]14639 	clr	a
      0054AB F0               [24]14640 	movx	@dptr,a
                                  14641 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14642 ;	assignBit
      0054AC C2 B5            [12]14643 	clr	_P3_5
                                  14644 ;	.\ecen4350_lcd_v4.c:3524: setCursor(10, 100);
      0054AE 75 6B 64         [24]14645 	mov	_setCursor_PARM_2,#0x64
      0054B1 75 6C 00         [24]14646 	mov	(_setCursor_PARM_2 + 1),#0x00
      0054B4 90 00 0A         [24]14647 	mov	dptr,#0x000a
      0054B7 C0 07            [24]14648 	push	ar7
      0054B9 12 05 51         [24]14649 	lcall	_setCursor
                                  14650 ;	.\ecen4350_lcd_v4.c:3525: setColorHighlight1();
      0054BC 12 16 45         [24]14651 	lcall	_setColorHighlight1
                                  14652 ;	.\ecen4350_lcd_v4.c:3526: LCD_string_write("<E>");
      0054BF 90 69 51         [24]14653 	mov	dptr,#___str_213
      0054C2 75 F0 80         [24]14654 	mov	b,#0x80
      0054C5 12 10 6B         [24]14655 	lcall	_LCD_string_write
                                  14656 ;	.\ecen4350_lcd_v4.c:3527: setColorHighlight2();
      0054C8 12 16 51         [24]14657 	lcall	_setColorHighlight2
                                  14658 ;	.\ecen4350_lcd_v4.c:3528: LCD_string_write(" EDIT\n");
      0054CB 90 5D E5         [24]14659 	mov	dptr,#___str_11
      0054CE 75 F0 80         [24]14660 	mov	b,#0x80
      0054D1 12 10 6B         [24]14661 	lcall	_LCD_string_write
                                  14662 ;	.\ecen4350_lcd_v4.c:3529: delay(20);
      0054D4 90 00 14         [24]14663 	mov	dptr,#0x0014
      0054D7 12 01 87         [24]14664 	lcall	_delay
      0054DA D0 07            [24]14665 	pop	ar7
                                  14666 ;	.\ecen4350_lcd_v4.c:3530: iowrite8(seg7_address, SEG_E);
      0054DC 85 0C 82         [24]14667 	mov	dpl,_seg7_address
      0054DF 85 0D 83         [24]14668 	mov	dph,(_seg7_address + 1)
                                  14669 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14670 ;	assignBit
      0054E2 D2 B5            [12]14671 	setb	_P3_5
                                  14672 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0054E4 74 86            [12]14673 	mov	a,#0x86
      0054E6 F0               [24]14674 	movx	@dptr,a
                                  14675 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14676 ;	assignBit
      0054E7 C2 B5            [12]14677 	clr	_P3_5
                                  14678 ;	.\ecen4350_lcd_v4.c:3531: if (validKey == 0) {
      0054E9 EF               [12]14679 	mov	a,r7
      0054EA 70 18            [24]14680 	jnz	00112$
                                  14681 ;	.\ecen4350_lcd_v4.c:3532: setColorDefault();
      0054EC 12 16 2F         [24]14682 	lcall	_setColorDefault
                                  14683 ;	.\ecen4350_lcd_v4.c:3533: setCursor(60, 280);
      0054EF 75 6B 18         [24]14684 	mov	_setCursor_PARM_2,#0x18
      0054F2 75 6C 01         [24]14685 	mov	(_setCursor_PARM_2 + 1),#0x01
      0054F5 90 00 3C         [24]14686 	mov	dptr,#0x003c
      0054F8 12 05 51         [24]14687 	lcall	_setCursor
                                  14688 ;	.\ecen4350_lcd_v4.c:3534: LCD_string_write("          ");
      0054FB 90 69 42         [24]14689 	mov	dptr,#___str_211
      0054FE 75 F0 80         [24]14690 	mov	b,#0x80
      005501 12 10 6B         [24]14691 	lcall	_LCD_string_write
      005504                      14692 00112$:
                                  14693 ;	.\ecen4350_lcd_v4.c:3536: edit();
      005504 12 27 19         [24]14694 	lcall	_edit
                                  14695 ;	.\ecen4350_lcd_v4.c:3537: goto loop;
      005507 02 53 8B         [24]14696 	ljmp	00101$
      00550A                      14697 00114$:
                                  14698 ;	.\ecen4350_lcd_v4.c:3538: } if(selection == 'F') {
      00550A BE 46 68         [24]14699 	cjne	r6,#0x46,00118$
                                  14700 ;	.\ecen4350_lcd_v4.c:3539: iowrite8(seg7_address, ON);
      00550D 85 0C 82         [24]14701 	mov	dpl,_seg7_address
      005510 85 0D 83         [24]14702 	mov	dph,(_seg7_address + 1)
                                  14703 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14704 ;	assignBit
      005513 D2 B5            [12]14705 	setb	_P3_5
                                  14706 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005515 E4               [12]14707 	clr	a
      005516 F0               [24]14708 	movx	@dptr,a
                                  14709 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14710 ;	assignBit
      005517 C2 B5            [12]14711 	clr	_P3_5
                                  14712 ;	.\ecen4350_lcd_v4.c:3540: setCursor(130, 100);
      005519 75 6B 64         [24]14713 	mov	_setCursor_PARM_2,#0x64
      00551C 75 6C 00         [24]14714 	mov	(_setCursor_PARM_2 + 1),#0x00
      00551F 90 00 82         [24]14715 	mov	dptr,#0x0082
      005522 C0 07            [24]14716 	push	ar7
      005524 12 05 51         [24]14717 	lcall	_setCursor
                                  14718 ;	.\ecen4350_lcd_v4.c:3541: setColorHighlight1();
      005527 12 16 45         [24]14719 	lcall	_setColorHighlight1
                                  14720 ;	.\ecen4350_lcd_v4.c:3542: LCD_string_write("<F>");
      00552A 90 69 55         [24]14721 	mov	dptr,#___str_214
      00552D 75 F0 80         [24]14722 	mov	b,#0x80
      005530 12 10 6B         [24]14723 	lcall	_LCD_string_write
                                  14724 ;	.\ecen4350_lcd_v4.c:3543: setColorHighlight2();
      005533 12 16 51         [24]14725 	lcall	_setColorHighlight2
                                  14726 ;	.\ecen4350_lcd_v4.c:3544: LCD_string_write(" FIND\n");
      005536 90 5D F1         [24]14727 	mov	dptr,#___str_13
      005539 75 F0 80         [24]14728 	mov	b,#0x80
      00553C 12 10 6B         [24]14729 	lcall	_LCD_string_write
                                  14730 ;	.\ecen4350_lcd_v4.c:3545: delay(20);
      00553F 90 00 14         [24]14731 	mov	dptr,#0x0014
      005542 12 01 87         [24]14732 	lcall	_delay
      005545 D0 07            [24]14733 	pop	ar7
                                  14734 ;	.\ecen4350_lcd_v4.c:3546: iowrite8(seg7_address, SEG_F);
      005547 85 0C 82         [24]14735 	mov	dpl,_seg7_address
      00554A 85 0D 83         [24]14736 	mov	dph,(_seg7_address + 1)
                                  14737 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14738 ;	assignBit
      00554D D2 B5            [12]14739 	setb	_P3_5
                                  14740 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00554F 74 8E            [12]14741 	mov	a,#0x8e
      005551 F0               [24]14742 	movx	@dptr,a
                                  14743 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14744 ;	assignBit
      005552 C2 B5            [12]14745 	clr	_P3_5
                                  14746 ;	.\ecen4350_lcd_v4.c:3547: if (validKey == 0) {
      005554 EF               [12]14747 	mov	a,r7
      005555 70 18            [24]14748 	jnz	00116$
                                  14749 ;	.\ecen4350_lcd_v4.c:3548: setColorDefault();
      005557 12 16 2F         [24]14750 	lcall	_setColorDefault
                                  14751 ;	.\ecen4350_lcd_v4.c:3549: setCursor(60, 280);
      00555A 75 6B 18         [24]14752 	mov	_setCursor_PARM_2,#0x18
      00555D 75 6C 01         [24]14753 	mov	(_setCursor_PARM_2 + 1),#0x01
      005560 90 00 3C         [24]14754 	mov	dptr,#0x003c
      005563 12 05 51         [24]14755 	lcall	_setCursor
                                  14756 ;	.\ecen4350_lcd_v4.c:3550: LCD_string_write("          ");
      005566 90 69 42         [24]14757 	mov	dptr,#___str_211
      005569 75 F0 80         [24]14758 	mov	b,#0x80
      00556C 12 10 6B         [24]14759 	lcall	_LCD_string_write
      00556F                      14760 00116$:
                                  14761 ;	.\ecen4350_lcd_v4.c:3552: find();
      00556F 12 2E 75         [24]14762 	lcall	_find
                                  14763 ;	.\ecen4350_lcd_v4.c:3553: goto loop;
      005572 02 53 8B         [24]14764 	ljmp	00101$
      005575                      14765 00118$:
                                  14766 ;	.\ecen4350_lcd_v4.c:3554: } if(selection == 'C') {
      005575 BE 43 68         [24]14767 	cjne	r6,#0x43,00122$
                                  14768 ;	.\ecen4350_lcd_v4.c:3555: iowrite8(seg7_address, ON);
      005578 85 0C 82         [24]14769 	mov	dpl,_seg7_address
      00557B 85 0D 83         [24]14770 	mov	dph,(_seg7_address + 1)
                                  14771 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14772 ;	assignBit
      00557E D2 B5            [12]14773 	setb	_P3_5
                                  14774 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005580 E4               [12]14775 	clr	a
      005581 F0               [24]14776 	movx	@dptr,a
                                  14777 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14778 ;	assignBit
      005582 C2 B5            [12]14779 	clr	_P3_5
                                  14780 ;	.\ecen4350_lcd_v4.c:3556: setCursor(10, 160);
      005584 75 6B A0         [24]14781 	mov	_setCursor_PARM_2,#0xa0
      005587 75 6C 00         [24]14782 	mov	(_setCursor_PARM_2 + 1),#0x00
      00558A 90 00 0A         [24]14783 	mov	dptr,#0x000a
      00558D C0 07            [24]14784 	push	ar7
      00558F 12 05 51         [24]14785 	lcall	_setCursor
                                  14786 ;	.\ecen4350_lcd_v4.c:3557: setColorHighlight1();
      005592 12 16 45         [24]14787 	lcall	_setColorHighlight1
                                  14788 ;	.\ecen4350_lcd_v4.c:3558: LCD_string_write("<C>");
      005595 90 69 59         [24]14789 	mov	dptr,#___str_215
      005598 75 F0 80         [24]14790 	mov	b,#0x80
      00559B 12 10 6B         [24]14791 	lcall	_LCD_string_write
                                  14792 ;	.\ecen4350_lcd_v4.c:3559: setColorHighlight2();
      00559E 12 16 51         [24]14793 	lcall	_setColorHighlight2
                                  14794 ;	.\ecen4350_lcd_v4.c:3560: LCD_string_write(" COUNT\n");
      0055A1 90 5D FD         [24]14795 	mov	dptr,#___str_15
      0055A4 75 F0 80         [24]14796 	mov	b,#0x80
      0055A7 12 10 6B         [24]14797 	lcall	_LCD_string_write
                                  14798 ;	.\ecen4350_lcd_v4.c:3561: delay(20);
      0055AA 90 00 14         [24]14799 	mov	dptr,#0x0014
      0055AD 12 01 87         [24]14800 	lcall	_delay
      0055B0 D0 07            [24]14801 	pop	ar7
                                  14802 ;	.\ecen4350_lcd_v4.c:3562: iowrite8(seg7_address, SEG_C);
      0055B2 85 0C 82         [24]14803 	mov	dpl,_seg7_address
      0055B5 85 0D 83         [24]14804 	mov	dph,(_seg7_address + 1)
                                  14805 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14806 ;	assignBit
      0055B8 D2 B5            [12]14807 	setb	_P3_5
                                  14808 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0055BA 74 C6            [12]14809 	mov	a,#0xc6
      0055BC F0               [24]14810 	movx	@dptr,a
                                  14811 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14812 ;	assignBit
      0055BD C2 B5            [12]14813 	clr	_P3_5
                                  14814 ;	.\ecen4350_lcd_v4.c:3563: if (validKey == 0) {
      0055BF EF               [12]14815 	mov	a,r7
      0055C0 70 18            [24]14816 	jnz	00120$
                                  14817 ;	.\ecen4350_lcd_v4.c:3564: setColorDefault();
      0055C2 12 16 2F         [24]14818 	lcall	_setColorDefault
                                  14819 ;	.\ecen4350_lcd_v4.c:3565: setCursor(60, 280);
      0055C5 75 6B 18         [24]14820 	mov	_setCursor_PARM_2,#0x18
      0055C8 75 6C 01         [24]14821 	mov	(_setCursor_PARM_2 + 1),#0x01
      0055CB 90 00 3C         [24]14822 	mov	dptr,#0x003c
      0055CE 12 05 51         [24]14823 	lcall	_setCursor
                                  14824 ;	.\ecen4350_lcd_v4.c:3566: LCD_string_write("          ");
      0055D1 90 69 42         [24]14825 	mov	dptr,#___str_211
      0055D4 75 F0 80         [24]14826 	mov	b,#0x80
      0055D7 12 10 6B         [24]14827 	lcall	_LCD_string_write
      0055DA                      14828 00120$:
                                  14829 ;	.\ecen4350_lcd_v4.c:3568: count();
      0055DA 12 39 79         [24]14830 	lcall	_count
                                  14831 ;	.\ecen4350_lcd_v4.c:3569: goto loop;
      0055DD 02 53 8B         [24]14832 	ljmp	00101$
      0055E0                      14833 00122$:
                                  14834 ;	.\ecen4350_lcd_v4.c:3570: } if(selection == 'A') {
      0055E0 BE 41 68         [24]14835 	cjne	r6,#0x41,00126$
                                  14836 ;	.\ecen4350_lcd_v4.c:3571: iowrite8(seg7_address, ON);
      0055E3 85 0C 82         [24]14837 	mov	dpl,_seg7_address
      0055E6 85 0D 83         [24]14838 	mov	dph,(_seg7_address + 1)
                                  14839 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14840 ;	assignBit
      0055E9 D2 B5            [12]14841 	setb	_P3_5
                                  14842 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0055EB E4               [12]14843 	clr	a
      0055EC F0               [24]14844 	movx	@dptr,a
                                  14845 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14846 ;	assignBit
      0055ED C2 B5            [12]14847 	clr	_P3_5
                                  14848 ;	.\ecen4350_lcd_v4.c:3572: setCursor(10, 180);
      0055EF 75 6B B4         [24]14849 	mov	_setCursor_PARM_2,#0xb4
      0055F2 75 6C 00         [24]14850 	mov	(_setCursor_PARM_2 + 1),#0x00
      0055F5 90 00 0A         [24]14851 	mov	dptr,#0x000a
      0055F8 C0 07            [24]14852 	push	ar7
      0055FA 12 05 51         [24]14853 	lcall	_setCursor
                                  14854 ;	.\ecen4350_lcd_v4.c:3573: setColorHighlight1();
      0055FD 12 16 45         [24]14855 	lcall	_setColorHighlight1
                                  14856 ;	.\ecen4350_lcd_v4.c:3574: LCD_string_write("<A>");
      005600 90 69 5D         [24]14857 	mov	dptr,#___str_216
      005603 75 F0 80         [24]14858 	mov	b,#0x80
      005606 12 10 6B         [24]14859 	lcall	_LCD_string_write
                                  14860 ;	.\ecen4350_lcd_v4.c:3575: setColorHighlight2();
      005609 12 16 51         [24]14861 	lcall	_setColorHighlight2
                                  14862 ;	.\ecen4350_lcd_v4.c:3576: LCD_string_write(" MEM CHECK\n");
      00560C 90 5E 0A         [24]14863 	mov	dptr,#___str_17
      00560F 75 F0 80         [24]14864 	mov	b,#0x80
      005612 12 10 6B         [24]14865 	lcall	_LCD_string_write
                                  14866 ;	.\ecen4350_lcd_v4.c:3577: delay(20);
      005615 90 00 14         [24]14867 	mov	dptr,#0x0014
      005618 12 01 87         [24]14868 	lcall	_delay
      00561B D0 07            [24]14869 	pop	ar7
                                  14870 ;	.\ecen4350_lcd_v4.c:3578: iowrite8(seg7_address, SEG_A);
      00561D 85 0C 82         [24]14871 	mov	dpl,_seg7_address
      005620 85 0D 83         [24]14872 	mov	dph,(_seg7_address + 1)
                                  14873 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14874 ;	assignBit
      005623 D2 B5            [12]14875 	setb	_P3_5
                                  14876 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      005625 74 88            [12]14877 	mov	a,#0x88
      005627 F0               [24]14878 	movx	@dptr,a
                                  14879 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14880 ;	assignBit
      005628 C2 B5            [12]14881 	clr	_P3_5
                                  14882 ;	.\ecen4350_lcd_v4.c:3579: if (validKey == 0) {
      00562A EF               [12]14883 	mov	a,r7
      00562B 70 18            [24]14884 	jnz	00124$
                                  14885 ;	.\ecen4350_lcd_v4.c:3580: setColorDefault();
      00562D 12 16 2F         [24]14886 	lcall	_setColorDefault
                                  14887 ;	.\ecen4350_lcd_v4.c:3581: setCursor(60, 280);
      005630 75 6B 18         [24]14888 	mov	_setCursor_PARM_2,#0x18
      005633 75 6C 01         [24]14889 	mov	(_setCursor_PARM_2 + 1),#0x01
      005636 90 00 3C         [24]14890 	mov	dptr,#0x003c
      005639 12 05 51         [24]14891 	lcall	_setCursor
                                  14892 ;	.\ecen4350_lcd_v4.c:3582: LCD_string_write("          ");
      00563C 90 69 42         [24]14893 	mov	dptr,#___str_211
      00563F 75 F0 80         [24]14894 	mov	b,#0x80
      005642 12 10 6B         [24]14895 	lcall	_LCD_string_write
      005645                      14896 00124$:
                                  14897 ;	.\ecen4350_lcd_v4.c:3584: check();
      005645 12 44 54         [24]14898 	lcall	_check
                                  14899 ;	.\ecen4350_lcd_v4.c:3585: goto loop;
      005648 02 53 8B         [24]14900 	ljmp	00101$
      00564B                      14901 00126$:
                                  14902 ;	.\ecen4350_lcd_v4.c:3586: } if(selection == '1') {
      00564B BE 31 02         [24]14903 	cjne	r6,#0x31,00250$
      00564E 80 03            [24]14904 	sjmp	00251$
      005650                      14905 00250$:
      005650 02 56 EF         [24]14906 	ljmp	00134$
      005653                      14907 00251$:
                                  14908 ;	.\ecen4350_lcd_v4.c:3587: iowrite8(seg7_address, ON);
      005653 85 0C 82         [24]14909 	mov	dpl,_seg7_address
      005656 85 0D 83         [24]14910 	mov	dph,(_seg7_address + 1)
                                  14911 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14912 ;	assignBit
      005659 D2 B5            [12]14913 	setb	_P3_5
                                  14914 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      00565B E4               [12]14915 	clr	a
      00565C F0               [24]14916 	movx	@dptr,a
                                  14917 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14918 ;	assignBit
      00565D C2 B5            [12]14919 	clr	_P3_5
                                  14920 ;	.\ecen4350_lcd_v4.c:3588: setCursor(10, 220);
      00565F 75 6B DC         [24]14921 	mov	_setCursor_PARM_2,#0xdc
      005662 75 6C 00         [24]14922 	mov	(_setCursor_PARM_2 + 1),#0x00
      005665 90 00 0A         [24]14923 	mov	dptr,#0x000a
      005668 C0 07            [24]14924 	push	ar7
      00566A 12 05 51         [24]14925 	lcall	_setCursor
                                  14926 ;	.\ecen4350_lcd_v4.c:3589: setColorHighlight1();
      00566D 12 16 45         [24]14927 	lcall	_setColorHighlight1
                                  14928 ;	.\ecen4350_lcd_v4.c:3590: LCD_string_write("<1>");
      005670 90 69 61         [24]14929 	mov	dptr,#___str_217
      005673 75 F0 80         [24]14930 	mov	b,#0x80
      005676 12 10 6B         [24]14931 	lcall	_LCD_string_write
                                  14932 ;	.\ecen4350_lcd_v4.c:3591: setColorHighlight2();
      005679 12 16 51         [24]14933 	lcall	_setColorHighlight2
                                  14934 ;	.\ecen4350_lcd_v4.c:3592: LCD_string_write(" UART");
      00567C 90 5E 1B         [24]14935 	mov	dptr,#___str_19
      00567F 75 F0 80         [24]14936 	mov	b,#0x80
      005682 12 10 6B         [24]14937 	lcall	_LCD_string_write
                                  14938 ;	.\ecen4350_lcd_v4.c:3593: setTextSize(1);
      005685 75 82 01         [24]14939 	mov	dpl,#0x01
      005688 12 05 6B         [24]14940 	lcall	_setTextSize
      00568B D0 07            [24]14941 	pop	ar7
                                  14942 ;	.\ecen4350_lcd_v4.c:3594: if (UART_en == 1) {
      00568D 78 72            [12]14943 	mov	r0,#_UART_en
      00568F B6 01 0D         [24]14944 	cjne	@r0,#0x01,00128$
                                  14945 ;	.\ecen4350_lcd_v4.c:3595: LCD_string_write(" [Enabled]\n");
      005692 90 5E 2E         [24]14946 	mov	dptr,#___str_21
      005695 75 F0 80         [24]14947 	mov	b,#0x80
      005698 C0 07            [24]14948 	push	ar7
      00569A 12 10 6B         [24]14949 	lcall	_LCD_string_write
      00569D D0 07            [24]14950 	pop	ar7
      00569F                      14951 00128$:
                                  14952 ;	.\ecen4350_lcd_v4.c:3596: } if (UART_en == 0) {
      00569F 78 72            [12]14953 	mov	r0,#_UART_en
      0056A1 E6               [12]14954 	mov	a,@r0
      0056A2 70 0D            [24]14955 	jnz	00130$
                                  14956 ;	.\ecen4350_lcd_v4.c:3597: LCD_string_write(" [Disabled]\n");
      0056A4 90 5E 21         [24]14957 	mov	dptr,#___str_20
      0056A7 75 F0 80         [24]14958 	mov	b,#0x80
      0056AA C0 07            [24]14959 	push	ar7
      0056AC 12 10 6B         [24]14960 	lcall	_LCD_string_write
      0056AF D0 07            [24]14961 	pop	ar7
      0056B1                      14962 00130$:
                                  14963 ;	.\ecen4350_lcd_v4.c:3599: setTextSize(2);
      0056B1 75 82 02         [24]14964 	mov	dpl,#0x02
      0056B4 C0 07            [24]14965 	push	ar7
      0056B6 12 05 6B         [24]14966 	lcall	_setTextSize
                                  14967 ;	.\ecen4350_lcd_v4.c:3600: delay(20);
      0056B9 90 00 14         [24]14968 	mov	dptr,#0x0014
      0056BC 12 01 87         [24]14969 	lcall	_delay
      0056BF D0 07            [24]14970 	pop	ar7
                                  14971 ;	.\ecen4350_lcd_v4.c:3601: iowrite8(seg7_address, SEG_U);
      0056C1 85 0C 82         [24]14972 	mov	dpl,_seg7_address
      0056C4 85 0D 83         [24]14973 	mov	dph,(_seg7_address + 1)
                                  14974 ;	.\ecen4350_lcd_v4.c:91: IOM = 1;
                                  14975 ;	assignBit
      0056C7 D2 B5            [12]14976 	setb	_P3_5
                                  14977 ;	.\ecen4350_lcd_v4.c:92: *map_address = d;
      0056C9 74 C1            [12]14978 	mov	a,#0xc1
      0056CB F0               [24]14979 	movx	@dptr,a
                                  14980 ;	.\ecen4350_lcd_v4.c:93: IOM = 0;
                                  14981 ;	assignBit
      0056CC C2 B5            [12]14982 	clr	_P3_5
                                  14983 ;	.\ecen4350_lcd_v4.c:3602: if (validKey == 0) {
      0056CE EF               [12]14984 	mov	a,r7
      0056CF 70 18            [24]14985 	jnz	00132$
                                  14986 ;	.\ecen4350_lcd_v4.c:3603: setColorDefault();
      0056D1 12 16 2F         [24]14987 	lcall	_setColorDefault
                                  14988 ;	.\ecen4350_lcd_v4.c:3604: setCursor(60, 280);
      0056D4 75 6B 18         [24]14989 	mov	_setCursor_PARM_2,#0x18
      0056D7 75 6C 01         [24]14990 	mov	(_setCursor_PARM_2 + 1),#0x01
      0056DA 90 00 3C         [24]14991 	mov	dptr,#0x003c
      0056DD 12 05 51         [24]14992 	lcall	_setCursor
                                  14993 ;	.\ecen4350_lcd_v4.c:3605: LCD_string_write("          ");
      0056E0 90 69 42         [24]14994 	mov	dptr,#___str_211
      0056E3 75 F0 80         [24]14995 	mov	b,#0x80
      0056E6 12 10 6B         [24]14996 	lcall	_LCD_string_write
      0056E9                      14997 00132$:
                                  14998 ;	.\ecen4350_lcd_v4.c:3608: uart();
      0056E9 12 45 76         [24]14999 	lcall	_uart
                                  15000 ;	.\ecen4350_lcd_v4.c:3609: goto loop;
      0056EC 02 53 8B         [24]15001 	ljmp	00101$
      0056EF                      15002 00134$:
                                  15003 ;	.\ecen4350_lcd_v4.c:3611: setCursor(45, 260);
      0056EF 75 6B 04         [24]15004 	mov	_setCursor_PARM_2,#0x04
      0056F2 75 6C 01         [24]15005 	mov	(_setCursor_PARM_2 + 1),#0x01
      0056F5 90 00 2D         [24]15006 	mov	dptr,#0x002d
      0056F8 12 05 51         [24]15007 	lcall	_setCursor
                                  15008 ;	.\ecen4350_lcd_v4.c:3612: setColorRed();
      0056FB 12 16 74         [24]15009 	lcall	_setColorRed
                                  15010 ;	.\ecen4350_lcd_v4.c:3613: LCD_string_write("INVALID INPUT\n");
      0056FE 90 69 65         [24]15011 	mov	dptr,#___str_218
      005701 75 F0 80         [24]15012 	mov	b,#0x80
      005704 12 10 6B         [24]15013 	lcall	_LCD_string_write
                                  15014 ;	.\ecen4350_lcd_v4.c:3614: setCursor(60, 280);
      005707 75 6B 18         [24]15015 	mov	_setCursor_PARM_2,#0x18
      00570A 75 6C 01         [24]15016 	mov	(_setCursor_PARM_2 + 1),#0x01
      00570D 90 00 3C         [24]15017 	mov	dptr,#0x003c
      005710 12 05 51         [24]15018 	lcall	_setCursor
                                  15019 ;	.\ecen4350_lcd_v4.c:3615: LCD_string_write("Try again.");
      005713 90 69 74         [24]15020 	mov	dptr,#___str_219
      005716 75 F0 80         [24]15021 	mov	b,#0x80
      005719 12 10 6B         [24]15022 	lcall	_LCD_string_write
                                  15023 ;	.\ecen4350_lcd_v4.c:3616: validKey = 0;
      00571C 7F 00            [12]15024 	mov	r7,#0x00
                                  15025 ;	.\ecen4350_lcd_v4.c:3617: delay(20);
      00571E 90 00 14         [24]15026 	mov	dptr,#0x0014
      005721 C0 07            [24]15027 	push	ar7
      005723 12 01 87         [24]15028 	lcall	_delay
                                  15029 ;	.\ecen4350_lcd_v4.c:3618: setColorDefault();
      005726 12 16 2F         [24]15030 	lcall	_setColorDefault
                                  15031 ;	.\ecen4350_lcd_v4.c:3619: setCursor(45, 260);
      005729 75 6B 04         [24]15032 	mov	_setCursor_PARM_2,#0x04
      00572C 75 6C 01         [24]15033 	mov	(_setCursor_PARM_2 + 1),#0x01
      00572F 90 00 2D         [24]15034 	mov	dptr,#0x002d
      005732 12 05 51         [24]15035 	lcall	_setCursor
                                  15036 ;	.\ecen4350_lcd_v4.c:3620: LCD_string_write("               \n");
      005735 90 69 7F         [24]15037 	mov	dptr,#___str_220
      005738 75 F0 80         [24]15038 	mov	b,#0x80
      00573B 12 10 6B         [24]15039 	lcall	_LCD_string_write
      00573E D0 07            [24]15040 	pop	ar7
                                  15041 ;	.\ecen4350_lcd_v4.c:3621: goto inputKey;
                                  15042 ;	.\ecen4350_lcd_v4.c:3625: }
      005740 02 53 BC         [24]15043 	ljmp	00102$
                                  15044 	.area CSEG    (CODE)
                                  15045 	.area CONST   (CODE)
      005864                      15046 _font:
      005864 00                   15047 	.db #0x00	; 0
      005865 00                   15048 	.db #0x00	; 0
      005866 00                   15049 	.db #0x00	; 0
      005867 00                   15050 	.db #0x00	; 0
      005868 00                   15051 	.db #0x00	; 0
      005869 3E                   15052 	.db #0x3e	; 62
      00586A 5B                   15053 	.db #0x5b	; 91
      00586B 4F                   15054 	.db #0x4f	; 79	'O'
      00586C 5B                   15055 	.db #0x5b	; 91
      00586D 3E                   15056 	.db #0x3e	; 62
      00586E 3E                   15057 	.db #0x3e	; 62
      00586F 6B                   15058 	.db #0x6b	; 107	'k'
      005870 4F                   15059 	.db #0x4f	; 79	'O'
      005871 6B                   15060 	.db #0x6b	; 107	'k'
      005872 3E                   15061 	.db #0x3e	; 62
      005873 1C                   15062 	.db #0x1c	; 28
      005874 3E                   15063 	.db #0x3e	; 62
      005875 7C                   15064 	.db #0x7c	; 124
      005876 3E                   15065 	.db #0x3e	; 62
      005877 1C                   15066 	.db #0x1c	; 28
      005878 18                   15067 	.db #0x18	; 24
      005879 3C                   15068 	.db #0x3c	; 60
      00587A 7E                   15069 	.db #0x7e	; 126
      00587B 3C                   15070 	.db #0x3c	; 60
      00587C 18                   15071 	.db #0x18	; 24
      00587D 1C                   15072 	.db #0x1c	; 28
      00587E 57                   15073 	.db #0x57	; 87	'W'
      00587F 7D                   15074 	.db #0x7d	; 125
      005880 57                   15075 	.db #0x57	; 87	'W'
      005881 1C                   15076 	.db #0x1c	; 28
      005882 1C                   15077 	.db #0x1c	; 28
      005883 5E                   15078 	.db #0x5e	; 94
      005884 7F                   15079 	.db #0x7f	; 127
      005885 5E                   15080 	.db #0x5e	; 94
      005886 1C                   15081 	.db #0x1c	; 28
      005887 00                   15082 	.db #0x00	; 0
      005888 18                   15083 	.db #0x18	; 24
      005889 3C                   15084 	.db #0x3c	; 60
      00588A 18                   15085 	.db #0x18	; 24
      00588B 00                   15086 	.db #0x00	; 0
      00588C FF                   15087 	.db #0xff	; 255
      00588D E7                   15088 	.db #0xe7	; 231
      00588E C3                   15089 	.db #0xc3	; 195
      00588F E7                   15090 	.db #0xe7	; 231
      005890 FF                   15091 	.db #0xff	; 255
      005891 00                   15092 	.db #0x00	; 0
      005892 18                   15093 	.db #0x18	; 24
      005893 24                   15094 	.db #0x24	; 36
      005894 18                   15095 	.db #0x18	; 24
      005895 00                   15096 	.db #0x00	; 0
      005896 FF                   15097 	.db #0xff	; 255
      005897 E7                   15098 	.db #0xe7	; 231
      005898 DB                   15099 	.db #0xdb	; 219
      005899 E7                   15100 	.db #0xe7	; 231
      00589A FF                   15101 	.db #0xff	; 255
      00589B 30                   15102 	.db #0x30	; 48	'0'
      00589C 48                   15103 	.db #0x48	; 72	'H'
      00589D 3A                   15104 	.db #0x3a	; 58
      00589E 06                   15105 	.db #0x06	; 6
      00589F 0E                   15106 	.db #0x0e	; 14
      0058A0 26                   15107 	.db #0x26	; 38
      0058A1 29                   15108 	.db #0x29	; 41
      0058A2 79                   15109 	.db #0x79	; 121	'y'
      0058A3 29                   15110 	.db #0x29	; 41
      0058A4 26                   15111 	.db #0x26	; 38
      0058A5 40                   15112 	.db #0x40	; 64
      0058A6 7F                   15113 	.db #0x7f	; 127
      0058A7 05                   15114 	.db #0x05	; 5
      0058A8 05                   15115 	.db #0x05	; 5
      0058A9 07                   15116 	.db #0x07	; 7
      0058AA 40                   15117 	.db #0x40	; 64
      0058AB 7F                   15118 	.db #0x7f	; 127
      0058AC 05                   15119 	.db #0x05	; 5
      0058AD 25                   15120 	.db #0x25	; 37
      0058AE 3F                   15121 	.db #0x3f	; 63
      0058AF 5A                   15122 	.db #0x5a	; 90	'Z'
      0058B0 3C                   15123 	.db #0x3c	; 60
      0058B1 E7                   15124 	.db #0xe7	; 231
      0058B2 3C                   15125 	.db #0x3c	; 60
      0058B3 5A                   15126 	.db #0x5a	; 90	'Z'
      0058B4 7F                   15127 	.db #0x7f	; 127
      0058B5 3E                   15128 	.db #0x3e	; 62
      0058B6 1C                   15129 	.db #0x1c	; 28
      0058B7 1C                   15130 	.db #0x1c	; 28
      0058B8 08                   15131 	.db #0x08	; 8
      0058B9 08                   15132 	.db #0x08	; 8
      0058BA 1C                   15133 	.db #0x1c	; 28
      0058BB 1C                   15134 	.db #0x1c	; 28
      0058BC 3E                   15135 	.db #0x3e	; 62
      0058BD 7F                   15136 	.db #0x7f	; 127
      0058BE 14                   15137 	.db #0x14	; 20
      0058BF 22                   15138 	.db #0x22	; 34
      0058C0 7F                   15139 	.db #0x7f	; 127
      0058C1 22                   15140 	.db #0x22	; 34
      0058C2 14                   15141 	.db #0x14	; 20
      0058C3 5F                   15142 	.db #0x5f	; 95
      0058C4 5F                   15143 	.db #0x5f	; 95
      0058C5 00                   15144 	.db #0x00	; 0
      0058C6 5F                   15145 	.db #0x5f	; 95
      0058C7 5F                   15146 	.db #0x5f	; 95
      0058C8 06                   15147 	.db #0x06	; 6
      0058C9 09                   15148 	.db #0x09	; 9
      0058CA 7F                   15149 	.db #0x7f	; 127
      0058CB 01                   15150 	.db #0x01	; 1
      0058CC 7F                   15151 	.db #0x7f	; 127
      0058CD 00                   15152 	.db #0x00	; 0
      0058CE 66                   15153 	.db #0x66	; 102	'f'
      0058CF 89                   15154 	.db #0x89	; 137
      0058D0 95                   15155 	.db #0x95	; 149
      0058D1 6A                   15156 	.db #0x6a	; 106	'j'
      0058D2 60                   15157 	.db #0x60	; 96
      0058D3 60                   15158 	.db #0x60	; 96
      0058D4 60                   15159 	.db #0x60	; 96
      0058D5 60                   15160 	.db #0x60	; 96
      0058D6 60                   15161 	.db #0x60	; 96
      0058D7 94                   15162 	.db #0x94	; 148
      0058D8 A2                   15163 	.db #0xa2	; 162
      0058D9 FF                   15164 	.db #0xff	; 255
      0058DA A2                   15165 	.db #0xa2	; 162
      0058DB 94                   15166 	.db #0x94	; 148
      0058DC 08                   15167 	.db #0x08	; 8
      0058DD 04                   15168 	.db #0x04	; 4
      0058DE 7E                   15169 	.db #0x7e	; 126
      0058DF 04                   15170 	.db #0x04	; 4
      0058E0 08                   15171 	.db #0x08	; 8
      0058E1 10                   15172 	.db #0x10	; 16
      0058E2 20                   15173 	.db #0x20	; 32
      0058E3 7E                   15174 	.db #0x7e	; 126
      0058E4 20                   15175 	.db #0x20	; 32
      0058E5 10                   15176 	.db #0x10	; 16
      0058E6 08                   15177 	.db #0x08	; 8
      0058E7 08                   15178 	.db #0x08	; 8
      0058E8 2A                   15179 	.db #0x2a	; 42
      0058E9 1C                   15180 	.db #0x1c	; 28
      0058EA 08                   15181 	.db #0x08	; 8
      0058EB 08                   15182 	.db #0x08	; 8
      0058EC 1C                   15183 	.db #0x1c	; 28
      0058ED 2A                   15184 	.db #0x2a	; 42
      0058EE 08                   15185 	.db #0x08	; 8
      0058EF 08                   15186 	.db #0x08	; 8
      0058F0 1E                   15187 	.db #0x1e	; 30
      0058F1 10                   15188 	.db #0x10	; 16
      0058F2 10                   15189 	.db #0x10	; 16
      0058F3 10                   15190 	.db #0x10	; 16
      0058F4 10                   15191 	.db #0x10	; 16
      0058F5 0C                   15192 	.db #0x0c	; 12
      0058F6 1E                   15193 	.db #0x1e	; 30
      0058F7 0C                   15194 	.db #0x0c	; 12
      0058F8 1E                   15195 	.db #0x1e	; 30
      0058F9 0C                   15196 	.db #0x0c	; 12
      0058FA 30                   15197 	.db #0x30	; 48	'0'
      0058FB 38                   15198 	.db #0x38	; 56	'8'
      0058FC 3E                   15199 	.db #0x3e	; 62
      0058FD 38                   15200 	.db #0x38	; 56	'8'
      0058FE 30                   15201 	.db #0x30	; 48	'0'
      0058FF 06                   15202 	.db #0x06	; 6
      005900 0E                   15203 	.db #0x0e	; 14
      005901 3E                   15204 	.db #0x3e	; 62
      005902 0E                   15205 	.db #0x0e	; 14
      005903 06                   15206 	.db #0x06	; 6
      005904 00                   15207 	.db #0x00	; 0
      005905 00                   15208 	.db #0x00	; 0
      005906 00                   15209 	.db #0x00	; 0
      005907 00                   15210 	.db #0x00	; 0
      005908 00                   15211 	.db #0x00	; 0
      005909 00                   15212 	.db #0x00	; 0
      00590A 00                   15213 	.db #0x00	; 0
      00590B 5F                   15214 	.db #0x5f	; 95
      00590C 00                   15215 	.db #0x00	; 0
      00590D 00                   15216 	.db #0x00	; 0
      00590E 00                   15217 	.db #0x00	; 0
      00590F 07                   15218 	.db #0x07	; 7
      005910 00                   15219 	.db #0x00	; 0
      005911 07                   15220 	.db #0x07	; 7
      005912 00                   15221 	.db #0x00	; 0
      005913 14                   15222 	.db #0x14	; 20
      005914 7F                   15223 	.db #0x7f	; 127
      005915 14                   15224 	.db #0x14	; 20
      005916 7F                   15225 	.db #0x7f	; 127
      005917 14                   15226 	.db #0x14	; 20
      005918 24                   15227 	.db #0x24	; 36
      005919 2A                   15228 	.db #0x2a	; 42
      00591A 7F                   15229 	.db #0x7f	; 127
      00591B 2A                   15230 	.db #0x2a	; 42
      00591C 12                   15231 	.db #0x12	; 18
      00591D 23                   15232 	.db #0x23	; 35
      00591E 13                   15233 	.db #0x13	; 19
      00591F 08                   15234 	.db #0x08	; 8
      005920 64                   15235 	.db #0x64	; 100	'd'
      005921 62                   15236 	.db #0x62	; 98	'b'
      005922 36                   15237 	.db #0x36	; 54	'6'
      005923 49                   15238 	.db #0x49	; 73	'I'
      005924 56                   15239 	.db #0x56	; 86	'V'
      005925 20                   15240 	.db #0x20	; 32
      005926 50                   15241 	.db #0x50	; 80	'P'
      005927 00                   15242 	.db #0x00	; 0
      005928 08                   15243 	.db #0x08	; 8
      005929 07                   15244 	.db #0x07	; 7
      00592A 03                   15245 	.db #0x03	; 3
      00592B 00                   15246 	.db #0x00	; 0
      00592C 00                   15247 	.db #0x00	; 0
      00592D 1C                   15248 	.db #0x1c	; 28
      00592E 22                   15249 	.db #0x22	; 34
      00592F 41                   15250 	.db #0x41	; 65	'A'
      005930 00                   15251 	.db #0x00	; 0
      005931 00                   15252 	.db #0x00	; 0
      005932 41                   15253 	.db #0x41	; 65	'A'
      005933 22                   15254 	.db #0x22	; 34
      005934 1C                   15255 	.db #0x1c	; 28
      005935 00                   15256 	.db #0x00	; 0
      005936 2A                   15257 	.db #0x2a	; 42
      005937 1C                   15258 	.db #0x1c	; 28
      005938 7F                   15259 	.db #0x7f	; 127
      005939 1C                   15260 	.db #0x1c	; 28
      00593A 2A                   15261 	.db #0x2a	; 42
      00593B 08                   15262 	.db #0x08	; 8
      00593C 08                   15263 	.db #0x08	; 8
      00593D 3E                   15264 	.db #0x3e	; 62
      00593E 08                   15265 	.db #0x08	; 8
      00593F 08                   15266 	.db #0x08	; 8
      005940 00                   15267 	.db #0x00	; 0
      005941 80                   15268 	.db #0x80	; 128
      005942 70                   15269 	.db #0x70	; 112	'p'
      005943 30                   15270 	.db #0x30	; 48	'0'
      005944 00                   15271 	.db #0x00	; 0
      005945 08                   15272 	.db #0x08	; 8
      005946 08                   15273 	.db #0x08	; 8
      005947 08                   15274 	.db #0x08	; 8
      005948 08                   15275 	.db #0x08	; 8
      005949 08                   15276 	.db #0x08	; 8
      00594A 00                   15277 	.db #0x00	; 0
      00594B 00                   15278 	.db #0x00	; 0
      00594C 60                   15279 	.db #0x60	; 96
      00594D 60                   15280 	.db #0x60	; 96
      00594E 00                   15281 	.db #0x00	; 0
      00594F 20                   15282 	.db #0x20	; 32
      005950 10                   15283 	.db #0x10	; 16
      005951 08                   15284 	.db #0x08	; 8
      005952 04                   15285 	.db #0x04	; 4
      005953 02                   15286 	.db #0x02	; 2
      005954 3E                   15287 	.db #0x3e	; 62
      005955 51                   15288 	.db #0x51	; 81	'Q'
      005956 49                   15289 	.db #0x49	; 73	'I'
      005957 45                   15290 	.db #0x45	; 69	'E'
      005958 3E                   15291 	.db #0x3e	; 62
      005959 00                   15292 	.db #0x00	; 0
      00595A 42                   15293 	.db #0x42	; 66	'B'
      00595B 7F                   15294 	.db #0x7f	; 127
      00595C 40                   15295 	.db #0x40	; 64
      00595D 00                   15296 	.db #0x00	; 0
      00595E 72                   15297 	.db #0x72	; 114	'r'
      00595F 49                   15298 	.db #0x49	; 73	'I'
      005960 49                   15299 	.db #0x49	; 73	'I'
      005961 49                   15300 	.db #0x49	; 73	'I'
      005962 46                   15301 	.db #0x46	; 70	'F'
      005963 21                   15302 	.db #0x21	; 33
      005964 41                   15303 	.db #0x41	; 65	'A'
      005965 49                   15304 	.db #0x49	; 73	'I'
      005966 4D                   15305 	.db #0x4d	; 77	'M'
      005967 33                   15306 	.db #0x33	; 51	'3'
      005968 18                   15307 	.db #0x18	; 24
      005969 14                   15308 	.db #0x14	; 20
      00596A 12                   15309 	.db #0x12	; 18
      00596B 7F                   15310 	.db #0x7f	; 127
      00596C 10                   15311 	.db #0x10	; 16
      00596D 27                   15312 	.db #0x27	; 39
      00596E 45                   15313 	.db #0x45	; 69	'E'
      00596F 45                   15314 	.db #0x45	; 69	'E'
      005970 45                   15315 	.db #0x45	; 69	'E'
      005971 39                   15316 	.db #0x39	; 57	'9'
      005972 3C                   15317 	.db #0x3c	; 60
      005973 4A                   15318 	.db #0x4a	; 74	'J'
      005974 49                   15319 	.db #0x49	; 73	'I'
      005975 49                   15320 	.db #0x49	; 73	'I'
      005976 31                   15321 	.db #0x31	; 49	'1'
      005977 41                   15322 	.db #0x41	; 65	'A'
      005978 21                   15323 	.db #0x21	; 33
      005979 11                   15324 	.db #0x11	; 17
      00597A 09                   15325 	.db #0x09	; 9
      00597B 07                   15326 	.db #0x07	; 7
      00597C 36                   15327 	.db #0x36	; 54	'6'
      00597D 49                   15328 	.db #0x49	; 73	'I'
      00597E 49                   15329 	.db #0x49	; 73	'I'
      00597F 49                   15330 	.db #0x49	; 73	'I'
      005980 36                   15331 	.db #0x36	; 54	'6'
      005981 46                   15332 	.db #0x46	; 70	'F'
      005982 49                   15333 	.db #0x49	; 73	'I'
      005983 49                   15334 	.db #0x49	; 73	'I'
      005984 29                   15335 	.db #0x29	; 41
      005985 1E                   15336 	.db #0x1e	; 30
      005986 00                   15337 	.db #0x00	; 0
      005987 00                   15338 	.db #0x00	; 0
      005988 14                   15339 	.db #0x14	; 20
      005989 00                   15340 	.db #0x00	; 0
      00598A 00                   15341 	.db #0x00	; 0
      00598B 00                   15342 	.db #0x00	; 0
      00598C 40                   15343 	.db #0x40	; 64
      00598D 34                   15344 	.db #0x34	; 52	'4'
      00598E 00                   15345 	.db #0x00	; 0
      00598F 00                   15346 	.db #0x00	; 0
      005990 00                   15347 	.db #0x00	; 0
      005991 08                   15348 	.db #0x08	; 8
      005992 14                   15349 	.db #0x14	; 20
      005993 22                   15350 	.db #0x22	; 34
      005994 41                   15351 	.db #0x41	; 65	'A'
      005995 14                   15352 	.db #0x14	; 20
      005996 14                   15353 	.db #0x14	; 20
      005997 14                   15354 	.db #0x14	; 20
      005998 14                   15355 	.db #0x14	; 20
      005999 14                   15356 	.db #0x14	; 20
      00599A 00                   15357 	.db #0x00	; 0
      00599B 41                   15358 	.db #0x41	; 65	'A'
      00599C 22                   15359 	.db #0x22	; 34
      00599D 14                   15360 	.db #0x14	; 20
      00599E 08                   15361 	.db #0x08	; 8
      00599F 02                   15362 	.db #0x02	; 2
      0059A0 01                   15363 	.db #0x01	; 1
      0059A1 59                   15364 	.db #0x59	; 89	'Y'
      0059A2 09                   15365 	.db #0x09	; 9
      0059A3 06                   15366 	.db #0x06	; 6
      0059A4 3E                   15367 	.db #0x3e	; 62
      0059A5 41                   15368 	.db #0x41	; 65	'A'
      0059A6 5D                   15369 	.db #0x5d	; 93
      0059A7 59                   15370 	.db #0x59	; 89	'Y'
      0059A8 4E                   15371 	.db #0x4e	; 78	'N'
      0059A9 7C                   15372 	.db #0x7c	; 124
      0059AA 12                   15373 	.db #0x12	; 18
      0059AB 11                   15374 	.db #0x11	; 17
      0059AC 12                   15375 	.db #0x12	; 18
      0059AD 7C                   15376 	.db #0x7c	; 124
      0059AE 7F                   15377 	.db #0x7f	; 127
      0059AF 49                   15378 	.db #0x49	; 73	'I'
      0059B0 49                   15379 	.db #0x49	; 73	'I'
      0059B1 49                   15380 	.db #0x49	; 73	'I'
      0059B2 36                   15381 	.db #0x36	; 54	'6'
      0059B3 3E                   15382 	.db #0x3e	; 62
      0059B4 41                   15383 	.db #0x41	; 65	'A'
      0059B5 41                   15384 	.db #0x41	; 65	'A'
      0059B6 41                   15385 	.db #0x41	; 65	'A'
      0059B7 22                   15386 	.db #0x22	; 34
      0059B8 7F                   15387 	.db #0x7f	; 127
      0059B9 41                   15388 	.db #0x41	; 65	'A'
      0059BA 41                   15389 	.db #0x41	; 65	'A'
      0059BB 41                   15390 	.db #0x41	; 65	'A'
      0059BC 3E                   15391 	.db #0x3e	; 62
      0059BD 7F                   15392 	.db #0x7f	; 127
      0059BE 49                   15393 	.db #0x49	; 73	'I'
      0059BF 49                   15394 	.db #0x49	; 73	'I'
      0059C0 49                   15395 	.db #0x49	; 73	'I'
      0059C1 41                   15396 	.db #0x41	; 65	'A'
      0059C2 7F                   15397 	.db #0x7f	; 127
      0059C3 09                   15398 	.db #0x09	; 9
      0059C4 09                   15399 	.db #0x09	; 9
      0059C5 09                   15400 	.db #0x09	; 9
      0059C6 01                   15401 	.db #0x01	; 1
      0059C7 3E                   15402 	.db #0x3e	; 62
      0059C8 41                   15403 	.db #0x41	; 65	'A'
      0059C9 41                   15404 	.db #0x41	; 65	'A'
      0059CA 51                   15405 	.db #0x51	; 81	'Q'
      0059CB 73                   15406 	.db #0x73	; 115	's'
      0059CC 7F                   15407 	.db #0x7f	; 127
      0059CD 08                   15408 	.db #0x08	; 8
      0059CE 08                   15409 	.db #0x08	; 8
      0059CF 08                   15410 	.db #0x08	; 8
      0059D0 7F                   15411 	.db #0x7f	; 127
      0059D1 00                   15412 	.db #0x00	; 0
      0059D2 41                   15413 	.db #0x41	; 65	'A'
      0059D3 7F                   15414 	.db #0x7f	; 127
      0059D4 41                   15415 	.db #0x41	; 65	'A'
      0059D5 00                   15416 	.db #0x00	; 0
      0059D6 20                   15417 	.db #0x20	; 32
      0059D7 40                   15418 	.db #0x40	; 64
      0059D8 41                   15419 	.db #0x41	; 65	'A'
      0059D9 3F                   15420 	.db #0x3f	; 63
      0059DA 01                   15421 	.db #0x01	; 1
      0059DB 7F                   15422 	.db #0x7f	; 127
      0059DC 08                   15423 	.db #0x08	; 8
      0059DD 14                   15424 	.db #0x14	; 20
      0059DE 22                   15425 	.db #0x22	; 34
      0059DF 41                   15426 	.db #0x41	; 65	'A'
      0059E0 7F                   15427 	.db #0x7f	; 127
      0059E1 40                   15428 	.db #0x40	; 64
      0059E2 40                   15429 	.db #0x40	; 64
      0059E3 40                   15430 	.db #0x40	; 64
      0059E4 40                   15431 	.db #0x40	; 64
      0059E5 7F                   15432 	.db #0x7f	; 127
      0059E6 02                   15433 	.db #0x02	; 2
      0059E7 1C                   15434 	.db #0x1c	; 28
      0059E8 02                   15435 	.db #0x02	; 2
      0059E9 7F                   15436 	.db #0x7f	; 127
      0059EA 7F                   15437 	.db #0x7f	; 127
      0059EB 04                   15438 	.db #0x04	; 4
      0059EC 08                   15439 	.db #0x08	; 8
      0059ED 10                   15440 	.db #0x10	; 16
      0059EE 7F                   15441 	.db #0x7f	; 127
      0059EF 3E                   15442 	.db #0x3e	; 62
      0059F0 41                   15443 	.db #0x41	; 65	'A'
      0059F1 41                   15444 	.db #0x41	; 65	'A'
      0059F2 41                   15445 	.db #0x41	; 65	'A'
      0059F3 3E                   15446 	.db #0x3e	; 62
      0059F4 7F                   15447 	.db #0x7f	; 127
      0059F5 09                   15448 	.db #0x09	; 9
      0059F6 09                   15449 	.db #0x09	; 9
      0059F7 09                   15450 	.db #0x09	; 9
      0059F8 06                   15451 	.db #0x06	; 6
      0059F9 3E                   15452 	.db #0x3e	; 62
      0059FA 41                   15453 	.db #0x41	; 65	'A'
      0059FB 51                   15454 	.db #0x51	; 81	'Q'
      0059FC 21                   15455 	.db #0x21	; 33
      0059FD 5E                   15456 	.db #0x5e	; 94
      0059FE 7F                   15457 	.db #0x7f	; 127
      0059FF 09                   15458 	.db #0x09	; 9
      005A00 19                   15459 	.db #0x19	; 25
      005A01 29                   15460 	.db #0x29	; 41
      005A02 46                   15461 	.db #0x46	; 70	'F'
      005A03 26                   15462 	.db #0x26	; 38
      005A04 49                   15463 	.db #0x49	; 73	'I'
      005A05 49                   15464 	.db #0x49	; 73	'I'
      005A06 49                   15465 	.db #0x49	; 73	'I'
      005A07 32                   15466 	.db #0x32	; 50	'2'
      005A08 03                   15467 	.db #0x03	; 3
      005A09 01                   15468 	.db #0x01	; 1
      005A0A 7F                   15469 	.db #0x7f	; 127
      005A0B 01                   15470 	.db #0x01	; 1
      005A0C 03                   15471 	.db #0x03	; 3
      005A0D 3F                   15472 	.db #0x3f	; 63
      005A0E 40                   15473 	.db #0x40	; 64
      005A0F 40                   15474 	.db #0x40	; 64
      005A10 40                   15475 	.db #0x40	; 64
      005A11 3F                   15476 	.db #0x3f	; 63
      005A12 1F                   15477 	.db #0x1f	; 31
      005A13 20                   15478 	.db #0x20	; 32
      005A14 40                   15479 	.db #0x40	; 64
      005A15 20                   15480 	.db #0x20	; 32
      005A16 1F                   15481 	.db #0x1f	; 31
      005A17 3F                   15482 	.db #0x3f	; 63
      005A18 40                   15483 	.db #0x40	; 64
      005A19 38                   15484 	.db #0x38	; 56	'8'
      005A1A 40                   15485 	.db #0x40	; 64
      005A1B 3F                   15486 	.db #0x3f	; 63
      005A1C 63                   15487 	.db #0x63	; 99	'c'
      005A1D 14                   15488 	.db #0x14	; 20
      005A1E 08                   15489 	.db #0x08	; 8
      005A1F 14                   15490 	.db #0x14	; 20
      005A20 63                   15491 	.db #0x63	; 99	'c'
      005A21 03                   15492 	.db #0x03	; 3
      005A22 04                   15493 	.db #0x04	; 4
      005A23 78                   15494 	.db #0x78	; 120	'x'
      005A24 04                   15495 	.db #0x04	; 4
      005A25 03                   15496 	.db #0x03	; 3
      005A26 61                   15497 	.db #0x61	; 97	'a'
      005A27 59                   15498 	.db #0x59	; 89	'Y'
      005A28 49                   15499 	.db #0x49	; 73	'I'
      005A29 4D                   15500 	.db #0x4d	; 77	'M'
      005A2A 43                   15501 	.db #0x43	; 67	'C'
      005A2B 00                   15502 	.db #0x00	; 0
      005A2C 7F                   15503 	.db #0x7f	; 127
      005A2D 41                   15504 	.db #0x41	; 65	'A'
      005A2E 41                   15505 	.db #0x41	; 65	'A'
      005A2F 41                   15506 	.db #0x41	; 65	'A'
      005A30 02                   15507 	.db #0x02	; 2
      005A31 04                   15508 	.db #0x04	; 4
      005A32 08                   15509 	.db #0x08	; 8
      005A33 10                   15510 	.db #0x10	; 16
      005A34 20                   15511 	.db #0x20	; 32
      005A35 00                   15512 	.db #0x00	; 0
      005A36 41                   15513 	.db #0x41	; 65	'A'
      005A37 41                   15514 	.db #0x41	; 65	'A'
      005A38 41                   15515 	.db #0x41	; 65	'A'
      005A39 7F                   15516 	.db #0x7f	; 127
      005A3A 04                   15517 	.db #0x04	; 4
      005A3B 02                   15518 	.db #0x02	; 2
      005A3C 01                   15519 	.db #0x01	; 1
      005A3D 02                   15520 	.db #0x02	; 2
      005A3E 04                   15521 	.db #0x04	; 4
      005A3F 40                   15522 	.db #0x40	; 64
      005A40 40                   15523 	.db #0x40	; 64
      005A41 40                   15524 	.db #0x40	; 64
      005A42 40                   15525 	.db #0x40	; 64
      005A43 40                   15526 	.db #0x40	; 64
      005A44 00                   15527 	.db #0x00	; 0
      005A45 03                   15528 	.db #0x03	; 3
      005A46 07                   15529 	.db #0x07	; 7
      005A47 08                   15530 	.db #0x08	; 8
      005A48 00                   15531 	.db #0x00	; 0
      005A49 20                   15532 	.db #0x20	; 32
      005A4A 54                   15533 	.db #0x54	; 84	'T'
      005A4B 54                   15534 	.db #0x54	; 84	'T'
      005A4C 78                   15535 	.db #0x78	; 120	'x'
      005A4D 40                   15536 	.db #0x40	; 64
      005A4E 7F                   15537 	.db #0x7f	; 127
      005A4F 28                   15538 	.db #0x28	; 40
      005A50 44                   15539 	.db #0x44	; 68	'D'
      005A51 44                   15540 	.db #0x44	; 68	'D'
      005A52 38                   15541 	.db #0x38	; 56	'8'
      005A53 38                   15542 	.db #0x38	; 56	'8'
      005A54 44                   15543 	.db #0x44	; 68	'D'
      005A55 44                   15544 	.db #0x44	; 68	'D'
      005A56 44                   15545 	.db #0x44	; 68	'D'
      005A57 28                   15546 	.db #0x28	; 40
      005A58 38                   15547 	.db #0x38	; 56	'8'
      005A59 44                   15548 	.db #0x44	; 68	'D'
      005A5A 44                   15549 	.db #0x44	; 68	'D'
      005A5B 28                   15550 	.db #0x28	; 40
      005A5C 7F                   15551 	.db #0x7f	; 127
      005A5D 38                   15552 	.db #0x38	; 56	'8'
      005A5E 54                   15553 	.db #0x54	; 84	'T'
      005A5F 54                   15554 	.db #0x54	; 84	'T'
      005A60 54                   15555 	.db #0x54	; 84	'T'
      005A61 18                   15556 	.db #0x18	; 24
      005A62 00                   15557 	.db #0x00	; 0
      005A63 08                   15558 	.db #0x08	; 8
      005A64 7E                   15559 	.db #0x7e	; 126
      005A65 09                   15560 	.db #0x09	; 9
      005A66 02                   15561 	.db #0x02	; 2
      005A67 18                   15562 	.db #0x18	; 24
      005A68 A4                   15563 	.db #0xa4	; 164
      005A69 A4                   15564 	.db #0xa4	; 164
      005A6A 9C                   15565 	.db #0x9c	; 156
      005A6B 78                   15566 	.db #0x78	; 120	'x'
      005A6C 7F                   15567 	.db #0x7f	; 127
      005A6D 08                   15568 	.db #0x08	; 8
      005A6E 04                   15569 	.db #0x04	; 4
      005A6F 04                   15570 	.db #0x04	; 4
      005A70 78                   15571 	.db #0x78	; 120	'x'
      005A71 00                   15572 	.db #0x00	; 0
      005A72 44                   15573 	.db #0x44	; 68	'D'
      005A73 7D                   15574 	.db #0x7d	; 125
      005A74 40                   15575 	.db #0x40	; 64
      005A75 00                   15576 	.db #0x00	; 0
      005A76 20                   15577 	.db #0x20	; 32
      005A77 40                   15578 	.db #0x40	; 64
      005A78 40                   15579 	.db #0x40	; 64
      005A79 3D                   15580 	.db #0x3d	; 61
      005A7A 00                   15581 	.db #0x00	; 0
      005A7B 7F                   15582 	.db #0x7f	; 127
      005A7C 10                   15583 	.db #0x10	; 16
      005A7D 28                   15584 	.db #0x28	; 40
      005A7E 44                   15585 	.db #0x44	; 68	'D'
      005A7F 00                   15586 	.db #0x00	; 0
      005A80 00                   15587 	.db #0x00	; 0
      005A81 41                   15588 	.db #0x41	; 65	'A'
      005A82 7F                   15589 	.db #0x7f	; 127
      005A83 40                   15590 	.db #0x40	; 64
      005A84 00                   15591 	.db #0x00	; 0
      005A85 7C                   15592 	.db #0x7c	; 124
      005A86 04                   15593 	.db #0x04	; 4
      005A87 78                   15594 	.db #0x78	; 120	'x'
      005A88 04                   15595 	.db #0x04	; 4
      005A89 78                   15596 	.db #0x78	; 120	'x'
      005A8A 7C                   15597 	.db #0x7c	; 124
      005A8B 08                   15598 	.db #0x08	; 8
      005A8C 04                   15599 	.db #0x04	; 4
      005A8D 04                   15600 	.db #0x04	; 4
      005A8E 78                   15601 	.db #0x78	; 120	'x'
      005A8F 38                   15602 	.db #0x38	; 56	'8'
      005A90 44                   15603 	.db #0x44	; 68	'D'
      005A91 44                   15604 	.db #0x44	; 68	'D'
      005A92 44                   15605 	.db #0x44	; 68	'D'
      005A93 38                   15606 	.db #0x38	; 56	'8'
      005A94 FC                   15607 	.db #0xfc	; 252
      005A95 18                   15608 	.db #0x18	; 24
      005A96 24                   15609 	.db #0x24	; 36
      005A97 24                   15610 	.db #0x24	; 36
      005A98 18                   15611 	.db #0x18	; 24
      005A99 18                   15612 	.db #0x18	; 24
      005A9A 24                   15613 	.db #0x24	; 36
      005A9B 24                   15614 	.db #0x24	; 36
      005A9C 18                   15615 	.db #0x18	; 24
      005A9D FC                   15616 	.db #0xfc	; 252
      005A9E 7C                   15617 	.db #0x7c	; 124
      005A9F 08                   15618 	.db #0x08	; 8
      005AA0 04                   15619 	.db #0x04	; 4
      005AA1 04                   15620 	.db #0x04	; 4
      005AA2 08                   15621 	.db #0x08	; 8
      005AA3 48                   15622 	.db #0x48	; 72	'H'
      005AA4 54                   15623 	.db #0x54	; 84	'T'
      005AA5 54                   15624 	.db #0x54	; 84	'T'
      005AA6 54                   15625 	.db #0x54	; 84	'T'
      005AA7 24                   15626 	.db #0x24	; 36
      005AA8 04                   15627 	.db #0x04	; 4
      005AA9 04                   15628 	.db #0x04	; 4
      005AAA 3F                   15629 	.db #0x3f	; 63
      005AAB 44                   15630 	.db #0x44	; 68	'D'
      005AAC 24                   15631 	.db #0x24	; 36
      005AAD 3C                   15632 	.db #0x3c	; 60
      005AAE 40                   15633 	.db #0x40	; 64
      005AAF 40                   15634 	.db #0x40	; 64
      005AB0 20                   15635 	.db #0x20	; 32
      005AB1 7C                   15636 	.db #0x7c	; 124
      005AB2 1C                   15637 	.db #0x1c	; 28
      005AB3 20                   15638 	.db #0x20	; 32
      005AB4 40                   15639 	.db #0x40	; 64
      005AB5 20                   15640 	.db #0x20	; 32
      005AB6 1C                   15641 	.db #0x1c	; 28
      005AB7 3C                   15642 	.db #0x3c	; 60
      005AB8 40                   15643 	.db #0x40	; 64
      005AB9 30                   15644 	.db #0x30	; 48	'0'
      005ABA 40                   15645 	.db #0x40	; 64
      005ABB 3C                   15646 	.db #0x3c	; 60
      005ABC 44                   15647 	.db #0x44	; 68	'D'
      005ABD 28                   15648 	.db #0x28	; 40
      005ABE 10                   15649 	.db #0x10	; 16
      005ABF 28                   15650 	.db #0x28	; 40
      005AC0 44                   15651 	.db #0x44	; 68	'D'
      005AC1 4C                   15652 	.db #0x4c	; 76	'L'
      005AC2 90                   15653 	.db #0x90	; 144
      005AC3 90                   15654 	.db #0x90	; 144
      005AC4 90                   15655 	.db #0x90	; 144
      005AC5 7C                   15656 	.db #0x7c	; 124
      005AC6 44                   15657 	.db #0x44	; 68	'D'
      005AC7 64                   15658 	.db #0x64	; 100	'd'
      005AC8 54                   15659 	.db #0x54	; 84	'T'
      005AC9 4C                   15660 	.db #0x4c	; 76	'L'
      005ACA 44                   15661 	.db #0x44	; 68	'D'
      005ACB 00                   15662 	.db #0x00	; 0
      005ACC 08                   15663 	.db #0x08	; 8
      005ACD 36                   15664 	.db #0x36	; 54	'6'
      005ACE 41                   15665 	.db #0x41	; 65	'A'
      005ACF 00                   15666 	.db #0x00	; 0
      005AD0 00                   15667 	.db #0x00	; 0
      005AD1 00                   15668 	.db #0x00	; 0
      005AD2 77                   15669 	.db #0x77	; 119	'w'
      005AD3 00                   15670 	.db #0x00	; 0
      005AD4 00                   15671 	.db #0x00	; 0
      005AD5 00                   15672 	.db #0x00	; 0
      005AD6 41                   15673 	.db #0x41	; 65	'A'
      005AD7 36                   15674 	.db #0x36	; 54	'6'
      005AD8 08                   15675 	.db #0x08	; 8
      005AD9 00                   15676 	.db #0x00	; 0
      005ADA 02                   15677 	.db #0x02	; 2
      005ADB 01                   15678 	.db #0x01	; 1
      005ADC 02                   15679 	.db #0x02	; 2
      005ADD 04                   15680 	.db #0x04	; 4
      005ADE 02                   15681 	.db #0x02	; 2
      005ADF 3C                   15682 	.db #0x3c	; 60
      005AE0 26                   15683 	.db #0x26	; 38
      005AE1 23                   15684 	.db #0x23	; 35
      005AE2 26                   15685 	.db #0x26	; 38
      005AE3 3C                   15686 	.db #0x3c	; 60
      005AE4 1E                   15687 	.db #0x1e	; 30
      005AE5 A1                   15688 	.db #0xa1	; 161
      005AE6 A1                   15689 	.db #0xa1	; 161
      005AE7 61                   15690 	.db #0x61	; 97	'a'
      005AE8 12                   15691 	.db #0x12	; 18
      005AE9 3A                   15692 	.db #0x3a	; 58
      005AEA 40                   15693 	.db #0x40	; 64
      005AEB 40                   15694 	.db #0x40	; 64
      005AEC 20                   15695 	.db #0x20	; 32
      005AED 7A                   15696 	.db #0x7a	; 122	'z'
      005AEE 38                   15697 	.db #0x38	; 56	'8'
      005AEF 54                   15698 	.db #0x54	; 84	'T'
      005AF0 54                   15699 	.db #0x54	; 84	'T'
      005AF1 55                   15700 	.db #0x55	; 85	'U'
      005AF2 59                   15701 	.db #0x59	; 89	'Y'
      005AF3 21                   15702 	.db #0x21	; 33
      005AF4 55                   15703 	.db #0x55	; 85	'U'
      005AF5 55                   15704 	.db #0x55	; 85	'U'
      005AF6 79                   15705 	.db #0x79	; 121	'y'
      005AF7 41                   15706 	.db #0x41	; 65	'A'
      005AF8 22                   15707 	.db #0x22	; 34
      005AF9 54                   15708 	.db #0x54	; 84	'T'
      005AFA 54                   15709 	.db #0x54	; 84	'T'
      005AFB 78                   15710 	.db #0x78	; 120	'x'
      005AFC 42                   15711 	.db #0x42	; 66	'B'
      005AFD 21                   15712 	.db #0x21	; 33
      005AFE 55                   15713 	.db #0x55	; 85	'U'
      005AFF 54                   15714 	.db #0x54	; 84	'T'
      005B00 78                   15715 	.db #0x78	; 120	'x'
      005B01 40                   15716 	.db #0x40	; 64
      005B02 20                   15717 	.db #0x20	; 32
      005B03 54                   15718 	.db #0x54	; 84	'T'
      005B04 55                   15719 	.db #0x55	; 85	'U'
      005B05 79                   15720 	.db #0x79	; 121	'y'
      005B06 40                   15721 	.db #0x40	; 64
      005B07 0C                   15722 	.db #0x0c	; 12
      005B08 1E                   15723 	.db #0x1e	; 30
      005B09 52                   15724 	.db #0x52	; 82	'R'
      005B0A 72                   15725 	.db #0x72	; 114	'r'
      005B0B 12                   15726 	.db #0x12	; 18
      005B0C 39                   15727 	.db #0x39	; 57	'9'
      005B0D 55                   15728 	.db #0x55	; 85	'U'
      005B0E 55                   15729 	.db #0x55	; 85	'U'
      005B0F 55                   15730 	.db #0x55	; 85	'U'
      005B10 59                   15731 	.db #0x59	; 89	'Y'
      005B11 39                   15732 	.db #0x39	; 57	'9'
      005B12 54                   15733 	.db #0x54	; 84	'T'
      005B13 54                   15734 	.db #0x54	; 84	'T'
      005B14 54                   15735 	.db #0x54	; 84	'T'
      005B15 59                   15736 	.db #0x59	; 89	'Y'
      005B16 39                   15737 	.db #0x39	; 57	'9'
      005B17 55                   15738 	.db #0x55	; 85	'U'
      005B18 54                   15739 	.db #0x54	; 84	'T'
      005B19 54                   15740 	.db #0x54	; 84	'T'
      005B1A 58                   15741 	.db #0x58	; 88	'X'
      005B1B 00                   15742 	.db #0x00	; 0
      005B1C 00                   15743 	.db #0x00	; 0
      005B1D 45                   15744 	.db #0x45	; 69	'E'
      005B1E 7C                   15745 	.db #0x7c	; 124
      005B1F 41                   15746 	.db #0x41	; 65	'A'
      005B20 00                   15747 	.db #0x00	; 0
      005B21 02                   15748 	.db #0x02	; 2
      005B22 45                   15749 	.db #0x45	; 69	'E'
      005B23 7D                   15750 	.db #0x7d	; 125
      005B24 42                   15751 	.db #0x42	; 66	'B'
      005B25 00                   15752 	.db #0x00	; 0
      005B26 01                   15753 	.db #0x01	; 1
      005B27 45                   15754 	.db #0x45	; 69	'E'
      005B28 7C                   15755 	.db #0x7c	; 124
      005B29 40                   15756 	.db #0x40	; 64
      005B2A 7D                   15757 	.db #0x7d	; 125
      005B2B 12                   15758 	.db #0x12	; 18
      005B2C 11                   15759 	.db #0x11	; 17
      005B2D 12                   15760 	.db #0x12	; 18
      005B2E 7D                   15761 	.db #0x7d	; 125
      005B2F F0                   15762 	.db #0xf0	; 240
      005B30 28                   15763 	.db #0x28	; 40
      005B31 25                   15764 	.db #0x25	; 37
      005B32 28                   15765 	.db #0x28	; 40
      005B33 F0                   15766 	.db #0xf0	; 240
      005B34 7C                   15767 	.db #0x7c	; 124
      005B35 54                   15768 	.db #0x54	; 84	'T'
      005B36 55                   15769 	.db #0x55	; 85	'U'
      005B37 45                   15770 	.db #0x45	; 69	'E'
      005B38 00                   15771 	.db #0x00	; 0
      005B39 20                   15772 	.db #0x20	; 32
      005B3A 54                   15773 	.db #0x54	; 84	'T'
      005B3B 54                   15774 	.db #0x54	; 84	'T'
      005B3C 7C                   15775 	.db #0x7c	; 124
      005B3D 54                   15776 	.db #0x54	; 84	'T'
      005B3E 7C                   15777 	.db #0x7c	; 124
      005B3F 0A                   15778 	.db #0x0a	; 10
      005B40 09                   15779 	.db #0x09	; 9
      005B41 7F                   15780 	.db #0x7f	; 127
      005B42 49                   15781 	.db #0x49	; 73	'I'
      005B43 32                   15782 	.db #0x32	; 50	'2'
      005B44 49                   15783 	.db #0x49	; 73	'I'
      005B45 49                   15784 	.db #0x49	; 73	'I'
      005B46 49                   15785 	.db #0x49	; 73	'I'
      005B47 32                   15786 	.db #0x32	; 50	'2'
      005B48 3A                   15787 	.db #0x3a	; 58
      005B49 44                   15788 	.db #0x44	; 68	'D'
      005B4A 44                   15789 	.db #0x44	; 68	'D'
      005B4B 44                   15790 	.db #0x44	; 68	'D'
      005B4C 3A                   15791 	.db #0x3a	; 58
      005B4D 32                   15792 	.db #0x32	; 50	'2'
      005B4E 4A                   15793 	.db #0x4a	; 74	'J'
      005B4F 48                   15794 	.db #0x48	; 72	'H'
      005B50 48                   15795 	.db #0x48	; 72	'H'
      005B51 30                   15796 	.db #0x30	; 48	'0'
      005B52 3A                   15797 	.db #0x3a	; 58
      005B53 41                   15798 	.db #0x41	; 65	'A'
      005B54 41                   15799 	.db #0x41	; 65	'A'
      005B55 21                   15800 	.db #0x21	; 33
      005B56 7A                   15801 	.db #0x7a	; 122	'z'
      005B57 3A                   15802 	.db #0x3a	; 58
      005B58 42                   15803 	.db #0x42	; 66	'B'
      005B59 40                   15804 	.db #0x40	; 64
      005B5A 20                   15805 	.db #0x20	; 32
      005B5B 78                   15806 	.db #0x78	; 120	'x'
      005B5C 00                   15807 	.db #0x00	; 0
      005B5D 9D                   15808 	.db #0x9d	; 157
      005B5E A0                   15809 	.db #0xa0	; 160
      005B5F A0                   15810 	.db #0xa0	; 160
      005B60 7D                   15811 	.db #0x7d	; 125
      005B61 3D                   15812 	.db #0x3d	; 61
      005B62 42                   15813 	.db #0x42	; 66	'B'
      005B63 42                   15814 	.db #0x42	; 66	'B'
      005B64 42                   15815 	.db #0x42	; 66	'B'
      005B65 3D                   15816 	.db #0x3d	; 61
      005B66 3D                   15817 	.db #0x3d	; 61
      005B67 40                   15818 	.db #0x40	; 64
      005B68 40                   15819 	.db #0x40	; 64
      005B69 40                   15820 	.db #0x40	; 64
      005B6A 3D                   15821 	.db #0x3d	; 61
      005B6B 3C                   15822 	.db #0x3c	; 60
      005B6C 24                   15823 	.db #0x24	; 36
      005B6D FF                   15824 	.db #0xff	; 255
      005B6E 24                   15825 	.db #0x24	; 36
      005B6F 24                   15826 	.db #0x24	; 36
      005B70 48                   15827 	.db #0x48	; 72	'H'
      005B71 7E                   15828 	.db #0x7e	; 126
      005B72 49                   15829 	.db #0x49	; 73	'I'
      005B73 43                   15830 	.db #0x43	; 67	'C'
      005B74 66                   15831 	.db #0x66	; 102	'f'
      005B75 2B                   15832 	.db #0x2b	; 43
      005B76 2F                   15833 	.db #0x2f	; 47
      005B77 FC                   15834 	.db #0xfc	; 252
      005B78 2F                   15835 	.db #0x2f	; 47
      005B79 2B                   15836 	.db #0x2b	; 43
      005B7A FF                   15837 	.db #0xff	; 255
      005B7B 09                   15838 	.db #0x09	; 9
      005B7C 29                   15839 	.db #0x29	; 41
      005B7D F6                   15840 	.db #0xf6	; 246
      005B7E 20                   15841 	.db #0x20	; 32
      005B7F C0                   15842 	.db #0xc0	; 192
      005B80 88                   15843 	.db #0x88	; 136
      005B81 7E                   15844 	.db #0x7e	; 126
      005B82 09                   15845 	.db #0x09	; 9
      005B83 03                   15846 	.db #0x03	; 3
      005B84 20                   15847 	.db #0x20	; 32
      005B85 54                   15848 	.db #0x54	; 84	'T'
      005B86 54                   15849 	.db #0x54	; 84	'T'
      005B87 79                   15850 	.db #0x79	; 121	'y'
      005B88 41                   15851 	.db #0x41	; 65	'A'
      005B89 00                   15852 	.db #0x00	; 0
      005B8A 00                   15853 	.db #0x00	; 0
      005B8B 44                   15854 	.db #0x44	; 68	'D'
      005B8C 7D                   15855 	.db #0x7d	; 125
      005B8D 41                   15856 	.db #0x41	; 65	'A'
      005B8E 30                   15857 	.db #0x30	; 48	'0'
      005B8F 48                   15858 	.db #0x48	; 72	'H'
      005B90 48                   15859 	.db #0x48	; 72	'H'
      005B91 4A                   15860 	.db #0x4a	; 74	'J'
      005B92 32                   15861 	.db #0x32	; 50	'2'
      005B93 38                   15862 	.db #0x38	; 56	'8'
      005B94 40                   15863 	.db #0x40	; 64
      005B95 40                   15864 	.db #0x40	; 64
      005B96 22                   15865 	.db #0x22	; 34
      005B97 7A                   15866 	.db #0x7a	; 122	'z'
      005B98 00                   15867 	.db #0x00	; 0
      005B99 7A                   15868 	.db #0x7a	; 122	'z'
      005B9A 0A                   15869 	.db #0x0a	; 10
      005B9B 0A                   15870 	.db #0x0a	; 10
      005B9C 72                   15871 	.db #0x72	; 114	'r'
      005B9D 7D                   15872 	.db #0x7d	; 125
      005B9E 0D                   15873 	.db #0x0d	; 13
      005B9F 19                   15874 	.db #0x19	; 25
      005BA0 31                   15875 	.db #0x31	; 49	'1'
      005BA1 7D                   15876 	.db #0x7d	; 125
      005BA2 26                   15877 	.db #0x26	; 38
      005BA3 29                   15878 	.db #0x29	; 41
      005BA4 29                   15879 	.db #0x29	; 41
      005BA5 2F                   15880 	.db #0x2f	; 47
      005BA6 28                   15881 	.db #0x28	; 40
      005BA7 26                   15882 	.db #0x26	; 38
      005BA8 29                   15883 	.db #0x29	; 41
      005BA9 29                   15884 	.db #0x29	; 41
      005BAA 29                   15885 	.db #0x29	; 41
      005BAB 26                   15886 	.db #0x26	; 38
      005BAC 30                   15887 	.db #0x30	; 48	'0'
      005BAD 48                   15888 	.db #0x48	; 72	'H'
      005BAE 4D                   15889 	.db #0x4d	; 77	'M'
      005BAF 40                   15890 	.db #0x40	; 64
      005BB0 20                   15891 	.db #0x20	; 32
      005BB1 38                   15892 	.db #0x38	; 56	'8'
      005BB2 08                   15893 	.db #0x08	; 8
      005BB3 08                   15894 	.db #0x08	; 8
      005BB4 08                   15895 	.db #0x08	; 8
      005BB5 08                   15896 	.db #0x08	; 8
      005BB6 08                   15897 	.db #0x08	; 8
      005BB7 08                   15898 	.db #0x08	; 8
      005BB8 08                   15899 	.db #0x08	; 8
      005BB9 08                   15900 	.db #0x08	; 8
      005BBA 38                   15901 	.db #0x38	; 56	'8'
      005BBB 2F                   15902 	.db #0x2f	; 47
      005BBC 10                   15903 	.db #0x10	; 16
      005BBD C8                   15904 	.db #0xc8	; 200
      005BBE AC                   15905 	.db #0xac	; 172
      005BBF BA                   15906 	.db #0xba	; 186
      005BC0 2F                   15907 	.db #0x2f	; 47
      005BC1 10                   15908 	.db #0x10	; 16
      005BC2 28                   15909 	.db #0x28	; 40
      005BC3 34                   15910 	.db #0x34	; 52	'4'
      005BC4 FA                   15911 	.db #0xfa	; 250
      005BC5 00                   15912 	.db #0x00	; 0
      005BC6 00                   15913 	.db #0x00	; 0
      005BC7 7B                   15914 	.db #0x7b	; 123
      005BC8 00                   15915 	.db #0x00	; 0
      005BC9 00                   15916 	.db #0x00	; 0
      005BCA 08                   15917 	.db #0x08	; 8
      005BCB 14                   15918 	.db #0x14	; 20
      005BCC 2A                   15919 	.db #0x2a	; 42
      005BCD 14                   15920 	.db #0x14	; 20
      005BCE 22                   15921 	.db #0x22	; 34
      005BCF 22                   15922 	.db #0x22	; 34
      005BD0 14                   15923 	.db #0x14	; 20
      005BD1 2A                   15924 	.db #0x2a	; 42
      005BD2 14                   15925 	.db #0x14	; 20
      005BD3 08                   15926 	.db #0x08	; 8
      005BD4 AA                   15927 	.db #0xaa	; 170
      005BD5 00                   15928 	.db #0x00	; 0
      005BD6 55                   15929 	.db #0x55	; 85	'U'
      005BD7 00                   15930 	.db #0x00	; 0
      005BD8 AA                   15931 	.db #0xaa	; 170
      005BD9 AA                   15932 	.db #0xaa	; 170
      005BDA 55                   15933 	.db #0x55	; 85	'U'
      005BDB AA                   15934 	.db #0xaa	; 170
      005BDC 55                   15935 	.db #0x55	; 85	'U'
      005BDD AA                   15936 	.db #0xaa	; 170
      005BDE 00                   15937 	.db #0x00	; 0
      005BDF 00                   15938 	.db #0x00	; 0
      005BE0 00                   15939 	.db #0x00	; 0
      005BE1 FF                   15940 	.db #0xff	; 255
      005BE2 00                   15941 	.db #0x00	; 0
      005BE3 10                   15942 	.db #0x10	; 16
      005BE4 10                   15943 	.db #0x10	; 16
      005BE5 10                   15944 	.db #0x10	; 16
      005BE6 FF                   15945 	.db #0xff	; 255
      005BE7 00                   15946 	.db #0x00	; 0
      005BE8 14                   15947 	.db #0x14	; 20
      005BE9 14                   15948 	.db #0x14	; 20
      005BEA 14                   15949 	.db #0x14	; 20
      005BEB FF                   15950 	.db #0xff	; 255
      005BEC 00                   15951 	.db #0x00	; 0
      005BED 10                   15952 	.db #0x10	; 16
      005BEE 10                   15953 	.db #0x10	; 16
      005BEF FF                   15954 	.db #0xff	; 255
      005BF0 00                   15955 	.db #0x00	; 0
      005BF1 FF                   15956 	.db #0xff	; 255
      005BF2 10                   15957 	.db #0x10	; 16
      005BF3 10                   15958 	.db #0x10	; 16
      005BF4 F0                   15959 	.db #0xf0	; 240
      005BF5 10                   15960 	.db #0x10	; 16
      005BF6 F0                   15961 	.db #0xf0	; 240
      005BF7 14                   15962 	.db #0x14	; 20
      005BF8 14                   15963 	.db #0x14	; 20
      005BF9 14                   15964 	.db #0x14	; 20
      005BFA FC                   15965 	.db #0xfc	; 252
      005BFB 00                   15966 	.db #0x00	; 0
      005BFC 14                   15967 	.db #0x14	; 20
      005BFD 14                   15968 	.db #0x14	; 20
      005BFE F7                   15969 	.db #0xf7	; 247
      005BFF 00                   15970 	.db #0x00	; 0
      005C00 FF                   15971 	.db #0xff	; 255
      005C01 00                   15972 	.db #0x00	; 0
      005C02 00                   15973 	.db #0x00	; 0
      005C03 FF                   15974 	.db #0xff	; 255
      005C04 00                   15975 	.db #0x00	; 0
      005C05 FF                   15976 	.db #0xff	; 255
      005C06 14                   15977 	.db #0x14	; 20
      005C07 14                   15978 	.db #0x14	; 20
      005C08 F4                   15979 	.db #0xf4	; 244
      005C09 04                   15980 	.db #0x04	; 4
      005C0A FC                   15981 	.db #0xfc	; 252
      005C0B 14                   15982 	.db #0x14	; 20
      005C0C 14                   15983 	.db #0x14	; 20
      005C0D 17                   15984 	.db #0x17	; 23
      005C0E 10                   15985 	.db #0x10	; 16
      005C0F 1F                   15986 	.db #0x1f	; 31
      005C10 10                   15987 	.db #0x10	; 16
      005C11 10                   15988 	.db #0x10	; 16
      005C12 1F                   15989 	.db #0x1f	; 31
      005C13 10                   15990 	.db #0x10	; 16
      005C14 1F                   15991 	.db #0x1f	; 31
      005C15 14                   15992 	.db #0x14	; 20
      005C16 14                   15993 	.db #0x14	; 20
      005C17 14                   15994 	.db #0x14	; 20
      005C18 1F                   15995 	.db #0x1f	; 31
      005C19 00                   15996 	.db #0x00	; 0
      005C1A 10                   15997 	.db #0x10	; 16
      005C1B 10                   15998 	.db #0x10	; 16
      005C1C 10                   15999 	.db #0x10	; 16
      005C1D F0                   16000 	.db #0xf0	; 240
      005C1E 00                   16001 	.db #0x00	; 0
      005C1F 00                   16002 	.db #0x00	; 0
      005C20 00                   16003 	.db #0x00	; 0
      005C21 00                   16004 	.db #0x00	; 0
      005C22 1F                   16005 	.db #0x1f	; 31
      005C23 10                   16006 	.db #0x10	; 16
      005C24 10                   16007 	.db #0x10	; 16
      005C25 10                   16008 	.db #0x10	; 16
      005C26 10                   16009 	.db #0x10	; 16
      005C27 1F                   16010 	.db #0x1f	; 31
      005C28 10                   16011 	.db #0x10	; 16
      005C29 10                   16012 	.db #0x10	; 16
      005C2A 10                   16013 	.db #0x10	; 16
      005C2B 10                   16014 	.db #0x10	; 16
      005C2C F0                   16015 	.db #0xf0	; 240
      005C2D 10                   16016 	.db #0x10	; 16
      005C2E 00                   16017 	.db #0x00	; 0
      005C2F 00                   16018 	.db #0x00	; 0
      005C30 00                   16019 	.db #0x00	; 0
      005C31 FF                   16020 	.db #0xff	; 255
      005C32 10                   16021 	.db #0x10	; 16
      005C33 10                   16022 	.db #0x10	; 16
      005C34 10                   16023 	.db #0x10	; 16
      005C35 10                   16024 	.db #0x10	; 16
      005C36 10                   16025 	.db #0x10	; 16
      005C37 10                   16026 	.db #0x10	; 16
      005C38 10                   16027 	.db #0x10	; 16
      005C39 10                   16028 	.db #0x10	; 16
      005C3A 10                   16029 	.db #0x10	; 16
      005C3B FF                   16030 	.db #0xff	; 255
      005C3C 10                   16031 	.db #0x10	; 16
      005C3D 00                   16032 	.db #0x00	; 0
      005C3E 00                   16033 	.db #0x00	; 0
      005C3F 00                   16034 	.db #0x00	; 0
      005C40 FF                   16035 	.db #0xff	; 255
      005C41 14                   16036 	.db #0x14	; 20
      005C42 00                   16037 	.db #0x00	; 0
      005C43 00                   16038 	.db #0x00	; 0
      005C44 FF                   16039 	.db #0xff	; 255
      005C45 00                   16040 	.db #0x00	; 0
      005C46 FF                   16041 	.db #0xff	; 255
      005C47 00                   16042 	.db #0x00	; 0
      005C48 00                   16043 	.db #0x00	; 0
      005C49 1F                   16044 	.db #0x1f	; 31
      005C4A 10                   16045 	.db #0x10	; 16
      005C4B 17                   16046 	.db #0x17	; 23
      005C4C 00                   16047 	.db #0x00	; 0
      005C4D 00                   16048 	.db #0x00	; 0
      005C4E FC                   16049 	.db #0xfc	; 252
      005C4F 04                   16050 	.db #0x04	; 4
      005C50 F4                   16051 	.db #0xf4	; 244
      005C51 14                   16052 	.db #0x14	; 20
      005C52 14                   16053 	.db #0x14	; 20
      005C53 17                   16054 	.db #0x17	; 23
      005C54 10                   16055 	.db #0x10	; 16
      005C55 17                   16056 	.db #0x17	; 23
      005C56 14                   16057 	.db #0x14	; 20
      005C57 14                   16058 	.db #0x14	; 20
      005C58 F4                   16059 	.db #0xf4	; 244
      005C59 04                   16060 	.db #0x04	; 4
      005C5A F4                   16061 	.db #0xf4	; 244
      005C5B 00                   16062 	.db #0x00	; 0
      005C5C 00                   16063 	.db #0x00	; 0
      005C5D FF                   16064 	.db #0xff	; 255
      005C5E 00                   16065 	.db #0x00	; 0
      005C5F F7                   16066 	.db #0xf7	; 247
      005C60 14                   16067 	.db #0x14	; 20
      005C61 14                   16068 	.db #0x14	; 20
      005C62 14                   16069 	.db #0x14	; 20
      005C63 14                   16070 	.db #0x14	; 20
      005C64 14                   16071 	.db #0x14	; 20
      005C65 14                   16072 	.db #0x14	; 20
      005C66 14                   16073 	.db #0x14	; 20
      005C67 F7                   16074 	.db #0xf7	; 247
      005C68 00                   16075 	.db #0x00	; 0
      005C69 F7                   16076 	.db #0xf7	; 247
      005C6A 14                   16077 	.db #0x14	; 20
      005C6B 14                   16078 	.db #0x14	; 20
      005C6C 14                   16079 	.db #0x14	; 20
      005C6D 17                   16080 	.db #0x17	; 23
      005C6E 14                   16081 	.db #0x14	; 20
      005C6F 10                   16082 	.db #0x10	; 16
      005C70 10                   16083 	.db #0x10	; 16
      005C71 1F                   16084 	.db #0x1f	; 31
      005C72 10                   16085 	.db #0x10	; 16
      005C73 1F                   16086 	.db #0x1f	; 31
      005C74 14                   16087 	.db #0x14	; 20
      005C75 14                   16088 	.db #0x14	; 20
      005C76 14                   16089 	.db #0x14	; 20
      005C77 F4                   16090 	.db #0xf4	; 244
      005C78 14                   16091 	.db #0x14	; 20
      005C79 10                   16092 	.db #0x10	; 16
      005C7A 10                   16093 	.db #0x10	; 16
      005C7B F0                   16094 	.db #0xf0	; 240
      005C7C 10                   16095 	.db #0x10	; 16
      005C7D F0                   16096 	.db #0xf0	; 240
      005C7E 00                   16097 	.db #0x00	; 0
      005C7F 00                   16098 	.db #0x00	; 0
      005C80 1F                   16099 	.db #0x1f	; 31
      005C81 10                   16100 	.db #0x10	; 16
      005C82 1F                   16101 	.db #0x1f	; 31
      005C83 00                   16102 	.db #0x00	; 0
      005C84 00                   16103 	.db #0x00	; 0
      005C85 00                   16104 	.db #0x00	; 0
      005C86 1F                   16105 	.db #0x1f	; 31
      005C87 14                   16106 	.db #0x14	; 20
      005C88 00                   16107 	.db #0x00	; 0
      005C89 00                   16108 	.db #0x00	; 0
      005C8A 00                   16109 	.db #0x00	; 0
      005C8B FC                   16110 	.db #0xfc	; 252
      005C8C 14                   16111 	.db #0x14	; 20
      005C8D 00                   16112 	.db #0x00	; 0
      005C8E 00                   16113 	.db #0x00	; 0
      005C8F F0                   16114 	.db #0xf0	; 240
      005C90 10                   16115 	.db #0x10	; 16
      005C91 F0                   16116 	.db #0xf0	; 240
      005C92 10                   16117 	.db #0x10	; 16
      005C93 10                   16118 	.db #0x10	; 16
      005C94 FF                   16119 	.db #0xff	; 255
      005C95 10                   16120 	.db #0x10	; 16
      005C96 FF                   16121 	.db #0xff	; 255
      005C97 14                   16122 	.db #0x14	; 20
      005C98 14                   16123 	.db #0x14	; 20
      005C99 14                   16124 	.db #0x14	; 20
      005C9A FF                   16125 	.db #0xff	; 255
      005C9B 14                   16126 	.db #0x14	; 20
      005C9C 10                   16127 	.db #0x10	; 16
      005C9D 10                   16128 	.db #0x10	; 16
      005C9E 10                   16129 	.db #0x10	; 16
      005C9F 1F                   16130 	.db #0x1f	; 31
      005CA0 00                   16131 	.db #0x00	; 0
      005CA1 00                   16132 	.db #0x00	; 0
      005CA2 00                   16133 	.db #0x00	; 0
      005CA3 00                   16134 	.db #0x00	; 0
      005CA4 F0                   16135 	.db #0xf0	; 240
      005CA5 10                   16136 	.db #0x10	; 16
      005CA6 FF                   16137 	.db #0xff	; 255
      005CA7 FF                   16138 	.db #0xff	; 255
      005CA8 FF                   16139 	.db #0xff	; 255
      005CA9 FF                   16140 	.db #0xff	; 255
      005CAA FF                   16141 	.db #0xff	; 255
      005CAB F0                   16142 	.db #0xf0	; 240
      005CAC F0                   16143 	.db #0xf0	; 240
      005CAD F0                   16144 	.db #0xf0	; 240
      005CAE F0                   16145 	.db #0xf0	; 240
      005CAF F0                   16146 	.db #0xf0	; 240
      005CB0 FF                   16147 	.db #0xff	; 255
      005CB1 FF                   16148 	.db #0xff	; 255
      005CB2 FF                   16149 	.db #0xff	; 255
      005CB3 00                   16150 	.db #0x00	; 0
      005CB4 00                   16151 	.db #0x00	; 0
      005CB5 00                   16152 	.db #0x00	; 0
      005CB6 00                   16153 	.db #0x00	; 0
      005CB7 00                   16154 	.db #0x00	; 0
      005CB8 FF                   16155 	.db #0xff	; 255
      005CB9 FF                   16156 	.db #0xff	; 255
      005CBA 0F                   16157 	.db #0x0f	; 15
      005CBB 0F                   16158 	.db #0x0f	; 15
      005CBC 0F                   16159 	.db #0x0f	; 15
      005CBD 0F                   16160 	.db #0x0f	; 15
      005CBE 0F                   16161 	.db #0x0f	; 15
      005CBF 38                   16162 	.db #0x38	; 56	'8'
      005CC0 44                   16163 	.db #0x44	; 68	'D'
      005CC1 44                   16164 	.db #0x44	; 68	'D'
      005CC2 38                   16165 	.db #0x38	; 56	'8'
      005CC3 44                   16166 	.db #0x44	; 68	'D'
      005CC4 FC                   16167 	.db #0xfc	; 252
      005CC5 4A                   16168 	.db #0x4a	; 74	'J'
      005CC6 4A                   16169 	.db #0x4a	; 74	'J'
      005CC7 4A                   16170 	.db #0x4a	; 74	'J'
      005CC8 34                   16171 	.db #0x34	; 52	'4'
      005CC9 7E                   16172 	.db #0x7e	; 126
      005CCA 02                   16173 	.db #0x02	; 2
      005CCB 02                   16174 	.db #0x02	; 2
      005CCC 06                   16175 	.db #0x06	; 6
      005CCD 06                   16176 	.db #0x06	; 6
      005CCE 02                   16177 	.db #0x02	; 2
      005CCF 7E                   16178 	.db #0x7e	; 126
      005CD0 02                   16179 	.db #0x02	; 2
      005CD1 7E                   16180 	.db #0x7e	; 126
      005CD2 02                   16181 	.db #0x02	; 2
      005CD3 63                   16182 	.db #0x63	; 99	'c'
      005CD4 55                   16183 	.db #0x55	; 85	'U'
      005CD5 49                   16184 	.db #0x49	; 73	'I'
      005CD6 41                   16185 	.db #0x41	; 65	'A'
      005CD7 63                   16186 	.db #0x63	; 99	'c'
      005CD8 38                   16187 	.db #0x38	; 56	'8'
      005CD9 44                   16188 	.db #0x44	; 68	'D'
      005CDA 44                   16189 	.db #0x44	; 68	'D'
      005CDB 3C                   16190 	.db #0x3c	; 60
      005CDC 04                   16191 	.db #0x04	; 4
      005CDD 40                   16192 	.db #0x40	; 64
      005CDE 7E                   16193 	.db #0x7e	; 126
      005CDF 20                   16194 	.db #0x20	; 32
      005CE0 1E                   16195 	.db #0x1e	; 30
      005CE1 20                   16196 	.db #0x20	; 32
      005CE2 06                   16197 	.db #0x06	; 6
      005CE3 02                   16198 	.db #0x02	; 2
      005CE4 7E                   16199 	.db #0x7e	; 126
      005CE5 02                   16200 	.db #0x02	; 2
      005CE6 02                   16201 	.db #0x02	; 2
      005CE7 99                   16202 	.db #0x99	; 153
      005CE8 A5                   16203 	.db #0xa5	; 165
      005CE9 E7                   16204 	.db #0xe7	; 231
      005CEA A5                   16205 	.db #0xa5	; 165
      005CEB 99                   16206 	.db #0x99	; 153
      005CEC 1C                   16207 	.db #0x1c	; 28
      005CED 2A                   16208 	.db #0x2a	; 42
      005CEE 49                   16209 	.db #0x49	; 73	'I'
      005CEF 2A                   16210 	.db #0x2a	; 42
      005CF0 1C                   16211 	.db #0x1c	; 28
      005CF1 4C                   16212 	.db #0x4c	; 76	'L'
      005CF2 72                   16213 	.db #0x72	; 114	'r'
      005CF3 01                   16214 	.db #0x01	; 1
      005CF4 72                   16215 	.db #0x72	; 114	'r'
      005CF5 4C                   16216 	.db #0x4c	; 76	'L'
      005CF6 30                   16217 	.db #0x30	; 48	'0'
      005CF7 4A                   16218 	.db #0x4a	; 74	'J'
      005CF8 4D                   16219 	.db #0x4d	; 77	'M'
      005CF9 4D                   16220 	.db #0x4d	; 77	'M'
      005CFA 30                   16221 	.db #0x30	; 48	'0'
      005CFB 30                   16222 	.db #0x30	; 48	'0'
      005CFC 48                   16223 	.db #0x48	; 72	'H'
      005CFD 78                   16224 	.db #0x78	; 120	'x'
      005CFE 48                   16225 	.db #0x48	; 72	'H'
      005CFF 30                   16226 	.db #0x30	; 48	'0'
      005D00 BC                   16227 	.db #0xbc	; 188
      005D01 62                   16228 	.db #0x62	; 98	'b'
      005D02 5A                   16229 	.db #0x5a	; 90	'Z'
      005D03 46                   16230 	.db #0x46	; 70	'F'
      005D04 3D                   16231 	.db #0x3d	; 61
      005D05 3E                   16232 	.db #0x3e	; 62
      005D06 49                   16233 	.db #0x49	; 73	'I'
      005D07 49                   16234 	.db #0x49	; 73	'I'
      005D08 49                   16235 	.db #0x49	; 73	'I'
      005D09 00                   16236 	.db #0x00	; 0
      005D0A 7E                   16237 	.db #0x7e	; 126
      005D0B 01                   16238 	.db #0x01	; 1
      005D0C 01                   16239 	.db #0x01	; 1
      005D0D 01                   16240 	.db #0x01	; 1
      005D0E 7E                   16241 	.db #0x7e	; 126
      005D0F 2A                   16242 	.db #0x2a	; 42
      005D10 2A                   16243 	.db #0x2a	; 42
      005D11 2A                   16244 	.db #0x2a	; 42
      005D12 2A                   16245 	.db #0x2a	; 42
      005D13 2A                   16246 	.db #0x2a	; 42
      005D14 44                   16247 	.db #0x44	; 68	'D'
      005D15 44                   16248 	.db #0x44	; 68	'D'
      005D16 5F                   16249 	.db #0x5f	; 95
      005D17 44                   16250 	.db #0x44	; 68	'D'
      005D18 44                   16251 	.db #0x44	; 68	'D'
      005D19 40                   16252 	.db #0x40	; 64
      005D1A 51                   16253 	.db #0x51	; 81	'Q'
      005D1B 4A                   16254 	.db #0x4a	; 74	'J'
      005D1C 44                   16255 	.db #0x44	; 68	'D'
      005D1D 40                   16256 	.db #0x40	; 64
      005D1E 40                   16257 	.db #0x40	; 64
      005D1F 44                   16258 	.db #0x44	; 68	'D'
      005D20 4A                   16259 	.db #0x4a	; 74	'J'
      005D21 51                   16260 	.db #0x51	; 81	'Q'
      005D22 40                   16261 	.db #0x40	; 64
      005D23 00                   16262 	.db #0x00	; 0
      005D24 00                   16263 	.db #0x00	; 0
      005D25 FF                   16264 	.db #0xff	; 255
      005D26 01                   16265 	.db #0x01	; 1
      005D27 03                   16266 	.db #0x03	; 3
      005D28 E0                   16267 	.db #0xe0	; 224
      005D29 80                   16268 	.db #0x80	; 128
      005D2A FF                   16269 	.db #0xff	; 255
      005D2B 00                   16270 	.db #0x00	; 0
      005D2C 00                   16271 	.db #0x00	; 0
      005D2D 08                   16272 	.db #0x08	; 8
      005D2E 08                   16273 	.db #0x08	; 8
      005D2F 6B                   16274 	.db #0x6b	; 107	'k'
      005D30 6B                   16275 	.db #0x6b	; 107	'k'
      005D31 08                   16276 	.db #0x08	; 8
      005D32 36                   16277 	.db #0x36	; 54	'6'
      005D33 12                   16278 	.db #0x12	; 18
      005D34 36                   16279 	.db #0x36	; 54	'6'
      005D35 24                   16280 	.db #0x24	; 36
      005D36 36                   16281 	.db #0x36	; 54	'6'
      005D37 06                   16282 	.db #0x06	; 6
      005D38 0F                   16283 	.db #0x0f	; 15
      005D39 09                   16284 	.db #0x09	; 9
      005D3A 0F                   16285 	.db #0x0f	; 15
      005D3B 06                   16286 	.db #0x06	; 6
      005D3C 00                   16287 	.db #0x00	; 0
      005D3D 00                   16288 	.db #0x00	; 0
      005D3E 18                   16289 	.db #0x18	; 24
      005D3F 18                   16290 	.db #0x18	; 24
      005D40 00                   16291 	.db #0x00	; 0
      005D41 00                   16292 	.db #0x00	; 0
      005D42 00                   16293 	.db #0x00	; 0
      005D43 10                   16294 	.db #0x10	; 16
      005D44 10                   16295 	.db #0x10	; 16
      005D45 00                   16296 	.db #0x00	; 0
      005D46 30                   16297 	.db #0x30	; 48	'0'
      005D47 40                   16298 	.db #0x40	; 64
      005D48 FF                   16299 	.db #0xff	; 255
      005D49 01                   16300 	.db #0x01	; 1
      005D4A 01                   16301 	.db #0x01	; 1
      005D4B 00                   16302 	.db #0x00	; 0
      005D4C 1F                   16303 	.db #0x1f	; 31
      005D4D 01                   16304 	.db #0x01	; 1
      005D4E 01                   16305 	.db #0x01	; 1
      005D4F 1E                   16306 	.db #0x1e	; 30
      005D50 00                   16307 	.db #0x00	; 0
      005D51 19                   16308 	.db #0x19	; 25
      005D52 1D                   16309 	.db #0x1d	; 29
      005D53 17                   16310 	.db #0x17	; 23
      005D54 12                   16311 	.db #0x12	; 18
      005D55 00                   16312 	.db #0x00	; 0
      005D56 3C                   16313 	.db #0x3c	; 60
      005D57 3C                   16314 	.db #0x3c	; 60
      005D58 3C                   16315 	.db #0x3c	; 60
      005D59 3C                   16316 	.db #0x3c	; 60
      005D5A 00                   16317 	.db #0x00	; 0
      005D5B 00                   16318 	.db #0x00	; 0
      005D5C 00                   16319 	.db #0x00	; 0
      005D5D 00                   16320 	.db #0x00	; 0
      005D5E 00                   16321 	.db #0x00	; 0
      005D5F                      16322 _keypad:
      005D5F 31                   16323 	.db #0x31	; 49	'1'
      005D60 34                   16324 	.db #0x34	; 52	'4'
      005D61 37                   16325 	.db #0x37	; 55	'7'
      005D62 46                   16326 	.db #0x46	; 70	'F'
      005D63 32                   16327 	.db #0x32	; 50	'2'
      005D64 35                   16328 	.db #0x35	; 53	'5'
      005D65 38                   16329 	.db #0x38	; 56	'8'
      005D66 30                   16330 	.db #0x30	; 48	'0'
      005D67 33                   16331 	.db #0x33	; 51	'3'
      005D68 36                   16332 	.db #0x36	; 54	'6'
      005D69 39                   16333 	.db #0x39	; 57	'9'
      005D6A 45                   16334 	.db #0x45	; 69	'E'
      005D6B 41                   16335 	.db #0x41	; 65	'A'
      005D6C 42                   16336 	.db #0x42	; 66	'B'
      005D6D 43                   16337 	.db #0x43	; 67	'C'
      005D6E 44                   16338 	.db #0x44	; 68	'D'
                                  16339 	.area CONST   (CODE)
      005D6F                      16340 ___str_0:
      005D6F 45 52 52 4F 52 20 46 16341 	.ascii "ERROR FOUND At: "
             4F 55 4E 44 20 41 74
             3A 20
      005D7F 00                   16342 	.db 0x00
                                  16343 	.area CSEG    (CODE)
                                  16344 	.area CONST   (CODE)
      005D80                      16345 ___str_1:
      005D80 46 72 65 65 20 54 79 16346 	.ascii "Free Type: "
             70 65 3A 20
      005D8B 0A                   16347 	.db 0x0a
      005D8C 00                   16348 	.db 0x00
                                  16349 	.area CSEG    (CODE)
                                  16350 	.area CONST   (CODE)
      005D8D                      16351 ___str_2:
      005D8D 30 78                16352 	.ascii "0x"
      005D8F 00                   16353 	.db 0x00
                                  16354 	.area CSEG    (CODE)
                                  16355 	.area CONST   (CODE)
      005D90                      16356 ___str_3:
      005D90 57 65 6C 63 6F 6D 65 16357 	.ascii "Welcome"
      005D97 0A                   16358 	.db 0x0a
      005D98 00                   16359 	.db 0x00
                                  16360 	.area CSEG    (CODE)
                                  16361 	.area CONST   (CODE)
      005D99                      16362 ___str_4:
      005D99 0A                   16363 	.db 0x0a
      005D9A 20 54 79 6C 65 72 20 16364 	.ascii " Tyler Zoucha"
             5A 6F 75 63 68 61
      005DA7 0A                   16365 	.db 0x0a
      005DA8 20 20 45 43 45 4E 2D 16366 	.ascii "  ECEN-4350"
             34 33 35 30
      005DB3 0A                   16367 	.db 0x0a
      005DB4 20 20 46 61 6C 6C 20 16368 	.ascii "  Fall 2021"
             32 30 32 31
      005DBF 00                   16369 	.db 0x00
                                  16370 	.area CSEG    (CODE)
                                  16371 	.area CONST   (CODE)
      005DC0                      16372 ___str_5:
      005DC0 3C 4D 65 6E 75 3E    16373 	.ascii "<Menu>"
      005DC6 0A                   16374 	.db 0x0a
      005DC7 00                   16375 	.db 0x00
                                  16376 	.area CSEG    (CODE)
                                  16377 	.area CONST   (CODE)
      005DC8                      16378 ___str_6:
      005DC8 20 3C 44 3E          16379 	.ascii " <D>"
      005DCC 00                   16380 	.db 0x00
                                  16381 	.area CSEG    (CODE)
                                  16382 	.area CONST   (CODE)
      005DCD                      16383 ___str_7:
      005DCD 20 44 55 4D 50       16384 	.ascii " DUMP"
      005DD2 0A                   16385 	.db 0x0a
      005DD3 00                   16386 	.db 0x00
                                  16387 	.area CSEG    (CODE)
                                  16388 	.area CONST   (CODE)
      005DD4                      16389 ___str_8:
      005DD4 20 3C 42 3E          16390 	.ascii " <B>"
      005DD8 00                   16391 	.db 0x00
                                  16392 	.area CSEG    (CODE)
                                  16393 	.area CONST   (CODE)
      005DD9                      16394 ___str_9:
      005DD9 20 4D 4F 56 45       16395 	.ascii " MOVE"
      005DDE 0A                   16396 	.db 0x0a
      005DDF 00                   16397 	.db 0x00
                                  16398 	.area CSEG    (CODE)
                                  16399 	.area CONST   (CODE)
      005DE0                      16400 ___str_10:
      005DE0 20 3C 45 3E          16401 	.ascii " <E>"
      005DE4 00                   16402 	.db 0x00
                                  16403 	.area CSEG    (CODE)
                                  16404 	.area CONST   (CODE)
      005DE5                      16405 ___str_11:
      005DE5 20 45 44 49 54       16406 	.ascii " EDIT"
      005DEA 0A                   16407 	.db 0x0a
      005DEB 00                   16408 	.db 0x00
                                  16409 	.area CSEG    (CODE)
                                  16410 	.area CONST   (CODE)
      005DEC                      16411 ___str_12:
      005DEC 20 3C 46 3E          16412 	.ascii " <F>"
      005DF0 00                   16413 	.db 0x00
                                  16414 	.area CSEG    (CODE)
                                  16415 	.area CONST   (CODE)
      005DF1                      16416 ___str_13:
      005DF1 20 46 49 4E 44       16417 	.ascii " FIND"
      005DF6 0A                   16418 	.db 0x0a
      005DF7 00                   16419 	.db 0x00
                                  16420 	.area CSEG    (CODE)
                                  16421 	.area CONST   (CODE)
      005DF8                      16422 ___str_14:
      005DF8 20 3C 43 3E          16423 	.ascii " <C>"
      005DFC 00                   16424 	.db 0x00
                                  16425 	.area CSEG    (CODE)
                                  16426 	.area CONST   (CODE)
      005DFD                      16427 ___str_15:
      005DFD 20 43 4F 55 4E 54    16428 	.ascii " COUNT"
      005E03 0A                   16429 	.db 0x0a
      005E04 00                   16430 	.db 0x00
                                  16431 	.area CSEG    (CODE)
                                  16432 	.area CONST   (CODE)
      005E05                      16433 ___str_16:
      005E05 20 3C 41 3E          16434 	.ascii " <A>"
      005E09 00                   16435 	.db 0x00
                                  16436 	.area CSEG    (CODE)
                                  16437 	.area CONST   (CODE)
      005E0A                      16438 ___str_17:
      005E0A 20 4D 45 4D 20 43 48 16439 	.ascii " MEM CHECK"
             45 43 4B
      005E14 0A                   16440 	.db 0x0a
      005E15 00                   16441 	.db 0x00
                                  16442 	.area CSEG    (CODE)
                                  16443 	.area CONST   (CODE)
      005E16                      16444 ___str_18:
      005E16 20 3C 31 3E          16445 	.ascii " <1>"
      005E1A 00                   16446 	.db 0x00
                                  16447 	.area CSEG    (CODE)
                                  16448 	.area CONST   (CODE)
      005E1B                      16449 ___str_19:
      005E1B 20 55 41 52 54       16450 	.ascii " UART"
      005E20 00                   16451 	.db 0x00
                                  16452 	.area CSEG    (CODE)
                                  16453 	.area CONST   (CODE)
      005E21                      16454 ___str_20:
      005E21 20 5B 44 69 73 61 62 16455 	.ascii " [Disabled]"
             6C 65 64 5D
      005E2C 0A                   16456 	.db 0x0a
      005E2D 00                   16457 	.db 0x00
                                  16458 	.area CSEG    (CODE)
                                  16459 	.area CONST   (CODE)
      005E2E                      16460 ___str_21:
      005E2E 20 5B 45 6E 61 62 6C 16461 	.ascii " [Enabled]"
             65 64 5D
      005E38 0A                   16462 	.db 0x0a
      005E39 00                   16463 	.db 0x00
                                  16464 	.area CSEG    (CODE)
                                  16465 	.area CONST   (CODE)
      005E3A                      16466 ___str_22:
      005E3A 5B 44 55 4D 50 5D    16467 	.ascii "[DUMP]"
      005E40 0A                   16468 	.db 0x0a
      005E41 00                   16469 	.db 0x00
                                  16470 	.area CSEG    (CODE)
                                  16471 	.area CONST   (CODE)
      005E42                      16472 ___str_23:
      005E42 20 41 64 64 72 65 73 16473 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      005E54 0A                   16474 	.db 0x0a
      005E55 00                   16475 	.db 0x00
                                  16476 	.area CSEG    (CODE)
                                  16477 	.area CONST   (CODE)
      005E56                      16478 ___str_24:
      005E56 20 30 78 5F 5F 5F 5F 16479 	.ascii " 0x____"
      005E5D 00                   16480 	.db 0x00
                                  16481 	.area CSEG    (CODE)
                                  16482 	.area CONST   (CODE)
      005E5E                      16483 ___str_25:
      005E5E 20 43 68 6F 6F 73 65 16484 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      005E71 0A                   16485 	.db 0x0a
      005E72 00                   16486 	.db 0x00
                                  16487 	.area CSEG    (CODE)
                                  16488 	.area CONST   (CODE)
      005E73                      16489 ___str_26:
      005E73 20 20 3C 31 3E 20 42 16490 	.ascii "  <1> BYTE"
             59 54 45
      005E7D 0A                   16491 	.db 0x0a
      005E7E 20 20 3C 32 3E 20 57 16492 	.ascii "  <2> WORD"
             4F 52 44
      005E88 0A                   16493 	.db 0x0a
      005E89 20 20 3C 34 3E 20 44 16494 	.ascii "  <4> DWORD"
             57 4F 52 44
      005E94 00                   16495 	.db 0x00
                                  16496 	.area CSEG    (CODE)
                                  16497 	.area CONST   (CODE)
      005E95                      16498 ___str_27:
      005E95 20 49 6E 70 75 74 20 16499 	.ascii " Input Size:"
             53 69 7A 65 3A
      005EA1 00                   16500 	.db 0x00
                                  16501 	.area CSEG    (CODE)
                                  16502 	.area CONST   (CODE)
      005EA2                      16503 ___str_28:
      005EA2 20 5F                16504 	.ascii " _"
      005EA4 00                   16505 	.db 0x00
                                  16506 	.area CSEG    (CODE)
                                  16507 	.area CONST   (CODE)
      005EA5                      16508 ___str_29:
      005EA5 20 41 64 64 72 65 73 16509 	.ascii " Address Location:"
             73 20 4C 6F 63 61 74
             69 6F 6E 3A
      005EB7 00                   16510 	.db 0x00
                                  16511 	.area CSEG    (CODE)
                                  16512 	.area CONST   (CODE)
      005EB8                      16513 ___str_30:
      005EB8 20                   16514 	.ascii " "
      005EB9 00                   16515 	.db 0x00
                                  16516 	.area CSEG    (CODE)
                                  16517 	.area CONST   (CODE)
      005EBA                      16518 ___str_31:
      005EBA 20 43 68 6F 6F 73 65 16519 	.ascii " Choose Block Type:"
             20 42 6C 6F 63 6B 20
             54 79 70 65 3A
      005ECD 00                   16520 	.db 0x00
                                  16521 	.area CSEG    (CODE)
                                  16522 	.area CONST   (CODE)
      005ECE                      16523 ___str_32:
      005ECE 0A                   16524 	.db 0x0a
      005ECF 0A                   16525 	.db 0x0a
      005ED0 00                   16526 	.db 0x00
                                  16527 	.area CSEG    (CODE)
                                  16528 	.area CONST   (CODE)
      005ED1                      16529 ___str_33:
      005ED1 20 20                16530 	.ascii "  "
      005ED3 00                   16531 	.db 0x00
                                  16532 	.area CSEG    (CODE)
                                  16533 	.area CONST   (CODE)
      005ED4                      16534 ___str_34:
      005ED4 3C 31 3E 20 42 59 54 16535 	.ascii "<1> BYTE"
             45
      005EDC 0A                   16536 	.db 0x0a
      005EDD 00                   16537 	.db 0x00
                                  16538 	.area CSEG    (CODE)
                                  16539 	.area CONST   (CODE)
      005EDE                      16540 ___str_35:
      005EDE 0A                   16541 	.db 0x0a
      005EDF 0A                   16542 	.db 0x0a
      005EE0 20 20 20 20 20 20 20 16543 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005EF0 0A                   16544 	.db 0x0a
      005EF1 20 20 20 20 20 20 20 16545 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005F01 00                   16546 	.db 0x00
                                  16547 	.area CSEG    (CODE)
                                  16548 	.area CONST   (CODE)
      005F02                      16549 ___str_36:
      005F02 0A                   16550 	.db 0x0a
      005F03 20 20                16551 	.ascii "  "
      005F05 00                   16552 	.db 0x00
                                  16553 	.area CSEG    (CODE)
                                  16554 	.area CONST   (CODE)
      005F06                      16555 ___str_37:
      005F06 3C 32 3E 20 57 4F 52 16556 	.ascii "<2> WORD"
             44
      005F0E 0A                   16557 	.db 0x0a
      005F0F 00                   16558 	.db 0x00
                                  16559 	.area CSEG    (CODE)
                                  16560 	.area CONST   (CODE)
      005F10                      16561 ___str_38:
      005F10 0A                   16562 	.db 0x0a
      005F11 20 20 20 20 20 20 20 16563 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005F21 0A                   16564 	.db 0x0a
      005F22 20 20 20 20 20 20 20 16565 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005F32 00                   16566 	.db 0x00
                                  16567 	.area CSEG    (CODE)
                                  16568 	.area CONST   (CODE)
      005F33                      16569 ___str_39:
      005F33 0A                   16570 	.db 0x0a
      005F34 0A                   16571 	.db 0x0a
      005F35 20 20                16572 	.ascii "  "
      005F37 00                   16573 	.db 0x00
                                  16574 	.area CSEG    (CODE)
                                  16575 	.area CONST   (CODE)
      005F38                      16576 ___str_40:
      005F38 3C 34 3E 20 44 57 4F 16577 	.ascii "<4> DWORD"
             52 44
      005F41 00                   16578 	.db 0x00
                                  16579 	.area CSEG    (CODE)
                                  16580 	.area CONST   (CODE)
      005F42                      16581 ___str_41:
      005F42 0A                   16582 	.db 0x0a
      005F43 20 20 49 6E 70 75 74 16583 	.ascii "  Input Error"
             20 45 72 72 6F 72
      005F50 0A                   16584 	.db 0x0a
      005F51 20 20 54 72 79 20 41 16585 	.ascii "  Try Again"
             67 61 69 6E
      005F5C 00                   16586 	.db 0x00
                                  16587 	.area CSEG    (CODE)
                                  16588 	.area CONST   (CODE)
      005F5D                      16589 ___str_42:
      005F5D 20 49 6E 70 75 74 20 16590 	.ascii " Input Size: "
             53 69 7A 65 3A 20
      005F6A 00                   16591 	.db 0x00
                                  16592 	.area CSEG    (CODE)
                                  16593 	.area CONST   (CODE)
      005F6B                      16594 ___str_43:
      005F6B 20 4D 69 73 6D 61 74 16595 	.ascii " Mismatch Error"
             63 68 20 45 72 72 6F
             72
      005F7A 0A                   16596 	.db 0x0a
      005F7B 20 54 72 79 20 41 67 16597 	.ascii " Try Again"
             61 69 6E
      005F85 00                   16598 	.db 0x00
                                  16599 	.area CSEG    (CODE)
                                  16600 	.area CONST   (CODE)
      005F86                      16601 ___str_44:
      005F86 20 4D 61 74 63 68 20 16602 	.ascii " Match Confirmed"
             43 6F 6E 66 69 72 6D
             65 64
      005F96 0A                   16603 	.db 0x0a
      005F97 20 20 20 20 20 20 20 16604 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      005FA7 00                   16605 	.db 0x00
                                  16606 	.area CSEG    (CODE)
                                  16607 	.area CONST   (CODE)
      005FA8                      16608 ___str_45:
      005FA8 20 41 64 64 72 65 73 16609 	.ascii " Address:"
             73 3A
      005FB1 00                   16610 	.db 0x00
                                  16611 	.area CSEG    (CODE)
                                  16612 	.area CONST   (CODE)
      005FB2                      16613 ___str_46:
      005FB2 20 30 78             16614 	.ascii " 0x"
      005FB5 00                   16615 	.db 0x00
                                  16616 	.area CSEG    (CODE)
                                  16617 	.area CONST   (CODE)
      005FB6                      16618 ___str_47:
      005FB6 20 48 65 78 20 44 61 16619 	.ascii " Hex Data:"
             74 61 3A
      005FC0 00                   16620 	.db 0x00
                                  16621 	.area CSEG    (CODE)
                                  16622 	.area CONST   (CODE)
      005FC1                      16623 ___str_48:
      005FC1 20 41 53 43 49 49 20 16624 	.ascii " ASCII Data:"
             44 61 74 61 3A
      005FCD 00                   16625 	.db 0x00
                                  16626 	.area CSEG    (CODE)
                                  16627 	.area CONST   (CODE)
      005FCE                      16628 ___str_49:
      005FCE 20 44 61 74 61 20 54 16629 	.ascii " Data Type:"
             79 70 65 3A
      005FD9 00                   16630 	.db 0x00
                                  16631 	.area CSEG    (CODE)
                                  16632 	.area CONST   (CODE)
      005FDA                      16633 ___str_50:
      005FDA 20 42 59 54 45       16634 	.ascii " BYTE"
      005FDF 00                   16635 	.db 0x00
                                  16636 	.area CSEG    (CODE)
                                  16637 	.area CONST   (CODE)
      005FE0                      16638 ___str_51:
      005FE0 20 57 4F 52 44       16639 	.ascii " WORD"
      005FE5 00                   16640 	.db 0x00
                                  16641 	.area CSEG    (CODE)
                                  16642 	.area CONST   (CODE)
      005FE6                      16643 ___str_52:
      005FE6 20 44 57 4F 52 44    16644 	.ascii " DWORD"
      005FEC 00                   16645 	.db 0x00
                                  16646 	.area CSEG    (CODE)
                                  16647 	.area CONST   (CODE)
      005FED                      16648 ___str_53:
      005FED 20 3C 30 3E 20 45 78 16649 	.ascii " <0> Exit"
             69 74
      005FF6 0A                   16650 	.db 0x0a
      005FF7 00                   16651 	.db 0x00
                                  16652 	.area CSEG    (CODE)
                                  16653 	.area CONST   (CODE)
      005FF8                      16654 ___str_54:
      005FF8 3C 30 3E 20 45 78 69 16655 	.ascii "<0> Exit"
             74
      006000 0A                   16656 	.db 0x0a
      006001 00                   16657 	.db 0x00
                                  16658 	.area CSEG    (CODE)
                                  16659 	.area CONST   (CODE)
      006002                      16660 ___str_55:
      006002 5B 4D 4F 56 45 5D    16661 	.ascii "[MOVE]"
      006008 0A                   16662 	.db 0x0a
      006009 00                   16663 	.db 0x00
                                  16664 	.area CSEG    (CODE)
                                  16665 	.area CONST   (CODE)
      00600A                      16666 ___str_56:
      00600A 20 53 6F 75 72 63 65 16667 	.ascii " Source Address:"
             20 41 64 64 72 65 73
             73 3A
      00601A 00                   16668 	.db 0x00
                                  16669 	.area CSEG    (CODE)
                                  16670 	.area CONST   (CODE)
      00601B                      16671 ___str_57:
      00601B 20 44 65 73 74 69 6E 16672 	.ascii " Destination:"
             61 74 69 6F 6E 3A
      006028 00                   16673 	.db 0x00
                                  16674 	.area CSEG    (CODE)
                                  16675 	.area CONST   (CODE)
      006029                      16676 ___str_58:
      006029 20 4D 6F 76 65 20 43 16677 	.ascii " Move Complete"
             6F 6D 70 6C 65 74 65
      006037 0A                   16678 	.db 0x0a
      006038 00                   16679 	.db 0x00
                                  16680 	.area CSEG    (CODE)
                                  16681 	.area CONST   (CODE)
      006039                      16682 ___str_59:
      006039 5B 45 44 49 54 5D    16683 	.ascii "[EDIT]"
      00603F 0A                   16684 	.db 0x0a
      006040 00                   16685 	.db 0x00
                                  16686 	.area CSEG    (CODE)
                                  16687 	.area CONST   (CODE)
      006041                      16688 ___str_60:
      006041 20 45 64 69 74 20 41 16689 	.ascii " Edit Address:"
             64 64 72 65 73 73 3A
      00604F 00                   16690 	.db 0x00
                                  16691 	.area CSEG    (CODE)
                                  16692 	.area CONST   (CODE)
      006050                      16693 ___str_61:
      006050 20 4C 6F 63 61 74 69 16694 	.ascii " Location Contents:"
             6F 6E 20 43 6F 6E 74
             65 6E 74 73 3A
      006063 0A                   16695 	.db 0x0a
      006064 00                   16696 	.db 0x00
                                  16697 	.area CSEG    (CODE)
                                  16698 	.area CONST   (CODE)
      006065                      16699 ___str_62:
      006065 20 5F 5F             16700 	.ascii " __"
      006068 00                   16701 	.db 0x00
                                  16702 	.area CSEG    (CODE)
                                  16703 	.area CONST   (CODE)
      006069                      16704 ___str_63:
      006069 20 45 6E 74 65 72 20 16705 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      00607A 0A                   16706 	.db 0x0a
      00607B 00                   16707 	.db 0x00
                                  16708 	.area CSEG    (CODE)
                                  16709 	.area CONST   (CODE)
      00607C                      16710 ___str_64:
      00607C 20 43 68 6F 6F 73 65 16711 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      006090 0A                   16712 	.db 0x0a
      006091 00                   16713 	.db 0x00
                                  16714 	.area CSEG    (CODE)
                                  16715 	.area CONST   (CODE)
      006092                      16716 ___str_65:
      006092 20 20 3C 31 3E 20 4E 16717 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      0060A4 0A                   16718 	.db 0x0a
      0060A5 20 20 3C 32 3E 20 4E 16719 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      0060B6 0A                   16720 	.db 0x0a
      0060B7 00                   16721 	.db 0x00
                                  16722 	.area CSEG    (CODE)
                                  16723 	.area CONST   (CODE)
      0060B8                      16724 ___str_66:
      0060B8 20 20 3C 30 3E 20 45 16725 	.ascii "  <0> Exit"
             78 69 74
      0060C2 00                   16726 	.db 0x00
                                  16727 	.area CSEG    (CODE)
                                  16728 	.area CONST   (CODE)
      0060C3                      16729 ___str_67:
      0060C3 0A                   16730 	.db 0x0a
      0060C4 20                   16731 	.ascii " "
      0060C5 00                   16732 	.db 0x00
                                  16733 	.area CSEG    (CODE)
                                  16734 	.area CONST   (CODE)
      0060C6                      16735 ___str_68:
      0060C6 20 45 6E 74 65 72 20 16736 	.ascii " Enter New Value:"
             4E 65 77 20 56 61 6C
             75 65 3A
      0060D7 0A                   16737 	.db 0x0a
      0060D8 20                   16738 	.ascii " "
      0060D9 00                   16739 	.db 0x00
                                  16740 	.area CSEG    (CODE)
                                  16741 	.area CONST   (CODE)
      0060DA                      16742 ___str_69:
      0060DA 3C 31 3E 20 4E 65 78 16743 	.ascii "<1> Next Address"
             74 20 41 64 64 72 65
             73 73
      0060EA 0A                   16744 	.db 0x0a
      0060EB 00                   16745 	.db 0x00
                                  16746 	.area CSEG    (CODE)
                                  16747 	.area CONST   (CODE)
      0060EC                      16748 ___str_70:
      0060EC 0A                   16749 	.db 0x0a
      0060ED 0A                   16750 	.db 0x0a
      0060EE 20 20 20 20 20 20 20 16751 	.ascii "               "
             20 20 20 20 20 20 20
             20
      0060FD 00                   16752 	.db 0x00
                                  16753 	.area CSEG    (CODE)
                                  16754 	.area CONST   (CODE)
      0060FE                      16755 ___str_71:
      0060FE 0A                   16756 	.db 0x0a
      0060FF 20 5F 5F             16757 	.ascii " __"
      006102 00                   16758 	.db 0x00
                                  16759 	.area CSEG    (CODE)
                                  16760 	.area CONST   (CODE)
      006103                      16761 ___str_72:
      006103 0A                   16762 	.db 0x0a
      006104 20 20 3C 31 3E 20 4E 16763 	.ascii "  <1> Next Address"
             65 78 74 20 41 64 64
             72 65 73 73
      006116 0A                   16764 	.db 0x0a
      006117 20 20 3C 32 3E 20 4E 16765 	.ascii "  <2> New Address"
             65 77 20 41 64 64 72
             65 73 73
      006128 0A                   16766 	.db 0x0a
      006129 20 20 3C 30 3E 20 45 16767 	.ascii "  <0> Exit"
             78 69 74
      006133 00                   16768 	.db 0x00
                                  16769 	.area CSEG    (CODE)
                                  16770 	.area CONST   (CODE)
      006134                      16771 ___str_73:
      006134 20 43 68 6F 6F 73 65 16772 	.ascii " Choose Next Action:"
             20 4E 65 78 74 20 41
             63 74 69 6F 6E 3A
      006148 0A                   16773 	.db 0x0a
      006149 20 20                16774 	.ascii "  "
      00614B 00                   16775 	.db 0x00
                                  16776 	.area CSEG    (CODE)
                                  16777 	.area CONST   (CODE)
      00614C                      16778 ___str_74:
      00614C 3C 32 3E 20 4E 65 77 16779 	.ascii "<2> New Address"
             20 41 64 64 72 65 73
             73
      00615B 0A                   16780 	.db 0x0a
      00615C 00                   16781 	.db 0x00
                                  16782 	.area CSEG    (CODE)
                                  16783 	.area CONST   (CODE)
      00615D                      16784 ___str_75:
      00615D 0A                   16785 	.db 0x0a
      00615E 20 20 20 20 20 20 20 16786 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00616D 00                   16787 	.db 0x00
                                  16788 	.area CSEG    (CODE)
                                  16789 	.area CONST   (CODE)
      00616E                      16790 ___str_76:
      00616E 20 45 64 69 74 20 41 16791 	.ascii " Edit Address"
             64 64 72 65 73 73
      00617B 00                   16792 	.db 0x00
                                  16793 	.area CSEG    (CODE)
                                  16794 	.area CONST   (CODE)
      00617C                      16795 ___str_77:
      00617C 0A                   16796 	.db 0x0a
      00617D 00                   16797 	.db 0x00
                                  16798 	.area CSEG    (CODE)
                                  16799 	.area CONST   (CODE)
      00617E                      16800 ___str_78:
      00617E 3C 30 3E 20 45 78 69 16801 	.ascii "<0> Exit"
             74
      006186 00                   16802 	.db 0x00
                                  16803 	.area CSEG    (CODE)
                                  16804 	.area CONST   (CODE)
      006187                      16805 ___str_79:
      006187 0A                   16806 	.db 0x0a
      006188 0A                   16807 	.db 0x0a
      006189 0A                   16808 	.db 0x0a
      00618A 0A                   16809 	.db 0x0a
      00618B 20 49 6E 70 75 74 20 16810 	.ascii " Input Error "
             45 72 72 6F 72 20
      006198 00                   16811 	.db 0x00
                                  16812 	.area CSEG    (CODE)
                                  16813 	.area CONST   (CODE)
      006199                      16814 ___str_80:
      006199 5B 46 49 4E 44 5D    16815 	.ascii "[FIND]"
      00619F 0A                   16816 	.db 0x0a
      0061A0 00                   16817 	.db 0x00
                                  16818 	.area CSEG    (CODE)
                                  16819 	.area CONST   (CODE)
      0061A1                      16820 ___str_81:
      0061A1 20 46 69 6E 64 20 56 16821 	.ascii " Find Value:"
             61 6C 75 65 3A
      0061AD 00                   16822 	.db 0x00
                                  16823 	.area CSEG    (CODE)
                                  16824 	.area CONST   (CODE)
      0061AE                      16825 ___str_82:
      0061AE 20 53 65 61 72 63 68 16826 	.ascii " Search Address:"
             20 41 64 64 72 65 73
             73 3A
      0061BE 00                   16827 	.db 0x00
                                  16828 	.area CSEG    (CODE)
                                  16829 	.area CONST   (CODE)
      0061BF                      16830 ___str_83:
      0061BF 20 49 6E 70 75 74 20 16831 	.ascii " Input Block Size:"
             42 6C 6F 63 6B 20 53
             69 7A 65 3A
      0061D1 0A                   16832 	.db 0x0a
      0061D2 00                   16833 	.db 0x00
                                  16834 	.area CSEG    (CODE)
                                  16835 	.area CONST   (CODE)
      0061D3                      16836 ___str_84:
      0061D3 20 20 3C 30 31 3E 20 16837 	.ascii "  <01> BYTE"
             42 59 54 45
      0061DE 0A                   16838 	.db 0x0a
      0061DF 20 20 3C 30 32 3E 20 16839 	.ascii "  <02> WORD"
             57 4F 52 44
      0061EA 0A                   16840 	.db 0x0a
      0061EB 20 20 3C 30 34 3E 20 16841 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      0061F7 0A                   16842 	.db 0x0a
      0061F8 00                   16843 	.db 0x00
                                  16844 	.area CSEG    (CODE)
                                  16845 	.area CONST   (CODE)
      0061F9                      16846 ___str_85:
      0061F9 20 20 3C 46 46 3E 20 16847 	.ascii "  <FF> (SCAN)"
             28 53 43 41 4E 29
      006206 00                   16848 	.db 0x00
                                  16849 	.area CSEG    (CODE)
                                  16850 	.area CONST   (CODE)
      006207                      16851 ___str_86:
      006207 20 20 20 5F 5F       16852 	.ascii "   __"
      00620C 00                   16853 	.db 0x00
                                  16854 	.area CSEG    (CODE)
                                  16855 	.area CONST   (CODE)
      00620D                      16856 ___str_87:
      00620D 20 20 20             16857 	.ascii "   "
      006210 00                   16858 	.db 0x00
                                  16859 	.area CSEG    (CODE)
                                  16860 	.area CONST   (CODE)
      006211                      16861 ___str_88:
      006211 0A                   16862 	.db 0x0a
      006212 20 20 20 20 20 20 20 16863 	.ascii "                "
             20 20 20 20 20 20 20
             20 20
      006222 00                   16864 	.db 0x00
                                  16865 	.area CSEG    (CODE)
                                  16866 	.area CONST   (CODE)
      006223                      16867 ___str_89:
      006223 0A                   16868 	.db 0x0a
      006224 20 54 72 79 20 61 67 16869 	.ascii " Try again"
             61 69 6E
      00622E 00                   16870 	.db 0x00
                                  16871 	.area CSEG    (CODE)
                                  16872 	.area CONST   (CODE)
      00622F                      16873 ___str_90:
      00622F 3C 30 31 3E 20 42 59 16874 	.ascii "<01> BYTE"
             54 45
      006238 0A                   16875 	.db 0x0a
      006239 00                   16876 	.db 0x00
                                  16877 	.area CSEG    (CODE)
                                  16878 	.area CONST   (CODE)
      00623A                      16879 ___str_91:
      00623A 20 20 3C 30 32 3E 20 16880 	.ascii "  <02> WORD"
             57 4F 52 44
      006245 0A                   16881 	.db 0x0a
      006246 00                   16882 	.db 0x00
                                  16883 	.area CSEG    (CODE)
                                  16884 	.area CONST   (CODE)
      006247                      16885 ___str_92:
      006247 20 20 3C 30 34 3E 20 16886 	.ascii "  <04> DWORD"
             44 57 4F 52 44
      006253 0A                   16887 	.db 0x0a
      006254 00                   16888 	.db 0x00
                                  16889 	.area CSEG    (CODE)
                                  16890 	.area CONST   (CODE)
      006255                      16891 ___str_93:
      006255 0A                   16892 	.db 0x0a
      006256 20 53 65 61 72 63 68 16893 	.ascii " Search Size Limit:"
             20 53 69 7A 65 20 4C
             69 6D 69 74 3A
      006269 00                   16894 	.db 0x00
                                  16895 	.area CSEG    (CODE)
                                  16896 	.area CONST   (CODE)
      00626A                      16897 ___str_94:
      00626A 0A                   16898 	.db 0x0a
      00626B 20 42 59 54 45 20 5B 16899 	.ascii " BYTE [8 bits]"
             38 20 62 69 74 73 5D
      006279 00                   16900 	.db 0x00
                                  16901 	.area CSEG    (CODE)
                                  16902 	.area CONST   (CODE)
      00627A                      16903 ___str_95:
      00627A 20 20 3C 30 31 3E 20 16904 	.ascii "  <01> BYTE"
             42 59 54 45
      006285 0A                   16905 	.db 0x0a
      006286 20 20                16906 	.ascii "  "
      006288 00                   16907 	.db 0x00
                                  16908 	.area CSEG    (CODE)
                                  16909 	.area CONST   (CODE)
      006289                      16910 ___str_96:
      006289 3C 30 32 3E 20 57 4F 16911 	.ascii "<02> WORD"
             52 44
      006292 0A                   16912 	.db 0x0a
      006293 00                   16913 	.db 0x00
                                  16914 	.area CSEG    (CODE)
                                  16915 	.area CONST   (CODE)
      006294                      16916 ___str_97:
      006294 0A                   16917 	.db 0x0a
      006295 20 57 4F 52 44 20 5B 16918 	.ascii " WORD [16 bits]"
             31 36 20 62 69 74 73
             5D
      0062A4 00                   16919 	.db 0x00
                                  16920 	.area CSEG    (CODE)
                                  16921 	.area CONST   (CODE)
      0062A5                      16922 ___str_98:
      0062A5 20 20 3C 30 31 3E 20 16923 	.ascii "  <01> BYTE"
             42 59 54 45
      0062B0 0A                   16924 	.db 0x0a
      0062B1 20 20 3C 30 32 3E 20 16925 	.ascii "  <02> WORD"
             57 4F 52 44
      0062BC 0A                   16926 	.db 0x0a
      0062BD 20 20                16927 	.ascii "  "
      0062BF 00                   16928 	.db 0x00
                                  16929 	.area CSEG    (CODE)
                                  16930 	.area CONST   (CODE)
      0062C0                      16931 ___str_99:
      0062C0 3C 30 34 3E 20 44 57 16932 	.ascii "<04> DWORD"
             4F 52 44
      0062CA 0A                   16933 	.db 0x0a
      0062CB 00                   16934 	.db 0x00
                                  16935 	.area CSEG    (CODE)
                                  16936 	.area CONST   (CODE)
      0062CC                      16937 ___str_100:
      0062CC 0A                   16938 	.db 0x0a
      0062CD 20 44 57 4F 52 44 20 16939 	.ascii " DWORD [32 bits]"
             5B 33 32 20 62 69 74
             73 5D
      0062DD 00                   16940 	.db 0x00
                                  16941 	.area CSEG    (CODE)
                                  16942 	.area CONST   (CODE)
      0062DE                      16943 ___str_101:
      0062DE 3C 30 34 3E 20 44 57 16944 	.ascii "<04> DWORD"
             4F 52 44
      0062E8 0A                   16945 	.db 0x0a
      0062E9 20 20                16946 	.ascii "  "
      0062EB 00                   16947 	.db 0x00
                                  16948 	.area CSEG    (CODE)
                                  16949 	.area CONST   (CODE)
      0062EC                      16950 ___str_102:
      0062EC 3C 46 46 3E 20 28 53 16951 	.ascii "<FF> (SCAN)"
             43 41 4E 29
      0062F7 00                   16952 	.db 0x00
                                  16953 	.area CSEG    (CODE)
                                  16954 	.area CONST   (CODE)
      0062F8                      16955 ___str_103:
      0062F8 0A                   16956 	.db 0x0a
      0062F9 20 5B 32 35 36 20 42 16957 	.ascii " [256 Blocks]"
             6C 6F 63 6B 73 5D
      006306 00                   16958 	.db 0x00
                                  16959 	.area CSEG    (CODE)
                                  16960 	.area CONST   (CODE)
      006307                      16961 ___str_104:
      006307 20 5B 4E 6F 6E 2D 49 16962 	.ascii " [Non-Interactive]"
             6E 74 65 72 61 63 74
             69 76 65 5D
      006319 0A                   16963 	.db 0x0a
      00631A 00                   16964 	.db 0x00
                                  16965 	.area CSEG    (CODE)
                                  16966 	.area CONST   (CODE)
      00631B                      16967 ___str_105:
      00631B 20 53 65 61 72 63 68 16968 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      006329 0A                   16969 	.db 0x0a
      00632A 20                   16970 	.ascii " "
      00632B 00                   16971 	.db 0x00
                                  16972 	.area CSEG    (CODE)
                                  16973 	.area CONST   (CODE)
      00632C                      16974 ___str_106:
      00632C 20 46 6F 75 6E 64 20 16975 	.ascii " Found at Location:"
             61 74 20 4C 6F 63 61
             74 69 6F 6E 3A
      00633F 0A                   16976 	.db 0x0a
      006340 00                   16977 	.db 0x00
                                  16978 	.area CSEG    (CODE)
                                  16979 	.area CONST   (CODE)
      006341                      16980 ___str_107:
      006341 0A                   16981 	.db 0x0a
      006342 20 30 78             16982 	.ascii " 0x"
      006345 00                   16983 	.db 0x00
                                  16984 	.area CSEG    (CODE)
                                  16985 	.area CONST   (CODE)
      006346                      16986 ___str_108:
      006346 20 5B 49 6E 74 65 72 16987 	.ascii " [Interactive]"
             61 63 74 69 76 65 5D
      006354 0A                   16988 	.db 0x0a
      006355 00                   16989 	.db 0x00
                                  16990 	.area CSEG    (CODE)
                                  16991 	.area CONST   (CODE)
      006356                      16992 ___str_109:
      006356 20 46 6F 75 6E 64 20 16993 	.ascii " Found at Location "
             61 74 20 4C 6F 63 61
             74 69 6F 6E 20
      006369 0A                   16994 	.db 0x0a
      00636A 00                   16995 	.db 0x00
                                  16996 	.area CSEG    (CODE)
                                  16997 	.area CONST   (CODE)
      00636B                      16998 ___str_110:
      00636B 50 61 67 65 3A 20    16999 	.ascii "Page: "
      006371 00                   17000 	.db 0x00
                                  17001 	.area CSEG    (CODE)
                                  17002 	.area CONST   (CODE)
      006372                      17003 ___str_111:
      006372 20 3C 31 3E 20 4E 65 17004 	.ascii " <1> Next"
             78 74
      00637B 0A                   17005 	.db 0x0a
      00637C 20 3C 30 3E 20 45 78 17006 	.ascii " <0> Exit"
             69 74
      006385 0A                   17007 	.db 0x0a
      006386 20 20 20 20 20 20 20 17008 	.ascii "              "
             20 20 20 20 20 20 20
      006394 00                   17009 	.db 0x00
                                  17010 	.area CSEG    (CODE)
                                  17011 	.area CONST   (CODE)
      006395                      17012 ___str_112:
      006395 3C 31 3E 20 4E 65 78 17013 	.ascii "<1> Next"
             74
      00639D 00                   17014 	.db 0x00
                                  17015 	.area CSEG    (CODE)
                                  17016 	.area CONST   (CODE)
      00639E                      17017 ___str_113:
      00639E 20 20 20 20 20 20 20 17018 	.ascii "          "
             20 20 20
      0063A8 0A                   17019 	.db 0x0a
      0063A9 20 3C 30 3E 20 45 78 17020 	.ascii " <0> Exit"
             69 74
      0063B2 0A                   17021 	.db 0x0a
      0063B3 20 20 20 20 20 20 20 17022 	.ascii "              "
             20 20 20 20 20 20 20
      0063C1 00                   17023 	.db 0x00
                                  17024 	.area CSEG    (CODE)
                                  17025 	.area CONST   (CODE)
      0063C2                      17026 ___str_114:
      0063C2 20 20 20 20 20 20 20 17027 	.ascii "          "
             20 20 20
      0063CC 0A                   17028 	.db 0x0a
      0063CD 20 3C 30 3E 20 45 78 17029 	.ascii " <0> Exit"
             69 74
      0063D6 0A                   17030 	.db 0x0a
      0063D7 20 3C 32 3E 20 50 72 17031 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      0063E4 00                   17032 	.db 0x00
                                  17033 	.area CSEG    (CODE)
                                  17034 	.area CONST   (CODE)
      0063E5                      17035 ___str_115:
      0063E5 0A                   17036 	.db 0x0a
      0063E6 0A                   17037 	.db 0x0a
      0063E7 20                   17038 	.ascii " "
      0063E8 00                   17039 	.db 0x00
                                  17040 	.area CSEG    (CODE)
                                  17041 	.area CONST   (CODE)
      0063E9                      17042 ___str_116:
      0063E9 3C 32 3E 20 50 72 65 17043 	.ascii "<2> Previous"
             76 69 6F 75 73
      0063F5 00                   17044 	.db 0x00
                                  17045 	.area CSEG    (CODE)
                                  17046 	.area CONST   (CODE)
      0063F6                      17047 ___str_117:
      0063F6 20 3C 31 3E 20 4E 65 17048 	.ascii " <1> Next"
             78 74
      0063FF 0A                   17049 	.db 0x0a
      006400 20 3C 30 3E 20 45 78 17050 	.ascii " <0> Exit"
             69 74
      006409 0A                   17051 	.db 0x0a
      00640A 20 3C 32 3E 20 50 72 17052 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      006417 00                   17053 	.db 0x00
                                  17054 	.area CSEG    (CODE)
                                  17055 	.area CONST   (CODE)
      006418                      17056 ___str_118:
      006418 20 3C 31 3E 20 4E 65 17057 	.ascii " <1> Next"
             78 74
      006421 0A                   17058 	.db 0x0a
      006422 20                   17059 	.ascii " "
      006423 00                   17060 	.db 0x00
                                  17061 	.area CSEG    (CODE)
                                  17062 	.area CONST   (CODE)
      006424                      17063 ___str_119:
      006424 0A                   17064 	.db 0x0a
      006425 20 3C 32 3E 20 50 72 17065 	.ascii " <2> Previous"
             65 76 69 6F 75 73
      006432 00                   17066 	.db 0x00
                                  17067 	.area CSEG    (CODE)
                                  17068 	.area CONST   (CODE)
      006433                      17069 ___str_120:
      006433 20 56 61 6C 75 65 20 17070 	.ascii " Value Not Found"
             4E 6F 74 20 46 6F 75
             6E 64
      006443 0A                   17071 	.db 0x0a
      006444 20 57 69 74 68 69 6E 17072 	.ascii " Within Block"
             20 42 6C 6F 63 6B
      006451 0A                   17073 	.db 0x0a
      006452 20                   17074 	.ascii " "
      006453 00                   17075 	.db 0x00
                                  17076 	.area CSEG    (CODE)
                                  17077 	.area CONST   (CODE)
      006454                      17078 ___str_121:
      006454 0A                   17079 	.db 0x0a
      006455 20 3C 30 3E 20 45 78 17080 	.ascii " <0> Exit"
             69 74
      00645E 00                   17081 	.db 0x00
                                  17082 	.area CSEG    (CODE)
                                  17083 	.area CONST   (CODE)
      00645F                      17084 ___str_122:
      00645F 0A                   17085 	.db 0x0a
      006460 0A                   17086 	.db 0x0a
      006461 0A                   17087 	.db 0x0a
      006462 20                   17088 	.ascii " "
      006463 00                   17089 	.db 0x00
                                  17090 	.area CSEG    (CODE)
                                  17091 	.area CONST   (CODE)
      006464                      17092 ___str_123:
      006464 5B 43 4F 55 4E 54 5D 17093 	.ascii "[COUNT]"
      00646B 0A                   17094 	.db 0x0a
      00646C 00                   17095 	.db 0x00
                                  17096 	.area CSEG    (CODE)
                                  17097 	.area CONST   (CODE)
      00646D                      17098 ___str_124:
      00646D 20 53 65 61 72 63 68 17099 	.ascii " Search Value:"
             20 56 61 6C 75 65 3A
      00647B 00                   17100 	.db 0x00
                                  17101 	.area CSEG    (CODE)
                                  17102 	.area CONST   (CODE)
      00647C                      17103 ___str_125:
      00647C 20 46 6F 75 6E 64 20 17104 	.ascii " Found in"
             69 6E
      006485 0A                   17105 	.db 0x0a
      006486 20                   17106 	.ascii " "
      006487 00                   17107 	.db 0x00
                                  17108 	.area CSEG    (CODE)
                                  17109 	.area CONST   (CODE)
      006488                      17110 ___str_126:
      006488 20 42 79 74 65 73 20 17111 	.ascii " Bytes (Hex)"
             28 48 65 78 29
      006494 0A                   17112 	.db 0x0a
      006495 20                   17113 	.ascii " "
      006496 00                   17114 	.db 0x00
                                  17115 	.area CSEG    (CODE)
                                  17116 	.area CONST   (CODE)
      006497                      17117 ___str_127:
      006497 43 6F 75 6E 74 3A 20 17118 	.ascii "Count: "
      00649E 00                   17119 	.db 0x00
                                  17120 	.area CSEG    (CODE)
                                  17121 	.area CONST   (CODE)
      00649F                      17122 ___str_128:
      00649F 5B 43 48 45 43 4B 5D 17123 	.ascii "[CHECK]"
      0064A6 0A                   17124 	.db 0x0a
      0064A7 00                   17125 	.db 0x00
                                  17126 	.area CSEG    (CODE)
                                  17127 	.area CONST   (CODE)
      0064A8                      17128 ___str_129:
      0064A8 20 45 6E 74 65 72 20 17129 	.ascii " Enter Value:"
             56 61 6C 75 65 3A
      0064B5 0A                   17130 	.db 0x0a
      0064B6 00                   17131 	.db 0x00
                                  17132 	.area CSEG    (CODE)
                                  17133 	.area CONST   (CODE)
      0064B7                      17134 ___str_130:
      0064B7 0A                   17135 	.db 0x0a
      0064B8 0A                   17136 	.db 0x0a
      0064B9 20 57 72 69 74 69 6E 17137 	.ascii " Writing byte to"
             67 20 62 79 74 65 20
             74 6F
      0064C9 0A                   17138 	.db 0x0a
      0064CA 20 61 6C 6C 20 6D 65 17139 	.ascii " all memory"
             6D 6F 72 79
      0064D5 0A                   17140 	.db 0x0a
      0064D6 20 6C 6F 63 61 74 69 17141 	.ascii " locations..."
             6F 6E 73 2E 2E 2E
      0064E3 00                   17142 	.db 0x00
                                  17143 	.area CSEG    (CODE)
                                  17144 	.area CONST   (CODE)
      0064E4                      17145 ___str_131:
      0064E4 0A                   17146 	.db 0x0a
      0064E5 20 56 65 72 69 66 79 17147 	.ascii " Verifying write..."
             69 6E 67 20 77 72 69
             74 65 2E 2E 2E
      0064F8 00                   17148 	.db 0x00
                                  17149 	.area CSEG    (CODE)
                                  17150 	.area CONST   (CODE)
      0064F9                      17151 ___str_132:
      0064F9 0A                   17152 	.db 0x0a
      0064FA 20 43 6F 6D 70 6C 65 17153 	.ascii " Complete."
             74 65 2E
      006504 00                   17154 	.db 0x00
                                  17155 	.area CSEG    (CODE)
                                  17156 	.area CONST   (CODE)
      006505                      17157 ___str_133:
      006505 0A                   17158 	.db 0x0a
      006506 0A                   17159 	.db 0x0a
      006507 20 54 6F 67 67 6C 69 17160 	.ascii " Toggling bits in"
             6E 67 20 62 69 74 73
             20 69 6E
      006518 0A                   17161 	.db 0x0a
      006519 20 65 61 63 68 20 6E 17162 	.ascii " each nibble..."
             69 62 62 6C 65 2E 2E
             2E
      006528 00                   17163 	.db 0x00
                                  17164 	.area CSEG    (CODE)
                                  17165 	.area CONST   (CODE)
      006529                      17166 ___str_134:
      006529 0A                   17167 	.db 0x0a
      00652A 20 57 72 69 74 69 6E 17168 	.ascii " Writing new byte..."
             67 20 6E 65 77 20 62
             79 74 65 2E 2E 2E
      00653E 00                   17169 	.db 0x00
                                  17170 	.area CSEG    (CODE)
                                  17171 	.area CONST   (CODE)
      00653F                      17172 ___str_135:
      00653F 0A                   17173 	.db 0x0a
      006540 0A                   17174 	.db 0x0a
      006541 20 43 68 65 63 6B 20 17175 	.ascii " Check Complete."
             43 6F 6D 70 6C 65 74
             65 2E
      006551 00                   17176 	.db 0x00
                                  17177 	.area CSEG    (CODE)
                                  17178 	.area CONST   (CODE)
      006552                      17179 ___str_136:
      006552 5B 55 41 52 54 5D    17180 	.ascii "[UART]"
      006558 0A                   17181 	.db 0x0a
      006559 00                   17182 	.db 0x00
                                  17183 	.area CSEG    (CODE)
                                  17184 	.area CONST   (CODE)
      00655A                      17185 ___str_137:
      00655A 20 3C 31 3E 20       17186 	.ascii " <1> "
      00655F 00                   17187 	.db 0x00
                                  17188 	.area CSEG    (CODE)
                                  17189 	.area CONST   (CODE)
      006560                      17190 ___str_138:
      006560 31 32 30 30          17191 	.ascii "1200"
      006564 00                   17192 	.db 0x00
                                  17193 	.area CSEG    (CODE)
                                  17194 	.area CONST   (CODE)
      006565                      17195 ___str_139:
      006565 32 34 30 30          17196 	.ascii "2400"
      006569 00                   17197 	.db 0x00
                                  17198 	.area CSEG    (CODE)
                                  17199 	.area CONST   (CODE)
      00656A                      17200 ___str_140:
      00656A 34 38 30 30          17201 	.ascii "4800"
      00656E 00                   17202 	.db 0x00
                                  17203 	.area CSEG    (CODE)
                                  17204 	.area CONST   (CODE)
      00656F                      17205 ___str_141:
      00656F 39 36 30 30          17206 	.ascii "9600"
      006573 00                   17207 	.db 0x00
                                  17208 	.area CSEG    (CODE)
                                  17209 	.area CONST   (CODE)
      006574                      17210 ___str_142:
      006574 31 39 32 30 30       17211 	.ascii "19200"
      006579 00                   17212 	.db 0x00
                                  17213 	.area CSEG    (CODE)
                                  17214 	.area CONST   (CODE)
      00657A                      17215 ___str_143:
      00657A 20 62 61 75 64       17216 	.ascii " baud"
      00657F 0A                   17217 	.db 0x0a
      006580 00                   17218 	.db 0x00
                                  17219 	.area CSEG    (CODE)
                                  17220 	.area CONST   (CODE)
      006581                      17221 ___str_144:
      006581 20 3C 32 3E 20       17222 	.ascii " <2> "
      006586 00                   17223 	.db 0x00
                                  17224 	.area CSEG    (CODE)
                                  17225 	.area CONST   (CODE)
      006587                      17226 ___str_145:
      006587 38                   17227 	.ascii "8"
      006588 00                   17228 	.db 0x00
                                  17229 	.area CSEG    (CODE)
                                  17230 	.area CONST   (CODE)
      006589                      17231 ___str_146:
      006589 39                   17232 	.ascii "9"
      00658A 00                   17233 	.db 0x00
                                  17234 	.area CSEG    (CODE)
                                  17235 	.area CONST   (CODE)
      00658B                      17236 ___str_147:
      00658B 2D 62 69 74 20 4D 6F 17237 	.ascii "-bit Mode"
             64 65
      006594 0A                   17238 	.db 0x0a
      006595 00                   17239 	.db 0x00
                                  17240 	.area CSEG    (CODE)
                                  17241 	.area CONST   (CODE)
      006596                      17242 ___str_148:
      006596 20 3C 33 3E 20       17243 	.ascii " <3> "
      00659B 00                   17244 	.db 0x00
                                  17245 	.area CSEG    (CODE)
                                  17246 	.area CONST   (CODE)
      00659C                      17247 ___str_149:
      00659C 20 50 61 72 69 74 79 17248 	.ascii " Parity"
      0065A3 00                   17249 	.db 0x00
                                  17250 	.area CSEG    (CODE)
                                  17251 	.area CONST   (CODE)
      0065A4                      17252 ___str_150:
      0065A4 20 3C 34 3E 20 44 69 17253 	.ascii " <4> Disable UART"
             73 61 62 6C 65 20 55
             41 52 54
      0065B5 0A                   17254 	.db 0x0a
      0065B6 00                   17255 	.db 0x00
                                  17256 	.area CSEG    (CODE)
                                  17257 	.area CONST   (CODE)
      0065B7                      17258 ___str_151:
      0065B7 20 20 20 20 20 28 45 17259 	.ascii "     (Enabled)"
             6E 61 62 6C 65 64 29
      0065C5 0A                   17260 	.db 0x0a
      0065C6 00                   17261 	.db 0x00
                                  17262 	.area CSEG    (CODE)
                                  17263 	.area CONST   (CODE)
      0065C7                      17264 ___str_152:
      0065C7 20 3C 31 3E 20 53 65 17265 	.ascii " <1> Set Data Rate"
             74 20 44 61 74 61 20
             52 61 74 65
      0065D9 0A                   17266 	.db 0x0a
      0065DA 00                   17267 	.db 0x00
                                  17268 	.area CSEG    (CODE)
                                  17269 	.area CONST   (CODE)
      0065DB                      17270 ___str_153:
      0065DB 20 3C 32 3E 20 4E 75 17271 	.ascii " <2> Number of Bits"
             6D 62 65 72 20 6F 66
             20 42 69 74 73
      0065EE 0A                   17272 	.db 0x0a
      0065EF 20 20 20 20 20 28 38 17273 	.ascii "     (8 or 9 bits)"
             20 6F 72 20 39 20 62
             69 74 73 29
      006601 0A                   17274 	.db 0x0a
      006602 00                   17275 	.db 0x00
                                  17276 	.area CSEG    (CODE)
                                  17277 	.area CONST   (CODE)
      006603                      17278 ___str_154:
      006603 20 3C 33 3E 20 50 61 17279 	.ascii " <3> Parity (Even)"
             72 69 74 79 20 28 45
             76 65 6E 29
      006615 0A                   17280 	.db 0x0a
      006616 20 20 20 20 20 28 4F 17281 	.ascii "     (Odd/None)"
             64 64 2F 4E 6F 6E 65
             29
      006625 0A                   17282 	.db 0x0a
      006626 00                   17283 	.db 0x00
                                  17284 	.area CSEG    (CODE)
                                  17285 	.area CONST   (CODE)
      006627                      17286 ___str_155:
      006627 20 3C 34 3E 20 45 6E 17287 	.ascii " <4> Enable UART"
             61 62 6C 65 20 55 41
             52 54
      006637 0A                   17288 	.db 0x0a
      006638 00                   17289 	.db 0x00
                                  17290 	.area CSEG    (CODE)
                                  17291 	.area CONST   (CODE)
      006639                      17292 ___str_156:
      006639 20 20 20 20 20 28 44 17293 	.ascii "     (Disabled)"
             69 73 61 62 6C 65 64
             29
      006648 0A                   17294 	.db 0x0a
      006649 00                   17295 	.db 0x00
                                  17296 	.area CSEG    (CODE)
                                  17297 	.area CONST   (CODE)
      00664A                      17298 ___str_157:
      00664A 20 3C 30 3E 20 45 78 17299 	.ascii " <0> Exit "
             69 74 20
      006654 0A                   17300 	.db 0x0a
      006655 00                   17301 	.db 0x00
                                  17302 	.area CSEG    (CODE)
                                  17303 	.area CONST   (CODE)
      006656                      17304 ___str_158:
      006656 3C 30 3E 20          17305 	.ascii "<0> "
      00665A 00                   17306 	.db 0x00
                                  17307 	.area CSEG    (CODE)
                                  17308 	.area CONST   (CODE)
      00665B                      17309 ___str_159:
      00665B 45 78 69 74          17310 	.ascii "Exit"
      00665F 0A                   17311 	.db 0x0a
      006660 00                   17312 	.db 0x00
                                  17313 	.area CSEG    (CODE)
                                  17314 	.area CONST   (CODE)
      006661                      17315 ___str_160:
      006661 3C 34 3E 20          17316 	.ascii "<4> "
      006665 00                   17317 	.db 0x00
                                  17318 	.area CSEG    (CODE)
                                  17319 	.area CONST   (CODE)
      006666                      17320 ___str_161:
      006666 44 69 73 61 62 6C 65 17321 	.ascii "Disable UART"
             20 55 41 52 54
      006672 0A                   17322 	.db 0x0a
      006673 00                   17323 	.db 0x00
                                  17324 	.area CSEG    (CODE)
                                  17325 	.area CONST   (CODE)
      006674                      17326 ___str_162:
      006674 20 20 20 20 20       17327 	.ascii "     "
      006679 00                   17328 	.db 0x00
                                  17329 	.area CSEG    (CODE)
                                  17330 	.area CONST   (CODE)
      00667A                      17331 ___str_163:
      00667A 28 45 6E 61 62 6C 65 17332 	.ascii "(Enabled)"
             64 29
      006683 00                   17333 	.db 0x00
                                  17334 	.area CSEG    (CODE)
                                  17335 	.area CONST   (CODE)
      006684                      17336 ___str_164:
      006684 45 6E 61 62 6C 65 20 17337 	.ascii "Enable UART"
             55 41 52 54
      00668F 0A                   17338 	.db 0x0a
      006690 00                   17339 	.db 0x00
                                  17340 	.area CSEG    (CODE)
                                  17341 	.area CONST   (CODE)
      006691                      17342 ___str_165:
      006691 28 44 69 73 61 62 6C 17343 	.ascii "(Disabled)"
             65 64 29
      00669B 00                   17344 	.db 0x00
                                  17345 	.area CSEG    (CODE)
                                  17346 	.area CONST   (CODE)
      00669C                      17347 ___str_166:
      00669C 3C 31 3E 20          17348 	.ascii "<1> "
      0066A0 00                   17349 	.db 0x00
                                  17350 	.area CSEG    (CODE)
                                  17351 	.area CONST   (CODE)
      0066A1                      17352 ___str_167:
      0066A1 53 65 74 20 44 61 74 17353 	.ascii "Set Data Rate"
             61 20 52 61 74 65
      0066AE 0A                   17354 	.db 0x0a
      0066AF 00                   17355 	.db 0x00
                                  17356 	.area CSEG    (CODE)
                                  17357 	.area CONST   (CODE)
      0066B0                      17358 ___str_168:
      0066B0 0A                   17359 	.db 0x0a
      0066B1 0A                   17360 	.db 0x0a
      0066B2 0A                   17361 	.db 0x0a
      0066B3 0A                   17362 	.db 0x0a
      0066B4 20 50 6C 65 61 73 65 17363 	.ascii " Please disable"
             20 64 69 73 61 62 6C
             65
      0066C3 0A                   17364 	.db 0x0a
      0066C4 20 55 41 52 54 20 66 17365 	.ascii " UART first."
             69 72 73 74 2E
      0066D0 0A                   17366 	.db 0x0a
      0066D1 00                   17367 	.db 0x00
                                  17368 	.area CSEG    (CODE)
                                  17369 	.area CONST   (CODE)
      0066D2                      17370 ___str_169:
      0066D2 3C 32 3E 20          17371 	.ascii "<2> "
      0066D6 00                   17372 	.db 0x00
                                  17373 	.area CSEG    (CODE)
                                  17374 	.area CONST   (CODE)
      0066D7                      17375 ___str_170:
      0066D7 4E 75 6D 62 65 72 20 17376 	.ascii "Number of Bits"
             6F 66 20 42 69 74 73
      0066E5 0A                   17377 	.db 0x0a
      0066E6 00                   17378 	.db 0x00
                                  17379 	.area CSEG    (CODE)
                                  17380 	.area CONST   (CODE)
      0066E7                      17381 ___str_171:
      0066E7 28 38 20 6F 72 20 39 17382 	.ascii "(8 or 9 bits)"
             20 62 69 74 73 29
      0066F4 0A                   17383 	.db 0x0a
      0066F5 00                   17384 	.db 0x00
                                  17385 	.area CSEG    (CODE)
                                  17386 	.area CONST   (CODE)
      0066F6                      17387 ___str_172:
      0066F6 3C 33 3E 20          17388 	.ascii "<3> "
      0066FA 00                   17389 	.db 0x00
                                  17390 	.area CSEG    (CODE)
                                  17391 	.area CONST   (CODE)
      0066FB                      17392 ___str_173:
      0066FB 50 61 72 69 74 79 20 17393 	.ascii "Parity "
      006702 00                   17394 	.db 0x00
                                  17395 	.area CSEG    (CODE)
                                  17396 	.area CONST   (CODE)
      006703                      17397 ___str_174:
      006703 28 45 76 65 6E 2F    17398 	.ascii "(Even/"
      006709 0A                   17399 	.db 0x0a
      00670A 00                   17400 	.db 0x00
                                  17401 	.area CSEG    (CODE)
                                  17402 	.area CONST   (CODE)
      00670B                      17403 ___str_175:
      00670B 28 4F 64 64 2F 4E 6F 17404 	.ascii "(Odd/None)"
             6E 65 29
      006715 0A                   17405 	.db 0x0a
      006716 00                   17406 	.db 0x00
                                  17407 	.area CSEG    (CODE)
                                  17408 	.area CONST   (CODE)
      006717                      17409 ___str_176:
      006717 0A                   17410 	.db 0x0a
      006718 0A                   17411 	.db 0x0a
      006719 0A                   17412 	.db 0x0a
      00671A 0A                   17413 	.db 0x0a
      00671B 20 49 6E 63 6F 72 72 17414 	.ascii " Incorrect input"
             65 63 74 20 69 6E 70
             75 74
      00672B 0A                   17415 	.db 0x0a
      00672C 20 20 54 72 79 20 61 17416 	.ascii "  Try again."
             67 61 69 6E 2E
      006738 0A                   17417 	.db 0x0a
      006739 00                   17418 	.db 0x00
                                  17419 	.area CSEG    (CODE)
                                  17420 	.area CONST   (CODE)
      00673A                      17421 ___str_177:
      00673A 0A                   17422 	.db 0x0a
      00673B 20 44 69 73 61 62 6C 17423 	.ascii " Disabling UART..."
             69 6E 67 20 55 41 52
             54 2E 2E 2E
      00674D 0A                   17424 	.db 0x0a
      00674E 00                   17425 	.db 0x00
                                  17426 	.area CSEG    (CODE)
                                  17427 	.area CONST   (CODE)
      00674F                      17428 ___str_178:
      00674F 0A                   17429 	.db 0x0a
      006750 20 53 65 74 74 69 6E 17430 	.ascii " Settings Verified:"
             67 73 20 56 65 72 69
             66 69 65 64 3A
      006763 0A                   17431 	.db 0x0a
      006764 00                   17432 	.db 0x00
                                  17433 	.area CSEG    (CODE)
                                  17434 	.area CONST   (CODE)
      006765                      17435 ___str_179:
      006765 20 45 6E 61 62 6C 69 17436 	.ascii " Enabling UART..."
             6E 67 20 55 41 52 54
             2E 2E 2E
      006776 00                   17437 	.db 0x00
                                  17438 	.area CSEG    (CODE)
                                  17439 	.area CONST   (CODE)
      006777                      17440 ___str_180:
      006777 20 42 41 55 44 20 45 17441 	.ascii " BAUD ERROR"
             52 52 4F 52
      006782 0A                   17442 	.db 0x0a
      006783 00                   17443 	.db 0x00
                                  17444 	.area CSEG    (CODE)
                                  17445 	.area CONST   (CODE)
      006784                      17446 ___str_181:
      006784 20 45 6E 74 65 72 69 17447 	.ascii " Entering Baud..."
             6E 67 20 42 61 75 64
             2E 2E 2E
      006795 0A                   17448 	.db 0x0a
      006796 00                   17449 	.db 0x00
                                  17450 	.area CSEG    (CODE)
                                  17451 	.area CONST   (CODE)
      006797                      17452 ___str_182:
      006797 20 42 49 54 20 45 52 17453 	.ascii " BIT ERROR"
             52 4F 52
      0067A1 0A                   17454 	.db 0x0a
      0067A2 00                   17455 	.db 0x00
                                  17456 	.area CSEG    (CODE)
                                  17457 	.area CONST   (CODE)
      0067A3                      17458 ___str_183:
      0067A3 20 45 6E 74 65 72 69 17459 	.ascii " Entering Bits..."
             6E 67 20 42 69 74 73
             2E 2E 2E
      0067B4 0A                   17460 	.db 0x0a
      0067B5 00                   17461 	.db 0x00
                                  17462 	.area CSEG    (CODE)
                                  17463 	.area CONST   (CODE)
      0067B6                      17464 ___str_184:
      0067B6 20 50 41 52 49 54 59 17465 	.ascii " PARITY ERROR"
             20 45 52 52 4F 52
      0067C3 0A                   17466 	.db 0x0a
      0067C4 00                   17467 	.db 0x00
                                  17468 	.area CSEG    (CODE)
                                  17469 	.area CONST   (CODE)
      0067C5                      17470 ___str_185:
      0067C5 20 45 6E 74 65 72 69 17471 	.ascii " Entering Parity..."
             6E 67 20 50 61 72 69
             74 79 2E 2E 2E
      0067D8 0A                   17472 	.db 0x0a
      0067D9 00                   17473 	.db 0x00
                                  17474 	.area CSEG    (CODE)
                                  17475 	.area CONST   (CODE)
      0067DA                      17476 ___str_186:
      0067DA 20 3C 31 3E 20 31 32 17477 	.ascii " <1> 1200 Baud"
             30 30 20 42 61 75 64
      0067E8 0A                   17478 	.db 0x0a
      0067E9 00                   17479 	.db 0x00
                                  17480 	.area CSEG    (CODE)
                                  17481 	.area CONST   (CODE)
      0067EA                      17482 ___str_187:
      0067EA 20 3C 32 3E 20 32 34 17483 	.ascii " <2> 2400 Baud"
             30 30 20 42 61 75 64
      0067F8 0A                   17484 	.db 0x0a
      0067F9 00                   17485 	.db 0x00
                                  17486 	.area CSEG    (CODE)
                                  17487 	.area CONST   (CODE)
      0067FA                      17488 ___str_188:
      0067FA 20 3C 33 3E 20 34 38 17489 	.ascii " <3> 4800 Baud"
             30 30 20 42 61 75 64
      006808 0A                   17490 	.db 0x0a
      006809 00                   17491 	.db 0x00
                                  17492 	.area CSEG    (CODE)
                                  17493 	.area CONST   (CODE)
      00680A                      17494 ___str_189:
      00680A 20 3C 34 3E 20 39 36 17495 	.ascii " <4> 9600 Baud"
             30 30 20 42 61 75 64
      006818 0A                   17496 	.db 0x0a
      006819 00                   17497 	.db 0x00
                                  17498 	.area CSEG    (CODE)
                                  17499 	.area CONST   (CODE)
      00681A                      17500 ___str_190:
      00681A 20 3C 35 3E 20 31 39 17501 	.ascii " <5> 19200 Baud"
             32 30 30 20 42 61 75
             64
      006829 0A                   17502 	.db 0x0a
      00682A 00                   17503 	.db 0x00
                                  17504 	.area CSEG    (CODE)
                                  17505 	.area CONST   (CODE)
      00682B                      17506 ___str_191:
      00682B 31 32 30 30 20 42 61 17507 	.ascii "1200 Baud"
             75 64
      006834 0A                   17508 	.db 0x0a
      006835 00                   17509 	.db 0x00
                                  17510 	.area CSEG    (CODE)
                                  17511 	.area CONST   (CODE)
      006836                      17512 ___str_192:
      006836 32 34 30 30 20 42 61 17513 	.ascii "2400 Baud"
             75 64
      00683F 0A                   17514 	.db 0x0a
      006840 00                   17515 	.db 0x00
                                  17516 	.area CSEG    (CODE)
                                  17517 	.area CONST   (CODE)
      006841                      17518 ___str_193:
      006841 34 38 30 30 20 42 61 17519 	.ascii "4800 Baud"
             75 64
      00684A 0A                   17520 	.db 0x0a
      00684B 00                   17521 	.db 0x00
                                  17522 	.area CSEG    (CODE)
                                  17523 	.area CONST   (CODE)
      00684C                      17524 ___str_194:
      00684C 39 36 30 30 20 42 61 17525 	.ascii "9600 Baud"
             75 64
      006855 0A                   17526 	.db 0x0a
      006856 00                   17527 	.db 0x00
                                  17528 	.area CSEG    (CODE)
                                  17529 	.area CONST   (CODE)
      006857                      17530 ___str_195:
      006857 3C 35 3E 20          17531 	.ascii "<5> "
      00685B 00                   17532 	.db 0x00
                                  17533 	.area CSEG    (CODE)
                                  17534 	.area CONST   (CODE)
      00685C                      17535 ___str_196:
      00685C 31 39 32 30 30 20 42 17536 	.ascii "19200 Baud"
             61 75 64
      006866 0A                   17537 	.db 0x0a
      006867 00                   17538 	.db 0x00
                                  17539 	.area CSEG    (CODE)
                                  17540 	.area CONST   (CODE)
      006868                      17541 ___str_197:
      006868 20 49 4E 50 55 54 20 17542 	.ascii " INPUT ERROR"
             45 52 52 4F 52
      006874 00                   17543 	.db 0x00
                                  17544 	.area CSEG    (CODE)
                                  17545 	.area CONST   (CODE)
      006875                      17546 ___str_198:
      006875 20 3C 31 3E 20 38 2D 17547 	.ascii " <1> 8-bit Mode"
             62 69 74 20 4D 6F 64
             65
      006884 0A                   17548 	.db 0x0a
      006885 00                   17549 	.db 0x00
                                  17550 	.area CSEG    (CODE)
                                  17551 	.area CONST   (CODE)
      006886                      17552 ___str_199:
      006886 20 3C 32 3E 20 39 2D 17553 	.ascii " <2> 9-bit Mode"
             62 69 74 20 4D 6F 64
             65
      006895 0A                   17554 	.db 0x0a
      006896 00                   17555 	.db 0x00
                                  17556 	.area CSEG    (CODE)
                                  17557 	.area CONST   (CODE)
      006897                      17558 ___str_200:
      006897 38 2D 62 69 74 20 4D 17559 	.ascii "8-bit Mode"
             6F 64 65
      0068A1 0A                   17560 	.db 0x0a
      0068A2 00                   17561 	.db 0x00
                                  17562 	.area CSEG    (CODE)
                                  17563 	.area CONST   (CODE)
      0068A3                      17564 ___str_201:
      0068A3 39 2D 62 69 74 20 4D 17565 	.ascii "9-bit Mode"
             6F 64 65
      0068AD 0A                   17566 	.db 0x0a
      0068AE 00                   17567 	.db 0x00
                                  17568 	.area CSEG    (CODE)
                                  17569 	.area CONST   (CODE)
      0068AF                      17570 ___str_202:
      0068AF 0A                   17571 	.db 0x0a
      0068B0 20 50 6C 65 61 73 65 17572 	.ascii " Please set the"
             20 73 65 74 20 74 68
             65
      0068BF 0A                   17573 	.db 0x0a
      0068C0 20 20 62 69 74 20 6D 17574 	.ascii "  bit mode first."
             6F 64 65 20 66 69 72
             73 74 2E
      0068D1 0A                   17575 	.db 0x0a
      0068D2 00                   17576 	.db 0x00
                                  17577 	.area CSEG    (CODE)
                                  17578 	.area CONST   (CODE)
      0068D3                      17579 ___str_203:
      0068D3 20 3C 31 3E 20 45 76 17580 	.ascii " <1> Even Parity"
             65 6E 20 50 61 72 69
             74 79
      0068E3 0A                   17581 	.db 0x0a
      0068E4 00                   17582 	.db 0x00
                                  17583 	.area CSEG    (CODE)
                                  17584 	.area CONST   (CODE)
      0068E5                      17585 ___str_204:
      0068E5 20 3C 32 3E 20 4F 64 17586 	.ascii " <2> Odd Parity"
             64 20 50 61 72 69 74
             79
      0068F4 0A                   17587 	.db 0x0a
      0068F5 00                   17588 	.db 0x00
                                  17589 	.area CSEG    (CODE)
                                  17590 	.area CONST   (CODE)
      0068F6                      17591 ___str_205:
      0068F6 20 3C 33 3E 20 4E 6F 17592 	.ascii " <3> No Parity"
             20 50 61 72 69 74 79
      006904 00                   17593 	.db 0x00
                                  17594 	.area CSEG    (CODE)
                                  17595 	.area CONST   (CODE)
      006905                      17596 ___str_206:
      006905 45 76 65 6E 20 50 61 17597 	.ascii "Even Parity"
             72 69 74 79
      006910 0A                   17598 	.db 0x0a
      006911 00                   17599 	.db 0x00
                                  17600 	.area CSEG    (CODE)
                                  17601 	.area CONST   (CODE)
      006912                      17602 ___str_207:
      006912 4F 64 64 20 50 61 72 17603 	.ascii "Odd Parity"
             69 74 79
      00691C 0A                   17604 	.db 0x0a
      00691D 00                   17605 	.db 0x00
                                  17606 	.area CSEG    (CODE)
                                  17607 	.area CONST   (CODE)
      00691E                      17608 ___str_208:
      00691E 4E 6F 20 50 61 72 69 17609 	.ascii "No Parity"
             74 79
      006927 0A                   17610 	.db 0x0a
      006928 00                   17611 	.db 0x00
                                  17612 	.area CSEG    (CODE)
                                  17613 	.area CONST   (CODE)
      006929                      17614 ___str_209:
      006929 20 53 6F 6D 65 74 68 17615 	.ascii " Something is wrong."
             69 6E 67 20 69 73 20
             77 72 6F 6E 67 2E
      00693D 00                   17616 	.db 0x00
                                  17617 	.area CSEG    (CODE)
                                  17618 	.area CONST   (CODE)
      00693E                      17619 ___str_210:
      00693E 3C 44 3E             17620 	.ascii "<D>"
      006941 00                   17621 	.db 0x00
                                  17622 	.area CSEG    (CODE)
                                  17623 	.area CONST   (CODE)
      006942                      17624 ___str_211:
      006942 20 20 20 20 20 20 20 17625 	.ascii "          "
             20 20 20
      00694C 00                   17626 	.db 0x00
                                  17627 	.area CSEG    (CODE)
                                  17628 	.area CONST   (CODE)
      00694D                      17629 ___str_212:
      00694D 3C 42 3E             17630 	.ascii "<B>"
      006950 00                   17631 	.db 0x00
                                  17632 	.area CSEG    (CODE)
                                  17633 	.area CONST   (CODE)
      006951                      17634 ___str_213:
      006951 3C 45 3E             17635 	.ascii "<E>"
      006954 00                   17636 	.db 0x00
                                  17637 	.area CSEG    (CODE)
                                  17638 	.area CONST   (CODE)
      006955                      17639 ___str_214:
      006955 3C 46 3E             17640 	.ascii "<F>"
      006958 00                   17641 	.db 0x00
                                  17642 	.area CSEG    (CODE)
                                  17643 	.area CONST   (CODE)
      006959                      17644 ___str_215:
      006959 3C 43 3E             17645 	.ascii "<C>"
      00695C 00                   17646 	.db 0x00
                                  17647 	.area CSEG    (CODE)
                                  17648 	.area CONST   (CODE)
      00695D                      17649 ___str_216:
      00695D 3C 41 3E             17650 	.ascii "<A>"
      006960 00                   17651 	.db 0x00
                                  17652 	.area CSEG    (CODE)
                                  17653 	.area CONST   (CODE)
      006961                      17654 ___str_217:
      006961 3C 31 3E             17655 	.ascii "<1>"
      006964 00                   17656 	.db 0x00
                                  17657 	.area CSEG    (CODE)
                                  17658 	.area CONST   (CODE)
      006965                      17659 ___str_218:
      006965 49 4E 56 41 4C 49 44 17660 	.ascii "INVALID INPUT"
             20 49 4E 50 55 54
      006972 0A                   17661 	.db 0x0a
      006973 00                   17662 	.db 0x00
                                  17663 	.area CSEG    (CODE)
                                  17664 	.area CONST   (CODE)
      006974                      17665 ___str_219:
      006974 54 72 79 20 61 67 61 17666 	.ascii "Try again."
             69 6E 2E
      00697E 00                   17667 	.db 0x00
                                  17668 	.area CSEG    (CODE)
                                  17669 	.area CONST   (CODE)
      00697F                      17670 ___str_220:
      00697F 20 20 20 20 20 20 20 17671 	.ascii "               "
             20 20 20 20 20 20 20
             20
      00698E 0A                   17672 	.db 0x0a
      00698F 00                   17673 	.db 0x00
                                  17674 	.area CSEG    (CODE)
                                  17675 	.area XINIT   (CODE)
                                  17676 	.area CABS    (ABS,CODE)
